
spudglo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c478  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000264  0800c608  0800c608  0001c608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c86c  0800c86c  00020240  2**0
                  CONTENTS
  4 .ARM          00000008  0800c86c  0800c86c  0001c86c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c874  0800c874  00020240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c874  0800c874  0001c874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c878  0800c878  0001c878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000240  20000000  0800c87c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002e20  20000240  0800cabc  00020240  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003060  0800cabc  00023060  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020270  2**0
                  CONTENTS, READONLY
 13 .debug_info   00026cfb  00000000  00000000  000202b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005bb0  00000000  00000000  00046fae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000020c8  00000000  00000000  0004cb60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001994  00000000  00000000  0004ec28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a702  00000000  00000000  000505bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002b0fe  00000000  00000000  0007acbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f8f3d  00000000  00000000  000a5dbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009300  00000000  00000000  0019ecfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  001a7ffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000240 	.word	0x20000240
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c5f0 	.word	0x0800c5f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000244 	.word	0x20000244
 80001cc:	0800c5f0 	.word	0x0800c5f0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2f>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a14:	bf24      	itt	cs
 8000a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a1e:	d90d      	bls.n	8000a3c <__aeabi_d2f+0x30>
 8000a20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a34:	bf08      	it	eq
 8000a36:	f020 0001 	biceq.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a40:	d121      	bne.n	8000a86 <__aeabi_d2f+0x7a>
 8000a42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a46:	bfbc      	itt	lt
 8000a48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	4770      	bxlt	lr
 8000a4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a56:	f1c2 0218 	rsb	r2, r2, #24
 8000a5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a62:	fa20 f002 	lsr.w	r0, r0, r2
 8000a66:	bf18      	it	ne
 8000a68:	f040 0001 	orrne.w	r0, r0, #1
 8000a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a78:	ea40 000c 	orr.w	r0, r0, ip
 8000a7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a84:	e7cc      	b.n	8000a20 <__aeabi_d2f+0x14>
 8000a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a8a:	d107      	bne.n	8000a9c <__aeabi_d2f+0x90>
 8000a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a90:	bf1e      	ittt	ne
 8000a92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a9a:	4770      	bxne	lr
 8000a9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ac0:	f000 b970 	b.w	8000da4 <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9e08      	ldr	r6, [sp, #32]
 8000ae2:	460d      	mov	r5, r1
 8000ae4:	4604      	mov	r4, r0
 8000ae6:	460f      	mov	r7, r1
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d14a      	bne.n	8000b82 <__udivmoddi4+0xa6>
 8000aec:	428a      	cmp	r2, r1
 8000aee:	4694      	mov	ip, r2
 8000af0:	d965      	bls.n	8000bbe <__udivmoddi4+0xe2>
 8000af2:	fab2 f382 	clz	r3, r2
 8000af6:	b143      	cbz	r3, 8000b0a <__udivmoddi4+0x2e>
 8000af8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000afc:	f1c3 0220 	rsb	r2, r3, #32
 8000b00:	409f      	lsls	r7, r3
 8000b02:	fa20 f202 	lsr.w	r2, r0, r2
 8000b06:	4317      	orrs	r7, r2
 8000b08:	409c      	lsls	r4, r3
 8000b0a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b0e:	fa1f f58c 	uxth.w	r5, ip
 8000b12:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b16:	0c22      	lsrs	r2, r4, #16
 8000b18:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b1c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b20:	fb01 f005 	mul.w	r0, r1, r5
 8000b24:	4290      	cmp	r0, r2
 8000b26:	d90a      	bls.n	8000b3e <__udivmoddi4+0x62>
 8000b28:	eb1c 0202 	adds.w	r2, ip, r2
 8000b2c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000b30:	f080 811c 	bcs.w	8000d6c <__udivmoddi4+0x290>
 8000b34:	4290      	cmp	r0, r2
 8000b36:	f240 8119 	bls.w	8000d6c <__udivmoddi4+0x290>
 8000b3a:	3902      	subs	r1, #2
 8000b3c:	4462      	add	r2, ip
 8000b3e:	1a12      	subs	r2, r2, r0
 8000b40:	b2a4      	uxth	r4, r4
 8000b42:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b46:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b4a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b4e:	fb00 f505 	mul.w	r5, r0, r5
 8000b52:	42a5      	cmp	r5, r4
 8000b54:	d90a      	bls.n	8000b6c <__udivmoddi4+0x90>
 8000b56:	eb1c 0404 	adds.w	r4, ip, r4
 8000b5a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000b5e:	f080 8107 	bcs.w	8000d70 <__udivmoddi4+0x294>
 8000b62:	42a5      	cmp	r5, r4
 8000b64:	f240 8104 	bls.w	8000d70 <__udivmoddi4+0x294>
 8000b68:	4464      	add	r4, ip
 8000b6a:	3802      	subs	r0, #2
 8000b6c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b70:	1b64      	subs	r4, r4, r5
 8000b72:	2100      	movs	r1, #0
 8000b74:	b11e      	cbz	r6, 8000b7e <__udivmoddi4+0xa2>
 8000b76:	40dc      	lsrs	r4, r3
 8000b78:	2300      	movs	r3, #0
 8000b7a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b82:	428b      	cmp	r3, r1
 8000b84:	d908      	bls.n	8000b98 <__udivmoddi4+0xbc>
 8000b86:	2e00      	cmp	r6, #0
 8000b88:	f000 80ed 	beq.w	8000d66 <__udivmoddi4+0x28a>
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b92:	4608      	mov	r0, r1
 8000b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b98:	fab3 f183 	clz	r1, r3
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	d149      	bne.n	8000c34 <__udivmoddi4+0x158>
 8000ba0:	42ab      	cmp	r3, r5
 8000ba2:	d302      	bcc.n	8000baa <__udivmoddi4+0xce>
 8000ba4:	4282      	cmp	r2, r0
 8000ba6:	f200 80f8 	bhi.w	8000d9a <__udivmoddi4+0x2be>
 8000baa:	1a84      	subs	r4, r0, r2
 8000bac:	eb65 0203 	sbc.w	r2, r5, r3
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	4617      	mov	r7, r2
 8000bb4:	2e00      	cmp	r6, #0
 8000bb6:	d0e2      	beq.n	8000b7e <__udivmoddi4+0xa2>
 8000bb8:	e9c6 4700 	strd	r4, r7, [r6]
 8000bbc:	e7df      	b.n	8000b7e <__udivmoddi4+0xa2>
 8000bbe:	b902      	cbnz	r2, 8000bc2 <__udivmoddi4+0xe6>
 8000bc0:	deff      	udf	#255	; 0xff
 8000bc2:	fab2 f382 	clz	r3, r2
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	f040 8090 	bne.w	8000cec <__udivmoddi4+0x210>
 8000bcc:	1a8a      	subs	r2, r1, r2
 8000bce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bd2:	fa1f fe8c 	uxth.w	lr, ip
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000bdc:	fb07 2015 	mls	r0, r7, r5, r2
 8000be0:	0c22      	lsrs	r2, r4, #16
 8000be2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000be6:	fb0e f005 	mul.w	r0, lr, r5
 8000bea:	4290      	cmp	r0, r2
 8000bec:	d908      	bls.n	8000c00 <__udivmoddi4+0x124>
 8000bee:	eb1c 0202 	adds.w	r2, ip, r2
 8000bf2:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000bf6:	d202      	bcs.n	8000bfe <__udivmoddi4+0x122>
 8000bf8:	4290      	cmp	r0, r2
 8000bfa:	f200 80cb 	bhi.w	8000d94 <__udivmoddi4+0x2b8>
 8000bfe:	4645      	mov	r5, r8
 8000c00:	1a12      	subs	r2, r2, r0
 8000c02:	b2a4      	uxth	r4, r4
 8000c04:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c08:	fb07 2210 	mls	r2, r7, r0, r2
 8000c0c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c10:	fb0e fe00 	mul.w	lr, lr, r0
 8000c14:	45a6      	cmp	lr, r4
 8000c16:	d908      	bls.n	8000c2a <__udivmoddi4+0x14e>
 8000c18:	eb1c 0404 	adds.w	r4, ip, r4
 8000c1c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c20:	d202      	bcs.n	8000c28 <__udivmoddi4+0x14c>
 8000c22:	45a6      	cmp	lr, r4
 8000c24:	f200 80bb 	bhi.w	8000d9e <__udivmoddi4+0x2c2>
 8000c28:	4610      	mov	r0, r2
 8000c2a:	eba4 040e 	sub.w	r4, r4, lr
 8000c2e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c32:	e79f      	b.n	8000b74 <__udivmoddi4+0x98>
 8000c34:	f1c1 0720 	rsb	r7, r1, #32
 8000c38:	408b      	lsls	r3, r1
 8000c3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c42:	fa05 f401 	lsl.w	r4, r5, r1
 8000c46:	fa20 f307 	lsr.w	r3, r0, r7
 8000c4a:	40fd      	lsrs	r5, r7
 8000c4c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c50:	4323      	orrs	r3, r4
 8000c52:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c56:	fa1f fe8c 	uxth.w	lr, ip
 8000c5a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c5e:	0c1c      	lsrs	r4, r3, #16
 8000c60:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c64:	fb08 f50e 	mul.w	r5, r8, lr
 8000c68:	42a5      	cmp	r5, r4
 8000c6a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c6e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c72:	d90b      	bls.n	8000c8c <__udivmoddi4+0x1b0>
 8000c74:	eb1c 0404 	adds.w	r4, ip, r4
 8000c78:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000c7c:	f080 8088 	bcs.w	8000d90 <__udivmoddi4+0x2b4>
 8000c80:	42a5      	cmp	r5, r4
 8000c82:	f240 8085 	bls.w	8000d90 <__udivmoddi4+0x2b4>
 8000c86:	f1a8 0802 	sub.w	r8, r8, #2
 8000c8a:	4464      	add	r4, ip
 8000c8c:	1b64      	subs	r4, r4, r5
 8000c8e:	b29d      	uxth	r5, r3
 8000c90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c94:	fb09 4413 	mls	r4, r9, r3, r4
 8000c98:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c9c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ca0:	45a6      	cmp	lr, r4
 8000ca2:	d908      	bls.n	8000cb6 <__udivmoddi4+0x1da>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000cac:	d26c      	bcs.n	8000d88 <__udivmoddi4+0x2ac>
 8000cae:	45a6      	cmp	lr, r4
 8000cb0:	d96a      	bls.n	8000d88 <__udivmoddi4+0x2ac>
 8000cb2:	3b02      	subs	r3, #2
 8000cb4:	4464      	add	r4, ip
 8000cb6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cba:	fba3 9502 	umull	r9, r5, r3, r2
 8000cbe:	eba4 040e 	sub.w	r4, r4, lr
 8000cc2:	42ac      	cmp	r4, r5
 8000cc4:	46c8      	mov	r8, r9
 8000cc6:	46ae      	mov	lr, r5
 8000cc8:	d356      	bcc.n	8000d78 <__udivmoddi4+0x29c>
 8000cca:	d053      	beq.n	8000d74 <__udivmoddi4+0x298>
 8000ccc:	b156      	cbz	r6, 8000ce4 <__udivmoddi4+0x208>
 8000cce:	ebb0 0208 	subs.w	r2, r0, r8
 8000cd2:	eb64 040e 	sbc.w	r4, r4, lr
 8000cd6:	fa04 f707 	lsl.w	r7, r4, r7
 8000cda:	40ca      	lsrs	r2, r1
 8000cdc:	40cc      	lsrs	r4, r1
 8000cde:	4317      	orrs	r7, r2
 8000ce0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cec:	f1c3 0120 	rsb	r1, r3, #32
 8000cf0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cf4:	fa20 f201 	lsr.w	r2, r0, r1
 8000cf8:	fa25 f101 	lsr.w	r1, r5, r1
 8000cfc:	409d      	lsls	r5, r3
 8000cfe:	432a      	orrs	r2, r5
 8000d00:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d04:	fa1f fe8c 	uxth.w	lr, ip
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1510 	mls	r5, r7, r0, r1
 8000d10:	0c11      	lsrs	r1, r2, #16
 8000d12:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d16:	fb00 f50e 	mul.w	r5, r0, lr
 8000d1a:	428d      	cmp	r5, r1
 8000d1c:	fa04 f403 	lsl.w	r4, r4, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x258>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000d2a:	d22f      	bcs.n	8000d8c <__udivmoddi4+0x2b0>
 8000d2c:	428d      	cmp	r5, r1
 8000d2e:	d92d      	bls.n	8000d8c <__udivmoddi4+0x2b0>
 8000d30:	3802      	subs	r0, #2
 8000d32:	4461      	add	r1, ip
 8000d34:	1b49      	subs	r1, r1, r5
 8000d36:	b292      	uxth	r2, r2
 8000d38:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d3c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d44:	fb05 f10e 	mul.w	r1, r5, lr
 8000d48:	4291      	cmp	r1, r2
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x282>
 8000d4c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d50:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d54:	d216      	bcs.n	8000d84 <__udivmoddi4+0x2a8>
 8000d56:	4291      	cmp	r1, r2
 8000d58:	d914      	bls.n	8000d84 <__udivmoddi4+0x2a8>
 8000d5a:	3d02      	subs	r5, #2
 8000d5c:	4462      	add	r2, ip
 8000d5e:	1a52      	subs	r2, r2, r1
 8000d60:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d64:	e738      	b.n	8000bd8 <__udivmoddi4+0xfc>
 8000d66:	4631      	mov	r1, r6
 8000d68:	4630      	mov	r0, r6
 8000d6a:	e708      	b.n	8000b7e <__udivmoddi4+0xa2>
 8000d6c:	4639      	mov	r1, r7
 8000d6e:	e6e6      	b.n	8000b3e <__udivmoddi4+0x62>
 8000d70:	4610      	mov	r0, r2
 8000d72:	e6fb      	b.n	8000b6c <__udivmoddi4+0x90>
 8000d74:	4548      	cmp	r0, r9
 8000d76:	d2a9      	bcs.n	8000ccc <__udivmoddi4+0x1f0>
 8000d78:	ebb9 0802 	subs.w	r8, r9, r2
 8000d7c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d80:	3b01      	subs	r3, #1
 8000d82:	e7a3      	b.n	8000ccc <__udivmoddi4+0x1f0>
 8000d84:	4645      	mov	r5, r8
 8000d86:	e7ea      	b.n	8000d5e <__udivmoddi4+0x282>
 8000d88:	462b      	mov	r3, r5
 8000d8a:	e794      	b.n	8000cb6 <__udivmoddi4+0x1da>
 8000d8c:	4640      	mov	r0, r8
 8000d8e:	e7d1      	b.n	8000d34 <__udivmoddi4+0x258>
 8000d90:	46d0      	mov	r8, sl
 8000d92:	e77b      	b.n	8000c8c <__udivmoddi4+0x1b0>
 8000d94:	3d02      	subs	r5, #2
 8000d96:	4462      	add	r2, ip
 8000d98:	e732      	b.n	8000c00 <__udivmoddi4+0x124>
 8000d9a:	4608      	mov	r0, r1
 8000d9c:	e70a      	b.n	8000bb4 <__udivmoddi4+0xd8>
 8000d9e:	4464      	add	r4, ip
 8000da0:	3802      	subs	r0, #2
 8000da2:	e742      	b.n	8000c2a <__udivmoddi4+0x14e>

08000da4 <__aeabi_idiv0>:
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop

08000da8 <current_monitor_set>:
float g_absolute_max_current_ratio = 0.0f; // DO NOT EXCEED!
p_current_t gp_current_monitor_strip[NUM_STRIPS];


void current_monitor_set(float value)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	ed87 0a01 	vstr	s0, [r7, #4]
    if (value < g_absolute_max_current_ratio)
 8000db2:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <current_monitor_set+0x3c>)
 8000db4:	edd3 7a00 	vldr	s15, [r3]
 8000db8:	ed97 7a01 	vldr	s14, [r7, #4]
 8000dbc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dc4:	d503      	bpl.n	8000dce <current_monitor_set+0x26>
    {
        g_max_current_ratio = value;
 8000dc6:	4a08      	ldr	r2, [pc, #32]	; (8000de8 <current_monitor_set+0x40>)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6013      	str	r3, [r2, #0]
    }
    else
    {
        g_max_current_ratio = g_absolute_max_current_ratio;
    }
}
 8000dcc:	e003      	b.n	8000dd6 <current_monitor_set+0x2e>
        g_max_current_ratio = g_absolute_max_current_ratio;
 8000dce:	4b05      	ldr	r3, [pc, #20]	; (8000de4 <current_monitor_set+0x3c>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a05      	ldr	r2, [pc, #20]	; (8000de8 <current_monitor_set+0x40>)
 8000dd4:	6013      	str	r3, [r2, #0]
}
 8000dd6:	bf00      	nop
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	2000025c 	.word	0x2000025c
 8000de8:	20000000 	.word	0x20000000

08000dec <current_monitor_ratio>:


float current_monitor_ratio(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
    return g_max_current_ratio;
 8000df0:	4b04      	ldr	r3, [pc, #16]	; (8000e04 <current_monitor_ratio+0x18>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	ee07 3a90 	vmov	s15, r3
}
 8000df8:	eeb0 0a67 	vmov.f32	s0, s15
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	20000000 	.word	0x20000000

08000e08 <current_monitor_init>:


void current_monitor_init(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
    while ((g_max_current_ratio * ((float)CURRENT_MONITOR_MAX_CURRENT_PER_LED_MA / 1000) * NUM_LEDS) > (float)CURRENT_MONITOR_MAX_CURRENT_DRAW_A)
 8000e0c:	e009      	b.n	8000e22 <current_monitor_init+0x1a>
    {
        g_max_current_ratio -= 0.05f;
 8000e0e:	4b17      	ldr	r3, [pc, #92]	; (8000e6c <current_monitor_init+0x64>)
 8000e10:	edd3 7a00 	vldr	s15, [r3]
 8000e14:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8000e70 <current_monitor_init+0x68>
 8000e18:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000e1c:	4b13      	ldr	r3, [pc, #76]	; (8000e6c <current_monitor_init+0x64>)
 8000e1e:	edc3 7a00 	vstr	s15, [r3]
    while ((g_max_current_ratio * ((float)CURRENT_MONITOR_MAX_CURRENT_PER_LED_MA / 1000) * NUM_LEDS) > (float)CURRENT_MONITOR_MAX_CURRENT_DRAW_A)
 8000e22:	4b12      	ldr	r3, [pc, #72]	; (8000e6c <current_monitor_init+0x64>)
 8000e24:	edd3 7a00 	vldr	s15, [r3]
 8000e28:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8000e74 <current_monitor_init+0x6c>
 8000e2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e30:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8000e34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e38:	eeb2 7a03 	vmov.f32	s14, #35	; 0x41180000  9.5
 8000e3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e44:	dce3      	bgt.n	8000e0e <current_monitor_init+0x6>
    }
    if (g_max_current_ratio <= 0) while(1); // broken..
 8000e46:	4b09      	ldr	r3, [pc, #36]	; (8000e6c <current_monitor_init+0x64>)
 8000e48:	edd3 7a00 	vldr	s15, [r3]
 8000e4c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e54:	d800      	bhi.n	8000e58 <current_monitor_init+0x50>
 8000e56:	e7fe      	b.n	8000e56 <current_monitor_init+0x4e>
    g_absolute_max_current_ratio = g_max_current_ratio;
 8000e58:	4b04      	ldr	r3, [pc, #16]	; (8000e6c <current_monitor_init+0x64>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a06      	ldr	r2, [pc, #24]	; (8000e78 <current_monitor_init+0x70>)
 8000e5e:	6013      	str	r3, [r2, #0]
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	20000000 	.word	0x20000000
 8000e70:	3d4ccccd 	.word	0x3d4ccccd
 8000e74:	3d23d70a 	.word	0x3d23d70a
 8000e78:	2000025c 	.word	0x2000025c

08000e7c <animate_led_show_strip>:
 * @brief   Write data stored in `gp_ws28128b_strip` array to the strip
 * @param   strip_mask - the strip to write to
 * @return  void
 */
void animate_led_show_strip(const strip_mask_t strip_mask)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	80fb      	strh	r3, [r7, #6]
    if (strip_mask & STRIP_BIT_1)
 8000e86:	88fb      	ldrh	r3, [r7, #6]
 8000e88:	f003 0301 	and.w	r3, r3, #1
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <animate_led_show_strip+0x18>
    {
        ws2812b_show_strip_one();
 8000e90:	f001 f854 	bl	8001f3c <ws2812b_show_strip_one>
    {
        // STRIP_BIT_3
        ws2812b_show_strip_three();
    }
#endif
}
 8000e94:	bf00      	nop
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <animate_led_set_pixel>:


void animate_led_set_pixel(const strip_mask_t mask, const uint16_t pixel, const uint8_t red, const uint8_t green,
                           const uint8_t blue)
{
 8000e9c:	b590      	push	{r4, r7, lr}
 8000e9e:	b087      	sub	sp, #28
 8000ea0:	af02      	add	r7, sp, #8
 8000ea2:	4604      	mov	r4, r0
 8000ea4:	4608      	mov	r0, r1
 8000ea6:	4611      	mov	r1, r2
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	4623      	mov	r3, r4
 8000eac:	80fb      	strh	r3, [r7, #6]
 8000eae:	4603      	mov	r3, r0
 8000eb0:	80bb      	strh	r3, [r7, #4]
 8000eb2:	460b      	mov	r3, r1
 8000eb4:	70fb      	strb	r3, [r7, #3]
 8000eb6:	4613      	mov	r3, r2
 8000eb8:	70bb      	strb	r3, [r7, #2]
    if (STRIP_BIT_ALL_SET == mask)
 8000eba:	88fb      	ldrh	r3, [r7, #6]
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d11c      	bne.n	8000efa <animate_led_set_pixel+0x5e>
    {
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	73fb      	strb	r3, [r7, #15]
 8000ec4:	e015      	b.n	8000ef2 <animate_led_set_pixel+0x56>
        {
            //offset = animate_led_get_strip_offset(strip_bit);
            if (ws2812_pixel_is_in_strip_range(strip_bit, pixel)) ws2812b_set_led(strip_bit, pixel, red, green, blue);
 8000ec6:	88ba      	ldrh	r2, [r7, #4]
 8000ec8:	7bfb      	ldrb	r3, [r7, #15]
 8000eca:	4611      	mov	r1, r2
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f000 fe95 	bl	8001bfc <ws2812_pixel_is_in_strip_range>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d009      	beq.n	8000eec <animate_led_set_pixel+0x50>
 8000ed8:	78bc      	ldrb	r4, [r7, #2]
 8000eda:	78fa      	ldrb	r2, [r7, #3]
 8000edc:	88b9      	ldrh	r1, [r7, #4]
 8000ede:	7bf8      	ldrb	r0, [r7, #15]
 8000ee0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000ee4:	9300      	str	r3, [sp, #0]
 8000ee6:	4623      	mov	r3, r4
 8000ee8:	f000 fea2 	bl	8001c30 <ws2812b_set_led>
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000eec:	7bfb      	ldrb	r3, [r7, #15]
 8000eee:	3301      	adds	r3, #1
 8000ef0:	73fb      	strb	r3, [r7, #15]
 8000ef2:	7bfb      	ldrb	r3, [r7, #15]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d9e6      	bls.n	8000ec6 <animate_led_set_pixel+0x2a>
                if (ws2812_pixel_is_in_strip_range(strip_bit, pixel)) ws2812b_set_led(strip_bit, pixel, red, green, blue);
            }
        }
    }
    //animate_led_show_strip(mask);
}
 8000ef8:	e020      	b.n	8000f3c <animate_led_set_pixel+0xa0>
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000efa:	2301      	movs	r3, #1
 8000efc:	73bb      	strb	r3, [r7, #14]
 8000efe:	e01a      	b.n	8000f36 <animate_led_set_pixel+0x9a>
            if (mask & strip_bit)
 8000f00:	88fa      	ldrh	r2, [r7, #6]
 8000f02:	7bbb      	ldrb	r3, [r7, #14]
 8000f04:	4013      	ands	r3, r2
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d012      	beq.n	8000f30 <animate_led_set_pixel+0x94>
                if (ws2812_pixel_is_in_strip_range(strip_bit, pixel)) ws2812b_set_led(strip_bit, pixel, red, green, blue);
 8000f0a:	88ba      	ldrh	r2, [r7, #4]
 8000f0c:	7bbb      	ldrb	r3, [r7, #14]
 8000f0e:	4611      	mov	r1, r2
 8000f10:	4618      	mov	r0, r3
 8000f12:	f000 fe73 	bl	8001bfc <ws2812_pixel_is_in_strip_range>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d009      	beq.n	8000f30 <animate_led_set_pixel+0x94>
 8000f1c:	78bc      	ldrb	r4, [r7, #2]
 8000f1e:	78fa      	ldrb	r2, [r7, #3]
 8000f20:	88b9      	ldrh	r1, [r7, #4]
 8000f22:	7bb8      	ldrb	r0, [r7, #14]
 8000f24:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f28:	9300      	str	r3, [sp, #0]
 8000f2a:	4623      	mov	r3, r4
 8000f2c:	f000 fe80 	bl	8001c30 <ws2812b_set_led>
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000f30:	7bbb      	ldrb	r3, [r7, #14]
 8000f32:	3301      	adds	r3, #1
 8000f34:	73bb      	strb	r3, [r7, #14]
 8000f36:	7bbb      	ldrb	r3, [r7, #14]
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d9e1      	bls.n	8000f00 <animate_led_set_pixel+0x64>
}
 8000f3c:	bf00      	nop
 8000f3e:	3714      	adds	r7, #20
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd90      	pop	{r4, r7, pc}

08000f44 <animate_led_set_all_pixels>:


void animate_led_set_all_pixels(const strip_mask_t mask, const uint8_t red, const uint8_t green, const uint8_t blue)
{
 8000f44:	b590      	push	{r4, r7, lr}
 8000f46:	b089      	sub	sp, #36	; 0x24
 8000f48:	af02      	add	r7, sp, #8
 8000f4a:	4604      	mov	r4, r0
 8000f4c:	4608      	mov	r0, r1
 8000f4e:	4611      	mov	r1, r2
 8000f50:	461a      	mov	r2, r3
 8000f52:	4623      	mov	r3, r4
 8000f54:	80fb      	strh	r3, [r7, #6]
 8000f56:	4603      	mov	r3, r0
 8000f58:	717b      	strb	r3, [r7, #5]
 8000f5a:	460b      	mov	r3, r1
 8000f5c:	713b      	strb	r3, [r7, #4]
 8000f5e:	4613      	mov	r3, r2
 8000f60:	70fb      	strb	r3, [r7, #3]
    uint16_t strip_size = 0;
 8000f62:	2300      	movs	r3, #0
 8000f64:	81fb      	strh	r3, [r7, #14]
    if (mask == g_all_strip_mask)
 8000f66:	4b2b      	ldr	r3, [pc, #172]	; (8001014 <animate_led_set_all_pixels+0xd0>)
 8000f68:	881b      	ldrh	r3, [r3, #0]
 8000f6a:	88fa      	ldrh	r2, [r7, #6]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d122      	bne.n	8000fb6 <animate_led_set_all_pixels+0x72>
    {
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000f70:	2301      	movs	r3, #1
 8000f72:	75fb      	strb	r3, [r7, #23]
 8000f74:	e01b      	b.n	8000fae <animate_led_set_all_pixels+0x6a>
        {
            strip_size = ws2812_get_strip_size(strip_bit);
 8000f76:	7dfb      	ldrb	r3, [r7, #23]
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f000 fddb 	bl	8001b34 <ws2812_get_strip_size>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	81fb      	strh	r3, [r7, #14]
            //offset = animate_led_get_strip_offset(strip_bit);
            for (uint16_t iii = 0; iii < strip_size; iii++) ws2812b_set_led(strip_bit, iii, red, green, blue);
 8000f82:	2300      	movs	r3, #0
 8000f84:	82bb      	strh	r3, [r7, #20]
 8000f86:	e00b      	b.n	8000fa0 <animate_led_set_all_pixels+0x5c>
 8000f88:	793c      	ldrb	r4, [r7, #4]
 8000f8a:	797a      	ldrb	r2, [r7, #5]
 8000f8c:	8ab9      	ldrh	r1, [r7, #20]
 8000f8e:	7df8      	ldrb	r0, [r7, #23]
 8000f90:	78fb      	ldrb	r3, [r7, #3]
 8000f92:	9300      	str	r3, [sp, #0]
 8000f94:	4623      	mov	r3, r4
 8000f96:	f000 fe4b 	bl	8001c30 <ws2812b_set_led>
 8000f9a:	8abb      	ldrh	r3, [r7, #20]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	82bb      	strh	r3, [r7, #20]
 8000fa0:	8aba      	ldrh	r2, [r7, #20]
 8000fa2:	89fb      	ldrh	r3, [r7, #14]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d3ef      	bcc.n	8000f88 <animate_led_set_all_pixels+0x44>
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000fa8:	7dfb      	ldrb	r3, [r7, #23]
 8000faa:	3301      	adds	r3, #1
 8000fac:	75fb      	strb	r3, [r7, #23]
 8000fae:	7dfb      	ldrb	r3, [r7, #23]
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d9e0      	bls.n	8000f76 <animate_led_set_all_pixels+0x32>
 8000fb4:	e026      	b.n	8001004 <animate_led_set_all_pixels+0xc0>
        }
    }
    else
    {
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	74fb      	strb	r3, [r7, #19]
 8000fba:	e020      	b.n	8000ffe <animate_led_set_all_pixels+0xba>
        {
            if (mask & strip_bit)
 8000fbc:	88fa      	ldrh	r2, [r7, #6]
 8000fbe:	7cfb      	ldrb	r3, [r7, #19]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d018      	beq.n	8000ff8 <animate_led_set_all_pixels+0xb4>
            {
                strip_size = ws2812_get_strip_size(strip_bit);
 8000fc6:	7cfb      	ldrb	r3, [r7, #19]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f000 fdb3 	bl	8001b34 <ws2812_get_strip_size>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	81fb      	strh	r3, [r7, #14]
                for (uint16_t yyy = 0; yyy < strip_size; yyy++) ws2812b_set_led(strip_bit, yyy, red, green, blue);
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	823b      	strh	r3, [r7, #16]
 8000fd6:	e00b      	b.n	8000ff0 <animate_led_set_all_pixels+0xac>
 8000fd8:	793c      	ldrb	r4, [r7, #4]
 8000fda:	797a      	ldrb	r2, [r7, #5]
 8000fdc:	8a39      	ldrh	r1, [r7, #16]
 8000fde:	7cf8      	ldrb	r0, [r7, #19]
 8000fe0:	78fb      	ldrb	r3, [r7, #3]
 8000fe2:	9300      	str	r3, [sp, #0]
 8000fe4:	4623      	mov	r3, r4
 8000fe6:	f000 fe23 	bl	8001c30 <ws2812b_set_led>
 8000fea:	8a3b      	ldrh	r3, [r7, #16]
 8000fec:	3301      	adds	r3, #1
 8000fee:	823b      	strh	r3, [r7, #16]
 8000ff0:	8a3a      	ldrh	r2, [r7, #16]
 8000ff2:	89fb      	ldrh	r3, [r7, #14]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d3ef      	bcc.n	8000fd8 <animate_led_set_all_pixels+0x94>
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000ff8:	7cfb      	ldrb	r3, [r7, #19]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	74fb      	strb	r3, [r7, #19]
 8000ffe:	7cfb      	ldrb	r3, [r7, #19]
 8001000:	2b01      	cmp	r3, #1
 8001002:	d9db      	bls.n	8000fbc <animate_led_set_all_pixels+0x78>
            }
        }
    }
    animate_led_show_strip(mask);
 8001004:	88fb      	ldrh	r3, [r7, #6]
 8001006:	4618      	mov	r0, r3
 8001008:	f7ff ff38 	bl	8000e7c <animate_led_show_strip>
}
 800100c:	bf00      	nop
 800100e:	371c      	adds	r7, #28
 8001010:	46bd      	mov	sp, r7
 8001012:	bd90      	pop	{r4, r7, pc}
 8001014:	200002a2 	.word	0x200002a2

08001018 <animate_led_solid_custom_color>:
	}
}


void animate_led_solid_custom_color(const strip_mask_t mask_solid, const color_hex_code_e color_solid)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	6039      	str	r1, [r7, #0]
 8001022:	80fb      	strh	r3, [r7, #6]
    uint8_t color_solid_rgb[sizeof(ws2812b_led_t)] = {0};
 8001024:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <animate_led_solid_custom_color+0x40>)
 8001026:	881b      	ldrh	r3, [r3, #0]
 8001028:	81bb      	strh	r3, [r7, #12]
 800102a:	2300      	movs	r3, #0
 800102c:	73bb      	strb	r3, [r7, #14]
    color_led_hex_to_rgb(color_solid, color_solid_rgb);
 800102e:	f107 030c 	add.w	r3, r7, #12
 8001032:	4619      	mov	r1, r3
 8001034:	6838      	ldr	r0, [r7, #0]
 8001036:	f000 fcf7 	bl	8001a28 <color_led_hex_to_rgb>
    animate_led_set_all_pixels(mask_solid, color_solid_rgb[offsetof(ws2812b_led_t, red)],
 800103a:	7b39      	ldrb	r1, [r7, #12]
 800103c:	7b7a      	ldrb	r2, [r7, #13]
 800103e:	7bbb      	ldrb	r3, [r7, #14]
 8001040:	88f8      	ldrh	r0, [r7, #6]
 8001042:	f7ff ff7f 	bl	8000f44 <animate_led_set_all_pixels>
                               color_solid_rgb[offsetof(ws2812b_led_t, green)],
                               color_solid_rgb[offsetof(ws2812b_led_t, blue)]);
    animate_led_show_strip(mask_solid);
 8001046:	88fb      	ldrh	r3, [r7, #6]
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff ff17 	bl	8000e7c <animate_led_show_strip>
}
 800104e:	bf00      	nop
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	0800c608 	.word	0x0800c608

0800105c <animate_led_turn_all_pixels_off>:
 * @param   void
 * @return  void
 * @note    This function will set `gp_ws28128b_strip` array and write it to the strip(s).
 */
void animate_led_turn_all_pixels_off(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
	animate_led_set_all_pixels((strip_mask_t)STRIP_BIT_ALL_SET, 0, 0, 0);
 8001060:	2300      	movs	r3, #0
 8001062:	2200      	movs	r2, #0
 8001064:	2100      	movs	r1, #0
 8001066:	2001      	movs	r0, #1
 8001068:	f7ff ff6c 	bl	8000f44 <animate_led_set_all_pixels>
}
 800106c:	bf00      	nop
 800106e:	bd80      	pop	{r7, pc}

08001070 <animate_led_only_spell_word>:
}


void animate_led_only_spell_word(const strip_mask_t mask_spell, const color_hex_code_e color_spell,
                                 const uint16_t time_ms)
{
 8001070:	b590      	push	{r4, r7, lr}
 8001072:	ed2d 8b02 	vpush	{d8}
 8001076:	b089      	sub	sp, #36	; 0x24
 8001078:	af02      	add	r7, sp, #8
 800107a:	4603      	mov	r3, r0
 800107c:	6039      	str	r1, [r7, #0]
 800107e:	80fb      	strh	r3, [r7, #6]
 8001080:	4613      	mov	r3, r2
 8001082:	80bb      	strh	r3, [r7, #4]
	uint16_t strip_size = ws2812_led_get_max_strip_size(mask_spell);
 8001084:	88fb      	ldrh	r3, [r7, #6]
 8001086:	4618      	mov	r0, r3
 8001088:	f000 fd96 	bl	8001bb8 <ws2812_led_get_max_strip_size>
 800108c:	4603      	mov	r3, r0
 800108e:	827b      	strh	r3, [r7, #18]
    uint8_t color_spell_rgb[sizeof(ws2812b_led_t)] = {0};
 8001090:	4b26      	ldr	r3, [pc, #152]	; (800112c <animate_led_only_spell_word+0xbc>)
 8001092:	881b      	ldrh	r3, [r3, #0]
 8001094:	81bb      	strh	r3, [r7, #12]
 8001096:	2300      	movs	r3, #0
 8001098:	73bb      	strb	r3, [r7, #14]
    color_led_hex_to_rgb(color_spell, color_spell_rgb);
 800109a:	f107 030c 	add.w	r3, r7, #12
 800109e:	4619      	mov	r1, r3
 80010a0:	6838      	ldr	r0, [r7, #0]
 80010a2:	f000 fcc1 	bl	8001a28 <color_led_hex_to_rgb>
	for (int i = 0; i < strip_size; i++)
 80010a6:	2300      	movs	r3, #0
 80010a8:	617b      	str	r3, [r7, #20]
 80010aa:	e034      	b.n	8001116 <animate_led_only_spell_word+0xa6>
	{
        if (task_button_press_interrupt_occurred())
 80010ac:	f000 ff4c 	bl	8001f48 <task_button_press_interrupt_occurred>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d00d      	beq.n	80010d2 <animate_led_only_spell_word+0x62>
        {
            if (task_button_press_check_interrupts(&color_spell_rgb[offsetof(ws2812b_led_t, red)], &color_spell_rgb[offsetof(ws2812b_led_t, green)], &color_spell_rgb[offsetof(ws2812b_led_t, blue)]))
 80010b6:	f107 030c 	add.w	r3, r7, #12
 80010ba:	1c9a      	adds	r2, r3, #2
 80010bc:	f107 030c 	add.w	r3, r7, #12
 80010c0:	1c59      	adds	r1, r3, #1
 80010c2:	f107 030c 	add.w	r3, r7, #12
 80010c6:	4618      	mov	r0, r3
 80010c8:	f000 ffa2 	bl	8002010 <task_button_press_check_interrupts>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d126      	bne.n	8001120 <animate_led_only_spell_word+0xb0>
            {
                return;
            }
        }
        animate_led_set_pixel(mask_spell, i,
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	b299      	uxth	r1, r3
 80010d6:	7b3a      	ldrb	r2, [r7, #12]
 80010d8:	7b7c      	ldrb	r4, [r7, #13]
 80010da:	7bbb      	ldrb	r3, [r7, #14]
 80010dc:	88f8      	ldrh	r0, [r7, #6]
 80010de:	9300      	str	r3, [sp, #0]
 80010e0:	4623      	mov	r3, r4
 80010e2:	f7ff fedb 	bl	8000e9c <animate_led_set_pixel>
                              color_spell_rgb[offsetof(ws2812b_led_t, red)],
                              color_spell_rgb[offsetof(ws2812b_led_t, green)],
                              color_spell_rgb[offsetof(ws2812b_led_t, blue)]);
        animate_led_show_strip(mask_spell);
 80010e6:	88fb      	ldrh	r3, [r7, #6]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff fec7 	bl	8000e7c <animate_led_show_strip>
 		task_led_ctrl_delay(time_ms / task_led_ctrl_speed());
 80010ee:	88bb      	ldrh	r3, [r7, #4]
 80010f0:	ee07 3a90 	vmov	s15, r3
 80010f4:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80010f8:	f001 fb84 	bl	8002804 <task_led_ctrl_speed>
 80010fc:	eeb0 7a40 	vmov.f32	s14, s0
 8001100:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001104:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001108:	ee17 0a90 	vmov	r0, s15
 800110c:	f001 fa14 	bl	8002538 <task_led_ctrl_delay>
	for (int i = 0; i < strip_size; i++)
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	3301      	adds	r3, #1
 8001114:	617b      	str	r3, [r7, #20]
 8001116:	8a7b      	ldrh	r3, [r7, #18]
 8001118:	697a      	ldr	r2, [r7, #20]
 800111a:	429a      	cmp	r2, r3
 800111c:	dbc6      	blt.n	80010ac <animate_led_only_spell_word+0x3c>
 800111e:	e000      	b.n	8001122 <animate_led_only_spell_word+0xb2>
                return;
 8001120:	bf00      	nop
	}
}
 8001122:	371c      	adds	r7, #28
 8001124:	46bd      	mov	sp, r7
 8001126:	ecbd 8b02 	vpop	{d8}
 800112a:	bd90      	pop	{r4, r7, pc}
 800112c:	0800c608 	.word	0x0800c608

08001130 <animate_led_fade_in_fade_out>:
    }
}


void animate_led_fade_in_fade_out(const strip_mask_t mask_fade, const color_hex_code_e color_fade)
{
 8001130:	b5b0      	push	{r4, r5, r7, lr}
 8001132:	b08a      	sub	sp, #40	; 0x28
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	60b9      	str	r1, [r7, #8]
 800113a:	81fb      	strh	r3, [r7, #14]
    float r, g, b;
    uint8_t color_fade_rgb[sizeof(ws2812b_led_t)] = {0};
 800113c:	4b9b      	ldr	r3, [pc, #620]	; (80013ac <animate_led_fade_in_fade_out+0x27c>)
 800113e:	881b      	ldrh	r3, [r3, #0]
 8001140:	823b      	strh	r3, [r7, #16]
 8001142:	2300      	movs	r3, #0
 8001144:	74bb      	strb	r3, [r7, #18]
    color_led_hex_to_rgb(color_fade, color_fade_rgb);
 8001146:	f107 0310 	add.w	r3, r7, #16
 800114a:	4619      	mov	r1, r3
 800114c:	68b8      	ldr	r0, [r7, #8]
 800114e:	f000 fc6b 	bl	8001a28 <color_led_hex_to_rgb>
    for (int iii = 0; iii < 256; iii++)
 8001152:	2300      	movs	r3, #0
 8001154:	627b      	str	r3, [r7, #36]	; 0x24
 8001156:	e08b      	b.n	8001270 <animate_led_fade_in_fade_out+0x140>
    {
        if (task_button_press_interrupt_occurred())
 8001158:	f000 fef6 	bl	8001f48 <task_button_press_interrupt_occurred>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d00e      	beq.n	8001180 <animate_led_fade_in_fade_out+0x50>
        {
            if (task_button_press_check_interrupts(&color_fade_rgb[offsetof(ws2812b_led_t, red)], &color_fade_rgb[offsetof(ws2812b_led_t, green)], &color_fade_rgb[offsetof(ws2812b_led_t, blue)]))
 8001162:	f107 0310 	add.w	r3, r7, #16
 8001166:	1c9a      	adds	r2, r3, #2
 8001168:	f107 0310 	add.w	r3, r7, #16
 800116c:	1c59      	adds	r1, r3, #1
 800116e:	f107 0310 	add.w	r3, r7, #16
 8001172:	4618      	mov	r0, r3
 8001174:	f000 ff4c 	bl	8002010 <task_button_press_check_interrupts>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	f040 810f 	bne.w	800139e <animate_led_fade_in_fade_out+0x26e>
            {
                return;
            }
        }
        r = (iii / 256.0) * color_fade_rgb[offsetof(ws2812b_led_t, red)];
 8001180:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001182:	f7ff f9c7 	bl	8000514 <__aeabi_i2d>
 8001186:	f04f 0200 	mov.w	r2, #0
 800118a:	4b89      	ldr	r3, [pc, #548]	; (80013b0 <animate_led_fade_in_fade_out+0x280>)
 800118c:	f7ff fb56 	bl	800083c <__aeabi_ddiv>
 8001190:	4602      	mov	r2, r0
 8001192:	460b      	mov	r3, r1
 8001194:	4614      	mov	r4, r2
 8001196:	461d      	mov	r5, r3
 8001198:	7c3b      	ldrb	r3, [r7, #16]
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff f9ba 	bl	8000514 <__aeabi_i2d>
 80011a0:	4602      	mov	r2, r0
 80011a2:	460b      	mov	r3, r1
 80011a4:	4620      	mov	r0, r4
 80011a6:	4629      	mov	r1, r5
 80011a8:	f7ff fa1e 	bl	80005e8 <__aeabi_dmul>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	4610      	mov	r0, r2
 80011b2:	4619      	mov	r1, r3
 80011b4:	f7ff fc2a 	bl	8000a0c <__aeabi_d2f>
 80011b8:	4603      	mov	r3, r0
 80011ba:	61fb      	str	r3, [r7, #28]
        g = (iii / 256.0) * color_fade_rgb[offsetof(ws2812b_led_t, green)];
 80011bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80011be:	f7ff f9a9 	bl	8000514 <__aeabi_i2d>
 80011c2:	f04f 0200 	mov.w	r2, #0
 80011c6:	4b7a      	ldr	r3, [pc, #488]	; (80013b0 <animate_led_fade_in_fade_out+0x280>)
 80011c8:	f7ff fb38 	bl	800083c <__aeabi_ddiv>
 80011cc:	4602      	mov	r2, r0
 80011ce:	460b      	mov	r3, r1
 80011d0:	4614      	mov	r4, r2
 80011d2:	461d      	mov	r5, r3
 80011d4:	7c7b      	ldrb	r3, [r7, #17]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff f99c 	bl	8000514 <__aeabi_i2d>
 80011dc:	4602      	mov	r2, r0
 80011de:	460b      	mov	r3, r1
 80011e0:	4620      	mov	r0, r4
 80011e2:	4629      	mov	r1, r5
 80011e4:	f7ff fa00 	bl	80005e8 <__aeabi_dmul>
 80011e8:	4602      	mov	r2, r0
 80011ea:	460b      	mov	r3, r1
 80011ec:	4610      	mov	r0, r2
 80011ee:	4619      	mov	r1, r3
 80011f0:	f7ff fc0c 	bl	8000a0c <__aeabi_d2f>
 80011f4:	4603      	mov	r3, r0
 80011f6:	61bb      	str	r3, [r7, #24]
        b = (iii / 256.0) * color_fade_rgb[offsetof(ws2812b_led_t, blue)];
 80011f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80011fa:	f7ff f98b 	bl	8000514 <__aeabi_i2d>
 80011fe:	f04f 0200 	mov.w	r2, #0
 8001202:	4b6b      	ldr	r3, [pc, #428]	; (80013b0 <animate_led_fade_in_fade_out+0x280>)
 8001204:	f7ff fb1a 	bl	800083c <__aeabi_ddiv>
 8001208:	4602      	mov	r2, r0
 800120a:	460b      	mov	r3, r1
 800120c:	4614      	mov	r4, r2
 800120e:	461d      	mov	r5, r3
 8001210:	7cbb      	ldrb	r3, [r7, #18]
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff f97e 	bl	8000514 <__aeabi_i2d>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	4620      	mov	r0, r4
 800121e:	4629      	mov	r1, r5
 8001220:	f7ff f9e2 	bl	80005e8 <__aeabi_dmul>
 8001224:	4602      	mov	r2, r0
 8001226:	460b      	mov	r3, r1
 8001228:	4610      	mov	r0, r2
 800122a:	4619      	mov	r1, r3
 800122c:	f7ff fbee 	bl	8000a0c <__aeabi_d2f>
 8001230:	4603      	mov	r3, r0
 8001232:	617b      	str	r3, [r7, #20]
        animate_led_set_all_pixels(mask_fade, r, g, b);
 8001234:	edd7 7a07 	vldr	s15, [r7, #28]
 8001238:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800123c:	edc7 7a01 	vstr	s15, [r7, #4]
 8001240:	793b      	ldrb	r3, [r7, #4]
 8001242:	b2d9      	uxtb	r1, r3
 8001244:	edd7 7a06 	vldr	s15, [r7, #24]
 8001248:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800124c:	edc7 7a01 	vstr	s15, [r7, #4]
 8001250:	793b      	ldrb	r3, [r7, #4]
 8001252:	b2da      	uxtb	r2, r3
 8001254:	edd7 7a05 	vldr	s15, [r7, #20]
 8001258:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800125c:	edc7 7a01 	vstr	s15, [r7, #4]
 8001260:	793b      	ldrb	r3, [r7, #4]
 8001262:	b2db      	uxtb	r3, r3
 8001264:	89f8      	ldrh	r0, [r7, #14]
 8001266:	f7ff fe6d 	bl	8000f44 <animate_led_set_all_pixels>
    for (int iii = 0; iii < 256; iii++)
 800126a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126c:	3301      	adds	r3, #1
 800126e:	627b      	str	r3, [r7, #36]	; 0x24
 8001270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001272:	2bff      	cmp	r3, #255	; 0xff
 8001274:	f77f af70 	ble.w	8001158 <animate_led_fade_in_fade_out+0x28>
    }
    for (int iii = 255; iii >= 0; iii = iii-2)
 8001278:	23ff      	movs	r3, #255	; 0xff
 800127a:	623b      	str	r3, [r7, #32]
 800127c:	e08a      	b.n	8001394 <animate_led_fade_in_fade_out+0x264>
    {
        if (task_button_press_interrupt_occurred())
 800127e:	f000 fe63 	bl	8001f48 <task_button_press_interrupt_occurred>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d00d      	beq.n	80012a4 <animate_led_fade_in_fade_out+0x174>
        {
            if (task_button_press_check_interrupts(&color_fade_rgb[offsetof(ws2812b_led_t, red)], &color_fade_rgb[offsetof(ws2812b_led_t, green)], &color_fade_rgb[offsetof(ws2812b_led_t, blue)]))
 8001288:	f107 0310 	add.w	r3, r7, #16
 800128c:	1c9a      	adds	r2, r3, #2
 800128e:	f107 0310 	add.w	r3, r7, #16
 8001292:	1c59      	adds	r1, r3, #1
 8001294:	f107 0310 	add.w	r3, r7, #16
 8001298:	4618      	mov	r0, r3
 800129a:	f000 feb9 	bl	8002010 <task_button_press_check_interrupts>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d17e      	bne.n	80013a2 <animate_led_fade_in_fade_out+0x272>
            {
                return;
            }
        }
        r = (iii / 256.0) * color_fade_rgb[offsetof(ws2812b_led_t, red)];
 80012a4:	6a38      	ldr	r0, [r7, #32]
 80012a6:	f7ff f935 	bl	8000514 <__aeabi_i2d>
 80012aa:	f04f 0200 	mov.w	r2, #0
 80012ae:	4b40      	ldr	r3, [pc, #256]	; (80013b0 <animate_led_fade_in_fade_out+0x280>)
 80012b0:	f7ff fac4 	bl	800083c <__aeabi_ddiv>
 80012b4:	4602      	mov	r2, r0
 80012b6:	460b      	mov	r3, r1
 80012b8:	4614      	mov	r4, r2
 80012ba:	461d      	mov	r5, r3
 80012bc:	7c3b      	ldrb	r3, [r7, #16]
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff f928 	bl	8000514 <__aeabi_i2d>
 80012c4:	4602      	mov	r2, r0
 80012c6:	460b      	mov	r3, r1
 80012c8:	4620      	mov	r0, r4
 80012ca:	4629      	mov	r1, r5
 80012cc:	f7ff f98c 	bl	80005e8 <__aeabi_dmul>
 80012d0:	4602      	mov	r2, r0
 80012d2:	460b      	mov	r3, r1
 80012d4:	4610      	mov	r0, r2
 80012d6:	4619      	mov	r1, r3
 80012d8:	f7ff fb98 	bl	8000a0c <__aeabi_d2f>
 80012dc:	4603      	mov	r3, r0
 80012de:	61fb      	str	r3, [r7, #28]
        g = (iii / 256.0) * color_fade_rgb[offsetof(ws2812b_led_t, green)];
 80012e0:	6a38      	ldr	r0, [r7, #32]
 80012e2:	f7ff f917 	bl	8000514 <__aeabi_i2d>
 80012e6:	f04f 0200 	mov.w	r2, #0
 80012ea:	4b31      	ldr	r3, [pc, #196]	; (80013b0 <animate_led_fade_in_fade_out+0x280>)
 80012ec:	f7ff faa6 	bl	800083c <__aeabi_ddiv>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	4614      	mov	r4, r2
 80012f6:	461d      	mov	r5, r3
 80012f8:	7c7b      	ldrb	r3, [r7, #17]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff f90a 	bl	8000514 <__aeabi_i2d>
 8001300:	4602      	mov	r2, r0
 8001302:	460b      	mov	r3, r1
 8001304:	4620      	mov	r0, r4
 8001306:	4629      	mov	r1, r5
 8001308:	f7ff f96e 	bl	80005e8 <__aeabi_dmul>
 800130c:	4602      	mov	r2, r0
 800130e:	460b      	mov	r3, r1
 8001310:	4610      	mov	r0, r2
 8001312:	4619      	mov	r1, r3
 8001314:	f7ff fb7a 	bl	8000a0c <__aeabi_d2f>
 8001318:	4603      	mov	r3, r0
 800131a:	61bb      	str	r3, [r7, #24]
        b = (iii / 256.0) * color_fade_rgb[offsetof(ws2812b_led_t, blue)];
 800131c:	6a38      	ldr	r0, [r7, #32]
 800131e:	f7ff f8f9 	bl	8000514 <__aeabi_i2d>
 8001322:	f04f 0200 	mov.w	r2, #0
 8001326:	4b22      	ldr	r3, [pc, #136]	; (80013b0 <animate_led_fade_in_fade_out+0x280>)
 8001328:	f7ff fa88 	bl	800083c <__aeabi_ddiv>
 800132c:	4602      	mov	r2, r0
 800132e:	460b      	mov	r3, r1
 8001330:	4614      	mov	r4, r2
 8001332:	461d      	mov	r5, r3
 8001334:	7cbb      	ldrb	r3, [r7, #18]
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff f8ec 	bl	8000514 <__aeabi_i2d>
 800133c:	4602      	mov	r2, r0
 800133e:	460b      	mov	r3, r1
 8001340:	4620      	mov	r0, r4
 8001342:	4629      	mov	r1, r5
 8001344:	f7ff f950 	bl	80005e8 <__aeabi_dmul>
 8001348:	4602      	mov	r2, r0
 800134a:	460b      	mov	r3, r1
 800134c:	4610      	mov	r0, r2
 800134e:	4619      	mov	r1, r3
 8001350:	f7ff fb5c 	bl	8000a0c <__aeabi_d2f>
 8001354:	4603      	mov	r3, r0
 8001356:	617b      	str	r3, [r7, #20]
        animate_led_set_all_pixels(mask_fade, r, g, b);
 8001358:	edd7 7a07 	vldr	s15, [r7, #28]
 800135c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001360:	edc7 7a01 	vstr	s15, [r7, #4]
 8001364:	793b      	ldrb	r3, [r7, #4]
 8001366:	b2d9      	uxtb	r1, r3
 8001368:	edd7 7a06 	vldr	s15, [r7, #24]
 800136c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001370:	edc7 7a01 	vstr	s15, [r7, #4]
 8001374:	793b      	ldrb	r3, [r7, #4]
 8001376:	b2da      	uxtb	r2, r3
 8001378:	edd7 7a05 	vldr	s15, [r7, #20]
 800137c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001380:	edc7 7a01 	vstr	s15, [r7, #4]
 8001384:	793b      	ldrb	r3, [r7, #4]
 8001386:	b2db      	uxtb	r3, r3
 8001388:	89f8      	ldrh	r0, [r7, #14]
 800138a:	f7ff fddb 	bl	8000f44 <animate_led_set_all_pixels>
    for (int iii = 255; iii >= 0; iii = iii-2)
 800138e:	6a3b      	ldr	r3, [r7, #32]
 8001390:	3b02      	subs	r3, #2
 8001392:	623b      	str	r3, [r7, #32]
 8001394:	6a3b      	ldr	r3, [r7, #32]
 8001396:	2b00      	cmp	r3, #0
 8001398:	f6bf af71 	bge.w	800127e <animate_led_fade_in_fade_out+0x14e>
 800139c:	e002      	b.n	80013a4 <animate_led_fade_in_fade_out+0x274>
                return;
 800139e:	bf00      	nop
 80013a0:	e000      	b.n	80013a4 <animate_led_fade_in_fade_out+0x274>
                return;
 80013a2:	bf00      	nop
    }
}
 80013a4:	3728      	adds	r7, #40	; 0x28
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bdb0      	pop	{r4, r5, r7, pc}
 80013aa:	bf00      	nop
 80013ac:	0800c608 	.word	0x0800c608
 80013b0:	40700000 	.word	0x40700000

080013b4 <animate_led_twinkle>:
}


void animate_led_twinkle(const strip_mask_t twinkle_mask, const color_hex_code_e color_twinkle, const uint16_t count,
                         const uint16_t speed_delay, const bool only_one)
{
 80013b4:	b590      	push	{r4, r7, lr}
 80013b6:	ed2d 8b02 	vpush	{d8}
 80013ba:	b08b      	sub	sp, #44	; 0x2c
 80013bc:	af02      	add	r7, sp, #8
 80013be:	60b9      	str	r1, [r7, #8]
 80013c0:	4611      	mov	r1, r2
 80013c2:	461a      	mov	r2, r3
 80013c4:	4603      	mov	r3, r0
 80013c6:	81fb      	strh	r3, [r7, #14]
 80013c8:	460b      	mov	r3, r1
 80013ca:	81bb      	strh	r3, [r7, #12]
 80013cc:	4613      	mov	r3, r2
 80013ce:	80fb      	strh	r3, [r7, #6]
	uint16_t strip_size = ws2812_led_get_max_strip_size(twinkle_mask);
 80013d0:	89fb      	ldrh	r3, [r7, #14]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f000 fbf0 	bl	8001bb8 <ws2812_led_get_max_strip_size>
 80013d8:	4603      	mov	r3, r0
 80013da:	837b      	strh	r3, [r7, #26]
    uint8_t color_twinkle_rgb[sizeof(ws2812b_led_t)] = {0};
 80013dc:	4b2e      	ldr	r3, [pc, #184]	; (8001498 <animate_led_twinkle+0xe4>)
 80013de:	881b      	ldrh	r3, [r3, #0]
 80013e0:	82bb      	strh	r3, [r7, #20]
 80013e2:	2300      	movs	r3, #0
 80013e4:	75bb      	strb	r3, [r7, #22]
    color_led_hex_to_rgb(color_twinkle, color_twinkle_rgb);
 80013e6:	f107 0314 	add.w	r3, r7, #20
 80013ea:	4619      	mov	r1, r3
 80013ec:	68b8      	ldr	r0, [r7, #8]
 80013ee:	f000 fb1b 	bl	8001a28 <color_led_hex_to_rgb>
    for (int iii = 0; iii < count; iii++)
 80013f2:	2300      	movs	r3, #0
 80013f4:	61fb      	str	r3, [r7, #28]
 80013f6:	e043      	b.n	8001480 <animate_led_twinkle+0xcc>
    {
        if (task_button_press_interrupt_occurred())
 80013f8:	f000 fda6 	bl	8001f48 <task_button_press_interrupt_occurred>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d00d      	beq.n	800141e <animate_led_twinkle+0x6a>
        {
            if (task_button_press_check_interrupts(&color_twinkle_rgb[offsetof(ws2812b_led_t, red)], &color_twinkle_rgb[offsetof(ws2812b_led_t, green)], &color_twinkle_rgb[offsetof(ws2812b_led_t, blue)]))
 8001402:	f107 0314 	add.w	r3, r7, #20
 8001406:	1c9a      	adds	r2, r3, #2
 8001408:	f107 0314 	add.w	r3, r7, #20
 800140c:	1c59      	adds	r1, r3, #1
 800140e:	f107 0314 	add.w	r3, r7, #20
 8001412:	4618      	mov	r0, r3
 8001414:	f000 fdfc 	bl	8002010 <task_button_press_check_interrupts>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d135      	bne.n	800148a <animate_led_twinkle+0xd6>
            {
                return;
            }
        }
        animate_led_set_pixel(twinkle_mask, random_num(0, strip_size),
 800141e:	8b7b      	ldrh	r3, [r7, #26]
 8001420:	4619      	mov	r1, r3
 8001422:	2000      	movs	r0, #0
 8001424:	f00a f818 	bl	800b458 <random_num>
 8001428:	4603      	mov	r3, r0
 800142a:	b299      	uxth	r1, r3
 800142c:	7d3a      	ldrb	r2, [r7, #20]
 800142e:	7d7c      	ldrb	r4, [r7, #21]
 8001430:	7dbb      	ldrb	r3, [r7, #22]
 8001432:	89f8      	ldrh	r0, [r7, #14]
 8001434:	9300      	str	r3, [sp, #0]
 8001436:	4623      	mov	r3, r4
 8001438:	f7ff fd30 	bl	8000e9c <animate_led_set_pixel>
                              (color_twinkle_rgb[offsetof(ws2812b_led_t, red)]),
                              (color_twinkle_rgb[offsetof(ws2812b_led_t, green)]),
                              (color_twinkle_rgb[offsetof(ws2812b_led_t, blue)]));
        animate_led_show_strip(twinkle_mask);
 800143c:	89fb      	ldrh	r3, [r7, #14]
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff fd1c 	bl	8000e7c <animate_led_show_strip>
        task_led_ctrl_delay(speed_delay / task_led_ctrl_speed());
 8001444:	88fb      	ldrh	r3, [r7, #6]
 8001446:	ee07 3a90 	vmov	s15, r3
 800144a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800144e:	f001 f9d9 	bl	8002804 <task_led_ctrl_speed>
 8001452:	eeb0 7a40 	vmov.f32	s14, s0
 8001456:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800145a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800145e:	ee17 0a90 	vmov	r0, s15
 8001462:	f001 f869 	bl	8002538 <task_led_ctrl_delay>
        if (only_one) animate_led_set_all_pixels(twinkle_mask, 0, 0, 0);
 8001466:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800146a:	2b00      	cmp	r3, #0
 800146c:	d005      	beq.n	800147a <animate_led_twinkle+0xc6>
 800146e:	89f8      	ldrh	r0, [r7, #14]
 8001470:	2300      	movs	r3, #0
 8001472:	2200      	movs	r2, #0
 8001474:	2100      	movs	r1, #0
 8001476:	f7ff fd65 	bl	8000f44 <animate_led_set_all_pixels>
    for (int iii = 0; iii < count; iii++)
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	3301      	adds	r3, #1
 800147e:	61fb      	str	r3, [r7, #28]
 8001480:	89bb      	ldrh	r3, [r7, #12]
 8001482:	69fa      	ldr	r2, [r7, #28]
 8001484:	429a      	cmp	r2, r3
 8001486:	dbb7      	blt.n	80013f8 <animate_led_twinkle+0x44>
 8001488:	e000      	b.n	800148c <animate_led_twinkle+0xd8>
                return;
 800148a:	bf00      	nop
    }

    //task_led_ctrl_delay(speed_delay / task_led_ctrl_speed());
}
 800148c:	3724      	adds	r7, #36	; 0x24
 800148e:	46bd      	mov	sp, r7
 8001490:	ecbd 8b02 	vpop	{d8}
 8001494:	bd90      	pop	{r4, r7, pc}
 8001496:	bf00      	nop
 8001498:	0800c608 	.word	0x0800c608

0800149c <animate_led_sparkle_only_random_color>:
}


void animate_led_sparkle_only_random_color(const strip_mask_t mask_sparkle_random, const bool fill,
                                           const uint16_t speed_delay)
{
 800149c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800149e:	ed2d 8b02 	vpush	{d8}
 80014a2:	b08b      	sub	sp, #44	; 0x2c
 80014a4:	af02      	add	r7, sp, #8
 80014a6:	4603      	mov	r3, r0
 80014a8:	80fb      	strh	r3, [r7, #6]
 80014aa:	460b      	mov	r3, r1
 80014ac:	717b      	strb	r3, [r7, #5]
 80014ae:	4613      	mov	r3, r2
 80014b0:	807b      	strh	r3, [r7, #2]
	float percent_to_fill = 0.7;
 80014b2:	4b42      	ldr	r3, [pc, #264]	; (80015bc <animate_led_sparkle_only_random_color+0x120>)
 80014b4:	61bb      	str	r3, [r7, #24]
	uint16_t strip_size = ws2812_led_get_max_strip_size(mask_sparkle_random);
 80014b6:	88fb      	ldrh	r3, [r7, #6]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f000 fb7d 	bl	8001bb8 <ws2812_led_get_max_strip_size>
 80014be:	4603      	mov	r3, r0
 80014c0:	82fb      	strh	r3, [r7, #22]
	uint16_t num_active_leds = ws2812_get_num_active_animation_leds(mask_sparkle_random);
 80014c2:	88fb      	ldrh	r3, [r7, #6]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f000 fb57 	bl	8001b78 <ws2812_get_num_active_animation_leds>
 80014ca:	4603      	mov	r3, r0
 80014cc:	82bb      	strh	r3, [r7, #20]
    uint8_t dummy_red, dummy_green, dummy_blue; // not used but not worth creating a unique function IMO
	for (uint16_t iii = 0; iii < (percent_to_fill * (float)num_active_leds); iii++)
 80014ce:	2300      	movs	r3, #0
 80014d0:	83fb      	strh	r3, [r7, #30]
 80014d2:	e059      	b.n	8001588 <animate_led_sparkle_only_random_color+0xec>
	{
	    if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 80014d4:	f000 fd38 	bl	8001f48 <task_button_press_interrupt_occurred>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d00b      	beq.n	80014f6 <animate_led_sparkle_only_random_color+0x5a>
 80014de:	f107 020d 	add.w	r2, r7, #13
 80014e2:	f107 010e 	add.w	r1, r7, #14
 80014e6:	f107 030f 	add.w	r3, r7, #15
 80014ea:	4618      	mov	r0, r3
 80014ec:	f000 fd90 	bl	8002010 <task_button_press_check_interrupts>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d15c      	bne.n	80015b0 <animate_led_sparkle_only_random_color+0x114>
		int pix = random_num(0, strip_size);
 80014f6:	8afb      	ldrh	r3, [r7, #22]
 80014f8:	4619      	mov	r1, r3
 80014fa:	2000      	movs	r0, #0
 80014fc:	f009 ffac 	bl	800b458 <random_num>
 8001500:	4603      	mov	r3, r0
 8001502:	613b      	str	r3, [r7, #16]
		animate_led_set_pixel(mask_sparkle_random, pix, random_num(0, 255), random_num(0, 255), random_num(0, 255));
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	b29c      	uxth	r4, r3
 8001508:	21ff      	movs	r1, #255	; 0xff
 800150a:	2000      	movs	r0, #0
 800150c:	f009 ffa4 	bl	800b458 <random_num>
 8001510:	4603      	mov	r3, r0
 8001512:	b2dd      	uxtb	r5, r3
 8001514:	21ff      	movs	r1, #255	; 0xff
 8001516:	2000      	movs	r0, #0
 8001518:	f009 ff9e 	bl	800b458 <random_num>
 800151c:	4603      	mov	r3, r0
 800151e:	b2de      	uxtb	r6, r3
 8001520:	21ff      	movs	r1, #255	; 0xff
 8001522:	2000      	movs	r0, #0
 8001524:	f009 ff98 	bl	800b458 <random_num>
 8001528:	4603      	mov	r3, r0
 800152a:	b2db      	uxtb	r3, r3
 800152c:	88f8      	ldrh	r0, [r7, #6]
 800152e:	9300      	str	r3, [sp, #0]
 8001530:	4633      	mov	r3, r6
 8001532:	462a      	mov	r2, r5
 8001534:	4621      	mov	r1, r4
 8001536:	f7ff fcb1 	bl	8000e9c <animate_led_set_pixel>
		animate_led_show_strip(mask_sparkle_random);
 800153a:	88fb      	ldrh	r3, [r7, #6]
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff fc9d 	bl	8000e7c <animate_led_show_strip>
        task_led_ctrl_delay((float_t)speed_delay / task_led_ctrl_speed());
 8001542:	887b      	ldrh	r3, [r7, #2]
 8001544:	ee07 3a90 	vmov	s15, r3
 8001548:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800154c:	f001 f95a 	bl	8002804 <task_led_ctrl_speed>
 8001550:	eeb0 7a40 	vmov.f32	s14, s0
 8001554:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001558:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800155c:	ee17 0a90 	vmov	r0, s15
 8001560:	f000 ffea 	bl	8002538 <task_led_ctrl_delay>
		if (!fill) animate_led_set_pixel(mask_sparkle_random, pix, 0, 0, 0);
 8001564:	797b      	ldrb	r3, [r7, #5]
 8001566:	f083 0301 	eor.w	r3, r3, #1
 800156a:	b2db      	uxtb	r3, r3
 800156c:	2b00      	cmp	r3, #0
 800156e:	d008      	beq.n	8001582 <animate_led_sparkle_only_random_color+0xe6>
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	b299      	uxth	r1, r3
 8001574:	88f8      	ldrh	r0, [r7, #6]
 8001576:	2300      	movs	r3, #0
 8001578:	9300      	str	r3, [sp, #0]
 800157a:	2300      	movs	r3, #0
 800157c:	2200      	movs	r2, #0
 800157e:	f7ff fc8d 	bl	8000e9c <animate_led_set_pixel>
	for (uint16_t iii = 0; iii < (percent_to_fill * (float)num_active_leds); iii++)
 8001582:	8bfb      	ldrh	r3, [r7, #30]
 8001584:	3301      	adds	r3, #1
 8001586:	83fb      	strh	r3, [r7, #30]
 8001588:	8bfb      	ldrh	r3, [r7, #30]
 800158a:	ee07 3a90 	vmov	s15, r3
 800158e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001592:	8abb      	ldrh	r3, [r7, #20]
 8001594:	ee07 3a90 	vmov	s15, r3
 8001598:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800159c:	edd7 7a06 	vldr	s15, [r7, #24]
 80015a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ac:	d492      	bmi.n	80014d4 <animate_led_sparkle_only_random_color+0x38>
 80015ae:	e000      	b.n	80015b2 <animate_led_sparkle_only_random_color+0x116>
	    if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 80015b0:	bf00      	nop
	}
}
 80015b2:	3724      	adds	r7, #36	; 0x24
 80015b4:	46bd      	mov	sp, r7
 80015b6:	ecbd 8b02 	vpop	{d8}
 80015ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015bc:	3f333333 	.word	0x3f333333

080015c0 <animate_led_rainbow_cycle>:
    }
}


void animate_led_rainbow_cycle(const strip_mask_t mask_rainbow_cycle, const uint16_t speed_delay)
{
 80015c0:	b590      	push	{r4, r7, lr}
 80015c2:	ed2d 8b02 	vpush	{d8}
 80015c6:	b089      	sub	sp, #36	; 0x24
 80015c8:	af02      	add	r7, sp, #8
 80015ca:	4603      	mov	r3, r0
 80015cc:	460a      	mov	r2, r1
 80015ce:	80fb      	strh	r3, [r7, #6]
 80015d0:	4613      	mov	r3, r2
 80015d2:	80bb      	strh	r3, [r7, #4]
	uint8_t dummy_red, dummy_green, dummy_blue;
	uint16_t strip_size = ws2812_led_get_max_strip_size(mask_rainbow_cycle);
 80015d4:	88fb      	ldrh	r3, [r7, #6]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f000 faee 	bl	8001bb8 <ws2812_led_get_max_strip_size>
 80015dc:	4603      	mov	r3, r0
 80015de:	827b      	strh	r3, [r7, #18]
    uint8_t *c;
    uint16_t iii, jjj;
    for (jjj = 256 * 5; jjj > 0; jjj--)
 80015e0:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80015e4:	82bb      	strh	r3, [r7, #20]
 80015e6:	e06c      	b.n	80016c2 <animate_led_rainbow_cycle+0x102>
    {
        if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 80015e8:	f000 fcae 	bl	8001f48 <task_button_press_interrupt_occurred>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d00b      	beq.n	800160a <animate_led_rainbow_cycle+0x4a>
 80015f2:	f107 0209 	add.w	r2, r7, #9
 80015f6:	f107 010a 	add.w	r1, r7, #10
 80015fa:	f107 030b 	add.w	r3, r7, #11
 80015fe:	4618      	mov	r0, r3
 8001600:	f000 fd06 	bl	8002010 <task_button_press_check_interrupts>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d15f      	bne.n	80016ca <animate_led_rainbow_cycle+0x10a>
        for (iii = 0; iii < strip_size; iii++)
 800160a:	2300      	movs	r3, #0
 800160c:	82fb      	strh	r3, [r7, #22]
 800160e:	e02f      	b.n	8001670 <animate_led_rainbow_cycle+0xb0>
        {
            if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 8001610:	f000 fc9a 	bl	8001f48 <task_button_press_interrupt_occurred>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d00b      	beq.n	8001632 <animate_led_rainbow_cycle+0x72>
 800161a:	f107 0209 	add.w	r2, r7, #9
 800161e:	f107 010a 	add.w	r1, r7, #10
 8001622:	f107 030b 	add.w	r3, r7, #11
 8001626:	4618      	mov	r0, r3
 8001628:	f000 fcf2 	bl	8002010 <task_button_press_check_interrupts>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d14d      	bne.n	80016ce <animate_led_rainbow_cycle+0x10e>
            c = animate_led_wheel(((iii * 256 / strip_size) + jjj) & 255);
 8001632:	8afb      	ldrh	r3, [r7, #22]
 8001634:	021a      	lsls	r2, r3, #8
 8001636:	8a7b      	ldrh	r3, [r7, #18]
 8001638:	fb92 f3f3 	sdiv	r3, r2, r3
 800163c:	b2da      	uxtb	r2, r3
 800163e:	8abb      	ldrh	r3, [r7, #20]
 8001640:	b2db      	uxtb	r3, r3
 8001642:	4413      	add	r3, r2
 8001644:	b2db      	uxtb	r3, r3
 8001646:	4618      	mov	r0, r3
 8001648:	f000 f848 	bl	80016dc <animate_led_wheel>
 800164c:	60f8      	str	r0, [r7, #12]
            animate_led_set_pixel(mask_rainbow_cycle, iii, *c, *(c + 1), *(c + 2));
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	781a      	ldrb	r2, [r3, #0]
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	3301      	adds	r3, #1
 8001656:	781c      	ldrb	r4, [r3, #0]
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	3302      	adds	r3, #2
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	8af9      	ldrh	r1, [r7, #22]
 8001660:	88f8      	ldrh	r0, [r7, #6]
 8001662:	9300      	str	r3, [sp, #0]
 8001664:	4623      	mov	r3, r4
 8001666:	f7ff fc19 	bl	8000e9c <animate_led_set_pixel>
        for (iii = 0; iii < strip_size; iii++)
 800166a:	8afb      	ldrh	r3, [r7, #22]
 800166c:	3301      	adds	r3, #1
 800166e:	82fb      	strh	r3, [r7, #22]
 8001670:	8afa      	ldrh	r2, [r7, #22]
 8001672:	8a7b      	ldrh	r3, [r7, #18]
 8001674:	429a      	cmp	r2, r3
 8001676:	d3cb      	bcc.n	8001610 <animate_led_rainbow_cycle+0x50>
        }
        animate_led_show_strip(mask_rainbow_cycle);
 8001678:	88fb      	ldrh	r3, [r7, #6]
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff fbfe 	bl	8000e7c <animate_led_show_strip>
        if (LED_SPEED_10X == task_led_ctrl_speed()) task_led_ctrl_delay(0);
 8001680:	f001 f8c0 	bl	8002804 <task_led_ctrl_speed>
 8001684:	eef0 7a40 	vmov.f32	s15, s0
 8001688:	eef5 7a40 	vcmp.f32	s15, #0.0
 800168c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001690:	d103      	bne.n	800169a <animate_led_rainbow_cycle+0xda>
 8001692:	2000      	movs	r0, #0
 8001694:	f000 ff50 	bl	8002538 <task_led_ctrl_delay>
 8001698:	e010      	b.n	80016bc <animate_led_rainbow_cycle+0xfc>
        else task_led_ctrl_delay((float_t)speed_delay / task_led_ctrl_speed());
 800169a:	88bb      	ldrh	r3, [r7, #4]
 800169c:	ee07 3a90 	vmov	s15, r3
 80016a0:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80016a4:	f001 f8ae 	bl	8002804 <task_led_ctrl_speed>
 80016a8:	eeb0 7a40 	vmov.f32	s14, s0
 80016ac:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80016b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016b4:	ee17 0a90 	vmov	r0, s15
 80016b8:	f000 ff3e 	bl	8002538 <task_led_ctrl_delay>
    for (jjj = 256 * 5; jjj > 0; jjj--)
 80016bc:	8abb      	ldrh	r3, [r7, #20]
 80016be:	3b01      	subs	r3, #1
 80016c0:	82bb      	strh	r3, [r7, #20]
 80016c2:	8abb      	ldrh	r3, [r7, #20]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d18f      	bne.n	80015e8 <animate_led_rainbow_cycle+0x28>
 80016c8:	e002      	b.n	80016d0 <animate_led_rainbow_cycle+0x110>
        if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 80016ca:	bf00      	nop
 80016cc:	e000      	b.n	80016d0 <animate_led_rainbow_cycle+0x110>
            if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 80016ce:	bf00      	nop
    }
}
 80016d0:	371c      	adds	r7, #28
 80016d2:	46bd      	mov	sp, r7
 80016d4:	ecbd 8b02 	vpop	{d8}
 80016d8:	bd90      	pop	{r4, r7, pc}
	...

080016dc <animate_led_wheel>:


uint8_t* animate_led_wheel(uint8_t wheel_pos)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	71fb      	strb	r3, [r7, #7]
    static uint8_t c[3];
    if (wheel_pos < 85)
 80016e6:	79fb      	ldrb	r3, [r7, #7]
 80016e8:	2b54      	cmp	r3, #84	; 0x54
 80016ea:	d813      	bhi.n	8001714 <animate_led_wheel+0x38>
    {
        c[0] = wheel_pos * 3;
 80016ec:	79fb      	ldrb	r3, [r7, #7]
 80016ee:	461a      	mov	r2, r3
 80016f0:	0052      	lsls	r2, r2, #1
 80016f2:	4413      	add	r3, r2
 80016f4:	b2da      	uxtb	r2, r3
 80016f6:	4b23      	ldr	r3, [pc, #140]	; (8001784 <animate_led_wheel+0xa8>)
 80016f8:	701a      	strb	r2, [r3, #0]
        c[1] = 255 - wheel_pos * 3; 
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	461a      	mov	r2, r3
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	b2db      	uxtb	r3, r3
 8001704:	3b01      	subs	r3, #1
 8001706:	b2da      	uxtb	r2, r3
 8001708:	4b1e      	ldr	r3, [pc, #120]	; (8001784 <animate_led_wheel+0xa8>)
 800170a:	705a      	strb	r2, [r3, #1]
        c[2] = 0;
 800170c:	4b1d      	ldr	r3, [pc, #116]	; (8001784 <animate_led_wheel+0xa8>)
 800170e:	2200      	movs	r2, #0
 8001710:	709a      	strb	r2, [r3, #2]
 8001712:	e02f      	b.n	8001774 <animate_led_wheel+0x98>
    }
    else if(wheel_pos < 170)
 8001714:	79fb      	ldrb	r3, [r7, #7]
 8001716:	2ba9      	cmp	r3, #169	; 0xa9
 8001718:	d816      	bhi.n	8001748 <animate_led_wheel+0x6c>
    {
        wheel_pos -= 85;
 800171a:	79fb      	ldrb	r3, [r7, #7]
 800171c:	3b55      	subs	r3, #85	; 0x55
 800171e:	71fb      	strb	r3, [r7, #7]
        c[0] = 255 - wheel_pos * 3;
 8001720:	79fb      	ldrb	r3, [r7, #7]
 8001722:	461a      	mov	r2, r3
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	b2db      	uxtb	r3, r3
 800172a:	3b01      	subs	r3, #1
 800172c:	b2da      	uxtb	r2, r3
 800172e:	4b15      	ldr	r3, [pc, #84]	; (8001784 <animate_led_wheel+0xa8>)
 8001730:	701a      	strb	r2, [r3, #0]
        c[1] = 0;
 8001732:	4b14      	ldr	r3, [pc, #80]	; (8001784 <animate_led_wheel+0xa8>)
 8001734:	2200      	movs	r2, #0
 8001736:	705a      	strb	r2, [r3, #1]
        c[2] = wheel_pos * 3;
 8001738:	79fb      	ldrb	r3, [r7, #7]
 800173a:	461a      	mov	r2, r3
 800173c:	0052      	lsls	r2, r2, #1
 800173e:	4413      	add	r3, r2
 8001740:	b2da      	uxtb	r2, r3
 8001742:	4b10      	ldr	r3, [pc, #64]	; (8001784 <animate_led_wheel+0xa8>)
 8001744:	709a      	strb	r2, [r3, #2]
 8001746:	e015      	b.n	8001774 <animate_led_wheel+0x98>
    }
    else
    {
        wheel_pos -= 170;
 8001748:	79fb      	ldrb	r3, [r7, #7]
 800174a:	3356      	adds	r3, #86	; 0x56
 800174c:	71fb      	strb	r3, [r7, #7]
        c[0] = 0;
 800174e:	4b0d      	ldr	r3, [pc, #52]	; (8001784 <animate_led_wheel+0xa8>)
 8001750:	2200      	movs	r2, #0
 8001752:	701a      	strb	r2, [r3, #0]
        c[1] = wheel_pos * 3; 
 8001754:	79fb      	ldrb	r3, [r7, #7]
 8001756:	461a      	mov	r2, r3
 8001758:	0052      	lsls	r2, r2, #1
 800175a:	4413      	add	r3, r2
 800175c:	b2da      	uxtb	r2, r3
 800175e:	4b09      	ldr	r3, [pc, #36]	; (8001784 <animate_led_wheel+0xa8>)
 8001760:	705a      	strb	r2, [r3, #1]
        c[2] = 255 - wheel_pos * 3;
 8001762:	79fb      	ldrb	r3, [r7, #7]
 8001764:	461a      	mov	r2, r3
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	b2db      	uxtb	r3, r3
 800176c:	3b01      	subs	r3, #1
 800176e:	b2da      	uxtb	r2, r3
 8001770:	4b04      	ldr	r3, [pc, #16]	; (8001784 <animate_led_wheel+0xa8>)
 8001772:	709a      	strb	r2, [r3, #2]
    }
    return c;
 8001774:	4b03      	ldr	r3, [pc, #12]	; (8001784 <animate_led_wheel+0xa8>)
}
 8001776:	4618      	mov	r0, r3
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	20000260 	.word	0x20000260

08001788 <animate_led_theater_chase>:
}


void animate_led_theater_chase(const strip_mask_t mask_theater_chase, const color_hex_code_e color_theater_chase,
                               const uint16_t speed_delay)
{
 8001788:	b590      	push	{r4, r7, lr}
 800178a:	ed2d 8b02 	vpush	{d8}
 800178e:	b08b      	sub	sp, #44	; 0x2c
 8001790:	af02      	add	r7, sp, #8
 8001792:	4603      	mov	r3, r0
 8001794:	6039      	str	r1, [r7, #0]
 8001796:	80fb      	strh	r3, [r7, #6]
 8001798:	4613      	mov	r3, r2
 800179a:	80bb      	strh	r3, [r7, #4]
	uint16_t strip_size = ws2812_led_get_max_strip_size(mask_theater_chase);
 800179c:	88fb      	ldrh	r3, [r7, #6]
 800179e:	4618      	mov	r0, r3
 80017a0:	f000 fa0a 	bl	8001bb8 <ws2812_led_get_max_strip_size>
 80017a4:	4603      	mov	r3, r0
 80017a6:	81fb      	strh	r3, [r7, #14]
    uint8_t color_theater_chase_rgb[sizeof(ws2812b_led_t)] = {0};
 80017a8:	4b47      	ldr	r3, [pc, #284]	; (80018c8 <animate_led_theater_chase+0x140>)
 80017aa:	881b      	ldrh	r3, [r3, #0]
 80017ac:	813b      	strh	r3, [r7, #8]
 80017ae:	2300      	movs	r3, #0
 80017b0:	72bb      	strb	r3, [r7, #10]
    color_led_hex_to_rgb(color_theater_chase, color_theater_chase_rgb);
 80017b2:	f107 0308 	add.w	r3, r7, #8
 80017b6:	4619      	mov	r1, r3
 80017b8:	6838      	ldr	r0, [r7, #0]
 80017ba:	f000 f935 	bl	8001a28 <color_led_hex_to_rgb>
    for (int jjj = 0; jjj < 10; jjj++)
 80017be:	2300      	movs	r3, #0
 80017c0:	61fb      	str	r3, [r7, #28]
 80017c2:	e075      	b.n	80018b0 <animate_led_theater_chase+0x128>
    {
        for (int qqq = 0; qqq < 3; qqq++)
 80017c4:	2300      	movs	r3, #0
 80017c6:	61bb      	str	r3, [r7, #24]
 80017c8:	e06c      	b.n	80018a4 <animate_led_theater_chase+0x11c>
        {
            if (task_button_press_interrupt_occurred())
 80017ca:	f000 fbbd 	bl	8001f48 <task_button_press_interrupt_occurred>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d00d      	beq.n	80017f0 <animate_led_theater_chase+0x68>
            {
                if (task_button_press_check_interrupts(&color_theater_chase_rgb[offsetof(ws2812b_led_t, red)], &color_theater_chase_rgb[offsetof(ws2812b_led_t, green)], &color_theater_chase_rgb[offsetof(ws2812b_led_t, blue)]))
 80017d4:	f107 0308 	add.w	r3, r7, #8
 80017d8:	1c9a      	adds	r2, r3, #2
 80017da:	f107 0308 	add.w	r3, r7, #8
 80017de:	1c59      	adds	r1, r3, #1
 80017e0:	f107 0308 	add.w	r3, r7, #8
 80017e4:	4618      	mov	r0, r3
 80017e6:	f000 fc13 	bl	8002010 <task_button_press_check_interrupts>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d163      	bne.n	80018b8 <animate_led_theater_chase+0x130>
                {
                    return;
                }
            }
            for (int iii = 0; iii < strip_size; iii += 3)
 80017f0:	2300      	movs	r3, #0
 80017f2:	617b      	str	r3, [r7, #20]
 80017f4:	e010      	b.n	8001818 <animate_led_theater_chase+0x90>
            {
                animate_led_set_pixel(mask_theater_chase, iii + qqq,
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	b29a      	uxth	r2, r3
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	4413      	add	r3, r2
 8001800:	b299      	uxth	r1, r3
 8001802:	7a3a      	ldrb	r2, [r7, #8]
 8001804:	7a7c      	ldrb	r4, [r7, #9]
 8001806:	7abb      	ldrb	r3, [r7, #10]
 8001808:	88f8      	ldrh	r0, [r7, #6]
 800180a:	9300      	str	r3, [sp, #0]
 800180c:	4623      	mov	r3, r4
 800180e:	f7ff fb45 	bl	8000e9c <animate_led_set_pixel>
            for (int iii = 0; iii < strip_size; iii += 3)
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	3303      	adds	r3, #3
 8001816:	617b      	str	r3, [r7, #20]
 8001818:	89fb      	ldrh	r3, [r7, #14]
 800181a:	697a      	ldr	r2, [r7, #20]
 800181c:	429a      	cmp	r2, r3
 800181e:	dbea      	blt.n	80017f6 <animate_led_theater_chase+0x6e>
                                      (color_theater_chase_rgb[offsetof(ws2812b_led_t, red)]),
                                      (color_theater_chase_rgb[offsetof(ws2812b_led_t, green)]),
                                      (color_theater_chase_rgb[offsetof(ws2812b_led_t, blue)]));
            }
            animate_led_show_strip(mask_theater_chase);
 8001820:	88fb      	ldrh	r3, [r7, #6]
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff fb2a 	bl	8000e7c <animate_led_show_strip>
            if (task_button_press_interrupt_occurred())
 8001828:	f000 fb8e 	bl	8001f48 <task_button_press_interrupt_occurred>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d00d      	beq.n	800184e <animate_led_theater_chase+0xc6>
            {
                if (task_button_press_check_interrupts(&color_theater_chase_rgb[offsetof(ws2812b_led_t, red)], &color_theater_chase_rgb[offsetof(ws2812b_led_t, green)], &color_theater_chase_rgb[offsetof(ws2812b_led_t, blue)]))
 8001832:	f107 0308 	add.w	r3, r7, #8
 8001836:	1c9a      	adds	r2, r3, #2
 8001838:	f107 0308 	add.w	r3, r7, #8
 800183c:	1c59      	adds	r1, r3, #1
 800183e:	f107 0308 	add.w	r3, r7, #8
 8001842:	4618      	mov	r0, r3
 8001844:	f000 fbe4 	bl	8002010 <task_button_press_check_interrupts>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d136      	bne.n	80018bc <animate_led_theater_chase+0x134>
                {
                    return;
                }
            }
            task_led_ctrl_delay((float_t)speed_delay / task_led_ctrl_speed());
 800184e:	88bb      	ldrh	r3, [r7, #4]
 8001850:	ee07 3a90 	vmov	s15, r3
 8001854:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001858:	f000 ffd4 	bl	8002804 <task_led_ctrl_speed>
 800185c:	eeb0 7a40 	vmov.f32	s14, s0
 8001860:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001864:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001868:	ee17 0a90 	vmov	r0, s15
 800186c:	f000 fe64 	bl	8002538 <task_led_ctrl_delay>
            for (int iii = 0; iii < strip_size; iii += 3) animate_led_set_pixel(mask_theater_chase, iii + qqq, 0, 0, 0); // turn every third pixel off
 8001870:	2300      	movs	r3, #0
 8001872:	613b      	str	r3, [r7, #16]
 8001874:	e00f      	b.n	8001896 <animate_led_theater_chase+0x10e>
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	b29a      	uxth	r2, r3
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	b29b      	uxth	r3, r3
 800187e:	4413      	add	r3, r2
 8001880:	b299      	uxth	r1, r3
 8001882:	88f8      	ldrh	r0, [r7, #6]
 8001884:	2300      	movs	r3, #0
 8001886:	9300      	str	r3, [sp, #0]
 8001888:	2300      	movs	r3, #0
 800188a:	2200      	movs	r2, #0
 800188c:	f7ff fb06 	bl	8000e9c <animate_led_set_pixel>
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	3303      	adds	r3, #3
 8001894:	613b      	str	r3, [r7, #16]
 8001896:	89fb      	ldrh	r3, [r7, #14]
 8001898:	693a      	ldr	r2, [r7, #16]
 800189a:	429a      	cmp	r2, r3
 800189c:	dbeb      	blt.n	8001876 <animate_led_theater_chase+0xee>
        for (int qqq = 0; qqq < 3; qqq++)
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	3301      	adds	r3, #1
 80018a2:	61bb      	str	r3, [r7, #24]
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	dd8f      	ble.n	80017ca <animate_led_theater_chase+0x42>
    for (int jjj = 0; jjj < 10; jjj++)
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	3301      	adds	r3, #1
 80018ae:	61fb      	str	r3, [r7, #28]
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	2b09      	cmp	r3, #9
 80018b4:	dd86      	ble.n	80017c4 <animate_led_theater_chase+0x3c>
 80018b6:	e002      	b.n	80018be <animate_led_theater_chase+0x136>
                    return;
 80018b8:	bf00      	nop
 80018ba:	e000      	b.n	80018be <animate_led_theater_chase+0x136>
                    return;
 80018bc:	bf00      	nop
        }
    }
}
 80018be:	3724      	adds	r7, #36	; 0x24
 80018c0:	46bd      	mov	sp, r7
 80018c2:	ecbd 8b02 	vpop	{d8}
 80018c6:	bd90      	pop	{r4, r7, pc}
 80018c8:	0800c608 	.word	0x0800c608

080018cc <animate_led_theater_chase_rainbow>:


void animate_led_theater_chase_rainbow(const strip_mask_t mask_theater_chase, const uint16_t speed_delay)
{
 80018cc:	b590      	push	{r4, r7, lr}
 80018ce:	ed2d 8b02 	vpush	{d8}
 80018d2:	b08d      	sub	sp, #52	; 0x34
 80018d4:	af02      	add	r7, sp, #8
 80018d6:	4603      	mov	r3, r0
 80018d8:	460a      	mov	r2, r1
 80018da:	80fb      	strh	r3, [r7, #6]
 80018dc:	4613      	mov	r3, r2
 80018de:	80bb      	strh	r3, [r7, #4]
	uint8_t dummy_red, dummy_green, dummy_blue;
	uint16_t strip_size = ws2812_led_get_max_strip_size(mask_theater_chase);
 80018e0:	88fb      	ldrh	r3, [r7, #6]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f000 f968 	bl	8001bb8 <ws2812_led_get_max_strip_size>
 80018e8:	4603      	mov	r3, r0
 80018ea:	82fb      	strh	r3, [r7, #22]
    uint8_t *c;
    for (int jjj = 0; jjj < 256; jjj++) // cycel all 256 colors in the animate_led_wheel
 80018ec:	2300      	movs	r3, #0
 80018ee:	627b      	str	r3, [r7, #36]	; 0x24
 80018f0:	e08a      	b.n	8001a08 <animate_led_theater_chase_rainbow+0x13c>
    {
        for (int qqq = 0; qqq < 3; qqq++)
 80018f2:	2300      	movs	r3, #0
 80018f4:	623b      	str	r3, [r7, #32]
 80018f6:	e080      	b.n	80019fa <animate_led_theater_chase_rainbow+0x12e>
        {
            if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 80018f8:	f000 fb26 	bl	8001f48 <task_button_press_interrupt_occurred>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d00b      	beq.n	800191a <animate_led_theater_chase_rainbow+0x4e>
 8001902:	f107 020d 	add.w	r2, r7, #13
 8001906:	f107 010e 	add.w	r1, r7, #14
 800190a:	f107 030f 	add.w	r3, r7, #15
 800190e:	4618      	mov	r0, r3
 8001910:	f000 fb7e 	bl	8002010 <task_button_press_check_interrupts>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d17b      	bne.n	8001a12 <animate_led_theater_chase_rainbow+0x146>
            for (int iii = 0; iii < strip_size; iii += 3)
 800191a:	2300      	movs	r3, #0
 800191c:	61fb      	str	r3, [r7, #28]
 800191e:	e039      	b.n	8001994 <animate_led_theater_chase_rainbow+0xc8>
            {
                if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 8001920:	f000 fb12 	bl	8001f48 <task_button_press_interrupt_occurred>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d00b      	beq.n	8001942 <animate_led_theater_chase_rainbow+0x76>
 800192a:	f107 020d 	add.w	r2, r7, #13
 800192e:	f107 010e 	add.w	r1, r7, #14
 8001932:	f107 030f 	add.w	r3, r7, #15
 8001936:	4618      	mov	r0, r3
 8001938:	f000 fb6a 	bl	8002010 <task_button_press_check_interrupts>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d169      	bne.n	8001a16 <animate_led_theater_chase_rainbow+0x14a>
                c = animate_led_wheel((iii + jjj) % 255);
 8001942:	69fa      	ldr	r2, [r7, #28]
 8001944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001946:	441a      	add	r2, r3
 8001948:	4b36      	ldr	r3, [pc, #216]	; (8001a24 <animate_led_theater_chase_rainbow+0x158>)
 800194a:	fb83 1302 	smull	r1, r3, r3, r2
 800194e:	4413      	add	r3, r2
 8001950:	11d9      	asrs	r1, r3, #7
 8001952:	17d3      	asrs	r3, r2, #31
 8001954:	1ac9      	subs	r1, r1, r3
 8001956:	460b      	mov	r3, r1
 8001958:	021b      	lsls	r3, r3, #8
 800195a:	1a5b      	subs	r3, r3, r1
 800195c:	1ad1      	subs	r1, r2, r3
 800195e:	b2cb      	uxtb	r3, r1
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff febb 	bl	80016dc <animate_led_wheel>
 8001966:	6138      	str	r0, [r7, #16]
                animate_led_set_pixel(mask_theater_chase, iii + qqq, *c, *(c + 1), *(c + 2)); // turn every third pixel on
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	b29a      	uxth	r2, r3
 800196c:	6a3b      	ldr	r3, [r7, #32]
 800196e:	b29b      	uxth	r3, r3
 8001970:	4413      	add	r3, r2
 8001972:	b299      	uxth	r1, r3
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	781a      	ldrb	r2, [r3, #0]
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	3301      	adds	r3, #1
 800197c:	781c      	ldrb	r4, [r3, #0]
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	3302      	adds	r3, #2
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	88f8      	ldrh	r0, [r7, #6]
 8001986:	9300      	str	r3, [sp, #0]
 8001988:	4623      	mov	r3, r4
 800198a:	f7ff fa87 	bl	8000e9c <animate_led_set_pixel>
            for (int iii = 0; iii < strip_size; iii += 3)
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	3303      	adds	r3, #3
 8001992:	61fb      	str	r3, [r7, #28]
 8001994:	8afb      	ldrh	r3, [r7, #22]
 8001996:	69fa      	ldr	r2, [r7, #28]
 8001998:	429a      	cmp	r2, r3
 800199a:	dbc1      	blt.n	8001920 <animate_led_theater_chase_rainbow+0x54>
            }
            animate_led_show_strip(mask_theater_chase);
 800199c:	88fb      	ldrh	r3, [r7, #6]
 800199e:	4618      	mov	r0, r3
 80019a0:	f7ff fa6c 	bl	8000e7c <animate_led_show_strip>
            task_led_ctrl_delay((float_t)speed_delay / task_led_ctrl_speed());
 80019a4:	88bb      	ldrh	r3, [r7, #4]
 80019a6:	ee07 3a90 	vmov	s15, r3
 80019aa:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80019ae:	f000 ff29 	bl	8002804 <task_led_ctrl_speed>
 80019b2:	eeb0 7a40 	vmov.f32	s14, s0
 80019b6:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80019ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019be:	ee17 0a90 	vmov	r0, s15
 80019c2:	f000 fdb9 	bl	8002538 <task_led_ctrl_delay>
            for (int iii = 0; iii < strip_size; iii += 3) animate_led_set_pixel(mask_theater_chase, iii + qqq, 0, 0, 0); // turn every third pixel off
 80019c6:	2300      	movs	r3, #0
 80019c8:	61bb      	str	r3, [r7, #24]
 80019ca:	e00f      	b.n	80019ec <animate_led_theater_chase_rainbow+0x120>
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	b29a      	uxth	r2, r3
 80019d0:	6a3b      	ldr	r3, [r7, #32]
 80019d2:	b29b      	uxth	r3, r3
 80019d4:	4413      	add	r3, r2
 80019d6:	b299      	uxth	r1, r3
 80019d8:	88f8      	ldrh	r0, [r7, #6]
 80019da:	2300      	movs	r3, #0
 80019dc:	9300      	str	r3, [sp, #0]
 80019de:	2300      	movs	r3, #0
 80019e0:	2200      	movs	r2, #0
 80019e2:	f7ff fa5b 	bl	8000e9c <animate_led_set_pixel>
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	3303      	adds	r3, #3
 80019ea:	61bb      	str	r3, [r7, #24]
 80019ec:	8afb      	ldrh	r3, [r7, #22]
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	dbeb      	blt.n	80019cc <animate_led_theater_chase_rainbow+0x100>
        for (int qqq = 0; qqq < 3; qqq++)
 80019f4:	6a3b      	ldr	r3, [r7, #32]
 80019f6:	3301      	adds	r3, #1
 80019f8:	623b      	str	r3, [r7, #32]
 80019fa:	6a3b      	ldr	r3, [r7, #32]
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	f77f af7b 	ble.w	80018f8 <animate_led_theater_chase_rainbow+0x2c>
    for (int jjj = 0; jjj < 256; jjj++) // cycel all 256 colors in the animate_led_wheel
 8001a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a04:	3301      	adds	r3, #1
 8001a06:	627b      	str	r3, [r7, #36]	; 0x24
 8001a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0a:	2bff      	cmp	r3, #255	; 0xff
 8001a0c:	f77f af71 	ble.w	80018f2 <animate_led_theater_chase_rainbow+0x26>
 8001a10:	e002      	b.n	8001a18 <animate_led_theater_chase_rainbow+0x14c>
            if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 8001a12:	bf00      	nop
 8001a14:	e000      	b.n	8001a18 <animate_led_theater_chase_rainbow+0x14c>
                if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 8001a16:	bf00      	nop
        }
    }
}
 8001a18:	372c      	adds	r7, #44	; 0x2c
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	ecbd 8b02 	vpop	{d8}
 8001a20:	bd90      	pop	{r4, r7, pc}
 8001a22:	bf00      	nop
 8001a24:	80808081 	.word	0x80808081

08001a28 <color_led_hex_to_rgb>:
    [COLORS_BROWN] = COLOR_HEX_BROWN
};


void color_led_hex_to_rgb(const color_hex_code_e color, uint8_t *color_array)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
    color_array[offsetof(ws2812b_led_t, red)] = ((color & 0xFF0000) >> (BITS_PER_BYTE * (2 - offsetof(ws2812b_led_t, red))));
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	0c1b      	lsrs	r3, r3, #16
 8001a36:	b2da      	uxtb	r2, r3
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	701a      	strb	r2, [r3, #0]
    color_array[offsetof(ws2812b_led_t, green)] = ((color & 0x00FF00) >> (BITS_PER_BYTE * (2 - offsetof(ws2812b_led_t, green))));
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	0a1a      	lsrs	r2, r3, #8
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	3301      	adds	r3, #1
 8001a44:	b2d2      	uxtb	r2, r2
 8001a46:	701a      	strb	r2, [r3, #0]
    color_array[offsetof(ws2812b_led_t, blue)] = ((color & 0x0000FF) >> (BITS_PER_BYTE * (2 - offsetof(ws2812b_led_t, blue))));
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	3302      	adds	r3, #2
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	b2d2      	uxtb	r2, r2
 8001a50:	701a      	strb	r2, [r3, #0]
}
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
	...

08001a60 <reset_ws2812b>:

extern volatile int datasentflag;

uint16_t pwm_reset[50] = {0};
void reset_ws2812b(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
    //xSemaphoreTake(g_dma_transfer_semaphore, portMAX_DELAY);
    //xTaskNotify(g_dma_transfer_handle, 0, eSetValueWithOverwrite);
    HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_1, (uint32_t *)pwm_reset, sizeof(pwm_reset));
 8001a64:	2364      	movs	r3, #100	; 0x64
 8001a66:	4a09      	ldr	r2, [pc, #36]	; (8001a8c <reset_ws2812b+0x2c>)
 8001a68:	2100      	movs	r1, #0
 8001a6a:	4809      	ldr	r0, [pc, #36]	; (8001a90 <reset_ws2812b+0x30>)
 8001a6c:	f006 f956 	bl	8007d1c <HAL_TIM_PWM_Start_DMA>
    HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_2, (uint32_t *)pwm_reset, sizeof(pwm_reset));
 8001a70:	2364      	movs	r3, #100	; 0x64
 8001a72:	4a06      	ldr	r2, [pc, #24]	; (8001a8c <reset_ws2812b+0x2c>)
 8001a74:	2104      	movs	r1, #4
 8001a76:	4806      	ldr	r0, [pc, #24]	; (8001a90 <reset_ws2812b+0x30>)
 8001a78:	f006 f950 	bl	8007d1c <HAL_TIM_PWM_Start_DMA>
    HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_3, (uint32_t *)pwm_reset, sizeof(pwm_reset));
 8001a7c:	2364      	movs	r3, #100	; 0x64
 8001a7e:	4a03      	ldr	r2, [pc, #12]	; (8001a8c <reset_ws2812b+0x2c>)
 8001a80:	2108      	movs	r1, #8
 8001a82:	4803      	ldr	r0, [pc, #12]	; (8001a90 <reset_ws2812b+0x30>)
 8001a84:	f006 f94a 	bl	8007d1c <HAL_TIM_PWM_Start_DMA>
}
 8001a88:	bf00      	nop
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	200002b0 	.word	0x200002b0
 8001a90:	20001df0 	.word	0x20001df0

08001a94 <ws2812_convert_strip_num_to_strip_bit>:

static strip_bit_e ws2812_convert_strip_num_to_strip_bit(const strip_num_e strip_num)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	71fb      	strb	r3, [r7, #7]
	return (strip_bit_e)(strip_num + 1);
 8001a9e:	79fb      	ldrb	r3, [r7, #7]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	b2db      	uxtb	r3, r3
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <ws2812_convert_strip_bit_to_strip_num>:


static strip_num_e ws2812_convert_strip_bit_to_strip_num(const strip_bit_e strip_bit)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	71fb      	strb	r3, [r7, #7]
	return (strip_num_e)(strip_bit - 1);
 8001aba:	79fb      	ldrb	r3, [r7, #7]
 8001abc:	3b01      	subs	r3, #1
 8001abe:	b2db      	uxtb	r3, r3
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <ws2812_get_pwm_strip_offset>:


uint16_t ws2812_get_pwm_strip_offset(const strip_bit_e strip_bit)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	71fb      	strb	r3, [r7, #7]
    uint16_t offset = 0;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	81fb      	strh	r3, [r7, #14]
    uint8_t strip_num = 0;
 8001ada:	2300      	movs	r3, #0
 8001adc:	737b      	strb	r3, [r7, #13]
    switch (strip_bit)
 8001ade:	79fb      	ldrb	r3, [r7, #7]
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d104      	bne.n	8001aee <ws2812_get_pwm_strip_offset+0x22>
    {
#if defined(STRIP_1_LENGTH)
        case STRIP_BIT_1:
            offset = 0;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	81fb      	strh	r3, [r7, #14]
            strip_num = 1;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	737b      	strb	r3, [r7, #13]
        break;
 8001aec:	e000      	b.n	8001af0 <ws2812_get_pwm_strip_offset+0x24>
        case STRIP_BIT_5:
            offset = STRIP_1_LENGTH + STRIP_2_LENGTH + STRIP_3_LENGTH + STRIP_4_LENGTH;
        break;
#endif
        default:
        break;
 8001aee:	bf00      	nop
    }
    return ((offset * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + (strip_num * WS2812B_RESET_TIME_CYCLES));
 8001af0:	89fa      	ldrh	r2, [r7, #14]
 8001af2:	4613      	mov	r3, r2
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	4413      	add	r3, r2
 8001af8:	00db      	lsls	r3, r3, #3
 8001afa:	ee07 3a90 	vmov	s15, r3
 8001afe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b02:	7b7b      	ldrb	r3, [r7, #13]
 8001b04:	ee07 3a90 	vmov	s15, r3
 8001b08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b0c:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001b30 <ws2812_get_pwm_strip_offset+0x64>
 8001b10:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001b14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b1c:	ee17 3a90 	vmov	r3, s15
 8001b20:	b29b      	uxth	r3, r3
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3714      	adds	r7, #20
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	453b8000 	.word	0x453b8000

08001b34 <ws2812_get_strip_size>:


uint16_t ws2812_get_strip_size(const strip_bit_e strip_bit)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	71fb      	strb	r3, [r7, #7]
	uint16_t strip_size = 0;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	81fb      	strh	r3, [r7, #14]
	if (STRIP_BIT_ALL_SET == strip_bit) strip_size = g_max_strip_length;
 8001b42:	79fb      	ldrb	r3, [r7, #7]
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d103      	bne.n	8001b50 <ws2812_get_strip_size+0x1c>
 8001b48:	4b09      	ldr	r3, [pc, #36]	; (8001b70 <ws2812_get_strip_size+0x3c>)
 8001b4a:	881b      	ldrh	r3, [r3, #0]
 8001b4c:	81fb      	strh	r3, [r7, #14]
 8001b4e:	e009      	b.n	8001b64 <ws2812_get_strip_size+0x30>
	else strip_size = strip_length[ws2812_convert_strip_num_to_strip_bit(strip_bit)];
 8001b50:	79fb      	ldrb	r3, [r7, #7]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7ff ff9e 	bl	8001a94 <ws2812_convert_strip_num_to_strip_bit>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	4b05      	ldr	r3, [pc, #20]	; (8001b74 <ws2812_get_strip_size+0x40>)
 8001b5e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001b62:	81fb      	strh	r3, [r7, #14]
	return strip_size;
 8001b64:	89fb      	ldrh	r3, [r7, #14]
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	200002a4 	.word	0x200002a4
 8001b74:	2000005c 	.word	0x2000005c

08001b78 <ws2812_get_num_active_animation_leds>:
	return STRIP_BIT_NO_MORE_SET;  // if this is returned
}


uint16_t ws2812_get_num_active_animation_leds(const strip_mask_t strip_mask)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	4603      	mov	r3, r0
 8001b80:	80fb      	strh	r3, [r7, #6]
	uint16_t strip_size = 0;
 8001b82:	2300      	movs	r3, #0
 8001b84:	81fb      	strh	r3, [r7, #14]
	if (STRIP_BIT_ALL_SET == strip_mask) strip_size = g_num_leds;
 8001b86:	88fb      	ldrh	r3, [r7, #6]
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d103      	bne.n	8001b94 <ws2812_get_num_active_animation_leds+0x1c>
 8001b8c:	4b09      	ldr	r3, [pc, #36]	; (8001bb4 <ws2812_get_num_active_animation_leds+0x3c>)
 8001b8e:	881b      	ldrh	r3, [r3, #0]
 8001b90:	81fb      	strh	r3, [r7, #14]
 8001b92:	e008      	b.n	8001ba6 <ws2812_get_num_active_animation_leds+0x2e>
	else
	{
#if defined(STRIP_1_LENGTH)
		if (STRIP_BIT_1 & strip_mask) strip_size += STRIP_1_LENGTH;
 8001b94:	88fb      	ldrh	r3, [r7, #6]
 8001b96:	f003 0301 	and.w	r3, r3, #1
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d002      	beq.n	8001ba6 <ws2812_get_num_active_animation_leds+0x2e>
 8001ba0:	89fb      	ldrh	r3, [r7, #14]
 8001ba2:	3314      	adds	r3, #20
 8001ba4:	81fb      	strh	r3, [r7, #14]
#endif
#if defined(STRIP_9_LENGTH)
		if (STRIP_BIT_9 & strip_mask) strip_size += STRIP_9_LENGTH;
#endif
	}
	return strip_size;
 8001ba6:	89fb      	ldrh	r3, [r7, #14]
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3714      	adds	r7, #20
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr
 8001bb4:	200002a0 	.word	0x200002a0

08001bb8 <ws2812_led_get_max_strip_size>:


uint16_t ws2812_led_get_max_strip_size(const strip_mask_t strip_mask)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	80fb      	strh	r3, [r7, #6]
	uint16_t strip_size = 0;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	81fb      	strh	r3, [r7, #14]
	if (STRIP_BIT_ALL_SET == strip_mask) strip_size = g_max_strip_length;
 8001bc6:	88fb      	ldrh	r3, [r7, #6]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d103      	bne.n	8001bd4 <ws2812_led_get_max_strip_size+0x1c>
 8001bcc:	4b0a      	ldr	r3, [pc, #40]	; (8001bf8 <ws2812_led_get_max_strip_size+0x40>)
 8001bce:	881b      	ldrh	r3, [r3, #0]
 8001bd0:	81fb      	strh	r3, [r7, #14]
 8001bd2:	e00a      	b.n	8001bea <ws2812_led_get_max_strip_size+0x32>
	else
	{
#if defined(STRIP_1_LENGTH)
		if ((STRIP_BIT_1 & strip_mask) && (strip_size < STRIP_1_LENGTH)) strip_size = STRIP_1_LENGTH;
 8001bd4:	88fb      	ldrh	r3, [r7, #6]
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d004      	beq.n	8001bea <ws2812_led_get_max_strip_size+0x32>
 8001be0:	89fb      	ldrh	r3, [r7, #14]
 8001be2:	2b13      	cmp	r3, #19
 8001be4:	d801      	bhi.n	8001bea <ws2812_led_get_max_strip_size+0x32>
 8001be6:	2314      	movs	r3, #20
 8001be8:	81fb      	strh	r3, [r7, #14]
#endif
#if defined(STRIP_9_LENGTH)
		if ((STRIP_BIT_9 & strip_mask) && (strip_size < STRIP_9_LENGTH)) strip_size = STRIP_9_LENGTH;
#endif
	}
	return strip_size;
 8001bea:	89fb      	ldrh	r3, [r7, #14]
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3714      	adds	r7, #20
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr
 8001bf8:	200002a4 	.word	0x200002a4

08001bfc <ws2812_pixel_is_in_strip_range>:


bool ws2812_pixel_is_in_strip_range(const strip_bit_e strip_bit, const uint16_t pixel)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4603      	mov	r3, r0
 8001c04:	460a      	mov	r2, r1
 8001c06:	71fb      	strb	r3, [r7, #7]
 8001c08:	4613      	mov	r3, r2
 8001c0a:	80bb      	strh	r3, [r7, #4]
	bool return_val = false;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	73fb      	strb	r3, [r7, #15]
#if defined(STRIP_1_LENGTH)
	if ((STRIP_BIT_1 == strip_bit) && (pixel < STRIP_1_LENGTH)) return_val = true;
 8001c10:	79fb      	ldrb	r3, [r7, #7]
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d104      	bne.n	8001c20 <ws2812_pixel_is_in_strip_range+0x24>
 8001c16:	88bb      	ldrh	r3, [r7, #4]
 8001c18:	2b13      	cmp	r3, #19
 8001c1a:	d801      	bhi.n	8001c20 <ws2812_pixel_is_in_strip_range+0x24>
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	73fb      	strb	r3, [r7, #15]
	else if ((STRIP_BIT_8 == strip_bit) && (pixel < STRIP_8_LENGTH)) return_val = true;
#endif
#if defined(STRIP_9_LENGTH)
	else if ((STRIP_BIT_9 == strip_bit) && (pixel < STRIP_9_LENGTH)) return_val = true;
#endif
	return return_val;
 8001c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3714      	adds	r7, #20
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
	...

08001c30 <ws2812b_set_led>:


void ws2812b_set_led(const strip_bit_e strip_bit, const uint16_t led_num, const color_t red, const color_t green,
                     const color_t blue)
{
 8001c30:	b590      	push	{r4, r7, lr}
 8001c32:	b087      	sub	sp, #28
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	4604      	mov	r4, r0
 8001c38:	4608      	mov	r0, r1
 8001c3a:	4611      	mov	r1, r2
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	4623      	mov	r3, r4
 8001c40:	73fb      	strb	r3, [r7, #15]
 8001c42:	4603      	mov	r3, r0
 8001c44:	81bb      	strh	r3, [r7, #12]
 8001c46:	460b      	mov	r3, r1
 8001c48:	73bb      	strb	r3, [r7, #14]
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	72fb      	strb	r3, [r7, #11]
	strip_num_e strip_num = ws2812_convert_strip_bit_to_strip_num(strip_bit);
 8001c4e:	7bfb      	ldrb	r3, [r7, #15]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff ff2d 	bl	8001ab0 <ws2812_convert_strip_bit_to_strip_num>
 8001c56:	4603      	mov	r3, r0
 8001c58:	75fb      	strb	r3, [r7, #23]
    (gp_ws28128b_strip[strip_num] + led_num)->red = red * g_max_current_ratio;
 8001c5a:	7bbb      	ldrb	r3, [r7, #14]
 8001c5c:	ee07 3a90 	vmov	s15, r3
 8001c60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c64:	4b26      	ldr	r3, [pc, #152]	; (8001d00 <ws2812b_set_led+0xd0>)
 8001c66:	edd3 7a00 	vldr	s15, [r3]
 8001c6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c6e:	7dfb      	ldrb	r3, [r7, #23]
 8001c70:	4a24      	ldr	r2, [pc, #144]	; (8001d04 <ws2812b_set_led+0xd4>)
 8001c72:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001c76:	89ba      	ldrh	r2, [r7, #12]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	4413      	add	r3, r2
 8001c7e:	440b      	add	r3, r1
 8001c80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c84:	edc7 7a01 	vstr	s15, [r7, #4]
 8001c88:	793a      	ldrb	r2, [r7, #4]
 8001c8a:	b2d2      	uxtb	r2, r2
 8001c8c:	701a      	strb	r2, [r3, #0]
    (gp_ws28128b_strip[strip_num] + led_num)->green = green * g_max_current_ratio;
 8001c8e:	7afb      	ldrb	r3, [r7, #11]
 8001c90:	ee07 3a90 	vmov	s15, r3
 8001c94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c98:	4b19      	ldr	r3, [pc, #100]	; (8001d00 <ws2812b_set_led+0xd0>)
 8001c9a:	edd3 7a00 	vldr	s15, [r3]
 8001c9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ca2:	7dfb      	ldrb	r3, [r7, #23]
 8001ca4:	4a17      	ldr	r2, [pc, #92]	; (8001d04 <ws2812b_set_led+0xd4>)
 8001ca6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001caa:	89ba      	ldrh	r2, [r7, #12]
 8001cac:	4613      	mov	r3, r2
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	4413      	add	r3, r2
 8001cb2:	440b      	add	r3, r1
 8001cb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cb8:	edc7 7a01 	vstr	s15, [r7, #4]
 8001cbc:	793a      	ldrb	r2, [r7, #4]
 8001cbe:	b2d2      	uxtb	r2, r2
 8001cc0:	705a      	strb	r2, [r3, #1]
    (gp_ws28128b_strip[strip_num] + led_num)->blue = blue * g_max_current_ratio;
 8001cc2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001cc6:	ee07 3a90 	vmov	s15, r3
 8001cca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cce:	4b0c      	ldr	r3, [pc, #48]	; (8001d00 <ws2812b_set_led+0xd0>)
 8001cd0:	edd3 7a00 	vldr	s15, [r3]
 8001cd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cd8:	7dfb      	ldrb	r3, [r7, #23]
 8001cda:	4a0a      	ldr	r2, [pc, #40]	; (8001d04 <ws2812b_set_led+0xd4>)
 8001cdc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001ce0:	89ba      	ldrh	r2, [r7, #12]
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	4413      	add	r3, r2
 8001ce8:	440b      	add	r3, r1
 8001cea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cee:	edc7 7a01 	vstr	s15, [r7, #4]
 8001cf2:	793a      	ldrb	r2, [r7, #4]
 8001cf4:	b2d2      	uxtb	r2, r2
 8001cf6:	709a      	strb	r2, [r3, #2]
}
 8001cf8:	bf00      	nop
 8001cfa:	371c      	adds	r7, #28
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd90      	pop	{r4, r7, pc}
 8001d00:	20000000 	.word	0x20000000
 8001d04:	200002ac 	.word	0x200002ac

08001d08 <ws2812b_fill_pwm_buffer_strip_one>:



#if defined(STRIP_1_LENGTH)
void ws2812b_fill_pwm_buffer_strip_one(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b086      	sub	sp, #24
 8001d0c:	af00      	add	r7, sp, #0
    uint32_t color = 0;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	60fb      	str	r3, [r7, #12]
    uint32_t strip_size = STRIP_1_LENGTH;
 8001d12:	2314      	movs	r3, #20
 8001d14:	60bb      	str	r3, [r7, #8]
    uint32_t strip_pwm_offset = ws2812_get_pwm_strip_offset(STRIP_BIT_1);
 8001d16:	2001      	movs	r0, #1
 8001d18:	f7ff fed8 	bl	8001acc <ws2812_get_pwm_strip_offset>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	607b      	str	r3, [r7, #4]
    while (!gb_dma_cmplt_strip_2)
 8001d20:	e002      	b.n	8001d28 <ws2812b_fill_pwm_buffer_strip_one+0x20>
    {
        osDelay(1);
 8001d22:	2001      	movs	r0, #1
 8001d24:	f000 ff4c 	bl	8002bc0 <osDelay>
    while (!gb_dma_cmplt_strip_2)
 8001d28:	4b44      	ldr	r3, [pc, #272]	; (8001e3c <ws2812b_fill_pwm_buffer_strip_one+0x134>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	f083 0301 	eor.w	r3, r3, #1
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d1f5      	bne.n	8001d22 <ws2812b_fill_pwm_buffer_strip_one+0x1a>
    }
    for (uint16_t iii = 0; iii < strip_size; iii++)
 8001d36:	2300      	movs	r3, #0
 8001d38:	82fb      	strh	r3, [r7, #22]
 8001d3a:	e046      	b.n	8001dca <ws2812b_fill_pwm_buffer_strip_one+0xc2>
    {
        color = (((gp_ws28128b_strip[STRIP_NUM_1] + iii)->green) << 16) | \
 8001d3c:	4b40      	ldr	r3, [pc, #256]	; (8001e40 <ws2812b_fill_pwm_buffer_strip_one+0x138>)
 8001d3e:	6819      	ldr	r1, [r3, #0]
 8001d40:	8afa      	ldrh	r2, [r7, #22]
 8001d42:	4613      	mov	r3, r2
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	4413      	add	r3, r2
 8001d48:	440b      	add	r3, r1
 8001d4a:	785b      	ldrb	r3, [r3, #1]
 8001d4c:	0419      	lsls	r1, r3, #16
                                (((gp_ws28128b_strip[STRIP_NUM_1] + iii)->red) << 8) | \
 8001d4e:	4b3c      	ldr	r3, [pc, #240]	; (8001e40 <ws2812b_fill_pwm_buffer_strip_one+0x138>)
 8001d50:	6818      	ldr	r0, [r3, #0]
 8001d52:	8afa      	ldrh	r2, [r7, #22]
 8001d54:	4613      	mov	r3, r2
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	4413      	add	r3, r2
 8001d5a:	4403      	add	r3, r0
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	021b      	lsls	r3, r3, #8
        color = (((gp_ws28128b_strip[STRIP_NUM_1] + iii)->green) << 16) | \
 8001d60:	4319      	orrs	r1, r3
                                (((gp_ws28128b_strip[STRIP_NUM_1] + iii)->blue));
 8001d62:	4b37      	ldr	r3, [pc, #220]	; (8001e40 <ws2812b_fill_pwm_buffer_strip_one+0x138>)
 8001d64:	6818      	ldr	r0, [r3, #0]
 8001d66:	8afa      	ldrh	r2, [r7, #22]
 8001d68:	4613      	mov	r3, r2
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	4413      	add	r3, r2
 8001d6e:	4403      	add	r3, r0
 8001d70:	789b      	ldrb	r3, [r3, #2]
                                (((gp_ws28128b_strip[STRIP_NUM_1] + iii)->red) << 8) | \
 8001d72:	430b      	orrs	r3, r1
        color = (((gp_ws28128b_strip[STRIP_NUM_1] + iii)->green) << 16) | \
 8001d74:	60fb      	str	r3, [r7, #12]
        for (uint8_t yyy = 0; yyy < BITS_PER_BYTE * sizeof(ws2812b_led_t); yyy++)
 8001d76:	2300      	movs	r3, #0
 8001d78:	757b      	strb	r3, [r7, #21]
 8001d7a:	e020      	b.n	8001dbe <ws2812b_fill_pwm_buffer_strip_one+0xb6>
        {
            gp_pwm_data_fill[strip_pwm_offset + (iii * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + yyy] = (color & (1 << (23 - yyy))) ? (uint16_t)(WS2812B_BIT_SET_CYCLES + 1) : (uint16_t)WS2812B_BIT_RESET_CYCLES;
 8001d7c:	7d7b      	ldrb	r3, [r7, #21]
 8001d7e:	f1c3 0317 	rsb	r3, r3, #23
 8001d82:	2201      	movs	r2, #1
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	461a      	mov	r2, r3
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <ws2812b_fill_pwm_buffer_strip_one+0x8e>
 8001d92:	2028      	movs	r0, #40	; 0x28
 8001d94:	e000      	b.n	8001d98 <ws2812b_fill_pwm_buffer_strip_one+0x90>
 8001d96:	2014      	movs	r0, #20
 8001d98:	4b2a      	ldr	r3, [pc, #168]	; (8001e44 <ws2812b_fill_pwm_buffer_strip_one+0x13c>)
 8001d9a:	6819      	ldr	r1, [r3, #0]
 8001d9c:	8afa      	ldrh	r2, [r7, #22]
 8001d9e:	4613      	mov	r3, r2
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	4413      	add	r3, r2
 8001da4:	00db      	lsls	r3, r3, #3
 8001da6:	461a      	mov	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	441a      	add	r2, r3
 8001dac:	7d7b      	ldrb	r3, [r7, #21]
 8001dae:	4413      	add	r3, r2
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	440b      	add	r3, r1
 8001db4:	4602      	mov	r2, r0
 8001db6:	801a      	strh	r2, [r3, #0]
        for (uint8_t yyy = 0; yyy < BITS_PER_BYTE * sizeof(ws2812b_led_t); yyy++)
 8001db8:	7d7b      	ldrb	r3, [r7, #21]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	757b      	strb	r3, [r7, #21]
 8001dbe:	7d7b      	ldrb	r3, [r7, #21]
 8001dc0:	2b17      	cmp	r3, #23
 8001dc2:	d9db      	bls.n	8001d7c <ws2812b_fill_pwm_buffer_strip_one+0x74>
    for (uint16_t iii = 0; iii < strip_size; iii++)
 8001dc4:	8afb      	ldrh	r3, [r7, #22]
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	82fb      	strh	r3, [r7, #22]
 8001dca:	8afb      	ldrh	r3, [r7, #22]
 8001dcc:	68ba      	ldr	r2, [r7, #8]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d8b4      	bhi.n	8001d3c <ws2812b_fill_pwm_buffer_strip_one+0x34>
        }
    }
    for (uint16_t iii = 0; iii < WS2812B_RESET_TIME_CYCLES; iii++)
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	827b      	strh	r3, [r7, #18]
 8001dd6:	e012      	b.n	8001dfe <ws2812b_fill_pwm_buffer_strip_one+0xf6>
    {
        gp_pwm_data_fill[(strip_pwm_offset + (strip_size * BITS_PER_BYTE * sizeof(ws2812b_led_t))) + iii] = 0;
 8001dd8:	4b1a      	ldr	r3, [pc, #104]	; (8001e44 <ws2812b_fill_pwm_buffer_strip_one+0x13c>)
 8001dda:	6819      	ldr	r1, [r3, #0]
 8001ddc:	68ba      	ldr	r2, [r7, #8]
 8001dde:	4613      	mov	r3, r2
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	4413      	add	r3, r2
 8001de4:	00db      	lsls	r3, r3, #3
 8001de6:	461a      	mov	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	441a      	add	r2, r3
 8001dec:	8a7b      	ldrh	r3, [r7, #18]
 8001dee:	4413      	add	r3, r2
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	440b      	add	r3, r1
 8001df4:	2200      	movs	r2, #0
 8001df6:	801a      	strh	r2, [r3, #0]
    for (uint16_t iii = 0; iii < WS2812B_RESET_TIME_CYCLES; iii++)
 8001df8:	8a7b      	ldrh	r3, [r7, #18]
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	827b      	strh	r3, [r7, #18]
 8001dfe:	8a7b      	ldrh	r3, [r7, #18]
 8001e00:	ee07 3a90 	vmov	s15, r3
 8001e04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e08:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001e48 <ws2812b_fill_pwm_buffer_strip_one+0x140>
 8001e0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e14:	d4e0      	bmi.n	8001dd8 <ws2812b_fill_pwm_buffer_strip_one+0xd0>
    }
    gb_dma_cmplt_strip_1 = false;
 8001e16:	4b0d      	ldr	r3, [pc, #52]	; (8001e4c <ws2812b_fill_pwm_buffer_strip_one+0x144>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	701a      	strb	r2, [r3, #0]
    HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_1, (uint32_t *)(gp_pwm_data_fill + strip_pwm_offset), (STRIP_1_LENGTH * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + WS2812B_RESET_TIME_CYCLES);
 8001e1c:	4b09      	ldr	r3, [pc, #36]	; (8001e44 <ws2812b_fill_pwm_buffer_strip_one+0x13c>)
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	441a      	add	r2, r3
 8001e26:	f640 5398 	movw	r3, #3480	; 0xd98
 8001e2a:	2100      	movs	r1, #0
 8001e2c:	4808      	ldr	r0, [pc, #32]	; (8001e50 <ws2812b_fill_pwm_buffer_strip_one+0x148>)
 8001e2e:	f005 ff75 	bl	8007d1c <HAL_TIM_PWM_Start_DMA>
}
 8001e32:	bf00      	nop
 8001e34:	3718      	adds	r7, #24
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	2000006a 	.word	0x2000006a
 8001e40:	200002ac 	.word	0x200002ac
 8001e44:	200002a8 	.word	0x200002a8
 8001e48:	453b8000 	.word	0x453b8000
 8001e4c:	20000069 	.word	0x20000069
 8001e50:	20001df0 	.word	0x20001df0

08001e54 <ws2812b_init>:


uint32_t g_size = 0;

void ws2812b_init(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0

#if defined(STRIP_1_LENGTH)
	gp_ws28128b_strip[STRIP_NUM_1] = g_strip_1;
 8001e5a:	4b30      	ldr	r3, [pc, #192]	; (8001f1c <ws2812b_init+0xc8>)
 8001e5c:	4a30      	ldr	r2, [pc, #192]	; (8001f20 <ws2812b_init+0xcc>)
 8001e5e:	601a      	str	r2, [r3, #0]
#endif
#if defined(STRIP_4_LENGTH)
	gp_ws28128b_strip[STRIP_NUM_4] = g_strip_4;
#endif

	uint8_t num_strips = NUM_STRIPS;
 8001e60:	2301      	movs	r3, #1
 8001e62:	70fb      	strb	r3, [r7, #3]
	for (int iii = 0; iii < NUM_STRIPS; iii++) g_all_strip_mask |= 1 << iii;
 8001e64:	2300      	movs	r3, #0
 8001e66:	607b      	str	r3, [r7, #4]
 8001e68:	e00f      	b.n	8001e8a <ws2812b_init+0x36>
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	b21a      	sxth	r2, r3
 8001e74:	4b2b      	ldr	r3, [pc, #172]	; (8001f24 <ws2812b_init+0xd0>)
 8001e76:	881b      	ldrh	r3, [r3, #0]
 8001e78:	b21b      	sxth	r3, r3
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	b21b      	sxth	r3, r3
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	4b28      	ldr	r3, [pc, #160]	; (8001f24 <ws2812b_init+0xd0>)
 8001e82:	801a      	strh	r2, [r3, #0]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	3301      	adds	r3, #1
 8001e88:	607b      	str	r3, [r7, #4]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	ddec      	ble.n	8001e6a <ws2812b_init+0x16>
	switch (num_strips)
 8001e90:	78fb      	ldrb	r3, [r7, #3]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d10d      	bne.n	8001eb2 <ws2812b_init+0x5e>
		case 2:
			g_num_leds += STRIP_2_LENGTH;
			if (STRIP_2_LENGTH > g_max_strip_length) g_max_strip_length = STRIP_2_LENGTH;
#endif
		case 1:
			g_num_leds += STRIP_1_LENGTH;
 8001e96:	4b24      	ldr	r3, [pc, #144]	; (8001f28 <ws2812b_init+0xd4>)
 8001e98:	881b      	ldrh	r3, [r3, #0]
 8001e9a:	3314      	adds	r3, #20
 8001e9c:	b29a      	uxth	r2, r3
 8001e9e:	4b22      	ldr	r3, [pc, #136]	; (8001f28 <ws2812b_init+0xd4>)
 8001ea0:	801a      	strh	r2, [r3, #0]
			if (STRIP_1_LENGTH > g_max_strip_length) g_max_strip_length = STRIP_1_LENGTH;
 8001ea2:	4b22      	ldr	r3, [pc, #136]	; (8001f2c <ws2812b_init+0xd8>)
 8001ea4:	881b      	ldrh	r3, [r3, #0]
 8001ea6:	2b13      	cmp	r3, #19
 8001ea8:	d802      	bhi.n	8001eb0 <ws2812b_init+0x5c>
 8001eaa:	4b20      	ldr	r3, [pc, #128]	; (8001f2c <ws2812b_init+0xd8>)
 8001eac:	2214      	movs	r2, #20
 8001eae:	801a      	strh	r2, [r3, #0]
		break;
 8001eb0:	bf00      	nop
	}
    gp_pwm_data_fill = malloc((sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_num_leds) + (NUM_STRIPS * WS2812B_RESET_TIME_CYCLES));
 8001eb2:	4b1d      	ldr	r3, [pc, #116]	; (8001f28 <ws2812b_init+0xd4>)
 8001eb4:	881b      	ldrh	r3, [r3, #0]
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	4613      	mov	r3, r2
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	4413      	add	r3, r2
 8001ebe:	00db      	lsls	r3, r3, #3
 8001ec0:	ee07 3a90 	vmov	s15, r3
 8001ec4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ec8:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001f30 <ws2812b_init+0xdc>
 8001ecc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ed0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ed4:	ee17 0a90 	vmov	r0, s15
 8001ed8:	f009 fb34 	bl	800b544 <malloc>
 8001edc:	4603      	mov	r3, r0
 8001ede:	461a      	mov	r2, r3
 8001ee0:	4b14      	ldr	r3, [pc, #80]	; (8001f34 <ws2812b_init+0xe0>)
 8001ee2:	601a      	str	r2, [r3, #0]
    //gp_pwm_data_ping = malloc((sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_num_leds) + (NUM_STRIPS * WS2812B_RESET_TIME_CYCLES));
    //gp_pwm_data_pong = malloc((sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_num_leds) + (NUM_STRIPS * WS2812B_RESET_TIME_CYCLES));
    g_size = (sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_num_leds) + (NUM_STRIPS * WS2812B_RESET_TIME_CYCLES);
 8001ee4:	4b10      	ldr	r3, [pc, #64]	; (8001f28 <ws2812b_init+0xd4>)
 8001ee6:	881b      	ldrh	r3, [r3, #0]
 8001ee8:	461a      	mov	r2, r3
 8001eea:	4613      	mov	r3, r2
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	4413      	add	r3, r2
 8001ef0:	00db      	lsls	r3, r3, #3
 8001ef2:	ee07 3a90 	vmov	s15, r3
 8001ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001efa:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001f30 <ws2812b_init+0xdc>
 8001efe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f06:	ee17 2a90 	vmov	r2, s15
 8001f0a:	4b0b      	ldr	r3, [pc, #44]	; (8001f38 <ws2812b_init+0xe4>)
 8001f0c:	601a      	str	r2, [r3, #0]
    //gp_pwm_data_fill = malloc((sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_max_strip_length) + WS2812B_RESET_TIME_CYCLES);
	current_monitor_init();
 8001f0e:	f7fe ff7b 	bl	8000e08 <current_monitor_init>
}
 8001f12:	bf00      	nop
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	200002ac 	.word	0x200002ac
 8001f20:	20000264 	.word	0x20000264
 8001f24:	200002a2 	.word	0x200002a2
 8001f28:	200002a0 	.word	0x200002a0
 8001f2c:	200002a4 	.word	0x200002a4
 8001f30:	453b8000 	.word	0x453b8000
 8001f34:	200002a8 	.word	0x200002a8
 8001f38:	20000314 	.word	0x20000314

08001f3c <ws2812b_show_strip_one>:


void ws2812b_show_strip_one(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
    ws2812b_fill_pwm_buffer_strip_one();
 8001f40:	f7ff fee2 	bl	8001d08 <ws2812b_fill_pwm_buffer_strip_one>
}
 8001f44:	bf00      	nop
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <task_button_press_interrupt_occurred>:
bool        g_animate_led_pause_flag = false;
bool        g_animate_led_interrupt = false;
bool        g_interrupt_flag[NUM_ISR] = {false};

bool task_button_press_interrupt_occurred(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
    return g_animate_led_interrupt;
 8001f4c:	4b03      	ldr	r3, [pc, #12]	; (8001f5c <task_button_press_interrupt_occurred+0x14>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	2000033b 	.word	0x2000033b

08001f60 <task_led_ctrl_button_to_isr>:


isr_e task_led_ctrl_button_to_isr(const board_init_push_buttons_e button)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	4603      	mov	r3, r0
 8001f68:	71fb      	strb	r3, [r7, #7]
    isr_e return_val;
    switch (button)
 8001f6a:	79fb      	ldrb	r3, [r7, #7]
 8001f6c:	2b03      	cmp	r3, #3
 8001f6e:	d817      	bhi.n	8001fa0 <task_led_ctrl_button_to_isr+0x40>
 8001f70:	a201      	add	r2, pc, #4	; (adr r2, 8001f78 <task_led_ctrl_button_to_isr+0x18>)
 8001f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f76:	bf00      	nop
 8001f78:	08001f89 	.word	0x08001f89
 8001f7c:	08001f8f 	.word	0x08001f8f
 8001f80:	08001f95 	.word	0x08001f95
 8001f84:	08001f9b 	.word	0x08001f9b
    {
        case PUSH_BUTTON_A:
            return_val = ISR_SPEED;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	73fb      	strb	r3, [r7, #15]
        break;
 8001f8c:	e009      	b.n	8001fa2 <task_led_ctrl_button_to_isr+0x42>
        case PUSH_BUTTON_B:
            return_val = ISR_STATE;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	73fb      	strb	r3, [r7, #15]
        break;
 8001f92:	e006      	b.n	8001fa2 <task_led_ctrl_button_to_isr+0x42>
        case PUSH_BUTTON_C:
            return_val = ISR_COLOR;
 8001f94:	2302      	movs	r3, #2
 8001f96:	73fb      	strb	r3, [r7, #15]
        break;
 8001f98:	e003      	b.n	8001fa2 <task_led_ctrl_button_to_isr+0x42>
        case PUSH_BUTTON_D:
            return_val = ISR_PAUSE;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	73fb      	strb	r3, [r7, #15]
        break;
 8001f9e:	e000      	b.n	8001fa2 <task_led_ctrl_button_to_isr+0x42>
        default: // do nothing!
        break;
 8001fa0:	bf00      	nop
    }
    return return_val;
 8001fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3714      	adds	r7, #20
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <task_button_press_ctrl_set_interrupt_flag>:


void task_button_press_ctrl_set_interrupt_flag(const isr_e src)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	71fb      	strb	r3, [r7, #7]
    g_animate_led_interrupt = true;
 8001fba:	4b06      	ldr	r3, [pc, #24]	; (8001fd4 <task_button_press_ctrl_set_interrupt_flag+0x24>)
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	701a      	strb	r2, [r3, #0]
    g_interrupt_flag[src] = true;
 8001fc0:	79fb      	ldrb	r3, [r7, #7]
 8001fc2:	4a05      	ldr	r2, [pc, #20]	; (8001fd8 <task_button_press_ctrl_set_interrupt_flag+0x28>)
 8001fc4:	2101      	movs	r1, #1
 8001fc6:	54d1      	strb	r1, [r2, r3]
}
 8001fc8:	bf00      	nop
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr
 8001fd4:	2000033b 	.word	0x2000033b
 8001fd8:	2000033c 	.word	0x2000033c

08001fdc <task_button_press_ctrl_interrupt_flag>:


bool task_button_press_ctrl_interrupt_flag(const isr_e src)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	71fb      	strb	r3, [r7, #7]
    bool return_val = g_interrupt_flag[src];
 8001fe6:	79fb      	ldrb	r3, [r7, #7]
 8001fe8:	4a08      	ldr	r2, [pc, #32]	; (800200c <task_button_press_ctrl_interrupt_flag+0x30>)
 8001fea:	5cd3      	ldrb	r3, [r2, r3]
 8001fec:	73fb      	strb	r3, [r7, #15]
    if (return_val) g_interrupt_flag[src] = false; // auto clear
 8001fee:	7bfb      	ldrb	r3, [r7, #15]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d003      	beq.n	8001ffc <task_button_press_ctrl_interrupt_flag+0x20>
 8001ff4:	79fb      	ldrb	r3, [r7, #7]
 8001ff6:	4a05      	ldr	r2, [pc, #20]	; (800200c <task_button_press_ctrl_interrupt_flag+0x30>)
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	54d1      	strb	r1, [r2, r3]
    return return_val;
 8001ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3714      	adds	r7, #20
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	2000033c 	.word	0x2000033c

08002010 <task_button_press_check_interrupts>:


bool task_button_press_check_interrupts(uint8_t *red, uint8_t *green, uint8_t *blue)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b086      	sub	sp, #24
 8002014:	af00      	add	r7, sp, #0
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	60b9      	str	r1, [r7, #8]
 800201a:	607a      	str	r2, [r7, #4]
    bool return_val = false;
 800201c:	2300      	movs	r3, #0
 800201e:	75fb      	strb	r3, [r7, #23]
    if (task_button_press_major_state_change())
 8002020:	f000 f85a 	bl	80020d8 <task_button_press_major_state_change>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d008      	beq.n	800203c <task_button_press_check_interrupts+0x2c>
    {
        task_button_press_interrupt_flag_clear();
 800202a:	f000 f849 	bl	80020c0 <task_button_press_interrupt_flag_clear>
        return_val = true;
 800202e:	2301      	movs	r3, #1
 8002030:	75fb      	strb	r3, [r7, #23]
        animate_led_solid_custom_color((uint16_t)STRIP_BIT_ALL_SET, COLOR_HEX_BLACK);
 8002032:	2100      	movs	r1, #0
 8002034:	2001      	movs	r0, #1
 8002036:	f7fe ffef 	bl	8001018 <animate_led_solid_custom_color>
 800203a:	e039      	b.n	80020b0 <task_button_press_check_interrupts+0xa0>
    }
    else if (task_button_press_ctrl_interrupt_flag(ISR_STATE))
 800203c:	2001      	movs	r0, #1
 800203e:	f7ff ffcd 	bl	8001fdc <task_button_press_ctrl_interrupt_flag>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d008      	beq.n	800205a <task_button_press_check_interrupts+0x4a>
    {
        task_button_press_interrupt_flag_clear();
 8002048:	f000 f83a 	bl	80020c0 <task_button_press_interrupt_flag_clear>
        return_val = true;
 800204c:	2301      	movs	r3, #1
 800204e:	75fb      	strb	r3, [r7, #23]
        animate_led_solid_custom_color((uint16_t)STRIP_BIT_ALL_SET, COLOR_HEX_BLACK);
 8002050:	2100      	movs	r1, #0
 8002052:	2001      	movs	r0, #1
 8002054:	f7fe ffe0 	bl	8001018 <animate_led_solid_custom_color>
 8002058:	e02a      	b.n	80020b0 <task_button_press_check_interrupts+0xa0>
    }
    else if (task_button_press_ctrl_interrupt_flag(ISR_PAUSE))
 800205a:	2003      	movs	r0, #3
 800205c:	f7ff ffbe 	bl	8001fdc <task_button_press_ctrl_interrupt_flag>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d00a      	beq.n	800207c <task_button_press_check_interrupts+0x6c>
    {
        task_button_press_interrupt_flag_clear();
 8002066:	f000 f82b 	bl	80020c0 <task_button_press_interrupt_flag_clear>
        while (g_animate_led_pause_flag)
 800206a:	e002      	b.n	8002072 <task_button_press_check_interrupts+0x62>
        {
            osDelay(10);
 800206c:	200a      	movs	r0, #10
 800206e:	f000 fda7 	bl	8002bc0 <osDelay>
        while (g_animate_led_pause_flag)
 8002072:	4b12      	ldr	r3, [pc, #72]	; (80020bc <task_button_press_check_interrupts+0xac>)
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1f8      	bne.n	800206c <task_button_press_check_interrupts+0x5c>
 800207a:	e019      	b.n	80020b0 <task_button_press_check_interrupts+0xa0>
        }
    }
    else if (task_button_press_ctrl_interrupt_flag(ISR_COLOR))
 800207c:	2002      	movs	r0, #2
 800207e:	f7ff ffad 	bl	8001fdc <task_button_press_ctrl_interrupt_flag>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d013      	beq.n	80020b0 <task_button_press_check_interrupts+0xa0>
    {
        task_button_press_interrupt_flag_clear();
 8002088:	f000 f81a 	bl	80020c0 <task_button_press_interrupt_flag_clear>
        // interrupt modifies the current color... apply it to the animation!
        *red = task_led_ctrl_color_red_hex();
 800208c:	f000 fb1e 	bl	80026cc <task_led_ctrl_color_red_hex>
 8002090:	4603      	mov	r3, r0
 8002092:	461a      	mov	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	701a      	strb	r2, [r3, #0]
        *green = task_led_ctrl_color_green_hex();
 8002098:	f000 fb40 	bl	800271c <task_led_ctrl_color_green_hex>
 800209c:	4603      	mov	r3, r0
 800209e:	461a      	mov	r2, r3
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	701a      	strb	r2, [r3, #0]
        *blue = task_led_ctrl_color_blue_hex();
 80020a4:	f000 fb62 	bl	800276c <task_led_ctrl_color_blue_hex>
 80020a8:	4603      	mov	r3, r0
 80020aa:	461a      	mov	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	701a      	strb	r2, [r3, #0]
    }
    return return_val;
 80020b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3718      	adds	r7, #24
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	2000033a 	.word	0x2000033a

080020c0 <task_button_press_interrupt_flag_clear>:


void task_button_press_interrupt_flag_clear(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
    g_animate_led_interrupt = false;
 80020c4:	4b03      	ldr	r3, [pc, #12]	; (80020d4 <task_button_press_interrupt_flag_clear+0x14>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	701a      	strb	r2, [r3, #0]
}
 80020ca:	bf00      	nop
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr
 80020d4:	2000033b 	.word	0x2000033b

080020d8 <task_button_press_major_state_change>:
uint32_t c_ok_count = 0;
uint32_t d_ok_count = 0;


bool task_button_press_major_state_change(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
    return task_button_press_major_change;
 80020dc:	4b03      	ldr	r3, [pc, #12]	; (80020ec <task_button_press_major_state_change+0x14>)
 80020de:	781b      	ldrb	r3, [r3, #0]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	20000339 	.word	0x20000339

080020f0 <task_button_press>:
    task_button_press_major_change = false;
}


void task_button_press(void *argument)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b086      	sub	sp, #24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
    uint32_t button_pressed_bit = 0;
 80020f8:	2300      	movs	r3, #0
 80020fa:	60bb      	str	r3, [r7, #8]
    uint32_t timestamp_diff = 0;
 80020fc:	2300      	movs	r3, #0
 80020fe:	60fb      	str	r3, [r7, #12]
    color_hex_code_e color = COLOR_HEX_BLACK;
 8002100:	2300      	movs	r3, #0
 8002102:	617b      	str	r3, [r7, #20]
    IRQn_Type irq_type = 0;
 8002104:	2300      	movs	r3, #0
 8002106:	74fb      	strb	r3, [r7, #19]
    while (1)
    {
        xTaskNotifyWait(0, button_pressed_bit, &button_pressed_bit, portMAX_DELAY);
 8002108:	68b9      	ldr	r1, [r7, #8]
 800210a:	f107 0208 	add.w	r2, r7, #8
 800210e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002112:	2000      	movs	r0, #0
 8002114:	f002 fa00 	bl	8004518 <xTaskNotifyWait>
#if !defined(BOARD_SPUDGLO_V5)
        HAL_GPIO_WritePin(PIN_PORT_B, PIN_INT_LVL_EN, GPIO_PIN_RESET);
        osDelay(700);
        HAL_GPIO_WritePin(PIN_PORT_B, PIN_INT_LVL_EN, GPIO_PIN_SET);
#endif
        timestamp_diff = g_button_press_timestamp[(board_init_push_buttons_e) button_pressed_bit][TIMESTAMP_CURRENT] - \
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	b2db      	uxtb	r3, r3
 800211c:	461a      	mov	r2, r3
 800211e:	4b84      	ldr	r3, [pc, #528]	; (8002330 <task_button_press+0x240>)
 8002120:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
                        g_button_press_timestamp[(board_init_push_buttons_e)button_pressed_bit][TIMESTAMP_PREVIOUS];
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	b2db      	uxtb	r3, r3
 8002128:	4981      	ldr	r1, [pc, #516]	; (8002330 <task_button_press+0x240>)
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	440b      	add	r3, r1
 800212e:	685b      	ldr	r3, [r3, #4]
        timestamp_diff = g_button_press_timestamp[(board_init_push_buttons_e) button_pressed_bit][TIMESTAMP_CURRENT] - \
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	60fb      	str	r3, [r7, #12]
        if (timestamp_diff < SWITCH_FAST_PRESS_TIME_MILLISECONDS) fast_press_count++;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800213a:	d206      	bcs.n	800214a <task_button_press+0x5a>
 800213c:	4b7d      	ldr	r3, [pc, #500]	; (8002334 <task_button_press+0x244>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	3301      	adds	r3, #1
 8002142:	b2da      	uxtb	r2, r3
 8002144:	4b7b      	ldr	r3, [pc, #492]	; (8002334 <task_button_press+0x244>)
 8002146:	701a      	strb	r2, [r3, #0]
 8002148:	e002      	b.n	8002150 <task_button_press+0x60>
        else fast_press_count = 0;
 800214a:	4b7a      	ldr	r3, [pc, #488]	; (8002334 <task_button_press+0x244>)
 800214c:	2200      	movs	r2, #0
 800214e:	701a      	strb	r2, [r3, #0]
        task_button_press_ctrl_set_interrupt_flag(task_led_ctrl_button_to_isr((board_init_push_buttons_e) button_pressed_bit));
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	b2db      	uxtb	r3, r3
 8002154:	4618      	mov	r0, r3
 8002156:	f7ff ff03 	bl	8001f60 <task_led_ctrl_button_to_isr>
 800215a:	4603      	mov	r3, r0
 800215c:	4618      	mov	r0, r3
 800215e:	f7ff ff27 	bl	8001fb0 <task_button_press_ctrl_set_interrupt_flag>
        if (fast_press_count >= (SWITCH_HISTORY_DEPTH-1))
 8002162:	4b74      	ldr	r3, [pc, #464]	; (8002334 <task_button_press+0x244>)
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	2b03      	cmp	r3, #3
 8002168:	d975      	bls.n	8002256 <task_button_press+0x166>
        {
            task_button_press_major_change = true;
 800216a:	4b73      	ldr	r3, [pc, #460]	; (8002338 <task_button_press+0x248>)
 800216c:	2201      	movs	r2, #1
 800216e:	701a      	strb	r2, [r3, #0]
            fast_press_count = 0;
 8002170:	4b70      	ldr	r3, [pc, #448]	; (8002334 <task_button_press+0x244>)
 8002172:	2200      	movs	r2, #0
 8002174:	701a      	strb	r2, [r3, #0]
            switch ((board_init_push_buttons_e) button_pressed_bit)
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b03      	cmp	r3, #3
 800217c:	d841      	bhi.n	8002202 <task_button_press+0x112>
 800217e:	a201      	add	r2, pc, #4	; (adr r2, 8002184 <task_button_press+0x94>)
 8002180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002184:	08002195 	.word	0x08002195
 8002188:	080021af 	.word	0x080021af
 800218c:	080021cb 	.word	0x080021cb
 8002190:	080021e5 	.word	0x080021e5
            {
                case PUSH_BUTTON_A:
                    a_ok_count++;
 8002194:	4b69      	ldr	r3, [pc, #420]	; (800233c <task_button_press+0x24c>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	3301      	adds	r3, #1
 800219a:	4a68      	ldr	r2, [pc, #416]	; (800233c <task_button_press+0x24c>)
 800219c:	6013      	str	r3, [r2, #0]
                    color = COLOR_HEX_GREEN;
 800219e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021a2:	617b      	str	r3, [r7, #20]
                    irq_type = PUSH_BUTTON_A_IRQ;
 80021a4:	2308      	movs	r3, #8
 80021a6:	74fb      	strb	r3, [r7, #19]
                    task_led_ctrl_speed_reset();
 80021a8:	f000 fb80 	bl	80028ac <task_led_ctrl_speed_reset>

                break;
 80021ac:	e02a      	b.n	8002204 <task_button_press+0x114>
                case PUSH_BUTTON_B:
                    b_ok_count++;
 80021ae:	4b64      	ldr	r3, [pc, #400]	; (8002340 <task_button_press+0x250>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	3301      	adds	r3, #1
 80021b4:	4a62      	ldr	r2, [pc, #392]	; (8002340 <task_button_press+0x250>)
 80021b6:	6013      	str	r3, [r2, #0]
                    color = COLOR_HEX_BLUE;
 80021b8:	23ff      	movs	r3, #255	; 0xff
 80021ba:	617b      	str	r3, [r7, #20]
                    irq_type = PUSH_BUTTON_B_IRQ;
 80021bc:	2328      	movs	r3, #40	; 0x28
 80021be:	74fb      	strb	r3, [r7, #19]
                    task_led_ctrl_animate_iteration_reset();
 80021c0:	f000 fb80 	bl	80028c4 <task_led_ctrl_animate_iteration_reset>
                    task_led_ctrl_animate_state_demo(); // enter demo state
 80021c4:	f000 fba8 	bl	8002918 <task_led_ctrl_animate_state_demo>
                break;
 80021c8:	e01c      	b.n	8002204 <task_button_press+0x114>
                case PUSH_BUTTON_C:
                    c_ok_count++;
 80021ca:	4b5e      	ldr	r3, [pc, #376]	; (8002344 <task_button_press+0x254>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	3301      	adds	r3, #1
 80021d0:	4a5c      	ldr	r2, [pc, #368]	; (8002344 <task_button_press+0x254>)
 80021d2:	6013      	str	r3, [r2, #0]
                    color = COLOR_HEX_RED;
 80021d4:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 80021d8:	617b      	str	r3, [r7, #20]
                    irq_type = PUSH_BUTTON_C_IRQ;
 80021da:	2317      	movs	r3, #23
 80021dc:	74fb      	strb	r3, [r7, #19]
                    // don't change iteration count.  Simply go to color demo mode.
                    task_led_ctrl_color_state_demo();
 80021de:	f000 fa27 	bl	8002630 <task_led_ctrl_color_state_demo>
                break;
 80021e2:	e00f      	b.n	8002204 <task_button_press+0x114>
                case PUSH_BUTTON_D:
                    task_led_ctrl_brightness_adjust();
 80021e4:	f000 f9be 	bl	8002564 <task_led_ctrl_brightness_adjust>
                    task_led_ctrl_clear_pause();
 80021e8:	f000 f9ec 	bl	80025c4 <task_led_ctrl_clear_pause>
                    d_ok_count++;
 80021ec:	4b56      	ldr	r3, [pc, #344]	; (8002348 <task_button_press+0x258>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	3301      	adds	r3, #1
 80021f2:	4a55      	ldr	r2, [pc, #340]	; (8002348 <task_button_press+0x258>)
 80021f4:	6013      	str	r3, [r2, #0]
                    color = COLOR_HEX_WHITE;
 80021f6:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80021fa:	617b      	str	r3, [r7, #20]
                    irq_type = PUSH_BUTTON_D_IRQ;
 80021fc:	2306      	movs	r3, #6
 80021fe:	74fb      	strb	r3, [r7, #19]
                break;
 8002200:	e000      	b.n	8002204 <task_button_press+0x114>
                default:
                break;
 8002202:	bf00      	nop
            }
            for (uint8_t iii = 0; iii < 3; iii++)
 8002204:	2300      	movs	r3, #0
 8002206:	74bb      	strb	r3, [r7, #18]
 8002208:	e012      	b.n	8002230 <task_button_press+0x140>
            {
                animate_led_solid_custom_color((uint16_t)STRIP_BIT_ALL_SET, color);
 800220a:	6979      	ldr	r1, [r7, #20]
 800220c:	2001      	movs	r0, #1
 800220e:	f7fe ff03 	bl	8001018 <animate_led_solid_custom_color>
                osDelay(500);
 8002212:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002216:	f000 fcd3 	bl	8002bc0 <osDelay>
                animate_led_solid_custom_color((uint16_t)STRIP_BIT_ALL_SET, COLOR_HEX_BLACK);
 800221a:	2100      	movs	r1, #0
 800221c:	2001      	movs	r0, #1
 800221e:	f7fe fefb 	bl	8001018 <animate_led_solid_custom_color>
                osDelay(500);
 8002222:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002226:	f000 fccb 	bl	8002bc0 <osDelay>
            for (uint8_t iii = 0; iii < 3; iii++)
 800222a:	7cbb      	ldrb	r3, [r7, #18]
 800222c:	3301      	adds	r3, #1
 800222e:	74bb      	strb	r3, [r7, #18]
 8002230:	7cbb      	ldrb	r3, [r7, #18]
 8002232:	2b02      	cmp	r3, #2
 8002234:	d9e9      	bls.n	800220a <task_button_press+0x11a>
            }
            HAL_NVIC_SetPriority(irq_type, 24, 0);
 8002236:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800223a:	2200      	movs	r2, #0
 800223c:	2118      	movs	r1, #24
 800223e:	4618      	mov	r0, r3
 8002240:	f003 fc1d 	bl	8005a7e <HAL_NVIC_SetPriority>
            HAL_NVIC_EnableIRQ(irq_type);
 8002244:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002248:	4618      	mov	r0, r3
 800224a:	f003 fc34 	bl	8005ab6 <HAL_NVIC_EnableIRQ>
            task_button_press_major_change = false;
 800224e:	4b3a      	ldr	r3, [pc, #232]	; (8002338 <task_button_press+0x248>)
 8002250:	2200      	movs	r2, #0
 8002252:	701a      	strb	r2, [r3, #0]
 8002254:	e758      	b.n	8002108 <task_button_press+0x18>
        }
        else
        {
            // no state change here
            task_button_press_ctrl_set_interrupt_flag(task_led_ctrl_button_to_isr((board_init_push_buttons_e) button_pressed_bit));
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	b2db      	uxtb	r3, r3
 800225a:	4618      	mov	r0, r3
 800225c:	f7ff fe80 	bl	8001f60 <task_led_ctrl_button_to_isr>
 8002260:	4603      	mov	r3, r0
 8002262:	4618      	mov	r0, r3
 8002264:	f7ff fea4 	bl	8001fb0 <task_button_press_ctrl_set_interrupt_flag>
            switch ((board_init_push_buttons_e) button_pressed_bit)
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	b2db      	uxtb	r3, r3
 800226c:	2b03      	cmp	r3, #3
 800226e:	d85d      	bhi.n	800232c <task_button_press+0x23c>
 8002270:	a201      	add	r2, pc, #4	; (adr r2, 8002278 <task_button_press+0x188>)
 8002272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002276:	bf00      	nop
 8002278:	08002289 	.word	0x08002289
 800227c:	080022a9 	.word	0x080022a9
 8002280:	080022dd 	.word	0x080022dd
 8002284:	0800230d 	.word	0x0800230d
            {
                case PUSH_BUTTON_A:
                    a_ok_count++;
 8002288:	4b2c      	ldr	r3, [pc, #176]	; (800233c <task_button_press+0x24c>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	3301      	adds	r3, #1
 800228e:	4a2b      	ldr	r2, [pc, #172]	; (800233c <task_button_press+0x24c>)
 8002290:	6013      	str	r3, [r2, #0]
                    task_led_ctrl_speed_adjust();
 8002292:	f000 faf3 	bl	800287c <task_led_ctrl_speed_adjust>
                    HAL_NVIC_SetPriority(PUSH_BUTTON_A_IRQ, 24, 0);
 8002296:	2200      	movs	r2, #0
 8002298:	2118      	movs	r1, #24
 800229a:	2008      	movs	r0, #8
 800229c:	f003 fbef 	bl	8005a7e <HAL_NVIC_SetPriority>
                    HAL_NVIC_EnableIRQ(PUSH_BUTTON_A_IRQ);
 80022a0:	2008      	movs	r0, #8
 80022a2:	f003 fc08 	bl	8005ab6 <HAL_NVIC_EnableIRQ>
                break;
 80022a6:	e042      	b.n	800232e <task_button_press+0x23e>
                case PUSH_BUTTON_B:
                    b_ok_count++;
 80022a8:	4b25      	ldr	r3, [pc, #148]	; (8002340 <task_button_press+0x250>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	3301      	adds	r3, #1
 80022ae:	4a24      	ldr	r2, [pc, #144]	; (8002340 <task_button_press+0x250>)
 80022b0:	6013      	str	r3, [r2, #0]
                    if (MASTER_LED_STATE_DEMO == task_led_ctrl_animate_state())
 80022b2:	f000 fb59 	bl	8002968 <task_led_ctrl_animate_state>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d102      	bne.n	80022c2 <task_button_press+0x1d2>
                    {
                        task_led_ctrl_animate_state_fixed(); // animation count is auto cleared here.
 80022bc:	f000 fb3e 	bl	800293c <task_led_ctrl_animate_state_fixed>
 80022c0:	e003      	b.n	80022ca <task_button_press+0x1da>
                    }
                    else
                    {
                        task_led_ctrl_animate_iteration_reset();
 80022c2:	f000 faff 	bl	80028c4 <task_led_ctrl_animate_iteration_reset>
                        task_led_ctrl_animate_adjust_state();
 80022c6:	f000 fb09 	bl	80028dc <task_led_ctrl_animate_adjust_state>
                    }
                    HAL_NVIC_SetPriority(PUSH_BUTTON_B_IRQ, 24, 0);
 80022ca:	2200      	movs	r2, #0
 80022cc:	2118      	movs	r1, #24
 80022ce:	2028      	movs	r0, #40	; 0x28
 80022d0:	f003 fbd5 	bl	8005a7e <HAL_NVIC_SetPriority>
                    HAL_NVIC_EnableIRQ(PUSH_BUTTON_B_IRQ);
 80022d4:	2028      	movs	r0, #40	; 0x28
 80022d6:	f003 fbee 	bl	8005ab6 <HAL_NVIC_EnableIRQ>
                break;
 80022da:	e028      	b.n	800232e <task_button_press+0x23e>
                case PUSH_BUTTON_C:
                    c_ok_count++;
 80022dc:	4b19      	ldr	r3, [pc, #100]	; (8002344 <task_button_press+0x254>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	3301      	adds	r3, #1
 80022e2:	4a18      	ldr	r2, [pc, #96]	; (8002344 <task_button_press+0x254>)
 80022e4:	6013      	str	r3, [r2, #0]
                    if (MASTER_COLOR_STATE_DEMO == task_led_ctrl_color_state())
 80022e6:	f000 f997 	bl	8002618 <task_led_ctrl_color_state>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d102      	bne.n	80022f6 <task_button_press+0x206>
                    {
                        task_led_ctrl_color_state_fixed();
 80022f0:	f000 f9aa 	bl	8002648 <task_led_ctrl_color_state_fixed>
 80022f4:	e001      	b.n	80022fa <task_button_press+0x20a>
                    }
                    else
                    {
                        task_led_ctrl_color_adjust();
 80022f6:	f000 f9b9 	bl	800266c <task_led_ctrl_color_adjust>
                    }
                    HAL_NVIC_SetPriority(PUSH_BUTTON_C_IRQ, 24, 0);
 80022fa:	2200      	movs	r2, #0
 80022fc:	2118      	movs	r1, #24
 80022fe:	2017      	movs	r0, #23
 8002300:	f003 fbbd 	bl	8005a7e <HAL_NVIC_SetPriority>
                    HAL_NVIC_EnableIRQ(PUSH_BUTTON_C_IRQ);
 8002304:	2017      	movs	r0, #23
 8002306:	f003 fbd6 	bl	8005ab6 <HAL_NVIC_EnableIRQ>

                break;
 800230a:	e010      	b.n	800232e <task_button_press+0x23e>
                case PUSH_BUTTON_D:
                    d_ok_count++;
 800230c:	4b0e      	ldr	r3, [pc, #56]	; (8002348 <task_button_press+0x258>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	3301      	adds	r3, #1
 8002312:	4a0d      	ldr	r2, [pc, #52]	; (8002348 <task_button_press+0x258>)
 8002314:	6013      	str	r3, [r2, #0]
                    task_led_ctrl_pause();
 8002316:	f000 f961 	bl	80025dc <task_led_ctrl_pause>
                    HAL_NVIC_SetPriority(PUSH_BUTTON_D_IRQ, 24, 0);
 800231a:	2200      	movs	r2, #0
 800231c:	2118      	movs	r1, #24
 800231e:	2006      	movs	r0, #6
 8002320:	f003 fbad 	bl	8005a7e <HAL_NVIC_SetPriority>
                    HAL_NVIC_EnableIRQ(PUSH_BUTTON_D_IRQ);
 8002324:	2006      	movs	r0, #6
 8002326:	f003 fbc6 	bl	8005ab6 <HAL_NVIC_EnableIRQ>
                break;
 800232a:	e000      	b.n	800232e <task_button_press+0x23e>
                default:
                break;
 800232c:	bf00      	nop
        xTaskNotifyWait(0, button_pressed_bit, &button_pressed_bit, portMAX_DELAY);
 800232e:	e6eb      	b.n	8002108 <task_button_press+0x18>
 8002330:	20000318 	.word	0x20000318
 8002334:	20000338 	.word	0x20000338
 8002338:	20000339 	.word	0x20000339
 800233c:	20000340 	.word	0x20000340
 8002340:	20000344 	.word	0x20000344
 8002344:	20000348 	.word	0x20000348
 8002348:	2000034c 	.word	0x2000034c

0800234c <task_led_ctrl_adjust_parameters>:
extern bool             task_button_press_major_change;


static void task_led_ctrl_adjust_parameters(const task_led_ctrl_loop_iterations_e max_iterations,
                                            const task_led_ctrl_delay_ms_e animation_delay_ms)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	4603      	mov	r3, r0
 8002354:	460a      	mov	r2, r1
 8002356:	71fb      	strb	r3, [r7, #7]
 8002358:	4613      	mov	r3, r2
 800235a:	80bb      	strh	r3, [r7, #4]
    g_animation_iterations++;
 800235c:	4b18      	ldr	r3, [pc, #96]	; (80023c0 <task_led_ctrl_adjust_parameters+0x74>)
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	3301      	adds	r3, #1
 8002362:	b2da      	uxtb	r2, r3
 8002364:	4b16      	ldr	r3, [pc, #88]	; (80023c0 <task_led_ctrl_adjust_parameters+0x74>)
 8002366:	701a      	strb	r2, [r3, #0]
    if (MASTER_LED_STATE_DEMO == g_master_led_state)
 8002368:	4b16      	ldr	r3, [pc, #88]	; (80023c4 <task_led_ctrl_adjust_parameters+0x78>)
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d11b      	bne.n	80023a8 <task_led_ctrl_adjust_parameters+0x5c>
    {
        if (TASK_LED_CTRL_DELAY_MS_0 != animation_delay_ms) task_led_ctrl_delay(animation_delay_ms);
 8002370:	88bb      	ldrh	r3, [r7, #4]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d003      	beq.n	800237e <task_led_ctrl_adjust_parameters+0x32>
 8002376:	88bb      	ldrh	r3, [r7, #4]
 8002378:	4618      	mov	r0, r3
 800237a:	f000 f8dd 	bl	8002538 <task_led_ctrl_delay>
        if (max_iterations == g_animation_iterations)
 800237e:	4b10      	ldr	r3, [pc, #64]	; (80023c0 <task_led_ctrl_adjust_parameters+0x74>)
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	79fa      	ldrb	r2, [r7, #7]
 8002384:	429a      	cmp	r2, r3
 8002386:	d10f      	bne.n	80023a8 <task_led_ctrl_adjust_parameters+0x5c>
        {
            g_led_state = (led_state_e) (g_led_state + 1);
 8002388:	4b0f      	ldr	r3, [pc, #60]	; (80023c8 <task_led_ctrl_adjust_parameters+0x7c>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	3301      	adds	r3, #1
 800238e:	b2da      	uxtb	r2, r3
 8002390:	4b0d      	ldr	r3, [pc, #52]	; (80023c8 <task_led_ctrl_adjust_parameters+0x7c>)
 8002392:	701a      	strb	r2, [r3, #0]
            if (NUM_LED_STATES == g_led_state) g_led_state = LED_STATE_FIRST;
 8002394:	4b0c      	ldr	r3, [pc, #48]	; (80023c8 <task_led_ctrl_adjust_parameters+0x7c>)
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	2b0a      	cmp	r3, #10
 800239a:	d102      	bne.n	80023a2 <task_led_ctrl_adjust_parameters+0x56>
 800239c:	4b0a      	ldr	r3, [pc, #40]	; (80023c8 <task_led_ctrl_adjust_parameters+0x7c>)
 800239e:	2200      	movs	r2, #0
 80023a0:	701a      	strb	r2, [r3, #0]
            g_animation_iterations = 0;
 80023a2:	4b07      	ldr	r3, [pc, #28]	; (80023c0 <task_led_ctrl_adjust_parameters+0x74>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	701a      	strb	r2, [r3, #0]
        }
    }
    if (MASTER_COLOR_STATE_DEMO == task_led_ctrl_color_state()) task_led_ctrl_color_random();
 80023a8:	f000 f936 	bl	8002618 <task_led_ctrl_color_state>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d101      	bne.n	80023b6 <task_led_ctrl_adjust_parameters+0x6a>
 80023b2:	f000 fa01 	bl	80027b8 <task_led_ctrl_color_random>
}
 80023b6:	bf00      	nop
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	20000355 	.word	0x20000355
 80023c4:	20000350 	.word	0x20000350
 80023c8:	20000351 	.word	0x20000351

080023cc <task_led_ctrl_strip_one>:
char binary_start[25] = "application/macbinary\r\n\r\n";
extern uint8_t* g_uart_sector_full_buffer;
uint64_t flash_address = 0x8020000;
uint64_t flash_index = 0;
void task_led_ctrl_strip_one(void *argument)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af02      	add	r7, sp, #8
 80023d2:	6078      	str	r0, [r7, #4]
//	}
//
//    osDelay(10);
    while (1)
    {
        while(task_button_press_major_state_change()) osDelay(100);
 80023d4:	e002      	b.n	80023dc <task_led_ctrl_strip_one+0x10>
 80023d6:	2064      	movs	r0, #100	; 0x64
 80023d8:	f000 fbf2 	bl	8002bc0 <osDelay>
 80023dc:	f7ff fe7c 	bl	80020d8 <task_button_press_major_state_change>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1f7      	bne.n	80023d6 <task_led_ctrl_strip_one+0xa>

        if (1)//(flash_info_animation_enabled(g_led_state))
        {
            switch(g_led_state)
 80023e6:	4b52      	ldr	r3, [pc, #328]	; (8002530 <task_led_ctrl_strip_one+0x164>)
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	2b09      	cmp	r3, #9
 80023ec:	f200 809d 	bhi.w	800252a <task_led_ctrl_strip_one+0x15e>
 80023f0:	a201      	add	r2, pc, #4	; (adr r2, 80023f8 <task_led_ctrl_strip_one+0x2c>)
 80023f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023f6:	bf00      	nop
 80023f8:	08002511 	.word	0x08002511
 80023fc:	08002421 	.word	0x08002421
 8002400:	08002437 	.word	0x08002437
 8002404:	0800246d 	.word	0x0800246d
 8002408:	08002485 	.word	0x08002485
 800240c:	08002499 	.word	0x08002499
 8002410:	080024ab 	.word	0x080024ab
 8002414:	080024c5 	.word	0x080024c5
 8002418:	080024d7 	.word	0x080024d7
 800241c:	080024ef 	.word	0x080024ef
            {
                case LED_STATE_WHITE_COLOR:
                    animate_led_solid_custom_color((uint16_t)STRIP_BIT_1, COLOR_HEX_WHITE);
 8002420:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8002424:	2001      	movs	r0, #1
 8002426:	f7fe fdf7 	bl	8001018 <animate_led_solid_custom_color>
                    task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_1, TASK_LED_CTRL_DELAY_MS_5000);
 800242a:	f241 3188 	movw	r1, #5000	; 0x1388
 800242e:	2001      	movs	r0, #1
 8002430:	f7ff ff8c 	bl	800234c <task_led_ctrl_adjust_parameters>
                break;
 8002434:	e07a      	b.n	800252c <task_led_ctrl_strip_one+0x160>
                case LED_STATE_SOLID_COLOR:
                    animate_led_solid_custom_color((uint16_t)STRIP_BIT_1, task_led_ctrl_color_hex());
 8002436:	f000 f937 	bl	80026a8 <task_led_ctrl_color_hex>
 800243a:	4603      	mov	r3, r0
 800243c:	4619      	mov	r1, r3
 800243e:	2001      	movs	r0, #1
 8002440:	f7fe fdea 	bl	8001018 <animate_led_solid_custom_color>
                    if (MASTER_LED_STATE_FIXED == g_master_led_state)
 8002444:	4b3b      	ldr	r3, [pc, #236]	; (8002534 <task_led_ctrl_strip_one+0x168>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	2b01      	cmp	r3, #1
 800244a:	d109      	bne.n	8002460 <task_led_ctrl_strip_one+0x94>
                    {
                        task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_5, TASK_LED_CTRL_DELAY_MS_1000);
 800244c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002450:	2005      	movs	r0, #5
 8002452:	f7ff ff7b 	bl	800234c <task_led_ctrl_adjust_parameters>
                        task_led_ctrl_delay(1000);
 8002456:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800245a:	f000 f86d 	bl	8002538 <task_led_ctrl_delay>
                    }
                    else task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_5, TASK_LED_CTRL_DELAY_MS_5000);
                break;
 800245e:	e065      	b.n	800252c <task_led_ctrl_strip_one+0x160>
                    else task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_5, TASK_LED_CTRL_DELAY_MS_5000);
 8002460:	f241 3188 	movw	r1, #5000	; 0x1388
 8002464:	2005      	movs	r0, #5
 8002466:	f7ff ff71 	bl	800234c <task_led_ctrl_adjust_parameters>
                break;
 800246a:	e05f      	b.n	800252c <task_led_ctrl_strip_one+0x160>
                case LED_STATE_SPARKLE_NO_FILL:
                    animate_led_turn_all_pixels_off();
 800246c:	f7fe fdf6 	bl	800105c <animate_led_turn_all_pixels_off>
                    animate_led_sparkle_only_random_color(STRIP_BIT_1, false, 100);//random(0, 50));
 8002470:	2264      	movs	r2, #100	; 0x64
 8002472:	2100      	movs	r1, #0
 8002474:	2001      	movs	r0, #1
 8002476:	f7ff f811 	bl	800149c <animate_led_sparkle_only_random_color>
                    task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_5, TASK_LED_CTRL_DELAY_MS_0);
 800247a:	2100      	movs	r1, #0
 800247c:	2005      	movs	r0, #5
 800247e:	f7ff ff65 	bl	800234c <task_led_ctrl_adjust_parameters>
                break;
 8002482:	e053      	b.n	800252c <task_led_ctrl_strip_one+0x160>
                case LED_STATE_SPARKLE_FILL:
                    animate_led_sparkle_only_random_color(STRIP_BIT_1, true, 100);
 8002484:	2264      	movs	r2, #100	; 0x64
 8002486:	2101      	movs	r1, #1
 8002488:	2001      	movs	r0, #1
 800248a:	f7ff f807 	bl	800149c <animate_led_sparkle_only_random_color>
                    task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_10, TASK_LED_CTRL_DELAY_MS_0);
 800248e:	2100      	movs	r1, #0
 8002490:	200a      	movs	r0, #10
 8002492:	f7ff ff5b 	bl	800234c <task_led_ctrl_adjust_parameters>
                break;
 8002496:	e049      	b.n	800252c <task_led_ctrl_strip_one+0x160>
                case LED_STATE_RAINBOW_CYCLE:
                    animate_led_rainbow_cycle(STRIP_BIT_1, 10);
 8002498:	210a      	movs	r1, #10
 800249a:	2001      	movs	r0, #1
 800249c:	f7ff f890 	bl	80015c0 <animate_led_rainbow_cycle>
                    task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_5, TASK_LED_CTRL_DELAY_MS_0);
 80024a0:	2100      	movs	r1, #0
 80024a2:	2005      	movs	r0, #5
 80024a4:	f7ff ff52 	bl	800234c <task_led_ctrl_adjust_parameters>
                break;
 80024a8:	e040      	b.n	800252c <task_led_ctrl_strip_one+0x160>
                case LED_STATE_THEATER_CHASE:
                    animate_led_theater_chase(STRIP_BIT_1, task_led_ctrl_color_hex(), 20);
 80024aa:	f000 f8fd 	bl	80026a8 <task_led_ctrl_color_hex>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2214      	movs	r2, #20
 80024b2:	4619      	mov	r1, r3
 80024b4:	2001      	movs	r0, #1
 80024b6:	f7ff f967 	bl	8001788 <animate_led_theater_chase>
                    task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_10, TASK_LED_CTRL_DELAY_MS_0);
 80024ba:	2100      	movs	r1, #0
 80024bc:	200a      	movs	r0, #10
 80024be:	f7ff ff45 	bl	800234c <task_led_ctrl_adjust_parameters>
                break;
 80024c2:	e033      	b.n	800252c <task_led_ctrl_strip_one+0x160>
                case LED_STATE_THEATER_CHASE_RAINBOW:\
                    animate_led_theater_chase_rainbow(STRIP_BIT_1, 20);
 80024c4:	2114      	movs	r1, #20
 80024c6:	2001      	movs	r0, #1
 80024c8:	f7ff fa00 	bl	80018cc <animate_led_theater_chase_rainbow>
                    task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_2, TASK_LED_CTRL_DELAY_MS_0);
 80024cc:	2100      	movs	r1, #0
 80024ce:	2002      	movs	r0, #2
 80024d0:	f7ff ff3c 	bl	800234c <task_led_ctrl_adjust_parameters>
                break;
 80024d4:	e02a      	b.n	800252c <task_led_ctrl_strip_one+0x160>
                case LED_STATE_FADE_IN_AND_OUT:
                    animate_led_fade_in_fade_out((uint16_t)STRIP_BIT_1, task_led_ctrl_color_hex());
 80024d6:	f000 f8e7 	bl	80026a8 <task_led_ctrl_color_hex>
 80024da:	4603      	mov	r3, r0
 80024dc:	4619      	mov	r1, r3
 80024de:	2001      	movs	r0, #1
 80024e0:	f7fe fe26 	bl	8001130 <animate_led_fade_in_fade_out>
                    task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_10, TASK_LED_CTRL_DELAY_MS_0);
 80024e4:	2100      	movs	r1, #0
 80024e6:	200a      	movs	r0, #10
 80024e8:	f7ff ff30 	bl	800234c <task_led_ctrl_adjust_parameters>
                break;
 80024ec:	e01e      	b.n	800252c <task_led_ctrl_strip_one+0x160>
                case LED_STATE_TWINKLE:
                    animate_led_turn_all_pixels_off();
 80024ee:	f7fe fdb5 	bl	800105c <animate_led_turn_all_pixels_off>
                    animate_led_twinkle(STRIP_BIT_1, task_led_ctrl_color_hex(), (uint32_t)((float)NUM_LEDS * (float)0.9), 20, false);
 80024f2:	f000 f8d9 	bl	80026a8 <task_led_ctrl_color_hex>
 80024f6:	4601      	mov	r1, r0
 80024f8:	2300      	movs	r3, #0
 80024fa:	9300      	str	r3, [sp, #0]
 80024fc:	2314      	movs	r3, #20
 80024fe:	2212      	movs	r2, #18
 8002500:	2001      	movs	r0, #1
 8002502:	f7fe ff57 	bl	80013b4 <animate_led_twinkle>
                    task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_5, TASK_LED_CTRL_DELAY_MS_0);
 8002506:	2100      	movs	r1, #0
 8002508:	2005      	movs	r0, #5
 800250a:	f7ff ff1f 	bl	800234c <task_led_ctrl_adjust_parameters>
                break;
 800250e:	e00d      	b.n	800252c <task_led_ctrl_strip_one+0x160>
                case LED_STATE_SPELL:
                    animate_led_only_spell_word(STRIP_BIT_1, task_led_ctrl_color_hex(), 20);
 8002510:	f000 f8ca 	bl	80026a8 <task_led_ctrl_color_hex>
 8002514:	4603      	mov	r3, r0
 8002516:	2214      	movs	r2, #20
 8002518:	4619      	mov	r1, r3
 800251a:	2001      	movs	r0, #1
 800251c:	f7fe fda8 	bl	8001070 <animate_led_only_spell_word>
                    task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_10, TASK_LED_CTRL_DELAY_MS_0);
 8002520:	2100      	movs	r1, #0
 8002522:	200a      	movs	r0, #10
 8002524:	f7ff ff12 	bl	800234c <task_led_ctrl_adjust_parameters>
                break;
 8002528:	e000      	b.n	800252c <task_led_ctrl_strip_one+0x160>
                default:
                break;
 800252a:	bf00      	nop
        while(task_button_press_major_state_change()) osDelay(100);
 800252c:	e756      	b.n	80023dc <task_led_ctrl_strip_one+0x10>
 800252e:	bf00      	nop
 8002530:	20000351 	.word	0x20000351
 8002534:	20000350 	.word	0x20000350

08002538 <task_led_ctrl_delay>:
    }
}


void task_led_ctrl_delay(const uint32_t time_ms)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
    uint32_t ms_count = 0;
 8002540:	2300      	movs	r3, #0
 8002542:	60fb      	str	r3, [r7, #12]
    while (ms_count++ < time_ms)
 8002544:	e002      	b.n	800254c <task_led_ctrl_delay+0x14>
    {
        osDelay(portTICK_PERIOD_MS);
 8002546:	2001      	movs	r0, #1
 8002548:	f000 fb3a 	bl	8002bc0 <osDelay>
    while (ms_count++ < time_ms)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	1c5a      	adds	r2, r3, #1
 8002550:	60fa      	str	r2, [r7, #12]
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	429a      	cmp	r2, r3
 8002556:	d8f6      	bhi.n	8002546 <task_led_ctrl_delay+0xe>
    }
}
 8002558:	bf00      	nop
 800255a:	bf00      	nop
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
	...

08002564 <task_led_ctrl_brightness_adjust>:


void task_led_ctrl_brightness_adjust(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
    if (LED_BRIGHTNESS_FIRST == g_led_brightness) g_led_brightness = LED_BRIGHTNESS_LAST;
 8002568:	4b14      	ldr	r3, [pc, #80]	; (80025bc <task_led_ctrl_brightness_adjust+0x58>)
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d103      	bne.n	8002578 <task_led_ctrl_brightness_adjust+0x14>
 8002570:	4b12      	ldr	r3, [pc, #72]	; (80025bc <task_led_ctrl_brightness_adjust+0x58>)
 8002572:	2202      	movs	r2, #2
 8002574:	701a      	strb	r2, [r3, #0]
 8002576:	e005      	b.n	8002584 <task_led_ctrl_brightness_adjust+0x20>
    else g_led_brightness = (led_brightness_e) (g_led_brightness - 1);
 8002578:	4b10      	ldr	r3, [pc, #64]	; (80025bc <task_led_ctrl_brightness_adjust+0x58>)
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	3b01      	subs	r3, #1
 800257e:	b2da      	uxtb	r2, r3
 8002580:	4b0e      	ldr	r3, [pc, #56]	; (80025bc <task_led_ctrl_brightness_adjust+0x58>)
 8002582:	701a      	strb	r2, [r3, #0]
    switch (g_led_brightness)
 8002584:	4b0d      	ldr	r3, [pc, #52]	; (80025bc <task_led_ctrl_brightness_adjust+0x58>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	2b02      	cmp	r3, #2
 800258a:	d010      	beq.n	80025ae <task_led_ctrl_brightness_adjust+0x4a>
 800258c:	2b02      	cmp	r3, #2
 800258e:	dc13      	bgt.n	80025b8 <task_led_ctrl_brightness_adjust+0x54>
 8002590:	2b00      	cmp	r3, #0
 8002592:	d002      	beq.n	800259a <task_led_ctrl_brightness_adjust+0x36>
 8002594:	2b01      	cmp	r3, #1
 8002596:	d005      	beq.n	80025a4 <task_led_ctrl_brightness_adjust+0x40>
        break;
        case LED_BRIGHTNESS_1_PERCENT:
            current_monitor_set(0.01f);
        break;
    }
}
 8002598:	e00e      	b.n	80025b8 <task_led_ctrl_brightness_adjust+0x54>
            current_monitor_set(1.0f);
 800259a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800259e:	f7fe fc03 	bl	8000da8 <current_monitor_set>
        break;
 80025a2:	e009      	b.n	80025b8 <task_led_ctrl_brightness_adjust+0x54>
            current_monitor_set(0.25f);
 80025a4:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 80025a8:	f7fe fbfe 	bl	8000da8 <current_monitor_set>
        break;
 80025ac:	e004      	b.n	80025b8 <task_led_ctrl_brightness_adjust+0x54>
            current_monitor_set(0.01f);
 80025ae:	ed9f 0a04 	vldr	s0, [pc, #16]	; 80025c0 <task_led_ctrl_brightness_adjust+0x5c>
 80025b2:	f7fe fbf9 	bl	8000da8 <current_monitor_set>
        break;
 80025b6:	bf00      	nop
}
 80025b8:	bf00      	nop
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	20000353 	.word	0x20000353
 80025c0:	3c23d70a 	.word	0x3c23d70a

080025c4 <task_led_ctrl_clear_pause>:


void task_led_ctrl_clear_pause(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
    g_animate_led_pause_flag = false;
 80025c8:	4b03      	ldr	r3, [pc, #12]	; (80025d8 <task_led_ctrl_clear_pause+0x14>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	701a      	strb	r2, [r3, #0]
}
 80025ce:	bf00      	nop
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr
 80025d8:	2000033a 	.word	0x2000033a

080025dc <task_led_ctrl_pause>:


void task_led_ctrl_pause(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
    static uint8_t flip_or_flop = 1;
    if (flip_or_flop) g_animate_led_pause_flag = true;
 80025e0:	4b0b      	ldr	r3, [pc, #44]	; (8002610 <task_led_ctrl_pause+0x34>)
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d003      	beq.n	80025f0 <task_led_ctrl_pause+0x14>
 80025e8:	4b0a      	ldr	r3, [pc, #40]	; (8002614 <task_led_ctrl_pause+0x38>)
 80025ea:	2201      	movs	r2, #1
 80025ec:	701a      	strb	r2, [r3, #0]
 80025ee:	e002      	b.n	80025f6 <task_led_ctrl_pause+0x1a>
    else g_animate_led_pause_flag = false;
 80025f0:	4b08      	ldr	r3, [pc, #32]	; (8002614 <task_led_ctrl_pause+0x38>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	701a      	strb	r2, [r3, #0]
    flip_or_flop ^= 1;
 80025f6:	4b06      	ldr	r3, [pc, #24]	; (8002610 <task_led_ctrl_pause+0x34>)
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	f083 0301 	eor.w	r3, r3, #1
 80025fe:	b2da      	uxtb	r2, r3
 8002600:	4b03      	ldr	r3, [pc, #12]	; (8002610 <task_led_ctrl_pause+0x34>)
 8002602:	701a      	strb	r2, [r3, #0]
}
 8002604:	bf00      	nop
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	2000005f 	.word	0x2000005f
 8002614:	2000033a 	.word	0x2000033a

08002618 <task_led_ctrl_color_state>:


master_color_state_e task_led_ctrl_color_state(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
    return g_master_color_state;
 800261c:	4b03      	ldr	r3, [pc, #12]	; (800262c <task_led_ctrl_color_state+0x14>)
 800261e:	781b      	ldrb	r3, [r3, #0]
}
 8002620:	4618      	mov	r0, r3
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	20000354 	.word	0x20000354

08002630 <task_led_ctrl_color_state_demo>:


void task_led_ctrl_color_state_demo(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
    g_master_color_state = MASTER_COLOR_STATE_DEMO;
 8002634:	4b03      	ldr	r3, [pc, #12]	; (8002644 <task_led_ctrl_color_state_demo+0x14>)
 8002636:	2200      	movs	r2, #0
 8002638:	701a      	strb	r2, [r3, #0]
}
 800263a:	bf00      	nop
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr
 8002644:	20000354 	.word	0x20000354

08002648 <task_led_ctrl_color_state_fixed>:


void task_led_ctrl_color_state_fixed(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
    g_master_color_state = MASTER_COLOR_STATE_FIXED;
 800264c:	4b05      	ldr	r3, [pc, #20]	; (8002664 <task_led_ctrl_color_state_fixed+0x1c>)
 800264e:	2201      	movs	r2, #1
 8002650:	701a      	strb	r2, [r3, #0]
    g_led_color = COLORS_FIRST;
 8002652:	4b05      	ldr	r3, [pc, #20]	; (8002668 <task_led_ctrl_color_state_fixed+0x20>)
 8002654:	2200      	movs	r2, #0
 8002656:	701a      	strb	r2, [r3, #0]
}
 8002658:	bf00      	nop
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	20000354 	.word	0x20000354
 8002668:	2000005e 	.word	0x2000005e

0800266c <task_led_ctrl_color_adjust>:
    g_led_color = COLORS_RED;
}


bool task_led_ctrl_color_adjust(void)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
    bool return_val = false;
 8002672:	2300      	movs	r3, #0
 8002674:	71fb      	strb	r3, [r7, #7]
    if (COLORS_LAST == g_led_color)
 8002676:	4b0b      	ldr	r3, [pc, #44]	; (80026a4 <task_led_ctrl_color_adjust+0x38>)
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	2b15      	cmp	r3, #21
 800267c:	d105      	bne.n	800268a <task_led_ctrl_color_adjust+0x1e>
    {
        g_led_color = COLORS_FIRST;
 800267e:	4b09      	ldr	r3, [pc, #36]	; (80026a4 <task_led_ctrl_color_adjust+0x38>)
 8002680:	2200      	movs	r2, #0
 8002682:	701a      	strb	r2, [r3, #0]
        return_val = true;
 8002684:	2301      	movs	r3, #1
 8002686:	71fb      	strb	r3, [r7, #7]
 8002688:	e005      	b.n	8002696 <task_led_ctrl_color_adjust+0x2a>
    }
    else g_led_color = (all_colors_e) (g_led_color + 1);
 800268a:	4b06      	ldr	r3, [pc, #24]	; (80026a4 <task_led_ctrl_color_adjust+0x38>)
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	3301      	adds	r3, #1
 8002690:	b2da      	uxtb	r2, r3
 8002692:	4b04      	ldr	r3, [pc, #16]	; (80026a4 <task_led_ctrl_color_adjust+0x38>)
 8002694:	701a      	strb	r2, [r3, #0]
    return return_val;
 8002696:	79fb      	ldrb	r3, [r7, #7]
}
 8002698:	4618      	mov	r0, r3
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr
 80026a4:	2000005e 	.word	0x2000005e

080026a8 <task_led_ctrl_color_hex>:
    return g_led_color;
}


color_hex_code_e task_led_ctrl_color_hex(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
    return g_color_hex_codes[g_led_color];
 80026ac:	4b05      	ldr	r3, [pc, #20]	; (80026c4 <task_led_ctrl_color_hex+0x1c>)
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	461a      	mov	r2, r3
 80026b2:	4b05      	ldr	r3, [pc, #20]	; (80026c8 <task_led_ctrl_color_hex+0x20>)
 80026b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	2000005e 	.word	0x2000005e
 80026c8:	20000004 	.word	0x20000004

080026cc <task_led_ctrl_color_red_hex>:


uint8_t task_led_ctrl_color_red_hex(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	ed2d 8b02 	vpush	{d8}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
    return (((g_color_hex_codes[g_led_color] & 0xFF0000) >> 16) / current_monitor_ratio());
 80026d6:	4b0f      	ldr	r3, [pc, #60]	; (8002714 <task_led_ctrl_color_red_hex+0x48>)
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	461a      	mov	r2, r3
 80026dc:	4b0e      	ldr	r3, [pc, #56]	; (8002718 <task_led_ctrl_color_red_hex+0x4c>)
 80026de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026e2:	0c1b      	lsrs	r3, r3, #16
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	ee07 3a90 	vmov	s15, r3
 80026ea:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80026ee:	f7fe fb7d 	bl	8000dec <current_monitor_ratio>
 80026f2:	eeb0 7a40 	vmov.f32	s14, s0
 80026f6:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80026fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026fe:	edc7 7a01 	vstr	s15, [r7, #4]
 8002702:	793b      	ldrb	r3, [r7, #4]
 8002704:	b2db      	uxtb	r3, r3
}
 8002706:	4618      	mov	r0, r3
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	ecbd 8b02 	vpop	{d8}
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	2000005e 	.word	0x2000005e
 8002718:	20000004 	.word	0x20000004

0800271c <task_led_ctrl_color_green_hex>:


uint8_t task_led_ctrl_color_green_hex(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	ed2d 8b02 	vpush	{d8}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
    return (((g_color_hex_codes[g_led_color] & 0x00FF00) >> 8) / current_monitor_ratio());
 8002726:	4b0f      	ldr	r3, [pc, #60]	; (8002764 <task_led_ctrl_color_green_hex+0x48>)
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	461a      	mov	r2, r3
 800272c:	4b0e      	ldr	r3, [pc, #56]	; (8002768 <task_led_ctrl_color_green_hex+0x4c>)
 800272e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002732:	0a1b      	lsrs	r3, r3, #8
 8002734:	b2db      	uxtb	r3, r3
 8002736:	ee07 3a90 	vmov	s15, r3
 800273a:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800273e:	f7fe fb55 	bl	8000dec <current_monitor_ratio>
 8002742:	eeb0 7a40 	vmov.f32	s14, s0
 8002746:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800274a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800274e:	edc7 7a01 	vstr	s15, [r7, #4]
 8002752:	793b      	ldrb	r3, [r7, #4]
 8002754:	b2db      	uxtb	r3, r3
}
 8002756:	4618      	mov	r0, r3
 8002758:	3708      	adds	r7, #8
 800275a:	46bd      	mov	sp, r7
 800275c:	ecbd 8b02 	vpop	{d8}
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	2000005e 	.word	0x2000005e
 8002768:	20000004 	.word	0x20000004

0800276c <task_led_ctrl_color_blue_hex>:


uint8_t task_led_ctrl_color_blue_hex(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	ed2d 8b02 	vpush	{d8}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
    return ((g_color_hex_codes[g_led_color] & 0x0000FF) / current_monitor_ratio());
 8002776:	4b0e      	ldr	r3, [pc, #56]	; (80027b0 <task_led_ctrl_color_blue_hex+0x44>)
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	461a      	mov	r2, r3
 800277c:	4b0d      	ldr	r3, [pc, #52]	; (80027b4 <task_led_ctrl_color_blue_hex+0x48>)
 800277e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002782:	b2db      	uxtb	r3, r3
 8002784:	ee07 3a90 	vmov	s15, r3
 8002788:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800278c:	f7fe fb2e 	bl	8000dec <current_monitor_ratio>
 8002790:	eeb0 7a40 	vmov.f32	s14, s0
 8002794:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8002798:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800279c:	edc7 7a01 	vstr	s15, [r7, #4]
 80027a0:	793b      	ldrb	r3, [r7, #4]
 80027a2:	b2db      	uxtb	r3, r3
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3708      	adds	r7, #8
 80027a8:	46bd      	mov	sp, r7
 80027aa:	ecbd 8b02 	vpop	{d8}
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	2000005e 	.word	0x2000005e
 80027b4:	20000004 	.word	0x20000004

080027b8 <task_led_ctrl_color_random>:
    return g_color_hex_codes[color];
}


void task_led_ctrl_color_random(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
    all_colors_e color = (all_colors_e)(random_num(0, NUM_COLORS));
 80027be:	2116      	movs	r1, #22
 80027c0:	2000      	movs	r0, #0
 80027c2:	f008 fe49 	bl	800b458 <random_num>
 80027c6:	4603      	mov	r3, r0
 80027c8:	71fb      	strb	r3, [r7, #7]
    if (g_led_color == color)
 80027ca:	4b0d      	ldr	r3, [pc, #52]	; (8002800 <task_led_ctrl_color_random+0x48>)
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	79fa      	ldrb	r2, [r7, #7]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d10e      	bne.n	80027f2 <task_led_ctrl_color_random+0x3a>
    {
        if ((COLORS_LAST) == color) g_led_color = (all_colors_e)(color - 1);
 80027d4:	79fb      	ldrb	r3, [r7, #7]
 80027d6:	2b15      	cmp	r3, #21
 80027d8:	d105      	bne.n	80027e6 <task_led_ctrl_color_random+0x2e>
 80027da:	79fb      	ldrb	r3, [r7, #7]
 80027dc:	3b01      	subs	r3, #1
 80027de:	b2da      	uxtb	r2, r3
 80027e0:	4b07      	ldr	r3, [pc, #28]	; (8002800 <task_led_ctrl_color_random+0x48>)
 80027e2:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        g_led_color = color;
    }
}
 80027e4:	e008      	b.n	80027f8 <task_led_ctrl_color_random+0x40>
        else g_led_color = (all_colors_e)(color + 1);
 80027e6:	79fb      	ldrb	r3, [r7, #7]
 80027e8:	3301      	adds	r3, #1
 80027ea:	b2da      	uxtb	r2, r3
 80027ec:	4b04      	ldr	r3, [pc, #16]	; (8002800 <task_led_ctrl_color_random+0x48>)
 80027ee:	701a      	strb	r2, [r3, #0]
}
 80027f0:	e002      	b.n	80027f8 <task_led_ctrl_color_random+0x40>
        g_led_color = color;
 80027f2:	4a03      	ldr	r2, [pc, #12]	; (8002800 <task_led_ctrl_color_random+0x48>)
 80027f4:	79fb      	ldrb	r3, [r7, #7]
 80027f6:	7013      	strb	r3, [r2, #0]
}
 80027f8:	bf00      	nop
 80027fa:	3708      	adds	r7, #8
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	2000005e 	.word	0x2000005e

08002804 <task_led_ctrl_speed>:
    g_led_state = LED_STATE_FIRST;
}


float task_led_ctrl_speed(void)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
    float speed_factor = 0.0;
 800280a:	f04f 0300 	mov.w	r3, #0
 800280e:	607b      	str	r3, [r7, #4]
    switch(g_led_speed)
 8002810:	4b17      	ldr	r3, [pc, #92]	; (8002870 <task_led_ctrl_speed+0x6c>)
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	2b04      	cmp	r3, #4
 8002816:	d81f      	bhi.n	8002858 <task_led_ctrl_speed+0x54>
 8002818:	a201      	add	r2, pc, #4	; (adr r2, 8002820 <task_led_ctrl_speed+0x1c>)
 800281a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800281e:	bf00      	nop
 8002820:	08002835 	.word	0x08002835
 8002824:	0800283b 	.word	0x0800283b
 8002828:	08002841 	.word	0x08002841
 800282c:	08002849 	.word	0x08002849
 8002830:	08002851 	.word	0x08002851
    {
        case LED_SPEED_10X:
            speed_factor = 10;
 8002834:	4b0f      	ldr	r3, [pc, #60]	; (8002874 <task_led_ctrl_speed+0x70>)
 8002836:	607b      	str	r3, [r7, #4]
        break;
 8002838:	e00f      	b.n	800285a <task_led_ctrl_speed+0x56>
        case LED_SPEED_5X:
            speed_factor = 5;
 800283a:	4b0f      	ldr	r3, [pc, #60]	; (8002878 <task_led_ctrl_speed+0x74>)
 800283c:	607b      	str	r3, [r7, #4]
        break;
 800283e:	e00c      	b.n	800285a <task_led_ctrl_speed+0x56>
//        case LED_SPEED_2X:
//            speed_factor = 2;
//        break;
        case LED_SPEED_1X:
            speed_factor = 1;
 8002840:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002844:	607b      	str	r3, [r7, #4]
        break;
 8002846:	e008      	b.n	800285a <task_led_ctrl_speed+0x56>
        case LED_SPEED_0P5X:
            speed_factor = 0.5;
 8002848:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 800284c:	607b      	str	r3, [r7, #4]
        break;
 800284e:	e004      	b.n	800285a <task_led_ctrl_speed+0x56>
        case LED_SPEED_0P25X:
            speed_factor = 0.25;
 8002850:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 8002854:	607b      	str	r3, [r7, #4]
        break;
 8002856:	e000      	b.n	800285a <task_led_ctrl_speed+0x56>
        default:
        break;
 8002858:	bf00      	nop
        case LED_SPEED_0P1X:
            speed_factor = 0.1;
        break;
        */
    }
    return speed_factor;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	ee07 3a90 	vmov	s15, r3
}
 8002860:	eeb0 0a67 	vmov.f32	s0, s15
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	20000352 	.word	0x20000352
 8002874:	41200000 	.word	0x41200000
 8002878:	40a00000 	.word	0x40a00000

0800287c <task_led_ctrl_speed_adjust>:


void task_led_ctrl_speed_adjust(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
    if (LED_SPEED_FIRST == g_led_speed) g_led_speed = LED_SPEED_LAST;
 8002880:	4b09      	ldr	r3, [pc, #36]	; (80028a8 <task_led_ctrl_speed_adjust+0x2c>)
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d103      	bne.n	8002890 <task_led_ctrl_speed_adjust+0x14>
 8002888:	4b07      	ldr	r3, [pc, #28]	; (80028a8 <task_led_ctrl_speed_adjust+0x2c>)
 800288a:	2204      	movs	r2, #4
 800288c:	701a      	strb	r2, [r3, #0]
    else g_led_speed = (led_speed_e) (g_led_speed - 1);
}
 800288e:	e005      	b.n	800289c <task_led_ctrl_speed_adjust+0x20>
    else g_led_speed = (led_speed_e) (g_led_speed - 1);
 8002890:	4b05      	ldr	r3, [pc, #20]	; (80028a8 <task_led_ctrl_speed_adjust+0x2c>)
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	3b01      	subs	r3, #1
 8002896:	b2da      	uxtb	r2, r3
 8002898:	4b03      	ldr	r3, [pc, #12]	; (80028a8 <task_led_ctrl_speed_adjust+0x2c>)
 800289a:	701a      	strb	r2, [r3, #0]
}
 800289c:	bf00      	nop
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	20000352 	.word	0x20000352

080028ac <task_led_ctrl_speed_reset>:


void task_led_ctrl_speed_reset(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
    g_led_speed = LED_SPEED_1X;
 80028b0:	4b03      	ldr	r3, [pc, #12]	; (80028c0 <task_led_ctrl_speed_reset+0x14>)
 80028b2:	2202      	movs	r2, #2
 80028b4:	701a      	strb	r2, [r3, #0]
}
 80028b6:	bf00      	nop
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr
 80028c0:	20000352 	.word	0x20000352

080028c4 <task_led_ctrl_animate_iteration_reset>:
    return ((float)g_delay_in_animation_ms / task_led_ctrl_speed());
}


void task_led_ctrl_animate_iteration_reset(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
    g_animation_iterations = 0;
 80028c8:	4b03      	ldr	r3, [pc, #12]	; (80028d8 <task_led_ctrl_animate_iteration_reset+0x14>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	701a      	strb	r2, [r3, #0]
}
 80028ce:	bf00      	nop
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr
 80028d8:	20000355 	.word	0x20000355

080028dc <task_led_ctrl_animate_adjust_state>:


bool task_led_ctrl_animate_adjust_state(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
    bool return_val = false;
 80028e2:	2300      	movs	r3, #0
 80028e4:	71fb      	strb	r3, [r7, #7]
    if (LED_STATE_LAST == g_led_state)
 80028e6:	4b0b      	ldr	r3, [pc, #44]	; (8002914 <task_led_ctrl_animate_adjust_state+0x38>)
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	2b09      	cmp	r3, #9
 80028ec:	d105      	bne.n	80028fa <task_led_ctrl_animate_adjust_state+0x1e>
    {
        g_led_state = LED_STATE_FIRST;
 80028ee:	4b09      	ldr	r3, [pc, #36]	; (8002914 <task_led_ctrl_animate_adjust_state+0x38>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	701a      	strb	r2, [r3, #0]
        return_val = true;
 80028f4:	2301      	movs	r3, #1
 80028f6:	71fb      	strb	r3, [r7, #7]
 80028f8:	e005      	b.n	8002906 <task_led_ctrl_animate_adjust_state+0x2a>
    }
    else g_led_state = (led_state_e) (g_led_state + 1);
 80028fa:	4b06      	ldr	r3, [pc, #24]	; (8002914 <task_led_ctrl_animate_adjust_state+0x38>)
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	3301      	adds	r3, #1
 8002900:	b2da      	uxtb	r2, r3
 8002902:	4b04      	ldr	r3, [pc, #16]	; (8002914 <task_led_ctrl_animate_adjust_state+0x38>)
 8002904:	701a      	strb	r2, [r3, #0]
    return return_val;
 8002906:	79fb      	ldrb	r3, [r7, #7]
}
 8002908:	4618      	mov	r0, r3
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr
 8002914:	20000351 	.word	0x20000351

08002918 <task_led_ctrl_animate_state_demo>:


void task_led_ctrl_animate_state_demo(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
    g_master_led_state = MASTER_LED_STATE_DEMO;
 800291c:	4b05      	ldr	r3, [pc, #20]	; (8002934 <task_led_ctrl_animate_state_demo+0x1c>)
 800291e:	2200      	movs	r2, #0
 8002920:	701a      	strb	r2, [r3, #0]
    g_animation_iterations = 0;
 8002922:	4b05      	ldr	r3, [pc, #20]	; (8002938 <task_led_ctrl_animate_state_demo+0x20>)
 8002924:	2200      	movs	r2, #0
 8002926:	701a      	strb	r2, [r3, #0]
}
 8002928:	bf00      	nop
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	20000350 	.word	0x20000350
 8002938:	20000355 	.word	0x20000355

0800293c <task_led_ctrl_animate_state_fixed>:


void task_led_ctrl_animate_state_fixed(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
    g_master_led_state = MASTER_LED_STATE_FIXED;
 8002940:	4b06      	ldr	r3, [pc, #24]	; (800295c <task_led_ctrl_animate_state_fixed+0x20>)
 8002942:	2201      	movs	r2, #1
 8002944:	701a      	strb	r2, [r3, #0]
    g_led_state = LED_STATE_FIRST; // set first state
 8002946:	4b06      	ldr	r3, [pc, #24]	; (8002960 <task_led_ctrl_animate_state_fixed+0x24>)
 8002948:	2200      	movs	r2, #0
 800294a:	701a      	strb	r2, [r3, #0]
    g_animation_iterations = 0;
 800294c:	4b05      	ldr	r3, [pc, #20]	; (8002964 <task_led_ctrl_animate_state_fixed+0x28>)
 800294e:	2200      	movs	r2, #0
 8002950:	701a      	strb	r2, [r3, #0]
}
 8002952:	bf00      	nop
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr
 800295c:	20000350 	.word	0x20000350
 8002960:	20000351 	.word	0x20000351
 8002964:	20000355 	.word	0x20000355

08002968 <task_led_ctrl_animate_state>:


master_led_state_e task_led_ctrl_animate_state(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
    return g_master_led_state;
 800296c:	4b03      	ldr	r3, [pc, #12]	; (800297c <task_led_ctrl_animate_state+0x14>)
 800296e:	781b      	ldrb	r3, [r3, #0]
}
 8002970:	4618      	mov	r0, r3
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	20000350 	.word	0x20000350

08002980 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	4603      	mov	r3, r0
 8002988:	6039      	str	r1, [r7, #0]
 800298a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800298c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002990:	2b00      	cmp	r3, #0
 8002992:	db0a      	blt.n	80029aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	b2da      	uxtb	r2, r3
 8002998:	490c      	ldr	r1, [pc, #48]	; (80029cc <__NVIC_SetPriority+0x4c>)
 800299a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299e:	0112      	lsls	r2, r2, #4
 80029a0:	b2d2      	uxtb	r2, r2
 80029a2:	440b      	add	r3, r1
 80029a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029a8:	e00a      	b.n	80029c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	b2da      	uxtb	r2, r3
 80029ae:	4908      	ldr	r1, [pc, #32]	; (80029d0 <__NVIC_SetPriority+0x50>)
 80029b0:	79fb      	ldrb	r3, [r7, #7]
 80029b2:	f003 030f 	and.w	r3, r3, #15
 80029b6:	3b04      	subs	r3, #4
 80029b8:	0112      	lsls	r2, r2, #4
 80029ba:	b2d2      	uxtb	r2, r2
 80029bc:	440b      	add	r3, r1
 80029be:	761a      	strb	r2, [r3, #24]
}
 80029c0:	bf00      	nop
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr
 80029cc:	e000e100 	.word	0xe000e100
 80029d0:	e000ed00 	.word	0xe000ed00

080029d4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80029d8:	4b05      	ldr	r3, [pc, #20]	; (80029f0 <SysTick_Handler+0x1c>)
 80029da:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80029dc:	f001 fd10 	bl	8004400 <xTaskGetSchedulerState>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d001      	beq.n	80029ea <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80029e6:	f002 fc2f 	bl	8005248 <xPortSysTickHandler>
  }
}
 80029ea:	bf00      	nop
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	e000e010 	.word	0xe000e010

080029f4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80029f8:	2100      	movs	r1, #0
 80029fa:	f06f 0004 	mvn.w	r0, #4
 80029fe:	f7ff ffbf 	bl	8002980 <__NVIC_SetPriority>
#endif
}
 8002a02:	bf00      	nop
 8002a04:	bd80      	pop	{r7, pc}
	...

08002a08 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a0e:	f3ef 8305 	mrs	r3, IPSR
 8002a12:	603b      	str	r3, [r7, #0]
  return(result);
 8002a14:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d003      	beq.n	8002a22 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002a1a:	f06f 0305 	mvn.w	r3, #5
 8002a1e:	607b      	str	r3, [r7, #4]
 8002a20:	e00c      	b.n	8002a3c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002a22:	4b0a      	ldr	r3, [pc, #40]	; (8002a4c <osKernelInitialize+0x44>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d105      	bne.n	8002a36 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002a2a:	4b08      	ldr	r3, [pc, #32]	; (8002a4c <osKernelInitialize+0x44>)
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002a30:	2300      	movs	r3, #0
 8002a32:	607b      	str	r3, [r7, #4]
 8002a34:	e002      	b.n	8002a3c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002a36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a3a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002a3c:	687b      	ldr	r3, [r7, #4]
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	20000358 	.word	0x20000358

08002a50 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a56:	f3ef 8305 	mrs	r3, IPSR
 8002a5a:	603b      	str	r3, [r7, #0]
  return(result);
 8002a5c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d003      	beq.n	8002a6a <osKernelStart+0x1a>
    stat = osErrorISR;
 8002a62:	f06f 0305 	mvn.w	r3, #5
 8002a66:	607b      	str	r3, [r7, #4]
 8002a68:	e010      	b.n	8002a8c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002a6a:	4b0b      	ldr	r3, [pc, #44]	; (8002a98 <osKernelStart+0x48>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d109      	bne.n	8002a86 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002a72:	f7ff ffbf 	bl	80029f4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002a76:	4b08      	ldr	r3, [pc, #32]	; (8002a98 <osKernelStart+0x48>)
 8002a78:	2202      	movs	r2, #2
 8002a7a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002a7c:	f001 f866 	bl	8003b4c <vTaskStartScheduler>
      stat = osOK;
 8002a80:	2300      	movs	r3, #0
 8002a82:	607b      	str	r3, [r7, #4]
 8002a84:	e002      	b.n	8002a8c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002a86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a8a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002a8c:	687b      	ldr	r3, [r7, #4]
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3708      	adds	r7, #8
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	20000358 	.word	0x20000358

08002a9c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b08e      	sub	sp, #56	; 0x38
 8002aa0:	af04      	add	r7, sp, #16
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	60b9      	str	r1, [r7, #8]
 8002aa6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002aac:	f3ef 8305 	mrs	r3, IPSR
 8002ab0:	617b      	str	r3, [r7, #20]
  return(result);
 8002ab2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d17e      	bne.n	8002bb6 <osThreadNew+0x11a>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d07b      	beq.n	8002bb6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002abe:	2380      	movs	r3, #128	; 0x80
 8002ac0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002ac2:	2318      	movs	r3, #24
 8002ac4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002aca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ace:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d045      	beq.n	8002b62 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d002      	beq.n	8002ae4 <osThreadNew+0x48>
        name = attr->name;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	699b      	ldr	r3, [r3, #24]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d002      	beq.n	8002af2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d008      	beq.n	8002b0a <osThreadNew+0x6e>
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	2b38      	cmp	r3, #56	; 0x38
 8002afc:	d805      	bhi.n	8002b0a <osThreadNew+0x6e>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <osThreadNew+0x72>
        return (NULL);
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	e054      	b.n	8002bb8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d003      	beq.n	8002b1e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	695b      	ldr	r3, [r3, #20]
 8002b1a:	089b      	lsrs	r3, r3, #2
 8002b1c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00e      	beq.n	8002b44 <osThreadNew+0xa8>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	2b5b      	cmp	r3, #91	; 0x5b
 8002b2c:	d90a      	bls.n	8002b44 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d006      	beq.n	8002b44 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d002      	beq.n	8002b44 <osThreadNew+0xa8>
        mem = 1;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	61bb      	str	r3, [r7, #24]
 8002b42:	e010      	b.n	8002b66 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d10c      	bne.n	8002b66 <osThreadNew+0xca>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d108      	bne.n	8002b66 <osThreadNew+0xca>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d104      	bne.n	8002b66 <osThreadNew+0xca>
          mem = 0;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	61bb      	str	r3, [r7, #24]
 8002b60:	e001      	b.n	8002b66 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002b62:	2300      	movs	r3, #0
 8002b64:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d110      	bne.n	8002b8e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002b74:	9202      	str	r2, [sp, #8]
 8002b76:	9301      	str	r3, [sp, #4]
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	9300      	str	r3, [sp, #0]
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	6a3a      	ldr	r2, [r7, #32]
 8002b80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b82:	68f8      	ldr	r0, [r7, #12]
 8002b84:	f000 fe0c 	bl	80037a0 <xTaskCreateStatic>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	613b      	str	r3, [r7, #16]
 8002b8c:	e013      	b.n	8002bb6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d110      	bne.n	8002bb6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002b94:	6a3b      	ldr	r3, [r7, #32]
 8002b96:	b29a      	uxth	r2, r3
 8002b98:	f107 0310 	add.w	r3, r7, #16
 8002b9c:	9301      	str	r3, [sp, #4]
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	9300      	str	r3, [sp, #0]
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ba6:	68f8      	ldr	r0, [r7, #12]
 8002ba8:	f000 fe57 	bl	800385a <xTaskCreate>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d001      	beq.n	8002bb6 <osThreadNew+0x11a>
            hTask = NULL;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002bb6:	693b      	ldr	r3, [r7, #16]
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3728      	adds	r7, #40	; 0x28
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002bc8:	f3ef 8305 	mrs	r3, IPSR
 8002bcc:	60bb      	str	r3, [r7, #8]
  return(result);
 8002bce:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d003      	beq.n	8002bdc <osDelay+0x1c>
    stat = osErrorISR;
 8002bd4:	f06f 0305 	mvn.w	r3, #5
 8002bd8:	60fb      	str	r3, [r7, #12]
 8002bda:	e007      	b.n	8002bec <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d002      	beq.n	8002bec <osDelay+0x2c>
      vTaskDelay(ticks);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 ff7c 	bl	8003ae4 <vTaskDelay>
    }
  }

  return (stat);
 8002bec:	68fb      	ldr	r3, [r7, #12]
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3710      	adds	r7, #16
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
	...

08002bf8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002bf8:	b480      	push	{r7}
 8002bfa:	b085      	sub	sp, #20
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	4a07      	ldr	r2, [pc, #28]	; (8002c24 <vApplicationGetIdleTaskMemory+0x2c>)
 8002c08:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	4a06      	ldr	r2, [pc, #24]	; (8002c28 <vApplicationGetIdleTaskMemory+0x30>)
 8002c0e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2280      	movs	r2, #128	; 0x80
 8002c14:	601a      	str	r2, [r3, #0]
}
 8002c16:	bf00      	nop
 8002c18:	3714      	adds	r7, #20
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	2000035c 	.word	0x2000035c
 8002c28:	200003b8 	.word	0x200003b8

08002c2c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002c2c:	b480      	push	{r7}
 8002c2e:	b085      	sub	sp, #20
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	4a07      	ldr	r2, [pc, #28]	; (8002c58 <vApplicationGetTimerTaskMemory+0x2c>)
 8002c3c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	4a06      	ldr	r2, [pc, #24]	; (8002c5c <vApplicationGetTimerTaskMemory+0x30>)
 8002c42:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c4a:	601a      	str	r2, [r3, #0]
}
 8002c4c:	bf00      	nop
 8002c4e:	3714      	adds	r7, #20
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr
 8002c58:	200005b8 	.word	0x200005b8
 8002c5c:	20000614 	.word	0x20000614

08002c60 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f103 0208 	add.w	r2, r3, #8
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c78:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f103 0208 	add.w	r2, r3, #8
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f103 0208 	add.w	r2, r3, #8
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002c94:	bf00      	nop
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002cae:	bf00      	nop
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr

08002cba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002cba:	b480      	push	{r7}
 8002cbc:	b085      	sub	sp, #20
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
 8002cc2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	68fa      	ldr	r2, [r7, #12]
 8002cce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	689a      	ldr	r2, [r3, #8]
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	683a      	ldr	r2, [r7, #0]
 8002cde:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	683a      	ldr	r2, [r7, #0]
 8002ce4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	1c5a      	adds	r2, r3, #1
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	601a      	str	r2, [r3, #0]
}
 8002cf6:	bf00      	nop
 8002cf8:	3714      	adds	r7, #20
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr

08002d02 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d02:	b480      	push	{r7}
 8002d04:	b085      	sub	sp, #20
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
 8002d0a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d18:	d103      	bne.n	8002d22 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	60fb      	str	r3, [r7, #12]
 8002d20:	e00c      	b.n	8002d3c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	3308      	adds	r3, #8
 8002d26:	60fb      	str	r3, [r7, #12]
 8002d28:	e002      	b.n	8002d30 <vListInsert+0x2e>
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	60fb      	str	r3, [r7, #12]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68ba      	ldr	r2, [r7, #8]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d2f6      	bcs.n	8002d2a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	685a      	ldr	r2, [r3, #4]
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	683a      	ldr	r2, [r7, #0]
 8002d4a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	68fa      	ldr	r2, [r7, #12]
 8002d50:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	1c5a      	adds	r2, r3, #1
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	601a      	str	r2, [r3, #0]
}
 8002d68:	bf00      	nop
 8002d6a:	3714      	adds	r7, #20
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002d74:	b480      	push	{r7}
 8002d76:	b085      	sub	sp, #20
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	691b      	ldr	r3, [r3, #16]
 8002d80:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	6892      	ldr	r2, [r2, #8]
 8002d8a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	6852      	ldr	r2, [r2, #4]
 8002d94:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d103      	bne.n	8002da8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689a      	ldr	r2, [r3, #8]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	1e5a      	subs	r2, r3, #1
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3714      	adds	r7, #20
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d10a      	bne.n	8002df2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002de0:	f383 8811 	msr	BASEPRI, r3
 8002de4:	f3bf 8f6f 	isb	sy
 8002de8:	f3bf 8f4f 	dsb	sy
 8002dec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002dee:	bf00      	nop
 8002df0:	e7fe      	b.n	8002df0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002df2:	f002 f997 	bl	8005124 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dfe:	68f9      	ldr	r1, [r7, #12]
 8002e00:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002e02:	fb01 f303 	mul.w	r3, r1, r3
 8002e06:	441a      	add	r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e22:	3b01      	subs	r3, #1
 8002e24:	68f9      	ldr	r1, [r7, #12]
 8002e26:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002e28:	fb01 f303 	mul.w	r3, r1, r3
 8002e2c:	441a      	add	r2, r3
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	22ff      	movs	r2, #255	; 0xff
 8002e36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	22ff      	movs	r2, #255	; 0xff
 8002e3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d114      	bne.n	8002e72 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d01a      	beq.n	8002e86 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	3310      	adds	r3, #16
 8002e54:	4618      	mov	r0, r3
 8002e56:	f001 f915 	bl	8004084 <xTaskRemoveFromEventList>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d012      	beq.n	8002e86 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002e60:	4b0c      	ldr	r3, [pc, #48]	; (8002e94 <xQueueGenericReset+0xcc>)
 8002e62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e66:	601a      	str	r2, [r3, #0]
 8002e68:	f3bf 8f4f 	dsb	sy
 8002e6c:	f3bf 8f6f 	isb	sy
 8002e70:	e009      	b.n	8002e86 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	3310      	adds	r3, #16
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7ff fef2 	bl	8002c60 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	3324      	adds	r3, #36	; 0x24
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7ff feed 	bl	8002c60 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002e86:	f002 f97d 	bl	8005184 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002e8a:	2301      	movs	r3, #1
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3710      	adds	r7, #16
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	e000ed04 	.word	0xe000ed04

08002e98 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b08e      	sub	sp, #56	; 0x38
 8002e9c:	af02      	add	r7, sp, #8
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	607a      	str	r2, [r7, #4]
 8002ea4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d10a      	bne.n	8002ec2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eb0:	f383 8811 	msr	BASEPRI, r3
 8002eb4:	f3bf 8f6f 	isb	sy
 8002eb8:	f3bf 8f4f 	dsb	sy
 8002ebc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002ebe:	bf00      	nop
 8002ec0:	e7fe      	b.n	8002ec0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d10a      	bne.n	8002ede <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ecc:	f383 8811 	msr	BASEPRI, r3
 8002ed0:	f3bf 8f6f 	isb	sy
 8002ed4:	f3bf 8f4f 	dsb	sy
 8002ed8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002eda:	bf00      	nop
 8002edc:	e7fe      	b.n	8002edc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d002      	beq.n	8002eea <xQueueGenericCreateStatic+0x52>
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <xQueueGenericCreateStatic+0x56>
 8002eea:	2301      	movs	r3, #1
 8002eec:	e000      	b.n	8002ef0 <xQueueGenericCreateStatic+0x58>
 8002eee:	2300      	movs	r3, #0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d10a      	bne.n	8002f0a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ef8:	f383 8811 	msr	BASEPRI, r3
 8002efc:	f3bf 8f6f 	isb	sy
 8002f00:	f3bf 8f4f 	dsb	sy
 8002f04:	623b      	str	r3, [r7, #32]
}
 8002f06:	bf00      	nop
 8002f08:	e7fe      	b.n	8002f08 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d102      	bne.n	8002f16 <xQueueGenericCreateStatic+0x7e>
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d101      	bne.n	8002f1a <xQueueGenericCreateStatic+0x82>
 8002f16:	2301      	movs	r3, #1
 8002f18:	e000      	b.n	8002f1c <xQueueGenericCreateStatic+0x84>
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d10a      	bne.n	8002f36 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f24:	f383 8811 	msr	BASEPRI, r3
 8002f28:	f3bf 8f6f 	isb	sy
 8002f2c:	f3bf 8f4f 	dsb	sy
 8002f30:	61fb      	str	r3, [r7, #28]
}
 8002f32:	bf00      	nop
 8002f34:	e7fe      	b.n	8002f34 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002f36:	2350      	movs	r3, #80	; 0x50
 8002f38:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	2b50      	cmp	r3, #80	; 0x50
 8002f3e:	d00a      	beq.n	8002f56 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f44:	f383 8811 	msr	BASEPRI, r3
 8002f48:	f3bf 8f6f 	isb	sy
 8002f4c:	f3bf 8f4f 	dsb	sy
 8002f50:	61bb      	str	r3, [r7, #24]
}
 8002f52:	bf00      	nop
 8002f54:	e7fe      	b.n	8002f54 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002f56:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00d      	beq.n	8002f7e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f64:	2201      	movs	r2, #1
 8002f66:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002f6a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f70:	9300      	str	r3, [sp, #0]
 8002f72:	4613      	mov	r3, r2
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	68b9      	ldr	r1, [r7, #8]
 8002f78:	68f8      	ldr	r0, [r7, #12]
 8002f7a:	f000 f805 	bl	8002f88 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3730      	adds	r7, #48	; 0x30
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	60b9      	str	r1, [r7, #8]
 8002f92:	607a      	str	r2, [r7, #4]
 8002f94:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d103      	bne.n	8002fa4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	69ba      	ldr	r2, [r7, #24]
 8002fa0:	601a      	str	r2, [r3, #0]
 8002fa2:	e002      	b.n	8002faa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	68fa      	ldr	r2, [r7, #12]
 8002fae:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	68ba      	ldr	r2, [r7, #8]
 8002fb4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002fb6:	2101      	movs	r1, #1
 8002fb8:	69b8      	ldr	r0, [r7, #24]
 8002fba:	f7ff ff05 	bl	8002dc8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	78fa      	ldrb	r2, [r7, #3]
 8002fc2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002fc6:	bf00      	nop
 8002fc8:	3710      	adds	r7, #16
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
	...

08002fd0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b08e      	sub	sp, #56	; 0x38
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	60b9      	str	r1, [r7, #8]
 8002fda:	607a      	str	r2, [r7, #4]
 8002fdc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d10a      	bne.n	8003002 <xQueueGenericSend+0x32>
	__asm volatile
 8002fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ff0:	f383 8811 	msr	BASEPRI, r3
 8002ff4:	f3bf 8f6f 	isb	sy
 8002ff8:	f3bf 8f4f 	dsb	sy
 8002ffc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002ffe:	bf00      	nop
 8003000:	e7fe      	b.n	8003000 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d103      	bne.n	8003010 <xQueueGenericSend+0x40>
 8003008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800300a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300c:	2b00      	cmp	r3, #0
 800300e:	d101      	bne.n	8003014 <xQueueGenericSend+0x44>
 8003010:	2301      	movs	r3, #1
 8003012:	e000      	b.n	8003016 <xQueueGenericSend+0x46>
 8003014:	2300      	movs	r3, #0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d10a      	bne.n	8003030 <xQueueGenericSend+0x60>
	__asm volatile
 800301a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800301e:	f383 8811 	msr	BASEPRI, r3
 8003022:	f3bf 8f6f 	isb	sy
 8003026:	f3bf 8f4f 	dsb	sy
 800302a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800302c:	bf00      	nop
 800302e:	e7fe      	b.n	800302e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	2b02      	cmp	r3, #2
 8003034:	d103      	bne.n	800303e <xQueueGenericSend+0x6e>
 8003036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800303a:	2b01      	cmp	r3, #1
 800303c:	d101      	bne.n	8003042 <xQueueGenericSend+0x72>
 800303e:	2301      	movs	r3, #1
 8003040:	e000      	b.n	8003044 <xQueueGenericSend+0x74>
 8003042:	2300      	movs	r3, #0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d10a      	bne.n	800305e <xQueueGenericSend+0x8e>
	__asm volatile
 8003048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800304c:	f383 8811 	msr	BASEPRI, r3
 8003050:	f3bf 8f6f 	isb	sy
 8003054:	f3bf 8f4f 	dsb	sy
 8003058:	623b      	str	r3, [r7, #32]
}
 800305a:	bf00      	nop
 800305c:	e7fe      	b.n	800305c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800305e:	f001 f9cf 	bl	8004400 <xTaskGetSchedulerState>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d102      	bne.n	800306e <xQueueGenericSend+0x9e>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d101      	bne.n	8003072 <xQueueGenericSend+0xa2>
 800306e:	2301      	movs	r3, #1
 8003070:	e000      	b.n	8003074 <xQueueGenericSend+0xa4>
 8003072:	2300      	movs	r3, #0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d10a      	bne.n	800308e <xQueueGenericSend+0xbe>
	__asm volatile
 8003078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800307c:	f383 8811 	msr	BASEPRI, r3
 8003080:	f3bf 8f6f 	isb	sy
 8003084:	f3bf 8f4f 	dsb	sy
 8003088:	61fb      	str	r3, [r7, #28]
}
 800308a:	bf00      	nop
 800308c:	e7fe      	b.n	800308c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800308e:	f002 f849 	bl	8005124 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003094:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800309a:	429a      	cmp	r2, r3
 800309c:	d302      	bcc.n	80030a4 <xQueueGenericSend+0xd4>
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d129      	bne.n	80030f8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80030a4:	683a      	ldr	r2, [r7, #0]
 80030a6:	68b9      	ldr	r1, [r7, #8]
 80030a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030aa:	f000 fa0b 	bl	80034c4 <prvCopyDataToQueue>
 80030ae:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80030b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d010      	beq.n	80030da <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80030b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ba:	3324      	adds	r3, #36	; 0x24
 80030bc:	4618      	mov	r0, r3
 80030be:	f000 ffe1 	bl	8004084 <xTaskRemoveFromEventList>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d013      	beq.n	80030f0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80030c8:	4b3f      	ldr	r3, [pc, #252]	; (80031c8 <xQueueGenericSend+0x1f8>)
 80030ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030ce:	601a      	str	r2, [r3, #0]
 80030d0:	f3bf 8f4f 	dsb	sy
 80030d4:	f3bf 8f6f 	isb	sy
 80030d8:	e00a      	b.n	80030f0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80030da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d007      	beq.n	80030f0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80030e0:	4b39      	ldr	r3, [pc, #228]	; (80031c8 <xQueueGenericSend+0x1f8>)
 80030e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030e6:	601a      	str	r2, [r3, #0]
 80030e8:	f3bf 8f4f 	dsb	sy
 80030ec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80030f0:	f002 f848 	bl	8005184 <vPortExitCritical>
				return pdPASS;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e063      	b.n	80031c0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d103      	bne.n	8003106 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80030fe:	f002 f841 	bl	8005184 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003102:	2300      	movs	r3, #0
 8003104:	e05c      	b.n	80031c0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003108:	2b00      	cmp	r3, #0
 800310a:	d106      	bne.n	800311a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800310c:	f107 0314 	add.w	r3, r7, #20
 8003110:	4618      	mov	r0, r3
 8003112:	f001 f81b 	bl	800414c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003116:	2301      	movs	r3, #1
 8003118:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800311a:	f002 f833 	bl	8005184 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800311e:	f000 fd7b 	bl	8003c18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003122:	f001 ffff 	bl	8005124 <vPortEnterCritical>
 8003126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003128:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800312c:	b25b      	sxtb	r3, r3
 800312e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003132:	d103      	bne.n	800313c <xQueueGenericSend+0x16c>
 8003134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003136:	2200      	movs	r2, #0
 8003138:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800313c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800313e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003142:	b25b      	sxtb	r3, r3
 8003144:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003148:	d103      	bne.n	8003152 <xQueueGenericSend+0x182>
 800314a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800314c:	2200      	movs	r2, #0
 800314e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003152:	f002 f817 	bl	8005184 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003156:	1d3a      	adds	r2, r7, #4
 8003158:	f107 0314 	add.w	r3, r7, #20
 800315c:	4611      	mov	r1, r2
 800315e:	4618      	mov	r0, r3
 8003160:	f001 f80a 	bl	8004178 <xTaskCheckForTimeOut>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d124      	bne.n	80031b4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800316a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800316c:	f000 faa2 	bl	80036b4 <prvIsQueueFull>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d018      	beq.n	80031a8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003178:	3310      	adds	r3, #16
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	4611      	mov	r1, r2
 800317e:	4618      	mov	r0, r3
 8003180:	f000 ff30 	bl	8003fe4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003184:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003186:	f000 fa2d 	bl	80035e4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800318a:	f000 fd53 	bl	8003c34 <xTaskResumeAll>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	f47f af7c 	bne.w	800308e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003196:	4b0c      	ldr	r3, [pc, #48]	; (80031c8 <xQueueGenericSend+0x1f8>)
 8003198:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800319c:	601a      	str	r2, [r3, #0]
 800319e:	f3bf 8f4f 	dsb	sy
 80031a2:	f3bf 8f6f 	isb	sy
 80031a6:	e772      	b.n	800308e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80031a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031aa:	f000 fa1b 	bl	80035e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80031ae:	f000 fd41 	bl	8003c34 <xTaskResumeAll>
 80031b2:	e76c      	b.n	800308e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80031b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031b6:	f000 fa15 	bl	80035e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80031ba:	f000 fd3b 	bl	8003c34 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80031be:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3738      	adds	r7, #56	; 0x38
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	e000ed04 	.word	0xe000ed04

080031cc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b090      	sub	sp, #64	; 0x40
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	607a      	str	r2, [r7, #4]
 80031d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80031de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d10a      	bne.n	80031fa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80031e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031e8:	f383 8811 	msr	BASEPRI, r3
 80031ec:	f3bf 8f6f 	isb	sy
 80031f0:	f3bf 8f4f 	dsb	sy
 80031f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80031f6:	bf00      	nop
 80031f8:	e7fe      	b.n	80031f8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d103      	bne.n	8003208 <xQueueGenericSendFromISR+0x3c>
 8003200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003204:	2b00      	cmp	r3, #0
 8003206:	d101      	bne.n	800320c <xQueueGenericSendFromISR+0x40>
 8003208:	2301      	movs	r3, #1
 800320a:	e000      	b.n	800320e <xQueueGenericSendFromISR+0x42>
 800320c:	2300      	movs	r3, #0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d10a      	bne.n	8003228 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003216:	f383 8811 	msr	BASEPRI, r3
 800321a:	f3bf 8f6f 	isb	sy
 800321e:	f3bf 8f4f 	dsb	sy
 8003222:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003224:	bf00      	nop
 8003226:	e7fe      	b.n	8003226 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	2b02      	cmp	r3, #2
 800322c:	d103      	bne.n	8003236 <xQueueGenericSendFromISR+0x6a>
 800322e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003232:	2b01      	cmp	r3, #1
 8003234:	d101      	bne.n	800323a <xQueueGenericSendFromISR+0x6e>
 8003236:	2301      	movs	r3, #1
 8003238:	e000      	b.n	800323c <xQueueGenericSendFromISR+0x70>
 800323a:	2300      	movs	r3, #0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d10a      	bne.n	8003256 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003244:	f383 8811 	msr	BASEPRI, r3
 8003248:	f3bf 8f6f 	isb	sy
 800324c:	f3bf 8f4f 	dsb	sy
 8003250:	623b      	str	r3, [r7, #32]
}
 8003252:	bf00      	nop
 8003254:	e7fe      	b.n	8003254 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003256:	f002 f847 	bl	80052e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800325a:	f3ef 8211 	mrs	r2, BASEPRI
 800325e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003262:	f383 8811 	msr	BASEPRI, r3
 8003266:	f3bf 8f6f 	isb	sy
 800326a:	f3bf 8f4f 	dsb	sy
 800326e:	61fa      	str	r2, [r7, #28]
 8003270:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003272:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003274:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003278:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800327a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800327c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800327e:	429a      	cmp	r2, r3
 8003280:	d302      	bcc.n	8003288 <xQueueGenericSendFromISR+0xbc>
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	2b02      	cmp	r3, #2
 8003286:	d12f      	bne.n	80032e8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800328a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800328e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003296:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003298:	683a      	ldr	r2, [r7, #0]
 800329a:	68b9      	ldr	r1, [r7, #8]
 800329c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800329e:	f000 f911 	bl	80034c4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80032a2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80032a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032aa:	d112      	bne.n	80032d2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80032ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d016      	beq.n	80032e2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80032b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032b6:	3324      	adds	r3, #36	; 0x24
 80032b8:	4618      	mov	r0, r3
 80032ba:	f000 fee3 	bl	8004084 <xTaskRemoveFromEventList>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d00e      	beq.n	80032e2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00b      	beq.n	80032e2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2201      	movs	r2, #1
 80032ce:	601a      	str	r2, [r3, #0]
 80032d0:	e007      	b.n	80032e2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80032d2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80032d6:	3301      	adds	r3, #1
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	b25a      	sxtb	r2, r3
 80032dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80032e2:	2301      	movs	r3, #1
 80032e4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80032e6:	e001      	b.n	80032ec <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80032e8:	2300      	movs	r3, #0
 80032ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032ee:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80032f6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80032f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3740      	adds	r7, #64	; 0x40
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
	...

08003304 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b08c      	sub	sp, #48	; 0x30
 8003308:	af00      	add	r7, sp, #0
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	60b9      	str	r1, [r7, #8]
 800330e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003310:	2300      	movs	r3, #0
 8003312:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800331a:	2b00      	cmp	r3, #0
 800331c:	d10a      	bne.n	8003334 <xQueueReceive+0x30>
	__asm volatile
 800331e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003322:	f383 8811 	msr	BASEPRI, r3
 8003326:	f3bf 8f6f 	isb	sy
 800332a:	f3bf 8f4f 	dsb	sy
 800332e:	623b      	str	r3, [r7, #32]
}
 8003330:	bf00      	nop
 8003332:	e7fe      	b.n	8003332 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d103      	bne.n	8003342 <xQueueReceive+0x3e>
 800333a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800333c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333e:	2b00      	cmp	r3, #0
 8003340:	d101      	bne.n	8003346 <xQueueReceive+0x42>
 8003342:	2301      	movs	r3, #1
 8003344:	e000      	b.n	8003348 <xQueueReceive+0x44>
 8003346:	2300      	movs	r3, #0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d10a      	bne.n	8003362 <xQueueReceive+0x5e>
	__asm volatile
 800334c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003350:	f383 8811 	msr	BASEPRI, r3
 8003354:	f3bf 8f6f 	isb	sy
 8003358:	f3bf 8f4f 	dsb	sy
 800335c:	61fb      	str	r3, [r7, #28]
}
 800335e:	bf00      	nop
 8003360:	e7fe      	b.n	8003360 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003362:	f001 f84d 	bl	8004400 <xTaskGetSchedulerState>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d102      	bne.n	8003372 <xQueueReceive+0x6e>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d101      	bne.n	8003376 <xQueueReceive+0x72>
 8003372:	2301      	movs	r3, #1
 8003374:	e000      	b.n	8003378 <xQueueReceive+0x74>
 8003376:	2300      	movs	r3, #0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d10a      	bne.n	8003392 <xQueueReceive+0x8e>
	__asm volatile
 800337c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003380:	f383 8811 	msr	BASEPRI, r3
 8003384:	f3bf 8f6f 	isb	sy
 8003388:	f3bf 8f4f 	dsb	sy
 800338c:	61bb      	str	r3, [r7, #24]
}
 800338e:	bf00      	nop
 8003390:	e7fe      	b.n	8003390 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003392:	f001 fec7 	bl	8005124 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800339a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800339c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d01f      	beq.n	80033e2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80033a2:	68b9      	ldr	r1, [r7, #8]
 80033a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033a6:	f000 f8f7 	bl	8003598 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80033aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ac:	1e5a      	subs	r2, r3, #1
 80033ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033b0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00f      	beq.n	80033da <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033bc:	3310      	adds	r3, #16
 80033be:	4618      	mov	r0, r3
 80033c0:	f000 fe60 	bl	8004084 <xTaskRemoveFromEventList>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d007      	beq.n	80033da <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80033ca:	4b3d      	ldr	r3, [pc, #244]	; (80034c0 <xQueueReceive+0x1bc>)
 80033cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033d0:	601a      	str	r2, [r3, #0]
 80033d2:	f3bf 8f4f 	dsb	sy
 80033d6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80033da:	f001 fed3 	bl	8005184 <vPortExitCritical>
				return pdPASS;
 80033de:	2301      	movs	r3, #1
 80033e0:	e069      	b.n	80034b6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d103      	bne.n	80033f0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80033e8:	f001 fecc 	bl	8005184 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80033ec:	2300      	movs	r3, #0
 80033ee:	e062      	b.n	80034b6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80033f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d106      	bne.n	8003404 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80033f6:	f107 0310 	add.w	r3, r7, #16
 80033fa:	4618      	mov	r0, r3
 80033fc:	f000 fea6 	bl	800414c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003400:	2301      	movs	r3, #1
 8003402:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003404:	f001 febe 	bl	8005184 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003408:	f000 fc06 	bl	8003c18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800340c:	f001 fe8a 	bl	8005124 <vPortEnterCritical>
 8003410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003412:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003416:	b25b      	sxtb	r3, r3
 8003418:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800341c:	d103      	bne.n	8003426 <xQueueReceive+0x122>
 800341e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003420:	2200      	movs	r2, #0
 8003422:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003428:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800342c:	b25b      	sxtb	r3, r3
 800342e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003432:	d103      	bne.n	800343c <xQueueReceive+0x138>
 8003434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003436:	2200      	movs	r2, #0
 8003438:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800343c:	f001 fea2 	bl	8005184 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003440:	1d3a      	adds	r2, r7, #4
 8003442:	f107 0310 	add.w	r3, r7, #16
 8003446:	4611      	mov	r1, r2
 8003448:	4618      	mov	r0, r3
 800344a:	f000 fe95 	bl	8004178 <xTaskCheckForTimeOut>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d123      	bne.n	800349c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003454:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003456:	f000 f917 	bl	8003688 <prvIsQueueEmpty>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d017      	beq.n	8003490 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003462:	3324      	adds	r3, #36	; 0x24
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	4611      	mov	r1, r2
 8003468:	4618      	mov	r0, r3
 800346a:	f000 fdbb 	bl	8003fe4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800346e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003470:	f000 f8b8 	bl	80035e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003474:	f000 fbde 	bl	8003c34 <xTaskResumeAll>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d189      	bne.n	8003392 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800347e:	4b10      	ldr	r3, [pc, #64]	; (80034c0 <xQueueReceive+0x1bc>)
 8003480:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003484:	601a      	str	r2, [r3, #0]
 8003486:	f3bf 8f4f 	dsb	sy
 800348a:	f3bf 8f6f 	isb	sy
 800348e:	e780      	b.n	8003392 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003490:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003492:	f000 f8a7 	bl	80035e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003496:	f000 fbcd 	bl	8003c34 <xTaskResumeAll>
 800349a:	e77a      	b.n	8003392 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800349c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800349e:	f000 f8a1 	bl	80035e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80034a2:	f000 fbc7 	bl	8003c34 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80034a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80034a8:	f000 f8ee 	bl	8003688 <prvIsQueueEmpty>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	f43f af6f 	beq.w	8003392 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80034b4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3730      	adds	r7, #48	; 0x30
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	e000ed04 	.word	0xe000ed04

080034c4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b086      	sub	sp, #24
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80034d0:	2300      	movs	r3, #0
 80034d2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d10d      	bne.n	80034fe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d14d      	bne.n	8003586 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	4618      	mov	r0, r3
 80034f0:	f000 ffa4 	bl	800443c <xTaskPriorityDisinherit>
 80034f4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2200      	movs	r2, #0
 80034fa:	609a      	str	r2, [r3, #8]
 80034fc:	e043      	b.n	8003586 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d119      	bne.n	8003538 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6858      	ldr	r0, [r3, #4]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350c:	461a      	mov	r2, r3
 800350e:	68b9      	ldr	r1, [r7, #8]
 8003510:	f008 fa6b 	bl	800b9ea <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	685a      	ldr	r2, [r3, #4]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351c:	441a      	add	r2, r3
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	685a      	ldr	r2, [r3, #4]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	429a      	cmp	r2, r3
 800352c:	d32b      	bcc.n	8003586 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	605a      	str	r2, [r3, #4]
 8003536:	e026      	b.n	8003586 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	68d8      	ldr	r0, [r3, #12]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003540:	461a      	mov	r2, r3
 8003542:	68b9      	ldr	r1, [r7, #8]
 8003544:	f008 fa51 	bl	800b9ea <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	68da      	ldr	r2, [r3, #12]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003550:	425b      	negs	r3, r3
 8003552:	441a      	add	r2, r3
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	68da      	ldr	r2, [r3, #12]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	429a      	cmp	r2, r3
 8003562:	d207      	bcs.n	8003574 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	689a      	ldr	r2, [r3, #8]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356c:	425b      	negs	r3, r3
 800356e:	441a      	add	r2, r3
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2b02      	cmp	r3, #2
 8003578:	d105      	bne.n	8003586 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d002      	beq.n	8003586 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	3b01      	subs	r3, #1
 8003584:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	1c5a      	adds	r2, r3, #1
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800358e:	697b      	ldr	r3, [r7, #20]
}
 8003590:	4618      	mov	r0, r3
 8003592:	3718      	adds	r7, #24
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d018      	beq.n	80035dc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	68da      	ldr	r2, [r3, #12]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b2:	441a      	add	r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	68da      	ldr	r2, [r3, #12]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d303      	bcc.n	80035cc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	68d9      	ldr	r1, [r3, #12]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d4:	461a      	mov	r2, r3
 80035d6:	6838      	ldr	r0, [r7, #0]
 80035d8:	f008 fa07 	bl	800b9ea <memcpy>
	}
}
 80035dc:	bf00      	nop
 80035de:	3708      	adds	r7, #8
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80035ec:	f001 fd9a 	bl	8005124 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035f6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80035f8:	e011      	b.n	800361e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d012      	beq.n	8003628 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	3324      	adds	r3, #36	; 0x24
 8003606:	4618      	mov	r0, r3
 8003608:	f000 fd3c 	bl	8004084 <xTaskRemoveFromEventList>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d001      	beq.n	8003616 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003612:	f000 fe13 	bl	800423c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003616:	7bfb      	ldrb	r3, [r7, #15]
 8003618:	3b01      	subs	r3, #1
 800361a:	b2db      	uxtb	r3, r3
 800361c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800361e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003622:	2b00      	cmp	r3, #0
 8003624:	dce9      	bgt.n	80035fa <prvUnlockQueue+0x16>
 8003626:	e000      	b.n	800362a <prvUnlockQueue+0x46>
					break;
 8003628:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	22ff      	movs	r2, #255	; 0xff
 800362e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003632:	f001 fda7 	bl	8005184 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003636:	f001 fd75 	bl	8005124 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003640:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003642:	e011      	b.n	8003668 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d012      	beq.n	8003672 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	3310      	adds	r3, #16
 8003650:	4618      	mov	r0, r3
 8003652:	f000 fd17 	bl	8004084 <xTaskRemoveFromEventList>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d001      	beq.n	8003660 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800365c:	f000 fdee 	bl	800423c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003660:	7bbb      	ldrb	r3, [r7, #14]
 8003662:	3b01      	subs	r3, #1
 8003664:	b2db      	uxtb	r3, r3
 8003666:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003668:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800366c:	2b00      	cmp	r3, #0
 800366e:	dce9      	bgt.n	8003644 <prvUnlockQueue+0x60>
 8003670:	e000      	b.n	8003674 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003672:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	22ff      	movs	r2, #255	; 0xff
 8003678:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800367c:	f001 fd82 	bl	8005184 <vPortExitCritical>
}
 8003680:	bf00      	nop
 8003682:	3710      	adds	r7, #16
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003690:	f001 fd48 	bl	8005124 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003698:	2b00      	cmp	r3, #0
 800369a:	d102      	bne.n	80036a2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800369c:	2301      	movs	r3, #1
 800369e:	60fb      	str	r3, [r7, #12]
 80036a0:	e001      	b.n	80036a6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80036a2:	2300      	movs	r3, #0
 80036a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80036a6:	f001 fd6d 	bl	8005184 <vPortExitCritical>

	return xReturn;
 80036aa:	68fb      	ldr	r3, [r7, #12]
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3710      	adds	r7, #16
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80036bc:	f001 fd32 	bl	8005124 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d102      	bne.n	80036d2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80036cc:	2301      	movs	r3, #1
 80036ce:	60fb      	str	r3, [r7, #12]
 80036d0:	e001      	b.n	80036d6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80036d2:	2300      	movs	r3, #0
 80036d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80036d6:	f001 fd55 	bl	8005184 <vPortExitCritical>

	return xReturn;
 80036da:	68fb      	ldr	r3, [r7, #12]
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3710      	adds	r7, #16
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80036e4:	b480      	push	{r7}
 80036e6:	b085      	sub	sp, #20
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80036ee:	2300      	movs	r3, #0
 80036f0:	60fb      	str	r3, [r7, #12]
 80036f2:	e014      	b.n	800371e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80036f4:	4a0f      	ldr	r2, [pc, #60]	; (8003734 <vQueueAddToRegistry+0x50>)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d10b      	bne.n	8003718 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003700:	490c      	ldr	r1, [pc, #48]	; (8003734 <vQueueAddToRegistry+0x50>)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	683a      	ldr	r2, [r7, #0]
 8003706:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800370a:	4a0a      	ldr	r2, [pc, #40]	; (8003734 <vQueueAddToRegistry+0x50>)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	00db      	lsls	r3, r3, #3
 8003710:	4413      	add	r3, r2
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003716:	e006      	b.n	8003726 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	3301      	adds	r3, #1
 800371c:	60fb      	str	r3, [r7, #12]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2b07      	cmp	r3, #7
 8003722:	d9e7      	bls.n	80036f4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003724:	bf00      	nop
 8003726:	bf00      	nop
 8003728:	3714      	adds	r7, #20
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	20000a14 	.word	0x20000a14

08003738 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003738:	b580      	push	{r7, lr}
 800373a:	b086      	sub	sp, #24
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003748:	f001 fcec 	bl	8005124 <vPortEnterCritical>
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003752:	b25b      	sxtb	r3, r3
 8003754:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003758:	d103      	bne.n	8003762 <vQueueWaitForMessageRestricted+0x2a>
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003768:	b25b      	sxtb	r3, r3
 800376a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800376e:	d103      	bne.n	8003778 <vQueueWaitForMessageRestricted+0x40>
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	2200      	movs	r2, #0
 8003774:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003778:	f001 fd04 	bl	8005184 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003780:	2b00      	cmp	r3, #0
 8003782:	d106      	bne.n	8003792 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	3324      	adds	r3, #36	; 0x24
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	68b9      	ldr	r1, [r7, #8]
 800378c:	4618      	mov	r0, r3
 800378e:	f000 fc4d 	bl	800402c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003792:	6978      	ldr	r0, [r7, #20]
 8003794:	f7ff ff26 	bl	80035e4 <prvUnlockQueue>
	}
 8003798:	bf00      	nop
 800379a:	3718      	adds	r7, #24
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b08e      	sub	sp, #56	; 0x38
 80037a4:	af04      	add	r7, sp, #16
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	607a      	str	r2, [r7, #4]
 80037ac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80037ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10a      	bne.n	80037ca <xTaskCreateStatic+0x2a>
	__asm volatile
 80037b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b8:	f383 8811 	msr	BASEPRI, r3
 80037bc:	f3bf 8f6f 	isb	sy
 80037c0:	f3bf 8f4f 	dsb	sy
 80037c4:	623b      	str	r3, [r7, #32]
}
 80037c6:	bf00      	nop
 80037c8:	e7fe      	b.n	80037c8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80037ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d10a      	bne.n	80037e6 <xTaskCreateStatic+0x46>
	__asm volatile
 80037d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037d4:	f383 8811 	msr	BASEPRI, r3
 80037d8:	f3bf 8f6f 	isb	sy
 80037dc:	f3bf 8f4f 	dsb	sy
 80037e0:	61fb      	str	r3, [r7, #28]
}
 80037e2:	bf00      	nop
 80037e4:	e7fe      	b.n	80037e4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80037e6:	235c      	movs	r3, #92	; 0x5c
 80037e8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	2b5c      	cmp	r3, #92	; 0x5c
 80037ee:	d00a      	beq.n	8003806 <xTaskCreateStatic+0x66>
	__asm volatile
 80037f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f4:	f383 8811 	msr	BASEPRI, r3
 80037f8:	f3bf 8f6f 	isb	sy
 80037fc:	f3bf 8f4f 	dsb	sy
 8003800:	61bb      	str	r3, [r7, #24]
}
 8003802:	bf00      	nop
 8003804:	e7fe      	b.n	8003804 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003806:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800380a:	2b00      	cmp	r3, #0
 800380c:	d01e      	beq.n	800384c <xTaskCreateStatic+0xac>
 800380e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003810:	2b00      	cmp	r3, #0
 8003812:	d01b      	beq.n	800384c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003816:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800381c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800381e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003820:	2202      	movs	r2, #2
 8003822:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003826:	2300      	movs	r3, #0
 8003828:	9303      	str	r3, [sp, #12]
 800382a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382c:	9302      	str	r3, [sp, #8]
 800382e:	f107 0314 	add.w	r3, r7, #20
 8003832:	9301      	str	r3, [sp, #4]
 8003834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003836:	9300      	str	r3, [sp, #0]
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	68b9      	ldr	r1, [r7, #8]
 800383e:	68f8      	ldr	r0, [r7, #12]
 8003840:	f000 f850 	bl	80038e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003844:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003846:	f000 f8dd 	bl	8003a04 <prvAddNewTaskToReadyList>
 800384a:	e001      	b.n	8003850 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800384c:	2300      	movs	r3, #0
 800384e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003850:	697b      	ldr	r3, [r7, #20]
	}
 8003852:	4618      	mov	r0, r3
 8003854:	3728      	adds	r7, #40	; 0x28
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}

0800385a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800385a:	b580      	push	{r7, lr}
 800385c:	b08c      	sub	sp, #48	; 0x30
 800385e:	af04      	add	r7, sp, #16
 8003860:	60f8      	str	r0, [r7, #12]
 8003862:	60b9      	str	r1, [r7, #8]
 8003864:	603b      	str	r3, [r7, #0]
 8003866:	4613      	mov	r3, r2
 8003868:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800386a:	88fb      	ldrh	r3, [r7, #6]
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	4618      	mov	r0, r3
 8003870:	f001 fd7a 	bl	8005368 <pvPortMalloc>
 8003874:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d00e      	beq.n	800389a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800387c:	205c      	movs	r0, #92	; 0x5c
 800387e:	f001 fd73 	bl	8005368 <pvPortMalloc>
 8003882:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d003      	beq.n	8003892 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	697a      	ldr	r2, [r7, #20]
 800388e:	631a      	str	r2, [r3, #48]	; 0x30
 8003890:	e005      	b.n	800389e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003892:	6978      	ldr	r0, [r7, #20]
 8003894:	f001 fe34 	bl	8005500 <vPortFree>
 8003898:	e001      	b.n	800389e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800389a:	2300      	movs	r3, #0
 800389c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d017      	beq.n	80038d4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80038ac:	88fa      	ldrh	r2, [r7, #6]
 80038ae:	2300      	movs	r3, #0
 80038b0:	9303      	str	r3, [sp, #12]
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	9302      	str	r3, [sp, #8]
 80038b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038b8:	9301      	str	r3, [sp, #4]
 80038ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038bc:	9300      	str	r3, [sp, #0]
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	68b9      	ldr	r1, [r7, #8]
 80038c2:	68f8      	ldr	r0, [r7, #12]
 80038c4:	f000 f80e 	bl	80038e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80038c8:	69f8      	ldr	r0, [r7, #28]
 80038ca:	f000 f89b 	bl	8003a04 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80038ce:	2301      	movs	r3, #1
 80038d0:	61bb      	str	r3, [r7, #24]
 80038d2:	e002      	b.n	80038da <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80038d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80038d8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80038da:	69bb      	ldr	r3, [r7, #24]
	}
 80038dc:	4618      	mov	r0, r3
 80038de:	3720      	adds	r7, #32
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b088      	sub	sp, #32
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	607a      	str	r2, [r7, #4]
 80038f0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80038f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038f4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	461a      	mov	r2, r3
 80038fc:	21a5      	movs	r1, #165	; 0xa5
 80038fe:	f008 f803 	bl	800b908 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003904:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800390c:	3b01      	subs	r3, #1
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	4413      	add	r3, r2
 8003912:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003914:	69bb      	ldr	r3, [r7, #24]
 8003916:	f023 0307 	bic.w	r3, r3, #7
 800391a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	f003 0307 	and.w	r3, r3, #7
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00a      	beq.n	800393c <prvInitialiseNewTask+0x58>
	__asm volatile
 8003926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800392a:	f383 8811 	msr	BASEPRI, r3
 800392e:	f3bf 8f6f 	isb	sy
 8003932:	f3bf 8f4f 	dsb	sy
 8003936:	617b      	str	r3, [r7, #20]
}
 8003938:	bf00      	nop
 800393a:	e7fe      	b.n	800393a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d01f      	beq.n	8003982 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003942:	2300      	movs	r3, #0
 8003944:	61fb      	str	r3, [r7, #28]
 8003946:	e012      	b.n	800396e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003948:	68ba      	ldr	r2, [r7, #8]
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	4413      	add	r3, r2
 800394e:	7819      	ldrb	r1, [r3, #0]
 8003950:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	4413      	add	r3, r2
 8003956:	3334      	adds	r3, #52	; 0x34
 8003958:	460a      	mov	r2, r1
 800395a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800395c:	68ba      	ldr	r2, [r7, #8]
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	4413      	add	r3, r2
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d006      	beq.n	8003976 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	3301      	adds	r3, #1
 800396c:	61fb      	str	r3, [r7, #28]
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	2b0f      	cmp	r3, #15
 8003972:	d9e9      	bls.n	8003948 <prvInitialiseNewTask+0x64>
 8003974:	e000      	b.n	8003978 <prvInitialiseNewTask+0x94>
			{
				break;
 8003976:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800397a:	2200      	movs	r2, #0
 800397c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003980:	e003      	b.n	800398a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003984:	2200      	movs	r2, #0
 8003986:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800398a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800398c:	2b37      	cmp	r3, #55	; 0x37
 800398e:	d901      	bls.n	8003994 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003990:	2337      	movs	r3, #55	; 0x37
 8003992:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003996:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003998:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800399a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800399c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800399e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80039a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a2:	2200      	movs	r2, #0
 80039a4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80039a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a8:	3304      	adds	r3, #4
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7ff f978 	bl	8002ca0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80039b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b2:	3318      	adds	r3, #24
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7ff f973 	bl	8002ca0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80039ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039be:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80039c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80039ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039ce:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80039d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d2:	2200      	movs	r2, #0
 80039d4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80039d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80039de:	683a      	ldr	r2, [r7, #0]
 80039e0:	68f9      	ldr	r1, [r7, #12]
 80039e2:	69b8      	ldr	r0, [r7, #24]
 80039e4:	f001 fa70 	bl	8004ec8 <pxPortInitialiseStack>
 80039e8:	4602      	mov	r2, r0
 80039ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80039ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d002      	beq.n	80039fa <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80039f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80039fa:	bf00      	nop
 80039fc:	3720      	adds	r7, #32
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
	...

08003a04 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003a0c:	f001 fb8a 	bl	8005124 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003a10:	4b2d      	ldr	r3, [pc, #180]	; (8003ac8 <prvAddNewTaskToReadyList+0xc4>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	3301      	adds	r3, #1
 8003a16:	4a2c      	ldr	r2, [pc, #176]	; (8003ac8 <prvAddNewTaskToReadyList+0xc4>)
 8003a18:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003a1a:	4b2c      	ldr	r3, [pc, #176]	; (8003acc <prvAddNewTaskToReadyList+0xc8>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d109      	bne.n	8003a36 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003a22:	4a2a      	ldr	r2, [pc, #168]	; (8003acc <prvAddNewTaskToReadyList+0xc8>)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003a28:	4b27      	ldr	r3, [pc, #156]	; (8003ac8 <prvAddNewTaskToReadyList+0xc4>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d110      	bne.n	8003a52 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003a30:	f000 fc28 	bl	8004284 <prvInitialiseTaskLists>
 8003a34:	e00d      	b.n	8003a52 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003a36:	4b26      	ldr	r3, [pc, #152]	; (8003ad0 <prvAddNewTaskToReadyList+0xcc>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d109      	bne.n	8003a52 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003a3e:	4b23      	ldr	r3, [pc, #140]	; (8003acc <prvAddNewTaskToReadyList+0xc8>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d802      	bhi.n	8003a52 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003a4c:	4a1f      	ldr	r2, [pc, #124]	; (8003acc <prvAddNewTaskToReadyList+0xc8>)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003a52:	4b20      	ldr	r3, [pc, #128]	; (8003ad4 <prvAddNewTaskToReadyList+0xd0>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	3301      	adds	r3, #1
 8003a58:	4a1e      	ldr	r2, [pc, #120]	; (8003ad4 <prvAddNewTaskToReadyList+0xd0>)
 8003a5a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003a5c:	4b1d      	ldr	r3, [pc, #116]	; (8003ad4 <prvAddNewTaskToReadyList+0xd0>)
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a68:	4b1b      	ldr	r3, [pc, #108]	; (8003ad8 <prvAddNewTaskToReadyList+0xd4>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d903      	bls.n	8003a78 <prvAddNewTaskToReadyList+0x74>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a74:	4a18      	ldr	r2, [pc, #96]	; (8003ad8 <prvAddNewTaskToReadyList+0xd4>)
 8003a76:	6013      	str	r3, [r2, #0]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	4413      	add	r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	4a15      	ldr	r2, [pc, #84]	; (8003adc <prvAddNewTaskToReadyList+0xd8>)
 8003a86:	441a      	add	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	3304      	adds	r3, #4
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	4610      	mov	r0, r2
 8003a90:	f7ff f913 	bl	8002cba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003a94:	f001 fb76 	bl	8005184 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003a98:	4b0d      	ldr	r3, [pc, #52]	; (8003ad0 <prvAddNewTaskToReadyList+0xcc>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d00e      	beq.n	8003abe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003aa0:	4b0a      	ldr	r3, [pc, #40]	; (8003acc <prvAddNewTaskToReadyList+0xc8>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d207      	bcs.n	8003abe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003aae:	4b0c      	ldr	r3, [pc, #48]	; (8003ae0 <prvAddNewTaskToReadyList+0xdc>)
 8003ab0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ab4:	601a      	str	r2, [r3, #0]
 8003ab6:	f3bf 8f4f 	dsb	sy
 8003aba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003abe:	bf00      	nop
 8003ac0:	3708      	adds	r7, #8
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	20000f28 	.word	0x20000f28
 8003acc:	20000a54 	.word	0x20000a54
 8003ad0:	20000f34 	.word	0x20000f34
 8003ad4:	20000f44 	.word	0x20000f44
 8003ad8:	20000f30 	.word	0x20000f30
 8003adc:	20000a58 	.word	0x20000a58
 8003ae0:	e000ed04 	.word	0xe000ed04

08003ae4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003aec:	2300      	movs	r3, #0
 8003aee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d017      	beq.n	8003b26 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003af6:	4b13      	ldr	r3, [pc, #76]	; (8003b44 <vTaskDelay+0x60>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d00a      	beq.n	8003b14 <vTaskDelay+0x30>
	__asm volatile
 8003afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b02:	f383 8811 	msr	BASEPRI, r3
 8003b06:	f3bf 8f6f 	isb	sy
 8003b0a:	f3bf 8f4f 	dsb	sy
 8003b0e:	60bb      	str	r3, [r7, #8]
}
 8003b10:	bf00      	nop
 8003b12:	e7fe      	b.n	8003b12 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003b14:	f000 f880 	bl	8003c18 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003b18:	2100      	movs	r1, #0
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 fe32 	bl	8004784 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003b20:	f000 f888 	bl	8003c34 <xTaskResumeAll>
 8003b24:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d107      	bne.n	8003b3c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003b2c:	4b06      	ldr	r3, [pc, #24]	; (8003b48 <vTaskDelay+0x64>)
 8003b2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b32:	601a      	str	r2, [r3, #0]
 8003b34:	f3bf 8f4f 	dsb	sy
 8003b38:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003b3c:	bf00      	nop
 8003b3e:	3710      	adds	r7, #16
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	20000f50 	.word	0x20000f50
 8003b48:	e000ed04 	.word	0xe000ed04

08003b4c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b08a      	sub	sp, #40	; 0x28
 8003b50:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003b52:	2300      	movs	r3, #0
 8003b54:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003b56:	2300      	movs	r3, #0
 8003b58:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003b5a:	463a      	mov	r2, r7
 8003b5c:	1d39      	adds	r1, r7, #4
 8003b5e:	f107 0308 	add.w	r3, r7, #8
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7ff f848 	bl	8002bf8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003b68:	6839      	ldr	r1, [r7, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	68ba      	ldr	r2, [r7, #8]
 8003b6e:	9202      	str	r2, [sp, #8]
 8003b70:	9301      	str	r3, [sp, #4]
 8003b72:	2300      	movs	r3, #0
 8003b74:	9300      	str	r3, [sp, #0]
 8003b76:	2300      	movs	r3, #0
 8003b78:	460a      	mov	r2, r1
 8003b7a:	4921      	ldr	r1, [pc, #132]	; (8003c00 <vTaskStartScheduler+0xb4>)
 8003b7c:	4821      	ldr	r0, [pc, #132]	; (8003c04 <vTaskStartScheduler+0xb8>)
 8003b7e:	f7ff fe0f 	bl	80037a0 <xTaskCreateStatic>
 8003b82:	4603      	mov	r3, r0
 8003b84:	4a20      	ldr	r2, [pc, #128]	; (8003c08 <vTaskStartScheduler+0xbc>)
 8003b86:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003b88:	4b1f      	ldr	r3, [pc, #124]	; (8003c08 <vTaskStartScheduler+0xbc>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d002      	beq.n	8003b96 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003b90:	2301      	movs	r3, #1
 8003b92:	617b      	str	r3, [r7, #20]
 8003b94:	e001      	b.n	8003b9a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003b96:	2300      	movs	r3, #0
 8003b98:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d102      	bne.n	8003ba6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003ba0:	f000 fe44 	bl	800482c <xTimerCreateTimerTask>
 8003ba4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d116      	bne.n	8003bda <vTaskStartScheduler+0x8e>
	__asm volatile
 8003bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb0:	f383 8811 	msr	BASEPRI, r3
 8003bb4:	f3bf 8f6f 	isb	sy
 8003bb8:	f3bf 8f4f 	dsb	sy
 8003bbc:	613b      	str	r3, [r7, #16]
}
 8003bbe:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003bc0:	4b12      	ldr	r3, [pc, #72]	; (8003c0c <vTaskStartScheduler+0xc0>)
 8003bc2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003bc6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003bc8:	4b11      	ldr	r3, [pc, #68]	; (8003c10 <vTaskStartScheduler+0xc4>)
 8003bca:	2201      	movs	r2, #1
 8003bcc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003bce:	4b11      	ldr	r3, [pc, #68]	; (8003c14 <vTaskStartScheduler+0xc8>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003bd4:	f001 fa04 	bl	8004fe0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003bd8:	e00e      	b.n	8003bf8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003be0:	d10a      	bne.n	8003bf8 <vTaskStartScheduler+0xac>
	__asm volatile
 8003be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be6:	f383 8811 	msr	BASEPRI, r3
 8003bea:	f3bf 8f6f 	isb	sy
 8003bee:	f3bf 8f4f 	dsb	sy
 8003bf2:	60fb      	str	r3, [r7, #12]
}
 8003bf4:	bf00      	nop
 8003bf6:	e7fe      	b.n	8003bf6 <vTaskStartScheduler+0xaa>
}
 8003bf8:	bf00      	nop
 8003bfa:	3718      	adds	r7, #24
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	0800c60c 	.word	0x0800c60c
 8003c04:	08004255 	.word	0x08004255
 8003c08:	20000f4c 	.word	0x20000f4c
 8003c0c:	20000f48 	.word	0x20000f48
 8003c10:	20000f34 	.word	0x20000f34
 8003c14:	20000f2c 	.word	0x20000f2c

08003c18 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003c18:	b480      	push	{r7}
 8003c1a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003c1c:	4b04      	ldr	r3, [pc, #16]	; (8003c30 <vTaskSuspendAll+0x18>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	3301      	adds	r3, #1
 8003c22:	4a03      	ldr	r2, [pc, #12]	; (8003c30 <vTaskSuspendAll+0x18>)
 8003c24:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003c26:	bf00      	nop
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr
 8003c30:	20000f50 	.word	0x20000f50

08003c34 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003c42:	4b42      	ldr	r3, [pc, #264]	; (8003d4c <xTaskResumeAll+0x118>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d10a      	bne.n	8003c60 <xTaskResumeAll+0x2c>
	__asm volatile
 8003c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c4e:	f383 8811 	msr	BASEPRI, r3
 8003c52:	f3bf 8f6f 	isb	sy
 8003c56:	f3bf 8f4f 	dsb	sy
 8003c5a:	603b      	str	r3, [r7, #0]
}
 8003c5c:	bf00      	nop
 8003c5e:	e7fe      	b.n	8003c5e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003c60:	f001 fa60 	bl	8005124 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003c64:	4b39      	ldr	r3, [pc, #228]	; (8003d4c <xTaskResumeAll+0x118>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	3b01      	subs	r3, #1
 8003c6a:	4a38      	ldr	r2, [pc, #224]	; (8003d4c <xTaskResumeAll+0x118>)
 8003c6c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c6e:	4b37      	ldr	r3, [pc, #220]	; (8003d4c <xTaskResumeAll+0x118>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d162      	bne.n	8003d3c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003c76:	4b36      	ldr	r3, [pc, #216]	; (8003d50 <xTaskResumeAll+0x11c>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d05e      	beq.n	8003d3c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c7e:	e02f      	b.n	8003ce0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c80:	4b34      	ldr	r3, [pc, #208]	; (8003d54 <xTaskResumeAll+0x120>)
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	3318      	adds	r3, #24
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f7ff f871 	bl	8002d74 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	3304      	adds	r3, #4
 8003c96:	4618      	mov	r0, r3
 8003c98:	f7ff f86c 	bl	8002d74 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ca0:	4b2d      	ldr	r3, [pc, #180]	; (8003d58 <xTaskResumeAll+0x124>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d903      	bls.n	8003cb0 <xTaskResumeAll+0x7c>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cac:	4a2a      	ldr	r2, [pc, #168]	; (8003d58 <xTaskResumeAll+0x124>)
 8003cae:	6013      	str	r3, [r2, #0]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	4413      	add	r3, r2
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	4a27      	ldr	r2, [pc, #156]	; (8003d5c <xTaskResumeAll+0x128>)
 8003cbe:	441a      	add	r2, r3
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	3304      	adds	r3, #4
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	4610      	mov	r0, r2
 8003cc8:	f7fe fff7 	bl	8002cba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cd0:	4b23      	ldr	r3, [pc, #140]	; (8003d60 <xTaskResumeAll+0x12c>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d302      	bcc.n	8003ce0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003cda:	4b22      	ldr	r3, [pc, #136]	; (8003d64 <xTaskResumeAll+0x130>)
 8003cdc:	2201      	movs	r2, #1
 8003cde:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ce0:	4b1c      	ldr	r3, [pc, #112]	; (8003d54 <xTaskResumeAll+0x120>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d1cb      	bne.n	8003c80 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d001      	beq.n	8003cf2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003cee:	f000 fb67 	bl	80043c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003cf2:	4b1d      	ldr	r3, [pc, #116]	; (8003d68 <xTaskResumeAll+0x134>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d010      	beq.n	8003d20 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003cfe:	f000 f859 	bl	8003db4 <xTaskIncrementTick>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d002      	beq.n	8003d0e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003d08:	4b16      	ldr	r3, [pc, #88]	; (8003d64 <xTaskResumeAll+0x130>)
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	3b01      	subs	r3, #1
 8003d12:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1f1      	bne.n	8003cfe <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003d1a:	4b13      	ldr	r3, [pc, #76]	; (8003d68 <xTaskResumeAll+0x134>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003d20:	4b10      	ldr	r3, [pc, #64]	; (8003d64 <xTaskResumeAll+0x130>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d009      	beq.n	8003d3c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003d2c:	4b0f      	ldr	r3, [pc, #60]	; (8003d6c <xTaskResumeAll+0x138>)
 8003d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d32:	601a      	str	r2, [r3, #0]
 8003d34:	f3bf 8f4f 	dsb	sy
 8003d38:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003d3c:	f001 fa22 	bl	8005184 <vPortExitCritical>

	return xAlreadyYielded;
 8003d40:	68bb      	ldr	r3, [r7, #8]
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3710      	adds	r7, #16
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	20000f50 	.word	0x20000f50
 8003d50:	20000f28 	.word	0x20000f28
 8003d54:	20000ee8 	.word	0x20000ee8
 8003d58:	20000f30 	.word	0x20000f30
 8003d5c:	20000a58 	.word	0x20000a58
 8003d60:	20000a54 	.word	0x20000a54
 8003d64:	20000f3c 	.word	0x20000f3c
 8003d68:	20000f38 	.word	0x20000f38
 8003d6c:	e000ed04 	.word	0xe000ed04

08003d70 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003d76:	4b05      	ldr	r3, [pc, #20]	; (8003d8c <xTaskGetTickCount+0x1c>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003d7c:	687b      	ldr	r3, [r7, #4]
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	370c      	adds	r7, #12
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	20000f2c 	.word	0x20000f2c

08003d90 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003d96:	f001 faa7 	bl	80052e8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8003d9e:	4b04      	ldr	r3, [pc, #16]	; (8003db0 <xTaskGetTickCountFromISR+0x20>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003da4:	683b      	ldr	r3, [r7, #0]
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3708      	adds	r7, #8
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	20000f2c 	.word	0x20000f2c

08003db4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b086      	sub	sp, #24
 8003db8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003dbe:	4b4f      	ldr	r3, [pc, #316]	; (8003efc <xTaskIncrementTick+0x148>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	f040 808f 	bne.w	8003ee6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003dc8:	4b4d      	ldr	r3, [pc, #308]	; (8003f00 <xTaskIncrementTick+0x14c>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	3301      	adds	r3, #1
 8003dce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003dd0:	4a4b      	ldr	r2, [pc, #300]	; (8003f00 <xTaskIncrementTick+0x14c>)
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d120      	bne.n	8003e1e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003ddc:	4b49      	ldr	r3, [pc, #292]	; (8003f04 <xTaskIncrementTick+0x150>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00a      	beq.n	8003dfc <xTaskIncrementTick+0x48>
	__asm volatile
 8003de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dea:	f383 8811 	msr	BASEPRI, r3
 8003dee:	f3bf 8f6f 	isb	sy
 8003df2:	f3bf 8f4f 	dsb	sy
 8003df6:	603b      	str	r3, [r7, #0]
}
 8003df8:	bf00      	nop
 8003dfa:	e7fe      	b.n	8003dfa <xTaskIncrementTick+0x46>
 8003dfc:	4b41      	ldr	r3, [pc, #260]	; (8003f04 <xTaskIncrementTick+0x150>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	60fb      	str	r3, [r7, #12]
 8003e02:	4b41      	ldr	r3, [pc, #260]	; (8003f08 <xTaskIncrementTick+0x154>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a3f      	ldr	r2, [pc, #252]	; (8003f04 <xTaskIncrementTick+0x150>)
 8003e08:	6013      	str	r3, [r2, #0]
 8003e0a:	4a3f      	ldr	r2, [pc, #252]	; (8003f08 <xTaskIncrementTick+0x154>)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6013      	str	r3, [r2, #0]
 8003e10:	4b3e      	ldr	r3, [pc, #248]	; (8003f0c <xTaskIncrementTick+0x158>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	3301      	adds	r3, #1
 8003e16:	4a3d      	ldr	r2, [pc, #244]	; (8003f0c <xTaskIncrementTick+0x158>)
 8003e18:	6013      	str	r3, [r2, #0]
 8003e1a:	f000 fad1 	bl	80043c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003e1e:	4b3c      	ldr	r3, [pc, #240]	; (8003f10 <xTaskIncrementTick+0x15c>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	693a      	ldr	r2, [r7, #16]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d349      	bcc.n	8003ebc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e28:	4b36      	ldr	r3, [pc, #216]	; (8003f04 <xTaskIncrementTick+0x150>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d104      	bne.n	8003e3c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e32:	4b37      	ldr	r3, [pc, #220]	; (8003f10 <xTaskIncrementTick+0x15c>)
 8003e34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003e38:	601a      	str	r2, [r3, #0]
					break;
 8003e3a:	e03f      	b.n	8003ebc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e3c:	4b31      	ldr	r3, [pc, #196]	; (8003f04 <xTaskIncrementTick+0x150>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003e4c:	693a      	ldr	r2, [r7, #16]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d203      	bcs.n	8003e5c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003e54:	4a2e      	ldr	r2, [pc, #184]	; (8003f10 <xTaskIncrementTick+0x15c>)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003e5a:	e02f      	b.n	8003ebc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	3304      	adds	r3, #4
 8003e60:	4618      	mov	r0, r3
 8003e62:	f7fe ff87 	bl	8002d74 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d004      	beq.n	8003e78 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	3318      	adds	r3, #24
 8003e72:	4618      	mov	r0, r3
 8003e74:	f7fe ff7e 	bl	8002d74 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e7c:	4b25      	ldr	r3, [pc, #148]	; (8003f14 <xTaskIncrementTick+0x160>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d903      	bls.n	8003e8c <xTaskIncrementTick+0xd8>
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e88:	4a22      	ldr	r2, [pc, #136]	; (8003f14 <xTaskIncrementTick+0x160>)
 8003e8a:	6013      	str	r3, [r2, #0]
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e90:	4613      	mov	r3, r2
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	4413      	add	r3, r2
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	4a1f      	ldr	r2, [pc, #124]	; (8003f18 <xTaskIncrementTick+0x164>)
 8003e9a:	441a      	add	r2, r3
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	3304      	adds	r3, #4
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	4610      	mov	r0, r2
 8003ea4:	f7fe ff09 	bl	8002cba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eac:	4b1b      	ldr	r3, [pc, #108]	; (8003f1c <xTaskIncrementTick+0x168>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d3b8      	bcc.n	8003e28 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003eba:	e7b5      	b.n	8003e28 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003ebc:	4b17      	ldr	r3, [pc, #92]	; (8003f1c <xTaskIncrementTick+0x168>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ec2:	4915      	ldr	r1, [pc, #84]	; (8003f18 <xTaskIncrementTick+0x164>)
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	4413      	add	r3, r2
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	440b      	add	r3, r1
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d901      	bls.n	8003ed8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003ed8:	4b11      	ldr	r3, [pc, #68]	; (8003f20 <xTaskIncrementTick+0x16c>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d007      	beq.n	8003ef0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	617b      	str	r3, [r7, #20]
 8003ee4:	e004      	b.n	8003ef0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003ee6:	4b0f      	ldr	r3, [pc, #60]	; (8003f24 <xTaskIncrementTick+0x170>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	3301      	adds	r3, #1
 8003eec:	4a0d      	ldr	r2, [pc, #52]	; (8003f24 <xTaskIncrementTick+0x170>)
 8003eee:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003ef0:	697b      	ldr	r3, [r7, #20]
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3718      	adds	r7, #24
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	20000f50 	.word	0x20000f50
 8003f00:	20000f2c 	.word	0x20000f2c
 8003f04:	20000ee0 	.word	0x20000ee0
 8003f08:	20000ee4 	.word	0x20000ee4
 8003f0c:	20000f40 	.word	0x20000f40
 8003f10:	20000f48 	.word	0x20000f48
 8003f14:	20000f30 	.word	0x20000f30
 8003f18:	20000a58 	.word	0x20000a58
 8003f1c:	20000a54 	.word	0x20000a54
 8003f20:	20000f3c 	.word	0x20000f3c
 8003f24:	20000f38 	.word	0x20000f38

08003f28 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b085      	sub	sp, #20
 8003f2c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003f2e:	4b28      	ldr	r3, [pc, #160]	; (8003fd0 <vTaskSwitchContext+0xa8>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d003      	beq.n	8003f3e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003f36:	4b27      	ldr	r3, [pc, #156]	; (8003fd4 <vTaskSwitchContext+0xac>)
 8003f38:	2201      	movs	r2, #1
 8003f3a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003f3c:	e041      	b.n	8003fc2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003f3e:	4b25      	ldr	r3, [pc, #148]	; (8003fd4 <vTaskSwitchContext+0xac>)
 8003f40:	2200      	movs	r2, #0
 8003f42:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f44:	4b24      	ldr	r3, [pc, #144]	; (8003fd8 <vTaskSwitchContext+0xb0>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	60fb      	str	r3, [r7, #12]
 8003f4a:	e010      	b.n	8003f6e <vTaskSwitchContext+0x46>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d10a      	bne.n	8003f68 <vTaskSwitchContext+0x40>
	__asm volatile
 8003f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f56:	f383 8811 	msr	BASEPRI, r3
 8003f5a:	f3bf 8f6f 	isb	sy
 8003f5e:	f3bf 8f4f 	dsb	sy
 8003f62:	607b      	str	r3, [r7, #4]
}
 8003f64:	bf00      	nop
 8003f66:	e7fe      	b.n	8003f66 <vTaskSwitchContext+0x3e>
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	60fb      	str	r3, [r7, #12]
 8003f6e:	491b      	ldr	r1, [pc, #108]	; (8003fdc <vTaskSwitchContext+0xb4>)
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	4613      	mov	r3, r2
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	4413      	add	r3, r2
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	440b      	add	r3, r1
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d0e4      	beq.n	8003f4c <vTaskSwitchContext+0x24>
 8003f82:	68fa      	ldr	r2, [r7, #12]
 8003f84:	4613      	mov	r3, r2
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	4413      	add	r3, r2
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	4a13      	ldr	r2, [pc, #76]	; (8003fdc <vTaskSwitchContext+0xb4>)
 8003f8e:	4413      	add	r3, r2
 8003f90:	60bb      	str	r3, [r7, #8]
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	685a      	ldr	r2, [r3, #4]
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	605a      	str	r2, [r3, #4]
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	685a      	ldr	r2, [r3, #4]
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	3308      	adds	r3, #8
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d104      	bne.n	8003fb2 <vTaskSwitchContext+0x8a>
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	685a      	ldr	r2, [r3, #4]
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	605a      	str	r2, [r3, #4]
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	4a09      	ldr	r2, [pc, #36]	; (8003fe0 <vTaskSwitchContext+0xb8>)
 8003fba:	6013      	str	r3, [r2, #0]
 8003fbc:	4a06      	ldr	r2, [pc, #24]	; (8003fd8 <vTaskSwitchContext+0xb0>)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6013      	str	r3, [r2, #0]
}
 8003fc2:	bf00      	nop
 8003fc4:	3714      	adds	r7, #20
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	20000f50 	.word	0x20000f50
 8003fd4:	20000f3c 	.word	0x20000f3c
 8003fd8:	20000f30 	.word	0x20000f30
 8003fdc:	20000a58 	.word	0x20000a58
 8003fe0:	20000a54 	.word	0x20000a54

08003fe4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d10a      	bne.n	800400a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff8:	f383 8811 	msr	BASEPRI, r3
 8003ffc:	f3bf 8f6f 	isb	sy
 8004000:	f3bf 8f4f 	dsb	sy
 8004004:	60fb      	str	r3, [r7, #12]
}
 8004006:	bf00      	nop
 8004008:	e7fe      	b.n	8004008 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800400a:	4b07      	ldr	r3, [pc, #28]	; (8004028 <vTaskPlaceOnEventList+0x44>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	3318      	adds	r3, #24
 8004010:	4619      	mov	r1, r3
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f7fe fe75 	bl	8002d02 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004018:	2101      	movs	r1, #1
 800401a:	6838      	ldr	r0, [r7, #0]
 800401c:	f000 fbb2 	bl	8004784 <prvAddCurrentTaskToDelayedList>
}
 8004020:	bf00      	nop
 8004022:	3710      	adds	r7, #16
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}
 8004028:	20000a54 	.word	0x20000a54

0800402c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800402c:	b580      	push	{r7, lr}
 800402e:	b086      	sub	sp, #24
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d10a      	bne.n	8004054 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800403e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004042:	f383 8811 	msr	BASEPRI, r3
 8004046:	f3bf 8f6f 	isb	sy
 800404a:	f3bf 8f4f 	dsb	sy
 800404e:	617b      	str	r3, [r7, #20]
}
 8004050:	bf00      	nop
 8004052:	e7fe      	b.n	8004052 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004054:	4b0a      	ldr	r3, [pc, #40]	; (8004080 <vTaskPlaceOnEventListRestricted+0x54>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	3318      	adds	r3, #24
 800405a:	4619      	mov	r1, r3
 800405c:	68f8      	ldr	r0, [r7, #12]
 800405e:	f7fe fe2c 	bl	8002cba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d002      	beq.n	800406e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004068:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800406c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800406e:	6879      	ldr	r1, [r7, #4]
 8004070:	68b8      	ldr	r0, [r7, #8]
 8004072:	f000 fb87 	bl	8004784 <prvAddCurrentTaskToDelayedList>
	}
 8004076:	bf00      	nop
 8004078:	3718      	adds	r7, #24
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	20000a54 	.word	0x20000a54

08004084 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b086      	sub	sp, #24
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d10a      	bne.n	80040b0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800409a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800409e:	f383 8811 	msr	BASEPRI, r3
 80040a2:	f3bf 8f6f 	isb	sy
 80040a6:	f3bf 8f4f 	dsb	sy
 80040aa:	60fb      	str	r3, [r7, #12]
}
 80040ac:	bf00      	nop
 80040ae:	e7fe      	b.n	80040ae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	3318      	adds	r3, #24
 80040b4:	4618      	mov	r0, r3
 80040b6:	f7fe fe5d 	bl	8002d74 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040ba:	4b1e      	ldr	r3, [pc, #120]	; (8004134 <xTaskRemoveFromEventList+0xb0>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d11d      	bne.n	80040fe <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	3304      	adds	r3, #4
 80040c6:	4618      	mov	r0, r3
 80040c8:	f7fe fe54 	bl	8002d74 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040d0:	4b19      	ldr	r3, [pc, #100]	; (8004138 <xTaskRemoveFromEventList+0xb4>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d903      	bls.n	80040e0 <xTaskRemoveFromEventList+0x5c>
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040dc:	4a16      	ldr	r2, [pc, #88]	; (8004138 <xTaskRemoveFromEventList+0xb4>)
 80040de:	6013      	str	r3, [r2, #0]
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040e4:	4613      	mov	r3, r2
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	4413      	add	r3, r2
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	4a13      	ldr	r2, [pc, #76]	; (800413c <xTaskRemoveFromEventList+0xb8>)
 80040ee:	441a      	add	r2, r3
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	3304      	adds	r3, #4
 80040f4:	4619      	mov	r1, r3
 80040f6:	4610      	mov	r0, r2
 80040f8:	f7fe fddf 	bl	8002cba <vListInsertEnd>
 80040fc:	e005      	b.n	800410a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	3318      	adds	r3, #24
 8004102:	4619      	mov	r1, r3
 8004104:	480e      	ldr	r0, [pc, #56]	; (8004140 <xTaskRemoveFromEventList+0xbc>)
 8004106:	f7fe fdd8 	bl	8002cba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800410e:	4b0d      	ldr	r3, [pc, #52]	; (8004144 <xTaskRemoveFromEventList+0xc0>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004114:	429a      	cmp	r2, r3
 8004116:	d905      	bls.n	8004124 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004118:	2301      	movs	r3, #1
 800411a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800411c:	4b0a      	ldr	r3, [pc, #40]	; (8004148 <xTaskRemoveFromEventList+0xc4>)
 800411e:	2201      	movs	r2, #1
 8004120:	601a      	str	r2, [r3, #0]
 8004122:	e001      	b.n	8004128 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004124:	2300      	movs	r3, #0
 8004126:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004128:	697b      	ldr	r3, [r7, #20]
}
 800412a:	4618      	mov	r0, r3
 800412c:	3718      	adds	r7, #24
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	20000f50 	.word	0x20000f50
 8004138:	20000f30 	.word	0x20000f30
 800413c:	20000a58 	.word	0x20000a58
 8004140:	20000ee8 	.word	0x20000ee8
 8004144:	20000a54 	.word	0x20000a54
 8004148:	20000f3c 	.word	0x20000f3c

0800414c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004154:	4b06      	ldr	r3, [pc, #24]	; (8004170 <vTaskInternalSetTimeOutState+0x24>)
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800415c:	4b05      	ldr	r3, [pc, #20]	; (8004174 <vTaskInternalSetTimeOutState+0x28>)
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	605a      	str	r2, [r3, #4]
}
 8004164:	bf00      	nop
 8004166:	370c      	adds	r7, #12
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr
 8004170:	20000f40 	.word	0x20000f40
 8004174:	20000f2c 	.word	0x20000f2c

08004178 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b088      	sub	sp, #32
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d10a      	bne.n	800419e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800418c:	f383 8811 	msr	BASEPRI, r3
 8004190:	f3bf 8f6f 	isb	sy
 8004194:	f3bf 8f4f 	dsb	sy
 8004198:	613b      	str	r3, [r7, #16]
}
 800419a:	bf00      	nop
 800419c:	e7fe      	b.n	800419c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d10a      	bne.n	80041ba <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80041a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a8:	f383 8811 	msr	BASEPRI, r3
 80041ac:	f3bf 8f6f 	isb	sy
 80041b0:	f3bf 8f4f 	dsb	sy
 80041b4:	60fb      	str	r3, [r7, #12]
}
 80041b6:	bf00      	nop
 80041b8:	e7fe      	b.n	80041b8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80041ba:	f000 ffb3 	bl	8005124 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80041be:	4b1d      	ldr	r3, [pc, #116]	; (8004234 <xTaskCheckForTimeOut+0xbc>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	69ba      	ldr	r2, [r7, #24]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041d6:	d102      	bne.n	80041de <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80041d8:	2300      	movs	r3, #0
 80041da:	61fb      	str	r3, [r7, #28]
 80041dc:	e023      	b.n	8004226 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	4b15      	ldr	r3, [pc, #84]	; (8004238 <xTaskCheckForTimeOut+0xc0>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d007      	beq.n	80041fa <xTaskCheckForTimeOut+0x82>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	69ba      	ldr	r2, [r7, #24]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d302      	bcc.n	80041fa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80041f4:	2301      	movs	r3, #1
 80041f6:	61fb      	str	r3, [r7, #28]
 80041f8:	e015      	b.n	8004226 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	697a      	ldr	r2, [r7, #20]
 8004200:	429a      	cmp	r2, r3
 8004202:	d20b      	bcs.n	800421c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	1ad2      	subs	r2, r2, r3
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f7ff ff9b 	bl	800414c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004216:	2300      	movs	r3, #0
 8004218:	61fb      	str	r3, [r7, #28]
 800421a:	e004      	b.n	8004226 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	2200      	movs	r2, #0
 8004220:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004222:	2301      	movs	r3, #1
 8004224:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004226:	f000 ffad 	bl	8005184 <vPortExitCritical>

	return xReturn;
 800422a:	69fb      	ldr	r3, [r7, #28]
}
 800422c:	4618      	mov	r0, r3
 800422e:	3720      	adds	r7, #32
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}
 8004234:	20000f2c 	.word	0x20000f2c
 8004238:	20000f40 	.word	0x20000f40

0800423c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800423c:	b480      	push	{r7}
 800423e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004240:	4b03      	ldr	r3, [pc, #12]	; (8004250 <vTaskMissedYield+0x14>)
 8004242:	2201      	movs	r2, #1
 8004244:	601a      	str	r2, [r3, #0]
}
 8004246:	bf00      	nop
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr
 8004250:	20000f3c 	.word	0x20000f3c

08004254 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800425c:	f000 f852 	bl	8004304 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004260:	4b06      	ldr	r3, [pc, #24]	; (800427c <prvIdleTask+0x28>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2b01      	cmp	r3, #1
 8004266:	d9f9      	bls.n	800425c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004268:	4b05      	ldr	r3, [pc, #20]	; (8004280 <prvIdleTask+0x2c>)
 800426a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800426e:	601a      	str	r2, [r3, #0]
 8004270:	f3bf 8f4f 	dsb	sy
 8004274:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004278:	e7f0      	b.n	800425c <prvIdleTask+0x8>
 800427a:	bf00      	nop
 800427c:	20000a58 	.word	0x20000a58
 8004280:	e000ed04 	.word	0xe000ed04

08004284 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b082      	sub	sp, #8
 8004288:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800428a:	2300      	movs	r3, #0
 800428c:	607b      	str	r3, [r7, #4]
 800428e:	e00c      	b.n	80042aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	4613      	mov	r3, r2
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	4413      	add	r3, r2
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	4a12      	ldr	r2, [pc, #72]	; (80042e4 <prvInitialiseTaskLists+0x60>)
 800429c:	4413      	add	r3, r2
 800429e:	4618      	mov	r0, r3
 80042a0:	f7fe fcde 	bl	8002c60 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	3301      	adds	r3, #1
 80042a8:	607b      	str	r3, [r7, #4]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2b37      	cmp	r3, #55	; 0x37
 80042ae:	d9ef      	bls.n	8004290 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80042b0:	480d      	ldr	r0, [pc, #52]	; (80042e8 <prvInitialiseTaskLists+0x64>)
 80042b2:	f7fe fcd5 	bl	8002c60 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80042b6:	480d      	ldr	r0, [pc, #52]	; (80042ec <prvInitialiseTaskLists+0x68>)
 80042b8:	f7fe fcd2 	bl	8002c60 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80042bc:	480c      	ldr	r0, [pc, #48]	; (80042f0 <prvInitialiseTaskLists+0x6c>)
 80042be:	f7fe fccf 	bl	8002c60 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80042c2:	480c      	ldr	r0, [pc, #48]	; (80042f4 <prvInitialiseTaskLists+0x70>)
 80042c4:	f7fe fccc 	bl	8002c60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80042c8:	480b      	ldr	r0, [pc, #44]	; (80042f8 <prvInitialiseTaskLists+0x74>)
 80042ca:	f7fe fcc9 	bl	8002c60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80042ce:	4b0b      	ldr	r3, [pc, #44]	; (80042fc <prvInitialiseTaskLists+0x78>)
 80042d0:	4a05      	ldr	r2, [pc, #20]	; (80042e8 <prvInitialiseTaskLists+0x64>)
 80042d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80042d4:	4b0a      	ldr	r3, [pc, #40]	; (8004300 <prvInitialiseTaskLists+0x7c>)
 80042d6:	4a05      	ldr	r2, [pc, #20]	; (80042ec <prvInitialiseTaskLists+0x68>)
 80042d8:	601a      	str	r2, [r3, #0]
}
 80042da:	bf00      	nop
 80042dc:	3708      	adds	r7, #8
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	20000a58 	.word	0x20000a58
 80042e8:	20000eb8 	.word	0x20000eb8
 80042ec:	20000ecc 	.word	0x20000ecc
 80042f0:	20000ee8 	.word	0x20000ee8
 80042f4:	20000efc 	.word	0x20000efc
 80042f8:	20000f14 	.word	0x20000f14
 80042fc:	20000ee0 	.word	0x20000ee0
 8004300:	20000ee4 	.word	0x20000ee4

08004304 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800430a:	e019      	b.n	8004340 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800430c:	f000 ff0a 	bl	8005124 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004310:	4b10      	ldr	r3, [pc, #64]	; (8004354 <prvCheckTasksWaitingTermination+0x50>)
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	3304      	adds	r3, #4
 800431c:	4618      	mov	r0, r3
 800431e:	f7fe fd29 	bl	8002d74 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004322:	4b0d      	ldr	r3, [pc, #52]	; (8004358 <prvCheckTasksWaitingTermination+0x54>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	3b01      	subs	r3, #1
 8004328:	4a0b      	ldr	r2, [pc, #44]	; (8004358 <prvCheckTasksWaitingTermination+0x54>)
 800432a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800432c:	4b0b      	ldr	r3, [pc, #44]	; (800435c <prvCheckTasksWaitingTermination+0x58>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	3b01      	subs	r3, #1
 8004332:	4a0a      	ldr	r2, [pc, #40]	; (800435c <prvCheckTasksWaitingTermination+0x58>)
 8004334:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004336:	f000 ff25 	bl	8005184 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f000 f810 	bl	8004360 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004340:	4b06      	ldr	r3, [pc, #24]	; (800435c <prvCheckTasksWaitingTermination+0x58>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d1e1      	bne.n	800430c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004348:	bf00      	nop
 800434a:	bf00      	nop
 800434c:	3708      	adds	r7, #8
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	20000efc 	.word	0x20000efc
 8004358:	20000f28 	.word	0x20000f28
 800435c:	20000f10 	.word	0x20000f10

08004360 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800436e:	2b00      	cmp	r3, #0
 8004370:	d108      	bne.n	8004384 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004376:	4618      	mov	r0, r3
 8004378:	f001 f8c2 	bl	8005500 <vPortFree>
				vPortFree( pxTCB );
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f001 f8bf 	bl	8005500 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004382:	e018      	b.n	80043b6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800438a:	2b01      	cmp	r3, #1
 800438c:	d103      	bne.n	8004396 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f001 f8b6 	bl	8005500 <vPortFree>
	}
 8004394:	e00f      	b.n	80043b6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800439c:	2b02      	cmp	r3, #2
 800439e:	d00a      	beq.n	80043b6 <prvDeleteTCB+0x56>
	__asm volatile
 80043a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a4:	f383 8811 	msr	BASEPRI, r3
 80043a8:	f3bf 8f6f 	isb	sy
 80043ac:	f3bf 8f4f 	dsb	sy
 80043b0:	60fb      	str	r3, [r7, #12]
}
 80043b2:	bf00      	nop
 80043b4:	e7fe      	b.n	80043b4 <prvDeleteTCB+0x54>
	}
 80043b6:	bf00      	nop
 80043b8:	3710      	adds	r7, #16
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
	...

080043c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80043c6:	4b0c      	ldr	r3, [pc, #48]	; (80043f8 <prvResetNextTaskUnblockTime+0x38>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d104      	bne.n	80043da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80043d0:	4b0a      	ldr	r3, [pc, #40]	; (80043fc <prvResetNextTaskUnblockTime+0x3c>)
 80043d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80043d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80043d8:	e008      	b.n	80043ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043da:	4b07      	ldr	r3, [pc, #28]	; (80043f8 <prvResetNextTaskUnblockTime+0x38>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	4a04      	ldr	r2, [pc, #16]	; (80043fc <prvResetNextTaskUnblockTime+0x3c>)
 80043ea:	6013      	str	r3, [r2, #0]
}
 80043ec:	bf00      	nop
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr
 80043f8:	20000ee0 	.word	0x20000ee0
 80043fc:	20000f48 	.word	0x20000f48

08004400 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004406:	4b0b      	ldr	r3, [pc, #44]	; (8004434 <xTaskGetSchedulerState+0x34>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d102      	bne.n	8004414 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800440e:	2301      	movs	r3, #1
 8004410:	607b      	str	r3, [r7, #4]
 8004412:	e008      	b.n	8004426 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004414:	4b08      	ldr	r3, [pc, #32]	; (8004438 <xTaskGetSchedulerState+0x38>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d102      	bne.n	8004422 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800441c:	2302      	movs	r3, #2
 800441e:	607b      	str	r3, [r7, #4]
 8004420:	e001      	b.n	8004426 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004422:	2300      	movs	r3, #0
 8004424:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004426:	687b      	ldr	r3, [r7, #4]
	}
 8004428:	4618      	mov	r0, r3
 800442a:	370c      	adds	r7, #12
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr
 8004434:	20000f34 	.word	0x20000f34
 8004438:	20000f50 	.word	0x20000f50

0800443c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800443c:	b580      	push	{r7, lr}
 800443e:	b086      	sub	sp, #24
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004448:	2300      	movs	r3, #0
 800444a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d056      	beq.n	8004500 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004452:	4b2e      	ldr	r3, [pc, #184]	; (800450c <xTaskPriorityDisinherit+0xd0>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	429a      	cmp	r2, r3
 800445a:	d00a      	beq.n	8004472 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800445c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004460:	f383 8811 	msr	BASEPRI, r3
 8004464:	f3bf 8f6f 	isb	sy
 8004468:	f3bf 8f4f 	dsb	sy
 800446c:	60fb      	str	r3, [r7, #12]
}
 800446e:	bf00      	nop
 8004470:	e7fe      	b.n	8004470 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004476:	2b00      	cmp	r3, #0
 8004478:	d10a      	bne.n	8004490 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800447a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800447e:	f383 8811 	msr	BASEPRI, r3
 8004482:	f3bf 8f6f 	isb	sy
 8004486:	f3bf 8f4f 	dsb	sy
 800448a:	60bb      	str	r3, [r7, #8]
}
 800448c:	bf00      	nop
 800448e:	e7fe      	b.n	800448e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004494:	1e5a      	subs	r2, r3, #1
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d02c      	beq.n	8004500 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d128      	bne.n	8004500 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	3304      	adds	r3, #4
 80044b2:	4618      	mov	r0, r3
 80044b4:	f7fe fc5e 	bl	8002d74 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044d0:	4b0f      	ldr	r3, [pc, #60]	; (8004510 <xTaskPriorityDisinherit+0xd4>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d903      	bls.n	80044e0 <xTaskPriorityDisinherit+0xa4>
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044dc:	4a0c      	ldr	r2, [pc, #48]	; (8004510 <xTaskPriorityDisinherit+0xd4>)
 80044de:	6013      	str	r3, [r2, #0]
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044e4:	4613      	mov	r3, r2
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	4413      	add	r3, r2
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	4a09      	ldr	r2, [pc, #36]	; (8004514 <xTaskPriorityDisinherit+0xd8>)
 80044ee:	441a      	add	r2, r3
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	3304      	adds	r3, #4
 80044f4:	4619      	mov	r1, r3
 80044f6:	4610      	mov	r0, r2
 80044f8:	f7fe fbdf 	bl	8002cba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80044fc:	2301      	movs	r3, #1
 80044fe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004500:	697b      	ldr	r3, [r7, #20]
	}
 8004502:	4618      	mov	r0, r3
 8004504:	3718      	adds	r7, #24
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	20000a54 	.word	0x20000a54
 8004510:	20000f30 	.word	0x20000f30
 8004514:	20000a58 	.word	0x20000a58

08004518 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8004518:	b580      	push	{r7, lr}
 800451a:	b086      	sub	sp, #24
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	607a      	str	r2, [r7, #4]
 8004524:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8004526:	f000 fdfd 	bl	8005124 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800452a:	4b26      	ldr	r3, [pc, #152]	; (80045c4 <xTaskNotifyWait+0xac>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004532:	b2db      	uxtb	r3, r3
 8004534:	2b02      	cmp	r3, #2
 8004536:	d01a      	beq.n	800456e <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8004538:	4b22      	ldr	r3, [pc, #136]	; (80045c4 <xTaskNotifyWait+0xac>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	43d2      	mvns	r2, r2
 8004542:	400a      	ands	r2, r1
 8004544:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8004546:	4b1f      	ldr	r3, [pc, #124]	; (80045c4 <xTaskNotifyWait+0xac>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00b      	beq.n	800456e <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004556:	2101      	movs	r1, #1
 8004558:	6838      	ldr	r0, [r7, #0]
 800455a:	f000 f913 	bl	8004784 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800455e:	4b1a      	ldr	r3, [pc, #104]	; (80045c8 <xTaskNotifyWait+0xb0>)
 8004560:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004564:	601a      	str	r2, [r3, #0]
 8004566:	f3bf 8f4f 	dsb	sy
 800456a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800456e:	f000 fe09 	bl	8005184 <vPortExitCritical>

		taskENTER_CRITICAL();
 8004572:	f000 fdd7 	bl	8005124 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d004      	beq.n	8004586 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800457c:	4b11      	ldr	r3, [pc, #68]	; (80045c4 <xTaskNotifyWait+0xac>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8004586:	4b0f      	ldr	r3, [pc, #60]	; (80045c4 <xTaskNotifyWait+0xac>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800458e:	b2db      	uxtb	r3, r3
 8004590:	2b02      	cmp	r3, #2
 8004592:	d002      	beq.n	800459a <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8004594:	2300      	movs	r3, #0
 8004596:	617b      	str	r3, [r7, #20]
 8004598:	e008      	b.n	80045ac <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800459a:	4b0a      	ldr	r3, [pc, #40]	; (80045c4 <xTaskNotifyWait+0xac>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80045a0:	68ba      	ldr	r2, [r7, #8]
 80045a2:	43d2      	mvns	r2, r2
 80045a4:	400a      	ands	r2, r1
 80045a6:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 80045a8:	2301      	movs	r3, #1
 80045aa:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80045ac:	4b05      	ldr	r3, [pc, #20]	; (80045c4 <xTaskNotifyWait+0xac>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2200      	movs	r2, #0
 80045b2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 80045b6:	f000 fde5 	bl	8005184 <vPortExitCritical>

		return xReturn;
 80045ba:	697b      	ldr	r3, [r7, #20]
	}
 80045bc:	4618      	mov	r0, r3
 80045be:	3718      	adds	r7, #24
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	20000a54 	.word	0x20000a54
 80045c8:	e000ed04 	.word	0xe000ed04

080045cc <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b08e      	sub	sp, #56	; 0x38
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	60b9      	str	r1, [r7, #8]
 80045d6:	603b      	str	r3, [r7, #0]
 80045d8:	4613      	mov	r3, r2
 80045da:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80045dc:	2301      	movs	r3, #1
 80045de:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d10a      	bne.n	80045fc <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 80045e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ea:	f383 8811 	msr	BASEPRI, r3
 80045ee:	f3bf 8f6f 	isb	sy
 80045f2:	f3bf 8f4f 	dsb	sy
 80045f6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80045f8:	bf00      	nop
 80045fa:	e7fe      	b.n	80045fa <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80045fc:	f000 fe74 	bl	80052e8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8004604:	f3ef 8211 	mrs	r2, BASEPRI
 8004608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800460c:	f383 8811 	msr	BASEPRI, r3
 8004610:	f3bf 8f6f 	isb	sy
 8004614:	f3bf 8f4f 	dsb	sy
 8004618:	623a      	str	r2, [r7, #32]
 800461a:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800461c:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800461e:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d003      	beq.n	800462e <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8004626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004628:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800462e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004630:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004634:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8004638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800463a:	2202      	movs	r2, #2
 800463c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8004640:	79fb      	ldrb	r3, [r7, #7]
 8004642:	2b04      	cmp	r3, #4
 8004644:	d828      	bhi.n	8004698 <xTaskGenericNotifyFromISR+0xcc>
 8004646:	a201      	add	r2, pc, #4	; (adr r2, 800464c <xTaskGenericNotifyFromISR+0x80>)
 8004648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800464c:	080046b9 	.word	0x080046b9
 8004650:	08004661 	.word	0x08004661
 8004654:	0800466f 	.word	0x0800466f
 8004658:	0800467b 	.word	0x0800467b
 800465c:	08004683 	.word	0x08004683
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8004660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004662:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	431a      	orrs	r2, r3
 8004668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800466a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800466c:	e027      	b.n	80046be <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800466e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004672:	1c5a      	adds	r2, r3, #1
 8004674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004676:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8004678:	e021      	b.n	80046be <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800467a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800467c:	68ba      	ldr	r2, [r7, #8]
 800467e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8004680:	e01d      	b.n	80046be <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8004682:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004686:	2b02      	cmp	r3, #2
 8004688:	d003      	beq.n	8004692 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800468a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800468c:	68ba      	ldr	r2, [r7, #8]
 800468e:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8004690:	e015      	b.n	80046be <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 8004692:	2300      	movs	r3, #0
 8004694:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8004696:	e012      	b.n	80046be <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8004698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800469a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800469c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046a0:	d00c      	beq.n	80046bc <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 80046a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a6:	f383 8811 	msr	BASEPRI, r3
 80046aa:	f3bf 8f6f 	isb	sy
 80046ae:	f3bf 8f4f 	dsb	sy
 80046b2:	61bb      	str	r3, [r7, #24]
}
 80046b4:	bf00      	nop
 80046b6:	e7fe      	b.n	80046b6 <xTaskGenericNotifyFromISR+0xea>
					break;
 80046b8:	bf00      	nop
 80046ba:	e000      	b.n	80046be <xTaskGenericNotifyFromISR+0xf2>
					break;
 80046bc:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80046be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d146      	bne.n	8004754 <xTaskGenericNotifyFromISR+0x188>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80046c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00a      	beq.n	80046e4 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 80046ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d2:	f383 8811 	msr	BASEPRI, r3
 80046d6:	f3bf 8f6f 	isb	sy
 80046da:	f3bf 8f4f 	dsb	sy
 80046de:	617b      	str	r3, [r7, #20]
}
 80046e0:	bf00      	nop
 80046e2:	e7fe      	b.n	80046e2 <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046e4:	4b21      	ldr	r3, [pc, #132]	; (800476c <xTaskGenericNotifyFromISR+0x1a0>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d11d      	bne.n	8004728 <xTaskGenericNotifyFromISR+0x15c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ee:	3304      	adds	r3, #4
 80046f0:	4618      	mov	r0, r3
 80046f2:	f7fe fb3f 	bl	8002d74 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80046f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046fa:	4b1d      	ldr	r3, [pc, #116]	; (8004770 <xTaskGenericNotifyFromISR+0x1a4>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d903      	bls.n	800470a <xTaskGenericNotifyFromISR+0x13e>
 8004702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004706:	4a1a      	ldr	r2, [pc, #104]	; (8004770 <xTaskGenericNotifyFromISR+0x1a4>)
 8004708:	6013      	str	r3, [r2, #0]
 800470a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800470c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800470e:	4613      	mov	r3, r2
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	4413      	add	r3, r2
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	4a17      	ldr	r2, [pc, #92]	; (8004774 <xTaskGenericNotifyFromISR+0x1a8>)
 8004718:	441a      	add	r2, r3
 800471a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800471c:	3304      	adds	r3, #4
 800471e:	4619      	mov	r1, r3
 8004720:	4610      	mov	r0, r2
 8004722:	f7fe faca 	bl	8002cba <vListInsertEnd>
 8004726:	e005      	b.n	8004734 <xTaskGenericNotifyFromISR+0x168>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8004728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800472a:	3318      	adds	r3, #24
 800472c:	4619      	mov	r1, r3
 800472e:	4812      	ldr	r0, [pc, #72]	; (8004778 <xTaskGenericNotifyFromISR+0x1ac>)
 8004730:	f7fe fac3 	bl	8002cba <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004738:	4b10      	ldr	r3, [pc, #64]	; (800477c <xTaskGenericNotifyFromISR+0x1b0>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800473e:	429a      	cmp	r2, r3
 8004740:	d908      	bls.n	8004754 <xTaskGenericNotifyFromISR+0x188>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8004742:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004744:	2b00      	cmp	r3, #0
 8004746:	d002      	beq.n	800474e <xTaskGenericNotifyFromISR+0x182>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8004748:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800474a:	2201      	movs	r2, #1
 800474c:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800474e:	4b0c      	ldr	r3, [pc, #48]	; (8004780 <xTaskGenericNotifyFromISR+0x1b4>)
 8004750:	2201      	movs	r2, #1
 8004752:	601a      	str	r2, [r3, #0]
 8004754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004756:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	f383 8811 	msr	BASEPRI, r3
}
 800475e:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8004760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8004762:	4618      	mov	r0, r3
 8004764:	3738      	adds	r7, #56	; 0x38
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
 800476a:	bf00      	nop
 800476c:	20000f50 	.word	0x20000f50
 8004770:	20000f30 	.word	0x20000f30
 8004774:	20000a58 	.word	0x20000a58
 8004778:	20000ee8 	.word	0x20000ee8
 800477c:	20000a54 	.word	0x20000a54
 8004780:	20000f3c 	.word	0x20000f3c

08004784 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b084      	sub	sp, #16
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800478e:	4b21      	ldr	r3, [pc, #132]	; (8004814 <prvAddCurrentTaskToDelayedList+0x90>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004794:	4b20      	ldr	r3, [pc, #128]	; (8004818 <prvAddCurrentTaskToDelayedList+0x94>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	3304      	adds	r3, #4
 800479a:	4618      	mov	r0, r3
 800479c:	f7fe faea 	bl	8002d74 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047a6:	d10a      	bne.n	80047be <prvAddCurrentTaskToDelayedList+0x3a>
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d007      	beq.n	80047be <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047ae:	4b1a      	ldr	r3, [pc, #104]	; (8004818 <prvAddCurrentTaskToDelayedList+0x94>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	3304      	adds	r3, #4
 80047b4:	4619      	mov	r1, r3
 80047b6:	4819      	ldr	r0, [pc, #100]	; (800481c <prvAddCurrentTaskToDelayedList+0x98>)
 80047b8:	f7fe fa7f 	bl	8002cba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80047bc:	e026      	b.n	800480c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80047be:	68fa      	ldr	r2, [r7, #12]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	4413      	add	r3, r2
 80047c4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80047c6:	4b14      	ldr	r3, [pc, #80]	; (8004818 <prvAddCurrentTaskToDelayedList+0x94>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	68ba      	ldr	r2, [r7, #8]
 80047cc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80047ce:	68ba      	ldr	r2, [r7, #8]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d209      	bcs.n	80047ea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047d6:	4b12      	ldr	r3, [pc, #72]	; (8004820 <prvAddCurrentTaskToDelayedList+0x9c>)
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	4b0f      	ldr	r3, [pc, #60]	; (8004818 <prvAddCurrentTaskToDelayedList+0x94>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	3304      	adds	r3, #4
 80047e0:	4619      	mov	r1, r3
 80047e2:	4610      	mov	r0, r2
 80047e4:	f7fe fa8d 	bl	8002d02 <vListInsert>
}
 80047e8:	e010      	b.n	800480c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047ea:	4b0e      	ldr	r3, [pc, #56]	; (8004824 <prvAddCurrentTaskToDelayedList+0xa0>)
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	4b0a      	ldr	r3, [pc, #40]	; (8004818 <prvAddCurrentTaskToDelayedList+0x94>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	3304      	adds	r3, #4
 80047f4:	4619      	mov	r1, r3
 80047f6:	4610      	mov	r0, r2
 80047f8:	f7fe fa83 	bl	8002d02 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80047fc:	4b0a      	ldr	r3, [pc, #40]	; (8004828 <prvAddCurrentTaskToDelayedList+0xa4>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	68ba      	ldr	r2, [r7, #8]
 8004802:	429a      	cmp	r2, r3
 8004804:	d202      	bcs.n	800480c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004806:	4a08      	ldr	r2, [pc, #32]	; (8004828 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	6013      	str	r3, [r2, #0]
}
 800480c:	bf00      	nop
 800480e:	3710      	adds	r7, #16
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}
 8004814:	20000f2c 	.word	0x20000f2c
 8004818:	20000a54 	.word	0x20000a54
 800481c:	20000f14 	.word	0x20000f14
 8004820:	20000ee4 	.word	0x20000ee4
 8004824:	20000ee0 	.word	0x20000ee0
 8004828:	20000f48 	.word	0x20000f48

0800482c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b08a      	sub	sp, #40	; 0x28
 8004830:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004832:	2300      	movs	r3, #0
 8004834:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004836:	f000 fb07 	bl	8004e48 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800483a:	4b1c      	ldr	r3, [pc, #112]	; (80048ac <xTimerCreateTimerTask+0x80>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d021      	beq.n	8004886 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004842:	2300      	movs	r3, #0
 8004844:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004846:	2300      	movs	r3, #0
 8004848:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800484a:	1d3a      	adds	r2, r7, #4
 800484c:	f107 0108 	add.w	r1, r7, #8
 8004850:	f107 030c 	add.w	r3, r7, #12
 8004854:	4618      	mov	r0, r3
 8004856:	f7fe f9e9 	bl	8002c2c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800485a:	6879      	ldr	r1, [r7, #4]
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	68fa      	ldr	r2, [r7, #12]
 8004860:	9202      	str	r2, [sp, #8]
 8004862:	9301      	str	r3, [sp, #4]
 8004864:	2302      	movs	r3, #2
 8004866:	9300      	str	r3, [sp, #0]
 8004868:	2300      	movs	r3, #0
 800486a:	460a      	mov	r2, r1
 800486c:	4910      	ldr	r1, [pc, #64]	; (80048b0 <xTimerCreateTimerTask+0x84>)
 800486e:	4811      	ldr	r0, [pc, #68]	; (80048b4 <xTimerCreateTimerTask+0x88>)
 8004870:	f7fe ff96 	bl	80037a0 <xTaskCreateStatic>
 8004874:	4603      	mov	r3, r0
 8004876:	4a10      	ldr	r2, [pc, #64]	; (80048b8 <xTimerCreateTimerTask+0x8c>)
 8004878:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800487a:	4b0f      	ldr	r3, [pc, #60]	; (80048b8 <xTimerCreateTimerTask+0x8c>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d001      	beq.n	8004886 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004882:	2301      	movs	r3, #1
 8004884:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d10a      	bne.n	80048a2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800488c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004890:	f383 8811 	msr	BASEPRI, r3
 8004894:	f3bf 8f6f 	isb	sy
 8004898:	f3bf 8f4f 	dsb	sy
 800489c:	613b      	str	r3, [r7, #16]
}
 800489e:	bf00      	nop
 80048a0:	e7fe      	b.n	80048a0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80048a2:	697b      	ldr	r3, [r7, #20]
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3718      	adds	r7, #24
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	20000f84 	.word	0x20000f84
 80048b0:	0800c614 	.word	0x0800c614
 80048b4:	080049f1 	.word	0x080049f1
 80048b8:	20000f88 	.word	0x20000f88

080048bc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b08a      	sub	sp, #40	; 0x28
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	60b9      	str	r1, [r7, #8]
 80048c6:	607a      	str	r2, [r7, #4]
 80048c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80048ca:	2300      	movs	r3, #0
 80048cc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d10a      	bne.n	80048ea <xTimerGenericCommand+0x2e>
	__asm volatile
 80048d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d8:	f383 8811 	msr	BASEPRI, r3
 80048dc:	f3bf 8f6f 	isb	sy
 80048e0:	f3bf 8f4f 	dsb	sy
 80048e4:	623b      	str	r3, [r7, #32]
}
 80048e6:	bf00      	nop
 80048e8:	e7fe      	b.n	80048e8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80048ea:	4b1a      	ldr	r3, [pc, #104]	; (8004954 <xTimerGenericCommand+0x98>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d02a      	beq.n	8004948 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	2b05      	cmp	r3, #5
 8004902:	dc18      	bgt.n	8004936 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004904:	f7ff fd7c 	bl	8004400 <xTaskGetSchedulerState>
 8004908:	4603      	mov	r3, r0
 800490a:	2b02      	cmp	r3, #2
 800490c:	d109      	bne.n	8004922 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800490e:	4b11      	ldr	r3, [pc, #68]	; (8004954 <xTimerGenericCommand+0x98>)
 8004910:	6818      	ldr	r0, [r3, #0]
 8004912:	f107 0110 	add.w	r1, r7, #16
 8004916:	2300      	movs	r3, #0
 8004918:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800491a:	f7fe fb59 	bl	8002fd0 <xQueueGenericSend>
 800491e:	6278      	str	r0, [r7, #36]	; 0x24
 8004920:	e012      	b.n	8004948 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004922:	4b0c      	ldr	r3, [pc, #48]	; (8004954 <xTimerGenericCommand+0x98>)
 8004924:	6818      	ldr	r0, [r3, #0]
 8004926:	f107 0110 	add.w	r1, r7, #16
 800492a:	2300      	movs	r3, #0
 800492c:	2200      	movs	r2, #0
 800492e:	f7fe fb4f 	bl	8002fd0 <xQueueGenericSend>
 8004932:	6278      	str	r0, [r7, #36]	; 0x24
 8004934:	e008      	b.n	8004948 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004936:	4b07      	ldr	r3, [pc, #28]	; (8004954 <xTimerGenericCommand+0x98>)
 8004938:	6818      	ldr	r0, [r3, #0]
 800493a:	f107 0110 	add.w	r1, r7, #16
 800493e:	2300      	movs	r3, #0
 8004940:	683a      	ldr	r2, [r7, #0]
 8004942:	f7fe fc43 	bl	80031cc <xQueueGenericSendFromISR>
 8004946:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800494a:	4618      	mov	r0, r3
 800494c:	3728      	adds	r7, #40	; 0x28
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	20000f84 	.word	0x20000f84

08004958 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b088      	sub	sp, #32
 800495c:	af02      	add	r7, sp, #8
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004962:	4b22      	ldr	r3, [pc, #136]	; (80049ec <prvProcessExpiredTimer+0x94>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	3304      	adds	r3, #4
 8004970:	4618      	mov	r0, r3
 8004972:	f7fe f9ff 	bl	8002d74 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800497c:	f003 0304 	and.w	r3, r3, #4
 8004980:	2b00      	cmp	r3, #0
 8004982:	d022      	beq.n	80049ca <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	699a      	ldr	r2, [r3, #24]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	18d1      	adds	r1, r2, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	683a      	ldr	r2, [r7, #0]
 8004990:	6978      	ldr	r0, [r7, #20]
 8004992:	f000 f8d1 	bl	8004b38 <prvInsertTimerInActiveList>
 8004996:	4603      	mov	r3, r0
 8004998:	2b00      	cmp	r3, #0
 800499a:	d01f      	beq.n	80049dc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800499c:	2300      	movs	r3, #0
 800499e:	9300      	str	r3, [sp, #0]
 80049a0:	2300      	movs	r3, #0
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	2100      	movs	r1, #0
 80049a6:	6978      	ldr	r0, [r7, #20]
 80049a8:	f7ff ff88 	bl	80048bc <xTimerGenericCommand>
 80049ac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d113      	bne.n	80049dc <prvProcessExpiredTimer+0x84>
	__asm volatile
 80049b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b8:	f383 8811 	msr	BASEPRI, r3
 80049bc:	f3bf 8f6f 	isb	sy
 80049c0:	f3bf 8f4f 	dsb	sy
 80049c4:	60fb      	str	r3, [r7, #12]
}
 80049c6:	bf00      	nop
 80049c8:	e7fe      	b.n	80049c8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049d0:	f023 0301 	bic.w	r3, r3, #1
 80049d4:	b2da      	uxtb	r2, r3
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	6a1b      	ldr	r3, [r3, #32]
 80049e0:	6978      	ldr	r0, [r7, #20]
 80049e2:	4798      	blx	r3
}
 80049e4:	bf00      	nop
 80049e6:	3718      	adds	r7, #24
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	20000f7c 	.word	0x20000f7c

080049f0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80049f8:	f107 0308 	add.w	r3, r7, #8
 80049fc:	4618      	mov	r0, r3
 80049fe:	f000 f857 	bl	8004ab0 <prvGetNextExpireTime>
 8004a02:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	4619      	mov	r1, r3
 8004a08:	68f8      	ldr	r0, [r7, #12]
 8004a0a:	f000 f803 	bl	8004a14 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004a0e:	f000 f8d5 	bl	8004bbc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004a12:	e7f1      	b.n	80049f8 <prvTimerTask+0x8>

08004a14 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b084      	sub	sp, #16
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004a1e:	f7ff f8fb 	bl	8003c18 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004a22:	f107 0308 	add.w	r3, r7, #8
 8004a26:	4618      	mov	r0, r3
 8004a28:	f000 f866 	bl	8004af8 <prvSampleTimeNow>
 8004a2c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d130      	bne.n	8004a96 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d10a      	bne.n	8004a50 <prvProcessTimerOrBlockTask+0x3c>
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d806      	bhi.n	8004a50 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004a42:	f7ff f8f7 	bl	8003c34 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004a46:	68f9      	ldr	r1, [r7, #12]
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f7ff ff85 	bl	8004958 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004a4e:	e024      	b.n	8004a9a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d008      	beq.n	8004a68 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004a56:	4b13      	ldr	r3, [pc, #76]	; (8004aa4 <prvProcessTimerOrBlockTask+0x90>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d101      	bne.n	8004a64 <prvProcessTimerOrBlockTask+0x50>
 8004a60:	2301      	movs	r3, #1
 8004a62:	e000      	b.n	8004a66 <prvProcessTimerOrBlockTask+0x52>
 8004a64:	2300      	movs	r3, #0
 8004a66:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004a68:	4b0f      	ldr	r3, [pc, #60]	; (8004aa8 <prvProcessTimerOrBlockTask+0x94>)
 8004a6a:	6818      	ldr	r0, [r3, #0]
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	683a      	ldr	r2, [r7, #0]
 8004a74:	4619      	mov	r1, r3
 8004a76:	f7fe fe5f 	bl	8003738 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004a7a:	f7ff f8db 	bl	8003c34 <xTaskResumeAll>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d10a      	bne.n	8004a9a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004a84:	4b09      	ldr	r3, [pc, #36]	; (8004aac <prvProcessTimerOrBlockTask+0x98>)
 8004a86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a8a:	601a      	str	r2, [r3, #0]
 8004a8c:	f3bf 8f4f 	dsb	sy
 8004a90:	f3bf 8f6f 	isb	sy
}
 8004a94:	e001      	b.n	8004a9a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004a96:	f7ff f8cd 	bl	8003c34 <xTaskResumeAll>
}
 8004a9a:	bf00      	nop
 8004a9c:	3710      	adds	r7, #16
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	20000f80 	.word	0x20000f80
 8004aa8:	20000f84 	.word	0x20000f84
 8004aac:	e000ed04 	.word	0xe000ed04

08004ab0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b085      	sub	sp, #20
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004ab8:	4b0e      	ldr	r3, [pc, #56]	; (8004af4 <prvGetNextExpireTime+0x44>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d101      	bne.n	8004ac6 <prvGetNextExpireTime+0x16>
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	e000      	b.n	8004ac8 <prvGetNextExpireTime+0x18>
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d105      	bne.n	8004ae0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ad4:	4b07      	ldr	r3, [pc, #28]	; (8004af4 <prvGetNextExpireTime+0x44>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	60fb      	str	r3, [r7, #12]
 8004ade:	e001      	b.n	8004ae4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3714      	adds	r7, #20
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr
 8004af2:	bf00      	nop
 8004af4:	20000f7c 	.word	0x20000f7c

08004af8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b084      	sub	sp, #16
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004b00:	f7ff f936 	bl	8003d70 <xTaskGetTickCount>
 8004b04:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004b06:	4b0b      	ldr	r3, [pc, #44]	; (8004b34 <prvSampleTimeNow+0x3c>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68fa      	ldr	r2, [r7, #12]
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d205      	bcs.n	8004b1c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004b10:	f000 f936 	bl	8004d80 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	601a      	str	r2, [r3, #0]
 8004b1a:	e002      	b.n	8004b22 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004b22:	4a04      	ldr	r2, [pc, #16]	; (8004b34 <prvSampleTimeNow+0x3c>)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004b28:	68fb      	ldr	r3, [r7, #12]
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3710      	adds	r7, #16
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	20000f8c 	.word	0x20000f8c

08004b38 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b086      	sub	sp, #24
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	607a      	str	r2, [r7, #4]
 8004b44:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004b46:	2300      	movs	r3, #0
 8004b48:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	68ba      	ldr	r2, [r7, #8]
 8004b4e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	68fa      	ldr	r2, [r7, #12]
 8004b54:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004b56:	68ba      	ldr	r2, [r7, #8]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d812      	bhi.n	8004b84 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	1ad2      	subs	r2, r2, r3
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	699b      	ldr	r3, [r3, #24]
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d302      	bcc.n	8004b72 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	617b      	str	r3, [r7, #20]
 8004b70:	e01b      	b.n	8004baa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004b72:	4b10      	ldr	r3, [pc, #64]	; (8004bb4 <prvInsertTimerInActiveList+0x7c>)
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	3304      	adds	r3, #4
 8004b7a:	4619      	mov	r1, r3
 8004b7c:	4610      	mov	r0, r2
 8004b7e:	f7fe f8c0 	bl	8002d02 <vListInsert>
 8004b82:	e012      	b.n	8004baa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d206      	bcs.n	8004b9a <prvInsertTimerInActiveList+0x62>
 8004b8c:	68ba      	ldr	r2, [r7, #8]
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d302      	bcc.n	8004b9a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004b94:	2301      	movs	r3, #1
 8004b96:	617b      	str	r3, [r7, #20]
 8004b98:	e007      	b.n	8004baa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004b9a:	4b07      	ldr	r3, [pc, #28]	; (8004bb8 <prvInsertTimerInActiveList+0x80>)
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	3304      	adds	r3, #4
 8004ba2:	4619      	mov	r1, r3
 8004ba4:	4610      	mov	r0, r2
 8004ba6:	f7fe f8ac 	bl	8002d02 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004baa:	697b      	ldr	r3, [r7, #20]
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3718      	adds	r7, #24
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	20000f80 	.word	0x20000f80
 8004bb8:	20000f7c 	.word	0x20000f7c

08004bbc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b08e      	sub	sp, #56	; 0x38
 8004bc0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004bc2:	e0ca      	b.n	8004d5a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	da18      	bge.n	8004bfc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004bca:	1d3b      	adds	r3, r7, #4
 8004bcc:	3304      	adds	r3, #4
 8004bce:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d10a      	bne.n	8004bec <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bda:	f383 8811 	msr	BASEPRI, r3
 8004bde:	f3bf 8f6f 	isb	sy
 8004be2:	f3bf 8f4f 	dsb	sy
 8004be6:	61fb      	str	r3, [r7, #28]
}
 8004be8:	bf00      	nop
 8004bea:	e7fe      	b.n	8004bea <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bf2:	6850      	ldr	r0, [r2, #4]
 8004bf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bf6:	6892      	ldr	r2, [r2, #8]
 8004bf8:	4611      	mov	r1, r2
 8004bfa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	f2c0 80ab 	blt.w	8004d5a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c0a:	695b      	ldr	r3, [r3, #20]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d004      	beq.n	8004c1a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c12:	3304      	adds	r3, #4
 8004c14:	4618      	mov	r0, r3
 8004c16:	f7fe f8ad 	bl	8002d74 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004c1a:	463b      	mov	r3, r7
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f7ff ff6b 	bl	8004af8 <prvSampleTimeNow>
 8004c22:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2b09      	cmp	r3, #9
 8004c28:	f200 8096 	bhi.w	8004d58 <prvProcessReceivedCommands+0x19c>
 8004c2c:	a201      	add	r2, pc, #4	; (adr r2, 8004c34 <prvProcessReceivedCommands+0x78>)
 8004c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c32:	bf00      	nop
 8004c34:	08004c5d 	.word	0x08004c5d
 8004c38:	08004c5d 	.word	0x08004c5d
 8004c3c:	08004c5d 	.word	0x08004c5d
 8004c40:	08004cd1 	.word	0x08004cd1
 8004c44:	08004ce5 	.word	0x08004ce5
 8004c48:	08004d2f 	.word	0x08004d2f
 8004c4c:	08004c5d 	.word	0x08004c5d
 8004c50:	08004c5d 	.word	0x08004c5d
 8004c54:	08004cd1 	.word	0x08004cd1
 8004c58:	08004ce5 	.word	0x08004ce5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c62:	f043 0301 	orr.w	r3, r3, #1
 8004c66:	b2da      	uxtb	r2, r3
 8004c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004c6e:	68ba      	ldr	r2, [r7, #8]
 8004c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c72:	699b      	ldr	r3, [r3, #24]
 8004c74:	18d1      	adds	r1, r2, r3
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c7c:	f7ff ff5c 	bl	8004b38 <prvInsertTimerInActiveList>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d069      	beq.n	8004d5a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c88:	6a1b      	ldr	r3, [r3, #32]
 8004c8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c8c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c94:	f003 0304 	and.w	r3, r3, #4
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d05e      	beq.n	8004d5a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004c9c:	68ba      	ldr	r2, [r7, #8]
 8004c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca0:	699b      	ldr	r3, [r3, #24]
 8004ca2:	441a      	add	r2, r3
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	9300      	str	r3, [sp, #0]
 8004ca8:	2300      	movs	r3, #0
 8004caa:	2100      	movs	r1, #0
 8004cac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cae:	f7ff fe05 	bl	80048bc <xTimerGenericCommand>
 8004cb2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004cb4:	6a3b      	ldr	r3, [r7, #32]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d14f      	bne.n	8004d5a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cbe:	f383 8811 	msr	BASEPRI, r3
 8004cc2:	f3bf 8f6f 	isb	sy
 8004cc6:	f3bf 8f4f 	dsb	sy
 8004cca:	61bb      	str	r3, [r7, #24]
}
 8004ccc:	bf00      	nop
 8004cce:	e7fe      	b.n	8004cce <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004cd6:	f023 0301 	bic.w	r3, r3, #1
 8004cda:	b2da      	uxtb	r2, r3
 8004cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cde:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004ce2:	e03a      	b.n	8004d5a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ce6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004cea:	f043 0301 	orr.w	r3, r3, #1
 8004cee:	b2da      	uxtb	r2, r3
 8004cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004cf6:	68ba      	ldr	r2, [r7, #8]
 8004cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cfa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cfe:	699b      	ldr	r3, [r3, #24]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d10a      	bne.n	8004d1a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d08:	f383 8811 	msr	BASEPRI, r3
 8004d0c:	f3bf 8f6f 	isb	sy
 8004d10:	f3bf 8f4f 	dsb	sy
 8004d14:	617b      	str	r3, [r7, #20]
}
 8004d16:	bf00      	nop
 8004d18:	e7fe      	b.n	8004d18 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d1c:	699a      	ldr	r2, [r3, #24]
 8004d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d20:	18d1      	adds	r1, r2, r3
 8004d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d28:	f7ff ff06 	bl	8004b38 <prvInsertTimerInActiveList>
					break;
 8004d2c:	e015      	b.n	8004d5a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d34:	f003 0302 	and.w	r3, r3, #2
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d103      	bne.n	8004d44 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004d3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d3e:	f000 fbdf 	bl	8005500 <vPortFree>
 8004d42:	e00a      	b.n	8004d5a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d4a:	f023 0301 	bic.w	r3, r3, #1
 8004d4e:	b2da      	uxtb	r2, r3
 8004d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004d56:	e000      	b.n	8004d5a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8004d58:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004d5a:	4b08      	ldr	r3, [pc, #32]	; (8004d7c <prvProcessReceivedCommands+0x1c0>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	1d39      	adds	r1, r7, #4
 8004d60:	2200      	movs	r2, #0
 8004d62:	4618      	mov	r0, r3
 8004d64:	f7fe face 	bl	8003304 <xQueueReceive>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	f47f af2a 	bne.w	8004bc4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004d70:	bf00      	nop
 8004d72:	bf00      	nop
 8004d74:	3730      	adds	r7, #48	; 0x30
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	20000f84 	.word	0x20000f84

08004d80 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b088      	sub	sp, #32
 8004d84:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004d86:	e048      	b.n	8004e1a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004d88:	4b2d      	ldr	r3, [pc, #180]	; (8004e40 <prvSwitchTimerLists+0xc0>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d92:	4b2b      	ldr	r3, [pc, #172]	; (8004e40 <prvSwitchTimerLists+0xc0>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	3304      	adds	r3, #4
 8004da0:	4618      	mov	r0, r3
 8004da2:	f7fd ffe7 	bl	8002d74 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6a1b      	ldr	r3, [r3, #32]
 8004daa:	68f8      	ldr	r0, [r7, #12]
 8004dac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004db4:	f003 0304 	and.w	r3, r3, #4
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d02e      	beq.n	8004e1a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	699b      	ldr	r3, [r3, #24]
 8004dc0:	693a      	ldr	r2, [r7, #16]
 8004dc2:	4413      	add	r3, r2
 8004dc4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004dc6:	68ba      	ldr	r2, [r7, #8]
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d90e      	bls.n	8004dec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	68ba      	ldr	r2, [r7, #8]
 8004dd2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	68fa      	ldr	r2, [r7, #12]
 8004dd8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004dda:	4b19      	ldr	r3, [pc, #100]	; (8004e40 <prvSwitchTimerLists+0xc0>)
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	3304      	adds	r3, #4
 8004de2:	4619      	mov	r1, r3
 8004de4:	4610      	mov	r0, r2
 8004de6:	f7fd ff8c 	bl	8002d02 <vListInsert>
 8004dea:	e016      	b.n	8004e1a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004dec:	2300      	movs	r3, #0
 8004dee:	9300      	str	r3, [sp, #0]
 8004df0:	2300      	movs	r3, #0
 8004df2:	693a      	ldr	r2, [r7, #16]
 8004df4:	2100      	movs	r1, #0
 8004df6:	68f8      	ldr	r0, [r7, #12]
 8004df8:	f7ff fd60 	bl	80048bc <xTimerGenericCommand>
 8004dfc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d10a      	bne.n	8004e1a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e08:	f383 8811 	msr	BASEPRI, r3
 8004e0c:	f3bf 8f6f 	isb	sy
 8004e10:	f3bf 8f4f 	dsb	sy
 8004e14:	603b      	str	r3, [r7, #0]
}
 8004e16:	bf00      	nop
 8004e18:	e7fe      	b.n	8004e18 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004e1a:	4b09      	ldr	r3, [pc, #36]	; (8004e40 <prvSwitchTimerLists+0xc0>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d1b1      	bne.n	8004d88 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004e24:	4b06      	ldr	r3, [pc, #24]	; (8004e40 <prvSwitchTimerLists+0xc0>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004e2a:	4b06      	ldr	r3, [pc, #24]	; (8004e44 <prvSwitchTimerLists+0xc4>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a04      	ldr	r2, [pc, #16]	; (8004e40 <prvSwitchTimerLists+0xc0>)
 8004e30:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004e32:	4a04      	ldr	r2, [pc, #16]	; (8004e44 <prvSwitchTimerLists+0xc4>)
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	6013      	str	r3, [r2, #0]
}
 8004e38:	bf00      	nop
 8004e3a:	3718      	adds	r7, #24
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	20000f7c 	.word	0x20000f7c
 8004e44:	20000f80 	.word	0x20000f80

08004e48 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004e4e:	f000 f969 	bl	8005124 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004e52:	4b15      	ldr	r3, [pc, #84]	; (8004ea8 <prvCheckForValidListAndQueue+0x60>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d120      	bne.n	8004e9c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004e5a:	4814      	ldr	r0, [pc, #80]	; (8004eac <prvCheckForValidListAndQueue+0x64>)
 8004e5c:	f7fd ff00 	bl	8002c60 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004e60:	4813      	ldr	r0, [pc, #76]	; (8004eb0 <prvCheckForValidListAndQueue+0x68>)
 8004e62:	f7fd fefd 	bl	8002c60 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004e66:	4b13      	ldr	r3, [pc, #76]	; (8004eb4 <prvCheckForValidListAndQueue+0x6c>)
 8004e68:	4a10      	ldr	r2, [pc, #64]	; (8004eac <prvCheckForValidListAndQueue+0x64>)
 8004e6a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004e6c:	4b12      	ldr	r3, [pc, #72]	; (8004eb8 <prvCheckForValidListAndQueue+0x70>)
 8004e6e:	4a10      	ldr	r2, [pc, #64]	; (8004eb0 <prvCheckForValidListAndQueue+0x68>)
 8004e70:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004e72:	2300      	movs	r3, #0
 8004e74:	9300      	str	r3, [sp, #0]
 8004e76:	4b11      	ldr	r3, [pc, #68]	; (8004ebc <prvCheckForValidListAndQueue+0x74>)
 8004e78:	4a11      	ldr	r2, [pc, #68]	; (8004ec0 <prvCheckForValidListAndQueue+0x78>)
 8004e7a:	2110      	movs	r1, #16
 8004e7c:	200a      	movs	r0, #10
 8004e7e:	f7fe f80b 	bl	8002e98 <xQueueGenericCreateStatic>
 8004e82:	4603      	mov	r3, r0
 8004e84:	4a08      	ldr	r2, [pc, #32]	; (8004ea8 <prvCheckForValidListAndQueue+0x60>)
 8004e86:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004e88:	4b07      	ldr	r3, [pc, #28]	; (8004ea8 <prvCheckForValidListAndQueue+0x60>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d005      	beq.n	8004e9c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004e90:	4b05      	ldr	r3, [pc, #20]	; (8004ea8 <prvCheckForValidListAndQueue+0x60>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	490b      	ldr	r1, [pc, #44]	; (8004ec4 <prvCheckForValidListAndQueue+0x7c>)
 8004e96:	4618      	mov	r0, r3
 8004e98:	f7fe fc24 	bl	80036e4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004e9c:	f000 f972 	bl	8005184 <vPortExitCritical>
}
 8004ea0:	bf00      	nop
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	20000f84 	.word	0x20000f84
 8004eac:	20000f54 	.word	0x20000f54
 8004eb0:	20000f68 	.word	0x20000f68
 8004eb4:	20000f7c 	.word	0x20000f7c
 8004eb8:	20000f80 	.word	0x20000f80
 8004ebc:	20001030 	.word	0x20001030
 8004ec0:	20000f90 	.word	0x20000f90
 8004ec4:	0800c61c 	.word	0x0800c61c

08004ec8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b085      	sub	sp, #20
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	3b04      	subs	r3, #4
 8004ed8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004ee0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	3b04      	subs	r3, #4
 8004ee6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	f023 0201 	bic.w	r2, r3, #1
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	3b04      	subs	r3, #4
 8004ef6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004ef8:	4a0c      	ldr	r2, [pc, #48]	; (8004f2c <pxPortInitialiseStack+0x64>)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	3b14      	subs	r3, #20
 8004f02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	3b04      	subs	r3, #4
 8004f0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f06f 0202 	mvn.w	r2, #2
 8004f16:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	3b20      	subs	r3, #32
 8004f1c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3714      	adds	r7, #20
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr
 8004f2c:	08004f31 	.word	0x08004f31

08004f30 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004f30:	b480      	push	{r7}
 8004f32:	b085      	sub	sp, #20
 8004f34:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004f36:	2300      	movs	r3, #0
 8004f38:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004f3a:	4b12      	ldr	r3, [pc, #72]	; (8004f84 <prvTaskExitError+0x54>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f42:	d00a      	beq.n	8004f5a <prvTaskExitError+0x2a>
	__asm volatile
 8004f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f48:	f383 8811 	msr	BASEPRI, r3
 8004f4c:	f3bf 8f6f 	isb	sy
 8004f50:	f3bf 8f4f 	dsb	sy
 8004f54:	60fb      	str	r3, [r7, #12]
}
 8004f56:	bf00      	nop
 8004f58:	e7fe      	b.n	8004f58 <prvTaskExitError+0x28>
	__asm volatile
 8004f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f5e:	f383 8811 	msr	BASEPRI, r3
 8004f62:	f3bf 8f6f 	isb	sy
 8004f66:	f3bf 8f4f 	dsb	sy
 8004f6a:	60bb      	str	r3, [r7, #8]
}
 8004f6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004f6e:	bf00      	nop
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d0fc      	beq.n	8004f70 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004f76:	bf00      	nop
 8004f78:	bf00      	nop
 8004f7a:	3714      	adds	r7, #20
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr
 8004f84:	20000060 	.word	0x20000060
	...

08004f90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004f90:	4b07      	ldr	r3, [pc, #28]	; (8004fb0 <pxCurrentTCBConst2>)
 8004f92:	6819      	ldr	r1, [r3, #0]
 8004f94:	6808      	ldr	r0, [r1, #0]
 8004f96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f9a:	f380 8809 	msr	PSP, r0
 8004f9e:	f3bf 8f6f 	isb	sy
 8004fa2:	f04f 0000 	mov.w	r0, #0
 8004fa6:	f380 8811 	msr	BASEPRI, r0
 8004faa:	4770      	bx	lr
 8004fac:	f3af 8000 	nop.w

08004fb0 <pxCurrentTCBConst2>:
 8004fb0:	20000a54 	.word	0x20000a54
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004fb4:	bf00      	nop
 8004fb6:	bf00      	nop

08004fb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004fb8:	4808      	ldr	r0, [pc, #32]	; (8004fdc <prvPortStartFirstTask+0x24>)
 8004fba:	6800      	ldr	r0, [r0, #0]
 8004fbc:	6800      	ldr	r0, [r0, #0]
 8004fbe:	f380 8808 	msr	MSP, r0
 8004fc2:	f04f 0000 	mov.w	r0, #0
 8004fc6:	f380 8814 	msr	CONTROL, r0
 8004fca:	b662      	cpsie	i
 8004fcc:	b661      	cpsie	f
 8004fce:	f3bf 8f4f 	dsb	sy
 8004fd2:	f3bf 8f6f 	isb	sy
 8004fd6:	df00      	svc	0
 8004fd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004fda:	bf00      	nop
 8004fdc:	e000ed08 	.word	0xe000ed08

08004fe0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b086      	sub	sp, #24
 8004fe4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004fe6:	4b46      	ldr	r3, [pc, #280]	; (8005100 <xPortStartScheduler+0x120>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a46      	ldr	r2, [pc, #280]	; (8005104 <xPortStartScheduler+0x124>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d10a      	bne.n	8005006 <xPortStartScheduler+0x26>
	__asm volatile
 8004ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff4:	f383 8811 	msr	BASEPRI, r3
 8004ff8:	f3bf 8f6f 	isb	sy
 8004ffc:	f3bf 8f4f 	dsb	sy
 8005000:	613b      	str	r3, [r7, #16]
}
 8005002:	bf00      	nop
 8005004:	e7fe      	b.n	8005004 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005006:	4b3e      	ldr	r3, [pc, #248]	; (8005100 <xPortStartScheduler+0x120>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a3f      	ldr	r2, [pc, #252]	; (8005108 <xPortStartScheduler+0x128>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d10a      	bne.n	8005026 <xPortStartScheduler+0x46>
	__asm volatile
 8005010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005014:	f383 8811 	msr	BASEPRI, r3
 8005018:	f3bf 8f6f 	isb	sy
 800501c:	f3bf 8f4f 	dsb	sy
 8005020:	60fb      	str	r3, [r7, #12]
}
 8005022:	bf00      	nop
 8005024:	e7fe      	b.n	8005024 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005026:	4b39      	ldr	r3, [pc, #228]	; (800510c <xPortStartScheduler+0x12c>)
 8005028:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	b2db      	uxtb	r3, r3
 8005030:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	22ff      	movs	r2, #255	; 0xff
 8005036:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	b2db      	uxtb	r3, r3
 800503e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005040:	78fb      	ldrb	r3, [r7, #3]
 8005042:	b2db      	uxtb	r3, r3
 8005044:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005048:	b2da      	uxtb	r2, r3
 800504a:	4b31      	ldr	r3, [pc, #196]	; (8005110 <xPortStartScheduler+0x130>)
 800504c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800504e:	4b31      	ldr	r3, [pc, #196]	; (8005114 <xPortStartScheduler+0x134>)
 8005050:	2207      	movs	r2, #7
 8005052:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005054:	e009      	b.n	800506a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005056:	4b2f      	ldr	r3, [pc, #188]	; (8005114 <xPortStartScheduler+0x134>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	3b01      	subs	r3, #1
 800505c:	4a2d      	ldr	r2, [pc, #180]	; (8005114 <xPortStartScheduler+0x134>)
 800505e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005060:	78fb      	ldrb	r3, [r7, #3]
 8005062:	b2db      	uxtb	r3, r3
 8005064:	005b      	lsls	r3, r3, #1
 8005066:	b2db      	uxtb	r3, r3
 8005068:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800506a:	78fb      	ldrb	r3, [r7, #3]
 800506c:	b2db      	uxtb	r3, r3
 800506e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005072:	2b80      	cmp	r3, #128	; 0x80
 8005074:	d0ef      	beq.n	8005056 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005076:	4b27      	ldr	r3, [pc, #156]	; (8005114 <xPortStartScheduler+0x134>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f1c3 0307 	rsb	r3, r3, #7
 800507e:	2b04      	cmp	r3, #4
 8005080:	d00a      	beq.n	8005098 <xPortStartScheduler+0xb8>
	__asm volatile
 8005082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005086:	f383 8811 	msr	BASEPRI, r3
 800508a:	f3bf 8f6f 	isb	sy
 800508e:	f3bf 8f4f 	dsb	sy
 8005092:	60bb      	str	r3, [r7, #8]
}
 8005094:	bf00      	nop
 8005096:	e7fe      	b.n	8005096 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005098:	4b1e      	ldr	r3, [pc, #120]	; (8005114 <xPortStartScheduler+0x134>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	021b      	lsls	r3, r3, #8
 800509e:	4a1d      	ldr	r2, [pc, #116]	; (8005114 <xPortStartScheduler+0x134>)
 80050a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80050a2:	4b1c      	ldr	r3, [pc, #112]	; (8005114 <xPortStartScheduler+0x134>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80050aa:	4a1a      	ldr	r2, [pc, #104]	; (8005114 <xPortStartScheduler+0x134>)
 80050ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	b2da      	uxtb	r2, r3
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80050b6:	4b18      	ldr	r3, [pc, #96]	; (8005118 <xPortStartScheduler+0x138>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a17      	ldr	r2, [pc, #92]	; (8005118 <xPortStartScheduler+0x138>)
 80050bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80050c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80050c2:	4b15      	ldr	r3, [pc, #84]	; (8005118 <xPortStartScheduler+0x138>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a14      	ldr	r2, [pc, #80]	; (8005118 <xPortStartScheduler+0x138>)
 80050c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80050cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80050ce:	f000 f8dd 	bl	800528c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80050d2:	4b12      	ldr	r3, [pc, #72]	; (800511c <xPortStartScheduler+0x13c>)
 80050d4:	2200      	movs	r2, #0
 80050d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80050d8:	f000 f8fc 	bl	80052d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80050dc:	4b10      	ldr	r3, [pc, #64]	; (8005120 <xPortStartScheduler+0x140>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a0f      	ldr	r2, [pc, #60]	; (8005120 <xPortStartScheduler+0x140>)
 80050e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80050e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80050e8:	f7ff ff66 	bl	8004fb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80050ec:	f7fe ff1c 	bl	8003f28 <vTaskSwitchContext>
	prvTaskExitError();
 80050f0:	f7ff ff1e 	bl	8004f30 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3718      	adds	r7, #24
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	e000ed00 	.word	0xe000ed00
 8005104:	410fc271 	.word	0x410fc271
 8005108:	410fc270 	.word	0x410fc270
 800510c:	e000e400 	.word	0xe000e400
 8005110:	20001080 	.word	0x20001080
 8005114:	20001084 	.word	0x20001084
 8005118:	e000ed20 	.word	0xe000ed20
 800511c:	20000060 	.word	0x20000060
 8005120:	e000ef34 	.word	0xe000ef34

08005124 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005124:	b480      	push	{r7}
 8005126:	b083      	sub	sp, #12
 8005128:	af00      	add	r7, sp, #0
	__asm volatile
 800512a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800512e:	f383 8811 	msr	BASEPRI, r3
 8005132:	f3bf 8f6f 	isb	sy
 8005136:	f3bf 8f4f 	dsb	sy
 800513a:	607b      	str	r3, [r7, #4]
}
 800513c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800513e:	4b0f      	ldr	r3, [pc, #60]	; (800517c <vPortEnterCritical+0x58>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	3301      	adds	r3, #1
 8005144:	4a0d      	ldr	r2, [pc, #52]	; (800517c <vPortEnterCritical+0x58>)
 8005146:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005148:	4b0c      	ldr	r3, [pc, #48]	; (800517c <vPortEnterCritical+0x58>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2b01      	cmp	r3, #1
 800514e:	d10f      	bne.n	8005170 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005150:	4b0b      	ldr	r3, [pc, #44]	; (8005180 <vPortEnterCritical+0x5c>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	b2db      	uxtb	r3, r3
 8005156:	2b00      	cmp	r3, #0
 8005158:	d00a      	beq.n	8005170 <vPortEnterCritical+0x4c>
	__asm volatile
 800515a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800515e:	f383 8811 	msr	BASEPRI, r3
 8005162:	f3bf 8f6f 	isb	sy
 8005166:	f3bf 8f4f 	dsb	sy
 800516a:	603b      	str	r3, [r7, #0]
}
 800516c:	bf00      	nop
 800516e:	e7fe      	b.n	800516e <vPortEnterCritical+0x4a>
	}
}
 8005170:	bf00      	nop
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr
 800517c:	20000060 	.word	0x20000060
 8005180:	e000ed04 	.word	0xe000ed04

08005184 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005184:	b480      	push	{r7}
 8005186:	b083      	sub	sp, #12
 8005188:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800518a:	4b12      	ldr	r3, [pc, #72]	; (80051d4 <vPortExitCritical+0x50>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d10a      	bne.n	80051a8 <vPortExitCritical+0x24>
	__asm volatile
 8005192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005196:	f383 8811 	msr	BASEPRI, r3
 800519a:	f3bf 8f6f 	isb	sy
 800519e:	f3bf 8f4f 	dsb	sy
 80051a2:	607b      	str	r3, [r7, #4]
}
 80051a4:	bf00      	nop
 80051a6:	e7fe      	b.n	80051a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80051a8:	4b0a      	ldr	r3, [pc, #40]	; (80051d4 <vPortExitCritical+0x50>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	3b01      	subs	r3, #1
 80051ae:	4a09      	ldr	r2, [pc, #36]	; (80051d4 <vPortExitCritical+0x50>)
 80051b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80051b2:	4b08      	ldr	r3, [pc, #32]	; (80051d4 <vPortExitCritical+0x50>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d105      	bne.n	80051c6 <vPortExitCritical+0x42>
 80051ba:	2300      	movs	r3, #0
 80051bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	f383 8811 	msr	BASEPRI, r3
}
 80051c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80051c6:	bf00      	nop
 80051c8:	370c      	adds	r7, #12
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr
 80051d2:	bf00      	nop
 80051d4:	20000060 	.word	0x20000060
	...

080051e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80051e0:	f3ef 8009 	mrs	r0, PSP
 80051e4:	f3bf 8f6f 	isb	sy
 80051e8:	4b15      	ldr	r3, [pc, #84]	; (8005240 <pxCurrentTCBConst>)
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	f01e 0f10 	tst.w	lr, #16
 80051f0:	bf08      	it	eq
 80051f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80051f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051fa:	6010      	str	r0, [r2, #0]
 80051fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005200:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005204:	f380 8811 	msr	BASEPRI, r0
 8005208:	f3bf 8f4f 	dsb	sy
 800520c:	f3bf 8f6f 	isb	sy
 8005210:	f7fe fe8a 	bl	8003f28 <vTaskSwitchContext>
 8005214:	f04f 0000 	mov.w	r0, #0
 8005218:	f380 8811 	msr	BASEPRI, r0
 800521c:	bc09      	pop	{r0, r3}
 800521e:	6819      	ldr	r1, [r3, #0]
 8005220:	6808      	ldr	r0, [r1, #0]
 8005222:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005226:	f01e 0f10 	tst.w	lr, #16
 800522a:	bf08      	it	eq
 800522c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005230:	f380 8809 	msr	PSP, r0
 8005234:	f3bf 8f6f 	isb	sy
 8005238:	4770      	bx	lr
 800523a:	bf00      	nop
 800523c:	f3af 8000 	nop.w

08005240 <pxCurrentTCBConst>:
 8005240:	20000a54 	.word	0x20000a54
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005244:	bf00      	nop
 8005246:	bf00      	nop

08005248 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b082      	sub	sp, #8
 800524c:	af00      	add	r7, sp, #0
	__asm volatile
 800524e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005252:	f383 8811 	msr	BASEPRI, r3
 8005256:	f3bf 8f6f 	isb	sy
 800525a:	f3bf 8f4f 	dsb	sy
 800525e:	607b      	str	r3, [r7, #4]
}
 8005260:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005262:	f7fe fda7 	bl	8003db4 <xTaskIncrementTick>
 8005266:	4603      	mov	r3, r0
 8005268:	2b00      	cmp	r3, #0
 800526a:	d003      	beq.n	8005274 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800526c:	4b06      	ldr	r3, [pc, #24]	; (8005288 <xPortSysTickHandler+0x40>)
 800526e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005272:	601a      	str	r2, [r3, #0]
 8005274:	2300      	movs	r3, #0
 8005276:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	f383 8811 	msr	BASEPRI, r3
}
 800527e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005280:	bf00      	nop
 8005282:	3708      	adds	r7, #8
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}
 8005288:	e000ed04 	.word	0xe000ed04

0800528c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800528c:	b480      	push	{r7}
 800528e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005290:	4b0b      	ldr	r3, [pc, #44]	; (80052c0 <vPortSetupTimerInterrupt+0x34>)
 8005292:	2200      	movs	r2, #0
 8005294:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005296:	4b0b      	ldr	r3, [pc, #44]	; (80052c4 <vPortSetupTimerInterrupt+0x38>)
 8005298:	2200      	movs	r2, #0
 800529a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800529c:	4b0a      	ldr	r3, [pc, #40]	; (80052c8 <vPortSetupTimerInterrupt+0x3c>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a0a      	ldr	r2, [pc, #40]	; (80052cc <vPortSetupTimerInterrupt+0x40>)
 80052a2:	fba2 2303 	umull	r2, r3, r2, r3
 80052a6:	099b      	lsrs	r3, r3, #6
 80052a8:	4a09      	ldr	r2, [pc, #36]	; (80052d0 <vPortSetupTimerInterrupt+0x44>)
 80052aa:	3b01      	subs	r3, #1
 80052ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80052ae:	4b04      	ldr	r3, [pc, #16]	; (80052c0 <vPortSetupTimerInterrupt+0x34>)
 80052b0:	2207      	movs	r2, #7
 80052b2:	601a      	str	r2, [r3, #0]
}
 80052b4:	bf00      	nop
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop
 80052c0:	e000e010 	.word	0xe000e010
 80052c4:	e000e018 	.word	0xe000e018
 80052c8:	2000006c 	.word	0x2000006c
 80052cc:	10624dd3 	.word	0x10624dd3
 80052d0:	e000e014 	.word	0xe000e014

080052d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80052d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80052e4 <vPortEnableVFP+0x10>
 80052d8:	6801      	ldr	r1, [r0, #0]
 80052da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80052de:	6001      	str	r1, [r0, #0]
 80052e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80052e2:	bf00      	nop
 80052e4:	e000ed88 	.word	0xe000ed88

080052e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80052e8:	b480      	push	{r7}
 80052ea:	b085      	sub	sp, #20
 80052ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80052ee:	f3ef 8305 	mrs	r3, IPSR
 80052f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2b0f      	cmp	r3, #15
 80052f8:	d914      	bls.n	8005324 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80052fa:	4a17      	ldr	r2, [pc, #92]	; (8005358 <vPortValidateInterruptPriority+0x70>)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	4413      	add	r3, r2
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005304:	4b15      	ldr	r3, [pc, #84]	; (800535c <vPortValidateInterruptPriority+0x74>)
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	7afa      	ldrb	r2, [r7, #11]
 800530a:	429a      	cmp	r2, r3
 800530c:	d20a      	bcs.n	8005324 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800530e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005312:	f383 8811 	msr	BASEPRI, r3
 8005316:	f3bf 8f6f 	isb	sy
 800531a:	f3bf 8f4f 	dsb	sy
 800531e:	607b      	str	r3, [r7, #4]
}
 8005320:	bf00      	nop
 8005322:	e7fe      	b.n	8005322 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005324:	4b0e      	ldr	r3, [pc, #56]	; (8005360 <vPortValidateInterruptPriority+0x78>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800532c:	4b0d      	ldr	r3, [pc, #52]	; (8005364 <vPortValidateInterruptPriority+0x7c>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	429a      	cmp	r2, r3
 8005332:	d90a      	bls.n	800534a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005338:	f383 8811 	msr	BASEPRI, r3
 800533c:	f3bf 8f6f 	isb	sy
 8005340:	f3bf 8f4f 	dsb	sy
 8005344:	603b      	str	r3, [r7, #0]
}
 8005346:	bf00      	nop
 8005348:	e7fe      	b.n	8005348 <vPortValidateInterruptPriority+0x60>
	}
 800534a:	bf00      	nop
 800534c:	3714      	adds	r7, #20
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr
 8005356:	bf00      	nop
 8005358:	e000e3f0 	.word	0xe000e3f0
 800535c:	20001080 	.word	0x20001080
 8005360:	e000ed0c 	.word	0xe000ed0c
 8005364:	20001084 	.word	0x20001084

08005368 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b08a      	sub	sp, #40	; 0x28
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005370:	2300      	movs	r3, #0
 8005372:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005374:	f7fe fc50 	bl	8003c18 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005378:	4b5b      	ldr	r3, [pc, #364]	; (80054e8 <pvPortMalloc+0x180>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d101      	bne.n	8005384 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005380:	f000 f920 	bl	80055c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005384:	4b59      	ldr	r3, [pc, #356]	; (80054ec <pvPortMalloc+0x184>)
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4013      	ands	r3, r2
 800538c:	2b00      	cmp	r3, #0
 800538e:	f040 8093 	bne.w	80054b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d01d      	beq.n	80053d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005398:	2208      	movs	r2, #8
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4413      	add	r3, r2
 800539e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f003 0307 	and.w	r3, r3, #7
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d014      	beq.n	80053d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f023 0307 	bic.w	r3, r3, #7
 80053b0:	3308      	adds	r3, #8
 80053b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f003 0307 	and.w	r3, r3, #7
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d00a      	beq.n	80053d4 <pvPortMalloc+0x6c>
	__asm volatile
 80053be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c2:	f383 8811 	msr	BASEPRI, r3
 80053c6:	f3bf 8f6f 	isb	sy
 80053ca:	f3bf 8f4f 	dsb	sy
 80053ce:	617b      	str	r3, [r7, #20]
}
 80053d0:	bf00      	nop
 80053d2:	e7fe      	b.n	80053d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d06e      	beq.n	80054b8 <pvPortMalloc+0x150>
 80053da:	4b45      	ldr	r3, [pc, #276]	; (80054f0 <pvPortMalloc+0x188>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d869      	bhi.n	80054b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80053e4:	4b43      	ldr	r3, [pc, #268]	; (80054f4 <pvPortMalloc+0x18c>)
 80053e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80053e8:	4b42      	ldr	r3, [pc, #264]	; (80054f4 <pvPortMalloc+0x18c>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80053ee:	e004      	b.n	80053fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80053f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80053f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80053fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	429a      	cmp	r2, r3
 8005402:	d903      	bls.n	800540c <pvPortMalloc+0xa4>
 8005404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d1f1      	bne.n	80053f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800540c:	4b36      	ldr	r3, [pc, #216]	; (80054e8 <pvPortMalloc+0x180>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005412:	429a      	cmp	r2, r3
 8005414:	d050      	beq.n	80054b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005416:	6a3b      	ldr	r3, [r7, #32]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	2208      	movs	r2, #8
 800541c:	4413      	add	r3, r2
 800541e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	6a3b      	ldr	r3, [r7, #32]
 8005426:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542a:	685a      	ldr	r2, [r3, #4]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	1ad2      	subs	r2, r2, r3
 8005430:	2308      	movs	r3, #8
 8005432:	005b      	lsls	r3, r3, #1
 8005434:	429a      	cmp	r2, r3
 8005436:	d91f      	bls.n	8005478 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4413      	add	r3, r2
 800543e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005440:	69bb      	ldr	r3, [r7, #24]
 8005442:	f003 0307 	and.w	r3, r3, #7
 8005446:	2b00      	cmp	r3, #0
 8005448:	d00a      	beq.n	8005460 <pvPortMalloc+0xf8>
	__asm volatile
 800544a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800544e:	f383 8811 	msr	BASEPRI, r3
 8005452:	f3bf 8f6f 	isb	sy
 8005456:	f3bf 8f4f 	dsb	sy
 800545a:	613b      	str	r3, [r7, #16]
}
 800545c:	bf00      	nop
 800545e:	e7fe      	b.n	800545e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005462:	685a      	ldr	r2, [r3, #4]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	1ad2      	subs	r2, r2, r3
 8005468:	69bb      	ldr	r3, [r7, #24]
 800546a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800546c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005472:	69b8      	ldr	r0, [r7, #24]
 8005474:	f000 f908 	bl	8005688 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005478:	4b1d      	ldr	r3, [pc, #116]	; (80054f0 <pvPortMalloc+0x188>)
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	4a1b      	ldr	r2, [pc, #108]	; (80054f0 <pvPortMalloc+0x188>)
 8005484:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005486:	4b1a      	ldr	r3, [pc, #104]	; (80054f0 <pvPortMalloc+0x188>)
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	4b1b      	ldr	r3, [pc, #108]	; (80054f8 <pvPortMalloc+0x190>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	429a      	cmp	r2, r3
 8005490:	d203      	bcs.n	800549a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005492:	4b17      	ldr	r3, [pc, #92]	; (80054f0 <pvPortMalloc+0x188>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a18      	ldr	r2, [pc, #96]	; (80054f8 <pvPortMalloc+0x190>)
 8005498:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800549a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549c:	685a      	ldr	r2, [r3, #4]
 800549e:	4b13      	ldr	r3, [pc, #76]	; (80054ec <pvPortMalloc+0x184>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	431a      	orrs	r2, r3
 80054a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80054a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054aa:	2200      	movs	r2, #0
 80054ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80054ae:	4b13      	ldr	r3, [pc, #76]	; (80054fc <pvPortMalloc+0x194>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	3301      	adds	r3, #1
 80054b4:	4a11      	ldr	r2, [pc, #68]	; (80054fc <pvPortMalloc+0x194>)
 80054b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80054b8:	f7fe fbbc 	bl	8003c34 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80054bc:	69fb      	ldr	r3, [r7, #28]
 80054be:	f003 0307 	and.w	r3, r3, #7
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d00a      	beq.n	80054dc <pvPortMalloc+0x174>
	__asm volatile
 80054c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ca:	f383 8811 	msr	BASEPRI, r3
 80054ce:	f3bf 8f6f 	isb	sy
 80054d2:	f3bf 8f4f 	dsb	sy
 80054d6:	60fb      	str	r3, [r7, #12]
}
 80054d8:	bf00      	nop
 80054da:	e7fe      	b.n	80054da <pvPortMalloc+0x172>
	return pvReturn;
 80054dc:	69fb      	ldr	r3, [r7, #28]
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3728      	adds	r7, #40	; 0x28
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop
 80054e8:	20001c48 	.word	0x20001c48
 80054ec:	20001c5c 	.word	0x20001c5c
 80054f0:	20001c4c 	.word	0x20001c4c
 80054f4:	20001c40 	.word	0x20001c40
 80054f8:	20001c50 	.word	0x20001c50
 80054fc:	20001c54 	.word	0x20001c54

08005500 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b086      	sub	sp, #24
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d04d      	beq.n	80055ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005512:	2308      	movs	r3, #8
 8005514:	425b      	negs	r3, r3
 8005516:	697a      	ldr	r2, [r7, #20]
 8005518:	4413      	add	r3, r2
 800551a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	685a      	ldr	r2, [r3, #4]
 8005524:	4b24      	ldr	r3, [pc, #144]	; (80055b8 <vPortFree+0xb8>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4013      	ands	r3, r2
 800552a:	2b00      	cmp	r3, #0
 800552c:	d10a      	bne.n	8005544 <vPortFree+0x44>
	__asm volatile
 800552e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005532:	f383 8811 	msr	BASEPRI, r3
 8005536:	f3bf 8f6f 	isb	sy
 800553a:	f3bf 8f4f 	dsb	sy
 800553e:	60fb      	str	r3, [r7, #12]
}
 8005540:	bf00      	nop
 8005542:	e7fe      	b.n	8005542 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d00a      	beq.n	8005562 <vPortFree+0x62>
	__asm volatile
 800554c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005550:	f383 8811 	msr	BASEPRI, r3
 8005554:	f3bf 8f6f 	isb	sy
 8005558:	f3bf 8f4f 	dsb	sy
 800555c:	60bb      	str	r3, [r7, #8]
}
 800555e:	bf00      	nop
 8005560:	e7fe      	b.n	8005560 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	685a      	ldr	r2, [r3, #4]
 8005566:	4b14      	ldr	r3, [pc, #80]	; (80055b8 <vPortFree+0xb8>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4013      	ands	r3, r2
 800556c:	2b00      	cmp	r3, #0
 800556e:	d01e      	beq.n	80055ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d11a      	bne.n	80055ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	685a      	ldr	r2, [r3, #4]
 800557c:	4b0e      	ldr	r3, [pc, #56]	; (80055b8 <vPortFree+0xb8>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	43db      	mvns	r3, r3
 8005582:	401a      	ands	r2, r3
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005588:	f7fe fb46 	bl	8003c18 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	685a      	ldr	r2, [r3, #4]
 8005590:	4b0a      	ldr	r3, [pc, #40]	; (80055bc <vPortFree+0xbc>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4413      	add	r3, r2
 8005596:	4a09      	ldr	r2, [pc, #36]	; (80055bc <vPortFree+0xbc>)
 8005598:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800559a:	6938      	ldr	r0, [r7, #16]
 800559c:	f000 f874 	bl	8005688 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80055a0:	4b07      	ldr	r3, [pc, #28]	; (80055c0 <vPortFree+0xc0>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	3301      	adds	r3, #1
 80055a6:	4a06      	ldr	r2, [pc, #24]	; (80055c0 <vPortFree+0xc0>)
 80055a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80055aa:	f7fe fb43 	bl	8003c34 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80055ae:	bf00      	nop
 80055b0:	3718      	adds	r7, #24
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	bf00      	nop
 80055b8:	20001c5c 	.word	0x20001c5c
 80055bc:	20001c4c 	.word	0x20001c4c
 80055c0:	20001c58 	.word	0x20001c58

080055c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80055c4:	b480      	push	{r7}
 80055c6:	b085      	sub	sp, #20
 80055c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80055ca:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80055ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80055d0:	4b27      	ldr	r3, [pc, #156]	; (8005670 <prvHeapInit+0xac>)
 80055d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f003 0307 	and.w	r3, r3, #7
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d00c      	beq.n	80055f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	3307      	adds	r3, #7
 80055e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f023 0307 	bic.w	r3, r3, #7
 80055ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80055ec:	68ba      	ldr	r2, [r7, #8]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	4a1f      	ldr	r2, [pc, #124]	; (8005670 <prvHeapInit+0xac>)
 80055f4:	4413      	add	r3, r2
 80055f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80055fc:	4a1d      	ldr	r2, [pc, #116]	; (8005674 <prvHeapInit+0xb0>)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005602:	4b1c      	ldr	r3, [pc, #112]	; (8005674 <prvHeapInit+0xb0>)
 8005604:	2200      	movs	r2, #0
 8005606:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	68ba      	ldr	r2, [r7, #8]
 800560c:	4413      	add	r3, r2
 800560e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005610:	2208      	movs	r2, #8
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	1a9b      	subs	r3, r3, r2
 8005616:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f023 0307 	bic.w	r3, r3, #7
 800561e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	4a15      	ldr	r2, [pc, #84]	; (8005678 <prvHeapInit+0xb4>)
 8005624:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005626:	4b14      	ldr	r3, [pc, #80]	; (8005678 <prvHeapInit+0xb4>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	2200      	movs	r2, #0
 800562c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800562e:	4b12      	ldr	r3, [pc, #72]	; (8005678 <prvHeapInit+0xb4>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	2200      	movs	r2, #0
 8005634:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	68fa      	ldr	r2, [r7, #12]
 800563e:	1ad2      	subs	r2, r2, r3
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005644:	4b0c      	ldr	r3, [pc, #48]	; (8005678 <prvHeapInit+0xb4>)
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	4a0a      	ldr	r2, [pc, #40]	; (800567c <prvHeapInit+0xb8>)
 8005652:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	4a09      	ldr	r2, [pc, #36]	; (8005680 <prvHeapInit+0xbc>)
 800565a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800565c:	4b09      	ldr	r3, [pc, #36]	; (8005684 <prvHeapInit+0xc0>)
 800565e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005662:	601a      	str	r2, [r3, #0]
}
 8005664:	bf00      	nop
 8005666:	3714      	adds	r7, #20
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr
 8005670:	20001088 	.word	0x20001088
 8005674:	20001c40 	.word	0x20001c40
 8005678:	20001c48 	.word	0x20001c48
 800567c:	20001c50 	.word	0x20001c50
 8005680:	20001c4c 	.word	0x20001c4c
 8005684:	20001c5c 	.word	0x20001c5c

08005688 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005688:	b480      	push	{r7}
 800568a:	b085      	sub	sp, #20
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005690:	4b28      	ldr	r3, [pc, #160]	; (8005734 <prvInsertBlockIntoFreeList+0xac>)
 8005692:	60fb      	str	r3, [r7, #12]
 8005694:	e002      	b.n	800569c <prvInsertBlockIntoFreeList+0x14>
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	60fb      	str	r3, [r7, #12]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d8f7      	bhi.n	8005696 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	68ba      	ldr	r2, [r7, #8]
 80056b0:	4413      	add	r3, r2
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d108      	bne.n	80056ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	685a      	ldr	r2, [r3, #4]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	441a      	add	r2, r3
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	68ba      	ldr	r2, [r7, #8]
 80056d4:	441a      	add	r2, r3
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	429a      	cmp	r2, r3
 80056dc:	d118      	bne.n	8005710 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	4b15      	ldr	r3, [pc, #84]	; (8005738 <prvInsertBlockIntoFreeList+0xb0>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d00d      	beq.n	8005706 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	685a      	ldr	r2, [r3, #4]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	441a      	add	r2, r3
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	601a      	str	r2, [r3, #0]
 8005704:	e008      	b.n	8005718 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005706:	4b0c      	ldr	r3, [pc, #48]	; (8005738 <prvInsertBlockIntoFreeList+0xb0>)
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	601a      	str	r2, [r3, #0]
 800570e:	e003      	b.n	8005718 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005718:	68fa      	ldr	r2, [r7, #12]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	429a      	cmp	r2, r3
 800571e:	d002      	beq.n	8005726 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005726:	bf00      	nop
 8005728:	3714      	adds	r7, #20
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr
 8005732:	bf00      	nop
 8005734:	20001c40 	.word	0x20001c40
 8005738:	20001c48 	.word	0x20001c48

0800573c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b082      	sub	sp, #8
 8005740:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005742:	2300      	movs	r3, #0
 8005744:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set In terrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005746:	2003      	movs	r0, #3
 8005748:	f000 f98e 	bl	8005a68 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800574c:	2000      	movs	r0, #0
 800574e:	f000 f80d 	bl	800576c <HAL_InitTick>
 8005752:	4603      	mov	r3, r0
 8005754:	2b00      	cmp	r3, #0
 8005756:	d002      	beq.n	800575e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005758:	2301      	movs	r3, #1
 800575a:	71fb      	strb	r3, [r7, #7]
 800575c:	e001      	b.n	8005762 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800575e:	f005 f9c7 	bl	800aaf0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005762:	79fb      	ldrb	r3, [r7, #7]
}
 8005764:	4618      	mov	r0, r3
 8005766:	3708      	adds	r7, #8
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005774:	2300      	movs	r3, #0
 8005776:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8005778:	4b17      	ldr	r3, [pc, #92]	; (80057d8 <HAL_InitTick+0x6c>)
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d023      	beq.n	80057c8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8005780:	4b16      	ldr	r3, [pc, #88]	; (80057dc <HAL_InitTick+0x70>)
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	4b14      	ldr	r3, [pc, #80]	; (80057d8 <HAL_InitTick+0x6c>)
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	4619      	mov	r1, r3
 800578a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800578e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005792:	fbb2 f3f3 	udiv	r3, r2, r3
 8005796:	4618      	mov	r0, r3
 8005798:	f000 f9a9 	bl	8005aee <HAL_SYSTICK_Config>
 800579c:	4603      	mov	r3, r0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d10f      	bne.n	80057c2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2b0f      	cmp	r3, #15
 80057a6:	d809      	bhi.n	80057bc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80057a8:	2200      	movs	r2, #0
 80057aa:	6879      	ldr	r1, [r7, #4]
 80057ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057b0:	f000 f965 	bl	8005a7e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80057b4:	4a0a      	ldr	r2, [pc, #40]	; (80057e0 <HAL_InitTick+0x74>)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6013      	str	r3, [r2, #0]
 80057ba:	e007      	b.n	80057cc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	73fb      	strb	r3, [r7, #15]
 80057c0:	e004      	b.n	80057cc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	73fb      	strb	r3, [r7, #15]
 80057c6:	e001      	b.n	80057cc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80057cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3710      	adds	r7, #16
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	bf00      	nop
 80057d8:	20000068 	.word	0x20000068
 80057dc:	2000006c 	.word	0x2000006c
 80057e0:	20000064 	.word	0x20000064

080057e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80057e4:	b480      	push	{r7}
 80057e6:	af00      	add	r7, sp, #0
    //return xTaskGetTickCount();
    return uwTick;
 80057e8:	4b03      	ldr	r3, [pc, #12]	; (80057f8 <HAL_GetTick+0x14>)
 80057ea:	681b      	ldr	r3, [r3, #0]
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	20001c60 	.word	0x20001c60

080057fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005804:	f7ff ffee 	bl	80057e4 <HAL_GetTick>
 8005808:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005814:	d005      	beq.n	8005822 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8005816:	4b0a      	ldr	r3, [pc, #40]	; (8005840 <HAL_Delay+0x44>)
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	461a      	mov	r2, r3
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	4413      	add	r3, r2
 8005820:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005822:	bf00      	nop
 8005824:	f7ff ffde 	bl	80057e4 <HAL_GetTick>
 8005828:	4602      	mov	r2, r0
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	1ad3      	subs	r3, r2, r3
 800582e:	68fa      	ldr	r2, [r7, #12]
 8005830:	429a      	cmp	r2, r3
 8005832:	d8f7      	bhi.n	8005824 <HAL_Delay+0x28>
  {
  }
}
 8005834:	bf00      	nop
 8005836:	bf00      	nop
 8005838:	3710      	adds	r7, #16
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	20000068 	.word	0x20000068

08005844 <__NVIC_SetPriorityGrouping>:
{
 8005844:	b480      	push	{r7}
 8005846:	b085      	sub	sp, #20
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f003 0307 	and.w	r3, r3, #7
 8005852:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005854:	4b0c      	ldr	r3, [pc, #48]	; (8005888 <__NVIC_SetPriorityGrouping+0x44>)
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800585a:	68ba      	ldr	r2, [r7, #8]
 800585c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005860:	4013      	ands	r3, r2
 8005862:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800586c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005870:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005874:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005876:	4a04      	ldr	r2, [pc, #16]	; (8005888 <__NVIC_SetPriorityGrouping+0x44>)
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	60d3      	str	r3, [r2, #12]
}
 800587c:	bf00      	nop
 800587e:	3714      	adds	r7, #20
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr
 8005888:	e000ed00 	.word	0xe000ed00

0800588c <__NVIC_GetPriorityGrouping>:
{
 800588c:	b480      	push	{r7}
 800588e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005890:	4b04      	ldr	r3, [pc, #16]	; (80058a4 <__NVIC_GetPriorityGrouping+0x18>)
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	0a1b      	lsrs	r3, r3, #8
 8005896:	f003 0307 	and.w	r3, r3, #7
}
 800589a:	4618      	mov	r0, r3
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr
 80058a4:	e000ed00 	.word	0xe000ed00

080058a8 <__NVIC_EnableIRQ>:
{
 80058a8:	b480      	push	{r7}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	4603      	mov	r3, r0
 80058b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	db0b      	blt.n	80058d2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80058ba:	79fb      	ldrb	r3, [r7, #7]
 80058bc:	f003 021f 	and.w	r2, r3, #31
 80058c0:	4907      	ldr	r1, [pc, #28]	; (80058e0 <__NVIC_EnableIRQ+0x38>)
 80058c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058c6:	095b      	lsrs	r3, r3, #5
 80058c8:	2001      	movs	r0, #1
 80058ca:	fa00 f202 	lsl.w	r2, r0, r2
 80058ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80058d2:	bf00      	nop
 80058d4:	370c      	adds	r7, #12
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr
 80058de:	bf00      	nop
 80058e0:	e000e100 	.word	0xe000e100

080058e4 <__NVIC_DisableIRQ>:
{
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	4603      	mov	r3, r0
 80058ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	db12      	blt.n	800591c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80058f6:	79fb      	ldrb	r3, [r7, #7]
 80058f8:	f003 021f 	and.w	r2, r3, #31
 80058fc:	490a      	ldr	r1, [pc, #40]	; (8005928 <__NVIC_DisableIRQ+0x44>)
 80058fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005902:	095b      	lsrs	r3, r3, #5
 8005904:	2001      	movs	r0, #1
 8005906:	fa00 f202 	lsl.w	r2, r0, r2
 800590a:	3320      	adds	r3, #32
 800590c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005910:	f3bf 8f4f 	dsb	sy
}
 8005914:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005916:	f3bf 8f6f 	isb	sy
}
 800591a:	bf00      	nop
}
 800591c:	bf00      	nop
 800591e:	370c      	adds	r7, #12
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr
 8005928:	e000e100 	.word	0xe000e100

0800592c <__NVIC_ClearPendingIRQ>:
{
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
 8005932:	4603      	mov	r3, r0
 8005934:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800593a:	2b00      	cmp	r3, #0
 800593c:	db0c      	blt.n	8005958 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800593e:	79fb      	ldrb	r3, [r7, #7]
 8005940:	f003 021f 	and.w	r2, r3, #31
 8005944:	4907      	ldr	r1, [pc, #28]	; (8005964 <__NVIC_ClearPendingIRQ+0x38>)
 8005946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800594a:	095b      	lsrs	r3, r3, #5
 800594c:	2001      	movs	r0, #1
 800594e:	fa00 f202 	lsl.w	r2, r0, r2
 8005952:	3360      	adds	r3, #96	; 0x60
 8005954:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005958:	bf00      	nop
 800595a:	370c      	adds	r7, #12
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr
 8005964:	e000e100 	.word	0xe000e100

08005968 <__NVIC_SetPriority>:
{
 8005968:	b480      	push	{r7}
 800596a:	b083      	sub	sp, #12
 800596c:	af00      	add	r7, sp, #0
 800596e:	4603      	mov	r3, r0
 8005970:	6039      	str	r1, [r7, #0]
 8005972:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005978:	2b00      	cmp	r3, #0
 800597a:	db0a      	blt.n	8005992 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	b2da      	uxtb	r2, r3
 8005980:	490c      	ldr	r1, [pc, #48]	; (80059b4 <__NVIC_SetPriority+0x4c>)
 8005982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005986:	0112      	lsls	r2, r2, #4
 8005988:	b2d2      	uxtb	r2, r2
 800598a:	440b      	add	r3, r1
 800598c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005990:	e00a      	b.n	80059a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	b2da      	uxtb	r2, r3
 8005996:	4908      	ldr	r1, [pc, #32]	; (80059b8 <__NVIC_SetPriority+0x50>)
 8005998:	79fb      	ldrb	r3, [r7, #7]
 800599a:	f003 030f 	and.w	r3, r3, #15
 800599e:	3b04      	subs	r3, #4
 80059a0:	0112      	lsls	r2, r2, #4
 80059a2:	b2d2      	uxtb	r2, r2
 80059a4:	440b      	add	r3, r1
 80059a6:	761a      	strb	r2, [r3, #24]
}
 80059a8:	bf00      	nop
 80059aa:	370c      	adds	r7, #12
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr
 80059b4:	e000e100 	.word	0xe000e100
 80059b8:	e000ed00 	.word	0xe000ed00

080059bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80059bc:	b480      	push	{r7}
 80059be:	b089      	sub	sp, #36	; 0x24
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	60b9      	str	r1, [r7, #8]
 80059c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f003 0307 	and.w	r3, r3, #7
 80059ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	f1c3 0307 	rsb	r3, r3, #7
 80059d6:	2b04      	cmp	r3, #4
 80059d8:	bf28      	it	cs
 80059da:	2304      	movcs	r3, #4
 80059dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	3304      	adds	r3, #4
 80059e2:	2b06      	cmp	r3, #6
 80059e4:	d902      	bls.n	80059ec <NVIC_EncodePriority+0x30>
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	3b03      	subs	r3, #3
 80059ea:	e000      	b.n	80059ee <NVIC_EncodePriority+0x32>
 80059ec:	2300      	movs	r3, #0
 80059ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80059f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80059f4:	69bb      	ldr	r3, [r7, #24]
 80059f6:	fa02 f303 	lsl.w	r3, r2, r3
 80059fa:	43da      	mvns	r2, r3
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	401a      	ands	r2, r3
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005a04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8005a0e:	43d9      	mvns	r1, r3
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a14:	4313      	orrs	r3, r2
         );
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3724      	adds	r7, #36	; 0x24
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr
	...

08005a24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b082      	sub	sp, #8
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	3b01      	subs	r3, #1
 8005a30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a34:	d301      	bcc.n	8005a3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005a36:	2301      	movs	r3, #1
 8005a38:	e00f      	b.n	8005a5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005a3a:	4a0a      	ldr	r2, [pc, #40]	; (8005a64 <SysTick_Config+0x40>)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	3b01      	subs	r3, #1
 8005a40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005a42:	210f      	movs	r1, #15
 8005a44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a48:	f7ff ff8e 	bl	8005968 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005a4c:	4b05      	ldr	r3, [pc, #20]	; (8005a64 <SysTick_Config+0x40>)
 8005a4e:	2200      	movs	r2, #0
 8005a50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005a52:	4b04      	ldr	r3, [pc, #16]	; (8005a64 <SysTick_Config+0x40>)
 8005a54:	2207      	movs	r2, #7
 8005a56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005a58:	2300      	movs	r3, #0
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3708      	adds	r7, #8
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
 8005a62:	bf00      	nop
 8005a64:	e000e010 	.word	0xe000e010

08005a68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b082      	sub	sp, #8
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f7ff fee7 	bl	8005844 <__NVIC_SetPriorityGrouping>
}
 8005a76:	bf00      	nop
 8005a78:	3708      	adds	r7, #8
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}

08005a7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005a7e:	b580      	push	{r7, lr}
 8005a80:	b086      	sub	sp, #24
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	4603      	mov	r3, r0
 8005a86:	60b9      	str	r1, [r7, #8]
 8005a88:	607a      	str	r2, [r7, #4]
 8005a8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005a90:	f7ff fefc 	bl	800588c <__NVIC_GetPriorityGrouping>
 8005a94:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	68b9      	ldr	r1, [r7, #8]
 8005a9a:	6978      	ldr	r0, [r7, #20]
 8005a9c:	f7ff ff8e 	bl	80059bc <NVIC_EncodePriority>
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005aa6:	4611      	mov	r1, r2
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f7ff ff5d 	bl	8005968 <__NVIC_SetPriority>
}
 8005aae:	bf00      	nop
 8005ab0:	3718      	adds	r7, #24
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}

08005ab6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ab6:	b580      	push	{r7, lr}
 8005ab8:	b082      	sub	sp, #8
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	4603      	mov	r3, r0
 8005abe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f7ff feef 	bl	80058a8 <__NVIC_EnableIRQ>
}
 8005aca:	bf00      	nop
 8005acc:	3708      	adds	r7, #8
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}

08005ad2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005ad2:	b580      	push	{r7, lr}
 8005ad4:	b082      	sub	sp, #8
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	4603      	mov	r3, r0
 8005ada:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f7ff feff 	bl	80058e4 <__NVIC_DisableIRQ>
}
 8005ae6:	bf00      	nop
 8005ae8:	3708      	adds	r7, #8
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}

08005aee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005aee:	b580      	push	{r7, lr}
 8005af0:	b082      	sub	sp, #8
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f7ff ff94 	bl	8005a24 <SysTick_Config>
 8005afc:	4603      	mov	r3, r0
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3708      	adds	r7, #8
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}

08005b06 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8005b06:	b580      	push	{r7, lr}
 8005b08:	b082      	sub	sp, #8
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8005b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b14:	4618      	mov	r0, r3
 8005b16:	f7ff ff09 	bl	800592c <__NVIC_ClearPendingIRQ>
}
 8005b1a:	bf00      	nop
 8005b1c:	3708      	adds	r7, #8
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
	...

08005b24 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b085      	sub	sp, #20
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d101      	bne.n	8005b36 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	e098      	b.n	8005c68 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	4b4d      	ldr	r3, [pc, #308]	; (8005c74 <HAL_DMA_Init+0x150>)
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d80f      	bhi.n	8005b62 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	461a      	mov	r2, r3
 8005b48:	4b4b      	ldr	r3, [pc, #300]	; (8005c78 <HAL_DMA_Init+0x154>)
 8005b4a:	4413      	add	r3, r2
 8005b4c:	4a4b      	ldr	r2, [pc, #300]	; (8005c7c <HAL_DMA_Init+0x158>)
 8005b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b52:	091b      	lsrs	r3, r3, #4
 8005b54:	009a      	lsls	r2, r3, #2
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a48      	ldr	r2, [pc, #288]	; (8005c80 <HAL_DMA_Init+0x15c>)
 8005b5e:	641a      	str	r2, [r3, #64]	; 0x40
 8005b60:	e00e      	b.n	8005b80 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	461a      	mov	r2, r3
 8005b68:	4b46      	ldr	r3, [pc, #280]	; (8005c84 <HAL_DMA_Init+0x160>)
 8005b6a:	4413      	add	r3, r2
 8005b6c:	4a43      	ldr	r2, [pc, #268]	; (8005c7c <HAL_DMA_Init+0x158>)
 8005b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b72:	091b      	lsrs	r3, r3, #4
 8005b74:	009a      	lsls	r2, r3, #2
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a42      	ldr	r2, [pc, #264]	; (8005c88 <HAL_DMA_Init+0x164>)
 8005b7e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2202      	movs	r2, #2
 8005b84:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b9a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005ba4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	691b      	ldr	r3, [r3, #16]
 8005baa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	699b      	ldr	r3, [r3, #24]
 8005bb6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005bbc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6a1b      	ldr	r3, [r3, #32]
 8005bc2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005bc4:	68fa      	ldr	r2, [r7, #12]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	68fa      	ldr	r2, [r7, #12]
 8005bd0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005bda:	d039      	beq.n	8005c50 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be0:	4a27      	ldr	r2, [pc, #156]	; (8005c80 <HAL_DMA_Init+0x15c>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d11a      	bne.n	8005c1c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005be6:	4b29      	ldr	r3, [pc, #164]	; (8005c8c <HAL_DMA_Init+0x168>)
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bee:	f003 031c 	and.w	r3, r3, #28
 8005bf2:	210f      	movs	r1, #15
 8005bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8005bf8:	43db      	mvns	r3, r3
 8005bfa:	4924      	ldr	r1, [pc, #144]	; (8005c8c <HAL_DMA_Init+0x168>)
 8005bfc:	4013      	ands	r3, r2
 8005bfe:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005c00:	4b22      	ldr	r3, [pc, #136]	; (8005c8c <HAL_DMA_Init+0x168>)
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6859      	ldr	r1, [r3, #4]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c0c:	f003 031c 	and.w	r3, r3, #28
 8005c10:	fa01 f303 	lsl.w	r3, r1, r3
 8005c14:	491d      	ldr	r1, [pc, #116]	; (8005c8c <HAL_DMA_Init+0x168>)
 8005c16:	4313      	orrs	r3, r2
 8005c18:	600b      	str	r3, [r1, #0]
 8005c1a:	e019      	b.n	8005c50 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005c1c:	4b1c      	ldr	r3, [pc, #112]	; (8005c90 <HAL_DMA_Init+0x16c>)
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c24:	f003 031c 	and.w	r3, r3, #28
 8005c28:	210f      	movs	r1, #15
 8005c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8005c2e:	43db      	mvns	r3, r3
 8005c30:	4917      	ldr	r1, [pc, #92]	; (8005c90 <HAL_DMA_Init+0x16c>)
 8005c32:	4013      	ands	r3, r2
 8005c34:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005c36:	4b16      	ldr	r3, [pc, #88]	; (8005c90 <HAL_DMA_Init+0x16c>)
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6859      	ldr	r1, [r3, #4]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c42:	f003 031c 	and.w	r3, r3, #28
 8005c46:	fa01 f303 	lsl.w	r3, r1, r3
 8005c4a:	4911      	ldr	r1, [pc, #68]	; (8005c90 <HAL_DMA_Init+0x16c>)
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2201      	movs	r2, #1
 8005c5a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005c66:	2300      	movs	r3, #0
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3714      	adds	r7, #20
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr
 8005c74:	40020407 	.word	0x40020407
 8005c78:	bffdfff8 	.word	0xbffdfff8
 8005c7c:	cccccccd 	.word	0xcccccccd
 8005c80:	40020000 	.word	0x40020000
 8005c84:	bffdfbf8 	.word	0xbffdfbf8
 8005c88:	40020400 	.word	0x40020400
 8005c8c:	400200a8 	.word	0x400200a8
 8005c90:	400204a8 	.word	0x400204a8

08005c94 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b086      	sub	sp, #24
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	60b9      	str	r1, [r7, #8]
 8005c9e:	607a      	str	r2, [r7, #4]
 8005ca0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d101      	bne.n	8005cb4 <HAL_DMA_Start_IT+0x20>
 8005cb0:	2302      	movs	r3, #2
 8005cb2:	e04b      	b.n	8005d4c <HAL_DMA_Start_IT+0xb8>
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d13a      	bne.n	8005d3e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2202      	movs	r2, #2
 8005ccc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f022 0201 	bic.w	r2, r2, #1
 8005ce4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	687a      	ldr	r2, [r7, #4]
 8005cea:	68b9      	ldr	r1, [r7, #8]
 8005cec:	68f8      	ldr	r0, [r7, #12]
 8005cee:	f000 f9a7 	bl	8006040 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d008      	beq.n	8005d0c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f042 020e 	orr.w	r2, r2, #14
 8005d08:	601a      	str	r2, [r3, #0]
 8005d0a:	e00f      	b.n	8005d2c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f022 0204 	bic.w	r2, r2, #4
 8005d1a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f042 020a 	orr.w	r2, r2, #10
 8005d2a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f042 0201 	orr.w	r2, r2, #1
 8005d3a:	601a      	str	r2, [r3, #0]
 8005d3c:	e005      	b.n	8005d4a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2200      	movs	r2, #0
 8005d42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005d46:	2302      	movs	r3, #2
 8005d48:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005d4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3718      	adds	r7, #24
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b085      	sub	sp, #20
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	2b02      	cmp	r3, #2
 8005d6a:	d008      	beq.n	8005d7e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2204      	movs	r2, #4
 8005d70:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e022      	b.n	8005dc4 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f022 020e 	bic.w	r2, r2, #14
 8005d8c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f022 0201 	bic.w	r2, r2, #1
 8005d9c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005da2:	f003 021c 	and.w	r2, r3, #28
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005daa:	2101      	movs	r1, #1
 8005dac:	fa01 f202 	lsl.w	r2, r1, r2
 8005db0:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2201      	movs	r2, #1
 8005db6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8005dc2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3714      	adds	r7, #20
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b084      	sub	sp, #16
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005de2:	b2db      	uxtb	r3, r3
 8005de4:	2b02      	cmp	r3, #2
 8005de6:	d005      	beq.n	8005df4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2204      	movs	r2, #4
 8005dec:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	73fb      	strb	r3, [r7, #15]
 8005df2:	e029      	b.n	8005e48 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f022 020e 	bic.w	r2, r2, #14
 8005e02:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f022 0201 	bic.w	r2, r2, #1
 8005e12:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e18:	f003 021c 	and.w	r2, r3, #28
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e20:	2101      	movs	r1, #1
 8005e22:	fa01 f202 	lsl.w	r2, r1, r2
 8005e26:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d003      	beq.n	8005e48 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	4798      	blx	r3
    }
  }
  return status;
 8005e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3710      	adds	r7, #16
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}

08005e52 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005e52:	b580      	push	{r7, lr}
 8005e54:	b084      	sub	sp, #16
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e6e:	f003 031c 	and.w	r3, r3, #28
 8005e72:	2204      	movs	r2, #4
 8005e74:	409a      	lsls	r2, r3
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	4013      	ands	r3, r2
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d026      	beq.n	8005ecc <HAL_DMA_IRQHandler+0x7a>
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	f003 0304 	and.w	r3, r3, #4
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d021      	beq.n	8005ecc <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f003 0320 	and.w	r3, r3, #32
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d107      	bne.n	8005ea6 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f022 0204 	bic.w	r2, r2, #4
 8005ea4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eaa:	f003 021c 	and.w	r2, r3, #28
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb2:	2104      	movs	r1, #4
 8005eb4:	fa01 f202 	lsl.w	r2, r1, r2
 8005eb8:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d071      	beq.n	8005fa6 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8005eca:	e06c      	b.n	8005fa6 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ed0:	f003 031c 	and.w	r3, r3, #28
 8005ed4:	2202      	movs	r2, #2
 8005ed6:	409a      	lsls	r2, r3
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	4013      	ands	r3, r2
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d02e      	beq.n	8005f3e <HAL_DMA_IRQHandler+0xec>
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	f003 0302 	and.w	r3, r3, #2
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d029      	beq.n	8005f3e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f003 0320 	and.w	r3, r3, #32
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d10b      	bne.n	8005f10 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f022 020a 	bic.w	r2, r2, #10
 8005f06:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f14:	f003 021c 	and.w	r2, r3, #28
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1c:	2102      	movs	r1, #2
 8005f1e:	fa01 f202 	lsl.w	r2, r1, r2
 8005f22:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d038      	beq.n	8005fa6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005f3c:	e033      	b.n	8005fa6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f42:	f003 031c 	and.w	r3, r3, #28
 8005f46:	2208      	movs	r2, #8
 8005f48:	409a      	lsls	r2, r3
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	4013      	ands	r3, r2
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d02a      	beq.n	8005fa8 <HAL_DMA_IRQHandler+0x156>
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	f003 0308 	and.w	r3, r3, #8
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d025      	beq.n	8005fa8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f022 020e 	bic.w	r2, r2, #14
 8005f6a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f70:	f003 021c 	and.w	r2, r3, #28
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f78:	2101      	movs	r1, #1
 8005f7a:	fa01 f202 	lsl.w	r2, r1, r2
 8005f7e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2201      	movs	r2, #1
 8005f84:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2201      	movs	r2, #1
 8005f8a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d004      	beq.n	8005fa8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005fa6:	bf00      	nop
 8005fa8:	bf00      	nop
}
 8005faa:	3710      	adds	r7, #16
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}

08005fb0 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)( DMA_HandleTypeDef * _hdma))
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b087      	sub	sp, #28
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	60f8      	str	r0, [r7, #12]
 8005fb8:	460b      	mov	r3, r1
 8005fba:	607a      	str	r2, [r7, #4]
 8005fbc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d101      	bne.n	8005fd0 <HAL_DMA_RegisterCallback+0x20>
 8005fcc:	2302      	movs	r3, #2
 8005fce:	e031      	b.n	8006034 <HAL_DMA_RegisterCallback+0x84>
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005fde:	b2db      	uxtb	r3, r3
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d120      	bne.n	8006026 <HAL_DMA_RegisterCallback+0x76>
  {
    switch (CallbackID)
 8005fe4:	7afb      	ldrb	r3, [r7, #11]
 8005fe6:	2b03      	cmp	r3, #3
 8005fe8:	d81a      	bhi.n	8006020 <HAL_DMA_RegisterCallback+0x70>
 8005fea:	a201      	add	r2, pc, #4	; (adr r2, 8005ff0 <HAL_DMA_RegisterCallback+0x40>)
 8005fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ff0:	08006001 	.word	0x08006001
 8005ff4:	08006009 	.word	0x08006009
 8005ff8:	08006011 	.word	0x08006011
 8005ffc:	08006019 	.word	0x08006019
    {
     case  HAL_DMA_XFER_CPLT_CB_ID:
           hdma->XferCpltCallback = pCallback;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	687a      	ldr	r2, [r7, #4]
 8006004:	62da      	str	r2, [r3, #44]	; 0x2c
           break;
 8006006:	e010      	b.n	800602a <HAL_DMA_RegisterCallback+0x7a>

     case  HAL_DMA_XFER_HALFCPLT_CB_ID:
           hdma->XferHalfCpltCallback = pCallback;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	631a      	str	r2, [r3, #48]	; 0x30
           break;
 800600e:	e00c      	b.n	800602a <HAL_DMA_RegisterCallback+0x7a>

     case  HAL_DMA_XFER_ERROR_CB_ID:
           hdma->XferErrorCallback = pCallback;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	635a      	str	r2, [r3, #52]	; 0x34
           break;
 8006016:	e008      	b.n	800602a <HAL_DMA_RegisterCallback+0x7a>

     case  HAL_DMA_XFER_ABORT_CB_ID:
           hdma->XferAbortCallback = pCallback;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	687a      	ldr	r2, [r7, #4]
 800601c:	639a      	str	r2, [r3, #56]	; 0x38
           break;
 800601e:	e004      	b.n	800602a <HAL_DMA_RegisterCallback+0x7a>

     default:
           status = HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	75fb      	strb	r3, [r7, #23]
           break;
 8006024:	e001      	b.n	800602a <HAL_DMA_RegisterCallback+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2200      	movs	r2, #0
 800602e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8006032:	7dfb      	ldrb	r3, [r7, #23]
}
 8006034:	4618      	mov	r0, r3
 8006036:	371c      	adds	r7, #28
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr

08006040 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006040:	b480      	push	{r7}
 8006042:	b085      	sub	sp, #20
 8006044:	af00      	add	r7, sp, #0
 8006046:	60f8      	str	r0, [r7, #12]
 8006048:	60b9      	str	r1, [r7, #8]
 800604a:	607a      	str	r2, [r7, #4]
 800604c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006052:	f003 021c 	and.w	r2, r3, #28
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605a:	2101      	movs	r1, #1
 800605c:	fa01 f202 	lsl.w	r2, r1, r2
 8006060:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	683a      	ldr	r2, [r7, #0]
 8006068:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	2b10      	cmp	r3, #16
 8006070:	d108      	bne.n	8006084 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	68ba      	ldr	r2, [r7, #8]
 8006080:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006082:	e007      	b.n	8006094 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	68ba      	ldr	r2, [r7, #8]
 800608a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	687a      	ldr	r2, [r7, #4]
 8006092:	60da      	str	r2, [r3, #12]
}
 8006094:	bf00      	nop
 8006096:	3714      	adds	r7, #20
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr

080060a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b087      	sub	sp, #28
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80060aa:	2300      	movs	r3, #0
 80060ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80060ae:	e154      	b.n	800635a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	2101      	movs	r1, #1
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	fa01 f303 	lsl.w	r3, r1, r3
 80060bc:	4013      	ands	r3, r2
 80060be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	f000 8146 	beq.w	8006354 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	f003 0303 	and.w	r3, r3, #3
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d005      	beq.n	80060e0 <HAL_GPIO_Init+0x40>
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	f003 0303 	and.w	r3, r3, #3
 80060dc:	2b02      	cmp	r3, #2
 80060de:	d130      	bne.n	8006142 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	005b      	lsls	r3, r3, #1
 80060ea:	2203      	movs	r2, #3
 80060ec:	fa02 f303 	lsl.w	r3, r2, r3
 80060f0:	43db      	mvns	r3, r3
 80060f2:	693a      	ldr	r2, [r7, #16]
 80060f4:	4013      	ands	r3, r2
 80060f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	68da      	ldr	r2, [r3, #12]
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	005b      	lsls	r3, r3, #1
 8006100:	fa02 f303 	lsl.w	r3, r2, r3
 8006104:	693a      	ldr	r2, [r7, #16]
 8006106:	4313      	orrs	r3, r2
 8006108:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	693a      	ldr	r2, [r7, #16]
 800610e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006116:	2201      	movs	r2, #1
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	fa02 f303 	lsl.w	r3, r2, r3
 800611e:	43db      	mvns	r3, r3
 8006120:	693a      	ldr	r2, [r7, #16]
 8006122:	4013      	ands	r3, r2
 8006124:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	091b      	lsrs	r3, r3, #4
 800612c:	f003 0201 	and.w	r2, r3, #1
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	fa02 f303 	lsl.w	r3, r2, r3
 8006136:	693a      	ldr	r2, [r7, #16]
 8006138:	4313      	orrs	r3, r2
 800613a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	693a      	ldr	r2, [r7, #16]
 8006140:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	f003 0303 	and.w	r3, r3, #3
 800614a:	2b03      	cmp	r3, #3
 800614c:	d017      	beq.n	800617e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	005b      	lsls	r3, r3, #1
 8006158:	2203      	movs	r2, #3
 800615a:	fa02 f303 	lsl.w	r3, r2, r3
 800615e:	43db      	mvns	r3, r3
 8006160:	693a      	ldr	r2, [r7, #16]
 8006162:	4013      	ands	r3, r2
 8006164:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	689a      	ldr	r2, [r3, #8]
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	005b      	lsls	r3, r3, #1
 800616e:	fa02 f303 	lsl.w	r3, r2, r3
 8006172:	693a      	ldr	r2, [r7, #16]
 8006174:	4313      	orrs	r3, r2
 8006176:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	693a      	ldr	r2, [r7, #16]
 800617c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	f003 0303 	and.w	r3, r3, #3
 8006186:	2b02      	cmp	r3, #2
 8006188:	d123      	bne.n	80061d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	08da      	lsrs	r2, r3, #3
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	3208      	adds	r2, #8
 8006192:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006196:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	f003 0307 	and.w	r3, r3, #7
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	220f      	movs	r2, #15
 80061a2:	fa02 f303 	lsl.w	r3, r2, r3
 80061a6:	43db      	mvns	r3, r3
 80061a8:	693a      	ldr	r2, [r7, #16]
 80061aa:	4013      	ands	r3, r2
 80061ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	691a      	ldr	r2, [r3, #16]
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	f003 0307 	and.w	r3, r3, #7
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	fa02 f303 	lsl.w	r3, r2, r3
 80061be:	693a      	ldr	r2, [r7, #16]
 80061c0:	4313      	orrs	r3, r2
 80061c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	08da      	lsrs	r2, r3, #3
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	3208      	adds	r2, #8
 80061cc:	6939      	ldr	r1, [r7, #16]
 80061ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	005b      	lsls	r3, r3, #1
 80061dc:	2203      	movs	r2, #3
 80061de:	fa02 f303 	lsl.w	r3, r2, r3
 80061e2:	43db      	mvns	r3, r3
 80061e4:	693a      	ldr	r2, [r7, #16]
 80061e6:	4013      	ands	r3, r2
 80061e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	f003 0203 	and.w	r2, r3, #3
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	005b      	lsls	r3, r3, #1
 80061f6:	fa02 f303 	lsl.w	r3, r2, r3
 80061fa:	693a      	ldr	r2, [r7, #16]
 80061fc:	4313      	orrs	r3, r2
 80061fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	693a      	ldr	r2, [r7, #16]
 8006204:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800620e:	2b00      	cmp	r3, #0
 8006210:	f000 80a0 	beq.w	8006354 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006214:	4b58      	ldr	r3, [pc, #352]	; (8006378 <HAL_GPIO_Init+0x2d8>)
 8006216:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006218:	4a57      	ldr	r2, [pc, #348]	; (8006378 <HAL_GPIO_Init+0x2d8>)
 800621a:	f043 0301 	orr.w	r3, r3, #1
 800621e:	6613      	str	r3, [r2, #96]	; 0x60
 8006220:	4b55      	ldr	r3, [pc, #340]	; (8006378 <HAL_GPIO_Init+0x2d8>)
 8006222:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006224:	f003 0301 	and.w	r3, r3, #1
 8006228:	60bb      	str	r3, [r7, #8]
 800622a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800622c:	4a53      	ldr	r2, [pc, #332]	; (800637c <HAL_GPIO_Init+0x2dc>)
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	089b      	lsrs	r3, r3, #2
 8006232:	3302      	adds	r3, #2
 8006234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006238:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	f003 0303 	and.w	r3, r3, #3
 8006240:	009b      	lsls	r3, r3, #2
 8006242:	220f      	movs	r2, #15
 8006244:	fa02 f303 	lsl.w	r3, r2, r3
 8006248:	43db      	mvns	r3, r3
 800624a:	693a      	ldr	r2, [r7, #16]
 800624c:	4013      	ands	r3, r2
 800624e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006256:	d019      	beq.n	800628c <HAL_GPIO_Init+0x1ec>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	4a49      	ldr	r2, [pc, #292]	; (8006380 <HAL_GPIO_Init+0x2e0>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d013      	beq.n	8006288 <HAL_GPIO_Init+0x1e8>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	4a48      	ldr	r2, [pc, #288]	; (8006384 <HAL_GPIO_Init+0x2e4>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d00d      	beq.n	8006284 <HAL_GPIO_Init+0x1e4>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	4a47      	ldr	r2, [pc, #284]	; (8006388 <HAL_GPIO_Init+0x2e8>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d007      	beq.n	8006280 <HAL_GPIO_Init+0x1e0>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	4a46      	ldr	r2, [pc, #280]	; (800638c <HAL_GPIO_Init+0x2ec>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d101      	bne.n	800627c <HAL_GPIO_Init+0x1dc>
 8006278:	2304      	movs	r3, #4
 800627a:	e008      	b.n	800628e <HAL_GPIO_Init+0x1ee>
 800627c:	2307      	movs	r3, #7
 800627e:	e006      	b.n	800628e <HAL_GPIO_Init+0x1ee>
 8006280:	2303      	movs	r3, #3
 8006282:	e004      	b.n	800628e <HAL_GPIO_Init+0x1ee>
 8006284:	2302      	movs	r3, #2
 8006286:	e002      	b.n	800628e <HAL_GPIO_Init+0x1ee>
 8006288:	2301      	movs	r3, #1
 800628a:	e000      	b.n	800628e <HAL_GPIO_Init+0x1ee>
 800628c:	2300      	movs	r3, #0
 800628e:	697a      	ldr	r2, [r7, #20]
 8006290:	f002 0203 	and.w	r2, r2, #3
 8006294:	0092      	lsls	r2, r2, #2
 8006296:	4093      	lsls	r3, r2
 8006298:	693a      	ldr	r2, [r7, #16]
 800629a:	4313      	orrs	r3, r2
 800629c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800629e:	4937      	ldr	r1, [pc, #220]	; (800637c <HAL_GPIO_Init+0x2dc>)
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	089b      	lsrs	r3, r3, #2
 80062a4:	3302      	adds	r3, #2
 80062a6:	693a      	ldr	r2, [r7, #16]
 80062a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80062ac:	4b38      	ldr	r3, [pc, #224]	; (8006390 <HAL_GPIO_Init+0x2f0>)
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	43db      	mvns	r3, r3
 80062b6:	693a      	ldr	r2, [r7, #16]
 80062b8:	4013      	ands	r3, r2
 80062ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d003      	beq.n	80062d0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80062c8:	693a      	ldr	r2, [r7, #16]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	4313      	orrs	r3, r2
 80062ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80062d0:	4a2f      	ldr	r2, [pc, #188]	; (8006390 <HAL_GPIO_Init+0x2f0>)
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80062d6:	4b2e      	ldr	r3, [pc, #184]	; (8006390 <HAL_GPIO_Init+0x2f0>)
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	43db      	mvns	r3, r3
 80062e0:	693a      	ldr	r2, [r7, #16]
 80062e2:	4013      	ands	r3, r2
 80062e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d003      	beq.n	80062fa <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80062f2:	693a      	ldr	r2, [r7, #16]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	4313      	orrs	r3, r2
 80062f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80062fa:	4a25      	ldr	r2, [pc, #148]	; (8006390 <HAL_GPIO_Init+0x2f0>)
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006300:	4b23      	ldr	r3, [pc, #140]	; (8006390 <HAL_GPIO_Init+0x2f0>)
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	43db      	mvns	r3, r3
 800630a:	693a      	ldr	r2, [r7, #16]
 800630c:	4013      	ands	r3, r2
 800630e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006318:	2b00      	cmp	r3, #0
 800631a:	d003      	beq.n	8006324 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800631c:	693a      	ldr	r2, [r7, #16]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	4313      	orrs	r3, r2
 8006322:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006324:	4a1a      	ldr	r2, [pc, #104]	; (8006390 <HAL_GPIO_Init+0x2f0>)
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800632a:	4b19      	ldr	r3, [pc, #100]	; (8006390 <HAL_GPIO_Init+0x2f0>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	43db      	mvns	r3, r3
 8006334:	693a      	ldr	r2, [r7, #16]
 8006336:	4013      	ands	r3, r2
 8006338:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006342:	2b00      	cmp	r3, #0
 8006344:	d003      	beq.n	800634e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006346:	693a      	ldr	r2, [r7, #16]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	4313      	orrs	r3, r2
 800634c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800634e:	4a10      	ldr	r2, [pc, #64]	; (8006390 <HAL_GPIO_Init+0x2f0>)
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	3301      	adds	r3, #1
 8006358:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	fa22 f303 	lsr.w	r3, r2, r3
 8006364:	2b00      	cmp	r3, #0
 8006366:	f47f aea3 	bne.w	80060b0 <HAL_GPIO_Init+0x10>
  }
}
 800636a:	bf00      	nop
 800636c:	bf00      	nop
 800636e:	371c      	adds	r7, #28
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr
 8006378:	40021000 	.word	0x40021000
 800637c:	40010000 	.word	0x40010000
 8006380:	48000400 	.word	0x48000400
 8006384:	48000800 	.word	0x48000800
 8006388:	48000c00 	.word	0x48000c00
 800638c:	48001000 	.word	0x48001000
 8006390:	40010400 	.word	0x40010400

08006394 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	460b      	mov	r3, r1
 800639e:	807b      	strh	r3, [r7, #2]
 80063a0:	4613      	mov	r3, r2
 80063a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80063a4:	787b      	ldrb	r3, [r7, #1]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d003      	beq.n	80063b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80063aa:	887a      	ldrh	r2, [r7, #2]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80063b0:	e002      	b.n	80063b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80063b2:	887a      	ldrh	r2, [r7, #2]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80063b8:	bf00      	nop
 80063ba:	370c      	adds	r7, #12
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr

080063c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b082      	sub	sp, #8
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	4603      	mov	r3, r0
 80063cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80063ce:	4b08      	ldr	r3, [pc, #32]	; (80063f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80063d0:	695a      	ldr	r2, [r3, #20]
 80063d2:	88fb      	ldrh	r3, [r7, #6]
 80063d4:	4013      	ands	r3, r2
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d006      	beq.n	80063e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80063da:	4a05      	ldr	r2, [pc, #20]	; (80063f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80063dc:	88fb      	ldrh	r3, [r7, #6]
 80063de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80063e0:	88fb      	ldrh	r3, [r7, #6]
 80063e2:	4618      	mov	r0, r3
 80063e4:	f004 fe82 	bl	800b0ec <HAL_GPIO_EXTI_Callback>
  }
}
 80063e8:	bf00      	nop
 80063ea:	3708      	adds	r7, #8
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}
 80063f0:	40010400 	.word	0x40010400

080063f4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80063f4:	b480      	push	{r7}
 80063f6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80063f8:	4b05      	ldr	r3, [pc, #20]	; (8006410 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a04      	ldr	r2, [pc, #16]	; (8006410 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80063fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006402:	6013      	str	r3, [r2, #0]
}
 8006404:	bf00      	nop
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr
 800640e:	bf00      	nop
 8006410:	40007000 	.word	0x40007000

08006414 <HAL_PWR_ConfigPVD>:
  *         more details about the voltage thresholds corresponding to each
  *         detection level.
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 8006414:	b480      	push	{r7}
 8006416:	b083      	sub	sp, #12
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 800641c:	4b2b      	ldr	r3, [pc, #172]	; (80064cc <HAL_PWR_ConfigPVD+0xb8>)
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	f023 020e 	bic.w	r2, r3, #14
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4928      	ldr	r1, [pc, #160]	; (80064cc <HAL_PWR_ConfigPVD+0xb8>)
 800642a:	4313      	orrs	r3, r2
 800642c:	604b      	str	r3, [r1, #4]

  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 800642e:	4b28      	ldr	r3, [pc, #160]	; (80064d0 <HAL_PWR_ConfigPVD+0xbc>)
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	4a27      	ldr	r2, [pc, #156]	; (80064d0 <HAL_PWR_ConfigPVD+0xbc>)
 8006434:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006438:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 800643a:	4b25      	ldr	r3, [pc, #148]	; (80064d0 <HAL_PWR_ConfigPVD+0xbc>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a24      	ldr	r2, [pc, #144]	; (80064d0 <HAL_PWR_ConfigPVD+0xbc>)
 8006440:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006444:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 8006446:	4b22      	ldr	r3, [pc, #136]	; (80064d0 <HAL_PWR_ConfigPVD+0xbc>)
 8006448:	68db      	ldr	r3, [r3, #12]
 800644a:	4a21      	ldr	r2, [pc, #132]	; (80064d0 <HAL_PWR_ConfigPVD+0xbc>)
 800644c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006450:	60d3      	str	r3, [r2, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8006452:	4b1f      	ldr	r3, [pc, #124]	; (80064d0 <HAL_PWR_ConfigPVD+0xbc>)
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	4a1e      	ldr	r2, [pc, #120]	; (80064d0 <HAL_PWR_ConfigPVD+0xbc>)
 8006458:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800645c:	6093      	str	r3, [r2, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006466:	2b00      	cmp	r3, #0
 8006468:	d005      	beq.n	8006476 <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 800646a:	4b19      	ldr	r3, [pc, #100]	; (80064d0 <HAL_PWR_ConfigPVD+0xbc>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a18      	ldr	r2, [pc, #96]	; (80064d0 <HAL_PWR_ConfigPVD+0xbc>)
 8006470:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006474:	6013      	str	r3, [r2, #0]
  }

  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800647e:	2b00      	cmp	r3, #0
 8006480:	d005      	beq.n	800648e <HAL_PWR_ConfigPVD+0x7a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 8006482:	4b13      	ldr	r3, [pc, #76]	; (80064d0 <HAL_PWR_ConfigPVD+0xbc>)
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	4a12      	ldr	r2, [pc, #72]	; (80064d0 <HAL_PWR_ConfigPVD+0xbc>)
 8006488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800648c:	6053      	str	r3, [r2, #4]
  }

  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	f003 0301 	and.w	r3, r3, #1
 8006496:	2b00      	cmp	r3, #0
 8006498:	d005      	beq.n	80064a6 <HAL_PWR_ConfigPVD+0x92>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 800649a:	4b0d      	ldr	r3, [pc, #52]	; (80064d0 <HAL_PWR_ConfigPVD+0xbc>)
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	4a0c      	ldr	r2, [pc, #48]	; (80064d0 <HAL_PWR_ConfigPVD+0xbc>)
 80064a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064a4:	6093      	str	r3, [r2, #8]
  }

  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	f003 0302 	and.w	r3, r3, #2
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d005      	beq.n	80064be <HAL_PWR_ConfigPVD+0xaa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 80064b2:	4b07      	ldr	r3, [pc, #28]	; (80064d0 <HAL_PWR_ConfigPVD+0xbc>)
 80064b4:	68db      	ldr	r3, [r3, #12]
 80064b6:	4a06      	ldr	r2, [pc, #24]	; (80064d0 <HAL_PWR_ConfigPVD+0xbc>)
 80064b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064bc:	60d3      	str	r3, [r2, #12]
  }

  return HAL_OK;
 80064be:	2300      	movs	r3, #0
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	370c      	adds	r7, #12
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr
 80064cc:	40007000 	.word	0x40007000
 80064d0:	40010400 	.word	0x40010400

080064d4 <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Power Voltage Detector (PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 80064d4:	b480      	push	{r7}
 80064d6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 80064d8:	4b05      	ldr	r3, [pc, #20]	; (80064f0 <HAL_PWR_EnablePVD+0x1c>)
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	4a04      	ldr	r2, [pc, #16]	; (80064f0 <HAL_PWR_EnablePVD+0x1c>)
 80064de:	f043 0301 	orr.w	r3, r3, #1
 80064e2:	6053      	str	r3, [r2, #4]
}
 80064e4:	bf00      	nop
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr
 80064ee:	bf00      	nop
 80064f0:	40007000 	.word	0x40007000

080064f4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80064f4:	b480      	push	{r7}
 80064f6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80064f8:	4b04      	ldr	r3, [pc, #16]	; (800650c <HAL_PWREx_GetVoltageRange+0x18>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8006500:	4618      	mov	r0, r3
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr
 800650a:	bf00      	nop
 800650c:	40007000 	.word	0x40007000

08006510 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006510:	b480      	push	{r7}
 8006512:	b085      	sub	sp, #20
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800651e:	d130      	bne.n	8006582 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006520:	4b23      	ldr	r3, [pc, #140]	; (80065b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006528:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800652c:	d038      	beq.n	80065a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800652e:	4b20      	ldr	r3, [pc, #128]	; (80065b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006536:	4a1e      	ldr	r2, [pc, #120]	; (80065b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006538:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800653c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800653e:	4b1d      	ldr	r3, [pc, #116]	; (80065b4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	2232      	movs	r2, #50	; 0x32
 8006544:	fb02 f303 	mul.w	r3, r2, r3
 8006548:	4a1b      	ldr	r2, [pc, #108]	; (80065b8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800654a:	fba2 2303 	umull	r2, r3, r2, r3
 800654e:	0c9b      	lsrs	r3, r3, #18
 8006550:	3301      	adds	r3, #1
 8006552:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006554:	e002      	b.n	800655c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	3b01      	subs	r3, #1
 800655a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800655c:	4b14      	ldr	r3, [pc, #80]	; (80065b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800655e:	695b      	ldr	r3, [r3, #20]
 8006560:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006564:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006568:	d102      	bne.n	8006570 <HAL_PWREx_ControlVoltageScaling+0x60>
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d1f2      	bne.n	8006556 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006570:	4b0f      	ldr	r3, [pc, #60]	; (80065b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006572:	695b      	ldr	r3, [r3, #20]
 8006574:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006578:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800657c:	d110      	bne.n	80065a0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800657e:	2303      	movs	r3, #3
 8006580:	e00f      	b.n	80065a2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006582:	4b0b      	ldr	r3, [pc, #44]	; (80065b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800658a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800658e:	d007      	beq.n	80065a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006590:	4b07      	ldr	r3, [pc, #28]	; (80065b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006598:	4a05      	ldr	r2, [pc, #20]	; (80065b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800659a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800659e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80065a0:	2300      	movs	r3, #0
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3714      	adds	r7, #20
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr
 80065ae:	bf00      	nop
 80065b0:	40007000 	.word	0x40007000
 80065b4:	2000006c 	.word	0x2000006c
 80065b8:	431bde83 	.word	0x431bde83

080065bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b088      	sub	sp, #32
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d102      	bne.n	80065d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	f000 bc02 	b.w	8006dd4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80065d0:	4b96      	ldr	r3, [pc, #600]	; (800682c <HAL_RCC_OscConfig+0x270>)
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	f003 030c 	and.w	r3, r3, #12
 80065d8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80065da:	4b94      	ldr	r3, [pc, #592]	; (800682c <HAL_RCC_OscConfig+0x270>)
 80065dc:	68db      	ldr	r3, [r3, #12]
 80065de:	f003 0303 	and.w	r3, r3, #3
 80065e2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f003 0310 	and.w	r3, r3, #16
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	f000 80e4 	beq.w	80067ba <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80065f2:	69bb      	ldr	r3, [r7, #24]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d007      	beq.n	8006608 <HAL_RCC_OscConfig+0x4c>
 80065f8:	69bb      	ldr	r3, [r7, #24]
 80065fa:	2b0c      	cmp	r3, #12
 80065fc:	f040 808b 	bne.w	8006716 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	2b01      	cmp	r3, #1
 8006604:	f040 8087 	bne.w	8006716 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006608:	4b88      	ldr	r3, [pc, #544]	; (800682c <HAL_RCC_OscConfig+0x270>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f003 0302 	and.w	r3, r3, #2
 8006610:	2b00      	cmp	r3, #0
 8006612:	d005      	beq.n	8006620 <HAL_RCC_OscConfig+0x64>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	699b      	ldr	r3, [r3, #24]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d101      	bne.n	8006620 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800661c:	2301      	movs	r3, #1
 800661e:	e3d9      	b.n	8006dd4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6a1a      	ldr	r2, [r3, #32]
 8006624:	4b81      	ldr	r3, [pc, #516]	; (800682c <HAL_RCC_OscConfig+0x270>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f003 0308 	and.w	r3, r3, #8
 800662c:	2b00      	cmp	r3, #0
 800662e:	d004      	beq.n	800663a <HAL_RCC_OscConfig+0x7e>
 8006630:	4b7e      	ldr	r3, [pc, #504]	; (800682c <HAL_RCC_OscConfig+0x270>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006638:	e005      	b.n	8006646 <HAL_RCC_OscConfig+0x8a>
 800663a:	4b7c      	ldr	r3, [pc, #496]	; (800682c <HAL_RCC_OscConfig+0x270>)
 800663c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006640:	091b      	lsrs	r3, r3, #4
 8006642:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006646:	4293      	cmp	r3, r2
 8006648:	d223      	bcs.n	8006692 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6a1b      	ldr	r3, [r3, #32]
 800664e:	4618      	mov	r0, r3
 8006650:	f000 fd8c 	bl	800716c <RCC_SetFlashLatencyFromMSIRange>
 8006654:	4603      	mov	r3, r0
 8006656:	2b00      	cmp	r3, #0
 8006658:	d001      	beq.n	800665e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	e3ba      	b.n	8006dd4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800665e:	4b73      	ldr	r3, [pc, #460]	; (800682c <HAL_RCC_OscConfig+0x270>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a72      	ldr	r2, [pc, #456]	; (800682c <HAL_RCC_OscConfig+0x270>)
 8006664:	f043 0308 	orr.w	r3, r3, #8
 8006668:	6013      	str	r3, [r2, #0]
 800666a:	4b70      	ldr	r3, [pc, #448]	; (800682c <HAL_RCC_OscConfig+0x270>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6a1b      	ldr	r3, [r3, #32]
 8006676:	496d      	ldr	r1, [pc, #436]	; (800682c <HAL_RCC_OscConfig+0x270>)
 8006678:	4313      	orrs	r3, r2
 800667a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800667c:	4b6b      	ldr	r3, [pc, #428]	; (800682c <HAL_RCC_OscConfig+0x270>)
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	69db      	ldr	r3, [r3, #28]
 8006688:	021b      	lsls	r3, r3, #8
 800668a:	4968      	ldr	r1, [pc, #416]	; (800682c <HAL_RCC_OscConfig+0x270>)
 800668c:	4313      	orrs	r3, r2
 800668e:	604b      	str	r3, [r1, #4]
 8006690:	e025      	b.n	80066de <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006692:	4b66      	ldr	r3, [pc, #408]	; (800682c <HAL_RCC_OscConfig+0x270>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a65      	ldr	r2, [pc, #404]	; (800682c <HAL_RCC_OscConfig+0x270>)
 8006698:	f043 0308 	orr.w	r3, r3, #8
 800669c:	6013      	str	r3, [r2, #0]
 800669e:	4b63      	ldr	r3, [pc, #396]	; (800682c <HAL_RCC_OscConfig+0x270>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6a1b      	ldr	r3, [r3, #32]
 80066aa:	4960      	ldr	r1, [pc, #384]	; (800682c <HAL_RCC_OscConfig+0x270>)
 80066ac:	4313      	orrs	r3, r2
 80066ae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80066b0:	4b5e      	ldr	r3, [pc, #376]	; (800682c <HAL_RCC_OscConfig+0x270>)
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	69db      	ldr	r3, [r3, #28]
 80066bc:	021b      	lsls	r3, r3, #8
 80066be:	495b      	ldr	r1, [pc, #364]	; (800682c <HAL_RCC_OscConfig+0x270>)
 80066c0:	4313      	orrs	r3, r2
 80066c2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80066c4:	69bb      	ldr	r3, [r7, #24]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d109      	bne.n	80066de <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6a1b      	ldr	r3, [r3, #32]
 80066ce:	4618      	mov	r0, r3
 80066d0:	f000 fd4c 	bl	800716c <RCC_SetFlashLatencyFromMSIRange>
 80066d4:	4603      	mov	r3, r0
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d001      	beq.n	80066de <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	e37a      	b.n	8006dd4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80066de:	f000 fc81 	bl	8006fe4 <HAL_RCC_GetSysClockFreq>
 80066e2:	4602      	mov	r2, r0
 80066e4:	4b51      	ldr	r3, [pc, #324]	; (800682c <HAL_RCC_OscConfig+0x270>)
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	091b      	lsrs	r3, r3, #4
 80066ea:	f003 030f 	and.w	r3, r3, #15
 80066ee:	4950      	ldr	r1, [pc, #320]	; (8006830 <HAL_RCC_OscConfig+0x274>)
 80066f0:	5ccb      	ldrb	r3, [r1, r3]
 80066f2:	f003 031f 	and.w	r3, r3, #31
 80066f6:	fa22 f303 	lsr.w	r3, r2, r3
 80066fa:	4a4e      	ldr	r2, [pc, #312]	; (8006834 <HAL_RCC_OscConfig+0x278>)
 80066fc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80066fe:	4b4e      	ldr	r3, [pc, #312]	; (8006838 <HAL_RCC_OscConfig+0x27c>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4618      	mov	r0, r3
 8006704:	f7ff f832 	bl	800576c <HAL_InitTick>
 8006708:	4603      	mov	r3, r0
 800670a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800670c:	7bfb      	ldrb	r3, [r7, #15]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d052      	beq.n	80067b8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8006712:	7bfb      	ldrb	r3, [r7, #15]
 8006714:	e35e      	b.n	8006dd4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	699b      	ldr	r3, [r3, #24]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d032      	beq.n	8006784 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800671e:	4b43      	ldr	r3, [pc, #268]	; (800682c <HAL_RCC_OscConfig+0x270>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a42      	ldr	r2, [pc, #264]	; (800682c <HAL_RCC_OscConfig+0x270>)
 8006724:	f043 0301 	orr.w	r3, r3, #1
 8006728:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800672a:	f7ff f85b 	bl	80057e4 <HAL_GetTick>
 800672e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006730:	e008      	b.n	8006744 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006732:	f7ff f857 	bl	80057e4 <HAL_GetTick>
 8006736:	4602      	mov	r2, r0
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	1ad3      	subs	r3, r2, r3
 800673c:	2b02      	cmp	r3, #2
 800673e:	d901      	bls.n	8006744 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8006740:	2303      	movs	r3, #3
 8006742:	e347      	b.n	8006dd4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006744:	4b39      	ldr	r3, [pc, #228]	; (800682c <HAL_RCC_OscConfig+0x270>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f003 0302 	and.w	r3, r3, #2
 800674c:	2b00      	cmp	r3, #0
 800674e:	d0f0      	beq.n	8006732 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006750:	4b36      	ldr	r3, [pc, #216]	; (800682c <HAL_RCC_OscConfig+0x270>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a35      	ldr	r2, [pc, #212]	; (800682c <HAL_RCC_OscConfig+0x270>)
 8006756:	f043 0308 	orr.w	r3, r3, #8
 800675a:	6013      	str	r3, [r2, #0]
 800675c:	4b33      	ldr	r3, [pc, #204]	; (800682c <HAL_RCC_OscConfig+0x270>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6a1b      	ldr	r3, [r3, #32]
 8006768:	4930      	ldr	r1, [pc, #192]	; (800682c <HAL_RCC_OscConfig+0x270>)
 800676a:	4313      	orrs	r3, r2
 800676c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800676e:	4b2f      	ldr	r3, [pc, #188]	; (800682c <HAL_RCC_OscConfig+0x270>)
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	69db      	ldr	r3, [r3, #28]
 800677a:	021b      	lsls	r3, r3, #8
 800677c:	492b      	ldr	r1, [pc, #172]	; (800682c <HAL_RCC_OscConfig+0x270>)
 800677e:	4313      	orrs	r3, r2
 8006780:	604b      	str	r3, [r1, #4]
 8006782:	e01a      	b.n	80067ba <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006784:	4b29      	ldr	r3, [pc, #164]	; (800682c <HAL_RCC_OscConfig+0x270>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a28      	ldr	r2, [pc, #160]	; (800682c <HAL_RCC_OscConfig+0x270>)
 800678a:	f023 0301 	bic.w	r3, r3, #1
 800678e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006790:	f7ff f828 	bl	80057e4 <HAL_GetTick>
 8006794:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006796:	e008      	b.n	80067aa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006798:	f7ff f824 	bl	80057e4 <HAL_GetTick>
 800679c:	4602      	mov	r2, r0
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	1ad3      	subs	r3, r2, r3
 80067a2:	2b02      	cmp	r3, #2
 80067a4:	d901      	bls.n	80067aa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80067a6:	2303      	movs	r3, #3
 80067a8:	e314      	b.n	8006dd4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80067aa:	4b20      	ldr	r3, [pc, #128]	; (800682c <HAL_RCC_OscConfig+0x270>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f003 0302 	and.w	r3, r3, #2
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d1f0      	bne.n	8006798 <HAL_RCC_OscConfig+0x1dc>
 80067b6:	e000      	b.n	80067ba <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80067b8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f003 0301 	and.w	r3, r3, #1
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d073      	beq.n	80068ae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80067c6:	69bb      	ldr	r3, [r7, #24]
 80067c8:	2b08      	cmp	r3, #8
 80067ca:	d005      	beq.n	80067d8 <HAL_RCC_OscConfig+0x21c>
 80067cc:	69bb      	ldr	r3, [r7, #24]
 80067ce:	2b0c      	cmp	r3, #12
 80067d0:	d10e      	bne.n	80067f0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	2b03      	cmp	r3, #3
 80067d6:	d10b      	bne.n	80067f0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067d8:	4b14      	ldr	r3, [pc, #80]	; (800682c <HAL_RCC_OscConfig+0x270>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d063      	beq.n	80068ac <HAL_RCC_OscConfig+0x2f0>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d15f      	bne.n	80068ac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80067ec:	2301      	movs	r3, #1
 80067ee:	e2f1      	b.n	8006dd4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067f8:	d106      	bne.n	8006808 <HAL_RCC_OscConfig+0x24c>
 80067fa:	4b0c      	ldr	r3, [pc, #48]	; (800682c <HAL_RCC_OscConfig+0x270>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a0b      	ldr	r2, [pc, #44]	; (800682c <HAL_RCC_OscConfig+0x270>)
 8006800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006804:	6013      	str	r3, [r2, #0]
 8006806:	e025      	b.n	8006854 <HAL_RCC_OscConfig+0x298>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006810:	d114      	bne.n	800683c <HAL_RCC_OscConfig+0x280>
 8006812:	4b06      	ldr	r3, [pc, #24]	; (800682c <HAL_RCC_OscConfig+0x270>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a05      	ldr	r2, [pc, #20]	; (800682c <HAL_RCC_OscConfig+0x270>)
 8006818:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800681c:	6013      	str	r3, [r2, #0]
 800681e:	4b03      	ldr	r3, [pc, #12]	; (800682c <HAL_RCC_OscConfig+0x270>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a02      	ldr	r2, [pc, #8]	; (800682c <HAL_RCC_OscConfig+0x270>)
 8006824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006828:	6013      	str	r3, [r2, #0]
 800682a:	e013      	b.n	8006854 <HAL_RCC_OscConfig+0x298>
 800682c:	40021000 	.word	0x40021000
 8006830:	0800c6a4 	.word	0x0800c6a4
 8006834:	2000006c 	.word	0x2000006c
 8006838:	20000064 	.word	0x20000064
 800683c:	4ba0      	ldr	r3, [pc, #640]	; (8006ac0 <HAL_RCC_OscConfig+0x504>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a9f      	ldr	r2, [pc, #636]	; (8006ac0 <HAL_RCC_OscConfig+0x504>)
 8006842:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006846:	6013      	str	r3, [r2, #0]
 8006848:	4b9d      	ldr	r3, [pc, #628]	; (8006ac0 <HAL_RCC_OscConfig+0x504>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a9c      	ldr	r2, [pc, #624]	; (8006ac0 <HAL_RCC_OscConfig+0x504>)
 800684e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006852:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d013      	beq.n	8006884 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800685c:	f7fe ffc2 	bl	80057e4 <HAL_GetTick>
 8006860:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006862:	e008      	b.n	8006876 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006864:	f7fe ffbe 	bl	80057e4 <HAL_GetTick>
 8006868:	4602      	mov	r2, r0
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	1ad3      	subs	r3, r2, r3
 800686e:	2b64      	cmp	r3, #100	; 0x64
 8006870:	d901      	bls.n	8006876 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006872:	2303      	movs	r3, #3
 8006874:	e2ae      	b.n	8006dd4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006876:	4b92      	ldr	r3, [pc, #584]	; (8006ac0 <HAL_RCC_OscConfig+0x504>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800687e:	2b00      	cmp	r3, #0
 8006880:	d0f0      	beq.n	8006864 <HAL_RCC_OscConfig+0x2a8>
 8006882:	e014      	b.n	80068ae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006884:	f7fe ffae 	bl	80057e4 <HAL_GetTick>
 8006888:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800688a:	e008      	b.n	800689e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800688c:	f7fe ffaa 	bl	80057e4 <HAL_GetTick>
 8006890:	4602      	mov	r2, r0
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	1ad3      	subs	r3, r2, r3
 8006896:	2b64      	cmp	r3, #100	; 0x64
 8006898:	d901      	bls.n	800689e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800689a:	2303      	movs	r3, #3
 800689c:	e29a      	b.n	8006dd4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800689e:	4b88      	ldr	r3, [pc, #544]	; (8006ac0 <HAL_RCC_OscConfig+0x504>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d1f0      	bne.n	800688c <HAL_RCC_OscConfig+0x2d0>
 80068aa:	e000      	b.n	80068ae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f003 0302 	and.w	r3, r3, #2
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d060      	beq.n	800697c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80068ba:	69bb      	ldr	r3, [r7, #24]
 80068bc:	2b04      	cmp	r3, #4
 80068be:	d005      	beq.n	80068cc <HAL_RCC_OscConfig+0x310>
 80068c0:	69bb      	ldr	r3, [r7, #24]
 80068c2:	2b0c      	cmp	r3, #12
 80068c4:	d119      	bne.n	80068fa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	2b02      	cmp	r3, #2
 80068ca:	d116      	bne.n	80068fa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80068cc:	4b7c      	ldr	r3, [pc, #496]	; (8006ac0 <HAL_RCC_OscConfig+0x504>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d005      	beq.n	80068e4 <HAL_RCC_OscConfig+0x328>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	68db      	ldr	r3, [r3, #12]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d101      	bne.n	80068e4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80068e0:	2301      	movs	r3, #1
 80068e2:	e277      	b.n	8006dd4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068e4:	4b76      	ldr	r3, [pc, #472]	; (8006ac0 <HAL_RCC_OscConfig+0x504>)
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	691b      	ldr	r3, [r3, #16]
 80068f0:	061b      	lsls	r3, r3, #24
 80068f2:	4973      	ldr	r1, [pc, #460]	; (8006ac0 <HAL_RCC_OscConfig+0x504>)
 80068f4:	4313      	orrs	r3, r2
 80068f6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80068f8:	e040      	b.n	800697c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	68db      	ldr	r3, [r3, #12]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d023      	beq.n	800694a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006902:	4b6f      	ldr	r3, [pc, #444]	; (8006ac0 <HAL_RCC_OscConfig+0x504>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a6e      	ldr	r2, [pc, #440]	; (8006ac0 <HAL_RCC_OscConfig+0x504>)
 8006908:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800690c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800690e:	f7fe ff69 	bl	80057e4 <HAL_GetTick>
 8006912:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006914:	e008      	b.n	8006928 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006916:	f7fe ff65 	bl	80057e4 <HAL_GetTick>
 800691a:	4602      	mov	r2, r0
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	1ad3      	subs	r3, r2, r3
 8006920:	2b02      	cmp	r3, #2
 8006922:	d901      	bls.n	8006928 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006924:	2303      	movs	r3, #3
 8006926:	e255      	b.n	8006dd4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006928:	4b65      	ldr	r3, [pc, #404]	; (8006ac0 <HAL_RCC_OscConfig+0x504>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006930:	2b00      	cmp	r3, #0
 8006932:	d0f0      	beq.n	8006916 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006934:	4b62      	ldr	r3, [pc, #392]	; (8006ac0 <HAL_RCC_OscConfig+0x504>)
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	691b      	ldr	r3, [r3, #16]
 8006940:	061b      	lsls	r3, r3, #24
 8006942:	495f      	ldr	r1, [pc, #380]	; (8006ac0 <HAL_RCC_OscConfig+0x504>)
 8006944:	4313      	orrs	r3, r2
 8006946:	604b      	str	r3, [r1, #4]
 8006948:	e018      	b.n	800697c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800694a:	4b5d      	ldr	r3, [pc, #372]	; (8006ac0 <HAL_RCC_OscConfig+0x504>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a5c      	ldr	r2, [pc, #368]	; (8006ac0 <HAL_RCC_OscConfig+0x504>)
 8006950:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006954:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006956:	f7fe ff45 	bl	80057e4 <HAL_GetTick>
 800695a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800695c:	e008      	b.n	8006970 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800695e:	f7fe ff41 	bl	80057e4 <HAL_GetTick>
 8006962:	4602      	mov	r2, r0
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	1ad3      	subs	r3, r2, r3
 8006968:	2b02      	cmp	r3, #2
 800696a:	d901      	bls.n	8006970 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800696c:	2303      	movs	r3, #3
 800696e:	e231      	b.n	8006dd4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006970:	4b53      	ldr	r3, [pc, #332]	; (8006ac0 <HAL_RCC_OscConfig+0x504>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006978:	2b00      	cmp	r3, #0
 800697a:	d1f0      	bne.n	800695e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f003 0308 	and.w	r3, r3, #8
 8006984:	2b00      	cmp	r3, #0
 8006986:	d03c      	beq.n	8006a02 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	695b      	ldr	r3, [r3, #20]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d01c      	beq.n	80069ca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006990:	4b4b      	ldr	r3, [pc, #300]	; (8006ac0 <HAL_RCC_OscConfig+0x504>)
 8006992:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006996:	4a4a      	ldr	r2, [pc, #296]	; (8006ac0 <HAL_RCC_OscConfig+0x504>)
 8006998:	f043 0301 	orr.w	r3, r3, #1
 800699c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069a0:	f7fe ff20 	bl	80057e4 <HAL_GetTick>
 80069a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80069a6:	e008      	b.n	80069ba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069a8:	f7fe ff1c 	bl	80057e4 <HAL_GetTick>
 80069ac:	4602      	mov	r2, r0
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	1ad3      	subs	r3, r2, r3
 80069b2:	2b02      	cmp	r3, #2
 80069b4:	d901      	bls.n	80069ba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80069b6:	2303      	movs	r3, #3
 80069b8:	e20c      	b.n	8006dd4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80069ba:	4b41      	ldr	r3, [pc, #260]	; (8006ac0 <HAL_RCC_OscConfig+0x504>)
 80069bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069c0:	f003 0302 	and.w	r3, r3, #2
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d0ef      	beq.n	80069a8 <HAL_RCC_OscConfig+0x3ec>
 80069c8:	e01b      	b.n	8006a02 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80069ca:	4b3d      	ldr	r3, [pc, #244]	; (8006ac0 <HAL_RCC_OscConfig+0x504>)
 80069cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069d0:	4a3b      	ldr	r2, [pc, #236]	; (8006ac0 <HAL_RCC_OscConfig+0x504>)
 80069d2:	f023 0301 	bic.w	r3, r3, #1
 80069d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069da:	f7fe ff03 	bl	80057e4 <HAL_GetTick>
 80069de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80069e0:	e008      	b.n	80069f4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069e2:	f7fe feff 	bl	80057e4 <HAL_GetTick>
 80069e6:	4602      	mov	r2, r0
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	1ad3      	subs	r3, r2, r3
 80069ec:	2b02      	cmp	r3, #2
 80069ee:	d901      	bls.n	80069f4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80069f0:	2303      	movs	r3, #3
 80069f2:	e1ef      	b.n	8006dd4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80069f4:	4b32      	ldr	r3, [pc, #200]	; (8006ac0 <HAL_RCC_OscConfig+0x504>)
 80069f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069fa:	f003 0302 	and.w	r3, r3, #2
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d1ef      	bne.n	80069e2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f003 0304 	and.w	r3, r3, #4
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	f000 80a6 	beq.w	8006b5c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a10:	2300      	movs	r3, #0
 8006a12:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006a14:	4b2a      	ldr	r3, [pc, #168]	; (8006ac0 <HAL_RCC_OscConfig+0x504>)
 8006a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d10d      	bne.n	8006a3c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a20:	4b27      	ldr	r3, [pc, #156]	; (8006ac0 <HAL_RCC_OscConfig+0x504>)
 8006a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a24:	4a26      	ldr	r2, [pc, #152]	; (8006ac0 <HAL_RCC_OscConfig+0x504>)
 8006a26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a2a:	6593      	str	r3, [r2, #88]	; 0x58
 8006a2c:	4b24      	ldr	r3, [pc, #144]	; (8006ac0 <HAL_RCC_OscConfig+0x504>)
 8006a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a34:	60bb      	str	r3, [r7, #8]
 8006a36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a3c:	4b21      	ldr	r3, [pc, #132]	; (8006ac4 <HAL_RCC_OscConfig+0x508>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d118      	bne.n	8006a7a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006a48:	4b1e      	ldr	r3, [pc, #120]	; (8006ac4 <HAL_RCC_OscConfig+0x508>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a1d      	ldr	r2, [pc, #116]	; (8006ac4 <HAL_RCC_OscConfig+0x508>)
 8006a4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a52:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a54:	f7fe fec6 	bl	80057e4 <HAL_GetTick>
 8006a58:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a5a:	e008      	b.n	8006a6e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a5c:	f7fe fec2 	bl	80057e4 <HAL_GetTick>
 8006a60:	4602      	mov	r2, r0
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	1ad3      	subs	r3, r2, r3
 8006a66:	2b02      	cmp	r3, #2
 8006a68:	d901      	bls.n	8006a6e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006a6a:	2303      	movs	r3, #3
 8006a6c:	e1b2      	b.n	8006dd4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a6e:	4b15      	ldr	r3, [pc, #84]	; (8006ac4 <HAL_RCC_OscConfig+0x508>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d0f0      	beq.n	8006a5c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	d108      	bne.n	8006a94 <HAL_RCC_OscConfig+0x4d8>
 8006a82:	4b0f      	ldr	r3, [pc, #60]	; (8006ac0 <HAL_RCC_OscConfig+0x504>)
 8006a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a88:	4a0d      	ldr	r2, [pc, #52]	; (8006ac0 <HAL_RCC_OscConfig+0x504>)
 8006a8a:	f043 0301 	orr.w	r3, r3, #1
 8006a8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006a92:	e029      	b.n	8006ae8 <HAL_RCC_OscConfig+0x52c>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	2b05      	cmp	r3, #5
 8006a9a:	d115      	bne.n	8006ac8 <HAL_RCC_OscConfig+0x50c>
 8006a9c:	4b08      	ldr	r3, [pc, #32]	; (8006ac0 <HAL_RCC_OscConfig+0x504>)
 8006a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006aa2:	4a07      	ldr	r2, [pc, #28]	; (8006ac0 <HAL_RCC_OscConfig+0x504>)
 8006aa4:	f043 0304 	orr.w	r3, r3, #4
 8006aa8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006aac:	4b04      	ldr	r3, [pc, #16]	; (8006ac0 <HAL_RCC_OscConfig+0x504>)
 8006aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ab2:	4a03      	ldr	r2, [pc, #12]	; (8006ac0 <HAL_RCC_OscConfig+0x504>)
 8006ab4:	f043 0301 	orr.w	r3, r3, #1
 8006ab8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006abc:	e014      	b.n	8006ae8 <HAL_RCC_OscConfig+0x52c>
 8006abe:	bf00      	nop
 8006ac0:	40021000 	.word	0x40021000
 8006ac4:	40007000 	.word	0x40007000
 8006ac8:	4b9a      	ldr	r3, [pc, #616]	; (8006d34 <HAL_RCC_OscConfig+0x778>)
 8006aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ace:	4a99      	ldr	r2, [pc, #612]	; (8006d34 <HAL_RCC_OscConfig+0x778>)
 8006ad0:	f023 0301 	bic.w	r3, r3, #1
 8006ad4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006ad8:	4b96      	ldr	r3, [pc, #600]	; (8006d34 <HAL_RCC_OscConfig+0x778>)
 8006ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ade:	4a95      	ldr	r2, [pc, #596]	; (8006d34 <HAL_RCC_OscConfig+0x778>)
 8006ae0:	f023 0304 	bic.w	r3, r3, #4
 8006ae4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	689b      	ldr	r3, [r3, #8]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d016      	beq.n	8006b1e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006af0:	f7fe fe78 	bl	80057e4 <HAL_GetTick>
 8006af4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006af6:	e00a      	b.n	8006b0e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006af8:	f7fe fe74 	bl	80057e4 <HAL_GetTick>
 8006afc:	4602      	mov	r2, r0
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	1ad3      	subs	r3, r2, r3
 8006b02:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d901      	bls.n	8006b0e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8006b0a:	2303      	movs	r3, #3
 8006b0c:	e162      	b.n	8006dd4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b0e:	4b89      	ldr	r3, [pc, #548]	; (8006d34 <HAL_RCC_OscConfig+0x778>)
 8006b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b14:	f003 0302 	and.w	r3, r3, #2
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d0ed      	beq.n	8006af8 <HAL_RCC_OscConfig+0x53c>
 8006b1c:	e015      	b.n	8006b4a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b1e:	f7fe fe61 	bl	80057e4 <HAL_GetTick>
 8006b22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006b24:	e00a      	b.n	8006b3c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b26:	f7fe fe5d 	bl	80057e4 <HAL_GetTick>
 8006b2a:	4602      	mov	r2, r0
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	1ad3      	subs	r3, r2, r3
 8006b30:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d901      	bls.n	8006b3c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006b38:	2303      	movs	r3, #3
 8006b3a:	e14b      	b.n	8006dd4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006b3c:	4b7d      	ldr	r3, [pc, #500]	; (8006d34 <HAL_RCC_OscConfig+0x778>)
 8006b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b42:	f003 0302 	and.w	r3, r3, #2
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d1ed      	bne.n	8006b26 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006b4a:	7ffb      	ldrb	r3, [r7, #31]
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d105      	bne.n	8006b5c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b50:	4b78      	ldr	r3, [pc, #480]	; (8006d34 <HAL_RCC_OscConfig+0x778>)
 8006b52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b54:	4a77      	ldr	r2, [pc, #476]	; (8006d34 <HAL_RCC_OscConfig+0x778>)
 8006b56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b5a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f003 0320 	and.w	r3, r3, #32
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d03c      	beq.n	8006be2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d01c      	beq.n	8006baa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006b70:	4b70      	ldr	r3, [pc, #448]	; (8006d34 <HAL_RCC_OscConfig+0x778>)
 8006b72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b76:	4a6f      	ldr	r2, [pc, #444]	; (8006d34 <HAL_RCC_OscConfig+0x778>)
 8006b78:	f043 0301 	orr.w	r3, r3, #1
 8006b7c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b80:	f7fe fe30 	bl	80057e4 <HAL_GetTick>
 8006b84:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006b86:	e008      	b.n	8006b9a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006b88:	f7fe fe2c 	bl	80057e4 <HAL_GetTick>
 8006b8c:	4602      	mov	r2, r0
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	1ad3      	subs	r3, r2, r3
 8006b92:	2b02      	cmp	r3, #2
 8006b94:	d901      	bls.n	8006b9a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8006b96:	2303      	movs	r3, #3
 8006b98:	e11c      	b.n	8006dd4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006b9a:	4b66      	ldr	r3, [pc, #408]	; (8006d34 <HAL_RCC_OscConfig+0x778>)
 8006b9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006ba0:	f003 0302 	and.w	r3, r3, #2
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d0ef      	beq.n	8006b88 <HAL_RCC_OscConfig+0x5cc>
 8006ba8:	e01b      	b.n	8006be2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006baa:	4b62      	ldr	r3, [pc, #392]	; (8006d34 <HAL_RCC_OscConfig+0x778>)
 8006bac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006bb0:	4a60      	ldr	r2, [pc, #384]	; (8006d34 <HAL_RCC_OscConfig+0x778>)
 8006bb2:	f023 0301 	bic.w	r3, r3, #1
 8006bb6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bba:	f7fe fe13 	bl	80057e4 <HAL_GetTick>
 8006bbe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006bc0:	e008      	b.n	8006bd4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006bc2:	f7fe fe0f 	bl	80057e4 <HAL_GetTick>
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	1ad3      	subs	r3, r2, r3
 8006bcc:	2b02      	cmp	r3, #2
 8006bce:	d901      	bls.n	8006bd4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8006bd0:	2303      	movs	r3, #3
 8006bd2:	e0ff      	b.n	8006dd4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006bd4:	4b57      	ldr	r3, [pc, #348]	; (8006d34 <HAL_RCC_OscConfig+0x778>)
 8006bd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006bda:	f003 0302 	and.w	r3, r3, #2
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d1ef      	bne.n	8006bc2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	f000 80f3 	beq.w	8006dd2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bf0:	2b02      	cmp	r3, #2
 8006bf2:	f040 80c9 	bne.w	8006d88 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006bf6:	4b4f      	ldr	r3, [pc, #316]	; (8006d34 <HAL_RCC_OscConfig+0x778>)
 8006bf8:	68db      	ldr	r3, [r3, #12]
 8006bfa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	f003 0203 	and.w	r2, r3, #3
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c06:	429a      	cmp	r2, r3
 8006c08:	d12c      	bne.n	8006c64 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c14:	3b01      	subs	r3, #1
 8006c16:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	d123      	bne.n	8006c64 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c26:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d11b      	bne.n	8006c64 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c36:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d113      	bne.n	8006c64 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c46:	085b      	lsrs	r3, r3, #1
 8006c48:	3b01      	subs	r3, #1
 8006c4a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d109      	bne.n	8006c64 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c5a:	085b      	lsrs	r3, r3, #1
 8006c5c:	3b01      	subs	r3, #1
 8006c5e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d06b      	beq.n	8006d3c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006c64:	69bb      	ldr	r3, [r7, #24]
 8006c66:	2b0c      	cmp	r3, #12
 8006c68:	d062      	beq.n	8006d30 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006c6a:	4b32      	ldr	r3, [pc, #200]	; (8006d34 <HAL_RCC_OscConfig+0x778>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d001      	beq.n	8006c7a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	e0ac      	b.n	8006dd4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006c7a:	4b2e      	ldr	r3, [pc, #184]	; (8006d34 <HAL_RCC_OscConfig+0x778>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a2d      	ldr	r2, [pc, #180]	; (8006d34 <HAL_RCC_OscConfig+0x778>)
 8006c80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c84:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006c86:	f7fe fdad 	bl	80057e4 <HAL_GetTick>
 8006c8a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c8c:	e008      	b.n	8006ca0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c8e:	f7fe fda9 	bl	80057e4 <HAL_GetTick>
 8006c92:	4602      	mov	r2, r0
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	1ad3      	subs	r3, r2, r3
 8006c98:	2b02      	cmp	r3, #2
 8006c9a:	d901      	bls.n	8006ca0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8006c9c:	2303      	movs	r3, #3
 8006c9e:	e099      	b.n	8006dd4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ca0:	4b24      	ldr	r3, [pc, #144]	; (8006d34 <HAL_RCC_OscConfig+0x778>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d1f0      	bne.n	8006c8e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006cac:	4b21      	ldr	r3, [pc, #132]	; (8006d34 <HAL_RCC_OscConfig+0x778>)
 8006cae:	68da      	ldr	r2, [r3, #12]
 8006cb0:	4b21      	ldr	r3, [pc, #132]	; (8006d38 <HAL_RCC_OscConfig+0x77c>)
 8006cb2:	4013      	ands	r3, r2
 8006cb4:	687a      	ldr	r2, [r7, #4]
 8006cb6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006cb8:	687a      	ldr	r2, [r7, #4]
 8006cba:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006cbc:	3a01      	subs	r2, #1
 8006cbe:	0112      	lsls	r2, r2, #4
 8006cc0:	4311      	orrs	r1, r2
 8006cc2:	687a      	ldr	r2, [r7, #4]
 8006cc4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006cc6:	0212      	lsls	r2, r2, #8
 8006cc8:	4311      	orrs	r1, r2
 8006cca:	687a      	ldr	r2, [r7, #4]
 8006ccc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006cce:	0852      	lsrs	r2, r2, #1
 8006cd0:	3a01      	subs	r2, #1
 8006cd2:	0552      	lsls	r2, r2, #21
 8006cd4:	4311      	orrs	r1, r2
 8006cd6:	687a      	ldr	r2, [r7, #4]
 8006cd8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006cda:	0852      	lsrs	r2, r2, #1
 8006cdc:	3a01      	subs	r2, #1
 8006cde:	0652      	lsls	r2, r2, #25
 8006ce0:	4311      	orrs	r1, r2
 8006ce2:	687a      	ldr	r2, [r7, #4]
 8006ce4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006ce6:	06d2      	lsls	r2, r2, #27
 8006ce8:	430a      	orrs	r2, r1
 8006cea:	4912      	ldr	r1, [pc, #72]	; (8006d34 <HAL_RCC_OscConfig+0x778>)
 8006cec:	4313      	orrs	r3, r2
 8006cee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006cf0:	4b10      	ldr	r3, [pc, #64]	; (8006d34 <HAL_RCC_OscConfig+0x778>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a0f      	ldr	r2, [pc, #60]	; (8006d34 <HAL_RCC_OscConfig+0x778>)
 8006cf6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006cfa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006cfc:	4b0d      	ldr	r3, [pc, #52]	; (8006d34 <HAL_RCC_OscConfig+0x778>)
 8006cfe:	68db      	ldr	r3, [r3, #12]
 8006d00:	4a0c      	ldr	r2, [pc, #48]	; (8006d34 <HAL_RCC_OscConfig+0x778>)
 8006d02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006d06:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006d08:	f7fe fd6c 	bl	80057e4 <HAL_GetTick>
 8006d0c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d0e:	e008      	b.n	8006d22 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d10:	f7fe fd68 	bl	80057e4 <HAL_GetTick>
 8006d14:	4602      	mov	r2, r0
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	1ad3      	subs	r3, r2, r3
 8006d1a:	2b02      	cmp	r3, #2
 8006d1c:	d901      	bls.n	8006d22 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8006d1e:	2303      	movs	r3, #3
 8006d20:	e058      	b.n	8006dd4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d22:	4b04      	ldr	r3, [pc, #16]	; (8006d34 <HAL_RCC_OscConfig+0x778>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d0f0      	beq.n	8006d10 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006d2e:	e050      	b.n	8006dd2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006d30:	2301      	movs	r3, #1
 8006d32:	e04f      	b.n	8006dd4 <HAL_RCC_OscConfig+0x818>
 8006d34:	40021000 	.word	0x40021000
 8006d38:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d3c:	4b27      	ldr	r3, [pc, #156]	; (8006ddc <HAL_RCC_OscConfig+0x820>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d144      	bne.n	8006dd2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006d48:	4b24      	ldr	r3, [pc, #144]	; (8006ddc <HAL_RCC_OscConfig+0x820>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a23      	ldr	r2, [pc, #140]	; (8006ddc <HAL_RCC_OscConfig+0x820>)
 8006d4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006d52:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006d54:	4b21      	ldr	r3, [pc, #132]	; (8006ddc <HAL_RCC_OscConfig+0x820>)
 8006d56:	68db      	ldr	r3, [r3, #12]
 8006d58:	4a20      	ldr	r2, [pc, #128]	; (8006ddc <HAL_RCC_OscConfig+0x820>)
 8006d5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006d5e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006d60:	f7fe fd40 	bl	80057e4 <HAL_GetTick>
 8006d64:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d66:	e008      	b.n	8006d7a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d68:	f7fe fd3c 	bl	80057e4 <HAL_GetTick>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	1ad3      	subs	r3, r2, r3
 8006d72:	2b02      	cmp	r3, #2
 8006d74:	d901      	bls.n	8006d7a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8006d76:	2303      	movs	r3, #3
 8006d78:	e02c      	b.n	8006dd4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d7a:	4b18      	ldr	r3, [pc, #96]	; (8006ddc <HAL_RCC_OscConfig+0x820>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d0f0      	beq.n	8006d68 <HAL_RCC_OscConfig+0x7ac>
 8006d86:	e024      	b.n	8006dd2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006d88:	69bb      	ldr	r3, [r7, #24]
 8006d8a:	2b0c      	cmp	r3, #12
 8006d8c:	d01f      	beq.n	8006dce <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d8e:	4b13      	ldr	r3, [pc, #76]	; (8006ddc <HAL_RCC_OscConfig+0x820>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a12      	ldr	r2, [pc, #72]	; (8006ddc <HAL_RCC_OscConfig+0x820>)
 8006d94:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d9a:	f7fe fd23 	bl	80057e4 <HAL_GetTick>
 8006d9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006da0:	e008      	b.n	8006db4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006da2:	f7fe fd1f 	bl	80057e4 <HAL_GetTick>
 8006da6:	4602      	mov	r2, r0
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	1ad3      	subs	r3, r2, r3
 8006dac:	2b02      	cmp	r3, #2
 8006dae:	d901      	bls.n	8006db4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8006db0:	2303      	movs	r3, #3
 8006db2:	e00f      	b.n	8006dd4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006db4:	4b09      	ldr	r3, [pc, #36]	; (8006ddc <HAL_RCC_OscConfig+0x820>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d1f0      	bne.n	8006da2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8006dc0:	4b06      	ldr	r3, [pc, #24]	; (8006ddc <HAL_RCC_OscConfig+0x820>)
 8006dc2:	68da      	ldr	r2, [r3, #12]
 8006dc4:	4905      	ldr	r1, [pc, #20]	; (8006ddc <HAL_RCC_OscConfig+0x820>)
 8006dc6:	4b06      	ldr	r3, [pc, #24]	; (8006de0 <HAL_RCC_OscConfig+0x824>)
 8006dc8:	4013      	ands	r3, r2
 8006dca:	60cb      	str	r3, [r1, #12]
 8006dcc:	e001      	b.n	8006dd2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	e000      	b.n	8006dd4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8006dd2:	2300      	movs	r3, #0
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3720      	adds	r7, #32
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}
 8006ddc:	40021000 	.word	0x40021000
 8006de0:	feeefffc 	.word	0xfeeefffc

08006de4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b084      	sub	sp, #16
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d101      	bne.n	8006df8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006df4:	2301      	movs	r3, #1
 8006df6:	e0e7      	b.n	8006fc8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006df8:	4b75      	ldr	r3, [pc, #468]	; (8006fd0 <HAL_RCC_ClockConfig+0x1ec>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f003 0307 	and.w	r3, r3, #7
 8006e00:	683a      	ldr	r2, [r7, #0]
 8006e02:	429a      	cmp	r2, r3
 8006e04:	d910      	bls.n	8006e28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e06:	4b72      	ldr	r3, [pc, #456]	; (8006fd0 <HAL_RCC_ClockConfig+0x1ec>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f023 0207 	bic.w	r2, r3, #7
 8006e0e:	4970      	ldr	r1, [pc, #448]	; (8006fd0 <HAL_RCC_ClockConfig+0x1ec>)
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	4313      	orrs	r3, r2
 8006e14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e16:	4b6e      	ldr	r3, [pc, #440]	; (8006fd0 <HAL_RCC_ClockConfig+0x1ec>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f003 0307 	and.w	r3, r3, #7
 8006e1e:	683a      	ldr	r2, [r7, #0]
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d001      	beq.n	8006e28 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006e24:	2301      	movs	r3, #1
 8006e26:	e0cf      	b.n	8006fc8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f003 0302 	and.w	r3, r3, #2
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d010      	beq.n	8006e56 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	689a      	ldr	r2, [r3, #8]
 8006e38:	4b66      	ldr	r3, [pc, #408]	; (8006fd4 <HAL_RCC_ClockConfig+0x1f0>)
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d908      	bls.n	8006e56 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e44:	4b63      	ldr	r3, [pc, #396]	; (8006fd4 <HAL_RCC_ClockConfig+0x1f0>)
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	4960      	ldr	r1, [pc, #384]	; (8006fd4 <HAL_RCC_ClockConfig+0x1f0>)
 8006e52:	4313      	orrs	r3, r2
 8006e54:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f003 0301 	and.w	r3, r3, #1
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d04c      	beq.n	8006efc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	2b03      	cmp	r3, #3
 8006e68:	d107      	bne.n	8006e7a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e6a:	4b5a      	ldr	r3, [pc, #360]	; (8006fd4 <HAL_RCC_ClockConfig+0x1f0>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d121      	bne.n	8006eba <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	e0a6      	b.n	8006fc8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	2b02      	cmp	r3, #2
 8006e80:	d107      	bne.n	8006e92 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006e82:	4b54      	ldr	r3, [pc, #336]	; (8006fd4 <HAL_RCC_ClockConfig+0x1f0>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d115      	bne.n	8006eba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	e09a      	b.n	8006fc8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d107      	bne.n	8006eaa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006e9a:	4b4e      	ldr	r3, [pc, #312]	; (8006fd4 <HAL_RCC_ClockConfig+0x1f0>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f003 0302 	and.w	r3, r3, #2
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d109      	bne.n	8006eba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	e08e      	b.n	8006fc8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006eaa:	4b4a      	ldr	r3, [pc, #296]	; (8006fd4 <HAL_RCC_ClockConfig+0x1f0>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d101      	bne.n	8006eba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	e086      	b.n	8006fc8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006eba:	4b46      	ldr	r3, [pc, #280]	; (8006fd4 <HAL_RCC_ClockConfig+0x1f0>)
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	f023 0203 	bic.w	r2, r3, #3
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	4943      	ldr	r1, [pc, #268]	; (8006fd4 <HAL_RCC_ClockConfig+0x1f0>)
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ecc:	f7fe fc8a 	bl	80057e4 <HAL_GetTick>
 8006ed0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ed2:	e00a      	b.n	8006eea <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ed4:	f7fe fc86 	bl	80057e4 <HAL_GetTick>
 8006ed8:	4602      	mov	r2, r0
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	1ad3      	subs	r3, r2, r3
 8006ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d901      	bls.n	8006eea <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006ee6:	2303      	movs	r3, #3
 8006ee8:	e06e      	b.n	8006fc8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006eea:	4b3a      	ldr	r3, [pc, #232]	; (8006fd4 <HAL_RCC_ClockConfig+0x1f0>)
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	f003 020c 	and.w	r2, r3, #12
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	009b      	lsls	r3, r3, #2
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	d1eb      	bne.n	8006ed4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f003 0302 	and.w	r3, r3, #2
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d010      	beq.n	8006f2a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	689a      	ldr	r2, [r3, #8]
 8006f0c:	4b31      	ldr	r3, [pc, #196]	; (8006fd4 <HAL_RCC_ClockConfig+0x1f0>)
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d208      	bcs.n	8006f2a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f18:	4b2e      	ldr	r3, [pc, #184]	; (8006fd4 <HAL_RCC_ClockConfig+0x1f0>)
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	492b      	ldr	r1, [pc, #172]	; (8006fd4 <HAL_RCC_ClockConfig+0x1f0>)
 8006f26:	4313      	orrs	r3, r2
 8006f28:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006f2a:	4b29      	ldr	r3, [pc, #164]	; (8006fd0 <HAL_RCC_ClockConfig+0x1ec>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f003 0307 	and.w	r3, r3, #7
 8006f32:	683a      	ldr	r2, [r7, #0]
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d210      	bcs.n	8006f5a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f38:	4b25      	ldr	r3, [pc, #148]	; (8006fd0 <HAL_RCC_ClockConfig+0x1ec>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f023 0207 	bic.w	r2, r3, #7
 8006f40:	4923      	ldr	r1, [pc, #140]	; (8006fd0 <HAL_RCC_ClockConfig+0x1ec>)
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	4313      	orrs	r3, r2
 8006f46:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f48:	4b21      	ldr	r3, [pc, #132]	; (8006fd0 <HAL_RCC_ClockConfig+0x1ec>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f003 0307 	and.w	r3, r3, #7
 8006f50:	683a      	ldr	r2, [r7, #0]
 8006f52:	429a      	cmp	r2, r3
 8006f54:	d001      	beq.n	8006f5a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006f56:	2301      	movs	r3, #1
 8006f58:	e036      	b.n	8006fc8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f003 0304 	and.w	r3, r3, #4
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d008      	beq.n	8006f78 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f66:	4b1b      	ldr	r3, [pc, #108]	; (8006fd4 <HAL_RCC_ClockConfig+0x1f0>)
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	68db      	ldr	r3, [r3, #12]
 8006f72:	4918      	ldr	r1, [pc, #96]	; (8006fd4 <HAL_RCC_ClockConfig+0x1f0>)
 8006f74:	4313      	orrs	r3, r2
 8006f76:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f003 0308 	and.w	r3, r3, #8
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d009      	beq.n	8006f98 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006f84:	4b13      	ldr	r3, [pc, #76]	; (8006fd4 <HAL_RCC_ClockConfig+0x1f0>)
 8006f86:	689b      	ldr	r3, [r3, #8]
 8006f88:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	691b      	ldr	r3, [r3, #16]
 8006f90:	00db      	lsls	r3, r3, #3
 8006f92:	4910      	ldr	r1, [pc, #64]	; (8006fd4 <HAL_RCC_ClockConfig+0x1f0>)
 8006f94:	4313      	orrs	r3, r2
 8006f96:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006f98:	f000 f824 	bl	8006fe4 <HAL_RCC_GetSysClockFreq>
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	4b0d      	ldr	r3, [pc, #52]	; (8006fd4 <HAL_RCC_ClockConfig+0x1f0>)
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	091b      	lsrs	r3, r3, #4
 8006fa4:	f003 030f 	and.w	r3, r3, #15
 8006fa8:	490b      	ldr	r1, [pc, #44]	; (8006fd8 <HAL_RCC_ClockConfig+0x1f4>)
 8006faa:	5ccb      	ldrb	r3, [r1, r3]
 8006fac:	f003 031f 	and.w	r3, r3, #31
 8006fb0:	fa22 f303 	lsr.w	r3, r2, r3
 8006fb4:	4a09      	ldr	r2, [pc, #36]	; (8006fdc <HAL_RCC_ClockConfig+0x1f8>)
 8006fb6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006fb8:	4b09      	ldr	r3, [pc, #36]	; (8006fe0 <HAL_RCC_ClockConfig+0x1fc>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f7fe fbd5 	bl	800576c <HAL_InitTick>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	72fb      	strb	r3, [r7, #11]

  return status;
 8006fc6:	7afb      	ldrb	r3, [r7, #11]
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3710      	adds	r7, #16
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}
 8006fd0:	40022000 	.word	0x40022000
 8006fd4:	40021000 	.word	0x40021000
 8006fd8:	0800c6a4 	.word	0x0800c6a4
 8006fdc:	2000006c 	.word	0x2000006c
 8006fe0:	20000064 	.word	0x20000064

08006fe4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b089      	sub	sp, #36	; 0x24
 8006fe8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006fea:	2300      	movs	r3, #0
 8006fec:	61fb      	str	r3, [r7, #28]
 8006fee:	2300      	movs	r3, #0
 8006ff0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ff2:	4b3e      	ldr	r3, [pc, #248]	; (80070ec <HAL_RCC_GetSysClockFreq+0x108>)
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	f003 030c 	and.w	r3, r3, #12
 8006ffa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006ffc:	4b3b      	ldr	r3, [pc, #236]	; (80070ec <HAL_RCC_GetSysClockFreq+0x108>)
 8006ffe:	68db      	ldr	r3, [r3, #12]
 8007000:	f003 0303 	and.w	r3, r3, #3
 8007004:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d005      	beq.n	8007018 <HAL_RCC_GetSysClockFreq+0x34>
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	2b0c      	cmp	r3, #12
 8007010:	d121      	bne.n	8007056 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2b01      	cmp	r3, #1
 8007016:	d11e      	bne.n	8007056 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007018:	4b34      	ldr	r3, [pc, #208]	; (80070ec <HAL_RCC_GetSysClockFreq+0x108>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f003 0308 	and.w	r3, r3, #8
 8007020:	2b00      	cmp	r3, #0
 8007022:	d107      	bne.n	8007034 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007024:	4b31      	ldr	r3, [pc, #196]	; (80070ec <HAL_RCC_GetSysClockFreq+0x108>)
 8007026:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800702a:	0a1b      	lsrs	r3, r3, #8
 800702c:	f003 030f 	and.w	r3, r3, #15
 8007030:	61fb      	str	r3, [r7, #28]
 8007032:	e005      	b.n	8007040 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007034:	4b2d      	ldr	r3, [pc, #180]	; (80070ec <HAL_RCC_GetSysClockFreq+0x108>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	091b      	lsrs	r3, r3, #4
 800703a:	f003 030f 	and.w	r3, r3, #15
 800703e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007040:	4a2b      	ldr	r2, [pc, #172]	; (80070f0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007042:	69fb      	ldr	r3, [r7, #28]
 8007044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007048:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d10d      	bne.n	800706c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007050:	69fb      	ldr	r3, [r7, #28]
 8007052:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007054:	e00a      	b.n	800706c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	2b04      	cmp	r3, #4
 800705a:	d102      	bne.n	8007062 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800705c:	4b25      	ldr	r3, [pc, #148]	; (80070f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800705e:	61bb      	str	r3, [r7, #24]
 8007060:	e004      	b.n	800706c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	2b08      	cmp	r3, #8
 8007066:	d101      	bne.n	800706c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007068:	4b23      	ldr	r3, [pc, #140]	; (80070f8 <HAL_RCC_GetSysClockFreq+0x114>)
 800706a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	2b0c      	cmp	r3, #12
 8007070:	d134      	bne.n	80070dc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007072:	4b1e      	ldr	r3, [pc, #120]	; (80070ec <HAL_RCC_GetSysClockFreq+0x108>)
 8007074:	68db      	ldr	r3, [r3, #12]
 8007076:	f003 0303 	and.w	r3, r3, #3
 800707a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	2b02      	cmp	r3, #2
 8007080:	d003      	beq.n	800708a <HAL_RCC_GetSysClockFreq+0xa6>
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	2b03      	cmp	r3, #3
 8007086:	d003      	beq.n	8007090 <HAL_RCC_GetSysClockFreq+0xac>
 8007088:	e005      	b.n	8007096 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800708a:	4b1a      	ldr	r3, [pc, #104]	; (80070f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800708c:	617b      	str	r3, [r7, #20]
      break;
 800708e:	e005      	b.n	800709c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007090:	4b19      	ldr	r3, [pc, #100]	; (80070f8 <HAL_RCC_GetSysClockFreq+0x114>)
 8007092:	617b      	str	r3, [r7, #20]
      break;
 8007094:	e002      	b.n	800709c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007096:	69fb      	ldr	r3, [r7, #28]
 8007098:	617b      	str	r3, [r7, #20]
      break;
 800709a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800709c:	4b13      	ldr	r3, [pc, #76]	; (80070ec <HAL_RCC_GetSysClockFreq+0x108>)
 800709e:	68db      	ldr	r3, [r3, #12]
 80070a0:	091b      	lsrs	r3, r3, #4
 80070a2:	f003 0307 	and.w	r3, r3, #7
 80070a6:	3301      	adds	r3, #1
 80070a8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80070aa:	4b10      	ldr	r3, [pc, #64]	; (80070ec <HAL_RCC_GetSysClockFreq+0x108>)
 80070ac:	68db      	ldr	r3, [r3, #12]
 80070ae:	0a1b      	lsrs	r3, r3, #8
 80070b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070b4:	697a      	ldr	r2, [r7, #20]
 80070b6:	fb03 f202 	mul.w	r2, r3, r2
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80070c0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80070c2:	4b0a      	ldr	r3, [pc, #40]	; (80070ec <HAL_RCC_GetSysClockFreq+0x108>)
 80070c4:	68db      	ldr	r3, [r3, #12]
 80070c6:	0e5b      	lsrs	r3, r3, #25
 80070c8:	f003 0303 	and.w	r3, r3, #3
 80070cc:	3301      	adds	r3, #1
 80070ce:	005b      	lsls	r3, r3, #1
 80070d0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80070d2:	697a      	ldr	r2, [r7, #20]
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80070da:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80070dc:	69bb      	ldr	r3, [r7, #24]
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3724      	adds	r7, #36	; 0x24
 80070e2:	46bd      	mov	sp, r7
 80070e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e8:	4770      	bx	lr
 80070ea:	bf00      	nop
 80070ec:	40021000 	.word	0x40021000
 80070f0:	0800c6bc 	.word	0x0800c6bc
 80070f4:	00f42400 	.word	0x00f42400
 80070f8:	02dc6c00 	.word	0x02dc6c00

080070fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80070fc:	b480      	push	{r7}
 80070fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007100:	4b03      	ldr	r3, [pc, #12]	; (8007110 <HAL_RCC_GetHCLKFreq+0x14>)
 8007102:	681b      	ldr	r3, [r3, #0]
}
 8007104:	4618      	mov	r0, r3
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr
 800710e:	bf00      	nop
 8007110:	2000006c 	.word	0x2000006c

08007114 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007118:	f7ff fff0 	bl	80070fc <HAL_RCC_GetHCLKFreq>
 800711c:	4602      	mov	r2, r0
 800711e:	4b06      	ldr	r3, [pc, #24]	; (8007138 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	0a1b      	lsrs	r3, r3, #8
 8007124:	f003 0307 	and.w	r3, r3, #7
 8007128:	4904      	ldr	r1, [pc, #16]	; (800713c <HAL_RCC_GetPCLK1Freq+0x28>)
 800712a:	5ccb      	ldrb	r3, [r1, r3]
 800712c:	f003 031f 	and.w	r3, r3, #31
 8007130:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007134:	4618      	mov	r0, r3
 8007136:	bd80      	pop	{r7, pc}
 8007138:	40021000 	.word	0x40021000
 800713c:	0800c6b4 	.word	0x0800c6b4

08007140 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007144:	f7ff ffda 	bl	80070fc <HAL_RCC_GetHCLKFreq>
 8007148:	4602      	mov	r2, r0
 800714a:	4b06      	ldr	r3, [pc, #24]	; (8007164 <HAL_RCC_GetPCLK2Freq+0x24>)
 800714c:	689b      	ldr	r3, [r3, #8]
 800714e:	0adb      	lsrs	r3, r3, #11
 8007150:	f003 0307 	and.w	r3, r3, #7
 8007154:	4904      	ldr	r1, [pc, #16]	; (8007168 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007156:	5ccb      	ldrb	r3, [r1, r3]
 8007158:	f003 031f 	and.w	r3, r3, #31
 800715c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007160:	4618      	mov	r0, r3
 8007162:	bd80      	pop	{r7, pc}
 8007164:	40021000 	.word	0x40021000
 8007168:	0800c6b4 	.word	0x0800c6b4

0800716c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b086      	sub	sp, #24
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007174:	2300      	movs	r3, #0
 8007176:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007178:	4b2a      	ldr	r3, [pc, #168]	; (8007224 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800717a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800717c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007180:	2b00      	cmp	r3, #0
 8007182:	d003      	beq.n	800718c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007184:	f7ff f9b6 	bl	80064f4 <HAL_PWREx_GetVoltageRange>
 8007188:	6178      	str	r0, [r7, #20]
 800718a:	e014      	b.n	80071b6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800718c:	4b25      	ldr	r3, [pc, #148]	; (8007224 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800718e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007190:	4a24      	ldr	r2, [pc, #144]	; (8007224 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007192:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007196:	6593      	str	r3, [r2, #88]	; 0x58
 8007198:	4b22      	ldr	r3, [pc, #136]	; (8007224 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800719a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800719c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071a0:	60fb      	str	r3, [r7, #12]
 80071a2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80071a4:	f7ff f9a6 	bl	80064f4 <HAL_PWREx_GetVoltageRange>
 80071a8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80071aa:	4b1e      	ldr	r3, [pc, #120]	; (8007224 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80071ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071ae:	4a1d      	ldr	r2, [pc, #116]	; (8007224 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80071b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80071b4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071bc:	d10b      	bne.n	80071d6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2b80      	cmp	r3, #128	; 0x80
 80071c2:	d919      	bls.n	80071f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2ba0      	cmp	r3, #160	; 0xa0
 80071c8:	d902      	bls.n	80071d0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80071ca:	2302      	movs	r3, #2
 80071cc:	613b      	str	r3, [r7, #16]
 80071ce:	e013      	b.n	80071f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80071d0:	2301      	movs	r3, #1
 80071d2:	613b      	str	r3, [r7, #16]
 80071d4:	e010      	b.n	80071f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2b80      	cmp	r3, #128	; 0x80
 80071da:	d902      	bls.n	80071e2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80071dc:	2303      	movs	r3, #3
 80071de:	613b      	str	r3, [r7, #16]
 80071e0:	e00a      	b.n	80071f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2b80      	cmp	r3, #128	; 0x80
 80071e6:	d102      	bne.n	80071ee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80071e8:	2302      	movs	r3, #2
 80071ea:	613b      	str	r3, [r7, #16]
 80071ec:	e004      	b.n	80071f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2b70      	cmp	r3, #112	; 0x70
 80071f2:	d101      	bne.n	80071f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80071f4:	2301      	movs	r3, #1
 80071f6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80071f8:	4b0b      	ldr	r3, [pc, #44]	; (8007228 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f023 0207 	bic.w	r2, r3, #7
 8007200:	4909      	ldr	r1, [pc, #36]	; (8007228 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	4313      	orrs	r3, r2
 8007206:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007208:	4b07      	ldr	r3, [pc, #28]	; (8007228 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f003 0307 	and.w	r3, r3, #7
 8007210:	693a      	ldr	r2, [r7, #16]
 8007212:	429a      	cmp	r2, r3
 8007214:	d001      	beq.n	800721a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007216:	2301      	movs	r3, #1
 8007218:	e000      	b.n	800721c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800721a:	2300      	movs	r3, #0
}
 800721c:	4618      	mov	r0, r3
 800721e:	3718      	adds	r7, #24
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}
 8007224:	40021000 	.word	0x40021000
 8007228:	40022000 	.word	0x40022000

0800722c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b086      	sub	sp, #24
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007234:	2300      	movs	r3, #0
 8007236:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007238:	2300      	movs	r3, #0
 800723a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007244:	2b00      	cmp	r3, #0
 8007246:	d031      	beq.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800724c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007250:	d01a      	beq.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8007252:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007256:	d814      	bhi.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007258:	2b00      	cmp	r3, #0
 800725a:	d009      	beq.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800725c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007260:	d10f      	bne.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8007262:	4b5d      	ldr	r3, [pc, #372]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007264:	68db      	ldr	r3, [r3, #12]
 8007266:	4a5c      	ldr	r2, [pc, #368]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800726c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800726e:	e00c      	b.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	3304      	adds	r3, #4
 8007274:	2100      	movs	r1, #0
 8007276:	4618      	mov	r0, r3
 8007278:	f000 f9f0 	bl	800765c <RCCEx_PLLSAI1_Config>
 800727c:	4603      	mov	r3, r0
 800727e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007280:	e003      	b.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007282:	2301      	movs	r3, #1
 8007284:	74fb      	strb	r3, [r7, #19]
      break;
 8007286:	e000      	b.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8007288:	bf00      	nop
    }

    if(ret == HAL_OK)
 800728a:	7cfb      	ldrb	r3, [r7, #19]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d10b      	bne.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007290:	4b51      	ldr	r3, [pc, #324]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007296:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800729e:	494e      	ldr	r1, [pc, #312]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80072a0:	4313      	orrs	r3, r2
 80072a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80072a6:	e001      	b.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072a8:	7cfb      	ldrb	r3, [r7, #19]
 80072aa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	f000 809e 	beq.w	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80072ba:	2300      	movs	r3, #0
 80072bc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80072be:	4b46      	ldr	r3, [pc, #280]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80072c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d101      	bne.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80072ca:	2301      	movs	r3, #1
 80072cc:	e000      	b.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80072ce:	2300      	movs	r3, #0
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d00d      	beq.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80072d4:	4b40      	ldr	r3, [pc, #256]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80072d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072d8:	4a3f      	ldr	r2, [pc, #252]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80072da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072de:	6593      	str	r3, [r2, #88]	; 0x58
 80072e0:	4b3d      	ldr	r3, [pc, #244]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80072e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072e8:	60bb      	str	r3, [r7, #8]
 80072ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80072ec:	2301      	movs	r3, #1
 80072ee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80072f0:	4b3a      	ldr	r3, [pc, #232]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a39      	ldr	r2, [pc, #228]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80072f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80072fc:	f7fe fa72 	bl	80057e4 <HAL_GetTick>
 8007300:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007302:	e009      	b.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007304:	f7fe fa6e 	bl	80057e4 <HAL_GetTick>
 8007308:	4602      	mov	r2, r0
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	1ad3      	subs	r3, r2, r3
 800730e:	2b02      	cmp	r3, #2
 8007310:	d902      	bls.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8007312:	2303      	movs	r3, #3
 8007314:	74fb      	strb	r3, [r7, #19]
        break;
 8007316:	e005      	b.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007318:	4b30      	ldr	r3, [pc, #192]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007320:	2b00      	cmp	r3, #0
 8007322:	d0ef      	beq.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8007324:	7cfb      	ldrb	r3, [r7, #19]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d15a      	bne.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800732a:	4b2b      	ldr	r3, [pc, #172]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800732c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007330:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007334:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d01e      	beq.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007340:	697a      	ldr	r2, [r7, #20]
 8007342:	429a      	cmp	r2, r3
 8007344:	d019      	beq.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007346:	4b24      	ldr	r3, [pc, #144]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800734c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007350:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007352:	4b21      	ldr	r3, [pc, #132]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007358:	4a1f      	ldr	r2, [pc, #124]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800735a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800735e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007362:	4b1d      	ldr	r3, [pc, #116]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007368:	4a1b      	ldr	r2, [pc, #108]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800736a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800736e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007372:	4a19      	ldr	r2, [pc, #100]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	f003 0301 	and.w	r3, r3, #1
 8007380:	2b00      	cmp	r3, #0
 8007382:	d016      	beq.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007384:	f7fe fa2e 	bl	80057e4 <HAL_GetTick>
 8007388:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800738a:	e00b      	b.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800738c:	f7fe fa2a 	bl	80057e4 <HAL_GetTick>
 8007390:	4602      	mov	r2, r0
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	1ad3      	subs	r3, r2, r3
 8007396:	f241 3288 	movw	r2, #5000	; 0x1388
 800739a:	4293      	cmp	r3, r2
 800739c:	d902      	bls.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800739e:	2303      	movs	r3, #3
 80073a0:	74fb      	strb	r3, [r7, #19]
            break;
 80073a2:	e006      	b.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80073a4:	4b0c      	ldr	r3, [pc, #48]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80073a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073aa:	f003 0302 	and.w	r3, r3, #2
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d0ec      	beq.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80073b2:	7cfb      	ldrb	r3, [r7, #19]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d10b      	bne.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80073b8:	4b07      	ldr	r3, [pc, #28]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80073ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073c6:	4904      	ldr	r1, [pc, #16]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80073c8:	4313      	orrs	r3, r2
 80073ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80073ce:	e009      	b.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80073d0:	7cfb      	ldrb	r3, [r7, #19]
 80073d2:	74bb      	strb	r3, [r7, #18]
 80073d4:	e006      	b.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80073d6:	bf00      	nop
 80073d8:	40021000 	.word	0x40021000
 80073dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073e0:	7cfb      	ldrb	r3, [r7, #19]
 80073e2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80073e4:	7c7b      	ldrb	r3, [r7, #17]
 80073e6:	2b01      	cmp	r3, #1
 80073e8:	d105      	bne.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80073ea:	4b9b      	ldr	r3, [pc, #620]	; (8007658 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80073ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073ee:	4a9a      	ldr	r2, [pc, #616]	; (8007658 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80073f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80073f4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f003 0301 	and.w	r3, r3, #1
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d00a      	beq.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007402:	4b95      	ldr	r3, [pc, #596]	; (8007658 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007408:	f023 0203 	bic.w	r2, r3, #3
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6a1b      	ldr	r3, [r3, #32]
 8007410:	4991      	ldr	r1, [pc, #580]	; (8007658 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007412:	4313      	orrs	r3, r2
 8007414:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f003 0302 	and.w	r3, r3, #2
 8007420:	2b00      	cmp	r3, #0
 8007422:	d00a      	beq.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007424:	4b8c      	ldr	r3, [pc, #560]	; (8007658 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800742a:	f023 020c 	bic.w	r2, r3, #12
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007432:	4989      	ldr	r1, [pc, #548]	; (8007658 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007434:	4313      	orrs	r3, r2
 8007436:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f003 0304 	and.w	r3, r3, #4
 8007442:	2b00      	cmp	r3, #0
 8007444:	d00a      	beq.n	800745c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007446:	4b84      	ldr	r3, [pc, #528]	; (8007658 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800744c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007454:	4980      	ldr	r1, [pc, #512]	; (8007658 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007456:	4313      	orrs	r3, r2
 8007458:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f003 0320 	and.w	r3, r3, #32
 8007464:	2b00      	cmp	r3, #0
 8007466:	d00a      	beq.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007468:	4b7b      	ldr	r3, [pc, #492]	; (8007658 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800746a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800746e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007476:	4978      	ldr	r1, [pc, #480]	; (8007658 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007478:	4313      	orrs	r3, r2
 800747a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007486:	2b00      	cmp	r3, #0
 8007488:	d00a      	beq.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800748a:	4b73      	ldr	r3, [pc, #460]	; (8007658 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800748c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007490:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007498:	496f      	ldr	r1, [pc, #444]	; (8007658 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800749a:	4313      	orrs	r3, r2
 800749c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d00a      	beq.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80074ac:	4b6a      	ldr	r3, [pc, #424]	; (8007658 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80074ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ba:	4967      	ldr	r1, [pc, #412]	; (8007658 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80074bc:	4313      	orrs	r3, r2
 80074be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d00a      	beq.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80074ce:	4b62      	ldr	r3, [pc, #392]	; (8007658 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80074d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074d4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074dc:	495e      	ldr	r1, [pc, #376]	; (8007658 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80074de:	4313      	orrs	r3, r2
 80074e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d00a      	beq.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80074f0:	4b59      	ldr	r3, [pc, #356]	; (8007658 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80074f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074f6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074fe:	4956      	ldr	r1, [pc, #344]	; (8007658 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007500:	4313      	orrs	r3, r2
 8007502:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800750e:	2b00      	cmp	r3, #0
 8007510:	d00a      	beq.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007512:	4b51      	ldr	r3, [pc, #324]	; (8007658 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007518:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007520:	494d      	ldr	r1, [pc, #308]	; (8007658 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007522:	4313      	orrs	r3, r2
 8007524:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007530:	2b00      	cmp	r3, #0
 8007532:	d028      	beq.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007534:	4b48      	ldr	r3, [pc, #288]	; (8007658 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800753a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007542:	4945      	ldr	r1, [pc, #276]	; (8007658 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007544:	4313      	orrs	r3, r2
 8007546:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800754e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007552:	d106      	bne.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007554:	4b40      	ldr	r3, [pc, #256]	; (8007658 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007556:	68db      	ldr	r3, [r3, #12]
 8007558:	4a3f      	ldr	r2, [pc, #252]	; (8007658 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800755a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800755e:	60d3      	str	r3, [r2, #12]
 8007560:	e011      	b.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007566:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800756a:	d10c      	bne.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	3304      	adds	r3, #4
 8007570:	2101      	movs	r1, #1
 8007572:	4618      	mov	r0, r3
 8007574:	f000 f872 	bl	800765c <RCCEx_PLLSAI1_Config>
 8007578:	4603      	mov	r3, r0
 800757a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800757c:	7cfb      	ldrb	r3, [r7, #19]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d001      	beq.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 8007582:	7cfb      	ldrb	r3, [r7, #19]
 8007584:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800758e:	2b00      	cmp	r3, #0
 8007590:	d028      	beq.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007592:	4b31      	ldr	r3, [pc, #196]	; (8007658 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007598:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075a0:	492d      	ldr	r1, [pc, #180]	; (8007658 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80075a2:	4313      	orrs	r3, r2
 80075a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80075b0:	d106      	bne.n	80075c0 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80075b2:	4b29      	ldr	r3, [pc, #164]	; (8007658 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80075b4:	68db      	ldr	r3, [r3, #12]
 80075b6:	4a28      	ldr	r2, [pc, #160]	; (8007658 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80075b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80075bc:	60d3      	str	r3, [r2, #12]
 80075be:	e011      	b.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80075c8:	d10c      	bne.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	3304      	adds	r3, #4
 80075ce:	2101      	movs	r1, #1
 80075d0:	4618      	mov	r0, r3
 80075d2:	f000 f843 	bl	800765c <RCCEx_PLLSAI1_Config>
 80075d6:	4603      	mov	r3, r0
 80075d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80075da:	7cfb      	ldrb	r3, [r7, #19]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d001      	beq.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 80075e0:	7cfb      	ldrb	r3, [r7, #19]
 80075e2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d01c      	beq.n	800762a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80075f0:	4b19      	ldr	r3, [pc, #100]	; (8007658 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80075f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075f6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075fe:	4916      	ldr	r1, [pc, #88]	; (8007658 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007600:	4313      	orrs	r3, r2
 8007602:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800760a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800760e:	d10c      	bne.n	800762a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	3304      	adds	r3, #4
 8007614:	2102      	movs	r1, #2
 8007616:	4618      	mov	r0, r3
 8007618:	f000 f820 	bl	800765c <RCCEx_PLLSAI1_Config>
 800761c:	4603      	mov	r3, r0
 800761e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007620:	7cfb      	ldrb	r3, [r7, #19]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d001      	beq.n	800762a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8007626:	7cfb      	ldrb	r3, [r7, #19]
 8007628:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007632:	2b00      	cmp	r3, #0
 8007634:	d00a      	beq.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007636:	4b08      	ldr	r3, [pc, #32]	; (8007658 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800763c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007644:	4904      	ldr	r1, [pc, #16]	; (8007658 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007646:	4313      	orrs	r3, r2
 8007648:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800764c:	7cbb      	ldrb	r3, [r7, #18]
}
 800764e:	4618      	mov	r0, r3
 8007650:	3718      	adds	r7, #24
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}
 8007656:	bf00      	nop
 8007658:	40021000 	.word	0x40021000

0800765c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b084      	sub	sp, #16
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
 8007664:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007666:	2300      	movs	r3, #0
 8007668:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800766a:	4b74      	ldr	r3, [pc, #464]	; (800783c <RCCEx_PLLSAI1_Config+0x1e0>)
 800766c:	68db      	ldr	r3, [r3, #12]
 800766e:	f003 0303 	and.w	r3, r3, #3
 8007672:	2b00      	cmp	r3, #0
 8007674:	d018      	beq.n	80076a8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007676:	4b71      	ldr	r3, [pc, #452]	; (800783c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007678:	68db      	ldr	r3, [r3, #12]
 800767a:	f003 0203 	and.w	r2, r3, #3
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	429a      	cmp	r2, r3
 8007684:	d10d      	bne.n	80076a2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
       ||
 800768a:	2b00      	cmp	r3, #0
 800768c:	d009      	beq.n	80076a2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800768e:	4b6b      	ldr	r3, [pc, #428]	; (800783c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007690:	68db      	ldr	r3, [r3, #12]
 8007692:	091b      	lsrs	r3, r3, #4
 8007694:	f003 0307 	and.w	r3, r3, #7
 8007698:	1c5a      	adds	r2, r3, #1
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	685b      	ldr	r3, [r3, #4]
       ||
 800769e:	429a      	cmp	r2, r3
 80076a0:	d047      	beq.n	8007732 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80076a2:	2301      	movs	r3, #1
 80076a4:	73fb      	strb	r3, [r7, #15]
 80076a6:	e044      	b.n	8007732 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	2b03      	cmp	r3, #3
 80076ae:	d018      	beq.n	80076e2 <RCCEx_PLLSAI1_Config+0x86>
 80076b0:	2b03      	cmp	r3, #3
 80076b2:	d825      	bhi.n	8007700 <RCCEx_PLLSAI1_Config+0xa4>
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d002      	beq.n	80076be <RCCEx_PLLSAI1_Config+0x62>
 80076b8:	2b02      	cmp	r3, #2
 80076ba:	d009      	beq.n	80076d0 <RCCEx_PLLSAI1_Config+0x74>
 80076bc:	e020      	b.n	8007700 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80076be:	4b5f      	ldr	r3, [pc, #380]	; (800783c <RCCEx_PLLSAI1_Config+0x1e0>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f003 0302 	and.w	r3, r3, #2
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d11d      	bne.n	8007706 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80076ca:	2301      	movs	r3, #1
 80076cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80076ce:	e01a      	b.n	8007706 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80076d0:	4b5a      	ldr	r3, [pc, #360]	; (800783c <RCCEx_PLLSAI1_Config+0x1e0>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d116      	bne.n	800770a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80076dc:	2301      	movs	r3, #1
 80076de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80076e0:	e013      	b.n	800770a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80076e2:	4b56      	ldr	r3, [pc, #344]	; (800783c <RCCEx_PLLSAI1_Config+0x1e0>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d10f      	bne.n	800770e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80076ee:	4b53      	ldr	r3, [pc, #332]	; (800783c <RCCEx_PLLSAI1_Config+0x1e0>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d109      	bne.n	800770e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80076fa:	2301      	movs	r3, #1
 80076fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80076fe:	e006      	b.n	800770e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007700:	2301      	movs	r3, #1
 8007702:	73fb      	strb	r3, [r7, #15]
      break;
 8007704:	e004      	b.n	8007710 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007706:	bf00      	nop
 8007708:	e002      	b.n	8007710 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800770a:	bf00      	nop
 800770c:	e000      	b.n	8007710 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800770e:	bf00      	nop
    }

    if(status == HAL_OK)
 8007710:	7bfb      	ldrb	r3, [r7, #15]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d10d      	bne.n	8007732 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007716:	4b49      	ldr	r3, [pc, #292]	; (800783c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007718:	68db      	ldr	r3, [r3, #12]
 800771a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6819      	ldr	r1, [r3, #0]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	3b01      	subs	r3, #1
 8007728:	011b      	lsls	r3, r3, #4
 800772a:	430b      	orrs	r3, r1
 800772c:	4943      	ldr	r1, [pc, #268]	; (800783c <RCCEx_PLLSAI1_Config+0x1e0>)
 800772e:	4313      	orrs	r3, r2
 8007730:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007732:	7bfb      	ldrb	r3, [r7, #15]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d17c      	bne.n	8007832 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007738:	4b40      	ldr	r3, [pc, #256]	; (800783c <RCCEx_PLLSAI1_Config+0x1e0>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a3f      	ldr	r2, [pc, #252]	; (800783c <RCCEx_PLLSAI1_Config+0x1e0>)
 800773e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007742:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007744:	f7fe f84e 	bl	80057e4 <HAL_GetTick>
 8007748:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800774a:	e009      	b.n	8007760 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800774c:	f7fe f84a 	bl	80057e4 <HAL_GetTick>
 8007750:	4602      	mov	r2, r0
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	1ad3      	subs	r3, r2, r3
 8007756:	2b02      	cmp	r3, #2
 8007758:	d902      	bls.n	8007760 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800775a:	2303      	movs	r3, #3
 800775c:	73fb      	strb	r3, [r7, #15]
        break;
 800775e:	e005      	b.n	800776c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007760:	4b36      	ldr	r3, [pc, #216]	; (800783c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007768:	2b00      	cmp	r3, #0
 800776a:	d1ef      	bne.n	800774c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800776c:	7bfb      	ldrb	r3, [r7, #15]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d15f      	bne.n	8007832 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d110      	bne.n	800779a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007778:	4b30      	ldr	r3, [pc, #192]	; (800783c <RCCEx_PLLSAI1_Config+0x1e0>)
 800777a:	691b      	ldr	r3, [r3, #16]
 800777c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8007780:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007784:	687a      	ldr	r2, [r7, #4]
 8007786:	6892      	ldr	r2, [r2, #8]
 8007788:	0211      	lsls	r1, r2, #8
 800778a:	687a      	ldr	r2, [r7, #4]
 800778c:	68d2      	ldr	r2, [r2, #12]
 800778e:	06d2      	lsls	r2, r2, #27
 8007790:	430a      	orrs	r2, r1
 8007792:	492a      	ldr	r1, [pc, #168]	; (800783c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007794:	4313      	orrs	r3, r2
 8007796:	610b      	str	r3, [r1, #16]
 8007798:	e027      	b.n	80077ea <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	2b01      	cmp	r3, #1
 800779e:	d112      	bne.n	80077c6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80077a0:	4b26      	ldr	r3, [pc, #152]	; (800783c <RCCEx_PLLSAI1_Config+0x1e0>)
 80077a2:	691b      	ldr	r3, [r3, #16]
 80077a4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80077a8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80077ac:	687a      	ldr	r2, [r7, #4]
 80077ae:	6892      	ldr	r2, [r2, #8]
 80077b0:	0211      	lsls	r1, r2, #8
 80077b2:	687a      	ldr	r2, [r7, #4]
 80077b4:	6912      	ldr	r2, [r2, #16]
 80077b6:	0852      	lsrs	r2, r2, #1
 80077b8:	3a01      	subs	r2, #1
 80077ba:	0552      	lsls	r2, r2, #21
 80077bc:	430a      	orrs	r2, r1
 80077be:	491f      	ldr	r1, [pc, #124]	; (800783c <RCCEx_PLLSAI1_Config+0x1e0>)
 80077c0:	4313      	orrs	r3, r2
 80077c2:	610b      	str	r3, [r1, #16]
 80077c4:	e011      	b.n	80077ea <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80077c6:	4b1d      	ldr	r3, [pc, #116]	; (800783c <RCCEx_PLLSAI1_Config+0x1e0>)
 80077c8:	691b      	ldr	r3, [r3, #16]
 80077ca:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80077ce:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80077d2:	687a      	ldr	r2, [r7, #4]
 80077d4:	6892      	ldr	r2, [r2, #8]
 80077d6:	0211      	lsls	r1, r2, #8
 80077d8:	687a      	ldr	r2, [r7, #4]
 80077da:	6952      	ldr	r2, [r2, #20]
 80077dc:	0852      	lsrs	r2, r2, #1
 80077de:	3a01      	subs	r2, #1
 80077e0:	0652      	lsls	r2, r2, #25
 80077e2:	430a      	orrs	r2, r1
 80077e4:	4915      	ldr	r1, [pc, #84]	; (800783c <RCCEx_PLLSAI1_Config+0x1e0>)
 80077e6:	4313      	orrs	r3, r2
 80077e8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80077ea:	4b14      	ldr	r3, [pc, #80]	; (800783c <RCCEx_PLLSAI1_Config+0x1e0>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a13      	ldr	r2, [pc, #76]	; (800783c <RCCEx_PLLSAI1_Config+0x1e0>)
 80077f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80077f4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077f6:	f7fd fff5 	bl	80057e4 <HAL_GetTick>
 80077fa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80077fc:	e009      	b.n	8007812 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80077fe:	f7fd fff1 	bl	80057e4 <HAL_GetTick>
 8007802:	4602      	mov	r2, r0
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	1ad3      	subs	r3, r2, r3
 8007808:	2b02      	cmp	r3, #2
 800780a:	d902      	bls.n	8007812 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800780c:	2303      	movs	r3, #3
 800780e:	73fb      	strb	r3, [r7, #15]
          break;
 8007810:	e005      	b.n	800781e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007812:	4b0a      	ldr	r3, [pc, #40]	; (800783c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800781a:	2b00      	cmp	r3, #0
 800781c:	d0ef      	beq.n	80077fe <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800781e:	7bfb      	ldrb	r3, [r7, #15]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d106      	bne.n	8007832 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007824:	4b05      	ldr	r3, [pc, #20]	; (800783c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007826:	691a      	ldr	r2, [r3, #16]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	699b      	ldr	r3, [r3, #24]
 800782c:	4903      	ldr	r1, [pc, #12]	; (800783c <RCCEx_PLLSAI1_Config+0x1e0>)
 800782e:	4313      	orrs	r3, r2
 8007830:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007832:	7bfb      	ldrb	r3, [r7, #15]
}
 8007834:	4618      	mov	r0, r3
 8007836:	3710      	adds	r7, #16
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}
 800783c:	40021000 	.word	0x40021000

08007840 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b084      	sub	sp, #16
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007848:	2301      	movs	r3, #1
 800784a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d06c      	beq.n	800792c <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007858:	b2db      	uxtb	r3, r3
 800785a:	2b00      	cmp	r3, #0
 800785c:	d106      	bne.n	800786c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2200      	movs	r2, #0
 8007862:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f003 f974 	bl	800ab54 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2202      	movs	r2, #2
 8007870:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	22ca      	movs	r2, #202	; 0xca
 800787a:	625a      	str	r2, [r3, #36]	; 0x24
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	2253      	movs	r2, #83	; 0x53
 8007882:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f000 f87c 	bl	8007982 <RTC_EnterInitMode>
 800788a:	4603      	mov	r3, r0
 800788c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800788e:	7bfb      	ldrb	r3, [r7, #15]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d14b      	bne.n	800792c <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	689b      	ldr	r3, [r3, #8]
 800789a:	687a      	ldr	r2, [r7, #4]
 800789c:	6812      	ldr	r2, [r2, #0]
 800789e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80078a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078a6:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	6899      	ldr	r1, [r3, #8]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	685a      	ldr	r2, [r3, #4]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	691b      	ldr	r3, [r3, #16]
 80078b6:	431a      	orrs	r2, r3
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	699b      	ldr	r3, [r3, #24]
 80078bc:	431a      	orrs	r2, r3
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	430a      	orrs	r2, r1
 80078c4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	687a      	ldr	r2, [r7, #4]
 80078cc:	68d2      	ldr	r2, [r2, #12]
 80078ce:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	6919      	ldr	r1, [r3, #16]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	689b      	ldr	r3, [r3, #8]
 80078da:	041a      	lsls	r2, r3, #16
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	430a      	orrs	r2, r1
 80078e2:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f000 f87f 	bl	80079e8 <RTC_ExitInitMode>
 80078ea:	4603      	mov	r3, r0
 80078ec:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80078ee:	7bfb      	ldrb	r3, [r7, #15]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d11b      	bne.n	800792c <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f022 0203 	bic.w	r2, r2, #3
 8007902:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	69da      	ldr	r2, [r3, #28]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	695b      	ldr	r3, [r3, #20]
 8007912:	431a      	orrs	r2, r3
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	430a      	orrs	r2, r1
 800791a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	22ff      	movs	r2, #255	; 0xff
 8007922:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2201      	movs	r2, #1
 8007928:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 800792c:	7bfb      	ldrb	r3, [r7, #15]
}
 800792e:	4618      	mov	r0, r3
 8007930:	3710      	adds	r7, #16
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}

08007936 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007936:	b580      	push	{r7, lr}
 8007938:	b084      	sub	sp, #16
 800793a:	af00      	add	r7, sp, #0
 800793c:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	68da      	ldr	r2, [r3, #12]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800794c:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800794e:	f7fd ff49 	bl	80057e4 <HAL_GetTick>
 8007952:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007954:	e009      	b.n	800796a <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007956:	f7fd ff45 	bl	80057e4 <HAL_GetTick>
 800795a:	4602      	mov	r2, r0
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	1ad3      	subs	r3, r2, r3
 8007960:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007964:	d901      	bls.n	800796a <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8007966:	2303      	movs	r3, #3
 8007968:	e007      	b.n	800797a <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	68db      	ldr	r3, [r3, #12]
 8007970:	f003 0320 	and.w	r3, r3, #32
 8007974:	2b00      	cmp	r3, #0
 8007976:	d0ee      	beq.n	8007956 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8007978:	2300      	movs	r3, #0
}
 800797a:	4618      	mov	r0, r3
 800797c:	3710      	adds	r7, #16
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}

08007982 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007982:	b580      	push	{r7, lr}
 8007984:	b084      	sub	sp, #16
 8007986:	af00      	add	r7, sp, #0
 8007988:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800798a:	2300      	movs	r3, #0
 800798c:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	68db      	ldr	r3, [r3, #12]
 8007994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007998:	2b00      	cmp	r3, #0
 800799a:	d120      	bne.n	80079de <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80079a4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80079a6:	f7fd ff1d 	bl	80057e4 <HAL_GetTick>
 80079aa:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80079ac:	e00d      	b.n	80079ca <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80079ae:	f7fd ff19 	bl	80057e4 <HAL_GetTick>
 80079b2:	4602      	mov	r2, r0
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	1ad3      	subs	r3, r2, r3
 80079b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80079bc:	d905      	bls.n	80079ca <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80079be:	2303      	movs	r3, #3
 80079c0:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2203      	movs	r2, #3
 80079c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	68db      	ldr	r3, [r3, #12]
 80079d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d102      	bne.n	80079de <RTC_EnterInitMode+0x5c>
 80079d8:	7bfb      	ldrb	r3, [r7, #15]
 80079da:	2b03      	cmp	r3, #3
 80079dc:	d1e7      	bne.n	80079ae <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80079de:	7bfb      	ldrb	r3, [r7, #15]
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3710      	adds	r7, #16
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}

080079e8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b084      	sub	sp, #16
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80079f0:	2300      	movs	r3, #0
 80079f2:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80079f4:	4b1a      	ldr	r3, [pc, #104]	; (8007a60 <RTC_ExitInitMode+0x78>)
 80079f6:	68db      	ldr	r3, [r3, #12]
 80079f8:	4a19      	ldr	r2, [pc, #100]	; (8007a60 <RTC_ExitInitMode+0x78>)
 80079fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079fe:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007a00:	4b17      	ldr	r3, [pc, #92]	; (8007a60 <RTC_ExitInitMode+0x78>)
 8007a02:	689b      	ldr	r3, [r3, #8]
 8007a04:	f003 0320 	and.w	r3, r3, #32
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d10c      	bne.n	8007a26 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f7ff ff92 	bl	8007936 <HAL_RTC_WaitForSynchro>
 8007a12:	4603      	mov	r3, r0
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d01e      	beq.n	8007a56 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2203      	movs	r2, #3
 8007a1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8007a20:	2303      	movs	r3, #3
 8007a22:	73fb      	strb	r3, [r7, #15]
 8007a24:	e017      	b.n	8007a56 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007a26:	4b0e      	ldr	r3, [pc, #56]	; (8007a60 <RTC_ExitInitMode+0x78>)
 8007a28:	689b      	ldr	r3, [r3, #8]
 8007a2a:	4a0d      	ldr	r2, [pc, #52]	; (8007a60 <RTC_ExitInitMode+0x78>)
 8007a2c:	f023 0320 	bic.w	r3, r3, #32
 8007a30:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f7ff ff7f 	bl	8007936 <HAL_RTC_WaitForSynchro>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d005      	beq.n	8007a4a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2203      	movs	r2, #3
 8007a42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8007a46:	2303      	movs	r3, #3
 8007a48:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007a4a:	4b05      	ldr	r3, [pc, #20]	; (8007a60 <RTC_ExitInitMode+0x78>)
 8007a4c:	689b      	ldr	r3, [r3, #8]
 8007a4e:	4a04      	ldr	r2, [pc, #16]	; (8007a60 <RTC_ExitInitMode+0x78>)
 8007a50:	f043 0320 	orr.w	r3, r3, #32
 8007a54:	6093      	str	r3, [r2, #8]
  }

  return status;
 8007a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3710      	adds	r7, #16
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}
 8007a60:	40002800 	.word	0x40002800

08007a64 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b084      	sub	sp, #16
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d101      	bne.n	8007a76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007a72:	2301      	movs	r3, #1
 8007a74:	e095      	b.n	8007ba2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d108      	bne.n	8007a90 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a86:	d009      	beq.n	8007a9c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	61da      	str	r2, [r3, #28]
 8007a8e:	e005      	b.n	8007a9c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2200      	movs	r2, #0
 8007a94:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007aa8:	b2db      	uxtb	r3, r3
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d106      	bne.n	8007abc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 f877 	bl	8007baa <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2202      	movs	r2, #2
 8007ac0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	681a      	ldr	r2, [r3, #0]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ad2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	68db      	ldr	r3, [r3, #12]
 8007ad8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007adc:	d902      	bls.n	8007ae4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	60fb      	str	r3, [r7, #12]
 8007ae2:	e002      	b.n	8007aea <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007ae4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007ae8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	68db      	ldr	r3, [r3, #12]
 8007aee:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007af2:	d007      	beq.n	8007b04 <HAL_SPI_Init+0xa0>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	68db      	ldr	r3, [r3, #12]
 8007af8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007afc:	d002      	beq.n	8007b04 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2200      	movs	r2, #0
 8007b02:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	689b      	ldr	r3, [r3, #8]
 8007b10:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007b14:	431a      	orrs	r2, r3
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	691b      	ldr	r3, [r3, #16]
 8007b1a:	f003 0302 	and.w	r3, r3, #2
 8007b1e:	431a      	orrs	r2, r3
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	695b      	ldr	r3, [r3, #20]
 8007b24:	f003 0301 	and.w	r3, r3, #1
 8007b28:	431a      	orrs	r2, r3
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	699b      	ldr	r3, [r3, #24]
 8007b2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b32:	431a      	orrs	r2, r3
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	69db      	ldr	r3, [r3, #28]
 8007b38:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007b3c:	431a      	orrs	r2, r3
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6a1b      	ldr	r3, [r3, #32]
 8007b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b46:	ea42 0103 	orr.w	r1, r2, r3
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b4e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	430a      	orrs	r2, r1
 8007b58:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	699b      	ldr	r3, [r3, #24]
 8007b5e:	0c1b      	lsrs	r3, r3, #16
 8007b60:	f003 0204 	and.w	r2, r3, #4
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b68:	f003 0310 	and.w	r3, r3, #16
 8007b6c:	431a      	orrs	r2, r3
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b72:	f003 0308 	and.w	r3, r3, #8
 8007b76:	431a      	orrs	r2, r3
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	68db      	ldr	r3, [r3, #12]
 8007b7c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007b80:	ea42 0103 	orr.w	r1, r2, r3
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	430a      	orrs	r2, r1
 8007b90:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2200      	movs	r2, #0
 8007b96:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007ba0:	2300      	movs	r3, #0
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3710      	adds	r7, #16
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}

08007baa <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8007baa:	b480      	push	{r7}
 8007bac:	b083      	sub	sp, #12
 8007bae:	af00      	add	r7, sp, #0
 8007bb0:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8007bb2:	bf00      	nop
 8007bb4:	370c      	adds	r7, #12
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbc:	4770      	bx	lr

08007bbe <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007bbe:	b580      	push	{r7, lr}
 8007bc0:	b082      	sub	sp, #8
 8007bc2:	af00      	add	r7, sp, #0
 8007bc4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d101      	bne.n	8007bd0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007bcc:	2301      	movs	r3, #1
 8007bce:	e049      	b.n	8007c64 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bd6:	b2db      	uxtb	r3, r3
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d106      	bne.n	8007bea <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2200      	movs	r2, #0
 8007be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f002 ffd1 	bl	800ab8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2202      	movs	r2, #2
 8007bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681a      	ldr	r2, [r3, #0]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	3304      	adds	r3, #4
 8007bfa:	4619      	mov	r1, r3
 8007bfc:	4610      	mov	r0, r2
 8007bfe:	f000 fe2f 	bl	8008860 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2201      	movs	r2, #1
 8007c06:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2201      	movs	r2, #1
 8007c0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2201      	movs	r2, #1
 8007c16:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2201      	movs	r2, #1
 8007c26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2201      	movs	r2, #1
 8007c2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2201      	movs	r2, #1
 8007c36:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2201      	movs	r2, #1
 8007c3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2201      	movs	r2, #1
 8007c46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2201      	movs	r2, #1
 8007c4e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2201      	movs	r2, #1
 8007c56:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2201      	movs	r2, #1
 8007c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c62:	2300      	movs	r3, #0
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3708      	adds	r7, #8
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}

08007c6c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b082      	sub	sp, #8
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d101      	bne.n	8007c7e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	e049      	b.n	8007d12 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c84:	b2db      	uxtb	r3, r3
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d106      	bne.n	8007c98 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f003 f874 	bl	800ad80 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2202      	movs	r2, #2
 8007c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681a      	ldr	r2, [r3, #0]
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	3304      	adds	r3, #4
 8007ca8:	4619      	mov	r1, r3
 8007caa:	4610      	mov	r0, r2
 8007cac:	f000 fdd8 	bl	8008860 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2201      	movs	r2, #1
 8007ccc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2201      	movs	r2, #1
 8007cdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2201      	movs	r2, #1
 8007cec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2201      	movs	r2, #1
 8007cf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2201      	movs	r2, #1
 8007d04:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007d10:	2300      	movs	r3, #0
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3708      	adds	r7, #8
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}
	...

08007d1c <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b086      	sub	sp, #24
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	60f8      	str	r0, [r7, #12]
 8007d24:	60b9      	str	r1, [r7, #8]
 8007d26:	607a      	str	r2, [r7, #4]
 8007d28:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d109      	bne.n	8007d48 <HAL_TIM_PWM_Start_DMA+0x2c>
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d3a:	b2db      	uxtb	r3, r3
 8007d3c:	2b02      	cmp	r3, #2
 8007d3e:	bf0c      	ite	eq
 8007d40:	2301      	moveq	r3, #1
 8007d42:	2300      	movne	r3, #0
 8007d44:	b2db      	uxtb	r3, r3
 8007d46:	e03c      	b.n	8007dc2 <HAL_TIM_PWM_Start_DMA+0xa6>
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	2b04      	cmp	r3, #4
 8007d4c:	d109      	bne.n	8007d62 <HAL_TIM_PWM_Start_DMA+0x46>
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007d54:	b2db      	uxtb	r3, r3
 8007d56:	2b02      	cmp	r3, #2
 8007d58:	bf0c      	ite	eq
 8007d5a:	2301      	moveq	r3, #1
 8007d5c:	2300      	movne	r3, #0
 8007d5e:	b2db      	uxtb	r3, r3
 8007d60:	e02f      	b.n	8007dc2 <HAL_TIM_PWM_Start_DMA+0xa6>
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	2b08      	cmp	r3, #8
 8007d66:	d109      	bne.n	8007d7c <HAL_TIM_PWM_Start_DMA+0x60>
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007d6e:	b2db      	uxtb	r3, r3
 8007d70:	2b02      	cmp	r3, #2
 8007d72:	bf0c      	ite	eq
 8007d74:	2301      	moveq	r3, #1
 8007d76:	2300      	movne	r3, #0
 8007d78:	b2db      	uxtb	r3, r3
 8007d7a:	e022      	b.n	8007dc2 <HAL_TIM_PWM_Start_DMA+0xa6>
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	2b0c      	cmp	r3, #12
 8007d80:	d109      	bne.n	8007d96 <HAL_TIM_PWM_Start_DMA+0x7a>
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d88:	b2db      	uxtb	r3, r3
 8007d8a:	2b02      	cmp	r3, #2
 8007d8c:	bf0c      	ite	eq
 8007d8e:	2301      	moveq	r3, #1
 8007d90:	2300      	movne	r3, #0
 8007d92:	b2db      	uxtb	r3, r3
 8007d94:	e015      	b.n	8007dc2 <HAL_TIM_PWM_Start_DMA+0xa6>
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	2b10      	cmp	r3, #16
 8007d9a:	d109      	bne.n	8007db0 <HAL_TIM_PWM_Start_DMA+0x94>
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007da2:	b2db      	uxtb	r3, r3
 8007da4:	2b02      	cmp	r3, #2
 8007da6:	bf0c      	ite	eq
 8007da8:	2301      	moveq	r3, #1
 8007daa:	2300      	movne	r3, #0
 8007dac:	b2db      	uxtb	r3, r3
 8007dae:	e008      	b.n	8007dc2 <HAL_TIM_PWM_Start_DMA+0xa6>
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007db6:	b2db      	uxtb	r3, r3
 8007db8:	2b02      	cmp	r3, #2
 8007dba:	bf0c      	ite	eq
 8007dbc:	2301      	moveq	r3, #1
 8007dbe:	2300      	movne	r3, #0
 8007dc0:	b2db      	uxtb	r3, r3
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d001      	beq.n	8007dca <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8007dc6:	2302      	movs	r3, #2
 8007dc8:	e18d      	b.n	80080e6 <HAL_TIM_PWM_Start_DMA+0x3ca>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d109      	bne.n	8007de4 <HAL_TIM_PWM_Start_DMA+0xc8>
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007dd6:	b2db      	uxtb	r3, r3
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	bf0c      	ite	eq
 8007ddc:	2301      	moveq	r3, #1
 8007dde:	2300      	movne	r3, #0
 8007de0:	b2db      	uxtb	r3, r3
 8007de2:	e03c      	b.n	8007e5e <HAL_TIM_PWM_Start_DMA+0x142>
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	2b04      	cmp	r3, #4
 8007de8:	d109      	bne.n	8007dfe <HAL_TIM_PWM_Start_DMA+0xe2>
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007df0:	b2db      	uxtb	r3, r3
 8007df2:	2b01      	cmp	r3, #1
 8007df4:	bf0c      	ite	eq
 8007df6:	2301      	moveq	r3, #1
 8007df8:	2300      	movne	r3, #0
 8007dfa:	b2db      	uxtb	r3, r3
 8007dfc:	e02f      	b.n	8007e5e <HAL_TIM_PWM_Start_DMA+0x142>
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	2b08      	cmp	r3, #8
 8007e02:	d109      	bne.n	8007e18 <HAL_TIM_PWM_Start_DMA+0xfc>
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007e0a:	b2db      	uxtb	r3, r3
 8007e0c:	2b01      	cmp	r3, #1
 8007e0e:	bf0c      	ite	eq
 8007e10:	2301      	moveq	r3, #1
 8007e12:	2300      	movne	r3, #0
 8007e14:	b2db      	uxtb	r3, r3
 8007e16:	e022      	b.n	8007e5e <HAL_TIM_PWM_Start_DMA+0x142>
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	2b0c      	cmp	r3, #12
 8007e1c:	d109      	bne.n	8007e32 <HAL_TIM_PWM_Start_DMA+0x116>
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e24:	b2db      	uxtb	r3, r3
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	bf0c      	ite	eq
 8007e2a:	2301      	moveq	r3, #1
 8007e2c:	2300      	movne	r3, #0
 8007e2e:	b2db      	uxtb	r3, r3
 8007e30:	e015      	b.n	8007e5e <HAL_TIM_PWM_Start_DMA+0x142>
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	2b10      	cmp	r3, #16
 8007e36:	d109      	bne.n	8007e4c <HAL_TIM_PWM_Start_DMA+0x130>
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007e3e:	b2db      	uxtb	r3, r3
 8007e40:	2b01      	cmp	r3, #1
 8007e42:	bf0c      	ite	eq
 8007e44:	2301      	moveq	r3, #1
 8007e46:	2300      	movne	r3, #0
 8007e48:	b2db      	uxtb	r3, r3
 8007e4a:	e008      	b.n	8007e5e <HAL_TIM_PWM_Start_DMA+0x142>
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007e52:	b2db      	uxtb	r3, r3
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	bf0c      	ite	eq
 8007e58:	2301      	moveq	r3, #1
 8007e5a:	2300      	movne	r3, #0
 8007e5c:	b2db      	uxtb	r3, r3
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d034      	beq.n	8007ecc <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d002      	beq.n	8007e6e <HAL_TIM_PWM_Start_DMA+0x152>
 8007e68:	887b      	ldrh	r3, [r7, #2]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d101      	bne.n	8007e72 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8007e6e:	2301      	movs	r3, #1
 8007e70:	e139      	b.n	80080e6 <HAL_TIM_PWM_Start_DMA+0x3ca>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d104      	bne.n	8007e82 <HAL_TIM_PWM_Start_DMA+0x166>
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	2202      	movs	r2, #2
 8007e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e80:	e026      	b.n	8007ed0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	2b04      	cmp	r3, #4
 8007e86:	d104      	bne.n	8007e92 <HAL_TIM_PWM_Start_DMA+0x176>
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2202      	movs	r2, #2
 8007e8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e90:	e01e      	b.n	8007ed0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	2b08      	cmp	r3, #8
 8007e96:	d104      	bne.n	8007ea2 <HAL_TIM_PWM_Start_DMA+0x186>
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2202      	movs	r2, #2
 8007e9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ea0:	e016      	b.n	8007ed0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	2b0c      	cmp	r3, #12
 8007ea6:	d104      	bne.n	8007eb2 <HAL_TIM_PWM_Start_DMA+0x196>
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	2202      	movs	r2, #2
 8007eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007eb0:	e00e      	b.n	8007ed0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	2b10      	cmp	r3, #16
 8007eb6:	d104      	bne.n	8007ec2 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	2202      	movs	r2, #2
 8007ebc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ec0:	e006      	b.n	8007ed0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	2202      	movs	r2, #2
 8007ec6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007eca:	e001      	b.n	8007ed0 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8007ecc:	2301      	movs	r3, #1
 8007ece:	e10a      	b.n	80080e6 <HAL_TIM_PWM_Start_DMA+0x3ca>
  }

  switch (Channel)
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	2b0c      	cmp	r3, #12
 8007ed4:	f200 80ae 	bhi.w	8008034 <HAL_TIM_PWM_Start_DMA+0x318>
 8007ed8:	a201      	add	r2, pc, #4	; (adr r2, 8007ee0 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8007eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ede:	bf00      	nop
 8007ee0:	08007f15 	.word	0x08007f15
 8007ee4:	08008035 	.word	0x08008035
 8007ee8:	08008035 	.word	0x08008035
 8007eec:	08008035 	.word	0x08008035
 8007ef0:	08007f5d 	.word	0x08007f5d
 8007ef4:	08008035 	.word	0x08008035
 8007ef8:	08008035 	.word	0x08008035
 8007efc:	08008035 	.word	0x08008035
 8007f00:	08007fa5 	.word	0x08007fa5
 8007f04:	08008035 	.word	0x08008035
 8007f08:	08008035 	.word	0x08008035
 8007f0c:	08008035 	.word	0x08008035
 8007f10:	08007fed 	.word	0x08007fed
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f18:	4a75      	ldr	r2, [pc, #468]	; (80080f0 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8007f1a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f20:	4a74      	ldr	r2, [pc, #464]	; (80080f4 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8007f22:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f28:	4a73      	ldr	r2, [pc, #460]	; (80080f8 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8007f2a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8007f30:	6879      	ldr	r1, [r7, #4]
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	3334      	adds	r3, #52	; 0x34
 8007f38:	461a      	mov	r2, r3
 8007f3a:	887b      	ldrh	r3, [r7, #2]
 8007f3c:	f7fd feaa 	bl	8005c94 <HAL_DMA_Start_IT>
 8007f40:	4603      	mov	r3, r0
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d001      	beq.n	8007f4a <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007f46:	2301      	movs	r3, #1
 8007f48:	e0cd      	b.n	80080e6 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	68da      	ldr	r2, [r3, #12]
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f58:	60da      	str	r2, [r3, #12]
      break;
 8007f5a:	e06e      	b.n	800803a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f60:	4a63      	ldr	r2, [pc, #396]	; (80080f0 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8007f62:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f68:	4a62      	ldr	r2, [pc, #392]	; (80080f4 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8007f6a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f70:	4a61      	ldr	r2, [pc, #388]	; (80080f8 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8007f72:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8007f78:	6879      	ldr	r1, [r7, #4]
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	3338      	adds	r3, #56	; 0x38
 8007f80:	461a      	mov	r2, r3
 8007f82:	887b      	ldrh	r3, [r7, #2]
 8007f84:	f7fd fe86 	bl	8005c94 <HAL_DMA_Start_IT>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d001      	beq.n	8007f92 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007f8e:	2301      	movs	r3, #1
 8007f90:	e0a9      	b.n	80080e6 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	68da      	ldr	r2, [r3, #12]
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007fa0:	60da      	str	r2, [r3, #12]
      break;
 8007fa2:	e04a      	b.n	800803a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fa8:	4a51      	ldr	r2, [pc, #324]	; (80080f0 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8007faa:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fb0:	4a50      	ldr	r2, [pc, #320]	; (80080f4 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8007fb2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fb8:	4a4f      	ldr	r2, [pc, #316]	; (80080f8 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8007fba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007fc0:	6879      	ldr	r1, [r7, #4]
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	333c      	adds	r3, #60	; 0x3c
 8007fc8:	461a      	mov	r2, r3
 8007fca:	887b      	ldrh	r3, [r7, #2]
 8007fcc:	f7fd fe62 	bl	8005c94 <HAL_DMA_Start_IT>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d001      	beq.n	8007fda <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	e085      	b.n	80080e6 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	68da      	ldr	r2, [r3, #12]
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007fe8:	60da      	str	r2, [r3, #12]
      break;
 8007fea:	e026      	b.n	800803a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ff0:	4a3f      	ldr	r2, [pc, #252]	; (80080f0 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8007ff2:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ff8:	4a3e      	ldr	r2, [pc, #248]	; (80080f4 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8007ffa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008000:	4a3d      	ldr	r2, [pc, #244]	; (80080f8 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8008002:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008008:	6879      	ldr	r1, [r7, #4]
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	3340      	adds	r3, #64	; 0x40
 8008010:	461a      	mov	r2, r3
 8008012:	887b      	ldrh	r3, [r7, #2]
 8008014:	f7fd fe3e 	bl	8005c94 <HAL_DMA_Start_IT>
 8008018:	4603      	mov	r3, r0
 800801a:	2b00      	cmp	r3, #0
 800801c:	d001      	beq.n	8008022 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800801e:	2301      	movs	r3, #1
 8008020:	e061      	b.n	80080e6 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	68da      	ldr	r2, [r3, #12]
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008030:	60da      	str	r2, [r3, #12]
      break;
 8008032:	e002      	b.n	800803a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8008034:	2301      	movs	r3, #1
 8008036:	75fb      	strb	r3, [r7, #23]
      break;
 8008038:	bf00      	nop
  }

  if (status == HAL_OK)
 800803a:	7dfb      	ldrb	r3, [r7, #23]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d151      	bne.n	80080e4 <HAL_TIM_PWM_Start_DMA+0x3c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	2201      	movs	r2, #1
 8008046:	68b9      	ldr	r1, [r7, #8]
 8008048:	4618      	mov	r0, r3
 800804a:	f000 ff85 	bl	8008f58 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4a2a      	ldr	r2, [pc, #168]	; (80080fc <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d009      	beq.n	800806c <HAL_TIM_PWM_Start_DMA+0x350>
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4a28      	ldr	r2, [pc, #160]	; (8008100 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d004      	beq.n	800806c <HAL_TIM_PWM_Start_DMA+0x350>
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a27      	ldr	r2, [pc, #156]	; (8008104 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d101      	bne.n	8008070 <HAL_TIM_PWM_Start_DMA+0x354>
 800806c:	2301      	movs	r3, #1
 800806e:	e000      	b.n	8008072 <HAL_TIM_PWM_Start_DMA+0x356>
 8008070:	2300      	movs	r3, #0
 8008072:	2b00      	cmp	r3, #0
 8008074:	d007      	beq.n	8008086 <HAL_TIM_PWM_Start_DMA+0x36a>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008084:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4a1c      	ldr	r2, [pc, #112]	; (80080fc <HAL_TIM_PWM_Start_DMA+0x3e0>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d009      	beq.n	80080a4 <HAL_TIM_PWM_Start_DMA+0x388>
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008098:	d004      	beq.n	80080a4 <HAL_TIM_PWM_Start_DMA+0x388>
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	4a18      	ldr	r2, [pc, #96]	; (8008100 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d115      	bne.n	80080d0 <HAL_TIM_PWM_Start_DMA+0x3b4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	689a      	ldr	r2, [r3, #8]
 80080aa:	4b17      	ldr	r3, [pc, #92]	; (8008108 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 80080ac:	4013      	ands	r3, r2
 80080ae:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	2b06      	cmp	r3, #6
 80080b4:	d015      	beq.n	80080e2 <HAL_TIM_PWM_Start_DMA+0x3c6>
 80080b6:	693b      	ldr	r3, [r7, #16]
 80080b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080bc:	d011      	beq.n	80080e2 <HAL_TIM_PWM_Start_DMA+0x3c6>
      {
        __HAL_TIM_ENABLE(htim);
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	681a      	ldr	r2, [r3, #0]
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f042 0201 	orr.w	r2, r2, #1
 80080cc:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080ce:	e008      	b.n	80080e2 <HAL_TIM_PWM_Start_DMA+0x3c6>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	681a      	ldr	r2, [r3, #0]
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f042 0201 	orr.w	r2, r2, #1
 80080de:	601a      	str	r2, [r3, #0]
 80080e0:	e000      	b.n	80080e4 <HAL_TIM_PWM_Start_DMA+0x3c8>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080e2:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80080e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3718      	adds	r7, #24
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}
 80080ee:	bf00      	nop
 80080f0:	08008751 	.word	0x08008751
 80080f4:	080087f9 	.word	0x080087f9
 80080f8:	080086bf 	.word	0x080086bf
 80080fc:	40012c00 	.word	0x40012c00
 8008100:	40014000 	.word	0x40014000
 8008104:	40014400 	.word	0x40014400
 8008108:	00010007 	.word	0x00010007

0800810c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b084      	sub	sp, #16
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008116:	2300      	movs	r3, #0
 8008118:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	2b0c      	cmp	r3, #12
 800811e:	d855      	bhi.n	80081cc <HAL_TIM_PWM_Stop_DMA+0xc0>
 8008120:	a201      	add	r2, pc, #4	; (adr r2, 8008128 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8008122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008126:	bf00      	nop
 8008128:	0800815d 	.word	0x0800815d
 800812c:	080081cd 	.word	0x080081cd
 8008130:	080081cd 	.word	0x080081cd
 8008134:	080081cd 	.word	0x080081cd
 8008138:	08008179 	.word	0x08008179
 800813c:	080081cd 	.word	0x080081cd
 8008140:	080081cd 	.word	0x080081cd
 8008144:	080081cd 	.word	0x080081cd
 8008148:	08008195 	.word	0x08008195
 800814c:	080081cd 	.word	0x080081cd
 8008150:	080081cd 	.word	0x080081cd
 8008154:	080081cd 	.word	0x080081cd
 8008158:	080081b1 	.word	0x080081b1
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	68da      	ldr	r2, [r3, #12]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800816a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008170:	4618      	mov	r0, r3
 8008172:	f7fd fe2d 	bl	8005dd0 <HAL_DMA_Abort_IT>
      break;
 8008176:	e02c      	b.n	80081d2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	68da      	ldr	r2, [r3, #12]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008186:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800818c:	4618      	mov	r0, r3
 800818e:	f7fd fe1f 	bl	8005dd0 <HAL_DMA_Abort_IT>
      break;
 8008192:	e01e      	b.n	80081d2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	68da      	ldr	r2, [r3, #12]
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80081a2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081a8:	4618      	mov	r0, r3
 80081aa:	f7fd fe11 	bl	8005dd0 <HAL_DMA_Abort_IT>
      break;
 80081ae:	e010      	b.n	80081d2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	68da      	ldr	r2, [r3, #12]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80081be:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081c4:	4618      	mov	r0, r3
 80081c6:	f7fd fe03 	bl	8005dd0 <HAL_DMA_Abort_IT>
      break;
 80081ca:	e002      	b.n	80081d2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80081cc:	2301      	movs	r3, #1
 80081ce:	73fb      	strb	r3, [r7, #15]
      break;
 80081d0:	bf00      	nop
  }

  if (status == HAL_OK)
 80081d2:	7bfb      	ldrb	r3, [r7, #15]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d176      	bne.n	80082c6 <HAL_TIM_PWM_Stop_DMA+0x1ba>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	2200      	movs	r2, #0
 80081de:	6839      	ldr	r1, [r7, #0]
 80081e0:	4618      	mov	r0, r3
 80081e2:	f000 feb9 	bl	8008f58 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4a39      	ldr	r2, [pc, #228]	; (80082d0 <HAL_TIM_PWM_Stop_DMA+0x1c4>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d009      	beq.n	8008204 <HAL_TIM_PWM_Stop_DMA+0xf8>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4a37      	ldr	r2, [pc, #220]	; (80082d4 <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d004      	beq.n	8008204 <HAL_TIM_PWM_Stop_DMA+0xf8>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	4a36      	ldr	r2, [pc, #216]	; (80082d8 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d101      	bne.n	8008208 <HAL_TIM_PWM_Stop_DMA+0xfc>
 8008204:	2301      	movs	r3, #1
 8008206:	e000      	b.n	800820a <HAL_TIM_PWM_Stop_DMA+0xfe>
 8008208:	2300      	movs	r3, #0
 800820a:	2b00      	cmp	r3, #0
 800820c:	d017      	beq.n	800823e <HAL_TIM_PWM_Stop_DMA+0x132>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	6a1a      	ldr	r2, [r3, #32]
 8008214:	f241 1311 	movw	r3, #4369	; 0x1111
 8008218:	4013      	ands	r3, r2
 800821a:	2b00      	cmp	r3, #0
 800821c:	d10f      	bne.n	800823e <HAL_TIM_PWM_Stop_DMA+0x132>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	6a1a      	ldr	r2, [r3, #32]
 8008224:	f240 4344 	movw	r3, #1092	; 0x444
 8008228:	4013      	ands	r3, r2
 800822a:	2b00      	cmp	r3, #0
 800822c:	d107      	bne.n	800823e <HAL_TIM_PWM_Stop_DMA+0x132>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800823c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	6a1a      	ldr	r2, [r3, #32]
 8008244:	f241 1311 	movw	r3, #4369	; 0x1111
 8008248:	4013      	ands	r3, r2
 800824a:	2b00      	cmp	r3, #0
 800824c:	d10f      	bne.n	800826e <HAL_TIM_PWM_Stop_DMA+0x162>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	6a1a      	ldr	r2, [r3, #32]
 8008254:	f240 4344 	movw	r3, #1092	; 0x444
 8008258:	4013      	ands	r3, r2
 800825a:	2b00      	cmp	r3, #0
 800825c:	d107      	bne.n	800826e <HAL_TIM_PWM_Stop_DMA+0x162>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	681a      	ldr	r2, [r3, #0]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f022 0201 	bic.w	r2, r2, #1
 800826c:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d104      	bne.n	800827e <HAL_TIM_PWM_Stop_DMA+0x172>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2201      	movs	r2, #1
 8008278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800827c:	e023      	b.n	80082c6 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	2b04      	cmp	r3, #4
 8008282:	d104      	bne.n	800828e <HAL_TIM_PWM_Stop_DMA+0x182>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2201      	movs	r2, #1
 8008288:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800828c:	e01b      	b.n	80082c6 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	2b08      	cmp	r3, #8
 8008292:	d104      	bne.n	800829e <HAL_TIM_PWM_Stop_DMA+0x192>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2201      	movs	r2, #1
 8008298:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800829c:	e013      	b.n	80082c6 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	2b0c      	cmp	r3, #12
 80082a2:	d104      	bne.n	80082ae <HAL_TIM_PWM_Stop_DMA+0x1a2>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2201      	movs	r2, #1
 80082a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80082ac:	e00b      	b.n	80082c6 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	2b10      	cmp	r3, #16
 80082b2:	d104      	bne.n	80082be <HAL_TIM_PWM_Stop_DMA+0x1b2>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2201      	movs	r2, #1
 80082b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80082bc:	e003      	b.n	80082c6 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2201      	movs	r2, #1
 80082c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 80082c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3710      	adds	r7, #16
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}
 80082d0:	40012c00 	.word	0x40012c00
 80082d4:	40014000 	.word	0x40014000
 80082d8:	40014400 	.word	0x40014400

080082dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b086      	sub	sp, #24
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	60f8      	str	r0, [r7, #12]
 80082e4:	60b9      	str	r1, [r7, #8]
 80082e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80082e8:	2300      	movs	r3, #0
 80082ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082f2:	2b01      	cmp	r3, #1
 80082f4:	d101      	bne.n	80082fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80082f6:	2302      	movs	r3, #2
 80082f8:	e0ff      	b.n	80084fa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	2201      	movs	r2, #1
 80082fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2b14      	cmp	r3, #20
 8008306:	f200 80f0 	bhi.w	80084ea <HAL_TIM_PWM_ConfigChannel+0x20e>
 800830a:	a201      	add	r2, pc, #4	; (adr r2, 8008310 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800830c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008310:	08008365 	.word	0x08008365
 8008314:	080084eb 	.word	0x080084eb
 8008318:	080084eb 	.word	0x080084eb
 800831c:	080084eb 	.word	0x080084eb
 8008320:	080083a5 	.word	0x080083a5
 8008324:	080084eb 	.word	0x080084eb
 8008328:	080084eb 	.word	0x080084eb
 800832c:	080084eb 	.word	0x080084eb
 8008330:	080083e7 	.word	0x080083e7
 8008334:	080084eb 	.word	0x080084eb
 8008338:	080084eb 	.word	0x080084eb
 800833c:	080084eb 	.word	0x080084eb
 8008340:	08008427 	.word	0x08008427
 8008344:	080084eb 	.word	0x080084eb
 8008348:	080084eb 	.word	0x080084eb
 800834c:	080084eb 	.word	0x080084eb
 8008350:	08008469 	.word	0x08008469
 8008354:	080084eb 	.word	0x080084eb
 8008358:	080084eb 	.word	0x080084eb
 800835c:	080084eb 	.word	0x080084eb
 8008360:	080084a9 	.word	0x080084a9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	68b9      	ldr	r1, [r7, #8]
 800836a:	4618      	mov	r0, r3
 800836c:	f000 fadc 	bl	8008928 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	699a      	ldr	r2, [r3, #24]
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f042 0208 	orr.w	r2, r2, #8
 800837e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	699a      	ldr	r2, [r3, #24]
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f022 0204 	bic.w	r2, r2, #4
 800838e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	6999      	ldr	r1, [r3, #24]
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	691a      	ldr	r2, [r3, #16]
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	430a      	orrs	r2, r1
 80083a0:	619a      	str	r2, [r3, #24]
      break;
 80083a2:	e0a5      	b.n	80084f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	68b9      	ldr	r1, [r7, #8]
 80083aa:	4618      	mov	r0, r3
 80083ac:	f000 fb38 	bl	8008a20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	699a      	ldr	r2, [r3, #24]
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80083be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	699a      	ldr	r2, [r3, #24]
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	6999      	ldr	r1, [r3, #24]
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	691b      	ldr	r3, [r3, #16]
 80083da:	021a      	lsls	r2, r3, #8
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	430a      	orrs	r2, r1
 80083e2:	619a      	str	r2, [r3, #24]
      break;
 80083e4:	e084      	b.n	80084f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	68b9      	ldr	r1, [r7, #8]
 80083ec:	4618      	mov	r0, r3
 80083ee:	f000 fb91 	bl	8008b14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	69da      	ldr	r2, [r3, #28]
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f042 0208 	orr.w	r2, r2, #8
 8008400:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	69da      	ldr	r2, [r3, #28]
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f022 0204 	bic.w	r2, r2, #4
 8008410:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	69d9      	ldr	r1, [r3, #28]
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	691a      	ldr	r2, [r3, #16]
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	430a      	orrs	r2, r1
 8008422:	61da      	str	r2, [r3, #28]
      break;
 8008424:	e064      	b.n	80084f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	68b9      	ldr	r1, [r7, #8]
 800842c:	4618      	mov	r0, r3
 800842e:	f000 fbe9 	bl	8008c04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	69da      	ldr	r2, [r3, #28]
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008440:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	69da      	ldr	r2, [r3, #28]
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008450:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	69d9      	ldr	r1, [r3, #28]
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	691b      	ldr	r3, [r3, #16]
 800845c:	021a      	lsls	r2, r3, #8
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	430a      	orrs	r2, r1
 8008464:	61da      	str	r2, [r3, #28]
      break;
 8008466:	e043      	b.n	80084f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	68b9      	ldr	r1, [r7, #8]
 800846e:	4618      	mov	r0, r3
 8008470:	f000 fc26 	bl	8008cc0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f042 0208 	orr.w	r2, r2, #8
 8008482:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f022 0204 	bic.w	r2, r2, #4
 8008492:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	691a      	ldr	r2, [r3, #16]
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	430a      	orrs	r2, r1
 80084a4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80084a6:	e023      	b.n	80084f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	68b9      	ldr	r1, [r7, #8]
 80084ae:	4618      	mov	r0, r3
 80084b0:	f000 fc5e 	bl	8008d70 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80084c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80084d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	691b      	ldr	r3, [r3, #16]
 80084de:	021a      	lsls	r2, r3, #8
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	430a      	orrs	r2, r1
 80084e6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80084e8:	e002      	b.n	80084f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80084ea:	2301      	movs	r3, #1
 80084ec:	75fb      	strb	r3, [r7, #23]
      break;
 80084ee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	2200      	movs	r2, #0
 80084f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80084f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3718      	adds	r7, #24
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}
 8008502:	bf00      	nop

08008504 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b084      	sub	sp, #16
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
 800850c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800850e:	2300      	movs	r3, #0
 8008510:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008518:	2b01      	cmp	r3, #1
 800851a:	d101      	bne.n	8008520 <HAL_TIM_ConfigClockSource+0x1c>
 800851c:	2302      	movs	r3, #2
 800851e:	e0b6      	b.n	800868e <HAL_TIM_ConfigClockSource+0x18a>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2201      	movs	r2, #1
 8008524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2202      	movs	r2, #2
 800852c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	689b      	ldr	r3, [r3, #8]
 8008536:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800853e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008542:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800854a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	68ba      	ldr	r2, [r7, #8]
 8008552:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800855c:	d03e      	beq.n	80085dc <HAL_TIM_ConfigClockSource+0xd8>
 800855e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008562:	f200 8087 	bhi.w	8008674 <HAL_TIM_ConfigClockSource+0x170>
 8008566:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800856a:	f000 8086 	beq.w	800867a <HAL_TIM_ConfigClockSource+0x176>
 800856e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008572:	d87f      	bhi.n	8008674 <HAL_TIM_ConfigClockSource+0x170>
 8008574:	2b70      	cmp	r3, #112	; 0x70
 8008576:	d01a      	beq.n	80085ae <HAL_TIM_ConfigClockSource+0xaa>
 8008578:	2b70      	cmp	r3, #112	; 0x70
 800857a:	d87b      	bhi.n	8008674 <HAL_TIM_ConfigClockSource+0x170>
 800857c:	2b60      	cmp	r3, #96	; 0x60
 800857e:	d050      	beq.n	8008622 <HAL_TIM_ConfigClockSource+0x11e>
 8008580:	2b60      	cmp	r3, #96	; 0x60
 8008582:	d877      	bhi.n	8008674 <HAL_TIM_ConfigClockSource+0x170>
 8008584:	2b50      	cmp	r3, #80	; 0x50
 8008586:	d03c      	beq.n	8008602 <HAL_TIM_ConfigClockSource+0xfe>
 8008588:	2b50      	cmp	r3, #80	; 0x50
 800858a:	d873      	bhi.n	8008674 <HAL_TIM_ConfigClockSource+0x170>
 800858c:	2b40      	cmp	r3, #64	; 0x40
 800858e:	d058      	beq.n	8008642 <HAL_TIM_ConfigClockSource+0x13e>
 8008590:	2b40      	cmp	r3, #64	; 0x40
 8008592:	d86f      	bhi.n	8008674 <HAL_TIM_ConfigClockSource+0x170>
 8008594:	2b30      	cmp	r3, #48	; 0x30
 8008596:	d064      	beq.n	8008662 <HAL_TIM_ConfigClockSource+0x15e>
 8008598:	2b30      	cmp	r3, #48	; 0x30
 800859a:	d86b      	bhi.n	8008674 <HAL_TIM_ConfigClockSource+0x170>
 800859c:	2b20      	cmp	r3, #32
 800859e:	d060      	beq.n	8008662 <HAL_TIM_ConfigClockSource+0x15e>
 80085a0:	2b20      	cmp	r3, #32
 80085a2:	d867      	bhi.n	8008674 <HAL_TIM_ConfigClockSource+0x170>
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d05c      	beq.n	8008662 <HAL_TIM_ConfigClockSource+0x15e>
 80085a8:	2b10      	cmp	r3, #16
 80085aa:	d05a      	beq.n	8008662 <HAL_TIM_ConfigClockSource+0x15e>
 80085ac:	e062      	b.n	8008674 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80085be:	f000 fcab 	bl	8008f18 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	689b      	ldr	r3, [r3, #8]
 80085c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80085d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	68ba      	ldr	r2, [r7, #8]
 80085d8:	609a      	str	r2, [r3, #8]
      break;
 80085da:	e04f      	b.n	800867c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80085ec:	f000 fc94 	bl	8008f18 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	689a      	ldr	r2, [r3, #8]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80085fe:	609a      	str	r2, [r3, #8]
      break;
 8008600:	e03c      	b.n	800867c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800860e:	461a      	mov	r2, r3
 8008610:	f000 fc08 	bl	8008e24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	2150      	movs	r1, #80	; 0x50
 800861a:	4618      	mov	r0, r3
 800861c:	f000 fc61 	bl	8008ee2 <TIM_ITRx_SetConfig>
      break;
 8008620:	e02c      	b.n	800867c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800862e:	461a      	mov	r2, r3
 8008630:	f000 fc27 	bl	8008e82 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	2160      	movs	r1, #96	; 0x60
 800863a:	4618      	mov	r0, r3
 800863c:	f000 fc51 	bl	8008ee2 <TIM_ITRx_SetConfig>
      break;
 8008640:	e01c      	b.n	800867c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800864e:	461a      	mov	r2, r3
 8008650:	f000 fbe8 	bl	8008e24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	2140      	movs	r1, #64	; 0x40
 800865a:	4618      	mov	r0, r3
 800865c:	f000 fc41 	bl	8008ee2 <TIM_ITRx_SetConfig>
      break;
 8008660:	e00c      	b.n	800867c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681a      	ldr	r2, [r3, #0]
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4619      	mov	r1, r3
 800866c:	4610      	mov	r0, r2
 800866e:	f000 fc38 	bl	8008ee2 <TIM_ITRx_SetConfig>
      break;
 8008672:	e003      	b.n	800867c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8008674:	2301      	movs	r3, #1
 8008676:	73fb      	strb	r3, [r7, #15]
      break;
 8008678:	e000      	b.n	800867c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800867a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2201      	movs	r2, #1
 8008680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2200      	movs	r2, #0
 8008688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800868c:	7bfb      	ldrb	r3, [r7, #15]
}
 800868e:	4618      	mov	r0, r3
 8008690:	3710      	adds	r7, #16
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}

08008696 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008696:	b480      	push	{r7}
 8008698:	b083      	sub	sp, #12
 800869a:	af00      	add	r7, sp, #0
 800869c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800869e:	bf00      	nop
 80086a0:	370c      	adds	r7, #12
 80086a2:	46bd      	mov	sp, r7
 80086a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a8:	4770      	bx	lr

080086aa <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80086aa:	b480      	push	{r7}
 80086ac:	b083      	sub	sp, #12
 80086ae:	af00      	add	r7, sp, #0
 80086b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80086b2:	bf00      	nop
 80086b4:	370c      	adds	r7, #12
 80086b6:	46bd      	mov	sp, r7
 80086b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086bc:	4770      	bx	lr

080086be <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80086be:	b580      	push	{r7, lr}
 80086c0:	b084      	sub	sp, #16
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ca:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086d0:	687a      	ldr	r2, [r7, #4]
 80086d2:	429a      	cmp	r2, r3
 80086d4:	d107      	bne.n	80086e6 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	2201      	movs	r2, #1
 80086da:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	2201      	movs	r2, #1
 80086e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80086e4:	e02a      	b.n	800873c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ea:	687a      	ldr	r2, [r7, #4]
 80086ec:	429a      	cmp	r2, r3
 80086ee:	d107      	bne.n	8008700 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	2202      	movs	r2, #2
 80086f4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	2201      	movs	r2, #1
 80086fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80086fe:	e01d      	b.n	800873c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008704:	687a      	ldr	r2, [r7, #4]
 8008706:	429a      	cmp	r2, r3
 8008708:	d107      	bne.n	800871a <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	2204      	movs	r2, #4
 800870e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	2201      	movs	r2, #1
 8008714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008718:	e010      	b.n	800873c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800871e:	687a      	ldr	r2, [r7, #4]
 8008720:	429a      	cmp	r2, r3
 8008722:	d107      	bne.n	8008734 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	2208      	movs	r2, #8
 8008728:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	2201      	movs	r2, #1
 800872e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008732:	e003      	b.n	800873c <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	2201      	movs	r2, #1
 8008738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800873c:	68f8      	ldr	r0, [r7, #12]
 800873e:	f7ff ffb4 	bl	80086aa <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	2200      	movs	r2, #0
 8008746:	771a      	strb	r2, [r3, #28]
}
 8008748:	bf00      	nop
 800874a:	3710      	adds	r7, #16
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}

08008750 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b084      	sub	sp, #16
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800875c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008762:	687a      	ldr	r2, [r7, #4]
 8008764:	429a      	cmp	r2, r3
 8008766:	d10b      	bne.n	8008780 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2201      	movs	r2, #1
 800876c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	69db      	ldr	r3, [r3, #28]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d136      	bne.n	80087e4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2201      	movs	r2, #1
 800877a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800877e:	e031      	b.n	80087e4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008784:	687a      	ldr	r2, [r7, #4]
 8008786:	429a      	cmp	r2, r3
 8008788:	d10b      	bne.n	80087a2 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	2202      	movs	r2, #2
 800878e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	69db      	ldr	r3, [r3, #28]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d125      	bne.n	80087e4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	2201      	movs	r2, #1
 800879c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80087a0:	e020      	b.n	80087e4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087a6:	687a      	ldr	r2, [r7, #4]
 80087a8:	429a      	cmp	r2, r3
 80087aa:	d10b      	bne.n	80087c4 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	2204      	movs	r2, #4
 80087b0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	69db      	ldr	r3, [r3, #28]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d114      	bne.n	80087e4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	2201      	movs	r2, #1
 80087be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80087c2:	e00f      	b.n	80087e4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087c8:	687a      	ldr	r2, [r7, #4]
 80087ca:	429a      	cmp	r2, r3
 80087cc:	d10a      	bne.n	80087e4 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	2208      	movs	r2, #8
 80087d2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	69db      	ldr	r3, [r3, #28]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d103      	bne.n	80087e4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	2201      	movs	r2, #1
 80087e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087e4:	68f8      	ldr	r0, [r7, #12]
 80087e6:	f002 fc91 	bl	800b10c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	2200      	movs	r2, #0
 80087ee:	771a      	strb	r2, [r3, #28]
  //g_tim_pwm_transfer_cmplt = true;

}
 80087f0:	bf00      	nop
 80087f2:	3710      	adds	r7, #16
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}

080087f8 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b084      	sub	sp, #16
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008804:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800880a:	687a      	ldr	r2, [r7, #4]
 800880c:	429a      	cmp	r2, r3
 800880e:	d103      	bne.n	8008818 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	2201      	movs	r2, #1
 8008814:	771a      	strb	r2, [r3, #28]
 8008816:	e019      	b.n	800884c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800881c:	687a      	ldr	r2, [r7, #4]
 800881e:	429a      	cmp	r2, r3
 8008820:	d103      	bne.n	800882a <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	2202      	movs	r2, #2
 8008826:	771a      	strb	r2, [r3, #28]
 8008828:	e010      	b.n	800884c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800882e:	687a      	ldr	r2, [r7, #4]
 8008830:	429a      	cmp	r2, r3
 8008832:	d103      	bne.n	800883c <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	2204      	movs	r2, #4
 8008838:	771a      	strb	r2, [r3, #28]
 800883a:	e007      	b.n	800884c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008840:	687a      	ldr	r2, [r7, #4]
 8008842:	429a      	cmp	r2, r3
 8008844:	d102      	bne.n	800884c <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	2208      	movs	r2, #8
 800884a:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800884c:	68f8      	ldr	r0, [r7, #12]
 800884e:	f7ff ff22 	bl	8008696 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	2200      	movs	r2, #0
 8008856:	771a      	strb	r2, [r3, #28]
}
 8008858:	bf00      	nop
 800885a:	3710      	adds	r7, #16
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}

08008860 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008860:	b480      	push	{r7}
 8008862:	b085      	sub	sp, #20
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
 8008868:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	4a2a      	ldr	r2, [pc, #168]	; (800891c <TIM_Base_SetConfig+0xbc>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d003      	beq.n	8008880 <TIM_Base_SetConfig+0x20>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800887e:	d108      	bne.n	8008892 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008886:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	685b      	ldr	r3, [r3, #4]
 800888c:	68fa      	ldr	r2, [r7, #12]
 800888e:	4313      	orrs	r3, r2
 8008890:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	4a21      	ldr	r2, [pc, #132]	; (800891c <TIM_Base_SetConfig+0xbc>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d00b      	beq.n	80088b2 <TIM_Base_SetConfig+0x52>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088a0:	d007      	beq.n	80088b2 <TIM_Base_SetConfig+0x52>
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	4a1e      	ldr	r2, [pc, #120]	; (8008920 <TIM_Base_SetConfig+0xc0>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d003      	beq.n	80088b2 <TIM_Base_SetConfig+0x52>
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	4a1d      	ldr	r2, [pc, #116]	; (8008924 <TIM_Base_SetConfig+0xc4>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d108      	bne.n	80088c4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	68db      	ldr	r3, [r3, #12]
 80088be:	68fa      	ldr	r2, [r7, #12]
 80088c0:	4313      	orrs	r3, r2
 80088c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	695b      	ldr	r3, [r3, #20]
 80088ce:	4313      	orrs	r3, r2
 80088d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	68fa      	ldr	r2, [r7, #12]
 80088d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	689a      	ldr	r2, [r3, #8]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	681a      	ldr	r2, [r3, #0]
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	4a0c      	ldr	r2, [pc, #48]	; (800891c <TIM_Base_SetConfig+0xbc>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d007      	beq.n	8008900 <TIM_Base_SetConfig+0xa0>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	4a0b      	ldr	r2, [pc, #44]	; (8008920 <TIM_Base_SetConfig+0xc0>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d003      	beq.n	8008900 <TIM_Base_SetConfig+0xa0>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	4a0a      	ldr	r2, [pc, #40]	; (8008924 <TIM_Base_SetConfig+0xc4>)
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d103      	bne.n	8008908 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	691a      	ldr	r2, [r3, #16]
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2201      	movs	r2, #1
 800890c:	615a      	str	r2, [r3, #20]
}
 800890e:	bf00      	nop
 8008910:	3714      	adds	r7, #20
 8008912:	46bd      	mov	sp, r7
 8008914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008918:	4770      	bx	lr
 800891a:	bf00      	nop
 800891c:	40012c00 	.word	0x40012c00
 8008920:	40014000 	.word	0x40014000
 8008924:	40014400 	.word	0x40014400

08008928 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008928:	b480      	push	{r7}
 800892a:	b087      	sub	sp, #28
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
 8008930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6a1b      	ldr	r3, [r3, #32]
 8008936:	f023 0201 	bic.w	r2, r3, #1
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6a1b      	ldr	r3, [r3, #32]
 8008942:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	685b      	ldr	r3, [r3, #4]
 8008948:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	699b      	ldr	r3, [r3, #24]
 800894e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800895a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	f023 0303 	bic.w	r3, r3, #3
 8008962:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	68fa      	ldr	r2, [r7, #12]
 800896a:	4313      	orrs	r3, r2
 800896c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	f023 0302 	bic.w	r3, r3, #2
 8008974:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	689b      	ldr	r3, [r3, #8]
 800897a:	697a      	ldr	r2, [r7, #20]
 800897c:	4313      	orrs	r3, r2
 800897e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	4a24      	ldr	r2, [pc, #144]	; (8008a14 <TIM_OC1_SetConfig+0xec>)
 8008984:	4293      	cmp	r3, r2
 8008986:	d007      	beq.n	8008998 <TIM_OC1_SetConfig+0x70>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	4a23      	ldr	r2, [pc, #140]	; (8008a18 <TIM_OC1_SetConfig+0xf0>)
 800898c:	4293      	cmp	r3, r2
 800898e:	d003      	beq.n	8008998 <TIM_OC1_SetConfig+0x70>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	4a22      	ldr	r2, [pc, #136]	; (8008a1c <TIM_OC1_SetConfig+0xf4>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d10c      	bne.n	80089b2 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	f023 0308 	bic.w	r3, r3, #8
 800899e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	68db      	ldr	r3, [r3, #12]
 80089a4:	697a      	ldr	r2, [r7, #20]
 80089a6:	4313      	orrs	r3, r2
 80089a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	f023 0304 	bic.w	r3, r3, #4
 80089b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	4a17      	ldr	r2, [pc, #92]	; (8008a14 <TIM_OC1_SetConfig+0xec>)
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d007      	beq.n	80089ca <TIM_OC1_SetConfig+0xa2>
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	4a16      	ldr	r2, [pc, #88]	; (8008a18 <TIM_OC1_SetConfig+0xf0>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d003      	beq.n	80089ca <TIM_OC1_SetConfig+0xa2>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	4a15      	ldr	r2, [pc, #84]	; (8008a1c <TIM_OC1_SetConfig+0xf4>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d111      	bne.n	80089ee <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80089d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80089d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	695b      	ldr	r3, [r3, #20]
 80089de:	693a      	ldr	r2, [r7, #16]
 80089e0:	4313      	orrs	r3, r2
 80089e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	699b      	ldr	r3, [r3, #24]
 80089e8:	693a      	ldr	r2, [r7, #16]
 80089ea:	4313      	orrs	r3, r2
 80089ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	693a      	ldr	r2, [r7, #16]
 80089f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	68fa      	ldr	r2, [r7, #12]
 80089f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	685a      	ldr	r2, [r3, #4]
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	697a      	ldr	r2, [r7, #20]
 8008a06:	621a      	str	r2, [r3, #32]
}
 8008a08:	bf00      	nop
 8008a0a:	371c      	adds	r7, #28
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a12:	4770      	bx	lr
 8008a14:	40012c00 	.word	0x40012c00
 8008a18:	40014000 	.word	0x40014000
 8008a1c:	40014400 	.word	0x40014400

08008a20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008a20:	b480      	push	{r7}
 8008a22:	b087      	sub	sp, #28
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
 8008a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6a1b      	ldr	r3, [r3, #32]
 8008a2e:	f023 0210 	bic.w	r2, r3, #16
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6a1b      	ldr	r3, [r3, #32]
 8008a3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	685b      	ldr	r3, [r3, #4]
 8008a40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	699b      	ldr	r3, [r3, #24]
 8008a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008a4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	021b      	lsls	r3, r3, #8
 8008a62:	68fa      	ldr	r2, [r7, #12]
 8008a64:	4313      	orrs	r3, r2
 8008a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008a68:	697b      	ldr	r3, [r7, #20]
 8008a6a:	f023 0320 	bic.w	r3, r3, #32
 8008a6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	689b      	ldr	r3, [r3, #8]
 8008a74:	011b      	lsls	r3, r3, #4
 8008a76:	697a      	ldr	r2, [r7, #20]
 8008a78:	4313      	orrs	r3, r2
 8008a7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	4a22      	ldr	r2, [pc, #136]	; (8008b08 <TIM_OC2_SetConfig+0xe8>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d10d      	bne.n	8008aa0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	68db      	ldr	r3, [r3, #12]
 8008a90:	011b      	lsls	r3, r3, #4
 8008a92:	697a      	ldr	r2, [r7, #20]
 8008a94:	4313      	orrs	r3, r2
 8008a96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008a98:	697b      	ldr	r3, [r7, #20]
 8008a9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a9e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	4a19      	ldr	r2, [pc, #100]	; (8008b08 <TIM_OC2_SetConfig+0xe8>)
 8008aa4:	4293      	cmp	r3, r2
 8008aa6:	d007      	beq.n	8008ab8 <TIM_OC2_SetConfig+0x98>
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	4a18      	ldr	r2, [pc, #96]	; (8008b0c <TIM_OC2_SetConfig+0xec>)
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d003      	beq.n	8008ab8 <TIM_OC2_SetConfig+0x98>
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	4a17      	ldr	r2, [pc, #92]	; (8008b10 <TIM_OC2_SetConfig+0xf0>)
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d113      	bne.n	8008ae0 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008ab8:	693b      	ldr	r3, [r7, #16]
 8008aba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008abe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008ac0:	693b      	ldr	r3, [r7, #16]
 8008ac2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008ac6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	695b      	ldr	r3, [r3, #20]
 8008acc:	009b      	lsls	r3, r3, #2
 8008ace:	693a      	ldr	r2, [r7, #16]
 8008ad0:	4313      	orrs	r3, r2
 8008ad2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	699b      	ldr	r3, [r3, #24]
 8008ad8:	009b      	lsls	r3, r3, #2
 8008ada:	693a      	ldr	r2, [r7, #16]
 8008adc:	4313      	orrs	r3, r2
 8008ade:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	693a      	ldr	r2, [r7, #16]
 8008ae4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	68fa      	ldr	r2, [r7, #12]
 8008aea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	685a      	ldr	r2, [r3, #4]
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	697a      	ldr	r2, [r7, #20]
 8008af8:	621a      	str	r2, [r3, #32]
}
 8008afa:	bf00      	nop
 8008afc:	371c      	adds	r7, #28
 8008afe:	46bd      	mov	sp, r7
 8008b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b04:	4770      	bx	lr
 8008b06:	bf00      	nop
 8008b08:	40012c00 	.word	0x40012c00
 8008b0c:	40014000 	.word	0x40014000
 8008b10:	40014400 	.word	0x40014400

08008b14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b087      	sub	sp, #28
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
 8008b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6a1b      	ldr	r3, [r3, #32]
 8008b22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6a1b      	ldr	r3, [r3, #32]
 8008b2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	685b      	ldr	r3, [r3, #4]
 8008b34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	69db      	ldr	r3, [r3, #28]
 8008b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	f023 0303 	bic.w	r3, r3, #3
 8008b4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	68fa      	ldr	r2, [r7, #12]
 8008b56:	4313      	orrs	r3, r2
 8008b58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008b60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	689b      	ldr	r3, [r3, #8]
 8008b66:	021b      	lsls	r3, r3, #8
 8008b68:	697a      	ldr	r2, [r7, #20]
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	4a21      	ldr	r2, [pc, #132]	; (8008bf8 <TIM_OC3_SetConfig+0xe4>)
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d10d      	bne.n	8008b92 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008b76:	697b      	ldr	r3, [r7, #20]
 8008b78:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008b7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	68db      	ldr	r3, [r3, #12]
 8008b82:	021b      	lsls	r3, r3, #8
 8008b84:	697a      	ldr	r2, [r7, #20]
 8008b86:	4313      	orrs	r3, r2
 8008b88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008b8a:	697b      	ldr	r3, [r7, #20]
 8008b8c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008b90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	4a18      	ldr	r2, [pc, #96]	; (8008bf8 <TIM_OC3_SetConfig+0xe4>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d007      	beq.n	8008baa <TIM_OC3_SetConfig+0x96>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	4a17      	ldr	r2, [pc, #92]	; (8008bfc <TIM_OC3_SetConfig+0xe8>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d003      	beq.n	8008baa <TIM_OC3_SetConfig+0x96>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	4a16      	ldr	r2, [pc, #88]	; (8008c00 <TIM_OC3_SetConfig+0xec>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d113      	bne.n	8008bd2 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008bb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008bb2:	693b      	ldr	r3, [r7, #16]
 8008bb4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008bb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	695b      	ldr	r3, [r3, #20]
 8008bbe:	011b      	lsls	r3, r3, #4
 8008bc0:	693a      	ldr	r2, [r7, #16]
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	699b      	ldr	r3, [r3, #24]
 8008bca:	011b      	lsls	r3, r3, #4
 8008bcc:	693a      	ldr	r2, [r7, #16]
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	693a      	ldr	r2, [r7, #16]
 8008bd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	68fa      	ldr	r2, [r7, #12]
 8008bdc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	685a      	ldr	r2, [r3, #4]
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	697a      	ldr	r2, [r7, #20]
 8008bea:	621a      	str	r2, [r3, #32]
}
 8008bec:	bf00      	nop
 8008bee:	371c      	adds	r7, #28
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf6:	4770      	bx	lr
 8008bf8:	40012c00 	.word	0x40012c00
 8008bfc:	40014000 	.word	0x40014000
 8008c00:	40014400 	.word	0x40014400

08008c04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008c04:	b480      	push	{r7}
 8008c06:	b087      	sub	sp, #28
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6a1b      	ldr	r3, [r3, #32]
 8008c12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6a1b      	ldr	r3, [r3, #32]
 8008c1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	685b      	ldr	r3, [r3, #4]
 8008c24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	69db      	ldr	r3, [r3, #28]
 8008c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008c32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	021b      	lsls	r3, r3, #8
 8008c46:	68fa      	ldr	r2, [r7, #12]
 8008c48:	4313      	orrs	r3, r2
 8008c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008c4c:	693b      	ldr	r3, [r7, #16]
 8008c4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008c52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	689b      	ldr	r3, [r3, #8]
 8008c58:	031b      	lsls	r3, r3, #12
 8008c5a:	693a      	ldr	r2, [r7, #16]
 8008c5c:	4313      	orrs	r3, r2
 8008c5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	4a14      	ldr	r2, [pc, #80]	; (8008cb4 <TIM_OC4_SetConfig+0xb0>)
 8008c64:	4293      	cmp	r3, r2
 8008c66:	d007      	beq.n	8008c78 <TIM_OC4_SetConfig+0x74>
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	4a13      	ldr	r2, [pc, #76]	; (8008cb8 <TIM_OC4_SetConfig+0xb4>)
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d003      	beq.n	8008c78 <TIM_OC4_SetConfig+0x74>
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	4a12      	ldr	r2, [pc, #72]	; (8008cbc <TIM_OC4_SetConfig+0xb8>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d109      	bne.n	8008c8c <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008c78:	697b      	ldr	r3, [r7, #20]
 8008c7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c7e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	695b      	ldr	r3, [r3, #20]
 8008c84:	019b      	lsls	r3, r3, #6
 8008c86:	697a      	ldr	r2, [r7, #20]
 8008c88:	4313      	orrs	r3, r2
 8008c8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	697a      	ldr	r2, [r7, #20]
 8008c90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	68fa      	ldr	r2, [r7, #12]
 8008c96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	685a      	ldr	r2, [r3, #4]
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	693a      	ldr	r2, [r7, #16]
 8008ca4:	621a      	str	r2, [r3, #32]
}
 8008ca6:	bf00      	nop
 8008ca8:	371c      	adds	r7, #28
 8008caa:	46bd      	mov	sp, r7
 8008cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb0:	4770      	bx	lr
 8008cb2:	bf00      	nop
 8008cb4:	40012c00 	.word	0x40012c00
 8008cb8:	40014000 	.word	0x40014000
 8008cbc:	40014400 	.word	0x40014400

08008cc0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b087      	sub	sp, #28
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
 8008cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6a1b      	ldr	r3, [r3, #32]
 8008cce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6a1b      	ldr	r3, [r3, #32]
 8008cda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008cee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	68fa      	ldr	r2, [r7, #12]
 8008cfa:	4313      	orrs	r3, r2
 8008cfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008d04:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	689b      	ldr	r3, [r3, #8]
 8008d0a:	041b      	lsls	r3, r3, #16
 8008d0c:	693a      	ldr	r2, [r7, #16]
 8008d0e:	4313      	orrs	r3, r2
 8008d10:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	4a13      	ldr	r2, [pc, #76]	; (8008d64 <TIM_OC5_SetConfig+0xa4>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d007      	beq.n	8008d2a <TIM_OC5_SetConfig+0x6a>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	4a12      	ldr	r2, [pc, #72]	; (8008d68 <TIM_OC5_SetConfig+0xa8>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d003      	beq.n	8008d2a <TIM_OC5_SetConfig+0x6a>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	4a11      	ldr	r2, [pc, #68]	; (8008d6c <TIM_OC5_SetConfig+0xac>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d109      	bne.n	8008d3e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d30:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	695b      	ldr	r3, [r3, #20]
 8008d36:	021b      	lsls	r3, r3, #8
 8008d38:	697a      	ldr	r2, [r7, #20]
 8008d3a:	4313      	orrs	r3, r2
 8008d3c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	697a      	ldr	r2, [r7, #20]
 8008d42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	68fa      	ldr	r2, [r7, #12]
 8008d48:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	685a      	ldr	r2, [r3, #4]
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	693a      	ldr	r2, [r7, #16]
 8008d56:	621a      	str	r2, [r3, #32]
}
 8008d58:	bf00      	nop
 8008d5a:	371c      	adds	r7, #28
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d62:	4770      	bx	lr
 8008d64:	40012c00 	.word	0x40012c00
 8008d68:	40014000 	.word	0x40014000
 8008d6c:	40014400 	.word	0x40014400

08008d70 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b087      	sub	sp, #28
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
 8008d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6a1b      	ldr	r3, [r3, #32]
 8008d7e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6a1b      	ldr	r3, [r3, #32]
 8008d8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	685b      	ldr	r3, [r3, #4]
 8008d90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008d9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008da2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	021b      	lsls	r3, r3, #8
 8008daa:	68fa      	ldr	r2, [r7, #12]
 8008dac:	4313      	orrs	r3, r2
 8008dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008db6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	689b      	ldr	r3, [r3, #8]
 8008dbc:	051b      	lsls	r3, r3, #20
 8008dbe:	693a      	ldr	r2, [r7, #16]
 8008dc0:	4313      	orrs	r3, r2
 8008dc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	4a14      	ldr	r2, [pc, #80]	; (8008e18 <TIM_OC6_SetConfig+0xa8>)
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d007      	beq.n	8008ddc <TIM_OC6_SetConfig+0x6c>
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	4a13      	ldr	r2, [pc, #76]	; (8008e1c <TIM_OC6_SetConfig+0xac>)
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d003      	beq.n	8008ddc <TIM_OC6_SetConfig+0x6c>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	4a12      	ldr	r2, [pc, #72]	; (8008e20 <TIM_OC6_SetConfig+0xb0>)
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	d109      	bne.n	8008df0 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008ddc:	697b      	ldr	r3, [r7, #20]
 8008dde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008de2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	695b      	ldr	r3, [r3, #20]
 8008de8:	029b      	lsls	r3, r3, #10
 8008dea:	697a      	ldr	r2, [r7, #20]
 8008dec:	4313      	orrs	r3, r2
 8008dee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	697a      	ldr	r2, [r7, #20]
 8008df4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	68fa      	ldr	r2, [r7, #12]
 8008dfa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	685a      	ldr	r2, [r3, #4]
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	693a      	ldr	r2, [r7, #16]
 8008e08:	621a      	str	r2, [r3, #32]
}
 8008e0a:	bf00      	nop
 8008e0c:	371c      	adds	r7, #28
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e14:	4770      	bx	lr
 8008e16:	bf00      	nop
 8008e18:	40012c00 	.word	0x40012c00
 8008e1c:	40014000 	.word	0x40014000
 8008e20:	40014400 	.word	0x40014400

08008e24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b087      	sub	sp, #28
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	60f8      	str	r0, [r7, #12]
 8008e2c:	60b9      	str	r1, [r7, #8]
 8008e2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	6a1b      	ldr	r3, [r3, #32]
 8008e34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	6a1b      	ldr	r3, [r3, #32]
 8008e3a:	f023 0201 	bic.w	r2, r3, #1
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	699b      	ldr	r3, [r3, #24]
 8008e46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008e4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	011b      	lsls	r3, r3, #4
 8008e54:	693a      	ldr	r2, [r7, #16]
 8008e56:	4313      	orrs	r3, r2
 8008e58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	f023 030a 	bic.w	r3, r3, #10
 8008e60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008e62:	697a      	ldr	r2, [r7, #20]
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	4313      	orrs	r3, r2
 8008e68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	693a      	ldr	r2, [r7, #16]
 8008e6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	697a      	ldr	r2, [r7, #20]
 8008e74:	621a      	str	r2, [r3, #32]
}
 8008e76:	bf00      	nop
 8008e78:	371c      	adds	r7, #28
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e80:	4770      	bx	lr

08008e82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e82:	b480      	push	{r7}
 8008e84:	b087      	sub	sp, #28
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	60f8      	str	r0, [r7, #12]
 8008e8a:	60b9      	str	r1, [r7, #8]
 8008e8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	6a1b      	ldr	r3, [r3, #32]
 8008e92:	f023 0210 	bic.w	r2, r3, #16
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	699b      	ldr	r3, [r3, #24]
 8008e9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	6a1b      	ldr	r3, [r3, #32]
 8008ea4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008eac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	031b      	lsls	r3, r3, #12
 8008eb2:	697a      	ldr	r2, [r7, #20]
 8008eb4:	4313      	orrs	r3, r2
 8008eb6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008eb8:	693b      	ldr	r3, [r7, #16]
 8008eba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008ebe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	011b      	lsls	r3, r3, #4
 8008ec4:	693a      	ldr	r2, [r7, #16]
 8008ec6:	4313      	orrs	r3, r2
 8008ec8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	697a      	ldr	r2, [r7, #20]
 8008ece:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	693a      	ldr	r2, [r7, #16]
 8008ed4:	621a      	str	r2, [r3, #32]
}
 8008ed6:	bf00      	nop
 8008ed8:	371c      	adds	r7, #28
 8008eda:	46bd      	mov	sp, r7
 8008edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee0:	4770      	bx	lr

08008ee2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008ee2:	b480      	push	{r7}
 8008ee4:	b085      	sub	sp, #20
 8008ee6:	af00      	add	r7, sp, #0
 8008ee8:	6078      	str	r0, [r7, #4]
 8008eea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	689b      	ldr	r3, [r3, #8]
 8008ef0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ef8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008efa:	683a      	ldr	r2, [r7, #0]
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	4313      	orrs	r3, r2
 8008f00:	f043 0307 	orr.w	r3, r3, #7
 8008f04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	68fa      	ldr	r2, [r7, #12]
 8008f0a:	609a      	str	r2, [r3, #8]
}
 8008f0c:	bf00      	nop
 8008f0e:	3714      	adds	r7, #20
 8008f10:	46bd      	mov	sp, r7
 8008f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f16:	4770      	bx	lr

08008f18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b087      	sub	sp, #28
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	60f8      	str	r0, [r7, #12]
 8008f20:	60b9      	str	r1, [r7, #8]
 8008f22:	607a      	str	r2, [r7, #4]
 8008f24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	689b      	ldr	r3, [r3, #8]
 8008f2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f2c:	697b      	ldr	r3, [r7, #20]
 8008f2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008f32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	021a      	lsls	r2, r3, #8
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	431a      	orrs	r2, r3
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	4313      	orrs	r3, r2
 8008f40:	697a      	ldr	r2, [r7, #20]
 8008f42:	4313      	orrs	r3, r2
 8008f44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	697a      	ldr	r2, [r7, #20]
 8008f4a:	609a      	str	r2, [r3, #8]
}
 8008f4c:	bf00      	nop
 8008f4e:	371c      	adds	r7, #28
 8008f50:	46bd      	mov	sp, r7
 8008f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f56:	4770      	bx	lr

08008f58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b087      	sub	sp, #28
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	60f8      	str	r0, [r7, #12]
 8008f60:	60b9      	str	r1, [r7, #8]
 8008f62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	f003 031f 	and.w	r3, r3, #31
 8008f6a:	2201      	movs	r2, #1
 8008f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8008f70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	6a1a      	ldr	r2, [r3, #32]
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	43db      	mvns	r3, r3
 8008f7a:	401a      	ands	r2, r3
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	6a1a      	ldr	r2, [r3, #32]
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	f003 031f 	and.w	r3, r3, #31
 8008f8a:	6879      	ldr	r1, [r7, #4]
 8008f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8008f90:	431a      	orrs	r2, r3
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	621a      	str	r2, [r3, #32]
}
 8008f96:	bf00      	nop
 8008f98:	371c      	adds	r7, #28
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa0:	4770      	bx	lr
	...

08008fa4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	b085      	sub	sp, #20
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
 8008fac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008fb4:	2b01      	cmp	r3, #1
 8008fb6:	d101      	bne.n	8008fbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008fb8:	2302      	movs	r3, #2
 8008fba:	e04f      	b.n	800905c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2202      	movs	r2, #2
 8008fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	685b      	ldr	r3, [r3, #4]
 8008fd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	689b      	ldr	r3, [r3, #8]
 8008fda:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	4a21      	ldr	r2, [pc, #132]	; (8009068 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	d108      	bne.n	8008ff8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008fec:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	685b      	ldr	r3, [r3, #4]
 8008ff2:	68fa      	ldr	r2, [r7, #12]
 8008ff4:	4313      	orrs	r3, r2
 8008ff6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ffe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	68fa      	ldr	r2, [r7, #12]
 8009006:	4313      	orrs	r3, r2
 8009008:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	68fa      	ldr	r2, [r7, #12]
 8009010:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	4a14      	ldr	r2, [pc, #80]	; (8009068 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8009018:	4293      	cmp	r3, r2
 800901a:	d009      	beq.n	8009030 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009024:	d004      	beq.n	8009030 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	4a10      	ldr	r2, [pc, #64]	; (800906c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800902c:	4293      	cmp	r3, r2
 800902e:	d10c      	bne.n	800904a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009036:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	689b      	ldr	r3, [r3, #8]
 800903c:	68ba      	ldr	r2, [r7, #8]
 800903e:	4313      	orrs	r3, r2
 8009040:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	68ba      	ldr	r2, [r7, #8]
 8009048:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2201      	movs	r2, #1
 800904e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2200      	movs	r2, #0
 8009056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800905a:	2300      	movs	r3, #0
}
 800905c:	4618      	mov	r0, r3
 800905e:	3714      	adds	r7, #20
 8009060:	46bd      	mov	sp, r7
 8009062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009066:	4770      	bx	lr
 8009068:	40012c00 	.word	0x40012c00
 800906c:	40014000 	.word	0x40014000

08009070 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009070:	b480      	push	{r7}
 8009072:	b085      	sub	sp, #20
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
 8009078:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800907a:	2300      	movs	r3, #0
 800907c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009084:	2b01      	cmp	r3, #1
 8009086:	d101      	bne.n	800908c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009088:	2302      	movs	r3, #2
 800908a:	e060      	b.n	800914e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2201      	movs	r2, #1
 8009090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	68db      	ldr	r3, [r3, #12]
 800909e:	4313      	orrs	r3, r2
 80090a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	689b      	ldr	r3, [r3, #8]
 80090ac:	4313      	orrs	r3, r2
 80090ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	685b      	ldr	r3, [r3, #4]
 80090ba:	4313      	orrs	r3, r2
 80090bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	4313      	orrs	r3, r2
 80090ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	691b      	ldr	r3, [r3, #16]
 80090d6:	4313      	orrs	r3, r2
 80090d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	695b      	ldr	r3, [r3, #20]
 80090e4:	4313      	orrs	r3, r2
 80090e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090f2:	4313      	orrs	r3, r2
 80090f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	699b      	ldr	r3, [r3, #24]
 8009100:	041b      	lsls	r3, r3, #16
 8009102:	4313      	orrs	r3, r2
 8009104:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	4a14      	ldr	r2, [pc, #80]	; (800915c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 800910c:	4293      	cmp	r3, r2
 800910e:	d115      	bne.n	800913c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800911a:	051b      	lsls	r3, r3, #20
 800911c:	4313      	orrs	r3, r2
 800911e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	69db      	ldr	r3, [r3, #28]
 800912a:	4313      	orrs	r3, r2
 800912c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	6a1b      	ldr	r3, [r3, #32]
 8009138:	4313      	orrs	r3, r2
 800913a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	68fa      	ldr	r2, [r7, #12]
 8009142:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2200      	movs	r2, #0
 8009148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800914c:	2300      	movs	r3, #0
}
 800914e:	4618      	mov	r0, r3
 8009150:	3714      	adds	r7, #20
 8009152:	46bd      	mov	sp, r7
 8009154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009158:	4770      	bx	lr
 800915a:	bf00      	nop
 800915c:	40012c00 	.word	0x40012c00

08009160 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b082      	sub	sp, #8
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d101      	bne.n	8009172 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800916e:	2301      	movs	r3, #1
 8009170:	e040      	b.n	80091f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009176:	2b00      	cmp	r3, #0
 8009178:	d106      	bne.n	8009188 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2200      	movs	r2, #0
 800917e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f000 f873 	bl	800926e <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2224      	movs	r2, #36	; 0x24
 800918c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	681a      	ldr	r2, [r3, #0]
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f022 0201 	bic.w	r2, r2, #1
 800919c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f000 fb72 	bl	8009888 <UART_SetConfig>
 80091a4:	4603      	mov	r3, r0
 80091a6:	2b01      	cmp	r3, #1
 80091a8:	d101      	bne.n	80091ae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80091aa:	2301      	movs	r3, #1
 80091ac:	e022      	b.n	80091f4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d002      	beq.n	80091bc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f000 fdc0 	bl	8009d3c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	685a      	ldr	r2, [r3, #4]
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80091ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	689a      	ldr	r2, [r3, #8]
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80091da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	681a      	ldr	r2, [r3, #0]
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f042 0201 	orr.w	r2, r2, #1
 80091ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f000 fe47 	bl	8009e80 <UART_CheckIdleState>
 80091f2:	4603      	mov	r3, r0
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	3708      	adds	r7, #8
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bd80      	pop	{r7, pc}

080091fc <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b082      	sub	sp, #8
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d101      	bne.n	800920e <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800920a:	2301      	movs	r3, #1
 800920c:	e02b      	b.n	8009266 <HAL_UART_DeInit+0x6a>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2224      	movs	r2, #36	; 0x24
 8009212:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	681a      	ldr	r2, [r3, #0]
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f022 0201 	bic.w	r2, r2, #1
 8009222:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	2200      	movs	r2, #0
 800922a:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	2200      	movs	r2, #0
 8009232:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	2200      	movs	r2, #0
 800923a:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f000 f820 	bl	8009282 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2200      	movs	r2, #0
 8009246:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->gState = HAL_UART_STATE_RESET;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2200      	movs	r2, #0
 800924e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2200      	movs	r2, #0
 8009254:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2200      	movs	r2, #0
 800925a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2200      	movs	r2, #0
 8009260:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009264:	2300      	movs	r3, #0
}
 8009266:	4618      	mov	r0, r3
 8009268:	3708      	adds	r7, #8
 800926a:	46bd      	mov	sp, r7
 800926c:	bd80      	pop	{r7, pc}

0800926e <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800926e:	b480      	push	{r7}
 8009270:	b083      	sub	sp, #12
 8009272:	af00      	add	r7, sp, #0
 8009274:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8009276:	bf00      	nop
 8009278:	370c      	adds	r7, #12
 800927a:	46bd      	mov	sp, r7
 800927c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009280:	4770      	bx	lr

08009282 <HAL_UART_MspDeInit>:
  * @brief DeInitialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
 8009282:	b480      	push	{r7}
 8009284:	b083      	sub	sp, #12
 8009286:	af00      	add	r7, sp, #0
 8009288:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspDeInit can be implemented in the user file
   */
}
 800928a:	bf00      	nop
 800928c:	370c      	adds	r7, #12
 800928e:	46bd      	mov	sp, r7
 8009290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009294:	4770      	bx	lr
	...

08009298 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b0ba      	sub	sp, #232	; 0xe8
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	69db      	ldr	r3, [r3, #28]
 80092a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	689b      	ldr	r3, [r3, #8]
 80092ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80092be:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80092c2:	f640 030f 	movw	r3, #2063	; 0x80f
 80092c6:	4013      	ands	r3, r2
 80092c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80092cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d115      	bne.n	8009300 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80092d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092d8:	f003 0320 	and.w	r3, r3, #32
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d00f      	beq.n	8009300 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80092e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092e4:	f003 0320 	and.w	r3, r3, #32
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d009      	beq.n	8009300 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	f000 82a6 	beq.w	8009842 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	4798      	blx	r3
      }
      return;
 80092fe:	e2a0      	b.n	8009842 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8009300:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009304:	2b00      	cmp	r3, #0
 8009306:	f000 8117 	beq.w	8009538 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800930a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800930e:	f003 0301 	and.w	r3, r3, #1
 8009312:	2b00      	cmp	r3, #0
 8009314:	d106      	bne.n	8009324 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009316:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800931a:	4b85      	ldr	r3, [pc, #532]	; (8009530 <HAL_UART_IRQHandler+0x298>)
 800931c:	4013      	ands	r3, r2
 800931e:	2b00      	cmp	r3, #0
 8009320:	f000 810a 	beq.w	8009538 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009324:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009328:	f003 0301 	and.w	r3, r3, #1
 800932c:	2b00      	cmp	r3, #0
 800932e:	d011      	beq.n	8009354 <HAL_UART_IRQHandler+0xbc>
 8009330:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009338:	2b00      	cmp	r3, #0
 800933a:	d00b      	beq.n	8009354 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	2201      	movs	r2, #1
 8009342:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800934a:	f043 0201 	orr.w	r2, r3, #1
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009354:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009358:	f003 0302 	and.w	r3, r3, #2
 800935c:	2b00      	cmp	r3, #0
 800935e:	d011      	beq.n	8009384 <HAL_UART_IRQHandler+0xec>
 8009360:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009364:	f003 0301 	and.w	r3, r3, #1
 8009368:	2b00      	cmp	r3, #0
 800936a:	d00b      	beq.n	8009384 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	2202      	movs	r2, #2
 8009372:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800937a:	f043 0204 	orr.w	r2, r3, #4
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009384:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009388:	f003 0304 	and.w	r3, r3, #4
 800938c:	2b00      	cmp	r3, #0
 800938e:	d011      	beq.n	80093b4 <HAL_UART_IRQHandler+0x11c>
 8009390:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009394:	f003 0301 	and.w	r3, r3, #1
 8009398:	2b00      	cmp	r3, #0
 800939a:	d00b      	beq.n	80093b4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	2204      	movs	r2, #4
 80093a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80093aa:	f043 0202 	orr.w	r2, r3, #2
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80093b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093b8:	f003 0308 	and.w	r3, r3, #8
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d017      	beq.n	80093f0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80093c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093c4:	f003 0320 	and.w	r3, r3, #32
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d105      	bne.n	80093d8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80093cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80093d0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d00b      	beq.n	80093f0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	2208      	movs	r2, #8
 80093de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80093e6:	f043 0208 	orr.w	r2, r3, #8
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80093f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d012      	beq.n	8009422 <HAL_UART_IRQHandler+0x18a>
 80093fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009400:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009404:	2b00      	cmp	r3, #0
 8009406:	d00c      	beq.n	8009422 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009410:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009418:	f043 0220 	orr.w	r2, r3, #32
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009428:	2b00      	cmp	r3, #0
 800942a:	f000 820c 	beq.w	8009846 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800942e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009432:	f003 0320 	and.w	r3, r3, #32
 8009436:	2b00      	cmp	r3, #0
 8009438:	d00d      	beq.n	8009456 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800943a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800943e:	f003 0320 	and.w	r3, r3, #32
 8009442:	2b00      	cmp	r3, #0
 8009444:	d007      	beq.n	8009456 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800944a:	2b00      	cmp	r3, #0
 800944c:	d003      	beq.n	8009456 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800945c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	689b      	ldr	r3, [r3, #8]
 8009466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800946a:	2b40      	cmp	r3, #64	; 0x40
 800946c:	d005      	beq.n	800947a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800946e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009472:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009476:	2b00      	cmp	r3, #0
 8009478:	d04f      	beq.n	800951a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f000 fe0d 	bl	800a09a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	689b      	ldr	r3, [r3, #8]
 8009486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800948a:	2b40      	cmp	r3, #64	; 0x40
 800948c:	d141      	bne.n	8009512 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	3308      	adds	r3, #8
 8009494:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009498:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800949c:	e853 3f00 	ldrex	r3, [r3]
 80094a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80094a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80094a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	3308      	adds	r3, #8
 80094b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80094ba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80094be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80094c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80094ca:	e841 2300 	strex	r3, r2, [r1]
 80094ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80094d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d1d9      	bne.n	800948e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d013      	beq.n	800950a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094e6:	4a13      	ldr	r2, [pc, #76]	; (8009534 <HAL_UART_IRQHandler+0x29c>)
 80094e8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094ee:	4618      	mov	r0, r3
 80094f0:	f7fc fc6e 	bl	8005dd0 <HAL_DMA_Abort_IT>
 80094f4:	4603      	mov	r3, r0
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d017      	beq.n	800952a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009500:	687a      	ldr	r2, [r7, #4]
 8009502:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8009504:	4610      	mov	r0, r2
 8009506:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009508:	e00f      	b.n	800952a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f000 f9a6 	bl	800985c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009510:	e00b      	b.n	800952a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f000 f9a2 	bl	800985c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009518:	e007      	b.n	800952a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f000 f99e 	bl	800985c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2200      	movs	r2, #0
 8009524:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8009528:	e18d      	b.n	8009846 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800952a:	bf00      	nop
    return;
 800952c:	e18b      	b.n	8009846 <HAL_UART_IRQHandler+0x5ae>
 800952e:	bf00      	nop
 8009530:	04000120 	.word	0x04000120
 8009534:	0800a161 	.word	0x0800a161

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800953c:	2b01      	cmp	r3, #1
 800953e:	f040 8146 	bne.w	80097ce <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009546:	f003 0310 	and.w	r3, r3, #16
 800954a:	2b00      	cmp	r3, #0
 800954c:	f000 813f 	beq.w	80097ce <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009550:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009554:	f003 0310 	and.w	r3, r3, #16
 8009558:	2b00      	cmp	r3, #0
 800955a:	f000 8138 	beq.w	80097ce <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	2210      	movs	r2, #16
 8009564:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	689b      	ldr	r3, [r3, #8]
 800956c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009570:	2b40      	cmp	r3, #64	; 0x40
 8009572:	f040 80b4 	bne.w	80096de <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	685b      	ldr	r3, [r3, #4]
 800957e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009582:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009586:	2b00      	cmp	r3, #0
 8009588:	f000 815f 	beq.w	800984a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009592:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009596:	429a      	cmp	r2, r3
 8009598:	f080 8157 	bcs.w	800984a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80095a2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	f003 0320 	and.w	r3, r3, #32
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	f040 8085 	bne.w	80096c2 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80095c4:	e853 3f00 	ldrex	r3, [r3]
 80095c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80095cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80095d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80095d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	461a      	mov	r2, r3
 80095de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80095e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80095e6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80095ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80095f2:	e841 2300 	strex	r3, r2, [r1]
 80095f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80095fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d1da      	bne.n	80095b8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	3308      	adds	r3, #8
 8009608:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800960a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800960c:	e853 3f00 	ldrex	r3, [r3]
 8009610:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009612:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009614:	f023 0301 	bic.w	r3, r3, #1
 8009618:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	3308      	adds	r3, #8
 8009622:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009626:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800962a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800962c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800962e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009632:	e841 2300 	strex	r3, r2, [r1]
 8009636:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009638:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800963a:	2b00      	cmp	r3, #0
 800963c:	d1e1      	bne.n	8009602 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	3308      	adds	r3, #8
 8009644:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009646:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009648:	e853 3f00 	ldrex	r3, [r3]
 800964c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800964e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009650:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009654:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	3308      	adds	r3, #8
 800965e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009662:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009664:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009666:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009668:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800966a:	e841 2300 	strex	r3, r2, [r1]
 800966e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009670:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009672:	2b00      	cmp	r3, #0
 8009674:	d1e3      	bne.n	800963e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2220      	movs	r2, #32
 800967a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2200      	movs	r2, #0
 8009680:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009688:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800968a:	e853 3f00 	ldrex	r3, [r3]
 800968e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009690:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009692:	f023 0310 	bic.w	r3, r3, #16
 8009696:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	461a      	mov	r2, r3
 80096a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80096a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80096a6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80096aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80096ac:	e841 2300 	strex	r3, r2, [r1]
 80096b0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80096b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d1e4      	bne.n	8009682 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096bc:	4618      	mov	r0, r3
 80096be:	f7fc fb49 	bl	8005d54 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80096ce:	b29b      	uxth	r3, r3
 80096d0:	1ad3      	subs	r3, r2, r3
 80096d2:	b29b      	uxth	r3, r3
 80096d4:	4619      	mov	r1, r3
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f000 f8ca 	bl	8009870 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80096dc:	e0b5      	b.n	800984a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80096ea:	b29b      	uxth	r3, r3
 80096ec:	1ad3      	subs	r3, r2, r3
 80096ee:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80096f8:	b29b      	uxth	r3, r3
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	f000 80a7 	beq.w	800984e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8009700:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009704:	2b00      	cmp	r3, #0
 8009706:	f000 80a2 	beq.w	800984e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009712:	e853 3f00 	ldrex	r3, [r3]
 8009716:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800971a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800971e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	461a      	mov	r2, r3
 8009728:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800972c:	647b      	str	r3, [r7, #68]	; 0x44
 800972e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009730:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009732:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009734:	e841 2300 	strex	r3, r2, [r1]
 8009738:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800973a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800973c:	2b00      	cmp	r3, #0
 800973e:	d1e4      	bne.n	800970a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	3308      	adds	r3, #8
 8009746:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800974a:	e853 3f00 	ldrex	r3, [r3]
 800974e:	623b      	str	r3, [r7, #32]
   return(result);
 8009750:	6a3b      	ldr	r3, [r7, #32]
 8009752:	f023 0301 	bic.w	r3, r3, #1
 8009756:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	3308      	adds	r3, #8
 8009760:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009764:	633a      	str	r2, [r7, #48]	; 0x30
 8009766:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009768:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800976a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800976c:	e841 2300 	strex	r3, r2, [r1]
 8009770:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009774:	2b00      	cmp	r3, #0
 8009776:	d1e3      	bne.n	8009740 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2220      	movs	r2, #32
 800977c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2200      	movs	r2, #0
 8009782:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2200      	movs	r2, #0
 8009788:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009790:	693b      	ldr	r3, [r7, #16]
 8009792:	e853 3f00 	ldrex	r3, [r3]
 8009796:	60fb      	str	r3, [r7, #12]
   return(result);
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	f023 0310 	bic.w	r3, r3, #16
 800979e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	461a      	mov	r2, r3
 80097a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80097ac:	61fb      	str	r3, [r7, #28]
 80097ae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097b0:	69b9      	ldr	r1, [r7, #24]
 80097b2:	69fa      	ldr	r2, [r7, #28]
 80097b4:	e841 2300 	strex	r3, r2, [r1]
 80097b8:	617b      	str	r3, [r7, #20]
   return(result);
 80097ba:	697b      	ldr	r3, [r7, #20]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d1e4      	bne.n	800978a <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80097c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80097c4:	4619      	mov	r1, r3
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f000 f852 	bl	8009870 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80097cc:	e03f      	b.n	800984e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80097ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d00e      	beq.n	80097f8 <HAL_UART_IRQHandler+0x560>
 80097da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80097de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d008      	beq.n	80097f8 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80097ee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f000 fcf5 	bl	800a1e0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80097f6:	e02d      	b.n	8009854 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80097f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009800:	2b00      	cmp	r3, #0
 8009802:	d00e      	beq.n	8009822 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009804:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009808:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800980c:	2b00      	cmp	r3, #0
 800980e:	d008      	beq.n	8009822 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009814:	2b00      	cmp	r3, #0
 8009816:	d01c      	beq.n	8009852 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	4798      	blx	r3
    }
    return;
 8009820:	e017      	b.n	8009852 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800982a:	2b00      	cmp	r3, #0
 800982c:	d012      	beq.n	8009854 <HAL_UART_IRQHandler+0x5bc>
 800982e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009836:	2b00      	cmp	r3, #0
 8009838:	d00c      	beq.n	8009854 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f000 fca6 	bl	800a18c <UART_EndTransmit_IT>
    return;
 8009840:	e008      	b.n	8009854 <HAL_UART_IRQHandler+0x5bc>
      return;
 8009842:	bf00      	nop
 8009844:	e006      	b.n	8009854 <HAL_UART_IRQHandler+0x5bc>
    return;
 8009846:	bf00      	nop
 8009848:	e004      	b.n	8009854 <HAL_UART_IRQHandler+0x5bc>
      return;
 800984a:	bf00      	nop
 800984c:	e002      	b.n	8009854 <HAL_UART_IRQHandler+0x5bc>
      return;
 800984e:	bf00      	nop
 8009850:	e000      	b.n	8009854 <HAL_UART_IRQHandler+0x5bc>
    return;
 8009852:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8009854:	37e8      	adds	r7, #232	; 0xe8
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}
 800985a:	bf00      	nop

0800985c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800985c:	b480      	push	{r7}
 800985e:	b083      	sub	sp, #12
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009864:	bf00      	nop
 8009866:	370c      	adds	r7, #12
 8009868:	46bd      	mov	sp, r7
 800986a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986e:	4770      	bx	lr

08009870 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009870:	b480      	push	{r7}
 8009872:	b083      	sub	sp, #12
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
 8009878:	460b      	mov	r3, r1
 800987a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800987c:	bf00      	nop
 800987e:	370c      	adds	r7, #12
 8009880:	46bd      	mov	sp, r7
 8009882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009886:	4770      	bx	lr

08009888 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009888:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800988c:	b08a      	sub	sp, #40	; 0x28
 800988e:	af00      	add	r7, sp, #0
 8009890:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009892:	2300      	movs	r3, #0
 8009894:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	689a      	ldr	r2, [r3, #8]
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	691b      	ldr	r3, [r3, #16]
 80098a0:	431a      	orrs	r2, r3
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	695b      	ldr	r3, [r3, #20]
 80098a6:	431a      	orrs	r2, r3
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	69db      	ldr	r3, [r3, #28]
 80098ac:	4313      	orrs	r3, r2
 80098ae:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	681a      	ldr	r2, [r3, #0]
 80098b6:	4b9e      	ldr	r3, [pc, #632]	; (8009b30 <UART_SetConfig+0x2a8>)
 80098b8:	4013      	ands	r3, r2
 80098ba:	68fa      	ldr	r2, [r7, #12]
 80098bc:	6812      	ldr	r2, [r2, #0]
 80098be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80098c0:	430b      	orrs	r3, r1
 80098c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	685b      	ldr	r3, [r3, #4]
 80098ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	68da      	ldr	r2, [r3, #12]
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	430a      	orrs	r2, r1
 80098d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	699b      	ldr	r3, [r3, #24]
 80098de:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	4a93      	ldr	r2, [pc, #588]	; (8009b34 <UART_SetConfig+0x2ac>)
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d004      	beq.n	80098f4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	6a1b      	ldr	r3, [r3, #32]
 80098ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098f0:	4313      	orrs	r3, r2
 80098f2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	689b      	ldr	r3, [r3, #8]
 80098fa:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009904:	430a      	orrs	r2, r1
 8009906:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	4a8a      	ldr	r2, [pc, #552]	; (8009b38 <UART_SetConfig+0x2b0>)
 800990e:	4293      	cmp	r3, r2
 8009910:	d126      	bne.n	8009960 <UART_SetConfig+0xd8>
 8009912:	4b8a      	ldr	r3, [pc, #552]	; (8009b3c <UART_SetConfig+0x2b4>)
 8009914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009918:	f003 0303 	and.w	r3, r3, #3
 800991c:	2b03      	cmp	r3, #3
 800991e:	d81b      	bhi.n	8009958 <UART_SetConfig+0xd0>
 8009920:	a201      	add	r2, pc, #4	; (adr r2, 8009928 <UART_SetConfig+0xa0>)
 8009922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009926:	bf00      	nop
 8009928:	08009939 	.word	0x08009939
 800992c:	08009949 	.word	0x08009949
 8009930:	08009941 	.word	0x08009941
 8009934:	08009951 	.word	0x08009951
 8009938:	2301      	movs	r3, #1
 800993a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800993e:	e0ab      	b.n	8009a98 <UART_SetConfig+0x210>
 8009940:	2302      	movs	r3, #2
 8009942:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009946:	e0a7      	b.n	8009a98 <UART_SetConfig+0x210>
 8009948:	2304      	movs	r3, #4
 800994a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800994e:	e0a3      	b.n	8009a98 <UART_SetConfig+0x210>
 8009950:	2308      	movs	r3, #8
 8009952:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009956:	e09f      	b.n	8009a98 <UART_SetConfig+0x210>
 8009958:	2310      	movs	r3, #16
 800995a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800995e:	e09b      	b.n	8009a98 <UART_SetConfig+0x210>
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	4a76      	ldr	r2, [pc, #472]	; (8009b40 <UART_SetConfig+0x2b8>)
 8009966:	4293      	cmp	r3, r2
 8009968:	d138      	bne.n	80099dc <UART_SetConfig+0x154>
 800996a:	4b74      	ldr	r3, [pc, #464]	; (8009b3c <UART_SetConfig+0x2b4>)
 800996c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009970:	f003 030c 	and.w	r3, r3, #12
 8009974:	2b0c      	cmp	r3, #12
 8009976:	d82d      	bhi.n	80099d4 <UART_SetConfig+0x14c>
 8009978:	a201      	add	r2, pc, #4	; (adr r2, 8009980 <UART_SetConfig+0xf8>)
 800997a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800997e:	bf00      	nop
 8009980:	080099b5 	.word	0x080099b5
 8009984:	080099d5 	.word	0x080099d5
 8009988:	080099d5 	.word	0x080099d5
 800998c:	080099d5 	.word	0x080099d5
 8009990:	080099c5 	.word	0x080099c5
 8009994:	080099d5 	.word	0x080099d5
 8009998:	080099d5 	.word	0x080099d5
 800999c:	080099d5 	.word	0x080099d5
 80099a0:	080099bd 	.word	0x080099bd
 80099a4:	080099d5 	.word	0x080099d5
 80099a8:	080099d5 	.word	0x080099d5
 80099ac:	080099d5 	.word	0x080099d5
 80099b0:	080099cd 	.word	0x080099cd
 80099b4:	2300      	movs	r3, #0
 80099b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80099ba:	e06d      	b.n	8009a98 <UART_SetConfig+0x210>
 80099bc:	2302      	movs	r3, #2
 80099be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80099c2:	e069      	b.n	8009a98 <UART_SetConfig+0x210>
 80099c4:	2304      	movs	r3, #4
 80099c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80099ca:	e065      	b.n	8009a98 <UART_SetConfig+0x210>
 80099cc:	2308      	movs	r3, #8
 80099ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80099d2:	e061      	b.n	8009a98 <UART_SetConfig+0x210>
 80099d4:	2310      	movs	r3, #16
 80099d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80099da:	e05d      	b.n	8009a98 <UART_SetConfig+0x210>
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	4a58      	ldr	r2, [pc, #352]	; (8009b44 <UART_SetConfig+0x2bc>)
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d125      	bne.n	8009a32 <UART_SetConfig+0x1aa>
 80099e6:	4b55      	ldr	r3, [pc, #340]	; (8009b3c <UART_SetConfig+0x2b4>)
 80099e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099ec:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80099f0:	2b30      	cmp	r3, #48	; 0x30
 80099f2:	d016      	beq.n	8009a22 <UART_SetConfig+0x19a>
 80099f4:	2b30      	cmp	r3, #48	; 0x30
 80099f6:	d818      	bhi.n	8009a2a <UART_SetConfig+0x1a2>
 80099f8:	2b20      	cmp	r3, #32
 80099fa:	d00a      	beq.n	8009a12 <UART_SetConfig+0x18a>
 80099fc:	2b20      	cmp	r3, #32
 80099fe:	d814      	bhi.n	8009a2a <UART_SetConfig+0x1a2>
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d002      	beq.n	8009a0a <UART_SetConfig+0x182>
 8009a04:	2b10      	cmp	r3, #16
 8009a06:	d008      	beq.n	8009a1a <UART_SetConfig+0x192>
 8009a08:	e00f      	b.n	8009a2a <UART_SetConfig+0x1a2>
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009a10:	e042      	b.n	8009a98 <UART_SetConfig+0x210>
 8009a12:	2302      	movs	r3, #2
 8009a14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009a18:	e03e      	b.n	8009a98 <UART_SetConfig+0x210>
 8009a1a:	2304      	movs	r3, #4
 8009a1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009a20:	e03a      	b.n	8009a98 <UART_SetConfig+0x210>
 8009a22:	2308      	movs	r3, #8
 8009a24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009a28:	e036      	b.n	8009a98 <UART_SetConfig+0x210>
 8009a2a:	2310      	movs	r3, #16
 8009a2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009a30:	e032      	b.n	8009a98 <UART_SetConfig+0x210>
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	4a3f      	ldr	r2, [pc, #252]	; (8009b34 <UART_SetConfig+0x2ac>)
 8009a38:	4293      	cmp	r3, r2
 8009a3a:	d12a      	bne.n	8009a92 <UART_SetConfig+0x20a>
 8009a3c:	4b3f      	ldr	r3, [pc, #252]	; (8009b3c <UART_SetConfig+0x2b4>)
 8009a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a42:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009a46:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009a4a:	d01a      	beq.n	8009a82 <UART_SetConfig+0x1fa>
 8009a4c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009a50:	d81b      	bhi.n	8009a8a <UART_SetConfig+0x202>
 8009a52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a56:	d00c      	beq.n	8009a72 <UART_SetConfig+0x1ea>
 8009a58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a5c:	d815      	bhi.n	8009a8a <UART_SetConfig+0x202>
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d003      	beq.n	8009a6a <UART_SetConfig+0x1e2>
 8009a62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a66:	d008      	beq.n	8009a7a <UART_SetConfig+0x1f2>
 8009a68:	e00f      	b.n	8009a8a <UART_SetConfig+0x202>
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009a70:	e012      	b.n	8009a98 <UART_SetConfig+0x210>
 8009a72:	2302      	movs	r3, #2
 8009a74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009a78:	e00e      	b.n	8009a98 <UART_SetConfig+0x210>
 8009a7a:	2304      	movs	r3, #4
 8009a7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009a80:	e00a      	b.n	8009a98 <UART_SetConfig+0x210>
 8009a82:	2308      	movs	r3, #8
 8009a84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009a88:	e006      	b.n	8009a98 <UART_SetConfig+0x210>
 8009a8a:	2310      	movs	r3, #16
 8009a8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009a90:	e002      	b.n	8009a98 <UART_SetConfig+0x210>
 8009a92:	2310      	movs	r3, #16
 8009a94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	4a25      	ldr	r2, [pc, #148]	; (8009b34 <UART_SetConfig+0x2ac>)
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	f040 808a 	bne.w	8009bb8 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009aa4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009aa8:	2b08      	cmp	r3, #8
 8009aaa:	d824      	bhi.n	8009af6 <UART_SetConfig+0x26e>
 8009aac:	a201      	add	r2, pc, #4	; (adr r2, 8009ab4 <UART_SetConfig+0x22c>)
 8009aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ab2:	bf00      	nop
 8009ab4:	08009ad9 	.word	0x08009ad9
 8009ab8:	08009af7 	.word	0x08009af7
 8009abc:	08009ae1 	.word	0x08009ae1
 8009ac0:	08009af7 	.word	0x08009af7
 8009ac4:	08009ae7 	.word	0x08009ae7
 8009ac8:	08009af7 	.word	0x08009af7
 8009acc:	08009af7 	.word	0x08009af7
 8009ad0:	08009af7 	.word	0x08009af7
 8009ad4:	08009aef 	.word	0x08009aef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009ad8:	f7fd fb1c 	bl	8007114 <HAL_RCC_GetPCLK1Freq>
 8009adc:	61f8      	str	r0, [r7, #28]
        break;
 8009ade:	e010      	b.n	8009b02 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009ae0:	4b19      	ldr	r3, [pc, #100]	; (8009b48 <UART_SetConfig+0x2c0>)
 8009ae2:	61fb      	str	r3, [r7, #28]
        break;
 8009ae4:	e00d      	b.n	8009b02 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009ae6:	f7fd fa7d 	bl	8006fe4 <HAL_RCC_GetSysClockFreq>
 8009aea:	61f8      	str	r0, [r7, #28]
        break;
 8009aec:	e009      	b.n	8009b02 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009aee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009af2:	61fb      	str	r3, [r7, #28]
        break;
 8009af4:	e005      	b.n	8009b02 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8009af6:	2300      	movs	r3, #0
 8009af8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009afa:	2301      	movs	r3, #1
 8009afc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009b00:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009b02:	69fb      	ldr	r3, [r7, #28]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	f000 8109 	beq.w	8009d1c <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	685a      	ldr	r2, [r3, #4]
 8009b0e:	4613      	mov	r3, r2
 8009b10:	005b      	lsls	r3, r3, #1
 8009b12:	4413      	add	r3, r2
 8009b14:	69fa      	ldr	r2, [r7, #28]
 8009b16:	429a      	cmp	r2, r3
 8009b18:	d305      	bcc.n	8009b26 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	685b      	ldr	r3, [r3, #4]
 8009b1e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009b20:	69fa      	ldr	r2, [r7, #28]
 8009b22:	429a      	cmp	r2, r3
 8009b24:	d912      	bls.n	8009b4c <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8009b26:	2301      	movs	r3, #1
 8009b28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009b2c:	e0f6      	b.n	8009d1c <UART_SetConfig+0x494>
 8009b2e:	bf00      	nop
 8009b30:	efff69f3 	.word	0xefff69f3
 8009b34:	40008000 	.word	0x40008000
 8009b38:	40013800 	.word	0x40013800
 8009b3c:	40021000 	.word	0x40021000
 8009b40:	40004400 	.word	0x40004400
 8009b44:	40004800 	.word	0x40004800
 8009b48:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8009b4c:	69fb      	ldr	r3, [r7, #28]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	461c      	mov	r4, r3
 8009b52:	4615      	mov	r5, r2
 8009b54:	f04f 0200 	mov.w	r2, #0
 8009b58:	f04f 0300 	mov.w	r3, #0
 8009b5c:	022b      	lsls	r3, r5, #8
 8009b5e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8009b62:	0222      	lsls	r2, r4, #8
 8009b64:	68f9      	ldr	r1, [r7, #12]
 8009b66:	6849      	ldr	r1, [r1, #4]
 8009b68:	0849      	lsrs	r1, r1, #1
 8009b6a:	2000      	movs	r0, #0
 8009b6c:	4688      	mov	r8, r1
 8009b6e:	4681      	mov	r9, r0
 8009b70:	eb12 0a08 	adds.w	sl, r2, r8
 8009b74:	eb43 0b09 	adc.w	fp, r3, r9
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	685b      	ldr	r3, [r3, #4]
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	603b      	str	r3, [r7, #0]
 8009b80:	607a      	str	r2, [r7, #4]
 8009b82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b86:	4650      	mov	r0, sl
 8009b88:	4659      	mov	r1, fp
 8009b8a:	f7f6 ff8f 	bl	8000aac <__aeabi_uldivmod>
 8009b8e:	4602      	mov	r2, r0
 8009b90:	460b      	mov	r3, r1
 8009b92:	4613      	mov	r3, r2
 8009b94:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009b96:	69bb      	ldr	r3, [r7, #24]
 8009b98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009b9c:	d308      	bcc.n	8009bb0 <UART_SetConfig+0x328>
 8009b9e:	69bb      	ldr	r3, [r7, #24]
 8009ba0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009ba4:	d204      	bcs.n	8009bb0 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	69ba      	ldr	r2, [r7, #24]
 8009bac:	60da      	str	r2, [r3, #12]
 8009bae:	e0b5      	b.n	8009d1c <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009bb6:	e0b1      	b.n	8009d1c <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	69db      	ldr	r3, [r3, #28]
 8009bbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009bc0:	d15d      	bne.n	8009c7e <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8009bc2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009bc6:	2b08      	cmp	r3, #8
 8009bc8:	d827      	bhi.n	8009c1a <UART_SetConfig+0x392>
 8009bca:	a201      	add	r2, pc, #4	; (adr r2, 8009bd0 <UART_SetConfig+0x348>)
 8009bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bd0:	08009bf5 	.word	0x08009bf5
 8009bd4:	08009bfd 	.word	0x08009bfd
 8009bd8:	08009c05 	.word	0x08009c05
 8009bdc:	08009c1b 	.word	0x08009c1b
 8009be0:	08009c0b 	.word	0x08009c0b
 8009be4:	08009c1b 	.word	0x08009c1b
 8009be8:	08009c1b 	.word	0x08009c1b
 8009bec:	08009c1b 	.word	0x08009c1b
 8009bf0:	08009c13 	.word	0x08009c13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009bf4:	f7fd fa8e 	bl	8007114 <HAL_RCC_GetPCLK1Freq>
 8009bf8:	61f8      	str	r0, [r7, #28]
        break;
 8009bfa:	e014      	b.n	8009c26 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009bfc:	f7fd faa0 	bl	8007140 <HAL_RCC_GetPCLK2Freq>
 8009c00:	61f8      	str	r0, [r7, #28]
        break;
 8009c02:	e010      	b.n	8009c26 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009c04:	4b4c      	ldr	r3, [pc, #304]	; (8009d38 <UART_SetConfig+0x4b0>)
 8009c06:	61fb      	str	r3, [r7, #28]
        break;
 8009c08:	e00d      	b.n	8009c26 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009c0a:	f7fd f9eb 	bl	8006fe4 <HAL_RCC_GetSysClockFreq>
 8009c0e:	61f8      	str	r0, [r7, #28]
        break;
 8009c10:	e009      	b.n	8009c26 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c16:	61fb      	str	r3, [r7, #28]
        break;
 8009c18:	e005      	b.n	8009c26 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009c1e:	2301      	movs	r3, #1
 8009c20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009c24:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009c26:	69fb      	ldr	r3, [r7, #28]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d077      	beq.n	8009d1c <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009c2c:	69fb      	ldr	r3, [r7, #28]
 8009c2e:	005a      	lsls	r2, r3, #1
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	685b      	ldr	r3, [r3, #4]
 8009c34:	085b      	lsrs	r3, r3, #1
 8009c36:	441a      	add	r2, r3
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	685b      	ldr	r3, [r3, #4]
 8009c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c40:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009c42:	69bb      	ldr	r3, [r7, #24]
 8009c44:	2b0f      	cmp	r3, #15
 8009c46:	d916      	bls.n	8009c76 <UART_SetConfig+0x3ee>
 8009c48:	69bb      	ldr	r3, [r7, #24]
 8009c4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c4e:	d212      	bcs.n	8009c76 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009c50:	69bb      	ldr	r3, [r7, #24]
 8009c52:	b29b      	uxth	r3, r3
 8009c54:	f023 030f 	bic.w	r3, r3, #15
 8009c58:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009c5a:	69bb      	ldr	r3, [r7, #24]
 8009c5c:	085b      	lsrs	r3, r3, #1
 8009c5e:	b29b      	uxth	r3, r3
 8009c60:	f003 0307 	and.w	r3, r3, #7
 8009c64:	b29a      	uxth	r2, r3
 8009c66:	8afb      	ldrh	r3, [r7, #22]
 8009c68:	4313      	orrs	r3, r2
 8009c6a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	8afa      	ldrh	r2, [r7, #22]
 8009c72:	60da      	str	r2, [r3, #12]
 8009c74:	e052      	b.n	8009d1c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8009c76:	2301      	movs	r3, #1
 8009c78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009c7c:	e04e      	b.n	8009d1c <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009c7e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009c82:	2b08      	cmp	r3, #8
 8009c84:	d827      	bhi.n	8009cd6 <UART_SetConfig+0x44e>
 8009c86:	a201      	add	r2, pc, #4	; (adr r2, 8009c8c <UART_SetConfig+0x404>)
 8009c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c8c:	08009cb1 	.word	0x08009cb1
 8009c90:	08009cb9 	.word	0x08009cb9
 8009c94:	08009cc1 	.word	0x08009cc1
 8009c98:	08009cd7 	.word	0x08009cd7
 8009c9c:	08009cc7 	.word	0x08009cc7
 8009ca0:	08009cd7 	.word	0x08009cd7
 8009ca4:	08009cd7 	.word	0x08009cd7
 8009ca8:	08009cd7 	.word	0x08009cd7
 8009cac:	08009ccf 	.word	0x08009ccf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009cb0:	f7fd fa30 	bl	8007114 <HAL_RCC_GetPCLK1Freq>
 8009cb4:	61f8      	str	r0, [r7, #28]
        break;
 8009cb6:	e014      	b.n	8009ce2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009cb8:	f7fd fa42 	bl	8007140 <HAL_RCC_GetPCLK2Freq>
 8009cbc:	61f8      	str	r0, [r7, #28]
        break;
 8009cbe:	e010      	b.n	8009ce2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009cc0:	4b1d      	ldr	r3, [pc, #116]	; (8009d38 <UART_SetConfig+0x4b0>)
 8009cc2:	61fb      	str	r3, [r7, #28]
        break;
 8009cc4:	e00d      	b.n	8009ce2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009cc6:	f7fd f98d 	bl	8006fe4 <HAL_RCC_GetSysClockFreq>
 8009cca:	61f8      	str	r0, [r7, #28]
        break;
 8009ccc:	e009      	b.n	8009ce2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009cce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009cd2:	61fb      	str	r3, [r7, #28]
        break;
 8009cd4:	e005      	b.n	8009ce2 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009cda:	2301      	movs	r3, #1
 8009cdc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009ce0:	bf00      	nop
    }

    if (pclk != 0U)
 8009ce2:	69fb      	ldr	r3, [r7, #28]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d019      	beq.n	8009d1c <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	685b      	ldr	r3, [r3, #4]
 8009cec:	085a      	lsrs	r2, r3, #1
 8009cee:	69fb      	ldr	r3, [r7, #28]
 8009cf0:	441a      	add	r2, r3
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	685b      	ldr	r3, [r3, #4]
 8009cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cfa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009cfc:	69bb      	ldr	r3, [r7, #24]
 8009cfe:	2b0f      	cmp	r3, #15
 8009d00:	d909      	bls.n	8009d16 <UART_SetConfig+0x48e>
 8009d02:	69bb      	ldr	r3, [r7, #24]
 8009d04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d08:	d205      	bcs.n	8009d16 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009d0a:	69bb      	ldr	r3, [r7, #24]
 8009d0c:	b29a      	uxth	r2, r3
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	60da      	str	r2, [r3, #12]
 8009d14:	e002      	b.n	8009d1c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8009d16:	2301      	movs	r3, #1
 8009d18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	2200      	movs	r2, #0
 8009d20:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	2200      	movs	r2, #0
 8009d26:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009d28:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	3728      	adds	r7, #40	; 0x28
 8009d30:	46bd      	mov	sp, r7
 8009d32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009d36:	bf00      	nop
 8009d38:	00f42400 	.word	0x00f42400

08009d3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	b083      	sub	sp, #12
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d48:	f003 0301 	and.w	r3, r3, #1
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d00a      	beq.n	8009d66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	685b      	ldr	r3, [r3, #4]
 8009d56:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	430a      	orrs	r2, r1
 8009d64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d6a:	f003 0302 	and.w	r3, r3, #2
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d00a      	beq.n	8009d88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	685b      	ldr	r3, [r3, #4]
 8009d78:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	430a      	orrs	r2, r1
 8009d86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d8c:	f003 0304 	and.w	r3, r3, #4
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d00a      	beq.n	8009daa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	685b      	ldr	r3, [r3, #4]
 8009d9a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	430a      	orrs	r2, r1
 8009da8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dae:	f003 0308 	and.w	r3, r3, #8
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d00a      	beq.n	8009dcc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	685b      	ldr	r3, [r3, #4]
 8009dbc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	430a      	orrs	r2, r1
 8009dca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dd0:	f003 0310 	and.w	r3, r3, #16
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d00a      	beq.n	8009dee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	689b      	ldr	r3, [r3, #8]
 8009dde:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	430a      	orrs	r2, r1
 8009dec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009df2:	f003 0320 	and.w	r3, r3, #32
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d00a      	beq.n	8009e10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	689b      	ldr	r3, [r3, #8]
 8009e00:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	430a      	orrs	r2, r1
 8009e0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d01a      	beq.n	8009e52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	685b      	ldr	r3, [r3, #4]
 8009e22:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	430a      	orrs	r2, r1
 8009e30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e3a:	d10a      	bne.n	8009e52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	685b      	ldr	r3, [r3, #4]
 8009e42:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	430a      	orrs	r2, r1
 8009e50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d00a      	beq.n	8009e74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	685b      	ldr	r3, [r3, #4]
 8009e64:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	430a      	orrs	r2, r1
 8009e72:	605a      	str	r2, [r3, #4]
  }
}
 8009e74:	bf00      	nop
 8009e76:	370c      	adds	r7, #12
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7e:	4770      	bx	lr

08009e80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b086      	sub	sp, #24
 8009e84:	af02      	add	r7, sp, #8
 8009e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009e90:	f7fb fca8 	bl	80057e4 <HAL_GetTick>
 8009e94:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	f003 0308 	and.w	r3, r3, #8
 8009ea0:	2b08      	cmp	r3, #8
 8009ea2:	d10e      	bne.n	8009ec2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ea4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009ea8:	9300      	str	r3, [sp, #0]
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	2200      	movs	r2, #0
 8009eae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f000 f82d 	bl	8009f12 <UART_WaitOnFlagUntilTimeout>
 8009eb8:	4603      	mov	r3, r0
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d001      	beq.n	8009ec2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009ebe:	2303      	movs	r3, #3
 8009ec0:	e023      	b.n	8009f0a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	f003 0304 	and.w	r3, r3, #4
 8009ecc:	2b04      	cmp	r3, #4
 8009ece:	d10e      	bne.n	8009eee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ed0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009ed4:	9300      	str	r3, [sp, #0]
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	2200      	movs	r2, #0
 8009eda:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	f000 f817 	bl	8009f12 <UART_WaitOnFlagUntilTimeout>
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d001      	beq.n	8009eee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009eea:	2303      	movs	r3, #3
 8009eec:	e00d      	b.n	8009f0a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2220      	movs	r2, #32
 8009ef2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2220      	movs	r2, #32
 8009ef8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2200      	movs	r2, #0
 8009efe:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2200      	movs	r2, #0
 8009f04:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009f08:	2300      	movs	r3, #0
}
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	3710      	adds	r7, #16
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd80      	pop	{r7, pc}

08009f12 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009f12:	b580      	push	{r7, lr}
 8009f14:	b09c      	sub	sp, #112	; 0x70
 8009f16:	af00      	add	r7, sp, #0
 8009f18:	60f8      	str	r0, [r7, #12]
 8009f1a:	60b9      	str	r1, [r7, #8]
 8009f1c:	603b      	str	r3, [r7, #0]
 8009f1e:	4613      	mov	r3, r2
 8009f20:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f22:	e0a5      	b.n	800a070 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f2a:	f000 80a1 	beq.w	800a070 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f2e:	f7fb fc59 	bl	80057e4 <HAL_GetTick>
 8009f32:	4602      	mov	r2, r0
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	1ad3      	subs	r3, r2, r3
 8009f38:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009f3a:	429a      	cmp	r2, r3
 8009f3c:	d302      	bcc.n	8009f44 <UART_WaitOnFlagUntilTimeout+0x32>
 8009f3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d13e      	bne.n	8009fc2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f4c:	e853 3f00 	ldrex	r3, [r3]
 8009f50:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009f52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f54:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009f58:	667b      	str	r3, [r7, #100]	; 0x64
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	461a      	mov	r2, r3
 8009f60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009f62:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009f64:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f66:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009f68:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009f6a:	e841 2300 	strex	r3, r2, [r1]
 8009f6e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009f70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d1e6      	bne.n	8009f44 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	3308      	adds	r3, #8
 8009f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f80:	e853 3f00 	ldrex	r3, [r3]
 8009f84:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f88:	f023 0301 	bic.w	r3, r3, #1
 8009f8c:	663b      	str	r3, [r7, #96]	; 0x60
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	3308      	adds	r3, #8
 8009f94:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009f96:	64ba      	str	r2, [r7, #72]	; 0x48
 8009f98:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f9a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009f9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009f9e:	e841 2300 	strex	r3, r2, [r1]
 8009fa2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009fa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d1e5      	bne.n	8009f76 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	2220      	movs	r2, #32
 8009fae:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	2220      	movs	r2, #32
 8009fb4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	2200      	movs	r2, #0
 8009fba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8009fbe:	2303      	movs	r3, #3
 8009fc0:	e067      	b.n	800a092 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f003 0304 	and.w	r3, r3, #4
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d04f      	beq.n	800a070 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	69db      	ldr	r3, [r3, #28]
 8009fd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009fda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009fde:	d147      	bne.n	800a070 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009fe8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ff2:	e853 3f00 	ldrex	r3, [r3]
 8009ff6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ffa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009ffe:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	461a      	mov	r2, r3
 800a006:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a008:	637b      	str	r3, [r7, #52]	; 0x34
 800a00a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a00c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a00e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a010:	e841 2300 	strex	r3, r2, [r1]
 800a014:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d1e6      	bne.n	8009fea <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	3308      	adds	r3, #8
 800a022:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a024:	697b      	ldr	r3, [r7, #20]
 800a026:	e853 3f00 	ldrex	r3, [r3]
 800a02a:	613b      	str	r3, [r7, #16]
   return(result);
 800a02c:	693b      	ldr	r3, [r7, #16]
 800a02e:	f023 0301 	bic.w	r3, r3, #1
 800a032:	66bb      	str	r3, [r7, #104]	; 0x68
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	3308      	adds	r3, #8
 800a03a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a03c:	623a      	str	r2, [r7, #32]
 800a03e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a040:	69f9      	ldr	r1, [r7, #28]
 800a042:	6a3a      	ldr	r2, [r7, #32]
 800a044:	e841 2300 	strex	r3, r2, [r1]
 800a048:	61bb      	str	r3, [r7, #24]
   return(result);
 800a04a:	69bb      	ldr	r3, [r7, #24]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d1e5      	bne.n	800a01c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	2220      	movs	r2, #32
 800a054:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	2220      	movs	r2, #32
 800a05a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	2220      	movs	r2, #32
 800a060:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	2200      	movs	r2, #0
 800a068:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800a06c:	2303      	movs	r3, #3
 800a06e:	e010      	b.n	800a092 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	69da      	ldr	r2, [r3, #28]
 800a076:	68bb      	ldr	r3, [r7, #8]
 800a078:	4013      	ands	r3, r2
 800a07a:	68ba      	ldr	r2, [r7, #8]
 800a07c:	429a      	cmp	r2, r3
 800a07e:	bf0c      	ite	eq
 800a080:	2301      	moveq	r3, #1
 800a082:	2300      	movne	r3, #0
 800a084:	b2db      	uxtb	r3, r3
 800a086:	461a      	mov	r2, r3
 800a088:	79fb      	ldrb	r3, [r7, #7]
 800a08a:	429a      	cmp	r2, r3
 800a08c:	f43f af4a 	beq.w	8009f24 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a090:	2300      	movs	r3, #0
}
 800a092:	4618      	mov	r0, r3
 800a094:	3770      	adds	r7, #112	; 0x70
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}

0800a09a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a09a:	b480      	push	{r7}
 800a09c:	b095      	sub	sp, #84	; 0x54
 800a09e:	af00      	add	r7, sp, #0
 800a0a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0aa:	e853 3f00 	ldrex	r3, [r3]
 800a0ae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a0b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a0b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	461a      	mov	r2, r3
 800a0be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0c0:	643b      	str	r3, [r7, #64]	; 0x40
 800a0c2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a0c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a0c8:	e841 2300 	strex	r3, r2, [r1]
 800a0cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a0ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d1e6      	bne.n	800a0a2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	3308      	adds	r3, #8
 800a0da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0dc:	6a3b      	ldr	r3, [r7, #32]
 800a0de:	e853 3f00 	ldrex	r3, [r3]
 800a0e2:	61fb      	str	r3, [r7, #28]
   return(result);
 800a0e4:	69fb      	ldr	r3, [r7, #28]
 800a0e6:	f023 0301 	bic.w	r3, r3, #1
 800a0ea:	64bb      	str	r3, [r7, #72]	; 0x48
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	3308      	adds	r3, #8
 800a0f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a0f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a0f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a0fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a0fc:	e841 2300 	strex	r3, r2, [r1]
 800a100:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a104:	2b00      	cmp	r3, #0
 800a106:	d1e5      	bne.n	800a0d4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a10c:	2b01      	cmp	r3, #1
 800a10e:	d118      	bne.n	800a142 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	e853 3f00 	ldrex	r3, [r3]
 800a11c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	f023 0310 	bic.w	r3, r3, #16
 800a124:	647b      	str	r3, [r7, #68]	; 0x44
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	461a      	mov	r2, r3
 800a12c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a12e:	61bb      	str	r3, [r7, #24]
 800a130:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a132:	6979      	ldr	r1, [r7, #20]
 800a134:	69ba      	ldr	r2, [r7, #24]
 800a136:	e841 2300 	strex	r3, r2, [r1]
 800a13a:	613b      	str	r3, [r7, #16]
   return(result);
 800a13c:	693b      	ldr	r3, [r7, #16]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d1e6      	bne.n	800a110 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2220      	movs	r2, #32
 800a146:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2200      	movs	r2, #0
 800a14c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2200      	movs	r2, #0
 800a152:	665a      	str	r2, [r3, #100]	; 0x64
}
 800a154:	bf00      	nop
 800a156:	3754      	adds	r7, #84	; 0x54
 800a158:	46bd      	mov	sp, r7
 800a15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15e:	4770      	bx	lr

0800a160 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b084      	sub	sp, #16
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a16c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	2200      	movs	r2, #0
 800a172:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	2200      	movs	r2, #0
 800a17a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a17e:	68f8      	ldr	r0, [r7, #12]
 800a180:	f7ff fb6c 	bl	800985c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a184:	bf00      	nop
 800a186:	3710      	adds	r7, #16
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}

0800a18c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b088      	sub	sp, #32
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	e853 3f00 	ldrex	r3, [r3]
 800a1a0:	60bb      	str	r3, [r7, #8]
   return(result);
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a1a8:	61fb      	str	r3, [r7, #28]
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	461a      	mov	r2, r3
 800a1b0:	69fb      	ldr	r3, [r7, #28]
 800a1b2:	61bb      	str	r3, [r7, #24]
 800a1b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1b6:	6979      	ldr	r1, [r7, #20]
 800a1b8:	69ba      	ldr	r2, [r7, #24]
 800a1ba:	e841 2300 	strex	r3, r2, [r1]
 800a1be:	613b      	str	r3, [r7, #16]
   return(result);
 800a1c0:	693b      	ldr	r3, [r7, #16]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d1e6      	bne.n	800a194 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2220      	movs	r2, #32
 800a1ca:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a1d2:	6878      	ldr	r0, [r7, #4]
 800a1d4:	f000 fb44 	bl	800a860 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a1d8:	bf00      	nop
 800a1da:	3720      	adds	r7, #32
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	bd80      	pop	{r7, pc}

0800a1e0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a1e0:	b480      	push	{r7}
 800a1e2:	b083      	sub	sp, #12
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a1e8:	bf00      	nop
 800a1ea:	370c      	adds	r7, #12
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f2:	4770      	bx	lr

0800a1f4 <board_init_common_rtc_init>:
uint32_t g_button_on_count[NUM_PUSH_BUTTONS] = {0};
bool button_press_state[NUM_PUSH_BUTTONS] = {false};
extern UART_HandleTypeDef      gh_host_usart;

static void board_init_common_rtc_init(void)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	af00      	add	r7, sp, #0
    g_rtc_handle.Instance = RTC;
 800a1f8:	4b10      	ldr	r3, [pc, #64]	; (800a23c <board_init_common_rtc_init+0x48>)
 800a1fa:	4a11      	ldr	r2, [pc, #68]	; (800a240 <board_init_common_rtc_init+0x4c>)
 800a1fc:	601a      	str	r2, [r3, #0]
    g_rtc_handle.Init.HourFormat = RTC_HOURFORMAT_24;
 800a1fe:	4b0f      	ldr	r3, [pc, #60]	; (800a23c <board_init_common_rtc_init+0x48>)
 800a200:	2200      	movs	r2, #0
 800a202:	605a      	str	r2, [r3, #4]
    g_rtc_handle.Init.AsynchPrediv = 127;
 800a204:	4b0d      	ldr	r3, [pc, #52]	; (800a23c <board_init_common_rtc_init+0x48>)
 800a206:	227f      	movs	r2, #127	; 0x7f
 800a208:	609a      	str	r2, [r3, #8]
    g_rtc_handle.Init.SynchPrediv = 255;
 800a20a:	4b0c      	ldr	r3, [pc, #48]	; (800a23c <board_init_common_rtc_init+0x48>)
 800a20c:	22ff      	movs	r2, #255	; 0xff
 800a20e:	60da      	str	r2, [r3, #12]
    g_rtc_handle.Init.OutPut = RTC_OUTPUT_DISABLE;
 800a210:	4b0a      	ldr	r3, [pc, #40]	; (800a23c <board_init_common_rtc_init+0x48>)
 800a212:	2200      	movs	r2, #0
 800a214:	611a      	str	r2, [r3, #16]
    g_rtc_handle.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800a216:	4b09      	ldr	r3, [pc, #36]	; (800a23c <board_init_common_rtc_init+0x48>)
 800a218:	2200      	movs	r2, #0
 800a21a:	615a      	str	r2, [r3, #20]
    g_rtc_handle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800a21c:	4b07      	ldr	r3, [pc, #28]	; (800a23c <board_init_common_rtc_init+0x48>)
 800a21e:	2200      	movs	r2, #0
 800a220:	619a      	str	r2, [r3, #24]
    g_rtc_handle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800a222:	4b06      	ldr	r3, [pc, #24]	; (800a23c <board_init_common_rtc_init+0x48>)
 800a224:	2200      	movs	r2, #0
 800a226:	61da      	str	r2, [r3, #28]
    if (HAL_RTC_Init(&g_rtc_handle) != HAL_OK) Error_Handler();
 800a228:	4804      	ldr	r0, [pc, #16]	; (800a23c <board_init_common_rtc_init+0x48>)
 800a22a:	f7fd fb09 	bl	8007840 <HAL_RTC_Init>
 800a22e:	4603      	mov	r3, r0
 800a230:	2b00      	cmp	r3, #0
 800a232:	d001      	beq.n	800a238 <board_init_common_rtc_init+0x44>
 800a234:	f000 fa4b 	bl	800a6ce <Error_Handler>
}
 800a238:	bf00      	nop
 800a23a:	bd80      	pop	{r7, pc}
 800a23c:	20001dcc 	.word	0x20001dcc
 800a240:	40002800 	.word	0x40002800

0800a244 <SystemClock_Config>:

static void SystemClock_Config(void)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b0ae      	sub	sp, #184	; 0xb8
 800a248:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a24a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800a24e:	2244      	movs	r2, #68	; 0x44
 800a250:	2100      	movs	r1, #0
 800a252:	4618      	mov	r0, r3
 800a254:	f001 fb58 	bl	800b908 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a258:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800a25c:	2200      	movs	r2, #0
 800a25e:	601a      	str	r2, [r3, #0]
 800a260:	605a      	str	r2, [r3, #4]
 800a262:	609a      	str	r2, [r3, #8]
 800a264:	60da      	str	r2, [r3, #12]
 800a266:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a268:	1d3b      	adds	r3, r7, #4
 800a26a:	225c      	movs	r2, #92	; 0x5c
 800a26c:	2100      	movs	r1, #0
 800a26e:	4618      	mov	r0, r3
 800a270:	f001 fb4a 	bl	800b908 <memset>

    HAL_PWR_EnableBkUpAccess();
 800a274:	f7fc f8be 	bl	80063f4 <HAL_PWR_EnableBkUpAccess>
    __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800a278:	4b25      	ldr	r3, [pc, #148]	; (800a310 <SystemClock_Config+0xcc>)
 800a27a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a27e:	4a24      	ldr	r2, [pc, #144]	; (800a310 <SystemClock_Config+0xcc>)
 800a280:	f023 0318 	bic.w	r3, r3, #24
 800a284:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800a288:	2305      	movs	r3, #5
 800a28a:	677b      	str	r3, [r7, #116]	; 0x74
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800a28c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a290:	67bb      	str	r3, [r7, #120]	; 0x78
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800a292:	2301      	movs	r3, #1
 800a294:	67fb      	str	r3, [r7, #124]	; 0x7c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800a296:	2300      	movs	r3, #0
 800a298:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) while(1);
 800a29c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	f7fc f98b 	bl	80065bc <HAL_RCC_OscConfig>
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d000      	beq.n	800a2ae <SystemClock_Config+0x6a>
 800a2ac:	e7fe      	b.n	800a2ac <SystemClock_Config+0x68>

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a2ae:	230f      	movs	r3, #15
 800a2b0:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800a2b2:	2302      	movs	r3, #2
 800a2b4:	667b      	str	r3, [r7, #100]	; 0x64
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	66bb      	str	r3, [r7, #104]	; 0x68
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	66fb      	str	r3, [r7, #108]	; 0x6c
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800a2be:	2300      	movs	r3, #0
 800a2c0:	673b      	str	r3, [r7, #112]	; 0x70

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) while(1);
 800a2c2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800a2c6:	2102      	movs	r1, #2
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	f7fc fd8b 	bl	8006de4 <HAL_RCC_ClockConfig>
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d000      	beq.n	800a2d6 <SystemClock_Config+0x92>
 800a2d4:	e7fe      	b.n	800a2d4 <SystemClock_Config+0x90>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800a2d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a2da:	607b      	str	r3, [r7, #4]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800a2dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a2e0:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) Error_Handler();
 800a2e2:	1d3b      	adds	r3, r7, #4
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f7fc ffa1 	bl	800722c <HAL_RCCEx_PeriphCLKConfig>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d001      	beq.n	800a2f4 <SystemClock_Config+0xb0>
 800a2f0:	f000 f9ed 	bl	800a6ce <Error_Handler>
    if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK) Error_Handler();
 800a2f4:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a2f8:	f7fc f90a 	bl	8006510 <HAL_PWREx_ControlVoltageScaling>
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d001      	beq.n	800a306 <SystemClock_Config+0xc2>
 800a302:	f000 f9e4 	bl	800a6ce <Error_Handler>
}
 800a306:	bf00      	nop
 800a308:	37b8      	adds	r7, #184	; 0xb8
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}
 800a30e:	bf00      	nop
 800a310:	40021000 	.word	0x40021000

0800a314 <board_init_common_timer_init>:


static void board_init_common_timer_init(void)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b09e      	sub	sp, #120	; 0x78
 800a318:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a31a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800a31e:	2200      	movs	r2, #0
 800a320:	601a      	str	r2, [r3, #0]
 800a322:	605a      	str	r2, [r3, #4]
 800a324:	609a      	str	r2, [r3, #8]
 800a326:	60da      	str	r2, [r3, #12]
 800a328:	611a      	str	r2, [r3, #16]
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a32a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800a32e:	2200      	movs	r2, #0
 800a330:	601a      	str	r2, [r3, #0]
 800a332:	605a      	str	r2, [r3, #4]
 800a334:	609a      	str	r2, [r3, #8]
 800a336:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a338:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a33c:	2200      	movs	r2, #0
 800a33e:	601a      	str	r2, [r3, #0]
 800a340:	605a      	str	r2, [r3, #4]
 800a342:	609a      	str	r2, [r3, #8]
    TIM_OC_InitTypeDef sConfigOC = {0};
 800a344:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a348:	2200      	movs	r2, #0
 800a34a:	601a      	str	r2, [r3, #0]
 800a34c:	605a      	str	r2, [r3, #4]
 800a34e:	609a      	str	r2, [r3, #8]
 800a350:	60da      	str	r2, [r3, #12]
 800a352:	611a      	str	r2, [r3, #16]
 800a354:	615a      	str	r2, [r3, #20]
 800a356:	619a      	str	r2, [r3, #24]
    TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800a358:	463b      	mov	r3, r7
 800a35a:	222c      	movs	r2, #44	; 0x2c
 800a35c:	2100      	movs	r1, #0
 800a35e:	4618      	mov	r0, r3
 800a360:	f001 fad2 	bl	800b908 <memset>
    g_tim1_handle.Instance = TIM1;
 800a364:	4b5c      	ldr	r3, [pc, #368]	; (800a4d8 <board_init_common_timer_init+0x1c4>)
 800a366:	4a5d      	ldr	r2, [pc, #372]	; (800a4dc <board_init_common_timer_init+0x1c8>)
 800a368:	601a      	str	r2, [r3, #0]
    g_tim1_handle.Init.Prescaler = 0;
 800a36a:	4b5b      	ldr	r3, [pc, #364]	; (800a4d8 <board_init_common_timer_init+0x1c4>)
 800a36c:	2200      	movs	r2, #0
 800a36e:	605a      	str	r2, [r3, #4]
    g_tim1_handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a370:	4b59      	ldr	r3, [pc, #356]	; (800a4d8 <board_init_common_timer_init+0x1c4>)
 800a372:	2200      	movs	r2, #0
 800a374:	609a      	str	r2, [r3, #8]
    g_tim1_handle.Init.Period = 60-1;
 800a376:	4b58      	ldr	r3, [pc, #352]	; (800a4d8 <board_init_common_timer_init+0x1c4>)
 800a378:	223b      	movs	r2, #59	; 0x3b
 800a37a:	60da      	str	r2, [r3, #12]
    g_tim1_handle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a37c:	4b56      	ldr	r3, [pc, #344]	; (800a4d8 <board_init_common_timer_init+0x1c4>)
 800a37e:	2200      	movs	r2, #0
 800a380:	611a      	str	r2, [r3, #16]
    g_tim1_handle.Init.RepetitionCounter = 0;
 800a382:	4b55      	ldr	r3, [pc, #340]	; (800a4d8 <board_init_common_timer_init+0x1c4>)
 800a384:	2200      	movs	r2, #0
 800a386:	615a      	str	r2, [r3, #20]
    g_tim1_handle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a388:	4b53      	ldr	r3, [pc, #332]	; (800a4d8 <board_init_common_timer_init+0x1c4>)
 800a38a:	2200      	movs	r2, #0
 800a38c:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&g_tim1_handle) != HAL_OK) Error_Handler();
 800a38e:	4852      	ldr	r0, [pc, #328]	; (800a4d8 <board_init_common_timer_init+0x1c4>)
 800a390:	f7fd fc15 	bl	8007bbe <HAL_TIM_Base_Init>
 800a394:	4603      	mov	r3, r0
 800a396:	2b00      	cmp	r3, #0
 800a398:	d001      	beq.n	800a39e <board_init_common_timer_init+0x8a>
 800a39a:	f000 f998 	bl	800a6ce <Error_Handler>
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a39e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a3a2:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_TIM_ConfigClockSource(&g_tim1_handle, &sClockSourceConfig) != HAL_OK) Error_Handler();
 800a3a4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800a3a8:	4619      	mov	r1, r3
 800a3aa:	484b      	ldr	r0, [pc, #300]	; (800a4d8 <board_init_common_timer_init+0x1c4>)
 800a3ac:	f7fe f8aa 	bl	8008504 <HAL_TIM_ConfigClockSource>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d001      	beq.n	800a3ba <board_init_common_timer_init+0xa6>
 800a3b6:	f000 f98a 	bl	800a6ce <Error_Handler>
    if (HAL_TIM_PWM_Init(&g_tim1_handle) != HAL_OK) Error_Handler();
 800a3ba:	4847      	ldr	r0, [pc, #284]	; (800a4d8 <board_init_common_timer_init+0x1c4>)
 800a3bc:	f7fd fc56 	bl	8007c6c <HAL_TIM_PWM_Init>
 800a3c0:	4603      	mov	r3, r0
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d001      	beq.n	800a3ca <board_init_common_timer_init+0xb6>
 800a3c6:	f000 f982 	bl	800a6ce <Error_Handler>
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	64bb      	str	r3, [r7, #72]	; 0x48
    sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	64fb      	str	r3, [r7, #76]	; 0x4c
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_TIMEx_MasterConfigSynchronization(&g_tim1_handle, &sMasterConfig) != HAL_OK) Error_Handler();
 800a3d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a3da:	4619      	mov	r1, r3
 800a3dc:	483e      	ldr	r0, [pc, #248]	; (800a4d8 <board_init_common_timer_init+0x1c4>)
 800a3de:	f7fe fde1 	bl	8008fa4 <HAL_TIMEx_MasterConfigSynchronization>
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d001      	beq.n	800a3ec <board_init_common_timer_init+0xd8>
 800a3e8:	f000 f971 	bl	800a6ce <Error_Handler>
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a3ec:	2360      	movs	r3, #96	; 0x60
 800a3ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    sConfigOC.Pulse = 0;
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	633b      	str	r3, [r7, #48]	; 0x30
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	637b      	str	r3, [r7, #52]	; 0x34
    sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	63bb      	str	r3, [r7, #56]	; 0x38
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	63fb      	str	r3, [r7, #60]	; 0x3c
    sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800a400:	2300      	movs	r3, #0
 800a402:	643b      	str	r3, [r7, #64]	; 0x40
    sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800a404:	2300      	movs	r3, #0
 800a406:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_TIM_PWM_ConfigChannel(&g_tim1_handle, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) Error_Handler();
 800a408:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a40c:	2200      	movs	r2, #0
 800a40e:	4619      	mov	r1, r3
 800a410:	4831      	ldr	r0, [pc, #196]	; (800a4d8 <board_init_common_timer_init+0x1c4>)
 800a412:	f7fd ff63 	bl	80082dc <HAL_TIM_PWM_ConfigChannel>
 800a416:	4603      	mov	r3, r0
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d001      	beq.n	800a420 <board_init_common_timer_init+0x10c>
 800a41c:	f000 f957 	bl	800a6ce <Error_Handler>
    if (HAL_TIM_PWM_ConfigChannel(&g_tim1_handle, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) Error_Handler();
 800a420:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a424:	2204      	movs	r2, #4
 800a426:	4619      	mov	r1, r3
 800a428:	482b      	ldr	r0, [pc, #172]	; (800a4d8 <board_init_common_timer_init+0x1c4>)
 800a42a:	f7fd ff57 	bl	80082dc <HAL_TIM_PWM_ConfigChannel>
 800a42e:	4603      	mov	r3, r0
 800a430:	2b00      	cmp	r3, #0
 800a432:	d001      	beq.n	800a438 <board_init_common_timer_init+0x124>
 800a434:	f000 f94b 	bl	800a6ce <Error_Handler>
    if (HAL_TIM_PWM_ConfigChannel(&g_tim1_handle, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) Error_Handler();
 800a438:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a43c:	2208      	movs	r2, #8
 800a43e:	4619      	mov	r1, r3
 800a440:	4825      	ldr	r0, [pc, #148]	; (800a4d8 <board_init_common_timer_init+0x1c4>)
 800a442:	f7fd ff4b 	bl	80082dc <HAL_TIM_PWM_ConfigChannel>
 800a446:	4603      	mov	r3, r0
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d001      	beq.n	800a450 <board_init_common_timer_init+0x13c>
 800a44c:	f000 f93f 	bl	800a6ce <Error_Handler>
    sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800a450:	2300      	movs	r3, #0
 800a452:	603b      	str	r3, [r7, #0]
    sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800a454:	2300      	movs	r3, #0
 800a456:	607b      	str	r3, [r7, #4]
    sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800a458:	2300      	movs	r3, #0
 800a45a:	60bb      	str	r3, [r7, #8]
    sBreakDeadTimeConfig.DeadTime = 0;
 800a45c:	2300      	movs	r3, #0
 800a45e:	60fb      	str	r3, [r7, #12]
    sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800a460:	2300      	movs	r3, #0
 800a462:	613b      	str	r3, [r7, #16]
    sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800a464:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a468:	617b      	str	r3, [r7, #20]
    sBreakDeadTimeConfig.BreakFilter = 0;
 800a46a:	2300      	movs	r3, #0
 800a46c:	61bb      	str	r3, [r7, #24]
    sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800a46e:	2300      	movs	r3, #0
 800a470:	61fb      	str	r3, [r7, #28]
    sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800a472:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a476:	623b      	str	r3, [r7, #32]
    sBreakDeadTimeConfig.Break2Filter = 0;
 800a478:	2300      	movs	r3, #0
 800a47a:	627b      	str	r3, [r7, #36]	; 0x24
    sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800a47c:	2300      	movs	r3, #0
 800a47e:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_TIMEx_ConfigBreakDeadTime(&g_tim1_handle, &sBreakDeadTimeConfig) != HAL_OK) Error_Handler();
 800a480:	463b      	mov	r3, r7
 800a482:	4619      	mov	r1, r3
 800a484:	4814      	ldr	r0, [pc, #80]	; (800a4d8 <board_init_common_timer_init+0x1c4>)
 800a486:	f7fe fdf3 	bl	8009070 <HAL_TIMEx_ConfigBreakDeadTime>
 800a48a:	4603      	mov	r3, r0
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d001      	beq.n	800a494 <board_init_common_timer_init+0x180>
 800a490:	f000 f91d 	bl	800a6ce <Error_Handler>
    HAL_TIM_PWM_Stop_DMA(&g_tim1_handle, TIM_CHANNEL_1);
 800a494:	2100      	movs	r1, #0
 800a496:	4810      	ldr	r0, [pc, #64]	; (800a4d8 <board_init_common_timer_init+0x1c4>)
 800a498:	f7fd fe38 	bl	800810c <HAL_TIM_PWM_Stop_DMA>
    HAL_TIM_PWM_Stop_DMA(&g_tim1_handle, TIM_CHANNEL_2);
 800a49c:	2104      	movs	r1, #4
 800a49e:	480e      	ldr	r0, [pc, #56]	; (800a4d8 <board_init_common_timer_init+0x1c4>)
 800a4a0:	f7fd fe34 	bl	800810c <HAL_TIM_PWM_Stop_DMA>
    HAL_TIM_PWM_Stop_DMA(&g_tim1_handle, TIM_CHANNEL_3);
 800a4a4:	2108      	movs	r1, #8
 800a4a6:	480c      	ldr	r0, [pc, #48]	; (800a4d8 <board_init_common_timer_init+0x1c4>)
 800a4a8:	f7fd fe30 	bl	800810c <HAL_TIM_PWM_Stop_DMA>
    GPIO_InitStruct.Pin = PIN_TIM1_CH1|PIN_TIM1_CH2|PIN_TIM1_CH3;
 800a4ac:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800a4b0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a4b2:	2302      	movs	r3, #2
 800a4b4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800a4be:	2301      	movs	r3, #1
 800a4c0:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a4c2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800a4c6:	4619      	mov	r1, r3
 800a4c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a4cc:	f7fb fde8 	bl	80060a0 <HAL_GPIO_Init>
}
 800a4d0:	bf00      	nop
 800a4d2:	3778      	adds	r7, #120	; 0x78
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bd80      	pop	{r7, pc}
 800a4d8:	20001df0 	.word	0x20001df0
 800a4dc:	40012c00 	.word	0x40012c00

0800a4e0 <board_init_common_nvic_setup_interrupts>:


static void board_init_common_nvic_setup_interrupts(void)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	af00      	add	r7, sp, #0
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI0_IRQn);
 800a4e4:	4b30      	ldr	r3, [pc, #192]	; (800a5a8 <board_init_common_nvic_setup_interrupts+0xc8>)
 800a4e6:	2206      	movs	r2, #6
 800a4e8:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI2_IRQn);
 800a4ea:	4b2f      	ldr	r3, [pc, #188]	; (800a5a8 <board_init_common_nvic_setup_interrupts+0xc8>)
 800a4ec:	2208      	movs	r2, #8
 800a4ee:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI9_5_IRQn);
 800a4f0:	4b2d      	ldr	r3, [pc, #180]	; (800a5a8 <board_init_common_nvic_setup_interrupts+0xc8>)
 800a4f2:	2217      	movs	r2, #23
 800a4f4:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI15_10_IRQn);
 800a4f6:	4b2c      	ldr	r3, [pc, #176]	; (800a5a8 <board_init_common_nvic_setup_interrupts+0xc8>)
 800a4f8:	2228      	movs	r2, #40	; 0x28
 800a4fa:	615a      	str	r2, [r3, #20]
    HAL_NVIC_SetPriority(EXTI0_IRQn, 24, 0);
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	2118      	movs	r1, #24
 800a500:	2006      	movs	r0, #6
 800a502:	f7fb fabc 	bl	8005a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800a506:	2006      	movs	r0, #6
 800a508:	f7fb fad5 	bl	8005ab6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI2_IRQn, 24, 0);
 800a50c:	2200      	movs	r2, #0
 800a50e:	2118      	movs	r1, #24
 800a510:	2008      	movs	r0, #8
 800a512:	f7fb fab4 	bl	8005a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800a516:	2008      	movs	r0, #8
 800a518:	f7fb facd 	bl	8005ab6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI9_5_IRQn, 24, 0);
 800a51c:	2200      	movs	r2, #0
 800a51e:	2118      	movs	r1, #24
 800a520:	2017      	movs	r0, #23
 800a522:	f7fb faac 	bl	8005a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800a526:	2017      	movs	r0, #23
 800a528:	f7fb fac5 	bl	8005ab6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 24, 0);
 800a52c:	2200      	movs	r2, #0
 800a52e:	2118      	movs	r1, #24
 800a530:	2028      	movs	r0, #40	; 0x28
 800a532:	f7fb faa4 	bl	8005a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800a536:	2028      	movs	r0, #40	; 0x28
 800a538:	f7fb fabd 	bl	8005ab6 <HAL_NVIC_EnableIRQ>
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI0_IRQn);
 800a53c:	4b1a      	ldr	r3, [pc, #104]	; (800a5a8 <board_init_common_nvic_setup_interrupts+0xc8>)
 800a53e:	2206      	movs	r2, #6
 800a540:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI2_IRQn);
 800a542:	4b19      	ldr	r3, [pc, #100]	; (800a5a8 <board_init_common_nvic_setup_interrupts+0xc8>)
 800a544:	2208      	movs	r2, #8
 800a546:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI9_5_IRQn);
 800a548:	4b17      	ldr	r3, [pc, #92]	; (800a5a8 <board_init_common_nvic_setup_interrupts+0xc8>)
 800a54a:	2217      	movs	r2, #23
 800a54c:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI15_10_IRQn);
 800a54e:	4b16      	ldr	r3, [pc, #88]	; (800a5a8 <board_init_common_nvic_setup_interrupts+0xc8>)
 800a550:	2228      	movs	r2, #40	; 0x28
 800a552:	615a      	str	r2, [r3, #20]
    HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800a554:	2200      	movs	r2, #0
 800a556:	2100      	movs	r1, #0
 800a558:	200c      	movs	r0, #12
 800a55a:	f7fb fa90 	bl	8005a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800a55e:	200c      	movs	r0, #12
 800a560:	f7fb faa9 	bl	8005ab6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800a564:	2200      	movs	r2, #0
 800a566:	2100      	movs	r1, #0
 800a568:	200d      	movs	r0, #13
 800a56a:	f7fb fa88 	bl	8005a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800a56e:	200d      	movs	r0, #13
 800a570:	f7fb faa1 	bl	8005ab6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800a574:	2200      	movs	r2, #0
 800a576:	2100      	movs	r1, #0
 800a578:	200f      	movs	r0, #15
 800a57a:	f7fb fa80 	bl	8005a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800a57e:	200f      	movs	r0, #15
 800a580:	f7fb fa99 	bl	8005ab6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800a584:	2200      	movs	r2, #0
 800a586:	2100      	movs	r1, #0
 800a588:	2010      	movs	r0, #16
 800a58a:	f7fb fa78 	bl	8005a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800a58e:	2010      	movs	r0, #16
 800a590:	f7fb fa91 	bl	8005ab6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800a594:	2200      	movs	r2, #0
 800a596:	2100      	movs	r1, #0
 800a598:	2011      	movs	r0, #17
 800a59a:	f7fb fa70 	bl	8005a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800a59e:	2011      	movs	r0, #17
 800a5a0:	f7fb fa89 	bl	8005ab6 <HAL_NVIC_EnableIRQ>
}
 800a5a4:	bf00      	nop
 800a5a6:	bd80      	pop	{r7, pc}
 800a5a8:	40010400 	.word	0x40010400

0800a5ac <board_init_common_setup_wakeups>:


static void board_init_common_setup_wakeups(void)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b086      	sub	sp, #24
 800a5b0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a5b2:	1d3b      	adds	r3, r7, #4
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	601a      	str	r2, [r3, #0]
 800a5b8:	605a      	str	r2, [r3, #4]
 800a5ba:	609a      	str	r2, [r3, #8]
 800a5bc:	60da      	str	r2, [r3, #12]
 800a5be:	611a      	str	r2, [r3, #16]

    // future setup wakeups
    GPIO_InitStruct.Pin = PIN_WKUP_1|PIN_WKUP_4;
 800a5c0:	2305      	movs	r3, #5
 800a5c2:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800a5c4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800a5c8:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a5ca:	2301      	movs	r3, #1
 800a5cc:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_A, &GPIO_InitStruct);
 800a5ce:	1d3b      	adds	r3, r7, #4
 800a5d0:	4619      	mov	r1, r3
 800a5d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a5d6:	f7fb fd63 	bl	80060a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PIN_WKUP_2|PIN_WKUP_3;
 800a5da:	f242 0320 	movw	r3, #8224	; 0x2020
 800a5de:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800a5e0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800a5e4:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a5e6:	2301      	movs	r3, #1
 800a5e8:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 800a5ea:	1d3b      	adds	r3, r7, #4
 800a5ec:	4619      	mov	r1, r3
 800a5ee:	4804      	ldr	r0, [pc, #16]	; (800a600 <board_init_common_setup_wakeups+0x54>)
 800a5f0:	f7fb fd56 	bl	80060a0 <HAL_GPIO_Init>
    board_init_common_nvic_setup_interrupts();
 800a5f4:	f7ff ff74 	bl	800a4e0 <board_init_common_nvic_setup_interrupts>
}
 800a5f8:	bf00      	nop
 800a5fa:	3718      	adds	r7, #24
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	bd80      	pop	{r7, pc}
 800a600:	48000800 	.word	0x48000800

0800a604 <board_init_port_wakeup>:

static void board_init_port_wakeup(void)
{
 800a604:	b480      	push	{r7}
 800a606:	b087      	sub	sp, #28
 800a608:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a60a:	4b21      	ldr	r3, [pc, #132]	; (800a690 <board_init_port_wakeup+0x8c>)
 800a60c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a60e:	4a20      	ldr	r2, [pc, #128]	; (800a690 <board_init_port_wakeup+0x8c>)
 800a610:	f043 0301 	orr.w	r3, r3, #1
 800a614:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a616:	4b1e      	ldr	r3, [pc, #120]	; (800a690 <board_init_port_wakeup+0x8c>)
 800a618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a61a:	f003 0301 	and.w	r3, r3, #1
 800a61e:	617b      	str	r3, [r7, #20]
 800a620:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a622:	4b1b      	ldr	r3, [pc, #108]	; (800a690 <board_init_port_wakeup+0x8c>)
 800a624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a626:	4a1a      	ldr	r2, [pc, #104]	; (800a690 <board_init_port_wakeup+0x8c>)
 800a628:	f043 0302 	orr.w	r3, r3, #2
 800a62c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a62e:	4b18      	ldr	r3, [pc, #96]	; (800a690 <board_init_port_wakeup+0x8c>)
 800a630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a632:	f003 0302 	and.w	r3, r3, #2
 800a636:	613b      	str	r3, [r7, #16]
 800a638:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a63a:	4b15      	ldr	r3, [pc, #84]	; (800a690 <board_init_port_wakeup+0x8c>)
 800a63c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a63e:	4a14      	ldr	r2, [pc, #80]	; (800a690 <board_init_port_wakeup+0x8c>)
 800a640:	f043 0304 	orr.w	r3, r3, #4
 800a644:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a646:	4b12      	ldr	r3, [pc, #72]	; (800a690 <board_init_port_wakeup+0x8c>)
 800a648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a64a:	f003 0304 	and.w	r3, r3, #4
 800a64e:	60fb      	str	r3, [r7, #12]
 800a650:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800a652:	4b0f      	ldr	r3, [pc, #60]	; (800a690 <board_init_port_wakeup+0x8c>)
 800a654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a656:	4a0e      	ldr	r2, [pc, #56]	; (800a690 <board_init_port_wakeup+0x8c>)
 800a658:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a65c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a65e:	4b0c      	ldr	r3, [pc, #48]	; (800a690 <board_init_port_wakeup+0x8c>)
 800a660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a666:	60bb      	str	r3, [r7, #8]
 800a668:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_DMA1_CLK_ENABLE();
 800a66a:	4b09      	ldr	r3, [pc, #36]	; (800a690 <board_init_port_wakeup+0x8c>)
 800a66c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a66e:	4a08      	ldr	r2, [pc, #32]	; (800a690 <board_init_port_wakeup+0x8c>)
 800a670:	f043 0301 	orr.w	r3, r3, #1
 800a674:	6493      	str	r3, [r2, #72]	; 0x48
 800a676:	4b06      	ldr	r3, [pc, #24]	; (800a690 <board_init_port_wakeup+0x8c>)
 800a678:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a67a:	f003 0301 	and.w	r3, r3, #1
 800a67e:	607b      	str	r3, [r7, #4]
 800a680:	687b      	ldr	r3, [r7, #4]
}
 800a682:	bf00      	nop
 800a684:	371c      	adds	r7, #28
 800a686:	46bd      	mov	sp, r7
 800a688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68c:	4770      	bx	lr
 800a68e:	bf00      	nop
 800a690:	40021000 	.word	0x40021000

0800a694 <board_init_common_board_init>:


void board_init_common_board_init(void)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	af00      	add	r7, sp, #0
    srand(time(0));
 800a698:	2000      	movs	r0, #0
 800a69a:	f001 f93d 	bl	800b918 <time>
 800a69e:	4602      	mov	r2, r0
 800a6a0:	460b      	mov	r3, r1
 800a6a2:	4613      	mov	r3, r2
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	f001 f801 	bl	800b6ac <srand>
    HAL_Init();
 800a6aa:	f7fb f847 	bl	800573c <HAL_Init>
    SystemClock_Config();
 800a6ae:	f7ff fdc9 	bl	800a244 <SystemClock_Config>

    board_init_port_wakeup();
 800a6b2:	f7ff ffa7 	bl	800a604 <board_init_port_wakeup>
    board_init_common_setup_wakeups();
 800a6b6:	f7ff ff79 	bl	800a5ac <board_init_common_setup_wakeups>
    board_init_specific();
 800a6ba:	f000 fe6b 	bl	800b394 <board_init_specific>

    board_init_common_timer_init();
 800a6be:	f7ff fe29 	bl	800a314 <board_init_common_timer_init>

    ws2812b_init();
 800a6c2:	f7f7 fbc7 	bl	8001e54 <ws2812b_init>

    board_init_common_rtc_init();
 800a6c6:	f7ff fd95 	bl	800a1f4 <board_init_common_rtc_init>
}
 800a6ca:	bf00      	nop
 800a6cc:	bd80      	pop	{r7, pc}

0800a6ce <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a6ce:	b480      	push	{r7}
 800a6d0:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800a6d2:	b672      	cpsid	i
}
 800a6d4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800a6d6:	e7fe      	b.n	800a6d6 <Error_Handler+0x8>

0800a6d8 <spi_config_hal_setup>:
}



void spi_config_hal_setup(void)
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b088      	sub	sp, #32
 800a6dc:	af00      	add	r7, sp, #0
    //RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
    GPIO_InitTypeDef  GPIO_InitStruct;

    for (spi_config_bus_e bus = SPI_CONFIG_BUS_FIRST; bus < NUM_SPI_CONFIG_BUSES; bus++)
 800a6de:	2300      	movs	r3, #0
 800a6e0:	77fb      	strb	r3, [r7, #31]
 800a6e2:	e0a3      	b.n	800a82c <spi_config_hal_setup+0x154>
    {
    	if (g_spi_num_chips_per_bus[bus])
 800a6e4:	7ffb      	ldrb	r3, [r7, #31]
 800a6e6:	4a56      	ldr	r2, [pc, #344]	; (800a840 <spi_config_hal_setup+0x168>)
 800a6e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	f000 809a 	beq.w	800a826 <spi_config_hal_setup+0x14e>
    	{
    	    GPIO_InitStruct.Pin       = g_spi_config[bus].pin.mosi;
 800a6f2:	7ffa      	ldrb	r2, [r7, #31]
 800a6f4:	4953      	ldr	r1, [pc, #332]	; (800a844 <spi_config_hal_setup+0x16c>)
 800a6f6:	4613      	mov	r3, r2
 800a6f8:	009b      	lsls	r3, r3, #2
 800a6fa:	4413      	add	r3, r2
 800a6fc:	00db      	lsls	r3, r3, #3
 800a6fe:	440b      	add	r3, r1
 800a700:	881b      	ldrh	r3, [r3, #0]
 800a702:	60bb      	str	r3, [r7, #8]
    	    GPIO_InitStruct.Mode      = GPIO_MODE_INPUT;
 800a704:	2300      	movs	r3, #0
 800a706:	60fb      	str	r3, [r7, #12]
    	    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800a708:	2300      	movs	r3, #0
 800a70a:	613b      	str	r3, [r7, #16]
    	    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_LOW;
 800a70c:	2300      	movs	r3, #0
 800a70e:	617b      	str	r3, [r7, #20]
//    	    GPIO_InitStruct.Alternate = g_spi_config[bus].pin.mosi_alt_func;
    	    HAL_GPIO_Init(g_spi_config[bus].pin.mosi_port, &GPIO_InitStruct);
 800a710:	7ffa      	ldrb	r2, [r7, #31]
 800a712:	494c      	ldr	r1, [pc, #304]	; (800a844 <spi_config_hal_setup+0x16c>)
 800a714:	4613      	mov	r3, r2
 800a716:	009b      	lsls	r3, r3, #2
 800a718:	4413      	add	r3, r2
 800a71a:	00db      	lsls	r3, r3, #3
 800a71c:	440b      	add	r3, r1
 800a71e:	3304      	adds	r3, #4
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	f107 0208 	add.w	r2, r7, #8
 800a726:	4611      	mov	r1, r2
 800a728:	4618      	mov	r0, r3
 800a72a:	f7fb fcb9 	bl	80060a0 <HAL_GPIO_Init>

    	    GPIO_InitStruct.Pin       = g_spi_config[bus].pin.miso;
 800a72e:	7ffa      	ldrb	r2, [r7, #31]
 800a730:	4944      	ldr	r1, [pc, #272]	; (800a844 <spi_config_hal_setup+0x16c>)
 800a732:	4613      	mov	r3, r2
 800a734:	009b      	lsls	r3, r3, #2
 800a736:	4413      	add	r3, r2
 800a738:	00db      	lsls	r3, r3, #3
 800a73a:	440b      	add	r3, r1
 800a73c:	330a      	adds	r3, #10
 800a73e:	881b      	ldrh	r3, [r3, #0]
 800a740:	60bb      	str	r3, [r7, #8]
    	    GPIO_InitStruct.Mode      = GPIO_MODE_INPUT;
 800a742:	2300      	movs	r3, #0
 800a744:	60fb      	str	r3, [r7, #12]
    	    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800a746:	2300      	movs	r3, #0
 800a748:	613b      	str	r3, [r7, #16]
    	    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_LOW;
 800a74a:	2300      	movs	r3, #0
 800a74c:	617b      	str	r3, [r7, #20]
//    	    GPIO_InitStruct.Alternate = g_spi_config[bus].pin.miso_alt_func;
    	    HAL_GPIO_Init(g_spi_config[bus].pin.miso_port, &GPIO_InitStruct);
 800a74e:	7ffa      	ldrb	r2, [r7, #31]
 800a750:	493c      	ldr	r1, [pc, #240]	; (800a844 <spi_config_hal_setup+0x16c>)
 800a752:	4613      	mov	r3, r2
 800a754:	009b      	lsls	r3, r3, #2
 800a756:	4413      	add	r3, r2
 800a758:	00db      	lsls	r3, r3, #3
 800a75a:	440b      	add	r3, r1
 800a75c:	330c      	adds	r3, #12
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	f107 0208 	add.w	r2, r7, #8
 800a764:	4611      	mov	r1, r2
 800a766:	4618      	mov	r0, r3
 800a768:	f7fb fc9a 	bl	80060a0 <HAL_GPIO_Init>

    	    GPIO_InitStruct.Pin       = g_spi_config[bus].pin.sck;
 800a76c:	7ffa      	ldrb	r2, [r7, #31]
 800a76e:	4935      	ldr	r1, [pc, #212]	; (800a844 <spi_config_hal_setup+0x16c>)
 800a770:	4613      	mov	r3, r2
 800a772:	009b      	lsls	r3, r3, #2
 800a774:	4413      	add	r3, r2
 800a776:	00db      	lsls	r3, r3, #3
 800a778:	440b      	add	r3, r1
 800a77a:	3312      	adds	r3, #18
 800a77c:	881b      	ldrh	r3, [r3, #0]
 800a77e:	60bb      	str	r3, [r7, #8]
    	    GPIO_InitStruct.Mode      = GPIO_MODE_INPUT;
 800a780:	2300      	movs	r3, #0
 800a782:	60fb      	str	r3, [r7, #12]
    	    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800a784:	2300      	movs	r3, #0
 800a786:	613b      	str	r3, [r7, #16]
    	    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_LOW;
 800a788:	2300      	movs	r3, #0
 800a78a:	617b      	str	r3, [r7, #20]
//    	    GPIO_InitStruct.Alternate = g_spi_config[bus].pin.sck_alt_func;
    	    HAL_GPIO_Init(g_spi_config[bus].pin.sck_port, &GPIO_InitStruct);
 800a78c:	7ffa      	ldrb	r2, [r7, #31]
 800a78e:	492d      	ldr	r1, [pc, #180]	; (800a844 <spi_config_hal_setup+0x16c>)
 800a790:	4613      	mov	r3, r2
 800a792:	009b      	lsls	r3, r3, #2
 800a794:	4413      	add	r3, r2
 800a796:	00db      	lsls	r3, r3, #3
 800a798:	440b      	add	r3, r1
 800a79a:	3314      	adds	r3, #20
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	f107 0208 	add.w	r2, r7, #8
 800a7a2:	4611      	mov	r1, r2
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	f7fb fc7b 	bl	80060a0 <HAL_GPIO_Init>

    	    GPIO_InitStruct.Pin       = g_spi_config[bus].pin.csn;
 800a7aa:	7ffa      	ldrb	r2, [r7, #31]
 800a7ac:	4925      	ldr	r1, [pc, #148]	; (800a844 <spi_config_hal_setup+0x16c>)
 800a7ae:	4613      	mov	r3, r2
 800a7b0:	009b      	lsls	r3, r3, #2
 800a7b2:	4413      	add	r3, r2
 800a7b4:	00db      	lsls	r3, r3, #3
 800a7b6:	440b      	add	r3, r1
 800a7b8:	331a      	adds	r3, #26
 800a7ba:	881b      	ldrh	r3, [r3, #0]
 800a7bc:	60bb      	str	r3, [r7, #8]
    	    GPIO_InitStruct.Mode      = GPIO_MODE_INPUT;
 800a7be:	2300      	movs	r3, #0
 800a7c0:	60fb      	str	r3, [r7, #12]
    	    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	613b      	str	r3, [r7, #16]
//    	    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_LOW;
    	    HAL_GPIO_Init(g_spi_config[bus].pin.csn_port, &GPIO_InitStruct);
 800a7c6:	7ffa      	ldrb	r2, [r7, #31]
 800a7c8:	491e      	ldr	r1, [pc, #120]	; (800a844 <spi_config_hal_setup+0x16c>)
 800a7ca:	4613      	mov	r3, r2
 800a7cc:	009b      	lsls	r3, r3, #2
 800a7ce:	4413      	add	r3, r2
 800a7d0:	00db      	lsls	r3, r3, #3
 800a7d2:	440b      	add	r3, r1
 800a7d4:	331c      	adds	r3, #28
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	f107 0208 	add.w	r2, r7, #8
 800a7dc:	4611      	mov	r1, r2
 800a7de:	4618      	mov	r0, r3
 800a7e0:	f7fb fc5e 	bl	80060a0 <HAL_GPIO_Init>

        	switch (bus)
 800a7e4:	7ffb      	ldrb	r3, [r7, #31]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d10c      	bne.n	800a804 <spi_config_hal_setup+0x12c>
        	{
        		case SPI_CONFIG_BUS_WIFI:
        		    __HAL_RCC_SPI1_CLK_ENABLE();
 800a7ea:	4b17      	ldr	r3, [pc, #92]	; (800a848 <spi_config_hal_setup+0x170>)
 800a7ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a7ee:	4a16      	ldr	r2, [pc, #88]	; (800a848 <spi_config_hal_setup+0x170>)
 800a7f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a7f4:	6613      	str	r3, [r2, #96]	; 0x60
 800a7f6:	4b14      	ldr	r3, [pc, #80]	; (800a848 <spi_config_hal_setup+0x170>)
 800a7f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a7fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a7fe:	607b      	str	r3, [r7, #4]
 800a800:	687b      	ldr	r3, [r7, #4]
        		break;
 800a802:	e000      	b.n	800a806 <spi_config_hal_setup+0x12e>
        		default:
				break;
 800a804:	bf00      	nop
        	}
    	    if(HAL_SPI_Init(g_spi_config[bus].handle) != HAL_OK)
 800a806:	7ffa      	ldrb	r2, [r7, #31]
 800a808:	490e      	ldr	r1, [pc, #56]	; (800a844 <spi_config_hal_setup+0x16c>)
 800a80a:	4613      	mov	r3, r2
 800a80c:	009b      	lsls	r3, r3, #2
 800a80e:	4413      	add	r3, r2
 800a810:	00db      	lsls	r3, r3, #3
 800a812:	440b      	add	r3, r1
 800a814:	3324      	adds	r3, #36	; 0x24
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	4618      	mov	r0, r3
 800a81a:	f7fd f923 	bl	8007a64 <HAL_SPI_Init>
 800a81e:	4603      	mov	r3, r0
 800a820:	2b00      	cmp	r3, #0
 800a822:	d000      	beq.n	800a826 <spi_config_hal_setup+0x14e>
    	    {
    	        /* Initialization Error */
    	        while(1);
 800a824:	e7fe      	b.n	800a824 <spi_config_hal_setup+0x14c>
    for (spi_config_bus_e bus = SPI_CONFIG_BUS_FIRST; bus < NUM_SPI_CONFIG_BUSES; bus++)
 800a826:	7ffb      	ldrb	r3, [r7, #31]
 800a828:	3301      	adds	r3, #1
 800a82a:	77fb      	strb	r3, [r7, #31]
 800a82c:	7ffb      	ldrb	r3, [r7, #31]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	f43f af58 	beq.w	800a6e4 <spi_config_hal_setup+0xc>
    // TODO make this an array that gets populated so you don't need to lookup everytime..
//    for (spi_access_chip_id_e chip_id = SPI_ACCESS_CHIP_ID_FIRST; chip_id < NUM_SPI_ACCESS_CHIP_IDS; chip_id++)
//    {
//    	g_spi_chip_id_handle[chip_id] = spi_config_bus_lookup_from_chip_id(chip_id);
//    }
}
 800a834:	bf00      	nop
 800a836:	bf00      	nop
 800a838:	3720      	adds	r7, #32
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}
 800a83e:	bf00      	nop
 800a840:	200000d4 	.word	0x200000d4
 800a844:	0800c6ec 	.word	0x0800c6ec
 800a848:	40021000 	.word	0x40021000

0800a84c <USART1_IRQHandler>:
uint8_t *gh_uart_rx_buffer;
uint16_t g_uart_rx_buffer_index = 0;


void USART1_IRQHandler(void)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(uart_config_esp8266_handle());
 800a850:	f000 f91a 	bl	800aa88 <uart_config_esp8266_handle>
 800a854:	4603      	mov	r3, r0
 800a856:	4618      	mov	r0, r3
 800a858:	f7fe fd1e 	bl	8009298 <HAL_UART_IRQHandler>
}
 800a85c:	bf00      	nop
 800a85e:	bd80      	pop	{r7, pc}

0800a860 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a860:	b480      	push	{r7}
 800a862:	b083      	sub	sp, #12
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
	// do something in future
}
 800a868:	bf00      	nop
 800a86a:	370c      	adds	r7, #12
 800a86c:	46bd      	mov	sp, r7
 800a86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a872:	4770      	bx	lr

0800a874 <uart_config_hal_setup>:
extern const uart_access_id_e* g_uart_chip_bus_lookup[NUM_UART_CONFIG_BUSES];
extern uint16_t g_uart_num_chips_per_bus[NUM_UART_CONFIG_BUSES];


void uart_config_hal_setup(void)
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b0a0      	sub	sp, #128	; 0x80
 800a878:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef  GPIO_InitStruct;

    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a87a:	f107 030c 	add.w	r3, r7, #12
 800a87e:	225c      	movs	r2, #92	; 0x5c
 800a880:	2100      	movs	r1, #0
 800a882:	4618      	mov	r0, r3
 800a884:	f001 f840 	bl	800b908 <memset>

    for (uart_config_bus_e bus = UART_CONFIG_BUS_FIRST; bus < NUM_UART_CONFIG_BUSES; bus++)
 800a888:	2300      	movs	r3, #0
 800a88a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800a88e:	e0e9      	b.n	800aa64 <uart_config_hal_setup+0x1f0>
    {
    	if (g_uart_num_chips_per_bus[bus])
 800a890:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a894:	4a78      	ldr	r2, [pc, #480]	; (800aa78 <uart_config_hal_setup+0x204>)
 800a896:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	f000 80dd 	beq.w	800aa5a <uart_config_hal_setup+0x1e6>
    	{
    	    GPIO_InitStruct.Pin       = g_uart_config[bus].pin.rx;
 800a8a0:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800a8a4:	4975      	ldr	r1, [pc, #468]	; (800aa7c <uart_config_hal_setup+0x208>)
 800a8a6:	4613      	mov	r3, r2
 800a8a8:	005b      	lsls	r3, r3, #1
 800a8aa:	4413      	add	r3, r2
 800a8ac:	00db      	lsls	r3, r3, #3
 800a8ae:	440b      	add	r3, r1
 800a8b0:	881b      	ldrh	r3, [r3, #0]
 800a8b2:	66bb      	str	r3, [r7, #104]	; 0x68
    	    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800a8b4:	2302      	movs	r3, #2
 800a8b6:	66fb      	str	r3, [r7, #108]	; 0x6c
    	    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	673b      	str	r3, [r7, #112]	; 0x70
    	    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800a8bc:	2303      	movs	r3, #3
 800a8be:	677b      	str	r3, [r7, #116]	; 0x74
    	    GPIO_InitStruct.Alternate = g_uart_config[bus].pin.rx_alt_func;
 800a8c0:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800a8c4:	496d      	ldr	r1, [pc, #436]	; (800aa7c <uart_config_hal_setup+0x208>)
 800a8c6:	4613      	mov	r3, r2
 800a8c8:	005b      	lsls	r3, r3, #1
 800a8ca:	4413      	add	r3, r2
 800a8cc:	00db      	lsls	r3, r3, #3
 800a8ce:	440b      	add	r3, r1
 800a8d0:	3308      	adds	r3, #8
 800a8d2:	781b      	ldrb	r3, [r3, #0]
 800a8d4:	67bb      	str	r3, [r7, #120]	; 0x78
    	    HAL_GPIO_Init(g_uart_config[bus].pin.rx_port, &GPIO_InitStruct);
 800a8d6:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800a8da:	4968      	ldr	r1, [pc, #416]	; (800aa7c <uart_config_hal_setup+0x208>)
 800a8dc:	4613      	mov	r3, r2
 800a8de:	005b      	lsls	r3, r3, #1
 800a8e0:	4413      	add	r3, r2
 800a8e2:	00db      	lsls	r3, r3, #3
 800a8e4:	440b      	add	r3, r1
 800a8e6:	3304      	adds	r3, #4
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800a8ee:	4611      	mov	r1, r2
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	f7fb fbd5 	bl	80060a0 <HAL_GPIO_Init>

    	    GPIO_InitStruct.Pin       = g_uart_config[bus].pin.tx;
 800a8f6:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800a8fa:	4960      	ldr	r1, [pc, #384]	; (800aa7c <uart_config_hal_setup+0x208>)
 800a8fc:	4613      	mov	r3, r2
 800a8fe:	005b      	lsls	r3, r3, #1
 800a900:	4413      	add	r3, r2
 800a902:	00db      	lsls	r3, r3, #3
 800a904:	440b      	add	r3, r1
 800a906:	330a      	adds	r3, #10
 800a908:	881b      	ldrh	r3, [r3, #0]
 800a90a:	66bb      	str	r3, [r7, #104]	; 0x68
    	    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800a90c:	2302      	movs	r3, #2
 800a90e:	66fb      	str	r3, [r7, #108]	; 0x6c
    	    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800a910:	2300      	movs	r3, #0
 800a912:	673b      	str	r3, [r7, #112]	; 0x70
    	    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800a914:	2303      	movs	r3, #3
 800a916:	677b      	str	r3, [r7, #116]	; 0x74
    	    GPIO_InitStruct.Alternate = g_uart_config[bus].pin.tx_alt_func;
 800a918:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800a91c:	4957      	ldr	r1, [pc, #348]	; (800aa7c <uart_config_hal_setup+0x208>)
 800a91e:	4613      	mov	r3, r2
 800a920:	005b      	lsls	r3, r3, #1
 800a922:	4413      	add	r3, r2
 800a924:	00db      	lsls	r3, r3, #3
 800a926:	440b      	add	r3, r1
 800a928:	3310      	adds	r3, #16
 800a92a:	781b      	ldrb	r3, [r3, #0]
 800a92c:	67bb      	str	r3, [r7, #120]	; 0x78
    	    HAL_GPIO_Init(g_uart_config[bus].pin.tx_port, &GPIO_InitStruct);
 800a92e:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800a932:	4952      	ldr	r1, [pc, #328]	; (800aa7c <uart_config_hal_setup+0x208>)
 800a934:	4613      	mov	r3, r2
 800a936:	005b      	lsls	r3, r3, #1
 800a938:	4413      	add	r3, r2
 800a93a:	00db      	lsls	r3, r3, #3
 800a93c:	440b      	add	r3, r1
 800a93e:	330c      	adds	r3, #12
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800a946:	4611      	mov	r1, r2
 800a948:	4618      	mov	r0, r3
 800a94a:	f7fb fba9 	bl	80060a0 <HAL_GPIO_Init>

    	    switch (bus)
 800a94e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a952:	2b00      	cmp	r3, #0
 800a954:	d002      	beq.n	800a95c <uart_config_hal_setup+0xe8>
 800a956:	2b01      	cmp	r3, #1
 800a958:	d01b      	beq.n	800a992 <uart_config_hal_setup+0x11e>
    	    	       //Error_Handler();
    	    	     }
    	    	    __HAL_RCC_USART1_CLK_ENABLE();
				break;
    	    	default:
    	    	break;
 800a95a:	e034      	b.n	800a9c6 <uart_config_hal_setup+0x152>
    	    	    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800a95c:	2320      	movs	r3, #32
 800a95e:	60fb      	str	r3, [r7, #12]
    	    	    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_LSE;
 800a960:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800a964:	63bb      	str	r3, [r7, #56]	; 0x38
    	    	    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a966:	f107 030c 	add.w	r3, r7, #12
 800a96a:	4618      	mov	r0, r3
 800a96c:	f7fc fc5e 	bl	800722c <HAL_RCCEx_PeriphCLKConfig>
 800a970:	4603      	mov	r3, r0
 800a972:	2b00      	cmp	r3, #0
 800a974:	d000      	beq.n	800a978 <uart_config_hal_setup+0x104>
    	    	         while(1);
 800a976:	e7fe      	b.n	800a976 <uart_config_hal_setup+0x102>
    	    	    __HAL_RCC_LPUART1_CLK_ENABLE();
 800a978:	4b41      	ldr	r3, [pc, #260]	; (800aa80 <uart_config_hal_setup+0x20c>)
 800a97a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a97c:	4a40      	ldr	r2, [pc, #256]	; (800aa80 <uart_config_hal_setup+0x20c>)
 800a97e:	f043 0301 	orr.w	r3, r3, #1
 800a982:	65d3      	str	r3, [r2, #92]	; 0x5c
 800a984:	4b3e      	ldr	r3, [pc, #248]	; (800aa80 <uart_config_hal_setup+0x20c>)
 800a986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a988:	f003 0301 	and.w	r3, r3, #1
 800a98c:	60bb      	str	r3, [r7, #8]
 800a98e:	68bb      	ldr	r3, [r7, #8]
    	    	break;
 800a990:	e019      	b.n	800a9c6 <uart_config_hal_setup+0x152>
    	    	    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800a992:	2301      	movs	r3, #1
 800a994:	60fb      	str	r3, [r7, #12]
    	    	    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800a996:	2300      	movs	r3, #0
 800a998:	62fb      	str	r3, [r7, #44]	; 0x2c
    	    	    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a99a:	f107 030c 	add.w	r3, r7, #12
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f7fc fc44 	bl	800722c <HAL_RCCEx_PeriphCLKConfig>
 800a9a4:	4603      	mov	r3, r0
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d000      	beq.n	800a9ac <uart_config_hal_setup+0x138>
    	    	         while(1);
 800a9aa:	e7fe      	b.n	800a9aa <uart_config_hal_setup+0x136>
    	    	    __HAL_RCC_USART1_CLK_ENABLE();
 800a9ac:	4b34      	ldr	r3, [pc, #208]	; (800aa80 <uart_config_hal_setup+0x20c>)
 800a9ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a9b0:	4a33      	ldr	r2, [pc, #204]	; (800aa80 <uart_config_hal_setup+0x20c>)
 800a9b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a9b6:	6613      	str	r3, [r2, #96]	; 0x60
 800a9b8:	4b31      	ldr	r3, [pc, #196]	; (800aa80 <uart_config_hal_setup+0x20c>)
 800a9ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a9bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a9c0:	607b      	str	r3, [r7, #4]
 800a9c2:	687b      	ldr	r3, [r7, #4]
				break;
 800a9c4:	bf00      	nop
    	    }
    	    //UART_ITConfig(USART1, UART_IT_TXE, ENABLE);
    	    //UART_ITConfig(USART1, UART_IT_RXNE, ENABLE);
    	    if(HAL_UART_DeInit(&g_uart_handle_config[bus]) != HAL_OK)
 800a9c6:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800a9ca:	4613      	mov	r3, r2
 800a9cc:	015b      	lsls	r3, r3, #5
 800a9ce:	4413      	add	r3, r2
 800a9d0:	009b      	lsls	r3, r3, #2
 800a9d2:	4a2c      	ldr	r2, [pc, #176]	; (800aa84 <uart_config_hal_setup+0x210>)
 800a9d4:	4413      	add	r3, r2
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	f7fe fc10 	bl	80091fc <HAL_UART_DeInit>
 800a9dc:	4603      	mov	r3, r0
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d000      	beq.n	800a9e4 <uart_config_hal_setup+0x170>
    	    {
    	        while(1);//Error_Handler();
 800a9e2:	e7fe      	b.n	800a9e2 <uart_config_hal_setup+0x16e>
    	    }
    	    if(HAL_UART_Init(&g_uart_handle_config[bus]) != HAL_OK)
 800a9e4:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800a9e8:	4613      	mov	r3, r2
 800a9ea:	015b      	lsls	r3, r3, #5
 800a9ec:	4413      	add	r3, r2
 800a9ee:	009b      	lsls	r3, r3, #2
 800a9f0:	4a24      	ldr	r2, [pc, #144]	; (800aa84 <uart_config_hal_setup+0x210>)
 800a9f2:	4413      	add	r3, r2
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	f7fe fbb3 	bl	8009160 <HAL_UART_Init>
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d000      	beq.n	800aa02 <uart_config_hal_setup+0x18e>
    	    {
    	        while(1);//Error_Handler();
 800aa00:	e7fe      	b.n	800aa00 <uart_config_hal_setup+0x18c>
    	    }
    	    HAL_NVIC_SetPriority(g_uart_config[bus].irqn, 0, 1);
 800aa02:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800aa06:	491d      	ldr	r1, [pc, #116]	; (800aa7c <uart_config_hal_setup+0x208>)
 800aa08:	4613      	mov	r3, r2
 800aa0a:	005b      	lsls	r3, r3, #1
 800aa0c:	4413      	add	r3, r2
 800aa0e:	00db      	lsls	r3, r3, #3
 800aa10:	440b      	add	r3, r1
 800aa12:	3314      	adds	r3, #20
 800aa14:	f993 3000 	ldrsb.w	r3, [r3]
 800aa18:	2201      	movs	r2, #1
 800aa1a:	2100      	movs	r1, #0
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	f7fb f82e 	bl	8005a7e <HAL_NVIC_SetPriority>
    	    HAL_NVIC_EnableIRQ(g_uart_config[bus].irqn);
 800aa22:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800aa26:	4915      	ldr	r1, [pc, #84]	; (800aa7c <uart_config_hal_setup+0x208>)
 800aa28:	4613      	mov	r3, r2
 800aa2a:	005b      	lsls	r3, r3, #1
 800aa2c:	4413      	add	r3, r2
 800aa2e:	00db      	lsls	r3, r3, #3
 800aa30:	440b      	add	r3, r1
 800aa32:	3314      	adds	r3, #20
 800aa34:	f993 3000 	ldrsb.w	r3, [r3]
 800aa38:	4618      	mov	r0, r3
 800aa3a:	f7fb f83c 	bl	8005ab6 <HAL_NVIC_EnableIRQ>
    	    HAL_NVIC_ClearPendingIRQ(g_uart_config[bus].irqn);
 800aa3e:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800aa42:	490e      	ldr	r1, [pc, #56]	; (800aa7c <uart_config_hal_setup+0x208>)
 800aa44:	4613      	mov	r3, r2
 800aa46:	005b      	lsls	r3, r3, #1
 800aa48:	4413      	add	r3, r2
 800aa4a:	00db      	lsls	r3, r3, #3
 800aa4c:	440b      	add	r3, r1
 800aa4e:	3314      	adds	r3, #20
 800aa50:	f993 3000 	ldrsb.w	r3, [r3]
 800aa54:	4618      	mov	r0, r3
 800aa56:	f7fb f856 	bl	8005b06 <HAL_NVIC_ClearPendingIRQ>
    for (uart_config_bus_e bus = UART_CONFIG_BUS_FIRST; bus < NUM_UART_CONFIG_BUSES; bus++)
 800aa5a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800aa5e:	3301      	adds	r3, #1
 800aa60:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800aa64:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800aa68:	2b01      	cmp	r3, #1
 800aa6a:	f67f af11 	bls.w	800a890 <uart_config_hal_setup+0x1c>
    	}
    }

}
 800aa6e:	bf00      	nop
 800aa70:	bf00      	nop
 800aa72:	3780      	adds	r7, #128	; 0x80
 800aa74:	46bd      	mov	sp, r7
 800aa76:	bd80      	pop	{r7, pc}
 800aa78:	200001e0 	.word	0x200001e0
 800aa7c:	0800c714 	.word	0x0800c714
 800aa80:	40021000 	.word	0x40021000
 800aa84:	200000d8 	.word	0x200000d8

0800aa88 <uart_config_esp8266_handle>:
	return &g_uart_handle_config[UART_CONFIG_BUS_HOST];
}


uart_handle_t uart_config_esp8266_handle(void)
{
 800aa88:	b480      	push	{r7}
 800aa8a:	af00      	add	r7, sp, #0
	return &g_uart_handle_config[UART_CONFIG_BUS_ESP8266];
 800aa8c:	4b02      	ldr	r3, [pc, #8]	; (800aa98 <uart_config_esp8266_handle+0x10>)
}
 800aa8e:	4618      	mov	r0, r3
 800aa90:	46bd      	mov	sp, r7
 800aa92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa96:	4770      	bx	lr
 800aa98:	2000015c 	.word	0x2000015c

0800aa9c <HAL_Set_DMA_Callbacks>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);


// Function below added by SRW
static void HAL_Set_DMA_Callbacks(void)
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	af00      	add	r7, sp, #0
    HAL_DMA_RegisterCallback(&hdma_tim1_ch1, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 800aaa0:	4a0d      	ldr	r2, [pc, #52]	; (800aad8 <HAL_Set_DMA_Callbacks+0x3c>)
 800aaa2:	2100      	movs	r1, #0
 800aaa4:	480d      	ldr	r0, [pc, #52]	; (800aadc <HAL_Set_DMA_Callbacks+0x40>)
 800aaa6:	f7fb fa83 	bl	8005fb0 <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&hdma_tim1_ch2, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 800aaaa:	4a0b      	ldr	r2, [pc, #44]	; (800aad8 <HAL_Set_DMA_Callbacks+0x3c>)
 800aaac:	2100      	movs	r1, #0
 800aaae:	480c      	ldr	r0, [pc, #48]	; (800aae0 <HAL_Set_DMA_Callbacks+0x44>)
 800aab0:	f7fb fa7e 	bl	8005fb0 <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&hdma_tim1_ch3, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 800aab4:	4a08      	ldr	r2, [pc, #32]	; (800aad8 <HAL_Set_DMA_Callbacks+0x3c>)
 800aab6:	2100      	movs	r1, #0
 800aab8:	480a      	ldr	r0, [pc, #40]	; (800aae4 <HAL_Set_DMA_Callbacks+0x48>)
 800aaba:	f7fb fa79 	bl	8005fb0 <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&hdma_tim15_ch1_up_trig_com, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 800aabe:	4a06      	ldr	r2, [pc, #24]	; (800aad8 <HAL_Set_DMA_Callbacks+0x3c>)
 800aac0:	2100      	movs	r1, #0
 800aac2:	4809      	ldr	r0, [pc, #36]	; (800aae8 <HAL_Set_DMA_Callbacks+0x4c>)
 800aac4:	f7fb fa74 	bl	8005fb0 <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&hdma_tim16_ch1_up, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 800aac8:	4a03      	ldr	r2, [pc, #12]	; (800aad8 <HAL_Set_DMA_Callbacks+0x3c>)
 800aaca:	2100      	movs	r1, #0
 800aacc:	4807      	ldr	r0, [pc, #28]	; (800aaec <HAL_Set_DMA_Callbacks+0x50>)
 800aace:	f7fb fa6f 	bl	8005fb0 <HAL_DMA_RegisterCallback>
}
 800aad2:	bf00      	nop
 800aad4:	bd80      	pop	{r7, pc}
 800aad6:	bf00      	nop
 800aad8:	0800b103 	.word	0x0800b103
 800aadc:	20001c64 	.word	0x20001c64
 800aae0:	20001cac 	.word	0x20001cac
 800aae4:	20001cf4 	.word	0x20001cf4
 800aae8:	20001d3c 	.word	0x20001d3c
 800aaec:	20001d84 	.word	0x20001d84

0800aaf0 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b084      	sub	sp, #16
 800aaf4:	af00      	add	r7, sp, #0
  PWR_PVDTypeDef sConfigPVD = {0};
 800aaf6:	f107 0308 	add.w	r3, r7, #8
 800aafa:	2200      	movs	r2, #0
 800aafc:	601a      	str	r2, [r3, #0]
 800aafe:	605a      	str	r2, [r3, #4]

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ab00:	4b13      	ldr	r3, [pc, #76]	; (800ab50 <HAL_MspInit+0x60>)
 800ab02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab04:	4a12      	ldr	r2, [pc, #72]	; (800ab50 <HAL_MspInit+0x60>)
 800ab06:	f043 0301 	orr.w	r3, r3, #1
 800ab0a:	6613      	str	r3, [r2, #96]	; 0x60
 800ab0c:	4b10      	ldr	r3, [pc, #64]	; (800ab50 <HAL_MspInit+0x60>)
 800ab0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab10:	f003 0301 	and.w	r3, r3, #1
 800ab14:	607b      	str	r3, [r7, #4]
 800ab16:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800ab18:	4b0d      	ldr	r3, [pc, #52]	; (800ab50 <HAL_MspInit+0x60>)
 800ab1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab1c:	4a0c      	ldr	r2, [pc, #48]	; (800ab50 <HAL_MspInit+0x60>)
 800ab1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ab22:	6593      	str	r3, [r2, #88]	; 0x58
 800ab24:	4b0a      	ldr	r3, [pc, #40]	; (800ab50 <HAL_MspInit+0x60>)
 800ab26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab2c:	603b      	str	r3, [r7, #0]
 800ab2e:	683b      	ldr	r3, [r7, #0]

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 800ab30:	2300      	movs	r3, #0
 800ab32:	60bb      	str	r3, [r7, #8]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 800ab34:	2300      	movs	r3, #0
 800ab36:	60fb      	str	r3, [r7, #12]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 800ab38:	f107 0308 	add.w	r3, r7, #8
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	f7fb fc69 	bl	8006414 <HAL_PWR_ConfigPVD>
  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 800ab42:	f7fb fcc7 	bl	80064d4 <HAL_PWR_EnablePVD>
}
 800ab46:	bf00      	nop
 800ab48:	3710      	adds	r7, #16
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	bd80      	pop	{r7, pc}
 800ab4e:	bf00      	nop
 800ab50:	40021000 	.word	0x40021000

0800ab54 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800ab54:	b480      	push	{r7}
 800ab56:	b083      	sub	sp, #12
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	4a08      	ldr	r2, [pc, #32]	; (800ab84 <HAL_RTC_MspInit+0x30>)
 800ab62:	4293      	cmp	r3, r2
 800ab64:	d107      	bne.n	800ab76 <HAL_RTC_MspInit+0x22>
  {
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800ab66:	4b08      	ldr	r3, [pc, #32]	; (800ab88 <HAL_RTC_MspInit+0x34>)
 800ab68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab6c:	4a06      	ldr	r2, [pc, #24]	; (800ab88 <HAL_RTC_MspInit+0x34>)
 800ab6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

}
 800ab76:	bf00      	nop
 800ab78:	370c      	adds	r7, #12
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab80:	4770      	bx	lr
 800ab82:	bf00      	nop
 800ab84:	40002800 	.word	0x40002800
 800ab88:	40021000 	.word	0x40021000

0800ab8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b084      	sub	sp, #16
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	4a6e      	ldr	r2, [pc, #440]	; (800ad54 <HAL_TIM_Base_MspInit+0x1c8>)
 800ab9a:	4293      	cmp	r3, r2
 800ab9c:	f040 8091 	bne.w	800acc2 <HAL_TIM_Base_MspInit+0x136>
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800aba0:	4b6d      	ldr	r3, [pc, #436]	; (800ad58 <HAL_TIM_Base_MspInit+0x1cc>)
 800aba2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aba4:	4a6c      	ldr	r2, [pc, #432]	; (800ad58 <HAL_TIM_Base_MspInit+0x1cc>)
 800aba6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800abaa:	6613      	str	r3, [r2, #96]	; 0x60
 800abac:	4b6a      	ldr	r3, [pc, #424]	; (800ad58 <HAL_TIM_Base_MspInit+0x1cc>)
 800abae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800abb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800abb4:	60fb      	str	r3, [r7, #12]
 800abb6:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 800abb8:	4b68      	ldr	r3, [pc, #416]	; (800ad5c <HAL_TIM_Base_MspInit+0x1d0>)
 800abba:	4a69      	ldr	r2, [pc, #420]	; (800ad60 <HAL_TIM_Base_MspInit+0x1d4>)
 800abbc:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_7;
 800abbe:	4b67      	ldr	r3, [pc, #412]	; (800ad5c <HAL_TIM_Base_MspInit+0x1d0>)
 800abc0:	2207      	movs	r2, #7
 800abc2:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800abc4:	4b65      	ldr	r3, [pc, #404]	; (800ad5c <HAL_TIM_Base_MspInit+0x1d0>)
 800abc6:	2210      	movs	r2, #16
 800abc8:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800abca:	4b64      	ldr	r3, [pc, #400]	; (800ad5c <HAL_TIM_Base_MspInit+0x1d0>)
 800abcc:	2200      	movs	r2, #0
 800abce:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800abd0:	4b62      	ldr	r3, [pc, #392]	; (800ad5c <HAL_TIM_Base_MspInit+0x1d0>)
 800abd2:	2280      	movs	r2, #128	; 0x80
 800abd4:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800abd6:	4b61      	ldr	r3, [pc, #388]	; (800ad5c <HAL_TIM_Base_MspInit+0x1d0>)
 800abd8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800abdc:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800abde:	4b5f      	ldr	r3, [pc, #380]	; (800ad5c <HAL_TIM_Base_MspInit+0x1d0>)
 800abe0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800abe4:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 800abe6:	4b5d      	ldr	r3, [pc, #372]	; (800ad5c <HAL_TIM_Base_MspInit+0x1d0>)
 800abe8:	2200      	movs	r2, #0
 800abea:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800abec:	4b5b      	ldr	r3, [pc, #364]	; (800ad5c <HAL_TIM_Base_MspInit+0x1d0>)
 800abee:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800abf2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 800abf4:	4859      	ldr	r0, [pc, #356]	; (800ad5c <HAL_TIM_Base_MspInit+0x1d0>)
 800abf6:	f7fa ff95 	bl	8005b24 <HAL_DMA_Init>
 800abfa:	4603      	mov	r3, r0
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d001      	beq.n	800ac04 <HAL_TIM_Base_MspInit+0x78>
    {
      Error_Handler();
 800ac00:	f7ff fd65 	bl	800a6ce <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	4a55      	ldr	r2, [pc, #340]	; (800ad5c <HAL_TIM_Base_MspInit+0x1d0>)
 800ac08:	625a      	str	r2, [r3, #36]	; 0x24
 800ac0a:	4a54      	ldr	r2, [pc, #336]	; (800ad5c <HAL_TIM_Base_MspInit+0x1d0>)
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA1_Channel3;
 800ac10:	4b54      	ldr	r3, [pc, #336]	; (800ad64 <HAL_TIM_Base_MspInit+0x1d8>)
 800ac12:	4a55      	ldr	r2, [pc, #340]	; (800ad68 <HAL_TIM_Base_MspInit+0x1dc>)
 800ac14:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Request = DMA_REQUEST_7;
 800ac16:	4b53      	ldr	r3, [pc, #332]	; (800ad64 <HAL_TIM_Base_MspInit+0x1d8>)
 800ac18:	2207      	movs	r2, #7
 800ac1a:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ac1c:	4b51      	ldr	r3, [pc, #324]	; (800ad64 <HAL_TIM_Base_MspInit+0x1d8>)
 800ac1e:	2210      	movs	r2, #16
 800ac20:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800ac22:	4b50      	ldr	r3, [pc, #320]	; (800ad64 <HAL_TIM_Base_MspInit+0x1d8>)
 800ac24:	2200      	movs	r2, #0
 800ac26:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800ac28:	4b4e      	ldr	r3, [pc, #312]	; (800ad64 <HAL_TIM_Base_MspInit+0x1d8>)
 800ac2a:	2280      	movs	r2, #128	; 0x80
 800ac2c:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800ac2e:	4b4d      	ldr	r3, [pc, #308]	; (800ad64 <HAL_TIM_Base_MspInit+0x1d8>)
 800ac30:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ac34:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800ac36:	4b4b      	ldr	r3, [pc, #300]	; (800ad64 <HAL_TIM_Base_MspInit+0x1d8>)
 800ac38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ac3c:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Mode = DMA_NORMAL;
 800ac3e:	4b49      	ldr	r3, [pc, #292]	; (800ad64 <HAL_TIM_Base_MspInit+0x1d8>)
 800ac40:	2200      	movs	r2, #0
 800ac42:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800ac44:	4b47      	ldr	r3, [pc, #284]	; (800ad64 <HAL_TIM_Base_MspInit+0x1d8>)
 800ac46:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800ac4a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 800ac4c:	4845      	ldr	r0, [pc, #276]	; (800ad64 <HAL_TIM_Base_MspInit+0x1d8>)
 800ac4e:	f7fa ff69 	bl	8005b24 <HAL_DMA_Init>
 800ac52:	4603      	mov	r3, r0
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d001      	beq.n	800ac5c <HAL_TIM_Base_MspInit+0xd0>
    {
      Error_Handler();
 800ac58:	f7ff fd39 	bl	800a6ce <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	4a41      	ldr	r2, [pc, #260]	; (800ad64 <HAL_TIM_Base_MspInit+0x1d8>)
 800ac60:	629a      	str	r2, [r3, #40]	; 0x28
 800ac62:	4a40      	ldr	r2, [pc, #256]	; (800ad64 <HAL_TIM_Base_MspInit+0x1d8>)
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM1_CH3 Init */
    hdma_tim1_ch3.Instance = DMA1_Channel7;
 800ac68:	4b40      	ldr	r3, [pc, #256]	; (800ad6c <HAL_TIM_Base_MspInit+0x1e0>)
 800ac6a:	4a41      	ldr	r2, [pc, #260]	; (800ad70 <HAL_TIM_Base_MspInit+0x1e4>)
 800ac6c:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch3.Init.Request = DMA_REQUEST_7;
 800ac6e:	4b3f      	ldr	r3, [pc, #252]	; (800ad6c <HAL_TIM_Base_MspInit+0x1e0>)
 800ac70:	2207      	movs	r2, #7
 800ac72:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ac74:	4b3d      	ldr	r3, [pc, #244]	; (800ad6c <HAL_TIM_Base_MspInit+0x1e0>)
 800ac76:	2210      	movs	r2, #16
 800ac78:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 800ac7a:	4b3c      	ldr	r3, [pc, #240]	; (800ad6c <HAL_TIM_Base_MspInit+0x1e0>)
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800ac80:	4b3a      	ldr	r3, [pc, #232]	; (800ad6c <HAL_TIM_Base_MspInit+0x1e0>)
 800ac82:	2280      	movs	r2, #128	; 0x80
 800ac84:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800ac86:	4b39      	ldr	r3, [pc, #228]	; (800ad6c <HAL_TIM_Base_MspInit+0x1e0>)
 800ac88:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ac8c:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800ac8e:	4b37      	ldr	r3, [pc, #220]	; (800ad6c <HAL_TIM_Base_MspInit+0x1e0>)
 800ac90:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ac94:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch3.Init.Mode = DMA_NORMAL;
 800ac96:	4b35      	ldr	r3, [pc, #212]	; (800ad6c <HAL_TIM_Base_MspInit+0x1e0>)
 800ac98:	2200      	movs	r2, #0
 800ac9a:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800ac9c:	4b33      	ldr	r3, [pc, #204]	; (800ad6c <HAL_TIM_Base_MspInit+0x1e0>)
 800ac9e:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800aca2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch3) != HAL_OK)
 800aca4:	4831      	ldr	r0, [pc, #196]	; (800ad6c <HAL_TIM_Base_MspInit+0x1e0>)
 800aca6:	f7fa ff3d 	bl	8005b24 <HAL_DMA_Init>
 800acaa:	4603      	mov	r3, r0
 800acac:	2b00      	cmp	r3, #0
 800acae:	d001      	beq.n	800acb4 <HAL_TIM_Base_MspInit+0x128>
    {
      Error_Handler();
 800acb0:	f7ff fd0d 	bl	800a6ce <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	4a2d      	ldr	r2, [pc, #180]	; (800ad6c <HAL_TIM_Base_MspInit+0x1e0>)
 800acb8:	62da      	str	r2, [r3, #44]	; 0x2c
 800acba:	4a2c      	ldr	r2, [pc, #176]	; (800ad6c <HAL_TIM_Base_MspInit+0x1e0>)
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	6293      	str	r3, [r2, #40]	; 0x28
 800acc0:	e041      	b.n	800ad46 <HAL_TIM_Base_MspInit+0x1ba>
  }
  else if(htim_base->Instance==TIM16)
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	4a2b      	ldr	r2, [pc, #172]	; (800ad74 <HAL_TIM_Base_MspInit+0x1e8>)
 800acc8:	4293      	cmp	r3, r2
 800acca:	d13c      	bne.n	800ad46 <HAL_TIM_Base_MspInit+0x1ba>
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800accc:	4b22      	ldr	r3, [pc, #136]	; (800ad58 <HAL_TIM_Base_MspInit+0x1cc>)
 800acce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800acd0:	4a21      	ldr	r2, [pc, #132]	; (800ad58 <HAL_TIM_Base_MspInit+0x1cc>)
 800acd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800acd6:	6613      	str	r3, [r2, #96]	; 0x60
 800acd8:	4b1f      	ldr	r3, [pc, #124]	; (800ad58 <HAL_TIM_Base_MspInit+0x1cc>)
 800acda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800acdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ace0:	60bb      	str	r3, [r7, #8]
 800ace2:	68bb      	ldr	r3, [r7, #8]

    /* TIM16 DMA Init */
    /* TIM16_CH1_UP Init */
    hdma_tim16_ch1_up.Instance = DMA1_Channel6;
 800ace4:	4b24      	ldr	r3, [pc, #144]	; (800ad78 <HAL_TIM_Base_MspInit+0x1ec>)
 800ace6:	4a25      	ldr	r2, [pc, #148]	; (800ad7c <HAL_TIM_Base_MspInit+0x1f0>)
 800ace8:	601a      	str	r2, [r3, #0]
    hdma_tim16_ch1_up.Init.Request = DMA_REQUEST_4;
 800acea:	4b23      	ldr	r3, [pc, #140]	; (800ad78 <HAL_TIM_Base_MspInit+0x1ec>)
 800acec:	2204      	movs	r2, #4
 800acee:	605a      	str	r2, [r3, #4]
    hdma_tim16_ch1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800acf0:	4b21      	ldr	r3, [pc, #132]	; (800ad78 <HAL_TIM_Base_MspInit+0x1ec>)
 800acf2:	2210      	movs	r2, #16
 800acf4:	609a      	str	r2, [r3, #8]
    hdma_tim16_ch1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800acf6:	4b20      	ldr	r3, [pc, #128]	; (800ad78 <HAL_TIM_Base_MspInit+0x1ec>)
 800acf8:	2200      	movs	r2, #0
 800acfa:	60da      	str	r2, [r3, #12]
    hdma_tim16_ch1_up.Init.MemInc = DMA_MINC_ENABLE;
 800acfc:	4b1e      	ldr	r3, [pc, #120]	; (800ad78 <HAL_TIM_Base_MspInit+0x1ec>)
 800acfe:	2280      	movs	r2, #128	; 0x80
 800ad00:	611a      	str	r2, [r3, #16]
    hdma_tim16_ch1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800ad02:	4b1d      	ldr	r3, [pc, #116]	; (800ad78 <HAL_TIM_Base_MspInit+0x1ec>)
 800ad04:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ad08:	615a      	str	r2, [r3, #20]
    hdma_tim16_ch1_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800ad0a:	4b1b      	ldr	r3, [pc, #108]	; (800ad78 <HAL_TIM_Base_MspInit+0x1ec>)
 800ad0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ad10:	619a      	str	r2, [r3, #24]
    hdma_tim16_ch1_up.Init.Mode = DMA_NORMAL;
 800ad12:	4b19      	ldr	r3, [pc, #100]	; (800ad78 <HAL_TIM_Base_MspInit+0x1ec>)
 800ad14:	2200      	movs	r2, #0
 800ad16:	61da      	str	r2, [r3, #28]
    hdma_tim16_ch1_up.Init.Priority = DMA_PRIORITY_LOW;
 800ad18:	4b17      	ldr	r3, [pc, #92]	; (800ad78 <HAL_TIM_Base_MspInit+0x1ec>)
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim16_ch1_up) != HAL_OK)
 800ad1e:	4816      	ldr	r0, [pc, #88]	; (800ad78 <HAL_TIM_Base_MspInit+0x1ec>)
 800ad20:	f7fa ff00 	bl	8005b24 <HAL_DMA_Init>
 800ad24:	4603      	mov	r3, r0
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d001      	beq.n	800ad2e <HAL_TIM_Base_MspInit+0x1a2>
    {
      Error_Handler();
 800ad2a:	f7ff fcd0 	bl	800a6ce <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim16_ch1_up);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	4a11      	ldr	r2, [pc, #68]	; (800ad78 <HAL_TIM_Base_MspInit+0x1ec>)
 800ad32:	625a      	str	r2, [r3, #36]	; 0x24
 800ad34:	4a10      	ldr	r2, [pc, #64]	; (800ad78 <HAL_TIM_Base_MspInit+0x1ec>)
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim16_ch1_up);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	4a0e      	ldr	r2, [pc, #56]	; (800ad78 <HAL_TIM_Base_MspInit+0x1ec>)
 800ad3e:	621a      	str	r2, [r3, #32]
 800ad40:	4a0d      	ldr	r2, [pc, #52]	; (800ad78 <HAL_TIM_Base_MspInit+0x1ec>)
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	6293      	str	r3, [r2, #40]	; 0x28
  }
  HAL_Set_DMA_Callbacks();
 800ad46:	f7ff fea9 	bl	800aa9c <HAL_Set_DMA_Callbacks>
}
 800ad4a:	bf00      	nop
 800ad4c:	3710      	adds	r7, #16
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd80      	pop	{r7, pc}
 800ad52:	bf00      	nop
 800ad54:	40012c00 	.word	0x40012c00
 800ad58:	40021000 	.word	0x40021000
 800ad5c:	20001c64 	.word	0x20001c64
 800ad60:	4002001c 	.word	0x4002001c
 800ad64:	20001cac 	.word	0x20001cac
 800ad68:	40020030 	.word	0x40020030
 800ad6c:	20001cf4 	.word	0x20001cf4
 800ad70:	40020080 	.word	0x40020080
 800ad74:	40014400 	.word	0x40014400
 800ad78:	20001d84 	.word	0x20001d84
 800ad7c:	4002006c 	.word	0x4002006c

0800ad80 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b084      	sub	sp, #16
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM15)
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	4a28      	ldr	r2, [pc, #160]	; (800ae30 <HAL_TIM_PWM_MspInit+0xb0>)
 800ad8e:	4293      	cmp	r3, r2
 800ad90:	d149      	bne.n	800ae26 <HAL_TIM_PWM_MspInit+0xa6>
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 800ad92:	4b28      	ldr	r3, [pc, #160]	; (800ae34 <HAL_TIM_PWM_MspInit+0xb4>)
 800ad94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad96:	4a27      	ldr	r2, [pc, #156]	; (800ae34 <HAL_TIM_PWM_MspInit+0xb4>)
 800ad98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ad9c:	6613      	str	r3, [r2, #96]	; 0x60
 800ad9e:	4b25      	ldr	r3, [pc, #148]	; (800ae34 <HAL_TIM_PWM_MspInit+0xb4>)
 800ada0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ada2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ada6:	60fb      	str	r3, [r7, #12]
 800ada8:	68fb      	ldr	r3, [r7, #12]

    /* TIM15 DMA Init */
    /* TIM15_CH1_UP_TRIG_COM Init */
    hdma_tim15_ch1_up_trig_com.Instance = DMA1_Channel5;
 800adaa:	4b23      	ldr	r3, [pc, #140]	; (800ae38 <HAL_TIM_PWM_MspInit+0xb8>)
 800adac:	4a23      	ldr	r2, [pc, #140]	; (800ae3c <HAL_TIM_PWM_MspInit+0xbc>)
 800adae:	601a      	str	r2, [r3, #0]
    hdma_tim15_ch1_up_trig_com.Init.Request = DMA_REQUEST_7;
 800adb0:	4b21      	ldr	r3, [pc, #132]	; (800ae38 <HAL_TIM_PWM_MspInit+0xb8>)
 800adb2:	2207      	movs	r2, #7
 800adb4:	605a      	str	r2, [r3, #4]
    hdma_tim15_ch1_up_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800adb6:	4b20      	ldr	r3, [pc, #128]	; (800ae38 <HAL_TIM_PWM_MspInit+0xb8>)
 800adb8:	2210      	movs	r2, #16
 800adba:	609a      	str	r2, [r3, #8]
    hdma_tim15_ch1_up_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 800adbc:	4b1e      	ldr	r3, [pc, #120]	; (800ae38 <HAL_TIM_PWM_MspInit+0xb8>)
 800adbe:	2200      	movs	r2, #0
 800adc0:	60da      	str	r2, [r3, #12]
    hdma_tim15_ch1_up_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 800adc2:	4b1d      	ldr	r3, [pc, #116]	; (800ae38 <HAL_TIM_PWM_MspInit+0xb8>)
 800adc4:	2280      	movs	r2, #128	; 0x80
 800adc6:	611a      	str	r2, [r3, #16]
    hdma_tim15_ch1_up_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800adc8:	4b1b      	ldr	r3, [pc, #108]	; (800ae38 <HAL_TIM_PWM_MspInit+0xb8>)
 800adca:	f44f 7280 	mov.w	r2, #256	; 0x100
 800adce:	615a      	str	r2, [r3, #20]
    hdma_tim15_ch1_up_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800add0:	4b19      	ldr	r3, [pc, #100]	; (800ae38 <HAL_TIM_PWM_MspInit+0xb8>)
 800add2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800add6:	619a      	str	r2, [r3, #24]
    hdma_tim15_ch1_up_trig_com.Init.Mode = DMA_NORMAL;
 800add8:	4b17      	ldr	r3, [pc, #92]	; (800ae38 <HAL_TIM_PWM_MspInit+0xb8>)
 800adda:	2200      	movs	r2, #0
 800addc:	61da      	str	r2, [r3, #28]
    hdma_tim15_ch1_up_trig_com.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800adde:	4b16      	ldr	r3, [pc, #88]	; (800ae38 <HAL_TIM_PWM_MspInit+0xb8>)
 800ade0:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800ade4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim15_ch1_up_trig_com) != HAL_OK)
 800ade6:	4814      	ldr	r0, [pc, #80]	; (800ae38 <HAL_TIM_PWM_MspInit+0xb8>)
 800ade8:	f7fa fe9c 	bl	8005b24 <HAL_DMA_Init>
 800adec:	4603      	mov	r3, r0
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d001      	beq.n	800adf6 <HAL_TIM_PWM_MspInit+0x76>
    {
      Error_Handler();
 800adf2:	f7ff fc6c 	bl	800a6ce <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim15_ch1_up_trig_com);
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	4a0f      	ldr	r2, [pc, #60]	; (800ae38 <HAL_TIM_PWM_MspInit+0xb8>)
 800adfa:	625a      	str	r2, [r3, #36]	; 0x24
 800adfc:	4a0e      	ldr	r2, [pc, #56]	; (800ae38 <HAL_TIM_PWM_MspInit+0xb8>)
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_UPDATE],hdma_tim15_ch1_up_trig_com);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	4a0c      	ldr	r2, [pc, #48]	; (800ae38 <HAL_TIM_PWM_MspInit+0xb8>)
 800ae06:	621a      	str	r2, [r3, #32]
 800ae08:	4a0b      	ldr	r2, [pc, #44]	; (800ae38 <HAL_TIM_PWM_MspInit+0xb8>)
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim15_ch1_up_trig_com);
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	4a09      	ldr	r2, [pc, #36]	; (800ae38 <HAL_TIM_PWM_MspInit+0xb8>)
 800ae12:	639a      	str	r2, [r3, #56]	; 0x38
 800ae14:	4a08      	ldr	r2, [pc, #32]	; (800ae38 <HAL_TIM_PWM_MspInit+0xb8>)
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim15_ch1_up_trig_com);
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	4a06      	ldr	r2, [pc, #24]	; (800ae38 <HAL_TIM_PWM_MspInit+0xb8>)
 800ae1e:	635a      	str	r2, [r3, #52]	; 0x34
 800ae20:	4a05      	ldr	r2, [pc, #20]	; (800ae38 <HAL_TIM_PWM_MspInit+0xb8>)
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 800ae26:	bf00      	nop
 800ae28:	3710      	adds	r7, #16
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	bd80      	pop	{r7, pc}
 800ae2e:	bf00      	nop
 800ae30:	40014000 	.word	0x40014000
 800ae34:	40021000 	.word	0x40021000
 800ae38:	20001d3c 	.word	0x20001d3c
 800ae3c:	40020058 	.word	0x40020058

0800ae40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b082      	sub	sp, #8
 800ae44:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 1; iii++)
 800ae46:	2300      	movs	r3, #0
 800ae48:	71fb      	strb	r3, [r7, #7]
 800ae4a:	e005      	b.n	800ae58 <NMI_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 800ae4c:	2064      	movs	r0, #100	; 0x64
 800ae4e:	f7fa fcd5 	bl	80057fc <HAL_Delay>
        for (uint8_t iii = 0; iii < 1; iii++)
 800ae52:	79fb      	ldrb	r3, [r7, #7]
 800ae54:	3301      	adds	r3, #1
 800ae56:	71fb      	strb	r3, [r7, #7]
 800ae58:	79fb      	ldrb	r3, [r7, #7]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d0f6      	beq.n	800ae4c <NMI_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 800ae5e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800ae62:	f7fa fccb 	bl	80057fc <HAL_Delay>
        for (uint8_t iii = 0; iii < 1; iii++)
 800ae66:	e7ee      	b.n	800ae46 <NMI_Handler+0x6>

0800ae68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b082      	sub	sp, #8
 800ae6c:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 2; iii++)
 800ae6e:	2300      	movs	r3, #0
 800ae70:	71fb      	strb	r3, [r7, #7]
 800ae72:	e005      	b.n	800ae80 <HardFault_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 800ae74:	2064      	movs	r0, #100	; 0x64
 800ae76:	f7fa fcc1 	bl	80057fc <HAL_Delay>
        for (uint8_t iii = 0; iii < 2; iii++)
 800ae7a:	79fb      	ldrb	r3, [r7, #7]
 800ae7c:	3301      	adds	r3, #1
 800ae7e:	71fb      	strb	r3, [r7, #7]
 800ae80:	79fb      	ldrb	r3, [r7, #7]
 800ae82:	2b01      	cmp	r3, #1
 800ae84:	d9f6      	bls.n	800ae74 <HardFault_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 800ae86:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800ae8a:	f7fa fcb7 	bl	80057fc <HAL_Delay>
        for (uint8_t iii = 0; iii < 2; iii++)
 800ae8e:	e7ee      	b.n	800ae6e <HardFault_Handler+0x6>

0800ae90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b082      	sub	sp, #8
 800ae94:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 3; iii++)
 800ae96:	2300      	movs	r3, #0
 800ae98:	71fb      	strb	r3, [r7, #7]
 800ae9a:	e005      	b.n	800aea8 <MemManage_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 800ae9c:	2064      	movs	r0, #100	; 0x64
 800ae9e:	f7fa fcad 	bl	80057fc <HAL_Delay>
        for (uint8_t iii = 0; iii < 3; iii++)
 800aea2:	79fb      	ldrb	r3, [r7, #7]
 800aea4:	3301      	adds	r3, #1
 800aea6:	71fb      	strb	r3, [r7, #7]
 800aea8:	79fb      	ldrb	r3, [r7, #7]
 800aeaa:	2b02      	cmp	r3, #2
 800aeac:	d9f6      	bls.n	800ae9c <MemManage_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 800aeae:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800aeb2:	f7fa fca3 	bl	80057fc <HAL_Delay>
        for (uint8_t iii = 0; iii < 3; iii++)
 800aeb6:	e7ee      	b.n	800ae96 <MemManage_Handler+0x6>

0800aeb8 <BusFault_Handler>:
}
/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b082      	sub	sp, #8
 800aebc:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 4; iii++)
 800aebe:	2300      	movs	r3, #0
 800aec0:	71fb      	strb	r3, [r7, #7]
 800aec2:	e005      	b.n	800aed0 <BusFault_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 800aec4:	2064      	movs	r0, #100	; 0x64
 800aec6:	f7fa fc99 	bl	80057fc <HAL_Delay>
        for (uint8_t iii = 0; iii < 4; iii++)
 800aeca:	79fb      	ldrb	r3, [r7, #7]
 800aecc:	3301      	adds	r3, #1
 800aece:	71fb      	strb	r3, [r7, #7]
 800aed0:	79fb      	ldrb	r3, [r7, #7]
 800aed2:	2b03      	cmp	r3, #3
 800aed4:	d9f6      	bls.n	800aec4 <BusFault_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 800aed6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800aeda:	f7fa fc8f 	bl	80057fc <HAL_Delay>
        for (uint8_t iii = 0; iii < 4; iii++)
 800aede:	e7ee      	b.n	800aebe <BusFault_Handler+0x6>

0800aee0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b082      	sub	sp, #8
 800aee4:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 5; iii++)
 800aee6:	2300      	movs	r3, #0
 800aee8:	71fb      	strb	r3, [r7, #7]
 800aeea:	e005      	b.n	800aef8 <UsageFault_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 800aeec:	2064      	movs	r0, #100	; 0x64
 800aeee:	f7fa fc85 	bl	80057fc <HAL_Delay>
        for (uint8_t iii = 0; iii < 5; iii++)
 800aef2:	79fb      	ldrb	r3, [r7, #7]
 800aef4:	3301      	adds	r3, #1
 800aef6:	71fb      	strb	r3, [r7, #7]
 800aef8:	79fb      	ldrb	r3, [r7, #7]
 800aefa:	2b04      	cmp	r3, #4
 800aefc:	d9f6      	bls.n	800aeec <UsageFault_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 800aefe:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800af02:	f7fa fc7b 	bl	80057fc <HAL_Delay>
        for (uint8_t iii = 0; iii < 5; iii++)
 800af06:	e7ee      	b.n	800aee6 <UsageFault_Handler+0x6>

0800af08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800af08:	b480      	push	{r7}
 800af0a:	af00      	add	r7, sp, #0
}
 800af0c:	bf00      	nop
 800af0e:	46bd      	mov	sp, r7
 800af10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af14:	4770      	bx	lr
	...

0800af18 <EXTI0_IRQHandler>:
volatile uint32_t d_passes = 0;
/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800af18:	b590      	push	{r4, r7, lr}
 800af1a:	b085      	sub	sp, #20
 800af1c:	af02      	add	r7, sp, #8
    // D is pause
    BaseType_t xHigherPriorityTaskWoken;
    board_init_push_button_pin_e button_pin = PUSH_BUTTON_D_PIN;
 800af1e:	2301      	movs	r3, #1
 800af20:	80fb      	strh	r3, [r7, #6]
    board_init_push_buttons_e button = PUSH_BUTTON_D;
 800af22:	2303      	movs	r3, #3
 800af24:	717b      	strb	r3, [r7, #5]
    board_init_push_button_irq_e button_irq = PUSH_BUTTON_D_IRQ;
 800af26:	2306      	movs	r3, #6
 800af28:	713b      	strb	r3, [r7, #4]
    d_passes++;
 800af2a:	4b15      	ldr	r3, [pc, #84]	; (800af80 <EXTI0_IRQHandler+0x68>)
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	3301      	adds	r3, #1
 800af30:	4a13      	ldr	r2, [pc, #76]	; (800af80 <EXTI0_IRQHandler+0x68>)
 800af32:	6013      	str	r3, [r2, #0]
    HAL_GPIO_EXTI_IRQHandler(button_pin);
 800af34:	88fb      	ldrh	r3, [r7, #6]
 800af36:	4618      	mov	r0, r3
 800af38:	f7fb fa44 	bl	80063c4 <HAL_GPIO_EXTI_IRQHandler>
    g_button_press_timestamp[button][TIMESTAMP_PREVIOUS] = g_button_press_timestamp[button][TIMESTAMP_CURRENT];
 800af3c:	797a      	ldrb	r2, [r7, #5]
 800af3e:	797b      	ldrb	r3, [r7, #5]
 800af40:	4910      	ldr	r1, [pc, #64]	; (800af84 <EXTI0_IRQHandler+0x6c>)
 800af42:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 800af46:	490f      	ldr	r1, [pc, #60]	; (800af84 <EXTI0_IRQHandler+0x6c>)
 800af48:	00db      	lsls	r3, r3, #3
 800af4a:	440b      	add	r3, r1
 800af4c:	605a      	str	r2, [r3, #4]
    g_button_press_timestamp[button][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 800af4e:	797c      	ldrb	r4, [r7, #5]
 800af50:	f7f8 ff1e 	bl	8003d90 <xTaskGetTickCountFromISR>
 800af54:	4603      	mov	r3, r0
 800af56:	4a0b      	ldr	r2, [pc, #44]	; (800af84 <EXTI0_IRQHandler+0x6c>)
 800af58:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
    HAL_NVIC_DisableIRQ(button_irq);
 800af5c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800af60:	4618      	mov	r0, r3
 800af62:	f7fa fdb6 	bl	8005ad2 <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, button, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 800af66:	4b08      	ldr	r3, [pc, #32]	; (800af88 <EXTI0_IRQHandler+0x70>)
 800af68:	6818      	ldr	r0, [r3, #0]
 800af6a:	7979      	ldrb	r1, [r7, #5]
 800af6c:	463b      	mov	r3, r7
 800af6e:	9300      	str	r3, [sp, #0]
 800af70:	2300      	movs	r3, #0
 800af72:	2203      	movs	r2, #3
 800af74:	f7f9 fb2a 	bl	80045cc <xTaskGenericNotifyFromISR>
}
 800af78:	bf00      	nop
 800af7a:	370c      	adds	r7, #12
 800af7c:	46bd      	mov	sp, r7
 800af7e:	bd90      	pop	{r4, r7, pc}
 800af80:	20001e3c 	.word	0x20001e3c
 800af84:	20000318 	.word	0x20000318
 800af88:	20001e54 	.word	0x20001e54

0800af8c <EXTI2_IRQHandler>:
uint32_t g_dbg_b_interrupt_count = 0;
/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800af8c:	b590      	push	{r4, r7, lr}
 800af8e:	b085      	sub	sp, #20
 800af90:	af02      	add	r7, sp, #8
    // A is speed
    BaseType_t xHigherPriorityTaskWoken;
    board_init_push_button_pin_e button_pin = PUSH_BUTTON_A_PIN;
 800af92:	2304      	movs	r3, #4
 800af94:	80fb      	strh	r3, [r7, #6]
    board_init_push_buttons_e button = PUSH_BUTTON_A;
 800af96:	2300      	movs	r3, #0
 800af98:	717b      	strb	r3, [r7, #5]
    board_init_push_button_irq_e button_irq = PUSH_BUTTON_A_IRQ;
 800af9a:	2308      	movs	r3, #8
 800af9c:	713b      	strb	r3, [r7, #4]
    a_passes++;
 800af9e:	4b15      	ldr	r3, [pc, #84]	; (800aff4 <EXTI2_IRQHandler+0x68>)
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	3301      	adds	r3, #1
 800afa4:	4a13      	ldr	r2, [pc, #76]	; (800aff4 <EXTI2_IRQHandler+0x68>)
 800afa6:	6013      	str	r3, [r2, #0]
    HAL_GPIO_EXTI_IRQHandler(button_pin);
 800afa8:	88fb      	ldrh	r3, [r7, #6]
 800afaa:	4618      	mov	r0, r3
 800afac:	f7fb fa0a 	bl	80063c4 <HAL_GPIO_EXTI_IRQHandler>
    g_button_press_timestamp[button][TIMESTAMP_PREVIOUS] = g_button_press_timestamp[button][TIMESTAMP_CURRENT];
 800afb0:	797a      	ldrb	r2, [r7, #5]
 800afb2:	797b      	ldrb	r3, [r7, #5]
 800afb4:	4910      	ldr	r1, [pc, #64]	; (800aff8 <EXTI2_IRQHandler+0x6c>)
 800afb6:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 800afba:	490f      	ldr	r1, [pc, #60]	; (800aff8 <EXTI2_IRQHandler+0x6c>)
 800afbc:	00db      	lsls	r3, r3, #3
 800afbe:	440b      	add	r3, r1
 800afc0:	605a      	str	r2, [r3, #4]
    g_button_press_timestamp[button][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 800afc2:	797c      	ldrb	r4, [r7, #5]
 800afc4:	f7f8 fee4 	bl	8003d90 <xTaskGetTickCountFromISR>
 800afc8:	4603      	mov	r3, r0
 800afca:	4a0b      	ldr	r2, [pc, #44]	; (800aff8 <EXTI2_IRQHandler+0x6c>)
 800afcc:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
    HAL_NVIC_DisableIRQ(button_irq);
 800afd0:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800afd4:	4618      	mov	r0, r3
 800afd6:	f7fa fd7c 	bl	8005ad2 <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, button, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 800afda:	4b08      	ldr	r3, [pc, #32]	; (800affc <EXTI2_IRQHandler+0x70>)
 800afdc:	6818      	ldr	r0, [r3, #0]
 800afde:	7979      	ldrb	r1, [r7, #5]
 800afe0:	463b      	mov	r3, r7
 800afe2:	9300      	str	r3, [sp, #0]
 800afe4:	2300      	movs	r3, #0
 800afe6:	2203      	movs	r2, #3
 800afe8:	f7f9 faf0 	bl	80045cc <xTaskGenericNotifyFromISR>
}
 800afec:	bf00      	nop
 800afee:	370c      	adds	r7, #12
 800aff0:	46bd      	mov	sp, r7
 800aff2:	bd90      	pop	{r4, r7, pc}
 800aff4:	20001e40 	.word	0x20001e40
 800aff8:	20000318 	.word	0x20000318
 800affc:	20001e54 	.word	0x20001e54

0800b000 <EXTI15_10_IRQHandler>:
volatile uint32_t b_passes = 0;
/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800b000:	b590      	push	{r4, r7, lr}
 800b002:	b085      	sub	sp, #20
 800b004:	af02      	add	r7, sp, #8
    // B is state
    BaseType_t xHigherPriorityTaskWoken;
    board_init_push_button_pin_e button_pin = PUSH_BUTTON_B_PIN;
 800b006:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b00a:	80fb      	strh	r3, [r7, #6]
    board_init_push_buttons_e button = PUSH_BUTTON_B;
 800b00c:	2301      	movs	r3, #1
 800b00e:	717b      	strb	r3, [r7, #5]
    board_init_push_button_irq_e button_irq = PUSH_BUTTON_B_IRQ;
 800b010:	2328      	movs	r3, #40	; 0x28
 800b012:	713b      	strb	r3, [r7, #4]
    b_passes++;
 800b014:	4b15      	ldr	r3, [pc, #84]	; (800b06c <EXTI15_10_IRQHandler+0x6c>)
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	3301      	adds	r3, #1
 800b01a:	4a14      	ldr	r2, [pc, #80]	; (800b06c <EXTI15_10_IRQHandler+0x6c>)
 800b01c:	6013      	str	r3, [r2, #0]
    HAL_GPIO_EXTI_IRQHandler(button_pin);
 800b01e:	88fb      	ldrh	r3, [r7, #6]
 800b020:	4618      	mov	r0, r3
 800b022:	f7fb f9cf 	bl	80063c4 <HAL_GPIO_EXTI_IRQHandler>
    g_button_press_timestamp[button][TIMESTAMP_PREVIOUS] = g_button_press_timestamp[button][TIMESTAMP_CURRENT];
 800b026:	797a      	ldrb	r2, [r7, #5]
 800b028:	797b      	ldrb	r3, [r7, #5]
 800b02a:	4911      	ldr	r1, [pc, #68]	; (800b070 <EXTI15_10_IRQHandler+0x70>)
 800b02c:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 800b030:	490f      	ldr	r1, [pc, #60]	; (800b070 <EXTI15_10_IRQHandler+0x70>)
 800b032:	00db      	lsls	r3, r3, #3
 800b034:	440b      	add	r3, r1
 800b036:	605a      	str	r2, [r3, #4]
    g_button_press_timestamp[button][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 800b038:	797c      	ldrb	r4, [r7, #5]
 800b03a:	f7f8 fea9 	bl	8003d90 <xTaskGetTickCountFromISR>
 800b03e:	4603      	mov	r3, r0
 800b040:	4a0b      	ldr	r2, [pc, #44]	; (800b070 <EXTI15_10_IRQHandler+0x70>)
 800b042:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
    HAL_NVIC_DisableIRQ(button_irq);
 800b046:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800b04a:	4618      	mov	r0, r3
 800b04c:	f7fa fd41 	bl	8005ad2 <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, button, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 800b050:	4b08      	ldr	r3, [pc, #32]	; (800b074 <EXTI15_10_IRQHandler+0x74>)
 800b052:	6818      	ldr	r0, [r3, #0]
 800b054:	7979      	ldrb	r1, [r7, #5]
 800b056:	463b      	mov	r3, r7
 800b058:	9300      	str	r3, [sp, #0]
 800b05a:	2300      	movs	r3, #0
 800b05c:	2203      	movs	r2, #3
 800b05e:	f7f9 fab5 	bl	80045cc <xTaskGenericNotifyFromISR>
}
 800b062:	bf00      	nop
 800b064:	370c      	adds	r7, #12
 800b066:	46bd      	mov	sp, r7
 800b068:	bd90      	pop	{r4, r7, pc}
 800b06a:	bf00      	nop
 800b06c:	20001e44 	.word	0x20001e44
 800b070:	20000318 	.word	0x20000318
 800b074:	20001e54 	.word	0x20001e54

0800b078 <EXTI9_5_IRQHandler>:
volatile uint32_t c_passes = 0;
/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800b078:	b590      	push	{r4, r7, lr}
 800b07a:	b085      	sub	sp, #20
 800b07c:	af02      	add	r7, sp, #8
    // C is color
    BaseType_t xHigherPriorityTaskWoken;
    board_init_push_button_pin_e button_pin = PUSH_BUTTON_C_PIN;
 800b07e:	2320      	movs	r3, #32
 800b080:	80fb      	strh	r3, [r7, #6]
    board_init_push_buttons_e button = PUSH_BUTTON_C;
 800b082:	2302      	movs	r3, #2
 800b084:	717b      	strb	r3, [r7, #5]
    board_init_push_button_irq_e button_irq = PUSH_BUTTON_C_IRQ;
 800b086:	2317      	movs	r3, #23
 800b088:	713b      	strb	r3, [r7, #4]
    c_passes++;
 800b08a:	4b15      	ldr	r3, [pc, #84]	; (800b0e0 <EXTI9_5_IRQHandler+0x68>)
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	3301      	adds	r3, #1
 800b090:	4a13      	ldr	r2, [pc, #76]	; (800b0e0 <EXTI9_5_IRQHandler+0x68>)
 800b092:	6013      	str	r3, [r2, #0]
    // add button irq here..
    HAL_GPIO_EXTI_IRQHandler(button_pin);
 800b094:	88fb      	ldrh	r3, [r7, #6]
 800b096:	4618      	mov	r0, r3
 800b098:	f7fb f994 	bl	80063c4 <HAL_GPIO_EXTI_IRQHandler>
    g_button_press_timestamp[button][TIMESTAMP_PREVIOUS] = g_button_press_timestamp[button][TIMESTAMP_CURRENT];
 800b09c:	797a      	ldrb	r2, [r7, #5]
 800b09e:	797b      	ldrb	r3, [r7, #5]
 800b0a0:	4910      	ldr	r1, [pc, #64]	; (800b0e4 <EXTI9_5_IRQHandler+0x6c>)
 800b0a2:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 800b0a6:	490f      	ldr	r1, [pc, #60]	; (800b0e4 <EXTI9_5_IRQHandler+0x6c>)
 800b0a8:	00db      	lsls	r3, r3, #3
 800b0aa:	440b      	add	r3, r1
 800b0ac:	605a      	str	r2, [r3, #4]
    g_button_press_timestamp[button][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 800b0ae:	797c      	ldrb	r4, [r7, #5]
 800b0b0:	f7f8 fe6e 	bl	8003d90 <xTaskGetTickCountFromISR>
 800b0b4:	4603      	mov	r3, r0
 800b0b6:	4a0b      	ldr	r2, [pc, #44]	; (800b0e4 <EXTI9_5_IRQHandler+0x6c>)
 800b0b8:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
    HAL_NVIC_DisableIRQ(button_irq);
 800b0bc:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	f7fa fd06 	bl	8005ad2 <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, button, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 800b0c6:	4b08      	ldr	r3, [pc, #32]	; (800b0e8 <EXTI9_5_IRQHandler+0x70>)
 800b0c8:	6818      	ldr	r0, [r3, #0]
 800b0ca:	7979      	ldrb	r1, [r7, #5]
 800b0cc:	463b      	mov	r3, r7
 800b0ce:	9300      	str	r3, [sp, #0]
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	2203      	movs	r2, #3
 800b0d4:	f7f9 fa7a 	bl	80045cc <xTaskGenericNotifyFromISR>
}
 800b0d8:	bf00      	nop
 800b0da:	370c      	adds	r7, #12
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	bd90      	pop	{r4, r7, pc}
 800b0e0:	20001e48 	.word	0x20001e48
 800b0e4:	20000318 	.word	0x20000318
 800b0e8:	20001e54 	.word	0x20001e54

0800b0ec <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800b0ec:	b480      	push	{r7}
 800b0ee:	b083      	sub	sp, #12
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	80fb      	strh	r3, [r7, #6]

}
 800b0f6:	bf00      	nop
 800b0f8:	370c      	adds	r7, #12
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b100:	4770      	bx	lr

0800b102 <HAL_DMA_CMPLT_CALLBACK>:


void HAL_DMA_CMPLT_CALLBACK(DMA_HandleTypeDef *hdma)
{
 800b102:	b480      	push	{r7}
 800b104:	b083      	sub	sp, #12
 800b106:	af00      	add	r7, sp, #0
 800b108:	6078      	str	r0, [r7, #4]
    while(1);
 800b10a:	e7fe      	b.n	800b10a <HAL_DMA_CMPLT_CALLBACK+0x8>

0800b10c <HAL_TIM_PWM_PulseFinishedCallback>:
bool gb_dma_cmplt_strip_1 = true;
bool gb_dma_cmplt_strip_2 = true;
bool gb_dma_cmplt_strip_3 = true;

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b082      	sub	sp, #8
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
    switch (htim->Channel)
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	7f1b      	ldrb	r3, [r3, #28]
 800b118:	2b04      	cmp	r3, #4
 800b11a:	d016      	beq.n	800b14a <HAL_TIM_PWM_PulseFinishedCallback+0x3e>
 800b11c:	2b04      	cmp	r3, #4
 800b11e:	dc1c      	bgt.n	800b15a <HAL_TIM_PWM_PulseFinishedCallback+0x4e>
 800b120:	2b01      	cmp	r3, #1
 800b122:	d002      	beq.n	800b12a <HAL_TIM_PWM_PulseFinishedCallback+0x1e>
 800b124:	2b02      	cmp	r3, #2
 800b126:	d008      	beq.n	800b13a <HAL_TIM_PWM_PulseFinishedCallback+0x2e>
        case HAL_TIM_ACTIVE_CHANNEL_3:
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_3);
            gb_dma_cmplt_strip_3 = true;
        break;
        default:
        break;
 800b128:	e017      	b.n	800b15a <HAL_TIM_PWM_PulseFinishedCallback+0x4e>
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
 800b12a:	2100      	movs	r1, #0
 800b12c:	6878      	ldr	r0, [r7, #4]
 800b12e:	f7fc ffed 	bl	800810c <HAL_TIM_PWM_Stop_DMA>
            gb_dma_cmplt_strip_1 = true;
 800b132:	4b0c      	ldr	r3, [pc, #48]	; (800b164 <HAL_TIM_PWM_PulseFinishedCallback+0x58>)
 800b134:	2201      	movs	r2, #1
 800b136:	701a      	strb	r2, [r3, #0]
        break;
 800b138:	e010      	b.n	800b15c <HAL_TIM_PWM_PulseFinishedCallback+0x50>
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_2);
 800b13a:	2104      	movs	r1, #4
 800b13c:	6878      	ldr	r0, [r7, #4]
 800b13e:	f7fc ffe5 	bl	800810c <HAL_TIM_PWM_Stop_DMA>
            gb_dma_cmplt_strip_2 = true;
 800b142:	4b09      	ldr	r3, [pc, #36]	; (800b168 <HAL_TIM_PWM_PulseFinishedCallback+0x5c>)
 800b144:	2201      	movs	r2, #1
 800b146:	701a      	strb	r2, [r3, #0]
        break;
 800b148:	e008      	b.n	800b15c <HAL_TIM_PWM_PulseFinishedCallback+0x50>
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_3);
 800b14a:	2108      	movs	r1, #8
 800b14c:	6878      	ldr	r0, [r7, #4]
 800b14e:	f7fc ffdd 	bl	800810c <HAL_TIM_PWM_Stop_DMA>
            gb_dma_cmplt_strip_3 = true;
 800b152:	4b06      	ldr	r3, [pc, #24]	; (800b16c <HAL_TIM_PWM_PulseFinishedCallback+0x60>)
 800b154:	2201      	movs	r2, #1
 800b156:	701a      	strb	r2, [r3, #0]
        break;
 800b158:	e000      	b.n	800b15c <HAL_TIM_PWM_PulseFinishedCallback+0x50>
        break;
 800b15a:	bf00      	nop
    }
}
 800b15c:	bf00      	nop
 800b15e:	3708      	adds	r7, #8
 800b160:	46bd      	mov	sp, r7
 800b162:	bd80      	pop	{r7, pc}
 800b164:	20000069 	.word	0x20000069
 800b168:	2000006a 	.word	0x2000006a
 800b16c:	2000006b 	.word	0x2000006b

0800b170 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800b170:	b580      	push	{r7, lr}
 800b172:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 800b174:	4802      	ldr	r0, [pc, #8]	; (800b180 <DMA1_Channel2_IRQHandler+0x10>)
 800b176:	f7fa fe6c 	bl	8005e52 <HAL_DMA_IRQHandler>
}
 800b17a:	bf00      	nop
 800b17c:	bd80      	pop	{r7, pc}
 800b17e:	bf00      	nop
 800b180:	20001c64 	.word	0x20001c64

0800b184 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800b184:	b580      	push	{r7, lr}
 800b186:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 800b188:	4802      	ldr	r0, [pc, #8]	; (800b194 <DMA1_Channel3_IRQHandler+0x10>)
 800b18a:	f7fa fe62 	bl	8005e52 <HAL_DMA_IRQHandler>
}
 800b18e:	bf00      	nop
 800b190:	bd80      	pop	{r7, pc}
 800b192:	bf00      	nop
 800b194:	20001cac 	.word	0x20001cac

0800b198 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim15_ch1_up_trig_com);
 800b19c:	4802      	ldr	r0, [pc, #8]	; (800b1a8 <DMA1_Channel5_IRQHandler+0x10>)
 800b19e:	f7fa fe58 	bl	8005e52 <HAL_DMA_IRQHandler>
}
 800b1a2:	bf00      	nop
 800b1a4:	bd80      	pop	{r7, pc}
 800b1a6:	bf00      	nop
 800b1a8:	20001d3c 	.word	0x20001d3c

0800b1ac <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim16_ch1_up);
 800b1b0:	4802      	ldr	r0, [pc, #8]	; (800b1bc <DMA1_Channel6_IRQHandler+0x10>)
 800b1b2:	f7fa fe4e 	bl	8005e52 <HAL_DMA_IRQHandler>
}
 800b1b6:	bf00      	nop
 800b1b8:	bd80      	pop	{r7, pc}
 800b1ba:	bf00      	nop
 800b1bc:	20001d84 	.word	0x20001d84

0800b1c0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim1_ch3);
 800b1c4:	4802      	ldr	r0, [pc, #8]	; (800b1d0 <DMA1_Channel7_IRQHandler+0x10>)
 800b1c6:	f7fa fe44 	bl	8005e52 <HAL_DMA_IRQHandler>
}
 800b1ca:	bf00      	nop
 800b1cc:	bd80      	pop	{r7, pc}
 800b1ce:	bf00      	nop
 800b1d0:	20001cf4 	.word	0x20001cf4

0800b1d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800b1d4:	b480      	push	{r7}
 800b1d6:	af00      	add	r7, sp, #0
	return 1;
 800b1d8:	2301      	movs	r3, #1
}
 800b1da:	4618      	mov	r0, r3
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e2:	4770      	bx	lr

0800b1e4 <_kill>:

int _kill(int pid, int sig)
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b082      	sub	sp, #8
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
 800b1ec:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800b1ee:	f000 fbcf 	bl	800b990 <__errno>
 800b1f2:	4603      	mov	r3, r0
 800b1f4:	2216      	movs	r2, #22
 800b1f6:	601a      	str	r2, [r3, #0]
	return -1;
 800b1f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	3708      	adds	r7, #8
 800b200:	46bd      	mov	sp, r7
 800b202:	bd80      	pop	{r7, pc}

0800b204 <_exit>:

void _exit (int status)
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b082      	sub	sp, #8
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800b20c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b210:	6878      	ldr	r0, [r7, #4]
 800b212:	f7ff ffe7 	bl	800b1e4 <_kill>
	while (1) {}		/* Make sure we hang here */
 800b216:	e7fe      	b.n	800b216 <_exit+0x12>

0800b218 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b086      	sub	sp, #24
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	60f8      	str	r0, [r7, #12]
 800b220:	60b9      	str	r1, [r7, #8]
 800b222:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b224:	2300      	movs	r3, #0
 800b226:	617b      	str	r3, [r7, #20]
 800b228:	e00a      	b.n	800b240 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800b22a:	f3af 8000 	nop.w
 800b22e:	4601      	mov	r1, r0
 800b230:	68bb      	ldr	r3, [r7, #8]
 800b232:	1c5a      	adds	r2, r3, #1
 800b234:	60ba      	str	r2, [r7, #8]
 800b236:	b2ca      	uxtb	r2, r1
 800b238:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b23a:	697b      	ldr	r3, [r7, #20]
 800b23c:	3301      	adds	r3, #1
 800b23e:	617b      	str	r3, [r7, #20]
 800b240:	697a      	ldr	r2, [r7, #20]
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	429a      	cmp	r2, r3
 800b246:	dbf0      	blt.n	800b22a <_read+0x12>
	}

return len;
 800b248:	687b      	ldr	r3, [r7, #4]
}
 800b24a:	4618      	mov	r0, r3
 800b24c:	3718      	adds	r7, #24
 800b24e:	46bd      	mov	sp, r7
 800b250:	bd80      	pop	{r7, pc}

0800b252 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800b252:	b580      	push	{r7, lr}
 800b254:	b086      	sub	sp, #24
 800b256:	af00      	add	r7, sp, #0
 800b258:	60f8      	str	r0, [r7, #12]
 800b25a:	60b9      	str	r1, [r7, #8]
 800b25c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b25e:	2300      	movs	r3, #0
 800b260:	617b      	str	r3, [r7, #20]
 800b262:	e009      	b.n	800b278 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800b264:	68bb      	ldr	r3, [r7, #8]
 800b266:	1c5a      	adds	r2, r3, #1
 800b268:	60ba      	str	r2, [r7, #8]
 800b26a:	781b      	ldrb	r3, [r3, #0]
 800b26c:	4618      	mov	r0, r3
 800b26e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b272:	697b      	ldr	r3, [r7, #20]
 800b274:	3301      	adds	r3, #1
 800b276:	617b      	str	r3, [r7, #20]
 800b278:	697a      	ldr	r2, [r7, #20]
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	429a      	cmp	r2, r3
 800b27e:	dbf1      	blt.n	800b264 <_write+0x12>
	}
	return len;
 800b280:	687b      	ldr	r3, [r7, #4]
}
 800b282:	4618      	mov	r0, r3
 800b284:	3718      	adds	r7, #24
 800b286:	46bd      	mov	sp, r7
 800b288:	bd80      	pop	{r7, pc}

0800b28a <_close>:

int _close(int file)
{
 800b28a:	b480      	push	{r7}
 800b28c:	b083      	sub	sp, #12
 800b28e:	af00      	add	r7, sp, #0
 800b290:	6078      	str	r0, [r7, #4]
	return -1;
 800b292:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800b296:	4618      	mov	r0, r3
 800b298:	370c      	adds	r7, #12
 800b29a:	46bd      	mov	sp, r7
 800b29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a0:	4770      	bx	lr

0800b2a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800b2a2:	b480      	push	{r7}
 800b2a4:	b083      	sub	sp, #12
 800b2a6:	af00      	add	r7, sp, #0
 800b2a8:	6078      	str	r0, [r7, #4]
 800b2aa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800b2ac:	683b      	ldr	r3, [r7, #0]
 800b2ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b2b2:	605a      	str	r2, [r3, #4]
	return 0;
 800b2b4:	2300      	movs	r3, #0
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	370c      	adds	r7, #12
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c0:	4770      	bx	lr

0800b2c2 <_isatty>:

int _isatty(int file)
{
 800b2c2:	b480      	push	{r7}
 800b2c4:	b083      	sub	sp, #12
 800b2c6:	af00      	add	r7, sp, #0
 800b2c8:	6078      	str	r0, [r7, #4]
	return 1;
 800b2ca:	2301      	movs	r3, #1
}
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	370c      	adds	r7, #12
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d6:	4770      	bx	lr

0800b2d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800b2d8:	b480      	push	{r7}
 800b2da:	b085      	sub	sp, #20
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	60f8      	str	r0, [r7, #12]
 800b2e0:	60b9      	str	r1, [r7, #8]
 800b2e2:	607a      	str	r2, [r7, #4]
	return 0;
 800b2e4:	2300      	movs	r3, #0
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	3714      	adds	r7, #20
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f0:	4770      	bx	lr
	...

0800b2f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	b086      	sub	sp, #24
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800b2fc:	4a14      	ldr	r2, [pc, #80]	; (800b350 <_sbrk+0x5c>)
 800b2fe:	4b15      	ldr	r3, [pc, #84]	; (800b354 <_sbrk+0x60>)
 800b300:	1ad3      	subs	r3, r2, r3
 800b302:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800b304:	697b      	ldr	r3, [r7, #20]
 800b306:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800b308:	4b13      	ldr	r3, [pc, #76]	; (800b358 <_sbrk+0x64>)
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d102      	bne.n	800b316 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800b310:	4b11      	ldr	r3, [pc, #68]	; (800b358 <_sbrk+0x64>)
 800b312:	4a12      	ldr	r2, [pc, #72]	; (800b35c <_sbrk+0x68>)
 800b314:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800b316:	4b10      	ldr	r3, [pc, #64]	; (800b358 <_sbrk+0x64>)
 800b318:	681a      	ldr	r2, [r3, #0]
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	4413      	add	r3, r2
 800b31e:	693a      	ldr	r2, [r7, #16]
 800b320:	429a      	cmp	r2, r3
 800b322:	d207      	bcs.n	800b334 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800b324:	f000 fb34 	bl	800b990 <__errno>
 800b328:	4603      	mov	r3, r0
 800b32a:	220c      	movs	r2, #12
 800b32c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800b32e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b332:	e009      	b.n	800b348 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800b334:	4b08      	ldr	r3, [pc, #32]	; (800b358 <_sbrk+0x64>)
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800b33a:	4b07      	ldr	r3, [pc, #28]	; (800b358 <_sbrk+0x64>)
 800b33c:	681a      	ldr	r2, [r3, #0]
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	4413      	add	r3, r2
 800b342:	4a05      	ldr	r2, [pc, #20]	; (800b358 <_sbrk+0x64>)
 800b344:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800b346:	68fb      	ldr	r3, [r7, #12]
}
 800b348:	4618      	mov	r0, r3
 800b34a:	3718      	adds	r7, #24
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}
 800b350:	20010000 	.word	0x20010000
 800b354:	00000400 	.word	0x00000400
 800b358:	20001e4c 	.word	0x20001e4c
 800b35c:	20003060 	.word	0x20003060

0800b360 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800b360:	b480      	push	{r7}
 800b362:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800b364:	4b06      	ldr	r3, [pc, #24]	; (800b380 <SystemInit+0x20>)
 800b366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b36a:	4a05      	ldr	r2, [pc, #20]	; (800b380 <SystemInit+0x20>)
 800b36c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b370:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800b374:	bf00      	nop
 800b376:	46bd      	mov	sp, r7
 800b378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37c:	4770      	bx	lr
 800b37e:	bf00      	nop
 800b380:	e000ed00 	.word	0xe000ed00

0800b384 <board_init_peripheral_setup>:

#if defined(BOARD_SPUDGLO_V5)


static void board_init_peripheral_setup(void)
{
 800b384:	b580      	push	{r7, lr}
 800b386:	af00      	add	r7, sp, #0
	uart_config_hal_setup();
 800b388:	f7ff fa74 	bl	800a874 <uart_config_hal_setup>
	spi_config_hal_setup();
 800b38c:	f7ff f9a4 	bl	800a6d8 <spi_config_hal_setup>
}
 800b390:	bf00      	nop
 800b392:	bd80      	pop	{r7, pc}

0800b394 <board_init_specific>:


void board_init_specific(void)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b086      	sub	sp, #24
 800b398:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b39a:	1d3b      	adds	r3, r7, #4
 800b39c:	2200      	movs	r2, #0
 800b39e:	601a      	str	r2, [r3, #0]
 800b3a0:	605a      	str	r2, [r3, #4]
 800b3a2:	609a      	str	r2, [r3, #8]
 800b3a4:	60da      	str	r2, [r3, #12]
 800b3a6:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = PIN_LVL_EN;
 800b3a8:	2380      	movs	r3, #128	; 0x80
 800b3aa:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b3ac:	2301      	movs	r3, #1
 800b3ae:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 800b3b4:	1d3b      	adds	r3, r7, #4
 800b3b6:	4619      	mov	r1, r3
 800b3b8:	4825      	ldr	r0, [pc, #148]	; (800b450 <board_init_specific+0xbc>)
 800b3ba:	f7fa fe71 	bl	80060a0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PIN_PORT_C, PIN_LVL_EN, GPIO_PIN_RESET);
 800b3be:	2200      	movs	r2, #0
 800b3c0:	2180      	movs	r1, #128	; 0x80
 800b3c2:	4823      	ldr	r0, [pc, #140]	; (800b450 <board_init_specific+0xbc>)
 800b3c4:	f7fa ffe6 	bl	8006394 <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = PIN_LVL_DIR;
 800b3c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b3cc:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b3ce:	2301      	movs	r3, #1
 800b3d0:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 800b3d6:	1d3b      	adds	r3, r7, #4
 800b3d8:	4619      	mov	r1, r3
 800b3da:	481d      	ldr	r0, [pc, #116]	; (800b450 <board_init_specific+0xbc>)
 800b3dc:	f7fa fe60 	bl	80060a0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PIN_PORT_C, PIN_LVL_DIR, GPIO_PIN_SET);
 800b3e0:	2201      	movs	r2, #1
 800b3e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b3e6:	481a      	ldr	r0, [pc, #104]	; (800b450 <board_init_specific+0xbc>)
 800b3e8:	f7fa ffd4 	bl	8006394 <HAL_GPIO_WritePin>

    // setup XR_RX and XR_TX
    GPIO_InitStruct.Pin = PIN_VBUS_PRESENT;
 800b3ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b3f0:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_B, &GPIO_InitStruct);
 800b3fa:	1d3b      	adds	r3, r7, #4
 800b3fc:	4619      	mov	r1, r3
 800b3fe:	4815      	ldr	r0, [pc, #84]	; (800b454 <board_init_specific+0xc0>)
 800b400:	f7fa fe4e 	bl	80060a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PIN_GREEN_LED;
 800b404:	2304      	movs	r3, #4
 800b406:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b408:	2301      	movs	r3, #1
 800b40a:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b40c:	2300      	movs	r3, #0
 800b40e:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 800b410:	1d3b      	adds	r3, r7, #4
 800b412:	4619      	mov	r1, r3
 800b414:	480e      	ldr	r0, [pc, #56]	; (800b450 <board_init_specific+0xbc>)
 800b416:	f7fa fe43 	bl	80060a0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PIN_PORT_C, PIN_GREEN_LED, GPIO_PIN_RESET);
 800b41a:	2200      	movs	r2, #0
 800b41c:	2104      	movs	r1, #4
 800b41e:	480c      	ldr	r0, [pc, #48]	; (800b450 <board_init_specific+0xbc>)
 800b420:	f7fa ffb8 	bl	8006394 <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = PIN_RED_LED;
 800b424:	2308      	movs	r3, #8
 800b426:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b428:	2301      	movs	r3, #1
 800b42a:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b42c:	2300      	movs	r3, #0
 800b42e:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 800b430:	1d3b      	adds	r3, r7, #4
 800b432:	4619      	mov	r1, r3
 800b434:	4806      	ldr	r0, [pc, #24]	; (800b450 <board_init_specific+0xbc>)
 800b436:	f7fa fe33 	bl	80060a0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PIN_PORT_C, PIN_RED_LED, GPIO_PIN_RESET);
 800b43a:	2200      	movs	r2, #0
 800b43c:	2108      	movs	r1, #8
 800b43e:	4804      	ldr	r0, [pc, #16]	; (800b450 <board_init_specific+0xbc>)
 800b440:	f7fa ffa8 	bl	8006394 <HAL_GPIO_WritePin>

    board_init_peripheral_setup();
 800b444:	f7ff ff9e 	bl	800b384 <board_init_peripheral_setup>
}
 800b448:	bf00      	nop
 800b44a:	3718      	adds	r7, #24
 800b44c:	46bd      	mov	sp, r7
 800b44e:	bd80      	pop	{r7, pc}
 800b450:	48000800 	.word	0x48000800
 800b454:	48000400 	.word	0x48000400

0800b458 <random_num>:
#include <stdint.h>
#include <stdlib.h>
#include "numbers.h"

uint32_t random_num(uint32_t min, uint32_t max)
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b082      	sub	sp, #8
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
 800b460:	6039      	str	r1, [r7, #0]
   return min + rand() % (max - min);
 800b462:	f000 f951 	bl	800b708 <rand>
 800b466:	4603      	mov	r3, r0
 800b468:	461a      	mov	r2, r3
 800b46a:	6839      	ldr	r1, [r7, #0]
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	1acb      	subs	r3, r1, r3
 800b470:	fbb2 f1f3 	udiv	r1, r2, r3
 800b474:	fb01 f303 	mul.w	r3, r1, r3
 800b478:	1ad2      	subs	r2, r2, r3
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	4413      	add	r3, r2
}
 800b47e:	4618      	mov	r0, r3
 800b480:	3708      	adds	r7, #8
 800b482:	46bd      	mov	sp, r7
 800b484:	bd80      	pop	{r7, pc}

0800b486 <main>:
#include "task_create.h"
#include "animate_led.h"
#include "flash_info.h"

int main(void)
{
 800b486:	b580      	push	{r7, lr}
 800b488:	af00      	add	r7, sp, #0

    board_init_common_board_init();
 800b48a:	f7ff f903 	bl	800a694 <board_init_common_board_init>
    //flash_info_init();
    task_create();
 800b48e:	f000 f807 	bl	800b4a0 <task_create>
	//semaphore_create();
    reset_ws2812b();
 800b492:	f7f6 fae5 	bl	8001a60 <reset_ws2812b>
	osKernelStart();
 800b496:	f7f7 fadb 	bl	8002a50 <osKernelStart>
 800b49a:	2300      	movs	r3, #0
}
 800b49c:	4618      	mov	r0, r3
 800b49e:	bd80      	pop	{r7, pc}

0800b4a0 <task_create>:
	.cb_size = sizeof(g_dma_transfer_control_block),
	.priority = (osPriority_t) osPriorityNormal,
};

void task_create(void)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	af00      	add	r7, sp, #0
    osKernelInitialize();
 800b4a4:	f7f7 fab0 	bl	8002a08 <osKernelInitialize>
	g_button_press_handle = osThreadNew(task_button_press, NULL, &g_task_button_press_attributes);
 800b4a8:	4a0a      	ldr	r2, [pc, #40]	; (800b4d4 <task_create+0x34>)
 800b4aa:	2100      	movs	r1, #0
 800b4ac:	480a      	ldr	r0, [pc, #40]	; (800b4d8 <task_create+0x38>)
 800b4ae:	f7f7 faf5 	bl	8002a9c <osThreadNew>
 800b4b2:	4603      	mov	r3, r0
 800b4b4:	4a09      	ldr	r2, [pc, #36]	; (800b4dc <task_create+0x3c>)
 800b4b6:	6013      	str	r3, [r2, #0]
    //g_dma_transfer_handle = osThreadNew(task_dma_transfer, NULL, &g_task_dma_transfer_attributes);
    g_led_strip_1_ctrl_handle = osThreadNew(task_led_ctrl_strip_one, NULL, &g_task_strip_1_led_ctrl_attributes);
 800b4b8:	4a09      	ldr	r2, [pc, #36]	; (800b4e0 <task_create+0x40>)
 800b4ba:	2100      	movs	r1, #0
 800b4bc:	4809      	ldr	r0, [pc, #36]	; (800b4e4 <task_create+0x44>)
 800b4be:	f7f7 faed 	bl	8002a9c <osThreadNew>
 800b4c2:	4603      	mov	r3, r0
 800b4c4:	4a08      	ldr	r2, [pc, #32]	; (800b4e8 <task_create+0x48>)
 800b4c6:	6013      	str	r3, [r2, #0]
    g_tasks_running = true; // technically will be running after task scheduler started
 800b4c8:	4b08      	ldr	r3, [pc, #32]	; (800b4ec <task_create+0x4c>)
 800b4ca:	2201      	movs	r2, #1
 800b4cc:	701a      	strb	r2, [r3, #0]



}
 800b4ce:	bf00      	nop
 800b4d0:	bd80      	pop	{r7, pc}
 800b4d2:	bf00      	nop
 800b4d4:	0800c744 	.word	0x0800c744
 800b4d8:	080020f1 	.word	0x080020f1
 800b4dc:	20001e54 	.word	0x20001e54
 800b4e0:	0800c768 	.word	0x0800c768
 800b4e4:	080023cd 	.word	0x080023cd
 800b4e8:	20001e50 	.word	0x20001e50
 800b4ec:	20002f10 	.word	0x20002f10

0800b4f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800b4f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b528 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800b4f4:	f7ff ff34 	bl	800b360 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800b4f8:	480c      	ldr	r0, [pc, #48]	; (800b52c <LoopForever+0x6>)
  ldr r1, =_edata
 800b4fa:	490d      	ldr	r1, [pc, #52]	; (800b530 <LoopForever+0xa>)
  ldr r2, =_sidata
 800b4fc:	4a0d      	ldr	r2, [pc, #52]	; (800b534 <LoopForever+0xe>)
  movs r3, #0
 800b4fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800b500:	e002      	b.n	800b508 <LoopCopyDataInit>

0800b502 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800b502:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800b504:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800b506:	3304      	adds	r3, #4

0800b508 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800b508:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800b50a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800b50c:	d3f9      	bcc.n	800b502 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800b50e:	4a0a      	ldr	r2, [pc, #40]	; (800b538 <LoopForever+0x12>)
  ldr r4, =_ebss
 800b510:	4c0a      	ldr	r4, [pc, #40]	; (800b53c <LoopForever+0x16>)
  movs r3, #0
 800b512:	2300      	movs	r3, #0
  b LoopFillZerobss
 800b514:	e001      	b.n	800b51a <LoopFillZerobss>

0800b516 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800b516:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800b518:	3204      	adds	r2, #4

0800b51a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800b51a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800b51c:	d3fb      	bcc.n	800b516 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800b51e:	f000 fa3d 	bl	800b99c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800b522:	f7ff ffb0 	bl	800b486 <main>

0800b526 <LoopForever>:

LoopForever:
    b LoopForever
 800b526:	e7fe      	b.n	800b526 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800b528:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800b52c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800b530:	20000240 	.word	0x20000240
  ldr r2, =_sidata
 800b534:	0800c87c 	.word	0x0800c87c
  ldr r2, =_sbss
 800b538:	20000240 	.word	0x20000240
  ldr r4, =_ebss
 800b53c:	20003060 	.word	0x20003060

0800b540 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800b540:	e7fe      	b.n	800b540 <ADC1_IRQHandler>
	...

0800b544 <malloc>:
 800b544:	4b02      	ldr	r3, [pc, #8]	; (800b550 <malloc+0xc>)
 800b546:	4601      	mov	r1, r0
 800b548:	6818      	ldr	r0, [r3, #0]
 800b54a:	f000 b823 	b.w	800b594 <_malloc_r>
 800b54e:	bf00      	nop
 800b550:	2000023c 	.word	0x2000023c

0800b554 <sbrk_aligned>:
 800b554:	b570      	push	{r4, r5, r6, lr}
 800b556:	4e0e      	ldr	r6, [pc, #56]	; (800b590 <sbrk_aligned+0x3c>)
 800b558:	460c      	mov	r4, r1
 800b55a:	6831      	ldr	r1, [r6, #0]
 800b55c:	4605      	mov	r5, r0
 800b55e:	b911      	cbnz	r1, 800b566 <sbrk_aligned+0x12>
 800b560:	f000 fa06 	bl	800b970 <_sbrk_r>
 800b564:	6030      	str	r0, [r6, #0]
 800b566:	4621      	mov	r1, r4
 800b568:	4628      	mov	r0, r5
 800b56a:	f000 fa01 	bl	800b970 <_sbrk_r>
 800b56e:	1c43      	adds	r3, r0, #1
 800b570:	d00a      	beq.n	800b588 <sbrk_aligned+0x34>
 800b572:	1cc4      	adds	r4, r0, #3
 800b574:	f024 0403 	bic.w	r4, r4, #3
 800b578:	42a0      	cmp	r0, r4
 800b57a:	d007      	beq.n	800b58c <sbrk_aligned+0x38>
 800b57c:	1a21      	subs	r1, r4, r0
 800b57e:	4628      	mov	r0, r5
 800b580:	f000 f9f6 	bl	800b970 <_sbrk_r>
 800b584:	3001      	adds	r0, #1
 800b586:	d101      	bne.n	800b58c <sbrk_aligned+0x38>
 800b588:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b58c:	4620      	mov	r0, r4
 800b58e:	bd70      	pop	{r4, r5, r6, pc}
 800b590:	20002f18 	.word	0x20002f18

0800b594 <_malloc_r>:
 800b594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b598:	1ccd      	adds	r5, r1, #3
 800b59a:	f025 0503 	bic.w	r5, r5, #3
 800b59e:	3508      	adds	r5, #8
 800b5a0:	2d0c      	cmp	r5, #12
 800b5a2:	bf38      	it	cc
 800b5a4:	250c      	movcc	r5, #12
 800b5a6:	2d00      	cmp	r5, #0
 800b5a8:	4607      	mov	r7, r0
 800b5aa:	db01      	blt.n	800b5b0 <_malloc_r+0x1c>
 800b5ac:	42a9      	cmp	r1, r5
 800b5ae:	d905      	bls.n	800b5bc <_malloc_r+0x28>
 800b5b0:	230c      	movs	r3, #12
 800b5b2:	603b      	str	r3, [r7, #0]
 800b5b4:	2600      	movs	r6, #0
 800b5b6:	4630      	mov	r0, r6
 800b5b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5bc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b690 <_malloc_r+0xfc>
 800b5c0:	f000 f868 	bl	800b694 <__malloc_lock>
 800b5c4:	f8d8 3000 	ldr.w	r3, [r8]
 800b5c8:	461c      	mov	r4, r3
 800b5ca:	bb5c      	cbnz	r4, 800b624 <_malloc_r+0x90>
 800b5cc:	4629      	mov	r1, r5
 800b5ce:	4638      	mov	r0, r7
 800b5d0:	f7ff ffc0 	bl	800b554 <sbrk_aligned>
 800b5d4:	1c43      	adds	r3, r0, #1
 800b5d6:	4604      	mov	r4, r0
 800b5d8:	d155      	bne.n	800b686 <_malloc_r+0xf2>
 800b5da:	f8d8 4000 	ldr.w	r4, [r8]
 800b5de:	4626      	mov	r6, r4
 800b5e0:	2e00      	cmp	r6, #0
 800b5e2:	d145      	bne.n	800b670 <_malloc_r+0xdc>
 800b5e4:	2c00      	cmp	r4, #0
 800b5e6:	d048      	beq.n	800b67a <_malloc_r+0xe6>
 800b5e8:	6823      	ldr	r3, [r4, #0]
 800b5ea:	4631      	mov	r1, r6
 800b5ec:	4638      	mov	r0, r7
 800b5ee:	eb04 0903 	add.w	r9, r4, r3
 800b5f2:	f000 f9bd 	bl	800b970 <_sbrk_r>
 800b5f6:	4581      	cmp	r9, r0
 800b5f8:	d13f      	bne.n	800b67a <_malloc_r+0xe6>
 800b5fa:	6821      	ldr	r1, [r4, #0]
 800b5fc:	1a6d      	subs	r5, r5, r1
 800b5fe:	4629      	mov	r1, r5
 800b600:	4638      	mov	r0, r7
 800b602:	f7ff ffa7 	bl	800b554 <sbrk_aligned>
 800b606:	3001      	adds	r0, #1
 800b608:	d037      	beq.n	800b67a <_malloc_r+0xe6>
 800b60a:	6823      	ldr	r3, [r4, #0]
 800b60c:	442b      	add	r3, r5
 800b60e:	6023      	str	r3, [r4, #0]
 800b610:	f8d8 3000 	ldr.w	r3, [r8]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d038      	beq.n	800b68a <_malloc_r+0xf6>
 800b618:	685a      	ldr	r2, [r3, #4]
 800b61a:	42a2      	cmp	r2, r4
 800b61c:	d12b      	bne.n	800b676 <_malloc_r+0xe2>
 800b61e:	2200      	movs	r2, #0
 800b620:	605a      	str	r2, [r3, #4]
 800b622:	e00f      	b.n	800b644 <_malloc_r+0xb0>
 800b624:	6822      	ldr	r2, [r4, #0]
 800b626:	1b52      	subs	r2, r2, r5
 800b628:	d41f      	bmi.n	800b66a <_malloc_r+0xd6>
 800b62a:	2a0b      	cmp	r2, #11
 800b62c:	d917      	bls.n	800b65e <_malloc_r+0xca>
 800b62e:	1961      	adds	r1, r4, r5
 800b630:	42a3      	cmp	r3, r4
 800b632:	6025      	str	r5, [r4, #0]
 800b634:	bf18      	it	ne
 800b636:	6059      	strne	r1, [r3, #4]
 800b638:	6863      	ldr	r3, [r4, #4]
 800b63a:	bf08      	it	eq
 800b63c:	f8c8 1000 	streq.w	r1, [r8]
 800b640:	5162      	str	r2, [r4, r5]
 800b642:	604b      	str	r3, [r1, #4]
 800b644:	4638      	mov	r0, r7
 800b646:	f104 060b 	add.w	r6, r4, #11
 800b64a:	f000 f829 	bl	800b6a0 <__malloc_unlock>
 800b64e:	f026 0607 	bic.w	r6, r6, #7
 800b652:	1d23      	adds	r3, r4, #4
 800b654:	1af2      	subs	r2, r6, r3
 800b656:	d0ae      	beq.n	800b5b6 <_malloc_r+0x22>
 800b658:	1b9b      	subs	r3, r3, r6
 800b65a:	50a3      	str	r3, [r4, r2]
 800b65c:	e7ab      	b.n	800b5b6 <_malloc_r+0x22>
 800b65e:	42a3      	cmp	r3, r4
 800b660:	6862      	ldr	r2, [r4, #4]
 800b662:	d1dd      	bne.n	800b620 <_malloc_r+0x8c>
 800b664:	f8c8 2000 	str.w	r2, [r8]
 800b668:	e7ec      	b.n	800b644 <_malloc_r+0xb0>
 800b66a:	4623      	mov	r3, r4
 800b66c:	6864      	ldr	r4, [r4, #4]
 800b66e:	e7ac      	b.n	800b5ca <_malloc_r+0x36>
 800b670:	4634      	mov	r4, r6
 800b672:	6876      	ldr	r6, [r6, #4]
 800b674:	e7b4      	b.n	800b5e0 <_malloc_r+0x4c>
 800b676:	4613      	mov	r3, r2
 800b678:	e7cc      	b.n	800b614 <_malloc_r+0x80>
 800b67a:	230c      	movs	r3, #12
 800b67c:	603b      	str	r3, [r7, #0]
 800b67e:	4638      	mov	r0, r7
 800b680:	f000 f80e 	bl	800b6a0 <__malloc_unlock>
 800b684:	e797      	b.n	800b5b6 <_malloc_r+0x22>
 800b686:	6025      	str	r5, [r4, #0]
 800b688:	e7dc      	b.n	800b644 <_malloc_r+0xb0>
 800b68a:	605b      	str	r3, [r3, #4]
 800b68c:	deff      	udf	#255	; 0xff
 800b68e:	bf00      	nop
 800b690:	20002f14 	.word	0x20002f14

0800b694 <__malloc_lock>:
 800b694:	4801      	ldr	r0, [pc, #4]	; (800b69c <__malloc_lock+0x8>)
 800b696:	f000 b9a6 	b.w	800b9e6 <__retarget_lock_acquire_recursive>
 800b69a:	bf00      	nop
 800b69c:	20003058 	.word	0x20003058

0800b6a0 <__malloc_unlock>:
 800b6a0:	4801      	ldr	r0, [pc, #4]	; (800b6a8 <__malloc_unlock+0x8>)
 800b6a2:	f000 b9a1 	b.w	800b9e8 <__retarget_lock_release_recursive>
 800b6a6:	bf00      	nop
 800b6a8:	20003058 	.word	0x20003058

0800b6ac <srand>:
 800b6ac:	b538      	push	{r3, r4, r5, lr}
 800b6ae:	4b10      	ldr	r3, [pc, #64]	; (800b6f0 <srand+0x44>)
 800b6b0:	681d      	ldr	r5, [r3, #0]
 800b6b2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800b6b4:	4604      	mov	r4, r0
 800b6b6:	b9b3      	cbnz	r3, 800b6e6 <srand+0x3a>
 800b6b8:	2018      	movs	r0, #24
 800b6ba:	f7ff ff43 	bl	800b544 <malloc>
 800b6be:	4602      	mov	r2, r0
 800b6c0:	6328      	str	r0, [r5, #48]	; 0x30
 800b6c2:	b920      	cbnz	r0, 800b6ce <srand+0x22>
 800b6c4:	4b0b      	ldr	r3, [pc, #44]	; (800b6f4 <srand+0x48>)
 800b6c6:	480c      	ldr	r0, [pc, #48]	; (800b6f8 <srand+0x4c>)
 800b6c8:	2146      	movs	r1, #70	; 0x46
 800b6ca:	f000 f99d 	bl	800ba08 <__assert_func>
 800b6ce:	490b      	ldr	r1, [pc, #44]	; (800b6fc <srand+0x50>)
 800b6d0:	4b0b      	ldr	r3, [pc, #44]	; (800b700 <srand+0x54>)
 800b6d2:	e9c0 1300 	strd	r1, r3, [r0]
 800b6d6:	4b0b      	ldr	r3, [pc, #44]	; (800b704 <srand+0x58>)
 800b6d8:	6083      	str	r3, [r0, #8]
 800b6da:	230b      	movs	r3, #11
 800b6dc:	8183      	strh	r3, [r0, #12]
 800b6de:	2100      	movs	r1, #0
 800b6e0:	2001      	movs	r0, #1
 800b6e2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800b6e6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	611c      	str	r4, [r3, #16]
 800b6ec:	615a      	str	r2, [r3, #20]
 800b6ee:	bd38      	pop	{r3, r4, r5, pc}
 800b6f0:	2000023c 	.word	0x2000023c
 800b6f4:	0800c78c 	.word	0x0800c78c
 800b6f8:	0800c7a3 	.word	0x0800c7a3
 800b6fc:	abcd330e 	.word	0xabcd330e
 800b700:	e66d1234 	.word	0xe66d1234
 800b704:	0005deec 	.word	0x0005deec

0800b708 <rand>:
 800b708:	4b16      	ldr	r3, [pc, #88]	; (800b764 <rand+0x5c>)
 800b70a:	b510      	push	{r4, lr}
 800b70c:	681c      	ldr	r4, [r3, #0]
 800b70e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b710:	b9b3      	cbnz	r3, 800b740 <rand+0x38>
 800b712:	2018      	movs	r0, #24
 800b714:	f7ff ff16 	bl	800b544 <malloc>
 800b718:	4602      	mov	r2, r0
 800b71a:	6320      	str	r0, [r4, #48]	; 0x30
 800b71c:	b920      	cbnz	r0, 800b728 <rand+0x20>
 800b71e:	4b12      	ldr	r3, [pc, #72]	; (800b768 <rand+0x60>)
 800b720:	4812      	ldr	r0, [pc, #72]	; (800b76c <rand+0x64>)
 800b722:	2152      	movs	r1, #82	; 0x52
 800b724:	f000 f970 	bl	800ba08 <__assert_func>
 800b728:	4911      	ldr	r1, [pc, #68]	; (800b770 <rand+0x68>)
 800b72a:	4b12      	ldr	r3, [pc, #72]	; (800b774 <rand+0x6c>)
 800b72c:	e9c0 1300 	strd	r1, r3, [r0]
 800b730:	4b11      	ldr	r3, [pc, #68]	; (800b778 <rand+0x70>)
 800b732:	6083      	str	r3, [r0, #8]
 800b734:	230b      	movs	r3, #11
 800b736:	8183      	strh	r3, [r0, #12]
 800b738:	2100      	movs	r1, #0
 800b73a:	2001      	movs	r0, #1
 800b73c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800b740:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b742:	480e      	ldr	r0, [pc, #56]	; (800b77c <rand+0x74>)
 800b744:	690b      	ldr	r3, [r1, #16]
 800b746:	694c      	ldr	r4, [r1, #20]
 800b748:	4a0d      	ldr	r2, [pc, #52]	; (800b780 <rand+0x78>)
 800b74a:	4358      	muls	r0, r3
 800b74c:	fb02 0004 	mla	r0, r2, r4, r0
 800b750:	fba3 3202 	umull	r3, r2, r3, r2
 800b754:	3301      	adds	r3, #1
 800b756:	eb40 0002 	adc.w	r0, r0, r2
 800b75a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800b75e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800b762:	bd10      	pop	{r4, pc}
 800b764:	2000023c 	.word	0x2000023c
 800b768:	0800c78c 	.word	0x0800c78c
 800b76c:	0800c7a3 	.word	0x0800c7a3
 800b770:	abcd330e 	.word	0xabcd330e
 800b774:	e66d1234 	.word	0xe66d1234
 800b778:	0005deec 	.word	0x0005deec
 800b77c:	5851f42d 	.word	0x5851f42d
 800b780:	4c957f2d 	.word	0x4c957f2d

0800b784 <std>:
 800b784:	2300      	movs	r3, #0
 800b786:	b510      	push	{r4, lr}
 800b788:	4604      	mov	r4, r0
 800b78a:	e9c0 3300 	strd	r3, r3, [r0]
 800b78e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b792:	6083      	str	r3, [r0, #8]
 800b794:	8181      	strh	r1, [r0, #12]
 800b796:	6643      	str	r3, [r0, #100]	; 0x64
 800b798:	81c2      	strh	r2, [r0, #14]
 800b79a:	6183      	str	r3, [r0, #24]
 800b79c:	4619      	mov	r1, r3
 800b79e:	2208      	movs	r2, #8
 800b7a0:	305c      	adds	r0, #92	; 0x5c
 800b7a2:	f000 f8b1 	bl	800b908 <memset>
 800b7a6:	4b0d      	ldr	r3, [pc, #52]	; (800b7dc <std+0x58>)
 800b7a8:	6263      	str	r3, [r4, #36]	; 0x24
 800b7aa:	4b0d      	ldr	r3, [pc, #52]	; (800b7e0 <std+0x5c>)
 800b7ac:	62a3      	str	r3, [r4, #40]	; 0x28
 800b7ae:	4b0d      	ldr	r3, [pc, #52]	; (800b7e4 <std+0x60>)
 800b7b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b7b2:	4b0d      	ldr	r3, [pc, #52]	; (800b7e8 <std+0x64>)
 800b7b4:	6323      	str	r3, [r4, #48]	; 0x30
 800b7b6:	4b0d      	ldr	r3, [pc, #52]	; (800b7ec <std+0x68>)
 800b7b8:	6224      	str	r4, [r4, #32]
 800b7ba:	429c      	cmp	r4, r3
 800b7bc:	d006      	beq.n	800b7cc <std+0x48>
 800b7be:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800b7c2:	4294      	cmp	r4, r2
 800b7c4:	d002      	beq.n	800b7cc <std+0x48>
 800b7c6:	33d0      	adds	r3, #208	; 0xd0
 800b7c8:	429c      	cmp	r4, r3
 800b7ca:	d105      	bne.n	800b7d8 <std+0x54>
 800b7cc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b7d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b7d4:	f000 b906 	b.w	800b9e4 <__retarget_lock_init_recursive>
 800b7d8:	bd10      	pop	{r4, pc}
 800b7da:	bf00      	nop
 800b7dc:	0800bc39 	.word	0x0800bc39
 800b7e0:	0800bc5b 	.word	0x0800bc5b
 800b7e4:	0800bc93 	.word	0x0800bc93
 800b7e8:	0800bcb7 	.word	0x0800bcb7
 800b7ec:	20002f1c 	.word	0x20002f1c

0800b7f0 <stdio_exit_handler>:
 800b7f0:	4a02      	ldr	r2, [pc, #8]	; (800b7fc <stdio_exit_handler+0xc>)
 800b7f2:	4903      	ldr	r1, [pc, #12]	; (800b800 <stdio_exit_handler+0x10>)
 800b7f4:	4803      	ldr	r0, [pc, #12]	; (800b804 <stdio_exit_handler+0x14>)
 800b7f6:	f000 b869 	b.w	800b8cc <_fwalk_sglue>
 800b7fa:	bf00      	nop
 800b7fc:	200001e4 	.word	0x200001e4
 800b800:	0800bbe9 	.word	0x0800bbe9
 800b804:	200001f0 	.word	0x200001f0

0800b808 <cleanup_stdio>:
 800b808:	6841      	ldr	r1, [r0, #4]
 800b80a:	4b0c      	ldr	r3, [pc, #48]	; (800b83c <cleanup_stdio+0x34>)
 800b80c:	4299      	cmp	r1, r3
 800b80e:	b510      	push	{r4, lr}
 800b810:	4604      	mov	r4, r0
 800b812:	d001      	beq.n	800b818 <cleanup_stdio+0x10>
 800b814:	f000 f9e8 	bl	800bbe8 <_fflush_r>
 800b818:	68a1      	ldr	r1, [r4, #8]
 800b81a:	4b09      	ldr	r3, [pc, #36]	; (800b840 <cleanup_stdio+0x38>)
 800b81c:	4299      	cmp	r1, r3
 800b81e:	d002      	beq.n	800b826 <cleanup_stdio+0x1e>
 800b820:	4620      	mov	r0, r4
 800b822:	f000 f9e1 	bl	800bbe8 <_fflush_r>
 800b826:	68e1      	ldr	r1, [r4, #12]
 800b828:	4b06      	ldr	r3, [pc, #24]	; (800b844 <cleanup_stdio+0x3c>)
 800b82a:	4299      	cmp	r1, r3
 800b82c:	d004      	beq.n	800b838 <cleanup_stdio+0x30>
 800b82e:	4620      	mov	r0, r4
 800b830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b834:	f000 b9d8 	b.w	800bbe8 <_fflush_r>
 800b838:	bd10      	pop	{r4, pc}
 800b83a:	bf00      	nop
 800b83c:	20002f1c 	.word	0x20002f1c
 800b840:	20002f84 	.word	0x20002f84
 800b844:	20002fec 	.word	0x20002fec

0800b848 <global_stdio_init.part.0>:
 800b848:	b510      	push	{r4, lr}
 800b84a:	4b0b      	ldr	r3, [pc, #44]	; (800b878 <global_stdio_init.part.0+0x30>)
 800b84c:	4c0b      	ldr	r4, [pc, #44]	; (800b87c <global_stdio_init.part.0+0x34>)
 800b84e:	4a0c      	ldr	r2, [pc, #48]	; (800b880 <global_stdio_init.part.0+0x38>)
 800b850:	601a      	str	r2, [r3, #0]
 800b852:	4620      	mov	r0, r4
 800b854:	2200      	movs	r2, #0
 800b856:	2104      	movs	r1, #4
 800b858:	f7ff ff94 	bl	800b784 <std>
 800b85c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b860:	2201      	movs	r2, #1
 800b862:	2109      	movs	r1, #9
 800b864:	f7ff ff8e 	bl	800b784 <std>
 800b868:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b86c:	2202      	movs	r2, #2
 800b86e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b872:	2112      	movs	r1, #18
 800b874:	f7ff bf86 	b.w	800b784 <std>
 800b878:	20003054 	.word	0x20003054
 800b87c:	20002f1c 	.word	0x20002f1c
 800b880:	0800b7f1 	.word	0x0800b7f1

0800b884 <__sfp_lock_acquire>:
 800b884:	4801      	ldr	r0, [pc, #4]	; (800b88c <__sfp_lock_acquire+0x8>)
 800b886:	f000 b8ae 	b.w	800b9e6 <__retarget_lock_acquire_recursive>
 800b88a:	bf00      	nop
 800b88c:	20003059 	.word	0x20003059

0800b890 <__sfp_lock_release>:
 800b890:	4801      	ldr	r0, [pc, #4]	; (800b898 <__sfp_lock_release+0x8>)
 800b892:	f000 b8a9 	b.w	800b9e8 <__retarget_lock_release_recursive>
 800b896:	bf00      	nop
 800b898:	20003059 	.word	0x20003059

0800b89c <__sinit>:
 800b89c:	b510      	push	{r4, lr}
 800b89e:	4604      	mov	r4, r0
 800b8a0:	f7ff fff0 	bl	800b884 <__sfp_lock_acquire>
 800b8a4:	6a23      	ldr	r3, [r4, #32]
 800b8a6:	b11b      	cbz	r3, 800b8b0 <__sinit+0x14>
 800b8a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b8ac:	f7ff bff0 	b.w	800b890 <__sfp_lock_release>
 800b8b0:	4b04      	ldr	r3, [pc, #16]	; (800b8c4 <__sinit+0x28>)
 800b8b2:	6223      	str	r3, [r4, #32]
 800b8b4:	4b04      	ldr	r3, [pc, #16]	; (800b8c8 <__sinit+0x2c>)
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d1f5      	bne.n	800b8a8 <__sinit+0xc>
 800b8bc:	f7ff ffc4 	bl	800b848 <global_stdio_init.part.0>
 800b8c0:	e7f2      	b.n	800b8a8 <__sinit+0xc>
 800b8c2:	bf00      	nop
 800b8c4:	0800b809 	.word	0x0800b809
 800b8c8:	20003054 	.word	0x20003054

0800b8cc <_fwalk_sglue>:
 800b8cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8d0:	4607      	mov	r7, r0
 800b8d2:	4688      	mov	r8, r1
 800b8d4:	4614      	mov	r4, r2
 800b8d6:	2600      	movs	r6, #0
 800b8d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b8dc:	f1b9 0901 	subs.w	r9, r9, #1
 800b8e0:	d505      	bpl.n	800b8ee <_fwalk_sglue+0x22>
 800b8e2:	6824      	ldr	r4, [r4, #0]
 800b8e4:	2c00      	cmp	r4, #0
 800b8e6:	d1f7      	bne.n	800b8d8 <_fwalk_sglue+0xc>
 800b8e8:	4630      	mov	r0, r6
 800b8ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8ee:	89ab      	ldrh	r3, [r5, #12]
 800b8f0:	2b01      	cmp	r3, #1
 800b8f2:	d907      	bls.n	800b904 <_fwalk_sglue+0x38>
 800b8f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b8f8:	3301      	adds	r3, #1
 800b8fa:	d003      	beq.n	800b904 <_fwalk_sglue+0x38>
 800b8fc:	4629      	mov	r1, r5
 800b8fe:	4638      	mov	r0, r7
 800b900:	47c0      	blx	r8
 800b902:	4306      	orrs	r6, r0
 800b904:	3568      	adds	r5, #104	; 0x68
 800b906:	e7e9      	b.n	800b8dc <_fwalk_sglue+0x10>

0800b908 <memset>:
 800b908:	4402      	add	r2, r0
 800b90a:	4603      	mov	r3, r0
 800b90c:	4293      	cmp	r3, r2
 800b90e:	d100      	bne.n	800b912 <memset+0xa>
 800b910:	4770      	bx	lr
 800b912:	f803 1b01 	strb.w	r1, [r3], #1
 800b916:	e7f9      	b.n	800b90c <memset+0x4>

0800b918 <time>:
 800b918:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b91a:	4b0b      	ldr	r3, [pc, #44]	; (800b948 <time+0x30>)
 800b91c:	2200      	movs	r2, #0
 800b91e:	4669      	mov	r1, sp
 800b920:	4604      	mov	r4, r0
 800b922:	6818      	ldr	r0, [r3, #0]
 800b924:	f000 f812 	bl	800b94c <_gettimeofday_r>
 800b928:	2800      	cmp	r0, #0
 800b92a:	bfbe      	ittt	lt
 800b92c:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
 800b930:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b934:	e9cd 2300 	strdlt	r2, r3, [sp]
 800b938:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b93c:	b10c      	cbz	r4, 800b942 <time+0x2a>
 800b93e:	e9c4 0100 	strd	r0, r1, [r4]
 800b942:	b004      	add	sp, #16
 800b944:	bd10      	pop	{r4, pc}
 800b946:	bf00      	nop
 800b948:	2000023c 	.word	0x2000023c

0800b94c <_gettimeofday_r>:
 800b94c:	b538      	push	{r3, r4, r5, lr}
 800b94e:	4d07      	ldr	r5, [pc, #28]	; (800b96c <_gettimeofday_r+0x20>)
 800b950:	2300      	movs	r3, #0
 800b952:	4604      	mov	r4, r0
 800b954:	4608      	mov	r0, r1
 800b956:	4611      	mov	r1, r2
 800b958:	602b      	str	r3, [r5, #0]
 800b95a:	f000 fe41 	bl	800c5e0 <_gettimeofday>
 800b95e:	1c43      	adds	r3, r0, #1
 800b960:	d102      	bne.n	800b968 <_gettimeofday_r+0x1c>
 800b962:	682b      	ldr	r3, [r5, #0]
 800b964:	b103      	cbz	r3, 800b968 <_gettimeofday_r+0x1c>
 800b966:	6023      	str	r3, [r4, #0]
 800b968:	bd38      	pop	{r3, r4, r5, pc}
 800b96a:	bf00      	nop
 800b96c:	2000305c 	.word	0x2000305c

0800b970 <_sbrk_r>:
 800b970:	b538      	push	{r3, r4, r5, lr}
 800b972:	4d06      	ldr	r5, [pc, #24]	; (800b98c <_sbrk_r+0x1c>)
 800b974:	2300      	movs	r3, #0
 800b976:	4604      	mov	r4, r0
 800b978:	4608      	mov	r0, r1
 800b97a:	602b      	str	r3, [r5, #0]
 800b97c:	f7ff fcba 	bl	800b2f4 <_sbrk>
 800b980:	1c43      	adds	r3, r0, #1
 800b982:	d102      	bne.n	800b98a <_sbrk_r+0x1a>
 800b984:	682b      	ldr	r3, [r5, #0]
 800b986:	b103      	cbz	r3, 800b98a <_sbrk_r+0x1a>
 800b988:	6023      	str	r3, [r4, #0]
 800b98a:	bd38      	pop	{r3, r4, r5, pc}
 800b98c:	2000305c 	.word	0x2000305c

0800b990 <__errno>:
 800b990:	4b01      	ldr	r3, [pc, #4]	; (800b998 <__errno+0x8>)
 800b992:	6818      	ldr	r0, [r3, #0]
 800b994:	4770      	bx	lr
 800b996:	bf00      	nop
 800b998:	2000023c 	.word	0x2000023c

0800b99c <__libc_init_array>:
 800b99c:	b570      	push	{r4, r5, r6, lr}
 800b99e:	4d0d      	ldr	r5, [pc, #52]	; (800b9d4 <__libc_init_array+0x38>)
 800b9a0:	4c0d      	ldr	r4, [pc, #52]	; (800b9d8 <__libc_init_array+0x3c>)
 800b9a2:	1b64      	subs	r4, r4, r5
 800b9a4:	10a4      	asrs	r4, r4, #2
 800b9a6:	2600      	movs	r6, #0
 800b9a8:	42a6      	cmp	r6, r4
 800b9aa:	d109      	bne.n	800b9c0 <__libc_init_array+0x24>
 800b9ac:	4d0b      	ldr	r5, [pc, #44]	; (800b9dc <__libc_init_array+0x40>)
 800b9ae:	4c0c      	ldr	r4, [pc, #48]	; (800b9e0 <__libc_init_array+0x44>)
 800b9b0:	f000 fe1e 	bl	800c5f0 <_init>
 800b9b4:	1b64      	subs	r4, r4, r5
 800b9b6:	10a4      	asrs	r4, r4, #2
 800b9b8:	2600      	movs	r6, #0
 800b9ba:	42a6      	cmp	r6, r4
 800b9bc:	d105      	bne.n	800b9ca <__libc_init_array+0x2e>
 800b9be:	bd70      	pop	{r4, r5, r6, pc}
 800b9c0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9c4:	4798      	blx	r3
 800b9c6:	3601      	adds	r6, #1
 800b9c8:	e7ee      	b.n	800b9a8 <__libc_init_array+0xc>
 800b9ca:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9ce:	4798      	blx	r3
 800b9d0:	3601      	adds	r6, #1
 800b9d2:	e7f2      	b.n	800b9ba <__libc_init_array+0x1e>
 800b9d4:	0800c874 	.word	0x0800c874
 800b9d8:	0800c874 	.word	0x0800c874
 800b9dc:	0800c874 	.word	0x0800c874
 800b9e0:	0800c878 	.word	0x0800c878

0800b9e4 <__retarget_lock_init_recursive>:
 800b9e4:	4770      	bx	lr

0800b9e6 <__retarget_lock_acquire_recursive>:
 800b9e6:	4770      	bx	lr

0800b9e8 <__retarget_lock_release_recursive>:
 800b9e8:	4770      	bx	lr

0800b9ea <memcpy>:
 800b9ea:	440a      	add	r2, r1
 800b9ec:	4291      	cmp	r1, r2
 800b9ee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b9f2:	d100      	bne.n	800b9f6 <memcpy+0xc>
 800b9f4:	4770      	bx	lr
 800b9f6:	b510      	push	{r4, lr}
 800b9f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b9fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba00:	4291      	cmp	r1, r2
 800ba02:	d1f9      	bne.n	800b9f8 <memcpy+0xe>
 800ba04:	bd10      	pop	{r4, pc}
	...

0800ba08 <__assert_func>:
 800ba08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ba0a:	4614      	mov	r4, r2
 800ba0c:	461a      	mov	r2, r3
 800ba0e:	4b09      	ldr	r3, [pc, #36]	; (800ba34 <__assert_func+0x2c>)
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	4605      	mov	r5, r0
 800ba14:	68d8      	ldr	r0, [r3, #12]
 800ba16:	b14c      	cbz	r4, 800ba2c <__assert_func+0x24>
 800ba18:	4b07      	ldr	r3, [pc, #28]	; (800ba38 <__assert_func+0x30>)
 800ba1a:	9100      	str	r1, [sp, #0]
 800ba1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ba20:	4906      	ldr	r1, [pc, #24]	; (800ba3c <__assert_func+0x34>)
 800ba22:	462b      	mov	r3, r5
 800ba24:	f000 f94c 	bl	800bcc0 <fiprintf>
 800ba28:	f000 f9a2 	bl	800bd70 <abort>
 800ba2c:	4b04      	ldr	r3, [pc, #16]	; (800ba40 <__assert_func+0x38>)
 800ba2e:	461c      	mov	r4, r3
 800ba30:	e7f3      	b.n	800ba1a <__assert_func+0x12>
 800ba32:	bf00      	nop
 800ba34:	2000023c 	.word	0x2000023c
 800ba38:	0800c7fb 	.word	0x0800c7fb
 800ba3c:	0800c808 	.word	0x0800c808
 800ba40:	0800c836 	.word	0x0800c836

0800ba44 <_free_r>:
 800ba44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ba46:	2900      	cmp	r1, #0
 800ba48:	d044      	beq.n	800bad4 <_free_r+0x90>
 800ba4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba4e:	9001      	str	r0, [sp, #4]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	f1a1 0404 	sub.w	r4, r1, #4
 800ba56:	bfb8      	it	lt
 800ba58:	18e4      	addlt	r4, r4, r3
 800ba5a:	f7ff fe1b 	bl	800b694 <__malloc_lock>
 800ba5e:	4a1e      	ldr	r2, [pc, #120]	; (800bad8 <_free_r+0x94>)
 800ba60:	9801      	ldr	r0, [sp, #4]
 800ba62:	6813      	ldr	r3, [r2, #0]
 800ba64:	b933      	cbnz	r3, 800ba74 <_free_r+0x30>
 800ba66:	6063      	str	r3, [r4, #4]
 800ba68:	6014      	str	r4, [r2, #0]
 800ba6a:	b003      	add	sp, #12
 800ba6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ba70:	f7ff be16 	b.w	800b6a0 <__malloc_unlock>
 800ba74:	42a3      	cmp	r3, r4
 800ba76:	d908      	bls.n	800ba8a <_free_r+0x46>
 800ba78:	6825      	ldr	r5, [r4, #0]
 800ba7a:	1961      	adds	r1, r4, r5
 800ba7c:	428b      	cmp	r3, r1
 800ba7e:	bf01      	itttt	eq
 800ba80:	6819      	ldreq	r1, [r3, #0]
 800ba82:	685b      	ldreq	r3, [r3, #4]
 800ba84:	1949      	addeq	r1, r1, r5
 800ba86:	6021      	streq	r1, [r4, #0]
 800ba88:	e7ed      	b.n	800ba66 <_free_r+0x22>
 800ba8a:	461a      	mov	r2, r3
 800ba8c:	685b      	ldr	r3, [r3, #4]
 800ba8e:	b10b      	cbz	r3, 800ba94 <_free_r+0x50>
 800ba90:	42a3      	cmp	r3, r4
 800ba92:	d9fa      	bls.n	800ba8a <_free_r+0x46>
 800ba94:	6811      	ldr	r1, [r2, #0]
 800ba96:	1855      	adds	r5, r2, r1
 800ba98:	42a5      	cmp	r5, r4
 800ba9a:	d10b      	bne.n	800bab4 <_free_r+0x70>
 800ba9c:	6824      	ldr	r4, [r4, #0]
 800ba9e:	4421      	add	r1, r4
 800baa0:	1854      	adds	r4, r2, r1
 800baa2:	42a3      	cmp	r3, r4
 800baa4:	6011      	str	r1, [r2, #0]
 800baa6:	d1e0      	bne.n	800ba6a <_free_r+0x26>
 800baa8:	681c      	ldr	r4, [r3, #0]
 800baaa:	685b      	ldr	r3, [r3, #4]
 800baac:	6053      	str	r3, [r2, #4]
 800baae:	440c      	add	r4, r1
 800bab0:	6014      	str	r4, [r2, #0]
 800bab2:	e7da      	b.n	800ba6a <_free_r+0x26>
 800bab4:	d902      	bls.n	800babc <_free_r+0x78>
 800bab6:	230c      	movs	r3, #12
 800bab8:	6003      	str	r3, [r0, #0]
 800baba:	e7d6      	b.n	800ba6a <_free_r+0x26>
 800babc:	6825      	ldr	r5, [r4, #0]
 800babe:	1961      	adds	r1, r4, r5
 800bac0:	428b      	cmp	r3, r1
 800bac2:	bf04      	itt	eq
 800bac4:	6819      	ldreq	r1, [r3, #0]
 800bac6:	685b      	ldreq	r3, [r3, #4]
 800bac8:	6063      	str	r3, [r4, #4]
 800baca:	bf04      	itt	eq
 800bacc:	1949      	addeq	r1, r1, r5
 800bace:	6021      	streq	r1, [r4, #0]
 800bad0:	6054      	str	r4, [r2, #4]
 800bad2:	e7ca      	b.n	800ba6a <_free_r+0x26>
 800bad4:	b003      	add	sp, #12
 800bad6:	bd30      	pop	{r4, r5, pc}
 800bad8:	20002f14 	.word	0x20002f14

0800badc <__sflush_r>:
 800badc:	898a      	ldrh	r2, [r1, #12]
 800bade:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bae2:	4605      	mov	r5, r0
 800bae4:	0710      	lsls	r0, r2, #28
 800bae6:	460c      	mov	r4, r1
 800bae8:	d458      	bmi.n	800bb9c <__sflush_r+0xc0>
 800baea:	684b      	ldr	r3, [r1, #4]
 800baec:	2b00      	cmp	r3, #0
 800baee:	dc05      	bgt.n	800bafc <__sflush_r+0x20>
 800baf0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	dc02      	bgt.n	800bafc <__sflush_r+0x20>
 800baf6:	2000      	movs	r0, #0
 800baf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bafc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bafe:	2e00      	cmp	r6, #0
 800bb00:	d0f9      	beq.n	800baf6 <__sflush_r+0x1a>
 800bb02:	2300      	movs	r3, #0
 800bb04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bb08:	682f      	ldr	r7, [r5, #0]
 800bb0a:	6a21      	ldr	r1, [r4, #32]
 800bb0c:	602b      	str	r3, [r5, #0]
 800bb0e:	d032      	beq.n	800bb76 <__sflush_r+0x9a>
 800bb10:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bb12:	89a3      	ldrh	r3, [r4, #12]
 800bb14:	075a      	lsls	r2, r3, #29
 800bb16:	d505      	bpl.n	800bb24 <__sflush_r+0x48>
 800bb18:	6863      	ldr	r3, [r4, #4]
 800bb1a:	1ac0      	subs	r0, r0, r3
 800bb1c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bb1e:	b10b      	cbz	r3, 800bb24 <__sflush_r+0x48>
 800bb20:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bb22:	1ac0      	subs	r0, r0, r3
 800bb24:	2300      	movs	r3, #0
 800bb26:	4602      	mov	r2, r0
 800bb28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bb2a:	6a21      	ldr	r1, [r4, #32]
 800bb2c:	4628      	mov	r0, r5
 800bb2e:	47b0      	blx	r6
 800bb30:	1c43      	adds	r3, r0, #1
 800bb32:	89a3      	ldrh	r3, [r4, #12]
 800bb34:	d106      	bne.n	800bb44 <__sflush_r+0x68>
 800bb36:	6829      	ldr	r1, [r5, #0]
 800bb38:	291d      	cmp	r1, #29
 800bb3a:	d82b      	bhi.n	800bb94 <__sflush_r+0xb8>
 800bb3c:	4a29      	ldr	r2, [pc, #164]	; (800bbe4 <__sflush_r+0x108>)
 800bb3e:	410a      	asrs	r2, r1
 800bb40:	07d6      	lsls	r6, r2, #31
 800bb42:	d427      	bmi.n	800bb94 <__sflush_r+0xb8>
 800bb44:	2200      	movs	r2, #0
 800bb46:	6062      	str	r2, [r4, #4]
 800bb48:	04d9      	lsls	r1, r3, #19
 800bb4a:	6922      	ldr	r2, [r4, #16]
 800bb4c:	6022      	str	r2, [r4, #0]
 800bb4e:	d504      	bpl.n	800bb5a <__sflush_r+0x7e>
 800bb50:	1c42      	adds	r2, r0, #1
 800bb52:	d101      	bne.n	800bb58 <__sflush_r+0x7c>
 800bb54:	682b      	ldr	r3, [r5, #0]
 800bb56:	b903      	cbnz	r3, 800bb5a <__sflush_r+0x7e>
 800bb58:	6560      	str	r0, [r4, #84]	; 0x54
 800bb5a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bb5c:	602f      	str	r7, [r5, #0]
 800bb5e:	2900      	cmp	r1, #0
 800bb60:	d0c9      	beq.n	800baf6 <__sflush_r+0x1a>
 800bb62:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bb66:	4299      	cmp	r1, r3
 800bb68:	d002      	beq.n	800bb70 <__sflush_r+0x94>
 800bb6a:	4628      	mov	r0, r5
 800bb6c:	f7ff ff6a 	bl	800ba44 <_free_r>
 800bb70:	2000      	movs	r0, #0
 800bb72:	6360      	str	r0, [r4, #52]	; 0x34
 800bb74:	e7c0      	b.n	800baf8 <__sflush_r+0x1c>
 800bb76:	2301      	movs	r3, #1
 800bb78:	4628      	mov	r0, r5
 800bb7a:	47b0      	blx	r6
 800bb7c:	1c41      	adds	r1, r0, #1
 800bb7e:	d1c8      	bne.n	800bb12 <__sflush_r+0x36>
 800bb80:	682b      	ldr	r3, [r5, #0]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d0c5      	beq.n	800bb12 <__sflush_r+0x36>
 800bb86:	2b1d      	cmp	r3, #29
 800bb88:	d001      	beq.n	800bb8e <__sflush_r+0xb2>
 800bb8a:	2b16      	cmp	r3, #22
 800bb8c:	d101      	bne.n	800bb92 <__sflush_r+0xb6>
 800bb8e:	602f      	str	r7, [r5, #0]
 800bb90:	e7b1      	b.n	800baf6 <__sflush_r+0x1a>
 800bb92:	89a3      	ldrh	r3, [r4, #12]
 800bb94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb98:	81a3      	strh	r3, [r4, #12]
 800bb9a:	e7ad      	b.n	800baf8 <__sflush_r+0x1c>
 800bb9c:	690f      	ldr	r7, [r1, #16]
 800bb9e:	2f00      	cmp	r7, #0
 800bba0:	d0a9      	beq.n	800baf6 <__sflush_r+0x1a>
 800bba2:	0793      	lsls	r3, r2, #30
 800bba4:	680e      	ldr	r6, [r1, #0]
 800bba6:	bf08      	it	eq
 800bba8:	694b      	ldreq	r3, [r1, #20]
 800bbaa:	600f      	str	r7, [r1, #0]
 800bbac:	bf18      	it	ne
 800bbae:	2300      	movne	r3, #0
 800bbb0:	eba6 0807 	sub.w	r8, r6, r7
 800bbb4:	608b      	str	r3, [r1, #8]
 800bbb6:	f1b8 0f00 	cmp.w	r8, #0
 800bbba:	dd9c      	ble.n	800baf6 <__sflush_r+0x1a>
 800bbbc:	6a21      	ldr	r1, [r4, #32]
 800bbbe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bbc0:	4643      	mov	r3, r8
 800bbc2:	463a      	mov	r2, r7
 800bbc4:	4628      	mov	r0, r5
 800bbc6:	47b0      	blx	r6
 800bbc8:	2800      	cmp	r0, #0
 800bbca:	dc06      	bgt.n	800bbda <__sflush_r+0xfe>
 800bbcc:	89a3      	ldrh	r3, [r4, #12]
 800bbce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bbd2:	81a3      	strh	r3, [r4, #12]
 800bbd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bbd8:	e78e      	b.n	800baf8 <__sflush_r+0x1c>
 800bbda:	4407      	add	r7, r0
 800bbdc:	eba8 0800 	sub.w	r8, r8, r0
 800bbe0:	e7e9      	b.n	800bbb6 <__sflush_r+0xda>
 800bbe2:	bf00      	nop
 800bbe4:	dfbffffe 	.word	0xdfbffffe

0800bbe8 <_fflush_r>:
 800bbe8:	b538      	push	{r3, r4, r5, lr}
 800bbea:	690b      	ldr	r3, [r1, #16]
 800bbec:	4605      	mov	r5, r0
 800bbee:	460c      	mov	r4, r1
 800bbf0:	b913      	cbnz	r3, 800bbf8 <_fflush_r+0x10>
 800bbf2:	2500      	movs	r5, #0
 800bbf4:	4628      	mov	r0, r5
 800bbf6:	bd38      	pop	{r3, r4, r5, pc}
 800bbf8:	b118      	cbz	r0, 800bc02 <_fflush_r+0x1a>
 800bbfa:	6a03      	ldr	r3, [r0, #32]
 800bbfc:	b90b      	cbnz	r3, 800bc02 <_fflush_r+0x1a>
 800bbfe:	f7ff fe4d 	bl	800b89c <__sinit>
 800bc02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d0f3      	beq.n	800bbf2 <_fflush_r+0xa>
 800bc0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bc0c:	07d0      	lsls	r0, r2, #31
 800bc0e:	d404      	bmi.n	800bc1a <_fflush_r+0x32>
 800bc10:	0599      	lsls	r1, r3, #22
 800bc12:	d402      	bmi.n	800bc1a <_fflush_r+0x32>
 800bc14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bc16:	f7ff fee6 	bl	800b9e6 <__retarget_lock_acquire_recursive>
 800bc1a:	4628      	mov	r0, r5
 800bc1c:	4621      	mov	r1, r4
 800bc1e:	f7ff ff5d 	bl	800badc <__sflush_r>
 800bc22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bc24:	07da      	lsls	r2, r3, #31
 800bc26:	4605      	mov	r5, r0
 800bc28:	d4e4      	bmi.n	800bbf4 <_fflush_r+0xc>
 800bc2a:	89a3      	ldrh	r3, [r4, #12]
 800bc2c:	059b      	lsls	r3, r3, #22
 800bc2e:	d4e1      	bmi.n	800bbf4 <_fflush_r+0xc>
 800bc30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bc32:	f7ff fed9 	bl	800b9e8 <__retarget_lock_release_recursive>
 800bc36:	e7dd      	b.n	800bbf4 <_fflush_r+0xc>

0800bc38 <__sread>:
 800bc38:	b510      	push	{r4, lr}
 800bc3a:	460c      	mov	r4, r1
 800bc3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc40:	f000 f872 	bl	800bd28 <_read_r>
 800bc44:	2800      	cmp	r0, #0
 800bc46:	bfab      	itete	ge
 800bc48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bc4a:	89a3      	ldrhlt	r3, [r4, #12]
 800bc4c:	181b      	addge	r3, r3, r0
 800bc4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bc52:	bfac      	ite	ge
 800bc54:	6563      	strge	r3, [r4, #84]	; 0x54
 800bc56:	81a3      	strhlt	r3, [r4, #12]
 800bc58:	bd10      	pop	{r4, pc}

0800bc5a <__swrite>:
 800bc5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc5e:	461f      	mov	r7, r3
 800bc60:	898b      	ldrh	r3, [r1, #12]
 800bc62:	05db      	lsls	r3, r3, #23
 800bc64:	4605      	mov	r5, r0
 800bc66:	460c      	mov	r4, r1
 800bc68:	4616      	mov	r6, r2
 800bc6a:	d505      	bpl.n	800bc78 <__swrite+0x1e>
 800bc6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc70:	2302      	movs	r3, #2
 800bc72:	2200      	movs	r2, #0
 800bc74:	f000 f846 	bl	800bd04 <_lseek_r>
 800bc78:	89a3      	ldrh	r3, [r4, #12]
 800bc7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bc82:	81a3      	strh	r3, [r4, #12]
 800bc84:	4632      	mov	r2, r6
 800bc86:	463b      	mov	r3, r7
 800bc88:	4628      	mov	r0, r5
 800bc8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc8e:	f000 b85d 	b.w	800bd4c <_write_r>

0800bc92 <__sseek>:
 800bc92:	b510      	push	{r4, lr}
 800bc94:	460c      	mov	r4, r1
 800bc96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc9a:	f000 f833 	bl	800bd04 <_lseek_r>
 800bc9e:	1c43      	adds	r3, r0, #1
 800bca0:	89a3      	ldrh	r3, [r4, #12]
 800bca2:	bf15      	itete	ne
 800bca4:	6560      	strne	r0, [r4, #84]	; 0x54
 800bca6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bcaa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bcae:	81a3      	strheq	r3, [r4, #12]
 800bcb0:	bf18      	it	ne
 800bcb2:	81a3      	strhne	r3, [r4, #12]
 800bcb4:	bd10      	pop	{r4, pc}

0800bcb6 <__sclose>:
 800bcb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcba:	f000 b813 	b.w	800bce4 <_close_r>
	...

0800bcc0 <fiprintf>:
 800bcc0:	b40e      	push	{r1, r2, r3}
 800bcc2:	b503      	push	{r0, r1, lr}
 800bcc4:	4601      	mov	r1, r0
 800bcc6:	ab03      	add	r3, sp, #12
 800bcc8:	4805      	ldr	r0, [pc, #20]	; (800bce0 <fiprintf+0x20>)
 800bcca:	f853 2b04 	ldr.w	r2, [r3], #4
 800bcce:	6800      	ldr	r0, [r0, #0]
 800bcd0:	9301      	str	r3, [sp, #4]
 800bcd2:	f000 f87d 	bl	800bdd0 <_vfiprintf_r>
 800bcd6:	b002      	add	sp, #8
 800bcd8:	f85d eb04 	ldr.w	lr, [sp], #4
 800bcdc:	b003      	add	sp, #12
 800bcde:	4770      	bx	lr
 800bce0:	2000023c 	.word	0x2000023c

0800bce4 <_close_r>:
 800bce4:	b538      	push	{r3, r4, r5, lr}
 800bce6:	4d06      	ldr	r5, [pc, #24]	; (800bd00 <_close_r+0x1c>)
 800bce8:	2300      	movs	r3, #0
 800bcea:	4604      	mov	r4, r0
 800bcec:	4608      	mov	r0, r1
 800bcee:	602b      	str	r3, [r5, #0]
 800bcf0:	f7ff facb 	bl	800b28a <_close>
 800bcf4:	1c43      	adds	r3, r0, #1
 800bcf6:	d102      	bne.n	800bcfe <_close_r+0x1a>
 800bcf8:	682b      	ldr	r3, [r5, #0]
 800bcfa:	b103      	cbz	r3, 800bcfe <_close_r+0x1a>
 800bcfc:	6023      	str	r3, [r4, #0]
 800bcfe:	bd38      	pop	{r3, r4, r5, pc}
 800bd00:	2000305c 	.word	0x2000305c

0800bd04 <_lseek_r>:
 800bd04:	b538      	push	{r3, r4, r5, lr}
 800bd06:	4d07      	ldr	r5, [pc, #28]	; (800bd24 <_lseek_r+0x20>)
 800bd08:	4604      	mov	r4, r0
 800bd0a:	4608      	mov	r0, r1
 800bd0c:	4611      	mov	r1, r2
 800bd0e:	2200      	movs	r2, #0
 800bd10:	602a      	str	r2, [r5, #0]
 800bd12:	461a      	mov	r2, r3
 800bd14:	f7ff fae0 	bl	800b2d8 <_lseek>
 800bd18:	1c43      	adds	r3, r0, #1
 800bd1a:	d102      	bne.n	800bd22 <_lseek_r+0x1e>
 800bd1c:	682b      	ldr	r3, [r5, #0]
 800bd1e:	b103      	cbz	r3, 800bd22 <_lseek_r+0x1e>
 800bd20:	6023      	str	r3, [r4, #0]
 800bd22:	bd38      	pop	{r3, r4, r5, pc}
 800bd24:	2000305c 	.word	0x2000305c

0800bd28 <_read_r>:
 800bd28:	b538      	push	{r3, r4, r5, lr}
 800bd2a:	4d07      	ldr	r5, [pc, #28]	; (800bd48 <_read_r+0x20>)
 800bd2c:	4604      	mov	r4, r0
 800bd2e:	4608      	mov	r0, r1
 800bd30:	4611      	mov	r1, r2
 800bd32:	2200      	movs	r2, #0
 800bd34:	602a      	str	r2, [r5, #0]
 800bd36:	461a      	mov	r2, r3
 800bd38:	f7ff fa6e 	bl	800b218 <_read>
 800bd3c:	1c43      	adds	r3, r0, #1
 800bd3e:	d102      	bne.n	800bd46 <_read_r+0x1e>
 800bd40:	682b      	ldr	r3, [r5, #0]
 800bd42:	b103      	cbz	r3, 800bd46 <_read_r+0x1e>
 800bd44:	6023      	str	r3, [r4, #0]
 800bd46:	bd38      	pop	{r3, r4, r5, pc}
 800bd48:	2000305c 	.word	0x2000305c

0800bd4c <_write_r>:
 800bd4c:	b538      	push	{r3, r4, r5, lr}
 800bd4e:	4d07      	ldr	r5, [pc, #28]	; (800bd6c <_write_r+0x20>)
 800bd50:	4604      	mov	r4, r0
 800bd52:	4608      	mov	r0, r1
 800bd54:	4611      	mov	r1, r2
 800bd56:	2200      	movs	r2, #0
 800bd58:	602a      	str	r2, [r5, #0]
 800bd5a:	461a      	mov	r2, r3
 800bd5c:	f7ff fa79 	bl	800b252 <_write>
 800bd60:	1c43      	adds	r3, r0, #1
 800bd62:	d102      	bne.n	800bd6a <_write_r+0x1e>
 800bd64:	682b      	ldr	r3, [r5, #0]
 800bd66:	b103      	cbz	r3, 800bd6a <_write_r+0x1e>
 800bd68:	6023      	str	r3, [r4, #0]
 800bd6a:	bd38      	pop	{r3, r4, r5, pc}
 800bd6c:	2000305c 	.word	0x2000305c

0800bd70 <abort>:
 800bd70:	b508      	push	{r3, lr}
 800bd72:	2006      	movs	r0, #6
 800bd74:	f000 fc18 	bl	800c5a8 <raise>
 800bd78:	2001      	movs	r0, #1
 800bd7a:	f7ff fa43 	bl	800b204 <_exit>

0800bd7e <__sfputc_r>:
 800bd7e:	6893      	ldr	r3, [r2, #8]
 800bd80:	3b01      	subs	r3, #1
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	b410      	push	{r4}
 800bd86:	6093      	str	r3, [r2, #8]
 800bd88:	da08      	bge.n	800bd9c <__sfputc_r+0x1e>
 800bd8a:	6994      	ldr	r4, [r2, #24]
 800bd8c:	42a3      	cmp	r3, r4
 800bd8e:	db01      	blt.n	800bd94 <__sfputc_r+0x16>
 800bd90:	290a      	cmp	r1, #10
 800bd92:	d103      	bne.n	800bd9c <__sfputc_r+0x1e>
 800bd94:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd98:	f000 bac4 	b.w	800c324 <__swbuf_r>
 800bd9c:	6813      	ldr	r3, [r2, #0]
 800bd9e:	1c58      	adds	r0, r3, #1
 800bda0:	6010      	str	r0, [r2, #0]
 800bda2:	7019      	strb	r1, [r3, #0]
 800bda4:	4608      	mov	r0, r1
 800bda6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bdaa:	4770      	bx	lr

0800bdac <__sfputs_r>:
 800bdac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdae:	4606      	mov	r6, r0
 800bdb0:	460f      	mov	r7, r1
 800bdb2:	4614      	mov	r4, r2
 800bdb4:	18d5      	adds	r5, r2, r3
 800bdb6:	42ac      	cmp	r4, r5
 800bdb8:	d101      	bne.n	800bdbe <__sfputs_r+0x12>
 800bdba:	2000      	movs	r0, #0
 800bdbc:	e007      	b.n	800bdce <__sfputs_r+0x22>
 800bdbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdc2:	463a      	mov	r2, r7
 800bdc4:	4630      	mov	r0, r6
 800bdc6:	f7ff ffda 	bl	800bd7e <__sfputc_r>
 800bdca:	1c43      	adds	r3, r0, #1
 800bdcc:	d1f3      	bne.n	800bdb6 <__sfputs_r+0xa>
 800bdce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bdd0 <_vfiprintf_r>:
 800bdd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdd4:	460d      	mov	r5, r1
 800bdd6:	b09d      	sub	sp, #116	; 0x74
 800bdd8:	4614      	mov	r4, r2
 800bdda:	4698      	mov	r8, r3
 800bddc:	4606      	mov	r6, r0
 800bdde:	b118      	cbz	r0, 800bde8 <_vfiprintf_r+0x18>
 800bde0:	6a03      	ldr	r3, [r0, #32]
 800bde2:	b90b      	cbnz	r3, 800bde8 <_vfiprintf_r+0x18>
 800bde4:	f7ff fd5a 	bl	800b89c <__sinit>
 800bde8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bdea:	07d9      	lsls	r1, r3, #31
 800bdec:	d405      	bmi.n	800bdfa <_vfiprintf_r+0x2a>
 800bdee:	89ab      	ldrh	r3, [r5, #12]
 800bdf0:	059a      	lsls	r2, r3, #22
 800bdf2:	d402      	bmi.n	800bdfa <_vfiprintf_r+0x2a>
 800bdf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bdf6:	f7ff fdf6 	bl	800b9e6 <__retarget_lock_acquire_recursive>
 800bdfa:	89ab      	ldrh	r3, [r5, #12]
 800bdfc:	071b      	lsls	r3, r3, #28
 800bdfe:	d501      	bpl.n	800be04 <_vfiprintf_r+0x34>
 800be00:	692b      	ldr	r3, [r5, #16]
 800be02:	b99b      	cbnz	r3, 800be2c <_vfiprintf_r+0x5c>
 800be04:	4629      	mov	r1, r5
 800be06:	4630      	mov	r0, r6
 800be08:	f000 faca 	bl	800c3a0 <__swsetup_r>
 800be0c:	b170      	cbz	r0, 800be2c <_vfiprintf_r+0x5c>
 800be0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be10:	07dc      	lsls	r4, r3, #31
 800be12:	d504      	bpl.n	800be1e <_vfiprintf_r+0x4e>
 800be14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800be18:	b01d      	add	sp, #116	; 0x74
 800be1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be1e:	89ab      	ldrh	r3, [r5, #12]
 800be20:	0598      	lsls	r0, r3, #22
 800be22:	d4f7      	bmi.n	800be14 <_vfiprintf_r+0x44>
 800be24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be26:	f7ff fddf 	bl	800b9e8 <__retarget_lock_release_recursive>
 800be2a:	e7f3      	b.n	800be14 <_vfiprintf_r+0x44>
 800be2c:	2300      	movs	r3, #0
 800be2e:	9309      	str	r3, [sp, #36]	; 0x24
 800be30:	2320      	movs	r3, #32
 800be32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800be36:	f8cd 800c 	str.w	r8, [sp, #12]
 800be3a:	2330      	movs	r3, #48	; 0x30
 800be3c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800bff0 <_vfiprintf_r+0x220>
 800be40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800be44:	f04f 0901 	mov.w	r9, #1
 800be48:	4623      	mov	r3, r4
 800be4a:	469a      	mov	sl, r3
 800be4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be50:	b10a      	cbz	r2, 800be56 <_vfiprintf_r+0x86>
 800be52:	2a25      	cmp	r2, #37	; 0x25
 800be54:	d1f9      	bne.n	800be4a <_vfiprintf_r+0x7a>
 800be56:	ebba 0b04 	subs.w	fp, sl, r4
 800be5a:	d00b      	beq.n	800be74 <_vfiprintf_r+0xa4>
 800be5c:	465b      	mov	r3, fp
 800be5e:	4622      	mov	r2, r4
 800be60:	4629      	mov	r1, r5
 800be62:	4630      	mov	r0, r6
 800be64:	f7ff ffa2 	bl	800bdac <__sfputs_r>
 800be68:	3001      	adds	r0, #1
 800be6a:	f000 80a9 	beq.w	800bfc0 <_vfiprintf_r+0x1f0>
 800be6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be70:	445a      	add	r2, fp
 800be72:	9209      	str	r2, [sp, #36]	; 0x24
 800be74:	f89a 3000 	ldrb.w	r3, [sl]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	f000 80a1 	beq.w	800bfc0 <_vfiprintf_r+0x1f0>
 800be7e:	2300      	movs	r3, #0
 800be80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800be84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be88:	f10a 0a01 	add.w	sl, sl, #1
 800be8c:	9304      	str	r3, [sp, #16]
 800be8e:	9307      	str	r3, [sp, #28]
 800be90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800be94:	931a      	str	r3, [sp, #104]	; 0x68
 800be96:	4654      	mov	r4, sl
 800be98:	2205      	movs	r2, #5
 800be9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be9e:	4854      	ldr	r0, [pc, #336]	; (800bff0 <_vfiprintf_r+0x220>)
 800bea0:	f7f4 f996 	bl	80001d0 <memchr>
 800bea4:	9a04      	ldr	r2, [sp, #16]
 800bea6:	b9d8      	cbnz	r0, 800bee0 <_vfiprintf_r+0x110>
 800bea8:	06d1      	lsls	r1, r2, #27
 800beaa:	bf44      	itt	mi
 800beac:	2320      	movmi	r3, #32
 800beae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800beb2:	0713      	lsls	r3, r2, #28
 800beb4:	bf44      	itt	mi
 800beb6:	232b      	movmi	r3, #43	; 0x2b
 800beb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bebc:	f89a 3000 	ldrb.w	r3, [sl]
 800bec0:	2b2a      	cmp	r3, #42	; 0x2a
 800bec2:	d015      	beq.n	800bef0 <_vfiprintf_r+0x120>
 800bec4:	9a07      	ldr	r2, [sp, #28]
 800bec6:	4654      	mov	r4, sl
 800bec8:	2000      	movs	r0, #0
 800beca:	f04f 0c0a 	mov.w	ip, #10
 800bece:	4621      	mov	r1, r4
 800bed0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bed4:	3b30      	subs	r3, #48	; 0x30
 800bed6:	2b09      	cmp	r3, #9
 800bed8:	d94d      	bls.n	800bf76 <_vfiprintf_r+0x1a6>
 800beda:	b1b0      	cbz	r0, 800bf0a <_vfiprintf_r+0x13a>
 800bedc:	9207      	str	r2, [sp, #28]
 800bede:	e014      	b.n	800bf0a <_vfiprintf_r+0x13a>
 800bee0:	eba0 0308 	sub.w	r3, r0, r8
 800bee4:	fa09 f303 	lsl.w	r3, r9, r3
 800bee8:	4313      	orrs	r3, r2
 800beea:	9304      	str	r3, [sp, #16]
 800beec:	46a2      	mov	sl, r4
 800beee:	e7d2      	b.n	800be96 <_vfiprintf_r+0xc6>
 800bef0:	9b03      	ldr	r3, [sp, #12]
 800bef2:	1d19      	adds	r1, r3, #4
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	9103      	str	r1, [sp, #12]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	bfbb      	ittet	lt
 800befc:	425b      	neglt	r3, r3
 800befe:	f042 0202 	orrlt.w	r2, r2, #2
 800bf02:	9307      	strge	r3, [sp, #28]
 800bf04:	9307      	strlt	r3, [sp, #28]
 800bf06:	bfb8      	it	lt
 800bf08:	9204      	strlt	r2, [sp, #16]
 800bf0a:	7823      	ldrb	r3, [r4, #0]
 800bf0c:	2b2e      	cmp	r3, #46	; 0x2e
 800bf0e:	d10c      	bne.n	800bf2a <_vfiprintf_r+0x15a>
 800bf10:	7863      	ldrb	r3, [r4, #1]
 800bf12:	2b2a      	cmp	r3, #42	; 0x2a
 800bf14:	d134      	bne.n	800bf80 <_vfiprintf_r+0x1b0>
 800bf16:	9b03      	ldr	r3, [sp, #12]
 800bf18:	1d1a      	adds	r2, r3, #4
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	9203      	str	r2, [sp, #12]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	bfb8      	it	lt
 800bf22:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800bf26:	3402      	adds	r4, #2
 800bf28:	9305      	str	r3, [sp, #20]
 800bf2a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c000 <_vfiprintf_r+0x230>
 800bf2e:	7821      	ldrb	r1, [r4, #0]
 800bf30:	2203      	movs	r2, #3
 800bf32:	4650      	mov	r0, sl
 800bf34:	f7f4 f94c 	bl	80001d0 <memchr>
 800bf38:	b138      	cbz	r0, 800bf4a <_vfiprintf_r+0x17a>
 800bf3a:	9b04      	ldr	r3, [sp, #16]
 800bf3c:	eba0 000a 	sub.w	r0, r0, sl
 800bf40:	2240      	movs	r2, #64	; 0x40
 800bf42:	4082      	lsls	r2, r0
 800bf44:	4313      	orrs	r3, r2
 800bf46:	3401      	adds	r4, #1
 800bf48:	9304      	str	r3, [sp, #16]
 800bf4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf4e:	4829      	ldr	r0, [pc, #164]	; (800bff4 <_vfiprintf_r+0x224>)
 800bf50:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bf54:	2206      	movs	r2, #6
 800bf56:	f7f4 f93b 	bl	80001d0 <memchr>
 800bf5a:	2800      	cmp	r0, #0
 800bf5c:	d03f      	beq.n	800bfde <_vfiprintf_r+0x20e>
 800bf5e:	4b26      	ldr	r3, [pc, #152]	; (800bff8 <_vfiprintf_r+0x228>)
 800bf60:	bb1b      	cbnz	r3, 800bfaa <_vfiprintf_r+0x1da>
 800bf62:	9b03      	ldr	r3, [sp, #12]
 800bf64:	3307      	adds	r3, #7
 800bf66:	f023 0307 	bic.w	r3, r3, #7
 800bf6a:	3308      	adds	r3, #8
 800bf6c:	9303      	str	r3, [sp, #12]
 800bf6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf70:	443b      	add	r3, r7
 800bf72:	9309      	str	r3, [sp, #36]	; 0x24
 800bf74:	e768      	b.n	800be48 <_vfiprintf_r+0x78>
 800bf76:	fb0c 3202 	mla	r2, ip, r2, r3
 800bf7a:	460c      	mov	r4, r1
 800bf7c:	2001      	movs	r0, #1
 800bf7e:	e7a6      	b.n	800bece <_vfiprintf_r+0xfe>
 800bf80:	2300      	movs	r3, #0
 800bf82:	3401      	adds	r4, #1
 800bf84:	9305      	str	r3, [sp, #20]
 800bf86:	4619      	mov	r1, r3
 800bf88:	f04f 0c0a 	mov.w	ip, #10
 800bf8c:	4620      	mov	r0, r4
 800bf8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf92:	3a30      	subs	r2, #48	; 0x30
 800bf94:	2a09      	cmp	r2, #9
 800bf96:	d903      	bls.n	800bfa0 <_vfiprintf_r+0x1d0>
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d0c6      	beq.n	800bf2a <_vfiprintf_r+0x15a>
 800bf9c:	9105      	str	r1, [sp, #20]
 800bf9e:	e7c4      	b.n	800bf2a <_vfiprintf_r+0x15a>
 800bfa0:	fb0c 2101 	mla	r1, ip, r1, r2
 800bfa4:	4604      	mov	r4, r0
 800bfa6:	2301      	movs	r3, #1
 800bfa8:	e7f0      	b.n	800bf8c <_vfiprintf_r+0x1bc>
 800bfaa:	ab03      	add	r3, sp, #12
 800bfac:	9300      	str	r3, [sp, #0]
 800bfae:	462a      	mov	r2, r5
 800bfb0:	4b12      	ldr	r3, [pc, #72]	; (800bffc <_vfiprintf_r+0x22c>)
 800bfb2:	a904      	add	r1, sp, #16
 800bfb4:	4630      	mov	r0, r6
 800bfb6:	f3af 8000 	nop.w
 800bfba:	4607      	mov	r7, r0
 800bfbc:	1c78      	adds	r0, r7, #1
 800bfbe:	d1d6      	bne.n	800bf6e <_vfiprintf_r+0x19e>
 800bfc0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bfc2:	07d9      	lsls	r1, r3, #31
 800bfc4:	d405      	bmi.n	800bfd2 <_vfiprintf_r+0x202>
 800bfc6:	89ab      	ldrh	r3, [r5, #12]
 800bfc8:	059a      	lsls	r2, r3, #22
 800bfca:	d402      	bmi.n	800bfd2 <_vfiprintf_r+0x202>
 800bfcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bfce:	f7ff fd0b 	bl	800b9e8 <__retarget_lock_release_recursive>
 800bfd2:	89ab      	ldrh	r3, [r5, #12]
 800bfd4:	065b      	lsls	r3, r3, #25
 800bfd6:	f53f af1d 	bmi.w	800be14 <_vfiprintf_r+0x44>
 800bfda:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bfdc:	e71c      	b.n	800be18 <_vfiprintf_r+0x48>
 800bfde:	ab03      	add	r3, sp, #12
 800bfe0:	9300      	str	r3, [sp, #0]
 800bfe2:	462a      	mov	r2, r5
 800bfe4:	4b05      	ldr	r3, [pc, #20]	; (800bffc <_vfiprintf_r+0x22c>)
 800bfe6:	a904      	add	r1, sp, #16
 800bfe8:	4630      	mov	r0, r6
 800bfea:	f000 f879 	bl	800c0e0 <_printf_i>
 800bfee:	e7e4      	b.n	800bfba <_vfiprintf_r+0x1ea>
 800bff0:	0800c837 	.word	0x0800c837
 800bff4:	0800c841 	.word	0x0800c841
 800bff8:	00000000 	.word	0x00000000
 800bffc:	0800bdad 	.word	0x0800bdad
 800c000:	0800c83d 	.word	0x0800c83d

0800c004 <_printf_common>:
 800c004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c008:	4616      	mov	r6, r2
 800c00a:	4699      	mov	r9, r3
 800c00c:	688a      	ldr	r2, [r1, #8]
 800c00e:	690b      	ldr	r3, [r1, #16]
 800c010:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c014:	4293      	cmp	r3, r2
 800c016:	bfb8      	it	lt
 800c018:	4613      	movlt	r3, r2
 800c01a:	6033      	str	r3, [r6, #0]
 800c01c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c020:	4607      	mov	r7, r0
 800c022:	460c      	mov	r4, r1
 800c024:	b10a      	cbz	r2, 800c02a <_printf_common+0x26>
 800c026:	3301      	adds	r3, #1
 800c028:	6033      	str	r3, [r6, #0]
 800c02a:	6823      	ldr	r3, [r4, #0]
 800c02c:	0699      	lsls	r1, r3, #26
 800c02e:	bf42      	ittt	mi
 800c030:	6833      	ldrmi	r3, [r6, #0]
 800c032:	3302      	addmi	r3, #2
 800c034:	6033      	strmi	r3, [r6, #0]
 800c036:	6825      	ldr	r5, [r4, #0]
 800c038:	f015 0506 	ands.w	r5, r5, #6
 800c03c:	d106      	bne.n	800c04c <_printf_common+0x48>
 800c03e:	f104 0a19 	add.w	sl, r4, #25
 800c042:	68e3      	ldr	r3, [r4, #12]
 800c044:	6832      	ldr	r2, [r6, #0]
 800c046:	1a9b      	subs	r3, r3, r2
 800c048:	42ab      	cmp	r3, r5
 800c04a:	dc26      	bgt.n	800c09a <_printf_common+0x96>
 800c04c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c050:	1e13      	subs	r3, r2, #0
 800c052:	6822      	ldr	r2, [r4, #0]
 800c054:	bf18      	it	ne
 800c056:	2301      	movne	r3, #1
 800c058:	0692      	lsls	r2, r2, #26
 800c05a:	d42b      	bmi.n	800c0b4 <_printf_common+0xb0>
 800c05c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c060:	4649      	mov	r1, r9
 800c062:	4638      	mov	r0, r7
 800c064:	47c0      	blx	r8
 800c066:	3001      	adds	r0, #1
 800c068:	d01e      	beq.n	800c0a8 <_printf_common+0xa4>
 800c06a:	6823      	ldr	r3, [r4, #0]
 800c06c:	6922      	ldr	r2, [r4, #16]
 800c06e:	f003 0306 	and.w	r3, r3, #6
 800c072:	2b04      	cmp	r3, #4
 800c074:	bf02      	ittt	eq
 800c076:	68e5      	ldreq	r5, [r4, #12]
 800c078:	6833      	ldreq	r3, [r6, #0]
 800c07a:	1aed      	subeq	r5, r5, r3
 800c07c:	68a3      	ldr	r3, [r4, #8]
 800c07e:	bf0c      	ite	eq
 800c080:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c084:	2500      	movne	r5, #0
 800c086:	4293      	cmp	r3, r2
 800c088:	bfc4      	itt	gt
 800c08a:	1a9b      	subgt	r3, r3, r2
 800c08c:	18ed      	addgt	r5, r5, r3
 800c08e:	2600      	movs	r6, #0
 800c090:	341a      	adds	r4, #26
 800c092:	42b5      	cmp	r5, r6
 800c094:	d11a      	bne.n	800c0cc <_printf_common+0xc8>
 800c096:	2000      	movs	r0, #0
 800c098:	e008      	b.n	800c0ac <_printf_common+0xa8>
 800c09a:	2301      	movs	r3, #1
 800c09c:	4652      	mov	r2, sl
 800c09e:	4649      	mov	r1, r9
 800c0a0:	4638      	mov	r0, r7
 800c0a2:	47c0      	blx	r8
 800c0a4:	3001      	adds	r0, #1
 800c0a6:	d103      	bne.n	800c0b0 <_printf_common+0xac>
 800c0a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c0ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0b0:	3501      	adds	r5, #1
 800c0b2:	e7c6      	b.n	800c042 <_printf_common+0x3e>
 800c0b4:	18e1      	adds	r1, r4, r3
 800c0b6:	1c5a      	adds	r2, r3, #1
 800c0b8:	2030      	movs	r0, #48	; 0x30
 800c0ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c0be:	4422      	add	r2, r4
 800c0c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c0c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c0c8:	3302      	adds	r3, #2
 800c0ca:	e7c7      	b.n	800c05c <_printf_common+0x58>
 800c0cc:	2301      	movs	r3, #1
 800c0ce:	4622      	mov	r2, r4
 800c0d0:	4649      	mov	r1, r9
 800c0d2:	4638      	mov	r0, r7
 800c0d4:	47c0      	blx	r8
 800c0d6:	3001      	adds	r0, #1
 800c0d8:	d0e6      	beq.n	800c0a8 <_printf_common+0xa4>
 800c0da:	3601      	adds	r6, #1
 800c0dc:	e7d9      	b.n	800c092 <_printf_common+0x8e>
	...

0800c0e0 <_printf_i>:
 800c0e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c0e4:	7e0f      	ldrb	r7, [r1, #24]
 800c0e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c0e8:	2f78      	cmp	r7, #120	; 0x78
 800c0ea:	4691      	mov	r9, r2
 800c0ec:	4680      	mov	r8, r0
 800c0ee:	460c      	mov	r4, r1
 800c0f0:	469a      	mov	sl, r3
 800c0f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c0f6:	d807      	bhi.n	800c108 <_printf_i+0x28>
 800c0f8:	2f62      	cmp	r7, #98	; 0x62
 800c0fa:	d80a      	bhi.n	800c112 <_printf_i+0x32>
 800c0fc:	2f00      	cmp	r7, #0
 800c0fe:	f000 80d4 	beq.w	800c2aa <_printf_i+0x1ca>
 800c102:	2f58      	cmp	r7, #88	; 0x58
 800c104:	f000 80c0 	beq.w	800c288 <_printf_i+0x1a8>
 800c108:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c10c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c110:	e03a      	b.n	800c188 <_printf_i+0xa8>
 800c112:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c116:	2b15      	cmp	r3, #21
 800c118:	d8f6      	bhi.n	800c108 <_printf_i+0x28>
 800c11a:	a101      	add	r1, pc, #4	; (adr r1, 800c120 <_printf_i+0x40>)
 800c11c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c120:	0800c179 	.word	0x0800c179
 800c124:	0800c18d 	.word	0x0800c18d
 800c128:	0800c109 	.word	0x0800c109
 800c12c:	0800c109 	.word	0x0800c109
 800c130:	0800c109 	.word	0x0800c109
 800c134:	0800c109 	.word	0x0800c109
 800c138:	0800c18d 	.word	0x0800c18d
 800c13c:	0800c109 	.word	0x0800c109
 800c140:	0800c109 	.word	0x0800c109
 800c144:	0800c109 	.word	0x0800c109
 800c148:	0800c109 	.word	0x0800c109
 800c14c:	0800c291 	.word	0x0800c291
 800c150:	0800c1b9 	.word	0x0800c1b9
 800c154:	0800c24b 	.word	0x0800c24b
 800c158:	0800c109 	.word	0x0800c109
 800c15c:	0800c109 	.word	0x0800c109
 800c160:	0800c2b3 	.word	0x0800c2b3
 800c164:	0800c109 	.word	0x0800c109
 800c168:	0800c1b9 	.word	0x0800c1b9
 800c16c:	0800c109 	.word	0x0800c109
 800c170:	0800c109 	.word	0x0800c109
 800c174:	0800c253 	.word	0x0800c253
 800c178:	682b      	ldr	r3, [r5, #0]
 800c17a:	1d1a      	adds	r2, r3, #4
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	602a      	str	r2, [r5, #0]
 800c180:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c184:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c188:	2301      	movs	r3, #1
 800c18a:	e09f      	b.n	800c2cc <_printf_i+0x1ec>
 800c18c:	6820      	ldr	r0, [r4, #0]
 800c18e:	682b      	ldr	r3, [r5, #0]
 800c190:	0607      	lsls	r7, r0, #24
 800c192:	f103 0104 	add.w	r1, r3, #4
 800c196:	6029      	str	r1, [r5, #0]
 800c198:	d501      	bpl.n	800c19e <_printf_i+0xbe>
 800c19a:	681e      	ldr	r6, [r3, #0]
 800c19c:	e003      	b.n	800c1a6 <_printf_i+0xc6>
 800c19e:	0646      	lsls	r6, r0, #25
 800c1a0:	d5fb      	bpl.n	800c19a <_printf_i+0xba>
 800c1a2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c1a6:	2e00      	cmp	r6, #0
 800c1a8:	da03      	bge.n	800c1b2 <_printf_i+0xd2>
 800c1aa:	232d      	movs	r3, #45	; 0x2d
 800c1ac:	4276      	negs	r6, r6
 800c1ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c1b2:	485a      	ldr	r0, [pc, #360]	; (800c31c <_printf_i+0x23c>)
 800c1b4:	230a      	movs	r3, #10
 800c1b6:	e012      	b.n	800c1de <_printf_i+0xfe>
 800c1b8:	682b      	ldr	r3, [r5, #0]
 800c1ba:	6820      	ldr	r0, [r4, #0]
 800c1bc:	1d19      	adds	r1, r3, #4
 800c1be:	6029      	str	r1, [r5, #0]
 800c1c0:	0605      	lsls	r5, r0, #24
 800c1c2:	d501      	bpl.n	800c1c8 <_printf_i+0xe8>
 800c1c4:	681e      	ldr	r6, [r3, #0]
 800c1c6:	e002      	b.n	800c1ce <_printf_i+0xee>
 800c1c8:	0641      	lsls	r1, r0, #25
 800c1ca:	d5fb      	bpl.n	800c1c4 <_printf_i+0xe4>
 800c1cc:	881e      	ldrh	r6, [r3, #0]
 800c1ce:	4853      	ldr	r0, [pc, #332]	; (800c31c <_printf_i+0x23c>)
 800c1d0:	2f6f      	cmp	r7, #111	; 0x6f
 800c1d2:	bf0c      	ite	eq
 800c1d4:	2308      	moveq	r3, #8
 800c1d6:	230a      	movne	r3, #10
 800c1d8:	2100      	movs	r1, #0
 800c1da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c1de:	6865      	ldr	r5, [r4, #4]
 800c1e0:	60a5      	str	r5, [r4, #8]
 800c1e2:	2d00      	cmp	r5, #0
 800c1e4:	bfa2      	ittt	ge
 800c1e6:	6821      	ldrge	r1, [r4, #0]
 800c1e8:	f021 0104 	bicge.w	r1, r1, #4
 800c1ec:	6021      	strge	r1, [r4, #0]
 800c1ee:	b90e      	cbnz	r6, 800c1f4 <_printf_i+0x114>
 800c1f0:	2d00      	cmp	r5, #0
 800c1f2:	d04b      	beq.n	800c28c <_printf_i+0x1ac>
 800c1f4:	4615      	mov	r5, r2
 800c1f6:	fbb6 f1f3 	udiv	r1, r6, r3
 800c1fa:	fb03 6711 	mls	r7, r3, r1, r6
 800c1fe:	5dc7      	ldrb	r7, [r0, r7]
 800c200:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c204:	4637      	mov	r7, r6
 800c206:	42bb      	cmp	r3, r7
 800c208:	460e      	mov	r6, r1
 800c20a:	d9f4      	bls.n	800c1f6 <_printf_i+0x116>
 800c20c:	2b08      	cmp	r3, #8
 800c20e:	d10b      	bne.n	800c228 <_printf_i+0x148>
 800c210:	6823      	ldr	r3, [r4, #0]
 800c212:	07de      	lsls	r6, r3, #31
 800c214:	d508      	bpl.n	800c228 <_printf_i+0x148>
 800c216:	6923      	ldr	r3, [r4, #16]
 800c218:	6861      	ldr	r1, [r4, #4]
 800c21a:	4299      	cmp	r1, r3
 800c21c:	bfde      	ittt	le
 800c21e:	2330      	movle	r3, #48	; 0x30
 800c220:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c224:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c228:	1b52      	subs	r2, r2, r5
 800c22a:	6122      	str	r2, [r4, #16]
 800c22c:	f8cd a000 	str.w	sl, [sp]
 800c230:	464b      	mov	r3, r9
 800c232:	aa03      	add	r2, sp, #12
 800c234:	4621      	mov	r1, r4
 800c236:	4640      	mov	r0, r8
 800c238:	f7ff fee4 	bl	800c004 <_printf_common>
 800c23c:	3001      	adds	r0, #1
 800c23e:	d14a      	bne.n	800c2d6 <_printf_i+0x1f6>
 800c240:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c244:	b004      	add	sp, #16
 800c246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c24a:	6823      	ldr	r3, [r4, #0]
 800c24c:	f043 0320 	orr.w	r3, r3, #32
 800c250:	6023      	str	r3, [r4, #0]
 800c252:	4833      	ldr	r0, [pc, #204]	; (800c320 <_printf_i+0x240>)
 800c254:	2778      	movs	r7, #120	; 0x78
 800c256:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c25a:	6823      	ldr	r3, [r4, #0]
 800c25c:	6829      	ldr	r1, [r5, #0]
 800c25e:	061f      	lsls	r7, r3, #24
 800c260:	f851 6b04 	ldr.w	r6, [r1], #4
 800c264:	d402      	bmi.n	800c26c <_printf_i+0x18c>
 800c266:	065f      	lsls	r7, r3, #25
 800c268:	bf48      	it	mi
 800c26a:	b2b6      	uxthmi	r6, r6
 800c26c:	07df      	lsls	r7, r3, #31
 800c26e:	bf48      	it	mi
 800c270:	f043 0320 	orrmi.w	r3, r3, #32
 800c274:	6029      	str	r1, [r5, #0]
 800c276:	bf48      	it	mi
 800c278:	6023      	strmi	r3, [r4, #0]
 800c27a:	b91e      	cbnz	r6, 800c284 <_printf_i+0x1a4>
 800c27c:	6823      	ldr	r3, [r4, #0]
 800c27e:	f023 0320 	bic.w	r3, r3, #32
 800c282:	6023      	str	r3, [r4, #0]
 800c284:	2310      	movs	r3, #16
 800c286:	e7a7      	b.n	800c1d8 <_printf_i+0xf8>
 800c288:	4824      	ldr	r0, [pc, #144]	; (800c31c <_printf_i+0x23c>)
 800c28a:	e7e4      	b.n	800c256 <_printf_i+0x176>
 800c28c:	4615      	mov	r5, r2
 800c28e:	e7bd      	b.n	800c20c <_printf_i+0x12c>
 800c290:	682b      	ldr	r3, [r5, #0]
 800c292:	6826      	ldr	r6, [r4, #0]
 800c294:	6961      	ldr	r1, [r4, #20]
 800c296:	1d18      	adds	r0, r3, #4
 800c298:	6028      	str	r0, [r5, #0]
 800c29a:	0635      	lsls	r5, r6, #24
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	d501      	bpl.n	800c2a4 <_printf_i+0x1c4>
 800c2a0:	6019      	str	r1, [r3, #0]
 800c2a2:	e002      	b.n	800c2aa <_printf_i+0x1ca>
 800c2a4:	0670      	lsls	r0, r6, #25
 800c2a6:	d5fb      	bpl.n	800c2a0 <_printf_i+0x1c0>
 800c2a8:	8019      	strh	r1, [r3, #0]
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	6123      	str	r3, [r4, #16]
 800c2ae:	4615      	mov	r5, r2
 800c2b0:	e7bc      	b.n	800c22c <_printf_i+0x14c>
 800c2b2:	682b      	ldr	r3, [r5, #0]
 800c2b4:	1d1a      	adds	r2, r3, #4
 800c2b6:	602a      	str	r2, [r5, #0]
 800c2b8:	681d      	ldr	r5, [r3, #0]
 800c2ba:	6862      	ldr	r2, [r4, #4]
 800c2bc:	2100      	movs	r1, #0
 800c2be:	4628      	mov	r0, r5
 800c2c0:	f7f3 ff86 	bl	80001d0 <memchr>
 800c2c4:	b108      	cbz	r0, 800c2ca <_printf_i+0x1ea>
 800c2c6:	1b40      	subs	r0, r0, r5
 800c2c8:	6060      	str	r0, [r4, #4]
 800c2ca:	6863      	ldr	r3, [r4, #4]
 800c2cc:	6123      	str	r3, [r4, #16]
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c2d4:	e7aa      	b.n	800c22c <_printf_i+0x14c>
 800c2d6:	6923      	ldr	r3, [r4, #16]
 800c2d8:	462a      	mov	r2, r5
 800c2da:	4649      	mov	r1, r9
 800c2dc:	4640      	mov	r0, r8
 800c2de:	47d0      	blx	sl
 800c2e0:	3001      	adds	r0, #1
 800c2e2:	d0ad      	beq.n	800c240 <_printf_i+0x160>
 800c2e4:	6823      	ldr	r3, [r4, #0]
 800c2e6:	079b      	lsls	r3, r3, #30
 800c2e8:	d413      	bmi.n	800c312 <_printf_i+0x232>
 800c2ea:	68e0      	ldr	r0, [r4, #12]
 800c2ec:	9b03      	ldr	r3, [sp, #12]
 800c2ee:	4298      	cmp	r0, r3
 800c2f0:	bfb8      	it	lt
 800c2f2:	4618      	movlt	r0, r3
 800c2f4:	e7a6      	b.n	800c244 <_printf_i+0x164>
 800c2f6:	2301      	movs	r3, #1
 800c2f8:	4632      	mov	r2, r6
 800c2fa:	4649      	mov	r1, r9
 800c2fc:	4640      	mov	r0, r8
 800c2fe:	47d0      	blx	sl
 800c300:	3001      	adds	r0, #1
 800c302:	d09d      	beq.n	800c240 <_printf_i+0x160>
 800c304:	3501      	adds	r5, #1
 800c306:	68e3      	ldr	r3, [r4, #12]
 800c308:	9903      	ldr	r1, [sp, #12]
 800c30a:	1a5b      	subs	r3, r3, r1
 800c30c:	42ab      	cmp	r3, r5
 800c30e:	dcf2      	bgt.n	800c2f6 <_printf_i+0x216>
 800c310:	e7eb      	b.n	800c2ea <_printf_i+0x20a>
 800c312:	2500      	movs	r5, #0
 800c314:	f104 0619 	add.w	r6, r4, #25
 800c318:	e7f5      	b.n	800c306 <_printf_i+0x226>
 800c31a:	bf00      	nop
 800c31c:	0800c848 	.word	0x0800c848
 800c320:	0800c859 	.word	0x0800c859

0800c324 <__swbuf_r>:
 800c324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c326:	460e      	mov	r6, r1
 800c328:	4614      	mov	r4, r2
 800c32a:	4605      	mov	r5, r0
 800c32c:	b118      	cbz	r0, 800c336 <__swbuf_r+0x12>
 800c32e:	6a03      	ldr	r3, [r0, #32]
 800c330:	b90b      	cbnz	r3, 800c336 <__swbuf_r+0x12>
 800c332:	f7ff fab3 	bl	800b89c <__sinit>
 800c336:	69a3      	ldr	r3, [r4, #24]
 800c338:	60a3      	str	r3, [r4, #8]
 800c33a:	89a3      	ldrh	r3, [r4, #12]
 800c33c:	071a      	lsls	r2, r3, #28
 800c33e:	d525      	bpl.n	800c38c <__swbuf_r+0x68>
 800c340:	6923      	ldr	r3, [r4, #16]
 800c342:	b31b      	cbz	r3, 800c38c <__swbuf_r+0x68>
 800c344:	6823      	ldr	r3, [r4, #0]
 800c346:	6922      	ldr	r2, [r4, #16]
 800c348:	1a98      	subs	r0, r3, r2
 800c34a:	6963      	ldr	r3, [r4, #20]
 800c34c:	b2f6      	uxtb	r6, r6
 800c34e:	4283      	cmp	r3, r0
 800c350:	4637      	mov	r7, r6
 800c352:	dc04      	bgt.n	800c35e <__swbuf_r+0x3a>
 800c354:	4621      	mov	r1, r4
 800c356:	4628      	mov	r0, r5
 800c358:	f7ff fc46 	bl	800bbe8 <_fflush_r>
 800c35c:	b9e0      	cbnz	r0, 800c398 <__swbuf_r+0x74>
 800c35e:	68a3      	ldr	r3, [r4, #8]
 800c360:	3b01      	subs	r3, #1
 800c362:	60a3      	str	r3, [r4, #8]
 800c364:	6823      	ldr	r3, [r4, #0]
 800c366:	1c5a      	adds	r2, r3, #1
 800c368:	6022      	str	r2, [r4, #0]
 800c36a:	701e      	strb	r6, [r3, #0]
 800c36c:	6962      	ldr	r2, [r4, #20]
 800c36e:	1c43      	adds	r3, r0, #1
 800c370:	429a      	cmp	r2, r3
 800c372:	d004      	beq.n	800c37e <__swbuf_r+0x5a>
 800c374:	89a3      	ldrh	r3, [r4, #12]
 800c376:	07db      	lsls	r3, r3, #31
 800c378:	d506      	bpl.n	800c388 <__swbuf_r+0x64>
 800c37a:	2e0a      	cmp	r6, #10
 800c37c:	d104      	bne.n	800c388 <__swbuf_r+0x64>
 800c37e:	4621      	mov	r1, r4
 800c380:	4628      	mov	r0, r5
 800c382:	f7ff fc31 	bl	800bbe8 <_fflush_r>
 800c386:	b938      	cbnz	r0, 800c398 <__swbuf_r+0x74>
 800c388:	4638      	mov	r0, r7
 800c38a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c38c:	4621      	mov	r1, r4
 800c38e:	4628      	mov	r0, r5
 800c390:	f000 f806 	bl	800c3a0 <__swsetup_r>
 800c394:	2800      	cmp	r0, #0
 800c396:	d0d5      	beq.n	800c344 <__swbuf_r+0x20>
 800c398:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c39c:	e7f4      	b.n	800c388 <__swbuf_r+0x64>
	...

0800c3a0 <__swsetup_r>:
 800c3a0:	b538      	push	{r3, r4, r5, lr}
 800c3a2:	4b2a      	ldr	r3, [pc, #168]	; (800c44c <__swsetup_r+0xac>)
 800c3a4:	4605      	mov	r5, r0
 800c3a6:	6818      	ldr	r0, [r3, #0]
 800c3a8:	460c      	mov	r4, r1
 800c3aa:	b118      	cbz	r0, 800c3b4 <__swsetup_r+0x14>
 800c3ac:	6a03      	ldr	r3, [r0, #32]
 800c3ae:	b90b      	cbnz	r3, 800c3b4 <__swsetup_r+0x14>
 800c3b0:	f7ff fa74 	bl	800b89c <__sinit>
 800c3b4:	89a3      	ldrh	r3, [r4, #12]
 800c3b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c3ba:	0718      	lsls	r0, r3, #28
 800c3bc:	d422      	bmi.n	800c404 <__swsetup_r+0x64>
 800c3be:	06d9      	lsls	r1, r3, #27
 800c3c0:	d407      	bmi.n	800c3d2 <__swsetup_r+0x32>
 800c3c2:	2309      	movs	r3, #9
 800c3c4:	602b      	str	r3, [r5, #0]
 800c3c6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c3ca:	81a3      	strh	r3, [r4, #12]
 800c3cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c3d0:	e034      	b.n	800c43c <__swsetup_r+0x9c>
 800c3d2:	0758      	lsls	r0, r3, #29
 800c3d4:	d512      	bpl.n	800c3fc <__swsetup_r+0x5c>
 800c3d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c3d8:	b141      	cbz	r1, 800c3ec <__swsetup_r+0x4c>
 800c3da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c3de:	4299      	cmp	r1, r3
 800c3e0:	d002      	beq.n	800c3e8 <__swsetup_r+0x48>
 800c3e2:	4628      	mov	r0, r5
 800c3e4:	f7ff fb2e 	bl	800ba44 <_free_r>
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	6363      	str	r3, [r4, #52]	; 0x34
 800c3ec:	89a3      	ldrh	r3, [r4, #12]
 800c3ee:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c3f2:	81a3      	strh	r3, [r4, #12]
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	6063      	str	r3, [r4, #4]
 800c3f8:	6923      	ldr	r3, [r4, #16]
 800c3fa:	6023      	str	r3, [r4, #0]
 800c3fc:	89a3      	ldrh	r3, [r4, #12]
 800c3fe:	f043 0308 	orr.w	r3, r3, #8
 800c402:	81a3      	strh	r3, [r4, #12]
 800c404:	6923      	ldr	r3, [r4, #16]
 800c406:	b94b      	cbnz	r3, 800c41c <__swsetup_r+0x7c>
 800c408:	89a3      	ldrh	r3, [r4, #12]
 800c40a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c40e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c412:	d003      	beq.n	800c41c <__swsetup_r+0x7c>
 800c414:	4621      	mov	r1, r4
 800c416:	4628      	mov	r0, r5
 800c418:	f000 f840 	bl	800c49c <__smakebuf_r>
 800c41c:	89a0      	ldrh	r0, [r4, #12]
 800c41e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c422:	f010 0301 	ands.w	r3, r0, #1
 800c426:	d00a      	beq.n	800c43e <__swsetup_r+0x9e>
 800c428:	2300      	movs	r3, #0
 800c42a:	60a3      	str	r3, [r4, #8]
 800c42c:	6963      	ldr	r3, [r4, #20]
 800c42e:	425b      	negs	r3, r3
 800c430:	61a3      	str	r3, [r4, #24]
 800c432:	6923      	ldr	r3, [r4, #16]
 800c434:	b943      	cbnz	r3, 800c448 <__swsetup_r+0xa8>
 800c436:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c43a:	d1c4      	bne.n	800c3c6 <__swsetup_r+0x26>
 800c43c:	bd38      	pop	{r3, r4, r5, pc}
 800c43e:	0781      	lsls	r1, r0, #30
 800c440:	bf58      	it	pl
 800c442:	6963      	ldrpl	r3, [r4, #20]
 800c444:	60a3      	str	r3, [r4, #8]
 800c446:	e7f4      	b.n	800c432 <__swsetup_r+0x92>
 800c448:	2000      	movs	r0, #0
 800c44a:	e7f7      	b.n	800c43c <__swsetup_r+0x9c>
 800c44c:	2000023c 	.word	0x2000023c

0800c450 <__swhatbuf_r>:
 800c450:	b570      	push	{r4, r5, r6, lr}
 800c452:	460c      	mov	r4, r1
 800c454:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c458:	2900      	cmp	r1, #0
 800c45a:	b096      	sub	sp, #88	; 0x58
 800c45c:	4615      	mov	r5, r2
 800c45e:	461e      	mov	r6, r3
 800c460:	da0d      	bge.n	800c47e <__swhatbuf_r+0x2e>
 800c462:	89a3      	ldrh	r3, [r4, #12]
 800c464:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c468:	f04f 0100 	mov.w	r1, #0
 800c46c:	bf0c      	ite	eq
 800c46e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c472:	2340      	movne	r3, #64	; 0x40
 800c474:	2000      	movs	r0, #0
 800c476:	6031      	str	r1, [r6, #0]
 800c478:	602b      	str	r3, [r5, #0]
 800c47a:	b016      	add	sp, #88	; 0x58
 800c47c:	bd70      	pop	{r4, r5, r6, pc}
 800c47e:	466a      	mov	r2, sp
 800c480:	f000 f848 	bl	800c514 <_fstat_r>
 800c484:	2800      	cmp	r0, #0
 800c486:	dbec      	blt.n	800c462 <__swhatbuf_r+0x12>
 800c488:	9901      	ldr	r1, [sp, #4]
 800c48a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c48e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c492:	4259      	negs	r1, r3
 800c494:	4159      	adcs	r1, r3
 800c496:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c49a:	e7eb      	b.n	800c474 <__swhatbuf_r+0x24>

0800c49c <__smakebuf_r>:
 800c49c:	898b      	ldrh	r3, [r1, #12]
 800c49e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c4a0:	079d      	lsls	r5, r3, #30
 800c4a2:	4606      	mov	r6, r0
 800c4a4:	460c      	mov	r4, r1
 800c4a6:	d507      	bpl.n	800c4b8 <__smakebuf_r+0x1c>
 800c4a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c4ac:	6023      	str	r3, [r4, #0]
 800c4ae:	6123      	str	r3, [r4, #16]
 800c4b0:	2301      	movs	r3, #1
 800c4b2:	6163      	str	r3, [r4, #20]
 800c4b4:	b002      	add	sp, #8
 800c4b6:	bd70      	pop	{r4, r5, r6, pc}
 800c4b8:	ab01      	add	r3, sp, #4
 800c4ba:	466a      	mov	r2, sp
 800c4bc:	f7ff ffc8 	bl	800c450 <__swhatbuf_r>
 800c4c0:	9900      	ldr	r1, [sp, #0]
 800c4c2:	4605      	mov	r5, r0
 800c4c4:	4630      	mov	r0, r6
 800c4c6:	f7ff f865 	bl	800b594 <_malloc_r>
 800c4ca:	b948      	cbnz	r0, 800c4e0 <__smakebuf_r+0x44>
 800c4cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4d0:	059a      	lsls	r2, r3, #22
 800c4d2:	d4ef      	bmi.n	800c4b4 <__smakebuf_r+0x18>
 800c4d4:	f023 0303 	bic.w	r3, r3, #3
 800c4d8:	f043 0302 	orr.w	r3, r3, #2
 800c4dc:	81a3      	strh	r3, [r4, #12]
 800c4de:	e7e3      	b.n	800c4a8 <__smakebuf_r+0xc>
 800c4e0:	89a3      	ldrh	r3, [r4, #12]
 800c4e2:	6020      	str	r0, [r4, #0]
 800c4e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4e8:	81a3      	strh	r3, [r4, #12]
 800c4ea:	9b00      	ldr	r3, [sp, #0]
 800c4ec:	6163      	str	r3, [r4, #20]
 800c4ee:	9b01      	ldr	r3, [sp, #4]
 800c4f0:	6120      	str	r0, [r4, #16]
 800c4f2:	b15b      	cbz	r3, 800c50c <__smakebuf_r+0x70>
 800c4f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c4f8:	4630      	mov	r0, r6
 800c4fa:	f000 f81d 	bl	800c538 <_isatty_r>
 800c4fe:	b128      	cbz	r0, 800c50c <__smakebuf_r+0x70>
 800c500:	89a3      	ldrh	r3, [r4, #12]
 800c502:	f023 0303 	bic.w	r3, r3, #3
 800c506:	f043 0301 	orr.w	r3, r3, #1
 800c50a:	81a3      	strh	r3, [r4, #12]
 800c50c:	89a3      	ldrh	r3, [r4, #12]
 800c50e:	431d      	orrs	r5, r3
 800c510:	81a5      	strh	r5, [r4, #12]
 800c512:	e7cf      	b.n	800c4b4 <__smakebuf_r+0x18>

0800c514 <_fstat_r>:
 800c514:	b538      	push	{r3, r4, r5, lr}
 800c516:	4d07      	ldr	r5, [pc, #28]	; (800c534 <_fstat_r+0x20>)
 800c518:	2300      	movs	r3, #0
 800c51a:	4604      	mov	r4, r0
 800c51c:	4608      	mov	r0, r1
 800c51e:	4611      	mov	r1, r2
 800c520:	602b      	str	r3, [r5, #0]
 800c522:	f7fe febe 	bl	800b2a2 <_fstat>
 800c526:	1c43      	adds	r3, r0, #1
 800c528:	d102      	bne.n	800c530 <_fstat_r+0x1c>
 800c52a:	682b      	ldr	r3, [r5, #0]
 800c52c:	b103      	cbz	r3, 800c530 <_fstat_r+0x1c>
 800c52e:	6023      	str	r3, [r4, #0]
 800c530:	bd38      	pop	{r3, r4, r5, pc}
 800c532:	bf00      	nop
 800c534:	2000305c 	.word	0x2000305c

0800c538 <_isatty_r>:
 800c538:	b538      	push	{r3, r4, r5, lr}
 800c53a:	4d06      	ldr	r5, [pc, #24]	; (800c554 <_isatty_r+0x1c>)
 800c53c:	2300      	movs	r3, #0
 800c53e:	4604      	mov	r4, r0
 800c540:	4608      	mov	r0, r1
 800c542:	602b      	str	r3, [r5, #0]
 800c544:	f7fe febd 	bl	800b2c2 <_isatty>
 800c548:	1c43      	adds	r3, r0, #1
 800c54a:	d102      	bne.n	800c552 <_isatty_r+0x1a>
 800c54c:	682b      	ldr	r3, [r5, #0]
 800c54e:	b103      	cbz	r3, 800c552 <_isatty_r+0x1a>
 800c550:	6023      	str	r3, [r4, #0]
 800c552:	bd38      	pop	{r3, r4, r5, pc}
 800c554:	2000305c 	.word	0x2000305c

0800c558 <_raise_r>:
 800c558:	291f      	cmp	r1, #31
 800c55a:	b538      	push	{r3, r4, r5, lr}
 800c55c:	4604      	mov	r4, r0
 800c55e:	460d      	mov	r5, r1
 800c560:	d904      	bls.n	800c56c <_raise_r+0x14>
 800c562:	2316      	movs	r3, #22
 800c564:	6003      	str	r3, [r0, #0]
 800c566:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c56a:	bd38      	pop	{r3, r4, r5, pc}
 800c56c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c56e:	b112      	cbz	r2, 800c576 <_raise_r+0x1e>
 800c570:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c574:	b94b      	cbnz	r3, 800c58a <_raise_r+0x32>
 800c576:	4620      	mov	r0, r4
 800c578:	f000 f830 	bl	800c5dc <_getpid_r>
 800c57c:	462a      	mov	r2, r5
 800c57e:	4601      	mov	r1, r0
 800c580:	4620      	mov	r0, r4
 800c582:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c586:	f000 b817 	b.w	800c5b8 <_kill_r>
 800c58a:	2b01      	cmp	r3, #1
 800c58c:	d00a      	beq.n	800c5a4 <_raise_r+0x4c>
 800c58e:	1c59      	adds	r1, r3, #1
 800c590:	d103      	bne.n	800c59a <_raise_r+0x42>
 800c592:	2316      	movs	r3, #22
 800c594:	6003      	str	r3, [r0, #0]
 800c596:	2001      	movs	r0, #1
 800c598:	e7e7      	b.n	800c56a <_raise_r+0x12>
 800c59a:	2400      	movs	r4, #0
 800c59c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c5a0:	4628      	mov	r0, r5
 800c5a2:	4798      	blx	r3
 800c5a4:	2000      	movs	r0, #0
 800c5a6:	e7e0      	b.n	800c56a <_raise_r+0x12>

0800c5a8 <raise>:
 800c5a8:	4b02      	ldr	r3, [pc, #8]	; (800c5b4 <raise+0xc>)
 800c5aa:	4601      	mov	r1, r0
 800c5ac:	6818      	ldr	r0, [r3, #0]
 800c5ae:	f7ff bfd3 	b.w	800c558 <_raise_r>
 800c5b2:	bf00      	nop
 800c5b4:	2000023c 	.word	0x2000023c

0800c5b8 <_kill_r>:
 800c5b8:	b538      	push	{r3, r4, r5, lr}
 800c5ba:	4d07      	ldr	r5, [pc, #28]	; (800c5d8 <_kill_r+0x20>)
 800c5bc:	2300      	movs	r3, #0
 800c5be:	4604      	mov	r4, r0
 800c5c0:	4608      	mov	r0, r1
 800c5c2:	4611      	mov	r1, r2
 800c5c4:	602b      	str	r3, [r5, #0]
 800c5c6:	f7fe fe0d 	bl	800b1e4 <_kill>
 800c5ca:	1c43      	adds	r3, r0, #1
 800c5cc:	d102      	bne.n	800c5d4 <_kill_r+0x1c>
 800c5ce:	682b      	ldr	r3, [r5, #0]
 800c5d0:	b103      	cbz	r3, 800c5d4 <_kill_r+0x1c>
 800c5d2:	6023      	str	r3, [r4, #0]
 800c5d4:	bd38      	pop	{r3, r4, r5, pc}
 800c5d6:	bf00      	nop
 800c5d8:	2000305c 	.word	0x2000305c

0800c5dc <_getpid_r>:
 800c5dc:	f7fe bdfa 	b.w	800b1d4 <_getpid>

0800c5e0 <_gettimeofday>:
 800c5e0:	4b02      	ldr	r3, [pc, #8]	; (800c5ec <_gettimeofday+0xc>)
 800c5e2:	2258      	movs	r2, #88	; 0x58
 800c5e4:	601a      	str	r2, [r3, #0]
 800c5e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c5ea:	4770      	bx	lr
 800c5ec:	2000305c 	.word	0x2000305c

0800c5f0 <_init>:
 800c5f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5f2:	bf00      	nop
 800c5f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5f6:	bc08      	pop	{r3}
 800c5f8:	469e      	mov	lr, r3
 800c5fa:	4770      	bx	lr

0800c5fc <_fini>:
 800c5fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5fe:	bf00      	nop
 800c600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c602:	bc08      	pop	{r3}
 800c604:	469e      	mov	lr, r3
 800c606:	4770      	bx	lr
