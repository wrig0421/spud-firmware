
garage_door_opener.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009240  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a50  080093d0  080093d0  000193d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e20  08009e20  0002004c  2**0
                  CONTENTS
  4 .ARM          00000008  08009e20  08009e20  00019e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e28  08009e28  0002004c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e28  08009e28  00019e28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e2c  08009e2c  00019e2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000004c  20000000  08009e30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c194  2000004c  08009e7c  0002004c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000c1e0  08009e7c  0002c1e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fb30  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000506e  00000000  00000000  0003fbac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e08  00000000  00000000  00044c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001be8  00000000  00000000  00046a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000271fb  00000000  00000000  00048610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022141  00000000  00000000  0006f80b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e6568  00000000  00000000  0009194c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00177eb4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007bf0  00000000  00000000  00177f04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000004c 	.word	0x2000004c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080093b8 	.word	0x080093b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000050 	.word	0x20000050
 80001cc:	080093b8 	.word	0x080093b8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <board_wakeup>:
void board_wakeup(void);
void port_wakeup(void);


void board_wakeup(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
	SystemClock_Config();
 80004e8:	f000 f81e 	bl	8000528 <SystemClock_Config>
	HAL_Init();
 80004ec:	f002 f99d 	bl	800282a <HAL_Init>
}
 80004f0:	bf00      	nop
 80004f2:	bd80      	pop	{r7, pc}

080004f4 <port_wakeup>:


void port_wakeup(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
	MX_GPIO_Init();
 80004f8:	f000 f90a 	bl	8000710 <MX_GPIO_Init>
	MX_DMA_Init();
 80004fc:	f000 f8e2 	bl	80006c4 <MX_DMA_Init>
	MX_SPI2_Init();
 8000500:	f000 f872 	bl	80005e8 <MX_SPI2_Init>
	MX_USART1_UART_Init();
 8000504:	f000 f8ae 	bl	8000664 <MX_USART1_UART_Init>
}
 8000508:	bf00      	nop
 800050a:	bd80      	pop	{r7, pc}

0800050c <board_init>:


void board_init(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
	board_wakeup();
 8000510:	f7ff ffe8 	bl	80004e4 <board_wakeup>
	port_wakeup();
 8000514:	f7ff ffee 	bl	80004f4 <port_wakeup>
	flash_init();
 8000518:	f000 f99c 	bl	8000854 <flash_init>
	ssd1351_init();
 800051c:	f001 f8b2 	bl	8001684 <ssd1351_init>
	keypad_init();
 8000520:	f000 fc3c 	bl	8000d9c <keypad_init>
}
 8000524:	bf00      	nop
 8000526:	bd80      	pop	{r7, pc}

08000528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b0ae      	sub	sp, #184	; 0xb8
 800052c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000532:	2244      	movs	r2, #68	; 0x44
 8000534:	2100      	movs	r1, #0
 8000536:	4618      	mov	r0, r3
 8000538:	f008 fef4 	bl	8009324 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800053c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	605a      	str	r2, [r3, #4]
 8000546:	609a      	str	r2, [r3, #8]
 8000548:	60da      	str	r2, [r3, #12]
 800054a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800054c:	463b      	mov	r3, r7
 800054e:	2260      	movs	r2, #96	; 0x60
 8000550:	2100      	movs	r1, #0
 8000552:	4618      	mov	r0, r3
 8000554:	f008 fee6 	bl	8009324 <memset>

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000558:	2310      	movs	r3, #16
 800055a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800055c:	2301      	movs	r3, #1
 800055e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000562:	2300      	movs	r3, #0
 8000564:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000568:	2360      	movs	r3, #96	; 0x60
 800056a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800056e:	2300      	movs	r3, #0
 8000570:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) Error_Handler();
 8000574:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000578:	4618      	mov	r0, r3
 800057a:	f003 f91f 	bl	80037bc <HAL_RCC_OscConfig>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <SystemClock_Config+0x60>
 8000584:	f000 f962 	bl	800084c <Error_Handler>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000588:	230f      	movs	r3, #15
 800058a:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800058c:	2300      	movs	r3, #0
 800058e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000590:	2300      	movs	r3, #0
 8000592:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000594:	2300      	movs	r3, #0
 8000596:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000598:	2300      	movs	r3, #0
 800059a:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) Error_Handler();
 800059c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f003 fd2a 	bl	8003ffc <HAL_RCC_ClockConfig>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <SystemClock_Config+0x8a>
 80005ae:	f000 f94d 	bl	800084c <Error_Handler>

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80005b2:	2301      	movs	r3, #1
 80005b4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80005b6:	2300      	movs	r3, #0
 80005b8:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) Error_Handler();
 80005ba:	463b      	mov	r3, r7
 80005bc:	4618      	mov	r0, r3
 80005be:	f003 ff55 	bl	800446c <HAL_RCCEx_PeriphCLKConfig>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0xa4>
 80005c8:	f000 f940 	bl	800084c <Error_Handler>

  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK) Error_Handler();
 80005cc:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005d0:	f003 f89e 	bl	8003710 <HAL_PWREx_ControlVoltageScaling>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <SystemClock_Config+0xb6>
 80005da:	f000 f937 	bl	800084c <Error_Handler>
}
 80005de:	bf00      	nop
 80005e0:	37b8      	adds	r7, #184	; 0xb8
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
	...

080005e8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
void MX_SPI2_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  g_hspi2.Instance = SPI2;
 80005ec:	4b1b      	ldr	r3, [pc, #108]	; (800065c <MX_SPI2_Init+0x74>)
 80005ee:	4a1c      	ldr	r2, [pc, #112]	; (8000660 <MX_SPI2_Init+0x78>)
 80005f0:	601a      	str	r2, [r3, #0]
  g_hspi2.Init.Mode = SPI_MODE_MASTER;
 80005f2:	4b1a      	ldr	r3, [pc, #104]	; (800065c <MX_SPI2_Init+0x74>)
 80005f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80005f8:	605a      	str	r2, [r3, #4]
  g_hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80005fa:	4b18      	ldr	r3, [pc, #96]	; (800065c <MX_SPI2_Init+0x74>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	609a      	str	r2, [r3, #8]
  g_hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000600:	4b16      	ldr	r3, [pc, #88]	; (800065c <MX_SPI2_Init+0x74>)
 8000602:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000606:	60da      	str	r2, [r3, #12]
  g_hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000608:	4b14      	ldr	r3, [pc, #80]	; (800065c <MX_SPI2_Init+0x74>)
 800060a:	2200      	movs	r2, #0
 800060c:	611a      	str	r2, [r3, #16]
  g_hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800060e:	4b13      	ldr	r3, [pc, #76]	; (800065c <MX_SPI2_Init+0x74>)
 8000610:	2200      	movs	r2, #0
 8000612:	615a      	str	r2, [r3, #20]
  g_hspi2.Init.NSS = SPI_NSS_SOFT;
 8000614:	4b11      	ldr	r3, [pc, #68]	; (800065c <MX_SPI2_Init+0x74>)
 8000616:	f44f 7200 	mov.w	r2, #512	; 0x200
 800061a:	619a      	str	r2, [r3, #24]
  g_hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800061c:	4b0f      	ldr	r3, [pc, #60]	; (800065c <MX_SPI2_Init+0x74>)
 800061e:	2200      	movs	r2, #0
 8000620:	61da      	str	r2, [r3, #28]
  g_hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000622:	4b0e      	ldr	r3, [pc, #56]	; (800065c <MX_SPI2_Init+0x74>)
 8000624:	2200      	movs	r2, #0
 8000626:	621a      	str	r2, [r3, #32]
  g_hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000628:	4b0c      	ldr	r3, [pc, #48]	; (800065c <MX_SPI2_Init+0x74>)
 800062a:	2200      	movs	r2, #0
 800062c:	625a      	str	r2, [r3, #36]	; 0x24
  g_hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800062e:	4b0b      	ldr	r3, [pc, #44]	; (800065c <MX_SPI2_Init+0x74>)
 8000630:	2200      	movs	r2, #0
 8000632:	629a      	str	r2, [r3, #40]	; 0x28
  g_hspi2.Init.CRCPolynomial = 7;
 8000634:	4b09      	ldr	r3, [pc, #36]	; (800065c <MX_SPI2_Init+0x74>)
 8000636:	2207      	movs	r2, #7
 8000638:	62da      	str	r2, [r3, #44]	; 0x2c
  g_hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800063a:	4b08      	ldr	r3, [pc, #32]	; (800065c <MX_SPI2_Init+0x74>)
 800063c:	2200      	movs	r2, #0
 800063e:	631a      	str	r2, [r3, #48]	; 0x30
  g_hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000640:	4b06      	ldr	r3, [pc, #24]	; (800065c <MX_SPI2_Init+0x74>)
 8000642:	2208      	movs	r2, #8
 8000644:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&g_hspi2) != HAL_OK) Error_Handler();
 8000646:	4805      	ldr	r0, [pc, #20]	; (800065c <MX_SPI2_Init+0x74>)
 8000648:	f004 fa4c 	bl	8004ae4 <HAL_SPI_Init>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <MX_SPI2_Init+0x6e>
 8000652:	f000 f8fb 	bl	800084c <Error_Handler>
}
 8000656:	bf00      	nop
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	20000068 	.word	0x20000068
 8000660:	40003800 	.word	0x40003800

08000664 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  g_huart1.Instance = USART1;
 8000668:	4b14      	ldr	r3, [pc, #80]	; (80006bc <MX_USART1_UART_Init+0x58>)
 800066a:	4a15      	ldr	r2, [pc, #84]	; (80006c0 <MX_USART1_UART_Init+0x5c>)
 800066c:	601a      	str	r2, [r3, #0]
  g_huart1.Init.BaudRate = 9600;
 800066e:	4b13      	ldr	r3, [pc, #76]	; (80006bc <MX_USART1_UART_Init+0x58>)
 8000670:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000674:	605a      	str	r2, [r3, #4]
  g_huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000676:	4b11      	ldr	r3, [pc, #68]	; (80006bc <MX_USART1_UART_Init+0x58>)
 8000678:	2200      	movs	r2, #0
 800067a:	609a      	str	r2, [r3, #8]
  g_huart1.Init.StopBits = UART_STOPBITS_1;
 800067c:	4b0f      	ldr	r3, [pc, #60]	; (80006bc <MX_USART1_UART_Init+0x58>)
 800067e:	2200      	movs	r2, #0
 8000680:	60da      	str	r2, [r3, #12]
  g_huart1.Init.Parity = UART_PARITY_NONE;
 8000682:	4b0e      	ldr	r3, [pc, #56]	; (80006bc <MX_USART1_UART_Init+0x58>)
 8000684:	2200      	movs	r2, #0
 8000686:	611a      	str	r2, [r3, #16]
  g_huart1.Init.Mode = UART_MODE_TX_RX;
 8000688:	4b0c      	ldr	r3, [pc, #48]	; (80006bc <MX_USART1_UART_Init+0x58>)
 800068a:	220c      	movs	r2, #12
 800068c:	615a      	str	r2, [r3, #20]
  g_huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800068e:	4b0b      	ldr	r3, [pc, #44]	; (80006bc <MX_USART1_UART_Init+0x58>)
 8000690:	2200      	movs	r2, #0
 8000692:	619a      	str	r2, [r3, #24]
  g_huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000694:	4b09      	ldr	r3, [pc, #36]	; (80006bc <MX_USART1_UART_Init+0x58>)
 8000696:	2200      	movs	r2, #0
 8000698:	61da      	str	r2, [r3, #28]
  g_huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800069a:	4b08      	ldr	r3, [pc, #32]	; (80006bc <MX_USART1_UART_Init+0x58>)
 800069c:	2200      	movs	r2, #0
 800069e:	621a      	str	r2, [r3, #32]
  g_huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006a0:	4b06      	ldr	r3, [pc, #24]	; (80006bc <MX_USART1_UART_Init+0x58>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&g_huart1) != HAL_OK)
 80006a6:	4805      	ldr	r0, [pc, #20]	; (80006bc <MX_USART1_UART_Init+0x58>)
 80006a8:	f005 f80e 	bl	80056c8 <HAL_UART_Init>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80006b2:	f000 f8cb 	bl	800084c <Error_Handler>
  }
}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	200000cc 	.word	0x200000cc
 80006c0:	40013800 	.word	0x40013800

080006c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006ca:	4b10      	ldr	r3, [pc, #64]	; (800070c <MX_DMA_Init+0x48>)
 80006cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006ce:	4a0f      	ldr	r2, [pc, #60]	; (800070c <MX_DMA_Init+0x48>)
 80006d0:	f043 0301 	orr.w	r3, r3, #1
 80006d4:	6493      	str	r3, [r2, #72]	; 0x48
 80006d6:	4b0d      	ldr	r3, [pc, #52]	; (800070c <MX_DMA_Init+0x48>)
 80006d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006da:	f003 0301 	and.w	r3, r3, #1
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	687b      	ldr	r3, [r7, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 80006e2:	2200      	movs	r2, #0
 80006e4:	2105      	movs	r1, #5
 80006e6:	200e      	movs	r0, #14
 80006e8:	f002 f9b4 	bl	8002a54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80006ec:	200e      	movs	r0, #14
 80006ee:	f002 f9cd 	bl	8002a8c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 80006f2:	2200      	movs	r2, #0
 80006f4:	2105      	movs	r1, #5
 80006f6:	200f      	movs	r0, #15
 80006f8:	f002 f9ac 	bl	8002a54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80006fc:	200f      	movs	r0, #15
 80006fe:	f002 f9c5 	bl	8002a8c <HAL_NVIC_EnableIRQ>

}
 8000702:	bf00      	nop
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40021000 	.word	0x40021000

08000710 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b088      	sub	sp, #32
 8000714:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000716:	f107 030c 	add.w	r3, r7, #12
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
 8000720:	609a      	str	r2, [r3, #8]
 8000722:	60da      	str	r2, [r3, #12]
 8000724:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000726:	4b3a      	ldr	r3, [pc, #232]	; (8000810 <MX_GPIO_Init+0x100>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072a:	4a39      	ldr	r2, [pc, #228]	; (8000810 <MX_GPIO_Init+0x100>)
 800072c:	f043 0304 	orr.w	r3, r3, #4
 8000730:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000732:	4b37      	ldr	r3, [pc, #220]	; (8000810 <MX_GPIO_Init+0x100>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000736:	f003 0304 	and.w	r3, r3, #4
 800073a:	60bb      	str	r3, [r7, #8]
 800073c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073e:	4b34      	ldr	r3, [pc, #208]	; (8000810 <MX_GPIO_Init+0x100>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000742:	4a33      	ldr	r2, [pc, #204]	; (8000810 <MX_GPIO_Init+0x100>)
 8000744:	f043 0301 	orr.w	r3, r3, #1
 8000748:	64d3      	str	r3, [r2, #76]	; 0x4c
 800074a:	4b31      	ldr	r3, [pc, #196]	; (8000810 <MX_GPIO_Init+0x100>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000756:	4b2e      	ldr	r3, [pc, #184]	; (8000810 <MX_GPIO_Init+0x100>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075a:	4a2d      	ldr	r2, [pc, #180]	; (8000810 <MX_GPIO_Init+0x100>)
 800075c:	f043 0302 	orr.w	r3, r3, #2
 8000760:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000762:	4b2b      	ldr	r3, [pc, #172]	; (8000810 <MX_GPIO_Init+0x100>)
 8000764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000766:	f003 0302 	and.w	r3, r3, #2
 800076a:	603b      	str	r3, [r7, #0]
 800076c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8
 800076e:	2200      	movs	r2, #0
 8000770:	f640 110e 	movw	r1, #2318	; 0x90e
 8000774:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000778:	f002 ffa4 	bl	80036c4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_6, GPIO_PIN_RESET);
 800077c:	2200      	movs	r2, #0
 800077e:	2144      	movs	r1, #68	; 0x44
 8000780:	4824      	ldr	r0, [pc, #144]	; (8000814 <MX_GPIO_Init+0x104>)
 8000782:	f002 ff9f 	bl	80036c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_10, GPIO_PIN_RESET);
 8000786:	2200      	movs	r2, #0
 8000788:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 800078c:	4822      	ldr	r0, [pc, #136]	; (8000818 <MX_GPIO_Init+0x108>)
 800078e:	f002 ff99 	bl	80036c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA2 PA3 PA8
                           PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8
 8000792:	f640 130e 	movw	r3, #2318	; 0x90e
 8000796:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000798:	2301      	movs	r3, #1
 800079a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079c:	2300      	movs	r3, #0
 800079e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a0:	2300      	movs	r3, #0
 80007a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a4:	f107 030c 	add.w	r3, r7, #12
 80007a8:	4619      	mov	r1, r3
 80007aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ae:	f002 fdf7 	bl	80033a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 80007b2:	2344      	movs	r3, #68	; 0x44
 80007b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b6:	2301      	movs	r3, #1
 80007b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	2300      	movs	r3, #0
 80007bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007be:	2300      	movs	r3, #0
 80007c0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c2:	f107 030c 	add.w	r3, r7, #12
 80007c6:	4619      	mov	r1, r3
 80007c8:	4812      	ldr	r0, [pc, #72]	; (8000814 <MX_GPIO_Init+0x104>)
 80007ca:	f002 fde9 	bl	80033a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
 80007ce:	f44f 5399 	mov.w	r3, #4896	; 0x1320
 80007d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d4:	2300      	movs	r3, #0
 80007d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007d8:	2302      	movs	r3, #2
 80007da:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007dc:	f107 030c 	add.w	r3, r7, #12
 80007e0:	4619      	mov	r1, r3
 80007e2:	480c      	ldr	r0, [pc, #48]	; (8000814 <MX_GPIO_Init+0x104>)
 80007e4:	f002 fddc 	bl	80033a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 80007e8:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80007ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ee:	2301      	movs	r3, #1
 80007f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f6:	2300      	movs	r3, #0
 80007f8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007fa:	f107 030c 	add.w	r3, r7, #12
 80007fe:	4619      	mov	r1, r3
 8000800:	4805      	ldr	r0, [pc, #20]	; (8000818 <MX_GPIO_Init+0x108>)
 8000802:	f002 fdcd 	bl	80033a0 <HAL_GPIO_Init>

}
 8000806:	bf00      	nop
 8000808:	3720      	adds	r7, #32
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40021000 	.word	0x40021000
 8000814:	48000400 	.word	0x48000400
 8000818:	48000800 	.word	0x48000800

0800081c <board_init_activate_garage_door>:
	__HAL_PWR_CLEAR_FLAG(PWR_WAKEUP_PIN1_LOW);
}


void board_init_activate_garage_door(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8000820:	2201      	movs	r2, #1
 8000822:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000826:	4802      	ldr	r0, [pc, #8]	; (8000830 <board_init_activate_garage_door+0x14>)
 8000828:	f002 ff4c 	bl	80036c4 <HAL_GPIO_WritePin>
}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}
 8000830:	48000800 	.word	0x48000800

08000834 <board_init_deactivate_garage_door>:


void board_init_deactivate_garage_door(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8000838:	2200      	movs	r2, #0
 800083a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800083e:	4802      	ldr	r0, [pc, #8]	; (8000848 <board_init_deactivate_garage_door+0x14>)
 8000840:	f002 ff40 	bl	80036c4 <HAL_GPIO_WritePin>
}
 8000844:	bf00      	nop
 8000846:	bd80      	pop	{r7, pc}
 8000848:	48000800 	.word	0x48000800

0800084c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
	// no bueno
	while(1);
 8000850:	e7fe      	b.n	8000850 <Error_Handler+0x4>
	...

08000854 <flash_init>:
uint32_t flash_write(uint32_t address, uint64_t *data, uint32_t num_words);
uint32_t flash_get_page(uint32_t addr);


void flash_init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
	flash_read(FLASH_ACCESS_STORAGE_ADDR_START, (uint64_t *)&g_flash_access_signature_page, sizeof(g_flash_access_signature_page_t));
 8000858:	2208      	movs	r2, #8
 800085a:	4906      	ldr	r1, [pc, #24]	; (8000874 <flash_init+0x20>)
 800085c:	4806      	ldr	r0, [pc, #24]	; (8000878 <flash_init+0x24>)
 800085e:	f000 f8af 	bl	80009c0 <flash_read>
	if (UINT32_MAX == g_flash_access_signature_page.gt_521fx_enroll_count) flash_access_clear_signature_page();
 8000862:	4b04      	ldr	r3, [pc, #16]	; (8000874 <flash_init+0x20>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800086a:	d101      	bne.n	8000870 <flash_init+0x1c>
 800086c:	f000 f806 	bl	800087c <flash_access_clear_signature_page>
}
 8000870:	bf00      	nop
 8000872:	bd80      	pop	{r7, pc}
 8000874:	200001e0 	.word	0x200001e0
 8000878:	0803c000 	.word	0x0803c000

0800087c <flash_access_clear_signature_page>:


void flash_access_clear_signature_page(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
	memset(&g_flash_access_signature_page, 0, sizeof(g_flash_access_signature_page_t));
 8000880:	2208      	movs	r2, #8
 8000882:	2100      	movs	r1, #0
 8000884:	4804      	ldr	r0, [pc, #16]	; (8000898 <flash_access_clear_signature_page+0x1c>)
 8000886:	f008 fd4d 	bl	8009324 <memset>
	flash_write(FLASH_ACCESS_STORAGE_ADDR_START, (uint64_t *)&g_flash_access_signature_page, sizeof(g_flash_access_signature_page_t));
 800088a:	2208      	movs	r2, #8
 800088c:	4902      	ldr	r1, [pc, #8]	; (8000898 <flash_access_clear_signature_page+0x1c>)
 800088e:	4803      	ldr	r0, [pc, #12]	; (800089c <flash_access_clear_signature_page+0x20>)
 8000890:	f000 f8b6 	bl	8000a00 <flash_write>
}
 8000894:	bf00      	nop
 8000896:	bd80      	pop	{r7, pc}
 8000898:	200001e0 	.word	0x200001e0
 800089c:	0803c000 	.word	0x0803c000

080008a0 <flash_access_enroll_update>:


void flash_access_enroll_update(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
	g_flash_access_signature_page.gt_521fx_last_id++;
 80008a4:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <flash_access_enroll_update+0x28>)
 80008a6:	685b      	ldr	r3, [r3, #4]
 80008a8:	3301      	adds	r3, #1
 80008aa:	4a07      	ldr	r2, [pc, #28]	; (80008c8 <flash_access_enroll_update+0x28>)
 80008ac:	6053      	str	r3, [r2, #4]
	g_flash_access_signature_page.gt_521fx_enroll_count++;
 80008ae:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <flash_access_enroll_update+0x28>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	3301      	adds	r3, #1
 80008b4:	4a04      	ldr	r2, [pc, #16]	; (80008c8 <flash_access_enroll_update+0x28>)
 80008b6:	6013      	str	r3, [r2, #0]
	flash_write(FLASH_ACCESS_STORAGE_ADDR_START, (uint64_t *)&g_flash_access_signature_page, sizeof(g_flash_access_signature_page_t));
 80008b8:	2208      	movs	r2, #8
 80008ba:	4903      	ldr	r1, [pc, #12]	; (80008c8 <flash_access_enroll_update+0x28>)
 80008bc:	4803      	ldr	r0, [pc, #12]	; (80008cc <flash_access_enroll_update+0x2c>)
 80008be:	f000 f89f 	bl	8000a00 <flash_write>
}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	200001e0 	.word	0x200001e0
 80008cc:	0803c000 	.word	0x0803c000

080008d0 <flash_access_gt521fx_last_id>:


uint16_t flash_access_gt521fx_last_id(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
	return g_flash_access_signature_page.gt_521fx_last_id;
 80008d4:	4b03      	ldr	r3, [pc, #12]	; (80008e4 <flash_access_gt521fx_last_id+0x14>)
 80008d6:	685b      	ldr	r3, [r3, #4]
 80008d8:	b29b      	uxth	r3, r3
}
 80008da:	4618      	mov	r0, r3
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr
 80008e4:	200001e0 	.word	0x200001e0

080008e8 <flash_access_gt521fx_remove_last_id>:


void flash_access_gt521fx_remove_last_id(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
	g_flash_access_signature_page.gt_521fx_last_id -= 1; // I don't care if starting at 1
 80008ec:	4b08      	ldr	r3, [pc, #32]	; (8000910 <flash_access_gt521fx_remove_last_id+0x28>)
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	3b01      	subs	r3, #1
 80008f2:	4a07      	ldr	r2, [pc, #28]	; (8000910 <flash_access_gt521fx_remove_last_id+0x28>)
 80008f4:	6053      	str	r3, [r2, #4]
	g_flash_access_signature_page.gt_521fx_enroll_count--;
 80008f6:	4b06      	ldr	r3, [pc, #24]	; (8000910 <flash_access_gt521fx_remove_last_id+0x28>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	3b01      	subs	r3, #1
 80008fc:	4a04      	ldr	r2, [pc, #16]	; (8000910 <flash_access_gt521fx_remove_last_id+0x28>)
 80008fe:	6013      	str	r3, [r2, #0]
	flash_write(FLASH_ACCESS_STORAGE_ADDR_START, (uint64_t *)&g_flash_access_signature_page, sizeof(g_flash_access_signature_page_t));
 8000900:	2208      	movs	r2, #8
 8000902:	4903      	ldr	r1, [pc, #12]	; (8000910 <flash_access_gt521fx_remove_last_id+0x28>)
 8000904:	4803      	ldr	r0, [pc, #12]	; (8000914 <flash_access_gt521fx_remove_last_id+0x2c>)
 8000906:	f000 f87b 	bl	8000a00 <flash_write>
}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	200001e0 	.word	0x200001e0
 8000914:	0803c000 	.word	0x0803c000

08000918 <flash_access_gt521fx_reset_id_count>:


void flash_access_gt521fx_reset_id_count(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
	g_flash_access_signature_page.gt_521fx_last_id = 0; // I don't care if starting at 1
 800091c:	4b06      	ldr	r3, [pc, #24]	; (8000938 <flash_access_gt521fx_reset_id_count+0x20>)
 800091e:	2200      	movs	r2, #0
 8000920:	605a      	str	r2, [r3, #4]
	g_flash_access_signature_page.gt_521fx_enroll_count = 0;
 8000922:	4b05      	ldr	r3, [pc, #20]	; (8000938 <flash_access_gt521fx_reset_id_count+0x20>)
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
	flash_write(FLASH_ACCESS_STORAGE_ADDR_START, (uint64_t *)&g_flash_access_signature_page, sizeof(g_flash_access_signature_page_t));
 8000928:	2208      	movs	r2, #8
 800092a:	4903      	ldr	r1, [pc, #12]	; (8000938 <flash_access_gt521fx_reset_id_count+0x20>)
 800092c:	4803      	ldr	r0, [pc, #12]	; (800093c <flash_access_gt521fx_reset_id_count+0x24>)
 800092e:	f000 f867 	bl	8000a00 <flash_write>

}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	200001e0 	.word	0x200001e0
 800093c:	0803c000 	.word	0x0803c000

08000940 <flash_get_page>:
	return g_flash_access_signature_page.gt_521fx_enroll_count;
}


uint32_t flash_get_page(uint32_t addr)
{
 8000940:	b480      	push	{r7}
 8000942:	b085      	sub	sp, #20
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
	uint32_t page = 0;
 8000948:	2300      	movs	r3, #0
 800094a:	60fb      	str	r3, [r7, #12]
	if (addr < (FLASH_BASE + FLASH_BANK_SIZE)) page = (addr - FLASH_BASE) / FLASH_PAGE_SIZE;
 800094c:	4b19      	ldr	r3, [pc, #100]	; (80009b4 <flash_get_page+0x74>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	b29b      	uxth	r3, r3
 8000952:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000956:	4293      	cmp	r3, r2
 8000958:	d007      	beq.n	800096a <flash_get_page+0x2a>
 800095a:	4b16      	ldr	r3, [pc, #88]	; (80009b4 <flash_get_page+0x74>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	029a      	lsls	r2, r3, #10
 8000960:	4b15      	ldr	r3, [pc, #84]	; (80009b8 <flash_get_page+0x78>)
 8000962:	4013      	ands	r3, r2
 8000964:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8000968:	e000      	b.n	800096c <flash_get_page+0x2c>
 800096a:	4b14      	ldr	r3, [pc, #80]	; (80009bc <flash_get_page+0x7c>)
 800096c:	687a      	ldr	r2, [r7, #4]
 800096e:	4293      	cmp	r3, r2
 8000970:	d905      	bls.n	800097e <flash_get_page+0x3e>
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8000978:	0adb      	lsrs	r3, r3, #11
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	e013      	b.n	80009a6 <flash_get_page+0x66>
	else page = (addr - (FLASH_BASE + FLASH_BANK_SIZE)) / FLASH_PAGE_SIZE;
 800097e:	4b0d      	ldr	r3, [pc, #52]	; (80009b4 <flash_get_page+0x74>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	b29b      	uxth	r3, r3
 8000984:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000988:	4293      	cmp	r3, r2
 800098a:	d007      	beq.n	800099c <flash_get_page+0x5c>
 800098c:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <flash_get_page+0x74>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	029a      	lsls	r2, r3, #10
 8000992:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <flash_get_page+0x78>)
 8000994:	4013      	ands	r3, r2
 8000996:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800099a:	e000      	b.n	800099e <flash_get_page+0x5e>
 800099c:	4b07      	ldr	r3, [pc, #28]	; (80009bc <flash_get_page+0x7c>)
 800099e:	687a      	ldr	r2, [r7, #4]
 80009a0:	1ad3      	subs	r3, r2, r3
 80009a2:	0adb      	lsrs	r3, r3, #11
 80009a4:	60fb      	str	r3, [r7, #12]
	return page;
 80009a6:	68fb      	ldr	r3, [r7, #12]
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	3714      	adds	r7, #20
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr
 80009b4:	1fff75e0 	.word	0x1fff75e0
 80009b8:	03fffc00 	.word	0x03fffc00
 80009bc:	08040000 	.word	0x08040000

080009c0 <flash_read>:


void flash_read(uint32_t address, uint64_t *rx_buf, uint16_t num_words)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b085      	sub	sp, #20
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	60f8      	str	r0, [r7, #12]
 80009c8:	60b9      	str	r1, [r7, #8]
 80009ca:	4613      	mov	r3, r2
 80009cc:	80fb      	strh	r3, [r7, #6]
	while(1)
	{
		*rx_buf = *(__IO uint64_t *)address;
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009d4:	68b9      	ldr	r1, [r7, #8]
 80009d6:	e9c1 2300 	strd	r2, r3, [r1]
		address += 4;
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	3304      	adds	r3, #4
 80009de:	60fb      	str	r3, [r7, #12]
		rx_buf++;
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	3308      	adds	r3, #8
 80009e4:	60bb      	str	r3, [r7, #8]
		if (!(num_words--)) break;
 80009e6:	88fb      	ldrh	r3, [r7, #6]
 80009e8:	1e5a      	subs	r2, r3, #1
 80009ea:	80fa      	strh	r2, [r7, #6]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d000      	beq.n	80009f2 <flash_read+0x32>
		*rx_buf = *(__IO uint64_t *)address;
 80009f0:	e7ed      	b.n	80009ce <flash_read+0xe>
		if (!(num_words--)) break;
 80009f2:	bf00      	nop
	}
}
 80009f4:	bf00      	nop
 80009f6:	3714      	adds	r7, #20
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr

08000a00 <flash_write>:


uint32_t flash_write(uint32_t address, uint64_t *data, uint32_t num_dbls)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b088      	sub	sp, #32
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	60f8      	str	r0, [r7, #12]
 8000a08:	60b9      	str	r1, [r7, #8]
 8000a0a:	607a      	str	r2, [r7, #4]
	static FLASH_EraseInitTypeDef erase_init_struct;
	uint32_t page_error;

	if ((address + (sizeof(uint64_t) * num_dbls)) > FLASH_ACCESS_STORAGE_ADDR_END) return -1; // error not enough allocated space
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	00da      	lsls	r2, r3, #3
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	4413      	add	r3, r2
 8000a14:	4a2b      	ldr	r2, [pc, #172]	; (8000ac4 <flash_write+0xc4>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d902      	bls.n	8000a20 <flash_write+0x20>
 8000a1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a1e:	e04c      	b.n	8000aba <flash_write+0xba>
	HAL_FLASH_Unlock();
 8000a20:	f002 faa6 	bl	8002f70 <HAL_FLASH_Unlock>

	uint32_t start_page = flash_get_page(address);
 8000a24:	68f8      	ldr	r0, [r7, #12]
 8000a26:	f7ff ff8b 	bl	8000940 <flash_get_page>
 8000a2a:	61b8      	str	r0, [r7, #24]
	uint32_t end_page = flash_get_page(address + num_dbls * 8);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	00da      	lsls	r2, r3, #3
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	4413      	add	r3, r2
 8000a34:	4618      	mov	r0, r3
 8000a36:	f7ff ff83 	bl	8000940 <flash_get_page>
 8000a3a:	6178      	str	r0, [r7, #20]

	erase_init_struct.Banks = FLASH_BANK_1;
 8000a3c:	4b22      	ldr	r3, [pc, #136]	; (8000ac8 <flash_write+0xc8>)
 8000a3e:	2201      	movs	r2, #1
 8000a40:	605a      	str	r2, [r3, #4]
	erase_init_struct.TypeErase = FLASH_TYPEERASE_PAGES;
 8000a42:	4b21      	ldr	r3, [pc, #132]	; (8000ac8 <flash_write+0xc8>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
	erase_init_struct.Page = start_page;
 8000a48:	4a1f      	ldr	r2, [pc, #124]	; (8000ac8 <flash_write+0xc8>)
 8000a4a:	69bb      	ldr	r3, [r7, #24]
 8000a4c:	6093      	str	r3, [r2, #8]
	erase_init_struct.NbPages = ((end_page - start_page) / FLASH_PAGE_SIZE) + 1;
 8000a4e:	697a      	ldr	r2, [r7, #20]
 8000a50:	69bb      	ldr	r3, [r7, #24]
 8000a52:	1ad3      	subs	r3, r2, r3
 8000a54:	0adb      	lsrs	r3, r3, #11
 8000a56:	3301      	adds	r3, #1
 8000a58:	4a1b      	ldr	r2, [pc, #108]	; (8000ac8 <flash_write+0xc8>)
 8000a5a:	60d3      	str	r3, [r2, #12]

	if (HAL_OK != HAL_FLASHEx_Erase(&erase_init_struct, &page_error)) return HAL_FLASH_GetError();
 8000a5c:	f107 0310 	add.w	r3, r7, #16
 8000a60:	4619      	mov	r1, r3
 8000a62:	4819      	ldr	r0, [pc, #100]	; (8000ac8 <flash_write+0xc8>)
 8000a64:	f002 fb76 	bl	8003154 <HAL_FLASHEx_Erase>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d003      	beq.n	8000a76 <flash_write+0x76>
 8000a6e:	f002 fab1 	bl	8002fd4 <HAL_FLASH_GetError>
 8000a72:	4603      	mov	r3, r0
 8000a74:	e021      	b.n	8000aba <flash_write+0xba>
	for (uint32_t i = 0; i < num_dbls; i++)
 8000a76:	2300      	movs	r3, #0
 8000a78:	61fb      	str	r3, [r7, #28]
 8000a7a:	e017      	b.n	8000aac <flash_write+0xac>
	{
		if (HAL_OK == HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, data[i])) address += 8;
 8000a7c:	69fb      	ldr	r3, [r7, #28]
 8000a7e:	00db      	lsls	r3, r3, #3
 8000a80:	68ba      	ldr	r2, [r7, #8]
 8000a82:	4413      	add	r3, r2
 8000a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a88:	68f9      	ldr	r1, [r7, #12]
 8000a8a:	2000      	movs	r0, #0
 8000a8c:	f002 fa04 	bl	8002e98 <HAL_FLASH_Program>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d103      	bne.n	8000a9e <flash_write+0x9e>
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	3308      	adds	r3, #8
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	e003      	b.n	8000aa6 <flash_write+0xa6>
		else return HAL_FLASH_GetError();
 8000a9e:	f002 fa99 	bl	8002fd4 <HAL_FLASH_GetError>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	e009      	b.n	8000aba <flash_write+0xba>
	for (uint32_t i = 0; i < num_dbls; i++)
 8000aa6:	69fb      	ldr	r3, [r7, #28]
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	61fb      	str	r3, [r7, #28]
 8000aac:	69fa      	ldr	r2, [r7, #28]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	d3e3      	bcc.n	8000a7c <flash_write+0x7c>
	}
	HAL_FLASH_Lock();
 8000ab4:	f002 fa7e 	bl	8002fb4 <HAL_FLASH_Lock>
	return 0;
 8000ab8:	2300      	movs	r3, #0
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3720      	adds	r7, #32
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	0803ffff 	.word	0x0803ffff
 8000ac8:	200001e8 	.word	0x200001e8

08000acc <gt521fx_nack_flag_set>:
// local prototypes
uint16_t gt521fx_enrolled_fingerprint_count(void);


void gt521fx_nack_flag_set(bool flag)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	71fb      	strb	r3, [r7, #7]
	g_nack_flag = flag;
 8000ad6:	4a04      	ldr	r2, [pc, #16]	; (8000ae8 <gt521fx_nack_flag_set+0x1c>)
 8000ad8:	79fb      	ldrb	r3, [r7, #7]
 8000ada:	7013      	strb	r3, [r2, #0]
}
 8000adc:	bf00      	nop
 8000ade:	370c      	adds	r7, #12
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr
 8000ae8:	200001f8 	.word	0x200001f8

08000aec <gt521fx_nack_state_set>:


void gt521fx_nack_state_set(gt_521fx_error_e err)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	80fb      	strh	r3, [r7, #6]
	g_nack_state = err;
 8000af6:	4a04      	ldr	r2, [pc, #16]	; (8000b08 <gt521fx_nack_state_set+0x1c>)
 8000af8:	88fb      	ldrh	r3, [r7, #6]
 8000afa:	8013      	strh	r3, [r2, #0]
}
 8000afc:	bf00      	nop
 8000afe:	370c      	adds	r7, #12
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr
 8000b08:	2000000a 	.word	0x2000000a

08000b0c <gt521fx_nack_flag>:


bool gt521fx_nack_flag(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
	return g_nack_flag;
 8000b10:	4b03      	ldr	r3, [pc, #12]	; (8000b20 <gt521fx_nack_flag+0x14>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	200001f8 	.word	0x200001f8

08000b24 <gt521fx_enrolled_fingerprint_count_set>:
	return g_enrolled_fingerprint_count;
}


void gt521fx_enrolled_fingerprint_count_set(uint16_t count)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	80fb      	strh	r3, [r7, #6]
	g_enrolled_fingerprint_count = count;
 8000b2e:	4a04      	ldr	r2, [pc, #16]	; (8000b40 <gt521fx_enrolled_fingerprint_count_set+0x1c>)
 8000b30:	88fb      	ldrh	r3, [r7, #6]
 8000b32:	8013      	strh	r3, [r2, #0]
}
 8000b34:	bf00      	nop
 8000b36:	370c      	adds	r7, #12
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	200001fe 	.word	0x200001fe

08000b44 <gt521fx_finger_is_pressed_clear>:
	return g_gt521fx_initialized;
}


void gt521fx_finger_is_pressed_clear(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
	g_finger_success_count = 0;
 8000b48:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <gt521fx_finger_is_pressed_clear+0x1c>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	701a      	strb	r2, [r3, #0]
	g_finger_is_pressed = false;
 8000b4e:	4b05      	ldr	r3, [pc, #20]	; (8000b64 <gt521fx_finger_is_pressed_clear+0x20>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	701a      	strb	r2, [r3, #0]
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	200001fb 	.word	0x200001fb
 8000b64:	200001f9 	.word	0x200001f9

08000b68 <gt521fx_finger_is_pressed_set>:


void gt521fx_finger_is_pressed_set(bool flag)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	71fb      	strb	r3, [r7, #7]
	if (flag)
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d013      	beq.n	8000ba0 <gt521fx_finger_is_pressed_set+0x38>
	{
		g_finger_success_count++;
 8000b78:	4b0f      	ldr	r3, [pc, #60]	; (8000bb8 <gt521fx_finger_is_pressed_set+0x50>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	b2da      	uxtb	r2, r3
 8000b80:	4b0d      	ldr	r3, [pc, #52]	; (8000bb8 <gt521fx_finger_is_pressed_set+0x50>)
 8000b82:	701a      	strb	r2, [r3, #0]
		if (g_finger_success_count >= g_finger_debounce_count) g_finger_is_pressed = true;
 8000b84:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <gt521fx_finger_is_pressed_set+0x50>)
 8000b86:	781a      	ldrb	r2, [r3, #0]
 8000b88:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <gt521fx_finger_is_pressed_set+0x54>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	d303      	bcc.n	8000b98 <gt521fx_finger_is_pressed_set+0x30>
 8000b90:	4b0b      	ldr	r3, [pc, #44]	; (8000bc0 <gt521fx_finger_is_pressed_set+0x58>)
 8000b92:	2201      	movs	r2, #1
 8000b94:	701a      	strb	r2, [r3, #0]
	else
	{
		g_finger_success_count = 0;
		g_finger_is_pressed = false;
	}
}
 8000b96:	e009      	b.n	8000bac <gt521fx_finger_is_pressed_set+0x44>
		else g_finger_is_pressed = false;
 8000b98:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <gt521fx_finger_is_pressed_set+0x58>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	701a      	strb	r2, [r3, #0]
}
 8000b9e:	e005      	b.n	8000bac <gt521fx_finger_is_pressed_set+0x44>
		g_finger_success_count = 0;
 8000ba0:	4b05      	ldr	r3, [pc, #20]	; (8000bb8 <gt521fx_finger_is_pressed_set+0x50>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	701a      	strb	r2, [r3, #0]
		g_finger_is_pressed = false;
 8000ba6:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <gt521fx_finger_is_pressed_set+0x58>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	701a      	strb	r2, [r3, #0]
}
 8000bac:	bf00      	nop
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	200001fb 	.word	0x200001fb
 8000bbc:	20000008 	.word	0x20000008
 8000bc0:	200001f9 	.word	0x200001f9

08000bc4 <gt521fx_finger_is_pressed_flag>:


bool gt521fx_finger_is_pressed_flag(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
	return g_finger_is_pressed;
 8000bc8:	4b03      	ldr	r3, [pc, #12]	; (8000bd8 <gt521fx_finger_is_pressed_flag+0x14>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	200001f9 	.word	0x200001f9

08000bdc <gt521fx_security_lvl_set>:


void gt521fx_security_lvl_set(uint8_t lvl)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	71fb      	strb	r3, [r7, #7]
	g_security_lvl = lvl;
 8000be6:	4a04      	ldr	r2, [pc, #16]	; (8000bf8 <gt521fx_security_lvl_set+0x1c>)
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	7013      	strb	r3, [r2, #0]
}
 8000bec:	bf00      	nop
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	200001fa 	.word	0x200001fa

08000bfc <gt521fx_identified_id_set>:


void gt521fx_identified_id_set(uint16_t id)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	80fb      	strh	r3, [r7, #6]
	g_identified_id = id;
 8000c06:	4a04      	ldr	r2, [pc, #16]	; (8000c18 <gt521fx_identified_id_set+0x1c>)
 8000c08:	88fb      	ldrh	r3, [r7, #6]
 8000c0a:	8013      	strh	r3, [r2, #0]
}
 8000c0c:	bf00      	nop
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	200001fc 	.word	0x200001fc

08000c1c <gt521fx_led_on>:
	return g_identified_id;
}


void gt521fx_led_on(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
	packet_create_cmd_and_send((p_packet_handle_t)&gt521fx_tx_pkt, GT521FX_CMD_CMOS_LED, LED_ON);
 8000c20:	2201      	movs	r2, #1
 8000c22:	2112      	movs	r1, #18
 8000c24:	4802      	ldr	r0, [pc, #8]	; (8000c30 <gt521fx_led_on+0x14>)
 8000c26:	f000 fb5d 	bl	80012e4 <packet_create_cmd_and_send>
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20000200 	.word	0x20000200

08000c34 <gt521fx_led_off>:


void gt521fx_led_off(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
	packet_create_cmd_and_send((p_packet_handle_t)&gt521fx_tx_pkt, GT521FX_CMD_CMOS_LED, LED_OFF);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	2112      	movs	r1, #18
 8000c3c:	4802      	ldr	r0, [pc, #8]	; (8000c48 <gt521fx_led_off+0x14>)
 8000c3e:	f000 fb51 	bl	80012e4 <packet_create_cmd_and_send>
}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	20000200 	.word	0x20000200

08000c4c <gt521fx_open>:


void gt521fx_open(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
	packet_create_cmd_and_send((p_packet_handle_t)&gt521fx_tx_pkt, GT521FX_CMD_OPEN, 0);
 8000c50:	2200      	movs	r2, #0
 8000c52:	2101      	movs	r1, #1
 8000c54:	4802      	ldr	r0, [pc, #8]	; (8000c60 <gt521fx_open+0x14>)
 8000c56:	f000 fb45 	bl	80012e4 <packet_create_cmd_and_send>
}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	20000200 	.word	0x20000200

08000c64 <gt521fx_start_enrollment>:
	packet_create_cmd_and_send((p_packet_handle_t)&gt521fx_tx_pkt, GT521FX_CMD_CHANGE_BAUD_RATE, baud_rate);
}


void gt521fx_start_enrollment(uint16_t id)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	80fb      	strh	r3, [r7, #6]
	packet_create_cmd_and_send((p_packet_handle_t)&gt521fx_tx_pkt, GT521FX_CMD_ENROLL_START, id);
 8000c6e:	88fb      	ldrh	r3, [r7, #6]
 8000c70:	461a      	mov	r2, r3
 8000c72:	2122      	movs	r1, #34	; 0x22
 8000c74:	4803      	ldr	r0, [pc, #12]	; (8000c84 <gt521fx_start_enrollment+0x20>)
 8000c76:	f000 fb35 	bl	80012e4 <packet_create_cmd_and_send>
}
 8000c7a:	bf00      	nop
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	20000200 	.word	0x20000200

08000c88 <gt521fx_finger_is_pressed>:


void gt521fx_finger_is_pressed(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
	packet_create_cmd_and_send((p_packet_handle_t)&gt521fx_tx_pkt, GT521FX_CMD_IS_PRESS_FINGER, 0xff);
 8000c8c:	22ff      	movs	r2, #255	; 0xff
 8000c8e:	2126      	movs	r1, #38	; 0x26
 8000c90:	4802      	ldr	r0, [pc, #8]	; (8000c9c <gt521fx_finger_is_pressed+0x14>)
 8000c92:	f000 fb27 	bl	80012e4 <packet_create_cmd_and_send>
}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	20000200 	.word	0x20000200

08000ca0 <gt521fx_delete_all_fingerprints>:


void gt521fx_delete_all_fingerprints(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
	packet_create_cmd_and_send((p_packet_handle_t)&gt521fx_tx_pkt, GT521FX_CMD_DELETE_ALL, 0);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	2141      	movs	r1, #65	; 0x41
 8000ca8:	4802      	ldr	r0, [pc, #8]	; (8000cb4 <gt521fx_delete_all_fingerprints+0x14>)
 8000caa:	f000 fb1b 	bl	80012e4 <packet_create_cmd_and_send>
}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20000200 	.word	0x20000200

08000cb8 <gt521fx_delete_fingerprint>:


void gt521fx_delete_fingerprint(uint16_t id)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	80fb      	strh	r3, [r7, #6]
	packet_create_cmd_and_send((p_packet_handle_t)&gt521fx_tx_pkt, GT521FX_CMD_DELETE_ID, id);
 8000cc2:	88fb      	ldrh	r3, [r7, #6]
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	2140      	movs	r1, #64	; 0x40
 8000cc8:	4803      	ldr	r0, [pc, #12]	; (8000cd8 <gt521fx_delete_fingerprint+0x20>)
 8000cca:	f000 fb0b 	bl	80012e4 <packet_create_cmd_and_send>
}
 8000cce:	bf00      	nop
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	20000200 	.word	0x20000200

08000cdc <gt521fx_fingerprint_identify>:
	else return true;
}


bool gt521fx_fingerprint_identify(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
	packet_create_cmd_and_send((p_packet_handle_t)&gt521fx_tx_pkt, GT521FX_CMD_IDENTIFY, 0);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	2151      	movs	r1, #81	; 0x51
 8000ce4:	480b      	ldr	r0, [pc, #44]	; (8000d14 <gt521fx_fingerprint_identify+0x38>)
 8000ce6:	f000 fafd 	bl	80012e4 <packet_create_cmd_and_send>
	while(!pkt_received());
 8000cea:	bf00      	nop
 8000cec:	f000 fb8c 	bl	8001408 <pkt_received>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	f083 0301 	eor.w	r3, r3, #1
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d1f7      	bne.n	8000cec <gt521fx_fingerprint_identify+0x10>
	clear_pkt_received_flag();
 8000cfc:	f000 fb98 	bl	8001430 <clear_pkt_received_flag>
	if (gt521fx_nack_flag()) return false;
 8000d00:	f7ff ff04 	bl	8000b0c <gt521fx_nack_flag>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <gt521fx_fingerprint_identify+0x32>
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	e000      	b.n	8000d10 <gt521fx_fingerprint_identify+0x34>
	else return true;
 8000d0e:	2301      	movs	r3, #1
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	20000200 	.word	0x20000200

08000d18 <gt521fx_capture_finger>:


void gt521fx_capture_finger(bool enroll_stage)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	71fb      	strb	r3, [r7, #7]
	uint8_t input_parameter;
	if (enroll_stage) input_parameter = 0xFF;
 8000d22:	79fb      	ldrb	r3, [r7, #7]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d002      	beq.n	8000d2e <gt521fx_capture_finger+0x16>
 8000d28:	23ff      	movs	r3, #255	; 0xff
 8000d2a:	73fb      	strb	r3, [r7, #15]
 8000d2c:	e001      	b.n	8000d32 <gt521fx_capture_finger+0x1a>
	else input_parameter = 0;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	73fb      	strb	r3, [r7, #15]
	packet_create_cmd_and_send((p_packet_handle_t)&gt521fx_tx_pkt, GT521FX_CMD_CAPTURE_FINGER, input_parameter);
 8000d32:	7bfb      	ldrb	r3, [r7, #15]
 8000d34:	461a      	mov	r2, r3
 8000d36:	2160      	movs	r1, #96	; 0x60
 8000d38:	4803      	ldr	r0, [pc, #12]	; (8000d48 <gt521fx_capture_finger+0x30>)
 8000d3a:	f000 fad3 	bl	80012e4 <packet_create_cmd_and_send>
}
 8000d3e:	bf00      	nop
 8000d40:	3710      	adds	r7, #16
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	20000200 	.word	0x20000200

08000d4c <gt521fx_enrollment>:
	else return true;
}


void gt521fx_enrollment(gt_521fx_enrollment_stage_e stage)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	71fb      	strb	r3, [r7, #7]
	gt_521fx_cmd_e cmd_stage = GT521FX_CMD_ENROLL_1;
 8000d56:	2323      	movs	r3, #35	; 0x23
 8000d58:	73fb      	strb	r3, [r7, #15]
	switch (stage)
 8000d5a:	79fb      	ldrb	r3, [r7, #7]
 8000d5c:	2b02      	cmp	r3, #2
 8000d5e:	d00c      	beq.n	8000d7a <gt521fx_enrollment+0x2e>
 8000d60:	2b02      	cmp	r3, #2
 8000d62:	dc0d      	bgt.n	8000d80 <gt521fx_enrollment+0x34>
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d002      	beq.n	8000d6e <gt521fx_enrollment+0x22>
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	d003      	beq.n	8000d74 <gt521fx_enrollment+0x28>
 8000d6c:	e008      	b.n	8000d80 <gt521fx_enrollment+0x34>
	{
		case GT521FX_ENROLLMENT_STAGE_FIRST: cmd_stage = GT521FX_CMD_ENROLL_1; break;
 8000d6e:	2323      	movs	r3, #35	; 0x23
 8000d70:	73fb      	strb	r3, [r7, #15]
 8000d72:	e006      	b.n	8000d82 <gt521fx_enrollment+0x36>
		case GT521FX_ENROLLMENT_STAGE_SECOND: cmd_stage = GT521FX_CMD_ENROLL_2; break;
 8000d74:	2324      	movs	r3, #36	; 0x24
 8000d76:	73fb      	strb	r3, [r7, #15]
 8000d78:	e003      	b.n	8000d82 <gt521fx_enrollment+0x36>
		case GT521FX_ENROLLMENT_STAGE_THIRD: cmd_stage = GT521FX_CMD_ENROLL_3; break;
 8000d7a:	2325      	movs	r3, #37	; 0x25
 8000d7c:	73fb      	strb	r3, [r7, #15]
 8000d7e:	e000      	b.n	8000d82 <gt521fx_enrollment+0x36>
		default: while(1);
 8000d80:	e7fe      	b.n	8000d80 <gt521fx_enrollment+0x34>
	}
	packet_create_cmd_and_send((p_packet_handle_t)&gt521fx_tx_pkt, cmd_stage, 0);
 8000d82:	7bfb      	ldrb	r3, [r7, #15]
 8000d84:	2200      	movs	r2, #0
 8000d86:	4619      	mov	r1, r3
 8000d88:	4803      	ldr	r0, [pc, #12]	; (8000d98 <gt521fx_enrollment+0x4c>)
 8000d8a:	f000 faab 	bl	80012e4 <packet_create_cmd_and_send>
}
 8000d8e:	bf00      	nop
 8000d90:	3710      	adds	r7, #16
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20000200 	.word	0x20000200

08000d9c <keypad_init>:
keypad_col_e g_col_index = KEYPAD_COL_ONE;
keypad_row_e g_row_index = KEYPAD_ROW_ONE;


void keypad_init(void)
{
 8000d9c:	b490      	push	{r4, r7}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
	// '*' = 10, '0' = 11, '#' = 12
	uint8_t setting = 1;
 8000da2:	2301      	movs	r3, #1
 8000da4:	71fb      	strb	r3, [r7, #7]
	for (keypad_row_e row = KEYPAD_ROW_FIRST; row < KEYPAD_NUM_ROWS; row++)
 8000da6:	2300      	movs	r3, #0
 8000da8:	71bb      	strb	r3, [r7, #6]
 8000daa:	e017      	b.n	8000ddc <keypad_init+0x40>
	{
		for (keypad_col_e col = KEYPAD_COL_FIRST; col < KEYPAD_NUM_COLS; col++) g_keys[row][col] = setting++;
 8000dac:	2300      	movs	r3, #0
 8000dae:	717b      	strb	r3, [r7, #5]
 8000db0:	e00e      	b.n	8000dd0 <keypad_init+0x34>
 8000db2:	79fa      	ldrb	r2, [r7, #7]
 8000db4:	1c53      	adds	r3, r2, #1
 8000db6:	71fb      	strb	r3, [r7, #7]
 8000db8:	79b9      	ldrb	r1, [r7, #6]
 8000dba:	7978      	ldrb	r0, [r7, #5]
 8000dbc:	4c0c      	ldr	r4, [pc, #48]	; (8000df0 <keypad_init+0x54>)
 8000dbe:	460b      	mov	r3, r1
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	440b      	add	r3, r1
 8000dc4:	4423      	add	r3, r4
 8000dc6:	4403      	add	r3, r0
 8000dc8:	701a      	strb	r2, [r3, #0]
 8000dca:	797b      	ldrb	r3, [r7, #5]
 8000dcc:	3301      	adds	r3, #1
 8000dce:	717b      	strb	r3, [r7, #5]
 8000dd0:	797b      	ldrb	r3, [r7, #5]
 8000dd2:	2b02      	cmp	r3, #2
 8000dd4:	d9ed      	bls.n	8000db2 <keypad_init+0x16>
	for (keypad_row_e row = KEYPAD_ROW_FIRST; row < KEYPAD_NUM_ROWS; row++)
 8000dd6:	79bb      	ldrb	r3, [r7, #6]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	71bb      	strb	r3, [r7, #6]
 8000ddc:	79bb      	ldrb	r3, [r7, #6]
 8000dde:	2b03      	cmp	r3, #3
 8000de0:	d9e4      	bls.n	8000dac <keypad_init+0x10>
	}
}
 8000de2:	bf00      	nop
 8000de4:	bf00      	nop
 8000de6:	3708      	adds	r7, #8
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bc90      	pop	{r4, r7}
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	2000020c 	.word	0x2000020c

08000df4 <keypad_password_check>:


bool keypad_password_check(uint8_t *user_input)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b085      	sub	sp, #20
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < KEYPAD_PASSWORD_LENGTH; i++) if (g_password[i] != user_input[i]) return false;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	e00e      	b.n	8000e20 <keypad_password_check+0x2c>
 8000e02:	4a0c      	ldr	r2, [pc, #48]	; (8000e34 <keypad_password_check+0x40>)
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	4413      	add	r3, r2
 8000e08:	781a      	ldrb	r2, [r3, #0]
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	6879      	ldr	r1, [r7, #4]
 8000e0e:	440b      	add	r3, r1
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	429a      	cmp	r2, r3
 8000e14:	d001      	beq.n	8000e1a <keypad_password_check+0x26>
 8000e16:	2300      	movs	r3, #0
 8000e18:	e006      	b.n	8000e28 <keypad_password_check+0x34>
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	2b07      	cmp	r3, #7
 8000e24:	dded      	ble.n	8000e02 <keypad_password_check+0xe>
	return true;
 8000e26:	2301      	movs	r3, #1
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3714      	adds	r7, #20
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	2000000c 	.word	0x2000000c

08000e38 <keypad_lookup>:


uint8_t keypad_lookup(keypad_row_e row, keypad_col_e col)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	460a      	mov	r2, r1
 8000e42:	71fb      	strb	r3, [r7, #7]
 8000e44:	4613      	mov	r3, r2
 8000e46:	71bb      	strb	r3, [r7, #6]
	return (g_keys[row][col]); // '*' = 10, '0' = 11, '#' = 12
 8000e48:	79fa      	ldrb	r2, [r7, #7]
 8000e4a:	79b9      	ldrb	r1, [r7, #6]
 8000e4c:	4806      	ldr	r0, [pc, #24]	; (8000e68 <keypad_lookup+0x30>)
 8000e4e:	4613      	mov	r3, r2
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	4413      	add	r3, r2
 8000e54:	4403      	add	r3, r0
 8000e56:	440b      	add	r3, r1
 8000e58:	781b      	ldrb	r3, [r3, #0]
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	370c      	adds	r7, #12
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	2000020c 	.word	0x2000020c

08000e6c <keypad_button_pressed>:


uint8_t keypad_button_pressed(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
	return g_last_button_pressed;
 8000e70:	4b03      	ldr	r3, [pc, #12]	; (8000e80 <keypad_button_pressed+0x14>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	20000218 	.word	0x20000218

08000e84 <keypad_scan>:


bool keypad_scan(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
	bool ret_val = false;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	73fb      	strb	r3, [r7, #15]
	uint16_t row_pin = 0;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	81bb      	strh	r3, [r7, #12]
	uint16_t col_pin = 0;
 8000e92:	2300      	movs	r3, #0
 8000e94:	817b      	strh	r3, [r7, #10]
	GPIO_TypeDef *col_port = 0;
 8000e96:	2300      	movs	r3, #0
 8000e98:	607b      	str	r3, [r7, #4]
	switch(g_row_index)
 8000e9a:	4b49      	ldr	r3, [pc, #292]	; (8000fc0 <keypad_scan+0x13c>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	2b03      	cmp	r3, #3
 8000ea0:	d819      	bhi.n	8000ed6 <keypad_scan+0x52>
 8000ea2:	a201      	add	r2, pc, #4	; (adr r2, 8000ea8 <keypad_scan+0x24>)
 8000ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ea8:	08000eb9 	.word	0x08000eb9
 8000eac:	08000ebf 	.word	0x08000ebf
 8000eb0:	08000ec7 	.word	0x08000ec7
 8000eb4:	08000ecf 	.word	0x08000ecf
	{
		case KEYPAD_ROW_ONE: row_pin = KEYPAD_ROW_ONE_PIN; break;
 8000eb8:	2320      	movs	r3, #32
 8000eba:	81bb      	strh	r3, [r7, #12]
 8000ebc:	e00c      	b.n	8000ed8 <keypad_scan+0x54>
		case KEYPAD_ROW_TWO: row_pin = KEYPAD_ROW_TWO_PIN; break;
 8000ebe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ec2:	81bb      	strh	r3, [r7, #12]
 8000ec4:	e008      	b.n	8000ed8 <keypad_scan+0x54>
		case KEYPAD_ROW_THREE: row_pin = KEYPAD_ROW_THREE_PIN; break;
 8000ec6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000eca:	81bb      	strh	r3, [r7, #12]
 8000ecc:	e004      	b.n	8000ed8 <keypad_scan+0x54>
		case KEYPAD_ROW_FOUR: row_pin = KEYPAD_ROW_FOUR_PIN; break;
 8000ece:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ed2:	81bb      	strh	r3, [r7, #12]
 8000ed4:	e000      	b.n	8000ed8 <keypad_scan+0x54>
		default: while(1); break;
 8000ed6:	e7fe      	b.n	8000ed6 <keypad_scan+0x52>
	}
	switch(g_col_index)
 8000ed8:	4b3a      	ldr	r3, [pc, #232]	; (8000fc4 <keypad_scan+0x140>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	2b02      	cmp	r3, #2
 8000ede:	d011      	beq.n	8000f04 <keypad_scan+0x80>
 8000ee0:	2b02      	cmp	r3, #2
 8000ee2:	dc15      	bgt.n	8000f10 <keypad_scan+0x8c>
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d002      	beq.n	8000eee <keypad_scan+0x6a>
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d006      	beq.n	8000efa <keypad_scan+0x76>
 8000eec:	e010      	b.n	8000f10 <keypad_scan+0x8c>
	{
		case KEYPAD_COL_ONE:
			col_pin = KEYPAD_COL_ONE_PIN;
 8000eee:	2304      	movs	r3, #4
 8000ef0:	817b      	strh	r3, [r7, #10]
			col_port = GPIOA;
 8000ef2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000ef6:	607b      	str	r3, [r7, #4]
		break;
 8000ef8:	e00b      	b.n	8000f12 <keypad_scan+0x8e>
		case KEYPAD_COL_TWO:
			col_pin = KEYPAD_COL_TWO_PIN;
 8000efa:	2304      	movs	r3, #4
 8000efc:	817b      	strh	r3, [r7, #10]
			col_port = GPIOB;
 8000efe:	4b32      	ldr	r3, [pc, #200]	; (8000fc8 <keypad_scan+0x144>)
 8000f00:	607b      	str	r3, [r7, #4]
		break;
 8000f02:	e006      	b.n	8000f12 <keypad_scan+0x8e>
		case KEYPAD_COL_THREE:
			col_pin = KEYPAD_COL_THREE_PIN;
 8000f04:	2308      	movs	r3, #8
 8000f06:	817b      	strh	r3, [r7, #10]
			col_port = GPIOA;
 8000f08:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f0c:	607b      	str	r3, [r7, #4]
		break;
 8000f0e:	e000      	b.n	8000f12 <keypad_scan+0x8e>
		default: while(1);
 8000f10:	e7fe      	b.n	8000f10 <keypad_scan+0x8c>
	}
	HAL_GPIO_WritePin(col_port, col_pin, GPIO_PIN_SET);
 8000f12:	897b      	ldrh	r3, [r7, #10]
 8000f14:	2201      	movs	r2, #1
 8000f16:	4619      	mov	r1, r3
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f002 fbd3 	bl	80036c4 <HAL_GPIO_WritePin>
	if (GPIO_PIN_SET == HAL_GPIO_ReadPin(GPIOB, row_pin))
 8000f1e:	89bb      	ldrh	r3, [r7, #12]
 8000f20:	4619      	mov	r1, r3
 8000f22:	4829      	ldr	r0, [pc, #164]	; (8000fc8 <keypad_scan+0x144>)
 8000f24:	f002 fbb6 	bl	8003694 <HAL_GPIO_ReadPin>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d10a      	bne.n	8000f44 <keypad_scan+0xc0>
	{
		while (GPIO_PIN_SET == HAL_GPIO_ReadPin(GPIOB, row_pin));
 8000f2e:	bf00      	nop
 8000f30:	89bb      	ldrh	r3, [r7, #12]
 8000f32:	4619      	mov	r1, r3
 8000f34:	4824      	ldr	r0, [pc, #144]	; (8000fc8 <keypad_scan+0x144>)
 8000f36:	f002 fbad 	bl	8003694 <HAL_GPIO_ReadPin>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d0f7      	beq.n	8000f30 <keypad_scan+0xac>
		ret_val = true;
 8000f40:	2301      	movs	r3, #1
 8000f42:	73fb      	strb	r3, [r7, #15]
	}
	HAL_GPIO_WritePin(col_port, col_pin, GPIO_PIN_RESET);
 8000f44:	897b      	ldrh	r3, [r7, #10]
 8000f46:	2200      	movs	r2, #0
 8000f48:	4619      	mov	r1, r3
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	f002 fbba 	bl	80036c4 <HAL_GPIO_WritePin>
	if (ret_val)
 8000f50:	7bfb      	ldrb	r3, [r7, #15]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d012      	beq.n	8000f7c <keypad_scan+0xf8>
	{
		g_last_button_pressed = keypad_lookup(g_row_index, g_col_index);
 8000f56:	4b1a      	ldr	r3, [pc, #104]	; (8000fc0 <keypad_scan+0x13c>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	4a1a      	ldr	r2, [pc, #104]	; (8000fc4 <keypad_scan+0x140>)
 8000f5c:	7812      	ldrb	r2, [r2, #0]
 8000f5e:	4611      	mov	r1, r2
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff ff69 	bl	8000e38 <keypad_lookup>
 8000f66:	4603      	mov	r3, r0
 8000f68:	461a      	mov	r2, r3
 8000f6a:	4b18      	ldr	r3, [pc, #96]	; (8000fcc <keypad_scan+0x148>)
 8000f6c:	701a      	strb	r2, [r3, #0]
		g_row_index = KEYPAD_ROW_ONE;
 8000f6e:	4b14      	ldr	r3, [pc, #80]	; (8000fc0 <keypad_scan+0x13c>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	701a      	strb	r2, [r3, #0]
		g_col_index = KEYPAD_COL_ONE;
 8000f74:	4b13      	ldr	r3, [pc, #76]	; (8000fc4 <keypad_scan+0x140>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	701a      	strb	r2, [r3, #0]
 8000f7a:	e01b      	b.n	8000fb4 <keypad_scan+0x130>
	}
	else if (KEYPAD_ROW_FOUR == g_row_index++)
 8000f7c:	4b10      	ldr	r3, [pc, #64]	; (8000fc0 <keypad_scan+0x13c>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	1c5a      	adds	r2, r3, #1
 8000f82:	b2d1      	uxtb	r1, r2
 8000f84:	4a0e      	ldr	r2, [pc, #56]	; (8000fc0 <keypad_scan+0x13c>)
 8000f86:	7011      	strb	r1, [r2, #0]
 8000f88:	2b03      	cmp	r3, #3
 8000f8a:	d113      	bne.n	8000fb4 <keypad_scan+0x130>
	{
		if (KEYPAD_COL_THREE == g_col_index)
 8000f8c:	4b0d      	ldr	r3, [pc, #52]	; (8000fc4 <keypad_scan+0x140>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	d106      	bne.n	8000fa2 <keypad_scan+0x11e>
		{
			g_row_index = KEYPAD_ROW_ONE;
 8000f94:	4b0a      	ldr	r3, [pc, #40]	; (8000fc0 <keypad_scan+0x13c>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	701a      	strb	r2, [r3, #0]
			g_col_index = KEYPAD_COL_ONE;
 8000f9a:	4b0a      	ldr	r3, [pc, #40]	; (8000fc4 <keypad_scan+0x140>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	701a      	strb	r2, [r3, #0]
 8000fa0:	e008      	b.n	8000fb4 <keypad_scan+0x130>
		}
		else
		{
			g_row_index = KEYPAD_ROW_ONE;
 8000fa2:	4b07      	ldr	r3, [pc, #28]	; (8000fc0 <keypad_scan+0x13c>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	701a      	strb	r2, [r3, #0]
			g_col_index++;
 8000fa8:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <keypad_scan+0x140>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	3301      	adds	r3, #1
 8000fae:	b2da      	uxtb	r2, r3
 8000fb0:	4b04      	ldr	r3, [pc, #16]	; (8000fc4 <keypad_scan+0x140>)
 8000fb2:	701a      	strb	r2, [r3, #0]
		}
	}
	return ret_val;
 8000fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	2000021a 	.word	0x2000021a
 8000fc4:	20000219 	.word	0x20000219
 8000fc8:	48000400 	.word	0x48000400
 8000fcc:	20000218 	.word	0x20000218

08000fd0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]

  if (htim->Instance == TIM1)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a04      	ldr	r2, [pc, #16]	; (8000ff0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d101      	bne.n	8000fe6 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
	  HAL_IncTick();
 8000fe2:	f001 fc3b 	bl	800285c <HAL_IncTick>
  }
}
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40012c00 	.word	0x40012c00

08000ff4 <main>:


int main(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
	board_init();
 8000ff8:	f7ff fa88 	bl	800050c <board_init>
	HAL_Delay(5000);
	board_init_set_wkup_src();
	HAL_PWR_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE);
#endif
	//HAL_PWR_EnterSTANDBYMode();
	osKernelInitialize();
 8000ffc:	f005 fa08 	bl	8006410 <osKernelInitialize>
	task_create();
 8001000:	f000 ffa0 	bl	8001f44 <task_create>
	osKernelStart();
 8001004:	f005 fa28 	bl	8006458 <osKernelStart>

	while(1); // should never reach this...
 8001008:	e7fe      	b.n	8001008 <main+0x14>
	...

0800100c <packet_queue_init>:
// local prototypes
void packet_rsp_set(void);


void packet_queue_init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
	g_sensor_rx_queueHandle = osMessageQueueNew(GT521FX_RX_QUEUE_DEPTH, sizeof( pkt_t ), &g_sensor_rx_queue_attributes);
 8001010:	4a0d      	ldr	r2, [pc, #52]	; (8001048 <packet_queue_init+0x3c>)
 8001012:	210c      	movs	r1, #12
 8001014:	2010      	movs	r0, #16
 8001016:	f005 faf2 	bl	80065fe <osMessageQueueNew>
 800101a:	4603      	mov	r3, r0
 800101c:	4a0b      	ldr	r2, [pc, #44]	; (800104c <packet_queue_init+0x40>)
 800101e:	6013      	str	r3, [r2, #0]
	g_sensor_tx_queueHandle = osMessageQueueNew(GT521FX_TX_QUEUE_DEPTH, sizeof( pkt_t ), &g_sensor_tx_queue_attributes);
 8001020:	4a0b      	ldr	r2, [pc, #44]	; (8001050 <packet_queue_init+0x44>)
 8001022:	210c      	movs	r1, #12
 8001024:	2010      	movs	r0, #16
 8001026:	f005 faea 	bl	80065fe <osMessageQueueNew>
 800102a:	4603      	mov	r3, r0
 800102c:	4a09      	ldr	r2, [pc, #36]	; (8001054 <packet_queue_init+0x48>)
 800102e:	6013      	str	r3, [r2, #0]
	g_gt521fx_rx_queue.handle = g_sensor_rx_queueHandle;
 8001030:	4b06      	ldr	r3, [pc, #24]	; (800104c <packet_queue_init+0x40>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a08      	ldr	r2, [pc, #32]	; (8001058 <packet_queue_init+0x4c>)
 8001036:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
	g_gt521fx_tx_queue.handle = g_sensor_tx_queueHandle;
 800103a:	4b06      	ldr	r3, [pc, #24]	; (8001054 <packet_queue_init+0x48>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a07      	ldr	r2, [pc, #28]	; (800105c <packet_queue_init+0x50>)
 8001040:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
}
 8001044:	bf00      	nop
 8001046:	bd80      	pop	{r7, pc}
 8001048:	08009cf0 	.word	0x08009cf0
 800104c:	2000039c 	.word	0x2000039c
 8001050:	08009d08 	.word	0x08009d08
 8001054:	200003a0 	.word	0x200003a0
 8001058:	20000444 	.word	0x20000444
 800105c:	20000508 	.word	0x20000508

08001060 <packet_queue_get_queue_handle>:
	}
}


osMessageQueueId_t packet_queue_get_queue_handle(pkt_queue_e selection)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	71fb      	strb	r3, [r7, #7]
	switch(selection)
 800106a:	79fb      	ldrb	r3, [r7, #7]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d002      	beq.n	8001076 <packet_queue_get_queue_handle+0x16>
 8001070:	2b01      	cmp	r3, #1
 8001072:	d004      	beq.n	800107e <packet_queue_get_queue_handle+0x1e>
 8001074:	e007      	b.n	8001086 <packet_queue_get_queue_handle+0x26>
	{
		case PKT_QUEUE_GT521FX_RX: return g_gt521fx_rx_queue.handle;
 8001076:	4b07      	ldr	r3, [pc, #28]	; (8001094 <packet_queue_get_queue_handle+0x34>)
 8001078:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800107c:	e004      	b.n	8001088 <packet_queue_get_queue_handle+0x28>
		case PKT_QUEUE_GT521FX_TX: return g_gt521fx_tx_queue.handle;
 800107e:	4b06      	ldr	r3, [pc, #24]	; (8001098 <packet_queue_get_queue_handle+0x38>)
 8001080:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001084:	e000      	b.n	8001088 <packet_queue_get_queue_handle+0x28>
		default: while(1);
 8001086:	e7fe      	b.n	8001086 <packet_queue_get_queue_handle+0x26>
	}
}
 8001088:	4618      	mov	r0, r3
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	20000444 	.word	0x20000444
 8001098:	20000508 	.word	0x20000508

0800109c <packet_enqueue>:


void packet_enqueue(p_packet_handle_t pkt_handle, pkt_src_dst_t dst)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	460b      	mov	r3, r1
 80010a6:	70fb      	strb	r3, [r7, #3]
	switch (dst)
 80010a8:	78fb      	ldrb	r3, [r7, #3]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d002      	beq.n	80010b4 <packet_enqueue+0x18>
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d00c      	beq.n	80010cc <packet_enqueue+0x30>
 80010b2:	e017      	b.n	80010e4 <packet_enqueue+0x48>
	{
		case PKT_SRC_DST_SNS_TX:
			if (osOK != osMessageQueuePut(g_gt521fx_tx_queue.handle, pkt_handle, 0, 0)) while(1);
 80010b4:	4b0f      	ldr	r3, [pc, #60]	; (80010f4 <packet_enqueue+0x58>)
 80010b6:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 80010ba:	2300      	movs	r3, #0
 80010bc:	2200      	movs	r2, #0
 80010be:	6879      	ldr	r1, [r7, #4]
 80010c0:	f005 fb10 	bl	80066e4 <osMessageQueuePut>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d00d      	beq.n	80010e6 <packet_enqueue+0x4a>
 80010ca:	e7fe      	b.n	80010ca <packet_enqueue+0x2e>
		break;
		case PKT_SRC_DST_SNS_RX:
			if (osOK != osMessageQueuePut(g_gt521fx_rx_queue.handle, pkt_handle, 0, 0)) while(1);
 80010cc:	4b0a      	ldr	r3, [pc, #40]	; (80010f8 <packet_enqueue+0x5c>)
 80010ce:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 80010d2:	2300      	movs	r3, #0
 80010d4:	2200      	movs	r2, #0
 80010d6:	6879      	ldr	r1, [r7, #4]
 80010d8:	f005 fb04 	bl	80066e4 <osMessageQueuePut>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d003      	beq.n	80010ea <packet_enqueue+0x4e>
 80010e2:	e7fe      	b.n	80010e2 <packet_enqueue+0x46>
		break;
		default: while(1);
 80010e4:	e7fe      	b.n	80010e4 <packet_enqueue+0x48>
		break;
 80010e6:	bf00      	nop
 80010e8:	e000      	b.n	80010ec <packet_enqueue+0x50>
		break;
 80010ea:	bf00      	nop
	}
}
 80010ec:	bf00      	nop
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20000508 	.word	0x20000508
 80010f8:	20000444 	.word	0x20000444

080010fc <packet_dequeue>:


void packet_dequeue(p_packet_handle_t pkt_handle, pkt_src_dst_t src)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	460b      	mov	r3, r1
 8001106:	70fb      	strb	r3, [r7, #3]
	switch(src)
 8001108:	78fb      	ldrb	r3, [r7, #3]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d002      	beq.n	8001114 <packet_dequeue+0x18>
 800110e:	2b01      	cmp	r3, #1
 8001110:	d00d      	beq.n	800112e <packet_dequeue+0x32>
 8001112:	e019      	b.n	8001148 <packet_dequeue+0x4c>
	{
		case PKT_SRC_DST_SNS_TX:
			if (osOK != osMessageQueueGet(g_gt521fx_tx_queue.handle, (uint8_t *)pkt_handle, NULL, osWaitForever)) while(1); // wtf
 8001114:	4b10      	ldr	r3, [pc, #64]	; (8001158 <packet_dequeue+0x5c>)
 8001116:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 800111a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800111e:	2200      	movs	r2, #0
 8001120:	6879      	ldr	r1, [r7, #4]
 8001122:	f005 fb3f 	bl	80067a4 <osMessageQueueGet>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d00e      	beq.n	800114a <packet_dequeue+0x4e>
 800112c:	e7fe      	b.n	800112c <packet_dequeue+0x30>
		break;
		case PKT_SRC_DST_SNS_RX:
			if (osOK != osMessageQueueGet(g_gt521fx_rx_queue.handle, (uint8_t *)pkt_handle, NULL, osWaitForever))
 800112e:	4b0b      	ldr	r3, [pc, #44]	; (800115c <packet_dequeue+0x60>)
 8001130:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 8001134:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001138:	2200      	movs	r2, #0
 800113a:	6879      	ldr	r1, [r7, #4]
 800113c:	f005 fb32 	bl	80067a4 <osMessageQueueGet>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d003      	beq.n	800114e <packet_dequeue+0x52>
			{
				while(1); // wtf
 8001146:	e7fe      	b.n	8001146 <packet_dequeue+0x4a>
			}
		break;
		default: while(1); // wtf
 8001148:	e7fe      	b.n	8001148 <packet_dequeue+0x4c>
		break;
 800114a:	bf00      	nop
 800114c:	e000      	b.n	8001150 <packet_dequeue+0x54>
		break;
 800114e:	bf00      	nop
	}
}
 8001150:	bf00      	nop
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	20000508 	.word	0x20000508
 800115c:	20000444 	.word	0x20000444

08001160 <packet_enqueue_to_sensor_tx>:


void packet_enqueue_to_sensor_tx(p_packet_handle_t pkt_handle)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
	packet_enqueue(pkt_handle, PKT_SRC_DST_SNS_TX);
 8001168:	2100      	movs	r1, #0
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f7ff ff96 	bl	800109c <packet_enqueue>
}
 8001170:	bf00      	nop
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <packet_dequeue_from_sensor_tx>:


void packet_dequeue_from_sensor_tx(p_packet_handle_t pkt_handle)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
	packet_dequeue(pkt_handle, PKT_SRC_DST_SNS_TX);
 8001180:	2100      	movs	r1, #0
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f7ff ffba 	bl	80010fc <packet_dequeue>
}
 8001188:	bf00      	nop
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <packet_dequeue_from_sensor_rx>:
	packet_enqueue(pkt_handle, PKT_SRC_DST_SNS_RX);
}


void packet_dequeue_from_sensor_rx(p_packet_handle_t pkt_handle)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
	packet_dequeue(pkt_handle, PKT_SRC_DST_SNS_RX);
 8001198:	2101      	movs	r1, #1
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f7ff ffae 	bl	80010fc <packet_dequeue>
}
 80011a0:	bf00      	nop
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <packet_parse_rsp>:


void packet_parse_rsp(p_packet_handle_t pkt_handle)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
	if (RSP_RSP_NACK == pkt_handle->rsp_rsp)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	891b      	ldrh	r3, [r3, #8]
 80011b4:	2b31      	cmp	r3, #49	; 0x31
 80011b6:	d111      	bne.n	80011dc <packet_parse_rsp+0x34>
	{
		gt521fx_nack_flag_set(true);
 80011b8:	2001      	movs	r0, #1
 80011ba:	f7ff fc87 	bl	8000acc <gt521fx_nack_flag_set>
		gt521fx_nack_state_set((gt_521fx_error_e)pkt_handle->rsp_error_code);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff fc91 	bl	8000aec <gt521fx_nack_state_set>
		switch(cmd_in_flight())
 80011ca:	f000 f87f 	bl	80012cc <cmd_in_flight>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b60      	cmp	r3, #96	; 0x60
 80011d2:	d143      	bne.n	800125c <packet_parse_rsp+0xb4>
		{
			case GT521FX_CMD_CAPTURE_FINGER: gt521fx_finger_is_pressed_set(false); break;
 80011d4:	2000      	movs	r0, #0
 80011d6:	f7ff fcc7 	bl	8000b68 <gt521fx_finger_is_pressed_set>
 80011da:	e044      	b.n	8001266 <packet_parse_rsp+0xbe>
			default: break;
		}
	}
	else if (RSP_RSP_ACK == pkt_handle->rsp_rsp)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	891b      	ldrh	r3, [r3, #8]
 80011e0:	2b30      	cmp	r3, #48	; 0x30
 80011e2:	d13d      	bne.n	8001260 <packet_parse_rsp+0xb8>
	{
		gt521fx_nack_flag_set(false);
 80011e4:	2000      	movs	r0, #0
 80011e6:	f7ff fc71 	bl	8000acc <gt521fx_nack_flag_set>
		switch(cmd_in_flight())
 80011ea:	f000 f86f 	bl	80012cc <cmd_in_flight>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2bf1      	cmp	r3, #241	; 0xf1
 80011f2:	d02c      	beq.n	800124e <packet_parse_rsp+0xa6>
 80011f4:	2bf1      	cmp	r3, #241	; 0xf1
 80011f6:	dc35      	bgt.n	8001264 <packet_parse_rsp+0xbc>
 80011f8:	2b60      	cmp	r3, #96	; 0x60
 80011fa:	d011      	beq.n	8001220 <packet_parse_rsp+0x78>
 80011fc:	2b60      	cmp	r3, #96	; 0x60
 80011fe:	dc31      	bgt.n	8001264 <packet_parse_rsp+0xbc>
 8001200:	2b51      	cmp	r3, #81	; 0x51
 8001202:	d01d      	beq.n	8001240 <packet_parse_rsp+0x98>
 8001204:	2b51      	cmp	r3, #81	; 0x51
 8001206:	dc2d      	bgt.n	8001264 <packet_parse_rsp+0xbc>
 8001208:	2b20      	cmp	r3, #32
 800120a:	d002      	beq.n	8001212 <packet_parse_rsp+0x6a>
 800120c:	2b26      	cmp	r3, #38	; 0x26
 800120e:	d00b      	beq.n	8001228 <packet_parse_rsp+0x80>
				if (0 == (pkt_handle->rsp_output_param)) gt521fx_finger_is_pressed_set(true);
				else gt521fx_finger_is_pressed_set(false);
			break;
			case GT521FX_CMD_IDENTIFY: gt521fx_identified_id_set(pkt_handle->cmd_input_param); break;
			case GT521FX_CMD_GET_SECURITY_LEVEL: gt521fx_security_lvl_set(pkt_handle->cmd_input_param); break;
			default: break;
 8001210:	e028      	b.n	8001264 <packet_parse_rsp+0xbc>
			case GT521FX_CMD_GET_ENROLL_COUNT: gt521fx_enrolled_fingerprint_count_set(pkt_handle->cmd_input_param); break;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	b29b      	uxth	r3, r3
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff fc83 	bl	8000b24 <gt521fx_enrolled_fingerprint_count_set>
 800121e:	e022      	b.n	8001266 <packet_parse_rsp+0xbe>
			case GT521FX_CMD_CAPTURE_FINGER: gt521fx_finger_is_pressed_set(true); break;
 8001220:	2001      	movs	r0, #1
 8001222:	f7ff fca1 	bl	8000b68 <gt521fx_finger_is_pressed_set>
 8001226:	e01e      	b.n	8001266 <packet_parse_rsp+0xbe>
				if (0 == (pkt_handle->rsp_output_param)) gt521fx_finger_is_pressed_set(true);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d103      	bne.n	8001238 <packet_parse_rsp+0x90>
 8001230:	2001      	movs	r0, #1
 8001232:	f7ff fc99 	bl	8000b68 <gt521fx_finger_is_pressed_set>
			break;
 8001236:	e016      	b.n	8001266 <packet_parse_rsp+0xbe>
				else gt521fx_finger_is_pressed_set(false);
 8001238:	2000      	movs	r0, #0
 800123a:	f7ff fc95 	bl	8000b68 <gt521fx_finger_is_pressed_set>
			break;
 800123e:	e012      	b.n	8001266 <packet_parse_rsp+0xbe>
			case GT521FX_CMD_IDENTIFY: gt521fx_identified_id_set(pkt_handle->cmd_input_param); break;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	b29b      	uxth	r3, r3
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff fcd8 	bl	8000bfc <gt521fx_identified_id_set>
 800124c:	e00b      	b.n	8001266 <packet_parse_rsp+0xbe>
			case GT521FX_CMD_GET_SECURITY_LEVEL: gt521fx_security_lvl_set(pkt_handle->cmd_input_param); break;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	b2db      	uxtb	r3, r3
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff fcc1 	bl	8000bdc <gt521fx_security_lvl_set>
 800125a:	e004      	b.n	8001266 <packet_parse_rsp+0xbe>
			default: break;
 800125c:	bf00      	nop
 800125e:	e002      	b.n	8001266 <packet_parse_rsp+0xbe>
		}
	}
 8001260:	bf00      	nop
 8001262:	e000      	b.n	8001266 <packet_parse_rsp+0xbe>
			default: break;
 8001264:	bf00      	nop
	packet_rsp_set();
 8001266:	f000 f811 	bl	800128c <packet_rsp_set>
}
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
	...

08001274 <packet_rsp_clear>:


void packet_rsp_clear(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
	g_packet_rsp_received = false;
 8001278:	4b03      	ldr	r3, [pc, #12]	; (8001288 <packet_rsp_clear+0x14>)
 800127a:	2200      	movs	r2, #0
 800127c:	701a      	strb	r2, [r3, #0]
}
 800127e:	bf00      	nop
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	2000021b 	.word	0x2000021b

0800128c <packet_rsp_set>:


void packet_rsp_set(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
	g_packet_rsp_received = true;
 8001290:	4b03      	ldr	r3, [pc, #12]	; (80012a0 <packet_rsp_set+0x14>)
 8001292:	2201      	movs	r2, #1
 8001294:	701a      	strb	r2, [r3, #0]
}
 8001296:	bf00      	nop
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	2000021b 	.word	0x2000021b

080012a4 <packet_rsp_was_received>:


bool packet_rsp_was_received(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
	if (g_packet_rsp_received)
 80012a8:	4b07      	ldr	r3, [pc, #28]	; (80012c8 <packet_rsp_was_received+0x24>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d004      	beq.n	80012ba <packet_rsp_was_received+0x16>
	{
		g_packet_rsp_received = false;
 80012b0:	4b05      	ldr	r3, [pc, #20]	; (80012c8 <packet_rsp_was_received+0x24>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	701a      	strb	r2, [r3, #0]
		return true;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e000      	b.n	80012bc <packet_rsp_was_received+0x18>
	}
	else
	{
		return false;
 80012ba:	2300      	movs	r3, #0
	}
}
 80012bc:	4618      	mov	r0, r3
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	2000021b 	.word	0x2000021b

080012cc <cmd_in_flight>:


gt_521fx_cmd_e cmd_in_flight(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
	return g_cmd_in_flight;
 80012d0:	4b03      	ldr	r3, [pc, #12]	; (80012e0 <cmd_in_flight+0x14>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	20000014 	.word	0x20000014

080012e4 <packet_create_cmd_and_send>:


void packet_create_cmd_and_send(p_packet_handle_t pkt_handle, gt_521fx_cmd_e cmd, uint32_t input_param)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	460b      	mov	r3, r1
 80012ee:	607a      	str	r2, [r7, #4]
 80012f0:	72fb      	strb	r3, [r7, #11]
	packet_rsp_clear();
 80012f2:	f7ff ffbf 	bl	8001274 <packet_rsp_clear>
	g_cmd_in_flight = cmd;
 80012f6:	4a10      	ldr	r2, [pc, #64]	; (8001338 <packet_create_cmd_and_send+0x54>)
 80012f8:	7afb      	ldrb	r3, [r7, #11]
 80012fa:	7013      	strb	r3, [r2, #0]
	pkt_handle->start_code[0] = 0x55; // default
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	2255      	movs	r2, #85	; 0x55
 8001300:	701a      	strb	r2, [r3, #0]
	pkt_handle->start_code[1] = 0xAA; // default
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	22aa      	movs	r2, #170	; 0xaa
 8001306:	705a      	strb	r2, [r3, #1]
	pkt_handle->dev_id = 0x0001; // default
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	2201      	movs	r2, #1
 800130c:	805a      	strh	r2, [r3, #2]
	pkt_handle->cmd_input_param = input_param;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	687a      	ldr	r2, [r7, #4]
 8001312:	605a      	str	r2, [r3, #4]
	pkt_handle->cmd_code = cmd;
 8001314:	7afb      	ldrb	r3, [r7, #11]
 8001316:	b29a      	uxth	r2, r3
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	811a      	strh	r2, [r3, #8]
	pkt_handle->check_sum = packet_calc_check_sum(pkt_handle);
 800131c:	68f8      	ldr	r0, [r7, #12]
 800131e:	f000 f80d 	bl	800133c <packet_calc_check_sum>
 8001322:	4603      	mov	r3, r0
 8001324:	461a      	mov	r2, r3
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	815a      	strh	r2, [r3, #10]
	packet_enqueue_to_sensor_tx(pkt_handle);
 800132a:	68f8      	ldr	r0, [r7, #12]
 800132c:	f7ff ff18 	bl	8001160 <packet_enqueue_to_sensor_tx>
}
 8001330:	bf00      	nop
 8001332:	3710      	adds	r7, #16
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20000014 	.word	0x20000014

0800133c <packet_calc_check_sum>:


uint16_t packet_calc_check_sum(p_packet_handle_t pkt_handle)
{
 800133c:	b480      	push	{r7}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
	uint16_t check_sum = 0;
 8001344:	2300      	movs	r3, #0
 8001346:	81fb      	strh	r3, [r7, #14]
	check_sum += pkt_handle->start_code[0];
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	b29a      	uxth	r2, r3
 800134e:	89fb      	ldrh	r3, [r7, #14]
 8001350:	4413      	add	r3, r2
 8001352:	81fb      	strh	r3, [r7, #14]
	check_sum += pkt_handle->start_code[1];
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	785b      	ldrb	r3, [r3, #1]
 8001358:	b29a      	uxth	r2, r3
 800135a:	89fb      	ldrh	r3, [r7, #14]
 800135c:	4413      	add	r3, r2
 800135e:	81fb      	strh	r3, [r7, #14]
	check_sum += pkt_handle->dev_id;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	885a      	ldrh	r2, [r3, #2]
 8001364:	89fb      	ldrh	r3, [r7, #14]
 8001366:	4413      	add	r3, r2
 8001368:	81fb      	strh	r3, [r7, #14]
	check_sum += pkt_handle->cmd_input_param;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	b29a      	uxth	r2, r3
 8001370:	89fb      	ldrh	r3, [r7, #14]
 8001372:	4413      	add	r3, r2
 8001374:	81fb      	strh	r3, [r7, #14]
	check_sum += pkt_handle->cmd_code;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	891a      	ldrh	r2, [r3, #8]
 800137a:	89fb      	ldrh	r3, [r7, #14]
 800137c:	4413      	add	r3, r2
 800137e:	81fb      	strh	r3, [r7, #14]
	return check_sum;
 8001380:	89fb      	ldrh	r3, [r7, #14]
}
 8001382:	4618      	mov	r0, r3
 8001384:	3714      	adds	r7, #20
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
	...

08001390 <HAL_UART_RxCpltCallback>:
*/


uint32_t rx_queue_count = 0;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
	if (osOK != osMessageQueuePut(packet_queue_get_queue_handle(PKT_QUEUE_GT521FX_RX), &gt521fx_uart_rx.pkt, 0, 0))//gt521fx_uart_rx.cur_queue_entry->pkt_ptr, 0, 0))
 8001398:	2000      	movs	r0, #0
 800139a:	f7ff fe61 	bl	8001060 <packet_queue_get_queue_handle>
 800139e:	2300      	movs	r3, #0
 80013a0:	2200      	movs	r2, #0
 80013a2:	4905      	ldr	r1, [pc, #20]	; (80013b8 <HAL_UART_RxCpltCallback+0x28>)
 80013a4:	f005 f99e 	bl	80066e4 <osMessageQueuePut>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d000      	beq.n	80013b0 <HAL_UART_RxCpltCallback+0x20>
	{
		while(1); // ouch
 80013ae:	e7fe      	b.n	80013ae <HAL_UART_RxCpltCallback+0x1e>
	}
}
 80013b0:	bf00      	nop
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	20000664 	.word	0x20000664

080013bc <serial_com_init_all>:


void serial_com_init_all(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
	gt521fx_uart_rx.gt521fx_rx_queue_handle = packet_queue_get_queue_handle(PKT_QUEUE_GT521FX_RX);
 80013c0:	2000      	movs	r0, #0
 80013c2:	f7ff fe4d 	bl	8001060 <packet_queue_get_queue_handle>
 80013c6:	4603      	mov	r3, r0
 80013c8:	4a0c      	ldr	r2, [pc, #48]	; (80013fc <serial_com_init_all+0x40>)
 80013ca:	6013      	str	r3, [r2, #0]
	gt521fx_uart_rx.rx_uart_handle = g_huart1;
 80013cc:	4b0b      	ldr	r3, [pc, #44]	; (80013fc <serial_com_init_all+0x40>)
 80013ce:	4a0c      	ldr	r2, [pc, #48]	; (8001400 <serial_com_init_all+0x44>)
 80013d0:	3310      	adds	r3, #16
 80013d2:	4611      	mov	r1, r2
 80013d4:	2284      	movs	r2, #132	; 0x84
 80013d6:	4618      	mov	r0, r3
 80013d8:	f007 ff96 	bl	8009308 <memcpy>
	gt521fx_uart_tx.gt521fx_tx_queue_handle = packet_queue_get_queue_handle(PKT_QUEUE_GT521FX_TX);
 80013dc:	2001      	movs	r0, #1
 80013de:	f7ff fe3f 	bl	8001060 <packet_queue_get_queue_handle>
 80013e2:	4603      	mov	r3, r0
 80013e4:	4a07      	ldr	r2, [pc, #28]	; (8001404 <serial_com_init_all+0x48>)
 80013e6:	6013      	str	r3, [r2, #0]
	gt521fx_uart_tx.tx_uart_handle = g_huart1;
 80013e8:	4b06      	ldr	r3, [pc, #24]	; (8001404 <serial_com_init_all+0x48>)
 80013ea:	4a05      	ldr	r2, [pc, #20]	; (8001400 <serial_com_init_all+0x44>)
 80013ec:	3310      	adds	r3, #16
 80013ee:	4611      	mov	r1, r2
 80013f0:	2284      	movs	r2, #132	; 0x84
 80013f2:	4618      	mov	r0, r3
 80013f4:	f007 ff88 	bl	8009308 <memcpy>
}
 80013f8:	bf00      	nop
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	20000660 	.word	0x20000660
 8001400:	200000cc 	.word	0x200000cc
 8001404:	200005cc 	.word	0x200005cc

08001408 <pkt_received>:


bool g_rx_pkt_received = false;

bool pkt_received(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
	if (g_rx_pkt_received)
 800140c:	4b07      	ldr	r3, [pc, #28]	; (800142c <pkt_received+0x24>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d004      	beq.n	800141e <pkt_received+0x16>
	{
		g_rx_pkt_received = false;
 8001414:	4b05      	ldr	r3, [pc, #20]	; (800142c <pkt_received+0x24>)
 8001416:	2200      	movs	r2, #0
 8001418:	701a      	strb	r2, [r3, #0]
		return true;
 800141a:	2301      	movs	r3, #1
 800141c:	e000      	b.n	8001420 <pkt_received+0x18>
	}
	else
	{
		return false;
 800141e:	2300      	movs	r3, #0
	}
}
 8001420:	4618      	mov	r0, r3
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	200006f4 	.word	0x200006f4

08001430 <clear_pkt_received_flag>:

void clear_pkt_received_flag(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
	g_rx_pkt_received = false;
 8001434:	4b03      	ldr	r3, [pc, #12]	; (8001444 <clear_pkt_received_flag+0x14>)
 8001436:	2200      	movs	r2, #0
 8001438:	701a      	strb	r2, [r3, #0]
}
 800143a:	bf00      	nop
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	200006f4 	.word	0x200006f4

08001448 <task_sensor_tx_entry>:
* @brief Function implementing the task_sensor_tx thread.
* @param argument: Not used
* @retval None
*/
void task_sensor_tx_entry(void *argument)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task_sensor_tx_entry */
  /* Infinite loop */
  for(;;)
  {
	  packet_dequeue_from_sensor_tx(&gt521fx_uart_tx.pkt);
 8001450:	4808      	ldr	r0, [pc, #32]	; (8001474 <task_sensor_tx_entry+0x2c>)
 8001452:	f7ff fe91 	bl	8001178 <packet_dequeue_from_sensor_tx>
	  clear_pkt_received_flag();
 8001456:	f7ff ffeb 	bl	8001430 <clear_pkt_received_flag>
	  g_last_cmd = gt521fx_uart_tx.pkt.cmd_code;
 800145a:	4b07      	ldr	r3, [pc, #28]	; (8001478 <task_sensor_tx_entry+0x30>)
 800145c:	899b      	ldrh	r3, [r3, #12]
 800145e:	b2da      	uxtb	r2, r3
 8001460:	4b06      	ldr	r3, [pc, #24]	; (800147c <task_sensor_tx_entry+0x34>)
 8001462:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Transmit(&g_huart1, gt521fx_uart_tx.pkt.flat_data, sizeof(pkt_t), 5000);
 8001464:	f241 3388 	movw	r3, #5000	; 0x1388
 8001468:	220c      	movs	r2, #12
 800146a:	4902      	ldr	r1, [pc, #8]	; (8001474 <task_sensor_tx_entry+0x2c>)
 800146c:	4804      	ldr	r0, [pc, #16]	; (8001480 <task_sensor_tx_entry+0x38>)
 800146e:	f004 f979 	bl	8005764 <HAL_UART_Transmit>
	  packet_dequeue_from_sensor_tx(&gt521fx_uart_tx.pkt);
 8001472:	e7ed      	b.n	8001450 <task_sensor_tx_entry+0x8>
 8001474:	200005d0 	.word	0x200005d0
 8001478:	200005cc 	.word	0x200005cc
 800147c:	20000015 	.word	0x20000015
 8001480:	200000cc 	.word	0x200000cc

08001484 <sensor_rx_entry>:
* @brief Function implementing the task_sensor_rx thread.
* @param argument: Not used
* @retval None
*/
void sensor_rx_entry(void *argument)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		HAL_UART_Receive_DMA(&g_huart1, gt521fx_uart_rx.pkt.flat_data, sizeof(pkt_t));
 800148c:	220c      	movs	r2, #12
 800148e:	4907      	ldr	r1, [pc, #28]	; (80014ac <sensor_rx_entry+0x28>)
 8001490:	4807      	ldr	r0, [pc, #28]	; (80014b0 <sensor_rx_entry+0x2c>)
 8001492:	f004 f9fb 	bl	800588c <HAL_UART_Receive_DMA>
		packet_dequeue_from_sensor_rx(&gt521fx_uart_rx.pkt);
 8001496:	4805      	ldr	r0, [pc, #20]	; (80014ac <sensor_rx_entry+0x28>)
 8001498:	f7ff fe7a 	bl	8001190 <packet_dequeue_from_sensor_rx>
		packet_parse_rsp(&gt521fx_uart_rx.pkt);
 800149c:	4803      	ldr	r0, [pc, #12]	; (80014ac <sensor_rx_entry+0x28>)
 800149e:	f7ff fe83 	bl	80011a8 <packet_parse_rsp>
		g_rx_pkt_received = true;
 80014a2:	4b04      	ldr	r3, [pc, #16]	; (80014b4 <sensor_rx_entry+0x30>)
 80014a4:	2201      	movs	r2, #1
 80014a6:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_DMA(&g_huart1, gt521fx_uart_rx.pkt.flat_data, sizeof(pkt_t));
 80014a8:	e7f0      	b.n	800148c <sensor_rx_entry+0x8>
 80014aa:	bf00      	nop
 80014ac:	20000664 	.word	0x20000664
 80014b0:	200000cc 	.word	0x200000cc
 80014b4:	200006f4 	.word	0x200006f4

080014b8 <ssd1351_spi_byte_write>:
void ssd1351_reset_pixel_address(void);
void swap(uint8_t *val_1, uint8_t *val_2);


static void ssd1351_spi_byte_write(uint8_t val)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	71fb      	strb	r3, [r7, #7]
	uint8_t data = val;
 80014c2:	79fb      	ldrb	r3, [r7, #7]
 80014c4:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&g_hspi2, &data, 1, 10000);
 80014c6:	f107 010f 	add.w	r1, r7, #15
 80014ca:	f242 7310 	movw	r3, #10000	; 0x2710
 80014ce:	2201      	movs	r2, #1
 80014d0:	4803      	ldr	r0, [pc, #12]	; (80014e0 <ssd1351_spi_byte_write+0x28>)
 80014d2:	f003 fbaa 	bl	8004c2a <HAL_SPI_Transmit>
}
 80014d6:	bf00      	nop
 80014d8:	3710      	adds	r7, #16
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	20000068 	.word	0x20000068

080014e4 <ssd1351_spi_block_write>:


static void ssd1351_spi_block_write(uint8_t *data, uint32_t len)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&g_hspi2, data, len, 10000);
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	b29a      	uxth	r2, r3
 80014f2:	f242 7310 	movw	r3, #10000	; 0x2710
 80014f6:	6879      	ldr	r1, [r7, #4]
 80014f8:	4803      	ldr	r0, [pc, #12]	; (8001508 <ssd1351_spi_block_write+0x24>)
 80014fa:	f003 fb96 	bl	8004c2a <HAL_SPI_Transmit>
}
 80014fe:	bf00      	nop
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	20000068 	.word	0x20000068

0800150c <ssd1351_byte_write_data>:


void ssd1351_byte_write_data(uint8_t data)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	71fb      	strb	r3, [r7, #7]
	ssd1351_set_pin(SSD1351_PIN_DC); // set DC (data mode)
 8001516:	2001      	movs	r0, #1
 8001518:	f000 f884 	bl	8001624 <ssd1351_set_pin>
	ssd1351_clear_pin(SSD1351_PIN_CS); // select chip (active low)
 800151c:	2000      	movs	r0, #0
 800151e:	f000 f851 	bl	80015c4 <ssd1351_clear_pin>
	ssd1351_spi_byte_write(data); // byte write
 8001522:	79fb      	ldrb	r3, [r7, #7]
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff ffc7 	bl	80014b8 <ssd1351_spi_byte_write>
	ssd1351_set_pin(SSD1351_PIN_CS); // deselect chip
 800152a:	2000      	movs	r0, #0
 800152c:	f000 f87a 	bl	8001624 <ssd1351_set_pin>
}
 8001530:	bf00      	nop
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}

08001538 <ssd1351_block_write_data>:


void ssd1351_block_write_data(uint8_t *data, uint32_t len)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
	ssd1351_set_pin(SSD1351_PIN_DC); // set DC (data mode)
 8001542:	2001      	movs	r0, #1
 8001544:	f000 f86e 	bl	8001624 <ssd1351_set_pin>
	ssd1351_clear_pin(SSD1351_PIN_CS); // select chip (active low)
 8001548:	2000      	movs	r0, #0
 800154a:	f000 f83b 	bl	80015c4 <ssd1351_clear_pin>
	ssd1351_spi_block_write(data, len); // byte write
 800154e:	6839      	ldr	r1, [r7, #0]
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f7ff ffc7 	bl	80014e4 <ssd1351_spi_block_write>
	ssd1351_set_pin(SSD1351_PIN_CS); // deselect chip
 8001556:	2000      	movs	r0, #0
 8001558:	f000 f864 	bl	8001624 <ssd1351_set_pin>
}
 800155c:	bf00      	nop
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}

08001564 <ssd1351_write_cmd>:


void ssd1351_write_cmd(ssd1351_cmd_e cmd)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	71fb      	strb	r3, [r7, #7]
	ssd1351_clear_pin(SSD1351_PIN_DC); // clear DC (cmd mode)
 800156e:	2001      	movs	r0, #1
 8001570:	f000 f828 	bl	80015c4 <ssd1351_clear_pin>
	ssd1351_clear_pin(SSD1351_PIN_CS); // select chip (active low)
 8001574:	2000      	movs	r0, #0
 8001576:	f000 f825 	bl	80015c4 <ssd1351_clear_pin>
	ssd1351_spi_byte_write(cmd); // send cmd
 800157a:	79fb      	ldrb	r3, [r7, #7]
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff ff9b 	bl	80014b8 <ssd1351_spi_byte_write>
	ssd1351_set_pin(SSD1351_PIN_CS); // deselect chip
 8001582:	2000      	movs	r0, #0
 8001584:	f000 f84e 	bl	8001624 <ssd1351_set_pin>
}
 8001588:	bf00      	nop
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}

08001590 <ssd1351_write_buffer_to_display>:


void ssd1351_write_buffer_to_display(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
	ssd1351_write_cmd(SSD1351_CMD_WRITE_RAM);
 8001594:	205c      	movs	r0, #92	; 0x5c
 8001596:	f7ff ffe5 	bl	8001564 <ssd1351_write_cmd>
	ssd1351_block_write_data(ssd1351_buffer.ssd1351_disp_buffer_uint8, sizeof(ssd1351_buffer.ssd1351_disp_buffer_uint8));
 800159a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800159e:	4802      	ldr	r0, [pc, #8]	; (80015a8 <ssd1351_write_buffer_to_display+0x18>)
 80015a0:	f7ff ffca 	bl	8001538 <ssd1351_block_write_data>
}
 80015a4:	bf00      	nop
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	200006fc 	.word	0x200006fc

080015ac <ssd1351_delay_ms>:


void ssd1351_delay_ms(uint32_t delay_ms)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
	HAL_Delay(delay_ms);
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f001 f971 	bl	800289c <HAL_Delay>
}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
	...

080015c4 <ssd1351_clear_pin>:


void ssd1351_clear_pin(ssd1351_pins pin)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	71fb      	strb	r3, [r7, #7]
	GPIO_TypeDef *hal_port;
	uint16_t hal_pin;
	switch(pin)
 80015ce:	79fb      	ldrb	r3, [r7, #7]
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d014      	beq.n	80015fe <ssd1351_clear_pin+0x3a>
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	dc17      	bgt.n	8001608 <ssd1351_clear_pin+0x44>
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d002      	beq.n	80015e2 <ssd1351_clear_pin+0x1e>
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d007      	beq.n	80015f0 <ssd1351_clear_pin+0x2c>
		break;
		case SSD1351_PIN_RST:
			hal_port = GPIOB;
			hal_pin = GPIO_PIN_6;
		break;
		default: break;
 80015e0:	e012      	b.n	8001608 <ssd1351_clear_pin+0x44>
			hal_port = GPIOA;
 80015e2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80015e6:	60fb      	str	r3, [r7, #12]
			hal_pin = GPIO_PIN_11;
 80015e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80015ec:	817b      	strh	r3, [r7, #10]
		break;
 80015ee:	e00c      	b.n	800160a <ssd1351_clear_pin+0x46>
			hal_port = GPIOA;
 80015f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80015f4:	60fb      	str	r3, [r7, #12]
			hal_pin = GPIO_PIN_8;
 80015f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015fa:	817b      	strh	r3, [r7, #10]
		break;
 80015fc:	e005      	b.n	800160a <ssd1351_clear_pin+0x46>
			hal_port = GPIOB;
 80015fe:	4b08      	ldr	r3, [pc, #32]	; (8001620 <ssd1351_clear_pin+0x5c>)
 8001600:	60fb      	str	r3, [r7, #12]
			hal_pin = GPIO_PIN_6;
 8001602:	2340      	movs	r3, #64	; 0x40
 8001604:	817b      	strh	r3, [r7, #10]
		break;
 8001606:	e000      	b.n	800160a <ssd1351_clear_pin+0x46>
		default: break;
 8001608:	bf00      	nop
	}
	HAL_GPIO_WritePin(hal_port, hal_pin, GPIO_PIN_RESET);
 800160a:	897b      	ldrh	r3, [r7, #10]
 800160c:	2200      	movs	r2, #0
 800160e:	4619      	mov	r1, r3
 8001610:	68f8      	ldr	r0, [r7, #12]
 8001612:	f002 f857 	bl	80036c4 <HAL_GPIO_WritePin>
}
 8001616:	bf00      	nop
 8001618:	3710      	adds	r7, #16
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	48000400 	.word	0x48000400

08001624 <ssd1351_set_pin>:


void ssd1351_set_pin(ssd1351_pins pin)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	71fb      	strb	r3, [r7, #7]
	GPIO_TypeDef *hal_port;
	uint16_t hal_pin;
	switch(pin)
 800162e:	79fb      	ldrb	r3, [r7, #7]
 8001630:	2b02      	cmp	r3, #2
 8001632:	d014      	beq.n	800165e <ssd1351_set_pin+0x3a>
 8001634:	2b02      	cmp	r3, #2
 8001636:	dc17      	bgt.n	8001668 <ssd1351_set_pin+0x44>
 8001638:	2b00      	cmp	r3, #0
 800163a:	d002      	beq.n	8001642 <ssd1351_set_pin+0x1e>
 800163c:	2b01      	cmp	r3, #1
 800163e:	d007      	beq.n	8001650 <ssd1351_set_pin+0x2c>
		break;
		case SSD1351_PIN_RST:
			hal_port = GPIOB;
			hal_pin = GPIO_PIN_6;
		break;
		default: break;
 8001640:	e012      	b.n	8001668 <ssd1351_set_pin+0x44>
			hal_port = GPIOA;
 8001642:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001646:	60fb      	str	r3, [r7, #12]
			hal_pin = GPIO_PIN_11;
 8001648:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800164c:	817b      	strh	r3, [r7, #10]
		break;
 800164e:	e00c      	b.n	800166a <ssd1351_set_pin+0x46>
			hal_port = GPIOA;
 8001650:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001654:	60fb      	str	r3, [r7, #12]
			hal_pin = GPIO_PIN_8;
 8001656:	f44f 7380 	mov.w	r3, #256	; 0x100
 800165a:	817b      	strh	r3, [r7, #10]
		break;
 800165c:	e005      	b.n	800166a <ssd1351_set_pin+0x46>
			hal_port = GPIOB;
 800165e:	4b08      	ldr	r3, [pc, #32]	; (8001680 <ssd1351_set_pin+0x5c>)
 8001660:	60fb      	str	r3, [r7, #12]
			hal_pin = GPIO_PIN_6;
 8001662:	2340      	movs	r3, #64	; 0x40
 8001664:	817b      	strh	r3, [r7, #10]
		break;
 8001666:	e000      	b.n	800166a <ssd1351_set_pin+0x46>
		default: break;
 8001668:	bf00      	nop
	}
	HAL_GPIO_WritePin(hal_port, hal_pin, GPIO_PIN_SET);
 800166a:	897b      	ldrh	r3, [r7, #10]
 800166c:	2201      	movs	r2, #1
 800166e:	4619      	mov	r1, r3
 8001670:	68f8      	ldr	r0, [r7, #12]
 8001672:	f002 f827 	bl	80036c4 <HAL_GPIO_WritePin>
}
 8001676:	bf00      	nop
 8001678:	3710      	adds	r7, #16
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	48000400 	.word	0x48000400

08001684 <ssd1351_init>:


void ssd1351_init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
	ssd1351_set_pin(SSD1351_PIN_RST); // clear DC (cmd mode)
 8001688:	2002      	movs	r0, #2
 800168a:	f7ff ffcb 	bl	8001624 <ssd1351_set_pin>
	ssd1351_delay_ms(100); // how long to hold reset?
 800168e:	2064      	movs	r0, #100	; 0x64
 8001690:	f7ff ff8c 	bl	80015ac <ssd1351_delay_ms>
	ssd1351_clear_pin(SSD1351_PIN_RST); // clear DC (cmd mode)
 8001694:	2002      	movs	r0, #2
 8001696:	f7ff ff95 	bl	80015c4 <ssd1351_clear_pin>
	ssd1351_delay_ms(100); // how long to pause after reset?
 800169a:	2064      	movs	r0, #100	; 0x64
 800169c:	f7ff ff86 	bl	80015ac <ssd1351_delay_ms>
	ssd1351_set_pin(SSD1351_PIN_RST); // clear DC (cmd mode)
 80016a0:	2002      	movs	r0, #2
 80016a2:	f7ff ffbf 	bl	8001624 <ssd1351_set_pin>
	ssd1351_write_cmd(SSD1351_CMD_SET_CMD_LOCK);
 80016a6:	20fd      	movs	r0, #253	; 0xfd
 80016a8:	f7ff ff5c 	bl	8001564 <ssd1351_write_cmd>
	ssd1351_byte_write_data(SSD1351_CMD_UNLOCK_BYTE);
 80016ac:	2012      	movs	r0, #18
 80016ae:	f7ff ff2d 	bl	800150c <ssd1351_byte_write_data>
	ssd1351_write_cmd(SSD1351_CMD_SET_CMD_LOCK);
 80016b2:	20fd      	movs	r0, #253	; 0xfd
 80016b4:	f7ff ff56 	bl	8001564 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0xB1); // WHY?????
 80016b8:	20b1      	movs	r0, #177	; 0xb1
 80016ba:	f7ff ff27 	bl	800150c <ssd1351_byte_write_data>
	ssd1351_write_cmd(SSD1351_CMD_SET_SLEEP_MODE_ON);
 80016be:	20ae      	movs	r0, #174	; 0xae
 80016c0:	f7ff ff50 	bl	8001564 <ssd1351_write_cmd>
	ssd1351_write_cmd(SSD1351_CMD_SET_DISP_MODE_OFF);
 80016c4:	20a4      	movs	r0, #164	; 0xa4
 80016c6:	f7ff ff4d 	bl	8001564 <ssd1351_write_cmd>
	ssd1351_write_cmd(SSD1351_CMD_SET_COLUMN_ADDRESS);
 80016ca:	2015      	movs	r0, #21
 80016cc:	f7ff ff4a 	bl	8001564 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0x00);
 80016d0:	2000      	movs	r0, #0
 80016d2:	f7ff ff1b 	bl	800150c <ssd1351_byte_write_data>
	ssd1351_byte_write_data(0x7F);
 80016d6:	207f      	movs	r0, #127	; 0x7f
 80016d8:	f7ff ff18 	bl	800150c <ssd1351_byte_write_data>
	ssd1351_write_cmd(SSD1351_CMD_SET_ROW_ADDRESS);
 80016dc:	2075      	movs	r0, #117	; 0x75
 80016de:	f7ff ff41 	bl	8001564 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0x00);
 80016e2:	2000      	movs	r0, #0
 80016e4:	f7ff ff12 	bl	800150c <ssd1351_byte_write_data>
	ssd1351_byte_write_data(0x7F);
 80016e8:	207f      	movs	r0, #127	; 0x7f
 80016ea:	f7ff ff0f 	bl	800150c <ssd1351_byte_write_data>
	ssd1351_write_cmd(SSD1351_CMD_FRONT_CLOCK_DIVIDER);
 80016ee:	20b3      	movs	r0, #179	; 0xb3
 80016f0:	f7ff ff38 	bl	8001564 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0xF1); // highest frequency (div by 1)
 80016f4:	20f1      	movs	r0, #241	; 0xf1
 80016f6:	f7ff ff09 	bl	800150c <ssd1351_byte_write_data>
	ssd1351_write_cmd(SSD1351_CMD_SET_MUX_RATIO);
 80016fa:	20ca      	movs	r0, #202	; 0xca
 80016fc:	f7ff ff32 	bl	8001564 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0x7F); // 128 MUX (Reset value)
 8001700:	207f      	movs	r0, #127	; 0x7f
 8001702:	f7ff ff03 	bl	800150c <ssd1351_byte_write_data>
	ssd1351_write_cmd(SSD1351_CMD_SET_REMAP_COLOR_DEPTH);
 8001706:	20a0      	movs	r0, #160	; 0xa0
 8001708:	f7ff ff2c 	bl	8001564 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0x74);
 800170c:	2074      	movs	r0, #116	; 0x74
 800170e:	f7ff fefd 	bl	800150c <ssd1351_byte_write_data>
	ssd1351_write_cmd(SSD1351_CMD_SET_DISP_START_LINE);
 8001712:	20a1      	movs	r0, #161	; 0xa1
 8001714:	f7ff ff26 	bl	8001564 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0x00);
 8001718:	2000      	movs	r0, #0
 800171a:	f7ff fef7 	bl	800150c <ssd1351_byte_write_data>
	ssd1351_write_cmd(SSD1351_CMD_SET_DISP_OFFSET);
 800171e:	20a2      	movs	r0, #162	; 0xa2
 8001720:	f7ff ff20 	bl	8001564 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0x00);
 8001724:	2000      	movs	r0, #0
 8001726:	f7ff fef1 	bl	800150c <ssd1351_byte_write_data>
	ssd1351_write_cmd(SSD1351_CMD_FUNCTION_SELECTION);
 800172a:	20ab      	movs	r0, #171	; 0xab
 800172c:	f7ff ff1a 	bl	8001564 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0x01);
 8001730:	2001      	movs	r0, #1
 8001732:	f7ff feeb 	bl	800150c <ssd1351_byte_write_data>
	ssd1351_write_cmd(SSD1351_CMD_SET_SEGMENT_LOW_VOLTAGE);
 8001736:	20b4      	movs	r0, #180	; 0xb4
 8001738:	f7ff ff14 	bl	8001564 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0xA0);
 800173c:	20a0      	movs	r0, #160	; 0xa0
 800173e:	f7ff fee5 	bl	800150c <ssd1351_byte_write_data>
	ssd1351_byte_write_data(0xB5);
 8001742:	20b5      	movs	r0, #181	; 0xb5
 8001744:	f7ff fee2 	bl	800150c <ssd1351_byte_write_data>
	ssd1351_byte_write_data(0x55);
 8001748:	2055      	movs	r0, #85	; 0x55
 800174a:	f7ff fedf 	bl	800150c <ssd1351_byte_write_data>
	ssd1351_write_cmd(SSD1351_CMD_SET_CONTRAST_CURRENT);
 800174e:	20c1      	movs	r0, #193	; 0xc1
 8001750:	f7ff ff08 	bl	8001564 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0xC8);
 8001754:	20c8      	movs	r0, #200	; 0xc8
 8001756:	f7ff fed9 	bl	800150c <ssd1351_byte_write_data>
	ssd1351_byte_write_data(0x80);
 800175a:	2080      	movs	r0, #128	; 0x80
 800175c:	f7ff fed6 	bl	800150c <ssd1351_byte_write_data>
	ssd1351_byte_write_data(0xC0);
 8001760:	20c0      	movs	r0, #192	; 0xc0
 8001762:	f7ff fed3 	bl	800150c <ssd1351_byte_write_data>
	ssd1351_write_cmd(SSD1351_CMD_MASTER_CONTRAST_CURRENT_CTRL);
 8001766:	20c7      	movs	r0, #199	; 0xc7
 8001768:	f7ff fefc 	bl	8001564 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0x0F);
 800176c:	200f      	movs	r0, #15
 800176e:	f7ff fecd 	bl	800150c <ssd1351_byte_write_data>
	ssd1351_write_cmd(SSD1351_CMD_SET_RESET_PRECHARGE_PERIOD);
 8001772:	20b1      	movs	r0, #177	; 0xb1
 8001774:	f7ff fef6 	bl	8001564 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0x32);
 8001778:	2032      	movs	r0, #50	; 0x32
 800177a:	f7ff fec7 	bl	800150c <ssd1351_byte_write_data>
	ssd1351_write_cmd(SSD1351_CMD_DISP_ENHANCEMENT);
 800177e:	20b2      	movs	r0, #178	; 0xb2
 8001780:	f7ff fef0 	bl	8001564 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0xA4);
 8001784:	20a4      	movs	r0, #164	; 0xa4
 8001786:	f7ff fec1 	bl	800150c <ssd1351_byte_write_data>
	ssd1351_byte_write_data(0x00);
 800178a:	2000      	movs	r0, #0
 800178c:	f7ff febe 	bl	800150c <ssd1351_byte_write_data>
	ssd1351_byte_write_data(0x00);
 8001790:	2000      	movs	r0, #0
 8001792:	f7ff febb 	bl	800150c <ssd1351_byte_write_data>
	ssd1351_write_cmd(SSD1351_CMD_SET_PRECHARGE_VOLTAGE);
 8001796:	20bb      	movs	r0, #187	; 0xbb
 8001798:	f7ff fee4 	bl	8001564 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0x17);
 800179c:	2017      	movs	r0, #23
 800179e:	f7ff feb5 	bl	800150c <ssd1351_byte_write_data>
	ssd1351_write_cmd(SSD1351_CMD_SET_SECOND_PRECHARGE_PERIOD);
 80017a2:	20b6      	movs	r0, #182	; 0xb6
 80017a4:	f7ff fede 	bl	8001564 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0x01);
 80017a8:	2001      	movs	r0, #1
 80017aa:	f7ff feaf 	bl	800150c <ssd1351_byte_write_data>
	ssd1351_write_cmd(SSD1351_CMD_SET_VCOMH_VOLTAGE);
 80017ae:	20be      	movs	r0, #190	; 0xbe
 80017b0:	f7ff fed8 	bl	8001564 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0x05);
 80017b4:	2005      	movs	r0, #5
 80017b6:	f7ff fea9 	bl	800150c <ssd1351_byte_write_data>
	ssd1351_write_cmd(SSD1351_CMD_SET_DISP_MODE_NORMAL);
 80017ba:	20a6      	movs	r0, #166	; 0xa6
 80017bc:	f7ff fed2 	bl	8001564 <ssd1351_write_cmd>
	ssd1351_clear_screen();
 80017c0:	f000 f874 	bl	80018ac <ssd1351_clear_screen>
	ssd1351_write_cmd(SSD1351_CMD_SET_SLEEP_MODE_OFF);
 80017c4:	20af      	movs	r0, #175	; 0xaf
 80017c6:	f7ff fecd 	bl	8001564 <ssd1351_write_cmd>
	ssd1351_clear_screen();
 80017ca:	f000 f86f 	bl	80018ac <ssd1351_clear_screen>
	ssd1351_reset_ram_address();
 80017ce:	f000 f865 	bl	800189c <ssd1351_reset_ram_address>
	ssd1351_clear_screen();
 80017d2:	f000 f86b 	bl	80018ac <ssd1351_clear_screen>
}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
	...

080017dc <ssd1351_draw_pixel>:
	ssd1351_write_cmd(SSD1351_CMD_SET_DISP_MODE_OFF);
}


void ssd1351_draw_pixel(uint8_t x, uint8_t y, color_16bit_e color)
{
 80017dc:	b480      	push	{r7}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	4603      	mov	r3, r0
 80017e4:	71fb      	strb	r3, [r7, #7]
 80017e6:	460b      	mov	r3, r1
 80017e8:	71bb      	strb	r3, [r7, #6]
 80017ea:	4613      	mov	r3, r2
 80017ec:	80bb      	strh	r3, [r7, #4]
	if((x >= SSD1351_PIXEL_WIDTH - 1) || (y >= SSD1351_PIXEL_HEIGHT - 1)) return;
 80017ee:	79fb      	ldrb	r3, [r7, #7]
 80017f0:	2b7e      	cmp	r3, #126	; 0x7e
 80017f2:	d810      	bhi.n	8001816 <ssd1351_draw_pixel+0x3a>
 80017f4:	79bb      	ldrb	r3, [r7, #6]
 80017f6:	2b7e      	cmp	r3, #126	; 0x7e
 80017f8:	d80d      	bhi.n	8001816 <ssd1351_draw_pixel+0x3a>
	else if((x < 0) || (y < 0)) return;
	// there are 128 columns and 128 row.  2 bytes stored per pixel
	uint16_t index = x + y * 128;
 80017fa:	79fb      	ldrb	r3, [r7, #7]
 80017fc:	b29a      	uxth	r2, r3
 80017fe:	79bb      	ldrb	r3, [r7, #6]
 8001800:	b29b      	uxth	r3, r3
 8001802:	01db      	lsls	r3, r3, #7
 8001804:	b29b      	uxth	r3, r3
 8001806:	4413      	add	r3, r2
 8001808:	81fb      	strh	r3, [r7, #14]
	ssd1351_buffer.ssd1351_disp_buffer_uint16[index] = color;
 800180a:	89fb      	ldrh	r3, [r7, #14]
 800180c:	4905      	ldr	r1, [pc, #20]	; (8001824 <ssd1351_draw_pixel+0x48>)
 800180e:	88ba      	ldrh	r2, [r7, #4]
 8001810:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 8001814:	e000      	b.n	8001818 <ssd1351_draw_pixel+0x3c>
	if((x >= SSD1351_PIXEL_WIDTH - 1) || (y >= SSD1351_PIXEL_HEIGHT - 1)) return;
 8001816:	bf00      	nop
}
 8001818:	3714      	adds	r7, #20
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	200006fc 	.word	0x200006fc

08001828 <ssd1351_reset_pixel_address>:
	ssd1351_coordinates.y = row;
}


void ssd1351_reset_pixel_address(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
	ssd1351_coordinates.x = 0;
 800182c:	4b05      	ldr	r3, [pc, #20]	; (8001844 <ssd1351_reset_pixel_address+0x1c>)
 800182e:	2200      	movs	r2, #0
 8001830:	701a      	strb	r2, [r3, #0]
	ssd1351_coordinates.y = 0;
 8001832:	4b04      	ldr	r3, [pc, #16]	; (8001844 <ssd1351_reset_pixel_address+0x1c>)
 8001834:	2200      	movs	r2, #0
 8001836:	705a      	strb	r2, [r3, #1]
}
 8001838:	bf00      	nop
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	200006f8 	.word	0x200006f8

08001848 <ssd1351_set_ram_address>:


void ssd1351_set_ram_address(uint16_t column, uint16_t row)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	460a      	mov	r2, r1
 8001852:	80fb      	strh	r3, [r7, #6]
 8001854:	4613      	mov	r3, r2
 8001856:	80bb      	strh	r3, [r7, #4]
	ssd1351_write_cmd(SSD1351_CMD_SET_COLUMN_ADDRESS);
 8001858:	2015      	movs	r0, #21
 800185a:	f7ff fe83 	bl	8001564 <ssd1351_write_cmd>
	ssd1351_byte_write_data((column & 0xFF00) >> 8);
 800185e:	88fb      	ldrh	r3, [r7, #6]
 8001860:	0a1b      	lsrs	r3, r3, #8
 8001862:	b29b      	uxth	r3, r3
 8001864:	b2db      	uxtb	r3, r3
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff fe50 	bl	800150c <ssd1351_byte_write_data>
	ssd1351_byte_write_data(column & 0x00FF);
 800186c:	88fb      	ldrh	r3, [r7, #6]
 800186e:	b2db      	uxtb	r3, r3
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff fe4b 	bl	800150c <ssd1351_byte_write_data>
	ssd1351_write_cmd(SSD1351_CMD_SET_ROW_ADDRESS);
 8001876:	2075      	movs	r0, #117	; 0x75
 8001878:	f7ff fe74 	bl	8001564 <ssd1351_write_cmd>
	ssd1351_byte_write_data((row & 0xFF00) >> 8);
 800187c:	88bb      	ldrh	r3, [r7, #4]
 800187e:	0a1b      	lsrs	r3, r3, #8
 8001880:	b29b      	uxth	r3, r3
 8001882:	b2db      	uxtb	r3, r3
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff fe41 	bl	800150c <ssd1351_byte_write_data>
	ssd1351_byte_write_data(row & 0x00FF);
 800188a:	88bb      	ldrh	r3, [r7, #4]
 800188c:	b2db      	uxtb	r3, r3
 800188e:	4618      	mov	r0, r3
 8001890:	f7ff fe3c 	bl	800150c <ssd1351_byte_write_data>
}
 8001894:	bf00      	nop
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <ssd1351_reset_ram_address>:


void ssd1351_reset_ram_address(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
	ssd1351_set_ram_address(0x007F, 0x007F);
 80018a0:	217f      	movs	r1, #127	; 0x7f
 80018a2:	207f      	movs	r0, #127	; 0x7f
 80018a4:	f7ff ffd0 	bl	8001848 <ssd1351_set_ram_address>
}
 80018a8:	bf00      	nop
 80018aa:	bd80      	pop	{r7, pc}

080018ac <ssd1351_clear_screen>:
	ssd1351_write_cmd(SSD1351_CMD_SET_SLEEP_MODE_OFF);
}


void ssd1351_clear_screen(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
	ssd1351_reset_ram_address();
 80018b0:	f7ff fff4 	bl	800189c <ssd1351_reset_ram_address>
	ssd1351_write_cmd(SSD1351_CMD_WRITE_RAM);
 80018b4:	205c      	movs	r0, #92	; 0x5c
 80018b6:	f7ff fe55 	bl	8001564 <ssd1351_write_cmd>
	memset(ssd1351_buffer.ssd1351_disp_buffer_uint8, 0, sizeof(ssd1351_buffer.ssd1351_disp_buffer_uint8));
 80018ba:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80018be:	2100      	movs	r1, #0
 80018c0:	4805      	ldr	r0, [pc, #20]	; (80018d8 <ssd1351_clear_screen+0x2c>)
 80018c2:	f007 fd2f 	bl	8009324 <memset>
	ssd1351_block_write_data(ssd1351_buffer.ssd1351_disp_buffer_uint8, sizeof(ssd1351_buffer));
 80018c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018ca:	4803      	ldr	r0, [pc, #12]	; (80018d8 <ssd1351_clear_screen+0x2c>)
 80018cc:	f7ff fe34 	bl	8001538 <ssd1351_block_write_data>
	ssd1351_reset_pixel_address();
 80018d0:	f7ff ffaa 	bl	8001828 <ssd1351_reset_pixel_address>
}
 80018d4:	bf00      	nop
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	200006fc 	.word	0x200006fc

080018dc <ssd1351_write_char>:


void ssd1351_write_char(color_16bit_e color, font_t font, char c)
{
 80018dc:	b590      	push	{r4, r7, lr}
 80018de:	b089      	sub	sp, #36	; 0x24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4604      	mov	r4, r0
 80018e4:	1d38      	adds	r0, r7, #4
 80018e6:	e880 0006 	stmia.w	r0, {r1, r2}
 80018ea:	461a      	mov	r2, r3
 80018ec:	4623      	mov	r3, r4
 80018ee:	81fb      	strh	r3, [r7, #14]
 80018f0:	4613      	mov	r3, r2
 80018f2:	737b      	strb	r3, [r7, #13]
	// basic idea for writing a character is as follows:
	// 1x 16-bit value is returned for each row in pixel height.  For example if the pixel height is
	// 10 then 10x 16-bit values make up that character
	uint16_t char_pix_row_data;
	uint16_t char_pix_vert_pos = 0;
 80018f4:	2300      	movs	r3, #0
 80018f6:	83fb      	strh	r3, [r7, #30]
	uint16_t char_pix_horiz_pos = 0;
 80018f8:	2300      	movs	r3, #0
 80018fa:	83bb      	strh	r3, [r7, #28]
	uint16_t height = font.height;
 80018fc:	797b      	ldrb	r3, [r7, #5]
 80018fe:	837b      	strh	r3, [r7, #26]
	uint16_t width = font.width;
 8001900:	793b      	ldrb	r3, [r7, #4]
 8001902:	833b      	strh	r3, [r7, #24]

	if((SSD1351_PIXEL_WIDTH <= ssd1351_coordinates.x + width) || (SSD1351_PIXEL_HEIGHT <= ssd1351_coordinates.y + height)) return;
 8001904:	4b3e      	ldr	r3, [pc, #248]	; (8001a00 <ssd1351_write_char+0x124>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	461a      	mov	r2, r3
 800190a:	8b3b      	ldrh	r3, [r7, #24]
 800190c:	4413      	add	r3, r2
 800190e:	2b7f      	cmp	r3, #127	; 0x7f
 8001910:	dc70      	bgt.n	80019f4 <ssd1351_write_char+0x118>
 8001912:	4b3b      	ldr	r3, [pc, #236]	; (8001a00 <ssd1351_write_char+0x124>)
 8001914:	785b      	ldrb	r3, [r3, #1]
 8001916:	461a      	mov	r2, r3
 8001918:	8b7b      	ldrh	r3, [r7, #26]
 800191a:	4413      	add	r3, r2
 800191c:	2b7f      	cmp	r3, #127	; 0x7f
 800191e:	dc69      	bgt.n	80019f4 <ssd1351_write_char+0x118>
	if (c == '\n')
 8001920:	7b7b      	ldrb	r3, [r7, #13]
 8001922:	2b0a      	cmp	r3, #10
 8001924:	d134      	bne.n	8001990 <ssd1351_write_char+0xb4>
	{
		ssd1351_coordinates.x = SSD1351_PIXEL_WIDTH - 1; // if new line simply
 8001926:	4b36      	ldr	r3, [pc, #216]	; (8001a00 <ssd1351_write_char+0x124>)
 8001928:	227f      	movs	r2, #127	; 0x7f
 800192a:	701a      	strb	r2, [r3, #0]
 800192c:	e034      	b.n	8001998 <ssd1351_write_char+0xbc>
	}
	else
	{
		while(char_pix_vert_pos < height)
		{
			char_pix_row_data = font.data[(c - SPECIAL_CHAR_OFFSET) * height + char_pix_vert_pos]; // "* font.height" to skip over rows and "+ i" to get the 2 byte value for the row
 800192e:	68ba      	ldr	r2, [r7, #8]
 8001930:	7b7b      	ldrb	r3, [r7, #13]
 8001932:	3b20      	subs	r3, #32
 8001934:	8b79      	ldrh	r1, [r7, #26]
 8001936:	fb03 f101 	mul.w	r1, r3, r1
 800193a:	8bfb      	ldrh	r3, [r7, #30]
 800193c:	440b      	add	r3, r1
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	4413      	add	r3, r2
 8001942:	881b      	ldrh	r3, [r3, #0]
 8001944:	82fb      	strh	r3, [r7, #22]
			while(char_pix_horiz_pos < width)
 8001946:	e01a      	b.n	800197e <ssd1351_write_char+0xa2>
			{
				if ((char_pix_row_data << char_pix_horiz_pos) & 0x8000) // if bit is set then draw
 8001948:	8afa      	ldrh	r2, [r7, #22]
 800194a:	8bbb      	ldrh	r3, [r7, #28]
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d00f      	beq.n	8001978 <ssd1351_write_char+0x9c>
				{
					ssd1351_draw_pixel(ssd1351_coordinates.x + char_pix_horiz_pos, ssd1351_coordinates.y + char_pix_vert_pos, color);
 8001958:	4b29      	ldr	r3, [pc, #164]	; (8001a00 <ssd1351_write_char+0x124>)
 800195a:	781a      	ldrb	r2, [r3, #0]
 800195c:	8bbb      	ldrh	r3, [r7, #28]
 800195e:	b2db      	uxtb	r3, r3
 8001960:	4413      	add	r3, r2
 8001962:	b2d8      	uxtb	r0, r3
 8001964:	4b26      	ldr	r3, [pc, #152]	; (8001a00 <ssd1351_write_char+0x124>)
 8001966:	785a      	ldrb	r2, [r3, #1]
 8001968:	8bfb      	ldrh	r3, [r7, #30]
 800196a:	b2db      	uxtb	r3, r3
 800196c:	4413      	add	r3, r2
 800196e:	b2db      	uxtb	r3, r3
 8001970:	89fa      	ldrh	r2, [r7, #14]
 8001972:	4619      	mov	r1, r3
 8001974:	f7ff ff32 	bl	80017dc <ssd1351_draw_pixel>
				}
				char_pix_horiz_pos++;
 8001978:	8bbb      	ldrh	r3, [r7, #28]
 800197a:	3301      	adds	r3, #1
 800197c:	83bb      	strh	r3, [r7, #28]
			while(char_pix_horiz_pos < width)
 800197e:	8bba      	ldrh	r2, [r7, #28]
 8001980:	8b3b      	ldrh	r3, [r7, #24]
 8001982:	429a      	cmp	r2, r3
 8001984:	d3e0      	bcc.n	8001948 <ssd1351_write_char+0x6c>
			}
			char_pix_vert_pos++;
 8001986:	8bfb      	ldrh	r3, [r7, #30]
 8001988:	3301      	adds	r3, #1
 800198a:	83fb      	strh	r3, [r7, #30]
			char_pix_horiz_pos = 0;
 800198c:	2300      	movs	r3, #0
 800198e:	83bb      	strh	r3, [r7, #28]
		while(char_pix_vert_pos < height)
 8001990:	8bfa      	ldrh	r2, [r7, #30]
 8001992:	8b7b      	ldrh	r3, [r7, #26]
 8001994:	429a      	cmp	r2, r3
 8001996:	d3ca      	bcc.n	800192e <ssd1351_write_char+0x52>
		}

	}
	ssd1351_coordinates.x += width; // we just wrote a char increment x coordinate by font width
 8001998:	4b19      	ldr	r3, [pc, #100]	; (8001a00 <ssd1351_write_char+0x124>)
 800199a:	781a      	ldrb	r2, [r3, #0]
 800199c:	8b3b      	ldrh	r3, [r7, #24]
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	4413      	add	r3, r2
 80019a2:	b2da      	uxtb	r2, r3
 80019a4:	4b16      	ldr	r3, [pc, #88]	; (8001a00 <ssd1351_write_char+0x124>)
 80019a6:	701a      	strb	r2, [r3, #0]
	if ((ssd1351_coordinates.x + width >= 127) & (ssd1351_coordinates.y + height <= 127)) // check if we need to go to new line
 80019a8:	4b15      	ldr	r3, [pc, #84]	; (8001a00 <ssd1351_write_char+0x124>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	461a      	mov	r2, r3
 80019ae:	8b3b      	ldrh	r3, [r7, #24]
 80019b0:	4413      	add	r3, r2
 80019b2:	2b7e      	cmp	r3, #126	; 0x7e
 80019b4:	bfcc      	ite	gt
 80019b6:	2301      	movgt	r3, #1
 80019b8:	2300      	movle	r3, #0
 80019ba:	b2da      	uxtb	r2, r3
 80019bc:	4b10      	ldr	r3, [pc, #64]	; (8001a00 <ssd1351_write_char+0x124>)
 80019be:	785b      	ldrb	r3, [r3, #1]
 80019c0:	4619      	mov	r1, r3
 80019c2:	8b7b      	ldrh	r3, [r7, #26]
 80019c4:	440b      	add	r3, r1
 80019c6:	2b7f      	cmp	r3, #127	; 0x7f
 80019c8:	bfd4      	ite	le
 80019ca:	2301      	movle	r3, #1
 80019cc:	2300      	movgt	r3, #0
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	4013      	ands	r3, r2
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d00f      	beq.n	80019f8 <ssd1351_write_char+0x11c>
	{
		ssd1351_coordinates.y = ssd1351_coordinates.y + height + 2; // the +2 is simply additional space between lines
 80019d8:	4b09      	ldr	r3, [pc, #36]	; (8001a00 <ssd1351_write_char+0x124>)
 80019da:	785a      	ldrb	r2, [r3, #1]
 80019dc:	8b7b      	ldrh	r3, [r7, #26]
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	4413      	add	r3, r2
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	3302      	adds	r3, #2
 80019e6:	b2da      	uxtb	r2, r3
 80019e8:	4b05      	ldr	r3, [pc, #20]	; (8001a00 <ssd1351_write_char+0x124>)
 80019ea:	705a      	strb	r2, [r3, #1]
		ssd1351_coordinates.x = 0; // reset x coordinate to 0 for new line!
 80019ec:	4b04      	ldr	r3, [pc, #16]	; (8001a00 <ssd1351_write_char+0x124>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	701a      	strb	r2, [r3, #0]
	}
	return;
 80019f2:	e001      	b.n	80019f8 <ssd1351_write_char+0x11c>
	if((SSD1351_PIXEL_WIDTH <= ssd1351_coordinates.x + width) || (SSD1351_PIXEL_HEIGHT <= ssd1351_coordinates.y + height)) return;
 80019f4:	bf00      	nop
 80019f6:	e000      	b.n	80019fa <ssd1351_write_char+0x11e>
	return;
 80019f8:	bf00      	nop
}
 80019fa:	3724      	adds	r7, #36	; 0x24
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd90      	pop	{r4, r7, pc}
 8001a00:	200006f8 	.word	0x200006f8

08001a04 <ssd1351_printf>:


void ssd1351_printf(char *string)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b08a      	sub	sp, #40	; 0x28
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
	char mem_string[18] = "";
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	f107 0310 	add.w	r3, r7, #16
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	609a      	str	r2, [r3, #8]
 8001a1c:	819a      	strh	r2, [r3, #12]
	uint8_t mem_string_cnt = 0;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t row_num = 0;
 8001a24:	2300      	movs	r3, #0
 8001a26:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	row_num = 0; // careful may be starting on a new row
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	bool new_word_flag = true;
 8001a30:	2301      	movs	r3, #1
 8001a32:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	bool print_flag = false;
 8001a36:	2300      	movs	r3, #0
 8001a38:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	// find all spaces first...
	if (NULL == string) return;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	f000 8089 	beq.w	8001b56 <ssd1351_printf+0x152>
	for(int i = 0; i < strlen(string); i++)
 8001a44:	2300      	movs	r3, #0
 8001a46:	623b      	str	r3, [r7, #32]
 8001a48:	e07c      	b.n	8001b44 <ssd1351_printf+0x140>
	{
		if (new_word_flag)
 8001a4a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d00b      	beq.n	8001a6a <ssd1351_printf+0x66>
		{
			new_word_flag = false;
 8001a52:	2300      	movs	r3, #0
 8001a54:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			row_num = i / 19;
 8001a58:	6a3b      	ldr	r3, [r7, #32]
 8001a5a:	4a41      	ldr	r2, [pc, #260]	; (8001b60 <ssd1351_printf+0x15c>)
 8001a5c:	fb82 1203 	smull	r1, r2, r2, r3
 8001a60:	10d2      	asrs	r2, r2, #3
 8001a62:	17db      	asrs	r3, r3, #31
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		}
		if (strlen(string) - 1 == i) print_flag = true;
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f7fe fbb0 	bl	80001d0 <strlen>
 8001a70:	4603      	mov	r3, r0
 8001a72:	1e5a      	subs	r2, r3, #1
 8001a74:	6a3b      	ldr	r3, [r7, #32]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d102      	bne.n	8001a80 <ssd1351_printf+0x7c>
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		if (string[i] != ' ') mem_string[mem_string_cnt++] = string[i];
 8001a80:	6a3b      	ldr	r3, [r7, #32]
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	4413      	add	r3, r2
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	2b20      	cmp	r3, #32
 8001a8a:	d00d      	beq.n	8001aa8 <ssd1351_printf+0xa4>
 8001a8c:	6a3b      	ldr	r3, [r7, #32]
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	441a      	add	r2, r3
 8001a92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a96:	1c59      	adds	r1, r3, #1
 8001a98:	f887 1027 	strb.w	r1, [r7, #39]	; 0x27
 8001a9c:	7812      	ldrb	r2, [r2, #0]
 8001a9e:	3328      	adds	r3, #40	; 0x28
 8001aa0:	443b      	add	r3, r7
 8001aa2:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8001aa6:	e002      	b.n	8001aae <ssd1351_printf+0xaa>
		else print_flag = true;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		if(print_flag)
 8001aae:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d043      	beq.n	8001b3e <ssd1351_printf+0x13a>
		{
			mem_string_cnt = 0;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if ((i / 19) != row_num)
 8001abc:	6a3b      	ldr	r3, [r7, #32]
 8001abe:	4a28      	ldr	r2, [pc, #160]	; (8001b60 <ssd1351_printf+0x15c>)
 8001ac0:	fb82 1203 	smull	r1, r2, r2, r3
 8001ac4:	10d2      	asrs	r2, r2, #3
 8001ac6:	17db      	asrs	r3, r3, #31
 8001ac8:	1ad2      	subs	r2, r2, r3
 8001aca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d016      	beq.n	8001b00 <ssd1351_printf+0xfc>
			{
				ssd1351_write_char(g_font_color, Font_7x10, '\n');
 8001ad2:	4b24      	ldr	r3, [pc, #144]	; (8001b64 <ssd1351_printf+0x160>)
 8001ad4:	8818      	ldrh	r0, [r3, #0]
 8001ad6:	4a24      	ldr	r2, [pc, #144]	; (8001b68 <ssd1351_printf+0x164>)
 8001ad8:	230a      	movs	r3, #10
 8001ada:	ca06      	ldmia	r2, {r1, r2}
 8001adc:	f7ff fefe 	bl	80018dc <ssd1351_write_char>
			}
			while(mem_string[mem_string_cnt] != 0)
 8001ae0:	e00e      	b.n	8001b00 <ssd1351_printf+0xfc>
			{
				ssd1351_write_char(g_font_color, Font_7x10, mem_string[mem_string_cnt++]);
 8001ae2:	4b20      	ldr	r3, [pc, #128]	; (8001b64 <ssd1351_printf+0x160>)
 8001ae4:	8818      	ldrh	r0, [r3, #0]
 8001ae6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001aea:	1c5a      	adds	r2, r3, #1
 8001aec:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8001af0:	3328      	adds	r3, #40	; 0x28
 8001af2:	443b      	add	r3, r7
 8001af4:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001af8:	4a1b      	ldr	r2, [pc, #108]	; (8001b68 <ssd1351_printf+0x164>)
 8001afa:	ca06      	ldmia	r2, {r1, r2}
 8001afc:	f7ff feee 	bl	80018dc <ssd1351_write_char>
			while(mem_string[mem_string_cnt] != 0)
 8001b00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b04:	3328      	adds	r3, #40	; 0x28
 8001b06:	443b      	add	r3, r7
 8001b08:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d1e8      	bne.n	8001ae2 <ssd1351_printf+0xde>
			}
			ssd1351_write_char(g_font_color, Font_7x10, ' ');
 8001b10:	4b14      	ldr	r3, [pc, #80]	; (8001b64 <ssd1351_printf+0x160>)
 8001b12:	8818      	ldrh	r0, [r3, #0]
 8001b14:	4a14      	ldr	r2, [pc, #80]	; (8001b68 <ssd1351_printf+0x164>)
 8001b16:	2320      	movs	r3, #32
 8001b18:	ca06      	ldmia	r2, {r1, r2}
 8001b1a:	f7ff fedf 	bl	80018dc <ssd1351_write_char>
			//ssd1351_write_buffer_to_display();
			memset(mem_string, 0, sizeof(mem_string));
 8001b1e:	f107 030c 	add.w	r3, r7, #12
 8001b22:	2212      	movs	r2, #18
 8001b24:	2100      	movs	r1, #0
 8001b26:	4618      	mov	r0, r3
 8001b28:	f007 fbfc 	bl	8009324 <memset>
			mem_string_cnt = 0;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			new_word_flag = true;
 8001b32:	2301      	movs	r3, #1
 8001b34:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			print_flag = false;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	for(int i = 0; i < strlen(string); i++)
 8001b3e:	6a3b      	ldr	r3, [r7, #32]
 8001b40:	3301      	adds	r3, #1
 8001b42:	623b      	str	r3, [r7, #32]
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f7fe fb43 	bl	80001d0 <strlen>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	6a3b      	ldr	r3, [r7, #32]
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	f63f af7b 	bhi.w	8001a4a <ssd1351_printf+0x46>
 8001b54:	e000      	b.n	8001b58 <ssd1351_printf+0x154>
	if (NULL == string) return;
 8001b56:	bf00      	nop
		ssd1351_write_char(g_font_color, Font_7x10, *string);
		string++;
	}
	*/
	//ssd1351_write_buffer_to_display();
}
 8001b58:	3728      	adds	r7, #40	; 0x28
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	6bca1af3 	.word	0x6bca1af3
 8001b64:	20000016 	.word	0x20000016
 8001b68:	20000000 	.word	0x20000000

08001b6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b72:	4b11      	ldr	r3, [pc, #68]	; (8001bb8 <HAL_MspInit+0x4c>)
 8001b74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b76:	4a10      	ldr	r2, [pc, #64]	; (8001bb8 <HAL_MspInit+0x4c>)
 8001b78:	f043 0301 	orr.w	r3, r3, #1
 8001b7c:	6613      	str	r3, [r2, #96]	; 0x60
 8001b7e:	4b0e      	ldr	r3, [pc, #56]	; (8001bb8 <HAL_MspInit+0x4c>)
 8001b80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	607b      	str	r3, [r7, #4]
 8001b88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b8a:	4b0b      	ldr	r3, [pc, #44]	; (8001bb8 <HAL_MspInit+0x4c>)
 8001b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b8e:	4a0a      	ldr	r2, [pc, #40]	; (8001bb8 <HAL_MspInit+0x4c>)
 8001b90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b94:	6593      	str	r3, [r2, #88]	; 0x58
 8001b96:	4b08      	ldr	r3, [pc, #32]	; (8001bb8 <HAL_MspInit+0x4c>)
 8001b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b9e:	603b      	str	r3, [r7, #0]
 8001ba0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	210f      	movs	r1, #15
 8001ba6:	f06f 0001 	mvn.w	r0, #1
 8001baa:	f000 ff53 	bl	8002a54 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bae:	bf00      	nop
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40021000 	.word	0x40021000

08001bbc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b08a      	sub	sp, #40	; 0x28
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc4:	f107 0314 	add.w	r3, r7, #20
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	609a      	str	r2, [r3, #8]
 8001bd0:	60da      	str	r2, [r3, #12]
 8001bd2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a25      	ldr	r2, [pc, #148]	; (8001c70 <HAL_SPI_MspInit+0xb4>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d144      	bne.n	8001c68 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001bde:	4b25      	ldr	r3, [pc, #148]	; (8001c74 <HAL_SPI_MspInit+0xb8>)
 8001be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be2:	4a24      	ldr	r2, [pc, #144]	; (8001c74 <HAL_SPI_MspInit+0xb8>)
 8001be4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001be8:	6593      	str	r3, [r2, #88]	; 0x58
 8001bea:	4b22      	ldr	r3, [pc, #136]	; (8001c74 <HAL_SPI_MspInit+0xb8>)
 8001bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bf2:	613b      	str	r3, [r7, #16]
 8001bf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bf6:	4b1f      	ldr	r3, [pc, #124]	; (8001c74 <HAL_SPI_MspInit+0xb8>)
 8001bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bfa:	4a1e      	ldr	r2, [pc, #120]	; (8001c74 <HAL_SPI_MspInit+0xb8>)
 8001bfc:	f043 0304 	orr.w	r3, r3, #4
 8001c00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c02:	4b1c      	ldr	r3, [pc, #112]	; (8001c74 <HAL_SPI_MspInit+0xb8>)
 8001c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c06:	f003 0304 	and.w	r3, r3, #4
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c0e:	4b19      	ldr	r3, [pc, #100]	; (8001c74 <HAL_SPI_MspInit+0xb8>)
 8001c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c12:	4a18      	ldr	r2, [pc, #96]	; (8001c74 <HAL_SPI_MspInit+0xb8>)
 8001c14:	f043 0302 	orr.w	r3, r3, #2
 8001c18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c1a:	4b16      	ldr	r3, [pc, #88]	; (8001c74 <HAL_SPI_MspInit+0xb8>)
 8001c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	60bb      	str	r3, [r7, #8]
 8001c24:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c26:	2304      	movs	r3, #4
 8001c28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c32:	2303      	movs	r3, #3
 8001c34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c36:	2305      	movs	r3, #5
 8001c38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c3a:	f107 0314 	add.w	r3, r7, #20
 8001c3e:	4619      	mov	r1, r3
 8001c40:	480d      	ldr	r0, [pc, #52]	; (8001c78 <HAL_SPI_MspInit+0xbc>)
 8001c42:	f001 fbad 	bl	80033a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001c46:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001c4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c50:	2300      	movs	r3, #0
 8001c52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c54:	2303      	movs	r3, #3
 8001c56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c58:	2305      	movs	r3, #5
 8001c5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c5c:	f107 0314 	add.w	r3, r7, #20
 8001c60:	4619      	mov	r1, r3
 8001c62:	4806      	ldr	r0, [pc, #24]	; (8001c7c <HAL_SPI_MspInit+0xc0>)
 8001c64:	f001 fb9c 	bl	80033a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001c68:	bf00      	nop
 8001c6a:	3728      	adds	r7, #40	; 0x28
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	40003800 	.word	0x40003800
 8001c74:	40021000 	.word	0x40021000
 8001c78:	48000800 	.word	0x48000800
 8001c7c:	48000400 	.word	0x48000400

08001c80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b08a      	sub	sp, #40	; 0x28
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c88:	f107 0314 	add.w	r3, r7, #20
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	605a      	str	r2, [r3, #4]
 8001c92:	609a      	str	r2, [r3, #8]
 8001c94:	60da      	str	r2, [r3, #12]
 8001c96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a41      	ldr	r2, [pc, #260]	; (8001da4 <HAL_UART_MspInit+0x124>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d17b      	bne.n	8001d9a <HAL_UART_MspInit+0x11a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ca2:	4b41      	ldr	r3, [pc, #260]	; (8001da8 <HAL_UART_MspInit+0x128>)
 8001ca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ca6:	4a40      	ldr	r2, [pc, #256]	; (8001da8 <HAL_UART_MspInit+0x128>)
 8001ca8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cac:	6613      	str	r3, [r2, #96]	; 0x60
 8001cae:	4b3e      	ldr	r3, [pc, #248]	; (8001da8 <HAL_UART_MspInit+0x128>)
 8001cb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cb6:	613b      	str	r3, [r7, #16]
 8001cb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cba:	4b3b      	ldr	r3, [pc, #236]	; (8001da8 <HAL_UART_MspInit+0x128>)
 8001cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cbe:	4a3a      	ldr	r2, [pc, #232]	; (8001da8 <HAL_UART_MspInit+0x128>)
 8001cc0:	f043 0301 	orr.w	r3, r3, #1
 8001cc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cc6:	4b38      	ldr	r3, [pc, #224]	; (8001da8 <HAL_UART_MspInit+0x128>)
 8001cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cca:	f003 0301 	and.w	r3, r3, #1
 8001cce:	60fb      	str	r3, [r7, #12]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001cd2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001cd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd8:	2302      	movs	r3, #2
 8001cda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ce4:	2307      	movs	r3, #7
 8001ce6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce8:	f107 0314 	add.w	r3, r7, #20
 8001cec:	4619      	mov	r1, r3
 8001cee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cf2:	f001 fb55 	bl	80033a0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    g_hdma_usart1_rx.Instance = DMA1_Channel5;
 8001cf6:	4b2d      	ldr	r3, [pc, #180]	; (8001dac <HAL_UART_MspInit+0x12c>)
 8001cf8:	4a2d      	ldr	r2, [pc, #180]	; (8001db0 <HAL_UART_MspInit+0x130>)
 8001cfa:	601a      	str	r2, [r3, #0]
    g_hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8001cfc:	4b2b      	ldr	r3, [pc, #172]	; (8001dac <HAL_UART_MspInit+0x12c>)
 8001cfe:	2202      	movs	r2, #2
 8001d00:	605a      	str	r2, [r3, #4]
    g_hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d02:	4b2a      	ldr	r3, [pc, #168]	; (8001dac <HAL_UART_MspInit+0x12c>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	609a      	str	r2, [r3, #8]
    g_hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d08:	4b28      	ldr	r3, [pc, #160]	; (8001dac <HAL_UART_MspInit+0x12c>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	60da      	str	r2, [r3, #12]
    g_hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d0e:	4b27      	ldr	r3, [pc, #156]	; (8001dac <HAL_UART_MspInit+0x12c>)
 8001d10:	2280      	movs	r2, #128	; 0x80
 8001d12:	611a      	str	r2, [r3, #16]
    g_hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d14:	4b25      	ldr	r3, [pc, #148]	; (8001dac <HAL_UART_MspInit+0x12c>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	615a      	str	r2, [r3, #20]
    g_hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d1a:	4b24      	ldr	r3, [pc, #144]	; (8001dac <HAL_UART_MspInit+0x12c>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	619a      	str	r2, [r3, #24]
    g_hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001d20:	4b22      	ldr	r3, [pc, #136]	; (8001dac <HAL_UART_MspInit+0x12c>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	61da      	str	r2, [r3, #28]
    g_hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d26:	4b21      	ldr	r3, [pc, #132]	; (8001dac <HAL_UART_MspInit+0x12c>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&g_hdma_usart1_rx) != HAL_OK)
 8001d2c:	481f      	ldr	r0, [pc, #124]	; (8001dac <HAL_UART_MspInit+0x12c>)
 8001d2e:	f000 febb 	bl	8002aa8 <HAL_DMA_Init>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <HAL_UART_MspInit+0xbc>
    {
      Error_Handler();
 8001d38:	f7fe fd88 	bl	800084c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,g_hdma_usart1_rx);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4a1b      	ldr	r2, [pc, #108]	; (8001dac <HAL_UART_MspInit+0x12c>)
 8001d40:	671a      	str	r2, [r3, #112]	; 0x70
 8001d42:	4a1a      	ldr	r2, [pc, #104]	; (8001dac <HAL_UART_MspInit+0x12c>)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    g_hdma_usart1_tx.Instance = DMA1_Channel4;
 8001d48:	4b1a      	ldr	r3, [pc, #104]	; (8001db4 <HAL_UART_MspInit+0x134>)
 8001d4a:	4a1b      	ldr	r2, [pc, #108]	; (8001db8 <HAL_UART_MspInit+0x138>)
 8001d4c:	601a      	str	r2, [r3, #0]
    g_hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 8001d4e:	4b19      	ldr	r3, [pc, #100]	; (8001db4 <HAL_UART_MspInit+0x134>)
 8001d50:	2202      	movs	r2, #2
 8001d52:	605a      	str	r2, [r3, #4]
    g_hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d54:	4b17      	ldr	r3, [pc, #92]	; (8001db4 <HAL_UART_MspInit+0x134>)
 8001d56:	2210      	movs	r2, #16
 8001d58:	609a      	str	r2, [r3, #8]
    g_hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d5a:	4b16      	ldr	r3, [pc, #88]	; (8001db4 <HAL_UART_MspInit+0x134>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	60da      	str	r2, [r3, #12]
    g_hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d60:	4b14      	ldr	r3, [pc, #80]	; (8001db4 <HAL_UART_MspInit+0x134>)
 8001d62:	2280      	movs	r2, #128	; 0x80
 8001d64:	611a      	str	r2, [r3, #16]
    g_hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d66:	4b13      	ldr	r3, [pc, #76]	; (8001db4 <HAL_UART_MspInit+0x134>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	615a      	str	r2, [r3, #20]
    g_hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d6c:	4b11      	ldr	r3, [pc, #68]	; (8001db4 <HAL_UART_MspInit+0x134>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	619a      	str	r2, [r3, #24]
    g_hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001d72:	4b10      	ldr	r3, [pc, #64]	; (8001db4 <HAL_UART_MspInit+0x134>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	61da      	str	r2, [r3, #28]
    g_hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d78:	4b0e      	ldr	r3, [pc, #56]	; (8001db4 <HAL_UART_MspInit+0x134>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&g_hdma_usart1_tx) != HAL_OK)
 8001d7e:	480d      	ldr	r0, [pc, #52]	; (8001db4 <HAL_UART_MspInit+0x134>)
 8001d80:	f000 fe92 	bl	8002aa8 <HAL_DMA_Init>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 8001d8a:	f7fe fd5f 	bl	800084c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,g_hdma_usart1_tx);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a08      	ldr	r2, [pc, #32]	; (8001db4 <HAL_UART_MspInit+0x134>)
 8001d92:	66da      	str	r2, [r3, #108]	; 0x6c
 8001d94:	4a07      	ldr	r2, [pc, #28]	; (8001db4 <HAL_UART_MspInit+0x134>)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001d9a:	bf00      	nop
 8001d9c:	3728      	adds	r7, #40	; 0x28
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	40013800 	.word	0x40013800
 8001da8:	40021000 	.word	0x40021000
 8001dac:	20000150 	.word	0x20000150
 8001db0:	40020058 	.word	0x40020058
 8001db4:	20000198 	.word	0x20000198
 8001db8:	40020044 	.word	0x40020044

08001dbc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b08c      	sub	sp, #48	; 0x30
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8001dcc:	2200      	movs	r2, #0
 8001dce:	6879      	ldr	r1, [r7, #4]
 8001dd0:	2019      	movs	r0, #25
 8001dd2:	f000 fe3f 	bl	8002a54 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001dd6:	2019      	movs	r0, #25
 8001dd8:	f000 fe58 	bl	8002a8c <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001ddc:	4b1e      	ldr	r3, [pc, #120]	; (8001e58 <HAL_InitTick+0x9c>)
 8001dde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001de0:	4a1d      	ldr	r2, [pc, #116]	; (8001e58 <HAL_InitTick+0x9c>)
 8001de2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001de6:	6613      	str	r3, [r2, #96]	; 0x60
 8001de8:	4b1b      	ldr	r3, [pc, #108]	; (8001e58 <HAL_InitTick+0x9c>)
 8001dea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001df0:	60fb      	str	r3, [r7, #12]
 8001df2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001df4:	f107 0210 	add.w	r2, r7, #16
 8001df8:	f107 0314 	add.w	r3, r7, #20
 8001dfc:	4611      	mov	r1, r2
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f002 faa2 	bl	8004348 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001e04:	f002 fa8a 	bl	800431c <HAL_RCC_GetPCLK2Freq>
 8001e08:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e0c:	4a13      	ldr	r2, [pc, #76]	; (8001e5c <HAL_InitTick+0xa0>)
 8001e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e12:	0c9b      	lsrs	r3, r3, #18
 8001e14:	3b01      	subs	r3, #1
 8001e16:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001e18:	4b11      	ldr	r3, [pc, #68]	; (8001e60 <HAL_InitTick+0xa4>)
 8001e1a:	4a12      	ldr	r2, [pc, #72]	; (8001e64 <HAL_InitTick+0xa8>)
 8001e1c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001e1e:	4b10      	ldr	r3, [pc, #64]	; (8001e60 <HAL_InitTick+0xa4>)
 8001e20:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e24:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001e26:	4a0e      	ldr	r2, [pc, #56]	; (8001e60 <HAL_InitTick+0xa4>)
 8001e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e2a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001e2c:	4b0c      	ldr	r3, [pc, #48]	; (8001e60 <HAL_InitTick+0xa4>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e32:	4b0b      	ldr	r3, [pc, #44]	; (8001e60 <HAL_InitTick+0xa4>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001e38:	4809      	ldr	r0, [pc, #36]	; (8001e60 <HAL_InitTick+0xa4>)
 8001e3a:	f003 f9c5 	bl	80051c8 <HAL_TIM_Base_Init>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d104      	bne.n	8001e4e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001e44:	4806      	ldr	r0, [pc, #24]	; (8001e60 <HAL_InitTick+0xa4>)
 8001e46:	f003 fa21 	bl	800528c <HAL_TIM_Base_Start_IT>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	e000      	b.n	8001e50 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3730      	adds	r7, #48	; 0x30
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	431bde83 	.word	0x431bde83
 8001e60:	200086fc 	.word	0x200086fc
 8001e64:	40012c00 	.word	0x40012c00

08001e68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001e6c:	bf00      	nop
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr

08001e76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e76:	b480      	push	{r7}
 8001e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e7a:	e7fe      	b.n	8001e7a <HardFault_Handler+0x4>

08001e7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e80:	e7fe      	b.n	8001e80 <MemManage_Handler+0x4>

08001e82 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e82:	b480      	push	{r7}
 8001e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e86:	e7fe      	b.n	8001e86 <BusFault_Handler+0x4>

08001e88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e8c:	e7fe      	b.n	8001e8c <UsageFault_Handler+0x4>

08001e8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e92:	bf00      	nop
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&g_hdma_usart1_tx);
 8001ea0:	4802      	ldr	r0, [pc, #8]	; (8001eac <DMA1_Channel4_IRQHandler+0x10>)
 8001ea2:	f000 ff19 	bl	8002cd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001ea6:	bf00      	nop
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	20000198 	.word	0x20000198

08001eb0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&g_hdma_usart1_rx);
 8001eb4:	4802      	ldr	r0, [pc, #8]	; (8001ec0 <DMA1_Channel5_IRQHandler+0x10>)
 8001eb6:	f000 ff0f 	bl	8002cd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	20000150 	.word	0x20000150

08001ec4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ec8:	4802      	ldr	r0, [pc, #8]	; (8001ed4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001eca:	f003 fa33 	bl	8005334 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001ece:	bf00      	nop
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	200086fc 	.word	0x200086fc

08001ed8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001edc:	4b17      	ldr	r3, [pc, #92]	; (8001f3c <SystemInit+0x64>)
 8001ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ee2:	4a16      	ldr	r2, [pc, #88]	; (8001f3c <SystemInit+0x64>)
 8001ee4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ee8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001eec:	4b14      	ldr	r3, [pc, #80]	; (8001f40 <SystemInit+0x68>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a13      	ldr	r2, [pc, #76]	; (8001f40 <SystemInit+0x68>)
 8001ef2:	f043 0301 	orr.w	r3, r3, #1
 8001ef6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001ef8:	4b11      	ldr	r3, [pc, #68]	; (8001f40 <SystemInit+0x68>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001efe:	4b10      	ldr	r3, [pc, #64]	; (8001f40 <SystemInit+0x68>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a0f      	ldr	r2, [pc, #60]	; (8001f40 <SystemInit+0x68>)
 8001f04:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001f08:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001f0c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001f0e:	4b0c      	ldr	r3, [pc, #48]	; (8001f40 <SystemInit+0x68>)
 8001f10:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f14:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001f16:	4b0a      	ldr	r3, [pc, #40]	; (8001f40 <SystemInit+0x68>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a09      	ldr	r2, [pc, #36]	; (8001f40 <SystemInit+0x68>)
 8001f1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f20:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001f22:	4b07      	ldr	r3, [pc, #28]	; (8001f40 <SystemInit+0x68>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f28:	4b04      	ldr	r3, [pc, #16]	; (8001f3c <SystemInit+0x64>)
 8001f2a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f2e:	609a      	str	r2, [r3, #8]
#endif
}
 8001f30:	bf00      	nop
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	e000ed00 	.word	0xe000ed00
 8001f40:	40021000 	.word	0x40021000

08001f44 <task_create>:
  //.priority = (osPriority_t) osPriorityNormal1,
};


void task_create(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
	packet_queue_init();
 8001f48:	f7ff f860 	bl	800100c <packet_queue_init>
	serial_com_init_all();
 8001f4c:	f7ff fa36 	bl	80013bc <serial_com_init_all>
	g_task_sensor_txHandle = osThreadNew(task_sensor_tx_entry, NULL, &g_task_sensor_tx_attributes);
 8001f50:	4a10      	ldr	r2, [pc, #64]	; (8001f94 <task_create+0x50>)
 8001f52:	2100      	movs	r1, #0
 8001f54:	4810      	ldr	r0, [pc, #64]	; (8001f98 <task_create+0x54>)
 8001f56:	f004 faa5 	bl	80064a4 <osThreadNew>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	4a0f      	ldr	r2, [pc, #60]	; (8001f9c <task_create+0x58>)
 8001f5e:	6013      	str	r3, [r2, #0]
	g_task_sensor_rxHandle = osThreadNew(sensor_rx_entry, NULL, &g_task_sensor_rx_attributes);
 8001f60:	4a0f      	ldr	r2, [pc, #60]	; (8001fa0 <task_create+0x5c>)
 8001f62:	2100      	movs	r1, #0
 8001f64:	480f      	ldr	r0, [pc, #60]	; (8001fa4 <task_create+0x60>)
 8001f66:	f004 fa9d 	bl	80064a4 <osThreadNew>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	4a0e      	ldr	r2, [pc, #56]	; (8001fa8 <task_create+0x64>)
 8001f6e:	6013      	str	r3, [r2, #0]
	g_task_sensor_accHandle = osThreadNew(task_sensor_access_entry, NULL, &g_task_sensor_acc_attributes);
 8001f70:	4a0e      	ldr	r2, [pc, #56]	; (8001fac <task_create+0x68>)
 8001f72:	2100      	movs	r1, #0
 8001f74:	480e      	ldr	r0, [pc, #56]	; (8001fb0 <task_create+0x6c>)
 8001f76:	f004 fa95 	bl	80064a4 <osThreadNew>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	4a0d      	ldr	r2, [pc, #52]	; (8001fb4 <task_create+0x70>)
 8001f7e:	6013      	str	r3, [r2, #0]
	g_task_keypad_accHandle = osThreadNew(task_keypad_access_entry, NULL, &g_task_keypad_acc_attributes);
 8001f80:	4a0d      	ldr	r2, [pc, #52]	; (8001fb8 <task_create+0x74>)
 8001f82:	2100      	movs	r1, #0
 8001f84:	480d      	ldr	r0, [pc, #52]	; (8001fbc <task_create+0x78>)
 8001f86:	f004 fa8d 	bl	80064a4 <osThreadNew>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	4a0c      	ldr	r2, [pc, #48]	; (8001fc0 <task_create+0x7c>)
 8001f8e:	6013      	str	r3, [r2, #0]
}
 8001f90:	bf00      	nop
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	08009d8c 	.word	0x08009d8c
 8001f98:	08001449 	.word	0x08001449
 8001f9c:	2000874c 	.word	0x2000874c
 8001fa0:	08009d68 	.word	0x08009d68
 8001fa4:	08001485 	.word	0x08001485
 8001fa8:	20008748 	.word	0x20008748
 8001fac:	08009db0 	.word	0x08009db0
 8001fb0:	08002151 	.word	0x08002151
 8001fb4:	20008750 	.word	0x20008750
 8001fb8:	08009dd4 	.word	0x08009dd4
 8001fbc:	08001fc5 	.word	0x08001fc5
 8001fc0:	20008754 	.word	0x20008754

08001fc4 <task_keypad_access_entry>:
uint8_t g_user_input[KEYPAD_PASSWORD_LENGTH] = {0};
keypad_state_e g_keypad_state = KEYPAD_STATE_SCAN;


void task_keypad_access_entry(void *argument)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
	uint8_t key_stroke = 0;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	73bb      	strb	r3, [r7, #14]
	uint8_t password_index = 0;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	73fb      	strb	r3, [r7, #15]
	//uint8_t failed_attempts = 0;
	while(1)
	{
		switch(g_keypad_state)
 8001fd4:	4b41      	ldr	r3, [pc, #260]	; (80020dc <task_keypad_access_entry+0x118>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	2b03      	cmp	r3, #3
 8001fda:	d87a      	bhi.n	80020d2 <task_keypad_access_entry+0x10e>
 8001fdc:	a201      	add	r2, pc, #4	; (adr r2, 8001fe4 <task_keypad_access_entry+0x20>)
 8001fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fe2:	bf00      	nop
 8001fe4:	08001ff5 	.word	0x08001ff5
 8001fe8:	08002007 	.word	0x08002007
 8001fec:	080020a1 	.word	0x080020a1
 8001ff0:	080020c5 	.word	0x080020c5
		{
			case KEYPAD_STATE_SCAN:
				if (keypad_scan()) g_keypad_state = KEYPAD_STATE_BTN_PRESS;
 8001ff4:	f7fe ff46 	bl	8000e84 <keypad_scan>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d066      	beq.n	80020cc <task_keypad_access_entry+0x108>
 8001ffe:	4b37      	ldr	r3, [pc, #220]	; (80020dc <task_keypad_access_entry+0x118>)
 8002000:	2201      	movs	r2, #1
 8002002:	701a      	strb	r2, [r3, #0]
			break;
 8002004:	e062      	b.n	80020cc <task_keypad_access_entry+0x108>
			case KEYPAD_STATE_BTN_PRESS:
				key_stroke = keypad_button_pressed();
 8002006:	f7fe ff31 	bl	8000e6c <keypad_button_pressed>
 800200a:	4603      	mov	r3, r0
 800200c:	73bb      	strb	r3, [r7, #14]
				task_sensor_access_set_btn_pause();
 800200e:	f000 f86b 	bl	80020e8 <task_sensor_access_set_btn_pause>
				g_keypad_state = KEYPAD_STATE_SCAN;
 8002012:	4b32      	ldr	r3, [pc, #200]	; (80020dc <task_keypad_access_entry+0x118>)
 8002014:	2200      	movs	r2, #0
 8002016:	701a      	strb	r2, [r3, #0]
				if (GT521FX_STATE_IDENTIFY == gt521fx_current_state())
 8002018:	f000 f872 	bl	8002100 <gt521fx_current_state>
 800201c:	4603      	mov	r3, r0
 800201e:	2b04      	cmp	r3, #4
 8002020:	d130      	bne.n	8002084 <task_keypad_access_entry+0xc0>
				{
					g_user_input[password_index++] = key_stroke;
 8002022:	7bfb      	ldrb	r3, [r7, #15]
 8002024:	1c5a      	adds	r2, r3, #1
 8002026:	73fa      	strb	r2, [r7, #15]
 8002028:	4619      	mov	r1, r3
 800202a:	4a2d      	ldr	r2, [pc, #180]	; (80020e0 <task_keypad_access_entry+0x11c>)
 800202c:	7bbb      	ldrb	r3, [r7, #14]
 800202e:	5453      	strb	r3, [r2, r1]
					if (12 == key_stroke)
 8002030:	7bbb      	ldrb	r3, [r7, #14]
 8002032:	2b0c      	cmp	r3, #12
 8002034:	d106      	bne.n	8002044 <task_keypad_access_entry+0x80>
					{
						memset(g_user_input, 0, KEYPAD_PASSWORD_LENGTH);
 8002036:	2208      	movs	r2, #8
 8002038:	2100      	movs	r1, #0
 800203a:	4829      	ldr	r0, [pc, #164]	; (80020e0 <task_keypad_access_entry+0x11c>)
 800203c:	f007 f972 	bl	8009324 <memset>
						password_index = 0;
 8002040:	2300      	movs	r3, #0
 8002042:	73fb      	strb	r3, [r7, #15]
					}
					if (KEYPAD_PASSWORD_LENGTH == password_index)
 8002044:	7bfb      	ldrb	r3, [r7, #15]
 8002046:	2b08      	cmp	r3, #8
 8002048:	d118      	bne.n	800207c <task_keypad_access_entry+0xb8>
					{
						if (keypad_password_check(g_user_input))
 800204a:	4825      	ldr	r0, [pc, #148]	; (80020e0 <task_keypad_access_entry+0x11c>)
 800204c:	f7fe fed2 	bl	8000df4 <keypad_password_check>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d00a      	beq.n	800206c <task_keypad_access_entry+0xa8>
						{
							memset(g_user_input, 0, KEYPAD_PASSWORD_LENGTH);
 8002056:	2208      	movs	r2, #8
 8002058:	2100      	movs	r1, #0
 800205a:	4821      	ldr	r0, [pc, #132]	; (80020e0 <task_keypad_access_entry+0x11c>)
 800205c:	f007 f962 	bl	8009324 <memset>
							password_index = 0;
 8002060:	2300      	movs	r3, #0
 8002062:	73fb      	strb	r3, [r7, #15]
							g_keypad_state = KEYPAD_STATE_PASSWORD_MATCH;
 8002064:	4b1d      	ldr	r3, [pc, #116]	; (80020dc <task_keypad_access_entry+0x118>)
 8002066:	2202      	movs	r2, #2
 8002068:	701a      	strb	r2, [r3, #0]
				else if(GT521FX_STATE_ADMIN == gt521fx_current_state())
				{
					gt521fx_set_state(key_stroke);
					g_keypad_state = KEYPAD_STATE_SCAN;
				}
			break;
 800206a:	e031      	b.n	80020d0 <task_keypad_access_entry+0x10c>
							memset(g_user_input, 0, KEYPAD_PASSWORD_LENGTH);
 800206c:	2208      	movs	r2, #8
 800206e:	2100      	movs	r1, #0
 8002070:	481b      	ldr	r0, [pc, #108]	; (80020e0 <task_keypad_access_entry+0x11c>)
 8002072:	f007 f957 	bl	8009324 <memset>
							password_index = 0;
 8002076:	2300      	movs	r3, #0
 8002078:	73fb      	strb	r3, [r7, #15]
			break;
 800207a:	e029      	b.n	80020d0 <task_keypad_access_entry+0x10c>
						g_keypad_state = KEYPAD_STATE_SCAN;
 800207c:	4b17      	ldr	r3, [pc, #92]	; (80020dc <task_keypad_access_entry+0x118>)
 800207e:	2200      	movs	r2, #0
 8002080:	701a      	strb	r2, [r3, #0]
			break;
 8002082:	e025      	b.n	80020d0 <task_keypad_access_entry+0x10c>
				else if(GT521FX_STATE_ADMIN == gt521fx_current_state())
 8002084:	f000 f83c 	bl	8002100 <gt521fx_current_state>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d120      	bne.n	80020d0 <task_keypad_access_entry+0x10c>
					gt521fx_set_state(key_stroke);
 800208e:	7bbb      	ldrb	r3, [r7, #14]
 8002090:	b29b      	uxth	r3, r3
 8002092:	4618      	mov	r0, r3
 8002094:	f000 f840 	bl	8002118 <gt521fx_set_state>
					g_keypad_state = KEYPAD_STATE_SCAN;
 8002098:	4b10      	ldr	r3, [pc, #64]	; (80020dc <task_keypad_access_entry+0x118>)
 800209a:	2200      	movs	r2, #0
 800209c:	701a      	strb	r2, [r3, #0]
			break;
 800209e:	e017      	b.n	80020d0 <task_keypad_access_entry+0x10c>
			case KEYPAD_STATE_PASSWORD_MATCH:
				gt521fx_set_state(0);
 80020a0:	2000      	movs	r0, #0
 80020a2:	f000 f839 	bl	8002118 <gt521fx_set_state>
				ssd1351_clear_screen();
 80020a6:	f7ff fc01 	bl	80018ac <ssd1351_clear_screen>
				ssd1351_printf("Correct password!\n");
 80020aa:	480e      	ldr	r0, [pc, #56]	; (80020e4 <task_keypad_access_entry+0x120>)
 80020ac:	f7ff fcaa 	bl	8001a04 <ssd1351_printf>
				ssd1351_write_buffer_to_display();
 80020b0:	f7ff fa6e 	bl	8001590 <ssd1351_write_buffer_to_display>
				osDelay(1000);
 80020b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80020b8:	f004 fa86 	bl	80065c8 <osDelay>
				g_keypad_state = KEYPAD_STATE_SCAN;
 80020bc:	4b07      	ldr	r3, [pc, #28]	; (80020dc <task_keypad_access_entry+0x118>)
 80020be:	2200      	movs	r2, #0
 80020c0:	701a      	strb	r2, [r3, #0]
		    break;
 80020c2:	e006      	b.n	80020d2 <task_keypad_access_entry+0x10e>
			case KEYPAD_STATE_LOCKOUT:
				g_keypad_state = KEYPAD_STATE_SCAN;
 80020c4:	4b05      	ldr	r3, [pc, #20]	; (80020dc <task_keypad_access_entry+0x118>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	701a      	strb	r2, [r3, #0]
				// @todo if 5 failures in a row then this should lock for like an hour maybe
		    break;
 80020ca:	e002      	b.n	80020d2 <task_keypad_access_entry+0x10e>
			break;
 80020cc:	bf00      	nop
 80020ce:	e000      	b.n	80020d2 <task_keypad_access_entry+0x10e>
			break;
 80020d0:	bf00      	nop
		}
		osDelay(1);
 80020d2:	2001      	movs	r0, #1
 80020d4:	f004 fa78 	bl	80065c8 <osDelay>
		switch(g_keypad_state)
 80020d8:	e77c      	b.n	8001fd4 <task_keypad_access_entry+0x10>
 80020da:	bf00      	nop
 80020dc:	2000a8d0 	.word	0x2000a8d0
 80020e0:	2000a8c8 	.word	0x2000a8c8
 80020e4:	08009438 	.word	0x08009438

080020e8 <task_sensor_access_set_btn_pause>:
	g_pause = false;
}


void task_sensor_access_set_btn_pause(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
	g_pause = true;
 80020ec:	4b03      	ldr	r3, [pc, #12]	; (80020fc <task_sensor_access_set_btn_pause+0x14>)
 80020ee:	2201      	movs	r2, #1
 80020f0:	701a      	strb	r2, [r3, #0]
}
 80020f2:	bf00      	nop
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr
 80020fc:	2000a8d2 	.word	0x2000a8d2

08002100 <gt521fx_current_state>:
	g_refresh_screen = true;
}


gt521fx_state_e gt521fx_current_state(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
	return g_gt521fx_state;
 8002104:	4b03      	ldr	r3, [pc, #12]	; (8002114 <gt521fx_current_state+0x14>)
 8002106:	781b      	ldrb	r3, [r3, #0]
}
 8002108:	4618      	mov	r0, r3
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	2000001d 	.word	0x2000001d

08002118 <gt521fx_set_state>:


void gt521fx_set_state(uint16_t key)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	4603      	mov	r3, r0
 8002120:	80fb      	strh	r3, [r7, #6]
	g_refresh_screen = true;
 8002122:	4b08      	ldr	r3, [pc, #32]	; (8002144 <gt521fx_set_state+0x2c>)
 8002124:	2201      	movs	r2, #1
 8002126:	701a      	strb	r2, [r3, #0]
    g_gt521fx_forced_state_change = true;
 8002128:	4b07      	ldr	r3, [pc, #28]	; (8002148 <gt521fx_set_state+0x30>)
 800212a:	2201      	movs	r2, #1
 800212c:	701a      	strb	r2, [r3, #0]
	g_gt521fx_state = (gt521fx_state_e)key;
 800212e:	88fb      	ldrh	r3, [r7, #6]
 8002130:	b2da      	uxtb	r2, r3
 8002132:	4b06      	ldr	r3, [pc, #24]	; (800214c <gt521fx_set_state+0x34>)
 8002134:	701a      	strb	r2, [r3, #0]
}
 8002136:	bf00      	nop
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	2000001c 	.word	0x2000001c
 8002148:	2000a8d1 	.word	0x2000a8d1
 800214c:	2000001d 	.word	0x2000001d

08002150 <task_sensor_access_entry>:


void task_sensor_access_entry(void *argument)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
	bool first_pass = true;
 8002158:	2301      	movs	r3, #1
 800215a:	73fb      	strb	r3, [r7, #15]

	char last_id[3] = {0, 0, 0};
 800215c:	4abd      	ldr	r2, [pc, #756]	; (8002454 <task_sensor_access_entry+0x304>)
 800215e:	f107 030c 	add.w	r3, r7, #12
 8002162:	6812      	ldr	r2, [r2, #0]
 8002164:	4611      	mov	r1, r2
 8002166:	8019      	strh	r1, [r3, #0]
 8002168:	3302      	adds	r3, #2
 800216a:	0c12      	lsrs	r2, r2, #16
 800216c:	701a      	strb	r2, [r3, #0]
	while(1)
	{
		if (first_pass)
 800216e:	7bfb      	ldrb	r3, [r7, #15]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d030      	beq.n	80021d6 <task_sensor_access_entry+0x86>
		{

			gt521fx_open();
 8002174:	f7fe fd6a 	bl	8000c4c <gt521fx_open>
			while (!packet_rsp_was_received()) osDelay(10);
 8002178:	e002      	b.n	8002180 <task_sensor_access_entry+0x30>
 800217a:	200a      	movs	r0, #10
 800217c:	f004 fa24 	bl	80065c8 <osDelay>
 8002180:	f7ff f890 	bl	80012a4 <packet_rsp_was_received>
 8002184:	4603      	mov	r3, r0
 8002186:	f083 0301 	eor.w	r3, r3, #1
 800218a:	b2db      	uxtb	r3, r3
 800218c:	2b00      	cmp	r3, #0
 800218e:	d1f4      	bne.n	800217a <task_sensor_access_entry+0x2a>
			gt521fx_led_off();
 8002190:	f7fe fd50 	bl	8000c34 <gt521fx_led_off>
			while (!packet_rsp_was_received()) osDelay(10);
 8002194:	e002      	b.n	800219c <task_sensor_access_entry+0x4c>
 8002196:	200a      	movs	r0, #10
 8002198:	f004 fa16 	bl	80065c8 <osDelay>
 800219c:	f7ff f882 	bl	80012a4 <packet_rsp_was_received>
 80021a0:	4603      	mov	r3, r0
 80021a2:	f083 0301 	eor.w	r3, r3, #1
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d1f4      	bne.n	8002196 <task_sensor_access_entry+0x46>
			osDelay(1000);
 80021ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80021b0:	f004 fa0a 	bl	80065c8 <osDelay>
			gt521fx_led_on();
 80021b4:	f7fe fd32 	bl	8000c1c <gt521fx_led_on>
			while (!packet_rsp_was_received()) osDelay(10);
 80021b8:	e002      	b.n	80021c0 <task_sensor_access_entry+0x70>
 80021ba:	200a      	movs	r0, #10
 80021bc:	f004 fa04 	bl	80065c8 <osDelay>
 80021c0:	f7ff f870 	bl	80012a4 <packet_rsp_was_received>
 80021c4:	4603      	mov	r3, r0
 80021c6:	f083 0301 	eor.w	r3, r3, #1
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d1f4      	bne.n	80021ba <task_sensor_access_entry+0x6a>
			first_pass = false;
 80021d0:	2300      	movs	r3, #0
 80021d2:	73fb      	strb	r3, [r7, #15]
 80021d4:	e7cb      	b.n	800216e <task_sensor_access_entry+0x1e>
		}
		else
		{ 
			switch(g_gt521fx_state)
 80021d6:	4ba0      	ldr	r3, [pc, #640]	; (8002458 <task_sensor_access_entry+0x308>)
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	2b08      	cmp	r3, #8
 80021dc:	f200 82de 	bhi.w	800279c <task_sensor_access_entry+0x64c>
 80021e0:	a201      	add	r2, pc, #4	; (adr r2, 80021e8 <task_sensor_access_entry+0x98>)
 80021e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021e6:	bf00      	nop
 80021e8:	0800220d 	.word	0x0800220d
 80021ec:	08002279 	.word	0x08002279
 80021f0:	08002597 	.word	0x08002597
 80021f4:	080025d1 	.word	0x080025d1
 80021f8:	08002603 	.word	0x08002603
 80021fc:	0800279f 	.word	0x0800279f
 8002200:	0800274b 	.word	0x0800274b
 8002204:	08002773 	.word	0x08002773
 8002208:	08002793 	.word	0x08002793
			{
				case GT521FX_STATE_ADMIN:
					if (g_refresh_screen && !g_gt521fx_forced_state_change)
 800220c:	4b93      	ldr	r3, [pc, #588]	; (800245c <task_sensor_access_entry+0x30c>)
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d02d      	beq.n	8002270 <task_sensor_access_entry+0x120>
 8002214:	4b92      	ldr	r3, [pc, #584]	; (8002460 <task_sensor_access_entry+0x310>)
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	f083 0301 	eor.w	r3, r3, #1
 800221c:	b2db      	uxtb	r3, r3
 800221e:	2b00      	cmp	r3, #0
 8002220:	d026      	beq.n	8002270 <task_sensor_access_entry+0x120>
					{
						g_refresh_screen = false;
 8002222:	4b8e      	ldr	r3, [pc, #568]	; (800245c <task_sensor_access_entry+0x30c>)
 8002224:	2200      	movs	r2, #0
 8002226:	701a      	strb	r2, [r3, #0]
						ssd1351_clear_screen();
 8002228:	f7ff fb40 	bl	80018ac <ssd1351_clear_screen>
						ssd1351_printf("Admin Menu\n");
 800222c:	488d      	ldr	r0, [pc, #564]	; (8002464 <task_sensor_access_entry+0x314>)
 800222e:	f7ff fbe9 	bl	8001a04 <ssd1351_printf>
						ssd1351_printf("1. Enroll\n");
 8002232:	488d      	ldr	r0, [pc, #564]	; (8002468 <task_sensor_access_entry+0x318>)
 8002234:	f7ff fbe6 	bl	8001a04 <ssd1351_printf>
						ssd1351_printf("2. Delete last\n");
 8002238:	488c      	ldr	r0, [pc, #560]	; (800246c <task_sensor_access_entry+0x31c>)
 800223a:	f7ff fbe3 	bl	8001a04 <ssd1351_printf>
						ssd1351_printf("3. Delete all\n");
 800223e:	488c      	ldr	r0, [pc, #560]	; (8002470 <task_sensor_access_entry+0x320>)
 8002240:	f7ff fbe0 	bl	8001a04 <ssd1351_printf>
						ssd1351_printf("4. Identify\n");
 8002244:	488b      	ldr	r0, [pc, #556]	; (8002474 <task_sensor_access_entry+0x324>)
 8002246:	f7ff fbdd 	bl	8001a04 <ssd1351_printf>
						// print FW info in ADMIN menu
						ssd1351_printf("# enrolled ");
 800224a:	488b      	ldr	r0, [pc, #556]	; (8002478 <task_sensor_access_entry+0x328>)
 800224c:	f7ff fbda 	bl	8001a04 <ssd1351_printf>
						ssd1351_printf(itoa(flash_access_gt521fx_last_id(), last_id, 10));
 8002250:	f7fe fb3e 	bl	80008d0 <flash_access_gt521fx_last_id>
 8002254:	4603      	mov	r3, r0
 8002256:	4618      	mov	r0, r3
 8002258:	f107 030c 	add.w	r3, r7, #12
 800225c:	220a      	movs	r2, #10
 800225e:	4619      	mov	r1, r3
 8002260:	f007 f850 	bl	8009304 <itoa>
 8002264:	4603      	mov	r3, r0
 8002266:	4618      	mov	r0, r3
 8002268:	f7ff fbcc 	bl	8001a04 <ssd1351_printf>
						ssd1351_write_buffer_to_display();
 800226c:	f7ff f990 	bl	8001590 <ssd1351_write_buffer_to_display>
					}
					osDelay(100);
 8002270:	2064      	movs	r0, #100	; 0x64
 8002272:	f004 f9a9 	bl	80065c8 <osDelay>
				break;
 8002276:	e293      	b.n	80027a0 <task_sensor_access_entry+0x650>
				case GT521FX_STATE_ENROLL:
					g_gt521fx_forced_state_change = false;
 8002278:	4b79      	ldr	r3, [pc, #484]	; (8002460 <task_sensor_access_entry+0x310>)
 800227a:	2200      	movs	r2, #0
 800227c:	701a      	strb	r2, [r3, #0]
					gt521fx_led_on();
 800227e:	f7fe fccd 	bl	8000c1c <gt521fx_led_on>
					while (!packet_rsp_was_received()) osDelay(100);
 8002282:	e002      	b.n	800228a <task_sensor_access_entry+0x13a>
 8002284:	2064      	movs	r0, #100	; 0x64
 8002286:	f004 f99f 	bl	80065c8 <osDelay>
 800228a:	f7ff f80b 	bl	80012a4 <packet_rsp_was_received>
 800228e:	4603      	mov	r3, r0
 8002290:	f083 0301 	eor.w	r3, r3, #1
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b00      	cmp	r3, #0
 8002298:	d1f4      	bne.n	8002284 <task_sensor_access_entry+0x134>
					ssd1351_clear_screen(); // always clear here
 800229a:	f7ff fb07 	bl	80018ac <ssd1351_clear_screen>
					ssd1351_printf("GT521FX enroll state");
 800229e:	4877      	ldr	r0, [pc, #476]	; (800247c <task_sensor_access_entry+0x32c>)
 80022a0:	f7ff fbb0 	bl	8001a04 <ssd1351_printf>
					gt521fx_start_enrollment(flash_access_gt521fx_last_id() + 1);
 80022a4:	f7fe fb14 	bl	80008d0 <flash_access_gt521fx_last_id>
 80022a8:	4603      	mov	r3, r0
 80022aa:	3301      	adds	r3, #1
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7fe fcd8 	bl	8000c64 <gt521fx_start_enrollment>
					while (!packet_rsp_was_received()) osDelay(100);
 80022b4:	e002      	b.n	80022bc <task_sensor_access_entry+0x16c>
 80022b6:	2064      	movs	r0, #100	; 0x64
 80022b8:	f004 f986 	bl	80065c8 <osDelay>
 80022bc:	f7fe fff2 	bl	80012a4 <packet_rsp_was_received>
 80022c0:	4603      	mov	r3, r0
 80022c2:	f083 0301 	eor.w	r3, r3, #1
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d1f4      	bne.n	80022b6 <task_sensor_access_entry+0x166>
					if (gt521fx_nack_flag()) g_gt521fx_state = GT521FX_STATE_ERROR;
 80022cc:	f7fe fc1e 	bl	8000b0c <gt521fx_nack_flag>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d002      	beq.n	80022dc <task_sensor_access_entry+0x18c>
 80022d6:	4b60      	ldr	r3, [pc, #384]	; (8002458 <task_sensor_access_entry+0x308>)
 80022d8:	2207      	movs	r2, #7
 80022da:	701a      	strb	r2, [r3, #0]
					
					ssd1351_printf("\nPlace finger on sensor");
 80022dc:	4868      	ldr	r0, [pc, #416]	; (8002480 <task_sensor_access_entry+0x330>)
 80022de:	f7ff fb91 	bl	8001a04 <ssd1351_printf>
					ssd1351_write_buffer_to_display();
 80022e2:	f7ff f955 	bl	8001590 <ssd1351_write_buffer_to_display>
					while (!gt521fx_finger_is_pressed_flag()) 
 80022e6:	e00d      	b.n	8002304 <task_sensor_access_entry+0x1b4>
					{
						gt521fx_finger_is_pressed();
 80022e8:	f7fe fcce 	bl	8000c88 <gt521fx_finger_is_pressed>
						while (!packet_rsp_was_received()) osDelay(100);
 80022ec:	e002      	b.n	80022f4 <task_sensor_access_entry+0x1a4>
 80022ee:	2064      	movs	r0, #100	; 0x64
 80022f0:	f004 f96a 	bl	80065c8 <osDelay>
 80022f4:	f7fe ffd6 	bl	80012a4 <packet_rsp_was_received>
 80022f8:	4603      	mov	r3, r0
 80022fa:	f083 0301 	eor.w	r3, r3, #1
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	2b00      	cmp	r3, #0
 8002302:	d1f4      	bne.n	80022ee <task_sensor_access_entry+0x19e>
					while (!gt521fx_finger_is_pressed_flag()) 
 8002304:	f7fe fc5e 	bl	8000bc4 <gt521fx_finger_is_pressed_flag>
 8002308:	4603      	mov	r3, r0
 800230a:	f083 0301 	eor.w	r3, r3, #1
 800230e:	b2db      	uxtb	r3, r3
 8002310:	2b00      	cmp	r3, #0
 8002312:	d1e9      	bne.n	80022e8 <task_sensor_access_entry+0x198>
					}
					gt521fx_finger_is_pressed_clear();
 8002314:	f7fe fc16 	bl	8000b44 <gt521fx_finger_is_pressed_clear>
					gt521fx_capture_finger(true);
 8002318:	2001      	movs	r0, #1
 800231a:	f7fe fcfd 	bl	8000d18 <gt521fx_capture_finger>
					while (!packet_rsp_was_received()) osDelay(100);
 800231e:	e002      	b.n	8002326 <task_sensor_access_entry+0x1d6>
 8002320:	2064      	movs	r0, #100	; 0x64
 8002322:	f004 f951 	bl	80065c8 <osDelay>
 8002326:	f7fe ffbd 	bl	80012a4 <packet_rsp_was_received>
 800232a:	4603      	mov	r3, r0
 800232c:	f083 0301 	eor.w	r3, r3, #1
 8002330:	b2db      	uxtb	r3, r3
 8002332:	2b00      	cmp	r3, #0
 8002334:	d1f4      	bne.n	8002320 <task_sensor_access_entry+0x1d0>
					if (gt521fx_nack_flag()) g_gt521fx_state = GT521FX_STATE_ERROR;
 8002336:	f7fe fbe9 	bl	8000b0c <gt521fx_nack_flag>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d002      	beq.n	8002346 <task_sensor_access_entry+0x1f6>
 8002340:	4b45      	ldr	r3, [pc, #276]	; (8002458 <task_sensor_access_entry+0x308>)
 8002342:	2207      	movs	r2, #7
 8002344:	701a      	strb	r2, [r3, #0]
					
					gt521fx_enrollment(GT521FX_ENROLLMENT_STAGE_FIRST);
 8002346:	2000      	movs	r0, #0
 8002348:	f7fe fd00 	bl	8000d4c <gt521fx_enrollment>
					while (!packet_rsp_was_received()) osDelay(100);
 800234c:	e002      	b.n	8002354 <task_sensor_access_entry+0x204>
 800234e:	2064      	movs	r0, #100	; 0x64
 8002350:	f004 f93a 	bl	80065c8 <osDelay>
 8002354:	f7fe ffa6 	bl	80012a4 <packet_rsp_was_received>
 8002358:	4603      	mov	r3, r0
 800235a:	f083 0301 	eor.w	r3, r3, #1
 800235e:	b2db      	uxtb	r3, r3
 8002360:	2b00      	cmp	r3, #0
 8002362:	d1f4      	bne.n	800234e <task_sensor_access_entry+0x1fe>
					if (gt521fx_nack_flag()) g_gt521fx_state = GT521FX_STATE_ERROR;
 8002364:	f7fe fbd2 	bl	8000b0c <gt521fx_nack_flag>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d002      	beq.n	8002374 <task_sensor_access_entry+0x224>
 800236e:	4b3a      	ldr	r3, [pc, #232]	; (8002458 <task_sensor_access_entry+0x308>)
 8002370:	2207      	movs	r2, #7
 8002372:	701a      	strb	r2, [r3, #0]
					
					ssd1351_printf("\nRemove finger");
 8002374:	4843      	ldr	r0, [pc, #268]	; (8002484 <task_sensor_access_entry+0x334>)
 8002376:	f7ff fb45 	bl	8001a04 <ssd1351_printf>
					ssd1351_write_buffer_to_display();
 800237a:	f7ff f909 	bl	8001590 <ssd1351_write_buffer_to_display>

					while (gt521fx_finger_is_pressed_flag()) 
 800237e:	e00d      	b.n	800239c <task_sensor_access_entry+0x24c>
					{
						gt521fx_finger_is_pressed();
 8002380:	f7fe fc82 	bl	8000c88 <gt521fx_finger_is_pressed>
						while (!packet_rsp_was_received()) osDelay(100);
 8002384:	e002      	b.n	800238c <task_sensor_access_entry+0x23c>
 8002386:	2064      	movs	r0, #100	; 0x64
 8002388:	f004 f91e 	bl	80065c8 <osDelay>
 800238c:	f7fe ff8a 	bl	80012a4 <packet_rsp_was_received>
 8002390:	4603      	mov	r3, r0
 8002392:	f083 0301 	eor.w	r3, r3, #1
 8002396:	b2db      	uxtb	r3, r3
 8002398:	2b00      	cmp	r3, #0
 800239a:	d1f4      	bne.n	8002386 <task_sensor_access_entry+0x236>
					while (gt521fx_finger_is_pressed_flag()) 
 800239c:	f7fe fc12 	bl	8000bc4 <gt521fx_finger_is_pressed_flag>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d1ec      	bne.n	8002380 <task_sensor_access_entry+0x230>
					}
					ssd1351_clear_screen();
 80023a6:	f7ff fa81 	bl	80018ac <ssd1351_clear_screen>
					ssd1351_printf("\nPlace finger on sensor");
 80023aa:	4835      	ldr	r0, [pc, #212]	; (8002480 <task_sensor_access_entry+0x330>)
 80023ac:	f7ff fb2a 	bl	8001a04 <ssd1351_printf>
					ssd1351_write_buffer_to_display();
 80023b0:	f7ff f8ee 	bl	8001590 <ssd1351_write_buffer_to_display>
					while (!gt521fx_finger_is_pressed_flag()) 
 80023b4:	e00d      	b.n	80023d2 <task_sensor_access_entry+0x282>
					{
						gt521fx_finger_is_pressed();
 80023b6:	f7fe fc67 	bl	8000c88 <gt521fx_finger_is_pressed>
						while (!packet_rsp_was_received()) osDelay(100);
 80023ba:	e002      	b.n	80023c2 <task_sensor_access_entry+0x272>
 80023bc:	2064      	movs	r0, #100	; 0x64
 80023be:	f004 f903 	bl	80065c8 <osDelay>
 80023c2:	f7fe ff6f 	bl	80012a4 <packet_rsp_was_received>
 80023c6:	4603      	mov	r3, r0
 80023c8:	f083 0301 	eor.w	r3, r3, #1
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d1f4      	bne.n	80023bc <task_sensor_access_entry+0x26c>
					while (!gt521fx_finger_is_pressed_flag()) 
 80023d2:	f7fe fbf7 	bl	8000bc4 <gt521fx_finger_is_pressed_flag>
 80023d6:	4603      	mov	r3, r0
 80023d8:	f083 0301 	eor.w	r3, r3, #1
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d1e9      	bne.n	80023b6 <task_sensor_access_entry+0x266>
					}
					gt521fx_finger_is_pressed_clear();
 80023e2:	f7fe fbaf 	bl	8000b44 <gt521fx_finger_is_pressed_clear>
					gt521fx_capture_finger(true);
 80023e6:	2001      	movs	r0, #1
 80023e8:	f7fe fc96 	bl	8000d18 <gt521fx_capture_finger>
					while (!packet_rsp_was_received()) osDelay(100);
 80023ec:	e002      	b.n	80023f4 <task_sensor_access_entry+0x2a4>
 80023ee:	2064      	movs	r0, #100	; 0x64
 80023f0:	f004 f8ea 	bl	80065c8 <osDelay>
 80023f4:	f7fe ff56 	bl	80012a4 <packet_rsp_was_received>
 80023f8:	4603      	mov	r3, r0
 80023fa:	f083 0301 	eor.w	r3, r3, #1
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	2b00      	cmp	r3, #0
 8002402:	d1f4      	bne.n	80023ee <task_sensor_access_entry+0x29e>
					if (gt521fx_nack_flag()) g_gt521fx_state = GT521FX_STATE_ERROR;
 8002404:	f7fe fb82 	bl	8000b0c <gt521fx_nack_flag>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d002      	beq.n	8002414 <task_sensor_access_entry+0x2c4>
 800240e:	4b12      	ldr	r3, [pc, #72]	; (8002458 <task_sensor_access_entry+0x308>)
 8002410:	2207      	movs	r2, #7
 8002412:	701a      	strb	r2, [r3, #0]
					
					gt521fx_enrollment(GT521FX_ENROLLMENT_STAGE_SECOND);
 8002414:	2001      	movs	r0, #1
 8002416:	f7fe fc99 	bl	8000d4c <gt521fx_enrollment>
					while (!packet_rsp_was_received()) osDelay(100);
 800241a:	e002      	b.n	8002422 <task_sensor_access_entry+0x2d2>
 800241c:	2064      	movs	r0, #100	; 0x64
 800241e:	f004 f8d3 	bl	80065c8 <osDelay>
 8002422:	f7fe ff3f 	bl	80012a4 <packet_rsp_was_received>
 8002426:	4603      	mov	r3, r0
 8002428:	f083 0301 	eor.w	r3, r3, #1
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b00      	cmp	r3, #0
 8002430:	d1f4      	bne.n	800241c <task_sensor_access_entry+0x2cc>
					if (gt521fx_nack_flag()) g_gt521fx_state = GT521FX_STATE_ERROR;
 8002432:	f7fe fb6b 	bl	8000b0c <gt521fx_nack_flag>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d002      	beq.n	8002442 <task_sensor_access_entry+0x2f2>
 800243c:	4b06      	ldr	r3, [pc, #24]	; (8002458 <task_sensor_access_entry+0x308>)
 800243e:	2207      	movs	r2, #7
 8002440:	701a      	strb	r2, [r3, #0]
					
					ssd1351_printf("\nRemove finger");
 8002442:	4810      	ldr	r0, [pc, #64]	; (8002484 <task_sensor_access_entry+0x334>)
 8002444:	f7ff fade 	bl	8001a04 <ssd1351_printf>
					ssd1351_write_buffer_to_display();
 8002448:	f7ff f8a2 	bl	8001590 <ssd1351_write_buffer_to_display>
					while (gt521fx_finger_is_pressed_flag()) 
 800244c:	e027      	b.n	800249e <task_sensor_access_entry+0x34e>
					{
						gt521fx_finger_is_pressed();
 800244e:	f7fe fc1b 	bl	8000c88 <gt521fx_finger_is_pressed>
						while (!packet_rsp_was_received()) osDelay(100);
 8002452:	e01c      	b.n	800248e <task_sensor_access_entry+0x33e>
 8002454:	08009568 	.word	0x08009568
 8002458:	2000001d 	.word	0x2000001d
 800245c:	2000001c 	.word	0x2000001c
 8002460:	2000a8d1 	.word	0x2000a8d1
 8002464:	0800944c 	.word	0x0800944c
 8002468:	08009458 	.word	0x08009458
 800246c:	08009464 	.word	0x08009464
 8002470:	08009474 	.word	0x08009474
 8002474:	08009484 	.word	0x08009484
 8002478:	08009494 	.word	0x08009494
 800247c:	080094a0 	.word	0x080094a0
 8002480:	080094b8 	.word	0x080094b8
 8002484:	080094d0 	.word	0x080094d0
 8002488:	2064      	movs	r0, #100	; 0x64
 800248a:	f004 f89d 	bl	80065c8 <osDelay>
 800248e:	f7fe ff09 	bl	80012a4 <packet_rsp_was_received>
 8002492:	4603      	mov	r3, r0
 8002494:	f083 0301 	eor.w	r3, r3, #1
 8002498:	b2db      	uxtb	r3, r3
 800249a:	2b00      	cmp	r3, #0
 800249c:	d1f4      	bne.n	8002488 <task_sensor_access_entry+0x338>
					while (gt521fx_finger_is_pressed_flag()) 
 800249e:	f7fe fb91 	bl	8000bc4 <gt521fx_finger_is_pressed_flag>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d1d2      	bne.n	800244e <task_sensor_access_entry+0x2fe>
					}
					ssd1351_clear_screen(); // always clear here
 80024a8:	f7ff fa00 	bl	80018ac <ssd1351_clear_screen>
					ssd1351_printf("\nPlace finger on sensor");
 80024ac:	48bd      	ldr	r0, [pc, #756]	; (80027a4 <task_sensor_access_entry+0x654>)
 80024ae:	f7ff faa9 	bl	8001a04 <ssd1351_printf>
					ssd1351_write_buffer_to_display();
 80024b2:	f7ff f86d 	bl	8001590 <ssd1351_write_buffer_to_display>
					while (!gt521fx_finger_is_pressed_flag()) 
 80024b6:	e00d      	b.n	80024d4 <task_sensor_access_entry+0x384>
					{
						gt521fx_finger_is_pressed();
 80024b8:	f7fe fbe6 	bl	8000c88 <gt521fx_finger_is_pressed>
						while (!packet_rsp_was_received()) osDelay(100);
 80024bc:	e002      	b.n	80024c4 <task_sensor_access_entry+0x374>
 80024be:	2064      	movs	r0, #100	; 0x64
 80024c0:	f004 f882 	bl	80065c8 <osDelay>
 80024c4:	f7fe feee 	bl	80012a4 <packet_rsp_was_received>
 80024c8:	4603      	mov	r3, r0
 80024ca:	f083 0301 	eor.w	r3, r3, #1
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d1f4      	bne.n	80024be <task_sensor_access_entry+0x36e>
					while (!gt521fx_finger_is_pressed_flag()) 
 80024d4:	f7fe fb76 	bl	8000bc4 <gt521fx_finger_is_pressed_flag>
 80024d8:	4603      	mov	r3, r0
 80024da:	f083 0301 	eor.w	r3, r3, #1
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d1e9      	bne.n	80024b8 <task_sensor_access_entry+0x368>
					}
					gt521fx_finger_is_pressed_clear();
 80024e4:	f7fe fb2e 	bl	8000b44 <gt521fx_finger_is_pressed_clear>
					gt521fx_capture_finger(true);
 80024e8:	2001      	movs	r0, #1
 80024ea:	f7fe fc15 	bl	8000d18 <gt521fx_capture_finger>
					while (!packet_rsp_was_received()) osDelay(100);
 80024ee:	e002      	b.n	80024f6 <task_sensor_access_entry+0x3a6>
 80024f0:	2064      	movs	r0, #100	; 0x64
 80024f2:	f004 f869 	bl	80065c8 <osDelay>
 80024f6:	f7fe fed5 	bl	80012a4 <packet_rsp_was_received>
 80024fa:	4603      	mov	r3, r0
 80024fc:	f083 0301 	eor.w	r3, r3, #1
 8002500:	b2db      	uxtb	r3, r3
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1f4      	bne.n	80024f0 <task_sensor_access_entry+0x3a0>
					if (gt521fx_nack_flag()) g_gt521fx_state = GT521FX_STATE_ERROR;
 8002506:	f7fe fb01 	bl	8000b0c <gt521fx_nack_flag>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d002      	beq.n	8002516 <task_sensor_access_entry+0x3c6>
 8002510:	4ba5      	ldr	r3, [pc, #660]	; (80027a8 <task_sensor_access_entry+0x658>)
 8002512:	2207      	movs	r2, #7
 8002514:	701a      	strb	r2, [r3, #0]
					
					gt521fx_enrollment(GT521FX_ENROLLMENT_STAGE_THIRD);
 8002516:	2002      	movs	r0, #2
 8002518:	f7fe fc18 	bl	8000d4c <gt521fx_enrollment>
					while (!packet_rsp_was_received()) osDelay(100);
 800251c:	e002      	b.n	8002524 <task_sensor_access_entry+0x3d4>
 800251e:	2064      	movs	r0, #100	; 0x64
 8002520:	f004 f852 	bl	80065c8 <osDelay>
 8002524:	f7fe febe 	bl	80012a4 <packet_rsp_was_received>
 8002528:	4603      	mov	r3, r0
 800252a:	f083 0301 	eor.w	r3, r3, #1
 800252e:	b2db      	uxtb	r3, r3
 8002530:	2b00      	cmp	r3, #0
 8002532:	d1f4      	bne.n	800251e <task_sensor_access_entry+0x3ce>
					if (gt521fx_nack_flag()) g_gt521fx_state = GT521FX_STATE_ERROR;
 8002534:	f7fe faea 	bl	8000b0c <gt521fx_nack_flag>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d002      	beq.n	8002544 <task_sensor_access_entry+0x3f4>
 800253e:	4b9a      	ldr	r3, [pc, #616]	; (80027a8 <task_sensor_access_entry+0x658>)
 8002540:	2207      	movs	r2, #7
 8002542:	701a      	strb	r2, [r3, #0]
					
					ssd1351_printf("\nRemove finger");
 8002544:	4899      	ldr	r0, [pc, #612]	; (80027ac <task_sensor_access_entry+0x65c>)
 8002546:	f7ff fa5d 	bl	8001a04 <ssd1351_printf>
					ssd1351_write_buffer_to_display();
 800254a:	f7ff f821 	bl	8001590 <ssd1351_write_buffer_to_display>
					while (gt521fx_finger_is_pressed_flag()) 
 800254e:	e00d      	b.n	800256c <task_sensor_access_entry+0x41c>
					{
						gt521fx_finger_is_pressed();
 8002550:	f7fe fb9a 	bl	8000c88 <gt521fx_finger_is_pressed>
						while (!packet_rsp_was_received()) osDelay(100);
 8002554:	e002      	b.n	800255c <task_sensor_access_entry+0x40c>
 8002556:	2064      	movs	r0, #100	; 0x64
 8002558:	f004 f836 	bl	80065c8 <osDelay>
 800255c:	f7fe fea2 	bl	80012a4 <packet_rsp_was_received>
 8002560:	4603      	mov	r3, r0
 8002562:	f083 0301 	eor.w	r3, r3, #1
 8002566:	b2db      	uxtb	r3, r3
 8002568:	2b00      	cmp	r3, #0
 800256a:	d1f4      	bne.n	8002556 <task_sensor_access_entry+0x406>
					while (gt521fx_finger_is_pressed_flag()) 
 800256c:	f7fe fb2a 	bl	8000bc4 <gt521fx_finger_is_pressed_flag>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d1ec      	bne.n	8002550 <task_sensor_access_entry+0x400>
					}
					ssd1351_clear_screen(); // always clear here
 8002576:	f7ff f999 	bl	80018ac <ssd1351_clear_screen>
					flash_access_enroll_update();
 800257a:	f7fe f991 	bl	80008a0 <flash_access_enroll_update>
					ssd1351_printf("\nEnroll successful");
 800257e:	488c      	ldr	r0, [pc, #560]	; (80027b0 <task_sensor_access_entry+0x660>)
 8002580:	f7ff fa40 	bl	8001a04 <ssd1351_printf>
					ssd1351_write_buffer_to_display();
 8002584:	f7ff f804 	bl	8001590 <ssd1351_write_buffer_to_display>
					g_refresh_screen = true;
 8002588:	4b8a      	ldr	r3, [pc, #552]	; (80027b4 <task_sensor_access_entry+0x664>)
 800258a:	2201      	movs	r2, #1
 800258c:	701a      	strb	r2, [r3, #0]
					g_gt521fx_state = GT521FX_STATE_ADMIN;
 800258e:	4b86      	ldr	r3, [pc, #536]	; (80027a8 <task_sensor_access_entry+0x658>)
 8002590:	2200      	movs	r2, #0
 8002592:	701a      	strb	r2, [r3, #0]
				break;
 8002594:	e104      	b.n	80027a0 <task_sensor_access_entry+0x650>
				case GT521FX_STATE_DELETE:
					g_gt521fx_forced_state_change = false;
 8002596:	4b88      	ldr	r3, [pc, #544]	; (80027b8 <task_sensor_access_entry+0x668>)
 8002598:	2200      	movs	r2, #0
 800259a:	701a      	strb	r2, [r3, #0]
					gt521fx_delete_fingerprint(flash_access_gt521fx_last_id());
 800259c:	f7fe f998 	bl	80008d0 <flash_access_gt521fx_last_id>
 80025a0:	4603      	mov	r3, r0
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7fe fb88 	bl	8000cb8 <gt521fx_delete_fingerprint>
					flash_access_gt521fx_remove_last_id();
 80025a8:	f7fe f99e 	bl	80008e8 <flash_access_gt521fx_remove_last_id>
					ssd1351_clear_screen();
 80025ac:	f7ff f97e 	bl	80018ac <ssd1351_clear_screen>
					ssd1351_printf("\nLast print deleted!");
 80025b0:	4882      	ldr	r0, [pc, #520]	; (80027bc <task_sensor_access_entry+0x66c>)
 80025b2:	f7ff fa27 	bl	8001a04 <ssd1351_printf>
					ssd1351_write_buffer_to_display();
 80025b6:	f7fe ffeb 	bl	8001590 <ssd1351_write_buffer_to_display>
					osDelay(3000);
 80025ba:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80025be:	f004 f803 	bl	80065c8 <osDelay>
					g_refresh_screen = true;
 80025c2:	4b7c      	ldr	r3, [pc, #496]	; (80027b4 <task_sensor_access_entry+0x664>)
 80025c4:	2201      	movs	r2, #1
 80025c6:	701a      	strb	r2, [r3, #0]
					g_gt521fx_state = GT521FX_STATE_ADMIN;
 80025c8:	4b77      	ldr	r3, [pc, #476]	; (80027a8 <task_sensor_access_entry+0x658>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	701a      	strb	r2, [r3, #0]
				break;
 80025ce:	e0e7      	b.n	80027a0 <task_sensor_access_entry+0x650>
				case GT521FX_STATE_DELETE_ALL:
					g_gt521fx_forced_state_change = false;
 80025d0:	4b79      	ldr	r3, [pc, #484]	; (80027b8 <task_sensor_access_entry+0x668>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	701a      	strb	r2, [r3, #0]
					gt521fx_delete_all_fingerprints();
 80025d6:	f7fe fb63 	bl	8000ca0 <gt521fx_delete_all_fingerprints>
					flash_access_gt521fx_reset_id_count();
 80025da:	f7fe f99d 	bl	8000918 <flash_access_gt521fx_reset_id_count>
					ssd1351_clear_screen();
 80025de:	f7ff f965 	bl	80018ac <ssd1351_clear_screen>
					ssd1351_printf("\nAll prints deleted!");
 80025e2:	4877      	ldr	r0, [pc, #476]	; (80027c0 <task_sensor_access_entry+0x670>)
 80025e4:	f7ff fa0e 	bl	8001a04 <ssd1351_printf>
					ssd1351_write_buffer_to_display();
 80025e8:	f7fe ffd2 	bl	8001590 <ssd1351_write_buffer_to_display>
					osDelay(3000);
 80025ec:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80025f0:	f003 ffea 	bl	80065c8 <osDelay>
					g_refresh_screen = true;
 80025f4:	4b6f      	ldr	r3, [pc, #444]	; (80027b4 <task_sensor_access_entry+0x664>)
 80025f6:	2201      	movs	r2, #1
 80025f8:	701a      	strb	r2, [r3, #0]
					g_gt521fx_state = GT521FX_STATE_ADMIN;
 80025fa:	4b6b      	ldr	r3, [pc, #428]	; (80027a8 <task_sensor_access_entry+0x658>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	701a      	strb	r2, [r3, #0]
				break;
 8002600:	e0ce      	b.n	80027a0 <task_sensor_access_entry+0x650>
				case GT521FX_STATE_IDENTIFY:
					g_gt521fx_forced_state_change = false;
 8002602:	4b6d      	ldr	r3, [pc, #436]	; (80027b8 <task_sensor_access_entry+0x668>)
 8002604:	2200      	movs	r2, #0
 8002606:	701a      	strb	r2, [r3, #0]
					gt521fx_finger_is_pressed_clear();
 8002608:	f7fe fa9c 	bl	8000b44 <gt521fx_finger_is_pressed_clear>
					ssd1351_clear_screen(); // always clear here
 800260c:	f7ff f94e 	bl	80018ac <ssd1351_clear_screen>
					gt521fx_led_off();
 8002610:	f7fe fb10 	bl	8000c34 <gt521fx_led_off>
					while (!packet_rsp_was_received()) osDelay(10);
 8002614:	e002      	b.n	800261c <task_sensor_access_entry+0x4cc>
 8002616:	200a      	movs	r0, #10
 8002618:	f003 ffd6 	bl	80065c8 <osDelay>
 800261c:	f7fe fe42 	bl	80012a4 <packet_rsp_was_received>
 8002620:	4603      	mov	r3, r0
 8002622:	f083 0301 	eor.w	r3, r3, #1
 8002626:	b2db      	uxtb	r3, r3
 8002628:	2b00      	cmp	r3, #0
 800262a:	d1f4      	bne.n	8002616 <task_sensor_access_entry+0x4c6>
					osDelay(1000);
 800262c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002630:	f003 ffca 	bl	80065c8 <osDelay>
					gt521fx_led_on();
 8002634:	f7fe faf2 	bl	8000c1c <gt521fx_led_on>
					while (!packet_rsp_was_received()) osDelay(100);
 8002638:	e002      	b.n	8002640 <task_sensor_access_entry+0x4f0>
 800263a:	2064      	movs	r0, #100	; 0x64
 800263c:	f003 ffc4 	bl	80065c8 <osDelay>
 8002640:	f7fe fe30 	bl	80012a4 <packet_rsp_was_received>
 8002644:	4603      	mov	r3, r0
 8002646:	f083 0301 	eor.w	r3, r3, #1
 800264a:	b2db      	uxtb	r3, r3
 800264c:	2b00      	cmp	r3, #0
 800264e:	d1f4      	bne.n	800263a <task_sensor_access_entry+0x4ea>
					osDelay(1000);
 8002650:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002654:	f003 ffb8 	bl	80065c8 <osDelay>
					ssd1351_printf("GT521FX identify state");
 8002658:	485a      	ldr	r0, [pc, #360]	; (80027c4 <task_sensor_access_entry+0x674>)
 800265a:	f7ff f9d3 	bl	8001a04 <ssd1351_printf>
					ssd1351_printf("\nPlace finger on sensor");
 800265e:	4851      	ldr	r0, [pc, #324]	; (80027a4 <task_sensor_access_entry+0x654>)
 8002660:	f7ff f9d0 	bl	8001a04 <ssd1351_printf>
					ssd1351_write_buffer_to_display();
 8002664:	f7fe ff94 	bl	8001590 <ssd1351_write_buffer_to_display>
					while(!gt521fx_finger_is_pressed_flag() && !g_gt521fx_forced_state_change)
 8002668:	e00d      	b.n	8002686 <task_sensor_access_entry+0x536>
					{
						gt521fx_finger_is_pressed();
 800266a:	f7fe fb0d 	bl	8000c88 <gt521fx_finger_is_pressed>
						while (!packet_rsp_was_received()) osDelay(100);
 800266e:	e002      	b.n	8002676 <task_sensor_access_entry+0x526>
 8002670:	2064      	movs	r0, #100	; 0x64
 8002672:	f003 ffa9 	bl	80065c8 <osDelay>
 8002676:	f7fe fe15 	bl	80012a4 <packet_rsp_was_received>
 800267a:	4603      	mov	r3, r0
 800267c:	f083 0301 	eor.w	r3, r3, #1
 8002680:	b2db      	uxtb	r3, r3
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1f4      	bne.n	8002670 <task_sensor_access_entry+0x520>
					while(!gt521fx_finger_is_pressed_flag() && !g_gt521fx_forced_state_change)
 8002686:	f7fe fa9d 	bl	8000bc4 <gt521fx_finger_is_pressed_flag>
 800268a:	4603      	mov	r3, r0
 800268c:	f083 0301 	eor.w	r3, r3, #1
 8002690:	b2db      	uxtb	r3, r3
 8002692:	2b00      	cmp	r3, #0
 8002694:	d006      	beq.n	80026a4 <task_sensor_access_entry+0x554>
 8002696:	4b48      	ldr	r3, [pc, #288]	; (80027b8 <task_sensor_access_entry+0x668>)
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	f083 0301 	eor.w	r3, r3, #1
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d1e2      	bne.n	800266a <task_sensor_access_entry+0x51a>
					}
					gt521fx_finger_is_pressed_clear();
 80026a4:	f7fe fa4e 	bl	8000b44 <gt521fx_finger_is_pressed_clear>
					gt521fx_capture_finger(true);
 80026a8:	2001      	movs	r0, #1
 80026aa:	f7fe fb35 	bl	8000d18 <gt521fx_capture_finger>
					while(!packet_rsp_was_received()) osDelay(100);
 80026ae:	e002      	b.n	80026b6 <task_sensor_access_entry+0x566>
 80026b0:	2064      	movs	r0, #100	; 0x64
 80026b2:	f003 ff89 	bl	80065c8 <osDelay>
 80026b6:	f7fe fdf5 	bl	80012a4 <packet_rsp_was_received>
 80026ba:	4603      	mov	r3, r0
 80026bc:	f083 0301 	eor.w	r3, r3, #1
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d1f4      	bne.n	80026b0 <task_sensor_access_entry+0x560>
					if (g_gt521fx_forced_state_change)
 80026c6:	4b3c      	ldr	r3, [pc, #240]	; (80027b8 <task_sensor_access_entry+0x668>)
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d006      	beq.n	80026dc <task_sensor_access_entry+0x58c>
					{
						g_gt521fx_forced_state_change = false;
 80026ce:	4b3a      	ldr	r3, [pc, #232]	; (80027b8 <task_sensor_access_entry+0x668>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	701a      	strb	r2, [r3, #0]
						g_refresh_screen = true;
 80026d4:	4b37      	ldr	r3, [pc, #220]	; (80027b4 <task_sensor_access_entry+0x664>)
 80026d6:	2201      	movs	r2, #1
 80026d8:	701a      	strb	r2, [r3, #0]
 80026da:	e027      	b.n	800272c <task_sensor_access_entry+0x5dc>
					}
					else if (gt521fx_fingerprint_identify())
 80026dc:	f7fe fafe 	bl	8000cdc <gt521fx_fingerprint_identify>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d00b      	beq.n	80026fe <task_sensor_access_entry+0x5ae>
					{
						ssd1351_printf("\nSuccess!");
 80026e6:	4838      	ldr	r0, [pc, #224]	; (80027c8 <task_sensor_access_entry+0x678>)
 80026e8:	f7ff f98c 	bl	8001a04 <ssd1351_printf>
						ssd1351_write_buffer_to_display();
 80026ec:	f7fe ff50 	bl	8001590 <ssd1351_write_buffer_to_display>
						g_gt521fx_state = GT521FX_STATE_OPEN_DOOR;
 80026f0:	4b2d      	ldr	r3, [pc, #180]	; (80027a8 <task_sensor_access_entry+0x658>)
 80026f2:	2206      	movs	r2, #6
 80026f4:	701a      	strb	r2, [r3, #0]
						g_refresh_screen = true;
 80026f6:	4b2f      	ldr	r3, [pc, #188]	; (80027b4 <task_sensor_access_entry+0x664>)
 80026f8:	2201      	movs	r2, #1
 80026fa:	701a      	strb	r2, [r3, #0]
 80026fc:	e016      	b.n	800272c <task_sensor_access_entry+0x5dc>
						// open garage door!
					}
					else
					{
						ssd1351_printf("\nFailure!");
 80026fe:	4833      	ldr	r0, [pc, #204]	; (80027cc <task_sensor_access_entry+0x67c>)
 8002700:	f7ff f980 	bl	8001a04 <ssd1351_printf>
						ssd1351_write_buffer_to_display();
 8002704:	f7fe ff44 	bl	8001590 <ssd1351_write_buffer_to_display>
						while (!packet_rsp_was_received()) osDelay(100);
 8002708:	e002      	b.n	8002710 <task_sensor_access_entry+0x5c0>
 800270a:	2064      	movs	r0, #100	; 0x64
 800270c:	f003 ff5c 	bl	80065c8 <osDelay>
 8002710:	f7fe fdc8 	bl	80012a4 <packet_rsp_was_received>
 8002714:	4603      	mov	r3, r0
 8002716:	f083 0301 	eor.w	r3, r3, #1
 800271a:	b2db      	uxtb	r3, r3
 800271c:	2b00      	cmp	r3, #0
 800271e:	d1f4      	bne.n	800270a <task_sensor_access_entry+0x5ba>
						g_gt521fx_state = GT521FX_STATE_ERROR;
 8002720:	4b21      	ldr	r3, [pc, #132]	; (80027a8 <task_sensor_access_entry+0x658>)
 8002722:	2207      	movs	r2, #7
 8002724:	701a      	strb	r2, [r3, #0]
						g_refresh_screen = true;
 8002726:	4b23      	ldr	r3, [pc, #140]	; (80027b4 <task_sensor_access_entry+0x664>)
 8002728:	2201      	movs	r2, #1
 800272a:	701a      	strb	r2, [r3, #0]
					}
					gt521fx_led_off();
 800272c:	f7fe fa82 	bl	8000c34 <gt521fx_led_off>
					while (!packet_rsp_was_received()) osDelay(100);
 8002730:	e002      	b.n	8002738 <task_sensor_access_entry+0x5e8>
 8002732:	2064      	movs	r0, #100	; 0x64
 8002734:	f003 ff48 	bl	80065c8 <osDelay>
 8002738:	f7fe fdb4 	bl	80012a4 <packet_rsp_was_received>
 800273c:	4603      	mov	r3, r0
 800273e:	f083 0301 	eor.w	r3, r3, #1
 8002742:	b2db      	uxtb	r3, r3
 8002744:	2b00      	cmp	r3, #0
 8002746:	d1f4      	bne.n	8002732 <task_sensor_access_entry+0x5e2>
				break;
 8002748:	e02a      	b.n	80027a0 <task_sensor_access_entry+0x650>
				case GT521FX_STATE_VERIFY:
				break;
				case GT521FX_STATE_OPEN_DOOR:
					ssd1351_printf("\nOpen Door!");
 800274a:	4821      	ldr	r0, [pc, #132]	; (80027d0 <task_sensor_access_entry+0x680>)
 800274c:	f7ff f95a 	bl	8001a04 <ssd1351_printf>
					board_init_activate_garage_door();
 8002750:	f7fe f864 	bl	800081c <board_init_activate_garage_door>
					ssd1351_write_buffer_to_display();
 8002754:	f7fe ff1c 	bl	8001590 <ssd1351_write_buffer_to_display>
					osDelay(3000);
 8002758:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800275c:	f003 ff34 	bl	80065c8 <osDelay>
					board_init_deactivate_garage_door();
 8002760:	f7fe f868 	bl	8000834 <board_init_deactivate_garage_door>
					g_refresh_screen = true;
 8002764:	4b13      	ldr	r3, [pc, #76]	; (80027b4 <task_sensor_access_entry+0x664>)
 8002766:	2201      	movs	r2, #1
 8002768:	701a      	strb	r2, [r3, #0]
					g_gt521fx_state = GT521FX_STATE_IDENTIFY;
 800276a:	4b0f      	ldr	r3, [pc, #60]	; (80027a8 <task_sensor_access_entry+0x658>)
 800276c:	2204      	movs	r2, #4
 800276e:	701a      	strb	r2, [r3, #0]
				break;
 8002770:	e016      	b.n	80027a0 <task_sensor_access_entry+0x650>
				case GT521FX_STATE_ERROR:
					ssd1351_printf("\nERROR");
 8002772:	4818      	ldr	r0, [pc, #96]	; (80027d4 <task_sensor_access_entry+0x684>)
 8002774:	f7ff f946 	bl	8001a04 <ssd1351_printf>
					ssd1351_write_buffer_to_display();
 8002778:	f7fe ff0a 	bl	8001590 <ssd1351_write_buffer_to_display>
					osDelay(3000);
 800277c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002780:	f003 ff22 	bl	80065c8 <osDelay>
					g_refresh_screen = true;
 8002784:	4b0b      	ldr	r3, [pc, #44]	; (80027b4 <task_sensor_access_entry+0x664>)
 8002786:	2201      	movs	r2, #1
 8002788:	701a      	strb	r2, [r3, #0]
					g_gt521fx_state = GT521FX_STATE_IDENTIFY;
 800278a:	4b07      	ldr	r3, [pc, #28]	; (80027a8 <task_sensor_access_entry+0x658>)
 800278c:	2204      	movs	r2, #4
 800278e:	701a      	strb	r2, [r3, #0]
				break;
 8002790:	e006      	b.n	80027a0 <task_sensor_access_entry+0x650>
				case GT521FX_STATE_NOTHING_TO_DO:
					osDelay(1000);
 8002792:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002796:	f003 ff17 	bl	80065c8 <osDelay>
				break;
 800279a:	e001      	b.n	80027a0 <task_sensor_access_entry+0x650>
				default:
					while(1);
 800279c:	e7fe      	b.n	800279c <task_sensor_access_entry+0x64c>
				break;
 800279e:	bf00      	nop
		if (first_pass)
 80027a0:	e4e5      	b.n	800216e <task_sensor_access_entry+0x1e>
 80027a2:	bf00      	nop
 80027a4:	080094b8 	.word	0x080094b8
 80027a8:	2000001d 	.word	0x2000001d
 80027ac:	080094d0 	.word	0x080094d0
 80027b0:	080094e0 	.word	0x080094e0
 80027b4:	2000001c 	.word	0x2000001c
 80027b8:	2000a8d1 	.word	0x2000a8d1
 80027bc:	080094f4 	.word	0x080094f4
 80027c0:	0800950c 	.word	0x0800950c
 80027c4:	08009524 	.word	0x08009524
 80027c8:	0800953c 	.word	0x0800953c
 80027cc:	08009548 	.word	0x08009548
 80027d0:	08009554 	.word	0x08009554
 80027d4:	08009560 	.word	0x08009560

080027d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80027d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002810 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80027dc:	f7ff fb7c 	bl	8001ed8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80027e0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80027e2:	e003      	b.n	80027ec <LoopCopyDataInit>

080027e4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80027e4:	4b0b      	ldr	r3, [pc, #44]	; (8002814 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80027e6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80027e8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80027ea:	3104      	adds	r1, #4

080027ec <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80027ec:	480a      	ldr	r0, [pc, #40]	; (8002818 <LoopForever+0xa>)
	ldr	r3, =_edata
 80027ee:	4b0b      	ldr	r3, [pc, #44]	; (800281c <LoopForever+0xe>)
	adds	r2, r0, r1
 80027f0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80027f2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80027f4:	d3f6      	bcc.n	80027e4 <CopyDataInit>
	ldr	r2, =_sbss
 80027f6:	4a0a      	ldr	r2, [pc, #40]	; (8002820 <LoopForever+0x12>)
	b	LoopFillZerobss
 80027f8:	e002      	b.n	8002800 <LoopFillZerobss>

080027fa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80027fa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80027fc:	f842 3b04 	str.w	r3, [r2], #4

08002800 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002800:	4b08      	ldr	r3, [pc, #32]	; (8002824 <LoopForever+0x16>)
	cmp	r2, r3
 8002802:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002804:	d3f9      	bcc.n	80027fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002806:	f006 fd41 	bl	800928c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800280a:	f7fe fbf3 	bl	8000ff4 <main>

0800280e <LoopForever>:

LoopForever:
    b LoopForever
 800280e:	e7fe      	b.n	800280e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002810:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8002814:	08009e30 	.word	0x08009e30
	ldr	r0, =_sdata
 8002818:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800281c:	2000004c 	.word	0x2000004c
	ldr	r2, =_sbss
 8002820:	2000004c 	.word	0x2000004c
	ldr	r3, = _ebss
 8002824:	2000c1e0 	.word	0x2000c1e0

08002828 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002828:	e7fe      	b.n	8002828 <ADC1_IRQHandler>

0800282a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800282a:	b580      	push	{r7, lr}
 800282c:	b082      	sub	sp, #8
 800282e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002830:	2300      	movs	r3, #0
 8002832:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002834:	2003      	movs	r0, #3
 8002836:	f000 f902 	bl	8002a3e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800283a:	2000      	movs	r0, #0
 800283c:	f7ff fabe 	bl	8001dbc <HAL_InitTick>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d002      	beq.n	800284c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	71fb      	strb	r3, [r7, #7]
 800284a:	e001      	b.n	8002850 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800284c:	f7ff f98e 	bl	8001b6c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002850:	79fb      	ldrb	r3, [r7, #7]
}
 8002852:	4618      	mov	r0, r3
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
	...

0800285c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002860:	4b06      	ldr	r3, [pc, #24]	; (800287c <HAL_IncTick+0x20>)
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	461a      	mov	r2, r3
 8002866:	4b06      	ldr	r3, [pc, #24]	; (8002880 <HAL_IncTick+0x24>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4413      	add	r3, r2
 800286c:	4a04      	ldr	r2, [pc, #16]	; (8002880 <HAL_IncTick+0x24>)
 800286e:	6013      	str	r3, [r2, #0]
}
 8002870:	bf00      	nop
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	20000024 	.word	0x20000024
 8002880:	2000a8d4 	.word	0x2000a8d4

08002884 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  return uwTick;
 8002888:	4b03      	ldr	r3, [pc, #12]	; (8002898 <HAL_GetTick+0x14>)
 800288a:	681b      	ldr	r3, [r3, #0]
}
 800288c:	4618      	mov	r0, r3
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	2000a8d4 	.word	0x2000a8d4

0800289c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028a4:	f7ff ffee 	bl	8002884 <HAL_GetTick>
 80028a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028b4:	d005      	beq.n	80028c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80028b6:	4b0a      	ldr	r3, [pc, #40]	; (80028e0 <HAL_Delay+0x44>)
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	461a      	mov	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	4413      	add	r3, r2
 80028c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028c2:	bf00      	nop
 80028c4:	f7ff ffde 	bl	8002884 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d8f7      	bhi.n	80028c4 <HAL_Delay+0x28>
  {
  }
}
 80028d4:	bf00      	nop
 80028d6:	bf00      	nop
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	20000024 	.word	0x20000024

080028e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b085      	sub	sp, #20
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f003 0307 	and.w	r3, r3, #7
 80028f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028f4:	4b0c      	ldr	r3, [pc, #48]	; (8002928 <__NVIC_SetPriorityGrouping+0x44>)
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028fa:	68ba      	ldr	r2, [r7, #8]
 80028fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002900:	4013      	ands	r3, r2
 8002902:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800290c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002910:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002914:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002916:	4a04      	ldr	r2, [pc, #16]	; (8002928 <__NVIC_SetPriorityGrouping+0x44>)
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	60d3      	str	r3, [r2, #12]
}
 800291c:	bf00      	nop
 800291e:	3714      	adds	r7, #20
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr
 8002928:	e000ed00 	.word	0xe000ed00

0800292c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002930:	4b04      	ldr	r3, [pc, #16]	; (8002944 <__NVIC_GetPriorityGrouping+0x18>)
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	0a1b      	lsrs	r3, r3, #8
 8002936:	f003 0307 	and.w	r3, r3, #7
}
 800293a:	4618      	mov	r0, r3
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr
 8002944:	e000ed00 	.word	0xe000ed00

08002948 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	4603      	mov	r3, r0
 8002950:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002956:	2b00      	cmp	r3, #0
 8002958:	db0b      	blt.n	8002972 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800295a:	79fb      	ldrb	r3, [r7, #7]
 800295c:	f003 021f 	and.w	r2, r3, #31
 8002960:	4907      	ldr	r1, [pc, #28]	; (8002980 <__NVIC_EnableIRQ+0x38>)
 8002962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002966:	095b      	lsrs	r3, r3, #5
 8002968:	2001      	movs	r0, #1
 800296a:	fa00 f202 	lsl.w	r2, r0, r2
 800296e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002972:	bf00      	nop
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	e000e100 	.word	0xe000e100

08002984 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	4603      	mov	r3, r0
 800298c:	6039      	str	r1, [r7, #0]
 800298e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002994:	2b00      	cmp	r3, #0
 8002996:	db0a      	blt.n	80029ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	b2da      	uxtb	r2, r3
 800299c:	490c      	ldr	r1, [pc, #48]	; (80029d0 <__NVIC_SetPriority+0x4c>)
 800299e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a2:	0112      	lsls	r2, r2, #4
 80029a4:	b2d2      	uxtb	r2, r2
 80029a6:	440b      	add	r3, r1
 80029a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029ac:	e00a      	b.n	80029c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	b2da      	uxtb	r2, r3
 80029b2:	4908      	ldr	r1, [pc, #32]	; (80029d4 <__NVIC_SetPriority+0x50>)
 80029b4:	79fb      	ldrb	r3, [r7, #7]
 80029b6:	f003 030f 	and.w	r3, r3, #15
 80029ba:	3b04      	subs	r3, #4
 80029bc:	0112      	lsls	r2, r2, #4
 80029be:	b2d2      	uxtb	r2, r2
 80029c0:	440b      	add	r3, r1
 80029c2:	761a      	strb	r2, [r3, #24]
}
 80029c4:	bf00      	nop
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr
 80029d0:	e000e100 	.word	0xe000e100
 80029d4:	e000ed00 	.word	0xe000ed00

080029d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029d8:	b480      	push	{r7}
 80029da:	b089      	sub	sp, #36	; 0x24
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f003 0307 	and.w	r3, r3, #7
 80029ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	f1c3 0307 	rsb	r3, r3, #7
 80029f2:	2b04      	cmp	r3, #4
 80029f4:	bf28      	it	cs
 80029f6:	2304      	movcs	r3, #4
 80029f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	3304      	adds	r3, #4
 80029fe:	2b06      	cmp	r3, #6
 8002a00:	d902      	bls.n	8002a08 <NVIC_EncodePriority+0x30>
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	3b03      	subs	r3, #3
 8002a06:	e000      	b.n	8002a0a <NVIC_EncodePriority+0x32>
 8002a08:	2300      	movs	r3, #0
 8002a0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	fa02 f303 	lsl.w	r3, r2, r3
 8002a16:	43da      	mvns	r2, r3
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	401a      	ands	r2, r3
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a20:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	fa01 f303 	lsl.w	r3, r1, r3
 8002a2a:	43d9      	mvns	r1, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a30:	4313      	orrs	r3, r2
         );
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3724      	adds	r7, #36	; 0x24
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr

08002a3e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a3e:	b580      	push	{r7, lr}
 8002a40:	b082      	sub	sp, #8
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f7ff ff4c 	bl	80028e4 <__NVIC_SetPriorityGrouping>
}
 8002a4c:	bf00      	nop
 8002a4e:	3708      	adds	r7, #8
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b086      	sub	sp, #24
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	607a      	str	r2, [r7, #4]
 8002a60:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a62:	2300      	movs	r3, #0
 8002a64:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a66:	f7ff ff61 	bl	800292c <__NVIC_GetPriorityGrouping>
 8002a6a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	68b9      	ldr	r1, [r7, #8]
 8002a70:	6978      	ldr	r0, [r7, #20]
 8002a72:	f7ff ffb1 	bl	80029d8 <NVIC_EncodePriority>
 8002a76:	4602      	mov	r2, r0
 8002a78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a7c:	4611      	mov	r1, r2
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7ff ff80 	bl	8002984 <__NVIC_SetPriority>
}
 8002a84:	bf00      	nop
 8002a86:	3718      	adds	r7, #24
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	4603      	mov	r3, r0
 8002a94:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7ff ff54 	bl	8002948 <__NVIC_EnableIRQ>
}
 8002aa0:	bf00      	nop
 8002aa2:	3708      	adds	r7, #8
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d101      	bne.n	8002aba <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e098      	b.n	8002bec <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	461a      	mov	r2, r3
 8002ac0:	4b4d      	ldr	r3, [pc, #308]	; (8002bf8 <HAL_DMA_Init+0x150>)
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d80f      	bhi.n	8002ae6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	461a      	mov	r2, r3
 8002acc:	4b4b      	ldr	r3, [pc, #300]	; (8002bfc <HAL_DMA_Init+0x154>)
 8002ace:	4413      	add	r3, r2
 8002ad0:	4a4b      	ldr	r2, [pc, #300]	; (8002c00 <HAL_DMA_Init+0x158>)
 8002ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad6:	091b      	lsrs	r3, r3, #4
 8002ad8:	009a      	lsls	r2, r3, #2
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a48      	ldr	r2, [pc, #288]	; (8002c04 <HAL_DMA_Init+0x15c>)
 8002ae2:	641a      	str	r2, [r3, #64]	; 0x40
 8002ae4:	e00e      	b.n	8002b04 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	461a      	mov	r2, r3
 8002aec:	4b46      	ldr	r3, [pc, #280]	; (8002c08 <HAL_DMA_Init+0x160>)
 8002aee:	4413      	add	r3, r2
 8002af0:	4a43      	ldr	r2, [pc, #268]	; (8002c00 <HAL_DMA_Init+0x158>)
 8002af2:	fba2 2303 	umull	r2, r3, r2, r3
 8002af6:	091b      	lsrs	r3, r3, #4
 8002af8:	009a      	lsls	r2, r3, #2
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a42      	ldr	r2, [pc, #264]	; (8002c0c <HAL_DMA_Init+0x164>)
 8002b02:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2202      	movs	r2, #2
 8002b08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b1e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002b28:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	691b      	ldr	r3, [r3, #16]
 8002b2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b34:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b40:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a1b      	ldr	r3, [r3, #32]
 8002b46:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002b48:	68fa      	ldr	r2, [r7, #12]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b5e:	d039      	beq.n	8002bd4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b64:	4a27      	ldr	r2, [pc, #156]	; (8002c04 <HAL_DMA_Init+0x15c>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d11a      	bne.n	8002ba0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002b6a:	4b29      	ldr	r3, [pc, #164]	; (8002c10 <HAL_DMA_Init+0x168>)
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b72:	f003 031c 	and.w	r3, r3, #28
 8002b76:	210f      	movs	r1, #15
 8002b78:	fa01 f303 	lsl.w	r3, r1, r3
 8002b7c:	43db      	mvns	r3, r3
 8002b7e:	4924      	ldr	r1, [pc, #144]	; (8002c10 <HAL_DMA_Init+0x168>)
 8002b80:	4013      	ands	r3, r2
 8002b82:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002b84:	4b22      	ldr	r3, [pc, #136]	; (8002c10 <HAL_DMA_Init+0x168>)
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6859      	ldr	r1, [r3, #4]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b90:	f003 031c 	and.w	r3, r3, #28
 8002b94:	fa01 f303 	lsl.w	r3, r1, r3
 8002b98:	491d      	ldr	r1, [pc, #116]	; (8002c10 <HAL_DMA_Init+0x168>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	600b      	str	r3, [r1, #0]
 8002b9e:	e019      	b.n	8002bd4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002ba0:	4b1c      	ldr	r3, [pc, #112]	; (8002c14 <HAL_DMA_Init+0x16c>)
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba8:	f003 031c 	and.w	r3, r3, #28
 8002bac:	210f      	movs	r1, #15
 8002bae:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb2:	43db      	mvns	r3, r3
 8002bb4:	4917      	ldr	r1, [pc, #92]	; (8002c14 <HAL_DMA_Init+0x16c>)
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002bba:	4b16      	ldr	r3, [pc, #88]	; (8002c14 <HAL_DMA_Init+0x16c>)
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6859      	ldr	r1, [r3, #4]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc6:	f003 031c 	and.w	r3, r3, #28
 8002bca:	fa01 f303 	lsl.w	r3, r1, r3
 8002bce:	4911      	ldr	r1, [pc, #68]	; (8002c14 <HAL_DMA_Init+0x16c>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002bea:	2300      	movs	r3, #0
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3714      	adds	r7, #20
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr
 8002bf8:	40020407 	.word	0x40020407
 8002bfc:	bffdfff8 	.word	0xbffdfff8
 8002c00:	cccccccd 	.word	0xcccccccd
 8002c04:	40020000 	.word	0x40020000
 8002c08:	bffdfbf8 	.word	0xbffdfbf8
 8002c0c:	40020400 	.word	0x40020400
 8002c10:	400200a8 	.word	0x400200a8
 8002c14:	400204a8 	.word	0x400204a8

08002c18 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	607a      	str	r2, [r7, #4]
 8002c24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c26:	2300      	movs	r3, #0
 8002c28:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d101      	bne.n	8002c38 <HAL_DMA_Start_IT+0x20>
 8002c34:	2302      	movs	r3, #2
 8002c36:	e04b      	b.n	8002cd0 <HAL_DMA_Start_IT+0xb8>
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d13a      	bne.n	8002cc2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2202      	movs	r2, #2
 8002c50:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2200      	movs	r2, #0
 8002c58:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f022 0201 	bic.w	r2, r2, #1
 8002c68:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	68b9      	ldr	r1, [r7, #8]
 8002c70:	68f8      	ldr	r0, [r7, #12]
 8002c72:	f000 f8e0 	bl	8002e36 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d008      	beq.n	8002c90 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f042 020e 	orr.w	r2, r2, #14
 8002c8c:	601a      	str	r2, [r3, #0]
 8002c8e:	e00f      	b.n	8002cb0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f022 0204 	bic.w	r2, r2, #4
 8002c9e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f042 020a 	orr.w	r2, r2, #10
 8002cae:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f042 0201 	orr.w	r2, r2, #1
 8002cbe:	601a      	str	r2, [r3, #0]
 8002cc0:	e005      	b.n	8002cce <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002cca:	2302      	movs	r3, #2
 8002ccc:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002cce:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3718      	adds	r7, #24
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf4:	f003 031c 	and.w	r3, r3, #28
 8002cf8:	2204      	movs	r2, #4
 8002cfa:	409a      	lsls	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	4013      	ands	r3, r2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d026      	beq.n	8002d52 <HAL_DMA_IRQHandler+0x7a>
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	f003 0304 	and.w	r3, r3, #4
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d021      	beq.n	8002d52 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0320 	and.w	r3, r3, #32
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d107      	bne.n	8002d2c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f022 0204 	bic.w	r2, r2, #4
 8002d2a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d30:	f003 021c 	and.w	r2, r3, #28
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d38:	2104      	movs	r1, #4
 8002d3a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d3e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d071      	beq.n	8002e2c <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002d50:	e06c      	b.n	8002e2c <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d56:	f003 031c 	and.w	r3, r3, #28
 8002d5a:	2202      	movs	r2, #2
 8002d5c:	409a      	lsls	r2, r3
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	4013      	ands	r3, r2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d02e      	beq.n	8002dc4 <HAL_DMA_IRQHandler+0xec>
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	f003 0302 	and.w	r3, r3, #2
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d029      	beq.n	8002dc4 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0320 	and.w	r3, r3, #32
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d10b      	bne.n	8002d96 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f022 020a 	bic.w	r2, r2, #10
 8002d8c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2201      	movs	r2, #1
 8002d92:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d9a:	f003 021c 	and.w	r2, r3, #28
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da2:	2102      	movs	r1, #2
 8002da4:	fa01 f202 	lsl.w	r2, r1, r2
 8002da8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d038      	beq.n	8002e2c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002dc2:	e033      	b.n	8002e2c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc8:	f003 031c 	and.w	r3, r3, #28
 8002dcc:	2208      	movs	r2, #8
 8002dce:	409a      	lsls	r2, r3
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d02a      	beq.n	8002e2e <HAL_DMA_IRQHandler+0x156>
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	f003 0308 	and.w	r3, r3, #8
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d025      	beq.n	8002e2e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f022 020e 	bic.w	r2, r2, #14
 8002df0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df6:	f003 021c 	and.w	r2, r3, #28
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfe:	2101      	movs	r1, #1
 8002e00:	fa01 f202 	lsl.w	r2, r1, r2
 8002e04:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d004      	beq.n	8002e2e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002e2c:	bf00      	nop
 8002e2e:	bf00      	nop
}
 8002e30:	3710      	adds	r7, #16
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e36:	b480      	push	{r7}
 8002e38:	b085      	sub	sp, #20
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	60f8      	str	r0, [r7, #12]
 8002e3e:	60b9      	str	r1, [r7, #8]
 8002e40:	607a      	str	r2, [r7, #4]
 8002e42:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e48:	f003 021c 	and.w	r2, r3, #28
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e50:	2101      	movs	r1, #1
 8002e52:	fa01 f202 	lsl.w	r2, r1, r2
 8002e56:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	683a      	ldr	r2, [r7, #0]
 8002e5e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	2b10      	cmp	r3, #16
 8002e66:	d108      	bne.n	8002e7a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68ba      	ldr	r2, [r7, #8]
 8002e76:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002e78:	e007      	b.n	8002e8a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	68ba      	ldr	r2, [r7, #8]
 8002e80:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	60da      	str	r2, [r3, #12]
}
 8002e8a:	bf00      	nop
 8002e8c:	3714      	adds	r7, #20
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
	...

08002e98 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b086      	sub	sp, #24
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002eaa:	4b2f      	ldr	r3, [pc, #188]	; (8002f68 <HAL_FLASH_Program+0xd0>)
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d101      	bne.n	8002eb6 <HAL_FLASH_Program+0x1e>
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	e053      	b.n	8002f5e <HAL_FLASH_Program+0xc6>
 8002eb6:	4b2c      	ldr	r3, [pc, #176]	; (8002f68 <HAL_FLASH_Program+0xd0>)
 8002eb8:	2201      	movs	r2, #1
 8002eba:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002ebc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002ec0:	f000 f894 	bl	8002fec <FLASH_WaitForLastOperation>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8002ec8:	7dfb      	ldrb	r3, [r7, #23]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d143      	bne.n	8002f56 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002ece:	4b26      	ldr	r3, [pc, #152]	; (8002f68 <HAL_FLASH_Program+0xd0>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8002ed4:	4b25      	ldr	r3, [pc, #148]	; (8002f6c <HAL_FLASH_Program+0xd4>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d009      	beq.n	8002ef4 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8002ee0:	4b22      	ldr	r3, [pc, #136]	; (8002f6c <HAL_FLASH_Program+0xd4>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a21      	ldr	r2, [pc, #132]	; (8002f6c <HAL_FLASH_Program+0xd4>)
 8002ee6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002eea:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8002eec:	4b1e      	ldr	r3, [pc, #120]	; (8002f68 <HAL_FLASH_Program+0xd0>)
 8002eee:	2202      	movs	r2, #2
 8002ef0:	771a      	strb	r2, [r3, #28]
 8002ef2:	e002      	b.n	8002efa <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8002ef4:	4b1c      	ldr	r3, [pc, #112]	; (8002f68 <HAL_FLASH_Program+0xd0>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d107      	bne.n	8002f10 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8002f00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f04:	68b8      	ldr	r0, [r7, #8]
 8002f06:	f000 f8c9 	bl	800309c <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	613b      	str	r3, [r7, #16]
 8002f0e:	e010      	b.n	8002f32 <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d002      	beq.n	8002f1c <HAL_FLASH_Program+0x84>
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d10a      	bne.n	8002f32 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	4619      	mov	r1, r3
 8002f20:	68b8      	ldr	r0, [r7, #8]
 8002f22:	f000 f8e1 	bl	80030e8 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d102      	bne.n	8002f32 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8002f2c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002f30:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002f32:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002f36:	f000 f859 	bl	8002fec <FLASH_WaitForLastOperation>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d006      	beq.n	8002f52 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8002f44:	4b09      	ldr	r3, [pc, #36]	; (8002f6c <HAL_FLASH_Program+0xd4>)
 8002f46:	695a      	ldr	r2, [r3, #20]
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	43db      	mvns	r3, r3
 8002f4c:	4907      	ldr	r1, [pc, #28]	; (8002f6c <HAL_FLASH_Program+0xd4>)
 8002f4e:	4013      	ands	r3, r2
 8002f50:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002f52:	f000 f9e1 	bl	8003318 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002f56:	4b04      	ldr	r3, [pc, #16]	; (8002f68 <HAL_FLASH_Program+0xd0>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	701a      	strb	r2, [r3, #0]

  return status;
 8002f5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3718      	adds	r7, #24
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	20000028 	.word	0x20000028
 8002f6c:	40022000 	.word	0x40022000

08002f70 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002f76:	2300      	movs	r3, #0
 8002f78:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8002f7a:	4b0b      	ldr	r3, [pc, #44]	; (8002fa8 <HAL_FLASH_Unlock+0x38>)
 8002f7c:	695b      	ldr	r3, [r3, #20]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	da0b      	bge.n	8002f9a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002f82:	4b09      	ldr	r3, [pc, #36]	; (8002fa8 <HAL_FLASH_Unlock+0x38>)
 8002f84:	4a09      	ldr	r2, [pc, #36]	; (8002fac <HAL_FLASH_Unlock+0x3c>)
 8002f86:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002f88:	4b07      	ldr	r3, [pc, #28]	; (8002fa8 <HAL_FLASH_Unlock+0x38>)
 8002f8a:	4a09      	ldr	r2, [pc, #36]	; (8002fb0 <HAL_FLASH_Unlock+0x40>)
 8002f8c:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8002f8e:	4b06      	ldr	r3, [pc, #24]	; (8002fa8 <HAL_FLASH_Unlock+0x38>)
 8002f90:	695b      	ldr	r3, [r3, #20]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	da01      	bge.n	8002f9a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8002f9a:	79fb      	ldrb	r3, [r7, #7]
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr
 8002fa8:	40022000 	.word	0x40022000
 8002fac:	45670123 	.word	0x45670123
 8002fb0:	cdef89ab 	.word	0xcdef89ab

08002fb4 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002fb8:	4b05      	ldr	r3, [pc, #20]	; (8002fd0 <HAL_FLASH_Lock+0x1c>)
 8002fba:	695b      	ldr	r3, [r3, #20]
 8002fbc:	4a04      	ldr	r2, [pc, #16]	; (8002fd0 <HAL_FLASH_Lock+0x1c>)
 8002fbe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002fc2:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr
 8002fd0:	40022000 	.word	0x40022000

08002fd4 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_RD: FLASH PCROP read error
  *            @arg HAL_FLASH_ERROR_OPTV: FLASH Option validity error
  *            @arg FLASH_FLAG_PEMPTY : FLASH Boot from not programmed flash (apply only for STM32L43x/STM32L44x devices)
  */
uint32_t HAL_FLASH_GetError(void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8002fd8:	4b03      	ldr	r3, [pc, #12]	; (8002fe8 <HAL_FLASH_GetError+0x14>)
 8002fda:	685b      	ldr	r3, [r3, #4]
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	20000028 	.word	0x20000028

08002fec <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8002ff4:	f7ff fc46 	bl	8002884 <HAL_GetTick>
 8002ff8:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8002ffa:	e00d      	b.n	8003018 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003002:	d009      	beq.n	8003018 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8003004:	f7ff fc3e 	bl	8002884 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	429a      	cmp	r2, r3
 8003012:	d801      	bhi.n	8003018 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e036      	b.n	8003086 <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8003018:	4b1d      	ldr	r3, [pc, #116]	; (8003090 <FLASH_WaitForLastOperation+0xa4>)
 800301a:	691b      	ldr	r3, [r3, #16]
 800301c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d1eb      	bne.n	8002ffc <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8003024:	4b1a      	ldr	r3, [pc, #104]	; (8003090 <FLASH_WaitForLastOperation+0xa4>)
 8003026:	691a      	ldr	r2, [r3, #16]
 8003028:	4b1a      	ldr	r3, [pc, #104]	; (8003094 <FLASH_WaitForLastOperation+0xa8>)
 800302a:	4013      	ands	r3, r2
 800302c:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d01e      	beq.n	8003072 <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8003034:	4b18      	ldr	r3, [pc, #96]	; (8003098 <FLASH_WaitForLastOperation+0xac>)
 8003036:	685a      	ldr	r2, [r3, #4]
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	4313      	orrs	r3, r2
 800303c:	4a16      	ldr	r2, [pc, #88]	; (8003098 <FLASH_WaitForLastOperation+0xac>)
 800303e:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d007      	beq.n	800305a <FLASH_WaitForLastOperation+0x6e>
 800304a:	4b11      	ldr	r3, [pc, #68]	; (8003090 <FLASH_WaitForLastOperation+0xa4>)
 800304c:	699a      	ldr	r2, [r3, #24]
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8003054:	490e      	ldr	r1, [pc, #56]	; (8003090 <FLASH_WaitForLastOperation+0xa4>)
 8003056:	4313      	orrs	r3, r2
 8003058:	618b      	str	r3, [r1, #24]
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d004      	beq.n	800306e <FLASH_WaitForLastOperation+0x82>
 8003064:	4a0a      	ldr	r2, [pc, #40]	; (8003090 <FLASH_WaitForLastOperation+0xa4>)
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800306c:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e009      	b.n	8003086 <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003072:	4b07      	ldr	r3, [pc, #28]	; (8003090 <FLASH_WaitForLastOperation+0xa4>)
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	2b00      	cmp	r3, #0
 800307c:	d002      	beq.n	8003084 <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800307e:	4b04      	ldr	r3, [pc, #16]	; (8003090 <FLASH_WaitForLastOperation+0xa4>)
 8003080:	2201      	movs	r2, #1
 8003082:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3710      	adds	r7, #16
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	40022000 	.word	0x40022000
 8003094:	0002c3fa 	.word	0x0002c3fa
 8003098:	20000028 	.word	0x20000028

0800309c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800309c:	b480      	push	{r7}
 800309e:	b085      	sub	sp, #20
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80030a8:	4b0e      	ldr	r3, [pc, #56]	; (80030e4 <FLASH_Program_DoubleWord+0x48>)
 80030aa:	695b      	ldr	r3, [r3, #20]
 80030ac:	4a0d      	ldr	r2, [pc, #52]	; (80030e4 <FLASH_Program_DoubleWord+0x48>)
 80030ae:	f043 0301 	orr.w	r3, r3, #1
 80030b2:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	683a      	ldr	r2, [r7, #0]
 80030b8:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80030ba:	f3bf 8f6f 	isb	sy
}
 80030be:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 80030c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80030c4:	f04f 0200 	mov.w	r2, #0
 80030c8:	f04f 0300 	mov.w	r3, #0
 80030cc:	000a      	movs	r2, r1
 80030ce:	2300      	movs	r3, #0
 80030d0:	68f9      	ldr	r1, [r7, #12]
 80030d2:	3104      	adds	r1, #4
 80030d4:	4613      	mov	r3, r2
 80030d6:	600b      	str	r3, [r1, #0]
}
 80030d8:	bf00      	nop
 80030da:	3714      	adds	r7, #20
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr
 80030e4:	40022000 	.word	0x40022000

080030e8 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b089      	sub	sp, #36	; 0x24
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 80030f2:	2340      	movs	r3, #64	; 0x40
 80030f4:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80030fe:	4b14      	ldr	r3, [pc, #80]	; (8003150 <FLASH_Program_Fast+0x68>)
 8003100:	695b      	ldr	r3, [r3, #20]
 8003102:	4a13      	ldr	r2, [pc, #76]	; (8003150 <FLASH_Program_Fast+0x68>)
 8003104:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003108:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800310a:	f3ef 8310 	mrs	r3, PRIMASK
 800310e:	60fb      	str	r3, [r7, #12]
  return(result);
 8003110:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8003112:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8003114:	b672      	cpsid	i
}
 8003116:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	3304      	adds	r3, #4
 8003124:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	3304      	adds	r3, #4
 800312a:	617b      	str	r3, [r7, #20]
    row_index--;
 800312c:	7ffb      	ldrb	r3, [r7, #31]
 800312e:	3b01      	subs	r3, #1
 8003130:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 8003132:	7ffb      	ldrb	r3, [r7, #31]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d1ef      	bne.n	8003118 <FLASH_Program_Fast+0x30>
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	f383 8810 	msr	PRIMASK, r3
}
 8003142:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8003144:	bf00      	nop
 8003146:	3724      	adds	r7, #36	; 0x24
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr
 8003150:	40022000 	.word	0x40022000

08003154 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800315e:	4b4b      	ldr	r3, [pc, #300]	; (800328c <HAL_FLASHEx_Erase+0x138>)
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	2b01      	cmp	r3, #1
 8003164:	d101      	bne.n	800316a <HAL_FLASHEx_Erase+0x16>
 8003166:	2302      	movs	r3, #2
 8003168:	e08b      	b.n	8003282 <HAL_FLASHEx_Erase+0x12e>
 800316a:	4b48      	ldr	r3, [pc, #288]	; (800328c <HAL_FLASHEx_Erase+0x138>)
 800316c:	2201      	movs	r2, #1
 800316e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003170:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003174:	f7ff ff3a 	bl	8002fec <FLASH_WaitForLastOperation>
 8003178:	4603      	mov	r3, r0
 800317a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800317c:	7bfb      	ldrb	r3, [r7, #15]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d17b      	bne.n	800327a <HAL_FLASHEx_Erase+0x126>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003182:	4b42      	ldr	r3, [pc, #264]	; (800328c <HAL_FLASHEx_Erase+0x138>)
 8003184:	2200      	movs	r2, #0
 8003186:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8003188:	4b41      	ldr	r3, [pc, #260]	; (8003290 <HAL_FLASHEx_Erase+0x13c>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003190:	2b00      	cmp	r3, #0
 8003192:	d019      	beq.n	80031c8 <HAL_FLASHEx_Erase+0x74>
    {
      /* Disable instruction cache  */
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003194:	4b3e      	ldr	r3, [pc, #248]	; (8003290 <HAL_FLASHEx_Erase+0x13c>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a3d      	ldr	r2, [pc, #244]	; (8003290 <HAL_FLASHEx_Erase+0x13c>)
 800319a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800319e:	6013      	str	r3, [r2, #0]

      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80031a0:	4b3b      	ldr	r3, [pc, #236]	; (8003290 <HAL_FLASHEx_Erase+0x13c>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d009      	beq.n	80031c0 <HAL_FLASHEx_Erase+0x6c>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 80031ac:	4b38      	ldr	r3, [pc, #224]	; (8003290 <HAL_FLASHEx_Erase+0x13c>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a37      	ldr	r2, [pc, #220]	; (8003290 <HAL_FLASHEx_Erase+0x13c>)
 80031b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031b6:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 80031b8:	4b34      	ldr	r3, [pc, #208]	; (800328c <HAL_FLASHEx_Erase+0x138>)
 80031ba:	2203      	movs	r2, #3
 80031bc:	771a      	strb	r2, [r3, #28]
 80031be:	e016      	b.n	80031ee <HAL_FLASHEx_Erase+0x9a>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 80031c0:	4b32      	ldr	r3, [pc, #200]	; (800328c <HAL_FLASHEx_Erase+0x138>)
 80031c2:	2201      	movs	r2, #1
 80031c4:	771a      	strb	r2, [r3, #28]
 80031c6:	e012      	b.n	80031ee <HAL_FLASHEx_Erase+0x9a>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80031c8:	4b31      	ldr	r3, [pc, #196]	; (8003290 <HAL_FLASHEx_Erase+0x13c>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d009      	beq.n	80031e8 <HAL_FLASHEx_Erase+0x94>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80031d4:	4b2e      	ldr	r3, [pc, #184]	; (8003290 <HAL_FLASHEx_Erase+0x13c>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a2d      	ldr	r2, [pc, #180]	; (8003290 <HAL_FLASHEx_Erase+0x13c>)
 80031da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031de:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80031e0:	4b2a      	ldr	r3, [pc, #168]	; (800328c <HAL_FLASHEx_Erase+0x138>)
 80031e2:	2202      	movs	r2, #2
 80031e4:	771a      	strb	r2, [r3, #28]
 80031e6:	e002      	b.n	80031ee <HAL_FLASHEx_Erase+0x9a>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80031e8:	4b28      	ldr	r3, [pc, #160]	; (800328c <HAL_FLASHEx_Erase+0x138>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d111      	bne.n	800321a <HAL_FLASHEx_Erase+0xc6>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f000 f84a 	bl	8003294 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003200:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003204:	f7ff fef2 	bl	8002fec <FLASH_WaitForLastOperation>
 8003208:	4603      	mov	r3, r0
 800320a:	73fb      	strb	r3, [r7, #15]
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 800320c:	4b20      	ldr	r3, [pc, #128]	; (8003290 <HAL_FLASHEx_Erase+0x13c>)
 800320e:	695b      	ldr	r3, [r3, #20]
 8003210:	4a1f      	ldr	r2, [pc, #124]	; (8003290 <HAL_FLASHEx_Erase+0x13c>)
 8003212:	f023 0304 	bic.w	r3, r3, #4
 8003216:	6153      	str	r3, [r2, #20]
 8003218:	e02d      	b.n	8003276 <HAL_FLASHEx_Erase+0x122>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003220:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	60bb      	str	r3, [r7, #8]
 8003228:	e01d      	b.n	8003266 <HAL_FLASHEx_Erase+0x112>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	4619      	mov	r1, r3
 8003230:	68b8      	ldr	r0, [r7, #8]
 8003232:	f000 f84d 	bl	80032d0 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003236:	f24c 3050 	movw	r0, #50000	; 0xc350
 800323a:	f7ff fed7 	bl	8002fec <FLASH_WaitForLastOperation>
 800323e:	4603      	mov	r3, r0
 8003240:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8003242:	4b13      	ldr	r3, [pc, #76]	; (8003290 <HAL_FLASHEx_Erase+0x13c>)
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	4a12      	ldr	r2, [pc, #72]	; (8003290 <HAL_FLASHEx_Erase+0x13c>)
 8003248:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 800324c:	f023 0302 	bic.w	r3, r3, #2
 8003250:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8003252:	7bfb      	ldrb	r3, [r7, #15]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d003      	beq.n	8003260 <HAL_FLASHEx_Erase+0x10c>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	68ba      	ldr	r2, [r7, #8]
 800325c:	601a      	str	r2, [r3, #0]
          break;
 800325e:	e00a      	b.n	8003276 <HAL_FLASHEx_Erase+0x122>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	3301      	adds	r3, #1
 8003264:	60bb      	str	r3, [r7, #8]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	689a      	ldr	r2, [r3, #8]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	4413      	add	r3, r2
 8003270:	68ba      	ldr	r2, [r7, #8]
 8003272:	429a      	cmp	r2, r3
 8003274:	d3d9      	bcc.n	800322a <HAL_FLASHEx_Erase+0xd6>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8003276:	f000 f84f 	bl	8003318 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800327a:	4b04      	ldr	r3, [pc, #16]	; (800328c <HAL_FLASHEx_Erase+0x138>)
 800327c:	2200      	movs	r2, #0
 800327e:	701a      	strb	r2, [r3, #0]

  return status;
 8003280:	7bfb      	ldrb	r3, [r7, #15]
}
 8003282:	4618      	mov	r0, r3
 8003284:	3710      	adds	r7, #16
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	20000028 	.word	0x20000028
 8003290:	40022000 	.word	0x40022000

08003294 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f003 0301 	and.w	r3, r3, #1
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d005      	beq.n	80032b2 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 80032a6:	4b09      	ldr	r3, [pc, #36]	; (80032cc <FLASH_MassErase+0x38>)
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	4a08      	ldr	r2, [pc, #32]	; (80032cc <FLASH_MassErase+0x38>)
 80032ac:	f043 0304 	orr.w	r3, r3, #4
 80032b0:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80032b2:	4b06      	ldr	r3, [pc, #24]	; (80032cc <FLASH_MassErase+0x38>)
 80032b4:	695b      	ldr	r3, [r3, #20]
 80032b6:	4a05      	ldr	r2, [pc, #20]	; (80032cc <FLASH_MassErase+0x38>)
 80032b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032bc:	6153      	str	r3, [r2, #20]
}
 80032be:	bf00      	nop
 80032c0:	370c      	adds	r7, #12
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	40022000 	.word	0x40022000

080032d0 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 80032da:	4b0e      	ldr	r3, [pc, #56]	; (8003314 <FLASH_PageErase+0x44>)
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	00db      	lsls	r3, r3, #3
 80032e6:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 80032ea:	490a      	ldr	r1, [pc, #40]	; (8003314 <FLASH_PageErase+0x44>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 80032f0:	4b08      	ldr	r3, [pc, #32]	; (8003314 <FLASH_PageErase+0x44>)
 80032f2:	695b      	ldr	r3, [r3, #20]
 80032f4:	4a07      	ldr	r2, [pc, #28]	; (8003314 <FLASH_PageErase+0x44>)
 80032f6:	f043 0302 	orr.w	r3, r3, #2
 80032fa:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80032fc:	4b05      	ldr	r3, [pc, #20]	; (8003314 <FLASH_PageErase+0x44>)
 80032fe:	695b      	ldr	r3, [r3, #20]
 8003300:	4a04      	ldr	r2, [pc, #16]	; (8003314 <FLASH_PageErase+0x44>)
 8003302:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003306:	6153      	str	r3, [r2, #20]
}
 8003308:	bf00      	nop
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr
 8003314:	40022000 	.word	0x40022000

08003318 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 800331e:	4b1e      	ldr	r3, [pc, #120]	; (8003398 <FLASH_FlushCaches+0x80>)
 8003320:	7f1b      	ldrb	r3, [r3, #28]
 8003322:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8003324:	79fb      	ldrb	r3, [r7, #7]
 8003326:	2b01      	cmp	r3, #1
 8003328:	d002      	beq.n	8003330 <FLASH_FlushCaches+0x18>
 800332a:	79fb      	ldrb	r3, [r7, #7]
 800332c:	2b03      	cmp	r3, #3
 800332e:	d111      	bne.n	8003354 <FLASH_FlushCaches+0x3c>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003330:	4b1a      	ldr	r3, [pc, #104]	; (800339c <FLASH_FlushCaches+0x84>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a19      	ldr	r2, [pc, #100]	; (800339c <FLASH_FlushCaches+0x84>)
 8003336:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800333a:	6013      	str	r3, [r2, #0]
 800333c:	4b17      	ldr	r3, [pc, #92]	; (800339c <FLASH_FlushCaches+0x84>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a16      	ldr	r2, [pc, #88]	; (800339c <FLASH_FlushCaches+0x84>)
 8003342:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003346:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003348:	4b14      	ldr	r3, [pc, #80]	; (800339c <FLASH_FlushCaches+0x84>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a13      	ldr	r2, [pc, #76]	; (800339c <FLASH_FlushCaches+0x84>)
 800334e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003352:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8003354:	79fb      	ldrb	r3, [r7, #7]
 8003356:	2b02      	cmp	r3, #2
 8003358:	d002      	beq.n	8003360 <FLASH_FlushCaches+0x48>
 800335a:	79fb      	ldrb	r3, [r7, #7]
 800335c:	2b03      	cmp	r3, #3
 800335e:	d111      	bne.n	8003384 <FLASH_FlushCaches+0x6c>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8003360:	4b0e      	ldr	r3, [pc, #56]	; (800339c <FLASH_FlushCaches+0x84>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a0d      	ldr	r2, [pc, #52]	; (800339c <FLASH_FlushCaches+0x84>)
 8003366:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800336a:	6013      	str	r3, [r2, #0]
 800336c:	4b0b      	ldr	r3, [pc, #44]	; (800339c <FLASH_FlushCaches+0x84>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a0a      	ldr	r2, [pc, #40]	; (800339c <FLASH_FlushCaches+0x84>)
 8003372:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003376:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8003378:	4b08      	ldr	r3, [pc, #32]	; (800339c <FLASH_FlushCaches+0x84>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a07      	ldr	r2, [pc, #28]	; (800339c <FLASH_FlushCaches+0x84>)
 800337e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003382:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8003384:	4b04      	ldr	r3, [pc, #16]	; (8003398 <FLASH_FlushCaches+0x80>)
 8003386:	2200      	movs	r2, #0
 8003388:	771a      	strb	r2, [r3, #28]
}
 800338a:	bf00      	nop
 800338c:	370c      	adds	r7, #12
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	20000028 	.word	0x20000028
 800339c:	40022000 	.word	0x40022000

080033a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b087      	sub	sp, #28
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033aa:	2300      	movs	r3, #0
 80033ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033ae:	e154      	b.n	800365a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	2101      	movs	r1, #1
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	fa01 f303 	lsl.w	r3, r1, r3
 80033bc:	4013      	ands	r3, r2
 80033be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	f000 8146 	beq.w	8003654 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d00b      	beq.n	80033e8 <HAL_GPIO_Init+0x48>
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d007      	beq.n	80033e8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033dc:	2b11      	cmp	r3, #17
 80033de:	d003      	beq.n	80033e8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	2b12      	cmp	r3, #18
 80033e6:	d130      	bne.n	800344a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	005b      	lsls	r3, r3, #1
 80033f2:	2203      	movs	r2, #3
 80033f4:	fa02 f303 	lsl.w	r3, r2, r3
 80033f8:	43db      	mvns	r3, r3
 80033fa:	693a      	ldr	r2, [r7, #16]
 80033fc:	4013      	ands	r3, r2
 80033fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	68da      	ldr	r2, [r3, #12]
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	005b      	lsls	r3, r3, #1
 8003408:	fa02 f303 	lsl.w	r3, r2, r3
 800340c:	693a      	ldr	r2, [r7, #16]
 800340e:	4313      	orrs	r3, r2
 8003410:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	693a      	ldr	r2, [r7, #16]
 8003416:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800341e:	2201      	movs	r2, #1
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	fa02 f303 	lsl.w	r3, r2, r3
 8003426:	43db      	mvns	r3, r3
 8003428:	693a      	ldr	r2, [r7, #16]
 800342a:	4013      	ands	r3, r2
 800342c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	091b      	lsrs	r3, r3, #4
 8003434:	f003 0201 	and.w	r2, r3, #1
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	fa02 f303 	lsl.w	r3, r2, r3
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	4313      	orrs	r3, r2
 8003442:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	693a      	ldr	r2, [r7, #16]
 8003448:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	2203      	movs	r2, #3
 8003456:	fa02 f303 	lsl.w	r3, r2, r3
 800345a:	43db      	mvns	r3, r3
 800345c:	693a      	ldr	r2, [r7, #16]
 800345e:	4013      	ands	r3, r2
 8003460:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	689a      	ldr	r2, [r3, #8]
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	005b      	lsls	r3, r3, #1
 800346a:	fa02 f303 	lsl.w	r3, r2, r3
 800346e:	693a      	ldr	r2, [r7, #16]
 8003470:	4313      	orrs	r3, r2
 8003472:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	2b02      	cmp	r3, #2
 8003480:	d003      	beq.n	800348a <HAL_GPIO_Init+0xea>
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	2b12      	cmp	r3, #18
 8003488:	d123      	bne.n	80034d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	08da      	lsrs	r2, r3, #3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	3208      	adds	r2, #8
 8003492:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003496:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	f003 0307 	and.w	r3, r3, #7
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	220f      	movs	r2, #15
 80034a2:	fa02 f303 	lsl.w	r3, r2, r3
 80034a6:	43db      	mvns	r3, r3
 80034a8:	693a      	ldr	r2, [r7, #16]
 80034aa:	4013      	ands	r3, r2
 80034ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	691a      	ldr	r2, [r3, #16]
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	f003 0307 	and.w	r3, r3, #7
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	fa02 f303 	lsl.w	r3, r2, r3
 80034be:	693a      	ldr	r2, [r7, #16]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	08da      	lsrs	r2, r3, #3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	3208      	adds	r2, #8
 80034cc:	6939      	ldr	r1, [r7, #16]
 80034ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	005b      	lsls	r3, r3, #1
 80034dc:	2203      	movs	r2, #3
 80034de:	fa02 f303 	lsl.w	r3, r2, r3
 80034e2:	43db      	mvns	r3, r3
 80034e4:	693a      	ldr	r2, [r7, #16]
 80034e6:	4013      	ands	r3, r2
 80034e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f003 0203 	and.w	r2, r3, #3
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	005b      	lsls	r3, r3, #1
 80034f6:	fa02 f303 	lsl.w	r3, r2, r3
 80034fa:	693a      	ldr	r2, [r7, #16]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	693a      	ldr	r2, [r7, #16]
 8003504:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800350e:	2b00      	cmp	r3, #0
 8003510:	f000 80a0 	beq.w	8003654 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003514:	4b58      	ldr	r3, [pc, #352]	; (8003678 <HAL_GPIO_Init+0x2d8>)
 8003516:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003518:	4a57      	ldr	r2, [pc, #348]	; (8003678 <HAL_GPIO_Init+0x2d8>)
 800351a:	f043 0301 	orr.w	r3, r3, #1
 800351e:	6613      	str	r3, [r2, #96]	; 0x60
 8003520:	4b55      	ldr	r3, [pc, #340]	; (8003678 <HAL_GPIO_Init+0x2d8>)
 8003522:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003524:	f003 0301 	and.w	r3, r3, #1
 8003528:	60bb      	str	r3, [r7, #8]
 800352a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800352c:	4a53      	ldr	r2, [pc, #332]	; (800367c <HAL_GPIO_Init+0x2dc>)
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	089b      	lsrs	r3, r3, #2
 8003532:	3302      	adds	r3, #2
 8003534:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003538:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	f003 0303 	and.w	r3, r3, #3
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	220f      	movs	r2, #15
 8003544:	fa02 f303 	lsl.w	r3, r2, r3
 8003548:	43db      	mvns	r3, r3
 800354a:	693a      	ldr	r2, [r7, #16]
 800354c:	4013      	ands	r3, r2
 800354e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003556:	d019      	beq.n	800358c <HAL_GPIO_Init+0x1ec>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4a49      	ldr	r2, [pc, #292]	; (8003680 <HAL_GPIO_Init+0x2e0>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d013      	beq.n	8003588 <HAL_GPIO_Init+0x1e8>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4a48      	ldr	r2, [pc, #288]	; (8003684 <HAL_GPIO_Init+0x2e4>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d00d      	beq.n	8003584 <HAL_GPIO_Init+0x1e4>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4a47      	ldr	r2, [pc, #284]	; (8003688 <HAL_GPIO_Init+0x2e8>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d007      	beq.n	8003580 <HAL_GPIO_Init+0x1e0>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4a46      	ldr	r2, [pc, #280]	; (800368c <HAL_GPIO_Init+0x2ec>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d101      	bne.n	800357c <HAL_GPIO_Init+0x1dc>
 8003578:	2304      	movs	r3, #4
 800357a:	e008      	b.n	800358e <HAL_GPIO_Init+0x1ee>
 800357c:	2307      	movs	r3, #7
 800357e:	e006      	b.n	800358e <HAL_GPIO_Init+0x1ee>
 8003580:	2303      	movs	r3, #3
 8003582:	e004      	b.n	800358e <HAL_GPIO_Init+0x1ee>
 8003584:	2302      	movs	r3, #2
 8003586:	e002      	b.n	800358e <HAL_GPIO_Init+0x1ee>
 8003588:	2301      	movs	r3, #1
 800358a:	e000      	b.n	800358e <HAL_GPIO_Init+0x1ee>
 800358c:	2300      	movs	r3, #0
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	f002 0203 	and.w	r2, r2, #3
 8003594:	0092      	lsls	r2, r2, #2
 8003596:	4093      	lsls	r3, r2
 8003598:	693a      	ldr	r2, [r7, #16]
 800359a:	4313      	orrs	r3, r2
 800359c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800359e:	4937      	ldr	r1, [pc, #220]	; (800367c <HAL_GPIO_Init+0x2dc>)
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	089b      	lsrs	r3, r3, #2
 80035a4:	3302      	adds	r3, #2
 80035a6:	693a      	ldr	r2, [r7, #16]
 80035a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80035ac:	4b38      	ldr	r3, [pc, #224]	; (8003690 <HAL_GPIO_Init+0x2f0>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	43db      	mvns	r3, r3
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	4013      	ands	r3, r2
 80035ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d003      	beq.n	80035d0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80035c8:	693a      	ldr	r2, [r7, #16]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80035d0:	4a2f      	ldr	r2, [pc, #188]	; (8003690 <HAL_GPIO_Init+0x2f0>)
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80035d6:	4b2e      	ldr	r3, [pc, #184]	; (8003690 <HAL_GPIO_Init+0x2f0>)
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	43db      	mvns	r3, r3
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	4013      	ands	r3, r2
 80035e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d003      	beq.n	80035fa <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80035f2:	693a      	ldr	r2, [r7, #16]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80035fa:	4a25      	ldr	r2, [pc, #148]	; (8003690 <HAL_GPIO_Init+0x2f0>)
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003600:	4b23      	ldr	r3, [pc, #140]	; (8003690 <HAL_GPIO_Init+0x2f0>)
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	43db      	mvns	r3, r3
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	4013      	ands	r3, r2
 800360e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d003      	beq.n	8003624 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	4313      	orrs	r3, r2
 8003622:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003624:	4a1a      	ldr	r2, [pc, #104]	; (8003690 <HAL_GPIO_Init+0x2f0>)
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800362a:	4b19      	ldr	r3, [pc, #100]	; (8003690 <HAL_GPIO_Init+0x2f0>)
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	43db      	mvns	r3, r3
 8003634:	693a      	ldr	r2, [r7, #16]
 8003636:	4013      	ands	r3, r2
 8003638:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d003      	beq.n	800364e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003646:	693a      	ldr	r2, [r7, #16]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	4313      	orrs	r3, r2
 800364c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800364e:	4a10      	ldr	r2, [pc, #64]	; (8003690 <HAL_GPIO_Init+0x2f0>)
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	3301      	adds	r3, #1
 8003658:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	fa22 f303 	lsr.w	r3, r2, r3
 8003664:	2b00      	cmp	r3, #0
 8003666:	f47f aea3 	bne.w	80033b0 <HAL_GPIO_Init+0x10>
  }
}
 800366a:	bf00      	nop
 800366c:	bf00      	nop
 800366e:	371c      	adds	r7, #28
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr
 8003678:	40021000 	.word	0x40021000
 800367c:	40010000 	.word	0x40010000
 8003680:	48000400 	.word	0x48000400
 8003684:	48000800 	.word	0x48000800
 8003688:	48000c00 	.word	0x48000c00
 800368c:	48001000 	.word	0x48001000
 8003690:	40010400 	.word	0x40010400

08003694 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003694:	b480      	push	{r7}
 8003696:	b085      	sub	sp, #20
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	460b      	mov	r3, r1
 800369e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	691a      	ldr	r2, [r3, #16]
 80036a4:	887b      	ldrh	r3, [r7, #2]
 80036a6:	4013      	ands	r3, r2
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d002      	beq.n	80036b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80036ac:	2301      	movs	r3, #1
 80036ae:	73fb      	strb	r3, [r7, #15]
 80036b0:	e001      	b.n	80036b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80036b2:	2300      	movs	r3, #0
 80036b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80036b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3714      	adds	r7, #20
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr

080036c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	460b      	mov	r3, r1
 80036ce:	807b      	strh	r3, [r7, #2]
 80036d0:	4613      	mov	r3, r2
 80036d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036d4:	787b      	ldrb	r3, [r7, #1]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d003      	beq.n	80036e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80036da:	887a      	ldrh	r2, [r7, #2]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80036e0:	e002      	b.n	80036e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80036e2:	887a      	ldrh	r2, [r7, #2]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80036e8:	bf00      	nop
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80036f4:	b480      	push	{r7}
 80036f6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80036f8:	4b04      	ldr	r3, [pc, #16]	; (800370c <HAL_PWREx_GetVoltageRange+0x18>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003700:	4618      	mov	r0, r3
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	40007000 	.word	0x40007000

08003710 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003710:	b480      	push	{r7}
 8003712:	b085      	sub	sp, #20
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800371e:	d130      	bne.n	8003782 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003720:	4b23      	ldr	r3, [pc, #140]	; (80037b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003728:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800372c:	d038      	beq.n	80037a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800372e:	4b20      	ldr	r3, [pc, #128]	; (80037b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003736:	4a1e      	ldr	r2, [pc, #120]	; (80037b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003738:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800373c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800373e:	4b1d      	ldr	r3, [pc, #116]	; (80037b4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	2232      	movs	r2, #50	; 0x32
 8003744:	fb02 f303 	mul.w	r3, r2, r3
 8003748:	4a1b      	ldr	r2, [pc, #108]	; (80037b8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800374a:	fba2 2303 	umull	r2, r3, r2, r3
 800374e:	0c9b      	lsrs	r3, r3, #18
 8003750:	3301      	adds	r3, #1
 8003752:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003754:	e002      	b.n	800375c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	3b01      	subs	r3, #1
 800375a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800375c:	4b14      	ldr	r3, [pc, #80]	; (80037b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800375e:	695b      	ldr	r3, [r3, #20]
 8003760:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003764:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003768:	d102      	bne.n	8003770 <HAL_PWREx_ControlVoltageScaling+0x60>
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d1f2      	bne.n	8003756 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003770:	4b0f      	ldr	r3, [pc, #60]	; (80037b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003772:	695b      	ldr	r3, [r3, #20]
 8003774:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003778:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800377c:	d110      	bne.n	80037a0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e00f      	b.n	80037a2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003782:	4b0b      	ldr	r3, [pc, #44]	; (80037b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800378a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800378e:	d007      	beq.n	80037a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003790:	4b07      	ldr	r3, [pc, #28]	; (80037b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003798:	4a05      	ldr	r2, [pc, #20]	; (80037b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800379a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800379e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3714      	adds	r7, #20
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	40007000 	.word	0x40007000
 80037b4:	20000018 	.word	0x20000018
 80037b8:	431bde83 	.word	0x431bde83

080037bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b088      	sub	sp, #32
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d102      	bne.n	80037d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	f000 bc10 	b.w	8003ff0 <HAL_RCC_OscConfig+0x834>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037d0:	4b96      	ldr	r3, [pc, #600]	; (8003a2c <HAL_RCC_OscConfig+0x270>)
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f003 030c 	and.w	r3, r3, #12
 80037d8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037da:	4b94      	ldr	r3, [pc, #592]	; (8003a2c <HAL_RCC_OscConfig+0x270>)
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	f003 0303 	and.w	r3, r3, #3
 80037e2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0310 	and.w	r3, r3, #16
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f000 80e4 	beq.w	80039ba <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d007      	beq.n	8003808 <HAL_RCC_OscConfig+0x4c>
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	2b0c      	cmp	r3, #12
 80037fc:	f040 808b 	bne.w	8003916 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	2b01      	cmp	r3, #1
 8003804:	f040 8087 	bne.w	8003916 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003808:	4b88      	ldr	r3, [pc, #544]	; (8003a2c <HAL_RCC_OscConfig+0x270>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0302 	and.w	r3, r3, #2
 8003810:	2b00      	cmp	r3, #0
 8003812:	d005      	beq.n	8003820 <HAL_RCC_OscConfig+0x64>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	699b      	ldr	r3, [r3, #24]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d101      	bne.n	8003820 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e3e7      	b.n	8003ff0 <HAL_RCC_OscConfig+0x834>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a1a      	ldr	r2, [r3, #32]
 8003824:	4b81      	ldr	r3, [pc, #516]	; (8003a2c <HAL_RCC_OscConfig+0x270>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0308 	and.w	r3, r3, #8
 800382c:	2b00      	cmp	r3, #0
 800382e:	d004      	beq.n	800383a <HAL_RCC_OscConfig+0x7e>
 8003830:	4b7e      	ldr	r3, [pc, #504]	; (8003a2c <HAL_RCC_OscConfig+0x270>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003838:	e005      	b.n	8003846 <HAL_RCC_OscConfig+0x8a>
 800383a:	4b7c      	ldr	r3, [pc, #496]	; (8003a2c <HAL_RCC_OscConfig+0x270>)
 800383c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003840:	091b      	lsrs	r3, r3, #4
 8003842:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003846:	4293      	cmp	r3, r2
 8003848:	d223      	bcs.n	8003892 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a1b      	ldr	r3, [r3, #32]
 800384e:	4618      	mov	r0, r3
 8003850:	f000 fdac 	bl	80043ac <RCC_SetFlashLatencyFromMSIRange>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d001      	beq.n	800385e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e3c8      	b.n	8003ff0 <HAL_RCC_OscConfig+0x834>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800385e:	4b73      	ldr	r3, [pc, #460]	; (8003a2c <HAL_RCC_OscConfig+0x270>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a72      	ldr	r2, [pc, #456]	; (8003a2c <HAL_RCC_OscConfig+0x270>)
 8003864:	f043 0308 	orr.w	r3, r3, #8
 8003868:	6013      	str	r3, [r2, #0]
 800386a:	4b70      	ldr	r3, [pc, #448]	; (8003a2c <HAL_RCC_OscConfig+0x270>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a1b      	ldr	r3, [r3, #32]
 8003876:	496d      	ldr	r1, [pc, #436]	; (8003a2c <HAL_RCC_OscConfig+0x270>)
 8003878:	4313      	orrs	r3, r2
 800387a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800387c:	4b6b      	ldr	r3, [pc, #428]	; (8003a2c <HAL_RCC_OscConfig+0x270>)
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	69db      	ldr	r3, [r3, #28]
 8003888:	021b      	lsls	r3, r3, #8
 800388a:	4968      	ldr	r1, [pc, #416]	; (8003a2c <HAL_RCC_OscConfig+0x270>)
 800388c:	4313      	orrs	r3, r2
 800388e:	604b      	str	r3, [r1, #4]
 8003890:	e025      	b.n	80038de <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003892:	4b66      	ldr	r3, [pc, #408]	; (8003a2c <HAL_RCC_OscConfig+0x270>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a65      	ldr	r2, [pc, #404]	; (8003a2c <HAL_RCC_OscConfig+0x270>)
 8003898:	f043 0308 	orr.w	r3, r3, #8
 800389c:	6013      	str	r3, [r2, #0]
 800389e:	4b63      	ldr	r3, [pc, #396]	; (8003a2c <HAL_RCC_OscConfig+0x270>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a1b      	ldr	r3, [r3, #32]
 80038aa:	4960      	ldr	r1, [pc, #384]	; (8003a2c <HAL_RCC_OscConfig+0x270>)
 80038ac:	4313      	orrs	r3, r2
 80038ae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038b0:	4b5e      	ldr	r3, [pc, #376]	; (8003a2c <HAL_RCC_OscConfig+0x270>)
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	69db      	ldr	r3, [r3, #28]
 80038bc:	021b      	lsls	r3, r3, #8
 80038be:	495b      	ldr	r1, [pc, #364]	; (8003a2c <HAL_RCC_OscConfig+0x270>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d109      	bne.n	80038de <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6a1b      	ldr	r3, [r3, #32]
 80038ce:	4618      	mov	r0, r3
 80038d0:	f000 fd6c 	bl	80043ac <RCC_SetFlashLatencyFromMSIRange>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d001      	beq.n	80038de <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e388      	b.n	8003ff0 <HAL_RCC_OscConfig+0x834>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80038de:	f000 fc6f 	bl	80041c0 <HAL_RCC_GetSysClockFreq>
 80038e2:	4602      	mov	r2, r0
 80038e4:	4b51      	ldr	r3, [pc, #324]	; (8003a2c <HAL_RCC_OscConfig+0x270>)
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	091b      	lsrs	r3, r3, #4
 80038ea:	f003 030f 	and.w	r3, r3, #15
 80038ee:	4950      	ldr	r1, [pc, #320]	; (8003a30 <HAL_RCC_OscConfig+0x274>)
 80038f0:	5ccb      	ldrb	r3, [r1, r3]
 80038f2:	f003 031f 	and.w	r3, r3, #31
 80038f6:	fa22 f303 	lsr.w	r3, r2, r3
 80038fa:	4a4e      	ldr	r2, [pc, #312]	; (8003a34 <HAL_RCC_OscConfig+0x278>)
 80038fc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80038fe:	4b4e      	ldr	r3, [pc, #312]	; (8003a38 <HAL_RCC_OscConfig+0x27c>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4618      	mov	r0, r3
 8003904:	f7fe fa5a 	bl	8001dbc <HAL_InitTick>
 8003908:	4603      	mov	r3, r0
 800390a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800390c:	7bfb      	ldrb	r3, [r7, #15]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d052      	beq.n	80039b8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003912:	7bfb      	ldrb	r3, [r7, #15]
 8003914:	e36c      	b.n	8003ff0 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d032      	beq.n	8003984 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800391e:	4b43      	ldr	r3, [pc, #268]	; (8003a2c <HAL_RCC_OscConfig+0x270>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a42      	ldr	r2, [pc, #264]	; (8003a2c <HAL_RCC_OscConfig+0x270>)
 8003924:	f043 0301 	orr.w	r3, r3, #1
 8003928:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800392a:	f7fe ffab 	bl	8002884 <HAL_GetTick>
 800392e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003930:	e008      	b.n	8003944 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003932:	f7fe ffa7 	bl	8002884 <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	2b02      	cmp	r3, #2
 800393e:	d901      	bls.n	8003944 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e355      	b.n	8003ff0 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003944:	4b39      	ldr	r3, [pc, #228]	; (8003a2c <HAL_RCC_OscConfig+0x270>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0302 	and.w	r3, r3, #2
 800394c:	2b00      	cmp	r3, #0
 800394e:	d0f0      	beq.n	8003932 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003950:	4b36      	ldr	r3, [pc, #216]	; (8003a2c <HAL_RCC_OscConfig+0x270>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a35      	ldr	r2, [pc, #212]	; (8003a2c <HAL_RCC_OscConfig+0x270>)
 8003956:	f043 0308 	orr.w	r3, r3, #8
 800395a:	6013      	str	r3, [r2, #0]
 800395c:	4b33      	ldr	r3, [pc, #204]	; (8003a2c <HAL_RCC_OscConfig+0x270>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a1b      	ldr	r3, [r3, #32]
 8003968:	4930      	ldr	r1, [pc, #192]	; (8003a2c <HAL_RCC_OscConfig+0x270>)
 800396a:	4313      	orrs	r3, r2
 800396c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800396e:	4b2f      	ldr	r3, [pc, #188]	; (8003a2c <HAL_RCC_OscConfig+0x270>)
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	69db      	ldr	r3, [r3, #28]
 800397a:	021b      	lsls	r3, r3, #8
 800397c:	492b      	ldr	r1, [pc, #172]	; (8003a2c <HAL_RCC_OscConfig+0x270>)
 800397e:	4313      	orrs	r3, r2
 8003980:	604b      	str	r3, [r1, #4]
 8003982:	e01a      	b.n	80039ba <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003984:	4b29      	ldr	r3, [pc, #164]	; (8003a2c <HAL_RCC_OscConfig+0x270>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a28      	ldr	r2, [pc, #160]	; (8003a2c <HAL_RCC_OscConfig+0x270>)
 800398a:	f023 0301 	bic.w	r3, r3, #1
 800398e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003990:	f7fe ff78 	bl	8002884 <HAL_GetTick>
 8003994:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003996:	e008      	b.n	80039aa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003998:	f7fe ff74 	bl	8002884 <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d901      	bls.n	80039aa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e322      	b.n	8003ff0 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80039aa:	4b20      	ldr	r3, [pc, #128]	; (8003a2c <HAL_RCC_OscConfig+0x270>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0302 	and.w	r3, r3, #2
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d1f0      	bne.n	8003998 <HAL_RCC_OscConfig+0x1dc>
 80039b6:	e000      	b.n	80039ba <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80039b8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0301 	and.w	r3, r3, #1
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d073      	beq.n	8003aae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	2b08      	cmp	r3, #8
 80039ca:	d005      	beq.n	80039d8 <HAL_RCC_OscConfig+0x21c>
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	2b0c      	cmp	r3, #12
 80039d0:	d10e      	bne.n	80039f0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	2b03      	cmp	r3, #3
 80039d6:	d10b      	bne.n	80039f0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039d8:	4b14      	ldr	r3, [pc, #80]	; (8003a2c <HAL_RCC_OscConfig+0x270>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d063      	beq.n	8003aac <HAL_RCC_OscConfig+0x2f0>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d15f      	bne.n	8003aac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e2ff      	b.n	8003ff0 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039f8:	d106      	bne.n	8003a08 <HAL_RCC_OscConfig+0x24c>
 80039fa:	4b0c      	ldr	r3, [pc, #48]	; (8003a2c <HAL_RCC_OscConfig+0x270>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a0b      	ldr	r2, [pc, #44]	; (8003a2c <HAL_RCC_OscConfig+0x270>)
 8003a00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a04:	6013      	str	r3, [r2, #0]
 8003a06:	e025      	b.n	8003a54 <HAL_RCC_OscConfig+0x298>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a10:	d114      	bne.n	8003a3c <HAL_RCC_OscConfig+0x280>
 8003a12:	4b06      	ldr	r3, [pc, #24]	; (8003a2c <HAL_RCC_OscConfig+0x270>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a05      	ldr	r2, [pc, #20]	; (8003a2c <HAL_RCC_OscConfig+0x270>)
 8003a18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a1c:	6013      	str	r3, [r2, #0]
 8003a1e:	4b03      	ldr	r3, [pc, #12]	; (8003a2c <HAL_RCC_OscConfig+0x270>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a02      	ldr	r2, [pc, #8]	; (8003a2c <HAL_RCC_OscConfig+0x270>)
 8003a24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a28:	6013      	str	r3, [r2, #0]
 8003a2a:	e013      	b.n	8003a54 <HAL_RCC_OscConfig+0x298>
 8003a2c:	40021000 	.word	0x40021000
 8003a30:	08009d20 	.word	0x08009d20
 8003a34:	20000018 	.word	0x20000018
 8003a38:	20000020 	.word	0x20000020
 8003a3c:	4ba0      	ldr	r3, [pc, #640]	; (8003cc0 <HAL_RCC_OscConfig+0x504>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a9f      	ldr	r2, [pc, #636]	; (8003cc0 <HAL_RCC_OscConfig+0x504>)
 8003a42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a46:	6013      	str	r3, [r2, #0]
 8003a48:	4b9d      	ldr	r3, [pc, #628]	; (8003cc0 <HAL_RCC_OscConfig+0x504>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a9c      	ldr	r2, [pc, #624]	; (8003cc0 <HAL_RCC_OscConfig+0x504>)
 8003a4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d013      	beq.n	8003a84 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a5c:	f7fe ff12 	bl	8002884 <HAL_GetTick>
 8003a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a62:	e008      	b.n	8003a76 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a64:	f7fe ff0e 	bl	8002884 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	2b64      	cmp	r3, #100	; 0x64
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e2bc      	b.n	8003ff0 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a76:	4b92      	ldr	r3, [pc, #584]	; (8003cc0 <HAL_RCC_OscConfig+0x504>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d0f0      	beq.n	8003a64 <HAL_RCC_OscConfig+0x2a8>
 8003a82:	e014      	b.n	8003aae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a84:	f7fe fefe 	bl	8002884 <HAL_GetTick>
 8003a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a8a:	e008      	b.n	8003a9e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a8c:	f7fe fefa 	bl	8002884 <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	2b64      	cmp	r3, #100	; 0x64
 8003a98:	d901      	bls.n	8003a9e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e2a8      	b.n	8003ff0 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a9e:	4b88      	ldr	r3, [pc, #544]	; (8003cc0 <HAL_RCC_OscConfig+0x504>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d1f0      	bne.n	8003a8c <HAL_RCC_OscConfig+0x2d0>
 8003aaa:	e000      	b.n	8003aae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d060      	beq.n	8003b7c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	2b04      	cmp	r3, #4
 8003abe:	d005      	beq.n	8003acc <HAL_RCC_OscConfig+0x310>
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	2b0c      	cmp	r3, #12
 8003ac4:	d119      	bne.n	8003afa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d116      	bne.n	8003afa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003acc:	4b7c      	ldr	r3, [pc, #496]	; (8003cc0 <HAL_RCC_OscConfig+0x504>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d005      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x328>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d101      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e285      	b.n	8003ff0 <HAL_RCC_OscConfig+0x834>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ae4:	4b76      	ldr	r3, [pc, #472]	; (8003cc0 <HAL_RCC_OscConfig+0x504>)
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	691b      	ldr	r3, [r3, #16]
 8003af0:	061b      	lsls	r3, r3, #24
 8003af2:	4973      	ldr	r1, [pc, #460]	; (8003cc0 <HAL_RCC_OscConfig+0x504>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003af8:	e040      	b.n	8003b7c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d023      	beq.n	8003b4a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b02:	4b6f      	ldr	r3, [pc, #444]	; (8003cc0 <HAL_RCC_OscConfig+0x504>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a6e      	ldr	r2, [pc, #440]	; (8003cc0 <HAL_RCC_OscConfig+0x504>)
 8003b08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b0e:	f7fe feb9 	bl	8002884 <HAL_GetTick>
 8003b12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b14:	e008      	b.n	8003b28 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b16:	f7fe feb5 	bl	8002884 <HAL_GetTick>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d901      	bls.n	8003b28 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e263      	b.n	8003ff0 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b28:	4b65      	ldr	r3, [pc, #404]	; (8003cc0 <HAL_RCC_OscConfig+0x504>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d0f0      	beq.n	8003b16 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b34:	4b62      	ldr	r3, [pc, #392]	; (8003cc0 <HAL_RCC_OscConfig+0x504>)
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	061b      	lsls	r3, r3, #24
 8003b42:	495f      	ldr	r1, [pc, #380]	; (8003cc0 <HAL_RCC_OscConfig+0x504>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	604b      	str	r3, [r1, #4]
 8003b48:	e018      	b.n	8003b7c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b4a:	4b5d      	ldr	r3, [pc, #372]	; (8003cc0 <HAL_RCC_OscConfig+0x504>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a5c      	ldr	r2, [pc, #368]	; (8003cc0 <HAL_RCC_OscConfig+0x504>)
 8003b50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b56:	f7fe fe95 	bl	8002884 <HAL_GetTick>
 8003b5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b5c:	e008      	b.n	8003b70 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b5e:	f7fe fe91 	bl	8002884 <HAL_GetTick>
 8003b62:	4602      	mov	r2, r0
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d901      	bls.n	8003b70 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	e23f      	b.n	8003ff0 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b70:	4b53      	ldr	r3, [pc, #332]	; (8003cc0 <HAL_RCC_OscConfig+0x504>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d1f0      	bne.n	8003b5e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0308 	and.w	r3, r3, #8
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d03c      	beq.n	8003c02 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	695b      	ldr	r3, [r3, #20]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d01c      	beq.n	8003bca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b90:	4b4b      	ldr	r3, [pc, #300]	; (8003cc0 <HAL_RCC_OscConfig+0x504>)
 8003b92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b96:	4a4a      	ldr	r2, [pc, #296]	; (8003cc0 <HAL_RCC_OscConfig+0x504>)
 8003b98:	f043 0301 	orr.w	r3, r3, #1
 8003b9c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ba0:	f7fe fe70 	bl	8002884 <HAL_GetTick>
 8003ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ba6:	e008      	b.n	8003bba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ba8:	f7fe fe6c 	bl	8002884 <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d901      	bls.n	8003bba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e21a      	b.n	8003ff0 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003bba:	4b41      	ldr	r3, [pc, #260]	; (8003cc0 <HAL_RCC_OscConfig+0x504>)
 8003bbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bc0:	f003 0302 	and.w	r3, r3, #2
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d0ef      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x3ec>
 8003bc8:	e01b      	b.n	8003c02 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bca:	4b3d      	ldr	r3, [pc, #244]	; (8003cc0 <HAL_RCC_OscConfig+0x504>)
 8003bcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bd0:	4a3b      	ldr	r2, [pc, #236]	; (8003cc0 <HAL_RCC_OscConfig+0x504>)
 8003bd2:	f023 0301 	bic.w	r3, r3, #1
 8003bd6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bda:	f7fe fe53 	bl	8002884 <HAL_GetTick>
 8003bde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003be0:	e008      	b.n	8003bf4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003be2:	f7fe fe4f 	bl	8002884 <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d901      	bls.n	8003bf4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e1fd      	b.n	8003ff0 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003bf4:	4b32      	ldr	r3, [pc, #200]	; (8003cc0 <HAL_RCC_OscConfig+0x504>)
 8003bf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bfa:	f003 0302 	and.w	r3, r3, #2
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d1ef      	bne.n	8003be2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0304 	and.w	r3, r3, #4
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	f000 80a6 	beq.w	8003d5c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c10:	2300      	movs	r3, #0
 8003c12:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003c14:	4b2a      	ldr	r3, [pc, #168]	; (8003cc0 <HAL_RCC_OscConfig+0x504>)
 8003c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d10d      	bne.n	8003c3c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c20:	4b27      	ldr	r3, [pc, #156]	; (8003cc0 <HAL_RCC_OscConfig+0x504>)
 8003c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c24:	4a26      	ldr	r2, [pc, #152]	; (8003cc0 <HAL_RCC_OscConfig+0x504>)
 8003c26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c2a:	6593      	str	r3, [r2, #88]	; 0x58
 8003c2c:	4b24      	ldr	r3, [pc, #144]	; (8003cc0 <HAL_RCC_OscConfig+0x504>)
 8003c2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c34:	60bb      	str	r3, [r7, #8]
 8003c36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c3c:	4b21      	ldr	r3, [pc, #132]	; (8003cc4 <HAL_RCC_OscConfig+0x508>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d118      	bne.n	8003c7a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c48:	4b1e      	ldr	r3, [pc, #120]	; (8003cc4 <HAL_RCC_OscConfig+0x508>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a1d      	ldr	r2, [pc, #116]	; (8003cc4 <HAL_RCC_OscConfig+0x508>)
 8003c4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c52:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c54:	f7fe fe16 	bl	8002884 <HAL_GetTick>
 8003c58:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c5a:	e008      	b.n	8003c6e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c5c:	f7fe fe12 	bl	8002884 <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d901      	bls.n	8003c6e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e1c0      	b.n	8003ff0 <HAL_RCC_OscConfig+0x834>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c6e:	4b15      	ldr	r3, [pc, #84]	; (8003cc4 <HAL_RCC_OscConfig+0x508>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d0f0      	beq.n	8003c5c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d108      	bne.n	8003c94 <HAL_RCC_OscConfig+0x4d8>
 8003c82:	4b0f      	ldr	r3, [pc, #60]	; (8003cc0 <HAL_RCC_OscConfig+0x504>)
 8003c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c88:	4a0d      	ldr	r2, [pc, #52]	; (8003cc0 <HAL_RCC_OscConfig+0x504>)
 8003c8a:	f043 0301 	orr.w	r3, r3, #1
 8003c8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c92:	e029      	b.n	8003ce8 <HAL_RCC_OscConfig+0x52c>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	2b05      	cmp	r3, #5
 8003c9a:	d115      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x50c>
 8003c9c:	4b08      	ldr	r3, [pc, #32]	; (8003cc0 <HAL_RCC_OscConfig+0x504>)
 8003c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ca2:	4a07      	ldr	r2, [pc, #28]	; (8003cc0 <HAL_RCC_OscConfig+0x504>)
 8003ca4:	f043 0304 	orr.w	r3, r3, #4
 8003ca8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cac:	4b04      	ldr	r3, [pc, #16]	; (8003cc0 <HAL_RCC_OscConfig+0x504>)
 8003cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb2:	4a03      	ldr	r2, [pc, #12]	; (8003cc0 <HAL_RCC_OscConfig+0x504>)
 8003cb4:	f043 0301 	orr.w	r3, r3, #1
 8003cb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cbc:	e014      	b.n	8003ce8 <HAL_RCC_OscConfig+0x52c>
 8003cbe:	bf00      	nop
 8003cc0:	40021000 	.word	0x40021000
 8003cc4:	40007000 	.word	0x40007000
 8003cc8:	4b9a      	ldr	r3, [pc, #616]	; (8003f34 <HAL_RCC_OscConfig+0x778>)
 8003cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cce:	4a99      	ldr	r2, [pc, #612]	; (8003f34 <HAL_RCC_OscConfig+0x778>)
 8003cd0:	f023 0301 	bic.w	r3, r3, #1
 8003cd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cd8:	4b96      	ldr	r3, [pc, #600]	; (8003f34 <HAL_RCC_OscConfig+0x778>)
 8003cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cde:	4a95      	ldr	r2, [pc, #596]	; (8003f34 <HAL_RCC_OscConfig+0x778>)
 8003ce0:	f023 0304 	bic.w	r3, r3, #4
 8003ce4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d016      	beq.n	8003d1e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cf0:	f7fe fdc8 	bl	8002884 <HAL_GetTick>
 8003cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cf6:	e00a      	b.n	8003d0e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cf8:	f7fe fdc4 	bl	8002884 <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d901      	bls.n	8003d0e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e170      	b.n	8003ff0 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d0e:	4b89      	ldr	r3, [pc, #548]	; (8003f34 <HAL_RCC_OscConfig+0x778>)
 8003d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d14:	f003 0302 	and.w	r3, r3, #2
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d0ed      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x53c>
 8003d1c:	e015      	b.n	8003d4a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d1e:	f7fe fdb1 	bl	8002884 <HAL_GetTick>
 8003d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d24:	e00a      	b.n	8003d3c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d26:	f7fe fdad 	bl	8002884 <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d901      	bls.n	8003d3c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	e159      	b.n	8003ff0 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d3c:	4b7d      	ldr	r3, [pc, #500]	; (8003f34 <HAL_RCC_OscConfig+0x778>)
 8003d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d42:	f003 0302 	and.w	r3, r3, #2
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d1ed      	bne.n	8003d26 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d4a:	7ffb      	ldrb	r3, [r7, #31]
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d105      	bne.n	8003d5c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d50:	4b78      	ldr	r3, [pc, #480]	; (8003f34 <HAL_RCC_OscConfig+0x778>)
 8003d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d54:	4a77      	ldr	r2, [pc, #476]	; (8003f34 <HAL_RCC_OscConfig+0x778>)
 8003d56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d5a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0320 	and.w	r3, r3, #32
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d03c      	beq.n	8003de2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d01c      	beq.n	8003daa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d70:	4b70      	ldr	r3, [pc, #448]	; (8003f34 <HAL_RCC_OscConfig+0x778>)
 8003d72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d76:	4a6f      	ldr	r2, [pc, #444]	; (8003f34 <HAL_RCC_OscConfig+0x778>)
 8003d78:	f043 0301 	orr.w	r3, r3, #1
 8003d7c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d80:	f7fe fd80 	bl	8002884 <HAL_GetTick>
 8003d84:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d86:	e008      	b.n	8003d9a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d88:	f7fe fd7c 	bl	8002884 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d901      	bls.n	8003d9a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e12a      	b.n	8003ff0 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d9a:	4b66      	ldr	r3, [pc, #408]	; (8003f34 <HAL_RCC_OscConfig+0x778>)
 8003d9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003da0:	f003 0302 	and.w	r3, r3, #2
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d0ef      	beq.n	8003d88 <HAL_RCC_OscConfig+0x5cc>
 8003da8:	e01b      	b.n	8003de2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003daa:	4b62      	ldr	r3, [pc, #392]	; (8003f34 <HAL_RCC_OscConfig+0x778>)
 8003dac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003db0:	4a60      	ldr	r2, [pc, #384]	; (8003f34 <HAL_RCC_OscConfig+0x778>)
 8003db2:	f023 0301 	bic.w	r3, r3, #1
 8003db6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dba:	f7fe fd63 	bl	8002884 <HAL_GetTick>
 8003dbe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003dc0:	e008      	b.n	8003dd4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003dc2:	f7fe fd5f 	bl	8002884 <HAL_GetTick>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d901      	bls.n	8003dd4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e10d      	b.n	8003ff0 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003dd4:	4b57      	ldr	r3, [pc, #348]	; (8003f34 <HAL_RCC_OscConfig+0x778>)
 8003dd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003dda:	f003 0302 	and.w	r3, r3, #2
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1ef      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	f000 8101 	beq.w	8003fee <HAL_RCC_OscConfig+0x832>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	f040 80c9 	bne.w	8003f88 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003df6:	4b4f      	ldr	r3, [pc, #316]	; (8003f34 <HAL_RCC_OscConfig+0x778>)
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	f003 0203 	and.w	r2, r3, #3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d12c      	bne.n	8003e64 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e14:	3b01      	subs	r3, #1
 8003e16:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d123      	bne.n	8003e64 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e26:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d11b      	bne.n	8003e64 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e36:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d113      	bne.n	8003e64 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e46:	085b      	lsrs	r3, r3, #1
 8003e48:	3b01      	subs	r3, #1
 8003e4a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d109      	bne.n	8003e64 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5a:	085b      	lsrs	r3, r3, #1
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d06b      	beq.n	8003f3c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	2b0c      	cmp	r3, #12
 8003e68:	d062      	beq.n	8003f30 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003e6a:	4b32      	ldr	r3, [pc, #200]	; (8003f34 <HAL_RCC_OscConfig+0x778>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d001      	beq.n	8003e7a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e0ba      	b.n	8003ff0 <HAL_RCC_OscConfig+0x834>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003e7a:	4b2e      	ldr	r3, [pc, #184]	; (8003f34 <HAL_RCC_OscConfig+0x778>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a2d      	ldr	r2, [pc, #180]	; (8003f34 <HAL_RCC_OscConfig+0x778>)
 8003e80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e84:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e86:	f7fe fcfd 	bl	8002884 <HAL_GetTick>
 8003e8a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e8c:	e008      	b.n	8003ea0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e8e:	f7fe fcf9 	bl	8002884 <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d901      	bls.n	8003ea0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	e0a7      	b.n	8003ff0 <HAL_RCC_OscConfig+0x834>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ea0:	4b24      	ldr	r3, [pc, #144]	; (8003f34 <HAL_RCC_OscConfig+0x778>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d1f0      	bne.n	8003e8e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003eac:	4b21      	ldr	r3, [pc, #132]	; (8003f34 <HAL_RCC_OscConfig+0x778>)
 8003eae:	68da      	ldr	r2, [r3, #12]
 8003eb0:	4b21      	ldr	r3, [pc, #132]	; (8003f38 <HAL_RCC_OscConfig+0x77c>)
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003ebc:	3a01      	subs	r2, #1
 8003ebe:	0112      	lsls	r2, r2, #4
 8003ec0:	4311      	orrs	r1, r2
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ec6:	0212      	lsls	r2, r2, #8
 8003ec8:	4311      	orrs	r1, r2
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003ece:	0852      	lsrs	r2, r2, #1
 8003ed0:	3a01      	subs	r2, #1
 8003ed2:	0552      	lsls	r2, r2, #21
 8003ed4:	4311      	orrs	r1, r2
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003eda:	0852      	lsrs	r2, r2, #1
 8003edc:	3a01      	subs	r2, #1
 8003ede:	0652      	lsls	r2, r2, #25
 8003ee0:	4311      	orrs	r1, r2
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ee6:	06d2      	lsls	r2, r2, #27
 8003ee8:	430a      	orrs	r2, r1
 8003eea:	4912      	ldr	r1, [pc, #72]	; (8003f34 <HAL_RCC_OscConfig+0x778>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003ef0:	4b10      	ldr	r3, [pc, #64]	; (8003f34 <HAL_RCC_OscConfig+0x778>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a0f      	ldr	r2, [pc, #60]	; (8003f34 <HAL_RCC_OscConfig+0x778>)
 8003ef6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003efa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003efc:	4b0d      	ldr	r3, [pc, #52]	; (8003f34 <HAL_RCC_OscConfig+0x778>)
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	4a0c      	ldr	r2, [pc, #48]	; (8003f34 <HAL_RCC_OscConfig+0x778>)
 8003f02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f06:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f08:	f7fe fcbc 	bl	8002884 <HAL_GetTick>
 8003f0c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f0e:	e008      	b.n	8003f22 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f10:	f7fe fcb8 	bl	8002884 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d901      	bls.n	8003f22 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e066      	b.n	8003ff0 <HAL_RCC_OscConfig+0x834>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f22:	4b04      	ldr	r3, [pc, #16]	; (8003f34 <HAL_RCC_OscConfig+0x778>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d0f0      	beq.n	8003f10 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f2e:	e05e      	b.n	8003fee <HAL_RCC_OscConfig+0x832>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e05d      	b.n	8003ff0 <HAL_RCC_OscConfig+0x834>
 8003f34:	40021000 	.word	0x40021000
 8003f38:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f3c:	4b2e      	ldr	r3, [pc, #184]	; (8003ff8 <HAL_RCC_OscConfig+0x83c>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d152      	bne.n	8003fee <HAL_RCC_OscConfig+0x832>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003f48:	4b2b      	ldr	r3, [pc, #172]	; (8003ff8 <HAL_RCC_OscConfig+0x83c>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a2a      	ldr	r2, [pc, #168]	; (8003ff8 <HAL_RCC_OscConfig+0x83c>)
 8003f4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f52:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f54:	4b28      	ldr	r3, [pc, #160]	; (8003ff8 <HAL_RCC_OscConfig+0x83c>)
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	4a27      	ldr	r2, [pc, #156]	; (8003ff8 <HAL_RCC_OscConfig+0x83c>)
 8003f5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f5e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003f60:	f7fe fc90 	bl	8002884 <HAL_GetTick>
 8003f64:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f66:	e008      	b.n	8003f7a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f68:	f7fe fc8c 	bl	8002884 <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d901      	bls.n	8003f7a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e03a      	b.n	8003ff0 <HAL_RCC_OscConfig+0x834>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f7a:	4b1f      	ldr	r3, [pc, #124]	; (8003ff8 <HAL_RCC_OscConfig+0x83c>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d0f0      	beq.n	8003f68 <HAL_RCC_OscConfig+0x7ac>
 8003f86:	e032      	b.n	8003fee <HAL_RCC_OscConfig+0x832>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	2b0c      	cmp	r3, #12
 8003f8c:	d02d      	beq.n	8003fea <HAL_RCC_OscConfig+0x82e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f8e:	4b1a      	ldr	r3, [pc, #104]	; (8003ff8 <HAL_RCC_OscConfig+0x83c>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a19      	ldr	r2, [pc, #100]	; (8003ff8 <HAL_RCC_OscConfig+0x83c>)
 8003f94:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f98:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f9a:	4b17      	ldr	r3, [pc, #92]	; (8003ff8 <HAL_RCC_OscConfig+0x83c>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d105      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x7f6>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003fa6:	4b14      	ldr	r3, [pc, #80]	; (8003ff8 <HAL_RCC_OscConfig+0x83c>)
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	4a13      	ldr	r2, [pc, #76]	; (8003ff8 <HAL_RCC_OscConfig+0x83c>)
 8003fac:	f023 0303 	bic.w	r3, r3, #3
 8003fb0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003fb2:	4b11      	ldr	r3, [pc, #68]	; (8003ff8 <HAL_RCC_OscConfig+0x83c>)
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	4a10      	ldr	r2, [pc, #64]	; (8003ff8 <HAL_RCC_OscConfig+0x83c>)
 8003fb8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003fbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fc0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fc2:	f7fe fc5f 	bl	8002884 <HAL_GetTick>
 8003fc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fc8:	e008      	b.n	8003fdc <HAL_RCC_OscConfig+0x820>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fca:	f7fe fc5b 	bl	8002884 <HAL_GetTick>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	d901      	bls.n	8003fdc <HAL_RCC_OscConfig+0x820>
          {
            return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e009      	b.n	8003ff0 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fdc:	4b06      	ldr	r3, [pc, #24]	; (8003ff8 <HAL_RCC_OscConfig+0x83c>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d1f0      	bne.n	8003fca <HAL_RCC_OscConfig+0x80e>
 8003fe8:	e001      	b.n	8003fee <HAL_RCC_OscConfig+0x832>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e000      	b.n	8003ff0 <HAL_RCC_OscConfig+0x834>
      }
    }
  }
  return HAL_OK;
 8003fee:	2300      	movs	r3, #0
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3720      	adds	r7, #32
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	40021000 	.word	0x40021000

08003ffc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d101      	bne.n	8004010 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e0c8      	b.n	80041a2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004010:	4b66      	ldr	r3, [pc, #408]	; (80041ac <HAL_RCC_ClockConfig+0x1b0>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0307 	and.w	r3, r3, #7
 8004018:	683a      	ldr	r2, [r7, #0]
 800401a:	429a      	cmp	r2, r3
 800401c:	d910      	bls.n	8004040 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800401e:	4b63      	ldr	r3, [pc, #396]	; (80041ac <HAL_RCC_ClockConfig+0x1b0>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f023 0207 	bic.w	r2, r3, #7
 8004026:	4961      	ldr	r1, [pc, #388]	; (80041ac <HAL_RCC_ClockConfig+0x1b0>)
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	4313      	orrs	r3, r2
 800402c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800402e:	4b5f      	ldr	r3, [pc, #380]	; (80041ac <HAL_RCC_ClockConfig+0x1b0>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0307 	and.w	r3, r3, #7
 8004036:	683a      	ldr	r2, [r7, #0]
 8004038:	429a      	cmp	r2, r3
 800403a:	d001      	beq.n	8004040 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e0b0      	b.n	80041a2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0301 	and.w	r3, r3, #1
 8004048:	2b00      	cmp	r3, #0
 800404a:	d04c      	beq.n	80040e6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	2b03      	cmp	r3, #3
 8004052:	d107      	bne.n	8004064 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004054:	4b56      	ldr	r3, [pc, #344]	; (80041b0 <HAL_RCC_ClockConfig+0x1b4>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d121      	bne.n	80040a4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e09e      	b.n	80041a2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	2b02      	cmp	r3, #2
 800406a:	d107      	bne.n	800407c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800406c:	4b50      	ldr	r3, [pc, #320]	; (80041b0 <HAL_RCC_ClockConfig+0x1b4>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004074:	2b00      	cmp	r3, #0
 8004076:	d115      	bne.n	80040a4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e092      	b.n	80041a2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d107      	bne.n	8004094 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004084:	4b4a      	ldr	r3, [pc, #296]	; (80041b0 <HAL_RCC_ClockConfig+0x1b4>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0302 	and.w	r3, r3, #2
 800408c:	2b00      	cmp	r3, #0
 800408e:	d109      	bne.n	80040a4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e086      	b.n	80041a2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004094:	4b46      	ldr	r3, [pc, #280]	; (80041b0 <HAL_RCC_ClockConfig+0x1b4>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800409c:	2b00      	cmp	r3, #0
 800409e:	d101      	bne.n	80040a4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e07e      	b.n	80041a2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80040a4:	4b42      	ldr	r3, [pc, #264]	; (80041b0 <HAL_RCC_ClockConfig+0x1b4>)
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	f023 0203 	bic.w	r2, r3, #3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	493f      	ldr	r1, [pc, #252]	; (80041b0 <HAL_RCC_ClockConfig+0x1b4>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040b6:	f7fe fbe5 	bl	8002884 <HAL_GetTick>
 80040ba:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040bc:	e00a      	b.n	80040d4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040be:	f7fe fbe1 	bl	8002884 <HAL_GetTick>
 80040c2:	4602      	mov	r2, r0
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d901      	bls.n	80040d4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80040d0:	2303      	movs	r3, #3
 80040d2:	e066      	b.n	80041a2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040d4:	4b36      	ldr	r3, [pc, #216]	; (80041b0 <HAL_RCC_ClockConfig+0x1b4>)
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	f003 020c 	and.w	r2, r3, #12
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d1eb      	bne.n	80040be <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0302 	and.w	r3, r3, #2
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d008      	beq.n	8004104 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040f2:	4b2f      	ldr	r3, [pc, #188]	; (80041b0 <HAL_RCC_ClockConfig+0x1b4>)
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	492c      	ldr	r1, [pc, #176]	; (80041b0 <HAL_RCC_ClockConfig+0x1b4>)
 8004100:	4313      	orrs	r3, r2
 8004102:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004104:	4b29      	ldr	r3, [pc, #164]	; (80041ac <HAL_RCC_ClockConfig+0x1b0>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0307 	and.w	r3, r3, #7
 800410c:	683a      	ldr	r2, [r7, #0]
 800410e:	429a      	cmp	r2, r3
 8004110:	d210      	bcs.n	8004134 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004112:	4b26      	ldr	r3, [pc, #152]	; (80041ac <HAL_RCC_ClockConfig+0x1b0>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f023 0207 	bic.w	r2, r3, #7
 800411a:	4924      	ldr	r1, [pc, #144]	; (80041ac <HAL_RCC_ClockConfig+0x1b0>)
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	4313      	orrs	r3, r2
 8004120:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004122:	4b22      	ldr	r3, [pc, #136]	; (80041ac <HAL_RCC_ClockConfig+0x1b0>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0307 	and.w	r3, r3, #7
 800412a:	683a      	ldr	r2, [r7, #0]
 800412c:	429a      	cmp	r2, r3
 800412e:	d001      	beq.n	8004134 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e036      	b.n	80041a2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0304 	and.w	r3, r3, #4
 800413c:	2b00      	cmp	r3, #0
 800413e:	d008      	beq.n	8004152 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004140:	4b1b      	ldr	r3, [pc, #108]	; (80041b0 <HAL_RCC_ClockConfig+0x1b4>)
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	4918      	ldr	r1, [pc, #96]	; (80041b0 <HAL_RCC_ClockConfig+0x1b4>)
 800414e:	4313      	orrs	r3, r2
 8004150:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0308 	and.w	r3, r3, #8
 800415a:	2b00      	cmp	r3, #0
 800415c:	d009      	beq.n	8004172 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800415e:	4b14      	ldr	r3, [pc, #80]	; (80041b0 <HAL_RCC_ClockConfig+0x1b4>)
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	00db      	lsls	r3, r3, #3
 800416c:	4910      	ldr	r1, [pc, #64]	; (80041b0 <HAL_RCC_ClockConfig+0x1b4>)
 800416e:	4313      	orrs	r3, r2
 8004170:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004172:	f000 f825 	bl	80041c0 <HAL_RCC_GetSysClockFreq>
 8004176:	4602      	mov	r2, r0
 8004178:	4b0d      	ldr	r3, [pc, #52]	; (80041b0 <HAL_RCC_ClockConfig+0x1b4>)
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	091b      	lsrs	r3, r3, #4
 800417e:	f003 030f 	and.w	r3, r3, #15
 8004182:	490c      	ldr	r1, [pc, #48]	; (80041b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004184:	5ccb      	ldrb	r3, [r1, r3]
 8004186:	f003 031f 	and.w	r3, r3, #31
 800418a:	fa22 f303 	lsr.w	r3, r2, r3
 800418e:	4a0a      	ldr	r2, [pc, #40]	; (80041b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004190:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004192:	4b0a      	ldr	r3, [pc, #40]	; (80041bc <HAL_RCC_ClockConfig+0x1c0>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4618      	mov	r0, r3
 8004198:	f7fd fe10 	bl	8001dbc <HAL_InitTick>
 800419c:	4603      	mov	r3, r0
 800419e:	72fb      	strb	r3, [r7, #11]

  return status;
 80041a0:	7afb      	ldrb	r3, [r7, #11]
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3710      	adds	r7, #16
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	40022000 	.word	0x40022000
 80041b0:	40021000 	.word	0x40021000
 80041b4:	08009d20 	.word	0x08009d20
 80041b8:	20000018 	.word	0x20000018
 80041bc:	20000020 	.word	0x20000020

080041c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b089      	sub	sp, #36	; 0x24
 80041c4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80041c6:	2300      	movs	r3, #0
 80041c8:	61fb      	str	r3, [r7, #28]
 80041ca:	2300      	movs	r3, #0
 80041cc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041ce:	4b3e      	ldr	r3, [pc, #248]	; (80042c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f003 030c 	and.w	r3, r3, #12
 80041d6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041d8:	4b3b      	ldr	r3, [pc, #236]	; (80042c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	f003 0303 	and.w	r3, r3, #3
 80041e0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d005      	beq.n	80041f4 <HAL_RCC_GetSysClockFreq+0x34>
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	2b0c      	cmp	r3, #12
 80041ec:	d121      	bne.n	8004232 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d11e      	bne.n	8004232 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80041f4:	4b34      	ldr	r3, [pc, #208]	; (80042c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0308 	and.w	r3, r3, #8
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d107      	bne.n	8004210 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004200:	4b31      	ldr	r3, [pc, #196]	; (80042c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004202:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004206:	0a1b      	lsrs	r3, r3, #8
 8004208:	f003 030f 	and.w	r3, r3, #15
 800420c:	61fb      	str	r3, [r7, #28]
 800420e:	e005      	b.n	800421c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004210:	4b2d      	ldr	r3, [pc, #180]	; (80042c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	091b      	lsrs	r3, r3, #4
 8004216:	f003 030f 	and.w	r3, r3, #15
 800421a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800421c:	4a2b      	ldr	r2, [pc, #172]	; (80042cc <HAL_RCC_GetSysClockFreq+0x10c>)
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004224:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d10d      	bne.n	8004248 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004230:	e00a      	b.n	8004248 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	2b04      	cmp	r3, #4
 8004236:	d102      	bne.n	800423e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004238:	4b25      	ldr	r3, [pc, #148]	; (80042d0 <HAL_RCC_GetSysClockFreq+0x110>)
 800423a:	61bb      	str	r3, [r7, #24]
 800423c:	e004      	b.n	8004248 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	2b08      	cmp	r3, #8
 8004242:	d101      	bne.n	8004248 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004244:	4b23      	ldr	r3, [pc, #140]	; (80042d4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004246:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	2b0c      	cmp	r3, #12
 800424c:	d134      	bne.n	80042b8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800424e:	4b1e      	ldr	r3, [pc, #120]	; (80042c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	f003 0303 	and.w	r3, r3, #3
 8004256:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	2b02      	cmp	r3, #2
 800425c:	d003      	beq.n	8004266 <HAL_RCC_GetSysClockFreq+0xa6>
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	2b03      	cmp	r3, #3
 8004262:	d003      	beq.n	800426c <HAL_RCC_GetSysClockFreq+0xac>
 8004264:	e005      	b.n	8004272 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004266:	4b1a      	ldr	r3, [pc, #104]	; (80042d0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004268:	617b      	str	r3, [r7, #20]
      break;
 800426a:	e005      	b.n	8004278 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800426c:	4b19      	ldr	r3, [pc, #100]	; (80042d4 <HAL_RCC_GetSysClockFreq+0x114>)
 800426e:	617b      	str	r3, [r7, #20]
      break;
 8004270:	e002      	b.n	8004278 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	617b      	str	r3, [r7, #20]
      break;
 8004276:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004278:	4b13      	ldr	r3, [pc, #76]	; (80042c8 <HAL_RCC_GetSysClockFreq+0x108>)
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	091b      	lsrs	r3, r3, #4
 800427e:	f003 0307 	and.w	r3, r3, #7
 8004282:	3301      	adds	r3, #1
 8004284:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004286:	4b10      	ldr	r3, [pc, #64]	; (80042c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	0a1b      	lsrs	r3, r3, #8
 800428c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004290:	697a      	ldr	r2, [r7, #20]
 8004292:	fb03 f202 	mul.w	r2, r3, r2
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	fbb2 f3f3 	udiv	r3, r2, r3
 800429c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800429e:	4b0a      	ldr	r3, [pc, #40]	; (80042c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	0e5b      	lsrs	r3, r3, #25
 80042a4:	f003 0303 	and.w	r3, r3, #3
 80042a8:	3301      	adds	r3, #1
 80042aa:	005b      	lsls	r3, r3, #1
 80042ac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80042ae:	697a      	ldr	r2, [r7, #20]
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80042b6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80042b8:	69bb      	ldr	r3, [r7, #24]
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3724      	adds	r7, #36	; 0x24
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	40021000 	.word	0x40021000
 80042cc:	08009d38 	.word	0x08009d38
 80042d0:	00f42400 	.word	0x00f42400
 80042d4:	007a1200 	.word	0x007a1200

080042d8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042d8:	b480      	push	{r7}
 80042da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042dc:	4b03      	ldr	r3, [pc, #12]	; (80042ec <HAL_RCC_GetHCLKFreq+0x14>)
 80042de:	681b      	ldr	r3, [r3, #0]
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop
 80042ec:	20000018 	.word	0x20000018

080042f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80042f4:	f7ff fff0 	bl	80042d8 <HAL_RCC_GetHCLKFreq>
 80042f8:	4602      	mov	r2, r0
 80042fa:	4b06      	ldr	r3, [pc, #24]	; (8004314 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	0a1b      	lsrs	r3, r3, #8
 8004300:	f003 0307 	and.w	r3, r3, #7
 8004304:	4904      	ldr	r1, [pc, #16]	; (8004318 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004306:	5ccb      	ldrb	r3, [r1, r3]
 8004308:	f003 031f 	and.w	r3, r3, #31
 800430c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004310:	4618      	mov	r0, r3
 8004312:	bd80      	pop	{r7, pc}
 8004314:	40021000 	.word	0x40021000
 8004318:	08009d30 	.word	0x08009d30

0800431c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004320:	f7ff ffda 	bl	80042d8 <HAL_RCC_GetHCLKFreq>
 8004324:	4602      	mov	r2, r0
 8004326:	4b06      	ldr	r3, [pc, #24]	; (8004340 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	0adb      	lsrs	r3, r3, #11
 800432c:	f003 0307 	and.w	r3, r3, #7
 8004330:	4904      	ldr	r1, [pc, #16]	; (8004344 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004332:	5ccb      	ldrb	r3, [r1, r3]
 8004334:	f003 031f 	and.w	r3, r3, #31
 8004338:	fa22 f303 	lsr.w	r3, r2, r3
}
 800433c:	4618      	mov	r0, r3
 800433e:	bd80      	pop	{r7, pc}
 8004340:	40021000 	.word	0x40021000
 8004344:	08009d30 	.word	0x08009d30

08004348 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	220f      	movs	r2, #15
 8004356:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004358:	4b12      	ldr	r3, [pc, #72]	; (80043a4 <HAL_RCC_GetClockConfig+0x5c>)
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	f003 0203 	and.w	r2, r3, #3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004364:	4b0f      	ldr	r3, [pc, #60]	; (80043a4 <HAL_RCC_GetClockConfig+0x5c>)
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004370:	4b0c      	ldr	r3, [pc, #48]	; (80043a4 <HAL_RCC_GetClockConfig+0x5c>)
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800437c:	4b09      	ldr	r3, [pc, #36]	; (80043a4 <HAL_RCC_GetClockConfig+0x5c>)
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	08db      	lsrs	r3, r3, #3
 8004382:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800438a:	4b07      	ldr	r3, [pc, #28]	; (80043a8 <HAL_RCC_GetClockConfig+0x60>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0207 	and.w	r2, r3, #7
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	601a      	str	r2, [r3, #0]
}
 8004396:	bf00      	nop
 8004398:	370c      	adds	r7, #12
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop
 80043a4:	40021000 	.word	0x40021000
 80043a8:	40022000 	.word	0x40022000

080043ac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b086      	sub	sp, #24
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80043b4:	2300      	movs	r3, #0
 80043b6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80043b8:	4b2a      	ldr	r3, [pc, #168]	; (8004464 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d003      	beq.n	80043cc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80043c4:	f7ff f996 	bl	80036f4 <HAL_PWREx_GetVoltageRange>
 80043c8:	6178      	str	r0, [r7, #20]
 80043ca:	e014      	b.n	80043f6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80043cc:	4b25      	ldr	r3, [pc, #148]	; (8004464 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043d0:	4a24      	ldr	r2, [pc, #144]	; (8004464 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043d6:	6593      	str	r3, [r2, #88]	; 0x58
 80043d8:	4b22      	ldr	r3, [pc, #136]	; (8004464 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043e0:	60fb      	str	r3, [r7, #12]
 80043e2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80043e4:	f7ff f986 	bl	80036f4 <HAL_PWREx_GetVoltageRange>
 80043e8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80043ea:	4b1e      	ldr	r3, [pc, #120]	; (8004464 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ee:	4a1d      	ldr	r2, [pc, #116]	; (8004464 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043f4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043fc:	d10b      	bne.n	8004416 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2b80      	cmp	r3, #128	; 0x80
 8004402:	d919      	bls.n	8004438 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2ba0      	cmp	r3, #160	; 0xa0
 8004408:	d902      	bls.n	8004410 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800440a:	2302      	movs	r3, #2
 800440c:	613b      	str	r3, [r7, #16]
 800440e:	e013      	b.n	8004438 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004410:	2301      	movs	r3, #1
 8004412:	613b      	str	r3, [r7, #16]
 8004414:	e010      	b.n	8004438 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2b80      	cmp	r3, #128	; 0x80
 800441a:	d902      	bls.n	8004422 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800441c:	2303      	movs	r3, #3
 800441e:	613b      	str	r3, [r7, #16]
 8004420:	e00a      	b.n	8004438 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2b80      	cmp	r3, #128	; 0x80
 8004426:	d102      	bne.n	800442e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004428:	2302      	movs	r3, #2
 800442a:	613b      	str	r3, [r7, #16]
 800442c:	e004      	b.n	8004438 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2b70      	cmp	r3, #112	; 0x70
 8004432:	d101      	bne.n	8004438 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004434:	2301      	movs	r3, #1
 8004436:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004438:	4b0b      	ldr	r3, [pc, #44]	; (8004468 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f023 0207 	bic.w	r2, r3, #7
 8004440:	4909      	ldr	r1, [pc, #36]	; (8004468 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	4313      	orrs	r3, r2
 8004446:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004448:	4b07      	ldr	r3, [pc, #28]	; (8004468 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 0307 	and.w	r3, r3, #7
 8004450:	693a      	ldr	r2, [r7, #16]
 8004452:	429a      	cmp	r2, r3
 8004454:	d001      	beq.n	800445a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e000      	b.n	800445c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800445a:	2300      	movs	r3, #0
}
 800445c:	4618      	mov	r0, r3
 800445e:	3718      	adds	r7, #24
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}
 8004464:	40021000 	.word	0x40021000
 8004468:	40022000 	.word	0x40022000

0800446c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b086      	sub	sp, #24
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004474:	2300      	movs	r3, #0
 8004476:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004478:	2300      	movs	r3, #0
 800447a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004484:	2b00      	cmp	r3, #0
 8004486:	d031      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800448c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004490:	d01a      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004492:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004496:	d814      	bhi.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004498:	2b00      	cmp	r3, #0
 800449a:	d009      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800449c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80044a0:	d10f      	bne.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80044a2:	4b5d      	ldr	r3, [pc, #372]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	4a5c      	ldr	r2, [pc, #368]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044ac:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80044ae:	e00c      	b.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	3304      	adds	r3, #4
 80044b4:	2100      	movs	r1, #0
 80044b6:	4618      	mov	r0, r3
 80044b8:	f000 fa22 	bl	8004900 <RCCEx_PLLSAI1_Config>
 80044bc:	4603      	mov	r3, r0
 80044be:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80044c0:	e003      	b.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	74fb      	strb	r3, [r7, #19]
      break;
 80044c6:	e000      	b.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80044c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044ca:	7cfb      	ldrb	r3, [r7, #19]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d10b      	bne.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80044d0:	4b51      	ldr	r3, [pc, #324]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044de:	494e      	ldr	r1, [pc, #312]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044e0:	4313      	orrs	r3, r2
 80044e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80044e6:	e001      	b.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044e8:	7cfb      	ldrb	r3, [r7, #19]
 80044ea:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	f000 809e 	beq.w	8004636 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044fa:	2300      	movs	r3, #0
 80044fc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80044fe:	4b46      	ldr	r3, [pc, #280]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d101      	bne.n	800450e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800450a:	2301      	movs	r3, #1
 800450c:	e000      	b.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800450e:	2300      	movs	r3, #0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d00d      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004514:	4b40      	ldr	r3, [pc, #256]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004518:	4a3f      	ldr	r2, [pc, #252]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800451a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800451e:	6593      	str	r3, [r2, #88]	; 0x58
 8004520:	4b3d      	ldr	r3, [pc, #244]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004524:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004528:	60bb      	str	r3, [r7, #8]
 800452a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800452c:	2301      	movs	r3, #1
 800452e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004530:	4b3a      	ldr	r3, [pc, #232]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a39      	ldr	r2, [pc, #228]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004536:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800453a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800453c:	f7fe f9a2 	bl	8002884 <HAL_GetTick>
 8004540:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004542:	e009      	b.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004544:	f7fe f99e 	bl	8002884 <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	2b02      	cmp	r3, #2
 8004550:	d902      	bls.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	74fb      	strb	r3, [r7, #19]
        break;
 8004556:	e005      	b.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004558:	4b30      	ldr	r3, [pc, #192]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004560:	2b00      	cmp	r3, #0
 8004562:	d0ef      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004564:	7cfb      	ldrb	r3, [r7, #19]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d15a      	bne.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800456a:	4b2b      	ldr	r3, [pc, #172]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800456c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004570:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004574:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d01e      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004580:	697a      	ldr	r2, [r7, #20]
 8004582:	429a      	cmp	r2, r3
 8004584:	d019      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004586:	4b24      	ldr	r3, [pc, #144]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004588:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800458c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004590:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004592:	4b21      	ldr	r3, [pc, #132]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004594:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004598:	4a1f      	ldr	r2, [pc, #124]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800459a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800459e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80045a2:	4b1d      	ldr	r3, [pc, #116]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045a8:	4a1b      	ldr	r2, [pc, #108]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80045b2:	4a19      	ldr	r2, [pc, #100]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	f003 0301 	and.w	r3, r3, #1
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d016      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c4:	f7fe f95e 	bl	8002884 <HAL_GetTick>
 80045c8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045ca:	e00b      	b.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045cc:	f7fe f95a 	bl	8002884 <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80045da:	4293      	cmp	r3, r2
 80045dc:	d902      	bls.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	74fb      	strb	r3, [r7, #19]
            break;
 80045e2:	e006      	b.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045e4:	4b0c      	ldr	r3, [pc, #48]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ea:	f003 0302 	and.w	r3, r3, #2
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d0ec      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80045f2:	7cfb      	ldrb	r3, [r7, #19]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d10b      	bne.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045f8:	4b07      	ldr	r3, [pc, #28]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004606:	4904      	ldr	r1, [pc, #16]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004608:	4313      	orrs	r3, r2
 800460a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800460e:	e009      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004610:	7cfb      	ldrb	r3, [r7, #19]
 8004612:	74bb      	strb	r3, [r7, #18]
 8004614:	e006      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004616:	bf00      	nop
 8004618:	40021000 	.word	0x40021000
 800461c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004620:	7cfb      	ldrb	r3, [r7, #19]
 8004622:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004624:	7c7b      	ldrb	r3, [r7, #17]
 8004626:	2b01      	cmp	r3, #1
 8004628:	d105      	bne.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800462a:	4b8d      	ldr	r3, [pc, #564]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800462c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800462e:	4a8c      	ldr	r2, [pc, #560]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004630:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004634:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0301 	and.w	r3, r3, #1
 800463e:	2b00      	cmp	r3, #0
 8004640:	d00a      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004642:	4b87      	ldr	r3, [pc, #540]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004648:	f023 0203 	bic.w	r2, r3, #3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a1b      	ldr	r3, [r3, #32]
 8004650:	4983      	ldr	r1, [pc, #524]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004652:	4313      	orrs	r3, r2
 8004654:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0302 	and.w	r3, r3, #2
 8004660:	2b00      	cmp	r3, #0
 8004662:	d00a      	beq.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004664:	4b7e      	ldr	r3, [pc, #504]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800466a:	f023 020c 	bic.w	r2, r3, #12
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004672:	497b      	ldr	r1, [pc, #492]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004674:	4313      	orrs	r3, r2
 8004676:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 0304 	and.w	r3, r3, #4
 8004682:	2b00      	cmp	r3, #0
 8004684:	d00a      	beq.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004686:	4b76      	ldr	r3, [pc, #472]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004688:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800468c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004694:	4972      	ldr	r1, [pc, #456]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004696:	4313      	orrs	r3, r2
 8004698:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0320 	and.w	r3, r3, #32
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d00a      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80046a8:	4b6d      	ldr	r3, [pc, #436]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80046aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b6:	496a      	ldr	r1, [pc, #424]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80046b8:	4313      	orrs	r3, r2
 80046ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00a      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80046ca:	4b65      	ldr	r3, [pc, #404]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80046cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046d0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046d8:	4961      	ldr	r1, [pc, #388]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80046da:	4313      	orrs	r3, r2
 80046dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d00a      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80046ec:	4b5c      	ldr	r3, [pc, #368]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80046ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fa:	4959      	ldr	r1, [pc, #356]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00a      	beq.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800470e:	4b54      	ldr	r3, [pc, #336]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004714:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800471c:	4950      	ldr	r1, [pc, #320]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800471e:	4313      	orrs	r3, r2
 8004720:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800472c:	2b00      	cmp	r3, #0
 800472e:	d00a      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004730:	4b4b      	ldr	r3, [pc, #300]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004736:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800473e:	4948      	ldr	r1, [pc, #288]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004740:	4313      	orrs	r3, r2
 8004742:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800474e:	2b00      	cmp	r3, #0
 8004750:	d00a      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004752:	4b43      	ldr	r3, [pc, #268]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004754:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004758:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004760:	493f      	ldr	r1, [pc, #252]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004762:	4313      	orrs	r3, r2
 8004764:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004770:	2b00      	cmp	r3, #0
 8004772:	d028      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004774:	4b3a      	ldr	r3, [pc, #232]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800477a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004782:	4937      	ldr	r1, [pc, #220]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004784:	4313      	orrs	r3, r2
 8004786:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800478e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004792:	d106      	bne.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004794:	4b32      	ldr	r3, [pc, #200]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	4a31      	ldr	r2, [pc, #196]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800479a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800479e:	60d3      	str	r3, [r2, #12]
 80047a0:	e011      	b.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047aa:	d10c      	bne.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	3304      	adds	r3, #4
 80047b0:	2101      	movs	r1, #1
 80047b2:	4618      	mov	r0, r3
 80047b4:	f000 f8a4 	bl	8004900 <RCCEx_PLLSAI1_Config>
 80047b8:	4603      	mov	r3, r0
 80047ba:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80047bc:	7cfb      	ldrb	r3, [r7, #19]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d001      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 80047c2:	7cfb      	ldrb	r3, [r7, #19]
 80047c4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d028      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80047d2:	4b23      	ldr	r3, [pc, #140]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80047d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047d8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047e0:	491f      	ldr	r1, [pc, #124]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80047e2:	4313      	orrs	r3, r2
 80047e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047f0:	d106      	bne.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047f2:	4b1b      	ldr	r3, [pc, #108]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	4a1a      	ldr	r2, [pc, #104]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80047f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047fc:	60d3      	str	r3, [r2, #12]
 80047fe:	e011      	b.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004804:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004808:	d10c      	bne.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	3304      	adds	r3, #4
 800480e:	2101      	movs	r1, #1
 8004810:	4618      	mov	r0, r3
 8004812:	f000 f875 	bl	8004900 <RCCEx_PLLSAI1_Config>
 8004816:	4603      	mov	r3, r0
 8004818:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800481a:	7cfb      	ldrb	r3, [r7, #19]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d001      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8004820:	7cfb      	ldrb	r3, [r7, #19]
 8004822:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800482c:	2b00      	cmp	r3, #0
 800482e:	d02b      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004830:	4b0b      	ldr	r3, [pc, #44]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004836:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800483e:	4908      	ldr	r1, [pc, #32]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004840:	4313      	orrs	r3, r2
 8004842:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800484a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800484e:	d109      	bne.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004850:	4b03      	ldr	r3, [pc, #12]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	4a02      	ldr	r2, [pc, #8]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004856:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800485a:	60d3      	str	r3, [r2, #12]
 800485c:	e014      	b.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800485e:	bf00      	nop
 8004860:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004868:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800486c:	d10c      	bne.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	3304      	adds	r3, #4
 8004872:	2101      	movs	r1, #1
 8004874:	4618      	mov	r0, r3
 8004876:	f000 f843 	bl	8004900 <RCCEx_PLLSAI1_Config>
 800487a:	4603      	mov	r3, r0
 800487c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800487e:	7cfb      	ldrb	r3, [r7, #19]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d001      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8004884:	7cfb      	ldrb	r3, [r7, #19]
 8004886:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004890:	2b00      	cmp	r3, #0
 8004892:	d01c      	beq.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004894:	4b19      	ldr	r3, [pc, #100]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800489a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048a2:	4916      	ldr	r1, [pc, #88]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048a4:	4313      	orrs	r3, r2
 80048a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048b2:	d10c      	bne.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	3304      	adds	r3, #4
 80048b8:	2102      	movs	r1, #2
 80048ba:	4618      	mov	r0, r3
 80048bc:	f000 f820 	bl	8004900 <RCCEx_PLLSAI1_Config>
 80048c0:	4603      	mov	r3, r0
 80048c2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048c4:	7cfb      	ldrb	r3, [r7, #19]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d001      	beq.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 80048ca:	7cfb      	ldrb	r3, [r7, #19]
 80048cc:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d00a      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80048da:	4b08      	ldr	r3, [pc, #32]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048e0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048e8:	4904      	ldr	r1, [pc, #16]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048ea:	4313      	orrs	r3, r2
 80048ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80048f0:	7cbb      	ldrb	r3, [r7, #18]
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3718      	adds	r7, #24
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	40021000 	.word	0x40021000

08004900 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800490a:	2300      	movs	r3, #0
 800490c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800490e:	4b74      	ldr	r3, [pc, #464]	; (8004ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	f003 0303 	and.w	r3, r3, #3
 8004916:	2b00      	cmp	r3, #0
 8004918:	d018      	beq.n	800494c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800491a:	4b71      	ldr	r3, [pc, #452]	; (8004ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	f003 0203 	and.w	r2, r3, #3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	429a      	cmp	r2, r3
 8004928:	d10d      	bne.n	8004946 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
       ||
 800492e:	2b00      	cmp	r3, #0
 8004930:	d009      	beq.n	8004946 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004932:	4b6b      	ldr	r3, [pc, #428]	; (8004ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	091b      	lsrs	r3, r3, #4
 8004938:	f003 0307 	and.w	r3, r3, #7
 800493c:	1c5a      	adds	r2, r3, #1
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685b      	ldr	r3, [r3, #4]
       ||
 8004942:	429a      	cmp	r2, r3
 8004944:	d047      	beq.n	80049d6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	73fb      	strb	r3, [r7, #15]
 800494a:	e044      	b.n	80049d6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2b03      	cmp	r3, #3
 8004952:	d018      	beq.n	8004986 <RCCEx_PLLSAI1_Config+0x86>
 8004954:	2b03      	cmp	r3, #3
 8004956:	d825      	bhi.n	80049a4 <RCCEx_PLLSAI1_Config+0xa4>
 8004958:	2b01      	cmp	r3, #1
 800495a:	d002      	beq.n	8004962 <RCCEx_PLLSAI1_Config+0x62>
 800495c:	2b02      	cmp	r3, #2
 800495e:	d009      	beq.n	8004974 <RCCEx_PLLSAI1_Config+0x74>
 8004960:	e020      	b.n	80049a4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004962:	4b5f      	ldr	r3, [pc, #380]	; (8004ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0302 	and.w	r3, r3, #2
 800496a:	2b00      	cmp	r3, #0
 800496c:	d11d      	bne.n	80049aa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004972:	e01a      	b.n	80049aa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004974:	4b5a      	ldr	r3, [pc, #360]	; (8004ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800497c:	2b00      	cmp	r3, #0
 800497e:	d116      	bne.n	80049ae <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004984:	e013      	b.n	80049ae <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004986:	4b56      	ldr	r3, [pc, #344]	; (8004ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d10f      	bne.n	80049b2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004992:	4b53      	ldr	r3, [pc, #332]	; (8004ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d109      	bne.n	80049b2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80049a2:	e006      	b.n	80049b2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	73fb      	strb	r3, [r7, #15]
      break;
 80049a8:	e004      	b.n	80049b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80049aa:	bf00      	nop
 80049ac:	e002      	b.n	80049b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80049ae:	bf00      	nop
 80049b0:	e000      	b.n	80049b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80049b2:	bf00      	nop
    }

    if(status == HAL_OK)
 80049b4:	7bfb      	ldrb	r3, [r7, #15]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d10d      	bne.n	80049d6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80049ba:	4b49      	ldr	r3, [pc, #292]	; (8004ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6819      	ldr	r1, [r3, #0]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	3b01      	subs	r3, #1
 80049cc:	011b      	lsls	r3, r3, #4
 80049ce:	430b      	orrs	r3, r1
 80049d0:	4943      	ldr	r1, [pc, #268]	; (8004ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049d2:	4313      	orrs	r3, r2
 80049d4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80049d6:	7bfb      	ldrb	r3, [r7, #15]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d17c      	bne.n	8004ad6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80049dc:	4b40      	ldr	r3, [pc, #256]	; (8004ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a3f      	ldr	r2, [pc, #252]	; (8004ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80049e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049e8:	f7fd ff4c 	bl	8002884 <HAL_GetTick>
 80049ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80049ee:	e009      	b.n	8004a04 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80049f0:	f7fd ff48 	bl	8002884 <HAL_GetTick>
 80049f4:	4602      	mov	r2, r0
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	d902      	bls.n	8004a04 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	73fb      	strb	r3, [r7, #15]
        break;
 8004a02:	e005      	b.n	8004a10 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a04:	4b36      	ldr	r3, [pc, #216]	; (8004ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d1ef      	bne.n	80049f0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004a10:	7bfb      	ldrb	r3, [r7, #15]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d15f      	bne.n	8004ad6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d110      	bne.n	8004a3e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a1c:	4b30      	ldr	r3, [pc, #192]	; (8004ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a1e:	691b      	ldr	r3, [r3, #16]
 8004a20:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004a24:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	6892      	ldr	r2, [r2, #8]
 8004a2c:	0211      	lsls	r1, r2, #8
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	68d2      	ldr	r2, [r2, #12]
 8004a32:	06d2      	lsls	r2, r2, #27
 8004a34:	430a      	orrs	r2, r1
 8004a36:	492a      	ldr	r1, [pc, #168]	; (8004ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	610b      	str	r3, [r1, #16]
 8004a3c:	e027      	b.n	8004a8e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d112      	bne.n	8004a6a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a44:	4b26      	ldr	r3, [pc, #152]	; (8004ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a46:	691b      	ldr	r3, [r3, #16]
 8004a48:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004a4c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	6892      	ldr	r2, [r2, #8]
 8004a54:	0211      	lsls	r1, r2, #8
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	6912      	ldr	r2, [r2, #16]
 8004a5a:	0852      	lsrs	r2, r2, #1
 8004a5c:	3a01      	subs	r2, #1
 8004a5e:	0552      	lsls	r2, r2, #21
 8004a60:	430a      	orrs	r2, r1
 8004a62:	491f      	ldr	r1, [pc, #124]	; (8004ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a64:	4313      	orrs	r3, r2
 8004a66:	610b      	str	r3, [r1, #16]
 8004a68:	e011      	b.n	8004a8e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a6a:	4b1d      	ldr	r3, [pc, #116]	; (8004ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004a72:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	6892      	ldr	r2, [r2, #8]
 8004a7a:	0211      	lsls	r1, r2, #8
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	6952      	ldr	r2, [r2, #20]
 8004a80:	0852      	lsrs	r2, r2, #1
 8004a82:	3a01      	subs	r2, #1
 8004a84:	0652      	lsls	r2, r2, #25
 8004a86:	430a      	orrs	r2, r1
 8004a88:	4915      	ldr	r1, [pc, #84]	; (8004ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004a8e:	4b14      	ldr	r3, [pc, #80]	; (8004ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a13      	ldr	r2, [pc, #76]	; (8004ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a94:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a98:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a9a:	f7fd fef3 	bl	8002884 <HAL_GetTick>
 8004a9e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004aa0:	e009      	b.n	8004ab6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004aa2:	f7fd feef 	bl	8002884 <HAL_GetTick>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	d902      	bls.n	8004ab6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	73fb      	strb	r3, [r7, #15]
          break;
 8004ab4:	e005      	b.n	8004ac2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ab6:	4b0a      	ldr	r3, [pc, #40]	; (8004ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d0ef      	beq.n	8004aa2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004ac2:	7bfb      	ldrb	r3, [r7, #15]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d106      	bne.n	8004ad6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004ac8:	4b05      	ldr	r3, [pc, #20]	; (8004ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004aca:	691a      	ldr	r2, [r3, #16]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	699b      	ldr	r3, [r3, #24]
 8004ad0:	4903      	ldr	r1, [pc, #12]	; (8004ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3710      	adds	r7, #16
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	40021000 	.word	0x40021000

08004ae4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d101      	bne.n	8004af6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e095      	b.n	8004c22 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d108      	bne.n	8004b10 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b06:	d009      	beq.n	8004b1c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	61da      	str	r2, [r3, #28]
 8004b0e:	e005      	b.n	8004b1c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d106      	bne.n	8004b3c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f7fd f840 	bl	8001bbc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2202      	movs	r2, #2
 8004b40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b52:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b5c:	d902      	bls.n	8004b64 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	60fb      	str	r3, [r7, #12]
 8004b62:	e002      	b.n	8004b6a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004b64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b68:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004b72:	d007      	beq.n	8004b84 <HAL_SPI_Init+0xa0>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b7c:	d002      	beq.n	8004b84 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004b94:	431a      	orrs	r2, r3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	f003 0302 	and.w	r3, r3, #2
 8004b9e:	431a      	orrs	r2, r3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	695b      	ldr	r3, [r3, #20]
 8004ba4:	f003 0301 	and.w	r3, r3, #1
 8004ba8:	431a      	orrs	r2, r3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	699b      	ldr	r3, [r3, #24]
 8004bae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bb2:	431a      	orrs	r2, r3
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	69db      	ldr	r3, [r3, #28]
 8004bb8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004bbc:	431a      	orrs	r2, r3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a1b      	ldr	r3, [r3, #32]
 8004bc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bc6:	ea42 0103 	orr.w	r1, r2, r3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bce:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	430a      	orrs	r2, r1
 8004bd8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	699b      	ldr	r3, [r3, #24]
 8004bde:	0c1b      	lsrs	r3, r3, #16
 8004be0:	f003 0204 	and.w	r2, r3, #4
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be8:	f003 0310 	and.w	r3, r3, #16
 8004bec:	431a      	orrs	r2, r3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bf2:	f003 0308 	and.w	r3, r3, #8
 8004bf6:	431a      	orrs	r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004c00:	ea42 0103 	orr.w	r1, r2, r3
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	430a      	orrs	r2, r1
 8004c10:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3710      	adds	r7, #16
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}

08004c2a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c2a:	b580      	push	{r7, lr}
 8004c2c:	b088      	sub	sp, #32
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	60f8      	str	r0, [r7, #12]
 8004c32:	60b9      	str	r1, [r7, #8]
 8004c34:	603b      	str	r3, [r7, #0]
 8004c36:	4613      	mov	r3, r2
 8004c38:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d101      	bne.n	8004c4c <HAL_SPI_Transmit+0x22>
 8004c48:	2302      	movs	r3, #2
 8004c4a:	e158      	b.n	8004efe <HAL_SPI_Transmit+0x2d4>
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c54:	f7fd fe16 	bl	8002884 <HAL_GetTick>
 8004c58:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004c5a:	88fb      	ldrh	r3, [r7, #6]
 8004c5c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d002      	beq.n	8004c70 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004c6a:	2302      	movs	r3, #2
 8004c6c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c6e:	e13d      	b.n	8004eec <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d002      	beq.n	8004c7c <HAL_SPI_Transmit+0x52>
 8004c76:	88fb      	ldrh	r3, [r7, #6]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d102      	bne.n	8004c82 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c80:	e134      	b.n	8004eec <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2203      	movs	r2, #3
 8004c86:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	68ba      	ldr	r2, [r7, #8]
 8004c94:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	88fa      	ldrh	r2, [r7, #6]
 8004c9a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	88fa      	ldrh	r2, [r7, #6]
 8004ca0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ccc:	d10f      	bne.n	8004cee <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cdc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004cec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cf8:	2b40      	cmp	r3, #64	; 0x40
 8004cfa:	d007      	beq.n	8004d0c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d0a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d14:	d94b      	bls.n	8004dae <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d002      	beq.n	8004d24 <HAL_SPI_Transmit+0xfa>
 8004d1e:	8afb      	ldrh	r3, [r7, #22]
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d13e      	bne.n	8004da2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d28:	881a      	ldrh	r2, [r3, #0]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d34:	1c9a      	adds	r2, r3, #2
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	3b01      	subs	r3, #1
 8004d42:	b29a      	uxth	r2, r3
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004d48:	e02b      	b.n	8004da2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	f003 0302 	and.w	r3, r3, #2
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d112      	bne.n	8004d7e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5c:	881a      	ldrh	r2, [r3, #0]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d68:	1c9a      	adds	r2, r3, #2
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	3b01      	subs	r3, #1
 8004d76:	b29a      	uxth	r2, r3
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d7c:	e011      	b.n	8004da2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d7e:	f7fd fd81 	bl	8002884 <HAL_GetTick>
 8004d82:	4602      	mov	r2, r0
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	683a      	ldr	r2, [r7, #0]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d803      	bhi.n	8004d96 <HAL_SPI_Transmit+0x16c>
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d94:	d102      	bne.n	8004d9c <HAL_SPI_Transmit+0x172>
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d102      	bne.n	8004da2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004d9c:	2303      	movs	r3, #3
 8004d9e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004da0:	e0a4      	b.n	8004eec <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d1ce      	bne.n	8004d4a <HAL_SPI_Transmit+0x120>
 8004dac:	e07c      	b.n	8004ea8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d002      	beq.n	8004dbc <HAL_SPI_Transmit+0x192>
 8004db6:	8afb      	ldrh	r3, [r7, #22]
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d170      	bne.n	8004e9e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d912      	bls.n	8004dec <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dca:	881a      	ldrh	r2, [r3, #0]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd6:	1c9a      	adds	r2, r3, #2
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	3b02      	subs	r3, #2
 8004de4:	b29a      	uxth	r2, r3
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004dea:	e058      	b.n	8004e9e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	330c      	adds	r3, #12
 8004df6:	7812      	ldrb	r2, [r2, #0]
 8004df8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dfe:	1c5a      	adds	r2, r3, #1
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	3b01      	subs	r3, #1
 8004e0c:	b29a      	uxth	r2, r3
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004e12:	e044      	b.n	8004e9e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	f003 0302 	and.w	r3, r3, #2
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d12b      	bne.n	8004e7a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d912      	bls.n	8004e52 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e30:	881a      	ldrh	r2, [r3, #0]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e3c:	1c9a      	adds	r2, r3, #2
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	3b02      	subs	r3, #2
 8004e4a:	b29a      	uxth	r2, r3
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e50:	e025      	b.n	8004e9e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	330c      	adds	r3, #12
 8004e5c:	7812      	ldrb	r2, [r2, #0]
 8004e5e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e64:	1c5a      	adds	r2, r3, #1
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	3b01      	subs	r3, #1
 8004e72:	b29a      	uxth	r2, r3
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e78:	e011      	b.n	8004e9e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e7a:	f7fd fd03 	bl	8002884 <HAL_GetTick>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	1ad3      	subs	r3, r2, r3
 8004e84:	683a      	ldr	r2, [r7, #0]
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d803      	bhi.n	8004e92 <HAL_SPI_Transmit+0x268>
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e90:	d102      	bne.n	8004e98 <HAL_SPI_Transmit+0x26e>
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d102      	bne.n	8004e9e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004e9c:	e026      	b.n	8004eec <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d1b5      	bne.n	8004e14 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ea8:	69ba      	ldr	r2, [r7, #24]
 8004eaa:	6839      	ldr	r1, [r7, #0]
 8004eac:	68f8      	ldr	r0, [r7, #12]
 8004eae:	f000 f945 	bl	800513c <SPI_EndRxTxTransaction>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d002      	beq.n	8004ebe <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2220      	movs	r2, #32
 8004ebc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d10a      	bne.n	8004edc <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	613b      	str	r3, [r7, #16]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	613b      	str	r3, [r7, #16]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	613b      	str	r3, [r7, #16]
 8004eda:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d002      	beq.n	8004eea <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	77fb      	strb	r3, [r7, #31]
 8004ee8:	e000      	b.n	8004eec <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004eea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004efc:	7ffb      	ldrb	r3, [r7, #31]
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3720      	adds	r7, #32
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
	...

08004f08 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b088      	sub	sp, #32
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	60b9      	str	r1, [r7, #8]
 8004f12:	603b      	str	r3, [r7, #0]
 8004f14:	4613      	mov	r3, r2
 8004f16:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004f18:	f7fd fcb4 	bl	8002884 <HAL_GetTick>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f20:	1a9b      	subs	r3, r3, r2
 8004f22:	683a      	ldr	r2, [r7, #0]
 8004f24:	4413      	add	r3, r2
 8004f26:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004f28:	f7fd fcac 	bl	8002884 <HAL_GetTick>
 8004f2c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004f2e:	4b39      	ldr	r3, [pc, #228]	; (8005014 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	015b      	lsls	r3, r3, #5
 8004f34:	0d1b      	lsrs	r3, r3, #20
 8004f36:	69fa      	ldr	r2, [r7, #28]
 8004f38:	fb02 f303 	mul.w	r3, r2, r3
 8004f3c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f3e:	e054      	b.n	8004fea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f46:	d050      	beq.n	8004fea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f48:	f7fd fc9c 	bl	8002884 <HAL_GetTick>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	69bb      	ldr	r3, [r7, #24]
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	69fa      	ldr	r2, [r7, #28]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d902      	bls.n	8004f5e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004f58:	69fb      	ldr	r3, [r7, #28]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d13d      	bne.n	8004fda <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	685a      	ldr	r2, [r3, #4]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f6c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f76:	d111      	bne.n	8004f9c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f80:	d004      	beq.n	8004f8c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f8a:	d107      	bne.n	8004f9c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f9a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fa4:	d10f      	bne.n	8004fc6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004fb4:	601a      	str	r2, [r3, #0]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fc4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2201      	movs	r2, #1
 8004fca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e017      	b.n	800500a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d101      	bne.n	8004fe4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	3b01      	subs	r3, #1
 8004fe8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	689a      	ldr	r2, [r3, #8]
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	68ba      	ldr	r2, [r7, #8]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	bf0c      	ite	eq
 8004ffa:	2301      	moveq	r3, #1
 8004ffc:	2300      	movne	r3, #0
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	461a      	mov	r2, r3
 8005002:	79fb      	ldrb	r3, [r7, #7]
 8005004:	429a      	cmp	r2, r3
 8005006:	d19b      	bne.n	8004f40 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005008:	2300      	movs	r3, #0
}
 800500a:	4618      	mov	r0, r3
 800500c:	3720      	adds	r7, #32
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop
 8005014:	20000018 	.word	0x20000018

08005018 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b088      	sub	sp, #32
 800501c:	af00      	add	r7, sp, #0
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	60b9      	str	r1, [r7, #8]
 8005022:	607a      	str	r2, [r7, #4]
 8005024:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005026:	f7fd fc2d 	bl	8002884 <HAL_GetTick>
 800502a:	4602      	mov	r2, r0
 800502c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800502e:	1a9b      	subs	r3, r3, r2
 8005030:	683a      	ldr	r2, [r7, #0]
 8005032:	4413      	add	r3, r2
 8005034:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005036:	f7fd fc25 	bl	8002884 <HAL_GetTick>
 800503a:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800503c:	4b3e      	ldr	r3, [pc, #248]	; (8005138 <SPI_WaitFifoStateUntilTimeout+0x120>)
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	4613      	mov	r3, r2
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	4413      	add	r3, r2
 8005046:	00da      	lsls	r2, r3, #3
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	0d1b      	lsrs	r3, r3, #20
 800504c:	69fa      	ldr	r2, [r7, #28]
 800504e:	fb02 f303 	mul.w	r3, r2, r3
 8005052:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8005054:	e062      	b.n	800511c <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800505c:	d109      	bne.n	8005072 <SPI_WaitFifoStateUntilTimeout+0x5a>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d106      	bne.n	8005072 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	330c      	adds	r3, #12
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	b2db      	uxtb	r3, r3
 800506e:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8005070:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005078:	d050      	beq.n	800511c <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800507a:	f7fd fc03 	bl	8002884 <HAL_GetTick>
 800507e:	4602      	mov	r2, r0
 8005080:	69bb      	ldr	r3, [r7, #24]
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	69fa      	ldr	r2, [r7, #28]
 8005086:	429a      	cmp	r2, r3
 8005088:	d902      	bls.n	8005090 <SPI_WaitFifoStateUntilTimeout+0x78>
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d13d      	bne.n	800510c <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	685a      	ldr	r2, [r3, #4]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800509e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050a8:	d111      	bne.n	80050ce <SPI_WaitFifoStateUntilTimeout+0xb6>
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050b2:	d004      	beq.n	80050be <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050bc:	d107      	bne.n	80050ce <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050cc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050d6:	d10f      	bne.n	80050f8 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050e6:	601a      	str	r2, [r3, #0]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050f6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2200      	movs	r2, #0
 8005104:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005108:	2303      	movs	r3, #3
 800510a:	e010      	b.n	800512e <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d101      	bne.n	8005116 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8005112:	2300      	movs	r3, #0
 8005114:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	3b01      	subs	r3, #1
 800511a:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	689a      	ldr	r2, [r3, #8]
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	4013      	ands	r3, r2
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	429a      	cmp	r2, r3
 800512a:	d194      	bne.n	8005056 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800512c:	2300      	movs	r3, #0
}
 800512e:	4618      	mov	r0, r3
 8005130:	3720      	adds	r7, #32
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
 8005136:	bf00      	nop
 8005138:	20000018 	.word	0x20000018

0800513c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b086      	sub	sp, #24
 8005140:	af02      	add	r7, sp, #8
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	60b9      	str	r1, [r7, #8]
 8005146:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	9300      	str	r3, [sp, #0]
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	2200      	movs	r2, #0
 8005150:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005154:	68f8      	ldr	r0, [r7, #12]
 8005156:	f7ff ff5f 	bl	8005018 <SPI_WaitFifoStateUntilTimeout>
 800515a:	4603      	mov	r3, r0
 800515c:	2b00      	cmp	r3, #0
 800515e:	d007      	beq.n	8005170 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005164:	f043 0220 	orr.w	r2, r3, #32
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800516c:	2303      	movs	r3, #3
 800516e:	e027      	b.n	80051c0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	9300      	str	r3, [sp, #0]
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	2200      	movs	r2, #0
 8005178:	2180      	movs	r1, #128	; 0x80
 800517a:	68f8      	ldr	r0, [r7, #12]
 800517c:	f7ff fec4 	bl	8004f08 <SPI_WaitFlagStateUntilTimeout>
 8005180:	4603      	mov	r3, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d007      	beq.n	8005196 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800518a:	f043 0220 	orr.w	r2, r3, #32
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	e014      	b.n	80051c0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	9300      	str	r3, [sp, #0]
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	2200      	movs	r2, #0
 800519e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80051a2:	68f8      	ldr	r0, [r7, #12]
 80051a4:	f7ff ff38 	bl	8005018 <SPI_WaitFifoStateUntilTimeout>
 80051a8:	4603      	mov	r3, r0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d007      	beq.n	80051be <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051b2:	f043 0220 	orr.w	r2, r3, #32
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80051ba:	2303      	movs	r3, #3
 80051bc:	e000      	b.n	80051c0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80051be:	2300      	movs	r3, #0
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3710      	adds	r7, #16
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b082      	sub	sp, #8
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d101      	bne.n	80051da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e049      	b.n	800526e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d106      	bne.n	80051f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 f841 	bl	8005276 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2202      	movs	r2, #2
 80051f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	3304      	adds	r3, #4
 8005204:	4619      	mov	r1, r3
 8005206:	4610      	mov	r0, r2
 8005208:	f000 f9dc 	bl	80055c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800526c:	2300      	movs	r3, #0
}
 800526e:	4618      	mov	r0, r3
 8005270:	3708      	adds	r7, #8
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}

08005276 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005276:	b480      	push	{r7}
 8005278:	b083      	sub	sp, #12
 800527a:	af00      	add	r7, sp, #0
 800527c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800527e:	bf00      	nop
 8005280:	370c      	adds	r7, #12
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr
	...

0800528c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800528c:	b480      	push	{r7}
 800528e:	b085      	sub	sp, #20
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800529a:	b2db      	uxtb	r3, r3
 800529c:	2b01      	cmp	r3, #1
 800529e:	d001      	beq.n	80052a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	e03b      	b.n	800531c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2202      	movs	r2, #2
 80052a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	68da      	ldr	r2, [r3, #12]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f042 0201 	orr.w	r2, r2, #1
 80052ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a19      	ldr	r2, [pc, #100]	; (8005328 <HAL_TIM_Base_Start_IT+0x9c>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d009      	beq.n	80052da <HAL_TIM_Base_Start_IT+0x4e>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052ce:	d004      	beq.n	80052da <HAL_TIM_Base_Start_IT+0x4e>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a15      	ldr	r2, [pc, #84]	; (800532c <HAL_TIM_Base_Start_IT+0xa0>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d115      	bne.n	8005306 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	689a      	ldr	r2, [r3, #8]
 80052e0:	4b13      	ldr	r3, [pc, #76]	; (8005330 <HAL_TIM_Base_Start_IT+0xa4>)
 80052e2:	4013      	ands	r3, r2
 80052e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2b06      	cmp	r3, #6
 80052ea:	d015      	beq.n	8005318 <HAL_TIM_Base_Start_IT+0x8c>
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052f2:	d011      	beq.n	8005318 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f042 0201 	orr.w	r2, r2, #1
 8005302:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005304:	e008      	b.n	8005318 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f042 0201 	orr.w	r2, r2, #1
 8005314:	601a      	str	r2, [r3, #0]
 8005316:	e000      	b.n	800531a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005318:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800531a:	2300      	movs	r3, #0
}
 800531c:	4618      	mov	r0, r3
 800531e:	3714      	adds	r7, #20
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr
 8005328:	40012c00 	.word	0x40012c00
 800532c:	40014000 	.word	0x40014000
 8005330:	00010007 	.word	0x00010007

08005334 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b082      	sub	sp, #8
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	f003 0302 	and.w	r3, r3, #2
 8005346:	2b02      	cmp	r3, #2
 8005348:	d122      	bne.n	8005390 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	f003 0302 	and.w	r3, r3, #2
 8005354:	2b02      	cmp	r3, #2
 8005356:	d11b      	bne.n	8005390 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f06f 0202 	mvn.w	r2, #2
 8005360:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2201      	movs	r2, #1
 8005366:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	699b      	ldr	r3, [r3, #24]
 800536e:	f003 0303 	and.w	r3, r3, #3
 8005372:	2b00      	cmp	r3, #0
 8005374:	d003      	beq.n	800537e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 f905 	bl	8005586 <HAL_TIM_IC_CaptureCallback>
 800537c:	e005      	b.n	800538a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 f8f7 	bl	8005572 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f000 f908 	bl	800559a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	f003 0304 	and.w	r3, r3, #4
 800539a:	2b04      	cmp	r3, #4
 800539c:	d122      	bne.n	80053e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	f003 0304 	and.w	r3, r3, #4
 80053a8:	2b04      	cmp	r3, #4
 80053aa:	d11b      	bne.n	80053e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f06f 0204 	mvn.w	r2, #4
 80053b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2202      	movs	r2, #2
 80053ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	699b      	ldr	r3, [r3, #24]
 80053c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d003      	beq.n	80053d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 f8db 	bl	8005586 <HAL_TIM_IC_CaptureCallback>
 80053d0:	e005      	b.n	80053de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 f8cd 	bl	8005572 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f000 f8de 	bl	800559a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	f003 0308 	and.w	r3, r3, #8
 80053ee:	2b08      	cmp	r3, #8
 80053f0:	d122      	bne.n	8005438 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	f003 0308 	and.w	r3, r3, #8
 80053fc:	2b08      	cmp	r3, #8
 80053fe:	d11b      	bne.n	8005438 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f06f 0208 	mvn.w	r2, #8
 8005408:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2204      	movs	r2, #4
 800540e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	69db      	ldr	r3, [r3, #28]
 8005416:	f003 0303 	and.w	r3, r3, #3
 800541a:	2b00      	cmp	r3, #0
 800541c:	d003      	beq.n	8005426 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f000 f8b1 	bl	8005586 <HAL_TIM_IC_CaptureCallback>
 8005424:	e005      	b.n	8005432 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 f8a3 	bl	8005572 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f000 f8b4 	bl	800559a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	f003 0310 	and.w	r3, r3, #16
 8005442:	2b10      	cmp	r3, #16
 8005444:	d122      	bne.n	800548c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	f003 0310 	and.w	r3, r3, #16
 8005450:	2b10      	cmp	r3, #16
 8005452:	d11b      	bne.n	800548c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f06f 0210 	mvn.w	r2, #16
 800545c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2208      	movs	r2, #8
 8005462:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	69db      	ldr	r3, [r3, #28]
 800546a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800546e:	2b00      	cmp	r3, #0
 8005470:	d003      	beq.n	800547a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 f887 	bl	8005586 <HAL_TIM_IC_CaptureCallback>
 8005478:	e005      	b.n	8005486 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 f879 	bl	8005572 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f000 f88a 	bl	800559a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	f003 0301 	and.w	r3, r3, #1
 8005496:	2b01      	cmp	r3, #1
 8005498:	d10e      	bne.n	80054b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	f003 0301 	and.w	r3, r3, #1
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d107      	bne.n	80054b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f06f 0201 	mvn.w	r2, #1
 80054b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f7fb fd8c 	bl	8000fd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	691b      	ldr	r3, [r3, #16]
 80054be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054c2:	2b80      	cmp	r3, #128	; 0x80
 80054c4:	d10e      	bne.n	80054e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054d0:	2b80      	cmp	r3, #128	; 0x80
 80054d2:	d107      	bne.n	80054e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80054dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 f8de 	bl	80056a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054f2:	d10e      	bne.n	8005512 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	68db      	ldr	r3, [r3, #12]
 80054fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054fe:	2b80      	cmp	r3, #128	; 0x80
 8005500:	d107      	bne.n	8005512 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800550a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f000 f8d1 	bl	80056b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	691b      	ldr	r3, [r3, #16]
 8005518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800551c:	2b40      	cmp	r3, #64	; 0x40
 800551e:	d10e      	bne.n	800553e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800552a:	2b40      	cmp	r3, #64	; 0x40
 800552c:	d107      	bne.n	800553e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005536:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f000 f838 	bl	80055ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	691b      	ldr	r3, [r3, #16]
 8005544:	f003 0320 	and.w	r3, r3, #32
 8005548:	2b20      	cmp	r3, #32
 800554a:	d10e      	bne.n	800556a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	f003 0320 	and.w	r3, r3, #32
 8005556:	2b20      	cmp	r3, #32
 8005558:	d107      	bne.n	800556a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f06f 0220 	mvn.w	r2, #32
 8005562:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f000 f891 	bl	800568c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800556a:	bf00      	nop
 800556c:	3708      	adds	r7, #8
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}

08005572 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005572:	b480      	push	{r7}
 8005574:	b083      	sub	sp, #12
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800557a:	bf00      	nop
 800557c:	370c      	adds	r7, #12
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr

08005586 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005586:	b480      	push	{r7}
 8005588:	b083      	sub	sp, #12
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800558e:	bf00      	nop
 8005590:	370c      	adds	r7, #12
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr

0800559a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800559a:	b480      	push	{r7}
 800559c:	b083      	sub	sp, #12
 800559e:	af00      	add	r7, sp, #0
 80055a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80055a2:	bf00      	nop
 80055a4:	370c      	adds	r7, #12
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr

080055ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80055ae:	b480      	push	{r7}
 80055b0:	b083      	sub	sp, #12
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80055b6:	bf00      	nop
 80055b8:	370c      	adds	r7, #12
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr
	...

080055c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b085      	sub	sp, #20
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	4a2a      	ldr	r2, [pc, #168]	; (8005680 <TIM_Base_SetConfig+0xbc>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d003      	beq.n	80055e4 <TIM_Base_SetConfig+0x20>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055e2:	d108      	bne.n	80055f6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	68fa      	ldr	r2, [r7, #12]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a21      	ldr	r2, [pc, #132]	; (8005680 <TIM_Base_SetConfig+0xbc>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d00b      	beq.n	8005616 <TIM_Base_SetConfig+0x52>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005604:	d007      	beq.n	8005616 <TIM_Base_SetConfig+0x52>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4a1e      	ldr	r2, [pc, #120]	; (8005684 <TIM_Base_SetConfig+0xc0>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d003      	beq.n	8005616 <TIM_Base_SetConfig+0x52>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a1d      	ldr	r2, [pc, #116]	; (8005688 <TIM_Base_SetConfig+0xc4>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d108      	bne.n	8005628 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800561c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	68fa      	ldr	r2, [r7, #12]
 8005624:	4313      	orrs	r3, r2
 8005626:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	695b      	ldr	r3, [r3, #20]
 8005632:	4313      	orrs	r3, r2
 8005634:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	68fa      	ldr	r2, [r7, #12]
 800563a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	689a      	ldr	r2, [r3, #8]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	4a0c      	ldr	r2, [pc, #48]	; (8005680 <TIM_Base_SetConfig+0xbc>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d007      	beq.n	8005664 <TIM_Base_SetConfig+0xa0>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4a0b      	ldr	r2, [pc, #44]	; (8005684 <TIM_Base_SetConfig+0xc0>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d003      	beq.n	8005664 <TIM_Base_SetConfig+0xa0>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4a0a      	ldr	r2, [pc, #40]	; (8005688 <TIM_Base_SetConfig+0xc4>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d103      	bne.n	800566c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	691a      	ldr	r2, [r3, #16]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	615a      	str	r2, [r3, #20]
}
 8005672:	bf00      	nop
 8005674:	3714      	adds	r7, #20
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr
 800567e:	bf00      	nop
 8005680:	40012c00 	.word	0x40012c00
 8005684:	40014000 	.word	0x40014000
 8005688:	40014400 	.word	0x40014400

0800568c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800568c:	b480      	push	{r7}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005694:	bf00      	nop
 8005696:	370c      	adds	r7, #12
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056a8:	bf00      	nop
 80056aa:	370c      	adds	r7, #12
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b083      	sub	sp, #12
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80056bc:	bf00      	nop
 80056be:	370c      	adds	r7, #12
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b082      	sub	sp, #8
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d101      	bne.n	80056da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	e040      	b.n	800575c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d106      	bne.n	80056f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f7fc fac8 	bl	8001c80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2224      	movs	r2, #36	; 0x24
 80056f4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f022 0201 	bic.w	r2, r2, #1
 8005704:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f000 f924 	bl	8005954 <UART_SetConfig>
 800570c:	4603      	mov	r3, r0
 800570e:	2b01      	cmp	r3, #1
 8005710:	d101      	bne.n	8005716 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e022      	b.n	800575c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800571a:	2b00      	cmp	r3, #0
 800571c:	d002      	beq.n	8005724 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 fb74 	bl	8005e0c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	685a      	ldr	r2, [r3, #4]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005732:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	689a      	ldr	r2, [r3, #8]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005742:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f042 0201 	orr.w	r2, r2, #1
 8005752:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f000 fbfb 	bl	8005f50 <UART_CheckIdleState>
 800575a:	4603      	mov	r3, r0
}
 800575c:	4618      	mov	r0, r3
 800575e:	3708      	adds	r7, #8
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b08a      	sub	sp, #40	; 0x28
 8005768:	af02      	add	r7, sp, #8
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	60b9      	str	r1, [r7, #8]
 800576e:	603b      	str	r3, [r7, #0]
 8005770:	4613      	mov	r3, r2
 8005772:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005778:	2b20      	cmp	r3, #32
 800577a:	f040 8082 	bne.w	8005882 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d002      	beq.n	800578a <HAL_UART_Transmit+0x26>
 8005784:	88fb      	ldrh	r3, [r7, #6]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d101      	bne.n	800578e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	e07a      	b.n	8005884 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005794:	2b01      	cmp	r3, #1
 8005796:	d101      	bne.n	800579c <HAL_UART_Transmit+0x38>
 8005798:	2302      	movs	r3, #2
 800579a:	e073      	b.n	8005884 <HAL_UART_Transmit+0x120>
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2200      	movs	r2, #0
 80057a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2221      	movs	r2, #33	; 0x21
 80057b0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80057b2:	f7fd f867 	bl	8002884 <HAL_GetTick>
 80057b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	88fa      	ldrh	r2, [r7, #6]
 80057bc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	88fa      	ldrh	r2, [r7, #6]
 80057c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057d0:	d108      	bne.n	80057e4 <HAL_UART_Transmit+0x80>
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d104      	bne.n	80057e4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80057da:	2300      	movs	r3, #0
 80057dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	61bb      	str	r3, [r7, #24]
 80057e2:	e003      	b.n	80057ec <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80057e8:	2300      	movs	r3, #0
 80057ea:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2200      	movs	r2, #0
 80057f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80057f4:	e02d      	b.n	8005852 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	9300      	str	r3, [sp, #0]
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	2200      	movs	r2, #0
 80057fe:	2180      	movs	r1, #128	; 0x80
 8005800:	68f8      	ldr	r0, [r7, #12]
 8005802:	f000 fbee 	bl	8005fe2 <UART_WaitOnFlagUntilTimeout>
 8005806:	4603      	mov	r3, r0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d001      	beq.n	8005810 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800580c:	2303      	movs	r3, #3
 800580e:	e039      	b.n	8005884 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d10b      	bne.n	800582e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005816:	69bb      	ldr	r3, [r7, #24]
 8005818:	881a      	ldrh	r2, [r3, #0]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005822:	b292      	uxth	r2, r2
 8005824:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005826:	69bb      	ldr	r3, [r7, #24]
 8005828:	3302      	adds	r3, #2
 800582a:	61bb      	str	r3, [r7, #24]
 800582c:	e008      	b.n	8005840 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800582e:	69fb      	ldr	r3, [r7, #28]
 8005830:	781a      	ldrb	r2, [r3, #0]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	b292      	uxth	r2, r2
 8005838:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	3301      	adds	r3, #1
 800583e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005846:	b29b      	uxth	r3, r3
 8005848:	3b01      	subs	r3, #1
 800584a:	b29a      	uxth	r2, r3
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005858:	b29b      	uxth	r3, r3
 800585a:	2b00      	cmp	r3, #0
 800585c:	d1cb      	bne.n	80057f6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	9300      	str	r3, [sp, #0]
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	2200      	movs	r2, #0
 8005866:	2140      	movs	r1, #64	; 0x40
 8005868:	68f8      	ldr	r0, [r7, #12]
 800586a:	f000 fbba 	bl	8005fe2 <UART_WaitOnFlagUntilTimeout>
 800586e:	4603      	mov	r3, r0
 8005870:	2b00      	cmp	r3, #0
 8005872:	d001      	beq.n	8005878 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005874:	2303      	movs	r3, #3
 8005876:	e005      	b.n	8005884 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2220      	movs	r2, #32
 800587c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800587e:	2300      	movs	r3, #0
 8005880:	e000      	b.n	8005884 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005882:	2302      	movs	r3, #2
  }
}
 8005884:	4618      	mov	r0, r3
 8005886:	3720      	adds	r7, #32
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}

0800588c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	60f8      	str	r0, [r7, #12]
 8005894:	60b9      	str	r1, [r7, #8]
 8005896:	4613      	mov	r3, r2
 8005898:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800589e:	2b20      	cmp	r3, #32
 80058a0:	d131      	bne.n	8005906 <HAL_UART_Receive_DMA+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d002      	beq.n	80058ae <HAL_UART_Receive_DMA+0x22>
 80058a8:	88fb      	ldrh	r3, [r7, #6]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d101      	bne.n	80058b2 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	e02a      	b.n	8005908 <HAL_UART_Receive_DMA+0x7c>
    }

    __HAL_LOCK(huart);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d101      	bne.n	80058c0 <HAL_UART_Receive_DMA+0x34>
 80058bc:	2302      	movs	r3, #2
 80058be:	e023      	b.n	8005908 <HAL_UART_Receive_DMA+0x7c>
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2200      	movs	r2, #0
 80058cc:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a0f      	ldr	r2, [pc, #60]	; (8005910 <HAL_UART_Receive_DMA+0x84>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d00e      	beq.n	80058f6 <HAL_UART_Receive_DMA+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d007      	beq.n	80058f6 <HAL_UART_Receive_DMA+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80058f4:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_DMA(huart, pData, Size));
 80058f6:	88fb      	ldrh	r3, [r7, #6]
 80058f8:	461a      	mov	r2, r3
 80058fa:	68b9      	ldr	r1, [r7, #8]
 80058fc:	68f8      	ldr	r0, [r7, #12]
 80058fe:	f000 fbed 	bl	80060dc <UART_Start_Receive_DMA>
 8005902:	4603      	mov	r3, r0
 8005904:	e000      	b.n	8005908 <HAL_UART_Receive_DMA+0x7c>
  }
  else
  {
    return HAL_BUSY;
 8005906:	2302      	movs	r3, #2
  }
}
 8005908:	4618      	mov	r0, r3
 800590a:	3710      	adds	r7, #16
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}
 8005910:	40008000 	.word	0x40008000

08005914 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800591c:	bf00      	nop
 800591e:	370c      	adds	r7, #12
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr

08005928 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005928:	b480      	push	{r7}
 800592a:	b083      	sub	sp, #12
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005930:	bf00      	nop
 8005932:	370c      	adds	r7, #12
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr

0800593c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	460b      	mov	r3, r1
 8005946:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005948:	bf00      	nop
 800594a:	370c      	adds	r7, #12
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr

08005954 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005954:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005958:	b08a      	sub	sp, #40	; 0x28
 800595a:	af00      	add	r7, sp, #0
 800595c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800595e:	2300      	movs	r3, #0
 8005960:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	689a      	ldr	r2, [r3, #8]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	691b      	ldr	r3, [r3, #16]
 800596c:	431a      	orrs	r2, r3
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	695b      	ldr	r3, [r3, #20]
 8005972:	431a      	orrs	r2, r3
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	69db      	ldr	r3, [r3, #28]
 8005978:	4313      	orrs	r3, r2
 800597a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	4b9e      	ldr	r3, [pc, #632]	; (8005bfc <UART_SetConfig+0x2a8>)
 8005984:	4013      	ands	r3, r2
 8005986:	68fa      	ldr	r2, [r7, #12]
 8005988:	6812      	ldr	r2, [r2, #0]
 800598a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800598c:	430b      	orrs	r3, r1
 800598e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	68da      	ldr	r2, [r3, #12]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	430a      	orrs	r2, r1
 80059a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	699b      	ldr	r3, [r3, #24]
 80059aa:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a93      	ldr	r2, [pc, #588]	; (8005c00 <UART_SetConfig+0x2ac>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d004      	beq.n	80059c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	6a1b      	ldr	r3, [r3, #32]
 80059ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059bc:	4313      	orrs	r3, r2
 80059be:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059d0:	430a      	orrs	r2, r1
 80059d2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a8a      	ldr	r2, [pc, #552]	; (8005c04 <UART_SetConfig+0x2b0>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d126      	bne.n	8005a2c <UART_SetConfig+0xd8>
 80059de:	4b8a      	ldr	r3, [pc, #552]	; (8005c08 <UART_SetConfig+0x2b4>)
 80059e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059e4:	f003 0303 	and.w	r3, r3, #3
 80059e8:	2b03      	cmp	r3, #3
 80059ea:	d81b      	bhi.n	8005a24 <UART_SetConfig+0xd0>
 80059ec:	a201      	add	r2, pc, #4	; (adr r2, 80059f4 <UART_SetConfig+0xa0>)
 80059ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f2:	bf00      	nop
 80059f4:	08005a05 	.word	0x08005a05
 80059f8:	08005a15 	.word	0x08005a15
 80059fc:	08005a0d 	.word	0x08005a0d
 8005a00:	08005a1d 	.word	0x08005a1d
 8005a04:	2301      	movs	r3, #1
 8005a06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a0a:	e0ab      	b.n	8005b64 <UART_SetConfig+0x210>
 8005a0c:	2302      	movs	r3, #2
 8005a0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a12:	e0a7      	b.n	8005b64 <UART_SetConfig+0x210>
 8005a14:	2304      	movs	r3, #4
 8005a16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a1a:	e0a3      	b.n	8005b64 <UART_SetConfig+0x210>
 8005a1c:	2308      	movs	r3, #8
 8005a1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a22:	e09f      	b.n	8005b64 <UART_SetConfig+0x210>
 8005a24:	2310      	movs	r3, #16
 8005a26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a2a:	e09b      	b.n	8005b64 <UART_SetConfig+0x210>
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a76      	ldr	r2, [pc, #472]	; (8005c0c <UART_SetConfig+0x2b8>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d138      	bne.n	8005aa8 <UART_SetConfig+0x154>
 8005a36:	4b74      	ldr	r3, [pc, #464]	; (8005c08 <UART_SetConfig+0x2b4>)
 8005a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a3c:	f003 030c 	and.w	r3, r3, #12
 8005a40:	2b0c      	cmp	r3, #12
 8005a42:	d82d      	bhi.n	8005aa0 <UART_SetConfig+0x14c>
 8005a44:	a201      	add	r2, pc, #4	; (adr r2, 8005a4c <UART_SetConfig+0xf8>)
 8005a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a4a:	bf00      	nop
 8005a4c:	08005a81 	.word	0x08005a81
 8005a50:	08005aa1 	.word	0x08005aa1
 8005a54:	08005aa1 	.word	0x08005aa1
 8005a58:	08005aa1 	.word	0x08005aa1
 8005a5c:	08005a91 	.word	0x08005a91
 8005a60:	08005aa1 	.word	0x08005aa1
 8005a64:	08005aa1 	.word	0x08005aa1
 8005a68:	08005aa1 	.word	0x08005aa1
 8005a6c:	08005a89 	.word	0x08005a89
 8005a70:	08005aa1 	.word	0x08005aa1
 8005a74:	08005aa1 	.word	0x08005aa1
 8005a78:	08005aa1 	.word	0x08005aa1
 8005a7c:	08005a99 	.word	0x08005a99
 8005a80:	2300      	movs	r3, #0
 8005a82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a86:	e06d      	b.n	8005b64 <UART_SetConfig+0x210>
 8005a88:	2302      	movs	r3, #2
 8005a8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a8e:	e069      	b.n	8005b64 <UART_SetConfig+0x210>
 8005a90:	2304      	movs	r3, #4
 8005a92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a96:	e065      	b.n	8005b64 <UART_SetConfig+0x210>
 8005a98:	2308      	movs	r3, #8
 8005a9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a9e:	e061      	b.n	8005b64 <UART_SetConfig+0x210>
 8005aa0:	2310      	movs	r3, #16
 8005aa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005aa6:	e05d      	b.n	8005b64 <UART_SetConfig+0x210>
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a58      	ldr	r2, [pc, #352]	; (8005c10 <UART_SetConfig+0x2bc>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d125      	bne.n	8005afe <UART_SetConfig+0x1aa>
 8005ab2:	4b55      	ldr	r3, [pc, #340]	; (8005c08 <UART_SetConfig+0x2b4>)
 8005ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ab8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005abc:	2b30      	cmp	r3, #48	; 0x30
 8005abe:	d016      	beq.n	8005aee <UART_SetConfig+0x19a>
 8005ac0:	2b30      	cmp	r3, #48	; 0x30
 8005ac2:	d818      	bhi.n	8005af6 <UART_SetConfig+0x1a2>
 8005ac4:	2b20      	cmp	r3, #32
 8005ac6:	d00a      	beq.n	8005ade <UART_SetConfig+0x18a>
 8005ac8:	2b20      	cmp	r3, #32
 8005aca:	d814      	bhi.n	8005af6 <UART_SetConfig+0x1a2>
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d002      	beq.n	8005ad6 <UART_SetConfig+0x182>
 8005ad0:	2b10      	cmp	r3, #16
 8005ad2:	d008      	beq.n	8005ae6 <UART_SetConfig+0x192>
 8005ad4:	e00f      	b.n	8005af6 <UART_SetConfig+0x1a2>
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005adc:	e042      	b.n	8005b64 <UART_SetConfig+0x210>
 8005ade:	2302      	movs	r3, #2
 8005ae0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ae4:	e03e      	b.n	8005b64 <UART_SetConfig+0x210>
 8005ae6:	2304      	movs	r3, #4
 8005ae8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005aec:	e03a      	b.n	8005b64 <UART_SetConfig+0x210>
 8005aee:	2308      	movs	r3, #8
 8005af0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005af4:	e036      	b.n	8005b64 <UART_SetConfig+0x210>
 8005af6:	2310      	movs	r3, #16
 8005af8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005afc:	e032      	b.n	8005b64 <UART_SetConfig+0x210>
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a3f      	ldr	r2, [pc, #252]	; (8005c00 <UART_SetConfig+0x2ac>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d12a      	bne.n	8005b5e <UART_SetConfig+0x20a>
 8005b08:	4b3f      	ldr	r3, [pc, #252]	; (8005c08 <UART_SetConfig+0x2b4>)
 8005b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b0e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005b12:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b16:	d01a      	beq.n	8005b4e <UART_SetConfig+0x1fa>
 8005b18:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b1c:	d81b      	bhi.n	8005b56 <UART_SetConfig+0x202>
 8005b1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b22:	d00c      	beq.n	8005b3e <UART_SetConfig+0x1ea>
 8005b24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b28:	d815      	bhi.n	8005b56 <UART_SetConfig+0x202>
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d003      	beq.n	8005b36 <UART_SetConfig+0x1e2>
 8005b2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b32:	d008      	beq.n	8005b46 <UART_SetConfig+0x1f2>
 8005b34:	e00f      	b.n	8005b56 <UART_SetConfig+0x202>
 8005b36:	2300      	movs	r3, #0
 8005b38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b3c:	e012      	b.n	8005b64 <UART_SetConfig+0x210>
 8005b3e:	2302      	movs	r3, #2
 8005b40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b44:	e00e      	b.n	8005b64 <UART_SetConfig+0x210>
 8005b46:	2304      	movs	r3, #4
 8005b48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b4c:	e00a      	b.n	8005b64 <UART_SetConfig+0x210>
 8005b4e:	2308      	movs	r3, #8
 8005b50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b54:	e006      	b.n	8005b64 <UART_SetConfig+0x210>
 8005b56:	2310      	movs	r3, #16
 8005b58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b5c:	e002      	b.n	8005b64 <UART_SetConfig+0x210>
 8005b5e:	2310      	movs	r3, #16
 8005b60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a25      	ldr	r2, [pc, #148]	; (8005c00 <UART_SetConfig+0x2ac>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	f040 808a 	bne.w	8005c84 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005b70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005b74:	2b08      	cmp	r3, #8
 8005b76:	d824      	bhi.n	8005bc2 <UART_SetConfig+0x26e>
 8005b78:	a201      	add	r2, pc, #4	; (adr r2, 8005b80 <UART_SetConfig+0x22c>)
 8005b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b7e:	bf00      	nop
 8005b80:	08005ba5 	.word	0x08005ba5
 8005b84:	08005bc3 	.word	0x08005bc3
 8005b88:	08005bad 	.word	0x08005bad
 8005b8c:	08005bc3 	.word	0x08005bc3
 8005b90:	08005bb3 	.word	0x08005bb3
 8005b94:	08005bc3 	.word	0x08005bc3
 8005b98:	08005bc3 	.word	0x08005bc3
 8005b9c:	08005bc3 	.word	0x08005bc3
 8005ba0:	08005bbb 	.word	0x08005bbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ba4:	f7fe fba4 	bl	80042f0 <HAL_RCC_GetPCLK1Freq>
 8005ba8:	61f8      	str	r0, [r7, #28]
        break;
 8005baa:	e010      	b.n	8005bce <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bac:	4b19      	ldr	r3, [pc, #100]	; (8005c14 <UART_SetConfig+0x2c0>)
 8005bae:	61fb      	str	r3, [r7, #28]
        break;
 8005bb0:	e00d      	b.n	8005bce <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bb2:	f7fe fb05 	bl	80041c0 <HAL_RCC_GetSysClockFreq>
 8005bb6:	61f8      	str	r0, [r7, #28]
        break;
 8005bb8:	e009      	b.n	8005bce <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bbe:	61fb      	str	r3, [r7, #28]
        break;
 8005bc0:	e005      	b.n	8005bce <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005bcc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005bce:	69fb      	ldr	r3, [r7, #28]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	f000 810b 	beq.w	8005dec <UART_SetConfig+0x498>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	685a      	ldr	r2, [r3, #4]
 8005bda:	4613      	mov	r3, r2
 8005bdc:	005b      	lsls	r3, r3, #1
 8005bde:	4413      	add	r3, r2
 8005be0:	69fa      	ldr	r2, [r7, #28]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d305      	bcc.n	8005bf2 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005bec:	69fa      	ldr	r2, [r7, #28]
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d912      	bls.n	8005c18 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005bf8:	e0f8      	b.n	8005dec <UART_SetConfig+0x498>
 8005bfa:	bf00      	nop
 8005bfc:	efff69f3 	.word	0xefff69f3
 8005c00:	40008000 	.word	0x40008000
 8005c04:	40013800 	.word	0x40013800
 8005c08:	40021000 	.word	0x40021000
 8005c0c:	40004400 	.word	0x40004400
 8005c10:	40004800 	.word	0x40004800
 8005c14:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	461c      	mov	r4, r3
 8005c1e:	4615      	mov	r5, r2
 8005c20:	f04f 0200 	mov.w	r2, #0
 8005c24:	f04f 0300 	mov.w	r3, #0
 8005c28:	022b      	lsls	r3, r5, #8
 8005c2a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005c2e:	0222      	lsls	r2, r4, #8
 8005c30:	68f9      	ldr	r1, [r7, #12]
 8005c32:	6849      	ldr	r1, [r1, #4]
 8005c34:	0849      	lsrs	r1, r1, #1
 8005c36:	2000      	movs	r0, #0
 8005c38:	4688      	mov	r8, r1
 8005c3a:	4681      	mov	r9, r0
 8005c3c:	eb12 0a08 	adds.w	sl, r2, r8
 8005c40:	eb43 0b09 	adc.w	fp, r3, r9
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	603b      	str	r3, [r7, #0]
 8005c4c:	607a      	str	r2, [r7, #4]
 8005c4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c52:	4650      	mov	r0, sl
 8005c54:	4659      	mov	r1, fp
 8005c56:	f7fa fac3 	bl	80001e0 <__aeabi_uldivmod>
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	460b      	mov	r3, r1
 8005c5e:	4613      	mov	r3, r2
 8005c60:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005c62:	69bb      	ldr	r3, [r7, #24]
 8005c64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c68:	d308      	bcc.n	8005c7c <UART_SetConfig+0x328>
 8005c6a:	69bb      	ldr	r3, [r7, #24]
 8005c6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c70:	d204      	bcs.n	8005c7c <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	69ba      	ldr	r2, [r7, #24]
 8005c78:	60da      	str	r2, [r3, #12]
 8005c7a:	e0b7      	b.n	8005dec <UART_SetConfig+0x498>
        }
        else
        {
          ret = HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005c82:	e0b3      	b.n	8005dec <UART_SetConfig+0x498>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	69db      	ldr	r3, [r3, #28]
 8005c88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c8c:	d15e      	bne.n	8005d4c <UART_SetConfig+0x3f8>
  {
    switch (clocksource)
 8005c8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005c92:	2b08      	cmp	r3, #8
 8005c94:	d827      	bhi.n	8005ce6 <UART_SetConfig+0x392>
 8005c96:	a201      	add	r2, pc, #4	; (adr r2, 8005c9c <UART_SetConfig+0x348>)
 8005c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c9c:	08005cc1 	.word	0x08005cc1
 8005ca0:	08005cc9 	.word	0x08005cc9
 8005ca4:	08005cd1 	.word	0x08005cd1
 8005ca8:	08005ce7 	.word	0x08005ce7
 8005cac:	08005cd7 	.word	0x08005cd7
 8005cb0:	08005ce7 	.word	0x08005ce7
 8005cb4:	08005ce7 	.word	0x08005ce7
 8005cb8:	08005ce7 	.word	0x08005ce7
 8005cbc:	08005cdf 	.word	0x08005cdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cc0:	f7fe fb16 	bl	80042f0 <HAL_RCC_GetPCLK1Freq>
 8005cc4:	61f8      	str	r0, [r7, #28]
        break;
 8005cc6:	e014      	b.n	8005cf2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cc8:	f7fe fb28 	bl	800431c <HAL_RCC_GetPCLK2Freq>
 8005ccc:	61f8      	str	r0, [r7, #28]
        break;
 8005cce:	e010      	b.n	8005cf2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cd0:	4b4d      	ldr	r3, [pc, #308]	; (8005e08 <UART_SetConfig+0x4b4>)
 8005cd2:	61fb      	str	r3, [r7, #28]
        break;
 8005cd4:	e00d      	b.n	8005cf2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cd6:	f7fe fa73 	bl	80041c0 <HAL_RCC_GetSysClockFreq>
 8005cda:	61f8      	str	r0, [r7, #28]
        break;
 8005cdc:	e009      	b.n	8005cf2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ce2:	61fb      	str	r3, [r7, #28]
        break;
 8005ce4:	e005      	b.n	8005cf2 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005cf0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d079      	beq.n	8005dec <UART_SetConfig+0x498>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005cf8:	69fb      	ldr	r3, [r7, #28]
 8005cfa:	005a      	lsls	r2, r3, #1
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	085b      	lsrs	r3, r3, #1
 8005d02:	441a      	add	r2, r3
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d10:	69bb      	ldr	r3, [r7, #24]
 8005d12:	2b0f      	cmp	r3, #15
 8005d14:	d916      	bls.n	8005d44 <UART_SetConfig+0x3f0>
 8005d16:	69bb      	ldr	r3, [r7, #24]
 8005d18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d1c:	d212      	bcs.n	8005d44 <UART_SetConfig+0x3f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d1e:	69bb      	ldr	r3, [r7, #24]
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	f023 030f 	bic.w	r3, r3, #15
 8005d26:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d28:	69bb      	ldr	r3, [r7, #24]
 8005d2a:	085b      	lsrs	r3, r3, #1
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	f003 0307 	and.w	r3, r3, #7
 8005d32:	b29a      	uxth	r2, r3
 8005d34:	8afb      	ldrh	r3, [r7, #22]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	8afa      	ldrh	r2, [r7, #22]
 8005d40:	60da      	str	r2, [r3, #12]
 8005d42:	e053      	b.n	8005dec <UART_SetConfig+0x498>
      }
      else
      {
        ret = HAL_ERROR;
 8005d44:	2301      	movs	r3, #1
 8005d46:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005d4a:	e04f      	b.n	8005dec <UART_SetConfig+0x498>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005d50:	2b08      	cmp	r3, #8
 8005d52:	d828      	bhi.n	8005da6 <UART_SetConfig+0x452>
 8005d54:	a201      	add	r2, pc, #4	; (adr r2, 8005d5c <UART_SetConfig+0x408>)
 8005d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d5a:	bf00      	nop
 8005d5c:	08005d81 	.word	0x08005d81
 8005d60:	08005d89 	.word	0x08005d89
 8005d64:	08005d91 	.word	0x08005d91
 8005d68:	08005da7 	.word	0x08005da7
 8005d6c:	08005d97 	.word	0x08005d97
 8005d70:	08005da7 	.word	0x08005da7
 8005d74:	08005da7 	.word	0x08005da7
 8005d78:	08005da7 	.word	0x08005da7
 8005d7c:	08005d9f 	.word	0x08005d9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d80:	f7fe fab6 	bl	80042f0 <HAL_RCC_GetPCLK1Freq>
 8005d84:	61f8      	str	r0, [r7, #28]
        break;
 8005d86:	e014      	b.n	8005db2 <UART_SetConfig+0x45e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d88:	f7fe fac8 	bl	800431c <HAL_RCC_GetPCLK2Freq>
 8005d8c:	61f8      	str	r0, [r7, #28]
        break;
 8005d8e:	e010      	b.n	8005db2 <UART_SetConfig+0x45e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d90:	4b1d      	ldr	r3, [pc, #116]	; (8005e08 <UART_SetConfig+0x4b4>)
 8005d92:	61fb      	str	r3, [r7, #28]
        break;
 8005d94:	e00d      	b.n	8005db2 <UART_SetConfig+0x45e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d96:	f7fe fa13 	bl	80041c0 <HAL_RCC_GetSysClockFreq>
 8005d9a:	61f8      	str	r0, [r7, #28]
        break;
 8005d9c:	e009      	b.n	8005db2 <UART_SetConfig+0x45e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005da2:	61fb      	str	r3, [r7, #28]
        break;
 8005da4:	e005      	b.n	8005db2 <UART_SetConfig+0x45e>
      default:
        pclk = 0U;
 8005da6:	2300      	movs	r3, #0
 8005da8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005db0:	bf00      	nop
    }

    if (pclk != 0U)
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d019      	beq.n	8005dec <UART_SetConfig+0x498>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	085a      	lsrs	r2, r3, #1
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	441a      	add	r2, r3
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005dce:	69bb      	ldr	r3, [r7, #24]
 8005dd0:	2b0f      	cmp	r3, #15
 8005dd2:	d908      	bls.n	8005de6 <UART_SetConfig+0x492>
 8005dd4:	69bb      	ldr	r3, [r7, #24]
 8005dd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dda:	d204      	bcs.n	8005de6 <UART_SetConfig+0x492>
      {
        huart->Instance->BRR = usartdiv;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	69ba      	ldr	r2, [r7, #24]
 8005de2:	60da      	str	r2, [r3, #12]
 8005de4:	e002      	b.n	8005dec <UART_SetConfig+0x498>
      }
      else
      {
        ret = HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2200      	movs	r2, #0
 8005df0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2200      	movs	r2, #0
 8005df6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005df8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3728      	adds	r7, #40	; 0x28
 8005e00:	46bd      	mov	sp, r7
 8005e02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e06:	bf00      	nop
 8005e08:	00f42400 	.word	0x00f42400

08005e0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e18:	f003 0301 	and.w	r3, r3, #1
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d00a      	beq.n	8005e36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	430a      	orrs	r2, r1
 8005e34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e3a:	f003 0302 	and.w	r3, r3, #2
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d00a      	beq.n	8005e58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	430a      	orrs	r2, r1
 8005e56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e5c:	f003 0304 	and.w	r3, r3, #4
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d00a      	beq.n	8005e7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	430a      	orrs	r2, r1
 8005e78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7e:	f003 0308 	and.w	r3, r3, #8
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d00a      	beq.n	8005e9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	430a      	orrs	r2, r1
 8005e9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea0:	f003 0310 	and.w	r3, r3, #16
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d00a      	beq.n	8005ebe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	430a      	orrs	r2, r1
 8005ebc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec2:	f003 0320 	and.w	r3, r3, #32
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d00a      	beq.n	8005ee0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	430a      	orrs	r2, r1
 8005ede:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d01a      	beq.n	8005f22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	430a      	orrs	r2, r1
 8005f00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f0a:	d10a      	bne.n	8005f22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	430a      	orrs	r2, r1
 8005f20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d00a      	beq.n	8005f44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	430a      	orrs	r2, r1
 8005f42:	605a      	str	r2, [r3, #4]
  }
}
 8005f44:	bf00      	nop
 8005f46:	370c      	adds	r7, #12
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b086      	sub	sp, #24
 8005f54:	af02      	add	r7, sp, #8
 8005f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f60:	f7fc fc90 	bl	8002884 <HAL_GetTick>
 8005f64:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f003 0308 	and.w	r3, r3, #8
 8005f70:	2b08      	cmp	r3, #8
 8005f72:	d10e      	bne.n	8005f92 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f78:	9300      	str	r3, [sp, #0]
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f000 f82d 	bl	8005fe2 <UART_WaitOnFlagUntilTimeout>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d001      	beq.n	8005f92 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f8e:	2303      	movs	r3, #3
 8005f90:	e023      	b.n	8005fda <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f003 0304 	and.w	r3, r3, #4
 8005f9c:	2b04      	cmp	r3, #4
 8005f9e:	d10e      	bne.n	8005fbe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fa0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005fa4:	9300      	str	r3, [sp, #0]
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 f817 	bl	8005fe2 <UART_WaitOnFlagUntilTimeout>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d001      	beq.n	8005fbe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fba:	2303      	movs	r3, #3
 8005fbc:	e00d      	b.n	8005fda <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2220      	movs	r2, #32
 8005fc2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2220      	movs	r2, #32
 8005fc8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005fd8:	2300      	movs	r3, #0
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3710      	adds	r7, #16
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}

08005fe2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005fe2:	b580      	push	{r7, lr}
 8005fe4:	b084      	sub	sp, #16
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	60f8      	str	r0, [r7, #12]
 8005fea:	60b9      	str	r1, [r7, #8]
 8005fec:	603b      	str	r3, [r7, #0]
 8005fee:	4613      	mov	r3, r2
 8005ff0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ff2:	e05e      	b.n	80060b2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ff4:	69bb      	ldr	r3, [r7, #24]
 8005ff6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ffa:	d05a      	beq.n	80060b2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ffc:	f7fc fc42 	bl	8002884 <HAL_GetTick>
 8006000:	4602      	mov	r2, r0
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	1ad3      	subs	r3, r2, r3
 8006006:	69ba      	ldr	r2, [r7, #24]
 8006008:	429a      	cmp	r2, r3
 800600a:	d302      	bcc.n	8006012 <UART_WaitOnFlagUntilTimeout+0x30>
 800600c:	69bb      	ldr	r3, [r7, #24]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d11b      	bne.n	800604a <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006020:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	689a      	ldr	r2, [r3, #8]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f022 0201 	bic.w	r2, r2, #1
 8006030:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2220      	movs	r2, #32
 8006036:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2220      	movs	r2, #32
 800603c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2200      	movs	r2, #0
 8006042:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006046:	2303      	movs	r3, #3
 8006048:	e043      	b.n	80060d2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f003 0304 	and.w	r3, r3, #4
 8006054:	2b00      	cmp	r3, #0
 8006056:	d02c      	beq.n	80060b2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	69db      	ldr	r3, [r3, #28]
 800605e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006062:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006066:	d124      	bne.n	80060b2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006070:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006080:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	689a      	ldr	r2, [r3, #8]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f022 0201 	bic.w	r2, r2, #1
 8006090:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2220      	movs	r2, #32
 8006096:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2220      	movs	r2, #32
 800609c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2220      	movs	r2, #32
 80060a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2200      	movs	r2, #0
 80060aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80060ae:	2303      	movs	r3, #3
 80060b0:	e00f      	b.n	80060d2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	69da      	ldr	r2, [r3, #28]
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	4013      	ands	r3, r2
 80060bc:	68ba      	ldr	r2, [r7, #8]
 80060be:	429a      	cmp	r2, r3
 80060c0:	bf0c      	ite	eq
 80060c2:	2301      	moveq	r3, #1
 80060c4:	2300      	movne	r3, #0
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	461a      	mov	r2, r3
 80060ca:	79fb      	ldrb	r3, [r7, #7]
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d091      	beq.n	8005ff4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80060d0:	2300      	movs	r3, #0
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3710      	adds	r7, #16
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
	...

080060dc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b084      	sub	sp, #16
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	60f8      	str	r0, [r7, #12]
 80060e4:	60b9      	str	r1, [r7, #8]
 80060e6:	4613      	mov	r3, r2
 80060e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	68ba      	ldr	r2, [r7, #8]
 80060ee:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	88fa      	ldrh	r2, [r7, #6]
 80060f4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2200      	movs	r2, #0
 80060fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2222      	movs	r2, #34	; 0x22
 8006104:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800610a:	2b00      	cmp	r3, #0
 800610c:	d02b      	beq.n	8006166 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006112:	4a25      	ldr	r2, [pc, #148]	; (80061a8 <UART_Start_Receive_DMA+0xcc>)
 8006114:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800611a:	4a24      	ldr	r2, [pc, #144]	; (80061ac <UART_Start_Receive_DMA+0xd0>)
 800611c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006122:	4a23      	ldr	r2, [pc, #140]	; (80061b0 <UART_Start_Receive_DMA+0xd4>)
 8006124:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800612a:	2200      	movs	r2, #0
 800612c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	3324      	adds	r3, #36	; 0x24
 8006138:	4619      	mov	r1, r3
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800613e:	461a      	mov	r2, r3
 8006140:	88fb      	ldrh	r3, [r7, #6]
 8006142:	f7fc fd69 	bl	8002c18 <HAL_DMA_Start_IT>
 8006146:	4603      	mov	r3, r0
 8006148:	2b00      	cmp	r3, #0
 800614a:	d00c      	beq.n	8006166 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2210      	movs	r2, #16
 8006150:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2200      	movs	r2, #0
 8006158:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2220      	movs	r2, #32
 8006160:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	e01c      	b.n	80061a0 <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2200      	movs	r2, #0
 800616a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800617c:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	689a      	ldr	r2, [r3, #8]
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f042 0201 	orr.w	r2, r2, #1
 800618c:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	689a      	ldr	r2, [r3, #8]
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800619c:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800619e:	2300      	movs	r3, #0
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3710      	adds	r7, #16
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	0800623d 	.word	0x0800623d
 80061ac:	080062d5 	.word	0x080062d5
 80061b0:	0800630d 	.word	0x0800630d

080061b4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b083      	sub	sp, #12
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80061ca:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2220      	movs	r2, #32
 80061d0:	679a      	str	r2, [r3, #120]	; 0x78
}
 80061d2:	bf00      	nop
 80061d4:	370c      	adds	r7, #12
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr

080061de <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80061de:	b480      	push	{r7}
 80061e0:	b083      	sub	sp, #12
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80061f4:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	689a      	ldr	r2, [r3, #8]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f022 0201 	bic.w	r2, r2, #1
 8006204:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800620a:	2b01      	cmp	r3, #1
 800620c:	d107      	bne.n	800621e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f022 0210 	bic.w	r2, r2, #16
 800621c:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2220      	movs	r2, #32
 8006222:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2200      	movs	r2, #0
 8006228:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2200      	movs	r2, #0
 800622e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006230:	bf00      	nop
 8006232:	370c      	adds	r7, #12
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr

0800623c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b084      	sub	sp, #16
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006248:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f003 0320 	and.w	r3, r3, #32
 8006254:	2b00      	cmp	r3, #0
 8006256:	d12a      	bne.n	80062ae <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2200      	movs	r2, #0
 800625c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800626e:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	689a      	ldr	r2, [r3, #8]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f022 0201 	bic.w	r2, r2, #1
 800627e:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	689a      	ldr	r2, [r3, #8]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800628e:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2220      	movs	r2, #32
 8006294:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800629a:	2b01      	cmp	r3, #1
 800629c:	d107      	bne.n	80062ae <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f022 0210 	bic.w	r2, r2, #16
 80062ac:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d107      	bne.n	80062c6 <UART_DMAReceiveCplt+0x8a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80062bc:	4619      	mov	r1, r3
 80062be:	68f8      	ldr	r0, [r7, #12]
 80062c0:	f7ff fb3c 	bl	800593c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80062c4:	e002      	b.n	80062cc <UART_DMAReceiveCplt+0x90>
    HAL_UART_RxCpltCallback(huart);
 80062c6:	68f8      	ldr	r0, [r7, #12]
 80062c8:	f7fb f862 	bl	8001390 <HAL_UART_RxCpltCallback>
}
 80062cc:	bf00      	nop
 80062ce:	3710      	adds	r7, #16
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b084      	sub	sp, #16
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062e0:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d109      	bne.n	80062fe <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80062f0:	085b      	lsrs	r3, r3, #1
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	4619      	mov	r1, r3
 80062f6:	68f8      	ldr	r0, [r7, #12]
 80062f8:	f7ff fb20 	bl	800593c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80062fc:	e002      	b.n	8006304 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 80062fe:	68f8      	ldr	r0, [r7, #12]
 8006300:	f7ff fb08 	bl	8005914 <HAL_UART_RxHalfCpltCallback>
}
 8006304:	bf00      	nop
 8006306:	3710      	adds	r7, #16
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}

0800630c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b086      	sub	sp, #24
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006318:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800631e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006324:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006330:	2b80      	cmp	r3, #128	; 0x80
 8006332:	d109      	bne.n	8006348 <UART_DMAError+0x3c>
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	2b21      	cmp	r3, #33	; 0x21
 8006338:	d106      	bne.n	8006348 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	2200      	movs	r2, #0
 800633e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8006342:	6978      	ldr	r0, [r7, #20]
 8006344:	f7ff ff36 	bl	80061b4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006352:	2b40      	cmp	r3, #64	; 0x40
 8006354:	d109      	bne.n	800636a <UART_DMAError+0x5e>
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2b22      	cmp	r3, #34	; 0x22
 800635a:	d106      	bne.n	800636a <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	2200      	movs	r2, #0
 8006360:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8006364:	6978      	ldr	r0, [r7, #20]
 8006366:	f7ff ff3a 	bl	80061de <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006370:	f043 0210 	orr.w	r2, r3, #16
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800637a:	6978      	ldr	r0, [r7, #20]
 800637c:	f7ff fad4 	bl	8005928 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006380:	bf00      	nop
 8006382:	3718      	adds	r7, #24
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}

08006388 <__NVIC_SetPriority>:
{
 8006388:	b480      	push	{r7}
 800638a:	b083      	sub	sp, #12
 800638c:	af00      	add	r7, sp, #0
 800638e:	4603      	mov	r3, r0
 8006390:	6039      	str	r1, [r7, #0]
 8006392:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006398:	2b00      	cmp	r3, #0
 800639a:	db0a      	blt.n	80063b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	b2da      	uxtb	r2, r3
 80063a0:	490c      	ldr	r1, [pc, #48]	; (80063d4 <__NVIC_SetPriority+0x4c>)
 80063a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063a6:	0112      	lsls	r2, r2, #4
 80063a8:	b2d2      	uxtb	r2, r2
 80063aa:	440b      	add	r3, r1
 80063ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80063b0:	e00a      	b.n	80063c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	b2da      	uxtb	r2, r3
 80063b6:	4908      	ldr	r1, [pc, #32]	; (80063d8 <__NVIC_SetPriority+0x50>)
 80063b8:	79fb      	ldrb	r3, [r7, #7]
 80063ba:	f003 030f 	and.w	r3, r3, #15
 80063be:	3b04      	subs	r3, #4
 80063c0:	0112      	lsls	r2, r2, #4
 80063c2:	b2d2      	uxtb	r2, r2
 80063c4:	440b      	add	r3, r1
 80063c6:	761a      	strb	r2, [r3, #24]
}
 80063c8:	bf00      	nop
 80063ca:	370c      	adds	r7, #12
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr
 80063d4:	e000e100 	.word	0xe000e100
 80063d8:	e000ed00 	.word	0xe000ed00

080063dc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80063dc:	b580      	push	{r7, lr}
 80063de:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80063e0:	4b05      	ldr	r3, [pc, #20]	; (80063f8 <SysTick_Handler+0x1c>)
 80063e2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80063e4:	f001 fee8 	bl	80081b8 <xTaskGetSchedulerState>
 80063e8:	4603      	mov	r3, r0
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d001      	beq.n	80063f2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80063ee:	f002 fcd3 	bl	8008d98 <xPortSysTickHandler>
  }
}
 80063f2:	bf00      	nop
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	bf00      	nop
 80063f8:	e000e010 	.word	0xe000e010

080063fc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80063fc:	b580      	push	{r7, lr}
 80063fe:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006400:	2100      	movs	r1, #0
 8006402:	f06f 0004 	mvn.w	r0, #4
 8006406:	f7ff ffbf 	bl	8006388 <__NVIC_SetPriority>
#endif
}
 800640a:	bf00      	nop
 800640c:	bd80      	pop	{r7, pc}
	...

08006410 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006410:	b480      	push	{r7}
 8006412:	b083      	sub	sp, #12
 8006414:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006416:	f3ef 8305 	mrs	r3, IPSR
 800641a:	603b      	str	r3, [r7, #0]
  return(result);
 800641c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800641e:	2b00      	cmp	r3, #0
 8006420:	d003      	beq.n	800642a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006422:	f06f 0305 	mvn.w	r3, #5
 8006426:	607b      	str	r3, [r7, #4]
 8006428:	e00c      	b.n	8006444 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800642a:	4b0a      	ldr	r3, [pc, #40]	; (8006454 <osKernelInitialize+0x44>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d105      	bne.n	800643e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006432:	4b08      	ldr	r3, [pc, #32]	; (8006454 <osKernelInitialize+0x44>)
 8006434:	2201      	movs	r2, #1
 8006436:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006438:	2300      	movs	r3, #0
 800643a:	607b      	str	r3, [r7, #4]
 800643c:	e002      	b.n	8006444 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800643e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006442:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006444:	687b      	ldr	r3, [r7, #4]
}
 8006446:	4618      	mov	r0, r3
 8006448:	370c      	adds	r7, #12
 800644a:	46bd      	mov	sp, r7
 800644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006450:	4770      	bx	lr
 8006452:	bf00      	nop
 8006454:	2000a8d8 	.word	0x2000a8d8

08006458 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006458:	b580      	push	{r7, lr}
 800645a:	b082      	sub	sp, #8
 800645c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800645e:	f3ef 8305 	mrs	r3, IPSR
 8006462:	603b      	str	r3, [r7, #0]
  return(result);
 8006464:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006466:	2b00      	cmp	r3, #0
 8006468:	d003      	beq.n	8006472 <osKernelStart+0x1a>
    stat = osErrorISR;
 800646a:	f06f 0305 	mvn.w	r3, #5
 800646e:	607b      	str	r3, [r7, #4]
 8006470:	e010      	b.n	8006494 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006472:	4b0b      	ldr	r3, [pc, #44]	; (80064a0 <osKernelStart+0x48>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	2b01      	cmp	r3, #1
 8006478:	d109      	bne.n	800648e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800647a:	f7ff ffbf 	bl	80063fc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800647e:	4b08      	ldr	r3, [pc, #32]	; (80064a0 <osKernelStart+0x48>)
 8006480:	2202      	movs	r2, #2
 8006482:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006484:	f001 fa50 	bl	8007928 <vTaskStartScheduler>
      stat = osOK;
 8006488:	2300      	movs	r3, #0
 800648a:	607b      	str	r3, [r7, #4]
 800648c:	e002      	b.n	8006494 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800648e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006492:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006494:	687b      	ldr	r3, [r7, #4]
}
 8006496:	4618      	mov	r0, r3
 8006498:	3708      	adds	r7, #8
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
 800649e:	bf00      	nop
 80064a0:	2000a8d8 	.word	0x2000a8d8

080064a4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b08e      	sub	sp, #56	; 0x38
 80064a8:	af04      	add	r7, sp, #16
 80064aa:	60f8      	str	r0, [r7, #12]
 80064ac:	60b9      	str	r1, [r7, #8]
 80064ae:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80064b0:	2300      	movs	r3, #0
 80064b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064b4:	f3ef 8305 	mrs	r3, IPSR
 80064b8:	617b      	str	r3, [r7, #20]
  return(result);
 80064ba:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d17e      	bne.n	80065be <osThreadNew+0x11a>
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d07b      	beq.n	80065be <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80064c6:	2380      	movs	r3, #128	; 0x80
 80064c8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80064ca:	2318      	movs	r3, #24
 80064cc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80064ce:	2300      	movs	r3, #0
 80064d0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80064d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80064d6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d045      	beq.n	800656a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d002      	beq.n	80064ec <osThreadNew+0x48>
        name = attr->name;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	699b      	ldr	r3, [r3, #24]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d002      	beq.n	80064fa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	699b      	ldr	r3, [r3, #24]
 80064f8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80064fa:	69fb      	ldr	r3, [r7, #28]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d008      	beq.n	8006512 <osThreadNew+0x6e>
 8006500:	69fb      	ldr	r3, [r7, #28]
 8006502:	2b38      	cmp	r3, #56	; 0x38
 8006504:	d805      	bhi.n	8006512 <osThreadNew+0x6e>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	f003 0301 	and.w	r3, r3, #1
 800650e:	2b00      	cmp	r3, #0
 8006510:	d001      	beq.n	8006516 <osThreadNew+0x72>
        return (NULL);
 8006512:	2300      	movs	r3, #0
 8006514:	e054      	b.n	80065c0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	695b      	ldr	r3, [r3, #20]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d003      	beq.n	8006526 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	695b      	ldr	r3, [r3, #20]
 8006522:	089b      	lsrs	r3, r3, #2
 8006524:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d00e      	beq.n	800654c <osThreadNew+0xa8>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	68db      	ldr	r3, [r3, #12]
 8006532:	2b5b      	cmp	r3, #91	; 0x5b
 8006534:	d90a      	bls.n	800654c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800653a:	2b00      	cmp	r3, #0
 800653c:	d006      	beq.n	800654c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	695b      	ldr	r3, [r3, #20]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d002      	beq.n	800654c <osThreadNew+0xa8>
        mem = 1;
 8006546:	2301      	movs	r3, #1
 8006548:	61bb      	str	r3, [r7, #24]
 800654a:	e010      	b.n	800656e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d10c      	bne.n	800656e <osThreadNew+0xca>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	68db      	ldr	r3, [r3, #12]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d108      	bne.n	800656e <osThreadNew+0xca>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	691b      	ldr	r3, [r3, #16]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d104      	bne.n	800656e <osThreadNew+0xca>
          mem = 0;
 8006564:	2300      	movs	r3, #0
 8006566:	61bb      	str	r3, [r7, #24]
 8006568:	e001      	b.n	800656e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800656a:	2300      	movs	r3, #0
 800656c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800656e:	69bb      	ldr	r3, [r7, #24]
 8006570:	2b01      	cmp	r3, #1
 8006572:	d110      	bne.n	8006596 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800657c:	9202      	str	r2, [sp, #8]
 800657e:	9301      	str	r3, [sp, #4]
 8006580:	69fb      	ldr	r3, [r7, #28]
 8006582:	9300      	str	r3, [sp, #0]
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	6a3a      	ldr	r2, [r7, #32]
 8006588:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800658a:	68f8      	ldr	r0, [r7, #12]
 800658c:	f000 fff6 	bl	800757c <xTaskCreateStatic>
 8006590:	4603      	mov	r3, r0
 8006592:	613b      	str	r3, [r7, #16]
 8006594:	e013      	b.n	80065be <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006596:	69bb      	ldr	r3, [r7, #24]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d110      	bne.n	80065be <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800659c:	6a3b      	ldr	r3, [r7, #32]
 800659e:	b29a      	uxth	r2, r3
 80065a0:	f107 0310 	add.w	r3, r7, #16
 80065a4:	9301      	str	r3, [sp, #4]
 80065a6:	69fb      	ldr	r3, [r7, #28]
 80065a8:	9300      	str	r3, [sp, #0]
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80065ae:	68f8      	ldr	r0, [r7, #12]
 80065b0:	f001 f841 	bl	8007636 <xTaskCreate>
 80065b4:	4603      	mov	r3, r0
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	d001      	beq.n	80065be <osThreadNew+0x11a>
            hTask = NULL;
 80065ba:	2300      	movs	r3, #0
 80065bc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80065be:	693b      	ldr	r3, [r7, #16]
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3728      	adds	r7, #40	; 0x28
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}

080065c8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b084      	sub	sp, #16
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065d0:	f3ef 8305 	mrs	r3, IPSR
 80065d4:	60bb      	str	r3, [r7, #8]
  return(result);
 80065d6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d003      	beq.n	80065e4 <osDelay+0x1c>
    stat = osErrorISR;
 80065dc:	f06f 0305 	mvn.w	r3, #5
 80065e0:	60fb      	str	r3, [r7, #12]
 80065e2:	e007      	b.n	80065f4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80065e4:	2300      	movs	r3, #0
 80065e6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d002      	beq.n	80065f4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f001 f966 	bl	80078c0 <vTaskDelay>
    }
  }

  return (stat);
 80065f4:	68fb      	ldr	r3, [r7, #12]
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3710      	adds	r7, #16
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}

080065fe <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80065fe:	b580      	push	{r7, lr}
 8006600:	b08a      	sub	sp, #40	; 0x28
 8006602:	af02      	add	r7, sp, #8
 8006604:	60f8      	str	r0, [r7, #12]
 8006606:	60b9      	str	r1, [r7, #8]
 8006608:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800660a:	2300      	movs	r3, #0
 800660c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800660e:	f3ef 8305 	mrs	r3, IPSR
 8006612:	613b      	str	r3, [r7, #16]
  return(result);
 8006614:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006616:	2b00      	cmp	r3, #0
 8006618:	d15f      	bne.n	80066da <osMessageQueueNew+0xdc>
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d05c      	beq.n	80066da <osMessageQueueNew+0xdc>
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d059      	beq.n	80066da <osMessageQueueNew+0xdc>
    mem = -1;
 8006626:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800662a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d029      	beq.n	8006686 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d012      	beq.n	8006660 <osMessageQueueNew+0x62>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	68db      	ldr	r3, [r3, #12]
 800663e:	2b4f      	cmp	r3, #79	; 0x4f
 8006640:	d90e      	bls.n	8006660 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006646:	2b00      	cmp	r3, #0
 8006648:	d00a      	beq.n	8006660 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	695a      	ldr	r2, [r3, #20]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	68b9      	ldr	r1, [r7, #8]
 8006652:	fb01 f303 	mul.w	r3, r1, r3
 8006656:	429a      	cmp	r2, r3
 8006658:	d302      	bcc.n	8006660 <osMessageQueueNew+0x62>
        mem = 1;
 800665a:	2301      	movs	r3, #1
 800665c:	61bb      	str	r3, [r7, #24]
 800665e:	e014      	b.n	800668a <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d110      	bne.n	800668a <osMessageQueueNew+0x8c>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d10c      	bne.n	800668a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006674:	2b00      	cmp	r3, #0
 8006676:	d108      	bne.n	800668a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	695b      	ldr	r3, [r3, #20]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d104      	bne.n	800668a <osMessageQueueNew+0x8c>
          mem = 0;
 8006680:	2300      	movs	r3, #0
 8006682:	61bb      	str	r3, [r7, #24]
 8006684:	e001      	b.n	800668a <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8006686:	2300      	movs	r3, #0
 8006688:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800668a:	69bb      	ldr	r3, [r7, #24]
 800668c:	2b01      	cmp	r3, #1
 800668e:	d10b      	bne.n	80066a8 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	691a      	ldr	r2, [r3, #16]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	2100      	movs	r1, #0
 800669a:	9100      	str	r1, [sp, #0]
 800669c:	68b9      	ldr	r1, [r7, #8]
 800669e:	68f8      	ldr	r0, [r7, #12]
 80066a0:	f000 fa2e 	bl	8006b00 <xQueueGenericCreateStatic>
 80066a4:	61f8      	str	r0, [r7, #28]
 80066a6:	e008      	b.n	80066ba <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80066a8:	69bb      	ldr	r3, [r7, #24]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d105      	bne.n	80066ba <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80066ae:	2200      	movs	r2, #0
 80066b0:	68b9      	ldr	r1, [r7, #8]
 80066b2:	68f8      	ldr	r0, [r7, #12]
 80066b4:	f000 fa9c 	bl	8006bf0 <xQueueGenericCreate>
 80066b8:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80066ba:	69fb      	ldr	r3, [r7, #28]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d00c      	beq.n	80066da <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d003      	beq.n	80066ce <osMessageQueueNew+0xd0>
        name = attr->name;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	617b      	str	r3, [r7, #20]
 80066cc:	e001      	b.n	80066d2 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80066ce:	2300      	movs	r3, #0
 80066d0:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80066d2:	6979      	ldr	r1, [r7, #20]
 80066d4:	69f8      	ldr	r0, [r7, #28]
 80066d6:	f000 fef3 	bl	80074c0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80066da:	69fb      	ldr	r3, [r7, #28]
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3720      	adds	r7, #32
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}

080066e4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b088      	sub	sp, #32
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	60f8      	str	r0, [r7, #12]
 80066ec:	60b9      	str	r1, [r7, #8]
 80066ee:	603b      	str	r3, [r7, #0]
 80066f0:	4613      	mov	r3, r2
 80066f2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80066f8:	2300      	movs	r3, #0
 80066fa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066fc:	f3ef 8305 	mrs	r3, IPSR
 8006700:	617b      	str	r3, [r7, #20]
  return(result);
 8006702:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006704:	2b00      	cmp	r3, #0
 8006706:	d028      	beq.n	800675a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006708:	69bb      	ldr	r3, [r7, #24]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d005      	beq.n	800671a <osMessageQueuePut+0x36>
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d002      	beq.n	800671a <osMessageQueuePut+0x36>
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d003      	beq.n	8006722 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800671a:	f06f 0303 	mvn.w	r3, #3
 800671e:	61fb      	str	r3, [r7, #28]
 8006720:	e038      	b.n	8006794 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8006722:	2300      	movs	r3, #0
 8006724:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006726:	f107 0210 	add.w	r2, r7, #16
 800672a:	2300      	movs	r3, #0
 800672c:	68b9      	ldr	r1, [r7, #8]
 800672e:	69b8      	ldr	r0, [r7, #24]
 8006730:	f000 fbba 	bl	8006ea8 <xQueueGenericSendFromISR>
 8006734:	4603      	mov	r3, r0
 8006736:	2b01      	cmp	r3, #1
 8006738:	d003      	beq.n	8006742 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800673a:	f06f 0302 	mvn.w	r3, #2
 800673e:	61fb      	str	r3, [r7, #28]
 8006740:	e028      	b.n	8006794 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d025      	beq.n	8006794 <osMessageQueuePut+0xb0>
 8006748:	4b15      	ldr	r3, [pc, #84]	; (80067a0 <osMessageQueuePut+0xbc>)
 800674a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800674e:	601a      	str	r2, [r3, #0]
 8006750:	f3bf 8f4f 	dsb	sy
 8006754:	f3bf 8f6f 	isb	sy
 8006758:	e01c      	b.n	8006794 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800675a:	69bb      	ldr	r3, [r7, #24]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d002      	beq.n	8006766 <osMessageQueuePut+0x82>
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d103      	bne.n	800676e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8006766:	f06f 0303 	mvn.w	r3, #3
 800676a:	61fb      	str	r3, [r7, #28]
 800676c:	e012      	b.n	8006794 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800676e:	2300      	movs	r3, #0
 8006770:	683a      	ldr	r2, [r7, #0]
 8006772:	68b9      	ldr	r1, [r7, #8]
 8006774:	69b8      	ldr	r0, [r7, #24]
 8006776:	f000 fa99 	bl	8006cac <xQueueGenericSend>
 800677a:	4603      	mov	r3, r0
 800677c:	2b01      	cmp	r3, #1
 800677e:	d009      	beq.n	8006794 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d003      	beq.n	800678e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8006786:	f06f 0301 	mvn.w	r3, #1
 800678a:	61fb      	str	r3, [r7, #28]
 800678c:	e002      	b.n	8006794 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800678e:	f06f 0302 	mvn.w	r3, #2
 8006792:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006794:	69fb      	ldr	r3, [r7, #28]
}
 8006796:	4618      	mov	r0, r3
 8006798:	3720      	adds	r7, #32
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}
 800679e:	bf00      	nop
 80067a0:	e000ed04 	.word	0xe000ed04

080067a4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b088      	sub	sp, #32
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	60f8      	str	r0, [r7, #12]
 80067ac:	60b9      	str	r1, [r7, #8]
 80067ae:	607a      	str	r2, [r7, #4]
 80067b0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80067b6:	2300      	movs	r3, #0
 80067b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80067ba:	f3ef 8305 	mrs	r3, IPSR
 80067be:	617b      	str	r3, [r7, #20]
  return(result);
 80067c0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d028      	beq.n	8006818 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80067c6:	69bb      	ldr	r3, [r7, #24]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d005      	beq.n	80067d8 <osMessageQueueGet+0x34>
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d002      	beq.n	80067d8 <osMessageQueueGet+0x34>
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d003      	beq.n	80067e0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80067d8:	f06f 0303 	mvn.w	r3, #3
 80067dc:	61fb      	str	r3, [r7, #28]
 80067de:	e037      	b.n	8006850 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80067e0:	2300      	movs	r3, #0
 80067e2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80067e4:	f107 0310 	add.w	r3, r7, #16
 80067e8:	461a      	mov	r2, r3
 80067ea:	68b9      	ldr	r1, [r7, #8]
 80067ec:	69b8      	ldr	r0, [r7, #24]
 80067ee:	f000 fcd7 	bl	80071a0 <xQueueReceiveFromISR>
 80067f2:	4603      	mov	r3, r0
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d003      	beq.n	8006800 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80067f8:	f06f 0302 	mvn.w	r3, #2
 80067fc:	61fb      	str	r3, [r7, #28]
 80067fe:	e027      	b.n	8006850 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d024      	beq.n	8006850 <osMessageQueueGet+0xac>
 8006806:	4b15      	ldr	r3, [pc, #84]	; (800685c <osMessageQueueGet+0xb8>)
 8006808:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800680c:	601a      	str	r2, [r3, #0]
 800680e:	f3bf 8f4f 	dsb	sy
 8006812:	f3bf 8f6f 	isb	sy
 8006816:	e01b      	b.n	8006850 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006818:	69bb      	ldr	r3, [r7, #24]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d002      	beq.n	8006824 <osMessageQueueGet+0x80>
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d103      	bne.n	800682c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8006824:	f06f 0303 	mvn.w	r3, #3
 8006828:	61fb      	str	r3, [r7, #28]
 800682a:	e011      	b.n	8006850 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800682c:	683a      	ldr	r2, [r7, #0]
 800682e:	68b9      	ldr	r1, [r7, #8]
 8006830:	69b8      	ldr	r0, [r7, #24]
 8006832:	f000 fbd5 	bl	8006fe0 <xQueueReceive>
 8006836:	4603      	mov	r3, r0
 8006838:	2b01      	cmp	r3, #1
 800683a:	d009      	beq.n	8006850 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d003      	beq.n	800684a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8006842:	f06f 0301 	mvn.w	r3, #1
 8006846:	61fb      	str	r3, [r7, #28]
 8006848:	e002      	b.n	8006850 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800684a:	f06f 0302 	mvn.w	r3, #2
 800684e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006850:	69fb      	ldr	r3, [r7, #28]
}
 8006852:	4618      	mov	r0, r3
 8006854:	3720      	adds	r7, #32
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}
 800685a:	bf00      	nop
 800685c:	e000ed04 	.word	0xe000ed04

08006860 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006860:	b480      	push	{r7}
 8006862:	b085      	sub	sp, #20
 8006864:	af00      	add	r7, sp, #0
 8006866:	60f8      	str	r0, [r7, #12]
 8006868:	60b9      	str	r1, [r7, #8]
 800686a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	4a07      	ldr	r2, [pc, #28]	; (800688c <vApplicationGetIdleTaskMemory+0x2c>)
 8006870:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	4a06      	ldr	r2, [pc, #24]	; (8006890 <vApplicationGetIdleTaskMemory+0x30>)
 8006876:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2280      	movs	r2, #128	; 0x80
 800687c:	601a      	str	r2, [r3, #0]
}
 800687e:	bf00      	nop
 8006880:	3714      	adds	r7, #20
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr
 800688a:	bf00      	nop
 800688c:	2000a8dc 	.word	0x2000a8dc
 8006890:	2000a938 	.word	0x2000a938

08006894 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006894:	b480      	push	{r7}
 8006896:	b085      	sub	sp, #20
 8006898:	af00      	add	r7, sp, #0
 800689a:	60f8      	str	r0, [r7, #12]
 800689c:	60b9      	str	r1, [r7, #8]
 800689e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	4a07      	ldr	r2, [pc, #28]	; (80068c0 <vApplicationGetTimerTaskMemory+0x2c>)
 80068a4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	4a06      	ldr	r2, [pc, #24]	; (80068c4 <vApplicationGetTimerTaskMemory+0x30>)
 80068aa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80068b2:	601a      	str	r2, [r3, #0]
}
 80068b4:	bf00      	nop
 80068b6:	3714      	adds	r7, #20
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr
 80068c0:	2000ab38 	.word	0x2000ab38
 80068c4:	2000ab94 	.word	0x2000ab94

080068c8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80068c8:	b480      	push	{r7}
 80068ca:	b083      	sub	sp, #12
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f103 0208 	add.w	r2, r3, #8
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80068e0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f103 0208 	add.w	r2, r3, #8
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f103 0208 	add.w	r2, r3, #8
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2200      	movs	r2, #0
 80068fa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80068fc:	bf00      	nop
 80068fe:	370c      	adds	r7, #12
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr

08006908 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006908:	b480      	push	{r7}
 800690a:	b083      	sub	sp, #12
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006916:	bf00      	nop
 8006918:	370c      	adds	r7, #12
 800691a:	46bd      	mov	sp, r7
 800691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006920:	4770      	bx	lr

08006922 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006922:	b480      	push	{r7}
 8006924:	b085      	sub	sp, #20
 8006926:	af00      	add	r7, sp, #0
 8006928:	6078      	str	r0, [r7, #4]
 800692a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	68fa      	ldr	r2, [r7, #12]
 8006936:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	689a      	ldr	r2, [r3, #8]
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	683a      	ldr	r2, [r7, #0]
 8006946:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	683a      	ldr	r2, [r7, #0]
 800694c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	1c5a      	adds	r2, r3, #1
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	601a      	str	r2, [r3, #0]
}
 800695e:	bf00      	nop
 8006960:	3714      	adds	r7, #20
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr

0800696a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800696a:	b480      	push	{r7}
 800696c:	b085      	sub	sp, #20
 800696e:	af00      	add	r7, sp, #0
 8006970:	6078      	str	r0, [r7, #4]
 8006972:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006980:	d103      	bne.n	800698a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	691b      	ldr	r3, [r3, #16]
 8006986:	60fb      	str	r3, [r7, #12]
 8006988:	e00c      	b.n	80069a4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	3308      	adds	r3, #8
 800698e:	60fb      	str	r3, [r7, #12]
 8006990:	e002      	b.n	8006998 <vListInsert+0x2e>
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	60fb      	str	r3, [r7, #12]
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	68ba      	ldr	r2, [r7, #8]
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d2f6      	bcs.n	8006992 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	685a      	ldr	r2, [r3, #4]
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	683a      	ldr	r2, [r7, #0]
 80069b2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	68fa      	ldr	r2, [r7, #12]
 80069b8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	683a      	ldr	r2, [r7, #0]
 80069be:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	1c5a      	adds	r2, r3, #1
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	601a      	str	r2, [r3, #0]
}
 80069d0:	bf00      	nop
 80069d2:	3714      	adds	r7, #20
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr

080069dc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80069dc:	b480      	push	{r7}
 80069de:	b085      	sub	sp, #20
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	691b      	ldr	r3, [r3, #16]
 80069e8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	687a      	ldr	r2, [r7, #4]
 80069f0:	6892      	ldr	r2, [r2, #8]
 80069f2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	6852      	ldr	r2, [r2, #4]
 80069fc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	687a      	ldr	r2, [r7, #4]
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d103      	bne.n	8006a10 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	689a      	ldr	r2, [r3, #8]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2200      	movs	r2, #0
 8006a14:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	1e5a      	subs	r2, r3, #1
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3714      	adds	r7, #20
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr

08006a30 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b084      	sub	sp, #16
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d10a      	bne.n	8006a5a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a48:	f383 8811 	msr	BASEPRI, r3
 8006a4c:	f3bf 8f6f 	isb	sy
 8006a50:	f3bf 8f4f 	dsb	sy
 8006a54:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006a56:	bf00      	nop
 8006a58:	e7fe      	b.n	8006a58 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006a5a:	f002 f90b 	bl	8008c74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681a      	ldr	r2, [r3, #0]
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a66:	68f9      	ldr	r1, [r7, #12]
 8006a68:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006a6a:	fb01 f303 	mul.w	r3, r1, r3
 8006a6e:	441a      	add	r2, r3
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2200      	movs	r2, #0
 8006a78:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a8a:	3b01      	subs	r3, #1
 8006a8c:	68f9      	ldr	r1, [r7, #12]
 8006a8e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006a90:	fb01 f303 	mul.w	r3, r1, r3
 8006a94:	441a      	add	r2, r3
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	22ff      	movs	r2, #255	; 0xff
 8006a9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	22ff      	movs	r2, #255	; 0xff
 8006aa6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d114      	bne.n	8006ada <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	691b      	ldr	r3, [r3, #16]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d01a      	beq.n	8006aee <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	3310      	adds	r3, #16
 8006abc:	4618      	mov	r0, r3
 8006abe:	f001 f9bd 	bl	8007e3c <xTaskRemoveFromEventList>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d012      	beq.n	8006aee <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006ac8:	4b0c      	ldr	r3, [pc, #48]	; (8006afc <xQueueGenericReset+0xcc>)
 8006aca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ace:	601a      	str	r2, [r3, #0]
 8006ad0:	f3bf 8f4f 	dsb	sy
 8006ad4:	f3bf 8f6f 	isb	sy
 8006ad8:	e009      	b.n	8006aee <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	3310      	adds	r3, #16
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f7ff fef2 	bl	80068c8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	3324      	adds	r3, #36	; 0x24
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f7ff feed 	bl	80068c8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006aee:	f002 f8f1 	bl	8008cd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006af2:	2301      	movs	r3, #1
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3710      	adds	r7, #16
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}
 8006afc:	e000ed04 	.word	0xe000ed04

08006b00 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b08e      	sub	sp, #56	; 0x38
 8006b04:	af02      	add	r7, sp, #8
 8006b06:	60f8      	str	r0, [r7, #12]
 8006b08:	60b9      	str	r1, [r7, #8]
 8006b0a:	607a      	str	r2, [r7, #4]
 8006b0c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d10a      	bne.n	8006b2a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b18:	f383 8811 	msr	BASEPRI, r3
 8006b1c:	f3bf 8f6f 	isb	sy
 8006b20:	f3bf 8f4f 	dsb	sy
 8006b24:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006b26:	bf00      	nop
 8006b28:	e7fe      	b.n	8006b28 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d10a      	bne.n	8006b46 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b34:	f383 8811 	msr	BASEPRI, r3
 8006b38:	f3bf 8f6f 	isb	sy
 8006b3c:	f3bf 8f4f 	dsb	sy
 8006b40:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006b42:	bf00      	nop
 8006b44:	e7fe      	b.n	8006b44 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d002      	beq.n	8006b52 <xQueueGenericCreateStatic+0x52>
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d001      	beq.n	8006b56 <xQueueGenericCreateStatic+0x56>
 8006b52:	2301      	movs	r3, #1
 8006b54:	e000      	b.n	8006b58 <xQueueGenericCreateStatic+0x58>
 8006b56:	2300      	movs	r3, #0
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d10a      	bne.n	8006b72 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b60:	f383 8811 	msr	BASEPRI, r3
 8006b64:	f3bf 8f6f 	isb	sy
 8006b68:	f3bf 8f4f 	dsb	sy
 8006b6c:	623b      	str	r3, [r7, #32]
}
 8006b6e:	bf00      	nop
 8006b70:	e7fe      	b.n	8006b70 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d102      	bne.n	8006b7e <xQueueGenericCreateStatic+0x7e>
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d101      	bne.n	8006b82 <xQueueGenericCreateStatic+0x82>
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e000      	b.n	8006b84 <xQueueGenericCreateStatic+0x84>
 8006b82:	2300      	movs	r3, #0
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d10a      	bne.n	8006b9e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b8c:	f383 8811 	msr	BASEPRI, r3
 8006b90:	f3bf 8f6f 	isb	sy
 8006b94:	f3bf 8f4f 	dsb	sy
 8006b98:	61fb      	str	r3, [r7, #28]
}
 8006b9a:	bf00      	nop
 8006b9c:	e7fe      	b.n	8006b9c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006b9e:	2350      	movs	r3, #80	; 0x50
 8006ba0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	2b50      	cmp	r3, #80	; 0x50
 8006ba6:	d00a      	beq.n	8006bbe <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bac:	f383 8811 	msr	BASEPRI, r3
 8006bb0:	f3bf 8f6f 	isb	sy
 8006bb4:	f3bf 8f4f 	dsb	sy
 8006bb8:	61bb      	str	r3, [r7, #24]
}
 8006bba:	bf00      	nop
 8006bbc:	e7fe      	b.n	8006bbc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006bbe:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d00d      	beq.n	8006be6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bcc:	2201      	movs	r2, #1
 8006bce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006bd2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bd8:	9300      	str	r3, [sp, #0]
 8006bda:	4613      	mov	r3, r2
 8006bdc:	687a      	ldr	r2, [r7, #4]
 8006bde:	68b9      	ldr	r1, [r7, #8]
 8006be0:	68f8      	ldr	r0, [r7, #12]
 8006be2:	f000 f83f 	bl	8006c64 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3730      	adds	r7, #48	; 0x30
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}

08006bf0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b08a      	sub	sp, #40	; 0x28
 8006bf4:	af02      	add	r7, sp, #8
 8006bf6:	60f8      	str	r0, [r7, #12]
 8006bf8:	60b9      	str	r1, [r7, #8]
 8006bfa:	4613      	mov	r3, r2
 8006bfc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d10a      	bne.n	8006c1a <xQueueGenericCreate+0x2a>
	__asm volatile
 8006c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c08:	f383 8811 	msr	BASEPRI, r3
 8006c0c:	f3bf 8f6f 	isb	sy
 8006c10:	f3bf 8f4f 	dsb	sy
 8006c14:	613b      	str	r3, [r7, #16]
}
 8006c16:	bf00      	nop
 8006c18:	e7fe      	b.n	8006c18 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	68ba      	ldr	r2, [r7, #8]
 8006c1e:	fb02 f303 	mul.w	r3, r2, r3
 8006c22:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006c24:	69fb      	ldr	r3, [r7, #28]
 8006c26:	3350      	adds	r3, #80	; 0x50
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f002 f945 	bl	8008eb8 <pvPortMalloc>
 8006c2e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006c30:	69bb      	ldr	r3, [r7, #24]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d011      	beq.n	8006c5a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006c36:	69bb      	ldr	r3, [r7, #24]
 8006c38:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	3350      	adds	r3, #80	; 0x50
 8006c3e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006c40:	69bb      	ldr	r3, [r7, #24]
 8006c42:	2200      	movs	r2, #0
 8006c44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006c48:	79fa      	ldrb	r2, [r7, #7]
 8006c4a:	69bb      	ldr	r3, [r7, #24]
 8006c4c:	9300      	str	r3, [sp, #0]
 8006c4e:	4613      	mov	r3, r2
 8006c50:	697a      	ldr	r2, [r7, #20]
 8006c52:	68b9      	ldr	r1, [r7, #8]
 8006c54:	68f8      	ldr	r0, [r7, #12]
 8006c56:	f000 f805 	bl	8006c64 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006c5a:	69bb      	ldr	r3, [r7, #24]
	}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3720      	adds	r7, #32
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}

08006c64 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b084      	sub	sp, #16
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	60f8      	str	r0, [r7, #12]
 8006c6c:	60b9      	str	r1, [r7, #8]
 8006c6e:	607a      	str	r2, [r7, #4]
 8006c70:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d103      	bne.n	8006c80 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006c78:	69bb      	ldr	r3, [r7, #24]
 8006c7a:	69ba      	ldr	r2, [r7, #24]
 8006c7c:	601a      	str	r2, [r3, #0]
 8006c7e:	e002      	b.n	8006c86 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006c80:	69bb      	ldr	r3, [r7, #24]
 8006c82:	687a      	ldr	r2, [r7, #4]
 8006c84:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006c86:	69bb      	ldr	r3, [r7, #24]
 8006c88:	68fa      	ldr	r2, [r7, #12]
 8006c8a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006c8c:	69bb      	ldr	r3, [r7, #24]
 8006c8e:	68ba      	ldr	r2, [r7, #8]
 8006c90:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006c92:	2101      	movs	r1, #1
 8006c94:	69b8      	ldr	r0, [r7, #24]
 8006c96:	f7ff fecb 	bl	8006a30 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006c9a:	69bb      	ldr	r3, [r7, #24]
 8006c9c:	78fa      	ldrb	r2, [r7, #3]
 8006c9e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006ca2:	bf00      	nop
 8006ca4:	3710      	adds	r7, #16
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}
	...

08006cac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b08e      	sub	sp, #56	; 0x38
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	60f8      	str	r0, [r7, #12]
 8006cb4:	60b9      	str	r1, [r7, #8]
 8006cb6:	607a      	str	r2, [r7, #4]
 8006cb8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d10a      	bne.n	8006cde <xQueueGenericSend+0x32>
	__asm volatile
 8006cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ccc:	f383 8811 	msr	BASEPRI, r3
 8006cd0:	f3bf 8f6f 	isb	sy
 8006cd4:	f3bf 8f4f 	dsb	sy
 8006cd8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006cda:	bf00      	nop
 8006cdc:	e7fe      	b.n	8006cdc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d103      	bne.n	8006cec <xQueueGenericSend+0x40>
 8006ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d101      	bne.n	8006cf0 <xQueueGenericSend+0x44>
 8006cec:	2301      	movs	r3, #1
 8006cee:	e000      	b.n	8006cf2 <xQueueGenericSend+0x46>
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d10a      	bne.n	8006d0c <xQueueGenericSend+0x60>
	__asm volatile
 8006cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cfa:	f383 8811 	msr	BASEPRI, r3
 8006cfe:	f3bf 8f6f 	isb	sy
 8006d02:	f3bf 8f4f 	dsb	sy
 8006d06:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006d08:	bf00      	nop
 8006d0a:	e7fe      	b.n	8006d0a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	2b02      	cmp	r3, #2
 8006d10:	d103      	bne.n	8006d1a <xQueueGenericSend+0x6e>
 8006d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d16:	2b01      	cmp	r3, #1
 8006d18:	d101      	bne.n	8006d1e <xQueueGenericSend+0x72>
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	e000      	b.n	8006d20 <xQueueGenericSend+0x74>
 8006d1e:	2300      	movs	r3, #0
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d10a      	bne.n	8006d3a <xQueueGenericSend+0x8e>
	__asm volatile
 8006d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d28:	f383 8811 	msr	BASEPRI, r3
 8006d2c:	f3bf 8f6f 	isb	sy
 8006d30:	f3bf 8f4f 	dsb	sy
 8006d34:	623b      	str	r3, [r7, #32]
}
 8006d36:	bf00      	nop
 8006d38:	e7fe      	b.n	8006d38 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d3a:	f001 fa3d 	bl	80081b8 <xTaskGetSchedulerState>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d102      	bne.n	8006d4a <xQueueGenericSend+0x9e>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d101      	bne.n	8006d4e <xQueueGenericSend+0xa2>
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	e000      	b.n	8006d50 <xQueueGenericSend+0xa4>
 8006d4e:	2300      	movs	r3, #0
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d10a      	bne.n	8006d6a <xQueueGenericSend+0xbe>
	__asm volatile
 8006d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d58:	f383 8811 	msr	BASEPRI, r3
 8006d5c:	f3bf 8f6f 	isb	sy
 8006d60:	f3bf 8f4f 	dsb	sy
 8006d64:	61fb      	str	r3, [r7, #28]
}
 8006d66:	bf00      	nop
 8006d68:	e7fe      	b.n	8006d68 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006d6a:	f001 ff83 	bl	8008c74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d76:	429a      	cmp	r2, r3
 8006d78:	d302      	bcc.n	8006d80 <xQueueGenericSend+0xd4>
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	2b02      	cmp	r3, #2
 8006d7e:	d129      	bne.n	8006dd4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006d80:	683a      	ldr	r2, [r7, #0]
 8006d82:	68b9      	ldr	r1, [r7, #8]
 8006d84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d86:	f000 fa8b 	bl	80072a0 <prvCopyDataToQueue>
 8006d8a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d010      	beq.n	8006db6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d96:	3324      	adds	r3, #36	; 0x24
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f001 f84f 	bl	8007e3c <xTaskRemoveFromEventList>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d013      	beq.n	8006dcc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006da4:	4b3f      	ldr	r3, [pc, #252]	; (8006ea4 <xQueueGenericSend+0x1f8>)
 8006da6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006daa:	601a      	str	r2, [r3, #0]
 8006dac:	f3bf 8f4f 	dsb	sy
 8006db0:	f3bf 8f6f 	isb	sy
 8006db4:	e00a      	b.n	8006dcc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d007      	beq.n	8006dcc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006dbc:	4b39      	ldr	r3, [pc, #228]	; (8006ea4 <xQueueGenericSend+0x1f8>)
 8006dbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dc2:	601a      	str	r2, [r3, #0]
 8006dc4:	f3bf 8f4f 	dsb	sy
 8006dc8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006dcc:	f001 ff82 	bl	8008cd4 <vPortExitCritical>
				return pdPASS;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	e063      	b.n	8006e9c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d103      	bne.n	8006de2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006dda:	f001 ff7b 	bl	8008cd4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006dde:	2300      	movs	r3, #0
 8006de0:	e05c      	b.n	8006e9c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d106      	bne.n	8006df6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006de8:	f107 0314 	add.w	r3, r7, #20
 8006dec:	4618      	mov	r0, r3
 8006dee:	f001 f889 	bl	8007f04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006df2:	2301      	movs	r3, #1
 8006df4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006df6:	f001 ff6d 	bl	8008cd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006dfa:	f000 fdfb 	bl	80079f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006dfe:	f001 ff39 	bl	8008c74 <vPortEnterCritical>
 8006e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e08:	b25b      	sxtb	r3, r3
 8006e0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e0e:	d103      	bne.n	8006e18 <xQueueGenericSend+0x16c>
 8006e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e12:	2200      	movs	r2, #0
 8006e14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e1e:	b25b      	sxtb	r3, r3
 8006e20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e24:	d103      	bne.n	8006e2e <xQueueGenericSend+0x182>
 8006e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e2e:	f001 ff51 	bl	8008cd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e32:	1d3a      	adds	r2, r7, #4
 8006e34:	f107 0314 	add.w	r3, r7, #20
 8006e38:	4611      	mov	r1, r2
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f001 f878 	bl	8007f30 <xTaskCheckForTimeOut>
 8006e40:	4603      	mov	r3, r0
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d124      	bne.n	8006e90 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006e46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e48:	f000 fb22 	bl	8007490 <prvIsQueueFull>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d018      	beq.n	8006e84 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e54:	3310      	adds	r3, #16
 8006e56:	687a      	ldr	r2, [r7, #4]
 8006e58:	4611      	mov	r1, r2
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f000 ff9e 	bl	8007d9c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006e60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e62:	f000 faad 	bl	80073c0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006e66:	f000 fdd3 	bl	8007a10 <xTaskResumeAll>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	f47f af7c 	bne.w	8006d6a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006e72:	4b0c      	ldr	r3, [pc, #48]	; (8006ea4 <xQueueGenericSend+0x1f8>)
 8006e74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e78:	601a      	str	r2, [r3, #0]
 8006e7a:	f3bf 8f4f 	dsb	sy
 8006e7e:	f3bf 8f6f 	isb	sy
 8006e82:	e772      	b.n	8006d6a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006e84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e86:	f000 fa9b 	bl	80073c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006e8a:	f000 fdc1 	bl	8007a10 <xTaskResumeAll>
 8006e8e:	e76c      	b.n	8006d6a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006e90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e92:	f000 fa95 	bl	80073c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006e96:	f000 fdbb 	bl	8007a10 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006e9a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3738      	adds	r7, #56	; 0x38
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}
 8006ea4:	e000ed04 	.word	0xe000ed04

08006ea8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b090      	sub	sp, #64	; 0x40
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	60b9      	str	r1, [r7, #8]
 8006eb2:	607a      	str	r2, [r7, #4]
 8006eb4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d10a      	bne.n	8006ed6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec4:	f383 8811 	msr	BASEPRI, r3
 8006ec8:	f3bf 8f6f 	isb	sy
 8006ecc:	f3bf 8f4f 	dsb	sy
 8006ed0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006ed2:	bf00      	nop
 8006ed4:	e7fe      	b.n	8006ed4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d103      	bne.n	8006ee4 <xQueueGenericSendFromISR+0x3c>
 8006edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d101      	bne.n	8006ee8 <xQueueGenericSendFromISR+0x40>
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	e000      	b.n	8006eea <xQueueGenericSendFromISR+0x42>
 8006ee8:	2300      	movs	r3, #0
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d10a      	bne.n	8006f04 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef2:	f383 8811 	msr	BASEPRI, r3
 8006ef6:	f3bf 8f6f 	isb	sy
 8006efa:	f3bf 8f4f 	dsb	sy
 8006efe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006f00:	bf00      	nop
 8006f02:	e7fe      	b.n	8006f02 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	2b02      	cmp	r3, #2
 8006f08:	d103      	bne.n	8006f12 <xQueueGenericSendFromISR+0x6a>
 8006f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f0e:	2b01      	cmp	r3, #1
 8006f10:	d101      	bne.n	8006f16 <xQueueGenericSendFromISR+0x6e>
 8006f12:	2301      	movs	r3, #1
 8006f14:	e000      	b.n	8006f18 <xQueueGenericSendFromISR+0x70>
 8006f16:	2300      	movs	r3, #0
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d10a      	bne.n	8006f32 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f20:	f383 8811 	msr	BASEPRI, r3
 8006f24:	f3bf 8f6f 	isb	sy
 8006f28:	f3bf 8f4f 	dsb	sy
 8006f2c:	623b      	str	r3, [r7, #32]
}
 8006f2e:	bf00      	nop
 8006f30:	e7fe      	b.n	8006f30 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006f32:	f001 ff81 	bl	8008e38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006f36:	f3ef 8211 	mrs	r2, BASEPRI
 8006f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f3e:	f383 8811 	msr	BASEPRI, r3
 8006f42:	f3bf 8f6f 	isb	sy
 8006f46:	f3bf 8f4f 	dsb	sy
 8006f4a:	61fa      	str	r2, [r7, #28]
 8006f4c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006f4e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006f50:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d302      	bcc.n	8006f64 <xQueueGenericSendFromISR+0xbc>
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	2b02      	cmp	r3, #2
 8006f62:	d12f      	bne.n	8006fc4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f72:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006f74:	683a      	ldr	r2, [r7, #0]
 8006f76:	68b9      	ldr	r1, [r7, #8]
 8006f78:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006f7a:	f000 f991 	bl	80072a0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006f7e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006f82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f86:	d112      	bne.n	8006fae <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d016      	beq.n	8006fbe <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f92:	3324      	adds	r3, #36	; 0x24
 8006f94:	4618      	mov	r0, r3
 8006f96:	f000 ff51 	bl	8007e3c <xTaskRemoveFromEventList>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d00e      	beq.n	8006fbe <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d00b      	beq.n	8006fbe <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2201      	movs	r2, #1
 8006faa:	601a      	str	r2, [r3, #0]
 8006fac:	e007      	b.n	8006fbe <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006fae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006fb2:	3301      	adds	r3, #1
 8006fb4:	b2db      	uxtb	r3, r3
 8006fb6:	b25a      	sxtb	r2, r3
 8006fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006fc2:	e001      	b.n	8006fc8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fca:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006fd2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006fd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3740      	adds	r7, #64	; 0x40
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}
	...

08006fe0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b08c      	sub	sp, #48	; 0x30
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	60f8      	str	r0, [r7, #12]
 8006fe8:	60b9      	str	r1, [r7, #8]
 8006fea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006fec:	2300      	movs	r3, #0
 8006fee:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d10a      	bne.n	8007010 <xQueueReceive+0x30>
	__asm volatile
 8006ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ffe:	f383 8811 	msr	BASEPRI, r3
 8007002:	f3bf 8f6f 	isb	sy
 8007006:	f3bf 8f4f 	dsb	sy
 800700a:	623b      	str	r3, [r7, #32]
}
 800700c:	bf00      	nop
 800700e:	e7fe      	b.n	800700e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d103      	bne.n	800701e <xQueueReceive+0x3e>
 8007016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800701a:	2b00      	cmp	r3, #0
 800701c:	d101      	bne.n	8007022 <xQueueReceive+0x42>
 800701e:	2301      	movs	r3, #1
 8007020:	e000      	b.n	8007024 <xQueueReceive+0x44>
 8007022:	2300      	movs	r3, #0
 8007024:	2b00      	cmp	r3, #0
 8007026:	d10a      	bne.n	800703e <xQueueReceive+0x5e>
	__asm volatile
 8007028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800702c:	f383 8811 	msr	BASEPRI, r3
 8007030:	f3bf 8f6f 	isb	sy
 8007034:	f3bf 8f4f 	dsb	sy
 8007038:	61fb      	str	r3, [r7, #28]
}
 800703a:	bf00      	nop
 800703c:	e7fe      	b.n	800703c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800703e:	f001 f8bb 	bl	80081b8 <xTaskGetSchedulerState>
 8007042:	4603      	mov	r3, r0
 8007044:	2b00      	cmp	r3, #0
 8007046:	d102      	bne.n	800704e <xQueueReceive+0x6e>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d101      	bne.n	8007052 <xQueueReceive+0x72>
 800704e:	2301      	movs	r3, #1
 8007050:	e000      	b.n	8007054 <xQueueReceive+0x74>
 8007052:	2300      	movs	r3, #0
 8007054:	2b00      	cmp	r3, #0
 8007056:	d10a      	bne.n	800706e <xQueueReceive+0x8e>
	__asm volatile
 8007058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800705c:	f383 8811 	msr	BASEPRI, r3
 8007060:	f3bf 8f6f 	isb	sy
 8007064:	f3bf 8f4f 	dsb	sy
 8007068:	61bb      	str	r3, [r7, #24]
}
 800706a:	bf00      	nop
 800706c:	e7fe      	b.n	800706c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800706e:	f001 fe01 	bl	8008c74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007076:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800707a:	2b00      	cmp	r3, #0
 800707c:	d01f      	beq.n	80070be <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800707e:	68b9      	ldr	r1, [r7, #8]
 8007080:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007082:	f000 f977 	bl	8007374 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007088:	1e5a      	subs	r2, r3, #1
 800708a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800708c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800708e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007090:	691b      	ldr	r3, [r3, #16]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d00f      	beq.n	80070b6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007098:	3310      	adds	r3, #16
 800709a:	4618      	mov	r0, r3
 800709c:	f000 fece 	bl	8007e3c <xTaskRemoveFromEventList>
 80070a0:	4603      	mov	r3, r0
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d007      	beq.n	80070b6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80070a6:	4b3d      	ldr	r3, [pc, #244]	; (800719c <xQueueReceive+0x1bc>)
 80070a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070ac:	601a      	str	r2, [r3, #0]
 80070ae:	f3bf 8f4f 	dsb	sy
 80070b2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80070b6:	f001 fe0d 	bl	8008cd4 <vPortExitCritical>
				return pdPASS;
 80070ba:	2301      	movs	r3, #1
 80070bc:	e069      	b.n	8007192 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d103      	bne.n	80070cc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80070c4:	f001 fe06 	bl	8008cd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80070c8:	2300      	movs	r3, #0
 80070ca:	e062      	b.n	8007192 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80070cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d106      	bne.n	80070e0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80070d2:	f107 0310 	add.w	r3, r7, #16
 80070d6:	4618      	mov	r0, r3
 80070d8:	f000 ff14 	bl	8007f04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80070dc:	2301      	movs	r3, #1
 80070de:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80070e0:	f001 fdf8 	bl	8008cd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80070e4:	f000 fc86 	bl	80079f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80070e8:	f001 fdc4 	bl	8008c74 <vPortEnterCritical>
 80070ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80070f2:	b25b      	sxtb	r3, r3
 80070f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070f8:	d103      	bne.n	8007102 <xQueueReceive+0x122>
 80070fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070fc:	2200      	movs	r2, #0
 80070fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007104:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007108:	b25b      	sxtb	r3, r3
 800710a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800710e:	d103      	bne.n	8007118 <xQueueReceive+0x138>
 8007110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007112:	2200      	movs	r2, #0
 8007114:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007118:	f001 fddc 	bl	8008cd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800711c:	1d3a      	adds	r2, r7, #4
 800711e:	f107 0310 	add.w	r3, r7, #16
 8007122:	4611      	mov	r1, r2
 8007124:	4618      	mov	r0, r3
 8007126:	f000 ff03 	bl	8007f30 <xTaskCheckForTimeOut>
 800712a:	4603      	mov	r3, r0
 800712c:	2b00      	cmp	r3, #0
 800712e:	d123      	bne.n	8007178 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007130:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007132:	f000 f997 	bl	8007464 <prvIsQueueEmpty>
 8007136:	4603      	mov	r3, r0
 8007138:	2b00      	cmp	r3, #0
 800713a:	d017      	beq.n	800716c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800713c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800713e:	3324      	adds	r3, #36	; 0x24
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	4611      	mov	r1, r2
 8007144:	4618      	mov	r0, r3
 8007146:	f000 fe29 	bl	8007d9c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800714a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800714c:	f000 f938 	bl	80073c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007150:	f000 fc5e 	bl	8007a10 <xTaskResumeAll>
 8007154:	4603      	mov	r3, r0
 8007156:	2b00      	cmp	r3, #0
 8007158:	d189      	bne.n	800706e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800715a:	4b10      	ldr	r3, [pc, #64]	; (800719c <xQueueReceive+0x1bc>)
 800715c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007160:	601a      	str	r2, [r3, #0]
 8007162:	f3bf 8f4f 	dsb	sy
 8007166:	f3bf 8f6f 	isb	sy
 800716a:	e780      	b.n	800706e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800716c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800716e:	f000 f927 	bl	80073c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007172:	f000 fc4d 	bl	8007a10 <xTaskResumeAll>
 8007176:	e77a      	b.n	800706e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007178:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800717a:	f000 f921 	bl	80073c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800717e:	f000 fc47 	bl	8007a10 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007182:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007184:	f000 f96e 	bl	8007464 <prvIsQueueEmpty>
 8007188:	4603      	mov	r3, r0
 800718a:	2b00      	cmp	r3, #0
 800718c:	f43f af6f 	beq.w	800706e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007190:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007192:	4618      	mov	r0, r3
 8007194:	3730      	adds	r7, #48	; 0x30
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}
 800719a:	bf00      	nop
 800719c:	e000ed04 	.word	0xe000ed04

080071a0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b08e      	sub	sp, #56	; 0x38
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	60f8      	str	r0, [r7, #12]
 80071a8:	60b9      	str	r1, [r7, #8]
 80071aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80071b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d10a      	bne.n	80071cc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80071b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ba:	f383 8811 	msr	BASEPRI, r3
 80071be:	f3bf 8f6f 	isb	sy
 80071c2:	f3bf 8f4f 	dsb	sy
 80071c6:	623b      	str	r3, [r7, #32]
}
 80071c8:	bf00      	nop
 80071ca:	e7fe      	b.n	80071ca <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d103      	bne.n	80071da <xQueueReceiveFromISR+0x3a>
 80071d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d101      	bne.n	80071de <xQueueReceiveFromISR+0x3e>
 80071da:	2301      	movs	r3, #1
 80071dc:	e000      	b.n	80071e0 <xQueueReceiveFromISR+0x40>
 80071de:	2300      	movs	r3, #0
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d10a      	bne.n	80071fa <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80071e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e8:	f383 8811 	msr	BASEPRI, r3
 80071ec:	f3bf 8f6f 	isb	sy
 80071f0:	f3bf 8f4f 	dsb	sy
 80071f4:	61fb      	str	r3, [r7, #28]
}
 80071f6:	bf00      	nop
 80071f8:	e7fe      	b.n	80071f8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80071fa:	f001 fe1d 	bl	8008e38 <vPortValidateInterruptPriority>
	__asm volatile
 80071fe:	f3ef 8211 	mrs	r2, BASEPRI
 8007202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007206:	f383 8811 	msr	BASEPRI, r3
 800720a:	f3bf 8f6f 	isb	sy
 800720e:	f3bf 8f4f 	dsb	sy
 8007212:	61ba      	str	r2, [r7, #24]
 8007214:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007216:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007218:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800721a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800721c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800721e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007222:	2b00      	cmp	r3, #0
 8007224:	d02f      	beq.n	8007286 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007228:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800722c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007230:	68b9      	ldr	r1, [r7, #8]
 8007232:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007234:	f000 f89e 	bl	8007374 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800723a:	1e5a      	subs	r2, r3, #1
 800723c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800723e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007240:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007244:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007248:	d112      	bne.n	8007270 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800724a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800724c:	691b      	ldr	r3, [r3, #16]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d016      	beq.n	8007280 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007254:	3310      	adds	r3, #16
 8007256:	4618      	mov	r0, r3
 8007258:	f000 fdf0 	bl	8007e3c <xTaskRemoveFromEventList>
 800725c:	4603      	mov	r3, r0
 800725e:	2b00      	cmp	r3, #0
 8007260:	d00e      	beq.n	8007280 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d00b      	beq.n	8007280 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2201      	movs	r2, #1
 800726c:	601a      	str	r2, [r3, #0]
 800726e:	e007      	b.n	8007280 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007270:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007274:	3301      	adds	r3, #1
 8007276:	b2db      	uxtb	r3, r3
 8007278:	b25a      	sxtb	r2, r3
 800727a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800727c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007280:	2301      	movs	r3, #1
 8007282:	637b      	str	r3, [r7, #52]	; 0x34
 8007284:	e001      	b.n	800728a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8007286:	2300      	movs	r3, #0
 8007288:	637b      	str	r3, [r7, #52]	; 0x34
 800728a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800728c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	f383 8811 	msr	BASEPRI, r3
}
 8007294:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007298:	4618      	mov	r0, r3
 800729a:	3738      	adds	r7, #56	; 0x38
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}

080072a0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b086      	sub	sp, #24
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	60f8      	str	r0, [r7, #12]
 80072a8:	60b9      	str	r1, [r7, #8]
 80072aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80072ac:	2300      	movs	r3, #0
 80072ae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072b4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d10d      	bne.n	80072da <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d14d      	bne.n	8007362 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	4618      	mov	r0, r3
 80072cc:	f000 ff92 	bl	80081f4 <xTaskPriorityDisinherit>
 80072d0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2200      	movs	r2, #0
 80072d6:	609a      	str	r2, [r3, #8]
 80072d8:	e043      	b.n	8007362 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d119      	bne.n	8007314 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	6858      	ldr	r0, [r3, #4]
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e8:	461a      	mov	r2, r3
 80072ea:	68b9      	ldr	r1, [r7, #8]
 80072ec:	f002 f80c 	bl	8009308 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	685a      	ldr	r2, [r3, #4]
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072f8:	441a      	add	r2, r3
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	685a      	ldr	r2, [r3, #4]
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	429a      	cmp	r2, r3
 8007308:	d32b      	bcc.n	8007362 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681a      	ldr	r2, [r3, #0]
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	605a      	str	r2, [r3, #4]
 8007312:	e026      	b.n	8007362 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	68d8      	ldr	r0, [r3, #12]
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800731c:	461a      	mov	r2, r3
 800731e:	68b9      	ldr	r1, [r7, #8]
 8007320:	f001 fff2 	bl	8009308 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	68da      	ldr	r2, [r3, #12]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800732c:	425b      	negs	r3, r3
 800732e:	441a      	add	r2, r3
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	68da      	ldr	r2, [r3, #12]
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	429a      	cmp	r2, r3
 800733e:	d207      	bcs.n	8007350 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	689a      	ldr	r2, [r3, #8]
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007348:	425b      	negs	r3, r3
 800734a:	441a      	add	r2, r3
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2b02      	cmp	r3, #2
 8007354:	d105      	bne.n	8007362 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d002      	beq.n	8007362 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	3b01      	subs	r3, #1
 8007360:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	1c5a      	adds	r2, r3, #1
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800736a:	697b      	ldr	r3, [r7, #20]
}
 800736c:	4618      	mov	r0, r3
 800736e:	3718      	adds	r7, #24
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}

08007374 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b082      	sub	sp, #8
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007382:	2b00      	cmp	r3, #0
 8007384:	d018      	beq.n	80073b8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	68da      	ldr	r2, [r3, #12]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800738e:	441a      	add	r2, r3
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	68da      	ldr	r2, [r3, #12]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	689b      	ldr	r3, [r3, #8]
 800739c:	429a      	cmp	r2, r3
 800739e:	d303      	bcc.n	80073a8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681a      	ldr	r2, [r3, #0]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	68d9      	ldr	r1, [r3, #12]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b0:	461a      	mov	r2, r3
 80073b2:	6838      	ldr	r0, [r7, #0]
 80073b4:	f001 ffa8 	bl	8009308 <memcpy>
	}
}
 80073b8:	bf00      	nop
 80073ba:	3708      	adds	r7, #8
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}

080073c0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b084      	sub	sp, #16
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80073c8:	f001 fc54 	bl	8008c74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80073d2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80073d4:	e011      	b.n	80073fa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d012      	beq.n	8007404 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	3324      	adds	r3, #36	; 0x24
 80073e2:	4618      	mov	r0, r3
 80073e4:	f000 fd2a 	bl	8007e3c <xTaskRemoveFromEventList>
 80073e8:	4603      	mov	r3, r0
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d001      	beq.n	80073f2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80073ee:	f000 fe01 	bl	8007ff4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80073f2:	7bfb      	ldrb	r3, [r7, #15]
 80073f4:	3b01      	subs	r3, #1
 80073f6:	b2db      	uxtb	r3, r3
 80073f8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80073fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	dce9      	bgt.n	80073d6 <prvUnlockQueue+0x16>
 8007402:	e000      	b.n	8007406 <prvUnlockQueue+0x46>
					break;
 8007404:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	22ff      	movs	r2, #255	; 0xff
 800740a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800740e:	f001 fc61 	bl	8008cd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007412:	f001 fc2f 	bl	8008c74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800741c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800741e:	e011      	b.n	8007444 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	691b      	ldr	r3, [r3, #16]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d012      	beq.n	800744e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	3310      	adds	r3, #16
 800742c:	4618      	mov	r0, r3
 800742e:	f000 fd05 	bl	8007e3c <xTaskRemoveFromEventList>
 8007432:	4603      	mov	r3, r0
 8007434:	2b00      	cmp	r3, #0
 8007436:	d001      	beq.n	800743c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007438:	f000 fddc 	bl	8007ff4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800743c:	7bbb      	ldrb	r3, [r7, #14]
 800743e:	3b01      	subs	r3, #1
 8007440:	b2db      	uxtb	r3, r3
 8007442:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007444:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007448:	2b00      	cmp	r3, #0
 800744a:	dce9      	bgt.n	8007420 <prvUnlockQueue+0x60>
 800744c:	e000      	b.n	8007450 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800744e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	22ff      	movs	r2, #255	; 0xff
 8007454:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007458:	f001 fc3c 	bl	8008cd4 <vPortExitCritical>
}
 800745c:	bf00      	nop
 800745e:	3710      	adds	r7, #16
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b084      	sub	sp, #16
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800746c:	f001 fc02 	bl	8008c74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007474:	2b00      	cmp	r3, #0
 8007476:	d102      	bne.n	800747e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007478:	2301      	movs	r3, #1
 800747a:	60fb      	str	r3, [r7, #12]
 800747c:	e001      	b.n	8007482 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800747e:	2300      	movs	r3, #0
 8007480:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007482:	f001 fc27 	bl	8008cd4 <vPortExitCritical>

	return xReturn;
 8007486:	68fb      	ldr	r3, [r7, #12]
}
 8007488:	4618      	mov	r0, r3
 800748a:	3710      	adds	r7, #16
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}

08007490 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b084      	sub	sp, #16
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007498:	f001 fbec 	bl	8008c74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074a4:	429a      	cmp	r2, r3
 80074a6:	d102      	bne.n	80074ae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80074a8:	2301      	movs	r3, #1
 80074aa:	60fb      	str	r3, [r7, #12]
 80074ac:	e001      	b.n	80074b2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80074ae:	2300      	movs	r3, #0
 80074b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80074b2:	f001 fc0f 	bl	8008cd4 <vPortExitCritical>

	return xReturn;
 80074b6:	68fb      	ldr	r3, [r7, #12]
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3710      	adds	r7, #16
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80074c0:	b480      	push	{r7}
 80074c2:	b085      	sub	sp, #20
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80074ca:	2300      	movs	r3, #0
 80074cc:	60fb      	str	r3, [r7, #12]
 80074ce:	e014      	b.n	80074fa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80074d0:	4a0f      	ldr	r2, [pc, #60]	; (8007510 <vQueueAddToRegistry+0x50>)
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d10b      	bne.n	80074f4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80074dc:	490c      	ldr	r1, [pc, #48]	; (8007510 <vQueueAddToRegistry+0x50>)
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	683a      	ldr	r2, [r7, #0]
 80074e2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80074e6:	4a0a      	ldr	r2, [pc, #40]	; (8007510 <vQueueAddToRegistry+0x50>)
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	00db      	lsls	r3, r3, #3
 80074ec:	4413      	add	r3, r2
 80074ee:	687a      	ldr	r2, [r7, #4]
 80074f0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80074f2:	e006      	b.n	8007502 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	3301      	adds	r3, #1
 80074f8:	60fb      	str	r3, [r7, #12]
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2b07      	cmp	r3, #7
 80074fe:	d9e7      	bls.n	80074d0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007500:	bf00      	nop
 8007502:	bf00      	nop
 8007504:	3714      	adds	r7, #20
 8007506:	46bd      	mov	sp, r7
 8007508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750c:	4770      	bx	lr
 800750e:	bf00      	nop
 8007510:	2000af94 	.word	0x2000af94

08007514 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007514:	b580      	push	{r7, lr}
 8007516:	b086      	sub	sp, #24
 8007518:	af00      	add	r7, sp, #0
 800751a:	60f8      	str	r0, [r7, #12]
 800751c:	60b9      	str	r1, [r7, #8]
 800751e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007524:	f001 fba6 	bl	8008c74 <vPortEnterCritical>
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800752e:	b25b      	sxtb	r3, r3
 8007530:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007534:	d103      	bne.n	800753e <vQueueWaitForMessageRestricted+0x2a>
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	2200      	movs	r2, #0
 800753a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007544:	b25b      	sxtb	r3, r3
 8007546:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800754a:	d103      	bne.n	8007554 <vQueueWaitForMessageRestricted+0x40>
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	2200      	movs	r2, #0
 8007550:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007554:	f001 fbbe 	bl	8008cd4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800755c:	2b00      	cmp	r3, #0
 800755e:	d106      	bne.n	800756e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	3324      	adds	r3, #36	; 0x24
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	68b9      	ldr	r1, [r7, #8]
 8007568:	4618      	mov	r0, r3
 800756a:	f000 fc3b 	bl	8007de4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800756e:	6978      	ldr	r0, [r7, #20]
 8007570:	f7ff ff26 	bl	80073c0 <prvUnlockQueue>
	}
 8007574:	bf00      	nop
 8007576:	3718      	adds	r7, #24
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}

0800757c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800757c:	b580      	push	{r7, lr}
 800757e:	b08e      	sub	sp, #56	; 0x38
 8007580:	af04      	add	r7, sp, #16
 8007582:	60f8      	str	r0, [r7, #12]
 8007584:	60b9      	str	r1, [r7, #8]
 8007586:	607a      	str	r2, [r7, #4]
 8007588:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800758a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800758c:	2b00      	cmp	r3, #0
 800758e:	d10a      	bne.n	80075a6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8007590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007594:	f383 8811 	msr	BASEPRI, r3
 8007598:	f3bf 8f6f 	isb	sy
 800759c:	f3bf 8f4f 	dsb	sy
 80075a0:	623b      	str	r3, [r7, #32]
}
 80075a2:	bf00      	nop
 80075a4:	e7fe      	b.n	80075a4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80075a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d10a      	bne.n	80075c2 <xTaskCreateStatic+0x46>
	__asm volatile
 80075ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b0:	f383 8811 	msr	BASEPRI, r3
 80075b4:	f3bf 8f6f 	isb	sy
 80075b8:	f3bf 8f4f 	dsb	sy
 80075bc:	61fb      	str	r3, [r7, #28]
}
 80075be:	bf00      	nop
 80075c0:	e7fe      	b.n	80075c0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80075c2:	235c      	movs	r3, #92	; 0x5c
 80075c4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	2b5c      	cmp	r3, #92	; 0x5c
 80075ca:	d00a      	beq.n	80075e2 <xTaskCreateStatic+0x66>
	__asm volatile
 80075cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075d0:	f383 8811 	msr	BASEPRI, r3
 80075d4:	f3bf 8f6f 	isb	sy
 80075d8:	f3bf 8f4f 	dsb	sy
 80075dc:	61bb      	str	r3, [r7, #24]
}
 80075de:	bf00      	nop
 80075e0:	e7fe      	b.n	80075e0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80075e2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80075e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d01e      	beq.n	8007628 <xTaskCreateStatic+0xac>
 80075ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d01b      	beq.n	8007628 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80075f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075f2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80075f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80075f8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80075fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fc:	2202      	movs	r2, #2
 80075fe:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007602:	2300      	movs	r3, #0
 8007604:	9303      	str	r3, [sp, #12]
 8007606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007608:	9302      	str	r3, [sp, #8]
 800760a:	f107 0314 	add.w	r3, r7, #20
 800760e:	9301      	str	r3, [sp, #4]
 8007610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007612:	9300      	str	r3, [sp, #0]
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	687a      	ldr	r2, [r7, #4]
 8007618:	68b9      	ldr	r1, [r7, #8]
 800761a:	68f8      	ldr	r0, [r7, #12]
 800761c:	f000 f850 	bl	80076c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007620:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007622:	f000 f8dd 	bl	80077e0 <prvAddNewTaskToReadyList>
 8007626:	e001      	b.n	800762c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007628:	2300      	movs	r3, #0
 800762a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800762c:	697b      	ldr	r3, [r7, #20]
	}
 800762e:	4618      	mov	r0, r3
 8007630:	3728      	adds	r7, #40	; 0x28
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}

08007636 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007636:	b580      	push	{r7, lr}
 8007638:	b08c      	sub	sp, #48	; 0x30
 800763a:	af04      	add	r7, sp, #16
 800763c:	60f8      	str	r0, [r7, #12]
 800763e:	60b9      	str	r1, [r7, #8]
 8007640:	603b      	str	r3, [r7, #0]
 8007642:	4613      	mov	r3, r2
 8007644:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007646:	88fb      	ldrh	r3, [r7, #6]
 8007648:	009b      	lsls	r3, r3, #2
 800764a:	4618      	mov	r0, r3
 800764c:	f001 fc34 	bl	8008eb8 <pvPortMalloc>
 8007650:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d00e      	beq.n	8007676 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007658:	205c      	movs	r0, #92	; 0x5c
 800765a:	f001 fc2d 	bl	8008eb8 <pvPortMalloc>
 800765e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007660:	69fb      	ldr	r3, [r7, #28]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d003      	beq.n	800766e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007666:	69fb      	ldr	r3, [r7, #28]
 8007668:	697a      	ldr	r2, [r7, #20]
 800766a:	631a      	str	r2, [r3, #48]	; 0x30
 800766c:	e005      	b.n	800767a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800766e:	6978      	ldr	r0, [r7, #20]
 8007670:	f001 fcee 	bl	8009050 <vPortFree>
 8007674:	e001      	b.n	800767a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007676:	2300      	movs	r3, #0
 8007678:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800767a:	69fb      	ldr	r3, [r7, #28]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d017      	beq.n	80076b0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007680:	69fb      	ldr	r3, [r7, #28]
 8007682:	2200      	movs	r2, #0
 8007684:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007688:	88fa      	ldrh	r2, [r7, #6]
 800768a:	2300      	movs	r3, #0
 800768c:	9303      	str	r3, [sp, #12]
 800768e:	69fb      	ldr	r3, [r7, #28]
 8007690:	9302      	str	r3, [sp, #8]
 8007692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007694:	9301      	str	r3, [sp, #4]
 8007696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007698:	9300      	str	r3, [sp, #0]
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	68b9      	ldr	r1, [r7, #8]
 800769e:	68f8      	ldr	r0, [r7, #12]
 80076a0:	f000 f80e 	bl	80076c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80076a4:	69f8      	ldr	r0, [r7, #28]
 80076a6:	f000 f89b 	bl	80077e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80076aa:	2301      	movs	r3, #1
 80076ac:	61bb      	str	r3, [r7, #24]
 80076ae:	e002      	b.n	80076b6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80076b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80076b4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80076b6:	69bb      	ldr	r3, [r7, #24]
	}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3720      	adds	r7, #32
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}

080076c0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b088      	sub	sp, #32
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	60f8      	str	r0, [r7, #12]
 80076c8:	60b9      	str	r1, [r7, #8]
 80076ca:	607a      	str	r2, [r7, #4]
 80076cc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80076ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	009b      	lsls	r3, r3, #2
 80076d6:	461a      	mov	r2, r3
 80076d8:	21a5      	movs	r1, #165	; 0xa5
 80076da:	f001 fe23 	bl	8009324 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80076de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80076e8:	3b01      	subs	r3, #1
 80076ea:	009b      	lsls	r3, r3, #2
 80076ec:	4413      	add	r3, r2
 80076ee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80076f0:	69bb      	ldr	r3, [r7, #24]
 80076f2:	f023 0307 	bic.w	r3, r3, #7
 80076f6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80076f8:	69bb      	ldr	r3, [r7, #24]
 80076fa:	f003 0307 	and.w	r3, r3, #7
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d00a      	beq.n	8007718 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007706:	f383 8811 	msr	BASEPRI, r3
 800770a:	f3bf 8f6f 	isb	sy
 800770e:	f3bf 8f4f 	dsb	sy
 8007712:	617b      	str	r3, [r7, #20]
}
 8007714:	bf00      	nop
 8007716:	e7fe      	b.n	8007716 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d01f      	beq.n	800775e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800771e:	2300      	movs	r3, #0
 8007720:	61fb      	str	r3, [r7, #28]
 8007722:	e012      	b.n	800774a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007724:	68ba      	ldr	r2, [r7, #8]
 8007726:	69fb      	ldr	r3, [r7, #28]
 8007728:	4413      	add	r3, r2
 800772a:	7819      	ldrb	r1, [r3, #0]
 800772c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800772e:	69fb      	ldr	r3, [r7, #28]
 8007730:	4413      	add	r3, r2
 8007732:	3334      	adds	r3, #52	; 0x34
 8007734:	460a      	mov	r2, r1
 8007736:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007738:	68ba      	ldr	r2, [r7, #8]
 800773a:	69fb      	ldr	r3, [r7, #28]
 800773c:	4413      	add	r3, r2
 800773e:	781b      	ldrb	r3, [r3, #0]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d006      	beq.n	8007752 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007744:	69fb      	ldr	r3, [r7, #28]
 8007746:	3301      	adds	r3, #1
 8007748:	61fb      	str	r3, [r7, #28]
 800774a:	69fb      	ldr	r3, [r7, #28]
 800774c:	2b0f      	cmp	r3, #15
 800774e:	d9e9      	bls.n	8007724 <prvInitialiseNewTask+0x64>
 8007750:	e000      	b.n	8007754 <prvInitialiseNewTask+0x94>
			{
				break;
 8007752:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007756:	2200      	movs	r2, #0
 8007758:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800775c:	e003      	b.n	8007766 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800775e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007760:	2200      	movs	r2, #0
 8007762:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007768:	2b37      	cmp	r3, #55	; 0x37
 800776a:	d901      	bls.n	8007770 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800776c:	2337      	movs	r3, #55	; 0x37
 800776e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007772:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007774:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007778:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800777a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800777c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800777e:	2200      	movs	r2, #0
 8007780:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007784:	3304      	adds	r3, #4
 8007786:	4618      	mov	r0, r3
 8007788:	f7ff f8be 	bl	8006908 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800778c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800778e:	3318      	adds	r3, #24
 8007790:	4618      	mov	r0, r3
 8007792:	f7ff f8b9 	bl	8006908 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007798:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800779a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800779c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800779e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80077a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077a4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80077a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077aa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80077ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ae:	2200      	movs	r2, #0
 80077b0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80077b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b4:	2200      	movs	r2, #0
 80077b6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80077ba:	683a      	ldr	r2, [r7, #0]
 80077bc:	68f9      	ldr	r1, [r7, #12]
 80077be:	69b8      	ldr	r0, [r7, #24]
 80077c0:	f001 f928 	bl	8008a14 <pxPortInitialiseStack>
 80077c4:	4602      	mov	r2, r0
 80077c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80077ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d002      	beq.n	80077d6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80077d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80077d6:	bf00      	nop
 80077d8:	3720      	adds	r7, #32
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
	...

080077e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b082      	sub	sp, #8
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80077e8:	f001 fa44 	bl	8008c74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80077ec:	4b2d      	ldr	r3, [pc, #180]	; (80078a4 <prvAddNewTaskToReadyList+0xc4>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	3301      	adds	r3, #1
 80077f2:	4a2c      	ldr	r2, [pc, #176]	; (80078a4 <prvAddNewTaskToReadyList+0xc4>)
 80077f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80077f6:	4b2c      	ldr	r3, [pc, #176]	; (80078a8 <prvAddNewTaskToReadyList+0xc8>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d109      	bne.n	8007812 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80077fe:	4a2a      	ldr	r2, [pc, #168]	; (80078a8 <prvAddNewTaskToReadyList+0xc8>)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007804:	4b27      	ldr	r3, [pc, #156]	; (80078a4 <prvAddNewTaskToReadyList+0xc4>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	2b01      	cmp	r3, #1
 800780a:	d110      	bne.n	800782e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800780c:	f000 fc16 	bl	800803c <prvInitialiseTaskLists>
 8007810:	e00d      	b.n	800782e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007812:	4b26      	ldr	r3, [pc, #152]	; (80078ac <prvAddNewTaskToReadyList+0xcc>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d109      	bne.n	800782e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800781a:	4b23      	ldr	r3, [pc, #140]	; (80078a8 <prvAddNewTaskToReadyList+0xc8>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007824:	429a      	cmp	r2, r3
 8007826:	d802      	bhi.n	800782e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007828:	4a1f      	ldr	r2, [pc, #124]	; (80078a8 <prvAddNewTaskToReadyList+0xc8>)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800782e:	4b20      	ldr	r3, [pc, #128]	; (80078b0 <prvAddNewTaskToReadyList+0xd0>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	3301      	adds	r3, #1
 8007834:	4a1e      	ldr	r2, [pc, #120]	; (80078b0 <prvAddNewTaskToReadyList+0xd0>)
 8007836:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007838:	4b1d      	ldr	r3, [pc, #116]	; (80078b0 <prvAddNewTaskToReadyList+0xd0>)
 800783a:	681a      	ldr	r2, [r3, #0]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007844:	4b1b      	ldr	r3, [pc, #108]	; (80078b4 <prvAddNewTaskToReadyList+0xd4>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	429a      	cmp	r2, r3
 800784a:	d903      	bls.n	8007854 <prvAddNewTaskToReadyList+0x74>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007850:	4a18      	ldr	r2, [pc, #96]	; (80078b4 <prvAddNewTaskToReadyList+0xd4>)
 8007852:	6013      	str	r3, [r2, #0]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007858:	4613      	mov	r3, r2
 800785a:	009b      	lsls	r3, r3, #2
 800785c:	4413      	add	r3, r2
 800785e:	009b      	lsls	r3, r3, #2
 8007860:	4a15      	ldr	r2, [pc, #84]	; (80078b8 <prvAddNewTaskToReadyList+0xd8>)
 8007862:	441a      	add	r2, r3
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	3304      	adds	r3, #4
 8007868:	4619      	mov	r1, r3
 800786a:	4610      	mov	r0, r2
 800786c:	f7ff f859 	bl	8006922 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007870:	f001 fa30 	bl	8008cd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007874:	4b0d      	ldr	r3, [pc, #52]	; (80078ac <prvAddNewTaskToReadyList+0xcc>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d00e      	beq.n	800789a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800787c:	4b0a      	ldr	r3, [pc, #40]	; (80078a8 <prvAddNewTaskToReadyList+0xc8>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007886:	429a      	cmp	r2, r3
 8007888:	d207      	bcs.n	800789a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800788a:	4b0c      	ldr	r3, [pc, #48]	; (80078bc <prvAddNewTaskToReadyList+0xdc>)
 800788c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007890:	601a      	str	r2, [r3, #0]
 8007892:	f3bf 8f4f 	dsb	sy
 8007896:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800789a:	bf00      	nop
 800789c:	3708      	adds	r7, #8
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}
 80078a2:	bf00      	nop
 80078a4:	2000b4a8 	.word	0x2000b4a8
 80078a8:	2000afd4 	.word	0x2000afd4
 80078ac:	2000b4b4 	.word	0x2000b4b4
 80078b0:	2000b4c4 	.word	0x2000b4c4
 80078b4:	2000b4b0 	.word	0x2000b4b0
 80078b8:	2000afd8 	.word	0x2000afd8
 80078bc:	e000ed04 	.word	0xe000ed04

080078c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b084      	sub	sp, #16
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80078c8:	2300      	movs	r3, #0
 80078ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d017      	beq.n	8007902 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80078d2:	4b13      	ldr	r3, [pc, #76]	; (8007920 <vTaskDelay+0x60>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d00a      	beq.n	80078f0 <vTaskDelay+0x30>
	__asm volatile
 80078da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078de:	f383 8811 	msr	BASEPRI, r3
 80078e2:	f3bf 8f6f 	isb	sy
 80078e6:	f3bf 8f4f 	dsb	sy
 80078ea:	60bb      	str	r3, [r7, #8]
}
 80078ec:	bf00      	nop
 80078ee:	e7fe      	b.n	80078ee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80078f0:	f000 f880 	bl	80079f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80078f4:	2100      	movs	r1, #0
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 fcea 	bl	80082d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80078fc:	f000 f888 	bl	8007a10 <xTaskResumeAll>
 8007900:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d107      	bne.n	8007918 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007908:	4b06      	ldr	r3, [pc, #24]	; (8007924 <vTaskDelay+0x64>)
 800790a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800790e:	601a      	str	r2, [r3, #0]
 8007910:	f3bf 8f4f 	dsb	sy
 8007914:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007918:	bf00      	nop
 800791a:	3710      	adds	r7, #16
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}
 8007920:	2000b4d0 	.word	0x2000b4d0
 8007924:	e000ed04 	.word	0xe000ed04

08007928 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b08a      	sub	sp, #40	; 0x28
 800792c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800792e:	2300      	movs	r3, #0
 8007930:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007932:	2300      	movs	r3, #0
 8007934:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007936:	463a      	mov	r2, r7
 8007938:	1d39      	adds	r1, r7, #4
 800793a:	f107 0308 	add.w	r3, r7, #8
 800793e:	4618      	mov	r0, r3
 8007940:	f7fe ff8e 	bl	8006860 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007944:	6839      	ldr	r1, [r7, #0]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	68ba      	ldr	r2, [r7, #8]
 800794a:	9202      	str	r2, [sp, #8]
 800794c:	9301      	str	r3, [sp, #4]
 800794e:	2300      	movs	r3, #0
 8007950:	9300      	str	r3, [sp, #0]
 8007952:	2300      	movs	r3, #0
 8007954:	460a      	mov	r2, r1
 8007956:	4921      	ldr	r1, [pc, #132]	; (80079dc <vTaskStartScheduler+0xb4>)
 8007958:	4821      	ldr	r0, [pc, #132]	; (80079e0 <vTaskStartScheduler+0xb8>)
 800795a:	f7ff fe0f 	bl	800757c <xTaskCreateStatic>
 800795e:	4603      	mov	r3, r0
 8007960:	4a20      	ldr	r2, [pc, #128]	; (80079e4 <vTaskStartScheduler+0xbc>)
 8007962:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007964:	4b1f      	ldr	r3, [pc, #124]	; (80079e4 <vTaskStartScheduler+0xbc>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d002      	beq.n	8007972 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800796c:	2301      	movs	r3, #1
 800796e:	617b      	str	r3, [r7, #20]
 8007970:	e001      	b.n	8007976 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007972:	2300      	movs	r3, #0
 8007974:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	2b01      	cmp	r3, #1
 800797a:	d102      	bne.n	8007982 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800797c:	f000 fcfc 	bl	8008378 <xTimerCreateTimerTask>
 8007980:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	2b01      	cmp	r3, #1
 8007986:	d116      	bne.n	80079b6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8007988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800798c:	f383 8811 	msr	BASEPRI, r3
 8007990:	f3bf 8f6f 	isb	sy
 8007994:	f3bf 8f4f 	dsb	sy
 8007998:	613b      	str	r3, [r7, #16]
}
 800799a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800799c:	4b12      	ldr	r3, [pc, #72]	; (80079e8 <vTaskStartScheduler+0xc0>)
 800799e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80079a2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80079a4:	4b11      	ldr	r3, [pc, #68]	; (80079ec <vTaskStartScheduler+0xc4>)
 80079a6:	2201      	movs	r2, #1
 80079a8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80079aa:	4b11      	ldr	r3, [pc, #68]	; (80079f0 <vTaskStartScheduler+0xc8>)
 80079ac:	2200      	movs	r2, #0
 80079ae:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80079b0:	f001 f8be 	bl	8008b30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80079b4:	e00e      	b.n	80079d4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079bc:	d10a      	bne.n	80079d4 <vTaskStartScheduler+0xac>
	__asm volatile
 80079be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079c2:	f383 8811 	msr	BASEPRI, r3
 80079c6:	f3bf 8f6f 	isb	sy
 80079ca:	f3bf 8f4f 	dsb	sy
 80079ce:	60fb      	str	r3, [r7, #12]
}
 80079d0:	bf00      	nop
 80079d2:	e7fe      	b.n	80079d2 <vTaskStartScheduler+0xaa>
}
 80079d4:	bf00      	nop
 80079d6:	3718      	adds	r7, #24
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}
 80079dc:	0800956c 	.word	0x0800956c
 80079e0:	0800800d 	.word	0x0800800d
 80079e4:	2000b4cc 	.word	0x2000b4cc
 80079e8:	2000b4c8 	.word	0x2000b4c8
 80079ec:	2000b4b4 	.word	0x2000b4b4
 80079f0:	2000b4ac 	.word	0x2000b4ac

080079f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80079f4:	b480      	push	{r7}
 80079f6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80079f8:	4b04      	ldr	r3, [pc, #16]	; (8007a0c <vTaskSuspendAll+0x18>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	3301      	adds	r3, #1
 80079fe:	4a03      	ldr	r2, [pc, #12]	; (8007a0c <vTaskSuspendAll+0x18>)
 8007a00:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007a02:	bf00      	nop
 8007a04:	46bd      	mov	sp, r7
 8007a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0a:	4770      	bx	lr
 8007a0c:	2000b4d0 	.word	0x2000b4d0

08007a10 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b084      	sub	sp, #16
 8007a14:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007a16:	2300      	movs	r3, #0
 8007a18:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007a1e:	4b42      	ldr	r3, [pc, #264]	; (8007b28 <xTaskResumeAll+0x118>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d10a      	bne.n	8007a3c <xTaskResumeAll+0x2c>
	__asm volatile
 8007a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a2a:	f383 8811 	msr	BASEPRI, r3
 8007a2e:	f3bf 8f6f 	isb	sy
 8007a32:	f3bf 8f4f 	dsb	sy
 8007a36:	603b      	str	r3, [r7, #0]
}
 8007a38:	bf00      	nop
 8007a3a:	e7fe      	b.n	8007a3a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007a3c:	f001 f91a 	bl	8008c74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007a40:	4b39      	ldr	r3, [pc, #228]	; (8007b28 <xTaskResumeAll+0x118>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	3b01      	subs	r3, #1
 8007a46:	4a38      	ldr	r2, [pc, #224]	; (8007b28 <xTaskResumeAll+0x118>)
 8007a48:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a4a:	4b37      	ldr	r3, [pc, #220]	; (8007b28 <xTaskResumeAll+0x118>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d162      	bne.n	8007b18 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007a52:	4b36      	ldr	r3, [pc, #216]	; (8007b2c <xTaskResumeAll+0x11c>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d05e      	beq.n	8007b18 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007a5a:	e02f      	b.n	8007abc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a5c:	4b34      	ldr	r3, [pc, #208]	; (8007b30 <xTaskResumeAll+0x120>)
 8007a5e:	68db      	ldr	r3, [r3, #12]
 8007a60:	68db      	ldr	r3, [r3, #12]
 8007a62:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	3318      	adds	r3, #24
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f7fe ffb7 	bl	80069dc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	3304      	adds	r3, #4
 8007a72:	4618      	mov	r0, r3
 8007a74:	f7fe ffb2 	bl	80069dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a7c:	4b2d      	ldr	r3, [pc, #180]	; (8007b34 <xTaskResumeAll+0x124>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	429a      	cmp	r2, r3
 8007a82:	d903      	bls.n	8007a8c <xTaskResumeAll+0x7c>
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a88:	4a2a      	ldr	r2, [pc, #168]	; (8007b34 <xTaskResumeAll+0x124>)
 8007a8a:	6013      	str	r3, [r2, #0]
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a90:	4613      	mov	r3, r2
 8007a92:	009b      	lsls	r3, r3, #2
 8007a94:	4413      	add	r3, r2
 8007a96:	009b      	lsls	r3, r3, #2
 8007a98:	4a27      	ldr	r2, [pc, #156]	; (8007b38 <xTaskResumeAll+0x128>)
 8007a9a:	441a      	add	r2, r3
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	3304      	adds	r3, #4
 8007aa0:	4619      	mov	r1, r3
 8007aa2:	4610      	mov	r0, r2
 8007aa4:	f7fe ff3d 	bl	8006922 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aac:	4b23      	ldr	r3, [pc, #140]	; (8007b3c <xTaskResumeAll+0x12c>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab2:	429a      	cmp	r2, r3
 8007ab4:	d302      	bcc.n	8007abc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007ab6:	4b22      	ldr	r3, [pc, #136]	; (8007b40 <xTaskResumeAll+0x130>)
 8007ab8:	2201      	movs	r2, #1
 8007aba:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007abc:	4b1c      	ldr	r3, [pc, #112]	; (8007b30 <xTaskResumeAll+0x120>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d1cb      	bne.n	8007a5c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d001      	beq.n	8007ace <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007aca:	f000 fb55 	bl	8008178 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007ace:	4b1d      	ldr	r3, [pc, #116]	; (8007b44 <xTaskResumeAll+0x134>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d010      	beq.n	8007afc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007ada:	f000 f847 	bl	8007b6c <xTaskIncrementTick>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d002      	beq.n	8007aea <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007ae4:	4b16      	ldr	r3, [pc, #88]	; (8007b40 <xTaskResumeAll+0x130>)
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	3b01      	subs	r3, #1
 8007aee:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d1f1      	bne.n	8007ada <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007af6:	4b13      	ldr	r3, [pc, #76]	; (8007b44 <xTaskResumeAll+0x134>)
 8007af8:	2200      	movs	r2, #0
 8007afa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007afc:	4b10      	ldr	r3, [pc, #64]	; (8007b40 <xTaskResumeAll+0x130>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d009      	beq.n	8007b18 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007b04:	2301      	movs	r3, #1
 8007b06:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007b08:	4b0f      	ldr	r3, [pc, #60]	; (8007b48 <xTaskResumeAll+0x138>)
 8007b0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b0e:	601a      	str	r2, [r3, #0]
 8007b10:	f3bf 8f4f 	dsb	sy
 8007b14:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007b18:	f001 f8dc 	bl	8008cd4 <vPortExitCritical>

	return xAlreadyYielded;
 8007b1c:	68bb      	ldr	r3, [r7, #8]
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3710      	adds	r7, #16
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}
 8007b26:	bf00      	nop
 8007b28:	2000b4d0 	.word	0x2000b4d0
 8007b2c:	2000b4a8 	.word	0x2000b4a8
 8007b30:	2000b468 	.word	0x2000b468
 8007b34:	2000b4b0 	.word	0x2000b4b0
 8007b38:	2000afd8 	.word	0x2000afd8
 8007b3c:	2000afd4 	.word	0x2000afd4
 8007b40:	2000b4bc 	.word	0x2000b4bc
 8007b44:	2000b4b8 	.word	0x2000b4b8
 8007b48:	e000ed04 	.word	0xe000ed04

08007b4c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b083      	sub	sp, #12
 8007b50:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007b52:	4b05      	ldr	r3, [pc, #20]	; (8007b68 <xTaskGetTickCount+0x1c>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007b58:	687b      	ldr	r3, [r7, #4]
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	370c      	adds	r7, #12
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b64:	4770      	bx	lr
 8007b66:	bf00      	nop
 8007b68:	2000b4ac 	.word	0x2000b4ac

08007b6c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b086      	sub	sp, #24
 8007b70:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007b72:	2300      	movs	r3, #0
 8007b74:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b76:	4b4f      	ldr	r3, [pc, #316]	; (8007cb4 <xTaskIncrementTick+0x148>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	f040 808f 	bne.w	8007c9e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007b80:	4b4d      	ldr	r3, [pc, #308]	; (8007cb8 <xTaskIncrementTick+0x14c>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	3301      	adds	r3, #1
 8007b86:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007b88:	4a4b      	ldr	r2, [pc, #300]	; (8007cb8 <xTaskIncrementTick+0x14c>)
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d120      	bne.n	8007bd6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007b94:	4b49      	ldr	r3, [pc, #292]	; (8007cbc <xTaskIncrementTick+0x150>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d00a      	beq.n	8007bb4 <xTaskIncrementTick+0x48>
	__asm volatile
 8007b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba2:	f383 8811 	msr	BASEPRI, r3
 8007ba6:	f3bf 8f6f 	isb	sy
 8007baa:	f3bf 8f4f 	dsb	sy
 8007bae:	603b      	str	r3, [r7, #0]
}
 8007bb0:	bf00      	nop
 8007bb2:	e7fe      	b.n	8007bb2 <xTaskIncrementTick+0x46>
 8007bb4:	4b41      	ldr	r3, [pc, #260]	; (8007cbc <xTaskIncrementTick+0x150>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	60fb      	str	r3, [r7, #12]
 8007bba:	4b41      	ldr	r3, [pc, #260]	; (8007cc0 <xTaskIncrementTick+0x154>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4a3f      	ldr	r2, [pc, #252]	; (8007cbc <xTaskIncrementTick+0x150>)
 8007bc0:	6013      	str	r3, [r2, #0]
 8007bc2:	4a3f      	ldr	r2, [pc, #252]	; (8007cc0 <xTaskIncrementTick+0x154>)
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	6013      	str	r3, [r2, #0]
 8007bc8:	4b3e      	ldr	r3, [pc, #248]	; (8007cc4 <xTaskIncrementTick+0x158>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	3301      	adds	r3, #1
 8007bce:	4a3d      	ldr	r2, [pc, #244]	; (8007cc4 <xTaskIncrementTick+0x158>)
 8007bd0:	6013      	str	r3, [r2, #0]
 8007bd2:	f000 fad1 	bl	8008178 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007bd6:	4b3c      	ldr	r3, [pc, #240]	; (8007cc8 <xTaskIncrementTick+0x15c>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	693a      	ldr	r2, [r7, #16]
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	d349      	bcc.n	8007c74 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007be0:	4b36      	ldr	r3, [pc, #216]	; (8007cbc <xTaskIncrementTick+0x150>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d104      	bne.n	8007bf4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bea:	4b37      	ldr	r3, [pc, #220]	; (8007cc8 <xTaskIncrementTick+0x15c>)
 8007bec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007bf0:	601a      	str	r2, [r3, #0]
					break;
 8007bf2:	e03f      	b.n	8007c74 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bf4:	4b31      	ldr	r3, [pc, #196]	; (8007cbc <xTaskIncrementTick+0x150>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	68db      	ldr	r3, [r3, #12]
 8007bfa:	68db      	ldr	r3, [r3, #12]
 8007bfc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	685b      	ldr	r3, [r3, #4]
 8007c02:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007c04:	693a      	ldr	r2, [r7, #16]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d203      	bcs.n	8007c14 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007c0c:	4a2e      	ldr	r2, [pc, #184]	; (8007cc8 <xTaskIncrementTick+0x15c>)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007c12:	e02f      	b.n	8007c74 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	3304      	adds	r3, #4
 8007c18:	4618      	mov	r0, r3
 8007c1a:	f7fe fedf 	bl	80069dc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d004      	beq.n	8007c30 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	3318      	adds	r3, #24
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f7fe fed6 	bl	80069dc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c34:	4b25      	ldr	r3, [pc, #148]	; (8007ccc <xTaskIncrementTick+0x160>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	d903      	bls.n	8007c44 <xTaskIncrementTick+0xd8>
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c40:	4a22      	ldr	r2, [pc, #136]	; (8007ccc <xTaskIncrementTick+0x160>)
 8007c42:	6013      	str	r3, [r2, #0]
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c48:	4613      	mov	r3, r2
 8007c4a:	009b      	lsls	r3, r3, #2
 8007c4c:	4413      	add	r3, r2
 8007c4e:	009b      	lsls	r3, r3, #2
 8007c50:	4a1f      	ldr	r2, [pc, #124]	; (8007cd0 <xTaskIncrementTick+0x164>)
 8007c52:	441a      	add	r2, r3
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	3304      	adds	r3, #4
 8007c58:	4619      	mov	r1, r3
 8007c5a:	4610      	mov	r0, r2
 8007c5c:	f7fe fe61 	bl	8006922 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c64:	4b1b      	ldr	r3, [pc, #108]	; (8007cd4 <xTaskIncrementTick+0x168>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d3b8      	bcc.n	8007be0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007c6e:	2301      	movs	r3, #1
 8007c70:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c72:	e7b5      	b.n	8007be0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007c74:	4b17      	ldr	r3, [pc, #92]	; (8007cd4 <xTaskIncrementTick+0x168>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c7a:	4915      	ldr	r1, [pc, #84]	; (8007cd0 <xTaskIncrementTick+0x164>)
 8007c7c:	4613      	mov	r3, r2
 8007c7e:	009b      	lsls	r3, r3, #2
 8007c80:	4413      	add	r3, r2
 8007c82:	009b      	lsls	r3, r3, #2
 8007c84:	440b      	add	r3, r1
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d901      	bls.n	8007c90 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007c90:	4b11      	ldr	r3, [pc, #68]	; (8007cd8 <xTaskIncrementTick+0x16c>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d007      	beq.n	8007ca8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007c98:	2301      	movs	r3, #1
 8007c9a:	617b      	str	r3, [r7, #20]
 8007c9c:	e004      	b.n	8007ca8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007c9e:	4b0f      	ldr	r3, [pc, #60]	; (8007cdc <xTaskIncrementTick+0x170>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	4a0d      	ldr	r2, [pc, #52]	; (8007cdc <xTaskIncrementTick+0x170>)
 8007ca6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007ca8:	697b      	ldr	r3, [r7, #20]
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3718      	adds	r7, #24
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}
 8007cb2:	bf00      	nop
 8007cb4:	2000b4d0 	.word	0x2000b4d0
 8007cb8:	2000b4ac 	.word	0x2000b4ac
 8007cbc:	2000b460 	.word	0x2000b460
 8007cc0:	2000b464 	.word	0x2000b464
 8007cc4:	2000b4c0 	.word	0x2000b4c0
 8007cc8:	2000b4c8 	.word	0x2000b4c8
 8007ccc:	2000b4b0 	.word	0x2000b4b0
 8007cd0:	2000afd8 	.word	0x2000afd8
 8007cd4:	2000afd4 	.word	0x2000afd4
 8007cd8:	2000b4bc 	.word	0x2000b4bc
 8007cdc:	2000b4b8 	.word	0x2000b4b8

08007ce0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b085      	sub	sp, #20
 8007ce4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007ce6:	4b28      	ldr	r3, [pc, #160]	; (8007d88 <vTaskSwitchContext+0xa8>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d003      	beq.n	8007cf6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007cee:	4b27      	ldr	r3, [pc, #156]	; (8007d8c <vTaskSwitchContext+0xac>)
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007cf4:	e041      	b.n	8007d7a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8007cf6:	4b25      	ldr	r3, [pc, #148]	; (8007d8c <vTaskSwitchContext+0xac>)
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cfc:	4b24      	ldr	r3, [pc, #144]	; (8007d90 <vTaskSwitchContext+0xb0>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	60fb      	str	r3, [r7, #12]
 8007d02:	e010      	b.n	8007d26 <vTaskSwitchContext+0x46>
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d10a      	bne.n	8007d20 <vTaskSwitchContext+0x40>
	__asm volatile
 8007d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d0e:	f383 8811 	msr	BASEPRI, r3
 8007d12:	f3bf 8f6f 	isb	sy
 8007d16:	f3bf 8f4f 	dsb	sy
 8007d1a:	607b      	str	r3, [r7, #4]
}
 8007d1c:	bf00      	nop
 8007d1e:	e7fe      	b.n	8007d1e <vTaskSwitchContext+0x3e>
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	3b01      	subs	r3, #1
 8007d24:	60fb      	str	r3, [r7, #12]
 8007d26:	491b      	ldr	r1, [pc, #108]	; (8007d94 <vTaskSwitchContext+0xb4>)
 8007d28:	68fa      	ldr	r2, [r7, #12]
 8007d2a:	4613      	mov	r3, r2
 8007d2c:	009b      	lsls	r3, r3, #2
 8007d2e:	4413      	add	r3, r2
 8007d30:	009b      	lsls	r3, r3, #2
 8007d32:	440b      	add	r3, r1
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d0e4      	beq.n	8007d04 <vTaskSwitchContext+0x24>
 8007d3a:	68fa      	ldr	r2, [r7, #12]
 8007d3c:	4613      	mov	r3, r2
 8007d3e:	009b      	lsls	r3, r3, #2
 8007d40:	4413      	add	r3, r2
 8007d42:	009b      	lsls	r3, r3, #2
 8007d44:	4a13      	ldr	r2, [pc, #76]	; (8007d94 <vTaskSwitchContext+0xb4>)
 8007d46:	4413      	add	r3, r2
 8007d48:	60bb      	str	r3, [r7, #8]
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	685a      	ldr	r2, [r3, #4]
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	605a      	str	r2, [r3, #4]
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	685a      	ldr	r2, [r3, #4]
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	3308      	adds	r3, #8
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	d104      	bne.n	8007d6a <vTaskSwitchContext+0x8a>
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	685a      	ldr	r2, [r3, #4]
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	605a      	str	r2, [r3, #4]
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	68db      	ldr	r3, [r3, #12]
 8007d70:	4a09      	ldr	r2, [pc, #36]	; (8007d98 <vTaskSwitchContext+0xb8>)
 8007d72:	6013      	str	r3, [r2, #0]
 8007d74:	4a06      	ldr	r2, [pc, #24]	; (8007d90 <vTaskSwitchContext+0xb0>)
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	6013      	str	r3, [r2, #0]
}
 8007d7a:	bf00      	nop
 8007d7c:	3714      	adds	r7, #20
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d84:	4770      	bx	lr
 8007d86:	bf00      	nop
 8007d88:	2000b4d0 	.word	0x2000b4d0
 8007d8c:	2000b4bc 	.word	0x2000b4bc
 8007d90:	2000b4b0 	.word	0x2000b4b0
 8007d94:	2000afd8 	.word	0x2000afd8
 8007d98:	2000afd4 	.word	0x2000afd4

08007d9c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b084      	sub	sp, #16
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
 8007da4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d10a      	bne.n	8007dc2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db0:	f383 8811 	msr	BASEPRI, r3
 8007db4:	f3bf 8f6f 	isb	sy
 8007db8:	f3bf 8f4f 	dsb	sy
 8007dbc:	60fb      	str	r3, [r7, #12]
}
 8007dbe:	bf00      	nop
 8007dc0:	e7fe      	b.n	8007dc0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007dc2:	4b07      	ldr	r3, [pc, #28]	; (8007de0 <vTaskPlaceOnEventList+0x44>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	3318      	adds	r3, #24
 8007dc8:	4619      	mov	r1, r3
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f7fe fdcd 	bl	800696a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007dd0:	2101      	movs	r1, #1
 8007dd2:	6838      	ldr	r0, [r7, #0]
 8007dd4:	f000 fa7c 	bl	80082d0 <prvAddCurrentTaskToDelayedList>
}
 8007dd8:	bf00      	nop
 8007dda:	3710      	adds	r7, #16
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}
 8007de0:	2000afd4 	.word	0x2000afd4

08007de4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b086      	sub	sp, #24
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	60f8      	str	r0, [r7, #12]
 8007dec:	60b9      	str	r1, [r7, #8]
 8007dee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d10a      	bne.n	8007e0c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dfa:	f383 8811 	msr	BASEPRI, r3
 8007dfe:	f3bf 8f6f 	isb	sy
 8007e02:	f3bf 8f4f 	dsb	sy
 8007e06:	617b      	str	r3, [r7, #20]
}
 8007e08:	bf00      	nop
 8007e0a:	e7fe      	b.n	8007e0a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007e0c:	4b0a      	ldr	r3, [pc, #40]	; (8007e38 <vTaskPlaceOnEventListRestricted+0x54>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	3318      	adds	r3, #24
 8007e12:	4619      	mov	r1, r3
 8007e14:	68f8      	ldr	r0, [r7, #12]
 8007e16:	f7fe fd84 	bl	8006922 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d002      	beq.n	8007e26 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007e20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007e24:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007e26:	6879      	ldr	r1, [r7, #4]
 8007e28:	68b8      	ldr	r0, [r7, #8]
 8007e2a:	f000 fa51 	bl	80082d0 <prvAddCurrentTaskToDelayedList>
	}
 8007e2e:	bf00      	nop
 8007e30:	3718      	adds	r7, #24
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}
 8007e36:	bf00      	nop
 8007e38:	2000afd4 	.word	0x2000afd4

08007e3c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b086      	sub	sp, #24
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	68db      	ldr	r3, [r3, #12]
 8007e48:	68db      	ldr	r3, [r3, #12]
 8007e4a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d10a      	bne.n	8007e68 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e56:	f383 8811 	msr	BASEPRI, r3
 8007e5a:	f3bf 8f6f 	isb	sy
 8007e5e:	f3bf 8f4f 	dsb	sy
 8007e62:	60fb      	str	r3, [r7, #12]
}
 8007e64:	bf00      	nop
 8007e66:	e7fe      	b.n	8007e66 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	3318      	adds	r3, #24
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f7fe fdb5 	bl	80069dc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e72:	4b1e      	ldr	r3, [pc, #120]	; (8007eec <xTaskRemoveFromEventList+0xb0>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d11d      	bne.n	8007eb6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	3304      	adds	r3, #4
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f7fe fdac 	bl	80069dc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e88:	4b19      	ldr	r3, [pc, #100]	; (8007ef0 <xTaskRemoveFromEventList+0xb4>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	429a      	cmp	r2, r3
 8007e8e:	d903      	bls.n	8007e98 <xTaskRemoveFromEventList+0x5c>
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e94:	4a16      	ldr	r2, [pc, #88]	; (8007ef0 <xTaskRemoveFromEventList+0xb4>)
 8007e96:	6013      	str	r3, [r2, #0]
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e9c:	4613      	mov	r3, r2
 8007e9e:	009b      	lsls	r3, r3, #2
 8007ea0:	4413      	add	r3, r2
 8007ea2:	009b      	lsls	r3, r3, #2
 8007ea4:	4a13      	ldr	r2, [pc, #76]	; (8007ef4 <xTaskRemoveFromEventList+0xb8>)
 8007ea6:	441a      	add	r2, r3
 8007ea8:	693b      	ldr	r3, [r7, #16]
 8007eaa:	3304      	adds	r3, #4
 8007eac:	4619      	mov	r1, r3
 8007eae:	4610      	mov	r0, r2
 8007eb0:	f7fe fd37 	bl	8006922 <vListInsertEnd>
 8007eb4:	e005      	b.n	8007ec2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007eb6:	693b      	ldr	r3, [r7, #16]
 8007eb8:	3318      	adds	r3, #24
 8007eba:	4619      	mov	r1, r3
 8007ebc:	480e      	ldr	r0, [pc, #56]	; (8007ef8 <xTaskRemoveFromEventList+0xbc>)
 8007ebe:	f7fe fd30 	bl	8006922 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007ec2:	693b      	ldr	r3, [r7, #16]
 8007ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ec6:	4b0d      	ldr	r3, [pc, #52]	; (8007efc <xTaskRemoveFromEventList+0xc0>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ecc:	429a      	cmp	r2, r3
 8007ece:	d905      	bls.n	8007edc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007ed4:	4b0a      	ldr	r3, [pc, #40]	; (8007f00 <xTaskRemoveFromEventList+0xc4>)
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	601a      	str	r2, [r3, #0]
 8007eda:	e001      	b.n	8007ee0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007edc:	2300      	movs	r3, #0
 8007ede:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007ee0:	697b      	ldr	r3, [r7, #20]
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3718      	adds	r7, #24
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}
 8007eea:	bf00      	nop
 8007eec:	2000b4d0 	.word	0x2000b4d0
 8007ef0:	2000b4b0 	.word	0x2000b4b0
 8007ef4:	2000afd8 	.word	0x2000afd8
 8007ef8:	2000b468 	.word	0x2000b468
 8007efc:	2000afd4 	.word	0x2000afd4
 8007f00:	2000b4bc 	.word	0x2000b4bc

08007f04 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007f04:	b480      	push	{r7}
 8007f06:	b083      	sub	sp, #12
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007f0c:	4b06      	ldr	r3, [pc, #24]	; (8007f28 <vTaskInternalSetTimeOutState+0x24>)
 8007f0e:	681a      	ldr	r2, [r3, #0]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007f14:	4b05      	ldr	r3, [pc, #20]	; (8007f2c <vTaskInternalSetTimeOutState+0x28>)
 8007f16:	681a      	ldr	r2, [r3, #0]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	605a      	str	r2, [r3, #4]
}
 8007f1c:	bf00      	nop
 8007f1e:	370c      	adds	r7, #12
 8007f20:	46bd      	mov	sp, r7
 8007f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f26:	4770      	bx	lr
 8007f28:	2000b4c0 	.word	0x2000b4c0
 8007f2c:	2000b4ac 	.word	0x2000b4ac

08007f30 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b088      	sub	sp, #32
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d10a      	bne.n	8007f56 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f44:	f383 8811 	msr	BASEPRI, r3
 8007f48:	f3bf 8f6f 	isb	sy
 8007f4c:	f3bf 8f4f 	dsb	sy
 8007f50:	613b      	str	r3, [r7, #16]
}
 8007f52:	bf00      	nop
 8007f54:	e7fe      	b.n	8007f54 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d10a      	bne.n	8007f72 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f60:	f383 8811 	msr	BASEPRI, r3
 8007f64:	f3bf 8f6f 	isb	sy
 8007f68:	f3bf 8f4f 	dsb	sy
 8007f6c:	60fb      	str	r3, [r7, #12]
}
 8007f6e:	bf00      	nop
 8007f70:	e7fe      	b.n	8007f70 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007f72:	f000 fe7f 	bl	8008c74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007f76:	4b1d      	ldr	r3, [pc, #116]	; (8007fec <xTaskCheckForTimeOut+0xbc>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	685b      	ldr	r3, [r3, #4]
 8007f80:	69ba      	ldr	r2, [r7, #24]
 8007f82:	1ad3      	subs	r3, r2, r3
 8007f84:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f8e:	d102      	bne.n	8007f96 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007f90:	2300      	movs	r3, #0
 8007f92:	61fb      	str	r3, [r7, #28]
 8007f94:	e023      	b.n	8007fde <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681a      	ldr	r2, [r3, #0]
 8007f9a:	4b15      	ldr	r3, [pc, #84]	; (8007ff0 <xTaskCheckForTimeOut+0xc0>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	429a      	cmp	r2, r3
 8007fa0:	d007      	beq.n	8007fb2 <xTaskCheckForTimeOut+0x82>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	685b      	ldr	r3, [r3, #4]
 8007fa6:	69ba      	ldr	r2, [r7, #24]
 8007fa8:	429a      	cmp	r2, r3
 8007faa:	d302      	bcc.n	8007fb2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007fac:	2301      	movs	r3, #1
 8007fae:	61fb      	str	r3, [r7, #28]
 8007fb0:	e015      	b.n	8007fde <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	697a      	ldr	r2, [r7, #20]
 8007fb8:	429a      	cmp	r2, r3
 8007fba:	d20b      	bcs.n	8007fd4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	681a      	ldr	r2, [r3, #0]
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	1ad2      	subs	r2, r2, r3
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f7ff ff9b 	bl	8007f04 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	61fb      	str	r3, [r7, #28]
 8007fd2:	e004      	b.n	8007fde <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007fda:	2301      	movs	r3, #1
 8007fdc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007fde:	f000 fe79 	bl	8008cd4 <vPortExitCritical>

	return xReturn;
 8007fe2:	69fb      	ldr	r3, [r7, #28]
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	3720      	adds	r7, #32
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}
 8007fec:	2000b4ac 	.word	0x2000b4ac
 8007ff0:	2000b4c0 	.word	0x2000b4c0

08007ff4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007ff8:	4b03      	ldr	r3, [pc, #12]	; (8008008 <vTaskMissedYield+0x14>)
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	601a      	str	r2, [r3, #0]
}
 8007ffe:	bf00      	nop
 8008000:	46bd      	mov	sp, r7
 8008002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008006:	4770      	bx	lr
 8008008:	2000b4bc 	.word	0x2000b4bc

0800800c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b082      	sub	sp, #8
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008014:	f000 f852 	bl	80080bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008018:	4b06      	ldr	r3, [pc, #24]	; (8008034 <prvIdleTask+0x28>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	2b01      	cmp	r3, #1
 800801e:	d9f9      	bls.n	8008014 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008020:	4b05      	ldr	r3, [pc, #20]	; (8008038 <prvIdleTask+0x2c>)
 8008022:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008026:	601a      	str	r2, [r3, #0]
 8008028:	f3bf 8f4f 	dsb	sy
 800802c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008030:	e7f0      	b.n	8008014 <prvIdleTask+0x8>
 8008032:	bf00      	nop
 8008034:	2000afd8 	.word	0x2000afd8
 8008038:	e000ed04 	.word	0xe000ed04

0800803c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b082      	sub	sp, #8
 8008040:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008042:	2300      	movs	r3, #0
 8008044:	607b      	str	r3, [r7, #4]
 8008046:	e00c      	b.n	8008062 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008048:	687a      	ldr	r2, [r7, #4]
 800804a:	4613      	mov	r3, r2
 800804c:	009b      	lsls	r3, r3, #2
 800804e:	4413      	add	r3, r2
 8008050:	009b      	lsls	r3, r3, #2
 8008052:	4a12      	ldr	r2, [pc, #72]	; (800809c <prvInitialiseTaskLists+0x60>)
 8008054:	4413      	add	r3, r2
 8008056:	4618      	mov	r0, r3
 8008058:	f7fe fc36 	bl	80068c8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	3301      	adds	r3, #1
 8008060:	607b      	str	r3, [r7, #4]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2b37      	cmp	r3, #55	; 0x37
 8008066:	d9ef      	bls.n	8008048 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008068:	480d      	ldr	r0, [pc, #52]	; (80080a0 <prvInitialiseTaskLists+0x64>)
 800806a:	f7fe fc2d 	bl	80068c8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800806e:	480d      	ldr	r0, [pc, #52]	; (80080a4 <prvInitialiseTaskLists+0x68>)
 8008070:	f7fe fc2a 	bl	80068c8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008074:	480c      	ldr	r0, [pc, #48]	; (80080a8 <prvInitialiseTaskLists+0x6c>)
 8008076:	f7fe fc27 	bl	80068c8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800807a:	480c      	ldr	r0, [pc, #48]	; (80080ac <prvInitialiseTaskLists+0x70>)
 800807c:	f7fe fc24 	bl	80068c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008080:	480b      	ldr	r0, [pc, #44]	; (80080b0 <prvInitialiseTaskLists+0x74>)
 8008082:	f7fe fc21 	bl	80068c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008086:	4b0b      	ldr	r3, [pc, #44]	; (80080b4 <prvInitialiseTaskLists+0x78>)
 8008088:	4a05      	ldr	r2, [pc, #20]	; (80080a0 <prvInitialiseTaskLists+0x64>)
 800808a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800808c:	4b0a      	ldr	r3, [pc, #40]	; (80080b8 <prvInitialiseTaskLists+0x7c>)
 800808e:	4a05      	ldr	r2, [pc, #20]	; (80080a4 <prvInitialiseTaskLists+0x68>)
 8008090:	601a      	str	r2, [r3, #0]
}
 8008092:	bf00      	nop
 8008094:	3708      	adds	r7, #8
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}
 800809a:	bf00      	nop
 800809c:	2000afd8 	.word	0x2000afd8
 80080a0:	2000b438 	.word	0x2000b438
 80080a4:	2000b44c 	.word	0x2000b44c
 80080a8:	2000b468 	.word	0x2000b468
 80080ac:	2000b47c 	.word	0x2000b47c
 80080b0:	2000b494 	.word	0x2000b494
 80080b4:	2000b460 	.word	0x2000b460
 80080b8:	2000b464 	.word	0x2000b464

080080bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b082      	sub	sp, #8
 80080c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80080c2:	e019      	b.n	80080f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80080c4:	f000 fdd6 	bl	8008c74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080c8:	4b10      	ldr	r3, [pc, #64]	; (800810c <prvCheckTasksWaitingTermination+0x50>)
 80080ca:	68db      	ldr	r3, [r3, #12]
 80080cc:	68db      	ldr	r3, [r3, #12]
 80080ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	3304      	adds	r3, #4
 80080d4:	4618      	mov	r0, r3
 80080d6:	f7fe fc81 	bl	80069dc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80080da:	4b0d      	ldr	r3, [pc, #52]	; (8008110 <prvCheckTasksWaitingTermination+0x54>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	3b01      	subs	r3, #1
 80080e0:	4a0b      	ldr	r2, [pc, #44]	; (8008110 <prvCheckTasksWaitingTermination+0x54>)
 80080e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80080e4:	4b0b      	ldr	r3, [pc, #44]	; (8008114 <prvCheckTasksWaitingTermination+0x58>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	3b01      	subs	r3, #1
 80080ea:	4a0a      	ldr	r2, [pc, #40]	; (8008114 <prvCheckTasksWaitingTermination+0x58>)
 80080ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80080ee:	f000 fdf1 	bl	8008cd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f000 f810 	bl	8008118 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80080f8:	4b06      	ldr	r3, [pc, #24]	; (8008114 <prvCheckTasksWaitingTermination+0x58>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d1e1      	bne.n	80080c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008100:	bf00      	nop
 8008102:	bf00      	nop
 8008104:	3708      	adds	r7, #8
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}
 800810a:	bf00      	nop
 800810c:	2000b47c 	.word	0x2000b47c
 8008110:	2000b4a8 	.word	0x2000b4a8
 8008114:	2000b490 	.word	0x2000b490

08008118 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008118:	b580      	push	{r7, lr}
 800811a:	b084      	sub	sp, #16
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008126:	2b00      	cmp	r3, #0
 8008128:	d108      	bne.n	800813c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800812e:	4618      	mov	r0, r3
 8008130:	f000 ff8e 	bl	8009050 <vPortFree>
				vPortFree( pxTCB );
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f000 ff8b 	bl	8009050 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800813a:	e018      	b.n	800816e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008142:	2b01      	cmp	r3, #1
 8008144:	d103      	bne.n	800814e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f000 ff82 	bl	8009050 <vPortFree>
	}
 800814c:	e00f      	b.n	800816e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008154:	2b02      	cmp	r3, #2
 8008156:	d00a      	beq.n	800816e <prvDeleteTCB+0x56>
	__asm volatile
 8008158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800815c:	f383 8811 	msr	BASEPRI, r3
 8008160:	f3bf 8f6f 	isb	sy
 8008164:	f3bf 8f4f 	dsb	sy
 8008168:	60fb      	str	r3, [r7, #12]
}
 800816a:	bf00      	nop
 800816c:	e7fe      	b.n	800816c <prvDeleteTCB+0x54>
	}
 800816e:	bf00      	nop
 8008170:	3710      	adds	r7, #16
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}
	...

08008178 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008178:	b480      	push	{r7}
 800817a:	b083      	sub	sp, #12
 800817c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800817e:	4b0c      	ldr	r3, [pc, #48]	; (80081b0 <prvResetNextTaskUnblockTime+0x38>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d104      	bne.n	8008192 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008188:	4b0a      	ldr	r3, [pc, #40]	; (80081b4 <prvResetNextTaskUnblockTime+0x3c>)
 800818a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800818e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008190:	e008      	b.n	80081a4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008192:	4b07      	ldr	r3, [pc, #28]	; (80081b0 <prvResetNextTaskUnblockTime+0x38>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	68db      	ldr	r3, [r3, #12]
 8008198:	68db      	ldr	r3, [r3, #12]
 800819a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	4a04      	ldr	r2, [pc, #16]	; (80081b4 <prvResetNextTaskUnblockTime+0x3c>)
 80081a2:	6013      	str	r3, [r2, #0]
}
 80081a4:	bf00      	nop
 80081a6:	370c      	adds	r7, #12
 80081a8:	46bd      	mov	sp, r7
 80081aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ae:	4770      	bx	lr
 80081b0:	2000b460 	.word	0x2000b460
 80081b4:	2000b4c8 	.word	0x2000b4c8

080081b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80081b8:	b480      	push	{r7}
 80081ba:	b083      	sub	sp, #12
 80081bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80081be:	4b0b      	ldr	r3, [pc, #44]	; (80081ec <xTaskGetSchedulerState+0x34>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d102      	bne.n	80081cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80081c6:	2301      	movs	r3, #1
 80081c8:	607b      	str	r3, [r7, #4]
 80081ca:	e008      	b.n	80081de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081cc:	4b08      	ldr	r3, [pc, #32]	; (80081f0 <xTaskGetSchedulerState+0x38>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d102      	bne.n	80081da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80081d4:	2302      	movs	r3, #2
 80081d6:	607b      	str	r3, [r7, #4]
 80081d8:	e001      	b.n	80081de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80081da:	2300      	movs	r3, #0
 80081dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80081de:	687b      	ldr	r3, [r7, #4]
	}
 80081e0:	4618      	mov	r0, r3
 80081e2:	370c      	adds	r7, #12
 80081e4:	46bd      	mov	sp, r7
 80081e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ea:	4770      	bx	lr
 80081ec:	2000b4b4 	.word	0x2000b4b4
 80081f0:	2000b4d0 	.word	0x2000b4d0

080081f4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b086      	sub	sp, #24
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008200:	2300      	movs	r3, #0
 8008202:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d056      	beq.n	80082b8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800820a:	4b2e      	ldr	r3, [pc, #184]	; (80082c4 <xTaskPriorityDisinherit+0xd0>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	693a      	ldr	r2, [r7, #16]
 8008210:	429a      	cmp	r2, r3
 8008212:	d00a      	beq.n	800822a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008218:	f383 8811 	msr	BASEPRI, r3
 800821c:	f3bf 8f6f 	isb	sy
 8008220:	f3bf 8f4f 	dsb	sy
 8008224:	60fb      	str	r3, [r7, #12]
}
 8008226:	bf00      	nop
 8008228:	e7fe      	b.n	8008228 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800822e:	2b00      	cmp	r3, #0
 8008230:	d10a      	bne.n	8008248 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008236:	f383 8811 	msr	BASEPRI, r3
 800823a:	f3bf 8f6f 	isb	sy
 800823e:	f3bf 8f4f 	dsb	sy
 8008242:	60bb      	str	r3, [r7, #8]
}
 8008244:	bf00      	nop
 8008246:	e7fe      	b.n	8008246 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800824c:	1e5a      	subs	r2, r3, #1
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008256:	693b      	ldr	r3, [r7, #16]
 8008258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800825a:	429a      	cmp	r2, r3
 800825c:	d02c      	beq.n	80082b8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008262:	2b00      	cmp	r3, #0
 8008264:	d128      	bne.n	80082b8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	3304      	adds	r3, #4
 800826a:	4618      	mov	r0, r3
 800826c:	f7fe fbb6 	bl	80069dc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800827c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008280:	693b      	ldr	r3, [r7, #16]
 8008282:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008284:	693b      	ldr	r3, [r7, #16]
 8008286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008288:	4b0f      	ldr	r3, [pc, #60]	; (80082c8 <xTaskPriorityDisinherit+0xd4>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	429a      	cmp	r2, r3
 800828e:	d903      	bls.n	8008298 <xTaskPriorityDisinherit+0xa4>
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008294:	4a0c      	ldr	r2, [pc, #48]	; (80082c8 <xTaskPriorityDisinherit+0xd4>)
 8008296:	6013      	str	r3, [r2, #0]
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800829c:	4613      	mov	r3, r2
 800829e:	009b      	lsls	r3, r3, #2
 80082a0:	4413      	add	r3, r2
 80082a2:	009b      	lsls	r3, r3, #2
 80082a4:	4a09      	ldr	r2, [pc, #36]	; (80082cc <xTaskPriorityDisinherit+0xd8>)
 80082a6:	441a      	add	r2, r3
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	3304      	adds	r3, #4
 80082ac:	4619      	mov	r1, r3
 80082ae:	4610      	mov	r0, r2
 80082b0:	f7fe fb37 	bl	8006922 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80082b4:	2301      	movs	r3, #1
 80082b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80082b8:	697b      	ldr	r3, [r7, #20]
	}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3718      	adds	r7, #24
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}
 80082c2:	bf00      	nop
 80082c4:	2000afd4 	.word	0x2000afd4
 80082c8:	2000b4b0 	.word	0x2000b4b0
 80082cc:	2000afd8 	.word	0x2000afd8

080082d0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b084      	sub	sp, #16
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80082da:	4b21      	ldr	r3, [pc, #132]	; (8008360 <prvAddCurrentTaskToDelayedList+0x90>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80082e0:	4b20      	ldr	r3, [pc, #128]	; (8008364 <prvAddCurrentTaskToDelayedList+0x94>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	3304      	adds	r3, #4
 80082e6:	4618      	mov	r0, r3
 80082e8:	f7fe fb78 	bl	80069dc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082f2:	d10a      	bne.n	800830a <prvAddCurrentTaskToDelayedList+0x3a>
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d007      	beq.n	800830a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082fa:	4b1a      	ldr	r3, [pc, #104]	; (8008364 <prvAddCurrentTaskToDelayedList+0x94>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	3304      	adds	r3, #4
 8008300:	4619      	mov	r1, r3
 8008302:	4819      	ldr	r0, [pc, #100]	; (8008368 <prvAddCurrentTaskToDelayedList+0x98>)
 8008304:	f7fe fb0d 	bl	8006922 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008308:	e026      	b.n	8008358 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800830a:	68fa      	ldr	r2, [r7, #12]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	4413      	add	r3, r2
 8008310:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008312:	4b14      	ldr	r3, [pc, #80]	; (8008364 <prvAddCurrentTaskToDelayedList+0x94>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	68ba      	ldr	r2, [r7, #8]
 8008318:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800831a:	68ba      	ldr	r2, [r7, #8]
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	429a      	cmp	r2, r3
 8008320:	d209      	bcs.n	8008336 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008322:	4b12      	ldr	r3, [pc, #72]	; (800836c <prvAddCurrentTaskToDelayedList+0x9c>)
 8008324:	681a      	ldr	r2, [r3, #0]
 8008326:	4b0f      	ldr	r3, [pc, #60]	; (8008364 <prvAddCurrentTaskToDelayedList+0x94>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	3304      	adds	r3, #4
 800832c:	4619      	mov	r1, r3
 800832e:	4610      	mov	r0, r2
 8008330:	f7fe fb1b 	bl	800696a <vListInsert>
}
 8008334:	e010      	b.n	8008358 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008336:	4b0e      	ldr	r3, [pc, #56]	; (8008370 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008338:	681a      	ldr	r2, [r3, #0]
 800833a:	4b0a      	ldr	r3, [pc, #40]	; (8008364 <prvAddCurrentTaskToDelayedList+0x94>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	3304      	adds	r3, #4
 8008340:	4619      	mov	r1, r3
 8008342:	4610      	mov	r0, r2
 8008344:	f7fe fb11 	bl	800696a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008348:	4b0a      	ldr	r3, [pc, #40]	; (8008374 <prvAddCurrentTaskToDelayedList+0xa4>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	68ba      	ldr	r2, [r7, #8]
 800834e:	429a      	cmp	r2, r3
 8008350:	d202      	bcs.n	8008358 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008352:	4a08      	ldr	r2, [pc, #32]	; (8008374 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	6013      	str	r3, [r2, #0]
}
 8008358:	bf00      	nop
 800835a:	3710      	adds	r7, #16
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}
 8008360:	2000b4ac 	.word	0x2000b4ac
 8008364:	2000afd4 	.word	0x2000afd4
 8008368:	2000b494 	.word	0x2000b494
 800836c:	2000b464 	.word	0x2000b464
 8008370:	2000b460 	.word	0x2000b460
 8008374:	2000b4c8 	.word	0x2000b4c8

08008378 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b08a      	sub	sp, #40	; 0x28
 800837c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800837e:	2300      	movs	r3, #0
 8008380:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008382:	f000 fb07 	bl	8008994 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008386:	4b1c      	ldr	r3, [pc, #112]	; (80083f8 <xTimerCreateTimerTask+0x80>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d021      	beq.n	80083d2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800838e:	2300      	movs	r3, #0
 8008390:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008392:	2300      	movs	r3, #0
 8008394:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008396:	1d3a      	adds	r2, r7, #4
 8008398:	f107 0108 	add.w	r1, r7, #8
 800839c:	f107 030c 	add.w	r3, r7, #12
 80083a0:	4618      	mov	r0, r3
 80083a2:	f7fe fa77 	bl	8006894 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80083a6:	6879      	ldr	r1, [r7, #4]
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	68fa      	ldr	r2, [r7, #12]
 80083ac:	9202      	str	r2, [sp, #8]
 80083ae:	9301      	str	r3, [sp, #4]
 80083b0:	2302      	movs	r3, #2
 80083b2:	9300      	str	r3, [sp, #0]
 80083b4:	2300      	movs	r3, #0
 80083b6:	460a      	mov	r2, r1
 80083b8:	4910      	ldr	r1, [pc, #64]	; (80083fc <xTimerCreateTimerTask+0x84>)
 80083ba:	4811      	ldr	r0, [pc, #68]	; (8008400 <xTimerCreateTimerTask+0x88>)
 80083bc:	f7ff f8de 	bl	800757c <xTaskCreateStatic>
 80083c0:	4603      	mov	r3, r0
 80083c2:	4a10      	ldr	r2, [pc, #64]	; (8008404 <xTimerCreateTimerTask+0x8c>)
 80083c4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80083c6:	4b0f      	ldr	r3, [pc, #60]	; (8008404 <xTimerCreateTimerTask+0x8c>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d001      	beq.n	80083d2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80083ce:	2301      	movs	r3, #1
 80083d0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d10a      	bne.n	80083ee <xTimerCreateTimerTask+0x76>
	__asm volatile
 80083d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083dc:	f383 8811 	msr	BASEPRI, r3
 80083e0:	f3bf 8f6f 	isb	sy
 80083e4:	f3bf 8f4f 	dsb	sy
 80083e8:	613b      	str	r3, [r7, #16]
}
 80083ea:	bf00      	nop
 80083ec:	e7fe      	b.n	80083ec <xTimerCreateTimerTask+0x74>
	return xReturn;
 80083ee:	697b      	ldr	r3, [r7, #20]
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3718      	adds	r7, #24
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}
 80083f8:	2000b504 	.word	0x2000b504
 80083fc:	08009574 	.word	0x08009574
 8008400:	0800853d 	.word	0x0800853d
 8008404:	2000b508 	.word	0x2000b508

08008408 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b08a      	sub	sp, #40	; 0x28
 800840c:	af00      	add	r7, sp, #0
 800840e:	60f8      	str	r0, [r7, #12]
 8008410:	60b9      	str	r1, [r7, #8]
 8008412:	607a      	str	r2, [r7, #4]
 8008414:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008416:	2300      	movs	r3, #0
 8008418:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d10a      	bne.n	8008436 <xTimerGenericCommand+0x2e>
	__asm volatile
 8008420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008424:	f383 8811 	msr	BASEPRI, r3
 8008428:	f3bf 8f6f 	isb	sy
 800842c:	f3bf 8f4f 	dsb	sy
 8008430:	623b      	str	r3, [r7, #32]
}
 8008432:	bf00      	nop
 8008434:	e7fe      	b.n	8008434 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008436:	4b1a      	ldr	r3, [pc, #104]	; (80084a0 <xTimerGenericCommand+0x98>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d02a      	beq.n	8008494 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	2b05      	cmp	r3, #5
 800844e:	dc18      	bgt.n	8008482 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008450:	f7ff feb2 	bl	80081b8 <xTaskGetSchedulerState>
 8008454:	4603      	mov	r3, r0
 8008456:	2b02      	cmp	r3, #2
 8008458:	d109      	bne.n	800846e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800845a:	4b11      	ldr	r3, [pc, #68]	; (80084a0 <xTimerGenericCommand+0x98>)
 800845c:	6818      	ldr	r0, [r3, #0]
 800845e:	f107 0110 	add.w	r1, r7, #16
 8008462:	2300      	movs	r3, #0
 8008464:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008466:	f7fe fc21 	bl	8006cac <xQueueGenericSend>
 800846a:	6278      	str	r0, [r7, #36]	; 0x24
 800846c:	e012      	b.n	8008494 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800846e:	4b0c      	ldr	r3, [pc, #48]	; (80084a0 <xTimerGenericCommand+0x98>)
 8008470:	6818      	ldr	r0, [r3, #0]
 8008472:	f107 0110 	add.w	r1, r7, #16
 8008476:	2300      	movs	r3, #0
 8008478:	2200      	movs	r2, #0
 800847a:	f7fe fc17 	bl	8006cac <xQueueGenericSend>
 800847e:	6278      	str	r0, [r7, #36]	; 0x24
 8008480:	e008      	b.n	8008494 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008482:	4b07      	ldr	r3, [pc, #28]	; (80084a0 <xTimerGenericCommand+0x98>)
 8008484:	6818      	ldr	r0, [r3, #0]
 8008486:	f107 0110 	add.w	r1, r7, #16
 800848a:	2300      	movs	r3, #0
 800848c:	683a      	ldr	r2, [r7, #0]
 800848e:	f7fe fd0b 	bl	8006ea8 <xQueueGenericSendFromISR>
 8008492:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008496:	4618      	mov	r0, r3
 8008498:	3728      	adds	r7, #40	; 0x28
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}
 800849e:	bf00      	nop
 80084a0:	2000b504 	.word	0x2000b504

080084a4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b088      	sub	sp, #32
 80084a8:	af02      	add	r7, sp, #8
 80084aa:	6078      	str	r0, [r7, #4]
 80084ac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084ae:	4b22      	ldr	r3, [pc, #136]	; (8008538 <prvProcessExpiredTimer+0x94>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	68db      	ldr	r3, [r3, #12]
 80084b4:	68db      	ldr	r3, [r3, #12]
 80084b6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80084b8:	697b      	ldr	r3, [r7, #20]
 80084ba:	3304      	adds	r3, #4
 80084bc:	4618      	mov	r0, r3
 80084be:	f7fe fa8d 	bl	80069dc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80084c8:	f003 0304 	and.w	r3, r3, #4
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d022      	beq.n	8008516 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80084d0:	697b      	ldr	r3, [r7, #20]
 80084d2:	699a      	ldr	r2, [r3, #24]
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	18d1      	adds	r1, r2, r3
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	683a      	ldr	r2, [r7, #0]
 80084dc:	6978      	ldr	r0, [r7, #20]
 80084de:	f000 f8d1 	bl	8008684 <prvInsertTimerInActiveList>
 80084e2:	4603      	mov	r3, r0
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d01f      	beq.n	8008528 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80084e8:	2300      	movs	r3, #0
 80084ea:	9300      	str	r3, [sp, #0]
 80084ec:	2300      	movs	r3, #0
 80084ee:	687a      	ldr	r2, [r7, #4]
 80084f0:	2100      	movs	r1, #0
 80084f2:	6978      	ldr	r0, [r7, #20]
 80084f4:	f7ff ff88 	bl	8008408 <xTimerGenericCommand>
 80084f8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d113      	bne.n	8008528 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008504:	f383 8811 	msr	BASEPRI, r3
 8008508:	f3bf 8f6f 	isb	sy
 800850c:	f3bf 8f4f 	dsb	sy
 8008510:	60fb      	str	r3, [r7, #12]
}
 8008512:	bf00      	nop
 8008514:	e7fe      	b.n	8008514 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800851c:	f023 0301 	bic.w	r3, r3, #1
 8008520:	b2da      	uxtb	r2, r3
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	6a1b      	ldr	r3, [r3, #32]
 800852c:	6978      	ldr	r0, [r7, #20]
 800852e:	4798      	blx	r3
}
 8008530:	bf00      	nop
 8008532:	3718      	adds	r7, #24
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}
 8008538:	2000b4fc 	.word	0x2000b4fc

0800853c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b084      	sub	sp, #16
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008544:	f107 0308 	add.w	r3, r7, #8
 8008548:	4618      	mov	r0, r3
 800854a:	f000 f857 	bl	80085fc <prvGetNextExpireTime>
 800854e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	4619      	mov	r1, r3
 8008554:	68f8      	ldr	r0, [r7, #12]
 8008556:	f000 f803 	bl	8008560 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800855a:	f000 f8d5 	bl	8008708 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800855e:	e7f1      	b.n	8008544 <prvTimerTask+0x8>

08008560 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b084      	sub	sp, #16
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800856a:	f7ff fa43 	bl	80079f4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800856e:	f107 0308 	add.w	r3, r7, #8
 8008572:	4618      	mov	r0, r3
 8008574:	f000 f866 	bl	8008644 <prvSampleTimeNow>
 8008578:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d130      	bne.n	80085e2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d10a      	bne.n	800859c <prvProcessTimerOrBlockTask+0x3c>
 8008586:	687a      	ldr	r2, [r7, #4]
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	429a      	cmp	r2, r3
 800858c:	d806      	bhi.n	800859c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800858e:	f7ff fa3f 	bl	8007a10 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008592:	68f9      	ldr	r1, [r7, #12]
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f7ff ff85 	bl	80084a4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800859a:	e024      	b.n	80085e6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d008      	beq.n	80085b4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80085a2:	4b13      	ldr	r3, [pc, #76]	; (80085f0 <prvProcessTimerOrBlockTask+0x90>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d101      	bne.n	80085b0 <prvProcessTimerOrBlockTask+0x50>
 80085ac:	2301      	movs	r3, #1
 80085ae:	e000      	b.n	80085b2 <prvProcessTimerOrBlockTask+0x52>
 80085b0:	2300      	movs	r3, #0
 80085b2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80085b4:	4b0f      	ldr	r3, [pc, #60]	; (80085f4 <prvProcessTimerOrBlockTask+0x94>)
 80085b6:	6818      	ldr	r0, [r3, #0]
 80085b8:	687a      	ldr	r2, [r7, #4]
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	1ad3      	subs	r3, r2, r3
 80085be:	683a      	ldr	r2, [r7, #0]
 80085c0:	4619      	mov	r1, r3
 80085c2:	f7fe ffa7 	bl	8007514 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80085c6:	f7ff fa23 	bl	8007a10 <xTaskResumeAll>
 80085ca:	4603      	mov	r3, r0
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d10a      	bne.n	80085e6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80085d0:	4b09      	ldr	r3, [pc, #36]	; (80085f8 <prvProcessTimerOrBlockTask+0x98>)
 80085d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085d6:	601a      	str	r2, [r3, #0]
 80085d8:	f3bf 8f4f 	dsb	sy
 80085dc:	f3bf 8f6f 	isb	sy
}
 80085e0:	e001      	b.n	80085e6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80085e2:	f7ff fa15 	bl	8007a10 <xTaskResumeAll>
}
 80085e6:	bf00      	nop
 80085e8:	3710      	adds	r7, #16
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}
 80085ee:	bf00      	nop
 80085f0:	2000b500 	.word	0x2000b500
 80085f4:	2000b504 	.word	0x2000b504
 80085f8:	e000ed04 	.word	0xe000ed04

080085fc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80085fc:	b480      	push	{r7}
 80085fe:	b085      	sub	sp, #20
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008604:	4b0e      	ldr	r3, [pc, #56]	; (8008640 <prvGetNextExpireTime+0x44>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d101      	bne.n	8008612 <prvGetNextExpireTime+0x16>
 800860e:	2201      	movs	r2, #1
 8008610:	e000      	b.n	8008614 <prvGetNextExpireTime+0x18>
 8008612:	2200      	movs	r2, #0
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d105      	bne.n	800862c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008620:	4b07      	ldr	r3, [pc, #28]	; (8008640 <prvGetNextExpireTime+0x44>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	68db      	ldr	r3, [r3, #12]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	60fb      	str	r3, [r7, #12]
 800862a:	e001      	b.n	8008630 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800862c:	2300      	movs	r3, #0
 800862e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008630:	68fb      	ldr	r3, [r7, #12]
}
 8008632:	4618      	mov	r0, r3
 8008634:	3714      	adds	r7, #20
 8008636:	46bd      	mov	sp, r7
 8008638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863c:	4770      	bx	lr
 800863e:	bf00      	nop
 8008640:	2000b4fc 	.word	0x2000b4fc

08008644 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b084      	sub	sp, #16
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800864c:	f7ff fa7e 	bl	8007b4c <xTaskGetTickCount>
 8008650:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008652:	4b0b      	ldr	r3, [pc, #44]	; (8008680 <prvSampleTimeNow+0x3c>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	68fa      	ldr	r2, [r7, #12]
 8008658:	429a      	cmp	r2, r3
 800865a:	d205      	bcs.n	8008668 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800865c:	f000 f936 	bl	80088cc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2201      	movs	r2, #1
 8008664:	601a      	str	r2, [r3, #0]
 8008666:	e002      	b.n	800866e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2200      	movs	r2, #0
 800866c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800866e:	4a04      	ldr	r2, [pc, #16]	; (8008680 <prvSampleTimeNow+0x3c>)
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008674:	68fb      	ldr	r3, [r7, #12]
}
 8008676:	4618      	mov	r0, r3
 8008678:	3710      	adds	r7, #16
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}
 800867e:	bf00      	nop
 8008680:	2000b50c 	.word	0x2000b50c

08008684 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b086      	sub	sp, #24
 8008688:	af00      	add	r7, sp, #0
 800868a:	60f8      	str	r0, [r7, #12]
 800868c:	60b9      	str	r1, [r7, #8]
 800868e:	607a      	str	r2, [r7, #4]
 8008690:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008692:	2300      	movs	r3, #0
 8008694:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	68ba      	ldr	r2, [r7, #8]
 800869a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	68fa      	ldr	r2, [r7, #12]
 80086a0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80086a2:	68ba      	ldr	r2, [r7, #8]
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	429a      	cmp	r2, r3
 80086a8:	d812      	bhi.n	80086d0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086aa:	687a      	ldr	r2, [r7, #4]
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	1ad2      	subs	r2, r2, r3
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	699b      	ldr	r3, [r3, #24]
 80086b4:	429a      	cmp	r2, r3
 80086b6:	d302      	bcc.n	80086be <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80086b8:	2301      	movs	r3, #1
 80086ba:	617b      	str	r3, [r7, #20]
 80086bc:	e01b      	b.n	80086f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80086be:	4b10      	ldr	r3, [pc, #64]	; (8008700 <prvInsertTimerInActiveList+0x7c>)
 80086c0:	681a      	ldr	r2, [r3, #0]
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	3304      	adds	r3, #4
 80086c6:	4619      	mov	r1, r3
 80086c8:	4610      	mov	r0, r2
 80086ca:	f7fe f94e 	bl	800696a <vListInsert>
 80086ce:	e012      	b.n	80086f6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80086d0:	687a      	ldr	r2, [r7, #4]
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	429a      	cmp	r2, r3
 80086d6:	d206      	bcs.n	80086e6 <prvInsertTimerInActiveList+0x62>
 80086d8:	68ba      	ldr	r2, [r7, #8]
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	429a      	cmp	r2, r3
 80086de:	d302      	bcc.n	80086e6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80086e0:	2301      	movs	r3, #1
 80086e2:	617b      	str	r3, [r7, #20]
 80086e4:	e007      	b.n	80086f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80086e6:	4b07      	ldr	r3, [pc, #28]	; (8008704 <prvInsertTimerInActiveList+0x80>)
 80086e8:	681a      	ldr	r2, [r3, #0]
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	3304      	adds	r3, #4
 80086ee:	4619      	mov	r1, r3
 80086f0:	4610      	mov	r0, r2
 80086f2:	f7fe f93a 	bl	800696a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80086f6:	697b      	ldr	r3, [r7, #20]
}
 80086f8:	4618      	mov	r0, r3
 80086fa:	3718      	adds	r7, #24
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd80      	pop	{r7, pc}
 8008700:	2000b500 	.word	0x2000b500
 8008704:	2000b4fc 	.word	0x2000b4fc

08008708 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b08e      	sub	sp, #56	; 0x38
 800870c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800870e:	e0ca      	b.n	80088a6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2b00      	cmp	r3, #0
 8008714:	da18      	bge.n	8008748 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008716:	1d3b      	adds	r3, r7, #4
 8008718:	3304      	adds	r3, #4
 800871a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800871c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800871e:	2b00      	cmp	r3, #0
 8008720:	d10a      	bne.n	8008738 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008726:	f383 8811 	msr	BASEPRI, r3
 800872a:	f3bf 8f6f 	isb	sy
 800872e:	f3bf 8f4f 	dsb	sy
 8008732:	61fb      	str	r3, [r7, #28]
}
 8008734:	bf00      	nop
 8008736:	e7fe      	b.n	8008736 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800873e:	6850      	ldr	r0, [r2, #4]
 8008740:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008742:	6892      	ldr	r2, [r2, #8]
 8008744:	4611      	mov	r1, r2
 8008746:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2b00      	cmp	r3, #0
 800874c:	f2c0 80aa 	blt.w	80088a4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008756:	695b      	ldr	r3, [r3, #20]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d004      	beq.n	8008766 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800875c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800875e:	3304      	adds	r3, #4
 8008760:	4618      	mov	r0, r3
 8008762:	f7fe f93b 	bl	80069dc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008766:	463b      	mov	r3, r7
 8008768:	4618      	mov	r0, r3
 800876a:	f7ff ff6b 	bl	8008644 <prvSampleTimeNow>
 800876e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2b09      	cmp	r3, #9
 8008774:	f200 8097 	bhi.w	80088a6 <prvProcessReceivedCommands+0x19e>
 8008778:	a201      	add	r2, pc, #4	; (adr r2, 8008780 <prvProcessReceivedCommands+0x78>)
 800877a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800877e:	bf00      	nop
 8008780:	080087a9 	.word	0x080087a9
 8008784:	080087a9 	.word	0x080087a9
 8008788:	080087a9 	.word	0x080087a9
 800878c:	0800881d 	.word	0x0800881d
 8008790:	08008831 	.word	0x08008831
 8008794:	0800887b 	.word	0x0800887b
 8008798:	080087a9 	.word	0x080087a9
 800879c:	080087a9 	.word	0x080087a9
 80087a0:	0800881d 	.word	0x0800881d
 80087a4:	08008831 	.word	0x08008831
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80087a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80087ae:	f043 0301 	orr.w	r3, r3, #1
 80087b2:	b2da      	uxtb	r2, r3
 80087b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80087ba:	68ba      	ldr	r2, [r7, #8]
 80087bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087be:	699b      	ldr	r3, [r3, #24]
 80087c0:	18d1      	adds	r1, r2, r3
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087c8:	f7ff ff5c 	bl	8008684 <prvInsertTimerInActiveList>
 80087cc:	4603      	mov	r3, r0
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d069      	beq.n	80088a6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80087d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087d4:	6a1b      	ldr	r3, [r3, #32]
 80087d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087d8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80087da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80087e0:	f003 0304 	and.w	r3, r3, #4
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d05e      	beq.n	80088a6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80087e8:	68ba      	ldr	r2, [r7, #8]
 80087ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ec:	699b      	ldr	r3, [r3, #24]
 80087ee:	441a      	add	r2, r3
 80087f0:	2300      	movs	r3, #0
 80087f2:	9300      	str	r3, [sp, #0]
 80087f4:	2300      	movs	r3, #0
 80087f6:	2100      	movs	r1, #0
 80087f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087fa:	f7ff fe05 	bl	8008408 <xTimerGenericCommand>
 80087fe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008800:	6a3b      	ldr	r3, [r7, #32]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d14f      	bne.n	80088a6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800880a:	f383 8811 	msr	BASEPRI, r3
 800880e:	f3bf 8f6f 	isb	sy
 8008812:	f3bf 8f4f 	dsb	sy
 8008816:	61bb      	str	r3, [r7, #24]
}
 8008818:	bf00      	nop
 800881a:	e7fe      	b.n	800881a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800881c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800881e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008822:	f023 0301 	bic.w	r3, r3, #1
 8008826:	b2da      	uxtb	r2, r3
 8008828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800882a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800882e:	e03a      	b.n	80088a6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008832:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008836:	f043 0301 	orr.w	r3, r3, #1
 800883a:	b2da      	uxtb	r2, r3
 800883c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800883e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008842:	68ba      	ldr	r2, [r7, #8]
 8008844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008846:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800884a:	699b      	ldr	r3, [r3, #24]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d10a      	bne.n	8008866 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008854:	f383 8811 	msr	BASEPRI, r3
 8008858:	f3bf 8f6f 	isb	sy
 800885c:	f3bf 8f4f 	dsb	sy
 8008860:	617b      	str	r3, [r7, #20]
}
 8008862:	bf00      	nop
 8008864:	e7fe      	b.n	8008864 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008868:	699a      	ldr	r2, [r3, #24]
 800886a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800886c:	18d1      	adds	r1, r2, r3
 800886e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008872:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008874:	f7ff ff06 	bl	8008684 <prvInsertTimerInActiveList>
					break;
 8008878:	e015      	b.n	80088a6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800887a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800887c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008880:	f003 0302 	and.w	r3, r3, #2
 8008884:	2b00      	cmp	r3, #0
 8008886:	d103      	bne.n	8008890 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008888:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800888a:	f000 fbe1 	bl	8009050 <vPortFree>
 800888e:	e00a      	b.n	80088a6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008892:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008896:	f023 0301 	bic.w	r3, r3, #1
 800889a:	b2da      	uxtb	r2, r3
 800889c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800889e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80088a2:	e000      	b.n	80088a6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80088a4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80088a6:	4b08      	ldr	r3, [pc, #32]	; (80088c8 <prvProcessReceivedCommands+0x1c0>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	1d39      	adds	r1, r7, #4
 80088ac:	2200      	movs	r2, #0
 80088ae:	4618      	mov	r0, r3
 80088b0:	f7fe fb96 	bl	8006fe0 <xQueueReceive>
 80088b4:	4603      	mov	r3, r0
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	f47f af2a 	bne.w	8008710 <prvProcessReceivedCommands+0x8>
	}
}
 80088bc:	bf00      	nop
 80088be:	bf00      	nop
 80088c0:	3730      	adds	r7, #48	; 0x30
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}
 80088c6:	bf00      	nop
 80088c8:	2000b504 	.word	0x2000b504

080088cc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b088      	sub	sp, #32
 80088d0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80088d2:	e048      	b.n	8008966 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80088d4:	4b2d      	ldr	r3, [pc, #180]	; (800898c <prvSwitchTimerLists+0xc0>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	68db      	ldr	r3, [r3, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088de:	4b2b      	ldr	r3, [pc, #172]	; (800898c <prvSwitchTimerLists+0xc0>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	68db      	ldr	r3, [r3, #12]
 80088e4:	68db      	ldr	r3, [r3, #12]
 80088e6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	3304      	adds	r3, #4
 80088ec:	4618      	mov	r0, r3
 80088ee:	f7fe f875 	bl	80069dc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	6a1b      	ldr	r3, [r3, #32]
 80088f6:	68f8      	ldr	r0, [r7, #12]
 80088f8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008900:	f003 0304 	and.w	r3, r3, #4
 8008904:	2b00      	cmp	r3, #0
 8008906:	d02e      	beq.n	8008966 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	699b      	ldr	r3, [r3, #24]
 800890c:	693a      	ldr	r2, [r7, #16]
 800890e:	4413      	add	r3, r2
 8008910:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008912:	68ba      	ldr	r2, [r7, #8]
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	429a      	cmp	r2, r3
 8008918:	d90e      	bls.n	8008938 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	68ba      	ldr	r2, [r7, #8]
 800891e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	68fa      	ldr	r2, [r7, #12]
 8008924:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008926:	4b19      	ldr	r3, [pc, #100]	; (800898c <prvSwitchTimerLists+0xc0>)
 8008928:	681a      	ldr	r2, [r3, #0]
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	3304      	adds	r3, #4
 800892e:	4619      	mov	r1, r3
 8008930:	4610      	mov	r0, r2
 8008932:	f7fe f81a 	bl	800696a <vListInsert>
 8008936:	e016      	b.n	8008966 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008938:	2300      	movs	r3, #0
 800893a:	9300      	str	r3, [sp, #0]
 800893c:	2300      	movs	r3, #0
 800893e:	693a      	ldr	r2, [r7, #16]
 8008940:	2100      	movs	r1, #0
 8008942:	68f8      	ldr	r0, [r7, #12]
 8008944:	f7ff fd60 	bl	8008408 <xTimerGenericCommand>
 8008948:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d10a      	bne.n	8008966 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008954:	f383 8811 	msr	BASEPRI, r3
 8008958:	f3bf 8f6f 	isb	sy
 800895c:	f3bf 8f4f 	dsb	sy
 8008960:	603b      	str	r3, [r7, #0]
}
 8008962:	bf00      	nop
 8008964:	e7fe      	b.n	8008964 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008966:	4b09      	ldr	r3, [pc, #36]	; (800898c <prvSwitchTimerLists+0xc0>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d1b1      	bne.n	80088d4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008970:	4b06      	ldr	r3, [pc, #24]	; (800898c <prvSwitchTimerLists+0xc0>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008976:	4b06      	ldr	r3, [pc, #24]	; (8008990 <prvSwitchTimerLists+0xc4>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	4a04      	ldr	r2, [pc, #16]	; (800898c <prvSwitchTimerLists+0xc0>)
 800897c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800897e:	4a04      	ldr	r2, [pc, #16]	; (8008990 <prvSwitchTimerLists+0xc4>)
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	6013      	str	r3, [r2, #0]
}
 8008984:	bf00      	nop
 8008986:	3718      	adds	r7, #24
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}
 800898c:	2000b4fc 	.word	0x2000b4fc
 8008990:	2000b500 	.word	0x2000b500

08008994 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b082      	sub	sp, #8
 8008998:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800899a:	f000 f96b 	bl	8008c74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800899e:	4b15      	ldr	r3, [pc, #84]	; (80089f4 <prvCheckForValidListAndQueue+0x60>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d120      	bne.n	80089e8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80089a6:	4814      	ldr	r0, [pc, #80]	; (80089f8 <prvCheckForValidListAndQueue+0x64>)
 80089a8:	f7fd ff8e 	bl	80068c8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80089ac:	4813      	ldr	r0, [pc, #76]	; (80089fc <prvCheckForValidListAndQueue+0x68>)
 80089ae:	f7fd ff8b 	bl	80068c8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80089b2:	4b13      	ldr	r3, [pc, #76]	; (8008a00 <prvCheckForValidListAndQueue+0x6c>)
 80089b4:	4a10      	ldr	r2, [pc, #64]	; (80089f8 <prvCheckForValidListAndQueue+0x64>)
 80089b6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80089b8:	4b12      	ldr	r3, [pc, #72]	; (8008a04 <prvCheckForValidListAndQueue+0x70>)
 80089ba:	4a10      	ldr	r2, [pc, #64]	; (80089fc <prvCheckForValidListAndQueue+0x68>)
 80089bc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80089be:	2300      	movs	r3, #0
 80089c0:	9300      	str	r3, [sp, #0]
 80089c2:	4b11      	ldr	r3, [pc, #68]	; (8008a08 <prvCheckForValidListAndQueue+0x74>)
 80089c4:	4a11      	ldr	r2, [pc, #68]	; (8008a0c <prvCheckForValidListAndQueue+0x78>)
 80089c6:	2110      	movs	r1, #16
 80089c8:	200a      	movs	r0, #10
 80089ca:	f7fe f899 	bl	8006b00 <xQueueGenericCreateStatic>
 80089ce:	4603      	mov	r3, r0
 80089d0:	4a08      	ldr	r2, [pc, #32]	; (80089f4 <prvCheckForValidListAndQueue+0x60>)
 80089d2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80089d4:	4b07      	ldr	r3, [pc, #28]	; (80089f4 <prvCheckForValidListAndQueue+0x60>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d005      	beq.n	80089e8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80089dc:	4b05      	ldr	r3, [pc, #20]	; (80089f4 <prvCheckForValidListAndQueue+0x60>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	490b      	ldr	r1, [pc, #44]	; (8008a10 <prvCheckForValidListAndQueue+0x7c>)
 80089e2:	4618      	mov	r0, r3
 80089e4:	f7fe fd6c 	bl	80074c0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80089e8:	f000 f974 	bl	8008cd4 <vPortExitCritical>
}
 80089ec:	bf00      	nop
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}
 80089f2:	bf00      	nop
 80089f4:	2000b504 	.word	0x2000b504
 80089f8:	2000b4d4 	.word	0x2000b4d4
 80089fc:	2000b4e8 	.word	0x2000b4e8
 8008a00:	2000b4fc 	.word	0x2000b4fc
 8008a04:	2000b500 	.word	0x2000b500
 8008a08:	2000b5b0 	.word	0x2000b5b0
 8008a0c:	2000b510 	.word	0x2000b510
 8008a10:	0800957c 	.word	0x0800957c

08008a14 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008a14:	b480      	push	{r7}
 8008a16:	b085      	sub	sp, #20
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	60f8      	str	r0, [r7, #12]
 8008a1c:	60b9      	str	r1, [r7, #8]
 8008a1e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	3b04      	subs	r3, #4
 8008a24:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008a2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	3b04      	subs	r3, #4
 8008a32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	f023 0201 	bic.w	r2, r3, #1
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	3b04      	subs	r3, #4
 8008a42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008a44:	4a0c      	ldr	r2, [pc, #48]	; (8008a78 <pxPortInitialiseStack+0x64>)
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	3b14      	subs	r3, #20
 8008a4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008a50:	687a      	ldr	r2, [r7, #4]
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	3b04      	subs	r3, #4
 8008a5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	f06f 0202 	mvn.w	r2, #2
 8008a62:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	3b20      	subs	r3, #32
 8008a68:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3714      	adds	r7, #20
 8008a70:	46bd      	mov	sp, r7
 8008a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a76:	4770      	bx	lr
 8008a78:	08008a7d 	.word	0x08008a7d

08008a7c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b085      	sub	sp, #20
 8008a80:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008a82:	2300      	movs	r3, #0
 8008a84:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008a86:	4b12      	ldr	r3, [pc, #72]	; (8008ad0 <prvTaskExitError+0x54>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a8e:	d00a      	beq.n	8008aa6 <prvTaskExitError+0x2a>
	__asm volatile
 8008a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a94:	f383 8811 	msr	BASEPRI, r3
 8008a98:	f3bf 8f6f 	isb	sy
 8008a9c:	f3bf 8f4f 	dsb	sy
 8008aa0:	60fb      	str	r3, [r7, #12]
}
 8008aa2:	bf00      	nop
 8008aa4:	e7fe      	b.n	8008aa4 <prvTaskExitError+0x28>
	__asm volatile
 8008aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aaa:	f383 8811 	msr	BASEPRI, r3
 8008aae:	f3bf 8f6f 	isb	sy
 8008ab2:	f3bf 8f4f 	dsb	sy
 8008ab6:	60bb      	str	r3, [r7, #8]
}
 8008ab8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008aba:	bf00      	nop
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d0fc      	beq.n	8008abc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008ac2:	bf00      	nop
 8008ac4:	bf00      	nop
 8008ac6:	3714      	adds	r7, #20
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ace:	4770      	bx	lr
 8008ad0:	20000048 	.word	0x20000048
	...

08008ae0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008ae0:	4b07      	ldr	r3, [pc, #28]	; (8008b00 <pxCurrentTCBConst2>)
 8008ae2:	6819      	ldr	r1, [r3, #0]
 8008ae4:	6808      	ldr	r0, [r1, #0]
 8008ae6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aea:	f380 8809 	msr	PSP, r0
 8008aee:	f3bf 8f6f 	isb	sy
 8008af2:	f04f 0000 	mov.w	r0, #0
 8008af6:	f380 8811 	msr	BASEPRI, r0
 8008afa:	4770      	bx	lr
 8008afc:	f3af 8000 	nop.w

08008b00 <pxCurrentTCBConst2>:
 8008b00:	2000afd4 	.word	0x2000afd4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008b04:	bf00      	nop
 8008b06:	bf00      	nop

08008b08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008b08:	4808      	ldr	r0, [pc, #32]	; (8008b2c <prvPortStartFirstTask+0x24>)
 8008b0a:	6800      	ldr	r0, [r0, #0]
 8008b0c:	6800      	ldr	r0, [r0, #0]
 8008b0e:	f380 8808 	msr	MSP, r0
 8008b12:	f04f 0000 	mov.w	r0, #0
 8008b16:	f380 8814 	msr	CONTROL, r0
 8008b1a:	b662      	cpsie	i
 8008b1c:	b661      	cpsie	f
 8008b1e:	f3bf 8f4f 	dsb	sy
 8008b22:	f3bf 8f6f 	isb	sy
 8008b26:	df00      	svc	0
 8008b28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008b2a:	bf00      	nop
 8008b2c:	e000ed08 	.word	0xe000ed08

08008b30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b086      	sub	sp, #24
 8008b34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008b36:	4b46      	ldr	r3, [pc, #280]	; (8008c50 <xPortStartScheduler+0x120>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4a46      	ldr	r2, [pc, #280]	; (8008c54 <xPortStartScheduler+0x124>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d10a      	bne.n	8008b56 <xPortStartScheduler+0x26>
	__asm volatile
 8008b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b44:	f383 8811 	msr	BASEPRI, r3
 8008b48:	f3bf 8f6f 	isb	sy
 8008b4c:	f3bf 8f4f 	dsb	sy
 8008b50:	613b      	str	r3, [r7, #16]
}
 8008b52:	bf00      	nop
 8008b54:	e7fe      	b.n	8008b54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008b56:	4b3e      	ldr	r3, [pc, #248]	; (8008c50 <xPortStartScheduler+0x120>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4a3f      	ldr	r2, [pc, #252]	; (8008c58 <xPortStartScheduler+0x128>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d10a      	bne.n	8008b76 <xPortStartScheduler+0x46>
	__asm volatile
 8008b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b64:	f383 8811 	msr	BASEPRI, r3
 8008b68:	f3bf 8f6f 	isb	sy
 8008b6c:	f3bf 8f4f 	dsb	sy
 8008b70:	60fb      	str	r3, [r7, #12]
}
 8008b72:	bf00      	nop
 8008b74:	e7fe      	b.n	8008b74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008b76:	4b39      	ldr	r3, [pc, #228]	; (8008c5c <xPortStartScheduler+0x12c>)
 8008b78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	781b      	ldrb	r3, [r3, #0]
 8008b7e:	b2db      	uxtb	r3, r3
 8008b80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	22ff      	movs	r2, #255	; 0xff
 8008b86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	781b      	ldrb	r3, [r3, #0]
 8008b8c:	b2db      	uxtb	r3, r3
 8008b8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008b90:	78fb      	ldrb	r3, [r7, #3]
 8008b92:	b2db      	uxtb	r3, r3
 8008b94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008b98:	b2da      	uxtb	r2, r3
 8008b9a:	4b31      	ldr	r3, [pc, #196]	; (8008c60 <xPortStartScheduler+0x130>)
 8008b9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008b9e:	4b31      	ldr	r3, [pc, #196]	; (8008c64 <xPortStartScheduler+0x134>)
 8008ba0:	2207      	movs	r2, #7
 8008ba2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008ba4:	e009      	b.n	8008bba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008ba6:	4b2f      	ldr	r3, [pc, #188]	; (8008c64 <xPortStartScheduler+0x134>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	3b01      	subs	r3, #1
 8008bac:	4a2d      	ldr	r2, [pc, #180]	; (8008c64 <xPortStartScheduler+0x134>)
 8008bae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008bb0:	78fb      	ldrb	r3, [r7, #3]
 8008bb2:	b2db      	uxtb	r3, r3
 8008bb4:	005b      	lsls	r3, r3, #1
 8008bb6:	b2db      	uxtb	r3, r3
 8008bb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008bba:	78fb      	ldrb	r3, [r7, #3]
 8008bbc:	b2db      	uxtb	r3, r3
 8008bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bc2:	2b80      	cmp	r3, #128	; 0x80
 8008bc4:	d0ef      	beq.n	8008ba6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008bc6:	4b27      	ldr	r3, [pc, #156]	; (8008c64 <xPortStartScheduler+0x134>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f1c3 0307 	rsb	r3, r3, #7
 8008bce:	2b04      	cmp	r3, #4
 8008bd0:	d00a      	beq.n	8008be8 <xPortStartScheduler+0xb8>
	__asm volatile
 8008bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bd6:	f383 8811 	msr	BASEPRI, r3
 8008bda:	f3bf 8f6f 	isb	sy
 8008bde:	f3bf 8f4f 	dsb	sy
 8008be2:	60bb      	str	r3, [r7, #8]
}
 8008be4:	bf00      	nop
 8008be6:	e7fe      	b.n	8008be6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008be8:	4b1e      	ldr	r3, [pc, #120]	; (8008c64 <xPortStartScheduler+0x134>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	021b      	lsls	r3, r3, #8
 8008bee:	4a1d      	ldr	r2, [pc, #116]	; (8008c64 <xPortStartScheduler+0x134>)
 8008bf0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008bf2:	4b1c      	ldr	r3, [pc, #112]	; (8008c64 <xPortStartScheduler+0x134>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008bfa:	4a1a      	ldr	r2, [pc, #104]	; (8008c64 <xPortStartScheduler+0x134>)
 8008bfc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	b2da      	uxtb	r2, r3
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008c06:	4b18      	ldr	r3, [pc, #96]	; (8008c68 <xPortStartScheduler+0x138>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	4a17      	ldr	r2, [pc, #92]	; (8008c68 <xPortStartScheduler+0x138>)
 8008c0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008c10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008c12:	4b15      	ldr	r3, [pc, #84]	; (8008c68 <xPortStartScheduler+0x138>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	4a14      	ldr	r2, [pc, #80]	; (8008c68 <xPortStartScheduler+0x138>)
 8008c18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008c1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008c1e:	f000 f8dd 	bl	8008ddc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008c22:	4b12      	ldr	r3, [pc, #72]	; (8008c6c <xPortStartScheduler+0x13c>)
 8008c24:	2200      	movs	r2, #0
 8008c26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008c28:	f000 f8fc 	bl	8008e24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008c2c:	4b10      	ldr	r3, [pc, #64]	; (8008c70 <xPortStartScheduler+0x140>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	4a0f      	ldr	r2, [pc, #60]	; (8008c70 <xPortStartScheduler+0x140>)
 8008c32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008c36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008c38:	f7ff ff66 	bl	8008b08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008c3c:	f7ff f850 	bl	8007ce0 <vTaskSwitchContext>
	prvTaskExitError();
 8008c40:	f7ff ff1c 	bl	8008a7c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008c44:	2300      	movs	r3, #0
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3718      	adds	r7, #24
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}
 8008c4e:	bf00      	nop
 8008c50:	e000ed00 	.word	0xe000ed00
 8008c54:	410fc271 	.word	0x410fc271
 8008c58:	410fc270 	.word	0x410fc270
 8008c5c:	e000e400 	.word	0xe000e400
 8008c60:	2000b600 	.word	0x2000b600
 8008c64:	2000b604 	.word	0x2000b604
 8008c68:	e000ed20 	.word	0xe000ed20
 8008c6c:	20000048 	.word	0x20000048
 8008c70:	e000ef34 	.word	0xe000ef34

08008c74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008c74:	b480      	push	{r7}
 8008c76:	b083      	sub	sp, #12
 8008c78:	af00      	add	r7, sp, #0
	__asm volatile
 8008c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c7e:	f383 8811 	msr	BASEPRI, r3
 8008c82:	f3bf 8f6f 	isb	sy
 8008c86:	f3bf 8f4f 	dsb	sy
 8008c8a:	607b      	str	r3, [r7, #4]
}
 8008c8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008c8e:	4b0f      	ldr	r3, [pc, #60]	; (8008ccc <vPortEnterCritical+0x58>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	3301      	adds	r3, #1
 8008c94:	4a0d      	ldr	r2, [pc, #52]	; (8008ccc <vPortEnterCritical+0x58>)
 8008c96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008c98:	4b0c      	ldr	r3, [pc, #48]	; (8008ccc <vPortEnterCritical+0x58>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d10f      	bne.n	8008cc0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008ca0:	4b0b      	ldr	r3, [pc, #44]	; (8008cd0 <vPortEnterCritical+0x5c>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	b2db      	uxtb	r3, r3
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d00a      	beq.n	8008cc0 <vPortEnterCritical+0x4c>
	__asm volatile
 8008caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cae:	f383 8811 	msr	BASEPRI, r3
 8008cb2:	f3bf 8f6f 	isb	sy
 8008cb6:	f3bf 8f4f 	dsb	sy
 8008cba:	603b      	str	r3, [r7, #0]
}
 8008cbc:	bf00      	nop
 8008cbe:	e7fe      	b.n	8008cbe <vPortEnterCritical+0x4a>
	}
}
 8008cc0:	bf00      	nop
 8008cc2:	370c      	adds	r7, #12
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cca:	4770      	bx	lr
 8008ccc:	20000048 	.word	0x20000048
 8008cd0:	e000ed04 	.word	0xe000ed04

08008cd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b083      	sub	sp, #12
 8008cd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008cda:	4b12      	ldr	r3, [pc, #72]	; (8008d24 <vPortExitCritical+0x50>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d10a      	bne.n	8008cf8 <vPortExitCritical+0x24>
	__asm volatile
 8008ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ce6:	f383 8811 	msr	BASEPRI, r3
 8008cea:	f3bf 8f6f 	isb	sy
 8008cee:	f3bf 8f4f 	dsb	sy
 8008cf2:	607b      	str	r3, [r7, #4]
}
 8008cf4:	bf00      	nop
 8008cf6:	e7fe      	b.n	8008cf6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008cf8:	4b0a      	ldr	r3, [pc, #40]	; (8008d24 <vPortExitCritical+0x50>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	3b01      	subs	r3, #1
 8008cfe:	4a09      	ldr	r2, [pc, #36]	; (8008d24 <vPortExitCritical+0x50>)
 8008d00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008d02:	4b08      	ldr	r3, [pc, #32]	; (8008d24 <vPortExitCritical+0x50>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d105      	bne.n	8008d16 <vPortExitCritical+0x42>
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	f383 8811 	msr	BASEPRI, r3
}
 8008d14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008d16:	bf00      	nop
 8008d18:	370c      	adds	r7, #12
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d20:	4770      	bx	lr
 8008d22:	bf00      	nop
 8008d24:	20000048 	.word	0x20000048
	...

08008d30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008d30:	f3ef 8009 	mrs	r0, PSP
 8008d34:	f3bf 8f6f 	isb	sy
 8008d38:	4b15      	ldr	r3, [pc, #84]	; (8008d90 <pxCurrentTCBConst>)
 8008d3a:	681a      	ldr	r2, [r3, #0]
 8008d3c:	f01e 0f10 	tst.w	lr, #16
 8008d40:	bf08      	it	eq
 8008d42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008d46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d4a:	6010      	str	r0, [r2, #0]
 8008d4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008d50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008d54:	f380 8811 	msr	BASEPRI, r0
 8008d58:	f3bf 8f4f 	dsb	sy
 8008d5c:	f3bf 8f6f 	isb	sy
 8008d60:	f7fe ffbe 	bl	8007ce0 <vTaskSwitchContext>
 8008d64:	f04f 0000 	mov.w	r0, #0
 8008d68:	f380 8811 	msr	BASEPRI, r0
 8008d6c:	bc09      	pop	{r0, r3}
 8008d6e:	6819      	ldr	r1, [r3, #0]
 8008d70:	6808      	ldr	r0, [r1, #0]
 8008d72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d76:	f01e 0f10 	tst.w	lr, #16
 8008d7a:	bf08      	it	eq
 8008d7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008d80:	f380 8809 	msr	PSP, r0
 8008d84:	f3bf 8f6f 	isb	sy
 8008d88:	4770      	bx	lr
 8008d8a:	bf00      	nop
 8008d8c:	f3af 8000 	nop.w

08008d90 <pxCurrentTCBConst>:
 8008d90:	2000afd4 	.word	0x2000afd4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008d94:	bf00      	nop
 8008d96:	bf00      	nop

08008d98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b082      	sub	sp, #8
 8008d9c:	af00      	add	r7, sp, #0
	__asm volatile
 8008d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008da2:	f383 8811 	msr	BASEPRI, r3
 8008da6:	f3bf 8f6f 	isb	sy
 8008daa:	f3bf 8f4f 	dsb	sy
 8008dae:	607b      	str	r3, [r7, #4]
}
 8008db0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008db2:	f7fe fedb 	bl	8007b6c <xTaskIncrementTick>
 8008db6:	4603      	mov	r3, r0
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d003      	beq.n	8008dc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008dbc:	4b06      	ldr	r3, [pc, #24]	; (8008dd8 <xPortSysTickHandler+0x40>)
 8008dbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dc2:	601a      	str	r2, [r3, #0]
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	f383 8811 	msr	BASEPRI, r3
}
 8008dce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008dd0:	bf00      	nop
 8008dd2:	3708      	adds	r7, #8
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}
 8008dd8:	e000ed04 	.word	0xe000ed04

08008ddc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008ddc:	b480      	push	{r7}
 8008dde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008de0:	4b0b      	ldr	r3, [pc, #44]	; (8008e10 <vPortSetupTimerInterrupt+0x34>)
 8008de2:	2200      	movs	r2, #0
 8008de4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008de6:	4b0b      	ldr	r3, [pc, #44]	; (8008e14 <vPortSetupTimerInterrupt+0x38>)
 8008de8:	2200      	movs	r2, #0
 8008dea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008dec:	4b0a      	ldr	r3, [pc, #40]	; (8008e18 <vPortSetupTimerInterrupt+0x3c>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	4a0a      	ldr	r2, [pc, #40]	; (8008e1c <vPortSetupTimerInterrupt+0x40>)
 8008df2:	fba2 2303 	umull	r2, r3, r2, r3
 8008df6:	099b      	lsrs	r3, r3, #6
 8008df8:	4a09      	ldr	r2, [pc, #36]	; (8008e20 <vPortSetupTimerInterrupt+0x44>)
 8008dfa:	3b01      	subs	r3, #1
 8008dfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008dfe:	4b04      	ldr	r3, [pc, #16]	; (8008e10 <vPortSetupTimerInterrupt+0x34>)
 8008e00:	2207      	movs	r2, #7
 8008e02:	601a      	str	r2, [r3, #0]
}
 8008e04:	bf00      	nop
 8008e06:	46bd      	mov	sp, r7
 8008e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0c:	4770      	bx	lr
 8008e0e:	bf00      	nop
 8008e10:	e000e010 	.word	0xe000e010
 8008e14:	e000e018 	.word	0xe000e018
 8008e18:	20000018 	.word	0x20000018
 8008e1c:	10624dd3 	.word	0x10624dd3
 8008e20:	e000e014 	.word	0xe000e014

08008e24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008e24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008e34 <vPortEnableVFP+0x10>
 8008e28:	6801      	ldr	r1, [r0, #0]
 8008e2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008e2e:	6001      	str	r1, [r0, #0]
 8008e30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008e32:	bf00      	nop
 8008e34:	e000ed88 	.word	0xe000ed88

08008e38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008e38:	b480      	push	{r7}
 8008e3a:	b085      	sub	sp, #20
 8008e3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008e3e:	f3ef 8305 	mrs	r3, IPSR
 8008e42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	2b0f      	cmp	r3, #15
 8008e48:	d914      	bls.n	8008e74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008e4a:	4a17      	ldr	r2, [pc, #92]	; (8008ea8 <vPortValidateInterruptPriority+0x70>)
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	4413      	add	r3, r2
 8008e50:	781b      	ldrb	r3, [r3, #0]
 8008e52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008e54:	4b15      	ldr	r3, [pc, #84]	; (8008eac <vPortValidateInterruptPriority+0x74>)
 8008e56:	781b      	ldrb	r3, [r3, #0]
 8008e58:	7afa      	ldrb	r2, [r7, #11]
 8008e5a:	429a      	cmp	r2, r3
 8008e5c:	d20a      	bcs.n	8008e74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e62:	f383 8811 	msr	BASEPRI, r3
 8008e66:	f3bf 8f6f 	isb	sy
 8008e6a:	f3bf 8f4f 	dsb	sy
 8008e6e:	607b      	str	r3, [r7, #4]
}
 8008e70:	bf00      	nop
 8008e72:	e7fe      	b.n	8008e72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008e74:	4b0e      	ldr	r3, [pc, #56]	; (8008eb0 <vPortValidateInterruptPriority+0x78>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008e7c:	4b0d      	ldr	r3, [pc, #52]	; (8008eb4 <vPortValidateInterruptPriority+0x7c>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	429a      	cmp	r2, r3
 8008e82:	d90a      	bls.n	8008e9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e88:	f383 8811 	msr	BASEPRI, r3
 8008e8c:	f3bf 8f6f 	isb	sy
 8008e90:	f3bf 8f4f 	dsb	sy
 8008e94:	603b      	str	r3, [r7, #0]
}
 8008e96:	bf00      	nop
 8008e98:	e7fe      	b.n	8008e98 <vPortValidateInterruptPriority+0x60>
	}
 8008e9a:	bf00      	nop
 8008e9c:	3714      	adds	r7, #20
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea4:	4770      	bx	lr
 8008ea6:	bf00      	nop
 8008ea8:	e000e3f0 	.word	0xe000e3f0
 8008eac:	2000b600 	.word	0x2000b600
 8008eb0:	e000ed0c 	.word	0xe000ed0c
 8008eb4:	2000b604 	.word	0x2000b604

08008eb8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b08a      	sub	sp, #40	; 0x28
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008ec4:	f7fe fd96 	bl	80079f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008ec8:	4b5b      	ldr	r3, [pc, #364]	; (8009038 <pvPortMalloc+0x180>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d101      	bne.n	8008ed4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008ed0:	f000 f920 	bl	8009114 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008ed4:	4b59      	ldr	r3, [pc, #356]	; (800903c <pvPortMalloc+0x184>)
 8008ed6:	681a      	ldr	r2, [r3, #0]
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	4013      	ands	r3, r2
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	f040 8093 	bne.w	8009008 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d01d      	beq.n	8008f24 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008ee8:	2208      	movs	r2, #8
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	4413      	add	r3, r2
 8008eee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f003 0307 	and.w	r3, r3, #7
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d014      	beq.n	8008f24 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f023 0307 	bic.w	r3, r3, #7
 8008f00:	3308      	adds	r3, #8
 8008f02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f003 0307 	and.w	r3, r3, #7
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d00a      	beq.n	8008f24 <pvPortMalloc+0x6c>
	__asm volatile
 8008f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f12:	f383 8811 	msr	BASEPRI, r3
 8008f16:	f3bf 8f6f 	isb	sy
 8008f1a:	f3bf 8f4f 	dsb	sy
 8008f1e:	617b      	str	r3, [r7, #20]
}
 8008f20:	bf00      	nop
 8008f22:	e7fe      	b.n	8008f22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d06e      	beq.n	8009008 <pvPortMalloc+0x150>
 8008f2a:	4b45      	ldr	r3, [pc, #276]	; (8009040 <pvPortMalloc+0x188>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	687a      	ldr	r2, [r7, #4]
 8008f30:	429a      	cmp	r2, r3
 8008f32:	d869      	bhi.n	8009008 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008f34:	4b43      	ldr	r3, [pc, #268]	; (8009044 <pvPortMalloc+0x18c>)
 8008f36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008f38:	4b42      	ldr	r3, [pc, #264]	; (8009044 <pvPortMalloc+0x18c>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008f3e:	e004      	b.n	8008f4a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f4c:	685b      	ldr	r3, [r3, #4]
 8008f4e:	687a      	ldr	r2, [r7, #4]
 8008f50:	429a      	cmp	r2, r3
 8008f52:	d903      	bls.n	8008f5c <pvPortMalloc+0xa4>
 8008f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d1f1      	bne.n	8008f40 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008f5c:	4b36      	ldr	r3, [pc, #216]	; (8009038 <pvPortMalloc+0x180>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f62:	429a      	cmp	r2, r3
 8008f64:	d050      	beq.n	8009008 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008f66:	6a3b      	ldr	r3, [r7, #32]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	2208      	movs	r2, #8
 8008f6c:	4413      	add	r3, r2
 8008f6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f72:	681a      	ldr	r2, [r3, #0]
 8008f74:	6a3b      	ldr	r3, [r7, #32]
 8008f76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f7a:	685a      	ldr	r2, [r3, #4]
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	1ad2      	subs	r2, r2, r3
 8008f80:	2308      	movs	r3, #8
 8008f82:	005b      	lsls	r3, r3, #1
 8008f84:	429a      	cmp	r2, r3
 8008f86:	d91f      	bls.n	8008fc8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008f88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	4413      	add	r3, r2
 8008f8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f90:	69bb      	ldr	r3, [r7, #24]
 8008f92:	f003 0307 	and.w	r3, r3, #7
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d00a      	beq.n	8008fb0 <pvPortMalloc+0xf8>
	__asm volatile
 8008f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f9e:	f383 8811 	msr	BASEPRI, r3
 8008fa2:	f3bf 8f6f 	isb	sy
 8008fa6:	f3bf 8f4f 	dsb	sy
 8008faa:	613b      	str	r3, [r7, #16]
}
 8008fac:	bf00      	nop
 8008fae:	e7fe      	b.n	8008fae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb2:	685a      	ldr	r2, [r3, #4]
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	1ad2      	subs	r2, r2, r3
 8008fb8:	69bb      	ldr	r3, [r7, #24]
 8008fba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fbe:	687a      	ldr	r2, [r7, #4]
 8008fc0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008fc2:	69b8      	ldr	r0, [r7, #24]
 8008fc4:	f000 f908 	bl	80091d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008fc8:	4b1d      	ldr	r3, [pc, #116]	; (8009040 <pvPortMalloc+0x188>)
 8008fca:	681a      	ldr	r2, [r3, #0]
 8008fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fce:	685b      	ldr	r3, [r3, #4]
 8008fd0:	1ad3      	subs	r3, r2, r3
 8008fd2:	4a1b      	ldr	r2, [pc, #108]	; (8009040 <pvPortMalloc+0x188>)
 8008fd4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008fd6:	4b1a      	ldr	r3, [pc, #104]	; (8009040 <pvPortMalloc+0x188>)
 8008fd8:	681a      	ldr	r2, [r3, #0]
 8008fda:	4b1b      	ldr	r3, [pc, #108]	; (8009048 <pvPortMalloc+0x190>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	429a      	cmp	r2, r3
 8008fe0:	d203      	bcs.n	8008fea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008fe2:	4b17      	ldr	r3, [pc, #92]	; (8009040 <pvPortMalloc+0x188>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	4a18      	ldr	r2, [pc, #96]	; (8009048 <pvPortMalloc+0x190>)
 8008fe8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fec:	685a      	ldr	r2, [r3, #4]
 8008fee:	4b13      	ldr	r3, [pc, #76]	; (800903c <pvPortMalloc+0x184>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	431a      	orrs	r2, r3
 8008ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008ffe:	4b13      	ldr	r3, [pc, #76]	; (800904c <pvPortMalloc+0x194>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	3301      	adds	r3, #1
 8009004:	4a11      	ldr	r2, [pc, #68]	; (800904c <pvPortMalloc+0x194>)
 8009006:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009008:	f7fe fd02 	bl	8007a10 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800900c:	69fb      	ldr	r3, [r7, #28]
 800900e:	f003 0307 	and.w	r3, r3, #7
 8009012:	2b00      	cmp	r3, #0
 8009014:	d00a      	beq.n	800902c <pvPortMalloc+0x174>
	__asm volatile
 8009016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800901a:	f383 8811 	msr	BASEPRI, r3
 800901e:	f3bf 8f6f 	isb	sy
 8009022:	f3bf 8f4f 	dsb	sy
 8009026:	60fb      	str	r3, [r7, #12]
}
 8009028:	bf00      	nop
 800902a:	e7fe      	b.n	800902a <pvPortMalloc+0x172>
	return pvReturn;
 800902c:	69fb      	ldr	r3, [r7, #28]
}
 800902e:	4618      	mov	r0, r3
 8009030:	3728      	adds	r7, #40	; 0x28
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}
 8009036:	bf00      	nop
 8009038:	2000c1c8 	.word	0x2000c1c8
 800903c:	2000c1dc 	.word	0x2000c1dc
 8009040:	2000c1cc 	.word	0x2000c1cc
 8009044:	2000c1c0 	.word	0x2000c1c0
 8009048:	2000c1d0 	.word	0x2000c1d0
 800904c:	2000c1d4 	.word	0x2000c1d4

08009050 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b086      	sub	sp, #24
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d04d      	beq.n	80090fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009062:	2308      	movs	r3, #8
 8009064:	425b      	negs	r3, r3
 8009066:	697a      	ldr	r2, [r7, #20]
 8009068:	4413      	add	r3, r2
 800906a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800906c:	697b      	ldr	r3, [r7, #20]
 800906e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009070:	693b      	ldr	r3, [r7, #16]
 8009072:	685a      	ldr	r2, [r3, #4]
 8009074:	4b24      	ldr	r3, [pc, #144]	; (8009108 <vPortFree+0xb8>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	4013      	ands	r3, r2
 800907a:	2b00      	cmp	r3, #0
 800907c:	d10a      	bne.n	8009094 <vPortFree+0x44>
	__asm volatile
 800907e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009082:	f383 8811 	msr	BASEPRI, r3
 8009086:	f3bf 8f6f 	isb	sy
 800908a:	f3bf 8f4f 	dsb	sy
 800908e:	60fb      	str	r3, [r7, #12]
}
 8009090:	bf00      	nop
 8009092:	e7fe      	b.n	8009092 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009094:	693b      	ldr	r3, [r7, #16]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d00a      	beq.n	80090b2 <vPortFree+0x62>
	__asm volatile
 800909c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090a0:	f383 8811 	msr	BASEPRI, r3
 80090a4:	f3bf 8f6f 	isb	sy
 80090a8:	f3bf 8f4f 	dsb	sy
 80090ac:	60bb      	str	r3, [r7, #8]
}
 80090ae:	bf00      	nop
 80090b0:	e7fe      	b.n	80090b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80090b2:	693b      	ldr	r3, [r7, #16]
 80090b4:	685a      	ldr	r2, [r3, #4]
 80090b6:	4b14      	ldr	r3, [pc, #80]	; (8009108 <vPortFree+0xb8>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	4013      	ands	r3, r2
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d01e      	beq.n	80090fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80090c0:	693b      	ldr	r3, [r7, #16]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d11a      	bne.n	80090fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80090c8:	693b      	ldr	r3, [r7, #16]
 80090ca:	685a      	ldr	r2, [r3, #4]
 80090cc:	4b0e      	ldr	r3, [pc, #56]	; (8009108 <vPortFree+0xb8>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	43db      	mvns	r3, r3
 80090d2:	401a      	ands	r2, r3
 80090d4:	693b      	ldr	r3, [r7, #16]
 80090d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80090d8:	f7fe fc8c 	bl	80079f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80090dc:	693b      	ldr	r3, [r7, #16]
 80090de:	685a      	ldr	r2, [r3, #4]
 80090e0:	4b0a      	ldr	r3, [pc, #40]	; (800910c <vPortFree+0xbc>)
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	4413      	add	r3, r2
 80090e6:	4a09      	ldr	r2, [pc, #36]	; (800910c <vPortFree+0xbc>)
 80090e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80090ea:	6938      	ldr	r0, [r7, #16]
 80090ec:	f000 f874 	bl	80091d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80090f0:	4b07      	ldr	r3, [pc, #28]	; (8009110 <vPortFree+0xc0>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	3301      	adds	r3, #1
 80090f6:	4a06      	ldr	r2, [pc, #24]	; (8009110 <vPortFree+0xc0>)
 80090f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80090fa:	f7fe fc89 	bl	8007a10 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80090fe:	bf00      	nop
 8009100:	3718      	adds	r7, #24
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}
 8009106:	bf00      	nop
 8009108:	2000c1dc 	.word	0x2000c1dc
 800910c:	2000c1cc 	.word	0x2000c1cc
 8009110:	2000c1d8 	.word	0x2000c1d8

08009114 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009114:	b480      	push	{r7}
 8009116:	b085      	sub	sp, #20
 8009118:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800911a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800911e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009120:	4b27      	ldr	r3, [pc, #156]	; (80091c0 <prvHeapInit+0xac>)
 8009122:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	f003 0307 	and.w	r3, r3, #7
 800912a:	2b00      	cmp	r3, #0
 800912c:	d00c      	beq.n	8009148 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	3307      	adds	r3, #7
 8009132:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	f023 0307 	bic.w	r3, r3, #7
 800913a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800913c:	68ba      	ldr	r2, [r7, #8]
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	1ad3      	subs	r3, r2, r3
 8009142:	4a1f      	ldr	r2, [pc, #124]	; (80091c0 <prvHeapInit+0xac>)
 8009144:	4413      	add	r3, r2
 8009146:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800914c:	4a1d      	ldr	r2, [pc, #116]	; (80091c4 <prvHeapInit+0xb0>)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009152:	4b1c      	ldr	r3, [pc, #112]	; (80091c4 <prvHeapInit+0xb0>)
 8009154:	2200      	movs	r2, #0
 8009156:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	68ba      	ldr	r2, [r7, #8]
 800915c:	4413      	add	r3, r2
 800915e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009160:	2208      	movs	r2, #8
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	1a9b      	subs	r3, r3, r2
 8009166:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	f023 0307 	bic.w	r3, r3, #7
 800916e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	4a15      	ldr	r2, [pc, #84]	; (80091c8 <prvHeapInit+0xb4>)
 8009174:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009176:	4b14      	ldr	r3, [pc, #80]	; (80091c8 <prvHeapInit+0xb4>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	2200      	movs	r2, #0
 800917c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800917e:	4b12      	ldr	r3, [pc, #72]	; (80091c8 <prvHeapInit+0xb4>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	2200      	movs	r2, #0
 8009184:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	68fa      	ldr	r2, [r7, #12]
 800918e:	1ad2      	subs	r2, r2, r3
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009194:	4b0c      	ldr	r3, [pc, #48]	; (80091c8 <prvHeapInit+0xb4>)
 8009196:	681a      	ldr	r2, [r3, #0]
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	685b      	ldr	r3, [r3, #4]
 80091a0:	4a0a      	ldr	r2, [pc, #40]	; (80091cc <prvHeapInit+0xb8>)
 80091a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	685b      	ldr	r3, [r3, #4]
 80091a8:	4a09      	ldr	r2, [pc, #36]	; (80091d0 <prvHeapInit+0xbc>)
 80091aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80091ac:	4b09      	ldr	r3, [pc, #36]	; (80091d4 <prvHeapInit+0xc0>)
 80091ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80091b2:	601a      	str	r2, [r3, #0]
}
 80091b4:	bf00      	nop
 80091b6:	3714      	adds	r7, #20
 80091b8:	46bd      	mov	sp, r7
 80091ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091be:	4770      	bx	lr
 80091c0:	2000b608 	.word	0x2000b608
 80091c4:	2000c1c0 	.word	0x2000c1c0
 80091c8:	2000c1c8 	.word	0x2000c1c8
 80091cc:	2000c1d0 	.word	0x2000c1d0
 80091d0:	2000c1cc 	.word	0x2000c1cc
 80091d4:	2000c1dc 	.word	0x2000c1dc

080091d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80091d8:	b480      	push	{r7}
 80091da:	b085      	sub	sp, #20
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80091e0:	4b28      	ldr	r3, [pc, #160]	; (8009284 <prvInsertBlockIntoFreeList+0xac>)
 80091e2:	60fb      	str	r3, [r7, #12]
 80091e4:	e002      	b.n	80091ec <prvInsertBlockIntoFreeList+0x14>
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	60fb      	str	r3, [r7, #12]
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	687a      	ldr	r2, [r7, #4]
 80091f2:	429a      	cmp	r2, r3
 80091f4:	d8f7      	bhi.n	80091e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	685b      	ldr	r3, [r3, #4]
 80091fe:	68ba      	ldr	r2, [r7, #8]
 8009200:	4413      	add	r3, r2
 8009202:	687a      	ldr	r2, [r7, #4]
 8009204:	429a      	cmp	r2, r3
 8009206:	d108      	bne.n	800921a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	685a      	ldr	r2, [r3, #4]
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	685b      	ldr	r3, [r3, #4]
 8009210:	441a      	add	r2, r3
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	685b      	ldr	r3, [r3, #4]
 8009222:	68ba      	ldr	r2, [r7, #8]
 8009224:	441a      	add	r2, r3
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	429a      	cmp	r2, r3
 800922c:	d118      	bne.n	8009260 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681a      	ldr	r2, [r3, #0]
 8009232:	4b15      	ldr	r3, [pc, #84]	; (8009288 <prvInsertBlockIntoFreeList+0xb0>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	429a      	cmp	r2, r3
 8009238:	d00d      	beq.n	8009256 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	685a      	ldr	r2, [r3, #4]
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	685b      	ldr	r3, [r3, #4]
 8009244:	441a      	add	r2, r3
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	681a      	ldr	r2, [r3, #0]
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	601a      	str	r2, [r3, #0]
 8009254:	e008      	b.n	8009268 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009256:	4b0c      	ldr	r3, [pc, #48]	; (8009288 <prvInsertBlockIntoFreeList+0xb0>)
 8009258:	681a      	ldr	r2, [r3, #0]
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	601a      	str	r2, [r3, #0]
 800925e:	e003      	b.n	8009268 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681a      	ldr	r2, [r3, #0]
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009268:	68fa      	ldr	r2, [r7, #12]
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	429a      	cmp	r2, r3
 800926e:	d002      	beq.n	8009276 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	687a      	ldr	r2, [r7, #4]
 8009274:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009276:	bf00      	nop
 8009278:	3714      	adds	r7, #20
 800927a:	46bd      	mov	sp, r7
 800927c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009280:	4770      	bx	lr
 8009282:	bf00      	nop
 8009284:	2000c1c0 	.word	0x2000c1c0
 8009288:	2000c1c8 	.word	0x2000c1c8

0800928c <__libc_init_array>:
 800928c:	b570      	push	{r4, r5, r6, lr}
 800928e:	4d0d      	ldr	r5, [pc, #52]	; (80092c4 <__libc_init_array+0x38>)
 8009290:	4c0d      	ldr	r4, [pc, #52]	; (80092c8 <__libc_init_array+0x3c>)
 8009292:	1b64      	subs	r4, r4, r5
 8009294:	10a4      	asrs	r4, r4, #2
 8009296:	2600      	movs	r6, #0
 8009298:	42a6      	cmp	r6, r4
 800929a:	d109      	bne.n	80092b0 <__libc_init_array+0x24>
 800929c:	4d0b      	ldr	r5, [pc, #44]	; (80092cc <__libc_init_array+0x40>)
 800929e:	4c0c      	ldr	r4, [pc, #48]	; (80092d0 <__libc_init_array+0x44>)
 80092a0:	f000 f88a 	bl	80093b8 <_init>
 80092a4:	1b64      	subs	r4, r4, r5
 80092a6:	10a4      	asrs	r4, r4, #2
 80092a8:	2600      	movs	r6, #0
 80092aa:	42a6      	cmp	r6, r4
 80092ac:	d105      	bne.n	80092ba <__libc_init_array+0x2e>
 80092ae:	bd70      	pop	{r4, r5, r6, pc}
 80092b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80092b4:	4798      	blx	r3
 80092b6:	3601      	adds	r6, #1
 80092b8:	e7ee      	b.n	8009298 <__libc_init_array+0xc>
 80092ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80092be:	4798      	blx	r3
 80092c0:	3601      	adds	r6, #1
 80092c2:	e7f2      	b.n	80092aa <__libc_init_array+0x1e>
 80092c4:	08009e28 	.word	0x08009e28
 80092c8:	08009e28 	.word	0x08009e28
 80092cc:	08009e28 	.word	0x08009e28
 80092d0:	08009e2c 	.word	0x08009e2c

080092d4 <__itoa>:
 80092d4:	1e93      	subs	r3, r2, #2
 80092d6:	2b22      	cmp	r3, #34	; 0x22
 80092d8:	b510      	push	{r4, lr}
 80092da:	460c      	mov	r4, r1
 80092dc:	d904      	bls.n	80092e8 <__itoa+0x14>
 80092de:	2300      	movs	r3, #0
 80092e0:	700b      	strb	r3, [r1, #0]
 80092e2:	461c      	mov	r4, r3
 80092e4:	4620      	mov	r0, r4
 80092e6:	bd10      	pop	{r4, pc}
 80092e8:	2a0a      	cmp	r2, #10
 80092ea:	d109      	bne.n	8009300 <__itoa+0x2c>
 80092ec:	2800      	cmp	r0, #0
 80092ee:	da07      	bge.n	8009300 <__itoa+0x2c>
 80092f0:	232d      	movs	r3, #45	; 0x2d
 80092f2:	700b      	strb	r3, [r1, #0]
 80092f4:	4240      	negs	r0, r0
 80092f6:	2101      	movs	r1, #1
 80092f8:	4421      	add	r1, r4
 80092fa:	f000 f81b 	bl	8009334 <__utoa>
 80092fe:	e7f1      	b.n	80092e4 <__itoa+0x10>
 8009300:	2100      	movs	r1, #0
 8009302:	e7f9      	b.n	80092f8 <__itoa+0x24>

08009304 <itoa>:
 8009304:	f7ff bfe6 	b.w	80092d4 <__itoa>

08009308 <memcpy>:
 8009308:	440a      	add	r2, r1
 800930a:	4291      	cmp	r1, r2
 800930c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009310:	d100      	bne.n	8009314 <memcpy+0xc>
 8009312:	4770      	bx	lr
 8009314:	b510      	push	{r4, lr}
 8009316:	f811 4b01 	ldrb.w	r4, [r1], #1
 800931a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800931e:	4291      	cmp	r1, r2
 8009320:	d1f9      	bne.n	8009316 <memcpy+0xe>
 8009322:	bd10      	pop	{r4, pc}

08009324 <memset>:
 8009324:	4402      	add	r2, r0
 8009326:	4603      	mov	r3, r0
 8009328:	4293      	cmp	r3, r2
 800932a:	d100      	bne.n	800932e <memset+0xa>
 800932c:	4770      	bx	lr
 800932e:	f803 1b01 	strb.w	r1, [r3], #1
 8009332:	e7f9      	b.n	8009328 <memset+0x4>

08009334 <__utoa>:
 8009334:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009336:	4c1f      	ldr	r4, [pc, #124]	; (80093b4 <__utoa+0x80>)
 8009338:	b08b      	sub	sp, #44	; 0x2c
 800933a:	4605      	mov	r5, r0
 800933c:	460b      	mov	r3, r1
 800933e:	466e      	mov	r6, sp
 8009340:	f104 0c20 	add.w	ip, r4, #32
 8009344:	6820      	ldr	r0, [r4, #0]
 8009346:	6861      	ldr	r1, [r4, #4]
 8009348:	4637      	mov	r7, r6
 800934a:	c703      	stmia	r7!, {r0, r1}
 800934c:	3408      	adds	r4, #8
 800934e:	4564      	cmp	r4, ip
 8009350:	463e      	mov	r6, r7
 8009352:	d1f7      	bne.n	8009344 <__utoa+0x10>
 8009354:	7921      	ldrb	r1, [r4, #4]
 8009356:	7139      	strb	r1, [r7, #4]
 8009358:	1e91      	subs	r1, r2, #2
 800935a:	6820      	ldr	r0, [r4, #0]
 800935c:	6038      	str	r0, [r7, #0]
 800935e:	2922      	cmp	r1, #34	; 0x22
 8009360:	f04f 0100 	mov.w	r1, #0
 8009364:	d904      	bls.n	8009370 <__utoa+0x3c>
 8009366:	7019      	strb	r1, [r3, #0]
 8009368:	460b      	mov	r3, r1
 800936a:	4618      	mov	r0, r3
 800936c:	b00b      	add	sp, #44	; 0x2c
 800936e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009370:	1e58      	subs	r0, r3, #1
 8009372:	4684      	mov	ip, r0
 8009374:	fbb5 f7f2 	udiv	r7, r5, r2
 8009378:	fb02 5617 	mls	r6, r2, r7, r5
 800937c:	3628      	adds	r6, #40	; 0x28
 800937e:	446e      	add	r6, sp
 8009380:	460c      	mov	r4, r1
 8009382:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8009386:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800938a:	462e      	mov	r6, r5
 800938c:	42b2      	cmp	r2, r6
 800938e:	f101 0101 	add.w	r1, r1, #1
 8009392:	463d      	mov	r5, r7
 8009394:	d9ee      	bls.n	8009374 <__utoa+0x40>
 8009396:	2200      	movs	r2, #0
 8009398:	545a      	strb	r2, [r3, r1]
 800939a:	1919      	adds	r1, r3, r4
 800939c:	1aa5      	subs	r5, r4, r2
 800939e:	42aa      	cmp	r2, r5
 80093a0:	dae3      	bge.n	800936a <__utoa+0x36>
 80093a2:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80093a6:	780e      	ldrb	r6, [r1, #0]
 80093a8:	7006      	strb	r6, [r0, #0]
 80093aa:	3201      	adds	r2, #1
 80093ac:	f801 5901 	strb.w	r5, [r1], #-1
 80093b0:	e7f4      	b.n	800939c <__utoa+0x68>
 80093b2:	bf00      	nop
 80093b4:	08009df8 	.word	0x08009df8

080093b8 <_init>:
 80093b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093ba:	bf00      	nop
 80093bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093be:	bc08      	pop	{r3}
 80093c0:	469e      	mov	lr, r3
 80093c2:	4770      	bx	lr

080093c4 <_fini>:
 80093c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093c6:	bf00      	nop
 80093c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093ca:	bc08      	pop	{r3}
 80093cc:	469e      	mov	lr, r3
 80093ce:	4770      	bx	lr
