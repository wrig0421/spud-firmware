
garage_door_opener.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091e0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a50  08009370  08009370  00019370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009dc0  08009dc0  0002004c  2**0
                  CONTENTS
  4 .ARM          00000008  08009dc0  08009dc0  00019dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009dc8  08009dc8  0002004c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009dc8  08009dc8  00019dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009dcc  08009dcc  00019dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000004c  20000000  08009dd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c1a0  2000004c  08009e1c  0002004c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000c1ec  08009e1c  0002c1ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000277fc  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005387  00000000  00000000  00047878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e08  00000000  00000000  0004cc00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001be8  00000000  00000000  0004ea08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027419  00000000  00000000  000505f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021c15  00000000  00000000  00077a09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e67cd  00000000  00000000  0009961e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017fdeb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007be8  00000000  00000000  0017fe40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000004c 	.word	0x2000004c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009358 	.word	0x08009358

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000050 	.word	0x20000050
 80001cc:	08009358 	.word	0x08009358

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96e 	b.w	80004d4 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468c      	mov	ip, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	f040 8083 	bne.w	8000326 <__udivmoddi4+0x116>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d947      	bls.n	80002b6 <__udivmoddi4+0xa6>
 8000226:	fab2 f282 	clz	r2, r2
 800022a:	b142      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022c:	f1c2 0020 	rsb	r0, r2, #32
 8000230:	fa24 f000 	lsr.w	r0, r4, r0
 8000234:	4091      	lsls	r1, r2
 8000236:	4097      	lsls	r7, r2
 8000238:	ea40 0c01 	orr.w	ip, r0, r1
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbbc f6f8 	udiv	r6, ip, r8
 8000248:	fa1f fe87 	uxth.w	lr, r7
 800024c:	fb08 c116 	mls	r1, r8, r6, ip
 8000250:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000254:	fb06 f10e 	mul.w	r1, r6, lr
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18fb      	adds	r3, r7, r3
 800025e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000262:	f080 8119 	bcs.w	8000498 <__udivmoddi4+0x288>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8116 	bls.w	8000498 <__udivmoddi4+0x288>
 800026c:	3e02      	subs	r6, #2
 800026e:	443b      	add	r3, r7
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0f8 	udiv	r0, r3, r8
 8000278:	fb08 3310 	mls	r3, r8, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fe0e 	mul.w	lr, r0, lr
 8000284:	45a6      	cmp	lr, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	193c      	adds	r4, r7, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8105 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000292:	45a6      	cmp	lr, r4
 8000294:	f240 8102 	bls.w	800049c <__udivmoddi4+0x28c>
 8000298:	3802      	subs	r0, #2
 800029a:	443c      	add	r4, r7
 800029c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a0:	eba4 040e 	sub.w	r4, r4, lr
 80002a4:	2600      	movs	r6, #0
 80002a6:	b11d      	cbz	r5, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c5 4300 	strd	r4, r3, [r5]
 80002b0:	4631      	mov	r1, r6
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	b902      	cbnz	r2, 80002ba <__udivmoddi4+0xaa>
 80002b8:	deff      	udf	#255	; 0xff
 80002ba:	fab2 f282 	clz	r2, r2
 80002be:	2a00      	cmp	r2, #0
 80002c0:	d150      	bne.n	8000364 <__udivmoddi4+0x154>
 80002c2:	1bcb      	subs	r3, r1, r7
 80002c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c8:	fa1f f887 	uxth.w	r8, r7
 80002cc:	2601      	movs	r6, #1
 80002ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80002d2:	0c21      	lsrs	r1, r4, #16
 80002d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002dc:	fb08 f30c 	mul.w	r3, r8, ip
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d907      	bls.n	80002f4 <__udivmoddi4+0xe4>
 80002e4:	1879      	adds	r1, r7, r1
 80002e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002ea:	d202      	bcs.n	80002f2 <__udivmoddi4+0xe2>
 80002ec:	428b      	cmp	r3, r1
 80002ee:	f200 80e9 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 80002f2:	4684      	mov	ip, r0
 80002f4:	1ac9      	subs	r1, r1, r3
 80002f6:	b2a3      	uxth	r3, r4
 80002f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000300:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000304:	fb08 f800 	mul.w	r8, r8, r0
 8000308:	45a0      	cmp	r8, r4
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x10c>
 800030c:	193c      	adds	r4, r7, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x10a>
 8000314:	45a0      	cmp	r8, r4
 8000316:	f200 80d9 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 800031a:	4618      	mov	r0, r3
 800031c:	eba4 0408 	sub.w	r4, r4, r8
 8000320:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000324:	e7bf      	b.n	80002a6 <__udivmoddi4+0x96>
 8000326:	428b      	cmp	r3, r1
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x12e>
 800032a:	2d00      	cmp	r5, #0
 800032c:	f000 80b1 	beq.w	8000492 <__udivmoddi4+0x282>
 8000330:	2600      	movs	r6, #0
 8000332:	e9c5 0100 	strd	r0, r1, [r5]
 8000336:	4630      	mov	r0, r6
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	fab3 f683 	clz	r6, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d14a      	bne.n	80003dc <__udivmoddi4+0x1cc>
 8000346:	428b      	cmp	r3, r1
 8000348:	d302      	bcc.n	8000350 <__udivmoddi4+0x140>
 800034a:	4282      	cmp	r2, r0
 800034c:	f200 80b8 	bhi.w	80004c0 <__udivmoddi4+0x2b0>
 8000350:	1a84      	subs	r4, r0, r2
 8000352:	eb61 0103 	sbc.w	r1, r1, r3
 8000356:	2001      	movs	r0, #1
 8000358:	468c      	mov	ip, r1
 800035a:	2d00      	cmp	r5, #0
 800035c:	d0a8      	beq.n	80002b0 <__udivmoddi4+0xa0>
 800035e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000362:	e7a5      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000364:	f1c2 0320 	rsb	r3, r2, #32
 8000368:	fa20 f603 	lsr.w	r6, r0, r3
 800036c:	4097      	lsls	r7, r2
 800036e:	fa01 f002 	lsl.w	r0, r1, r2
 8000372:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000376:	40d9      	lsrs	r1, r3
 8000378:	4330      	orrs	r0, r6
 800037a:	0c03      	lsrs	r3, r0, #16
 800037c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000380:	fa1f f887 	uxth.w	r8, r7
 8000384:	fb0e 1116 	mls	r1, lr, r6, r1
 8000388:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800038c:	fb06 f108 	mul.w	r1, r6, r8
 8000390:	4299      	cmp	r1, r3
 8000392:	fa04 f402 	lsl.w	r4, r4, r2
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x19c>
 8000398:	18fb      	adds	r3, r7, r3
 800039a:	f106 3cff 	add.w	ip, r6, #4294967295
 800039e:	f080 808d 	bcs.w	80004bc <__udivmoddi4+0x2ac>
 80003a2:	4299      	cmp	r1, r3
 80003a4:	f240 808a 	bls.w	80004bc <__udivmoddi4+0x2ac>
 80003a8:	3e02      	subs	r6, #2
 80003aa:	443b      	add	r3, r7
 80003ac:	1a5b      	subs	r3, r3, r1
 80003ae:	b281      	uxth	r1, r0
 80003b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb00 f308 	mul.w	r3, r0, r8
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x1c4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ca:	d273      	bcs.n	80004b4 <__udivmoddi4+0x2a4>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d971      	bls.n	80004b4 <__udivmoddi4+0x2a4>
 80003d0:	3802      	subs	r0, #2
 80003d2:	4439      	add	r1, r7
 80003d4:	1acb      	subs	r3, r1, r3
 80003d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003da:	e778      	b.n	80002ce <__udivmoddi4+0xbe>
 80003dc:	f1c6 0c20 	rsb	ip, r6, #32
 80003e0:	fa03 f406 	lsl.w	r4, r3, r6
 80003e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e8:	431c      	orrs	r4, r3
 80003ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80003ee:	fa01 f306 	lsl.w	r3, r1, r6
 80003f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003fa:	431f      	orrs	r7, r3
 80003fc:	0c3b      	lsrs	r3, r7, #16
 80003fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000402:	fa1f f884 	uxth.w	r8, r4
 8000406:	fb0e 1119 	mls	r1, lr, r9, r1
 800040a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800040e:	fb09 fa08 	mul.w	sl, r9, r8
 8000412:	458a      	cmp	sl, r1
 8000414:	fa02 f206 	lsl.w	r2, r2, r6
 8000418:	fa00 f306 	lsl.w	r3, r0, r6
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x220>
 800041e:	1861      	adds	r1, r4, r1
 8000420:	f109 30ff 	add.w	r0, r9, #4294967295
 8000424:	d248      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 8000426:	458a      	cmp	sl, r1
 8000428:	d946      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800042a:	f1a9 0902 	sub.w	r9, r9, #2
 800042e:	4421      	add	r1, r4
 8000430:	eba1 010a 	sub.w	r1, r1, sl
 8000434:	b2bf      	uxth	r7, r7
 8000436:	fbb1 f0fe 	udiv	r0, r1, lr
 800043a:	fb0e 1110 	mls	r1, lr, r0, r1
 800043e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000442:	fb00 f808 	mul.w	r8, r0, r8
 8000446:	45b8      	cmp	r8, r7
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x24a>
 800044a:	19e7      	adds	r7, r4, r7
 800044c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000450:	d22e      	bcs.n	80004b0 <__udivmoddi4+0x2a0>
 8000452:	45b8      	cmp	r8, r7
 8000454:	d92c      	bls.n	80004b0 <__udivmoddi4+0x2a0>
 8000456:	3802      	subs	r0, #2
 8000458:	4427      	add	r7, r4
 800045a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800045e:	eba7 0708 	sub.w	r7, r7, r8
 8000462:	fba0 8902 	umull	r8, r9, r0, r2
 8000466:	454f      	cmp	r7, r9
 8000468:	46c6      	mov	lr, r8
 800046a:	4649      	mov	r1, r9
 800046c:	d31a      	bcc.n	80004a4 <__udivmoddi4+0x294>
 800046e:	d017      	beq.n	80004a0 <__udivmoddi4+0x290>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x27a>
 8000472:	ebb3 020e 	subs.w	r2, r3, lr
 8000476:	eb67 0701 	sbc.w	r7, r7, r1
 800047a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800047e:	40f2      	lsrs	r2, r6
 8000480:	ea4c 0202 	orr.w	r2, ip, r2
 8000484:	40f7      	lsrs	r7, r6
 8000486:	e9c5 2700 	strd	r2, r7, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e70b      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e9      	b.n	8000270 <__udivmoddi4+0x60>
 800049c:	4618      	mov	r0, r3
 800049e:	e6fd      	b.n	800029c <__udivmoddi4+0x8c>
 80004a0:	4543      	cmp	r3, r8
 80004a2:	d2e5      	bcs.n	8000470 <__udivmoddi4+0x260>
 80004a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7df      	b.n	8000470 <__udivmoddi4+0x260>
 80004b0:	4608      	mov	r0, r1
 80004b2:	e7d2      	b.n	800045a <__udivmoddi4+0x24a>
 80004b4:	4660      	mov	r0, ip
 80004b6:	e78d      	b.n	80003d4 <__udivmoddi4+0x1c4>
 80004b8:	4681      	mov	r9, r0
 80004ba:	e7b9      	b.n	8000430 <__udivmoddi4+0x220>
 80004bc:	4666      	mov	r6, ip
 80004be:	e775      	b.n	80003ac <__udivmoddi4+0x19c>
 80004c0:	4630      	mov	r0, r6
 80004c2:	e74a      	b.n	800035a <__udivmoddi4+0x14a>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	4439      	add	r1, r7
 80004ca:	e713      	b.n	80002f4 <__udivmoddi4+0xe4>
 80004cc:	3802      	subs	r0, #2
 80004ce:	443c      	add	r4, r7
 80004d0:	e724      	b.n	800031c <__udivmoddi4+0x10c>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <board_wakeup>:
void board_wakeup(void);
void port_wakeup(void);


void board_wakeup(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
	SystemClock_Config();
 80004dc:	f000 f81e 	bl	800051c <SystemClock_Config>
	HAL_Init();
 80004e0:	f002 f99f 	bl	8002822 <HAL_Init>
}
 80004e4:	bf00      	nop
 80004e6:	bd80      	pop	{r7, pc}

080004e8 <port_wakeup>:


void port_wakeup(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
	MX_GPIO_Init();
 80004ec:	f000 f90a 	bl	8000704 <MX_GPIO_Init>
	MX_DMA_Init();
 80004f0:	f000 f8e2 	bl	80006b8 <MX_DMA_Init>
	MX_SPI2_Init();
 80004f4:	f000 f872 	bl	80005dc <MX_SPI2_Init>
	MX_USART1_UART_Init();
 80004f8:	f000 f8ae 	bl	8000658 <MX_USART1_UART_Init>
}
 80004fc:	bf00      	nop
 80004fe:	bd80      	pop	{r7, pc}

08000500 <board_init>:


void board_init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
	board_wakeup();
 8000504:	f7ff ffe8 	bl	80004d8 <board_wakeup>
	port_wakeup();
 8000508:	f7ff ffee 	bl	80004e8 <port_wakeup>
	flash_init();
 800050c:	f000 f99c 	bl	8000848 <flash_init>
	ssd1351_init();
 8000510:	f001 f8b2 	bl	8001678 <ssd1351_init>
	keypad_init();
 8000514:	f000 fc3c 	bl	8000d90 <keypad_init>
}
 8000518:	bf00      	nop
 800051a:	bd80      	pop	{r7, pc}

0800051c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b0ae      	sub	sp, #184	; 0xb8
 8000520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000522:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000526:	2244      	movs	r2, #68	; 0x44
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f008 feca 	bl	80092c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000530:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]
 800053c:	60da      	str	r2, [r3, #12]
 800053e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000540:	463b      	mov	r3, r7
 8000542:	2260      	movs	r2, #96	; 0x60
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f008 febc 	bl	80092c4 <memset>

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800054c:	2310      	movs	r3, #16
 800054e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000550:	2301      	movs	r3, #1
 8000552:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000556:	2300      	movs	r3, #0
 8000558:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800055c:	2360      	movs	r3, #96	; 0x60
 800055e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000562:	2300      	movs	r3, #0
 8000564:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) Error_Handler();
 8000568:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800056c:	4618      	mov	r0, r3
 800056e:	f003 f921 	bl	80037b4 <HAL_RCC_OscConfig>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <SystemClock_Config+0x60>
 8000578:	f000 f962 	bl	8000840 <Error_Handler>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800057c:	230f      	movs	r3, #15
 800057e:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000580:	2300      	movs	r3, #0
 8000582:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000584:	2300      	movs	r3, #0
 8000586:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000588:	2300      	movs	r3, #0
 800058a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800058c:	2300      	movs	r3, #0
 800058e:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) Error_Handler();
 8000590:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f003 fd2c 	bl	8003ff4 <HAL_RCC_ClockConfig>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <SystemClock_Config+0x8a>
 80005a2:	f000 f94d 	bl	8000840 <Error_Handler>

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80005a6:	2301      	movs	r3, #1
 80005a8:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80005aa:	2300      	movs	r3, #0
 80005ac:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) Error_Handler();
 80005ae:	463b      	mov	r3, r7
 80005b0:	4618      	mov	r0, r3
 80005b2:	f003 ff57 	bl	8004464 <HAL_RCCEx_PeriphCLKConfig>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <SystemClock_Config+0xa4>
 80005bc:	f000 f940 	bl	8000840 <Error_Handler>

  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK) Error_Handler();
 80005c0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005c4:	f003 f8a0 	bl	8003708 <HAL_PWREx_ControlVoltageScaling>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0xb6>
 80005ce:	f000 f937 	bl	8000840 <Error_Handler>
}
 80005d2:	bf00      	nop
 80005d4:	37b8      	adds	r7, #184	; 0xb8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
	...

080005dc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
void MX_SPI2_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  g_hspi2.Instance = SPI2;
 80005e0:	4b1b      	ldr	r3, [pc, #108]	; (8000650 <MX_SPI2_Init+0x74>)
 80005e2:	4a1c      	ldr	r2, [pc, #112]	; (8000654 <MX_SPI2_Init+0x78>)
 80005e4:	601a      	str	r2, [r3, #0]
  g_hspi2.Init.Mode = SPI_MODE_MASTER;
 80005e6:	4b1a      	ldr	r3, [pc, #104]	; (8000650 <MX_SPI2_Init+0x74>)
 80005e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80005ec:	605a      	str	r2, [r3, #4]
  g_hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80005ee:	4b18      	ldr	r3, [pc, #96]	; (8000650 <MX_SPI2_Init+0x74>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	609a      	str	r2, [r3, #8]
  g_hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80005f4:	4b16      	ldr	r3, [pc, #88]	; (8000650 <MX_SPI2_Init+0x74>)
 80005f6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80005fa:	60da      	str	r2, [r3, #12]
  g_hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005fc:	4b14      	ldr	r3, [pc, #80]	; (8000650 <MX_SPI2_Init+0x74>)
 80005fe:	2200      	movs	r2, #0
 8000600:	611a      	str	r2, [r3, #16]
  g_hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000602:	4b13      	ldr	r3, [pc, #76]	; (8000650 <MX_SPI2_Init+0x74>)
 8000604:	2200      	movs	r2, #0
 8000606:	615a      	str	r2, [r3, #20]
  g_hspi2.Init.NSS = SPI_NSS_SOFT;
 8000608:	4b11      	ldr	r3, [pc, #68]	; (8000650 <MX_SPI2_Init+0x74>)
 800060a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800060e:	619a      	str	r2, [r3, #24]
  g_hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000610:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <MX_SPI2_Init+0x74>)
 8000612:	2200      	movs	r2, #0
 8000614:	61da      	str	r2, [r3, #28]
  g_hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000616:	4b0e      	ldr	r3, [pc, #56]	; (8000650 <MX_SPI2_Init+0x74>)
 8000618:	2200      	movs	r2, #0
 800061a:	621a      	str	r2, [r3, #32]
  g_hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800061c:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <MX_SPI2_Init+0x74>)
 800061e:	2200      	movs	r2, #0
 8000620:	625a      	str	r2, [r3, #36]	; 0x24
  g_hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000622:	4b0b      	ldr	r3, [pc, #44]	; (8000650 <MX_SPI2_Init+0x74>)
 8000624:	2200      	movs	r2, #0
 8000626:	629a      	str	r2, [r3, #40]	; 0x28
  g_hspi2.Init.CRCPolynomial = 7;
 8000628:	4b09      	ldr	r3, [pc, #36]	; (8000650 <MX_SPI2_Init+0x74>)
 800062a:	2207      	movs	r2, #7
 800062c:	62da      	str	r2, [r3, #44]	; 0x2c
  g_hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800062e:	4b08      	ldr	r3, [pc, #32]	; (8000650 <MX_SPI2_Init+0x74>)
 8000630:	2200      	movs	r2, #0
 8000632:	631a      	str	r2, [r3, #48]	; 0x30
  g_hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000634:	4b06      	ldr	r3, [pc, #24]	; (8000650 <MX_SPI2_Init+0x74>)
 8000636:	2208      	movs	r2, #8
 8000638:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&g_hspi2) != HAL_OK) Error_Handler();
 800063a:	4805      	ldr	r0, [pc, #20]	; (8000650 <MX_SPI2_Init+0x74>)
 800063c:	f004 fa4a 	bl	8004ad4 <HAL_SPI_Init>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <MX_SPI2_Init+0x6e>
 8000646:	f000 f8fb 	bl	8000840 <Error_Handler>
}
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	2000195c 	.word	0x2000195c
 8000654:	40003800 	.word	0x40003800

08000658 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  g_huart1.Instance = USART1;
 800065c:	4b14      	ldr	r3, [pc, #80]	; (80006b0 <MX_USART1_UART_Init+0x58>)
 800065e:	4a15      	ldr	r2, [pc, #84]	; (80006b4 <MX_USART1_UART_Init+0x5c>)
 8000660:	601a      	str	r2, [r3, #0]
  g_huart1.Init.BaudRate = 9600;
 8000662:	4b13      	ldr	r3, [pc, #76]	; (80006b0 <MX_USART1_UART_Init+0x58>)
 8000664:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000668:	605a      	str	r2, [r3, #4]
  g_huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800066a:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <MX_USART1_UART_Init+0x58>)
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]
  g_huart1.Init.StopBits = UART_STOPBITS_1;
 8000670:	4b0f      	ldr	r3, [pc, #60]	; (80006b0 <MX_USART1_UART_Init+0x58>)
 8000672:	2200      	movs	r2, #0
 8000674:	60da      	str	r2, [r3, #12]
  g_huart1.Init.Parity = UART_PARITY_NONE;
 8000676:	4b0e      	ldr	r3, [pc, #56]	; (80006b0 <MX_USART1_UART_Init+0x58>)
 8000678:	2200      	movs	r2, #0
 800067a:	611a      	str	r2, [r3, #16]
  g_huart1.Init.Mode = UART_MODE_TX_RX;
 800067c:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <MX_USART1_UART_Init+0x58>)
 800067e:	220c      	movs	r2, #12
 8000680:	615a      	str	r2, [r3, #20]
  g_huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000682:	4b0b      	ldr	r3, [pc, #44]	; (80006b0 <MX_USART1_UART_Init+0x58>)
 8000684:	2200      	movs	r2, #0
 8000686:	619a      	str	r2, [r3, #24]
  g_huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000688:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <MX_USART1_UART_Init+0x58>)
 800068a:	2200      	movs	r2, #0
 800068c:	61da      	str	r2, [r3, #28]
  g_huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800068e:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <MX_USART1_UART_Init+0x58>)
 8000690:	2200      	movs	r2, #0
 8000692:	621a      	str	r2, [r3, #32]
  g_huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000694:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <MX_USART1_UART_Init+0x58>)
 8000696:	2200      	movs	r2, #0
 8000698:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&g_huart1) != HAL_OK)
 800069a:	4805      	ldr	r0, [pc, #20]	; (80006b0 <MX_USART1_UART_Init+0x58>)
 800069c:	f005 f80c 	bl	80056b8 <HAL_UART_Init>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80006a6:	f000 f8cb 	bl	8000840 <Error_Handler>
  }
}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	20001a50 	.word	0x20001a50
 80006b4:	40013800 	.word	0x40013800

080006b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006be:	4b10      	ldr	r3, [pc, #64]	; (8000700 <MX_DMA_Init+0x48>)
 80006c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006c2:	4a0f      	ldr	r2, [pc, #60]	; (8000700 <MX_DMA_Init+0x48>)
 80006c4:	f043 0301 	orr.w	r3, r3, #1
 80006c8:	6493      	str	r3, [r2, #72]	; 0x48
 80006ca:	4b0d      	ldr	r3, [pc, #52]	; (8000700 <MX_DMA_Init+0x48>)
 80006cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 80006d6:	2200      	movs	r2, #0
 80006d8:	2105      	movs	r1, #5
 80006da:	200e      	movs	r0, #14
 80006dc:	f002 f9b6 	bl	8002a4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80006e0:	200e      	movs	r0, #14
 80006e2:	f002 f9cf 	bl	8002a84 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 80006e6:	2200      	movs	r2, #0
 80006e8:	2105      	movs	r1, #5
 80006ea:	200f      	movs	r0, #15
 80006ec:	f002 f9ae 	bl	8002a4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80006f0:	200f      	movs	r0, #15
 80006f2:	f002 f9c7 	bl	8002a84 <HAL_NVIC_EnableIRQ>

}
 80006f6:	bf00      	nop
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40021000 	.word	0x40021000

08000704 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b088      	sub	sp, #32
 8000708:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070a:	f107 030c 	add.w	r3, r7, #12
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	605a      	str	r2, [r3, #4]
 8000714:	609a      	str	r2, [r3, #8]
 8000716:	60da      	str	r2, [r3, #12]
 8000718:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800071a:	4b3a      	ldr	r3, [pc, #232]	; (8000804 <MX_GPIO_Init+0x100>)
 800071c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071e:	4a39      	ldr	r2, [pc, #228]	; (8000804 <MX_GPIO_Init+0x100>)
 8000720:	f043 0304 	orr.w	r3, r3, #4
 8000724:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000726:	4b37      	ldr	r3, [pc, #220]	; (8000804 <MX_GPIO_Init+0x100>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072a:	f003 0304 	and.w	r3, r3, #4
 800072e:	60bb      	str	r3, [r7, #8]
 8000730:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000732:	4b34      	ldr	r3, [pc, #208]	; (8000804 <MX_GPIO_Init+0x100>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000736:	4a33      	ldr	r2, [pc, #204]	; (8000804 <MX_GPIO_Init+0x100>)
 8000738:	f043 0301 	orr.w	r3, r3, #1
 800073c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800073e:	4b31      	ldr	r3, [pc, #196]	; (8000804 <MX_GPIO_Init+0x100>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800074a:	4b2e      	ldr	r3, [pc, #184]	; (8000804 <MX_GPIO_Init+0x100>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074e:	4a2d      	ldr	r2, [pc, #180]	; (8000804 <MX_GPIO_Init+0x100>)
 8000750:	f043 0302 	orr.w	r3, r3, #2
 8000754:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000756:	4b2b      	ldr	r3, [pc, #172]	; (8000804 <MX_GPIO_Init+0x100>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075a:	f003 0302 	and.w	r3, r3, #2
 800075e:	603b      	str	r3, [r7, #0]
 8000760:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8
 8000762:	2200      	movs	r2, #0
 8000764:	f640 110e 	movw	r1, #2318	; 0x90e
 8000768:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800076c:	f002 ffa6 	bl	80036bc <HAL_GPIO_WritePin>
                          |GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_6, GPIO_PIN_RESET);
 8000770:	2200      	movs	r2, #0
 8000772:	2144      	movs	r1, #68	; 0x44
 8000774:	4824      	ldr	r0, [pc, #144]	; (8000808 <MX_GPIO_Init+0x104>)
 8000776:	f002 ffa1 	bl	80036bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_10, GPIO_PIN_RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000780:	4822      	ldr	r0, [pc, #136]	; (800080c <MX_GPIO_Init+0x108>)
 8000782:	f002 ff9b 	bl	80036bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA2 PA3 PA8
                           PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8
 8000786:	f640 130e 	movw	r3, #2318	; 0x90e
 800078a:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078c:	2301      	movs	r3, #1
 800078e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000790:	2300      	movs	r3, #0
 8000792:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000794:	2300      	movs	r3, #0
 8000796:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000798:	f107 030c 	add.w	r3, r7, #12
 800079c:	4619      	mov	r1, r3
 800079e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007a2:	f002 fdf9 	bl	8003398 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 80007a6:	2344      	movs	r3, #68	; 0x44
 80007a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007aa:	2301      	movs	r3, #1
 80007ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b2:	2300      	movs	r3, #0
 80007b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b6:	f107 030c 	add.w	r3, r7, #12
 80007ba:	4619      	mov	r1, r3
 80007bc:	4812      	ldr	r0, [pc, #72]	; (8000808 <MX_GPIO_Init+0x104>)
 80007be:	f002 fdeb 	bl	8003398 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
 80007c2:	f44f 5399 	mov.w	r3, #4896	; 0x1320
 80007c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007c8:	2300      	movs	r3, #0
 80007ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007cc:	2302      	movs	r3, #2
 80007ce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d0:	f107 030c 	add.w	r3, r7, #12
 80007d4:	4619      	mov	r1, r3
 80007d6:	480c      	ldr	r0, [pc, #48]	; (8000808 <MX_GPIO_Init+0x104>)
 80007d8:	f002 fdde 	bl	8003398 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 80007dc:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80007e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e2:	2301      	movs	r3, #1
 80007e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ea:	2300      	movs	r3, #0
 80007ec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007ee:	f107 030c 	add.w	r3, r7, #12
 80007f2:	4619      	mov	r1, r3
 80007f4:	4805      	ldr	r0, [pc, #20]	; (800080c <MX_GPIO_Init+0x108>)
 80007f6:	f002 fdcf 	bl	8003398 <HAL_GPIO_Init>

}
 80007fa:	bf00      	nop
 80007fc:	3720      	adds	r7, #32
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40021000 	.word	0x40021000
 8000808:	48000400 	.word	0x48000400
 800080c:	48000800 	.word	0x48000800

08000810 <board_init_activate_garage_door>:
	__HAL_PWR_CLEAR_FLAG(PWR_WAKEUP_PIN1_LOW);
}


void board_init_activate_garage_door(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8000814:	2201      	movs	r2, #1
 8000816:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800081a:	4802      	ldr	r0, [pc, #8]	; (8000824 <board_init_activate_garage_door+0x14>)
 800081c:	f002 ff4e 	bl	80036bc <HAL_GPIO_WritePin>
}
 8000820:	bf00      	nop
 8000822:	bd80      	pop	{r7, pc}
 8000824:	48000800 	.word	0x48000800

08000828 <board_init_deactivate_garage_door>:


void board_init_deactivate_garage_door(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 800082c:	2200      	movs	r2, #0
 800082e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000832:	4802      	ldr	r0, [pc, #8]	; (800083c <board_init_deactivate_garage_door+0x14>)
 8000834:	f002 ff42 	bl	80036bc <HAL_GPIO_WritePin>
}
 8000838:	bf00      	nop
 800083a:	bd80      	pop	{r7, pc}
 800083c:	48000800 	.word	0x48000800

08000840 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
	// no bueno
	while(1);
 8000844:	e7fe      	b.n	8000844 <Error_Handler+0x4>
	...

08000848 <flash_init>:
uint32_t flash_write(uint32_t address, uint64_t *data, uint32_t num_words);
uint32_t flash_get_page(uint32_t addr);


void flash_init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
	flash_read(FLASH_ACCESS_STORAGE_ADDR_START, (uint64_t *)&g_flash_access_signature_page, sizeof(g_flash_access_signature_page_t));
 800084c:	2208      	movs	r2, #8
 800084e:	4906      	ldr	r1, [pc, #24]	; (8000868 <flash_init+0x20>)
 8000850:	4806      	ldr	r0, [pc, #24]	; (800086c <flash_init+0x24>)
 8000852:	f000 f8af 	bl	80009b4 <flash_read>
	if (UINT32_MAX == g_flash_access_signature_page.gt_521fx_enroll_count) flash_access_clear_signature_page();
 8000856:	4b04      	ldr	r3, [pc, #16]	; (8000868 <flash_init+0x20>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800085e:	d101      	bne.n	8000864 <flash_init+0x1c>
 8000860:	f000 f806 	bl	8000870 <flash_access_clear_signature_page>
}
 8000864:	bf00      	nop
 8000866:	bd80      	pop	{r7, pc}
 8000868:	20001ad4 	.word	0x20001ad4
 800086c:	0803c000 	.word	0x0803c000

08000870 <flash_access_clear_signature_page>:


void flash_access_clear_signature_page(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
	memset(&g_flash_access_signature_page, 0, sizeof(g_flash_access_signature_page_t));
 8000874:	2208      	movs	r2, #8
 8000876:	2100      	movs	r1, #0
 8000878:	4804      	ldr	r0, [pc, #16]	; (800088c <flash_access_clear_signature_page+0x1c>)
 800087a:	f008 fd23 	bl	80092c4 <memset>
	flash_write(FLASH_ACCESS_STORAGE_ADDR_START, (uint64_t *)&g_flash_access_signature_page, sizeof(g_flash_access_signature_page_t));
 800087e:	2208      	movs	r2, #8
 8000880:	4902      	ldr	r1, [pc, #8]	; (800088c <flash_access_clear_signature_page+0x1c>)
 8000882:	4803      	ldr	r0, [pc, #12]	; (8000890 <flash_access_clear_signature_page+0x20>)
 8000884:	f000 f8b6 	bl	80009f4 <flash_write>
}
 8000888:	bf00      	nop
 800088a:	bd80      	pop	{r7, pc}
 800088c:	20001ad4 	.word	0x20001ad4
 8000890:	0803c000 	.word	0x0803c000

08000894 <flash_access_enroll_update>:


void flash_access_enroll_update(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
	g_flash_access_signature_page.gt_521fx_last_id++;
 8000898:	4b08      	ldr	r3, [pc, #32]	; (80008bc <flash_access_enroll_update+0x28>)
 800089a:	685b      	ldr	r3, [r3, #4]
 800089c:	3301      	adds	r3, #1
 800089e:	4a07      	ldr	r2, [pc, #28]	; (80008bc <flash_access_enroll_update+0x28>)
 80008a0:	6053      	str	r3, [r2, #4]
	g_flash_access_signature_page.gt_521fx_enroll_count++;
 80008a2:	4b06      	ldr	r3, [pc, #24]	; (80008bc <flash_access_enroll_update+0x28>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	3301      	adds	r3, #1
 80008a8:	4a04      	ldr	r2, [pc, #16]	; (80008bc <flash_access_enroll_update+0x28>)
 80008aa:	6013      	str	r3, [r2, #0]
	flash_write(FLASH_ACCESS_STORAGE_ADDR_START, (uint64_t *)&g_flash_access_signature_page, sizeof(g_flash_access_signature_page_t));
 80008ac:	2208      	movs	r2, #8
 80008ae:	4903      	ldr	r1, [pc, #12]	; (80008bc <flash_access_enroll_update+0x28>)
 80008b0:	4803      	ldr	r0, [pc, #12]	; (80008c0 <flash_access_enroll_update+0x2c>)
 80008b2:	f000 f89f 	bl	80009f4 <flash_write>
}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	20001ad4 	.word	0x20001ad4
 80008c0:	0803c000 	.word	0x0803c000

080008c4 <flash_access_gt521fx_last_id>:


uint16_t flash_access_gt521fx_last_id(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
	return g_flash_access_signature_page.gt_521fx_last_id;
 80008c8:	4b03      	ldr	r3, [pc, #12]	; (80008d8 <flash_access_gt521fx_last_id+0x14>)
 80008ca:	685b      	ldr	r3, [r3, #4]
 80008cc:	b29b      	uxth	r3, r3
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr
 80008d8:	20001ad4 	.word	0x20001ad4

080008dc <flash_access_gt521fx_remove_last_id>:


void flash_access_gt521fx_remove_last_id(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
	g_flash_access_signature_page.gt_521fx_last_id -= 1; // I don't care if starting at 1
 80008e0:	4b08      	ldr	r3, [pc, #32]	; (8000904 <flash_access_gt521fx_remove_last_id+0x28>)
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	3b01      	subs	r3, #1
 80008e6:	4a07      	ldr	r2, [pc, #28]	; (8000904 <flash_access_gt521fx_remove_last_id+0x28>)
 80008e8:	6053      	str	r3, [r2, #4]
	g_flash_access_signature_page.gt_521fx_enroll_count--;
 80008ea:	4b06      	ldr	r3, [pc, #24]	; (8000904 <flash_access_gt521fx_remove_last_id+0x28>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	3b01      	subs	r3, #1
 80008f0:	4a04      	ldr	r2, [pc, #16]	; (8000904 <flash_access_gt521fx_remove_last_id+0x28>)
 80008f2:	6013      	str	r3, [r2, #0]
	flash_write(FLASH_ACCESS_STORAGE_ADDR_START, (uint64_t *)&g_flash_access_signature_page, sizeof(g_flash_access_signature_page_t));
 80008f4:	2208      	movs	r2, #8
 80008f6:	4903      	ldr	r1, [pc, #12]	; (8000904 <flash_access_gt521fx_remove_last_id+0x28>)
 80008f8:	4803      	ldr	r0, [pc, #12]	; (8000908 <flash_access_gt521fx_remove_last_id+0x2c>)
 80008fa:	f000 f87b 	bl	80009f4 <flash_write>
}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20001ad4 	.word	0x20001ad4
 8000908:	0803c000 	.word	0x0803c000

0800090c <flash_access_gt521fx_reset_id_count>:


void flash_access_gt521fx_reset_id_count(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
	g_flash_access_signature_page.gt_521fx_last_id = 0; // I don't care if starting at 1
 8000910:	4b06      	ldr	r3, [pc, #24]	; (800092c <flash_access_gt521fx_reset_id_count+0x20>)
 8000912:	2200      	movs	r2, #0
 8000914:	605a      	str	r2, [r3, #4]
	g_flash_access_signature_page.gt_521fx_enroll_count = 0;
 8000916:	4b05      	ldr	r3, [pc, #20]	; (800092c <flash_access_gt521fx_reset_id_count+0x20>)
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
	flash_write(FLASH_ACCESS_STORAGE_ADDR_START, (uint64_t *)&g_flash_access_signature_page, sizeof(g_flash_access_signature_page_t));
 800091c:	2208      	movs	r2, #8
 800091e:	4903      	ldr	r1, [pc, #12]	; (800092c <flash_access_gt521fx_reset_id_count+0x20>)
 8000920:	4803      	ldr	r0, [pc, #12]	; (8000930 <flash_access_gt521fx_reset_id_count+0x24>)
 8000922:	f000 f867 	bl	80009f4 <flash_write>

}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	20001ad4 	.word	0x20001ad4
 8000930:	0803c000 	.word	0x0803c000

08000934 <flash_get_page>:
	return g_flash_access_signature_page.gt_521fx_enroll_count;
}


uint32_t flash_get_page(uint32_t addr)
{
 8000934:	b480      	push	{r7}
 8000936:	b085      	sub	sp, #20
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
	uint32_t page = 0;
 800093c:	2300      	movs	r3, #0
 800093e:	60fb      	str	r3, [r7, #12]
	if (addr < (FLASH_BASE + FLASH_BANK_SIZE)) page = (addr - FLASH_BASE) / FLASH_PAGE_SIZE;
 8000940:	4b19      	ldr	r3, [pc, #100]	; (80009a8 <flash_get_page+0x74>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	b29b      	uxth	r3, r3
 8000946:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800094a:	4293      	cmp	r3, r2
 800094c:	d007      	beq.n	800095e <flash_get_page+0x2a>
 800094e:	4b16      	ldr	r3, [pc, #88]	; (80009a8 <flash_get_page+0x74>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	029a      	lsls	r2, r3, #10
 8000954:	4b15      	ldr	r3, [pc, #84]	; (80009ac <flash_get_page+0x78>)
 8000956:	4013      	ands	r3, r2
 8000958:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800095c:	e000      	b.n	8000960 <flash_get_page+0x2c>
 800095e:	4b14      	ldr	r3, [pc, #80]	; (80009b0 <flash_get_page+0x7c>)
 8000960:	687a      	ldr	r2, [r7, #4]
 8000962:	4293      	cmp	r3, r2
 8000964:	d905      	bls.n	8000972 <flash_get_page+0x3e>
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 800096c:	0adb      	lsrs	r3, r3, #11
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	e013      	b.n	800099a <flash_get_page+0x66>
	else page = (addr - (FLASH_BASE + FLASH_BANK_SIZE)) / FLASH_PAGE_SIZE;
 8000972:	4b0d      	ldr	r3, [pc, #52]	; (80009a8 <flash_get_page+0x74>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	b29b      	uxth	r3, r3
 8000978:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800097c:	4293      	cmp	r3, r2
 800097e:	d007      	beq.n	8000990 <flash_get_page+0x5c>
 8000980:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <flash_get_page+0x74>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	029a      	lsls	r2, r3, #10
 8000986:	4b09      	ldr	r3, [pc, #36]	; (80009ac <flash_get_page+0x78>)
 8000988:	4013      	ands	r3, r2
 800098a:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800098e:	e000      	b.n	8000992 <flash_get_page+0x5e>
 8000990:	4b07      	ldr	r3, [pc, #28]	; (80009b0 <flash_get_page+0x7c>)
 8000992:	687a      	ldr	r2, [r7, #4]
 8000994:	1ad3      	subs	r3, r2, r3
 8000996:	0adb      	lsrs	r3, r3, #11
 8000998:	60fb      	str	r3, [r7, #12]
	return page;
 800099a:	68fb      	ldr	r3, [r7, #12]
}
 800099c:	4618      	mov	r0, r3
 800099e:	3714      	adds	r7, #20
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr
 80009a8:	1fff75e0 	.word	0x1fff75e0
 80009ac:	03fffc00 	.word	0x03fffc00
 80009b0:	08040000 	.word	0x08040000

080009b4 <flash_read>:


void flash_read(uint32_t address, uint64_t *rx_buf, uint16_t num_words)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b085      	sub	sp, #20
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	60f8      	str	r0, [r7, #12]
 80009bc:	60b9      	str	r1, [r7, #8]
 80009be:	4613      	mov	r3, r2
 80009c0:	80fb      	strh	r3, [r7, #6]
	while(1)
	{
		*rx_buf = *(__IO uint64_t *)address;
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009c8:	68b9      	ldr	r1, [r7, #8]
 80009ca:	e9c1 2300 	strd	r2, r3, [r1]
		address += 4;
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	3304      	adds	r3, #4
 80009d2:	60fb      	str	r3, [r7, #12]
		rx_buf++;
 80009d4:	68bb      	ldr	r3, [r7, #8]
 80009d6:	3308      	adds	r3, #8
 80009d8:	60bb      	str	r3, [r7, #8]
		if (!(num_words--)) break;
 80009da:	88fb      	ldrh	r3, [r7, #6]
 80009dc:	1e5a      	subs	r2, r3, #1
 80009de:	80fa      	strh	r2, [r7, #6]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d000      	beq.n	80009e6 <flash_read+0x32>
		*rx_buf = *(__IO uint64_t *)address;
 80009e4:	e7ed      	b.n	80009c2 <flash_read+0xe>
		if (!(num_words--)) break;
 80009e6:	bf00      	nop
	}
}
 80009e8:	bf00      	nop
 80009ea:	3714      	adds	r7, #20
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr

080009f4 <flash_write>:


uint32_t flash_write(uint32_t address, uint64_t *data, uint32_t num_dbls)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b088      	sub	sp, #32
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	60f8      	str	r0, [r7, #12]
 80009fc:	60b9      	str	r1, [r7, #8]
 80009fe:	607a      	str	r2, [r7, #4]
	static FLASH_EraseInitTypeDef erase_init_struct;
	uint32_t page_error;

	if ((address + (sizeof(uint64_t) * num_dbls)) > FLASH_ACCESS_STORAGE_ADDR_END) return -1; // error not enough allocated space
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	00da      	lsls	r2, r3, #3
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	4413      	add	r3, r2
 8000a08:	4a2b      	ldr	r2, [pc, #172]	; (8000ab8 <flash_write+0xc4>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d902      	bls.n	8000a14 <flash_write+0x20>
 8000a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a12:	e04c      	b.n	8000aae <flash_write+0xba>
	HAL_FLASH_Unlock();
 8000a14:	f002 faa8 	bl	8002f68 <HAL_FLASH_Unlock>

	uint32_t start_page = flash_get_page(address);
 8000a18:	68f8      	ldr	r0, [r7, #12]
 8000a1a:	f7ff ff8b 	bl	8000934 <flash_get_page>
 8000a1e:	61b8      	str	r0, [r7, #24]
	uint32_t end_page = flash_get_page(address + num_dbls * 8);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	00da      	lsls	r2, r3, #3
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	4413      	add	r3, r2
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f7ff ff83 	bl	8000934 <flash_get_page>
 8000a2e:	6178      	str	r0, [r7, #20]

	erase_init_struct.Banks = FLASH_BANK_1;
 8000a30:	4b22      	ldr	r3, [pc, #136]	; (8000abc <flash_write+0xc8>)
 8000a32:	2201      	movs	r2, #1
 8000a34:	605a      	str	r2, [r3, #4]
	erase_init_struct.TypeErase = FLASH_TYPEERASE_PAGES;
 8000a36:	4b21      	ldr	r3, [pc, #132]	; (8000abc <flash_write+0xc8>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
	erase_init_struct.Page = start_page;
 8000a3c:	4a1f      	ldr	r2, [pc, #124]	; (8000abc <flash_write+0xc8>)
 8000a3e:	69bb      	ldr	r3, [r7, #24]
 8000a40:	6093      	str	r3, [r2, #8]
	erase_init_struct.NbPages = ((end_page - start_page) / FLASH_PAGE_SIZE) + 1;
 8000a42:	697a      	ldr	r2, [r7, #20]
 8000a44:	69bb      	ldr	r3, [r7, #24]
 8000a46:	1ad3      	subs	r3, r2, r3
 8000a48:	0adb      	lsrs	r3, r3, #11
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	4a1b      	ldr	r2, [pc, #108]	; (8000abc <flash_write+0xc8>)
 8000a4e:	60d3      	str	r3, [r2, #12]

	if (HAL_OK != HAL_FLASHEx_Erase(&erase_init_struct, &page_error)) return HAL_FLASH_GetError();
 8000a50:	f107 0310 	add.w	r3, r7, #16
 8000a54:	4619      	mov	r1, r3
 8000a56:	4819      	ldr	r0, [pc, #100]	; (8000abc <flash_write+0xc8>)
 8000a58:	f002 fb78 	bl	800314c <HAL_FLASHEx_Erase>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d003      	beq.n	8000a6a <flash_write+0x76>
 8000a62:	f002 fab3 	bl	8002fcc <HAL_FLASH_GetError>
 8000a66:	4603      	mov	r3, r0
 8000a68:	e021      	b.n	8000aae <flash_write+0xba>
	for (uint32_t i = 0; i < num_dbls; i++)
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	61fb      	str	r3, [r7, #28]
 8000a6e:	e017      	b.n	8000aa0 <flash_write+0xac>
	{
		if (HAL_OK == HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, data[i])) address += 8;
 8000a70:	69fb      	ldr	r3, [r7, #28]
 8000a72:	00db      	lsls	r3, r3, #3
 8000a74:	68ba      	ldr	r2, [r7, #8]
 8000a76:	4413      	add	r3, r2
 8000a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a7c:	68f9      	ldr	r1, [r7, #12]
 8000a7e:	2000      	movs	r0, #0
 8000a80:	f002 fa06 	bl	8002e90 <HAL_FLASH_Program>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d103      	bne.n	8000a92 <flash_write+0x9e>
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	3308      	adds	r3, #8
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	e003      	b.n	8000a9a <flash_write+0xa6>
		else return HAL_FLASH_GetError();
 8000a92:	f002 fa9b 	bl	8002fcc <HAL_FLASH_GetError>
 8000a96:	4603      	mov	r3, r0
 8000a98:	e009      	b.n	8000aae <flash_write+0xba>
	for (uint32_t i = 0; i < num_dbls; i++)
 8000a9a:	69fb      	ldr	r3, [r7, #28]
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	61fb      	str	r3, [r7, #28]
 8000aa0:	69fa      	ldr	r2, [r7, #28]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	d3e3      	bcc.n	8000a70 <flash_write+0x7c>
	}
	HAL_FLASH_Lock();
 8000aa8:	f002 fa80 	bl	8002fac <HAL_FLASH_Lock>
	return 0;
 8000aac:	2300      	movs	r3, #0
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3720      	adds	r7, #32
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	0803ffff 	.word	0x0803ffff
 8000abc:	20000068 	.word	0x20000068

08000ac0 <gt521fx_nack_flag_set>:
// local prototypes
uint16_t gt521fx_enrolled_fingerprint_count(void);


void gt521fx_nack_flag_set(bool flag)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	71fb      	strb	r3, [r7, #7]
	g_nack_flag = flag;
 8000aca:	4a04      	ldr	r2, [pc, #16]	; (8000adc <gt521fx_nack_flag_set+0x1c>)
 8000acc:	79fb      	ldrb	r3, [r7, #7]
 8000ace:	7013      	strb	r3, [r2, #0]
}
 8000ad0:	bf00      	nop
 8000ad2:	370c      	adds	r7, #12
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr
 8000adc:	20000078 	.word	0x20000078

08000ae0 <gt521fx_nack_state_set>:


void gt521fx_nack_state_set(gt_521fx_error_e err)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	80fb      	strh	r3, [r7, #6]
	g_nack_state = err;
 8000aea:	4a04      	ldr	r2, [pc, #16]	; (8000afc <gt521fx_nack_state_set+0x1c>)
 8000aec:	88fb      	ldrh	r3, [r7, #6]
 8000aee:	8013      	strh	r3, [r2, #0]
}
 8000af0:	bf00      	nop
 8000af2:	370c      	adds	r7, #12
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr
 8000afc:	2000000a 	.word	0x2000000a

08000b00 <gt521fx_nack_flag>:


bool gt521fx_nack_flag(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
	return g_nack_flag;
 8000b04:	4b03      	ldr	r3, [pc, #12]	; (8000b14 <gt521fx_nack_flag+0x14>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	20000078 	.word	0x20000078

08000b18 <gt521fx_enrolled_fingerprint_count_set>:
	return g_enrolled_fingerprint_count;
}


void gt521fx_enrolled_fingerprint_count_set(uint16_t count)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	80fb      	strh	r3, [r7, #6]
	g_enrolled_fingerprint_count = count;
 8000b22:	4a04      	ldr	r2, [pc, #16]	; (8000b34 <gt521fx_enrolled_fingerprint_count_set+0x1c>)
 8000b24:	88fb      	ldrh	r3, [r7, #6]
 8000b26:	8013      	strh	r3, [r2, #0]
}
 8000b28:	bf00      	nop
 8000b2a:	370c      	adds	r7, #12
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr
 8000b34:	2000007e 	.word	0x2000007e

08000b38 <gt521fx_finger_is_pressed_clear>:
	return g_gt521fx_initialized;
}


void gt521fx_finger_is_pressed_clear(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
	g_finger_success_count = 0;
 8000b3c:	4b05      	ldr	r3, [pc, #20]	; (8000b54 <gt521fx_finger_is_pressed_clear+0x1c>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	701a      	strb	r2, [r3, #0]
	g_finger_is_pressed = false;
 8000b42:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <gt521fx_finger_is_pressed_clear+0x20>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	701a      	strb	r2, [r3, #0]
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	2000007b 	.word	0x2000007b
 8000b58:	20000079 	.word	0x20000079

08000b5c <gt521fx_finger_is_pressed_set>:


void gt521fx_finger_is_pressed_set(bool flag)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	71fb      	strb	r3, [r7, #7]
	if (flag)
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d013      	beq.n	8000b94 <gt521fx_finger_is_pressed_set+0x38>
	{
		g_finger_success_count++;
 8000b6c:	4b0f      	ldr	r3, [pc, #60]	; (8000bac <gt521fx_finger_is_pressed_set+0x50>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	3301      	adds	r3, #1
 8000b72:	b2da      	uxtb	r2, r3
 8000b74:	4b0d      	ldr	r3, [pc, #52]	; (8000bac <gt521fx_finger_is_pressed_set+0x50>)
 8000b76:	701a      	strb	r2, [r3, #0]
		if (g_finger_success_count >= g_finger_debounce_count) g_finger_is_pressed = true;
 8000b78:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <gt521fx_finger_is_pressed_set+0x50>)
 8000b7a:	781a      	ldrb	r2, [r3, #0]
 8000b7c:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <gt521fx_finger_is_pressed_set+0x54>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	429a      	cmp	r2, r3
 8000b82:	d303      	bcc.n	8000b8c <gt521fx_finger_is_pressed_set+0x30>
 8000b84:	4b0b      	ldr	r3, [pc, #44]	; (8000bb4 <gt521fx_finger_is_pressed_set+0x58>)
 8000b86:	2201      	movs	r2, #1
 8000b88:	701a      	strb	r2, [r3, #0]
	else
	{
		g_finger_success_count = 0;
		g_finger_is_pressed = false;
	}
}
 8000b8a:	e009      	b.n	8000ba0 <gt521fx_finger_is_pressed_set+0x44>
		else g_finger_is_pressed = false;
 8000b8c:	4b09      	ldr	r3, [pc, #36]	; (8000bb4 <gt521fx_finger_is_pressed_set+0x58>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	701a      	strb	r2, [r3, #0]
}
 8000b92:	e005      	b.n	8000ba0 <gt521fx_finger_is_pressed_set+0x44>
		g_finger_success_count = 0;
 8000b94:	4b05      	ldr	r3, [pc, #20]	; (8000bac <gt521fx_finger_is_pressed_set+0x50>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	701a      	strb	r2, [r3, #0]
		g_finger_is_pressed = false;
 8000b9a:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <gt521fx_finger_is_pressed_set+0x58>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	701a      	strb	r2, [r3, #0]
}
 8000ba0:	bf00      	nop
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	2000007b 	.word	0x2000007b
 8000bb0:	20000008 	.word	0x20000008
 8000bb4:	20000079 	.word	0x20000079

08000bb8 <gt521fx_finger_is_pressed_flag>:


bool gt521fx_finger_is_pressed_flag(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
	return g_finger_is_pressed;
 8000bbc:	4b03      	ldr	r3, [pc, #12]	; (8000bcc <gt521fx_finger_is_pressed_flag+0x14>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	20000079 	.word	0x20000079

08000bd0 <gt521fx_security_lvl_set>:


void gt521fx_security_lvl_set(uint8_t lvl)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	71fb      	strb	r3, [r7, #7]
	g_security_lvl = lvl;
 8000bda:	4a04      	ldr	r2, [pc, #16]	; (8000bec <gt521fx_security_lvl_set+0x1c>)
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	7013      	strb	r3, [r2, #0]
}
 8000be0:	bf00      	nop
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	2000007a 	.word	0x2000007a

08000bf0 <gt521fx_identified_id_set>:


void gt521fx_identified_id_set(uint16_t id)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	80fb      	strh	r3, [r7, #6]
	g_identified_id = id;
 8000bfa:	4a04      	ldr	r2, [pc, #16]	; (8000c0c <gt521fx_identified_id_set+0x1c>)
 8000bfc:	88fb      	ldrh	r3, [r7, #6]
 8000bfe:	8013      	strh	r3, [r2, #0]
}
 8000c00:	bf00      	nop
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	2000007c 	.word	0x2000007c

08000c10 <gt521fx_led_on>:
	return g_identified_id;
}


void gt521fx_led_on(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
	packet_create_cmd_and_send((p_packet_handle_t)&gt521fx_tx_pkt, GT521FX_CMD_CMOS_LED, LED_ON);
 8000c14:	2201      	movs	r2, #1
 8000c16:	2112      	movs	r1, #18
 8000c18:	4802      	ldr	r0, [pc, #8]	; (8000c24 <gt521fx_led_on+0x14>)
 8000c1a:	f000 fb5d 	bl	80012d8 <packet_create_cmd_and_send>
}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	20001adc 	.word	0x20001adc

08000c28 <gt521fx_led_off>:


void gt521fx_led_off(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
	packet_create_cmd_and_send((p_packet_handle_t)&gt521fx_tx_pkt, GT521FX_CMD_CMOS_LED, LED_OFF);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	2112      	movs	r1, #18
 8000c30:	4802      	ldr	r0, [pc, #8]	; (8000c3c <gt521fx_led_off+0x14>)
 8000c32:	f000 fb51 	bl	80012d8 <packet_create_cmd_and_send>
}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	20001adc 	.word	0x20001adc

08000c40 <gt521fx_open>:


void gt521fx_open(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
	packet_create_cmd_and_send((p_packet_handle_t)&gt521fx_tx_pkt, GT521FX_CMD_OPEN, 0);
 8000c44:	2200      	movs	r2, #0
 8000c46:	2101      	movs	r1, #1
 8000c48:	4802      	ldr	r0, [pc, #8]	; (8000c54 <gt521fx_open+0x14>)
 8000c4a:	f000 fb45 	bl	80012d8 <packet_create_cmd_and_send>
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20001adc 	.word	0x20001adc

08000c58 <gt521fx_start_enrollment>:
	packet_create_cmd_and_send((p_packet_handle_t)&gt521fx_tx_pkt, GT521FX_CMD_CHANGE_BAUD_RATE, baud_rate);
}


void gt521fx_start_enrollment(uint16_t id)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	80fb      	strh	r3, [r7, #6]
	packet_create_cmd_and_send((p_packet_handle_t)&gt521fx_tx_pkt, GT521FX_CMD_ENROLL_START, id);
 8000c62:	88fb      	ldrh	r3, [r7, #6]
 8000c64:	461a      	mov	r2, r3
 8000c66:	2122      	movs	r1, #34	; 0x22
 8000c68:	4803      	ldr	r0, [pc, #12]	; (8000c78 <gt521fx_start_enrollment+0x20>)
 8000c6a:	f000 fb35 	bl	80012d8 <packet_create_cmd_and_send>
}
 8000c6e:	bf00      	nop
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	20001adc 	.word	0x20001adc

08000c7c <gt521fx_finger_is_pressed>:


void gt521fx_finger_is_pressed(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
	packet_create_cmd_and_send((p_packet_handle_t)&gt521fx_tx_pkt, GT521FX_CMD_IS_PRESS_FINGER, 0xff);
 8000c80:	22ff      	movs	r2, #255	; 0xff
 8000c82:	2126      	movs	r1, #38	; 0x26
 8000c84:	4802      	ldr	r0, [pc, #8]	; (8000c90 <gt521fx_finger_is_pressed+0x14>)
 8000c86:	f000 fb27 	bl	80012d8 <packet_create_cmd_and_send>
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	20001adc 	.word	0x20001adc

08000c94 <gt521fx_delete_all_fingerprints>:


void gt521fx_delete_all_fingerprints(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
	packet_create_cmd_and_send((p_packet_handle_t)&gt521fx_tx_pkt, GT521FX_CMD_DELETE_ALL, 0);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	2141      	movs	r1, #65	; 0x41
 8000c9c:	4802      	ldr	r0, [pc, #8]	; (8000ca8 <gt521fx_delete_all_fingerprints+0x14>)
 8000c9e:	f000 fb1b 	bl	80012d8 <packet_create_cmd_and_send>
}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	20001adc 	.word	0x20001adc

08000cac <gt521fx_delete_fingerprint>:


void gt521fx_delete_fingerprint(uint16_t id)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	80fb      	strh	r3, [r7, #6]
	packet_create_cmd_and_send((p_packet_handle_t)&gt521fx_tx_pkt, GT521FX_CMD_DELETE_ID, id);
 8000cb6:	88fb      	ldrh	r3, [r7, #6]
 8000cb8:	461a      	mov	r2, r3
 8000cba:	2140      	movs	r1, #64	; 0x40
 8000cbc:	4803      	ldr	r0, [pc, #12]	; (8000ccc <gt521fx_delete_fingerprint+0x20>)
 8000cbe:	f000 fb0b 	bl	80012d8 <packet_create_cmd_and_send>
}
 8000cc2:	bf00      	nop
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	20001adc 	.word	0x20001adc

08000cd0 <gt521fx_fingerprint_identify>:
	else return true;
}


bool gt521fx_fingerprint_identify(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
	packet_create_cmd_and_send((p_packet_handle_t)&gt521fx_tx_pkt, GT521FX_CMD_IDENTIFY, 0);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	2151      	movs	r1, #81	; 0x51
 8000cd8:	480b      	ldr	r0, [pc, #44]	; (8000d08 <gt521fx_fingerprint_identify+0x38>)
 8000cda:	f000 fafd 	bl	80012d8 <packet_create_cmd_and_send>
	while(!pkt_received());
 8000cde:	bf00      	nop
 8000ce0:	f000 fb8c 	bl	80013fc <pkt_received>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	f083 0301 	eor.w	r3, r3, #1
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d1f7      	bne.n	8000ce0 <gt521fx_fingerprint_identify+0x10>
	clear_pkt_received_flag();
 8000cf0:	f000 fb98 	bl	8001424 <clear_pkt_received_flag>
	if (gt521fx_nack_flag()) return false;
 8000cf4:	f7ff ff04 	bl	8000b00 <gt521fx_nack_flag>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <gt521fx_fingerprint_identify+0x32>
 8000cfe:	2300      	movs	r3, #0
 8000d00:	e000      	b.n	8000d04 <gt521fx_fingerprint_identify+0x34>
	else return true;
 8000d02:	2301      	movs	r3, #1
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	20001adc 	.word	0x20001adc

08000d0c <gt521fx_capture_finger>:


void gt521fx_capture_finger(bool enroll_stage)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	71fb      	strb	r3, [r7, #7]
	uint8_t input_parameter;
	if (enroll_stage) input_parameter = 0xFF;
 8000d16:	79fb      	ldrb	r3, [r7, #7]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d002      	beq.n	8000d22 <gt521fx_capture_finger+0x16>
 8000d1c:	23ff      	movs	r3, #255	; 0xff
 8000d1e:	73fb      	strb	r3, [r7, #15]
 8000d20:	e001      	b.n	8000d26 <gt521fx_capture_finger+0x1a>
	else input_parameter = 0;
 8000d22:	2300      	movs	r3, #0
 8000d24:	73fb      	strb	r3, [r7, #15]
	packet_create_cmd_and_send((p_packet_handle_t)&gt521fx_tx_pkt, GT521FX_CMD_CAPTURE_FINGER, input_parameter);
 8000d26:	7bfb      	ldrb	r3, [r7, #15]
 8000d28:	461a      	mov	r2, r3
 8000d2a:	2160      	movs	r1, #96	; 0x60
 8000d2c:	4803      	ldr	r0, [pc, #12]	; (8000d3c <gt521fx_capture_finger+0x30>)
 8000d2e:	f000 fad3 	bl	80012d8 <packet_create_cmd_and_send>
}
 8000d32:	bf00      	nop
 8000d34:	3710      	adds	r7, #16
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	20001adc 	.word	0x20001adc

08000d40 <gt521fx_enrollment>:
	else return true;
}


void gt521fx_enrollment(gt_521fx_enrollment_stage_e stage)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	71fb      	strb	r3, [r7, #7]
	gt_521fx_cmd_e cmd_stage = GT521FX_CMD_ENROLL_1;
 8000d4a:	2323      	movs	r3, #35	; 0x23
 8000d4c:	73fb      	strb	r3, [r7, #15]
	switch (stage)
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
 8000d50:	2b02      	cmp	r3, #2
 8000d52:	d00c      	beq.n	8000d6e <gt521fx_enrollment+0x2e>
 8000d54:	2b02      	cmp	r3, #2
 8000d56:	dc0d      	bgt.n	8000d74 <gt521fx_enrollment+0x34>
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d002      	beq.n	8000d62 <gt521fx_enrollment+0x22>
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d003      	beq.n	8000d68 <gt521fx_enrollment+0x28>
 8000d60:	e008      	b.n	8000d74 <gt521fx_enrollment+0x34>
	{
		case GT521FX_ENROLLMENT_STAGE_FIRST: cmd_stage = GT521FX_CMD_ENROLL_1; break;
 8000d62:	2323      	movs	r3, #35	; 0x23
 8000d64:	73fb      	strb	r3, [r7, #15]
 8000d66:	e006      	b.n	8000d76 <gt521fx_enrollment+0x36>
		case GT521FX_ENROLLMENT_STAGE_SECOND: cmd_stage = GT521FX_CMD_ENROLL_2; break;
 8000d68:	2324      	movs	r3, #36	; 0x24
 8000d6a:	73fb      	strb	r3, [r7, #15]
 8000d6c:	e003      	b.n	8000d76 <gt521fx_enrollment+0x36>
		case GT521FX_ENROLLMENT_STAGE_THIRD: cmd_stage = GT521FX_CMD_ENROLL_3; break;
 8000d6e:	2325      	movs	r3, #37	; 0x25
 8000d70:	73fb      	strb	r3, [r7, #15]
 8000d72:	e000      	b.n	8000d76 <gt521fx_enrollment+0x36>
		default: while(1);
 8000d74:	e7fe      	b.n	8000d74 <gt521fx_enrollment+0x34>
	}
	packet_create_cmd_and_send((p_packet_handle_t)&gt521fx_tx_pkt, cmd_stage, 0);
 8000d76:	7bfb      	ldrb	r3, [r7, #15]
 8000d78:	2200      	movs	r2, #0
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4803      	ldr	r0, [pc, #12]	; (8000d8c <gt521fx_enrollment+0x4c>)
 8000d7e:	f000 faab 	bl	80012d8 <packet_create_cmd_and_send>
}
 8000d82:	bf00      	nop
 8000d84:	3710      	adds	r7, #16
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20001adc 	.word	0x20001adc

08000d90 <keypad_init>:
keypad_col_e g_col_index = KEYPAD_COL_ONE;
keypad_row_e g_row_index = KEYPAD_ROW_ONE;


void keypad_init(void)
{
 8000d90:	b490      	push	{r4, r7}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
	// '*' = 10, '0' = 11, '#' = 12
	uint8_t setting = 1;
 8000d96:	2301      	movs	r3, #1
 8000d98:	71fb      	strb	r3, [r7, #7]
	for (keypad_row_e row = KEYPAD_ROW_FIRST; row < KEYPAD_NUM_ROWS; row++)
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	71bb      	strb	r3, [r7, #6]
 8000d9e:	e017      	b.n	8000dd0 <keypad_init+0x40>
	{
		for (keypad_col_e col = KEYPAD_COL_FIRST; col < KEYPAD_NUM_COLS; col++) g_keys[row][col] = setting++;
 8000da0:	2300      	movs	r3, #0
 8000da2:	717b      	strb	r3, [r7, #5]
 8000da4:	e00e      	b.n	8000dc4 <keypad_init+0x34>
 8000da6:	79fa      	ldrb	r2, [r7, #7]
 8000da8:	1c53      	adds	r3, r2, #1
 8000daa:	71fb      	strb	r3, [r7, #7]
 8000dac:	79b9      	ldrb	r1, [r7, #6]
 8000dae:	7978      	ldrb	r0, [r7, #5]
 8000db0:	4c0c      	ldr	r4, [pc, #48]	; (8000de4 <keypad_init+0x54>)
 8000db2:	460b      	mov	r3, r1
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	440b      	add	r3, r1
 8000db8:	4423      	add	r3, r4
 8000dba:	4403      	add	r3, r0
 8000dbc:	701a      	strb	r2, [r3, #0]
 8000dbe:	797b      	ldrb	r3, [r7, #5]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	717b      	strb	r3, [r7, #5]
 8000dc4:	797b      	ldrb	r3, [r7, #5]
 8000dc6:	2b02      	cmp	r3, #2
 8000dc8:	d9ed      	bls.n	8000da6 <keypad_init+0x16>
	for (keypad_row_e row = KEYPAD_ROW_FIRST; row < KEYPAD_NUM_ROWS; row++)
 8000dca:	79bb      	ldrb	r3, [r7, #6]
 8000dcc:	3301      	adds	r3, #1
 8000dce:	71bb      	strb	r3, [r7, #6]
 8000dd0:	79bb      	ldrb	r3, [r7, #6]
 8000dd2:	2b03      	cmp	r3, #3
 8000dd4:	d9e4      	bls.n	8000da0 <keypad_init+0x10>
	}
}
 8000dd6:	bf00      	nop
 8000dd8:	bf00      	nop
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bc90      	pop	{r4, r7}
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	20001ae8 	.word	0x20001ae8

08000de8 <keypad_password_check>:


bool keypad_password_check(uint8_t *user_input)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b085      	sub	sp, #20
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < KEYPAD_PASSWORD_LENGTH; i++) if (g_password[i] != user_input[i]) return false;
 8000df0:	2300      	movs	r3, #0
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	e00e      	b.n	8000e14 <keypad_password_check+0x2c>
 8000df6:	4a0c      	ldr	r2, [pc, #48]	; (8000e28 <keypad_password_check+0x40>)
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	781a      	ldrb	r2, [r3, #0]
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	6879      	ldr	r1, [r7, #4]
 8000e02:	440b      	add	r3, r1
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	429a      	cmp	r2, r3
 8000e08:	d001      	beq.n	8000e0e <keypad_password_check+0x26>
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	e006      	b.n	8000e1c <keypad_password_check+0x34>
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	3301      	adds	r3, #1
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	2b07      	cmp	r3, #7
 8000e18:	dded      	ble.n	8000df6 <keypad_password_check+0xe>
	return true;
 8000e1a:	2301      	movs	r3, #1
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3714      	adds	r7, #20
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	2000000c 	.word	0x2000000c

08000e2c <keypad_lookup>:


uint8_t keypad_lookup(keypad_row_e row, keypad_col_e col)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	460a      	mov	r2, r1
 8000e36:	71fb      	strb	r3, [r7, #7]
 8000e38:	4613      	mov	r3, r2
 8000e3a:	71bb      	strb	r3, [r7, #6]
	return (g_keys[row][col]); // '*' = 10, '0' = 11, '#' = 12
 8000e3c:	79fa      	ldrb	r2, [r7, #7]
 8000e3e:	79b9      	ldrb	r1, [r7, #6]
 8000e40:	4806      	ldr	r0, [pc, #24]	; (8000e5c <keypad_lookup+0x30>)
 8000e42:	4613      	mov	r3, r2
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	4413      	add	r3, r2
 8000e48:	4403      	add	r3, r0
 8000e4a:	440b      	add	r3, r1
 8000e4c:	781b      	ldrb	r3, [r3, #0]
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	370c      	adds	r7, #12
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	20001ae8 	.word	0x20001ae8

08000e60 <keypad_button_pressed>:


uint8_t keypad_button_pressed(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
	return g_last_button_pressed;
 8000e64:	4b03      	ldr	r3, [pc, #12]	; (8000e74 <keypad_button_pressed+0x14>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	20000080 	.word	0x20000080

08000e78 <keypad_scan>:


bool keypad_scan(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
	bool ret_val = false;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	73fb      	strb	r3, [r7, #15]
	uint16_t row_pin = 0;
 8000e82:	2300      	movs	r3, #0
 8000e84:	81bb      	strh	r3, [r7, #12]
	uint16_t col_pin = 0;
 8000e86:	2300      	movs	r3, #0
 8000e88:	817b      	strh	r3, [r7, #10]
	GPIO_TypeDef *col_port = 0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	607b      	str	r3, [r7, #4]
	switch(g_row_index)
 8000e8e:	4b49      	ldr	r3, [pc, #292]	; (8000fb4 <keypad_scan+0x13c>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	2b03      	cmp	r3, #3
 8000e94:	d819      	bhi.n	8000eca <keypad_scan+0x52>
 8000e96:	a201      	add	r2, pc, #4	; (adr r2, 8000e9c <keypad_scan+0x24>)
 8000e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e9c:	08000ead 	.word	0x08000ead
 8000ea0:	08000eb3 	.word	0x08000eb3
 8000ea4:	08000ebb 	.word	0x08000ebb
 8000ea8:	08000ec3 	.word	0x08000ec3
	{
		case KEYPAD_ROW_ONE: row_pin = KEYPAD_ROW_ONE_PIN; break;
 8000eac:	2320      	movs	r3, #32
 8000eae:	81bb      	strh	r3, [r7, #12]
 8000eb0:	e00c      	b.n	8000ecc <keypad_scan+0x54>
		case KEYPAD_ROW_TWO: row_pin = KEYPAD_ROW_TWO_PIN; break;
 8000eb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000eb6:	81bb      	strh	r3, [r7, #12]
 8000eb8:	e008      	b.n	8000ecc <keypad_scan+0x54>
		case KEYPAD_ROW_THREE: row_pin = KEYPAD_ROW_THREE_PIN; break;
 8000eba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ebe:	81bb      	strh	r3, [r7, #12]
 8000ec0:	e004      	b.n	8000ecc <keypad_scan+0x54>
		case KEYPAD_ROW_FOUR: row_pin = KEYPAD_ROW_FOUR_PIN; break;
 8000ec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ec6:	81bb      	strh	r3, [r7, #12]
 8000ec8:	e000      	b.n	8000ecc <keypad_scan+0x54>
		default: while(1); break;
 8000eca:	e7fe      	b.n	8000eca <keypad_scan+0x52>
	}
	switch(g_col_index)
 8000ecc:	4b3a      	ldr	r3, [pc, #232]	; (8000fb8 <keypad_scan+0x140>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	2b02      	cmp	r3, #2
 8000ed2:	d011      	beq.n	8000ef8 <keypad_scan+0x80>
 8000ed4:	2b02      	cmp	r3, #2
 8000ed6:	dc15      	bgt.n	8000f04 <keypad_scan+0x8c>
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d002      	beq.n	8000ee2 <keypad_scan+0x6a>
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d006      	beq.n	8000eee <keypad_scan+0x76>
 8000ee0:	e010      	b.n	8000f04 <keypad_scan+0x8c>
	{
		case KEYPAD_COL_ONE:
			col_pin = KEYPAD_COL_ONE_PIN;
 8000ee2:	2304      	movs	r3, #4
 8000ee4:	817b      	strh	r3, [r7, #10]
			col_port = GPIOA;
 8000ee6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000eea:	607b      	str	r3, [r7, #4]
		break;
 8000eec:	e00b      	b.n	8000f06 <keypad_scan+0x8e>
		case KEYPAD_COL_TWO:
			col_pin = KEYPAD_COL_TWO_PIN;
 8000eee:	2304      	movs	r3, #4
 8000ef0:	817b      	strh	r3, [r7, #10]
			col_port = GPIOB;
 8000ef2:	4b32      	ldr	r3, [pc, #200]	; (8000fbc <keypad_scan+0x144>)
 8000ef4:	607b      	str	r3, [r7, #4]
		break;
 8000ef6:	e006      	b.n	8000f06 <keypad_scan+0x8e>
		case KEYPAD_COL_THREE:
			col_pin = KEYPAD_COL_THREE_PIN;
 8000ef8:	2308      	movs	r3, #8
 8000efa:	817b      	strh	r3, [r7, #10]
			col_port = GPIOA;
 8000efc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f00:	607b      	str	r3, [r7, #4]
		break;
 8000f02:	e000      	b.n	8000f06 <keypad_scan+0x8e>
		default: while(1);
 8000f04:	e7fe      	b.n	8000f04 <keypad_scan+0x8c>
	}
	HAL_GPIO_WritePin(col_port, col_pin, GPIO_PIN_SET);
 8000f06:	897b      	ldrh	r3, [r7, #10]
 8000f08:	2201      	movs	r2, #1
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	6878      	ldr	r0, [r7, #4]
 8000f0e:	f002 fbd5 	bl	80036bc <HAL_GPIO_WritePin>
	if (GPIO_PIN_SET == HAL_GPIO_ReadPin(GPIOB, row_pin))
 8000f12:	89bb      	ldrh	r3, [r7, #12]
 8000f14:	4619      	mov	r1, r3
 8000f16:	4829      	ldr	r0, [pc, #164]	; (8000fbc <keypad_scan+0x144>)
 8000f18:	f002 fbb8 	bl	800368c <HAL_GPIO_ReadPin>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d10a      	bne.n	8000f38 <keypad_scan+0xc0>
	{
		while (GPIO_PIN_SET == HAL_GPIO_ReadPin(GPIOB, row_pin));
 8000f22:	bf00      	nop
 8000f24:	89bb      	ldrh	r3, [r7, #12]
 8000f26:	4619      	mov	r1, r3
 8000f28:	4824      	ldr	r0, [pc, #144]	; (8000fbc <keypad_scan+0x144>)
 8000f2a:	f002 fbaf 	bl	800368c <HAL_GPIO_ReadPin>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d0f7      	beq.n	8000f24 <keypad_scan+0xac>
		ret_val = true;
 8000f34:	2301      	movs	r3, #1
 8000f36:	73fb      	strb	r3, [r7, #15]
	}
	HAL_GPIO_WritePin(col_port, col_pin, GPIO_PIN_RESET);
 8000f38:	897b      	ldrh	r3, [r7, #10]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f002 fbbc 	bl	80036bc <HAL_GPIO_WritePin>
	if (ret_val)
 8000f44:	7bfb      	ldrb	r3, [r7, #15]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d012      	beq.n	8000f70 <keypad_scan+0xf8>
	{
		g_last_button_pressed = keypad_lookup(g_row_index, g_col_index);
 8000f4a:	4b1a      	ldr	r3, [pc, #104]	; (8000fb4 <keypad_scan+0x13c>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	4a1a      	ldr	r2, [pc, #104]	; (8000fb8 <keypad_scan+0x140>)
 8000f50:	7812      	ldrb	r2, [r2, #0]
 8000f52:	4611      	mov	r1, r2
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff ff69 	bl	8000e2c <keypad_lookup>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	4b18      	ldr	r3, [pc, #96]	; (8000fc0 <keypad_scan+0x148>)
 8000f60:	701a      	strb	r2, [r3, #0]
		g_row_index = KEYPAD_ROW_ONE;
 8000f62:	4b14      	ldr	r3, [pc, #80]	; (8000fb4 <keypad_scan+0x13c>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	701a      	strb	r2, [r3, #0]
		g_col_index = KEYPAD_COL_ONE;
 8000f68:	4b13      	ldr	r3, [pc, #76]	; (8000fb8 <keypad_scan+0x140>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	701a      	strb	r2, [r3, #0]
 8000f6e:	e01b      	b.n	8000fa8 <keypad_scan+0x130>
	}
	else if (KEYPAD_ROW_FOUR == g_row_index++)
 8000f70:	4b10      	ldr	r3, [pc, #64]	; (8000fb4 <keypad_scan+0x13c>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	1c5a      	adds	r2, r3, #1
 8000f76:	b2d1      	uxtb	r1, r2
 8000f78:	4a0e      	ldr	r2, [pc, #56]	; (8000fb4 <keypad_scan+0x13c>)
 8000f7a:	7011      	strb	r1, [r2, #0]
 8000f7c:	2b03      	cmp	r3, #3
 8000f7e:	d113      	bne.n	8000fa8 <keypad_scan+0x130>
	{
		if (KEYPAD_COL_THREE == g_col_index)
 8000f80:	4b0d      	ldr	r3, [pc, #52]	; (8000fb8 <keypad_scan+0x140>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	2b02      	cmp	r3, #2
 8000f86:	d106      	bne.n	8000f96 <keypad_scan+0x11e>
		{
			g_row_index = KEYPAD_ROW_ONE;
 8000f88:	4b0a      	ldr	r3, [pc, #40]	; (8000fb4 <keypad_scan+0x13c>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	701a      	strb	r2, [r3, #0]
			g_col_index = KEYPAD_COL_ONE;
 8000f8e:	4b0a      	ldr	r3, [pc, #40]	; (8000fb8 <keypad_scan+0x140>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	701a      	strb	r2, [r3, #0]
 8000f94:	e008      	b.n	8000fa8 <keypad_scan+0x130>
		}
		else
		{
			g_row_index = KEYPAD_ROW_ONE;
 8000f96:	4b07      	ldr	r3, [pc, #28]	; (8000fb4 <keypad_scan+0x13c>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	701a      	strb	r2, [r3, #0]
			g_col_index++;
 8000f9c:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <keypad_scan+0x140>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	b2da      	uxtb	r2, r3
 8000fa4:	4b04      	ldr	r3, [pc, #16]	; (8000fb8 <keypad_scan+0x140>)
 8000fa6:	701a      	strb	r2, [r3, #0]
		}
	}
	return ret_val;
 8000fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3710      	adds	r7, #16
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	20000082 	.word	0x20000082
 8000fb8:	20000081 	.word	0x20000081
 8000fbc:	48000400 	.word	0x48000400
 8000fc0:	20000080 	.word	0x20000080

08000fc4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]

  if (htim->Instance == TIM1)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a04      	ldr	r2, [pc, #16]	; (8000fe4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d101      	bne.n	8000fda <HAL_TIM_PeriodElapsedCallback+0x16>
  {
	  HAL_IncTick();
 8000fd6:	f001 fc3d 	bl	8002854 <HAL_IncTick>
  }
}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40012c00 	.word	0x40012c00

08000fe8 <main>:


int main(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
	board_init();
 8000fec:	f7ff fa88 	bl	8000500 <board_init>
	HAL_Delay(5000);
	board_init_set_wkup_src();
	HAL_PWR_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE);
#endif
	//HAL_PWR_EnterSTANDBYMode();
	osKernelInitialize();
 8000ff0:	f005 f9de 	bl	80063b0 <osKernelInitialize>
	task_create();
 8000ff4:	f000 ffa2 	bl	8001f3c <task_create>
	osKernelStart();
 8000ff8:	f005 f9fe 	bl	80063f8 <osKernelStart>

	while(1); // should never reach this...
 8000ffc:	e7fe      	b.n	8000ffc <main+0x14>
	...

08001000 <packet_queue_init>:
// local prototypes
void packet_rsp_set(void);


void packet_queue_init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
	g_sensor_rx_queueHandle = osMessageQueueNew(GT521FX_RX_QUEUE_DEPTH, sizeof( pkt_t ), &g_sensor_rx_queue_attributes);
 8001004:	4a0d      	ldr	r2, [pc, #52]	; (800103c <packet_queue_init+0x3c>)
 8001006:	210c      	movs	r1, #12
 8001008:	2010      	movs	r0, #16
 800100a:	f005 fac8 	bl	800659e <osMessageQueueNew>
 800100e:	4603      	mov	r3, r0
 8001010:	4a0b      	ldr	r2, [pc, #44]	; (8001040 <packet_queue_init+0x40>)
 8001012:	6013      	str	r3, [r2, #0]
	g_sensor_tx_queueHandle = osMessageQueueNew(GT521FX_TX_QUEUE_DEPTH, sizeof( pkt_t ), &g_sensor_tx_queue_attributes);
 8001014:	4a0b      	ldr	r2, [pc, #44]	; (8001044 <packet_queue_init+0x44>)
 8001016:	210c      	movs	r1, #12
 8001018:	2010      	movs	r0, #16
 800101a:	f005 fac0 	bl	800659e <osMessageQueueNew>
 800101e:	4603      	mov	r3, r0
 8001020:	4a09      	ldr	r2, [pc, #36]	; (8001048 <packet_queue_init+0x48>)
 8001022:	6013      	str	r3, [r2, #0]
	g_gt521fx_rx_queue.handle = g_sensor_rx_queueHandle;
 8001024:	4b06      	ldr	r3, [pc, #24]	; (8001040 <packet_queue_init+0x40>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a08      	ldr	r2, [pc, #32]	; (800104c <packet_queue_init+0x4c>)
 800102a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
	g_gt521fx_tx_queue.handle = g_sensor_tx_queueHandle;
 800102e:	4b06      	ldr	r3, [pc, #24]	; (8001048 <packet_queue_init+0x48>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a07      	ldr	r2, [pc, #28]	; (8001050 <packet_queue_init+0x50>)
 8001034:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
}
 8001038:	bf00      	nop
 800103a:	bd80      	pop	{r7, pc}
 800103c:	08009c90 	.word	0x08009c90
 8001040:	20001af4 	.word	0x20001af4
 8001044:	08009ca8 	.word	0x08009ca8
 8001048:	20001d9c 	.word	0x20001d9c
 800104c:	20001bbc 	.word	0x20001bbc
 8001050:	20001af8 	.word	0x20001af8

08001054 <packet_queue_get_queue_handle>:
	}
}


osMessageQueueId_t packet_queue_get_queue_handle(pkt_queue_e selection)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	71fb      	strb	r3, [r7, #7]
	switch(selection)
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d002      	beq.n	800106a <packet_queue_get_queue_handle+0x16>
 8001064:	2b01      	cmp	r3, #1
 8001066:	d004      	beq.n	8001072 <packet_queue_get_queue_handle+0x1e>
 8001068:	e007      	b.n	800107a <packet_queue_get_queue_handle+0x26>
	{
		case PKT_QUEUE_GT521FX_RX: return g_gt521fx_rx_queue.handle;
 800106a:	4b07      	ldr	r3, [pc, #28]	; (8001088 <packet_queue_get_queue_handle+0x34>)
 800106c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001070:	e004      	b.n	800107c <packet_queue_get_queue_handle+0x28>
		case PKT_QUEUE_GT521FX_TX: return g_gt521fx_tx_queue.handle;
 8001072:	4b06      	ldr	r3, [pc, #24]	; (800108c <packet_queue_get_queue_handle+0x38>)
 8001074:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001078:	e000      	b.n	800107c <packet_queue_get_queue_handle+0x28>
		default: while(1);
 800107a:	e7fe      	b.n	800107a <packet_queue_get_queue_handle+0x26>
	}
}
 800107c:	4618      	mov	r0, r3
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	20001bbc 	.word	0x20001bbc
 800108c:	20001af8 	.word	0x20001af8

08001090 <packet_enqueue>:


void packet_enqueue(p_packet_handle_t pkt_handle, pkt_src_dst_t dst)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	460b      	mov	r3, r1
 800109a:	70fb      	strb	r3, [r7, #3]
	switch (dst)
 800109c:	78fb      	ldrb	r3, [r7, #3]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d002      	beq.n	80010a8 <packet_enqueue+0x18>
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d00c      	beq.n	80010c0 <packet_enqueue+0x30>
 80010a6:	e017      	b.n	80010d8 <packet_enqueue+0x48>
	{
		case PKT_SRC_DST_SNS_TX:
			if (osOK != osMessageQueuePut(g_gt521fx_tx_queue.handle, pkt_handle, 0, 0)) while(1);
 80010a8:	4b0f      	ldr	r3, [pc, #60]	; (80010e8 <packet_enqueue+0x58>)
 80010aa:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 80010ae:	2300      	movs	r3, #0
 80010b0:	2200      	movs	r2, #0
 80010b2:	6879      	ldr	r1, [r7, #4]
 80010b4:	f005 fae6 	bl	8006684 <osMessageQueuePut>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d00d      	beq.n	80010da <packet_enqueue+0x4a>
 80010be:	e7fe      	b.n	80010be <packet_enqueue+0x2e>
		break;
		case PKT_SRC_DST_SNS_RX:
			if (osOK != osMessageQueuePut(g_gt521fx_rx_queue.handle, pkt_handle, 0, 0)) while(1);
 80010c0:	4b0a      	ldr	r3, [pc, #40]	; (80010ec <packet_enqueue+0x5c>)
 80010c2:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 80010c6:	2300      	movs	r3, #0
 80010c8:	2200      	movs	r2, #0
 80010ca:	6879      	ldr	r1, [r7, #4]
 80010cc:	f005 fada 	bl	8006684 <osMessageQueuePut>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d003      	beq.n	80010de <packet_enqueue+0x4e>
 80010d6:	e7fe      	b.n	80010d6 <packet_enqueue+0x46>
		break;
		default: while(1);
 80010d8:	e7fe      	b.n	80010d8 <packet_enqueue+0x48>
		break;
 80010da:	bf00      	nop
 80010dc:	e000      	b.n	80010e0 <packet_enqueue+0x50>
		break;
 80010de:	bf00      	nop
	}
}
 80010e0:	bf00      	nop
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20001af8 	.word	0x20001af8
 80010ec:	20001bbc 	.word	0x20001bbc

080010f0 <packet_dequeue>:


void packet_dequeue(p_packet_handle_t pkt_handle, pkt_src_dst_t src)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	460b      	mov	r3, r1
 80010fa:	70fb      	strb	r3, [r7, #3]
	switch(src)
 80010fc:	78fb      	ldrb	r3, [r7, #3]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d002      	beq.n	8001108 <packet_dequeue+0x18>
 8001102:	2b01      	cmp	r3, #1
 8001104:	d00d      	beq.n	8001122 <packet_dequeue+0x32>
 8001106:	e019      	b.n	800113c <packet_dequeue+0x4c>
	{
		case PKT_SRC_DST_SNS_TX:
			if (osOK != osMessageQueueGet(g_gt521fx_tx_queue.handle, (uint8_t *)pkt_handle, NULL, osWaitForever)) while(1); // wtf
 8001108:	4b10      	ldr	r3, [pc, #64]	; (800114c <packet_dequeue+0x5c>)
 800110a:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 800110e:	f04f 33ff 	mov.w	r3, #4294967295
 8001112:	2200      	movs	r2, #0
 8001114:	6879      	ldr	r1, [r7, #4]
 8001116:	f005 fb15 	bl	8006744 <osMessageQueueGet>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d00e      	beq.n	800113e <packet_dequeue+0x4e>
 8001120:	e7fe      	b.n	8001120 <packet_dequeue+0x30>
		break;
		case PKT_SRC_DST_SNS_RX:
			if (osOK != osMessageQueueGet(g_gt521fx_rx_queue.handle, (uint8_t *)pkt_handle, NULL, osWaitForever))
 8001122:	4b0b      	ldr	r3, [pc, #44]	; (8001150 <packet_dequeue+0x60>)
 8001124:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 8001128:	f04f 33ff 	mov.w	r3, #4294967295
 800112c:	2200      	movs	r2, #0
 800112e:	6879      	ldr	r1, [r7, #4]
 8001130:	f005 fb08 	bl	8006744 <osMessageQueueGet>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d003      	beq.n	8001142 <packet_dequeue+0x52>
			{
				while(1); // wtf
 800113a:	e7fe      	b.n	800113a <packet_dequeue+0x4a>
			}
		break;
		default: while(1); // wtf
 800113c:	e7fe      	b.n	800113c <packet_dequeue+0x4c>
		break;
 800113e:	bf00      	nop
 8001140:	e000      	b.n	8001144 <packet_dequeue+0x54>
		break;
 8001142:	bf00      	nop
	}
}
 8001144:	bf00      	nop
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	20001af8 	.word	0x20001af8
 8001150:	20001bbc 	.word	0x20001bbc

08001154 <packet_enqueue_to_sensor_tx>:


void packet_enqueue_to_sensor_tx(p_packet_handle_t pkt_handle)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
	packet_enqueue(pkt_handle, PKT_SRC_DST_SNS_TX);
 800115c:	2100      	movs	r1, #0
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f7ff ff96 	bl	8001090 <packet_enqueue>
}
 8001164:	bf00      	nop
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <packet_dequeue_from_sensor_tx>:


void packet_dequeue_from_sensor_tx(p_packet_handle_t pkt_handle)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
	packet_dequeue(pkt_handle, PKT_SRC_DST_SNS_TX);
 8001174:	2100      	movs	r1, #0
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f7ff ffba 	bl	80010f0 <packet_dequeue>
}
 800117c:	bf00      	nop
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}

08001184 <packet_dequeue_from_sensor_rx>:
	packet_enqueue(pkt_handle, PKT_SRC_DST_SNS_RX);
}


void packet_dequeue_from_sensor_rx(p_packet_handle_t pkt_handle)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
	packet_dequeue(pkt_handle, PKT_SRC_DST_SNS_RX);
 800118c:	2101      	movs	r1, #1
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f7ff ffae 	bl	80010f0 <packet_dequeue>
}
 8001194:	bf00      	nop
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <packet_parse_rsp>:


void packet_parse_rsp(p_packet_handle_t pkt_handle)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
	if (RSP_RSP_NACK == pkt_handle->rsp_rsp)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	891b      	ldrh	r3, [r3, #8]
 80011a8:	2b31      	cmp	r3, #49	; 0x31
 80011aa:	d111      	bne.n	80011d0 <packet_parse_rsp+0x34>
	{
		gt521fx_nack_flag_set(true);
 80011ac:	2001      	movs	r0, #1
 80011ae:	f7ff fc87 	bl	8000ac0 <gt521fx_nack_flag_set>
		gt521fx_nack_state_set((gt_521fx_error_e)pkt_handle->rsp_error_code);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	b29b      	uxth	r3, r3
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff fc91 	bl	8000ae0 <gt521fx_nack_state_set>
		switch(cmd_in_flight())
 80011be:	f000 f87f 	bl	80012c0 <cmd_in_flight>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b60      	cmp	r3, #96	; 0x60
 80011c6:	d143      	bne.n	8001250 <packet_parse_rsp+0xb4>
		{
			case GT521FX_CMD_CAPTURE_FINGER: gt521fx_finger_is_pressed_set(false); break;
 80011c8:	2000      	movs	r0, #0
 80011ca:	f7ff fcc7 	bl	8000b5c <gt521fx_finger_is_pressed_set>
 80011ce:	e044      	b.n	800125a <packet_parse_rsp+0xbe>
			default: break;
		}
	}
	else if (RSP_RSP_ACK == pkt_handle->rsp_rsp)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	891b      	ldrh	r3, [r3, #8]
 80011d4:	2b30      	cmp	r3, #48	; 0x30
 80011d6:	d13d      	bne.n	8001254 <packet_parse_rsp+0xb8>
	{
		gt521fx_nack_flag_set(false);
 80011d8:	2000      	movs	r0, #0
 80011da:	f7ff fc71 	bl	8000ac0 <gt521fx_nack_flag_set>
		switch(cmd_in_flight())
 80011de:	f000 f86f 	bl	80012c0 <cmd_in_flight>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2bf1      	cmp	r3, #241	; 0xf1
 80011e6:	d02c      	beq.n	8001242 <packet_parse_rsp+0xa6>
 80011e8:	2bf1      	cmp	r3, #241	; 0xf1
 80011ea:	dc35      	bgt.n	8001258 <packet_parse_rsp+0xbc>
 80011ec:	2b60      	cmp	r3, #96	; 0x60
 80011ee:	d011      	beq.n	8001214 <packet_parse_rsp+0x78>
 80011f0:	2b60      	cmp	r3, #96	; 0x60
 80011f2:	dc31      	bgt.n	8001258 <packet_parse_rsp+0xbc>
 80011f4:	2b51      	cmp	r3, #81	; 0x51
 80011f6:	d01d      	beq.n	8001234 <packet_parse_rsp+0x98>
 80011f8:	2b51      	cmp	r3, #81	; 0x51
 80011fa:	dc2d      	bgt.n	8001258 <packet_parse_rsp+0xbc>
 80011fc:	2b20      	cmp	r3, #32
 80011fe:	d002      	beq.n	8001206 <packet_parse_rsp+0x6a>
 8001200:	2b26      	cmp	r3, #38	; 0x26
 8001202:	d00b      	beq.n	800121c <packet_parse_rsp+0x80>
				if (0 == (pkt_handle->rsp_output_param)) gt521fx_finger_is_pressed_set(true);
				else gt521fx_finger_is_pressed_set(false);
			break;
			case GT521FX_CMD_IDENTIFY: gt521fx_identified_id_set(pkt_handle->cmd_input_param); break;
			case GT521FX_CMD_GET_SECURITY_LEVEL: gt521fx_security_lvl_set(pkt_handle->cmd_input_param); break;
			default: break;
 8001204:	e028      	b.n	8001258 <packet_parse_rsp+0xbc>
			case GT521FX_CMD_GET_ENROLL_COUNT: gt521fx_enrolled_fingerprint_count_set(pkt_handle->cmd_input_param); break;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	b29b      	uxth	r3, r3
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff fc83 	bl	8000b18 <gt521fx_enrolled_fingerprint_count_set>
 8001212:	e022      	b.n	800125a <packet_parse_rsp+0xbe>
			case GT521FX_CMD_CAPTURE_FINGER: gt521fx_finger_is_pressed_set(true); break;
 8001214:	2001      	movs	r0, #1
 8001216:	f7ff fca1 	bl	8000b5c <gt521fx_finger_is_pressed_set>
 800121a:	e01e      	b.n	800125a <packet_parse_rsp+0xbe>
				if (0 == (pkt_handle->rsp_output_param)) gt521fx_finger_is_pressed_set(true);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d103      	bne.n	800122c <packet_parse_rsp+0x90>
 8001224:	2001      	movs	r0, #1
 8001226:	f7ff fc99 	bl	8000b5c <gt521fx_finger_is_pressed_set>
			break;
 800122a:	e016      	b.n	800125a <packet_parse_rsp+0xbe>
				else gt521fx_finger_is_pressed_set(false);
 800122c:	2000      	movs	r0, #0
 800122e:	f7ff fc95 	bl	8000b5c <gt521fx_finger_is_pressed_set>
			break;
 8001232:	e012      	b.n	800125a <packet_parse_rsp+0xbe>
			case GT521FX_CMD_IDENTIFY: gt521fx_identified_id_set(pkt_handle->cmd_input_param); break;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	b29b      	uxth	r3, r3
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff fcd8 	bl	8000bf0 <gt521fx_identified_id_set>
 8001240:	e00b      	b.n	800125a <packet_parse_rsp+0xbe>
			case GT521FX_CMD_GET_SECURITY_LEVEL: gt521fx_security_lvl_set(pkt_handle->cmd_input_param); break;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	b2db      	uxtb	r3, r3
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff fcc1 	bl	8000bd0 <gt521fx_security_lvl_set>
 800124e:	e004      	b.n	800125a <packet_parse_rsp+0xbe>
			default: break;
 8001250:	bf00      	nop
 8001252:	e002      	b.n	800125a <packet_parse_rsp+0xbe>
		}
	}
 8001254:	bf00      	nop
 8001256:	e000      	b.n	800125a <packet_parse_rsp+0xbe>
			default: break;
 8001258:	bf00      	nop
	packet_rsp_set();
 800125a:	f000 f811 	bl	8001280 <packet_rsp_set>
}
 800125e:	bf00      	nop
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
	...

08001268 <packet_rsp_clear>:


void packet_rsp_clear(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
	g_packet_rsp_received = false;
 800126c:	4b03      	ldr	r3, [pc, #12]	; (800127c <packet_rsp_clear+0x14>)
 800126e:	2200      	movs	r2, #0
 8001270:	701a      	strb	r2, [r3, #0]
}
 8001272:	bf00      	nop
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	20000083 	.word	0x20000083

08001280 <packet_rsp_set>:


void packet_rsp_set(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
	g_packet_rsp_received = true;
 8001284:	4b03      	ldr	r3, [pc, #12]	; (8001294 <packet_rsp_set+0x14>)
 8001286:	2201      	movs	r2, #1
 8001288:	701a      	strb	r2, [r3, #0]
}
 800128a:	bf00      	nop
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	20000083 	.word	0x20000083

08001298 <packet_rsp_was_received>:


bool packet_rsp_was_received(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
	if (g_packet_rsp_received)
 800129c:	4b07      	ldr	r3, [pc, #28]	; (80012bc <packet_rsp_was_received+0x24>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d004      	beq.n	80012ae <packet_rsp_was_received+0x16>
	{
		g_packet_rsp_received = false;
 80012a4:	4b05      	ldr	r3, [pc, #20]	; (80012bc <packet_rsp_was_received+0x24>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	701a      	strb	r2, [r3, #0]
		return true;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e000      	b.n	80012b0 <packet_rsp_was_received+0x18>
	}
	else
	{
		return false;
 80012ae:	2300      	movs	r3, #0
	}
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	20000083 	.word	0x20000083

080012c0 <cmd_in_flight>:


gt_521fx_cmd_e cmd_in_flight(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
	return g_cmd_in_flight;
 80012c4:	4b03      	ldr	r3, [pc, #12]	; (80012d4 <cmd_in_flight+0x14>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	20000014 	.word	0x20000014

080012d8 <packet_create_cmd_and_send>:


void packet_create_cmd_and_send(p_packet_handle_t pkt_handle, gt_521fx_cmd_e cmd, uint32_t input_param)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	460b      	mov	r3, r1
 80012e2:	607a      	str	r2, [r7, #4]
 80012e4:	72fb      	strb	r3, [r7, #11]
	packet_rsp_clear();
 80012e6:	f7ff ffbf 	bl	8001268 <packet_rsp_clear>
	g_cmd_in_flight = cmd;
 80012ea:	4a10      	ldr	r2, [pc, #64]	; (800132c <packet_create_cmd_and_send+0x54>)
 80012ec:	7afb      	ldrb	r3, [r7, #11]
 80012ee:	7013      	strb	r3, [r2, #0]
	pkt_handle->start_code[0] = 0x55; // default
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	2255      	movs	r2, #85	; 0x55
 80012f4:	701a      	strb	r2, [r3, #0]
	pkt_handle->start_code[1] = 0xAA; // default
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	22aa      	movs	r2, #170	; 0xaa
 80012fa:	705a      	strb	r2, [r3, #1]
	pkt_handle->dev_id = 0x0001; // default
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	2201      	movs	r2, #1
 8001300:	805a      	strh	r2, [r3, #2]
	pkt_handle->cmd_input_param = input_param;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	605a      	str	r2, [r3, #4]
	pkt_handle->cmd_code = cmd;
 8001308:	7afb      	ldrb	r3, [r7, #11]
 800130a:	b29a      	uxth	r2, r3
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	811a      	strh	r2, [r3, #8]
	pkt_handle->check_sum = packet_calc_check_sum(pkt_handle);
 8001310:	68f8      	ldr	r0, [r7, #12]
 8001312:	f000 f80d 	bl	8001330 <packet_calc_check_sum>
 8001316:	4603      	mov	r3, r0
 8001318:	461a      	mov	r2, r3
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	815a      	strh	r2, [r3, #10]
	packet_enqueue_to_sensor_tx(pkt_handle);
 800131e:	68f8      	ldr	r0, [r7, #12]
 8001320:	f7ff ff18 	bl	8001154 <packet_enqueue_to_sensor_tx>
}
 8001324:	bf00      	nop
 8001326:	3710      	adds	r7, #16
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	20000014 	.word	0x20000014

08001330 <packet_calc_check_sum>:


uint16_t packet_calc_check_sum(p_packet_handle_t pkt_handle)
{
 8001330:	b480      	push	{r7}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
	uint16_t check_sum = 0;
 8001338:	2300      	movs	r3, #0
 800133a:	81fb      	strh	r3, [r7, #14]
	check_sum += pkt_handle->start_code[0];
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	b29a      	uxth	r2, r3
 8001342:	89fb      	ldrh	r3, [r7, #14]
 8001344:	4413      	add	r3, r2
 8001346:	81fb      	strh	r3, [r7, #14]
	check_sum += pkt_handle->start_code[1];
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	785b      	ldrb	r3, [r3, #1]
 800134c:	b29a      	uxth	r2, r3
 800134e:	89fb      	ldrh	r3, [r7, #14]
 8001350:	4413      	add	r3, r2
 8001352:	81fb      	strh	r3, [r7, #14]
	check_sum += pkt_handle->dev_id;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	885a      	ldrh	r2, [r3, #2]
 8001358:	89fb      	ldrh	r3, [r7, #14]
 800135a:	4413      	add	r3, r2
 800135c:	81fb      	strh	r3, [r7, #14]
	check_sum += pkt_handle->cmd_input_param;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	b29a      	uxth	r2, r3
 8001364:	89fb      	ldrh	r3, [r7, #14]
 8001366:	4413      	add	r3, r2
 8001368:	81fb      	strh	r3, [r7, #14]
	check_sum += pkt_handle->cmd_code;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	891a      	ldrh	r2, [r3, #8]
 800136e:	89fb      	ldrh	r3, [r7, #14]
 8001370:	4413      	add	r3, r2
 8001372:	81fb      	strh	r3, [r7, #14]
	return check_sum;
 8001374:	89fb      	ldrh	r3, [r7, #14]
}
 8001376:	4618      	mov	r0, r3
 8001378:	3714      	adds	r7, #20
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
	...

08001384 <HAL_UART_RxCpltCallback>:
*/


uint32_t rx_queue_count = 0;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
	if (osOK != osMessageQueuePut(packet_queue_get_queue_handle(PKT_QUEUE_GT521FX_RX), &gt521fx_uart_rx.pkt, 0, 0))//gt521fx_uart_rx.cur_queue_entry->pkt_ptr, 0, 0))
 800138c:	2000      	movs	r0, #0
 800138e:	f7ff fe61 	bl	8001054 <packet_queue_get_queue_handle>
 8001392:	2300      	movs	r3, #0
 8001394:	2200      	movs	r2, #0
 8001396:	4905      	ldr	r1, [pc, #20]	; (80013ac <HAL_UART_RxCpltCallback+0x28>)
 8001398:	f005 f974 	bl	8006684 <osMessageQueuePut>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d000      	beq.n	80013a4 <HAL_UART_RxCpltCallback+0x20>
	{
		while(1); // ouch
 80013a2:	e7fe      	b.n	80013a2 <HAL_UART_RxCpltCallback+0x1e>
	}
}
 80013a4:	bf00      	nop
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	20001f48 	.word	0x20001f48

080013b0 <serial_com_init_all>:


void serial_com_init_all(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
	gt521fx_uart_rx.gt521fx_rx_queue_handle = packet_queue_get_queue_handle(PKT_QUEUE_GT521FX_RX);
 80013b4:	2000      	movs	r0, #0
 80013b6:	f7ff fe4d 	bl	8001054 <packet_queue_get_queue_handle>
 80013ba:	4603      	mov	r3, r0
 80013bc:	4a0c      	ldr	r2, [pc, #48]	; (80013f0 <serial_com_init_all+0x40>)
 80013be:	6013      	str	r3, [r2, #0]
	gt521fx_uart_rx.rx_uart_handle = g_huart1;
 80013c0:	4b0b      	ldr	r3, [pc, #44]	; (80013f0 <serial_com_init_all+0x40>)
 80013c2:	4a0c      	ldr	r2, [pc, #48]	; (80013f4 <serial_com_init_all+0x44>)
 80013c4:	3310      	adds	r3, #16
 80013c6:	4611      	mov	r1, r2
 80013c8:	2284      	movs	r2, #132	; 0x84
 80013ca:	4618      	mov	r0, r3
 80013cc:	f007 ff6c 	bl	80092a8 <memcpy>
	gt521fx_uart_tx.gt521fx_tx_queue_handle = packet_queue_get_queue_handle(PKT_QUEUE_GT521FX_TX);
 80013d0:	2001      	movs	r0, #1
 80013d2:	f7ff fe3f 	bl	8001054 <packet_queue_get_queue_handle>
 80013d6:	4603      	mov	r3, r0
 80013d8:	4a07      	ldr	r2, [pc, #28]	; (80013f8 <serial_com_init_all+0x48>)
 80013da:	6013      	str	r3, [r2, #0]
	gt521fx_uart_tx.tx_uart_handle = g_huart1;
 80013dc:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <serial_com_init_all+0x48>)
 80013de:	4a05      	ldr	r2, [pc, #20]	; (80013f4 <serial_com_init_all+0x44>)
 80013e0:	3310      	adds	r3, #16
 80013e2:	4611      	mov	r1, r2
 80013e4:	2284      	movs	r2, #132	; 0x84
 80013e6:	4618      	mov	r0, r3
 80013e8:	f007 ff5e 	bl	80092a8 <memcpy>
}
 80013ec:	bf00      	nop
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	20001f44 	.word	0x20001f44
 80013f4:	20001a50 	.word	0x20001a50
 80013f8:	20001eb0 	.word	0x20001eb0

080013fc <pkt_received>:


bool g_rx_pkt_received = false;

bool pkt_received(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
	if (g_rx_pkt_received)
 8001400:	4b07      	ldr	r3, [pc, #28]	; (8001420 <pkt_received+0x24>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d004      	beq.n	8001412 <pkt_received+0x16>
	{
		g_rx_pkt_received = false;
 8001408:	4b05      	ldr	r3, [pc, #20]	; (8001420 <pkt_received+0x24>)
 800140a:	2200      	movs	r2, #0
 800140c:	701a      	strb	r2, [r3, #0]
		return true;
 800140e:	2301      	movs	r3, #1
 8001410:	e000      	b.n	8001414 <pkt_received+0x18>
	}
	else
	{
		return false;
 8001412:	2300      	movs	r3, #0
	}
}
 8001414:	4618      	mov	r0, r3
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	20000084 	.word	0x20000084

08001424 <clear_pkt_received_flag>:

void clear_pkt_received_flag(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
	g_rx_pkt_received = false;
 8001428:	4b03      	ldr	r3, [pc, #12]	; (8001438 <clear_pkt_received_flag+0x14>)
 800142a:	2200      	movs	r2, #0
 800142c:	701a      	strb	r2, [r3, #0]
}
 800142e:	bf00      	nop
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr
 8001438:	20000084 	.word	0x20000084

0800143c <task_sensor_tx_entry>:
* @brief Function implementing the task_sensor_tx thread.
* @param argument: Not used
* @retval None
*/
void task_sensor_tx_entry(void *argument)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task_sensor_tx_entry */
  /* Infinite loop */
  for(;;)
  {
	  packet_dequeue_from_sensor_tx(&gt521fx_uart_tx.pkt);
 8001444:	4808      	ldr	r0, [pc, #32]	; (8001468 <task_sensor_tx_entry+0x2c>)
 8001446:	f7ff fe91 	bl	800116c <packet_dequeue_from_sensor_tx>
	  clear_pkt_received_flag();
 800144a:	f7ff ffeb 	bl	8001424 <clear_pkt_received_flag>
	  g_last_cmd = gt521fx_uart_tx.pkt.cmd_code;
 800144e:	4b07      	ldr	r3, [pc, #28]	; (800146c <task_sensor_tx_entry+0x30>)
 8001450:	899b      	ldrh	r3, [r3, #12]
 8001452:	b2da      	uxtb	r2, r3
 8001454:	4b06      	ldr	r3, [pc, #24]	; (8001470 <task_sensor_tx_entry+0x34>)
 8001456:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Transmit(&g_huart1, gt521fx_uart_tx.pkt.flat_data, sizeof(pkt_t), 5000);
 8001458:	f241 3388 	movw	r3, #5000	; 0x1388
 800145c:	220c      	movs	r2, #12
 800145e:	4902      	ldr	r1, [pc, #8]	; (8001468 <task_sensor_tx_entry+0x2c>)
 8001460:	4804      	ldr	r0, [pc, #16]	; (8001474 <task_sensor_tx_entry+0x38>)
 8001462:	f004 f977 	bl	8005754 <HAL_UART_Transmit>
	  packet_dequeue_from_sensor_tx(&gt521fx_uart_tx.pkt);
 8001466:	e7ed      	b.n	8001444 <task_sensor_tx_entry+0x8>
 8001468:	20001eb4 	.word	0x20001eb4
 800146c:	20001eb0 	.word	0x20001eb0
 8001470:	20000015 	.word	0x20000015
 8001474:	20001a50 	.word	0x20001a50

08001478 <sensor_rx_entry>:
* @brief Function implementing the task_sensor_rx thread.
* @param argument: Not used
* @retval None
*/
void sensor_rx_entry(void *argument)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		HAL_UART_Receive_DMA(&g_huart1, gt521fx_uart_rx.pkt.flat_data, sizeof(pkt_t));
 8001480:	220c      	movs	r2, #12
 8001482:	4907      	ldr	r1, [pc, #28]	; (80014a0 <sensor_rx_entry+0x28>)
 8001484:	4807      	ldr	r0, [pc, #28]	; (80014a4 <sensor_rx_entry+0x2c>)
 8001486:	f004 f9f9 	bl	800587c <HAL_UART_Receive_DMA>
		packet_dequeue_from_sensor_rx(&gt521fx_uart_rx.pkt);
 800148a:	4805      	ldr	r0, [pc, #20]	; (80014a0 <sensor_rx_entry+0x28>)
 800148c:	f7ff fe7a 	bl	8001184 <packet_dequeue_from_sensor_rx>
		packet_parse_rsp(&gt521fx_uart_rx.pkt);
 8001490:	4803      	ldr	r0, [pc, #12]	; (80014a0 <sensor_rx_entry+0x28>)
 8001492:	f7ff fe83 	bl	800119c <packet_parse_rsp>
		g_rx_pkt_received = true;
 8001496:	4b04      	ldr	r3, [pc, #16]	; (80014a8 <sensor_rx_entry+0x30>)
 8001498:	2201      	movs	r2, #1
 800149a:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_DMA(&g_huart1, gt521fx_uart_rx.pkt.flat_data, sizeof(pkt_t));
 800149c:	e7f0      	b.n	8001480 <sensor_rx_entry+0x8>
 800149e:	bf00      	nop
 80014a0:	20001f48 	.word	0x20001f48
 80014a4:	20001a50 	.word	0x20001a50
 80014a8:	20000084 	.word	0x20000084

080014ac <ssd1351_spi_byte_write>:
void ssd1351_reset_pixel_address(void);
void swap(uint8_t *val_1, uint8_t *val_2);


static void ssd1351_spi_byte_write(uint8_t val)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	71fb      	strb	r3, [r7, #7]
	uint8_t data = val;
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&g_hspi2, &data, 1, 10000);
 80014ba:	f107 010f 	add.w	r1, r7, #15
 80014be:	f242 7310 	movw	r3, #10000	; 0x2710
 80014c2:	2201      	movs	r2, #1
 80014c4:	4803      	ldr	r0, [pc, #12]	; (80014d4 <ssd1351_spi_byte_write+0x28>)
 80014c6:	f003 fba8 	bl	8004c1a <HAL_SPI_Transmit>
}
 80014ca:	bf00      	nop
 80014cc:	3710      	adds	r7, #16
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	2000195c 	.word	0x2000195c

080014d8 <ssd1351_spi_block_write>:


static void ssd1351_spi_block_write(uint8_t *data, uint32_t len)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&g_hspi2, data, len, 10000);
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	b29a      	uxth	r2, r3
 80014e6:	f242 7310 	movw	r3, #10000	; 0x2710
 80014ea:	6879      	ldr	r1, [r7, #4]
 80014ec:	4803      	ldr	r0, [pc, #12]	; (80014fc <ssd1351_spi_block_write+0x24>)
 80014ee:	f003 fb94 	bl	8004c1a <HAL_SPI_Transmit>
}
 80014f2:	bf00      	nop
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	2000195c 	.word	0x2000195c

08001500 <ssd1351_byte_write_data>:


void ssd1351_byte_write_data(uint8_t data)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	71fb      	strb	r3, [r7, #7]
	ssd1351_set_pin(SSD1351_PIN_DC); // set DC (data mode)
 800150a:	2001      	movs	r0, #1
 800150c:	f000 f884 	bl	8001618 <ssd1351_set_pin>
	ssd1351_clear_pin(SSD1351_PIN_CS); // select chip (active low)
 8001510:	2000      	movs	r0, #0
 8001512:	f000 f851 	bl	80015b8 <ssd1351_clear_pin>
	ssd1351_spi_byte_write(data); // byte write
 8001516:	79fb      	ldrb	r3, [r7, #7]
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff ffc7 	bl	80014ac <ssd1351_spi_byte_write>
	ssd1351_set_pin(SSD1351_PIN_CS); // deselect chip
 800151e:	2000      	movs	r0, #0
 8001520:	f000 f87a 	bl	8001618 <ssd1351_set_pin>
}
 8001524:	bf00      	nop
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}

0800152c <ssd1351_block_write_data>:


void ssd1351_block_write_data(uint8_t *data, uint32_t len)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	6039      	str	r1, [r7, #0]
	ssd1351_set_pin(SSD1351_PIN_DC); // set DC (data mode)
 8001536:	2001      	movs	r0, #1
 8001538:	f000 f86e 	bl	8001618 <ssd1351_set_pin>
	ssd1351_clear_pin(SSD1351_PIN_CS); // select chip (active low)
 800153c:	2000      	movs	r0, #0
 800153e:	f000 f83b 	bl	80015b8 <ssd1351_clear_pin>
	ssd1351_spi_block_write(data, len); // byte write
 8001542:	6839      	ldr	r1, [r7, #0]
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f7ff ffc7 	bl	80014d8 <ssd1351_spi_block_write>
	ssd1351_set_pin(SSD1351_PIN_CS); // deselect chip
 800154a:	2000      	movs	r0, #0
 800154c:	f000 f864 	bl	8001618 <ssd1351_set_pin>
}
 8001550:	bf00      	nop
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}

08001558 <ssd1351_write_cmd>:


void ssd1351_write_cmd(ssd1351_cmd_e cmd)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	71fb      	strb	r3, [r7, #7]
	ssd1351_clear_pin(SSD1351_PIN_DC); // clear DC (cmd mode)
 8001562:	2001      	movs	r0, #1
 8001564:	f000 f828 	bl	80015b8 <ssd1351_clear_pin>
	ssd1351_clear_pin(SSD1351_PIN_CS); // select chip (active low)
 8001568:	2000      	movs	r0, #0
 800156a:	f000 f825 	bl	80015b8 <ssd1351_clear_pin>
	ssd1351_spi_byte_write(cmd); // send cmd
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff ff9b 	bl	80014ac <ssd1351_spi_byte_write>
	ssd1351_set_pin(SSD1351_PIN_CS); // deselect chip
 8001576:	2000      	movs	r0, #0
 8001578:	f000 f84e 	bl	8001618 <ssd1351_set_pin>
}
 800157c:	bf00      	nop
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <ssd1351_write_buffer_to_display>:


void ssd1351_write_buffer_to_display(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
	ssd1351_write_cmd(SSD1351_CMD_WRITE_RAM);
 8001588:	205c      	movs	r0, #92	; 0x5c
 800158a:	f7ff ffe5 	bl	8001558 <ssd1351_write_cmd>
	ssd1351_block_write_data(ssd1351_buffer.ssd1351_disp_buffer_uint8, sizeof(ssd1351_buffer.ssd1351_disp_buffer_uint8));
 800158e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001592:	4802      	ldr	r0, [pc, #8]	; (800159c <ssd1351_write_buffer_to_display+0x18>)
 8001594:	f7ff ffca 	bl	800152c <ssd1351_block_write_data>
}
 8001598:	bf00      	nop
 800159a:	bd80      	pop	{r7, pc}
 800159c:	20001fdc 	.word	0x20001fdc

080015a0 <ssd1351_delay_ms>:


void ssd1351_delay_ms(uint32_t delay_ms)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
	HAL_Delay(delay_ms);
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f001 f973 	bl	8002894 <HAL_Delay>
}
 80015ae:	bf00      	nop
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
	...

080015b8 <ssd1351_clear_pin>:


void ssd1351_clear_pin(ssd1351_pins pin)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	4603      	mov	r3, r0
 80015c0:	71fb      	strb	r3, [r7, #7]
	GPIO_TypeDef *hal_port;
	uint16_t hal_pin;
	switch(pin)
 80015c2:	79fb      	ldrb	r3, [r7, #7]
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d014      	beq.n	80015f2 <ssd1351_clear_pin+0x3a>
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	dc17      	bgt.n	80015fc <ssd1351_clear_pin+0x44>
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d002      	beq.n	80015d6 <ssd1351_clear_pin+0x1e>
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d007      	beq.n	80015e4 <ssd1351_clear_pin+0x2c>
		break;
		case SSD1351_PIN_RST:
			hal_port = GPIOB;
			hal_pin = GPIO_PIN_6;
		break;
		default: break;
 80015d4:	e012      	b.n	80015fc <ssd1351_clear_pin+0x44>
			hal_port = GPIOA;
 80015d6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80015da:	60fb      	str	r3, [r7, #12]
			hal_pin = GPIO_PIN_11;
 80015dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80015e0:	817b      	strh	r3, [r7, #10]
		break;
 80015e2:	e00c      	b.n	80015fe <ssd1351_clear_pin+0x46>
			hal_port = GPIOA;
 80015e4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80015e8:	60fb      	str	r3, [r7, #12]
			hal_pin = GPIO_PIN_8;
 80015ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015ee:	817b      	strh	r3, [r7, #10]
		break;
 80015f0:	e005      	b.n	80015fe <ssd1351_clear_pin+0x46>
			hal_port = GPIOB;
 80015f2:	4b08      	ldr	r3, [pc, #32]	; (8001614 <ssd1351_clear_pin+0x5c>)
 80015f4:	60fb      	str	r3, [r7, #12]
			hal_pin = GPIO_PIN_6;
 80015f6:	2340      	movs	r3, #64	; 0x40
 80015f8:	817b      	strh	r3, [r7, #10]
		break;
 80015fa:	e000      	b.n	80015fe <ssd1351_clear_pin+0x46>
		default: break;
 80015fc:	bf00      	nop
	}
	HAL_GPIO_WritePin(hal_port, hal_pin, GPIO_PIN_RESET);
 80015fe:	897b      	ldrh	r3, [r7, #10]
 8001600:	2200      	movs	r2, #0
 8001602:	4619      	mov	r1, r3
 8001604:	68f8      	ldr	r0, [r7, #12]
 8001606:	f002 f859 	bl	80036bc <HAL_GPIO_WritePin>
}
 800160a:	bf00      	nop
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	48000400 	.word	0x48000400

08001618 <ssd1351_set_pin>:


void ssd1351_set_pin(ssd1351_pins pin)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	71fb      	strb	r3, [r7, #7]
	GPIO_TypeDef *hal_port;
	uint16_t hal_pin;
	switch(pin)
 8001622:	79fb      	ldrb	r3, [r7, #7]
 8001624:	2b02      	cmp	r3, #2
 8001626:	d014      	beq.n	8001652 <ssd1351_set_pin+0x3a>
 8001628:	2b02      	cmp	r3, #2
 800162a:	dc17      	bgt.n	800165c <ssd1351_set_pin+0x44>
 800162c:	2b00      	cmp	r3, #0
 800162e:	d002      	beq.n	8001636 <ssd1351_set_pin+0x1e>
 8001630:	2b01      	cmp	r3, #1
 8001632:	d007      	beq.n	8001644 <ssd1351_set_pin+0x2c>
		break;
		case SSD1351_PIN_RST:
			hal_port = GPIOB;
			hal_pin = GPIO_PIN_6;
		break;
		default: break;
 8001634:	e012      	b.n	800165c <ssd1351_set_pin+0x44>
			hal_port = GPIOA;
 8001636:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800163a:	60fb      	str	r3, [r7, #12]
			hal_pin = GPIO_PIN_11;
 800163c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001640:	817b      	strh	r3, [r7, #10]
		break;
 8001642:	e00c      	b.n	800165e <ssd1351_set_pin+0x46>
			hal_port = GPIOA;
 8001644:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001648:	60fb      	str	r3, [r7, #12]
			hal_pin = GPIO_PIN_8;
 800164a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800164e:	817b      	strh	r3, [r7, #10]
		break;
 8001650:	e005      	b.n	800165e <ssd1351_set_pin+0x46>
			hal_port = GPIOB;
 8001652:	4b08      	ldr	r3, [pc, #32]	; (8001674 <ssd1351_set_pin+0x5c>)
 8001654:	60fb      	str	r3, [r7, #12]
			hal_pin = GPIO_PIN_6;
 8001656:	2340      	movs	r3, #64	; 0x40
 8001658:	817b      	strh	r3, [r7, #10]
		break;
 800165a:	e000      	b.n	800165e <ssd1351_set_pin+0x46>
		default: break;
 800165c:	bf00      	nop
	}
	HAL_GPIO_WritePin(hal_port, hal_pin, GPIO_PIN_SET);
 800165e:	897b      	ldrh	r3, [r7, #10]
 8001660:	2201      	movs	r2, #1
 8001662:	4619      	mov	r1, r3
 8001664:	68f8      	ldr	r0, [r7, #12]
 8001666:	f002 f829 	bl	80036bc <HAL_GPIO_WritePin>
}
 800166a:	bf00      	nop
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	48000400 	.word	0x48000400

08001678 <ssd1351_init>:


void ssd1351_init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
	ssd1351_set_pin(SSD1351_PIN_RST); // clear DC (cmd mode)
 800167c:	2002      	movs	r0, #2
 800167e:	f7ff ffcb 	bl	8001618 <ssd1351_set_pin>
	ssd1351_delay_ms(100); // how long to hold reset?
 8001682:	2064      	movs	r0, #100	; 0x64
 8001684:	f7ff ff8c 	bl	80015a0 <ssd1351_delay_ms>
	ssd1351_clear_pin(SSD1351_PIN_RST); // clear DC (cmd mode)
 8001688:	2002      	movs	r0, #2
 800168a:	f7ff ff95 	bl	80015b8 <ssd1351_clear_pin>
	ssd1351_delay_ms(100); // how long to pause after reset?
 800168e:	2064      	movs	r0, #100	; 0x64
 8001690:	f7ff ff86 	bl	80015a0 <ssd1351_delay_ms>
	ssd1351_set_pin(SSD1351_PIN_RST); // clear DC (cmd mode)
 8001694:	2002      	movs	r0, #2
 8001696:	f7ff ffbf 	bl	8001618 <ssd1351_set_pin>
	ssd1351_write_cmd(SSD1351_CMD_SET_CMD_LOCK);
 800169a:	20fd      	movs	r0, #253	; 0xfd
 800169c:	f7ff ff5c 	bl	8001558 <ssd1351_write_cmd>
	ssd1351_byte_write_data(SSD1351_CMD_UNLOCK_BYTE);
 80016a0:	2012      	movs	r0, #18
 80016a2:	f7ff ff2d 	bl	8001500 <ssd1351_byte_write_data>
	ssd1351_write_cmd(SSD1351_CMD_SET_CMD_LOCK);
 80016a6:	20fd      	movs	r0, #253	; 0xfd
 80016a8:	f7ff ff56 	bl	8001558 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0xB1); // WHY?????
 80016ac:	20b1      	movs	r0, #177	; 0xb1
 80016ae:	f7ff ff27 	bl	8001500 <ssd1351_byte_write_data>
	ssd1351_write_cmd(SSD1351_CMD_SET_SLEEP_MODE_ON);
 80016b2:	20ae      	movs	r0, #174	; 0xae
 80016b4:	f7ff ff50 	bl	8001558 <ssd1351_write_cmd>
	ssd1351_write_cmd(SSD1351_CMD_SET_DISP_MODE_OFF);
 80016b8:	20a4      	movs	r0, #164	; 0xa4
 80016ba:	f7ff ff4d 	bl	8001558 <ssd1351_write_cmd>
	ssd1351_write_cmd(SSD1351_CMD_SET_COLUMN_ADDRESS);
 80016be:	2015      	movs	r0, #21
 80016c0:	f7ff ff4a 	bl	8001558 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0x00);
 80016c4:	2000      	movs	r0, #0
 80016c6:	f7ff ff1b 	bl	8001500 <ssd1351_byte_write_data>
	ssd1351_byte_write_data(0x7F);
 80016ca:	207f      	movs	r0, #127	; 0x7f
 80016cc:	f7ff ff18 	bl	8001500 <ssd1351_byte_write_data>
	ssd1351_write_cmd(SSD1351_CMD_SET_ROW_ADDRESS);
 80016d0:	2075      	movs	r0, #117	; 0x75
 80016d2:	f7ff ff41 	bl	8001558 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0x00);
 80016d6:	2000      	movs	r0, #0
 80016d8:	f7ff ff12 	bl	8001500 <ssd1351_byte_write_data>
	ssd1351_byte_write_data(0x7F);
 80016dc:	207f      	movs	r0, #127	; 0x7f
 80016de:	f7ff ff0f 	bl	8001500 <ssd1351_byte_write_data>
	ssd1351_write_cmd(SSD1351_CMD_FRONT_CLOCK_DIVIDER);
 80016e2:	20b3      	movs	r0, #179	; 0xb3
 80016e4:	f7ff ff38 	bl	8001558 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0xF1); // highest frequency (div by 1)
 80016e8:	20f1      	movs	r0, #241	; 0xf1
 80016ea:	f7ff ff09 	bl	8001500 <ssd1351_byte_write_data>
	ssd1351_write_cmd(SSD1351_CMD_SET_MUX_RATIO);
 80016ee:	20ca      	movs	r0, #202	; 0xca
 80016f0:	f7ff ff32 	bl	8001558 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0x7F); // 128 MUX (Reset value)
 80016f4:	207f      	movs	r0, #127	; 0x7f
 80016f6:	f7ff ff03 	bl	8001500 <ssd1351_byte_write_data>
	ssd1351_write_cmd(SSD1351_CMD_SET_REMAP_COLOR_DEPTH);
 80016fa:	20a0      	movs	r0, #160	; 0xa0
 80016fc:	f7ff ff2c 	bl	8001558 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0x74);
 8001700:	2074      	movs	r0, #116	; 0x74
 8001702:	f7ff fefd 	bl	8001500 <ssd1351_byte_write_data>
	ssd1351_write_cmd(SSD1351_CMD_SET_DISP_START_LINE);
 8001706:	20a1      	movs	r0, #161	; 0xa1
 8001708:	f7ff ff26 	bl	8001558 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0x00);
 800170c:	2000      	movs	r0, #0
 800170e:	f7ff fef7 	bl	8001500 <ssd1351_byte_write_data>
	ssd1351_write_cmd(SSD1351_CMD_SET_DISP_OFFSET);
 8001712:	20a2      	movs	r0, #162	; 0xa2
 8001714:	f7ff ff20 	bl	8001558 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0x00);
 8001718:	2000      	movs	r0, #0
 800171a:	f7ff fef1 	bl	8001500 <ssd1351_byte_write_data>
	ssd1351_write_cmd(SSD1351_CMD_FUNCTION_SELECTION);
 800171e:	20ab      	movs	r0, #171	; 0xab
 8001720:	f7ff ff1a 	bl	8001558 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0x01);
 8001724:	2001      	movs	r0, #1
 8001726:	f7ff feeb 	bl	8001500 <ssd1351_byte_write_data>
	ssd1351_write_cmd(SSD1351_CMD_SET_SEGMENT_LOW_VOLTAGE);
 800172a:	20b4      	movs	r0, #180	; 0xb4
 800172c:	f7ff ff14 	bl	8001558 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0xA0);
 8001730:	20a0      	movs	r0, #160	; 0xa0
 8001732:	f7ff fee5 	bl	8001500 <ssd1351_byte_write_data>
	ssd1351_byte_write_data(0xB5);
 8001736:	20b5      	movs	r0, #181	; 0xb5
 8001738:	f7ff fee2 	bl	8001500 <ssd1351_byte_write_data>
	ssd1351_byte_write_data(0x55);
 800173c:	2055      	movs	r0, #85	; 0x55
 800173e:	f7ff fedf 	bl	8001500 <ssd1351_byte_write_data>
	ssd1351_write_cmd(SSD1351_CMD_SET_CONTRAST_CURRENT);
 8001742:	20c1      	movs	r0, #193	; 0xc1
 8001744:	f7ff ff08 	bl	8001558 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0xC8);
 8001748:	20c8      	movs	r0, #200	; 0xc8
 800174a:	f7ff fed9 	bl	8001500 <ssd1351_byte_write_data>
	ssd1351_byte_write_data(0x80);
 800174e:	2080      	movs	r0, #128	; 0x80
 8001750:	f7ff fed6 	bl	8001500 <ssd1351_byte_write_data>
	ssd1351_byte_write_data(0xC0);
 8001754:	20c0      	movs	r0, #192	; 0xc0
 8001756:	f7ff fed3 	bl	8001500 <ssd1351_byte_write_data>
	ssd1351_write_cmd(SSD1351_CMD_MASTER_CONTRAST_CURRENT_CTRL);
 800175a:	20c7      	movs	r0, #199	; 0xc7
 800175c:	f7ff fefc 	bl	8001558 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0x0F);
 8001760:	200f      	movs	r0, #15
 8001762:	f7ff fecd 	bl	8001500 <ssd1351_byte_write_data>
	ssd1351_write_cmd(SSD1351_CMD_SET_RESET_PRECHARGE_PERIOD);
 8001766:	20b1      	movs	r0, #177	; 0xb1
 8001768:	f7ff fef6 	bl	8001558 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0x32);
 800176c:	2032      	movs	r0, #50	; 0x32
 800176e:	f7ff fec7 	bl	8001500 <ssd1351_byte_write_data>
	ssd1351_write_cmd(SSD1351_CMD_DISP_ENHANCEMENT);
 8001772:	20b2      	movs	r0, #178	; 0xb2
 8001774:	f7ff fef0 	bl	8001558 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0xA4);
 8001778:	20a4      	movs	r0, #164	; 0xa4
 800177a:	f7ff fec1 	bl	8001500 <ssd1351_byte_write_data>
	ssd1351_byte_write_data(0x00);
 800177e:	2000      	movs	r0, #0
 8001780:	f7ff febe 	bl	8001500 <ssd1351_byte_write_data>
	ssd1351_byte_write_data(0x00);
 8001784:	2000      	movs	r0, #0
 8001786:	f7ff febb 	bl	8001500 <ssd1351_byte_write_data>
	ssd1351_write_cmd(SSD1351_CMD_SET_PRECHARGE_VOLTAGE);
 800178a:	20bb      	movs	r0, #187	; 0xbb
 800178c:	f7ff fee4 	bl	8001558 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0x17);
 8001790:	2017      	movs	r0, #23
 8001792:	f7ff feb5 	bl	8001500 <ssd1351_byte_write_data>
	ssd1351_write_cmd(SSD1351_CMD_SET_SECOND_PRECHARGE_PERIOD);
 8001796:	20b6      	movs	r0, #182	; 0xb6
 8001798:	f7ff fede 	bl	8001558 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0x01);
 800179c:	2001      	movs	r0, #1
 800179e:	f7ff feaf 	bl	8001500 <ssd1351_byte_write_data>
	ssd1351_write_cmd(SSD1351_CMD_SET_VCOMH_VOLTAGE);
 80017a2:	20be      	movs	r0, #190	; 0xbe
 80017a4:	f7ff fed8 	bl	8001558 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0x05);
 80017a8:	2005      	movs	r0, #5
 80017aa:	f7ff fea9 	bl	8001500 <ssd1351_byte_write_data>
	ssd1351_write_cmd(SSD1351_CMD_SET_DISP_MODE_NORMAL);
 80017ae:	20a6      	movs	r0, #166	; 0xa6
 80017b0:	f7ff fed2 	bl	8001558 <ssd1351_write_cmd>
	ssd1351_clear_screen();
 80017b4:	f000 f874 	bl	80018a0 <ssd1351_clear_screen>
	ssd1351_write_cmd(SSD1351_CMD_SET_SLEEP_MODE_OFF);
 80017b8:	20af      	movs	r0, #175	; 0xaf
 80017ba:	f7ff fecd 	bl	8001558 <ssd1351_write_cmd>
	ssd1351_clear_screen();
 80017be:	f000 f86f 	bl	80018a0 <ssd1351_clear_screen>
	ssd1351_reset_ram_address();
 80017c2:	f000 f865 	bl	8001890 <ssd1351_reset_ram_address>
	ssd1351_clear_screen();
 80017c6:	f000 f86b 	bl	80018a0 <ssd1351_clear_screen>
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
	...

080017d0 <ssd1351_draw_pixel>:
	ssd1351_write_cmd(SSD1351_CMD_SET_DISP_MODE_OFF);
}


void ssd1351_draw_pixel(uint8_t x, uint8_t y, color_16bit_e color)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b085      	sub	sp, #20
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	71fb      	strb	r3, [r7, #7]
 80017da:	460b      	mov	r3, r1
 80017dc:	71bb      	strb	r3, [r7, #6]
 80017de:	4613      	mov	r3, r2
 80017e0:	80bb      	strh	r3, [r7, #4]
	if((x >= SSD1351_PIXEL_WIDTH - 1) || (y >= SSD1351_PIXEL_HEIGHT - 1)) return;
 80017e2:	79fb      	ldrb	r3, [r7, #7]
 80017e4:	2b7e      	cmp	r3, #126	; 0x7e
 80017e6:	d810      	bhi.n	800180a <ssd1351_draw_pixel+0x3a>
 80017e8:	79bb      	ldrb	r3, [r7, #6]
 80017ea:	2b7e      	cmp	r3, #126	; 0x7e
 80017ec:	d80d      	bhi.n	800180a <ssd1351_draw_pixel+0x3a>
	else if((x < 0) || (y < 0)) return;
	// there are 128 columns and 128 row.  2 bytes stored per pixel
	uint16_t index = x + y * 128;
 80017ee:	79fb      	ldrb	r3, [r7, #7]
 80017f0:	b29a      	uxth	r2, r3
 80017f2:	79bb      	ldrb	r3, [r7, #6]
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	01db      	lsls	r3, r3, #7
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	4413      	add	r3, r2
 80017fc:	81fb      	strh	r3, [r7, #14]
	ssd1351_buffer.ssd1351_disp_buffer_uint16[index] = color;
 80017fe:	89fb      	ldrh	r3, [r7, #14]
 8001800:	4905      	ldr	r1, [pc, #20]	; (8001818 <ssd1351_draw_pixel+0x48>)
 8001802:	88ba      	ldrh	r2, [r7, #4]
 8001804:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 8001808:	e000      	b.n	800180c <ssd1351_draw_pixel+0x3c>
	if((x >= SSD1351_PIXEL_WIDTH - 1) || (y >= SSD1351_PIXEL_HEIGHT - 1)) return;
 800180a:	bf00      	nop
}
 800180c:	3714      	adds	r7, #20
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	20001fdc 	.word	0x20001fdc

0800181c <ssd1351_reset_pixel_address>:
	ssd1351_coordinates.y = row;
}


void ssd1351_reset_pixel_address(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
	ssd1351_coordinates.x = 0;
 8001820:	4b05      	ldr	r3, [pc, #20]	; (8001838 <ssd1351_reset_pixel_address+0x1c>)
 8001822:	2200      	movs	r2, #0
 8001824:	701a      	strb	r2, [r3, #0]
	ssd1351_coordinates.y = 0;
 8001826:	4b04      	ldr	r3, [pc, #16]	; (8001838 <ssd1351_reset_pixel_address+0x1c>)
 8001828:	2200      	movs	r2, #0
 800182a:	705a      	strb	r2, [r3, #1]
}
 800182c:	bf00      	nop
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	20001fd8 	.word	0x20001fd8

0800183c <ssd1351_set_ram_address>:


void ssd1351_set_ram_address(uint16_t column, uint16_t row)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	460a      	mov	r2, r1
 8001846:	80fb      	strh	r3, [r7, #6]
 8001848:	4613      	mov	r3, r2
 800184a:	80bb      	strh	r3, [r7, #4]
	ssd1351_write_cmd(SSD1351_CMD_SET_COLUMN_ADDRESS);
 800184c:	2015      	movs	r0, #21
 800184e:	f7ff fe83 	bl	8001558 <ssd1351_write_cmd>
	ssd1351_byte_write_data((column & 0xFF00) >> 8);
 8001852:	88fb      	ldrh	r3, [r7, #6]
 8001854:	0a1b      	lsrs	r3, r3, #8
 8001856:	b29b      	uxth	r3, r3
 8001858:	b2db      	uxtb	r3, r3
 800185a:	4618      	mov	r0, r3
 800185c:	f7ff fe50 	bl	8001500 <ssd1351_byte_write_data>
	ssd1351_byte_write_data(column & 0x00FF);
 8001860:	88fb      	ldrh	r3, [r7, #6]
 8001862:	b2db      	uxtb	r3, r3
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff fe4b 	bl	8001500 <ssd1351_byte_write_data>
	ssd1351_write_cmd(SSD1351_CMD_SET_ROW_ADDRESS);
 800186a:	2075      	movs	r0, #117	; 0x75
 800186c:	f7ff fe74 	bl	8001558 <ssd1351_write_cmd>
	ssd1351_byte_write_data((row & 0xFF00) >> 8);
 8001870:	88bb      	ldrh	r3, [r7, #4]
 8001872:	0a1b      	lsrs	r3, r3, #8
 8001874:	b29b      	uxth	r3, r3
 8001876:	b2db      	uxtb	r3, r3
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff fe41 	bl	8001500 <ssd1351_byte_write_data>
	ssd1351_byte_write_data(row & 0x00FF);
 800187e:	88bb      	ldrh	r3, [r7, #4]
 8001880:	b2db      	uxtb	r3, r3
 8001882:	4618      	mov	r0, r3
 8001884:	f7ff fe3c 	bl	8001500 <ssd1351_byte_write_data>
}
 8001888:	bf00      	nop
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <ssd1351_reset_ram_address>:


void ssd1351_reset_ram_address(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
	ssd1351_set_ram_address(0x007F, 0x007F);
 8001894:	217f      	movs	r1, #127	; 0x7f
 8001896:	207f      	movs	r0, #127	; 0x7f
 8001898:	f7ff ffd0 	bl	800183c <ssd1351_set_ram_address>
}
 800189c:	bf00      	nop
 800189e:	bd80      	pop	{r7, pc}

080018a0 <ssd1351_clear_screen>:
	ssd1351_write_cmd(SSD1351_CMD_SET_SLEEP_MODE_OFF);
}


void ssd1351_clear_screen(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
	ssd1351_reset_ram_address();
 80018a4:	f7ff fff4 	bl	8001890 <ssd1351_reset_ram_address>
	ssd1351_write_cmd(SSD1351_CMD_WRITE_RAM);
 80018a8:	205c      	movs	r0, #92	; 0x5c
 80018aa:	f7ff fe55 	bl	8001558 <ssd1351_write_cmd>
	memset(ssd1351_buffer.ssd1351_disp_buffer_uint8, 0, sizeof(ssd1351_buffer.ssd1351_disp_buffer_uint8));
 80018ae:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80018b2:	2100      	movs	r1, #0
 80018b4:	4805      	ldr	r0, [pc, #20]	; (80018cc <ssd1351_clear_screen+0x2c>)
 80018b6:	f007 fd05 	bl	80092c4 <memset>
	ssd1351_block_write_data(ssd1351_buffer.ssd1351_disp_buffer_uint8, sizeof(ssd1351_buffer));
 80018ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018be:	4803      	ldr	r0, [pc, #12]	; (80018cc <ssd1351_clear_screen+0x2c>)
 80018c0:	f7ff fe34 	bl	800152c <ssd1351_block_write_data>
	ssd1351_reset_pixel_address();
 80018c4:	f7ff ffaa 	bl	800181c <ssd1351_reset_pixel_address>
}
 80018c8:	bf00      	nop
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	20001fdc 	.word	0x20001fdc

080018d0 <ssd1351_write_char>:


void ssd1351_write_char(color_16bit_e color, font_t font, char c)
{
 80018d0:	b590      	push	{r4, r7, lr}
 80018d2:	b089      	sub	sp, #36	; 0x24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	4604      	mov	r4, r0
 80018d8:	1d38      	adds	r0, r7, #4
 80018da:	e880 0006 	stmia.w	r0, {r1, r2}
 80018de:	461a      	mov	r2, r3
 80018e0:	4623      	mov	r3, r4
 80018e2:	81fb      	strh	r3, [r7, #14]
 80018e4:	4613      	mov	r3, r2
 80018e6:	737b      	strb	r3, [r7, #13]
	// basic idea for writing a character is as follows:
	// 1x 16-bit value is returned for each row in pixel height.  For example if the pixel height is
	// 10 then 10x 16-bit values make up that character
	uint16_t char_pix_row_data;
	uint16_t char_pix_vert_pos = 0;
 80018e8:	2300      	movs	r3, #0
 80018ea:	83fb      	strh	r3, [r7, #30]
	uint16_t char_pix_horiz_pos = 0;
 80018ec:	2300      	movs	r3, #0
 80018ee:	83bb      	strh	r3, [r7, #28]
	uint16_t height = font.height;
 80018f0:	797b      	ldrb	r3, [r7, #5]
 80018f2:	837b      	strh	r3, [r7, #26]
	uint16_t width = font.width;
 80018f4:	793b      	ldrb	r3, [r7, #4]
 80018f6:	833b      	strh	r3, [r7, #24]

	if((SSD1351_PIXEL_WIDTH <= ssd1351_coordinates.x + width) || (SSD1351_PIXEL_HEIGHT <= ssd1351_coordinates.y + height)) return;
 80018f8:	4b3e      	ldr	r3, [pc, #248]	; (80019f4 <ssd1351_write_char+0x124>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	461a      	mov	r2, r3
 80018fe:	8b3b      	ldrh	r3, [r7, #24]
 8001900:	4413      	add	r3, r2
 8001902:	2b7f      	cmp	r3, #127	; 0x7f
 8001904:	dc70      	bgt.n	80019e8 <ssd1351_write_char+0x118>
 8001906:	4b3b      	ldr	r3, [pc, #236]	; (80019f4 <ssd1351_write_char+0x124>)
 8001908:	785b      	ldrb	r3, [r3, #1]
 800190a:	461a      	mov	r2, r3
 800190c:	8b7b      	ldrh	r3, [r7, #26]
 800190e:	4413      	add	r3, r2
 8001910:	2b7f      	cmp	r3, #127	; 0x7f
 8001912:	dc69      	bgt.n	80019e8 <ssd1351_write_char+0x118>
	if (c == '\n')
 8001914:	7b7b      	ldrb	r3, [r7, #13]
 8001916:	2b0a      	cmp	r3, #10
 8001918:	d134      	bne.n	8001984 <ssd1351_write_char+0xb4>
	{
		ssd1351_coordinates.x = SSD1351_PIXEL_WIDTH - 1; // if new line simply
 800191a:	4b36      	ldr	r3, [pc, #216]	; (80019f4 <ssd1351_write_char+0x124>)
 800191c:	227f      	movs	r2, #127	; 0x7f
 800191e:	701a      	strb	r2, [r3, #0]
 8001920:	e034      	b.n	800198c <ssd1351_write_char+0xbc>
	}
	else
	{
		while(char_pix_vert_pos < height)
		{
			char_pix_row_data = font.data[(c - SPECIAL_CHAR_OFFSET) * height + char_pix_vert_pos]; // "* font.height" to skip over rows and "+ i" to get the 2 byte value for the row
 8001922:	68ba      	ldr	r2, [r7, #8]
 8001924:	7b7b      	ldrb	r3, [r7, #13]
 8001926:	3b20      	subs	r3, #32
 8001928:	8b79      	ldrh	r1, [r7, #26]
 800192a:	fb01 f103 	mul.w	r1, r1, r3
 800192e:	8bfb      	ldrh	r3, [r7, #30]
 8001930:	440b      	add	r3, r1
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	4413      	add	r3, r2
 8001936:	881b      	ldrh	r3, [r3, #0]
 8001938:	82fb      	strh	r3, [r7, #22]
			while(char_pix_horiz_pos < width)
 800193a:	e01a      	b.n	8001972 <ssd1351_write_char+0xa2>
			{
				if ((char_pix_row_data << char_pix_horiz_pos) & 0x8000) // if bit is set then draw
 800193c:	8afa      	ldrh	r2, [r7, #22]
 800193e:	8bbb      	ldrh	r3, [r7, #28]
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d00f      	beq.n	800196c <ssd1351_write_char+0x9c>
				{
					ssd1351_draw_pixel(ssd1351_coordinates.x + char_pix_horiz_pos, ssd1351_coordinates.y + char_pix_vert_pos, color);
 800194c:	4b29      	ldr	r3, [pc, #164]	; (80019f4 <ssd1351_write_char+0x124>)
 800194e:	781a      	ldrb	r2, [r3, #0]
 8001950:	8bbb      	ldrh	r3, [r7, #28]
 8001952:	b2db      	uxtb	r3, r3
 8001954:	4413      	add	r3, r2
 8001956:	b2d8      	uxtb	r0, r3
 8001958:	4b26      	ldr	r3, [pc, #152]	; (80019f4 <ssd1351_write_char+0x124>)
 800195a:	785a      	ldrb	r2, [r3, #1]
 800195c:	8bfb      	ldrh	r3, [r7, #30]
 800195e:	b2db      	uxtb	r3, r3
 8001960:	4413      	add	r3, r2
 8001962:	b2db      	uxtb	r3, r3
 8001964:	89fa      	ldrh	r2, [r7, #14]
 8001966:	4619      	mov	r1, r3
 8001968:	f7ff ff32 	bl	80017d0 <ssd1351_draw_pixel>
				}
				char_pix_horiz_pos++;
 800196c:	8bbb      	ldrh	r3, [r7, #28]
 800196e:	3301      	adds	r3, #1
 8001970:	83bb      	strh	r3, [r7, #28]
			while(char_pix_horiz_pos < width)
 8001972:	8bba      	ldrh	r2, [r7, #28]
 8001974:	8b3b      	ldrh	r3, [r7, #24]
 8001976:	429a      	cmp	r2, r3
 8001978:	d3e0      	bcc.n	800193c <ssd1351_write_char+0x6c>
			}
			char_pix_vert_pos++;
 800197a:	8bfb      	ldrh	r3, [r7, #30]
 800197c:	3301      	adds	r3, #1
 800197e:	83fb      	strh	r3, [r7, #30]
			char_pix_horiz_pos = 0;
 8001980:	2300      	movs	r3, #0
 8001982:	83bb      	strh	r3, [r7, #28]
		while(char_pix_vert_pos < height)
 8001984:	8bfa      	ldrh	r2, [r7, #30]
 8001986:	8b7b      	ldrh	r3, [r7, #26]
 8001988:	429a      	cmp	r2, r3
 800198a:	d3ca      	bcc.n	8001922 <ssd1351_write_char+0x52>
		}

	}
	ssd1351_coordinates.x += width; // we just wrote a char increment x coordinate by font width
 800198c:	4b19      	ldr	r3, [pc, #100]	; (80019f4 <ssd1351_write_char+0x124>)
 800198e:	781a      	ldrb	r2, [r3, #0]
 8001990:	8b3b      	ldrh	r3, [r7, #24]
 8001992:	b2db      	uxtb	r3, r3
 8001994:	4413      	add	r3, r2
 8001996:	b2da      	uxtb	r2, r3
 8001998:	4b16      	ldr	r3, [pc, #88]	; (80019f4 <ssd1351_write_char+0x124>)
 800199a:	701a      	strb	r2, [r3, #0]
	if ((ssd1351_coordinates.x + width >= 127) & (ssd1351_coordinates.y + height <= 127)) // check if we need to go to new line
 800199c:	4b15      	ldr	r3, [pc, #84]	; (80019f4 <ssd1351_write_char+0x124>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	461a      	mov	r2, r3
 80019a2:	8b3b      	ldrh	r3, [r7, #24]
 80019a4:	4413      	add	r3, r2
 80019a6:	2b7e      	cmp	r3, #126	; 0x7e
 80019a8:	bfcc      	ite	gt
 80019aa:	2301      	movgt	r3, #1
 80019ac:	2300      	movle	r3, #0
 80019ae:	b2da      	uxtb	r2, r3
 80019b0:	4b10      	ldr	r3, [pc, #64]	; (80019f4 <ssd1351_write_char+0x124>)
 80019b2:	785b      	ldrb	r3, [r3, #1]
 80019b4:	4619      	mov	r1, r3
 80019b6:	8b7b      	ldrh	r3, [r7, #26]
 80019b8:	440b      	add	r3, r1
 80019ba:	2b7f      	cmp	r3, #127	; 0x7f
 80019bc:	bfd4      	ite	le
 80019be:	2301      	movle	r3, #1
 80019c0:	2300      	movgt	r3, #0
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	4013      	ands	r3, r2
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d00f      	beq.n	80019ec <ssd1351_write_char+0x11c>
	{
		ssd1351_coordinates.y = ssd1351_coordinates.y + height + 2; // the +2 is simply additional space between lines
 80019cc:	4b09      	ldr	r3, [pc, #36]	; (80019f4 <ssd1351_write_char+0x124>)
 80019ce:	785a      	ldrb	r2, [r3, #1]
 80019d0:	8b7b      	ldrh	r3, [r7, #26]
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	4413      	add	r3, r2
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	3302      	adds	r3, #2
 80019da:	b2da      	uxtb	r2, r3
 80019dc:	4b05      	ldr	r3, [pc, #20]	; (80019f4 <ssd1351_write_char+0x124>)
 80019de:	705a      	strb	r2, [r3, #1]
		ssd1351_coordinates.x = 0; // reset x coordinate to 0 for new line!
 80019e0:	4b04      	ldr	r3, [pc, #16]	; (80019f4 <ssd1351_write_char+0x124>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	701a      	strb	r2, [r3, #0]
	}
	return;
 80019e6:	e001      	b.n	80019ec <ssd1351_write_char+0x11c>
	if((SSD1351_PIXEL_WIDTH <= ssd1351_coordinates.x + width) || (SSD1351_PIXEL_HEIGHT <= ssd1351_coordinates.y + height)) return;
 80019e8:	bf00      	nop
 80019ea:	e000      	b.n	80019ee <ssd1351_write_char+0x11e>
	return;
 80019ec:	bf00      	nop
}
 80019ee:	3724      	adds	r7, #36	; 0x24
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd90      	pop	{r4, r7, pc}
 80019f4:	20001fd8 	.word	0x20001fd8

080019f8 <ssd1351_printf>:


void ssd1351_printf(char *string)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b08a      	sub	sp, #40	; 0x28
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
	char mem_string[18] = "";
 8001a00:	2300      	movs	r3, #0
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	f107 0310 	add.w	r3, r7, #16
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	605a      	str	r2, [r3, #4]
 8001a0e:	609a      	str	r2, [r3, #8]
 8001a10:	819a      	strh	r2, [r3, #12]
	uint8_t mem_string_cnt = 0;
 8001a12:	2300      	movs	r3, #0
 8001a14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t row_num = 0;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	row_num = 0; // careful may be starting on a new row
 8001a1e:	2300      	movs	r3, #0
 8001a20:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	bool new_word_flag = true;
 8001a24:	2301      	movs	r3, #1
 8001a26:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	bool print_flag = false;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	// find all spaces first...
	if (NULL == string) return;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	f000 808c 	beq.w	8001b50 <ssd1351_printf+0x158>
	for(int i = 0; i < strlen(string); i++)
 8001a38:	2300      	movs	r3, #0
 8001a3a:	623b      	str	r3, [r7, #32]
 8001a3c:	e07f      	b.n	8001b3e <ssd1351_printf+0x146>
	{
		if (new_word_flag)
 8001a3e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d00b      	beq.n	8001a5e <ssd1351_printf+0x66>
		{
			new_word_flag = false;
 8001a46:	2300      	movs	r3, #0
 8001a48:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			row_num = i / 19;
 8001a4c:	6a3b      	ldr	r3, [r7, #32]
 8001a4e:	4a42      	ldr	r2, [pc, #264]	; (8001b58 <ssd1351_printf+0x160>)
 8001a50:	fb82 1203 	smull	r1, r2, r2, r3
 8001a54:	10d2      	asrs	r2, r2, #3
 8001a56:	17db      	asrs	r3, r3, #31
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		}
		if (strlen(string) - 1 == i) print_flag = true;
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f7fe fbb6 	bl	80001d0 <strlen>
 8001a64:	4603      	mov	r3, r0
 8001a66:	1e5a      	subs	r2, r3, #1
 8001a68:	6a3b      	ldr	r3, [r7, #32]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d102      	bne.n	8001a74 <ssd1351_printf+0x7c>
 8001a6e:	2301      	movs	r3, #1
 8001a70:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		if (string[i] != ' ') mem_string[mem_string_cnt++] = string[i];
 8001a74:	6a3b      	ldr	r3, [r7, #32]
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	4413      	add	r3, r2
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	2b20      	cmp	r3, #32
 8001a7e:	d00e      	beq.n	8001a9e <ssd1351_printf+0xa6>
 8001a80:	6a3b      	ldr	r3, [r7, #32]
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	441a      	add	r2, r3
 8001a86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a8a:	1c59      	adds	r1, r3, #1
 8001a8c:	f887 1027 	strb.w	r1, [r7, #39]	; 0x27
 8001a90:	7812      	ldrb	r2, [r2, #0]
 8001a92:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001a96:	440b      	add	r3, r1
 8001a98:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8001a9c:	e002      	b.n	8001aa4 <ssd1351_printf+0xac>
		else print_flag = true;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		if(print_flag)
 8001aa4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d045      	beq.n	8001b38 <ssd1351_printf+0x140>
		{
			mem_string_cnt = 0;
 8001aac:	2300      	movs	r3, #0
 8001aae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if ((i / 19) != row_num)
 8001ab2:	6a3b      	ldr	r3, [r7, #32]
 8001ab4:	4a28      	ldr	r2, [pc, #160]	; (8001b58 <ssd1351_printf+0x160>)
 8001ab6:	fb82 1203 	smull	r1, r2, r2, r3
 8001aba:	10d2      	asrs	r2, r2, #3
 8001abc:	17db      	asrs	r3, r3, #31
 8001abe:	1ad2      	subs	r2, r2, r3
 8001ac0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d017      	beq.n	8001af8 <ssd1351_printf+0x100>
			{
				ssd1351_write_char(g_font_color, Font_7x10, '\n');
 8001ac8:	4b24      	ldr	r3, [pc, #144]	; (8001b5c <ssd1351_printf+0x164>)
 8001aca:	8818      	ldrh	r0, [r3, #0]
 8001acc:	4a24      	ldr	r2, [pc, #144]	; (8001b60 <ssd1351_printf+0x168>)
 8001ace:	230a      	movs	r3, #10
 8001ad0:	ca06      	ldmia	r2, {r1, r2}
 8001ad2:	f7ff fefd 	bl	80018d0 <ssd1351_write_char>
			}
			while(mem_string[mem_string_cnt] != 0)
 8001ad6:	e00f      	b.n	8001af8 <ssd1351_printf+0x100>
			{
				ssd1351_write_char(g_font_color, Font_7x10, mem_string[mem_string_cnt++]);
 8001ad8:	4b20      	ldr	r3, [pc, #128]	; (8001b5c <ssd1351_printf+0x164>)
 8001ada:	8818      	ldrh	r0, [r3, #0]
 8001adc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ae0:	1c5a      	adds	r2, r3, #1
 8001ae2:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8001ae6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001aea:	4413      	add	r3, r2
 8001aec:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001af0:	4a1b      	ldr	r2, [pc, #108]	; (8001b60 <ssd1351_printf+0x168>)
 8001af2:	ca06      	ldmia	r2, {r1, r2}
 8001af4:	f7ff feec 	bl	80018d0 <ssd1351_write_char>
			while(mem_string[mem_string_cnt] != 0)
 8001af8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001afc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b00:	4413      	add	r3, r2
 8001b02:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d1e6      	bne.n	8001ad8 <ssd1351_printf+0xe0>
			}
			ssd1351_write_char(g_font_color, Font_7x10, ' ');
 8001b0a:	4b14      	ldr	r3, [pc, #80]	; (8001b5c <ssd1351_printf+0x164>)
 8001b0c:	8818      	ldrh	r0, [r3, #0]
 8001b0e:	4a14      	ldr	r2, [pc, #80]	; (8001b60 <ssd1351_printf+0x168>)
 8001b10:	2320      	movs	r3, #32
 8001b12:	ca06      	ldmia	r2, {r1, r2}
 8001b14:	f7ff fedc 	bl	80018d0 <ssd1351_write_char>
			//ssd1351_write_buffer_to_display();
			memset(mem_string, 0, sizeof(mem_string));
 8001b18:	f107 030c 	add.w	r3, r7, #12
 8001b1c:	2212      	movs	r2, #18
 8001b1e:	2100      	movs	r1, #0
 8001b20:	4618      	mov	r0, r3
 8001b22:	f007 fbcf 	bl	80092c4 <memset>
			mem_string_cnt = 0;
 8001b26:	2300      	movs	r3, #0
 8001b28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			new_word_flag = true;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			print_flag = false;
 8001b32:	2300      	movs	r3, #0
 8001b34:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	for(int i = 0; i < strlen(string); i++)
 8001b38:	6a3b      	ldr	r3, [r7, #32]
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	623b      	str	r3, [r7, #32]
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f7fe fb46 	bl	80001d0 <strlen>
 8001b44:	4602      	mov	r2, r0
 8001b46:	6a3b      	ldr	r3, [r7, #32]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	f63f af78 	bhi.w	8001a3e <ssd1351_printf+0x46>
 8001b4e:	e000      	b.n	8001b52 <ssd1351_printf+0x15a>
	if (NULL == string) return;
 8001b50:	bf00      	nop
		ssd1351_write_char(g_font_color, Font_7x10, *string);
		string++;
	}
	*/
	//ssd1351_write_buffer_to_display();
}
 8001b52:	3728      	adds	r7, #40	; 0x28
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	6bca1af3 	.word	0x6bca1af3
 8001b5c:	20000016 	.word	0x20000016
 8001b60:	20000000 	.word	0x20000000

08001b64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b6a:	4b11      	ldr	r3, [pc, #68]	; (8001bb0 <HAL_MspInit+0x4c>)
 8001b6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b6e:	4a10      	ldr	r2, [pc, #64]	; (8001bb0 <HAL_MspInit+0x4c>)
 8001b70:	f043 0301 	orr.w	r3, r3, #1
 8001b74:	6613      	str	r3, [r2, #96]	; 0x60
 8001b76:	4b0e      	ldr	r3, [pc, #56]	; (8001bb0 <HAL_MspInit+0x4c>)
 8001b78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	607b      	str	r3, [r7, #4]
 8001b80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b82:	4b0b      	ldr	r3, [pc, #44]	; (8001bb0 <HAL_MspInit+0x4c>)
 8001b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b86:	4a0a      	ldr	r2, [pc, #40]	; (8001bb0 <HAL_MspInit+0x4c>)
 8001b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b8c:	6593      	str	r3, [r2, #88]	; 0x58
 8001b8e:	4b08      	ldr	r3, [pc, #32]	; (8001bb0 <HAL_MspInit+0x4c>)
 8001b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b96:	603b      	str	r3, [r7, #0]
 8001b98:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	210f      	movs	r1, #15
 8001b9e:	f06f 0001 	mvn.w	r0, #1
 8001ba2:	f000 ff53 	bl	8002a4c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ba6:	bf00      	nop
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	40021000 	.word	0x40021000

08001bb4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b08a      	sub	sp, #40	; 0x28
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bbc:	f107 0314 	add.w	r3, r7, #20
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	605a      	str	r2, [r3, #4]
 8001bc6:	609a      	str	r2, [r3, #8]
 8001bc8:	60da      	str	r2, [r3, #12]
 8001bca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a25      	ldr	r2, [pc, #148]	; (8001c68 <HAL_SPI_MspInit+0xb4>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d144      	bne.n	8001c60 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001bd6:	4b25      	ldr	r3, [pc, #148]	; (8001c6c <HAL_SPI_MspInit+0xb8>)
 8001bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bda:	4a24      	ldr	r2, [pc, #144]	; (8001c6c <HAL_SPI_MspInit+0xb8>)
 8001bdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001be0:	6593      	str	r3, [r2, #88]	; 0x58
 8001be2:	4b22      	ldr	r3, [pc, #136]	; (8001c6c <HAL_SPI_MspInit+0xb8>)
 8001be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bea:	613b      	str	r3, [r7, #16]
 8001bec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bee:	4b1f      	ldr	r3, [pc, #124]	; (8001c6c <HAL_SPI_MspInit+0xb8>)
 8001bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf2:	4a1e      	ldr	r2, [pc, #120]	; (8001c6c <HAL_SPI_MspInit+0xb8>)
 8001bf4:	f043 0304 	orr.w	r3, r3, #4
 8001bf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bfa:	4b1c      	ldr	r3, [pc, #112]	; (8001c6c <HAL_SPI_MspInit+0xb8>)
 8001bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bfe:	f003 0304 	and.w	r3, r3, #4
 8001c02:	60fb      	str	r3, [r7, #12]
 8001c04:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c06:	4b19      	ldr	r3, [pc, #100]	; (8001c6c <HAL_SPI_MspInit+0xb8>)
 8001c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c0a:	4a18      	ldr	r2, [pc, #96]	; (8001c6c <HAL_SPI_MspInit+0xb8>)
 8001c0c:	f043 0302 	orr.w	r3, r3, #2
 8001c10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c12:	4b16      	ldr	r3, [pc, #88]	; (8001c6c <HAL_SPI_MspInit+0xb8>)
 8001c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	60bb      	str	r3, [r7, #8]
 8001c1c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c1e:	2304      	movs	r3, #4
 8001c20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c22:	2302      	movs	r3, #2
 8001c24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c26:	2300      	movs	r3, #0
 8001c28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c2e:	2305      	movs	r3, #5
 8001c30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c32:	f107 0314 	add.w	r3, r7, #20
 8001c36:	4619      	mov	r1, r3
 8001c38:	480d      	ldr	r0, [pc, #52]	; (8001c70 <HAL_SPI_MspInit+0xbc>)
 8001c3a:	f001 fbad 	bl	8003398 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001c3e:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001c42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c44:	2302      	movs	r3, #2
 8001c46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c50:	2305      	movs	r3, #5
 8001c52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c54:	f107 0314 	add.w	r3, r7, #20
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4806      	ldr	r0, [pc, #24]	; (8001c74 <HAL_SPI_MspInit+0xc0>)
 8001c5c:	f001 fb9c 	bl	8003398 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001c60:	bf00      	nop
 8001c62:	3728      	adds	r7, #40	; 0x28
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	40003800 	.word	0x40003800
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	48000800 	.word	0x48000800
 8001c74:	48000400 	.word	0x48000400

08001c78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b08a      	sub	sp, #40	; 0x28
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c80:	f107 0314 	add.w	r3, r7, #20
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	605a      	str	r2, [r3, #4]
 8001c8a:	609a      	str	r2, [r3, #8]
 8001c8c:	60da      	str	r2, [r3, #12]
 8001c8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a41      	ldr	r2, [pc, #260]	; (8001d9c <HAL_UART_MspInit+0x124>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d17b      	bne.n	8001d92 <HAL_UART_MspInit+0x11a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c9a:	4b41      	ldr	r3, [pc, #260]	; (8001da0 <HAL_UART_MspInit+0x128>)
 8001c9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c9e:	4a40      	ldr	r2, [pc, #256]	; (8001da0 <HAL_UART_MspInit+0x128>)
 8001ca0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ca4:	6613      	str	r3, [r2, #96]	; 0x60
 8001ca6:	4b3e      	ldr	r3, [pc, #248]	; (8001da0 <HAL_UART_MspInit+0x128>)
 8001ca8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001caa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cae:	613b      	str	r3, [r7, #16]
 8001cb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb2:	4b3b      	ldr	r3, [pc, #236]	; (8001da0 <HAL_UART_MspInit+0x128>)
 8001cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb6:	4a3a      	ldr	r2, [pc, #232]	; (8001da0 <HAL_UART_MspInit+0x128>)
 8001cb8:	f043 0301 	orr.w	r3, r3, #1
 8001cbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cbe:	4b38      	ldr	r3, [pc, #224]	; (8001da0 <HAL_UART_MspInit+0x128>)
 8001cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc2:	f003 0301 	and.w	r3, r3, #1
 8001cc6:	60fb      	str	r3, [r7, #12]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001cca:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001cce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001cdc:	2307      	movs	r3, #7
 8001cde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce0:	f107 0314 	add.w	r3, r7, #20
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cea:	f001 fb55 	bl	8003398 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    g_hdma_usart1_rx.Instance = DMA1_Channel5;
 8001cee:	4b2d      	ldr	r3, [pc, #180]	; (8001da4 <HAL_UART_MspInit+0x12c>)
 8001cf0:	4a2d      	ldr	r2, [pc, #180]	; (8001da8 <HAL_UART_MspInit+0x130>)
 8001cf2:	601a      	str	r2, [r3, #0]
    g_hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8001cf4:	4b2b      	ldr	r3, [pc, #172]	; (8001da4 <HAL_UART_MspInit+0x12c>)
 8001cf6:	2202      	movs	r2, #2
 8001cf8:	605a      	str	r2, [r3, #4]
    g_hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cfa:	4b2a      	ldr	r3, [pc, #168]	; (8001da4 <HAL_UART_MspInit+0x12c>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	609a      	str	r2, [r3, #8]
    g_hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d00:	4b28      	ldr	r3, [pc, #160]	; (8001da4 <HAL_UART_MspInit+0x12c>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	60da      	str	r2, [r3, #12]
    g_hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d06:	4b27      	ldr	r3, [pc, #156]	; (8001da4 <HAL_UART_MspInit+0x12c>)
 8001d08:	2280      	movs	r2, #128	; 0x80
 8001d0a:	611a      	str	r2, [r3, #16]
    g_hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d0c:	4b25      	ldr	r3, [pc, #148]	; (8001da4 <HAL_UART_MspInit+0x12c>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	615a      	str	r2, [r3, #20]
    g_hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d12:	4b24      	ldr	r3, [pc, #144]	; (8001da4 <HAL_UART_MspInit+0x12c>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	619a      	str	r2, [r3, #24]
    g_hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001d18:	4b22      	ldr	r3, [pc, #136]	; (8001da4 <HAL_UART_MspInit+0x12c>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	61da      	str	r2, [r3, #28]
    g_hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d1e:	4b21      	ldr	r3, [pc, #132]	; (8001da4 <HAL_UART_MspInit+0x12c>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&g_hdma_usart1_rx) != HAL_OK)
 8001d24:	481f      	ldr	r0, [pc, #124]	; (8001da4 <HAL_UART_MspInit+0x12c>)
 8001d26:	f000 febb 	bl	8002aa0 <HAL_DMA_Init>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <HAL_UART_MspInit+0xbc>
    {
      Error_Handler();
 8001d30:	f7fe fd86 	bl	8000840 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,g_hdma_usart1_rx);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	4a1b      	ldr	r2, [pc, #108]	; (8001da4 <HAL_UART_MspInit+0x12c>)
 8001d38:	671a      	str	r2, [r3, #112]	; 0x70
 8001d3a:	4a1a      	ldr	r2, [pc, #104]	; (8001da4 <HAL_UART_MspInit+0x12c>)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    g_hdma_usart1_tx.Instance = DMA1_Channel4;
 8001d40:	4b1a      	ldr	r3, [pc, #104]	; (8001dac <HAL_UART_MspInit+0x134>)
 8001d42:	4a1b      	ldr	r2, [pc, #108]	; (8001db0 <HAL_UART_MspInit+0x138>)
 8001d44:	601a      	str	r2, [r3, #0]
    g_hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 8001d46:	4b19      	ldr	r3, [pc, #100]	; (8001dac <HAL_UART_MspInit+0x134>)
 8001d48:	2202      	movs	r2, #2
 8001d4a:	605a      	str	r2, [r3, #4]
    g_hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d4c:	4b17      	ldr	r3, [pc, #92]	; (8001dac <HAL_UART_MspInit+0x134>)
 8001d4e:	2210      	movs	r2, #16
 8001d50:	609a      	str	r2, [r3, #8]
    g_hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d52:	4b16      	ldr	r3, [pc, #88]	; (8001dac <HAL_UART_MspInit+0x134>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	60da      	str	r2, [r3, #12]
    g_hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d58:	4b14      	ldr	r3, [pc, #80]	; (8001dac <HAL_UART_MspInit+0x134>)
 8001d5a:	2280      	movs	r2, #128	; 0x80
 8001d5c:	611a      	str	r2, [r3, #16]
    g_hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d5e:	4b13      	ldr	r3, [pc, #76]	; (8001dac <HAL_UART_MspInit+0x134>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	615a      	str	r2, [r3, #20]
    g_hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d64:	4b11      	ldr	r3, [pc, #68]	; (8001dac <HAL_UART_MspInit+0x134>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	619a      	str	r2, [r3, #24]
    g_hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001d6a:	4b10      	ldr	r3, [pc, #64]	; (8001dac <HAL_UART_MspInit+0x134>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	61da      	str	r2, [r3, #28]
    g_hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d70:	4b0e      	ldr	r3, [pc, #56]	; (8001dac <HAL_UART_MspInit+0x134>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&g_hdma_usart1_tx) != HAL_OK)
 8001d76:	480d      	ldr	r0, [pc, #52]	; (8001dac <HAL_UART_MspInit+0x134>)
 8001d78:	f000 fe92 	bl	8002aa0 <HAL_DMA_Init>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 8001d82:	f7fe fd5d 	bl	8000840 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,g_hdma_usart1_tx);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a08      	ldr	r2, [pc, #32]	; (8001dac <HAL_UART_MspInit+0x134>)
 8001d8a:	66da      	str	r2, [r3, #108]	; 0x6c
 8001d8c:	4a07      	ldr	r2, [pc, #28]	; (8001dac <HAL_UART_MspInit+0x134>)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001d92:	bf00      	nop
 8001d94:	3728      	adds	r7, #40	; 0x28
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	40013800 	.word	0x40013800
 8001da0:	40021000 	.word	0x40021000
 8001da4:	200019c0 	.word	0x200019c0
 8001da8:	40020058 	.word	0x40020058
 8001dac:	20001a08 	.word	0x20001a08
 8001db0:	40020044 	.word	0x40020044

08001db4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b08c      	sub	sp, #48	; 0x30
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	6879      	ldr	r1, [r7, #4]
 8001dc8:	2019      	movs	r0, #25
 8001dca:	f000 fe3f 	bl	8002a4c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001dce:	2019      	movs	r0, #25
 8001dd0:	f000 fe58 	bl	8002a84 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001dd4:	4b1e      	ldr	r3, [pc, #120]	; (8001e50 <HAL_InitTick+0x9c>)
 8001dd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dd8:	4a1d      	ldr	r2, [pc, #116]	; (8001e50 <HAL_InitTick+0x9c>)
 8001dda:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001dde:	6613      	str	r3, [r2, #96]	; 0x60
 8001de0:	4b1b      	ldr	r3, [pc, #108]	; (8001e50 <HAL_InitTick+0x9c>)
 8001de2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001de4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001de8:	60fb      	str	r3, [r7, #12]
 8001dea:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001dec:	f107 0210 	add.w	r2, r7, #16
 8001df0:	f107 0314 	add.w	r3, r7, #20
 8001df4:	4611      	mov	r1, r2
 8001df6:	4618      	mov	r0, r3
 8001df8:	f002 faa2 	bl	8004340 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001dfc:	f002 fa8a 	bl	8004314 <HAL_RCC_GetPCLK2Freq>
 8001e00:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e04:	4a13      	ldr	r2, [pc, #76]	; (8001e54 <HAL_InitTick+0xa0>)
 8001e06:	fba2 2303 	umull	r2, r3, r2, r3
 8001e0a:	0c9b      	lsrs	r3, r3, #18
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001e10:	4b11      	ldr	r3, [pc, #68]	; (8001e58 <HAL_InitTick+0xa4>)
 8001e12:	4a12      	ldr	r2, [pc, #72]	; (8001e5c <HAL_InitTick+0xa8>)
 8001e14:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001e16:	4b10      	ldr	r3, [pc, #64]	; (8001e58 <HAL_InitTick+0xa4>)
 8001e18:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e1c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001e1e:	4a0e      	ldr	r2, [pc, #56]	; (8001e58 <HAL_InitTick+0xa4>)
 8001e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e22:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001e24:	4b0c      	ldr	r3, [pc, #48]	; (8001e58 <HAL_InitTick+0xa4>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e2a:	4b0b      	ldr	r3, [pc, #44]	; (8001e58 <HAL_InitTick+0xa4>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001e30:	4809      	ldr	r0, [pc, #36]	; (8001e58 <HAL_InitTick+0xa4>)
 8001e32:	f003 f9c1 	bl	80051b8 <HAL_TIM_Base_Init>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d104      	bne.n	8001e46 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001e3c:	4806      	ldr	r0, [pc, #24]	; (8001e58 <HAL_InitTick+0xa4>)
 8001e3e:	f003 fa1d 	bl	800527c <HAL_TIM_Base_Start_IT>
 8001e42:	4603      	mov	r3, r0
 8001e44:	e000      	b.n	8001e48 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3730      	adds	r7, #48	; 0x30
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	40021000 	.word	0x40021000
 8001e54:	431bde83 	.word	0x431bde83
 8001e58:	20009fdc 	.word	0x20009fdc
 8001e5c:	40012c00 	.word	0x40012c00

08001e60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001e64:	bf00      	nop
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr

08001e6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e72:	e7fe      	b.n	8001e72 <HardFault_Handler+0x4>

08001e74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e78:	e7fe      	b.n	8001e78 <MemManage_Handler+0x4>

08001e7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e7e:	e7fe      	b.n	8001e7e <BusFault_Handler+0x4>

08001e80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e84:	e7fe      	b.n	8001e84 <UsageFault_Handler+0x4>

08001e86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e86:	b480      	push	{r7}
 8001e88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e8a:	bf00      	nop
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&g_hdma_usart1_tx);
 8001e98:	4802      	ldr	r0, [pc, #8]	; (8001ea4 <DMA1_Channel4_IRQHandler+0x10>)
 8001e9a:	f000 ff19 	bl	8002cd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001e9e:	bf00      	nop
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	20001a08 	.word	0x20001a08

08001ea8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&g_hdma_usart1_rx);
 8001eac:	4802      	ldr	r0, [pc, #8]	; (8001eb8 <DMA1_Channel5_IRQHandler+0x10>)
 8001eae:	f000 ff0f 	bl	8002cd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001eb2:	bf00      	nop
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	200019c0 	.word	0x200019c0

08001ebc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ec0:	4802      	ldr	r0, [pc, #8]	; (8001ecc <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001ec2:	f003 fa2f 	bl	8005324 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001ec6:	bf00      	nop
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	20009fdc 	.word	0x20009fdc

08001ed0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ed4:	4b17      	ldr	r3, [pc, #92]	; (8001f34 <SystemInit+0x64>)
 8001ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eda:	4a16      	ldr	r2, [pc, #88]	; (8001f34 <SystemInit+0x64>)
 8001edc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ee0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001ee4:	4b14      	ldr	r3, [pc, #80]	; (8001f38 <SystemInit+0x68>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a13      	ldr	r2, [pc, #76]	; (8001f38 <SystemInit+0x68>)
 8001eea:	f043 0301 	orr.w	r3, r3, #1
 8001eee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001ef0:	4b11      	ldr	r3, [pc, #68]	; (8001f38 <SystemInit+0x68>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001ef6:	4b10      	ldr	r3, [pc, #64]	; (8001f38 <SystemInit+0x68>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a0f      	ldr	r2, [pc, #60]	; (8001f38 <SystemInit+0x68>)
 8001efc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001f00:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001f04:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001f06:	4b0c      	ldr	r3, [pc, #48]	; (8001f38 <SystemInit+0x68>)
 8001f08:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f0c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001f0e:	4b0a      	ldr	r3, [pc, #40]	; (8001f38 <SystemInit+0x68>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a09      	ldr	r2, [pc, #36]	; (8001f38 <SystemInit+0x68>)
 8001f14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f18:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001f1a:	4b07      	ldr	r3, [pc, #28]	; (8001f38 <SystemInit+0x68>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f20:	4b04      	ldr	r3, [pc, #16]	; (8001f34 <SystemInit+0x64>)
 8001f22:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f26:	609a      	str	r2, [r3, #8]
#endif
}
 8001f28:	bf00      	nop
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	e000ed00 	.word	0xe000ed00
 8001f38:	40021000 	.word	0x40021000

08001f3c <task_create>:
  //.priority = (osPriority_t) osPriorityNormal1,
};


void task_create(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
	packet_queue_init();
 8001f40:	f7ff f85e 	bl	8001000 <packet_queue_init>
	serial_com_init_all();
 8001f44:	f7ff fa34 	bl	80013b0 <serial_com_init_all>
	g_task_sensor_txHandle = osThreadNew(task_sensor_tx_entry, NULL, &g_task_sensor_tx_attributes);
 8001f48:	4a10      	ldr	r2, [pc, #64]	; (8001f8c <task_create+0x50>)
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	4810      	ldr	r0, [pc, #64]	; (8001f90 <task_create+0x54>)
 8001f4e:	f004 fa79 	bl	8006444 <osThreadNew>
 8001f52:	4603      	mov	r3, r0
 8001f54:	4a0f      	ldr	r2, [pc, #60]	; (8001f94 <task_create+0x58>)
 8001f56:	6013      	str	r3, [r2, #0]
	g_task_sensor_rxHandle = osThreadNew(sensor_rx_entry, NULL, &g_task_sensor_rx_attributes);
 8001f58:	4a0f      	ldr	r2, [pc, #60]	; (8001f98 <task_create+0x5c>)
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	480f      	ldr	r0, [pc, #60]	; (8001f9c <task_create+0x60>)
 8001f5e:	f004 fa71 	bl	8006444 <osThreadNew>
 8001f62:	4603      	mov	r3, r0
 8001f64:	4a0e      	ldr	r2, [pc, #56]	; (8001fa0 <task_create+0x64>)
 8001f66:	6013      	str	r3, [r2, #0]
	g_task_sensor_accHandle = osThreadNew(task_sensor_access_entry, NULL, &g_task_sensor_acc_attributes);
 8001f68:	4a0e      	ldr	r2, [pc, #56]	; (8001fa4 <task_create+0x68>)
 8001f6a:	2100      	movs	r1, #0
 8001f6c:	480e      	ldr	r0, [pc, #56]	; (8001fa8 <task_create+0x6c>)
 8001f6e:	f004 fa69 	bl	8006444 <osThreadNew>
 8001f72:	4603      	mov	r3, r0
 8001f74:	4a0d      	ldr	r2, [pc, #52]	; (8001fac <task_create+0x70>)
 8001f76:	6013      	str	r3, [r2, #0]
	g_task_keypad_accHandle = osThreadNew(task_keypad_access_entry, NULL, &g_task_keypad_acc_attributes);
 8001f78:	4a0d      	ldr	r2, [pc, #52]	; (8001fb0 <task_create+0x74>)
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	480d      	ldr	r0, [pc, #52]	; (8001fb4 <task_create+0x78>)
 8001f7e:	f004 fa61 	bl	8006444 <osThreadNew>
 8001f82:	4603      	mov	r3, r0
 8001f84:	4a0c      	ldr	r2, [pc, #48]	; (8001fb8 <task_create+0x7c>)
 8001f86:	6013      	str	r3, [r2, #0]
}
 8001f88:	bf00      	nop
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	08009d2c 	.word	0x08009d2c
 8001f90:	0800143d 	.word	0x0800143d
 8001f94:	2000b8e8 	.word	0x2000b8e8
 8001f98:	08009d08 	.word	0x08009d08
 8001f9c:	08001479 	.word	0x08001479
 8001fa0:	2000a028 	.word	0x2000a028
 8001fa4:	08009d50 	.word	0x08009d50
 8001fa8:	08002149 	.word	0x08002149
 8001fac:	2000c1a4 	.word	0x2000c1a4
 8001fb0:	08009d74 	.word	0x08009d74
 8001fb4:	08001fbd 	.word	0x08001fbd
 8001fb8:	2000b02c 	.word	0x2000b02c

08001fbc <task_keypad_access_entry>:
uint8_t g_user_input[KEYPAD_PASSWORD_LENGTH] = {0};
keypad_state_e g_keypad_state = KEYPAD_STATE_SCAN;


void task_keypad_access_entry(void *argument)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
	uint8_t key_stroke = 0;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	73bb      	strb	r3, [r7, #14]
	uint8_t password_index = 0;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	73fb      	strb	r3, [r7, #15]
	//uint8_t failed_attempts = 0;
	while(1)
	{
		switch(g_keypad_state)
 8001fcc:	4b41      	ldr	r3, [pc, #260]	; (80020d4 <task_keypad_access_entry+0x118>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	2b03      	cmp	r3, #3
 8001fd2:	d87a      	bhi.n	80020ca <task_keypad_access_entry+0x10e>
 8001fd4:	a201      	add	r2, pc, #4	; (adr r2, 8001fdc <task_keypad_access_entry+0x20>)
 8001fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fda:	bf00      	nop
 8001fdc:	08001fed 	.word	0x08001fed
 8001fe0:	08001fff 	.word	0x08001fff
 8001fe4:	08002099 	.word	0x08002099
 8001fe8:	080020bd 	.word	0x080020bd
		{
			case KEYPAD_STATE_SCAN:
				if (keypad_scan()) g_keypad_state = KEYPAD_STATE_BTN_PRESS;
 8001fec:	f7fe ff44 	bl	8000e78 <keypad_scan>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d066      	beq.n	80020c4 <task_keypad_access_entry+0x108>
 8001ff6:	4b37      	ldr	r3, [pc, #220]	; (80020d4 <task_keypad_access_entry+0x118>)
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	701a      	strb	r2, [r3, #0]
			break;
 8001ffc:	e062      	b.n	80020c4 <task_keypad_access_entry+0x108>
			case KEYPAD_STATE_BTN_PRESS:
				key_stroke = keypad_button_pressed();
 8001ffe:	f7fe ff2f 	bl	8000e60 <keypad_button_pressed>
 8002002:	4603      	mov	r3, r0
 8002004:	73bb      	strb	r3, [r7, #14]
				task_sensor_access_set_btn_pause();
 8002006:	f000 f86b 	bl	80020e0 <task_sensor_access_set_btn_pause>
				g_keypad_state = KEYPAD_STATE_SCAN;
 800200a:	4b32      	ldr	r3, [pc, #200]	; (80020d4 <task_keypad_access_entry+0x118>)
 800200c:	2200      	movs	r2, #0
 800200e:	701a      	strb	r2, [r3, #0]
				if (GT521FX_STATE_IDENTIFY == gt521fx_current_state())
 8002010:	f000 f872 	bl	80020f8 <gt521fx_current_state>
 8002014:	4603      	mov	r3, r0
 8002016:	2b04      	cmp	r3, #4
 8002018:	d130      	bne.n	800207c <task_keypad_access_entry+0xc0>
				{
					g_user_input[password_index++] = key_stroke;
 800201a:	7bfb      	ldrb	r3, [r7, #15]
 800201c:	1c5a      	adds	r2, r3, #1
 800201e:	73fa      	strb	r2, [r7, #15]
 8002020:	4619      	mov	r1, r3
 8002022:	4a2d      	ldr	r2, [pc, #180]	; (80020d8 <task_keypad_access_entry+0x11c>)
 8002024:	7bbb      	ldrb	r3, [r7, #14]
 8002026:	5453      	strb	r3, [r2, r1]
					if (12 == key_stroke)
 8002028:	7bbb      	ldrb	r3, [r7, #14]
 800202a:	2b0c      	cmp	r3, #12
 800202c:	d106      	bne.n	800203c <task_keypad_access_entry+0x80>
					{
						memset(g_user_input, 0, KEYPAD_PASSWORD_LENGTH);
 800202e:	2208      	movs	r2, #8
 8002030:	2100      	movs	r1, #0
 8002032:	4829      	ldr	r0, [pc, #164]	; (80020d8 <task_keypad_access_entry+0x11c>)
 8002034:	f007 f946 	bl	80092c4 <memset>
						password_index = 0;
 8002038:	2300      	movs	r3, #0
 800203a:	73fb      	strb	r3, [r7, #15]
					}
					if (KEYPAD_PASSWORD_LENGTH == password_index)
 800203c:	7bfb      	ldrb	r3, [r7, #15]
 800203e:	2b08      	cmp	r3, #8
 8002040:	d118      	bne.n	8002074 <task_keypad_access_entry+0xb8>
					{
						if (keypad_password_check(g_user_input))
 8002042:	4825      	ldr	r0, [pc, #148]	; (80020d8 <task_keypad_access_entry+0x11c>)
 8002044:	f7fe fed0 	bl	8000de8 <keypad_password_check>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d00a      	beq.n	8002064 <task_keypad_access_entry+0xa8>
						{
							memset(g_user_input, 0, KEYPAD_PASSWORD_LENGTH);
 800204e:	2208      	movs	r2, #8
 8002050:	2100      	movs	r1, #0
 8002052:	4821      	ldr	r0, [pc, #132]	; (80020d8 <task_keypad_access_entry+0x11c>)
 8002054:	f007 f936 	bl	80092c4 <memset>
							password_index = 0;
 8002058:	2300      	movs	r3, #0
 800205a:	73fb      	strb	r3, [r7, #15]
							g_keypad_state = KEYPAD_STATE_PASSWORD_MATCH;
 800205c:	4b1d      	ldr	r3, [pc, #116]	; (80020d4 <task_keypad_access_entry+0x118>)
 800205e:	2202      	movs	r2, #2
 8002060:	701a      	strb	r2, [r3, #0]
				else if(GT521FX_STATE_ADMIN == gt521fx_current_state())
				{
					gt521fx_set_state(key_stroke);
					g_keypad_state = KEYPAD_STATE_SCAN;
				}
			break;
 8002062:	e031      	b.n	80020c8 <task_keypad_access_entry+0x10c>
							memset(g_user_input, 0, KEYPAD_PASSWORD_LENGTH);
 8002064:	2208      	movs	r2, #8
 8002066:	2100      	movs	r1, #0
 8002068:	481b      	ldr	r0, [pc, #108]	; (80020d8 <task_keypad_access_entry+0x11c>)
 800206a:	f007 f92b 	bl	80092c4 <memset>
							password_index = 0;
 800206e:	2300      	movs	r3, #0
 8002070:	73fb      	strb	r3, [r7, #15]
			break;
 8002072:	e029      	b.n	80020c8 <task_keypad_access_entry+0x10c>
						g_keypad_state = KEYPAD_STATE_SCAN;
 8002074:	4b17      	ldr	r3, [pc, #92]	; (80020d4 <task_keypad_access_entry+0x118>)
 8002076:	2200      	movs	r2, #0
 8002078:	701a      	strb	r2, [r3, #0]
			break;
 800207a:	e025      	b.n	80020c8 <task_keypad_access_entry+0x10c>
				else if(GT521FX_STATE_ADMIN == gt521fx_current_state())
 800207c:	f000 f83c 	bl	80020f8 <gt521fx_current_state>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d120      	bne.n	80020c8 <task_keypad_access_entry+0x10c>
					gt521fx_set_state(key_stroke);
 8002086:	7bbb      	ldrb	r3, [r7, #14]
 8002088:	b29b      	uxth	r3, r3
 800208a:	4618      	mov	r0, r3
 800208c:	f000 f840 	bl	8002110 <gt521fx_set_state>
					g_keypad_state = KEYPAD_STATE_SCAN;
 8002090:	4b10      	ldr	r3, [pc, #64]	; (80020d4 <task_keypad_access_entry+0x118>)
 8002092:	2200      	movs	r2, #0
 8002094:	701a      	strb	r2, [r3, #0]
			break;
 8002096:	e017      	b.n	80020c8 <task_keypad_access_entry+0x10c>
			case KEYPAD_STATE_PASSWORD_MATCH:
				gt521fx_set_state(0);
 8002098:	2000      	movs	r0, #0
 800209a:	f000 f839 	bl	8002110 <gt521fx_set_state>
				ssd1351_clear_screen();
 800209e:	f7ff fbff 	bl	80018a0 <ssd1351_clear_screen>
				ssd1351_printf("Correct password!\n");
 80020a2:	480e      	ldr	r0, [pc, #56]	; (80020dc <task_keypad_access_entry+0x120>)
 80020a4:	f7ff fca8 	bl	80019f8 <ssd1351_printf>
				ssd1351_write_buffer_to_display();
 80020a8:	f7ff fa6c 	bl	8001584 <ssd1351_write_buffer_to_display>
				osDelay(1000);
 80020ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80020b0:	f004 fa5a 	bl	8006568 <osDelay>
				g_keypad_state = KEYPAD_STATE_SCAN;
 80020b4:	4b07      	ldr	r3, [pc, #28]	; (80020d4 <task_keypad_access_entry+0x118>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	701a      	strb	r2, [r3, #0]
		    break;
 80020ba:	e006      	b.n	80020ca <task_keypad_access_entry+0x10e>
			case KEYPAD_STATE_LOCKOUT:
				g_keypad_state = KEYPAD_STATE_SCAN;
 80020bc:	4b05      	ldr	r3, [pc, #20]	; (80020d4 <task_keypad_access_entry+0x118>)
 80020be:	2200      	movs	r2, #0
 80020c0:	701a      	strb	r2, [r3, #0]
				// @todo if 5 failures in a row then this should lock for like an hour maybe
		    break;
 80020c2:	e002      	b.n	80020ca <task_keypad_access_entry+0x10e>
			break;
 80020c4:	bf00      	nop
 80020c6:	e000      	b.n	80020ca <task_keypad_access_entry+0x10e>
			break;
 80020c8:	bf00      	nop
		}
		osDelay(1);
 80020ca:	2001      	movs	r0, #1
 80020cc:	f004 fa4c 	bl	8006568 <osDelay>
		switch(g_keypad_state)
 80020d0:	e77c      	b.n	8001fcc <task_keypad_access_entry+0x10>
 80020d2:	bf00      	nop
 80020d4:	20000090 	.word	0x20000090
 80020d8:	20000088 	.word	0x20000088
 80020dc:	080093d8 	.word	0x080093d8

080020e0 <task_sensor_access_set_btn_pause>:
	g_pause = false;
}


void task_sensor_access_set_btn_pause(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
	g_pause = true;
 80020e4:	4b03      	ldr	r3, [pc, #12]	; (80020f4 <task_sensor_access_set_btn_pause+0x14>)
 80020e6:	2201      	movs	r2, #1
 80020e8:	701a      	strb	r2, [r3, #0]
}
 80020ea:	bf00      	nop
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr
 80020f4:	20000092 	.word	0x20000092

080020f8 <gt521fx_current_state>:
	g_refresh_screen = true;
}


gt521fx_state_e gt521fx_current_state(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
	return g_gt521fx_state;
 80020fc:	4b03      	ldr	r3, [pc, #12]	; (800210c <gt521fx_current_state+0x14>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
}
 8002100:	4618      	mov	r0, r3
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	2000001d 	.word	0x2000001d

08002110 <gt521fx_set_state>:


void gt521fx_set_state(uint16_t key)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	4603      	mov	r3, r0
 8002118:	80fb      	strh	r3, [r7, #6]
	g_refresh_screen = true;
 800211a:	4b08      	ldr	r3, [pc, #32]	; (800213c <gt521fx_set_state+0x2c>)
 800211c:	2201      	movs	r2, #1
 800211e:	701a      	strb	r2, [r3, #0]
    g_gt521fx_forced_state_change = true;
 8002120:	4b07      	ldr	r3, [pc, #28]	; (8002140 <gt521fx_set_state+0x30>)
 8002122:	2201      	movs	r2, #1
 8002124:	701a      	strb	r2, [r3, #0]
	g_gt521fx_state = (gt521fx_state_e)key;
 8002126:	88fb      	ldrh	r3, [r7, #6]
 8002128:	b2da      	uxtb	r2, r3
 800212a:	4b06      	ldr	r3, [pc, #24]	; (8002144 <gt521fx_set_state+0x34>)
 800212c:	701a      	strb	r2, [r3, #0]
}
 800212e:	bf00      	nop
 8002130:	370c      	adds	r7, #12
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	2000001c 	.word	0x2000001c
 8002140:	20000091 	.word	0x20000091
 8002144:	2000001d 	.word	0x2000001d

08002148 <task_sensor_access_entry>:


void task_sensor_access_entry(void *argument)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
	bool first_pass = true;
 8002150:	2301      	movs	r3, #1
 8002152:	73fb      	strb	r3, [r7, #15]

	char last_id[3] = {0, 0, 0};
 8002154:	4acb      	ldr	r2, [pc, #812]	; (8002484 <task_sensor_access_entry+0x33c>)
 8002156:	f107 030c 	add.w	r3, r7, #12
 800215a:	6812      	ldr	r2, [r2, #0]
 800215c:	4611      	mov	r1, r2
 800215e:	8019      	strh	r1, [r3, #0]
 8002160:	3302      	adds	r3, #2
 8002162:	0c12      	lsrs	r2, r2, #16
 8002164:	701a      	strb	r2, [r3, #0]
	while(1)
	{
		if (first_pass)
 8002166:	7bfb      	ldrb	r3, [r7, #15]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d030      	beq.n	80021ce <task_sensor_access_entry+0x86>
		{

			gt521fx_open();
 800216c:	f7fe fd68 	bl	8000c40 <gt521fx_open>
			while (!packet_rsp_was_received()) osDelay(10);
 8002170:	e002      	b.n	8002178 <task_sensor_access_entry+0x30>
 8002172:	200a      	movs	r0, #10
 8002174:	f004 f9f8 	bl	8006568 <osDelay>
 8002178:	f7ff f88e 	bl	8001298 <packet_rsp_was_received>
 800217c:	4603      	mov	r3, r0
 800217e:	f083 0301 	eor.w	r3, r3, #1
 8002182:	b2db      	uxtb	r3, r3
 8002184:	2b00      	cmp	r3, #0
 8002186:	d1f4      	bne.n	8002172 <task_sensor_access_entry+0x2a>
			gt521fx_led_off();
 8002188:	f7fe fd4e 	bl	8000c28 <gt521fx_led_off>
			while (!packet_rsp_was_received()) osDelay(10);
 800218c:	e002      	b.n	8002194 <task_sensor_access_entry+0x4c>
 800218e:	200a      	movs	r0, #10
 8002190:	f004 f9ea 	bl	8006568 <osDelay>
 8002194:	f7ff f880 	bl	8001298 <packet_rsp_was_received>
 8002198:	4603      	mov	r3, r0
 800219a:	f083 0301 	eor.w	r3, r3, #1
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d1f4      	bne.n	800218e <task_sensor_access_entry+0x46>
			osDelay(1000);
 80021a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80021a8:	f004 f9de 	bl	8006568 <osDelay>
			gt521fx_led_on();
 80021ac:	f7fe fd30 	bl	8000c10 <gt521fx_led_on>
			while (!packet_rsp_was_received()) osDelay(10);
 80021b0:	e002      	b.n	80021b8 <task_sensor_access_entry+0x70>
 80021b2:	200a      	movs	r0, #10
 80021b4:	f004 f9d8 	bl	8006568 <osDelay>
 80021b8:	f7ff f86e 	bl	8001298 <packet_rsp_was_received>
 80021bc:	4603      	mov	r3, r0
 80021be:	f083 0301 	eor.w	r3, r3, #1
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d1f4      	bne.n	80021b2 <task_sensor_access_entry+0x6a>
			first_pass = false;
 80021c8:	2300      	movs	r3, #0
 80021ca:	73fb      	strb	r3, [r7, #15]
 80021cc:	e7cb      	b.n	8002166 <task_sensor_access_entry+0x1e>
		}
		else
		{ 
			switch(g_gt521fx_state)
 80021ce:	4bae      	ldr	r3, [pc, #696]	; (8002488 <task_sensor_access_entry+0x340>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	2b08      	cmp	r3, #8
 80021d4:	f200 82df 	bhi.w	8002796 <task_sensor_access_entry+0x64e>
 80021d8:	a201      	add	r2, pc, #4	; (adr r2, 80021e0 <task_sensor_access_entry+0x98>)
 80021da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021de:	bf00      	nop
 80021e0:	08002205 	.word	0x08002205
 80021e4:	08002271 	.word	0x08002271
 80021e8:	08002591 	.word	0x08002591
 80021ec:	080025cb 	.word	0x080025cb
 80021f0:	080025fd 	.word	0x080025fd
 80021f4:	08002799 	.word	0x08002799
 80021f8:	08002745 	.word	0x08002745
 80021fc:	0800276d 	.word	0x0800276d
 8002200:	0800278d 	.word	0x0800278d
			{
				case GT521FX_STATE_ADMIN:
					if (g_refresh_screen && !g_gt521fx_forced_state_change)
 8002204:	4ba1      	ldr	r3, [pc, #644]	; (800248c <task_sensor_access_entry+0x344>)
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d02d      	beq.n	8002268 <task_sensor_access_entry+0x120>
 800220c:	4ba0      	ldr	r3, [pc, #640]	; (8002490 <task_sensor_access_entry+0x348>)
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	f083 0301 	eor.w	r3, r3, #1
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b00      	cmp	r3, #0
 8002218:	d026      	beq.n	8002268 <task_sensor_access_entry+0x120>
					{
						g_refresh_screen = false;
 800221a:	4b9c      	ldr	r3, [pc, #624]	; (800248c <task_sensor_access_entry+0x344>)
 800221c:	2200      	movs	r2, #0
 800221e:	701a      	strb	r2, [r3, #0]
						ssd1351_clear_screen();
 8002220:	f7ff fb3e 	bl	80018a0 <ssd1351_clear_screen>
						ssd1351_printf("Admin Menu\n");
 8002224:	489b      	ldr	r0, [pc, #620]	; (8002494 <task_sensor_access_entry+0x34c>)
 8002226:	f7ff fbe7 	bl	80019f8 <ssd1351_printf>
						ssd1351_printf("1. Enroll\n");
 800222a:	489b      	ldr	r0, [pc, #620]	; (8002498 <task_sensor_access_entry+0x350>)
 800222c:	f7ff fbe4 	bl	80019f8 <ssd1351_printf>
						ssd1351_printf("2. Delete last\n");
 8002230:	489a      	ldr	r0, [pc, #616]	; (800249c <task_sensor_access_entry+0x354>)
 8002232:	f7ff fbe1 	bl	80019f8 <ssd1351_printf>
						ssd1351_printf("3. Delete all\n");
 8002236:	489a      	ldr	r0, [pc, #616]	; (80024a0 <task_sensor_access_entry+0x358>)
 8002238:	f7ff fbde 	bl	80019f8 <ssd1351_printf>
						ssd1351_printf("4. Identify\n");
 800223c:	4899      	ldr	r0, [pc, #612]	; (80024a4 <task_sensor_access_entry+0x35c>)
 800223e:	f7ff fbdb 	bl	80019f8 <ssd1351_printf>
						// print FW info in ADMIN menu
						ssd1351_printf("# enrolled ");
 8002242:	4899      	ldr	r0, [pc, #612]	; (80024a8 <task_sensor_access_entry+0x360>)
 8002244:	f7ff fbd8 	bl	80019f8 <ssd1351_printf>
						ssd1351_printf(itoa(flash_access_gt521fx_last_id(), last_id, 10));
 8002248:	f7fe fb3c 	bl	80008c4 <flash_access_gt521fx_last_id>
 800224c:	4603      	mov	r3, r0
 800224e:	4618      	mov	r0, r3
 8002250:	f107 030c 	add.w	r3, r7, #12
 8002254:	220a      	movs	r2, #10
 8002256:	4619      	mov	r1, r3
 8002258:	f007 f824 	bl	80092a4 <itoa>
 800225c:	4603      	mov	r3, r0
 800225e:	4618      	mov	r0, r3
 8002260:	f7ff fbca 	bl	80019f8 <ssd1351_printf>
						ssd1351_write_buffer_to_display();
 8002264:	f7ff f98e 	bl	8001584 <ssd1351_write_buffer_to_display>
					}
					osDelay(100);
 8002268:	2064      	movs	r0, #100	; 0x64
 800226a:	f004 f97d 	bl	8006568 <osDelay>
				break;
 800226e:	e294      	b.n	800279a <task_sensor_access_entry+0x652>
				case GT521FX_STATE_ENROLL:
					g_gt521fx_forced_state_change = false;
 8002270:	4b87      	ldr	r3, [pc, #540]	; (8002490 <task_sensor_access_entry+0x348>)
 8002272:	2200      	movs	r2, #0
 8002274:	701a      	strb	r2, [r3, #0]
					gt521fx_led_on();
 8002276:	f7fe fccb 	bl	8000c10 <gt521fx_led_on>
					while (!packet_rsp_was_received()) osDelay(100);
 800227a:	e002      	b.n	8002282 <task_sensor_access_entry+0x13a>
 800227c:	2064      	movs	r0, #100	; 0x64
 800227e:	f004 f973 	bl	8006568 <osDelay>
 8002282:	f7ff f809 	bl	8001298 <packet_rsp_was_received>
 8002286:	4603      	mov	r3, r0
 8002288:	f083 0301 	eor.w	r3, r3, #1
 800228c:	b2db      	uxtb	r3, r3
 800228e:	2b00      	cmp	r3, #0
 8002290:	d1f4      	bne.n	800227c <task_sensor_access_entry+0x134>
					ssd1351_clear_screen(); // always clear here
 8002292:	f7ff fb05 	bl	80018a0 <ssd1351_clear_screen>
					ssd1351_printf("GT521FX enroll state");
 8002296:	4885      	ldr	r0, [pc, #532]	; (80024ac <task_sensor_access_entry+0x364>)
 8002298:	f7ff fbae 	bl	80019f8 <ssd1351_printf>
					gt521fx_start_enrollment(flash_access_gt521fx_last_id() + 1);
 800229c:	f7fe fb12 	bl	80008c4 <flash_access_gt521fx_last_id>
 80022a0:	4603      	mov	r3, r0
 80022a2:	3301      	adds	r3, #1
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7fe fcd6 	bl	8000c58 <gt521fx_start_enrollment>
					while (!packet_rsp_was_received()) osDelay(100);
 80022ac:	e002      	b.n	80022b4 <task_sensor_access_entry+0x16c>
 80022ae:	2064      	movs	r0, #100	; 0x64
 80022b0:	f004 f95a 	bl	8006568 <osDelay>
 80022b4:	f7fe fff0 	bl	8001298 <packet_rsp_was_received>
 80022b8:	4603      	mov	r3, r0
 80022ba:	f083 0301 	eor.w	r3, r3, #1
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d1f4      	bne.n	80022ae <task_sensor_access_entry+0x166>
					if (gt521fx_nack_flag()) g_gt521fx_state = GT521FX_STATE_ERROR;
 80022c4:	f7fe fc1c 	bl	8000b00 <gt521fx_nack_flag>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d002      	beq.n	80022d4 <task_sensor_access_entry+0x18c>
 80022ce:	4b6e      	ldr	r3, [pc, #440]	; (8002488 <task_sensor_access_entry+0x340>)
 80022d0:	2207      	movs	r2, #7
 80022d2:	701a      	strb	r2, [r3, #0]
					
					ssd1351_printf("\nPlace finger on sensor");
 80022d4:	4876      	ldr	r0, [pc, #472]	; (80024b0 <task_sensor_access_entry+0x368>)
 80022d6:	f7ff fb8f 	bl	80019f8 <ssd1351_printf>
					ssd1351_write_buffer_to_display();
 80022da:	f7ff f953 	bl	8001584 <ssd1351_write_buffer_to_display>
					while (!gt521fx_finger_is_pressed_flag()) 
 80022de:	e00d      	b.n	80022fc <task_sensor_access_entry+0x1b4>
					{
						gt521fx_finger_is_pressed();
 80022e0:	f7fe fccc 	bl	8000c7c <gt521fx_finger_is_pressed>
						while (!packet_rsp_was_received()) osDelay(100);
 80022e4:	e002      	b.n	80022ec <task_sensor_access_entry+0x1a4>
 80022e6:	2064      	movs	r0, #100	; 0x64
 80022e8:	f004 f93e 	bl	8006568 <osDelay>
 80022ec:	f7fe ffd4 	bl	8001298 <packet_rsp_was_received>
 80022f0:	4603      	mov	r3, r0
 80022f2:	f083 0301 	eor.w	r3, r3, #1
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d1f4      	bne.n	80022e6 <task_sensor_access_entry+0x19e>
					while (!gt521fx_finger_is_pressed_flag()) 
 80022fc:	f7fe fc5c 	bl	8000bb8 <gt521fx_finger_is_pressed_flag>
 8002300:	4603      	mov	r3, r0
 8002302:	f083 0301 	eor.w	r3, r3, #1
 8002306:	b2db      	uxtb	r3, r3
 8002308:	2b00      	cmp	r3, #0
 800230a:	d1e9      	bne.n	80022e0 <task_sensor_access_entry+0x198>
					}
					gt521fx_finger_is_pressed_clear();
 800230c:	f7fe fc14 	bl	8000b38 <gt521fx_finger_is_pressed_clear>
					gt521fx_capture_finger(true);
 8002310:	2001      	movs	r0, #1
 8002312:	f7fe fcfb 	bl	8000d0c <gt521fx_capture_finger>
					while (!packet_rsp_was_received()) osDelay(100);
 8002316:	e002      	b.n	800231e <task_sensor_access_entry+0x1d6>
 8002318:	2064      	movs	r0, #100	; 0x64
 800231a:	f004 f925 	bl	8006568 <osDelay>
 800231e:	f7fe ffbb 	bl	8001298 <packet_rsp_was_received>
 8002322:	4603      	mov	r3, r0
 8002324:	f083 0301 	eor.w	r3, r3, #1
 8002328:	b2db      	uxtb	r3, r3
 800232a:	2b00      	cmp	r3, #0
 800232c:	d1f4      	bne.n	8002318 <task_sensor_access_entry+0x1d0>
					if (gt521fx_nack_flag()) g_gt521fx_state = GT521FX_STATE_ERROR;
 800232e:	f7fe fbe7 	bl	8000b00 <gt521fx_nack_flag>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d002      	beq.n	800233e <task_sensor_access_entry+0x1f6>
 8002338:	4b53      	ldr	r3, [pc, #332]	; (8002488 <task_sensor_access_entry+0x340>)
 800233a:	2207      	movs	r2, #7
 800233c:	701a      	strb	r2, [r3, #0]
					
					gt521fx_enrollment(GT521FX_ENROLLMENT_STAGE_FIRST);
 800233e:	2000      	movs	r0, #0
 8002340:	f7fe fcfe 	bl	8000d40 <gt521fx_enrollment>
					while (!packet_rsp_was_received()) osDelay(100);
 8002344:	e002      	b.n	800234c <task_sensor_access_entry+0x204>
 8002346:	2064      	movs	r0, #100	; 0x64
 8002348:	f004 f90e 	bl	8006568 <osDelay>
 800234c:	f7fe ffa4 	bl	8001298 <packet_rsp_was_received>
 8002350:	4603      	mov	r3, r0
 8002352:	f083 0301 	eor.w	r3, r3, #1
 8002356:	b2db      	uxtb	r3, r3
 8002358:	2b00      	cmp	r3, #0
 800235a:	d1f4      	bne.n	8002346 <task_sensor_access_entry+0x1fe>
					if (gt521fx_nack_flag()) g_gt521fx_state = GT521FX_STATE_ERROR;
 800235c:	f7fe fbd0 	bl	8000b00 <gt521fx_nack_flag>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d002      	beq.n	800236c <task_sensor_access_entry+0x224>
 8002366:	4b48      	ldr	r3, [pc, #288]	; (8002488 <task_sensor_access_entry+0x340>)
 8002368:	2207      	movs	r2, #7
 800236a:	701a      	strb	r2, [r3, #0]
					
					ssd1351_printf("\nRemove finger");
 800236c:	4851      	ldr	r0, [pc, #324]	; (80024b4 <task_sensor_access_entry+0x36c>)
 800236e:	f7ff fb43 	bl	80019f8 <ssd1351_printf>
					ssd1351_write_buffer_to_display();
 8002372:	f7ff f907 	bl	8001584 <ssd1351_write_buffer_to_display>

					while (gt521fx_finger_is_pressed_flag()) 
 8002376:	e00d      	b.n	8002394 <task_sensor_access_entry+0x24c>
					{
						gt521fx_finger_is_pressed();
 8002378:	f7fe fc80 	bl	8000c7c <gt521fx_finger_is_pressed>
						while (!packet_rsp_was_received()) osDelay(100);
 800237c:	e002      	b.n	8002384 <task_sensor_access_entry+0x23c>
 800237e:	2064      	movs	r0, #100	; 0x64
 8002380:	f004 f8f2 	bl	8006568 <osDelay>
 8002384:	f7fe ff88 	bl	8001298 <packet_rsp_was_received>
 8002388:	4603      	mov	r3, r0
 800238a:	f083 0301 	eor.w	r3, r3, #1
 800238e:	b2db      	uxtb	r3, r3
 8002390:	2b00      	cmp	r3, #0
 8002392:	d1f4      	bne.n	800237e <task_sensor_access_entry+0x236>
					while (gt521fx_finger_is_pressed_flag()) 
 8002394:	f7fe fc10 	bl	8000bb8 <gt521fx_finger_is_pressed_flag>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d1ec      	bne.n	8002378 <task_sensor_access_entry+0x230>
					}
					ssd1351_clear_screen();
 800239e:	f7ff fa7f 	bl	80018a0 <ssd1351_clear_screen>
					ssd1351_printf("\nPlace finger on sensor");
 80023a2:	4843      	ldr	r0, [pc, #268]	; (80024b0 <task_sensor_access_entry+0x368>)
 80023a4:	f7ff fb28 	bl	80019f8 <ssd1351_printf>
					ssd1351_write_buffer_to_display();
 80023a8:	f7ff f8ec 	bl	8001584 <ssd1351_write_buffer_to_display>
					while (!gt521fx_finger_is_pressed_flag()) 
 80023ac:	e00d      	b.n	80023ca <task_sensor_access_entry+0x282>
					{
						gt521fx_finger_is_pressed();
 80023ae:	f7fe fc65 	bl	8000c7c <gt521fx_finger_is_pressed>
						while (!packet_rsp_was_received()) osDelay(100);
 80023b2:	e002      	b.n	80023ba <task_sensor_access_entry+0x272>
 80023b4:	2064      	movs	r0, #100	; 0x64
 80023b6:	f004 f8d7 	bl	8006568 <osDelay>
 80023ba:	f7fe ff6d 	bl	8001298 <packet_rsp_was_received>
 80023be:	4603      	mov	r3, r0
 80023c0:	f083 0301 	eor.w	r3, r3, #1
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d1f4      	bne.n	80023b4 <task_sensor_access_entry+0x26c>
					while (!gt521fx_finger_is_pressed_flag()) 
 80023ca:	f7fe fbf5 	bl	8000bb8 <gt521fx_finger_is_pressed_flag>
 80023ce:	4603      	mov	r3, r0
 80023d0:	f083 0301 	eor.w	r3, r3, #1
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1e9      	bne.n	80023ae <task_sensor_access_entry+0x266>
					}
					gt521fx_finger_is_pressed_clear();
 80023da:	f7fe fbad 	bl	8000b38 <gt521fx_finger_is_pressed_clear>
					gt521fx_capture_finger(true);
 80023de:	2001      	movs	r0, #1
 80023e0:	f7fe fc94 	bl	8000d0c <gt521fx_capture_finger>
					while (!packet_rsp_was_received()) osDelay(100);
 80023e4:	e002      	b.n	80023ec <task_sensor_access_entry+0x2a4>
 80023e6:	2064      	movs	r0, #100	; 0x64
 80023e8:	f004 f8be 	bl	8006568 <osDelay>
 80023ec:	f7fe ff54 	bl	8001298 <packet_rsp_was_received>
 80023f0:	4603      	mov	r3, r0
 80023f2:	f083 0301 	eor.w	r3, r3, #1
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d1f4      	bne.n	80023e6 <task_sensor_access_entry+0x29e>
					if (gt521fx_nack_flag()) g_gt521fx_state = GT521FX_STATE_ERROR;
 80023fc:	f7fe fb80 	bl	8000b00 <gt521fx_nack_flag>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d002      	beq.n	800240c <task_sensor_access_entry+0x2c4>
 8002406:	4b20      	ldr	r3, [pc, #128]	; (8002488 <task_sensor_access_entry+0x340>)
 8002408:	2207      	movs	r2, #7
 800240a:	701a      	strb	r2, [r3, #0]
					
					gt521fx_enrollment(GT521FX_ENROLLMENT_STAGE_SECOND);
 800240c:	2001      	movs	r0, #1
 800240e:	f7fe fc97 	bl	8000d40 <gt521fx_enrollment>
					while (!packet_rsp_was_received()) osDelay(100);
 8002412:	e002      	b.n	800241a <task_sensor_access_entry+0x2d2>
 8002414:	2064      	movs	r0, #100	; 0x64
 8002416:	f004 f8a7 	bl	8006568 <osDelay>
 800241a:	f7fe ff3d 	bl	8001298 <packet_rsp_was_received>
 800241e:	4603      	mov	r3, r0
 8002420:	f083 0301 	eor.w	r3, r3, #1
 8002424:	b2db      	uxtb	r3, r3
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1f4      	bne.n	8002414 <task_sensor_access_entry+0x2cc>
					if (gt521fx_nack_flag()) g_gt521fx_state = GT521FX_STATE_ERROR;
 800242a:	f7fe fb69 	bl	8000b00 <gt521fx_nack_flag>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d002      	beq.n	800243a <task_sensor_access_entry+0x2f2>
 8002434:	4b14      	ldr	r3, [pc, #80]	; (8002488 <task_sensor_access_entry+0x340>)
 8002436:	2207      	movs	r2, #7
 8002438:	701a      	strb	r2, [r3, #0]
					
					ssd1351_printf("\nRemove finger");
 800243a:	481e      	ldr	r0, [pc, #120]	; (80024b4 <task_sensor_access_entry+0x36c>)
 800243c:	f7ff fadc 	bl	80019f8 <ssd1351_printf>
					ssd1351_write_buffer_to_display();
 8002440:	f7ff f8a0 	bl	8001584 <ssd1351_write_buffer_to_display>
					while (gt521fx_finger_is_pressed_flag()) 
 8002444:	e00d      	b.n	8002462 <task_sensor_access_entry+0x31a>
					{
						gt521fx_finger_is_pressed();
 8002446:	f7fe fc19 	bl	8000c7c <gt521fx_finger_is_pressed>
						while (!packet_rsp_was_received()) osDelay(100);
 800244a:	e002      	b.n	8002452 <task_sensor_access_entry+0x30a>
 800244c:	2064      	movs	r0, #100	; 0x64
 800244e:	f004 f88b 	bl	8006568 <osDelay>
 8002452:	f7fe ff21 	bl	8001298 <packet_rsp_was_received>
 8002456:	4603      	mov	r3, r0
 8002458:	f083 0301 	eor.w	r3, r3, #1
 800245c:	b2db      	uxtb	r3, r3
 800245e:	2b00      	cmp	r3, #0
 8002460:	d1f4      	bne.n	800244c <task_sensor_access_entry+0x304>
					while (gt521fx_finger_is_pressed_flag()) 
 8002462:	f7fe fba9 	bl	8000bb8 <gt521fx_finger_is_pressed_flag>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d1ec      	bne.n	8002446 <task_sensor_access_entry+0x2fe>
					}
					ssd1351_clear_screen(); // always clear here
 800246c:	f7ff fa18 	bl	80018a0 <ssd1351_clear_screen>
					ssd1351_printf("\nPlace finger on sensor");
 8002470:	480f      	ldr	r0, [pc, #60]	; (80024b0 <task_sensor_access_entry+0x368>)
 8002472:	f7ff fac1 	bl	80019f8 <ssd1351_printf>
					ssd1351_write_buffer_to_display();
 8002476:	f7ff f885 	bl	8001584 <ssd1351_write_buffer_to_display>
					while (!gt521fx_finger_is_pressed_flag()) 
 800247a:	e028      	b.n	80024ce <task_sensor_access_entry+0x386>
					{
						gt521fx_finger_is_pressed();
 800247c:	f7fe fbfe 	bl	8000c7c <gt521fx_finger_is_pressed>
						while (!packet_rsp_was_received()) osDelay(100);
 8002480:	e01d      	b.n	80024be <task_sensor_access_entry+0x376>
 8002482:	bf00      	nop
 8002484:	08009508 	.word	0x08009508
 8002488:	2000001d 	.word	0x2000001d
 800248c:	2000001c 	.word	0x2000001c
 8002490:	20000091 	.word	0x20000091
 8002494:	080093ec 	.word	0x080093ec
 8002498:	080093f8 	.word	0x080093f8
 800249c:	08009404 	.word	0x08009404
 80024a0:	08009414 	.word	0x08009414
 80024a4:	08009424 	.word	0x08009424
 80024a8:	08009434 	.word	0x08009434
 80024ac:	08009440 	.word	0x08009440
 80024b0:	08009458 	.word	0x08009458
 80024b4:	08009470 	.word	0x08009470
 80024b8:	2064      	movs	r0, #100	; 0x64
 80024ba:	f004 f855 	bl	8006568 <osDelay>
 80024be:	f7fe feeb 	bl	8001298 <packet_rsp_was_received>
 80024c2:	4603      	mov	r3, r0
 80024c4:	f083 0301 	eor.w	r3, r3, #1
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d1f4      	bne.n	80024b8 <task_sensor_access_entry+0x370>
					while (!gt521fx_finger_is_pressed_flag()) 
 80024ce:	f7fe fb73 	bl	8000bb8 <gt521fx_finger_is_pressed_flag>
 80024d2:	4603      	mov	r3, r0
 80024d4:	f083 0301 	eor.w	r3, r3, #1
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d1ce      	bne.n	800247c <task_sensor_access_entry+0x334>
					}
					gt521fx_finger_is_pressed_clear();
 80024de:	f7fe fb2b 	bl	8000b38 <gt521fx_finger_is_pressed_clear>
					gt521fx_capture_finger(true);
 80024e2:	2001      	movs	r0, #1
 80024e4:	f7fe fc12 	bl	8000d0c <gt521fx_capture_finger>
					while (!packet_rsp_was_received()) osDelay(100);
 80024e8:	e002      	b.n	80024f0 <task_sensor_access_entry+0x3a8>
 80024ea:	2064      	movs	r0, #100	; 0x64
 80024ec:	f004 f83c 	bl	8006568 <osDelay>
 80024f0:	f7fe fed2 	bl	8001298 <packet_rsp_was_received>
 80024f4:	4603      	mov	r3, r0
 80024f6:	f083 0301 	eor.w	r3, r3, #1
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d1f4      	bne.n	80024ea <task_sensor_access_entry+0x3a2>
					if (gt521fx_nack_flag()) g_gt521fx_state = GT521FX_STATE_ERROR;
 8002500:	f7fe fafe 	bl	8000b00 <gt521fx_nack_flag>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d002      	beq.n	8002510 <task_sensor_access_entry+0x3c8>
 800250a:	4ba4      	ldr	r3, [pc, #656]	; (800279c <task_sensor_access_entry+0x654>)
 800250c:	2207      	movs	r2, #7
 800250e:	701a      	strb	r2, [r3, #0]
					
					gt521fx_enrollment(GT521FX_ENROLLMENT_STAGE_THIRD);
 8002510:	2002      	movs	r0, #2
 8002512:	f7fe fc15 	bl	8000d40 <gt521fx_enrollment>
					while (!packet_rsp_was_received()) osDelay(100);
 8002516:	e002      	b.n	800251e <task_sensor_access_entry+0x3d6>
 8002518:	2064      	movs	r0, #100	; 0x64
 800251a:	f004 f825 	bl	8006568 <osDelay>
 800251e:	f7fe febb 	bl	8001298 <packet_rsp_was_received>
 8002522:	4603      	mov	r3, r0
 8002524:	f083 0301 	eor.w	r3, r3, #1
 8002528:	b2db      	uxtb	r3, r3
 800252a:	2b00      	cmp	r3, #0
 800252c:	d1f4      	bne.n	8002518 <task_sensor_access_entry+0x3d0>
					if (gt521fx_nack_flag()) g_gt521fx_state = GT521FX_STATE_ERROR;
 800252e:	f7fe fae7 	bl	8000b00 <gt521fx_nack_flag>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d002      	beq.n	800253e <task_sensor_access_entry+0x3f6>
 8002538:	4b98      	ldr	r3, [pc, #608]	; (800279c <task_sensor_access_entry+0x654>)
 800253a:	2207      	movs	r2, #7
 800253c:	701a      	strb	r2, [r3, #0]
					
					ssd1351_printf("\nRemove finger");
 800253e:	4898      	ldr	r0, [pc, #608]	; (80027a0 <task_sensor_access_entry+0x658>)
 8002540:	f7ff fa5a 	bl	80019f8 <ssd1351_printf>
					ssd1351_write_buffer_to_display();
 8002544:	f7ff f81e 	bl	8001584 <ssd1351_write_buffer_to_display>
					while (gt521fx_finger_is_pressed_flag()) 
 8002548:	e00d      	b.n	8002566 <task_sensor_access_entry+0x41e>
					{
						gt521fx_finger_is_pressed();
 800254a:	f7fe fb97 	bl	8000c7c <gt521fx_finger_is_pressed>
						while (!packet_rsp_was_received()) osDelay(100);
 800254e:	e002      	b.n	8002556 <task_sensor_access_entry+0x40e>
 8002550:	2064      	movs	r0, #100	; 0x64
 8002552:	f004 f809 	bl	8006568 <osDelay>
 8002556:	f7fe fe9f 	bl	8001298 <packet_rsp_was_received>
 800255a:	4603      	mov	r3, r0
 800255c:	f083 0301 	eor.w	r3, r3, #1
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b00      	cmp	r3, #0
 8002564:	d1f4      	bne.n	8002550 <task_sensor_access_entry+0x408>
					while (gt521fx_finger_is_pressed_flag()) 
 8002566:	f7fe fb27 	bl	8000bb8 <gt521fx_finger_is_pressed_flag>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d1ec      	bne.n	800254a <task_sensor_access_entry+0x402>
					}
					ssd1351_clear_screen(); // always clear here
 8002570:	f7ff f996 	bl	80018a0 <ssd1351_clear_screen>
					flash_access_enroll_update();
 8002574:	f7fe f98e 	bl	8000894 <flash_access_enroll_update>
					ssd1351_printf("\nEnroll successful");
 8002578:	488a      	ldr	r0, [pc, #552]	; (80027a4 <task_sensor_access_entry+0x65c>)
 800257a:	f7ff fa3d 	bl	80019f8 <ssd1351_printf>
					ssd1351_write_buffer_to_display();
 800257e:	f7ff f801 	bl	8001584 <ssd1351_write_buffer_to_display>
					g_refresh_screen = true;
 8002582:	4b89      	ldr	r3, [pc, #548]	; (80027a8 <task_sensor_access_entry+0x660>)
 8002584:	2201      	movs	r2, #1
 8002586:	701a      	strb	r2, [r3, #0]
					g_gt521fx_state = GT521FX_STATE_ADMIN;
 8002588:	4b84      	ldr	r3, [pc, #528]	; (800279c <task_sensor_access_entry+0x654>)
 800258a:	2200      	movs	r2, #0
 800258c:	701a      	strb	r2, [r3, #0]
				break;
 800258e:	e104      	b.n	800279a <task_sensor_access_entry+0x652>
				case GT521FX_STATE_DELETE:
					g_gt521fx_forced_state_change = false;
 8002590:	4b86      	ldr	r3, [pc, #536]	; (80027ac <task_sensor_access_entry+0x664>)
 8002592:	2200      	movs	r2, #0
 8002594:	701a      	strb	r2, [r3, #0]
					gt521fx_delete_fingerprint(flash_access_gt521fx_last_id());
 8002596:	f7fe f995 	bl	80008c4 <flash_access_gt521fx_last_id>
 800259a:	4603      	mov	r3, r0
 800259c:	4618      	mov	r0, r3
 800259e:	f7fe fb85 	bl	8000cac <gt521fx_delete_fingerprint>
					flash_access_gt521fx_remove_last_id();
 80025a2:	f7fe f99b 	bl	80008dc <flash_access_gt521fx_remove_last_id>
					ssd1351_clear_screen();
 80025a6:	f7ff f97b 	bl	80018a0 <ssd1351_clear_screen>
					ssd1351_printf("\nLast print deleted!");
 80025aa:	4881      	ldr	r0, [pc, #516]	; (80027b0 <task_sensor_access_entry+0x668>)
 80025ac:	f7ff fa24 	bl	80019f8 <ssd1351_printf>
					ssd1351_write_buffer_to_display();
 80025b0:	f7fe ffe8 	bl	8001584 <ssd1351_write_buffer_to_display>
					osDelay(3000);
 80025b4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80025b8:	f003 ffd6 	bl	8006568 <osDelay>
					g_refresh_screen = true;
 80025bc:	4b7a      	ldr	r3, [pc, #488]	; (80027a8 <task_sensor_access_entry+0x660>)
 80025be:	2201      	movs	r2, #1
 80025c0:	701a      	strb	r2, [r3, #0]
					g_gt521fx_state = GT521FX_STATE_ADMIN;
 80025c2:	4b76      	ldr	r3, [pc, #472]	; (800279c <task_sensor_access_entry+0x654>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	701a      	strb	r2, [r3, #0]
				break;
 80025c8:	e0e7      	b.n	800279a <task_sensor_access_entry+0x652>
				case GT521FX_STATE_DELETE_ALL:
					g_gt521fx_forced_state_change = false;
 80025ca:	4b78      	ldr	r3, [pc, #480]	; (80027ac <task_sensor_access_entry+0x664>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	701a      	strb	r2, [r3, #0]
					gt521fx_delete_all_fingerprints();
 80025d0:	f7fe fb60 	bl	8000c94 <gt521fx_delete_all_fingerprints>
					flash_access_gt521fx_reset_id_count();
 80025d4:	f7fe f99a 	bl	800090c <flash_access_gt521fx_reset_id_count>
					ssd1351_clear_screen();
 80025d8:	f7ff f962 	bl	80018a0 <ssd1351_clear_screen>
					ssd1351_printf("\nAll prints deleted!");
 80025dc:	4875      	ldr	r0, [pc, #468]	; (80027b4 <task_sensor_access_entry+0x66c>)
 80025de:	f7ff fa0b 	bl	80019f8 <ssd1351_printf>
					ssd1351_write_buffer_to_display();
 80025e2:	f7fe ffcf 	bl	8001584 <ssd1351_write_buffer_to_display>
					osDelay(3000);
 80025e6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80025ea:	f003 ffbd 	bl	8006568 <osDelay>
					g_refresh_screen = true;
 80025ee:	4b6e      	ldr	r3, [pc, #440]	; (80027a8 <task_sensor_access_entry+0x660>)
 80025f0:	2201      	movs	r2, #1
 80025f2:	701a      	strb	r2, [r3, #0]
					g_gt521fx_state = GT521FX_STATE_ADMIN;
 80025f4:	4b69      	ldr	r3, [pc, #420]	; (800279c <task_sensor_access_entry+0x654>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	701a      	strb	r2, [r3, #0]
				break;
 80025fa:	e0ce      	b.n	800279a <task_sensor_access_entry+0x652>
				case GT521FX_STATE_IDENTIFY:
					g_gt521fx_forced_state_change = false;
 80025fc:	4b6b      	ldr	r3, [pc, #428]	; (80027ac <task_sensor_access_entry+0x664>)
 80025fe:	2200      	movs	r2, #0
 8002600:	701a      	strb	r2, [r3, #0]
					gt521fx_finger_is_pressed_clear();
 8002602:	f7fe fa99 	bl	8000b38 <gt521fx_finger_is_pressed_clear>
					ssd1351_clear_screen(); // always clear here
 8002606:	f7ff f94b 	bl	80018a0 <ssd1351_clear_screen>
					gt521fx_led_off();
 800260a:	f7fe fb0d 	bl	8000c28 <gt521fx_led_off>
					while (!packet_rsp_was_received()) osDelay(10);
 800260e:	e002      	b.n	8002616 <task_sensor_access_entry+0x4ce>
 8002610:	200a      	movs	r0, #10
 8002612:	f003 ffa9 	bl	8006568 <osDelay>
 8002616:	f7fe fe3f 	bl	8001298 <packet_rsp_was_received>
 800261a:	4603      	mov	r3, r0
 800261c:	f083 0301 	eor.w	r3, r3, #1
 8002620:	b2db      	uxtb	r3, r3
 8002622:	2b00      	cmp	r3, #0
 8002624:	d1f4      	bne.n	8002610 <task_sensor_access_entry+0x4c8>
					osDelay(1000);
 8002626:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800262a:	f003 ff9d 	bl	8006568 <osDelay>
					gt521fx_led_on();
 800262e:	f7fe faef 	bl	8000c10 <gt521fx_led_on>
					while (!packet_rsp_was_received()) osDelay(100);
 8002632:	e002      	b.n	800263a <task_sensor_access_entry+0x4f2>
 8002634:	2064      	movs	r0, #100	; 0x64
 8002636:	f003 ff97 	bl	8006568 <osDelay>
 800263a:	f7fe fe2d 	bl	8001298 <packet_rsp_was_received>
 800263e:	4603      	mov	r3, r0
 8002640:	f083 0301 	eor.w	r3, r3, #1
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2b00      	cmp	r3, #0
 8002648:	d1f4      	bne.n	8002634 <task_sensor_access_entry+0x4ec>
					osDelay(1000);
 800264a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800264e:	f003 ff8b 	bl	8006568 <osDelay>
					ssd1351_printf("GT521FX identify state");
 8002652:	4859      	ldr	r0, [pc, #356]	; (80027b8 <task_sensor_access_entry+0x670>)
 8002654:	f7ff f9d0 	bl	80019f8 <ssd1351_printf>
					ssd1351_printf("\nPlace finger on sensor");
 8002658:	4858      	ldr	r0, [pc, #352]	; (80027bc <task_sensor_access_entry+0x674>)
 800265a:	f7ff f9cd 	bl	80019f8 <ssd1351_printf>
					ssd1351_write_buffer_to_display();
 800265e:	f7fe ff91 	bl	8001584 <ssd1351_write_buffer_to_display>
					while(!gt521fx_finger_is_pressed_flag() && !g_gt521fx_forced_state_change)
 8002662:	e00d      	b.n	8002680 <task_sensor_access_entry+0x538>
					{
						gt521fx_finger_is_pressed();
 8002664:	f7fe fb0a 	bl	8000c7c <gt521fx_finger_is_pressed>
						while (!packet_rsp_was_received()) osDelay(100);
 8002668:	e002      	b.n	8002670 <task_sensor_access_entry+0x528>
 800266a:	2064      	movs	r0, #100	; 0x64
 800266c:	f003 ff7c 	bl	8006568 <osDelay>
 8002670:	f7fe fe12 	bl	8001298 <packet_rsp_was_received>
 8002674:	4603      	mov	r3, r0
 8002676:	f083 0301 	eor.w	r3, r3, #1
 800267a:	b2db      	uxtb	r3, r3
 800267c:	2b00      	cmp	r3, #0
 800267e:	d1f4      	bne.n	800266a <task_sensor_access_entry+0x522>
					while(!gt521fx_finger_is_pressed_flag() && !g_gt521fx_forced_state_change)
 8002680:	f7fe fa9a 	bl	8000bb8 <gt521fx_finger_is_pressed_flag>
 8002684:	4603      	mov	r3, r0
 8002686:	f083 0301 	eor.w	r3, r3, #1
 800268a:	b2db      	uxtb	r3, r3
 800268c:	2b00      	cmp	r3, #0
 800268e:	d006      	beq.n	800269e <task_sensor_access_entry+0x556>
 8002690:	4b46      	ldr	r3, [pc, #280]	; (80027ac <task_sensor_access_entry+0x664>)
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	f083 0301 	eor.w	r3, r3, #1
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b00      	cmp	r3, #0
 800269c:	d1e2      	bne.n	8002664 <task_sensor_access_entry+0x51c>
					}
					gt521fx_finger_is_pressed_clear();
 800269e:	f7fe fa4b 	bl	8000b38 <gt521fx_finger_is_pressed_clear>
					gt521fx_capture_finger(true);
 80026a2:	2001      	movs	r0, #1
 80026a4:	f7fe fb32 	bl	8000d0c <gt521fx_capture_finger>
					while(!packet_rsp_was_received()) osDelay(100);
 80026a8:	e002      	b.n	80026b0 <task_sensor_access_entry+0x568>
 80026aa:	2064      	movs	r0, #100	; 0x64
 80026ac:	f003 ff5c 	bl	8006568 <osDelay>
 80026b0:	f7fe fdf2 	bl	8001298 <packet_rsp_was_received>
 80026b4:	4603      	mov	r3, r0
 80026b6:	f083 0301 	eor.w	r3, r3, #1
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1f4      	bne.n	80026aa <task_sensor_access_entry+0x562>
					if (g_gt521fx_forced_state_change)
 80026c0:	4b3a      	ldr	r3, [pc, #232]	; (80027ac <task_sensor_access_entry+0x664>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d006      	beq.n	80026d6 <task_sensor_access_entry+0x58e>
					{
						g_gt521fx_forced_state_change = false;
 80026c8:	4b38      	ldr	r3, [pc, #224]	; (80027ac <task_sensor_access_entry+0x664>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	701a      	strb	r2, [r3, #0]
						g_refresh_screen = true;
 80026ce:	4b36      	ldr	r3, [pc, #216]	; (80027a8 <task_sensor_access_entry+0x660>)
 80026d0:	2201      	movs	r2, #1
 80026d2:	701a      	strb	r2, [r3, #0]
 80026d4:	e027      	b.n	8002726 <task_sensor_access_entry+0x5de>
					}
					else if (gt521fx_fingerprint_identify())
 80026d6:	f7fe fafb 	bl	8000cd0 <gt521fx_fingerprint_identify>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d00b      	beq.n	80026f8 <task_sensor_access_entry+0x5b0>
					{
						ssd1351_printf("\nSuccess!");
 80026e0:	4837      	ldr	r0, [pc, #220]	; (80027c0 <task_sensor_access_entry+0x678>)
 80026e2:	f7ff f989 	bl	80019f8 <ssd1351_printf>
						ssd1351_write_buffer_to_display();
 80026e6:	f7fe ff4d 	bl	8001584 <ssd1351_write_buffer_to_display>
						g_gt521fx_state = GT521FX_STATE_OPEN_DOOR;
 80026ea:	4b2c      	ldr	r3, [pc, #176]	; (800279c <task_sensor_access_entry+0x654>)
 80026ec:	2206      	movs	r2, #6
 80026ee:	701a      	strb	r2, [r3, #0]
						g_refresh_screen = true;
 80026f0:	4b2d      	ldr	r3, [pc, #180]	; (80027a8 <task_sensor_access_entry+0x660>)
 80026f2:	2201      	movs	r2, #1
 80026f4:	701a      	strb	r2, [r3, #0]
 80026f6:	e016      	b.n	8002726 <task_sensor_access_entry+0x5de>
						// open garage door!
					}
					else
					{
						ssd1351_printf("\nFailure!");
 80026f8:	4832      	ldr	r0, [pc, #200]	; (80027c4 <task_sensor_access_entry+0x67c>)
 80026fa:	f7ff f97d 	bl	80019f8 <ssd1351_printf>
						ssd1351_write_buffer_to_display();
 80026fe:	f7fe ff41 	bl	8001584 <ssd1351_write_buffer_to_display>
						while (!packet_rsp_was_received()) osDelay(100);
 8002702:	e002      	b.n	800270a <task_sensor_access_entry+0x5c2>
 8002704:	2064      	movs	r0, #100	; 0x64
 8002706:	f003 ff2f 	bl	8006568 <osDelay>
 800270a:	f7fe fdc5 	bl	8001298 <packet_rsp_was_received>
 800270e:	4603      	mov	r3, r0
 8002710:	f083 0301 	eor.w	r3, r3, #1
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1f4      	bne.n	8002704 <task_sensor_access_entry+0x5bc>
						g_gt521fx_state = GT521FX_STATE_ERROR;
 800271a:	4b20      	ldr	r3, [pc, #128]	; (800279c <task_sensor_access_entry+0x654>)
 800271c:	2207      	movs	r2, #7
 800271e:	701a      	strb	r2, [r3, #0]
						g_refresh_screen = true;
 8002720:	4b21      	ldr	r3, [pc, #132]	; (80027a8 <task_sensor_access_entry+0x660>)
 8002722:	2201      	movs	r2, #1
 8002724:	701a      	strb	r2, [r3, #0]
					}
					gt521fx_led_off();
 8002726:	f7fe fa7f 	bl	8000c28 <gt521fx_led_off>
					while (!packet_rsp_was_received()) osDelay(100);
 800272a:	e002      	b.n	8002732 <task_sensor_access_entry+0x5ea>
 800272c:	2064      	movs	r0, #100	; 0x64
 800272e:	f003 ff1b 	bl	8006568 <osDelay>
 8002732:	f7fe fdb1 	bl	8001298 <packet_rsp_was_received>
 8002736:	4603      	mov	r3, r0
 8002738:	f083 0301 	eor.w	r3, r3, #1
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1f4      	bne.n	800272c <task_sensor_access_entry+0x5e4>
				break;
 8002742:	e02a      	b.n	800279a <task_sensor_access_entry+0x652>
				case GT521FX_STATE_VERIFY:
				break;
				case GT521FX_STATE_OPEN_DOOR:
					ssd1351_printf("\nOpen Door!");
 8002744:	4820      	ldr	r0, [pc, #128]	; (80027c8 <task_sensor_access_entry+0x680>)
 8002746:	f7ff f957 	bl	80019f8 <ssd1351_printf>
					board_init_activate_garage_door();
 800274a:	f7fe f861 	bl	8000810 <board_init_activate_garage_door>
					ssd1351_write_buffer_to_display();
 800274e:	f7fe ff19 	bl	8001584 <ssd1351_write_buffer_to_display>
					osDelay(3000);
 8002752:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002756:	f003 ff07 	bl	8006568 <osDelay>
					board_init_deactivate_garage_door();
 800275a:	f7fe f865 	bl	8000828 <board_init_deactivate_garage_door>
					g_refresh_screen = true;
 800275e:	4b12      	ldr	r3, [pc, #72]	; (80027a8 <task_sensor_access_entry+0x660>)
 8002760:	2201      	movs	r2, #1
 8002762:	701a      	strb	r2, [r3, #0]
					g_gt521fx_state = GT521FX_STATE_IDENTIFY;
 8002764:	4b0d      	ldr	r3, [pc, #52]	; (800279c <task_sensor_access_entry+0x654>)
 8002766:	2204      	movs	r2, #4
 8002768:	701a      	strb	r2, [r3, #0]
				break;
 800276a:	e016      	b.n	800279a <task_sensor_access_entry+0x652>
				case GT521FX_STATE_ERROR:
					ssd1351_printf("\nERROR");
 800276c:	4817      	ldr	r0, [pc, #92]	; (80027cc <task_sensor_access_entry+0x684>)
 800276e:	f7ff f943 	bl	80019f8 <ssd1351_printf>
					ssd1351_write_buffer_to_display();
 8002772:	f7fe ff07 	bl	8001584 <ssd1351_write_buffer_to_display>
					osDelay(3000);
 8002776:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800277a:	f003 fef5 	bl	8006568 <osDelay>
					g_refresh_screen = true;
 800277e:	4b0a      	ldr	r3, [pc, #40]	; (80027a8 <task_sensor_access_entry+0x660>)
 8002780:	2201      	movs	r2, #1
 8002782:	701a      	strb	r2, [r3, #0]
					g_gt521fx_state = GT521FX_STATE_IDENTIFY;
 8002784:	4b05      	ldr	r3, [pc, #20]	; (800279c <task_sensor_access_entry+0x654>)
 8002786:	2204      	movs	r2, #4
 8002788:	701a      	strb	r2, [r3, #0]
				break;
 800278a:	e006      	b.n	800279a <task_sensor_access_entry+0x652>
				case GT521FX_STATE_NOTHING_TO_DO:
					osDelay(1000);
 800278c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002790:	f003 feea 	bl	8006568 <osDelay>
				break;
 8002794:	e001      	b.n	800279a <task_sensor_access_entry+0x652>
				default:
					while(1);
 8002796:	e7fe      	b.n	8002796 <task_sensor_access_entry+0x64e>
				break;
 8002798:	bf00      	nop
		if (first_pass)
 800279a:	e4e4      	b.n	8002166 <task_sensor_access_entry+0x1e>
 800279c:	2000001d 	.word	0x2000001d
 80027a0:	08009470 	.word	0x08009470
 80027a4:	08009480 	.word	0x08009480
 80027a8:	2000001c 	.word	0x2000001c
 80027ac:	20000091 	.word	0x20000091
 80027b0:	08009494 	.word	0x08009494
 80027b4:	080094ac 	.word	0x080094ac
 80027b8:	080094c4 	.word	0x080094c4
 80027bc:	08009458 	.word	0x08009458
 80027c0:	080094dc 	.word	0x080094dc
 80027c4:	080094e8 	.word	0x080094e8
 80027c8:	080094f4 	.word	0x080094f4
 80027cc:	08009500 	.word	0x08009500

080027d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80027d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002808 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80027d4:	f7ff fb7c 	bl	8001ed0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80027d8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80027da:	e003      	b.n	80027e4 <LoopCopyDataInit>

080027dc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80027dc:	4b0b      	ldr	r3, [pc, #44]	; (800280c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80027de:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80027e0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80027e2:	3104      	adds	r1, #4

080027e4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80027e4:	480a      	ldr	r0, [pc, #40]	; (8002810 <LoopForever+0xa>)
	ldr	r3, =_edata
 80027e6:	4b0b      	ldr	r3, [pc, #44]	; (8002814 <LoopForever+0xe>)
	adds	r2, r0, r1
 80027e8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80027ea:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80027ec:	d3f6      	bcc.n	80027dc <CopyDataInit>
	ldr	r2, =_sbss
 80027ee:	4a0a      	ldr	r2, [pc, #40]	; (8002818 <LoopForever+0x12>)
	b	LoopFillZerobss
 80027f0:	e002      	b.n	80027f8 <LoopFillZerobss>

080027f2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80027f2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80027f4:	f842 3b04 	str.w	r3, [r2], #4

080027f8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80027f8:	4b08      	ldr	r3, [pc, #32]	; (800281c <LoopForever+0x16>)
	cmp	r2, r3
 80027fa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80027fc:	d3f9      	bcc.n	80027f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027fe:	f006 fd15 	bl	800922c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002802:	f7fe fbf1 	bl	8000fe8 <main>

08002806 <LoopForever>:

LoopForever:
    b LoopForever
 8002806:	e7fe      	b.n	8002806 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002808:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 800280c:	08009dd0 	.word	0x08009dd0
	ldr	r0, =_sdata
 8002810:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002814:	2000004c 	.word	0x2000004c
	ldr	r2, =_sbss
 8002818:	2000004c 	.word	0x2000004c
	ldr	r3, = _ebss
 800281c:	2000c1ec 	.word	0x2000c1ec

08002820 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002820:	e7fe      	b.n	8002820 <ADC1_IRQHandler>

08002822 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002822:	b580      	push	{r7, lr}
 8002824:	b082      	sub	sp, #8
 8002826:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002828:	2300      	movs	r3, #0
 800282a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800282c:	2003      	movs	r0, #3
 800282e:	f000 f902 	bl	8002a36 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002832:	2000      	movs	r0, #0
 8002834:	f7ff fabe 	bl	8001db4 <HAL_InitTick>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d002      	beq.n	8002844 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	71fb      	strb	r3, [r7, #7]
 8002842:	e001      	b.n	8002848 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002844:	f7ff f98e 	bl	8001b64 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002848:	79fb      	ldrb	r3, [r7, #7]
}
 800284a:	4618      	mov	r0, r3
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
	...

08002854 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002858:	4b06      	ldr	r3, [pc, #24]	; (8002874 <HAL_IncTick+0x20>)
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	461a      	mov	r2, r3
 800285e:	4b06      	ldr	r3, [pc, #24]	; (8002878 <HAL_IncTick+0x24>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4413      	add	r3, r2
 8002864:	4a04      	ldr	r2, [pc, #16]	; (8002878 <HAL_IncTick+0x24>)
 8002866:	6013      	str	r3, [r2, #0]
}
 8002868:	bf00      	nop
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	20000024 	.word	0x20000024
 8002878:	2000c1a8 	.word	0x2000c1a8

0800287c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  return uwTick;
 8002880:	4b03      	ldr	r3, [pc, #12]	; (8002890 <HAL_GetTick+0x14>)
 8002882:	681b      	ldr	r3, [r3, #0]
}
 8002884:	4618      	mov	r0, r3
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	2000c1a8 	.word	0x2000c1a8

08002894 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800289c:	f7ff ffee 	bl	800287c <HAL_GetTick>
 80028a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ac:	d005      	beq.n	80028ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80028ae:	4b0a      	ldr	r3, [pc, #40]	; (80028d8 <HAL_Delay+0x44>)
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	461a      	mov	r2, r3
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	4413      	add	r3, r2
 80028b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028ba:	bf00      	nop
 80028bc:	f7ff ffde 	bl	800287c <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d8f7      	bhi.n	80028bc <HAL_Delay+0x28>
  {
  }
}
 80028cc:	bf00      	nop
 80028ce:	bf00      	nop
 80028d0:	3710      	adds	r7, #16
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	20000024 	.word	0x20000024

080028dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028dc:	b480      	push	{r7}
 80028de:	b085      	sub	sp, #20
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f003 0307 	and.w	r3, r3, #7
 80028ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028ec:	4b0c      	ldr	r3, [pc, #48]	; (8002920 <__NVIC_SetPriorityGrouping+0x44>)
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028f2:	68ba      	ldr	r2, [r7, #8]
 80028f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028f8:	4013      	ands	r3, r2
 80028fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002904:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002908:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800290c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800290e:	4a04      	ldr	r2, [pc, #16]	; (8002920 <__NVIC_SetPriorityGrouping+0x44>)
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	60d3      	str	r3, [r2, #12]
}
 8002914:	bf00      	nop
 8002916:	3714      	adds	r7, #20
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr
 8002920:	e000ed00 	.word	0xe000ed00

08002924 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002928:	4b04      	ldr	r3, [pc, #16]	; (800293c <__NVIC_GetPriorityGrouping+0x18>)
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	0a1b      	lsrs	r3, r3, #8
 800292e:	f003 0307 	and.w	r3, r3, #7
}
 8002932:	4618      	mov	r0, r3
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr
 800293c:	e000ed00 	.word	0xe000ed00

08002940 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	4603      	mov	r3, r0
 8002948:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800294a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294e:	2b00      	cmp	r3, #0
 8002950:	db0b      	blt.n	800296a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002952:	79fb      	ldrb	r3, [r7, #7]
 8002954:	f003 021f 	and.w	r2, r3, #31
 8002958:	4907      	ldr	r1, [pc, #28]	; (8002978 <__NVIC_EnableIRQ+0x38>)
 800295a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800295e:	095b      	lsrs	r3, r3, #5
 8002960:	2001      	movs	r0, #1
 8002962:	fa00 f202 	lsl.w	r2, r0, r2
 8002966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800296a:	bf00      	nop
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	e000e100 	.word	0xe000e100

0800297c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	4603      	mov	r3, r0
 8002984:	6039      	str	r1, [r7, #0]
 8002986:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800298c:	2b00      	cmp	r3, #0
 800298e:	db0a      	blt.n	80029a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	b2da      	uxtb	r2, r3
 8002994:	490c      	ldr	r1, [pc, #48]	; (80029c8 <__NVIC_SetPriority+0x4c>)
 8002996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299a:	0112      	lsls	r2, r2, #4
 800299c:	b2d2      	uxtb	r2, r2
 800299e:	440b      	add	r3, r1
 80029a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029a4:	e00a      	b.n	80029bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	b2da      	uxtb	r2, r3
 80029aa:	4908      	ldr	r1, [pc, #32]	; (80029cc <__NVIC_SetPriority+0x50>)
 80029ac:	79fb      	ldrb	r3, [r7, #7]
 80029ae:	f003 030f 	and.w	r3, r3, #15
 80029b2:	3b04      	subs	r3, #4
 80029b4:	0112      	lsls	r2, r2, #4
 80029b6:	b2d2      	uxtb	r2, r2
 80029b8:	440b      	add	r3, r1
 80029ba:	761a      	strb	r2, [r3, #24]
}
 80029bc:	bf00      	nop
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr
 80029c8:	e000e100 	.word	0xe000e100
 80029cc:	e000ed00 	.word	0xe000ed00

080029d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b089      	sub	sp, #36	; 0x24
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f003 0307 	and.w	r3, r3, #7
 80029e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	f1c3 0307 	rsb	r3, r3, #7
 80029ea:	2b04      	cmp	r3, #4
 80029ec:	bf28      	it	cs
 80029ee:	2304      	movcs	r3, #4
 80029f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	3304      	adds	r3, #4
 80029f6:	2b06      	cmp	r3, #6
 80029f8:	d902      	bls.n	8002a00 <NVIC_EncodePriority+0x30>
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	3b03      	subs	r3, #3
 80029fe:	e000      	b.n	8002a02 <NVIC_EncodePriority+0x32>
 8002a00:	2300      	movs	r3, #0
 8002a02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a04:	f04f 32ff 	mov.w	r2, #4294967295
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0e:	43da      	mvns	r2, r3
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	401a      	ands	r2, r3
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a18:	f04f 31ff 	mov.w	r1, #4294967295
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a22:	43d9      	mvns	r1, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a28:	4313      	orrs	r3, r2
         );
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3724      	adds	r7, #36	; 0x24
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr

08002a36 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b082      	sub	sp, #8
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f7ff ff4c 	bl	80028dc <__NVIC_SetPriorityGrouping>
}
 8002a44:	bf00      	nop
 8002a46:	3708      	adds	r7, #8
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b086      	sub	sp, #24
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	4603      	mov	r3, r0
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	607a      	str	r2, [r7, #4]
 8002a58:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a5e:	f7ff ff61 	bl	8002924 <__NVIC_GetPriorityGrouping>
 8002a62:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	68b9      	ldr	r1, [r7, #8]
 8002a68:	6978      	ldr	r0, [r7, #20]
 8002a6a:	f7ff ffb1 	bl	80029d0 <NVIC_EncodePriority>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a74:	4611      	mov	r1, r2
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7ff ff80 	bl	800297c <__NVIC_SetPriority>
}
 8002a7c:	bf00      	nop
 8002a7e:	3718      	adds	r7, #24
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7ff ff54 	bl	8002940 <__NVIC_EnableIRQ>
}
 8002a98:	bf00      	nop
 8002a9a:	3708      	adds	r7, #8
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b085      	sub	sp, #20
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d101      	bne.n	8002ab2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e098      	b.n	8002be4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	4b4d      	ldr	r3, [pc, #308]	; (8002bf0 <HAL_DMA_Init+0x150>)
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d80f      	bhi.n	8002ade <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	4b4b      	ldr	r3, [pc, #300]	; (8002bf4 <HAL_DMA_Init+0x154>)
 8002ac6:	4413      	add	r3, r2
 8002ac8:	4a4b      	ldr	r2, [pc, #300]	; (8002bf8 <HAL_DMA_Init+0x158>)
 8002aca:	fba2 2303 	umull	r2, r3, r2, r3
 8002ace:	091b      	lsrs	r3, r3, #4
 8002ad0:	009a      	lsls	r2, r3, #2
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a48      	ldr	r2, [pc, #288]	; (8002bfc <HAL_DMA_Init+0x15c>)
 8002ada:	641a      	str	r2, [r3, #64]	; 0x40
 8002adc:	e00e      	b.n	8002afc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	4b46      	ldr	r3, [pc, #280]	; (8002c00 <HAL_DMA_Init+0x160>)
 8002ae6:	4413      	add	r3, r2
 8002ae8:	4a43      	ldr	r2, [pc, #268]	; (8002bf8 <HAL_DMA_Init+0x158>)
 8002aea:	fba2 2303 	umull	r2, r3, r2, r3
 8002aee:	091b      	lsrs	r3, r3, #4
 8002af0:	009a      	lsls	r2, r3, #2
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a42      	ldr	r2, [pc, #264]	; (8002c04 <HAL_DMA_Init+0x164>)
 8002afa:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2202      	movs	r2, #2
 8002b00:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b16:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002b20:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a1b      	ldr	r3, [r3, #32]
 8002b3e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002b40:	68fa      	ldr	r2, [r7, #12]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	68fa      	ldr	r2, [r7, #12]
 8002b4c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b56:	d039      	beq.n	8002bcc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5c:	4a27      	ldr	r2, [pc, #156]	; (8002bfc <HAL_DMA_Init+0x15c>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d11a      	bne.n	8002b98 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002b62:	4b29      	ldr	r3, [pc, #164]	; (8002c08 <HAL_DMA_Init+0x168>)
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b6a:	f003 031c 	and.w	r3, r3, #28
 8002b6e:	210f      	movs	r1, #15
 8002b70:	fa01 f303 	lsl.w	r3, r1, r3
 8002b74:	43db      	mvns	r3, r3
 8002b76:	4924      	ldr	r1, [pc, #144]	; (8002c08 <HAL_DMA_Init+0x168>)
 8002b78:	4013      	ands	r3, r2
 8002b7a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002b7c:	4b22      	ldr	r3, [pc, #136]	; (8002c08 <HAL_DMA_Init+0x168>)
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6859      	ldr	r1, [r3, #4]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b88:	f003 031c 	and.w	r3, r3, #28
 8002b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b90:	491d      	ldr	r1, [pc, #116]	; (8002c08 <HAL_DMA_Init+0x168>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	600b      	str	r3, [r1, #0]
 8002b96:	e019      	b.n	8002bcc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002b98:	4b1c      	ldr	r3, [pc, #112]	; (8002c0c <HAL_DMA_Init+0x16c>)
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba0:	f003 031c 	and.w	r3, r3, #28
 8002ba4:	210f      	movs	r1, #15
 8002ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8002baa:	43db      	mvns	r3, r3
 8002bac:	4917      	ldr	r1, [pc, #92]	; (8002c0c <HAL_DMA_Init+0x16c>)
 8002bae:	4013      	ands	r3, r2
 8002bb0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002bb2:	4b16      	ldr	r3, [pc, #88]	; (8002c0c <HAL_DMA_Init+0x16c>)
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6859      	ldr	r1, [r3, #4]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bbe:	f003 031c 	and.w	r3, r3, #28
 8002bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc6:	4911      	ldr	r1, [pc, #68]	; (8002c0c <HAL_DMA_Init+0x16c>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002be2:	2300      	movs	r3, #0
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3714      	adds	r7, #20
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr
 8002bf0:	40020407 	.word	0x40020407
 8002bf4:	bffdfff8 	.word	0xbffdfff8
 8002bf8:	cccccccd 	.word	0xcccccccd
 8002bfc:	40020000 	.word	0x40020000
 8002c00:	bffdfbf8 	.word	0xbffdfbf8
 8002c04:	40020400 	.word	0x40020400
 8002c08:	400200a8 	.word	0x400200a8
 8002c0c:	400204a8 	.word	0x400204a8

08002c10 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b086      	sub	sp, #24
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]
 8002c1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d101      	bne.n	8002c30 <HAL_DMA_Start_IT+0x20>
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	e04b      	b.n	8002cc8 <HAL_DMA_Start_IT+0xb8>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d13a      	bne.n	8002cba <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2202      	movs	r2, #2
 8002c48:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f022 0201 	bic.w	r2, r2, #1
 8002c60:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	68b9      	ldr	r1, [r7, #8]
 8002c68:	68f8      	ldr	r0, [r7, #12]
 8002c6a:	f000 f8e0 	bl	8002e2e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d008      	beq.n	8002c88 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f042 020e 	orr.w	r2, r2, #14
 8002c84:	601a      	str	r2, [r3, #0]
 8002c86:	e00f      	b.n	8002ca8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f022 0204 	bic.w	r2, r2, #4
 8002c96:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f042 020a 	orr.w	r2, r2, #10
 8002ca6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f042 0201 	orr.w	r2, r2, #1
 8002cb6:	601a      	str	r2, [r3, #0]
 8002cb8:	e005      	b.n	8002cc6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002cc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3718      	adds	r7, #24
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cec:	f003 031c 	and.w	r3, r3, #28
 8002cf0:	2204      	movs	r2, #4
 8002cf2:	409a      	lsls	r2, r3
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d026      	beq.n	8002d4a <HAL_DMA_IRQHandler+0x7a>
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	f003 0304 	and.w	r3, r3, #4
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d021      	beq.n	8002d4a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0320 	and.w	r3, r3, #32
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d107      	bne.n	8002d24 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f022 0204 	bic.w	r2, r2, #4
 8002d22:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d28:	f003 021c 	and.w	r2, r3, #28
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d30:	2104      	movs	r1, #4
 8002d32:	fa01 f202 	lsl.w	r2, r1, r2
 8002d36:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d071      	beq.n	8002e24 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002d48:	e06c      	b.n	8002e24 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d4e:	f003 031c 	and.w	r3, r3, #28
 8002d52:	2202      	movs	r2, #2
 8002d54:	409a      	lsls	r2, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	4013      	ands	r3, r2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d02e      	beq.n	8002dbc <HAL_DMA_IRQHandler+0xec>
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	f003 0302 	and.w	r3, r3, #2
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d029      	beq.n	8002dbc <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0320 	and.w	r3, r3, #32
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d10b      	bne.n	8002d8e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f022 020a 	bic.w	r2, r2, #10
 8002d84:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d92:	f003 021c 	and.w	r2, r3, #28
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9a:	2102      	movs	r1, #2
 8002d9c:	fa01 f202 	lsl.w	r2, r1, r2
 8002da0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d038      	beq.n	8002e24 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002dba:	e033      	b.n	8002e24 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc0:	f003 031c 	and.w	r3, r3, #28
 8002dc4:	2208      	movs	r2, #8
 8002dc6:	409a      	lsls	r2, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	4013      	ands	r3, r2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d02a      	beq.n	8002e26 <HAL_DMA_IRQHandler+0x156>
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	f003 0308 	and.w	r3, r3, #8
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d025      	beq.n	8002e26 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f022 020e 	bic.w	r2, r2, #14
 8002de8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dee:	f003 021c 	and.w	r2, r3, #28
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df6:	2101      	movs	r1, #1
 8002df8:	fa01 f202 	lsl.w	r2, r1, r2
 8002dfc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2201      	movs	r2, #1
 8002e02:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d004      	beq.n	8002e26 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002e24:	bf00      	nop
 8002e26:	bf00      	nop
}
 8002e28:	3710      	adds	r7, #16
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e2e:	b480      	push	{r7}
 8002e30:	b085      	sub	sp, #20
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	60f8      	str	r0, [r7, #12]
 8002e36:	60b9      	str	r1, [r7, #8]
 8002e38:	607a      	str	r2, [r7, #4]
 8002e3a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e40:	f003 021c 	and.w	r2, r3, #28
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e48:	2101      	movs	r1, #1
 8002e4a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e4e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	683a      	ldr	r2, [r7, #0]
 8002e56:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	2b10      	cmp	r3, #16
 8002e5e:	d108      	bne.n	8002e72 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	68ba      	ldr	r2, [r7, #8]
 8002e6e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002e70:	e007      	b.n	8002e82 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68ba      	ldr	r2, [r7, #8]
 8002e78:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	60da      	str	r2, [r3, #12]
}
 8002e82:	bf00      	nop
 8002e84:	3714      	adds	r7, #20
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
	...

08002e90 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b086      	sub	sp, #24
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002ea2:	4b2f      	ldr	r3, [pc, #188]	; (8002f60 <HAL_FLASH_Program+0xd0>)
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d101      	bne.n	8002eae <HAL_FLASH_Program+0x1e>
 8002eaa:	2302      	movs	r3, #2
 8002eac:	e053      	b.n	8002f56 <HAL_FLASH_Program+0xc6>
 8002eae:	4b2c      	ldr	r3, [pc, #176]	; (8002f60 <HAL_FLASH_Program+0xd0>)
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002eb4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002eb8:	f000 f894 	bl	8002fe4 <FLASH_WaitForLastOperation>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8002ec0:	7dfb      	ldrb	r3, [r7, #23]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d143      	bne.n	8002f4e <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002ec6:	4b26      	ldr	r3, [pc, #152]	; (8002f60 <HAL_FLASH_Program+0xd0>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8002ecc:	4b25      	ldr	r3, [pc, #148]	; (8002f64 <HAL_FLASH_Program+0xd4>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d009      	beq.n	8002eec <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8002ed8:	4b22      	ldr	r3, [pc, #136]	; (8002f64 <HAL_FLASH_Program+0xd4>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a21      	ldr	r2, [pc, #132]	; (8002f64 <HAL_FLASH_Program+0xd4>)
 8002ede:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ee2:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8002ee4:	4b1e      	ldr	r3, [pc, #120]	; (8002f60 <HAL_FLASH_Program+0xd0>)
 8002ee6:	2202      	movs	r2, #2
 8002ee8:	771a      	strb	r2, [r3, #28]
 8002eea:	e002      	b.n	8002ef2 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8002eec:	4b1c      	ldr	r3, [pc, #112]	; (8002f60 <HAL_FLASH_Program+0xd0>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d107      	bne.n	8002f08 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8002ef8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002efc:	68b8      	ldr	r0, [r7, #8]
 8002efe:	f000 f8c9 	bl	8003094 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8002f02:	2301      	movs	r3, #1
 8002f04:	613b      	str	r3, [r7, #16]
 8002f06:	e010      	b.n	8002f2a <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d002      	beq.n	8002f14 <HAL_FLASH_Program+0x84>
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d10a      	bne.n	8002f2a <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	4619      	mov	r1, r3
 8002f18:	68b8      	ldr	r0, [r7, #8]
 8002f1a:	f000 f8e1 	bl	80030e0 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d102      	bne.n	8002f2a <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8002f24:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002f28:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002f2a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002f2e:	f000 f859 	bl	8002fe4 <FLASH_WaitForLastOperation>
 8002f32:	4603      	mov	r3, r0
 8002f34:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d006      	beq.n	8002f4a <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8002f3c:	4b09      	ldr	r3, [pc, #36]	; (8002f64 <HAL_FLASH_Program+0xd4>)
 8002f3e:	695a      	ldr	r2, [r3, #20]
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	43db      	mvns	r3, r3
 8002f44:	4907      	ldr	r1, [pc, #28]	; (8002f64 <HAL_FLASH_Program+0xd4>)
 8002f46:	4013      	ands	r3, r2
 8002f48:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002f4a:	f000 f9e1 	bl	8003310 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002f4e:	4b04      	ldr	r3, [pc, #16]	; (8002f60 <HAL_FLASH_Program+0xd0>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	701a      	strb	r2, [r3, #0]

  return status;
 8002f54:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3718      	adds	r7, #24
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	20000028 	.word	0x20000028
 8002f64:	40022000 	.word	0x40022000

08002f68 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8002f72:	4b0b      	ldr	r3, [pc, #44]	; (8002fa0 <HAL_FLASH_Unlock+0x38>)
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	da0b      	bge.n	8002f92 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002f7a:	4b09      	ldr	r3, [pc, #36]	; (8002fa0 <HAL_FLASH_Unlock+0x38>)
 8002f7c:	4a09      	ldr	r2, [pc, #36]	; (8002fa4 <HAL_FLASH_Unlock+0x3c>)
 8002f7e:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002f80:	4b07      	ldr	r3, [pc, #28]	; (8002fa0 <HAL_FLASH_Unlock+0x38>)
 8002f82:	4a09      	ldr	r2, [pc, #36]	; (8002fa8 <HAL_FLASH_Unlock+0x40>)
 8002f84:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8002f86:	4b06      	ldr	r3, [pc, #24]	; (8002fa0 <HAL_FLASH_Unlock+0x38>)
 8002f88:	695b      	ldr	r3, [r3, #20]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	da01      	bge.n	8002f92 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8002f92:	79fb      	ldrb	r3, [r7, #7]
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr
 8002fa0:	40022000 	.word	0x40022000
 8002fa4:	45670123 	.word	0x45670123
 8002fa8:	cdef89ab 	.word	0xcdef89ab

08002fac <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002fac:	b480      	push	{r7}
 8002fae:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002fb0:	4b05      	ldr	r3, [pc, #20]	; (8002fc8 <HAL_FLASH_Lock+0x1c>)
 8002fb2:	695b      	ldr	r3, [r3, #20]
 8002fb4:	4a04      	ldr	r2, [pc, #16]	; (8002fc8 <HAL_FLASH_Lock+0x1c>)
 8002fb6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002fba:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr
 8002fc8:	40022000 	.word	0x40022000

08002fcc <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_RD: FLASH PCROP read error
  *            @arg HAL_FLASH_ERROR_OPTV: FLASH Option validity error
  *            @arg FLASH_FLAG_PEMPTY : FLASH Boot from not programmed flash (apply only for STM32L43x/STM32L44x devices)
  */
uint32_t HAL_FLASH_GetError(void)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8002fd0:	4b03      	ldr	r3, [pc, #12]	; (8002fe0 <HAL_FLASH_GetError+0x14>)
 8002fd2:	685b      	ldr	r3, [r3, #4]
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	20000028 	.word	0x20000028

08002fe4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8002fec:	f7ff fc46 	bl	800287c <HAL_GetTick>
 8002ff0:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8002ff2:	e00d      	b.n	8003010 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ffa:	d009      	beq.n	8003010 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8002ffc:	f7ff fc3e 	bl	800287c <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	429a      	cmp	r2, r3
 800300a:	d801      	bhi.n	8003010 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e036      	b.n	800307e <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8003010:	4b1d      	ldr	r3, [pc, #116]	; (8003088 <FLASH_WaitForLastOperation+0xa4>)
 8003012:	691b      	ldr	r3, [r3, #16]
 8003014:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d1eb      	bne.n	8002ff4 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 800301c:	4b1a      	ldr	r3, [pc, #104]	; (8003088 <FLASH_WaitForLastOperation+0xa4>)
 800301e:	691a      	ldr	r2, [r3, #16]
 8003020:	4b1a      	ldr	r3, [pc, #104]	; (800308c <FLASH_WaitForLastOperation+0xa8>)
 8003022:	4013      	ands	r3, r2
 8003024:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d01e      	beq.n	800306a <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 800302c:	4b18      	ldr	r3, [pc, #96]	; (8003090 <FLASH_WaitForLastOperation+0xac>)
 800302e:	685a      	ldr	r2, [r3, #4]
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	4313      	orrs	r3, r2
 8003034:	4a16      	ldr	r2, [pc, #88]	; (8003090 <FLASH_WaitForLastOperation+0xac>)
 8003036:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d007      	beq.n	8003052 <FLASH_WaitForLastOperation+0x6e>
 8003042:	4b11      	ldr	r3, [pc, #68]	; (8003088 <FLASH_WaitForLastOperation+0xa4>)
 8003044:	699a      	ldr	r2, [r3, #24]
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800304c:	490e      	ldr	r1, [pc, #56]	; (8003088 <FLASH_WaitForLastOperation+0xa4>)
 800304e:	4313      	orrs	r3, r2
 8003050:	618b      	str	r3, [r1, #24]
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d004      	beq.n	8003066 <FLASH_WaitForLastOperation+0x82>
 800305c:	4a0a      	ldr	r2, [pc, #40]	; (8003088 <FLASH_WaitForLastOperation+0xa4>)
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003064:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e009      	b.n	800307e <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800306a:	4b07      	ldr	r3, [pc, #28]	; (8003088 <FLASH_WaitForLastOperation+0xa4>)
 800306c:	691b      	ldr	r3, [r3, #16]
 800306e:	f003 0301 	and.w	r3, r3, #1
 8003072:	2b00      	cmp	r3, #0
 8003074:	d002      	beq.n	800307c <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003076:	4b04      	ldr	r3, [pc, #16]	; (8003088 <FLASH_WaitForLastOperation+0xa4>)
 8003078:	2201      	movs	r2, #1
 800307a:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3710      	adds	r7, #16
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	40022000 	.word	0x40022000
 800308c:	0002c3fa 	.word	0x0002c3fa
 8003090:	20000028 	.word	0x20000028

08003094 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003094:	b480      	push	{r7}
 8003096:	b085      	sub	sp, #20
 8003098:	af00      	add	r7, sp, #0
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80030a0:	4b0e      	ldr	r3, [pc, #56]	; (80030dc <FLASH_Program_DoubleWord+0x48>)
 80030a2:	695b      	ldr	r3, [r3, #20]
 80030a4:	4a0d      	ldr	r2, [pc, #52]	; (80030dc <FLASH_Program_DoubleWord+0x48>)
 80030a6:	f043 0301 	orr.w	r3, r3, #1
 80030aa:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	683a      	ldr	r2, [r7, #0]
 80030b0:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80030b2:	f3bf 8f6f 	isb	sy
}
 80030b6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 80030b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80030bc:	f04f 0200 	mov.w	r2, #0
 80030c0:	f04f 0300 	mov.w	r3, #0
 80030c4:	000a      	movs	r2, r1
 80030c6:	2300      	movs	r3, #0
 80030c8:	68f9      	ldr	r1, [r7, #12]
 80030ca:	3104      	adds	r1, #4
 80030cc:	4613      	mov	r3, r2
 80030ce:	600b      	str	r3, [r1, #0]
}
 80030d0:	bf00      	nop
 80030d2:	3714      	adds	r7, #20
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr
 80030dc:	40022000 	.word	0x40022000

080030e0 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b089      	sub	sp, #36	; 0x24
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 80030ea:	2340      	movs	r3, #64	; 0x40
 80030ec:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80030f6:	4b14      	ldr	r3, [pc, #80]	; (8003148 <FLASH_Program_Fast+0x68>)
 80030f8:	695b      	ldr	r3, [r3, #20]
 80030fa:	4a13      	ldr	r2, [pc, #76]	; (8003148 <FLASH_Program_Fast+0x68>)
 80030fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003100:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003102:	f3ef 8310 	mrs	r3, PRIMASK
 8003106:	60fb      	str	r3, [r7, #12]
  return(result);
 8003108:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 800310a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800310c:	b672      	cpsid	i
}
 800310e:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	3304      	adds	r3, #4
 800311c:	61bb      	str	r3, [r7, #24]
    src_addr++;
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	3304      	adds	r3, #4
 8003122:	617b      	str	r3, [r7, #20]
    row_index--;
 8003124:	7ffb      	ldrb	r3, [r7, #31]
 8003126:	3b01      	subs	r3, #1
 8003128:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 800312a:	7ffb      	ldrb	r3, [r7, #31]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d1ef      	bne.n	8003110 <FLASH_Program_Fast+0x30>
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	f383 8810 	msr	PRIMASK, r3
}
 800313a:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 800313c:	bf00      	nop
 800313e:	3724      	adds	r7, #36	; 0x24
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr
 8003148:	40022000 	.word	0x40022000

0800314c <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003156:	4b4b      	ldr	r3, [pc, #300]	; (8003284 <HAL_FLASHEx_Erase+0x138>)
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	2b01      	cmp	r3, #1
 800315c:	d101      	bne.n	8003162 <HAL_FLASHEx_Erase+0x16>
 800315e:	2302      	movs	r3, #2
 8003160:	e08b      	b.n	800327a <HAL_FLASHEx_Erase+0x12e>
 8003162:	4b48      	ldr	r3, [pc, #288]	; (8003284 <HAL_FLASHEx_Erase+0x138>)
 8003164:	2201      	movs	r2, #1
 8003166:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003168:	f24c 3050 	movw	r0, #50000	; 0xc350
 800316c:	f7ff ff3a 	bl	8002fe4 <FLASH_WaitForLastOperation>
 8003170:	4603      	mov	r3, r0
 8003172:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003174:	7bfb      	ldrb	r3, [r7, #15]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d17b      	bne.n	8003272 <HAL_FLASHEx_Erase+0x126>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800317a:	4b42      	ldr	r3, [pc, #264]	; (8003284 <HAL_FLASHEx_Erase+0x138>)
 800317c:	2200      	movs	r2, #0
 800317e:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8003180:	4b41      	ldr	r3, [pc, #260]	; (8003288 <HAL_FLASHEx_Erase+0x13c>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003188:	2b00      	cmp	r3, #0
 800318a:	d019      	beq.n	80031c0 <HAL_FLASHEx_Erase+0x74>
    {
      /* Disable instruction cache  */
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800318c:	4b3e      	ldr	r3, [pc, #248]	; (8003288 <HAL_FLASHEx_Erase+0x13c>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a3d      	ldr	r2, [pc, #244]	; (8003288 <HAL_FLASHEx_Erase+0x13c>)
 8003192:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003196:	6013      	str	r3, [r2, #0]

      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8003198:	4b3b      	ldr	r3, [pc, #236]	; (8003288 <HAL_FLASHEx_Erase+0x13c>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d009      	beq.n	80031b8 <HAL_FLASHEx_Erase+0x6c>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 80031a4:	4b38      	ldr	r3, [pc, #224]	; (8003288 <HAL_FLASHEx_Erase+0x13c>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a37      	ldr	r2, [pc, #220]	; (8003288 <HAL_FLASHEx_Erase+0x13c>)
 80031aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031ae:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 80031b0:	4b34      	ldr	r3, [pc, #208]	; (8003284 <HAL_FLASHEx_Erase+0x138>)
 80031b2:	2203      	movs	r2, #3
 80031b4:	771a      	strb	r2, [r3, #28]
 80031b6:	e016      	b.n	80031e6 <HAL_FLASHEx_Erase+0x9a>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 80031b8:	4b32      	ldr	r3, [pc, #200]	; (8003284 <HAL_FLASHEx_Erase+0x138>)
 80031ba:	2201      	movs	r2, #1
 80031bc:	771a      	strb	r2, [r3, #28]
 80031be:	e012      	b.n	80031e6 <HAL_FLASHEx_Erase+0x9a>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80031c0:	4b31      	ldr	r3, [pc, #196]	; (8003288 <HAL_FLASHEx_Erase+0x13c>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d009      	beq.n	80031e0 <HAL_FLASHEx_Erase+0x94>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80031cc:	4b2e      	ldr	r3, [pc, #184]	; (8003288 <HAL_FLASHEx_Erase+0x13c>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a2d      	ldr	r2, [pc, #180]	; (8003288 <HAL_FLASHEx_Erase+0x13c>)
 80031d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031d6:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80031d8:	4b2a      	ldr	r3, [pc, #168]	; (8003284 <HAL_FLASHEx_Erase+0x138>)
 80031da:	2202      	movs	r2, #2
 80031dc:	771a      	strb	r2, [r3, #28]
 80031de:	e002      	b.n	80031e6 <HAL_FLASHEx_Erase+0x9a>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80031e0:	4b28      	ldr	r3, [pc, #160]	; (8003284 <HAL_FLASHEx_Erase+0x138>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d111      	bne.n	8003212 <HAL_FLASHEx_Erase+0xc6>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f000 f84a 	bl	800328c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80031f8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80031fc:	f7ff fef2 	bl	8002fe4 <FLASH_WaitForLastOperation>
 8003200:	4603      	mov	r3, r0
 8003202:	73fb      	strb	r3, [r7, #15]
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8003204:	4b20      	ldr	r3, [pc, #128]	; (8003288 <HAL_FLASHEx_Erase+0x13c>)
 8003206:	695b      	ldr	r3, [r3, #20]
 8003208:	4a1f      	ldr	r2, [pc, #124]	; (8003288 <HAL_FLASHEx_Erase+0x13c>)
 800320a:	f023 0304 	bic.w	r3, r3, #4
 800320e:	6153      	str	r3, [r2, #20]
 8003210:	e02d      	b.n	800326e <HAL_FLASHEx_Erase+0x122>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	f04f 32ff 	mov.w	r2, #4294967295
 8003218:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	60bb      	str	r3, [r7, #8]
 8003220:	e01d      	b.n	800325e <HAL_FLASHEx_Erase+0x112>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	4619      	mov	r1, r3
 8003228:	68b8      	ldr	r0, [r7, #8]
 800322a:	f000 f84d 	bl	80032c8 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800322e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003232:	f7ff fed7 	bl	8002fe4 <FLASH_WaitForLastOperation>
 8003236:	4603      	mov	r3, r0
 8003238:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800323a:	4b13      	ldr	r3, [pc, #76]	; (8003288 <HAL_FLASHEx_Erase+0x13c>)
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	4a12      	ldr	r2, [pc, #72]	; (8003288 <HAL_FLASHEx_Erase+0x13c>)
 8003240:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8003244:	f023 0302 	bic.w	r3, r3, #2
 8003248:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 800324a:	7bfb      	ldrb	r3, [r7, #15]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d003      	beq.n	8003258 <HAL_FLASHEx_Erase+0x10c>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	68ba      	ldr	r2, [r7, #8]
 8003254:	601a      	str	r2, [r3, #0]
          break;
 8003256:	e00a      	b.n	800326e <HAL_FLASHEx_Erase+0x122>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	3301      	adds	r3, #1
 800325c:	60bb      	str	r3, [r7, #8]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	689a      	ldr	r2, [r3, #8]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	4413      	add	r3, r2
 8003268:	68ba      	ldr	r2, [r7, #8]
 800326a:	429a      	cmp	r2, r3
 800326c:	d3d9      	bcc.n	8003222 <HAL_FLASHEx_Erase+0xd6>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800326e:	f000 f84f 	bl	8003310 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003272:	4b04      	ldr	r3, [pc, #16]	; (8003284 <HAL_FLASHEx_Erase+0x138>)
 8003274:	2200      	movs	r2, #0
 8003276:	701a      	strb	r2, [r3, #0]

  return status;
 8003278:	7bfb      	ldrb	r3, [r7, #15]
}
 800327a:	4618      	mov	r0, r3
 800327c:	3710      	adds	r7, #16
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	20000028 	.word	0x20000028
 8003288:	40022000 	.word	0x40022000

0800328c <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	2b00      	cmp	r3, #0
 800329c:	d005      	beq.n	80032aa <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800329e:	4b09      	ldr	r3, [pc, #36]	; (80032c4 <FLASH_MassErase+0x38>)
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	4a08      	ldr	r2, [pc, #32]	; (80032c4 <FLASH_MassErase+0x38>)
 80032a4:	f043 0304 	orr.w	r3, r3, #4
 80032a8:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80032aa:	4b06      	ldr	r3, [pc, #24]	; (80032c4 <FLASH_MassErase+0x38>)
 80032ac:	695b      	ldr	r3, [r3, #20]
 80032ae:	4a05      	ldr	r2, [pc, #20]	; (80032c4 <FLASH_MassErase+0x38>)
 80032b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032b4:	6153      	str	r3, [r2, #20]
}
 80032b6:	bf00      	nop
 80032b8:	370c      	adds	r7, #12
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	40022000 	.word	0x40022000

080032c8 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 80032d2:	4b0e      	ldr	r3, [pc, #56]	; (800330c <FLASH_PageErase+0x44>)
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	00db      	lsls	r3, r3, #3
 80032de:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 80032e2:	490a      	ldr	r1, [pc, #40]	; (800330c <FLASH_PageErase+0x44>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 80032e8:	4b08      	ldr	r3, [pc, #32]	; (800330c <FLASH_PageErase+0x44>)
 80032ea:	695b      	ldr	r3, [r3, #20]
 80032ec:	4a07      	ldr	r2, [pc, #28]	; (800330c <FLASH_PageErase+0x44>)
 80032ee:	f043 0302 	orr.w	r3, r3, #2
 80032f2:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80032f4:	4b05      	ldr	r3, [pc, #20]	; (800330c <FLASH_PageErase+0x44>)
 80032f6:	695b      	ldr	r3, [r3, #20]
 80032f8:	4a04      	ldr	r2, [pc, #16]	; (800330c <FLASH_PageErase+0x44>)
 80032fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032fe:	6153      	str	r3, [r2, #20]
}
 8003300:	bf00      	nop
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr
 800330c:	40022000 	.word	0x40022000

08003310 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8003316:	4b1e      	ldr	r3, [pc, #120]	; (8003390 <FLASH_FlushCaches+0x80>)
 8003318:	7f1b      	ldrb	r3, [r3, #28]
 800331a:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 800331c:	79fb      	ldrb	r3, [r7, #7]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d002      	beq.n	8003328 <FLASH_FlushCaches+0x18>
 8003322:	79fb      	ldrb	r3, [r7, #7]
 8003324:	2b03      	cmp	r3, #3
 8003326:	d111      	bne.n	800334c <FLASH_FlushCaches+0x3c>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003328:	4b1a      	ldr	r3, [pc, #104]	; (8003394 <FLASH_FlushCaches+0x84>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a19      	ldr	r2, [pc, #100]	; (8003394 <FLASH_FlushCaches+0x84>)
 800332e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003332:	6013      	str	r3, [r2, #0]
 8003334:	4b17      	ldr	r3, [pc, #92]	; (8003394 <FLASH_FlushCaches+0x84>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a16      	ldr	r2, [pc, #88]	; (8003394 <FLASH_FlushCaches+0x84>)
 800333a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800333e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003340:	4b14      	ldr	r3, [pc, #80]	; (8003394 <FLASH_FlushCaches+0x84>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a13      	ldr	r2, [pc, #76]	; (8003394 <FLASH_FlushCaches+0x84>)
 8003346:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800334a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 800334c:	79fb      	ldrb	r3, [r7, #7]
 800334e:	2b02      	cmp	r3, #2
 8003350:	d002      	beq.n	8003358 <FLASH_FlushCaches+0x48>
 8003352:	79fb      	ldrb	r3, [r7, #7]
 8003354:	2b03      	cmp	r3, #3
 8003356:	d111      	bne.n	800337c <FLASH_FlushCaches+0x6c>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8003358:	4b0e      	ldr	r3, [pc, #56]	; (8003394 <FLASH_FlushCaches+0x84>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a0d      	ldr	r2, [pc, #52]	; (8003394 <FLASH_FlushCaches+0x84>)
 800335e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003362:	6013      	str	r3, [r2, #0]
 8003364:	4b0b      	ldr	r3, [pc, #44]	; (8003394 <FLASH_FlushCaches+0x84>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a0a      	ldr	r2, [pc, #40]	; (8003394 <FLASH_FlushCaches+0x84>)
 800336a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800336e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8003370:	4b08      	ldr	r3, [pc, #32]	; (8003394 <FLASH_FlushCaches+0x84>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a07      	ldr	r2, [pc, #28]	; (8003394 <FLASH_FlushCaches+0x84>)
 8003376:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800337a:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800337c:	4b04      	ldr	r3, [pc, #16]	; (8003390 <FLASH_FlushCaches+0x80>)
 800337e:	2200      	movs	r2, #0
 8003380:	771a      	strb	r2, [r3, #28]
}
 8003382:	bf00      	nop
 8003384:	370c      	adds	r7, #12
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	20000028 	.word	0x20000028
 8003394:	40022000 	.word	0x40022000

08003398 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003398:	b480      	push	{r7}
 800339a:	b087      	sub	sp, #28
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033a2:	2300      	movs	r3, #0
 80033a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033a6:	e154      	b.n	8003652 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	2101      	movs	r1, #1
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	fa01 f303 	lsl.w	r3, r1, r3
 80033b4:	4013      	ands	r3, r2
 80033b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	f000 8146 	beq.w	800364c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d00b      	beq.n	80033e0 <HAL_GPIO_Init+0x48>
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d007      	beq.n	80033e0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033d4:	2b11      	cmp	r3, #17
 80033d6:	d003      	beq.n	80033e0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	2b12      	cmp	r3, #18
 80033de:	d130      	bne.n	8003442 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	005b      	lsls	r3, r3, #1
 80033ea:	2203      	movs	r2, #3
 80033ec:	fa02 f303 	lsl.w	r3, r2, r3
 80033f0:	43db      	mvns	r3, r3
 80033f2:	693a      	ldr	r2, [r7, #16]
 80033f4:	4013      	ands	r3, r2
 80033f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	68da      	ldr	r2, [r3, #12]
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	005b      	lsls	r3, r3, #1
 8003400:	fa02 f303 	lsl.w	r3, r2, r3
 8003404:	693a      	ldr	r2, [r7, #16]
 8003406:	4313      	orrs	r3, r2
 8003408:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	693a      	ldr	r2, [r7, #16]
 800340e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003416:	2201      	movs	r2, #1
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	fa02 f303 	lsl.w	r3, r2, r3
 800341e:	43db      	mvns	r3, r3
 8003420:	693a      	ldr	r2, [r7, #16]
 8003422:	4013      	ands	r3, r2
 8003424:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	091b      	lsrs	r3, r3, #4
 800342c:	f003 0201 	and.w	r2, r3, #1
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	fa02 f303 	lsl.w	r3, r2, r3
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	4313      	orrs	r3, r2
 800343a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	005b      	lsls	r3, r3, #1
 800344c:	2203      	movs	r2, #3
 800344e:	fa02 f303 	lsl.w	r3, r2, r3
 8003452:	43db      	mvns	r3, r3
 8003454:	693a      	ldr	r2, [r7, #16]
 8003456:	4013      	ands	r3, r2
 8003458:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	689a      	ldr	r2, [r3, #8]
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	005b      	lsls	r3, r3, #1
 8003462:	fa02 f303 	lsl.w	r3, r2, r3
 8003466:	693a      	ldr	r2, [r7, #16]
 8003468:	4313      	orrs	r3, r2
 800346a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	693a      	ldr	r2, [r7, #16]
 8003470:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	2b02      	cmp	r3, #2
 8003478:	d003      	beq.n	8003482 <HAL_GPIO_Init+0xea>
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	2b12      	cmp	r3, #18
 8003480:	d123      	bne.n	80034ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	08da      	lsrs	r2, r3, #3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	3208      	adds	r2, #8
 800348a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800348e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	f003 0307 	and.w	r3, r3, #7
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	220f      	movs	r2, #15
 800349a:	fa02 f303 	lsl.w	r3, r2, r3
 800349e:	43db      	mvns	r3, r3
 80034a0:	693a      	ldr	r2, [r7, #16]
 80034a2:	4013      	ands	r3, r2
 80034a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	691a      	ldr	r2, [r3, #16]
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	f003 0307 	and.w	r3, r3, #7
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	fa02 f303 	lsl.w	r3, r2, r3
 80034b6:	693a      	ldr	r2, [r7, #16]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	08da      	lsrs	r2, r3, #3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	3208      	adds	r2, #8
 80034c4:	6939      	ldr	r1, [r7, #16]
 80034c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	005b      	lsls	r3, r3, #1
 80034d4:	2203      	movs	r2, #3
 80034d6:	fa02 f303 	lsl.w	r3, r2, r3
 80034da:	43db      	mvns	r3, r3
 80034dc:	693a      	ldr	r2, [r7, #16]
 80034de:	4013      	ands	r3, r2
 80034e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f003 0203 	and.w	r2, r3, #3
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	005b      	lsls	r3, r3, #1
 80034ee:	fa02 f303 	lsl.w	r3, r2, r3
 80034f2:	693a      	ldr	r2, [r7, #16]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	693a      	ldr	r2, [r7, #16]
 80034fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003506:	2b00      	cmp	r3, #0
 8003508:	f000 80a0 	beq.w	800364c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800350c:	4b58      	ldr	r3, [pc, #352]	; (8003670 <HAL_GPIO_Init+0x2d8>)
 800350e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003510:	4a57      	ldr	r2, [pc, #348]	; (8003670 <HAL_GPIO_Init+0x2d8>)
 8003512:	f043 0301 	orr.w	r3, r3, #1
 8003516:	6613      	str	r3, [r2, #96]	; 0x60
 8003518:	4b55      	ldr	r3, [pc, #340]	; (8003670 <HAL_GPIO_Init+0x2d8>)
 800351a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800351c:	f003 0301 	and.w	r3, r3, #1
 8003520:	60bb      	str	r3, [r7, #8]
 8003522:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003524:	4a53      	ldr	r2, [pc, #332]	; (8003674 <HAL_GPIO_Init+0x2dc>)
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	089b      	lsrs	r3, r3, #2
 800352a:	3302      	adds	r3, #2
 800352c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003530:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	f003 0303 	and.w	r3, r3, #3
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	220f      	movs	r2, #15
 800353c:	fa02 f303 	lsl.w	r3, r2, r3
 8003540:	43db      	mvns	r3, r3
 8003542:	693a      	ldr	r2, [r7, #16]
 8003544:	4013      	ands	r3, r2
 8003546:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800354e:	d019      	beq.n	8003584 <HAL_GPIO_Init+0x1ec>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4a49      	ldr	r2, [pc, #292]	; (8003678 <HAL_GPIO_Init+0x2e0>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d013      	beq.n	8003580 <HAL_GPIO_Init+0x1e8>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4a48      	ldr	r2, [pc, #288]	; (800367c <HAL_GPIO_Init+0x2e4>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d00d      	beq.n	800357c <HAL_GPIO_Init+0x1e4>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4a47      	ldr	r2, [pc, #284]	; (8003680 <HAL_GPIO_Init+0x2e8>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d007      	beq.n	8003578 <HAL_GPIO_Init+0x1e0>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4a46      	ldr	r2, [pc, #280]	; (8003684 <HAL_GPIO_Init+0x2ec>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d101      	bne.n	8003574 <HAL_GPIO_Init+0x1dc>
 8003570:	2304      	movs	r3, #4
 8003572:	e008      	b.n	8003586 <HAL_GPIO_Init+0x1ee>
 8003574:	2307      	movs	r3, #7
 8003576:	e006      	b.n	8003586 <HAL_GPIO_Init+0x1ee>
 8003578:	2303      	movs	r3, #3
 800357a:	e004      	b.n	8003586 <HAL_GPIO_Init+0x1ee>
 800357c:	2302      	movs	r3, #2
 800357e:	e002      	b.n	8003586 <HAL_GPIO_Init+0x1ee>
 8003580:	2301      	movs	r3, #1
 8003582:	e000      	b.n	8003586 <HAL_GPIO_Init+0x1ee>
 8003584:	2300      	movs	r3, #0
 8003586:	697a      	ldr	r2, [r7, #20]
 8003588:	f002 0203 	and.w	r2, r2, #3
 800358c:	0092      	lsls	r2, r2, #2
 800358e:	4093      	lsls	r3, r2
 8003590:	693a      	ldr	r2, [r7, #16]
 8003592:	4313      	orrs	r3, r2
 8003594:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003596:	4937      	ldr	r1, [pc, #220]	; (8003674 <HAL_GPIO_Init+0x2dc>)
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	089b      	lsrs	r3, r3, #2
 800359c:	3302      	adds	r3, #2
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80035a4:	4b38      	ldr	r3, [pc, #224]	; (8003688 <HAL_GPIO_Init+0x2f0>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	43db      	mvns	r3, r3
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	4013      	ands	r3, r2
 80035b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d003      	beq.n	80035c8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80035c0:	693a      	ldr	r2, [r7, #16]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80035c8:	4a2f      	ldr	r2, [pc, #188]	; (8003688 <HAL_GPIO_Init+0x2f0>)
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80035ce:	4b2e      	ldr	r3, [pc, #184]	; (8003688 <HAL_GPIO_Init+0x2f0>)
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	43db      	mvns	r3, r3
 80035d8:	693a      	ldr	r2, [r7, #16]
 80035da:	4013      	ands	r3, r2
 80035dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d003      	beq.n	80035f2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80035ea:	693a      	ldr	r2, [r7, #16]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80035f2:	4a25      	ldr	r2, [pc, #148]	; (8003688 <HAL_GPIO_Init+0x2f0>)
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80035f8:	4b23      	ldr	r3, [pc, #140]	; (8003688 <HAL_GPIO_Init+0x2f0>)
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	43db      	mvns	r3, r3
 8003602:	693a      	ldr	r2, [r7, #16]
 8003604:	4013      	ands	r3, r2
 8003606:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d003      	beq.n	800361c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003614:	693a      	ldr	r2, [r7, #16]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	4313      	orrs	r3, r2
 800361a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800361c:	4a1a      	ldr	r2, [pc, #104]	; (8003688 <HAL_GPIO_Init+0x2f0>)
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003622:	4b19      	ldr	r3, [pc, #100]	; (8003688 <HAL_GPIO_Init+0x2f0>)
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	43db      	mvns	r3, r3
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	4013      	ands	r3, r2
 8003630:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d003      	beq.n	8003646 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800363e:	693a      	ldr	r2, [r7, #16]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	4313      	orrs	r3, r2
 8003644:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003646:	4a10      	ldr	r2, [pc, #64]	; (8003688 <HAL_GPIO_Init+0x2f0>)
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	3301      	adds	r3, #1
 8003650:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	fa22 f303 	lsr.w	r3, r2, r3
 800365c:	2b00      	cmp	r3, #0
 800365e:	f47f aea3 	bne.w	80033a8 <HAL_GPIO_Init+0x10>
  }
}
 8003662:	bf00      	nop
 8003664:	bf00      	nop
 8003666:	371c      	adds	r7, #28
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr
 8003670:	40021000 	.word	0x40021000
 8003674:	40010000 	.word	0x40010000
 8003678:	48000400 	.word	0x48000400
 800367c:	48000800 	.word	0x48000800
 8003680:	48000c00 	.word	0x48000c00
 8003684:	48001000 	.word	0x48001000
 8003688:	40010400 	.word	0x40010400

0800368c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800368c:	b480      	push	{r7}
 800368e:	b085      	sub	sp, #20
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	460b      	mov	r3, r1
 8003696:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	691a      	ldr	r2, [r3, #16]
 800369c:	887b      	ldrh	r3, [r7, #2]
 800369e:	4013      	ands	r3, r2
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d002      	beq.n	80036aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80036a4:	2301      	movs	r3, #1
 80036a6:	73fb      	strb	r3, [r7, #15]
 80036a8:	e001      	b.n	80036ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80036aa:	2300      	movs	r3, #0
 80036ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80036ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3714      	adds	r7, #20
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	460b      	mov	r3, r1
 80036c6:	807b      	strh	r3, [r7, #2]
 80036c8:	4613      	mov	r3, r2
 80036ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036cc:	787b      	ldrb	r3, [r7, #1]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d003      	beq.n	80036da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80036d2:	887a      	ldrh	r2, [r7, #2]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80036d8:	e002      	b.n	80036e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80036da:	887a      	ldrh	r2, [r7, #2]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80036e0:	bf00      	nop
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80036ec:	b480      	push	{r7}
 80036ee:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80036f0:	4b04      	ldr	r3, [pc, #16]	; (8003704 <HAL_PWREx_GetVoltageRange+0x18>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	40007000 	.word	0x40007000

08003708 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003716:	d130      	bne.n	800377a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003718:	4b23      	ldr	r3, [pc, #140]	; (80037a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003720:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003724:	d038      	beq.n	8003798 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003726:	4b20      	ldr	r3, [pc, #128]	; (80037a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800372e:	4a1e      	ldr	r2, [pc, #120]	; (80037a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003730:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003734:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003736:	4b1d      	ldr	r3, [pc, #116]	; (80037ac <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2232      	movs	r2, #50	; 0x32
 800373c:	fb02 f303 	mul.w	r3, r2, r3
 8003740:	4a1b      	ldr	r2, [pc, #108]	; (80037b0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003742:	fba2 2303 	umull	r2, r3, r2, r3
 8003746:	0c9b      	lsrs	r3, r3, #18
 8003748:	3301      	adds	r3, #1
 800374a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800374c:	e002      	b.n	8003754 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	3b01      	subs	r3, #1
 8003752:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003754:	4b14      	ldr	r3, [pc, #80]	; (80037a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003756:	695b      	ldr	r3, [r3, #20]
 8003758:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800375c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003760:	d102      	bne.n	8003768 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d1f2      	bne.n	800374e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003768:	4b0f      	ldr	r3, [pc, #60]	; (80037a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800376a:	695b      	ldr	r3, [r3, #20]
 800376c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003770:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003774:	d110      	bne.n	8003798 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e00f      	b.n	800379a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800377a:	4b0b      	ldr	r3, [pc, #44]	; (80037a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003782:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003786:	d007      	beq.n	8003798 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003788:	4b07      	ldr	r3, [pc, #28]	; (80037a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003790:	4a05      	ldr	r2, [pc, #20]	; (80037a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003792:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003796:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003798:	2300      	movs	r3, #0
}
 800379a:	4618      	mov	r0, r3
 800379c:	3714      	adds	r7, #20
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	40007000 	.word	0x40007000
 80037ac:	20000018 	.word	0x20000018
 80037b0:	431bde83 	.word	0x431bde83

080037b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b088      	sub	sp, #32
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d102      	bne.n	80037c8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	f000 bc11 	b.w	8003fea <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037c8:	4ba0      	ldr	r3, [pc, #640]	; (8003a4c <HAL_RCC_OscConfig+0x298>)
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	f003 030c 	and.w	r3, r3, #12
 80037d0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037d2:	4b9e      	ldr	r3, [pc, #632]	; (8003a4c <HAL_RCC_OscConfig+0x298>)
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	f003 0303 	and.w	r3, r3, #3
 80037da:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0310 	and.w	r3, r3, #16
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	f000 80e4 	beq.w	80039b2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d007      	beq.n	8003800 <HAL_RCC_OscConfig+0x4c>
 80037f0:	69bb      	ldr	r3, [r7, #24]
 80037f2:	2b0c      	cmp	r3, #12
 80037f4:	f040 808b 	bne.w	800390e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	f040 8087 	bne.w	800390e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003800:	4b92      	ldr	r3, [pc, #584]	; (8003a4c <HAL_RCC_OscConfig+0x298>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0302 	and.w	r3, r3, #2
 8003808:	2b00      	cmp	r3, #0
 800380a:	d005      	beq.n	8003818 <HAL_RCC_OscConfig+0x64>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	699b      	ldr	r3, [r3, #24]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d101      	bne.n	8003818 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e3e8      	b.n	8003fea <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a1a      	ldr	r2, [r3, #32]
 800381c:	4b8b      	ldr	r3, [pc, #556]	; (8003a4c <HAL_RCC_OscConfig+0x298>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0308 	and.w	r3, r3, #8
 8003824:	2b00      	cmp	r3, #0
 8003826:	d004      	beq.n	8003832 <HAL_RCC_OscConfig+0x7e>
 8003828:	4b88      	ldr	r3, [pc, #544]	; (8003a4c <HAL_RCC_OscConfig+0x298>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003830:	e005      	b.n	800383e <HAL_RCC_OscConfig+0x8a>
 8003832:	4b86      	ldr	r3, [pc, #536]	; (8003a4c <HAL_RCC_OscConfig+0x298>)
 8003834:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003838:	091b      	lsrs	r3, r3, #4
 800383a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800383e:	4293      	cmp	r3, r2
 8003840:	d223      	bcs.n	800388a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a1b      	ldr	r3, [r3, #32]
 8003846:	4618      	mov	r0, r3
 8003848:	f000 fdac 	bl	80043a4 <RCC_SetFlashLatencyFromMSIRange>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d001      	beq.n	8003856 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e3c9      	b.n	8003fea <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003856:	4b7d      	ldr	r3, [pc, #500]	; (8003a4c <HAL_RCC_OscConfig+0x298>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a7c      	ldr	r2, [pc, #496]	; (8003a4c <HAL_RCC_OscConfig+0x298>)
 800385c:	f043 0308 	orr.w	r3, r3, #8
 8003860:	6013      	str	r3, [r2, #0]
 8003862:	4b7a      	ldr	r3, [pc, #488]	; (8003a4c <HAL_RCC_OscConfig+0x298>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a1b      	ldr	r3, [r3, #32]
 800386e:	4977      	ldr	r1, [pc, #476]	; (8003a4c <HAL_RCC_OscConfig+0x298>)
 8003870:	4313      	orrs	r3, r2
 8003872:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003874:	4b75      	ldr	r3, [pc, #468]	; (8003a4c <HAL_RCC_OscConfig+0x298>)
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	69db      	ldr	r3, [r3, #28]
 8003880:	021b      	lsls	r3, r3, #8
 8003882:	4972      	ldr	r1, [pc, #456]	; (8003a4c <HAL_RCC_OscConfig+0x298>)
 8003884:	4313      	orrs	r3, r2
 8003886:	604b      	str	r3, [r1, #4]
 8003888:	e025      	b.n	80038d6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800388a:	4b70      	ldr	r3, [pc, #448]	; (8003a4c <HAL_RCC_OscConfig+0x298>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a6f      	ldr	r2, [pc, #444]	; (8003a4c <HAL_RCC_OscConfig+0x298>)
 8003890:	f043 0308 	orr.w	r3, r3, #8
 8003894:	6013      	str	r3, [r2, #0]
 8003896:	4b6d      	ldr	r3, [pc, #436]	; (8003a4c <HAL_RCC_OscConfig+0x298>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a1b      	ldr	r3, [r3, #32]
 80038a2:	496a      	ldr	r1, [pc, #424]	; (8003a4c <HAL_RCC_OscConfig+0x298>)
 80038a4:	4313      	orrs	r3, r2
 80038a6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038a8:	4b68      	ldr	r3, [pc, #416]	; (8003a4c <HAL_RCC_OscConfig+0x298>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	69db      	ldr	r3, [r3, #28]
 80038b4:	021b      	lsls	r3, r3, #8
 80038b6:	4965      	ldr	r1, [pc, #404]	; (8003a4c <HAL_RCC_OscConfig+0x298>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d109      	bne.n	80038d6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a1b      	ldr	r3, [r3, #32]
 80038c6:	4618      	mov	r0, r3
 80038c8:	f000 fd6c 	bl	80043a4 <RCC_SetFlashLatencyFromMSIRange>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d001      	beq.n	80038d6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e389      	b.n	8003fea <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80038d6:	f000 fc6f 	bl	80041b8 <HAL_RCC_GetSysClockFreq>
 80038da:	4602      	mov	r2, r0
 80038dc:	4b5b      	ldr	r3, [pc, #364]	; (8003a4c <HAL_RCC_OscConfig+0x298>)
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	091b      	lsrs	r3, r3, #4
 80038e2:	f003 030f 	and.w	r3, r3, #15
 80038e6:	495a      	ldr	r1, [pc, #360]	; (8003a50 <HAL_RCC_OscConfig+0x29c>)
 80038e8:	5ccb      	ldrb	r3, [r1, r3]
 80038ea:	f003 031f 	and.w	r3, r3, #31
 80038ee:	fa22 f303 	lsr.w	r3, r2, r3
 80038f2:	4a58      	ldr	r2, [pc, #352]	; (8003a54 <HAL_RCC_OscConfig+0x2a0>)
 80038f4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80038f6:	4b58      	ldr	r3, [pc, #352]	; (8003a58 <HAL_RCC_OscConfig+0x2a4>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4618      	mov	r0, r3
 80038fc:	f7fe fa5a 	bl	8001db4 <HAL_InitTick>
 8003900:	4603      	mov	r3, r0
 8003902:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003904:	7bfb      	ldrb	r3, [r7, #15]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d052      	beq.n	80039b0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800390a:	7bfb      	ldrb	r3, [r7, #15]
 800390c:	e36d      	b.n	8003fea <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	699b      	ldr	r3, [r3, #24]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d032      	beq.n	800397c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003916:	4b4d      	ldr	r3, [pc, #308]	; (8003a4c <HAL_RCC_OscConfig+0x298>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a4c      	ldr	r2, [pc, #304]	; (8003a4c <HAL_RCC_OscConfig+0x298>)
 800391c:	f043 0301 	orr.w	r3, r3, #1
 8003920:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003922:	f7fe ffab 	bl	800287c <HAL_GetTick>
 8003926:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003928:	e008      	b.n	800393c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800392a:	f7fe ffa7 	bl	800287c <HAL_GetTick>
 800392e:	4602      	mov	r2, r0
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	2b02      	cmp	r3, #2
 8003936:	d901      	bls.n	800393c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003938:	2303      	movs	r3, #3
 800393a:	e356      	b.n	8003fea <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800393c:	4b43      	ldr	r3, [pc, #268]	; (8003a4c <HAL_RCC_OscConfig+0x298>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0302 	and.w	r3, r3, #2
 8003944:	2b00      	cmp	r3, #0
 8003946:	d0f0      	beq.n	800392a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003948:	4b40      	ldr	r3, [pc, #256]	; (8003a4c <HAL_RCC_OscConfig+0x298>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a3f      	ldr	r2, [pc, #252]	; (8003a4c <HAL_RCC_OscConfig+0x298>)
 800394e:	f043 0308 	orr.w	r3, r3, #8
 8003952:	6013      	str	r3, [r2, #0]
 8003954:	4b3d      	ldr	r3, [pc, #244]	; (8003a4c <HAL_RCC_OscConfig+0x298>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a1b      	ldr	r3, [r3, #32]
 8003960:	493a      	ldr	r1, [pc, #232]	; (8003a4c <HAL_RCC_OscConfig+0x298>)
 8003962:	4313      	orrs	r3, r2
 8003964:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003966:	4b39      	ldr	r3, [pc, #228]	; (8003a4c <HAL_RCC_OscConfig+0x298>)
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	69db      	ldr	r3, [r3, #28]
 8003972:	021b      	lsls	r3, r3, #8
 8003974:	4935      	ldr	r1, [pc, #212]	; (8003a4c <HAL_RCC_OscConfig+0x298>)
 8003976:	4313      	orrs	r3, r2
 8003978:	604b      	str	r3, [r1, #4]
 800397a:	e01a      	b.n	80039b2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800397c:	4b33      	ldr	r3, [pc, #204]	; (8003a4c <HAL_RCC_OscConfig+0x298>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a32      	ldr	r2, [pc, #200]	; (8003a4c <HAL_RCC_OscConfig+0x298>)
 8003982:	f023 0301 	bic.w	r3, r3, #1
 8003986:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003988:	f7fe ff78 	bl	800287c <HAL_GetTick>
 800398c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800398e:	e008      	b.n	80039a2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003990:	f7fe ff74 	bl	800287c <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b02      	cmp	r3, #2
 800399c:	d901      	bls.n	80039a2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e323      	b.n	8003fea <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80039a2:	4b2a      	ldr	r3, [pc, #168]	; (8003a4c <HAL_RCC_OscConfig+0x298>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d1f0      	bne.n	8003990 <HAL_RCC_OscConfig+0x1dc>
 80039ae:	e000      	b.n	80039b2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80039b0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d073      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	2b08      	cmp	r3, #8
 80039c2:	d005      	beq.n	80039d0 <HAL_RCC_OscConfig+0x21c>
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	2b0c      	cmp	r3, #12
 80039c8:	d10e      	bne.n	80039e8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	2b03      	cmp	r3, #3
 80039ce:	d10b      	bne.n	80039e8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039d0:	4b1e      	ldr	r3, [pc, #120]	; (8003a4c <HAL_RCC_OscConfig+0x298>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d063      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x2f0>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d15f      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e300      	b.n	8003fea <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039f0:	d106      	bne.n	8003a00 <HAL_RCC_OscConfig+0x24c>
 80039f2:	4b16      	ldr	r3, [pc, #88]	; (8003a4c <HAL_RCC_OscConfig+0x298>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a15      	ldr	r2, [pc, #84]	; (8003a4c <HAL_RCC_OscConfig+0x298>)
 80039f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039fc:	6013      	str	r3, [r2, #0]
 80039fe:	e01d      	b.n	8003a3c <HAL_RCC_OscConfig+0x288>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a08:	d10c      	bne.n	8003a24 <HAL_RCC_OscConfig+0x270>
 8003a0a:	4b10      	ldr	r3, [pc, #64]	; (8003a4c <HAL_RCC_OscConfig+0x298>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a0f      	ldr	r2, [pc, #60]	; (8003a4c <HAL_RCC_OscConfig+0x298>)
 8003a10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a14:	6013      	str	r3, [r2, #0]
 8003a16:	4b0d      	ldr	r3, [pc, #52]	; (8003a4c <HAL_RCC_OscConfig+0x298>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a0c      	ldr	r2, [pc, #48]	; (8003a4c <HAL_RCC_OscConfig+0x298>)
 8003a1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a20:	6013      	str	r3, [r2, #0]
 8003a22:	e00b      	b.n	8003a3c <HAL_RCC_OscConfig+0x288>
 8003a24:	4b09      	ldr	r3, [pc, #36]	; (8003a4c <HAL_RCC_OscConfig+0x298>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a08      	ldr	r2, [pc, #32]	; (8003a4c <HAL_RCC_OscConfig+0x298>)
 8003a2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a2e:	6013      	str	r3, [r2, #0]
 8003a30:	4b06      	ldr	r3, [pc, #24]	; (8003a4c <HAL_RCC_OscConfig+0x298>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a05      	ldr	r2, [pc, #20]	; (8003a4c <HAL_RCC_OscConfig+0x298>)
 8003a36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d01b      	beq.n	8003a7c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a44:	f7fe ff1a 	bl	800287c <HAL_GetTick>
 8003a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a4a:	e010      	b.n	8003a6e <HAL_RCC_OscConfig+0x2ba>
 8003a4c:	40021000 	.word	0x40021000
 8003a50:	08009cc0 	.word	0x08009cc0
 8003a54:	20000018 	.word	0x20000018
 8003a58:	20000020 	.word	0x20000020
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a5c:	f7fe ff0e 	bl	800287c <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	2b64      	cmp	r3, #100	; 0x64
 8003a68:	d901      	bls.n	8003a6e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e2bd      	b.n	8003fea <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a6e:	4baf      	ldr	r3, [pc, #700]	; (8003d2c <HAL_RCC_OscConfig+0x578>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d0f0      	beq.n	8003a5c <HAL_RCC_OscConfig+0x2a8>
 8003a7a:	e014      	b.n	8003aa6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a7c:	f7fe fefe 	bl	800287c <HAL_GetTick>
 8003a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a82:	e008      	b.n	8003a96 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a84:	f7fe fefa 	bl	800287c <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	2b64      	cmp	r3, #100	; 0x64
 8003a90:	d901      	bls.n	8003a96 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e2a9      	b.n	8003fea <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a96:	4ba5      	ldr	r3, [pc, #660]	; (8003d2c <HAL_RCC_OscConfig+0x578>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d1f0      	bne.n	8003a84 <HAL_RCC_OscConfig+0x2d0>
 8003aa2:	e000      	b.n	8003aa6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0302 	and.w	r3, r3, #2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d060      	beq.n	8003b74 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	2b04      	cmp	r3, #4
 8003ab6:	d005      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x310>
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	2b0c      	cmp	r3, #12
 8003abc:	d119      	bne.n	8003af2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d116      	bne.n	8003af2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ac4:	4b99      	ldr	r3, [pc, #612]	; (8003d2c <HAL_RCC_OscConfig+0x578>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d005      	beq.n	8003adc <HAL_RCC_OscConfig+0x328>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d101      	bne.n	8003adc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e286      	b.n	8003fea <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003adc:	4b93      	ldr	r3, [pc, #588]	; (8003d2c <HAL_RCC_OscConfig+0x578>)
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	691b      	ldr	r3, [r3, #16]
 8003ae8:	061b      	lsls	r3, r3, #24
 8003aea:	4990      	ldr	r1, [pc, #576]	; (8003d2c <HAL_RCC_OscConfig+0x578>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003af0:	e040      	b.n	8003b74 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d023      	beq.n	8003b42 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003afa:	4b8c      	ldr	r3, [pc, #560]	; (8003d2c <HAL_RCC_OscConfig+0x578>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a8b      	ldr	r2, [pc, #556]	; (8003d2c <HAL_RCC_OscConfig+0x578>)
 8003b00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b06:	f7fe feb9 	bl	800287c <HAL_GetTick>
 8003b0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b0c:	e008      	b.n	8003b20 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b0e:	f7fe feb5 	bl	800287c <HAL_GetTick>
 8003b12:	4602      	mov	r2, r0
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d901      	bls.n	8003b20 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	e264      	b.n	8003fea <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b20:	4b82      	ldr	r3, [pc, #520]	; (8003d2c <HAL_RCC_OscConfig+0x578>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d0f0      	beq.n	8003b0e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b2c:	4b7f      	ldr	r3, [pc, #508]	; (8003d2c <HAL_RCC_OscConfig+0x578>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	691b      	ldr	r3, [r3, #16]
 8003b38:	061b      	lsls	r3, r3, #24
 8003b3a:	497c      	ldr	r1, [pc, #496]	; (8003d2c <HAL_RCC_OscConfig+0x578>)
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	604b      	str	r3, [r1, #4]
 8003b40:	e018      	b.n	8003b74 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b42:	4b7a      	ldr	r3, [pc, #488]	; (8003d2c <HAL_RCC_OscConfig+0x578>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a79      	ldr	r2, [pc, #484]	; (8003d2c <HAL_RCC_OscConfig+0x578>)
 8003b48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b4e:	f7fe fe95 	bl	800287c <HAL_GetTick>
 8003b52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b54:	e008      	b.n	8003b68 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b56:	f7fe fe91 	bl	800287c <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d901      	bls.n	8003b68 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e240      	b.n	8003fea <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b68:	4b70      	ldr	r3, [pc, #448]	; (8003d2c <HAL_RCC_OscConfig+0x578>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d1f0      	bne.n	8003b56 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0308 	and.w	r3, r3, #8
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d03c      	beq.n	8003bfa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	695b      	ldr	r3, [r3, #20]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d01c      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b88:	4b68      	ldr	r3, [pc, #416]	; (8003d2c <HAL_RCC_OscConfig+0x578>)
 8003b8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b8e:	4a67      	ldr	r2, [pc, #412]	; (8003d2c <HAL_RCC_OscConfig+0x578>)
 8003b90:	f043 0301 	orr.w	r3, r3, #1
 8003b94:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b98:	f7fe fe70 	bl	800287c <HAL_GetTick>
 8003b9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b9e:	e008      	b.n	8003bb2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ba0:	f7fe fe6c 	bl	800287c <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d901      	bls.n	8003bb2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e21b      	b.n	8003fea <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003bb2:	4b5e      	ldr	r3, [pc, #376]	; (8003d2c <HAL_RCC_OscConfig+0x578>)
 8003bb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bb8:	f003 0302 	and.w	r3, r3, #2
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d0ef      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x3ec>
 8003bc0:	e01b      	b.n	8003bfa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bc2:	4b5a      	ldr	r3, [pc, #360]	; (8003d2c <HAL_RCC_OscConfig+0x578>)
 8003bc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bc8:	4a58      	ldr	r2, [pc, #352]	; (8003d2c <HAL_RCC_OscConfig+0x578>)
 8003bca:	f023 0301 	bic.w	r3, r3, #1
 8003bce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bd2:	f7fe fe53 	bl	800287c <HAL_GetTick>
 8003bd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003bd8:	e008      	b.n	8003bec <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bda:	f7fe fe4f 	bl	800287c <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d901      	bls.n	8003bec <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003be8:	2303      	movs	r3, #3
 8003bea:	e1fe      	b.n	8003fea <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003bec:	4b4f      	ldr	r3, [pc, #316]	; (8003d2c <HAL_RCC_OscConfig+0x578>)
 8003bee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bf2:	f003 0302 	and.w	r3, r3, #2
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d1ef      	bne.n	8003bda <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0304 	and.w	r3, r3, #4
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	f000 80a6 	beq.w	8003d54 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003c0c:	4b47      	ldr	r3, [pc, #284]	; (8003d2c <HAL_RCC_OscConfig+0x578>)
 8003c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d10d      	bne.n	8003c34 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c18:	4b44      	ldr	r3, [pc, #272]	; (8003d2c <HAL_RCC_OscConfig+0x578>)
 8003c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c1c:	4a43      	ldr	r2, [pc, #268]	; (8003d2c <HAL_RCC_OscConfig+0x578>)
 8003c1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c22:	6593      	str	r3, [r2, #88]	; 0x58
 8003c24:	4b41      	ldr	r3, [pc, #260]	; (8003d2c <HAL_RCC_OscConfig+0x578>)
 8003c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c2c:	60bb      	str	r3, [r7, #8]
 8003c2e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c30:	2301      	movs	r3, #1
 8003c32:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c34:	4b3e      	ldr	r3, [pc, #248]	; (8003d30 <HAL_RCC_OscConfig+0x57c>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d118      	bne.n	8003c72 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c40:	4b3b      	ldr	r3, [pc, #236]	; (8003d30 <HAL_RCC_OscConfig+0x57c>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a3a      	ldr	r2, [pc, #232]	; (8003d30 <HAL_RCC_OscConfig+0x57c>)
 8003c46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c4a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c4c:	f7fe fe16 	bl	800287c <HAL_GetTick>
 8003c50:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c52:	e008      	b.n	8003c66 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c54:	f7fe fe12 	bl	800287c <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d901      	bls.n	8003c66 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e1c1      	b.n	8003fea <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c66:	4b32      	ldr	r3, [pc, #200]	; (8003d30 <HAL_RCC_OscConfig+0x57c>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d0f0      	beq.n	8003c54 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d108      	bne.n	8003c8c <HAL_RCC_OscConfig+0x4d8>
 8003c7a:	4b2c      	ldr	r3, [pc, #176]	; (8003d2c <HAL_RCC_OscConfig+0x578>)
 8003c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c80:	4a2a      	ldr	r2, [pc, #168]	; (8003d2c <HAL_RCC_OscConfig+0x578>)
 8003c82:	f043 0301 	orr.w	r3, r3, #1
 8003c86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c8a:	e024      	b.n	8003cd6 <HAL_RCC_OscConfig+0x522>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	2b05      	cmp	r3, #5
 8003c92:	d110      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x502>
 8003c94:	4b25      	ldr	r3, [pc, #148]	; (8003d2c <HAL_RCC_OscConfig+0x578>)
 8003c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c9a:	4a24      	ldr	r2, [pc, #144]	; (8003d2c <HAL_RCC_OscConfig+0x578>)
 8003c9c:	f043 0304 	orr.w	r3, r3, #4
 8003ca0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ca4:	4b21      	ldr	r3, [pc, #132]	; (8003d2c <HAL_RCC_OscConfig+0x578>)
 8003ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003caa:	4a20      	ldr	r2, [pc, #128]	; (8003d2c <HAL_RCC_OscConfig+0x578>)
 8003cac:	f043 0301 	orr.w	r3, r3, #1
 8003cb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cb4:	e00f      	b.n	8003cd6 <HAL_RCC_OscConfig+0x522>
 8003cb6:	4b1d      	ldr	r3, [pc, #116]	; (8003d2c <HAL_RCC_OscConfig+0x578>)
 8003cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cbc:	4a1b      	ldr	r2, [pc, #108]	; (8003d2c <HAL_RCC_OscConfig+0x578>)
 8003cbe:	f023 0301 	bic.w	r3, r3, #1
 8003cc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cc6:	4b19      	ldr	r3, [pc, #100]	; (8003d2c <HAL_RCC_OscConfig+0x578>)
 8003cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ccc:	4a17      	ldr	r2, [pc, #92]	; (8003d2c <HAL_RCC_OscConfig+0x578>)
 8003cce:	f023 0304 	bic.w	r3, r3, #4
 8003cd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d016      	beq.n	8003d0c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cde:	f7fe fdcd 	bl	800287c <HAL_GetTick>
 8003ce2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ce4:	e00a      	b.n	8003cfc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ce6:	f7fe fdc9 	bl	800287c <HAL_GetTick>
 8003cea:	4602      	mov	r2, r0
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d901      	bls.n	8003cfc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	e176      	b.n	8003fea <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cfc:	4b0b      	ldr	r3, [pc, #44]	; (8003d2c <HAL_RCC_OscConfig+0x578>)
 8003cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d0ed      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x532>
 8003d0a:	e01a      	b.n	8003d42 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d0c:	f7fe fdb6 	bl	800287c <HAL_GetTick>
 8003d10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d12:	e00f      	b.n	8003d34 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d14:	f7fe fdb2 	bl	800287c <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d906      	bls.n	8003d34 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e15f      	b.n	8003fea <HAL_RCC_OscConfig+0x836>
 8003d2a:	bf00      	nop
 8003d2c:	40021000 	.word	0x40021000
 8003d30:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d34:	4baa      	ldr	r3, [pc, #680]	; (8003fe0 <HAL_RCC_OscConfig+0x82c>)
 8003d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d3a:	f003 0302 	and.w	r3, r3, #2
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d1e8      	bne.n	8003d14 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d42:	7ffb      	ldrb	r3, [r7, #31]
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d105      	bne.n	8003d54 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d48:	4ba5      	ldr	r3, [pc, #660]	; (8003fe0 <HAL_RCC_OscConfig+0x82c>)
 8003d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d4c:	4aa4      	ldr	r2, [pc, #656]	; (8003fe0 <HAL_RCC_OscConfig+0x82c>)
 8003d4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d52:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0320 	and.w	r3, r3, #32
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d03c      	beq.n	8003dda <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d01c      	beq.n	8003da2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d68:	4b9d      	ldr	r3, [pc, #628]	; (8003fe0 <HAL_RCC_OscConfig+0x82c>)
 8003d6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d6e:	4a9c      	ldr	r2, [pc, #624]	; (8003fe0 <HAL_RCC_OscConfig+0x82c>)
 8003d70:	f043 0301 	orr.w	r3, r3, #1
 8003d74:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d78:	f7fe fd80 	bl	800287c <HAL_GetTick>
 8003d7c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d7e:	e008      	b.n	8003d92 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d80:	f7fe fd7c 	bl	800287c <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d901      	bls.n	8003d92 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e12b      	b.n	8003fea <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d92:	4b93      	ldr	r3, [pc, #588]	; (8003fe0 <HAL_RCC_OscConfig+0x82c>)
 8003d94:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d98:	f003 0302 	and.w	r3, r3, #2
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d0ef      	beq.n	8003d80 <HAL_RCC_OscConfig+0x5cc>
 8003da0:	e01b      	b.n	8003dda <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003da2:	4b8f      	ldr	r3, [pc, #572]	; (8003fe0 <HAL_RCC_OscConfig+0x82c>)
 8003da4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003da8:	4a8d      	ldr	r2, [pc, #564]	; (8003fe0 <HAL_RCC_OscConfig+0x82c>)
 8003daa:	f023 0301 	bic.w	r3, r3, #1
 8003dae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003db2:	f7fe fd63 	bl	800287c <HAL_GetTick>
 8003db6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003db8:	e008      	b.n	8003dcc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003dba:	f7fe fd5f 	bl	800287c <HAL_GetTick>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d901      	bls.n	8003dcc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	e10e      	b.n	8003fea <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003dcc:	4b84      	ldr	r3, [pc, #528]	; (8003fe0 <HAL_RCC_OscConfig+0x82c>)
 8003dce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003dd2:	f003 0302 	and.w	r3, r3, #2
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d1ef      	bne.n	8003dba <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	f000 8102 	beq.w	8003fe8 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	f040 80c5 	bne.w	8003f78 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003dee:	4b7c      	ldr	r3, [pc, #496]	; (8003fe0 <HAL_RCC_OscConfig+0x82c>)
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	f003 0203 	and.w	r2, r3, #3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d12c      	bne.n	8003e5c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0c:	3b01      	subs	r3, #1
 8003e0e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d123      	bne.n	8003e5c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e1e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d11b      	bne.n	8003e5c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e2e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d113      	bne.n	8003e5c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e3e:	085b      	lsrs	r3, r3, #1
 8003e40:	3b01      	subs	r3, #1
 8003e42:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d109      	bne.n	8003e5c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e52:	085b      	lsrs	r3, r3, #1
 8003e54:	3b01      	subs	r3, #1
 8003e56:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d067      	beq.n	8003f2c <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	2b0c      	cmp	r3, #12
 8003e60:	d062      	beq.n	8003f28 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003e62:	4b5f      	ldr	r3, [pc, #380]	; (8003fe0 <HAL_RCC_OscConfig+0x82c>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d001      	beq.n	8003e72 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e0bb      	b.n	8003fea <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003e72:	4b5b      	ldr	r3, [pc, #364]	; (8003fe0 <HAL_RCC_OscConfig+0x82c>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a5a      	ldr	r2, [pc, #360]	; (8003fe0 <HAL_RCC_OscConfig+0x82c>)
 8003e78:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e7c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e7e:	f7fe fcfd 	bl	800287c <HAL_GetTick>
 8003e82:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e84:	e008      	b.n	8003e98 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e86:	f7fe fcf9 	bl	800287c <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d901      	bls.n	8003e98 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e0a8      	b.n	8003fea <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e98:	4b51      	ldr	r3, [pc, #324]	; (8003fe0 <HAL_RCC_OscConfig+0x82c>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d1f0      	bne.n	8003e86 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ea4:	4b4e      	ldr	r3, [pc, #312]	; (8003fe0 <HAL_RCC_OscConfig+0x82c>)
 8003ea6:	68da      	ldr	r2, [r3, #12]
 8003ea8:	4b4e      	ldr	r3, [pc, #312]	; (8003fe4 <HAL_RCC_OscConfig+0x830>)
 8003eaa:	4013      	ands	r3, r2
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003eb4:	3a01      	subs	r2, #1
 8003eb6:	0112      	lsls	r2, r2, #4
 8003eb8:	4311      	orrs	r1, r2
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ebe:	0212      	lsls	r2, r2, #8
 8003ec0:	4311      	orrs	r1, r2
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003ec6:	0852      	lsrs	r2, r2, #1
 8003ec8:	3a01      	subs	r2, #1
 8003eca:	0552      	lsls	r2, r2, #21
 8003ecc:	4311      	orrs	r1, r2
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003ed2:	0852      	lsrs	r2, r2, #1
 8003ed4:	3a01      	subs	r2, #1
 8003ed6:	0652      	lsls	r2, r2, #25
 8003ed8:	4311      	orrs	r1, r2
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ede:	06d2      	lsls	r2, r2, #27
 8003ee0:	430a      	orrs	r2, r1
 8003ee2:	493f      	ldr	r1, [pc, #252]	; (8003fe0 <HAL_RCC_OscConfig+0x82c>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003ee8:	4b3d      	ldr	r3, [pc, #244]	; (8003fe0 <HAL_RCC_OscConfig+0x82c>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a3c      	ldr	r2, [pc, #240]	; (8003fe0 <HAL_RCC_OscConfig+0x82c>)
 8003eee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ef2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ef4:	4b3a      	ldr	r3, [pc, #232]	; (8003fe0 <HAL_RCC_OscConfig+0x82c>)
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	4a39      	ldr	r2, [pc, #228]	; (8003fe0 <HAL_RCC_OscConfig+0x82c>)
 8003efa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003efe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f00:	f7fe fcbc 	bl	800287c <HAL_GetTick>
 8003f04:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f06:	e008      	b.n	8003f1a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f08:	f7fe fcb8 	bl	800287c <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d901      	bls.n	8003f1a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e067      	b.n	8003fea <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f1a:	4b31      	ldr	r3, [pc, #196]	; (8003fe0 <HAL_RCC_OscConfig+0x82c>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d0f0      	beq.n	8003f08 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f26:	e05f      	b.n	8003fe8 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e05e      	b.n	8003fea <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f2c:	4b2c      	ldr	r3, [pc, #176]	; (8003fe0 <HAL_RCC_OscConfig+0x82c>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d157      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003f38:	4b29      	ldr	r3, [pc, #164]	; (8003fe0 <HAL_RCC_OscConfig+0x82c>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a28      	ldr	r2, [pc, #160]	; (8003fe0 <HAL_RCC_OscConfig+0x82c>)
 8003f3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f42:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f44:	4b26      	ldr	r3, [pc, #152]	; (8003fe0 <HAL_RCC_OscConfig+0x82c>)
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	4a25      	ldr	r2, [pc, #148]	; (8003fe0 <HAL_RCC_OscConfig+0x82c>)
 8003f4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f4e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003f50:	f7fe fc94 	bl	800287c <HAL_GetTick>
 8003f54:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f56:	e008      	b.n	8003f6a <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f58:	f7fe fc90 	bl	800287c <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d901      	bls.n	8003f6a <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e03f      	b.n	8003fea <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f6a:	4b1d      	ldr	r3, [pc, #116]	; (8003fe0 <HAL_RCC_OscConfig+0x82c>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d0f0      	beq.n	8003f58 <HAL_RCC_OscConfig+0x7a4>
 8003f76:	e037      	b.n	8003fe8 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	2b0c      	cmp	r3, #12
 8003f7c:	d02d      	beq.n	8003fda <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f7e:	4b18      	ldr	r3, [pc, #96]	; (8003fe0 <HAL_RCC_OscConfig+0x82c>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a17      	ldr	r2, [pc, #92]	; (8003fe0 <HAL_RCC_OscConfig+0x82c>)
 8003f84:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f88:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f8a:	4b15      	ldr	r3, [pc, #84]	; (8003fe0 <HAL_RCC_OscConfig+0x82c>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d105      	bne.n	8003fa2 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003f96:	4b12      	ldr	r3, [pc, #72]	; (8003fe0 <HAL_RCC_OscConfig+0x82c>)
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	4a11      	ldr	r2, [pc, #68]	; (8003fe0 <HAL_RCC_OscConfig+0x82c>)
 8003f9c:	f023 0303 	bic.w	r3, r3, #3
 8003fa0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003fa2:	4b0f      	ldr	r3, [pc, #60]	; (8003fe0 <HAL_RCC_OscConfig+0x82c>)
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	4a0e      	ldr	r2, [pc, #56]	; (8003fe0 <HAL_RCC_OscConfig+0x82c>)
 8003fa8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003fac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fb0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fb2:	f7fe fc63 	bl	800287c <HAL_GetTick>
 8003fb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fb8:	e008      	b.n	8003fcc <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fba:	f7fe fc5f 	bl	800287c <HAL_GetTick>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d901      	bls.n	8003fcc <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8003fc8:	2303      	movs	r3, #3
 8003fca:	e00e      	b.n	8003fea <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fcc:	4b04      	ldr	r3, [pc, #16]	; (8003fe0 <HAL_RCC_OscConfig+0x82c>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d1f0      	bne.n	8003fba <HAL_RCC_OscConfig+0x806>
 8003fd8:	e006      	b.n	8003fe8 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e005      	b.n	8003fea <HAL_RCC_OscConfig+0x836>
 8003fde:	bf00      	nop
 8003fe0:	40021000 	.word	0x40021000
 8003fe4:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3720      	adds	r7, #32
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop

08003ff4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d101      	bne.n	8004008 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e0c8      	b.n	800419a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004008:	4b66      	ldr	r3, [pc, #408]	; (80041a4 <HAL_RCC_ClockConfig+0x1b0>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0307 	and.w	r3, r3, #7
 8004010:	683a      	ldr	r2, [r7, #0]
 8004012:	429a      	cmp	r2, r3
 8004014:	d910      	bls.n	8004038 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004016:	4b63      	ldr	r3, [pc, #396]	; (80041a4 <HAL_RCC_ClockConfig+0x1b0>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f023 0207 	bic.w	r2, r3, #7
 800401e:	4961      	ldr	r1, [pc, #388]	; (80041a4 <HAL_RCC_ClockConfig+0x1b0>)
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	4313      	orrs	r3, r2
 8004024:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004026:	4b5f      	ldr	r3, [pc, #380]	; (80041a4 <HAL_RCC_ClockConfig+0x1b0>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0307 	and.w	r3, r3, #7
 800402e:	683a      	ldr	r2, [r7, #0]
 8004030:	429a      	cmp	r2, r3
 8004032:	d001      	beq.n	8004038 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e0b0      	b.n	800419a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0301 	and.w	r3, r3, #1
 8004040:	2b00      	cmp	r3, #0
 8004042:	d04c      	beq.n	80040de <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	2b03      	cmp	r3, #3
 800404a:	d107      	bne.n	800405c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800404c:	4b56      	ldr	r3, [pc, #344]	; (80041a8 <HAL_RCC_ClockConfig+0x1b4>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d121      	bne.n	800409c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e09e      	b.n	800419a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	2b02      	cmp	r3, #2
 8004062:	d107      	bne.n	8004074 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004064:	4b50      	ldr	r3, [pc, #320]	; (80041a8 <HAL_RCC_ClockConfig+0x1b4>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800406c:	2b00      	cmp	r3, #0
 800406e:	d115      	bne.n	800409c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e092      	b.n	800419a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d107      	bne.n	800408c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800407c:	4b4a      	ldr	r3, [pc, #296]	; (80041a8 <HAL_RCC_ClockConfig+0x1b4>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0302 	and.w	r3, r3, #2
 8004084:	2b00      	cmp	r3, #0
 8004086:	d109      	bne.n	800409c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e086      	b.n	800419a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800408c:	4b46      	ldr	r3, [pc, #280]	; (80041a8 <HAL_RCC_ClockConfig+0x1b4>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004094:	2b00      	cmp	r3, #0
 8004096:	d101      	bne.n	800409c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e07e      	b.n	800419a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800409c:	4b42      	ldr	r3, [pc, #264]	; (80041a8 <HAL_RCC_ClockConfig+0x1b4>)
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	f023 0203 	bic.w	r2, r3, #3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	493f      	ldr	r1, [pc, #252]	; (80041a8 <HAL_RCC_ClockConfig+0x1b4>)
 80040aa:	4313      	orrs	r3, r2
 80040ac:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040ae:	f7fe fbe5 	bl	800287c <HAL_GetTick>
 80040b2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040b4:	e00a      	b.n	80040cc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040b6:	f7fe fbe1 	bl	800287c <HAL_GetTick>
 80040ba:	4602      	mov	r2, r0
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d901      	bls.n	80040cc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e066      	b.n	800419a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040cc:	4b36      	ldr	r3, [pc, #216]	; (80041a8 <HAL_RCC_ClockConfig+0x1b4>)
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	f003 020c 	and.w	r2, r3, #12
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	429a      	cmp	r2, r3
 80040dc:	d1eb      	bne.n	80040b6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0302 	and.w	r3, r3, #2
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d008      	beq.n	80040fc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040ea:	4b2f      	ldr	r3, [pc, #188]	; (80041a8 <HAL_RCC_ClockConfig+0x1b4>)
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	492c      	ldr	r1, [pc, #176]	; (80041a8 <HAL_RCC_ClockConfig+0x1b4>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040fc:	4b29      	ldr	r3, [pc, #164]	; (80041a4 <HAL_RCC_ClockConfig+0x1b0>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0307 	and.w	r3, r3, #7
 8004104:	683a      	ldr	r2, [r7, #0]
 8004106:	429a      	cmp	r2, r3
 8004108:	d210      	bcs.n	800412c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800410a:	4b26      	ldr	r3, [pc, #152]	; (80041a4 <HAL_RCC_ClockConfig+0x1b0>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f023 0207 	bic.w	r2, r3, #7
 8004112:	4924      	ldr	r1, [pc, #144]	; (80041a4 <HAL_RCC_ClockConfig+0x1b0>)
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	4313      	orrs	r3, r2
 8004118:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800411a:	4b22      	ldr	r3, [pc, #136]	; (80041a4 <HAL_RCC_ClockConfig+0x1b0>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0307 	and.w	r3, r3, #7
 8004122:	683a      	ldr	r2, [r7, #0]
 8004124:	429a      	cmp	r2, r3
 8004126:	d001      	beq.n	800412c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e036      	b.n	800419a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0304 	and.w	r3, r3, #4
 8004134:	2b00      	cmp	r3, #0
 8004136:	d008      	beq.n	800414a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004138:	4b1b      	ldr	r3, [pc, #108]	; (80041a8 <HAL_RCC_ClockConfig+0x1b4>)
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	4918      	ldr	r1, [pc, #96]	; (80041a8 <HAL_RCC_ClockConfig+0x1b4>)
 8004146:	4313      	orrs	r3, r2
 8004148:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0308 	and.w	r3, r3, #8
 8004152:	2b00      	cmp	r3, #0
 8004154:	d009      	beq.n	800416a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004156:	4b14      	ldr	r3, [pc, #80]	; (80041a8 <HAL_RCC_ClockConfig+0x1b4>)
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	00db      	lsls	r3, r3, #3
 8004164:	4910      	ldr	r1, [pc, #64]	; (80041a8 <HAL_RCC_ClockConfig+0x1b4>)
 8004166:	4313      	orrs	r3, r2
 8004168:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800416a:	f000 f825 	bl	80041b8 <HAL_RCC_GetSysClockFreq>
 800416e:	4602      	mov	r2, r0
 8004170:	4b0d      	ldr	r3, [pc, #52]	; (80041a8 <HAL_RCC_ClockConfig+0x1b4>)
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	091b      	lsrs	r3, r3, #4
 8004176:	f003 030f 	and.w	r3, r3, #15
 800417a:	490c      	ldr	r1, [pc, #48]	; (80041ac <HAL_RCC_ClockConfig+0x1b8>)
 800417c:	5ccb      	ldrb	r3, [r1, r3]
 800417e:	f003 031f 	and.w	r3, r3, #31
 8004182:	fa22 f303 	lsr.w	r3, r2, r3
 8004186:	4a0a      	ldr	r2, [pc, #40]	; (80041b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004188:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800418a:	4b0a      	ldr	r3, [pc, #40]	; (80041b4 <HAL_RCC_ClockConfig+0x1c0>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4618      	mov	r0, r3
 8004190:	f7fd fe10 	bl	8001db4 <HAL_InitTick>
 8004194:	4603      	mov	r3, r0
 8004196:	72fb      	strb	r3, [r7, #11]

  return status;
 8004198:	7afb      	ldrb	r3, [r7, #11]
}
 800419a:	4618      	mov	r0, r3
 800419c:	3710      	adds	r7, #16
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	40022000 	.word	0x40022000
 80041a8:	40021000 	.word	0x40021000
 80041ac:	08009cc0 	.word	0x08009cc0
 80041b0:	20000018 	.word	0x20000018
 80041b4:	20000020 	.word	0x20000020

080041b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b089      	sub	sp, #36	; 0x24
 80041bc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80041be:	2300      	movs	r3, #0
 80041c0:	61fb      	str	r3, [r7, #28]
 80041c2:	2300      	movs	r3, #0
 80041c4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041c6:	4b3e      	ldr	r3, [pc, #248]	; (80042c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f003 030c 	and.w	r3, r3, #12
 80041ce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041d0:	4b3b      	ldr	r3, [pc, #236]	; (80042c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	f003 0303 	and.w	r3, r3, #3
 80041d8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d005      	beq.n	80041ec <HAL_RCC_GetSysClockFreq+0x34>
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	2b0c      	cmp	r3, #12
 80041e4:	d121      	bne.n	800422a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d11e      	bne.n	800422a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80041ec:	4b34      	ldr	r3, [pc, #208]	; (80042c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0308 	and.w	r3, r3, #8
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d107      	bne.n	8004208 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80041f8:	4b31      	ldr	r3, [pc, #196]	; (80042c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80041fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041fe:	0a1b      	lsrs	r3, r3, #8
 8004200:	f003 030f 	and.w	r3, r3, #15
 8004204:	61fb      	str	r3, [r7, #28]
 8004206:	e005      	b.n	8004214 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004208:	4b2d      	ldr	r3, [pc, #180]	; (80042c0 <HAL_RCC_GetSysClockFreq+0x108>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	091b      	lsrs	r3, r3, #4
 800420e:	f003 030f 	and.w	r3, r3, #15
 8004212:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004214:	4a2b      	ldr	r2, [pc, #172]	; (80042c4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800421c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d10d      	bne.n	8004240 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004228:	e00a      	b.n	8004240 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	2b04      	cmp	r3, #4
 800422e:	d102      	bne.n	8004236 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004230:	4b25      	ldr	r3, [pc, #148]	; (80042c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004232:	61bb      	str	r3, [r7, #24]
 8004234:	e004      	b.n	8004240 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	2b08      	cmp	r3, #8
 800423a:	d101      	bne.n	8004240 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800423c:	4b23      	ldr	r3, [pc, #140]	; (80042cc <HAL_RCC_GetSysClockFreq+0x114>)
 800423e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	2b0c      	cmp	r3, #12
 8004244:	d134      	bne.n	80042b0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004246:	4b1e      	ldr	r3, [pc, #120]	; (80042c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	f003 0303 	and.w	r3, r3, #3
 800424e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	2b02      	cmp	r3, #2
 8004254:	d003      	beq.n	800425e <HAL_RCC_GetSysClockFreq+0xa6>
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	2b03      	cmp	r3, #3
 800425a:	d003      	beq.n	8004264 <HAL_RCC_GetSysClockFreq+0xac>
 800425c:	e005      	b.n	800426a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800425e:	4b1a      	ldr	r3, [pc, #104]	; (80042c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004260:	617b      	str	r3, [r7, #20]
      break;
 8004262:	e005      	b.n	8004270 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004264:	4b19      	ldr	r3, [pc, #100]	; (80042cc <HAL_RCC_GetSysClockFreq+0x114>)
 8004266:	617b      	str	r3, [r7, #20]
      break;
 8004268:	e002      	b.n	8004270 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	617b      	str	r3, [r7, #20]
      break;
 800426e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004270:	4b13      	ldr	r3, [pc, #76]	; (80042c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	091b      	lsrs	r3, r3, #4
 8004276:	f003 0307 	and.w	r3, r3, #7
 800427a:	3301      	adds	r3, #1
 800427c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800427e:	4b10      	ldr	r3, [pc, #64]	; (80042c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	0a1b      	lsrs	r3, r3, #8
 8004284:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004288:	697a      	ldr	r2, [r7, #20]
 800428a:	fb02 f203 	mul.w	r2, r2, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	fbb2 f3f3 	udiv	r3, r2, r3
 8004294:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004296:	4b0a      	ldr	r3, [pc, #40]	; (80042c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	0e5b      	lsrs	r3, r3, #25
 800429c:	f003 0303 	and.w	r3, r3, #3
 80042a0:	3301      	adds	r3, #1
 80042a2:	005b      	lsls	r3, r3, #1
 80042a4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80042a6:	697a      	ldr	r2, [r7, #20]
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80042b0:	69bb      	ldr	r3, [r7, #24]
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3724      	adds	r7, #36	; 0x24
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop
 80042c0:	40021000 	.word	0x40021000
 80042c4:	08009cd8 	.word	0x08009cd8
 80042c8:	00f42400 	.word	0x00f42400
 80042cc:	007a1200 	.word	0x007a1200

080042d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042d0:	b480      	push	{r7}
 80042d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042d4:	4b03      	ldr	r3, [pc, #12]	; (80042e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80042d6:	681b      	ldr	r3, [r3, #0]
}
 80042d8:	4618      	mov	r0, r3
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	20000018 	.word	0x20000018

080042e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80042ec:	f7ff fff0 	bl	80042d0 <HAL_RCC_GetHCLKFreq>
 80042f0:	4602      	mov	r2, r0
 80042f2:	4b06      	ldr	r3, [pc, #24]	; (800430c <HAL_RCC_GetPCLK1Freq+0x24>)
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	0a1b      	lsrs	r3, r3, #8
 80042f8:	f003 0307 	and.w	r3, r3, #7
 80042fc:	4904      	ldr	r1, [pc, #16]	; (8004310 <HAL_RCC_GetPCLK1Freq+0x28>)
 80042fe:	5ccb      	ldrb	r3, [r1, r3]
 8004300:	f003 031f 	and.w	r3, r3, #31
 8004304:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004308:	4618      	mov	r0, r3
 800430a:	bd80      	pop	{r7, pc}
 800430c:	40021000 	.word	0x40021000
 8004310:	08009cd0 	.word	0x08009cd0

08004314 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004318:	f7ff ffda 	bl	80042d0 <HAL_RCC_GetHCLKFreq>
 800431c:	4602      	mov	r2, r0
 800431e:	4b06      	ldr	r3, [pc, #24]	; (8004338 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	0adb      	lsrs	r3, r3, #11
 8004324:	f003 0307 	and.w	r3, r3, #7
 8004328:	4904      	ldr	r1, [pc, #16]	; (800433c <HAL_RCC_GetPCLK2Freq+0x28>)
 800432a:	5ccb      	ldrb	r3, [r1, r3]
 800432c:	f003 031f 	and.w	r3, r3, #31
 8004330:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004334:	4618      	mov	r0, r3
 8004336:	bd80      	pop	{r7, pc}
 8004338:	40021000 	.word	0x40021000
 800433c:	08009cd0 	.word	0x08009cd0

08004340 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	220f      	movs	r2, #15
 800434e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004350:	4b12      	ldr	r3, [pc, #72]	; (800439c <HAL_RCC_GetClockConfig+0x5c>)
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	f003 0203 	and.w	r2, r3, #3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800435c:	4b0f      	ldr	r3, [pc, #60]	; (800439c <HAL_RCC_GetClockConfig+0x5c>)
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004368:	4b0c      	ldr	r3, [pc, #48]	; (800439c <HAL_RCC_GetClockConfig+0x5c>)
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004374:	4b09      	ldr	r3, [pc, #36]	; (800439c <HAL_RCC_GetClockConfig+0x5c>)
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	08db      	lsrs	r3, r3, #3
 800437a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004382:	4b07      	ldr	r3, [pc, #28]	; (80043a0 <HAL_RCC_GetClockConfig+0x60>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 0207 	and.w	r2, r3, #7
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	601a      	str	r2, [r3, #0]
}
 800438e:	bf00      	nop
 8004390:	370c      	adds	r7, #12
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	40021000 	.word	0x40021000
 80043a0:	40022000 	.word	0x40022000

080043a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b086      	sub	sp, #24
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80043ac:	2300      	movs	r3, #0
 80043ae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80043b0:	4b2a      	ldr	r3, [pc, #168]	; (800445c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d003      	beq.n	80043c4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80043bc:	f7ff f996 	bl	80036ec <HAL_PWREx_GetVoltageRange>
 80043c0:	6178      	str	r0, [r7, #20]
 80043c2:	e014      	b.n	80043ee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80043c4:	4b25      	ldr	r3, [pc, #148]	; (800445c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043c8:	4a24      	ldr	r2, [pc, #144]	; (800445c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043ce:	6593      	str	r3, [r2, #88]	; 0x58
 80043d0:	4b22      	ldr	r3, [pc, #136]	; (800445c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043d8:	60fb      	str	r3, [r7, #12]
 80043da:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80043dc:	f7ff f986 	bl	80036ec <HAL_PWREx_GetVoltageRange>
 80043e0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80043e2:	4b1e      	ldr	r3, [pc, #120]	; (800445c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043e6:	4a1d      	ldr	r2, [pc, #116]	; (800445c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043ec:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043f4:	d10b      	bne.n	800440e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2b80      	cmp	r3, #128	; 0x80
 80043fa:	d919      	bls.n	8004430 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2ba0      	cmp	r3, #160	; 0xa0
 8004400:	d902      	bls.n	8004408 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004402:	2302      	movs	r3, #2
 8004404:	613b      	str	r3, [r7, #16]
 8004406:	e013      	b.n	8004430 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004408:	2301      	movs	r3, #1
 800440a:	613b      	str	r3, [r7, #16]
 800440c:	e010      	b.n	8004430 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2b80      	cmp	r3, #128	; 0x80
 8004412:	d902      	bls.n	800441a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004414:	2303      	movs	r3, #3
 8004416:	613b      	str	r3, [r7, #16]
 8004418:	e00a      	b.n	8004430 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2b80      	cmp	r3, #128	; 0x80
 800441e:	d102      	bne.n	8004426 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004420:	2302      	movs	r3, #2
 8004422:	613b      	str	r3, [r7, #16]
 8004424:	e004      	b.n	8004430 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2b70      	cmp	r3, #112	; 0x70
 800442a:	d101      	bne.n	8004430 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800442c:	2301      	movs	r3, #1
 800442e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004430:	4b0b      	ldr	r3, [pc, #44]	; (8004460 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f023 0207 	bic.w	r2, r3, #7
 8004438:	4909      	ldr	r1, [pc, #36]	; (8004460 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	4313      	orrs	r3, r2
 800443e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004440:	4b07      	ldr	r3, [pc, #28]	; (8004460 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0307 	and.w	r3, r3, #7
 8004448:	693a      	ldr	r2, [r7, #16]
 800444a:	429a      	cmp	r2, r3
 800444c:	d001      	beq.n	8004452 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e000      	b.n	8004454 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004452:	2300      	movs	r3, #0
}
 8004454:	4618      	mov	r0, r3
 8004456:	3718      	adds	r7, #24
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}
 800445c:	40021000 	.word	0x40021000
 8004460:	40022000 	.word	0x40022000

08004464 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b086      	sub	sp, #24
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800446c:	2300      	movs	r3, #0
 800446e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004470:	2300      	movs	r3, #0
 8004472:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800447c:	2b00      	cmp	r3, #0
 800447e:	d031      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004484:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004488:	d01a      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800448a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800448e:	d814      	bhi.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004490:	2b00      	cmp	r3, #0
 8004492:	d009      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004494:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004498:	d10f      	bne.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800449a:	4b5d      	ldr	r3, [pc, #372]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	4a5c      	ldr	r2, [pc, #368]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044a4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80044a6:	e00c      	b.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	3304      	adds	r3, #4
 80044ac:	2100      	movs	r1, #0
 80044ae:	4618      	mov	r0, r3
 80044b0:	f000 fa1e 	bl	80048f0 <RCCEx_PLLSAI1_Config>
 80044b4:	4603      	mov	r3, r0
 80044b6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80044b8:	e003      	b.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	74fb      	strb	r3, [r7, #19]
      break;
 80044be:	e000      	b.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80044c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044c2:	7cfb      	ldrb	r3, [r7, #19]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d10b      	bne.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80044c8:	4b51      	ldr	r3, [pc, #324]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044d6:	494e      	ldr	r1, [pc, #312]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044d8:	4313      	orrs	r3, r2
 80044da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80044de:	e001      	b.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044e0:	7cfb      	ldrb	r3, [r7, #19]
 80044e2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	f000 809e 	beq.w	800462e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044f2:	2300      	movs	r3, #0
 80044f4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80044f6:	4b46      	ldr	r3, [pc, #280]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d101      	bne.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004502:	2301      	movs	r3, #1
 8004504:	e000      	b.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004506:	2300      	movs	r3, #0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d00d      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800450c:	4b40      	ldr	r3, [pc, #256]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800450e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004510:	4a3f      	ldr	r2, [pc, #252]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004512:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004516:	6593      	str	r3, [r2, #88]	; 0x58
 8004518:	4b3d      	ldr	r3, [pc, #244]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800451a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800451c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004520:	60bb      	str	r3, [r7, #8]
 8004522:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004524:	2301      	movs	r3, #1
 8004526:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004528:	4b3a      	ldr	r3, [pc, #232]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a39      	ldr	r2, [pc, #228]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800452e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004532:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004534:	f7fe f9a2 	bl	800287c <HAL_GetTick>
 8004538:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800453a:	e009      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800453c:	f7fe f99e 	bl	800287c <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	2b02      	cmp	r3, #2
 8004548:	d902      	bls.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	74fb      	strb	r3, [r7, #19]
        break;
 800454e:	e005      	b.n	800455c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004550:	4b30      	ldr	r3, [pc, #192]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004558:	2b00      	cmp	r3, #0
 800455a:	d0ef      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800455c:	7cfb      	ldrb	r3, [r7, #19]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d15a      	bne.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004562:	4b2b      	ldr	r3, [pc, #172]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004568:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800456c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d01e      	beq.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004578:	697a      	ldr	r2, [r7, #20]
 800457a:	429a      	cmp	r2, r3
 800457c:	d019      	beq.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800457e:	4b24      	ldr	r3, [pc, #144]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004584:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004588:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800458a:	4b21      	ldr	r3, [pc, #132]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800458c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004590:	4a1f      	ldr	r2, [pc, #124]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004592:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004596:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800459a:	4b1d      	ldr	r3, [pc, #116]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800459c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045a0:	4a1b      	ldr	r2, [pc, #108]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80045aa:	4a19      	ldr	r2, [pc, #100]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	f003 0301 	and.w	r3, r3, #1
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d016      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045bc:	f7fe f95e 	bl	800287c <HAL_GetTick>
 80045c0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045c2:	e00b      	b.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045c4:	f7fe f95a 	bl	800287c <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d902      	bls.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	74fb      	strb	r3, [r7, #19]
            break;
 80045da:	e006      	b.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045dc:	4b0c      	ldr	r3, [pc, #48]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045e2:	f003 0302 	and.w	r3, r3, #2
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d0ec      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80045ea:	7cfb      	ldrb	r3, [r7, #19]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d10b      	bne.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045f0:	4b07      	ldr	r3, [pc, #28]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045fe:	4904      	ldr	r1, [pc, #16]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004600:	4313      	orrs	r3, r2
 8004602:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004606:	e009      	b.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004608:	7cfb      	ldrb	r3, [r7, #19]
 800460a:	74bb      	strb	r3, [r7, #18]
 800460c:	e006      	b.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800460e:	bf00      	nop
 8004610:	40021000 	.word	0x40021000
 8004614:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004618:	7cfb      	ldrb	r3, [r7, #19]
 800461a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800461c:	7c7b      	ldrb	r3, [r7, #17]
 800461e:	2b01      	cmp	r3, #1
 8004620:	d105      	bne.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004622:	4bb2      	ldr	r3, [pc, #712]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004626:	4ab1      	ldr	r2, [pc, #708]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004628:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800462c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0301 	and.w	r3, r3, #1
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00a      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800463a:	4bac      	ldr	r3, [pc, #688]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800463c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004640:	f023 0203 	bic.w	r2, r3, #3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a1b      	ldr	r3, [r3, #32]
 8004648:	49a8      	ldr	r1, [pc, #672]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800464a:	4313      	orrs	r3, r2
 800464c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0302 	and.w	r3, r3, #2
 8004658:	2b00      	cmp	r3, #0
 800465a:	d00a      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800465c:	4ba3      	ldr	r3, [pc, #652]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800465e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004662:	f023 020c 	bic.w	r2, r3, #12
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466a:	49a0      	ldr	r1, [pc, #640]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800466c:	4313      	orrs	r3, r2
 800466e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0304 	and.w	r3, r3, #4
 800467a:	2b00      	cmp	r3, #0
 800467c:	d00a      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800467e:	4b9b      	ldr	r3, [pc, #620]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004680:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004684:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800468c:	4997      	ldr	r1, [pc, #604]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800468e:	4313      	orrs	r3, r2
 8004690:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0320 	and.w	r3, r3, #32
 800469c:	2b00      	cmp	r3, #0
 800469e:	d00a      	beq.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80046a0:	4b92      	ldr	r3, [pc, #584]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046a6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ae:	498f      	ldr	r1, [pc, #572]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046b0:	4313      	orrs	r3, r2
 80046b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d00a      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80046c2:	4b8a      	ldr	r3, [pc, #552]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046c8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046d0:	4986      	ldr	r1, [pc, #536]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046d2:	4313      	orrs	r3, r2
 80046d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d00a      	beq.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80046e4:	4b81      	ldr	r3, [pc, #516]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f2:	497e      	ldr	r1, [pc, #504]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046f4:	4313      	orrs	r3, r2
 80046f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00a      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004706:	4b79      	ldr	r3, [pc, #484]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004708:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800470c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004714:	4975      	ldr	r1, [pc, #468]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004716:	4313      	orrs	r3, r2
 8004718:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004724:	2b00      	cmp	r3, #0
 8004726:	d00a      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004728:	4b70      	ldr	r3, [pc, #448]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800472a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800472e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004736:	496d      	ldr	r1, [pc, #436]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004738:	4313      	orrs	r3, r2
 800473a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004746:	2b00      	cmp	r3, #0
 8004748:	d00a      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800474a:	4b68      	ldr	r3, [pc, #416]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800474c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004750:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004758:	4964      	ldr	r1, [pc, #400]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800475a:	4313      	orrs	r3, r2
 800475c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d028      	beq.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800476c:	4b5f      	ldr	r3, [pc, #380]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800476e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004772:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800477a:	495c      	ldr	r1, [pc, #368]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800477c:	4313      	orrs	r3, r2
 800477e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004786:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800478a:	d106      	bne.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800478c:	4b57      	ldr	r3, [pc, #348]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	4a56      	ldr	r2, [pc, #344]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004792:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004796:	60d3      	str	r3, [r2, #12]
 8004798:	e011      	b.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800479e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047a2:	d10c      	bne.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	3304      	adds	r3, #4
 80047a8:	2101      	movs	r1, #1
 80047aa:	4618      	mov	r0, r3
 80047ac:	f000 f8a0 	bl	80048f0 <RCCEx_PLLSAI1_Config>
 80047b0:	4603      	mov	r3, r0
 80047b2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80047b4:	7cfb      	ldrb	r3, [r7, #19]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d001      	beq.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 80047ba:	7cfb      	ldrb	r3, [r7, #19]
 80047bc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d028      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80047ca:	4b48      	ldr	r3, [pc, #288]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047d0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047d8:	4944      	ldr	r1, [pc, #272]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047da:	4313      	orrs	r3, r2
 80047dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047e8:	d106      	bne.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047ea:	4b40      	ldr	r3, [pc, #256]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	4a3f      	ldr	r2, [pc, #252]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047f4:	60d3      	str	r3, [r2, #12]
 80047f6:	e011      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004800:	d10c      	bne.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	3304      	adds	r3, #4
 8004806:	2101      	movs	r1, #1
 8004808:	4618      	mov	r0, r3
 800480a:	f000 f871 	bl	80048f0 <RCCEx_PLLSAI1_Config>
 800480e:	4603      	mov	r3, r0
 8004810:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004812:	7cfb      	ldrb	r3, [r7, #19]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d001      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8004818:	7cfb      	ldrb	r3, [r7, #19]
 800481a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004824:	2b00      	cmp	r3, #0
 8004826:	d028      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004828:	4b30      	ldr	r3, [pc, #192]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800482a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800482e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004836:	492d      	ldr	r1, [pc, #180]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004838:	4313      	orrs	r3, r2
 800483a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004842:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004846:	d106      	bne.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004848:	4b28      	ldr	r3, [pc, #160]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	4a27      	ldr	r2, [pc, #156]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800484e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004852:	60d3      	str	r3, [r2, #12]
 8004854:	e011      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x416>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800485a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800485e:	d10c      	bne.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x416>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	3304      	adds	r3, #4
 8004864:	2101      	movs	r1, #1
 8004866:	4618      	mov	r0, r3
 8004868:	f000 f842 	bl	80048f0 <RCCEx_PLLSAI1_Config>
 800486c:	4603      	mov	r3, r0
 800486e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004870:	7cfb      	ldrb	r3, [r7, #19]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d001      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x416>
      {
        /* set overall return value */
        status = ret;
 8004876:	7cfb      	ldrb	r3, [r7, #19]
 8004878:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d01c      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004886:	4b19      	ldr	r3, [pc, #100]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004888:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800488c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004894:	4915      	ldr	r1, [pc, #84]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004896:	4313      	orrs	r3, r2
 8004898:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048a4:	d10c      	bne.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	3304      	adds	r3, #4
 80048aa:	2102      	movs	r1, #2
 80048ac:	4618      	mov	r0, r3
 80048ae:	f000 f81f 	bl	80048f0 <RCCEx_PLLSAI1_Config>
 80048b2:	4603      	mov	r3, r0
 80048b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048b6:	7cfb      	ldrb	r3, [r7, #19]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d001      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
      {
        /* set overall return value */
        status = ret;
 80048bc:	7cfb      	ldrb	r3, [r7, #19]
 80048be:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d00a      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x47e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80048cc:	4b07      	ldr	r3, [pc, #28]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048d2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048da:	4904      	ldr	r1, [pc, #16]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048dc:	4313      	orrs	r3, r2
 80048de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80048e2:	7cbb      	ldrb	r3, [r7, #18]
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3718      	adds	r7, #24
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	40021000 	.word	0x40021000

080048f0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048fa:	2300      	movs	r3, #0
 80048fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80048fe:	4b74      	ldr	r3, [pc, #464]	; (8004ad0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	f003 0303 	and.w	r3, r3, #3
 8004906:	2b00      	cmp	r3, #0
 8004908:	d018      	beq.n	800493c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800490a:	4b71      	ldr	r3, [pc, #452]	; (8004ad0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	f003 0203 	and.w	r2, r3, #3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	429a      	cmp	r2, r3
 8004918:	d10d      	bne.n	8004936 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
       ||
 800491e:	2b00      	cmp	r3, #0
 8004920:	d009      	beq.n	8004936 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004922:	4b6b      	ldr	r3, [pc, #428]	; (8004ad0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	091b      	lsrs	r3, r3, #4
 8004928:	f003 0307 	and.w	r3, r3, #7
 800492c:	1c5a      	adds	r2, r3, #1
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
       ||
 8004932:	429a      	cmp	r2, r3
 8004934:	d047      	beq.n	80049c6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	73fb      	strb	r3, [r7, #15]
 800493a:	e044      	b.n	80049c6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	2b03      	cmp	r3, #3
 8004942:	d018      	beq.n	8004976 <RCCEx_PLLSAI1_Config+0x86>
 8004944:	2b03      	cmp	r3, #3
 8004946:	d825      	bhi.n	8004994 <RCCEx_PLLSAI1_Config+0xa4>
 8004948:	2b01      	cmp	r3, #1
 800494a:	d002      	beq.n	8004952 <RCCEx_PLLSAI1_Config+0x62>
 800494c:	2b02      	cmp	r3, #2
 800494e:	d009      	beq.n	8004964 <RCCEx_PLLSAI1_Config+0x74>
 8004950:	e020      	b.n	8004994 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004952:	4b5f      	ldr	r3, [pc, #380]	; (8004ad0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0302 	and.w	r3, r3, #2
 800495a:	2b00      	cmp	r3, #0
 800495c:	d11d      	bne.n	800499a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004962:	e01a      	b.n	800499a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004964:	4b5a      	ldr	r3, [pc, #360]	; (8004ad0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800496c:	2b00      	cmp	r3, #0
 800496e:	d116      	bne.n	800499e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004974:	e013      	b.n	800499e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004976:	4b56      	ldr	r3, [pc, #344]	; (8004ad0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d10f      	bne.n	80049a2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004982:	4b53      	ldr	r3, [pc, #332]	; (8004ad0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d109      	bne.n	80049a2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004992:	e006      	b.n	80049a2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	73fb      	strb	r3, [r7, #15]
      break;
 8004998:	e004      	b.n	80049a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800499a:	bf00      	nop
 800499c:	e002      	b.n	80049a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800499e:	bf00      	nop
 80049a0:	e000      	b.n	80049a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80049a2:	bf00      	nop
    }

    if(status == HAL_OK)
 80049a4:	7bfb      	ldrb	r3, [r7, #15]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d10d      	bne.n	80049c6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80049aa:	4b49      	ldr	r3, [pc, #292]	; (8004ad0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6819      	ldr	r1, [r3, #0]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	3b01      	subs	r3, #1
 80049bc:	011b      	lsls	r3, r3, #4
 80049be:	430b      	orrs	r3, r1
 80049c0:	4943      	ldr	r1, [pc, #268]	; (8004ad0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80049c6:	7bfb      	ldrb	r3, [r7, #15]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d17c      	bne.n	8004ac6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80049cc:	4b40      	ldr	r3, [pc, #256]	; (8004ad0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a3f      	ldr	r2, [pc, #252]	; (8004ad0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80049d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049d8:	f7fd ff50 	bl	800287c <HAL_GetTick>
 80049dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80049de:	e009      	b.n	80049f4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80049e0:	f7fd ff4c 	bl	800287c <HAL_GetTick>
 80049e4:	4602      	mov	r2, r0
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	2b02      	cmp	r3, #2
 80049ec:	d902      	bls.n	80049f4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	73fb      	strb	r3, [r7, #15]
        break;
 80049f2:	e005      	b.n	8004a00 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80049f4:	4b36      	ldr	r3, [pc, #216]	; (8004ad0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d1ef      	bne.n	80049e0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004a00:	7bfb      	ldrb	r3, [r7, #15]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d15f      	bne.n	8004ac6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d110      	bne.n	8004a2e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a0c:	4b30      	ldr	r3, [pc, #192]	; (8004ad0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a0e:	691b      	ldr	r3, [r3, #16]
 8004a10:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004a14:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	6892      	ldr	r2, [r2, #8]
 8004a1c:	0211      	lsls	r1, r2, #8
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	68d2      	ldr	r2, [r2, #12]
 8004a22:	06d2      	lsls	r2, r2, #27
 8004a24:	430a      	orrs	r2, r1
 8004a26:	492a      	ldr	r1, [pc, #168]	; (8004ad0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	610b      	str	r3, [r1, #16]
 8004a2c:	e027      	b.n	8004a7e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d112      	bne.n	8004a5a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a34:	4b26      	ldr	r3, [pc, #152]	; (8004ad0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a36:	691b      	ldr	r3, [r3, #16]
 8004a38:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004a3c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	6892      	ldr	r2, [r2, #8]
 8004a44:	0211      	lsls	r1, r2, #8
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	6912      	ldr	r2, [r2, #16]
 8004a4a:	0852      	lsrs	r2, r2, #1
 8004a4c:	3a01      	subs	r2, #1
 8004a4e:	0552      	lsls	r2, r2, #21
 8004a50:	430a      	orrs	r2, r1
 8004a52:	491f      	ldr	r1, [pc, #124]	; (8004ad0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a54:	4313      	orrs	r3, r2
 8004a56:	610b      	str	r3, [r1, #16]
 8004a58:	e011      	b.n	8004a7e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a5a:	4b1d      	ldr	r3, [pc, #116]	; (8004ad0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004a62:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	6892      	ldr	r2, [r2, #8]
 8004a6a:	0211      	lsls	r1, r2, #8
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	6952      	ldr	r2, [r2, #20]
 8004a70:	0852      	lsrs	r2, r2, #1
 8004a72:	3a01      	subs	r2, #1
 8004a74:	0652      	lsls	r2, r2, #25
 8004a76:	430a      	orrs	r2, r1
 8004a78:	4915      	ldr	r1, [pc, #84]	; (8004ad0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004a7e:	4b14      	ldr	r3, [pc, #80]	; (8004ad0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a13      	ldr	r2, [pc, #76]	; (8004ad0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a84:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a88:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a8a:	f7fd fef7 	bl	800287c <HAL_GetTick>
 8004a8e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a90:	e009      	b.n	8004aa6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a92:	f7fd fef3 	bl	800287c <HAL_GetTick>
 8004a96:	4602      	mov	r2, r0
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d902      	bls.n	8004aa6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	73fb      	strb	r3, [r7, #15]
          break;
 8004aa4:	e005      	b.n	8004ab2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004aa6:	4b0a      	ldr	r3, [pc, #40]	; (8004ad0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d0ef      	beq.n	8004a92 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004ab2:	7bfb      	ldrb	r3, [r7, #15]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d106      	bne.n	8004ac6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004ab8:	4b05      	ldr	r3, [pc, #20]	; (8004ad0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004aba:	691a      	ldr	r2, [r3, #16]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	699b      	ldr	r3, [r3, #24]
 8004ac0:	4903      	ldr	r1, [pc, #12]	; (8004ad0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3710      	adds	r7, #16
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	40021000 	.word	0x40021000

08004ad4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d101      	bne.n	8004ae6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e095      	b.n	8004c12 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d108      	bne.n	8004b00 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004af6:	d009      	beq.n	8004b0c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	61da      	str	r2, [r3, #28]
 8004afe:	e005      	b.n	8004b0c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d106      	bne.n	8004b2c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f7fd f844 	bl	8001bb4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2202      	movs	r2, #2
 8004b30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b42:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b4c:	d902      	bls.n	8004b54 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	60fb      	str	r3, [r7, #12]
 8004b52:	e002      	b.n	8004b5a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004b54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b58:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004b62:	d007      	beq.n	8004b74 <HAL_SPI_Init+0xa0>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b6c:	d002      	beq.n	8004b74 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004b84:	431a      	orrs	r2, r3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	f003 0302 	and.w	r3, r3, #2
 8004b8e:	431a      	orrs	r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	695b      	ldr	r3, [r3, #20]
 8004b94:	f003 0301 	and.w	r3, r3, #1
 8004b98:	431a      	orrs	r2, r3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	699b      	ldr	r3, [r3, #24]
 8004b9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ba2:	431a      	orrs	r2, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	69db      	ldr	r3, [r3, #28]
 8004ba8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004bac:	431a      	orrs	r2, r3
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a1b      	ldr	r3, [r3, #32]
 8004bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bb6:	ea42 0103 	orr.w	r1, r2, r3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bbe:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	430a      	orrs	r2, r1
 8004bc8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	699b      	ldr	r3, [r3, #24]
 8004bce:	0c1b      	lsrs	r3, r3, #16
 8004bd0:	f003 0204 	and.w	r2, r3, #4
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd8:	f003 0310 	and.w	r3, r3, #16
 8004bdc:	431a      	orrs	r2, r3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004be2:	f003 0308 	and.w	r3, r3, #8
 8004be6:	431a      	orrs	r2, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004bf0:	ea42 0103 	orr.w	r1, r2, r3
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	430a      	orrs	r2, r1
 8004c00:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3710      	adds	r7, #16
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}

08004c1a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c1a:	b580      	push	{r7, lr}
 8004c1c:	b088      	sub	sp, #32
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	60f8      	str	r0, [r7, #12]
 8004c22:	60b9      	str	r1, [r7, #8]
 8004c24:	603b      	str	r3, [r7, #0]
 8004c26:	4613      	mov	r3, r2
 8004c28:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d101      	bne.n	8004c3c <HAL_SPI_Transmit+0x22>
 8004c38:	2302      	movs	r3, #2
 8004c3a:	e158      	b.n	8004eee <HAL_SPI_Transmit+0x2d4>
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c44:	f7fd fe1a 	bl	800287c <HAL_GetTick>
 8004c48:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004c4a:	88fb      	ldrh	r3, [r7, #6]
 8004c4c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d002      	beq.n	8004c60 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004c5a:	2302      	movs	r3, #2
 8004c5c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c5e:	e13d      	b.n	8004edc <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d002      	beq.n	8004c6c <HAL_SPI_Transmit+0x52>
 8004c66:	88fb      	ldrh	r3, [r7, #6]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d102      	bne.n	8004c72 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c70:	e134      	b.n	8004edc <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2203      	movs	r2, #3
 8004c76:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	68ba      	ldr	r2, [r7, #8]
 8004c84:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	88fa      	ldrh	r2, [r7, #6]
 8004c8a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	88fa      	ldrh	r2, [r7, #6]
 8004c90:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2200      	movs	r2, #0
 8004c96:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2200      	movs	r2, #0
 8004cac:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cbc:	d10f      	bne.n	8004cde <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ccc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004cdc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ce8:	2b40      	cmp	r3, #64	; 0x40
 8004cea:	d007      	beq.n	8004cfc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cfa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d04:	d94b      	bls.n	8004d9e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d002      	beq.n	8004d14 <HAL_SPI_Transmit+0xfa>
 8004d0e:	8afb      	ldrh	r3, [r7, #22]
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d13e      	bne.n	8004d92 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d18:	881a      	ldrh	r2, [r3, #0]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d24:	1c9a      	adds	r2, r3, #2
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	3b01      	subs	r3, #1
 8004d32:	b29a      	uxth	r2, r3
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004d38:	e02b      	b.n	8004d92 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	f003 0302 	and.w	r3, r3, #2
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	d112      	bne.n	8004d6e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4c:	881a      	ldrh	r2, [r3, #0]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d58:	1c9a      	adds	r2, r3, #2
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	3b01      	subs	r3, #1
 8004d66:	b29a      	uxth	r2, r3
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d6c:	e011      	b.n	8004d92 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d6e:	f7fd fd85 	bl	800287c <HAL_GetTick>
 8004d72:	4602      	mov	r2, r0
 8004d74:	69bb      	ldr	r3, [r7, #24]
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	683a      	ldr	r2, [r7, #0]
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d803      	bhi.n	8004d86 <HAL_SPI_Transmit+0x16c>
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d84:	d102      	bne.n	8004d8c <HAL_SPI_Transmit+0x172>
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d102      	bne.n	8004d92 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004d90:	e0a4      	b.n	8004edc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d1ce      	bne.n	8004d3a <HAL_SPI_Transmit+0x120>
 8004d9c:	e07c      	b.n	8004e98 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d002      	beq.n	8004dac <HAL_SPI_Transmit+0x192>
 8004da6:	8afb      	ldrh	r3, [r7, #22]
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d170      	bne.n	8004e8e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d912      	bls.n	8004ddc <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dba:	881a      	ldrh	r2, [r3, #0]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc6:	1c9a      	adds	r2, r3, #2
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	3b02      	subs	r3, #2
 8004dd4:	b29a      	uxth	r2, r3
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004dda:	e058      	b.n	8004e8e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	330c      	adds	r3, #12
 8004de6:	7812      	ldrb	r2, [r2, #0]
 8004de8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dee:	1c5a      	adds	r2, r3, #1
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	3b01      	subs	r3, #1
 8004dfc:	b29a      	uxth	r2, r3
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004e02:	e044      	b.n	8004e8e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	f003 0302 	and.w	r3, r3, #2
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	d12b      	bne.n	8004e6a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d912      	bls.n	8004e42 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e20:	881a      	ldrh	r2, [r3, #0]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e2c:	1c9a      	adds	r2, r3, #2
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	3b02      	subs	r3, #2
 8004e3a:	b29a      	uxth	r2, r3
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e40:	e025      	b.n	8004e8e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	330c      	adds	r3, #12
 8004e4c:	7812      	ldrb	r2, [r2, #0]
 8004e4e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e54:	1c5a      	adds	r2, r3, #1
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	3b01      	subs	r3, #1
 8004e62:	b29a      	uxth	r2, r3
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e68:	e011      	b.n	8004e8e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e6a:	f7fd fd07 	bl	800287c <HAL_GetTick>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	69bb      	ldr	r3, [r7, #24]
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	683a      	ldr	r2, [r7, #0]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d803      	bhi.n	8004e82 <HAL_SPI_Transmit+0x268>
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e80:	d102      	bne.n	8004e88 <HAL_SPI_Transmit+0x26e>
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d102      	bne.n	8004e8e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004e88:	2303      	movs	r3, #3
 8004e8a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004e8c:	e026      	b.n	8004edc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d1b5      	bne.n	8004e04 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e98:	69ba      	ldr	r2, [r7, #24]
 8004e9a:	6839      	ldr	r1, [r7, #0]
 8004e9c:	68f8      	ldr	r0, [r7, #12]
 8004e9e:	f000 f945 	bl	800512c <SPI_EndRxTxTransaction>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d002      	beq.n	8004eae <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2220      	movs	r2, #32
 8004eac:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d10a      	bne.n	8004ecc <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	613b      	str	r3, [r7, #16]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	613b      	str	r3, [r7, #16]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	613b      	str	r3, [r7, #16]
 8004eca:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d002      	beq.n	8004eda <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	77fb      	strb	r3, [r7, #31]
 8004ed8:	e000      	b.n	8004edc <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004eda:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004eec:	7ffb      	ldrb	r3, [r7, #31]
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3720      	adds	r7, #32
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
	...

08004ef8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b088      	sub	sp, #32
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	60b9      	str	r1, [r7, #8]
 8004f02:	603b      	str	r3, [r7, #0]
 8004f04:	4613      	mov	r3, r2
 8004f06:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004f08:	f7fd fcb8 	bl	800287c <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f10:	1a9b      	subs	r3, r3, r2
 8004f12:	683a      	ldr	r2, [r7, #0]
 8004f14:	4413      	add	r3, r2
 8004f16:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004f18:	f7fd fcb0 	bl	800287c <HAL_GetTick>
 8004f1c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004f1e:	4b39      	ldr	r3, [pc, #228]	; (8005004 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	015b      	lsls	r3, r3, #5
 8004f24:	0d1b      	lsrs	r3, r3, #20
 8004f26:	69fa      	ldr	r2, [r7, #28]
 8004f28:	fb02 f303 	mul.w	r3, r2, r3
 8004f2c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f2e:	e054      	b.n	8004fda <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f36:	d050      	beq.n	8004fda <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f38:	f7fd fca0 	bl	800287c <HAL_GetTick>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	69bb      	ldr	r3, [r7, #24]
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	69fa      	ldr	r2, [r7, #28]
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d902      	bls.n	8004f4e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d13d      	bne.n	8004fca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	685a      	ldr	r2, [r3, #4]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f5c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f66:	d111      	bne.n	8004f8c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f70:	d004      	beq.n	8004f7c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f7a:	d107      	bne.n	8004f8c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f8a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f94:	d10f      	bne.n	8004fb6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004fa4:	601a      	str	r2, [r3, #0]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fb4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2201      	movs	r2, #1
 8004fba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e017      	b.n	8004ffa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d101      	bne.n	8004fd4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	689a      	ldr	r2, [r3, #8]
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	68ba      	ldr	r2, [r7, #8]
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	bf0c      	ite	eq
 8004fea:	2301      	moveq	r3, #1
 8004fec:	2300      	movne	r3, #0
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	79fb      	ldrb	r3, [r7, #7]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d19b      	bne.n	8004f30 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004ff8:	2300      	movs	r3, #0
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3720      	adds	r7, #32
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	20000018 	.word	0x20000018

08005008 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b088      	sub	sp, #32
 800500c:	af00      	add	r7, sp, #0
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	60b9      	str	r1, [r7, #8]
 8005012:	607a      	str	r2, [r7, #4]
 8005014:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005016:	f7fd fc31 	bl	800287c <HAL_GetTick>
 800501a:	4602      	mov	r2, r0
 800501c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800501e:	1a9b      	subs	r3, r3, r2
 8005020:	683a      	ldr	r2, [r7, #0]
 8005022:	4413      	add	r3, r2
 8005024:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005026:	f7fd fc29 	bl	800287c <HAL_GetTick>
 800502a:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800502c:	4b3e      	ldr	r3, [pc, #248]	; (8005128 <SPI_WaitFifoStateUntilTimeout+0x120>)
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	4613      	mov	r3, r2
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	4413      	add	r3, r2
 8005036:	00da      	lsls	r2, r3, #3
 8005038:	1ad3      	subs	r3, r2, r3
 800503a:	0d1b      	lsrs	r3, r3, #20
 800503c:	69fa      	ldr	r2, [r7, #28]
 800503e:	fb02 f303 	mul.w	r3, r2, r3
 8005042:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8005044:	e062      	b.n	800510c <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800504c:	d109      	bne.n	8005062 <SPI_WaitFifoStateUntilTimeout+0x5a>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d106      	bne.n	8005062 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	330c      	adds	r3, #12
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	b2db      	uxtb	r3, r3
 800505e:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8005060:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005068:	d050      	beq.n	800510c <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800506a:	f7fd fc07 	bl	800287c <HAL_GetTick>
 800506e:	4602      	mov	r2, r0
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	69fa      	ldr	r2, [r7, #28]
 8005076:	429a      	cmp	r2, r3
 8005078:	d902      	bls.n	8005080 <SPI_WaitFifoStateUntilTimeout+0x78>
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d13d      	bne.n	80050fc <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	685a      	ldr	r2, [r3, #4]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800508e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005098:	d111      	bne.n	80050be <SPI_WaitFifoStateUntilTimeout+0xb6>
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050a2:	d004      	beq.n	80050ae <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050ac:	d107      	bne.n	80050be <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050bc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050c6:	d10f      	bne.n	80050e8 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050d6:	601a      	str	r2, [r3, #0]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050e6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2200      	movs	r2, #0
 80050f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80050f8:	2303      	movs	r3, #3
 80050fa:	e010      	b.n	800511e <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d101      	bne.n	8005106 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8005102:	2300      	movs	r3, #0
 8005104:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	3b01      	subs	r3, #1
 800510a:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	689a      	ldr	r2, [r3, #8]
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	4013      	ands	r3, r2
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	429a      	cmp	r2, r3
 800511a:	d194      	bne.n	8005046 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800511c:	2300      	movs	r3, #0
}
 800511e:	4618      	mov	r0, r3
 8005120:	3720      	adds	r7, #32
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	20000018 	.word	0x20000018

0800512c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b086      	sub	sp, #24
 8005130:	af02      	add	r7, sp, #8
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	9300      	str	r3, [sp, #0]
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	2200      	movs	r2, #0
 8005140:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005144:	68f8      	ldr	r0, [r7, #12]
 8005146:	f7ff ff5f 	bl	8005008 <SPI_WaitFifoStateUntilTimeout>
 800514a:	4603      	mov	r3, r0
 800514c:	2b00      	cmp	r3, #0
 800514e:	d007      	beq.n	8005160 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005154:	f043 0220 	orr.w	r2, r3, #32
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800515c:	2303      	movs	r3, #3
 800515e:	e027      	b.n	80051b0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	9300      	str	r3, [sp, #0]
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	2200      	movs	r2, #0
 8005168:	2180      	movs	r1, #128	; 0x80
 800516a:	68f8      	ldr	r0, [r7, #12]
 800516c:	f7ff fec4 	bl	8004ef8 <SPI_WaitFlagStateUntilTimeout>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d007      	beq.n	8005186 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800517a:	f043 0220 	orr.w	r2, r3, #32
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005182:	2303      	movs	r3, #3
 8005184:	e014      	b.n	80051b0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	9300      	str	r3, [sp, #0]
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	2200      	movs	r2, #0
 800518e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005192:	68f8      	ldr	r0, [r7, #12]
 8005194:	f7ff ff38 	bl	8005008 <SPI_WaitFifoStateUntilTimeout>
 8005198:	4603      	mov	r3, r0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d007      	beq.n	80051ae <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051a2:	f043 0220 	orr.w	r2, r3, #32
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80051aa:	2303      	movs	r3, #3
 80051ac:	e000      	b.n	80051b0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80051ae:	2300      	movs	r3, #0
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3710      	adds	r7, #16
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d101      	bne.n	80051ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e049      	b.n	800525e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d106      	bne.n	80051e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 f841 	bl	8005266 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2202      	movs	r2, #2
 80051e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	3304      	adds	r3, #4
 80051f4:	4619      	mov	r1, r3
 80051f6:	4610      	mov	r0, r2
 80051f8:	f000 f9dc 	bl	80055b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	3708      	adds	r7, #8
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}

08005266 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005266:	b480      	push	{r7}
 8005268:	b083      	sub	sp, #12
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800526e:	bf00      	nop
 8005270:	370c      	adds	r7, #12
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr
	...

0800527c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800527c:	b480      	push	{r7}
 800527e:	b085      	sub	sp, #20
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800528a:	b2db      	uxtb	r3, r3
 800528c:	2b01      	cmp	r3, #1
 800528e:	d001      	beq.n	8005294 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	e03b      	b.n	800530c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2202      	movs	r2, #2
 8005298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68da      	ldr	r2, [r3, #12]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f042 0201 	orr.w	r2, r2, #1
 80052aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a19      	ldr	r2, [pc, #100]	; (8005318 <HAL_TIM_Base_Start_IT+0x9c>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d009      	beq.n	80052ca <HAL_TIM_Base_Start_IT+0x4e>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052be:	d004      	beq.n	80052ca <HAL_TIM_Base_Start_IT+0x4e>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a15      	ldr	r2, [pc, #84]	; (800531c <HAL_TIM_Base_Start_IT+0xa0>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d115      	bne.n	80052f6 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	689a      	ldr	r2, [r3, #8]
 80052d0:	4b13      	ldr	r3, [pc, #76]	; (8005320 <HAL_TIM_Base_Start_IT+0xa4>)
 80052d2:	4013      	ands	r3, r2
 80052d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2b06      	cmp	r3, #6
 80052da:	d015      	beq.n	8005308 <HAL_TIM_Base_Start_IT+0x8c>
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052e2:	d011      	beq.n	8005308 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f042 0201 	orr.w	r2, r2, #1
 80052f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052f4:	e008      	b.n	8005308 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f042 0201 	orr.w	r2, r2, #1
 8005304:	601a      	str	r2, [r3, #0]
 8005306:	e000      	b.n	800530a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005308:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800530a:	2300      	movs	r3, #0
}
 800530c:	4618      	mov	r0, r3
 800530e:	3714      	adds	r7, #20
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr
 8005318:	40012c00 	.word	0x40012c00
 800531c:	40014000 	.word	0x40014000
 8005320:	00010007 	.word	0x00010007

08005324 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b082      	sub	sp, #8
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	f003 0302 	and.w	r3, r3, #2
 8005336:	2b02      	cmp	r3, #2
 8005338:	d122      	bne.n	8005380 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	f003 0302 	and.w	r3, r3, #2
 8005344:	2b02      	cmp	r3, #2
 8005346:	d11b      	bne.n	8005380 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f06f 0202 	mvn.w	r2, #2
 8005350:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2201      	movs	r2, #1
 8005356:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	699b      	ldr	r3, [r3, #24]
 800535e:	f003 0303 	and.w	r3, r3, #3
 8005362:	2b00      	cmp	r3, #0
 8005364:	d003      	beq.n	800536e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 f905 	bl	8005576 <HAL_TIM_IC_CaptureCallback>
 800536c:	e005      	b.n	800537a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 f8f7 	bl	8005562 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f000 f908 	bl	800558a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	691b      	ldr	r3, [r3, #16]
 8005386:	f003 0304 	and.w	r3, r3, #4
 800538a:	2b04      	cmp	r3, #4
 800538c:	d122      	bne.n	80053d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	f003 0304 	and.w	r3, r3, #4
 8005398:	2b04      	cmp	r3, #4
 800539a:	d11b      	bne.n	80053d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f06f 0204 	mvn.w	r2, #4
 80053a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2202      	movs	r2, #2
 80053aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	699b      	ldr	r3, [r3, #24]
 80053b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d003      	beq.n	80053c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f000 f8db 	bl	8005576 <HAL_TIM_IC_CaptureCallback>
 80053c0:	e005      	b.n	80053ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f000 f8cd 	bl	8005562 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f000 f8de 	bl	800558a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	f003 0308 	and.w	r3, r3, #8
 80053de:	2b08      	cmp	r3, #8
 80053e0:	d122      	bne.n	8005428 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	f003 0308 	and.w	r3, r3, #8
 80053ec:	2b08      	cmp	r3, #8
 80053ee:	d11b      	bne.n	8005428 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f06f 0208 	mvn.w	r2, #8
 80053f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2204      	movs	r2, #4
 80053fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	69db      	ldr	r3, [r3, #28]
 8005406:	f003 0303 	and.w	r3, r3, #3
 800540a:	2b00      	cmp	r3, #0
 800540c:	d003      	beq.n	8005416 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 f8b1 	bl	8005576 <HAL_TIM_IC_CaptureCallback>
 8005414:	e005      	b.n	8005422 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 f8a3 	bl	8005562 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f000 f8b4 	bl	800558a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2200      	movs	r2, #0
 8005426:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	691b      	ldr	r3, [r3, #16]
 800542e:	f003 0310 	and.w	r3, r3, #16
 8005432:	2b10      	cmp	r3, #16
 8005434:	d122      	bne.n	800547c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	f003 0310 	and.w	r3, r3, #16
 8005440:	2b10      	cmp	r3, #16
 8005442:	d11b      	bne.n	800547c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f06f 0210 	mvn.w	r2, #16
 800544c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2208      	movs	r2, #8
 8005452:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	69db      	ldr	r3, [r3, #28]
 800545a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800545e:	2b00      	cmp	r3, #0
 8005460:	d003      	beq.n	800546a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f000 f887 	bl	8005576 <HAL_TIM_IC_CaptureCallback>
 8005468:	e005      	b.n	8005476 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f000 f879 	bl	8005562 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f000 f88a 	bl	800558a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	f003 0301 	and.w	r3, r3, #1
 8005486:	2b01      	cmp	r3, #1
 8005488:	d10e      	bne.n	80054a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	f003 0301 	and.w	r3, r3, #1
 8005494:	2b01      	cmp	r3, #1
 8005496:	d107      	bne.n	80054a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f06f 0201 	mvn.w	r2, #1
 80054a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f7fb fd8e 	bl	8000fc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054b2:	2b80      	cmp	r3, #128	; 0x80
 80054b4:	d10e      	bne.n	80054d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054c0:	2b80      	cmp	r3, #128	; 0x80
 80054c2:	d107      	bne.n	80054d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80054cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 f8de 	bl	8005690 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054e2:	d10e      	bne.n	8005502 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054ee:	2b80      	cmp	r3, #128	; 0x80
 80054f0:	d107      	bne.n	8005502 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80054fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f000 f8d1 	bl	80056a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	691b      	ldr	r3, [r3, #16]
 8005508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800550c:	2b40      	cmp	r3, #64	; 0x40
 800550e:	d10e      	bne.n	800552e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800551a:	2b40      	cmp	r3, #64	; 0x40
 800551c:	d107      	bne.n	800552e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005526:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f000 f838 	bl	800559e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	691b      	ldr	r3, [r3, #16]
 8005534:	f003 0320 	and.w	r3, r3, #32
 8005538:	2b20      	cmp	r3, #32
 800553a:	d10e      	bne.n	800555a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	f003 0320 	and.w	r3, r3, #32
 8005546:	2b20      	cmp	r3, #32
 8005548:	d107      	bne.n	800555a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f06f 0220 	mvn.w	r2, #32
 8005552:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f000 f891 	bl	800567c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800555a:	bf00      	nop
 800555c:	3708      	adds	r7, #8
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}

08005562 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005562:	b480      	push	{r7}
 8005564:	b083      	sub	sp, #12
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800556a:	bf00      	nop
 800556c:	370c      	adds	r7, #12
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr

08005576 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005576:	b480      	push	{r7}
 8005578:	b083      	sub	sp, #12
 800557a:	af00      	add	r7, sp, #0
 800557c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800557e:	bf00      	nop
 8005580:	370c      	adds	r7, #12
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr

0800558a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800558a:	b480      	push	{r7}
 800558c:	b083      	sub	sp, #12
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005592:	bf00      	nop
 8005594:	370c      	adds	r7, #12
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr

0800559e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800559e:	b480      	push	{r7}
 80055a0:	b083      	sub	sp, #12
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80055a6:	bf00      	nop
 80055a8:	370c      	adds	r7, #12
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr
	...

080055b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b085      	sub	sp, #20
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	4a2a      	ldr	r2, [pc, #168]	; (8005670 <TIM_Base_SetConfig+0xbc>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d003      	beq.n	80055d4 <TIM_Base_SetConfig+0x20>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055d2:	d108      	bne.n	80055e6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	68fa      	ldr	r2, [r7, #12]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a21      	ldr	r2, [pc, #132]	; (8005670 <TIM_Base_SetConfig+0xbc>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d00b      	beq.n	8005606 <TIM_Base_SetConfig+0x52>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055f4:	d007      	beq.n	8005606 <TIM_Base_SetConfig+0x52>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a1e      	ldr	r2, [pc, #120]	; (8005674 <TIM_Base_SetConfig+0xc0>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d003      	beq.n	8005606 <TIM_Base_SetConfig+0x52>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a1d      	ldr	r2, [pc, #116]	; (8005678 <TIM_Base_SetConfig+0xc4>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d108      	bne.n	8005618 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800560c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	68fa      	ldr	r2, [r7, #12]
 8005614:	4313      	orrs	r3, r2
 8005616:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	695b      	ldr	r3, [r3, #20]
 8005622:	4313      	orrs	r3, r2
 8005624:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	689a      	ldr	r2, [r3, #8]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4a0c      	ldr	r2, [pc, #48]	; (8005670 <TIM_Base_SetConfig+0xbc>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d007      	beq.n	8005654 <TIM_Base_SetConfig+0xa0>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4a0b      	ldr	r2, [pc, #44]	; (8005674 <TIM_Base_SetConfig+0xc0>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d003      	beq.n	8005654 <TIM_Base_SetConfig+0xa0>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	4a0a      	ldr	r2, [pc, #40]	; (8005678 <TIM_Base_SetConfig+0xc4>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d103      	bne.n	800565c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	691a      	ldr	r2, [r3, #16]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	615a      	str	r2, [r3, #20]
}
 8005662:	bf00      	nop
 8005664:	3714      	adds	r7, #20
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr
 800566e:	bf00      	nop
 8005670:	40012c00 	.word	0x40012c00
 8005674:	40014000 	.word	0x40014000
 8005678:	40014400 	.word	0x40014400

0800567c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800567c:	b480      	push	{r7}
 800567e:	b083      	sub	sp, #12
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005684:	bf00      	nop
 8005686:	370c      	adds	r7, #12
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005690:	b480      	push	{r7}
 8005692:	b083      	sub	sp, #12
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005698:	bf00      	nop
 800569a:	370c      	adds	r7, #12
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr

080056a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b083      	sub	sp, #12
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80056ac:	bf00      	nop
 80056ae:	370c      	adds	r7, #12
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b082      	sub	sp, #8
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d101      	bne.n	80056ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	e040      	b.n	800574c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d106      	bne.n	80056e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f7fc facc 	bl	8001c78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2224      	movs	r2, #36	; 0x24
 80056e4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f022 0201 	bic.w	r2, r2, #1
 80056f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f000 f924 	bl	8005944 <UART_SetConfig>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d101      	bne.n	8005706 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e022      	b.n	800574c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570a:	2b00      	cmp	r3, #0
 800570c:	d002      	beq.n	8005714 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f000 fb4c 	bl	8005dac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	685a      	ldr	r2, [r3, #4]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005722:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	689a      	ldr	r2, [r3, #8]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005732:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f042 0201 	orr.w	r2, r2, #1
 8005742:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f000 fbd3 	bl	8005ef0 <UART_CheckIdleState>
 800574a:	4603      	mov	r3, r0
}
 800574c:	4618      	mov	r0, r3
 800574e:	3708      	adds	r7, #8
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}

08005754 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b08a      	sub	sp, #40	; 0x28
 8005758:	af02      	add	r7, sp, #8
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	60b9      	str	r1, [r7, #8]
 800575e:	603b      	str	r3, [r7, #0]
 8005760:	4613      	mov	r3, r2
 8005762:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005768:	2b20      	cmp	r3, #32
 800576a:	f040 8082 	bne.w	8005872 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d002      	beq.n	800577a <HAL_UART_Transmit+0x26>
 8005774:	88fb      	ldrh	r3, [r7, #6]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d101      	bne.n	800577e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	e07a      	b.n	8005874 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005784:	2b01      	cmp	r3, #1
 8005786:	d101      	bne.n	800578c <HAL_UART_Transmit+0x38>
 8005788:	2302      	movs	r3, #2
 800578a:	e073      	b.n	8005874 <HAL_UART_Transmit+0x120>
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2201      	movs	r2, #1
 8005790:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2200      	movs	r2, #0
 8005798:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2221      	movs	r2, #33	; 0x21
 80057a0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80057a2:	f7fd f86b 	bl	800287c <HAL_GetTick>
 80057a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	88fa      	ldrh	r2, [r7, #6]
 80057ac:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	88fa      	ldrh	r2, [r7, #6]
 80057b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057c0:	d108      	bne.n	80057d4 <HAL_UART_Transmit+0x80>
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	691b      	ldr	r3, [r3, #16]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d104      	bne.n	80057d4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80057ca:	2300      	movs	r3, #0
 80057cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	61bb      	str	r3, [r7, #24]
 80057d2:	e003      	b.n	80057dc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80057d8:	2300      	movs	r3, #0
 80057da:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2200      	movs	r2, #0
 80057e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80057e4:	e02d      	b.n	8005842 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	9300      	str	r3, [sp, #0]
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	2200      	movs	r2, #0
 80057ee:	2180      	movs	r1, #128	; 0x80
 80057f0:	68f8      	ldr	r0, [r7, #12]
 80057f2:	f000 fbc6 	bl	8005f82 <UART_WaitOnFlagUntilTimeout>
 80057f6:	4603      	mov	r3, r0
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d001      	beq.n	8005800 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80057fc:	2303      	movs	r3, #3
 80057fe:	e039      	b.n	8005874 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005800:	69fb      	ldr	r3, [r7, #28]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d10b      	bne.n	800581e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005806:	69bb      	ldr	r3, [r7, #24]
 8005808:	881a      	ldrh	r2, [r3, #0]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005812:	b292      	uxth	r2, r2
 8005814:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005816:	69bb      	ldr	r3, [r7, #24]
 8005818:	3302      	adds	r3, #2
 800581a:	61bb      	str	r3, [r7, #24]
 800581c:	e008      	b.n	8005830 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	781a      	ldrb	r2, [r3, #0]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	b292      	uxth	r2, r2
 8005828:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	3301      	adds	r3, #1
 800582e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005836:	b29b      	uxth	r3, r3
 8005838:	3b01      	subs	r3, #1
 800583a:	b29a      	uxth	r2, r3
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005848:	b29b      	uxth	r3, r3
 800584a:	2b00      	cmp	r3, #0
 800584c:	d1cb      	bne.n	80057e6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	9300      	str	r3, [sp, #0]
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	2200      	movs	r2, #0
 8005856:	2140      	movs	r1, #64	; 0x40
 8005858:	68f8      	ldr	r0, [r7, #12]
 800585a:	f000 fb92 	bl	8005f82 <UART_WaitOnFlagUntilTimeout>
 800585e:	4603      	mov	r3, r0
 8005860:	2b00      	cmp	r3, #0
 8005862:	d001      	beq.n	8005868 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005864:	2303      	movs	r3, #3
 8005866:	e005      	b.n	8005874 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2220      	movs	r2, #32
 800586c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800586e:	2300      	movs	r3, #0
 8005870:	e000      	b.n	8005874 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005872:	2302      	movs	r3, #2
  }
}
 8005874:	4618      	mov	r0, r3
 8005876:	3720      	adds	r7, #32
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}

0800587c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b084      	sub	sp, #16
 8005880:	af00      	add	r7, sp, #0
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	60b9      	str	r1, [r7, #8]
 8005886:	4613      	mov	r3, r2
 8005888:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800588e:	2b20      	cmp	r3, #32
 8005890:	d131      	bne.n	80058f6 <HAL_UART_Receive_DMA+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d002      	beq.n	800589e <HAL_UART_Receive_DMA+0x22>
 8005898:	88fb      	ldrh	r3, [r7, #6]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d101      	bne.n	80058a2 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	e02a      	b.n	80058f8 <HAL_UART_Receive_DMA+0x7c>
    }

    __HAL_LOCK(huart);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d101      	bne.n	80058b0 <HAL_UART_Receive_DMA+0x34>
 80058ac:	2302      	movs	r3, #2
 80058ae:	e023      	b.n	80058f8 <HAL_UART_Receive_DMA+0x7c>
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2200      	movs	r2, #0
 80058bc:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a0f      	ldr	r2, [pc, #60]	; (8005900 <HAL_UART_Receive_DMA+0x84>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d00e      	beq.n	80058e6 <HAL_UART_Receive_DMA+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d007      	beq.n	80058e6 <HAL_UART_Receive_DMA+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80058e4:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_DMA(huart, pData, Size));
 80058e6:	88fb      	ldrh	r3, [r7, #6]
 80058e8:	461a      	mov	r2, r3
 80058ea:	68b9      	ldr	r1, [r7, #8]
 80058ec:	68f8      	ldr	r0, [r7, #12]
 80058ee:	f000 fbc5 	bl	800607c <UART_Start_Receive_DMA>
 80058f2:	4603      	mov	r3, r0
 80058f4:	e000      	b.n	80058f8 <HAL_UART_Receive_DMA+0x7c>
  }
  else
  {
    return HAL_BUSY;
 80058f6:	2302      	movs	r3, #2
  }
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3710      	adds	r7, #16
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}
 8005900:	40008000 	.word	0x40008000

08005904 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800590c:	bf00      	nop
 800590e:	370c      	adds	r7, #12
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr

08005918 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005918:	b480      	push	{r7}
 800591a:	b083      	sub	sp, #12
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005920:	bf00      	nop
 8005922:	370c      	adds	r7, #12
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	460b      	mov	r3, r1
 8005936:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005938:	bf00      	nop
 800593a:	370c      	adds	r7, #12
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr

08005944 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005944:	b5b0      	push	{r4, r5, r7, lr}
 8005946:	b088      	sub	sp, #32
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800594c:	2300      	movs	r3, #0
 800594e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	689a      	ldr	r2, [r3, #8]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	691b      	ldr	r3, [r3, #16]
 8005958:	431a      	orrs	r2, r3
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	695b      	ldr	r3, [r3, #20]
 800595e:	431a      	orrs	r2, r3
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	69db      	ldr	r3, [r3, #28]
 8005964:	4313      	orrs	r3, r2
 8005966:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	4baa      	ldr	r3, [pc, #680]	; (8005c18 <UART_SetConfig+0x2d4>)
 8005970:	4013      	ands	r3, r2
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	6812      	ldr	r2, [r2, #0]
 8005976:	69f9      	ldr	r1, [r7, #28]
 8005978:	430b      	orrs	r3, r1
 800597a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	68da      	ldr	r2, [r3, #12]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	430a      	orrs	r2, r1
 8005990:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	699b      	ldr	r3, [r3, #24]
 8005996:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a9f      	ldr	r2, [pc, #636]	; (8005c1c <UART_SetConfig+0x2d8>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d004      	beq.n	80059ac <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a1b      	ldr	r3, [r3, #32]
 80059a6:	69fa      	ldr	r2, [r7, #28]
 80059a8:	4313      	orrs	r3, r2
 80059aa:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	69fa      	ldr	r2, [r7, #28]
 80059bc:	430a      	orrs	r2, r1
 80059be:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a96      	ldr	r2, [pc, #600]	; (8005c20 <UART_SetConfig+0x2dc>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d121      	bne.n	8005a0e <UART_SetConfig+0xca>
 80059ca:	4b96      	ldr	r3, [pc, #600]	; (8005c24 <UART_SetConfig+0x2e0>)
 80059cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059d0:	f003 0303 	and.w	r3, r3, #3
 80059d4:	2b03      	cmp	r3, #3
 80059d6:	d817      	bhi.n	8005a08 <UART_SetConfig+0xc4>
 80059d8:	a201      	add	r2, pc, #4	; (adr r2, 80059e0 <UART_SetConfig+0x9c>)
 80059da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059de:	bf00      	nop
 80059e0:	080059f1 	.word	0x080059f1
 80059e4:	080059fd 	.word	0x080059fd
 80059e8:	080059f7 	.word	0x080059f7
 80059ec:	08005a03 	.word	0x08005a03
 80059f0:	2301      	movs	r3, #1
 80059f2:	76fb      	strb	r3, [r7, #27]
 80059f4:	e096      	b.n	8005b24 <UART_SetConfig+0x1e0>
 80059f6:	2302      	movs	r3, #2
 80059f8:	76fb      	strb	r3, [r7, #27]
 80059fa:	e093      	b.n	8005b24 <UART_SetConfig+0x1e0>
 80059fc:	2304      	movs	r3, #4
 80059fe:	76fb      	strb	r3, [r7, #27]
 8005a00:	e090      	b.n	8005b24 <UART_SetConfig+0x1e0>
 8005a02:	2308      	movs	r3, #8
 8005a04:	76fb      	strb	r3, [r7, #27]
 8005a06:	e08d      	b.n	8005b24 <UART_SetConfig+0x1e0>
 8005a08:	2310      	movs	r3, #16
 8005a0a:	76fb      	strb	r3, [r7, #27]
 8005a0c:	e08a      	b.n	8005b24 <UART_SetConfig+0x1e0>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a85      	ldr	r2, [pc, #532]	; (8005c28 <UART_SetConfig+0x2e4>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d132      	bne.n	8005a7e <UART_SetConfig+0x13a>
 8005a18:	4b82      	ldr	r3, [pc, #520]	; (8005c24 <UART_SetConfig+0x2e0>)
 8005a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a1e:	f003 030c 	and.w	r3, r3, #12
 8005a22:	2b0c      	cmp	r3, #12
 8005a24:	d828      	bhi.n	8005a78 <UART_SetConfig+0x134>
 8005a26:	a201      	add	r2, pc, #4	; (adr r2, 8005a2c <UART_SetConfig+0xe8>)
 8005a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a2c:	08005a61 	.word	0x08005a61
 8005a30:	08005a79 	.word	0x08005a79
 8005a34:	08005a79 	.word	0x08005a79
 8005a38:	08005a79 	.word	0x08005a79
 8005a3c:	08005a6d 	.word	0x08005a6d
 8005a40:	08005a79 	.word	0x08005a79
 8005a44:	08005a79 	.word	0x08005a79
 8005a48:	08005a79 	.word	0x08005a79
 8005a4c:	08005a67 	.word	0x08005a67
 8005a50:	08005a79 	.word	0x08005a79
 8005a54:	08005a79 	.word	0x08005a79
 8005a58:	08005a79 	.word	0x08005a79
 8005a5c:	08005a73 	.word	0x08005a73
 8005a60:	2300      	movs	r3, #0
 8005a62:	76fb      	strb	r3, [r7, #27]
 8005a64:	e05e      	b.n	8005b24 <UART_SetConfig+0x1e0>
 8005a66:	2302      	movs	r3, #2
 8005a68:	76fb      	strb	r3, [r7, #27]
 8005a6a:	e05b      	b.n	8005b24 <UART_SetConfig+0x1e0>
 8005a6c:	2304      	movs	r3, #4
 8005a6e:	76fb      	strb	r3, [r7, #27]
 8005a70:	e058      	b.n	8005b24 <UART_SetConfig+0x1e0>
 8005a72:	2308      	movs	r3, #8
 8005a74:	76fb      	strb	r3, [r7, #27]
 8005a76:	e055      	b.n	8005b24 <UART_SetConfig+0x1e0>
 8005a78:	2310      	movs	r3, #16
 8005a7a:	76fb      	strb	r3, [r7, #27]
 8005a7c:	e052      	b.n	8005b24 <UART_SetConfig+0x1e0>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a6a      	ldr	r2, [pc, #424]	; (8005c2c <UART_SetConfig+0x2e8>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d120      	bne.n	8005aca <UART_SetConfig+0x186>
 8005a88:	4b66      	ldr	r3, [pc, #408]	; (8005c24 <UART_SetConfig+0x2e0>)
 8005a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a8e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005a92:	2b30      	cmp	r3, #48	; 0x30
 8005a94:	d013      	beq.n	8005abe <UART_SetConfig+0x17a>
 8005a96:	2b30      	cmp	r3, #48	; 0x30
 8005a98:	d814      	bhi.n	8005ac4 <UART_SetConfig+0x180>
 8005a9a:	2b20      	cmp	r3, #32
 8005a9c:	d009      	beq.n	8005ab2 <UART_SetConfig+0x16e>
 8005a9e:	2b20      	cmp	r3, #32
 8005aa0:	d810      	bhi.n	8005ac4 <UART_SetConfig+0x180>
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d002      	beq.n	8005aac <UART_SetConfig+0x168>
 8005aa6:	2b10      	cmp	r3, #16
 8005aa8:	d006      	beq.n	8005ab8 <UART_SetConfig+0x174>
 8005aaa:	e00b      	b.n	8005ac4 <UART_SetConfig+0x180>
 8005aac:	2300      	movs	r3, #0
 8005aae:	76fb      	strb	r3, [r7, #27]
 8005ab0:	e038      	b.n	8005b24 <UART_SetConfig+0x1e0>
 8005ab2:	2302      	movs	r3, #2
 8005ab4:	76fb      	strb	r3, [r7, #27]
 8005ab6:	e035      	b.n	8005b24 <UART_SetConfig+0x1e0>
 8005ab8:	2304      	movs	r3, #4
 8005aba:	76fb      	strb	r3, [r7, #27]
 8005abc:	e032      	b.n	8005b24 <UART_SetConfig+0x1e0>
 8005abe:	2308      	movs	r3, #8
 8005ac0:	76fb      	strb	r3, [r7, #27]
 8005ac2:	e02f      	b.n	8005b24 <UART_SetConfig+0x1e0>
 8005ac4:	2310      	movs	r3, #16
 8005ac6:	76fb      	strb	r3, [r7, #27]
 8005ac8:	e02c      	b.n	8005b24 <UART_SetConfig+0x1e0>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a53      	ldr	r2, [pc, #332]	; (8005c1c <UART_SetConfig+0x2d8>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d125      	bne.n	8005b20 <UART_SetConfig+0x1dc>
 8005ad4:	4b53      	ldr	r3, [pc, #332]	; (8005c24 <UART_SetConfig+0x2e0>)
 8005ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ada:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005ade:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ae2:	d017      	beq.n	8005b14 <UART_SetConfig+0x1d0>
 8005ae4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ae8:	d817      	bhi.n	8005b1a <UART_SetConfig+0x1d6>
 8005aea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005aee:	d00b      	beq.n	8005b08 <UART_SetConfig+0x1c4>
 8005af0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005af4:	d811      	bhi.n	8005b1a <UART_SetConfig+0x1d6>
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d003      	beq.n	8005b02 <UART_SetConfig+0x1be>
 8005afa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005afe:	d006      	beq.n	8005b0e <UART_SetConfig+0x1ca>
 8005b00:	e00b      	b.n	8005b1a <UART_SetConfig+0x1d6>
 8005b02:	2300      	movs	r3, #0
 8005b04:	76fb      	strb	r3, [r7, #27]
 8005b06:	e00d      	b.n	8005b24 <UART_SetConfig+0x1e0>
 8005b08:	2302      	movs	r3, #2
 8005b0a:	76fb      	strb	r3, [r7, #27]
 8005b0c:	e00a      	b.n	8005b24 <UART_SetConfig+0x1e0>
 8005b0e:	2304      	movs	r3, #4
 8005b10:	76fb      	strb	r3, [r7, #27]
 8005b12:	e007      	b.n	8005b24 <UART_SetConfig+0x1e0>
 8005b14:	2308      	movs	r3, #8
 8005b16:	76fb      	strb	r3, [r7, #27]
 8005b18:	e004      	b.n	8005b24 <UART_SetConfig+0x1e0>
 8005b1a:	2310      	movs	r3, #16
 8005b1c:	76fb      	strb	r3, [r7, #27]
 8005b1e:	e001      	b.n	8005b24 <UART_SetConfig+0x1e0>
 8005b20:	2310      	movs	r3, #16
 8005b22:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a3c      	ldr	r2, [pc, #240]	; (8005c1c <UART_SetConfig+0x2d8>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	f040 8082 	bne.w	8005c34 <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005b30:	7efb      	ldrb	r3, [r7, #27]
 8005b32:	2b08      	cmp	r3, #8
 8005b34:	d823      	bhi.n	8005b7e <UART_SetConfig+0x23a>
 8005b36:	a201      	add	r2, pc, #4	; (adr r2, 8005b3c <UART_SetConfig+0x1f8>)
 8005b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b3c:	08005b61 	.word	0x08005b61
 8005b40:	08005b7f 	.word	0x08005b7f
 8005b44:	08005b69 	.word	0x08005b69
 8005b48:	08005b7f 	.word	0x08005b7f
 8005b4c:	08005b6f 	.word	0x08005b6f
 8005b50:	08005b7f 	.word	0x08005b7f
 8005b54:	08005b7f 	.word	0x08005b7f
 8005b58:	08005b7f 	.word	0x08005b7f
 8005b5c:	08005b77 	.word	0x08005b77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b60:	f7fe fbc2 	bl	80042e8 <HAL_RCC_GetPCLK1Freq>
 8005b64:	6178      	str	r0, [r7, #20]
        break;
 8005b66:	e00f      	b.n	8005b88 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b68:	4b31      	ldr	r3, [pc, #196]	; (8005c30 <UART_SetConfig+0x2ec>)
 8005b6a:	617b      	str	r3, [r7, #20]
        break;
 8005b6c:	e00c      	b.n	8005b88 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b6e:	f7fe fb23 	bl	80041b8 <HAL_RCC_GetSysClockFreq>
 8005b72:	6178      	str	r0, [r7, #20]
        break;
 8005b74:	e008      	b.n	8005b88 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b7a:	617b      	str	r3, [r7, #20]
        break;
 8005b7c:	e004      	b.n	8005b88 <UART_SetConfig+0x244>
      default:
        pclk = 0U;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	76bb      	strb	r3, [r7, #26]
        break;
 8005b86:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	f000 8100 	beq.w	8005d90 <UART_SetConfig+0x44c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	685a      	ldr	r2, [r3, #4]
 8005b94:	4613      	mov	r3, r2
 8005b96:	005b      	lsls	r3, r3, #1
 8005b98:	4413      	add	r3, r2
 8005b9a:	697a      	ldr	r2, [r7, #20]
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d305      	bcc.n	8005bac <UART_SetConfig+0x268>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005ba6:	697a      	ldr	r2, [r7, #20]
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d902      	bls.n	8005bb2 <UART_SetConfig+0x26e>
      {
        ret = HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	76bb      	strb	r3, [r7, #26]
 8005bb0:	e0ee      	b.n	8005d90 <UART_SetConfig+0x44c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f04f 0100 	mov.w	r1, #0
 8005bba:	f04f 0200 	mov.w	r2, #0
 8005bbe:	f04f 0300 	mov.w	r3, #0
 8005bc2:	020b      	lsls	r3, r1, #8
 8005bc4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005bc8:	0202      	lsls	r2, r0, #8
 8005bca:	6879      	ldr	r1, [r7, #4]
 8005bcc:	6849      	ldr	r1, [r1, #4]
 8005bce:	0849      	lsrs	r1, r1, #1
 8005bd0:	4608      	mov	r0, r1
 8005bd2:	f04f 0100 	mov.w	r1, #0
 8005bd6:	1814      	adds	r4, r2, r0
 8005bd8:	eb43 0501 	adc.w	r5, r3, r1
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	461a      	mov	r2, r3
 8005be2:	f04f 0300 	mov.w	r3, #0
 8005be6:	4620      	mov	r0, r4
 8005be8:	4629      	mov	r1, r5
 8005bea:	f7fa faf9 	bl	80001e0 <__aeabi_uldivmod>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	460b      	mov	r3, r1
 8005bf2:	4613      	mov	r3, r2
 8005bf4:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005bfc:	d308      	bcc.n	8005c10 <UART_SetConfig+0x2cc>
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c04:	d204      	bcs.n	8005c10 <UART_SetConfig+0x2cc>
        {
          huart->Instance->BRR = usartdiv;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	693a      	ldr	r2, [r7, #16]
 8005c0c:	60da      	str	r2, [r3, #12]
 8005c0e:	e0bf      	b.n	8005d90 <UART_SetConfig+0x44c>
        }
        else
        {
          ret = HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	76bb      	strb	r3, [r7, #26]
 8005c14:	e0bc      	b.n	8005d90 <UART_SetConfig+0x44c>
 8005c16:	bf00      	nop
 8005c18:	efff69f3 	.word	0xefff69f3
 8005c1c:	40008000 	.word	0x40008000
 8005c20:	40013800 	.word	0x40013800
 8005c24:	40021000 	.word	0x40021000
 8005c28:	40004400 	.word	0x40004400
 8005c2c:	40004800 	.word	0x40004800
 8005c30:	00f42400 	.word	0x00f42400
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	69db      	ldr	r3, [r3, #28]
 8005c38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c3c:	d15c      	bne.n	8005cf8 <UART_SetConfig+0x3b4>
  {
    switch (clocksource)
 8005c3e:	7efb      	ldrb	r3, [r7, #27]
 8005c40:	2b08      	cmp	r3, #8
 8005c42:	d828      	bhi.n	8005c96 <UART_SetConfig+0x352>
 8005c44:	a201      	add	r2, pc, #4	; (adr r2, 8005c4c <UART_SetConfig+0x308>)
 8005c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c4a:	bf00      	nop
 8005c4c:	08005c71 	.word	0x08005c71
 8005c50:	08005c79 	.word	0x08005c79
 8005c54:	08005c81 	.word	0x08005c81
 8005c58:	08005c97 	.word	0x08005c97
 8005c5c:	08005c87 	.word	0x08005c87
 8005c60:	08005c97 	.word	0x08005c97
 8005c64:	08005c97 	.word	0x08005c97
 8005c68:	08005c97 	.word	0x08005c97
 8005c6c:	08005c8f 	.word	0x08005c8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c70:	f7fe fb3a 	bl	80042e8 <HAL_RCC_GetPCLK1Freq>
 8005c74:	6178      	str	r0, [r7, #20]
        break;
 8005c76:	e013      	b.n	8005ca0 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c78:	f7fe fb4c 	bl	8004314 <HAL_RCC_GetPCLK2Freq>
 8005c7c:	6178      	str	r0, [r7, #20]
        break;
 8005c7e:	e00f      	b.n	8005ca0 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c80:	4b49      	ldr	r3, [pc, #292]	; (8005da8 <UART_SetConfig+0x464>)
 8005c82:	617b      	str	r3, [r7, #20]
        break;
 8005c84:	e00c      	b.n	8005ca0 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c86:	f7fe fa97 	bl	80041b8 <HAL_RCC_GetSysClockFreq>
 8005c8a:	6178      	str	r0, [r7, #20]
        break;
 8005c8c:	e008      	b.n	8005ca0 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c92:	617b      	str	r3, [r7, #20]
        break;
 8005c94:	e004      	b.n	8005ca0 <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 8005c96:	2300      	movs	r3, #0
 8005c98:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	76bb      	strb	r3, [r7, #26]
        break;
 8005c9e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d074      	beq.n	8005d90 <UART_SetConfig+0x44c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	005a      	lsls	r2, r3, #1
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	085b      	lsrs	r3, r3, #1
 8005cb0:	441a      	add	r2, r3
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	2b0f      	cmp	r3, #15
 8005cc2:	d916      	bls.n	8005cf2 <UART_SetConfig+0x3ae>
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cca:	d212      	bcs.n	8005cf2 <UART_SetConfig+0x3ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	f023 030f 	bic.w	r3, r3, #15
 8005cd4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	085b      	lsrs	r3, r3, #1
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	f003 0307 	and.w	r3, r3, #7
 8005ce0:	b29a      	uxth	r2, r3
 8005ce2:	89fb      	ldrh	r3, [r7, #14]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	89fa      	ldrh	r2, [r7, #14]
 8005cee:	60da      	str	r2, [r3, #12]
 8005cf0:	e04e      	b.n	8005d90 <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	76bb      	strb	r3, [r7, #26]
 8005cf6:	e04b      	b.n	8005d90 <UART_SetConfig+0x44c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005cf8:	7efb      	ldrb	r3, [r7, #27]
 8005cfa:	2b08      	cmp	r3, #8
 8005cfc:	d827      	bhi.n	8005d4e <UART_SetConfig+0x40a>
 8005cfe:	a201      	add	r2, pc, #4	; (adr r2, 8005d04 <UART_SetConfig+0x3c0>)
 8005d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d04:	08005d29 	.word	0x08005d29
 8005d08:	08005d31 	.word	0x08005d31
 8005d0c:	08005d39 	.word	0x08005d39
 8005d10:	08005d4f 	.word	0x08005d4f
 8005d14:	08005d3f 	.word	0x08005d3f
 8005d18:	08005d4f 	.word	0x08005d4f
 8005d1c:	08005d4f 	.word	0x08005d4f
 8005d20:	08005d4f 	.word	0x08005d4f
 8005d24:	08005d47 	.word	0x08005d47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d28:	f7fe fade 	bl	80042e8 <HAL_RCC_GetPCLK1Freq>
 8005d2c:	6178      	str	r0, [r7, #20]
        break;
 8005d2e:	e013      	b.n	8005d58 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d30:	f7fe faf0 	bl	8004314 <HAL_RCC_GetPCLK2Freq>
 8005d34:	6178      	str	r0, [r7, #20]
        break;
 8005d36:	e00f      	b.n	8005d58 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d38:	4b1b      	ldr	r3, [pc, #108]	; (8005da8 <UART_SetConfig+0x464>)
 8005d3a:	617b      	str	r3, [r7, #20]
        break;
 8005d3c:	e00c      	b.n	8005d58 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d3e:	f7fe fa3b 	bl	80041b8 <HAL_RCC_GetSysClockFreq>
 8005d42:	6178      	str	r0, [r7, #20]
        break;
 8005d44:	e008      	b.n	8005d58 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d4a:	617b      	str	r3, [r7, #20]
        break;
 8005d4c:	e004      	b.n	8005d58 <UART_SetConfig+0x414>
      default:
        pclk = 0U;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	76bb      	strb	r3, [r7, #26]
        break;
 8005d56:	bf00      	nop
    }

    if (pclk != 0U)
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d018      	beq.n	8005d90 <UART_SetConfig+0x44c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	085a      	lsrs	r2, r3, #1
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	441a      	add	r2, r3
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	2b0f      	cmp	r3, #15
 8005d78:	d908      	bls.n	8005d8c <UART_SetConfig+0x448>
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d80:	d204      	bcs.n	8005d8c <UART_SetConfig+0x448>
      {
        huart->Instance->BRR = usartdiv;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	693a      	ldr	r2, [r7, #16]
 8005d88:	60da      	str	r2, [r3, #12]
 8005d8a:	e001      	b.n	8005d90 <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005d9c:	7ebb      	ldrb	r3, [r7, #26]
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3720      	adds	r7, #32
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bdb0      	pop	{r4, r5, r7, pc}
 8005da6:	bf00      	nop
 8005da8:	00f42400 	.word	0x00f42400

08005dac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b083      	sub	sp, #12
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db8:	f003 0301 	and.w	r3, r3, #1
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d00a      	beq.n	8005dd6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	430a      	orrs	r2, r1
 8005dd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dda:	f003 0302 	and.w	r3, r3, #2
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d00a      	beq.n	8005df8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	430a      	orrs	r2, r1
 8005df6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfc:	f003 0304 	and.w	r3, r3, #4
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d00a      	beq.n	8005e1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	430a      	orrs	r2, r1
 8005e18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e1e:	f003 0308 	and.w	r3, r3, #8
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d00a      	beq.n	8005e3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	430a      	orrs	r2, r1
 8005e3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e40:	f003 0310 	and.w	r3, r3, #16
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d00a      	beq.n	8005e5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	430a      	orrs	r2, r1
 8005e5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e62:	f003 0320 	and.w	r3, r3, #32
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d00a      	beq.n	8005e80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	430a      	orrs	r2, r1
 8005e7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d01a      	beq.n	8005ec2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	430a      	orrs	r2, r1
 8005ea0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005eaa:	d10a      	bne.n	8005ec2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	430a      	orrs	r2, r1
 8005ec0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d00a      	beq.n	8005ee4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	430a      	orrs	r2, r1
 8005ee2:	605a      	str	r2, [r3, #4]
  }
}
 8005ee4:	bf00      	nop
 8005ee6:	370c      	adds	r7, #12
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b086      	sub	sp, #24
 8005ef4:	af02      	add	r7, sp, #8
 8005ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f00:	f7fc fcbc 	bl	800287c <HAL_GetTick>
 8005f04:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f003 0308 	and.w	r3, r3, #8
 8005f10:	2b08      	cmp	r3, #8
 8005f12:	d10e      	bne.n	8005f32 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f18:	9300      	str	r3, [sp, #0]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f000 f82d 	bl	8005f82 <UART_WaitOnFlagUntilTimeout>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d001      	beq.n	8005f32 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f2e:	2303      	movs	r3, #3
 8005f30:	e023      	b.n	8005f7a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f003 0304 	and.w	r3, r3, #4
 8005f3c:	2b04      	cmp	r3, #4
 8005f3e:	d10e      	bne.n	8005f5e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f44:	9300      	str	r3, [sp, #0]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 f817 	bl	8005f82 <UART_WaitOnFlagUntilTimeout>
 8005f54:	4603      	mov	r3, r0
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d001      	beq.n	8005f5e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f5a:	2303      	movs	r3, #3
 8005f5c:	e00d      	b.n	8005f7a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2220      	movs	r2, #32
 8005f62:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2220      	movs	r2, #32
 8005f68:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2200      	movs	r2, #0
 8005f74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005f78:	2300      	movs	r3, #0
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3710      	adds	r7, #16
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}

08005f82 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f82:	b580      	push	{r7, lr}
 8005f84:	b084      	sub	sp, #16
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	60f8      	str	r0, [r7, #12]
 8005f8a:	60b9      	str	r1, [r7, #8]
 8005f8c:	603b      	str	r3, [r7, #0]
 8005f8e:	4613      	mov	r3, r2
 8005f90:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f92:	e05e      	b.n	8006052 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f94:	69bb      	ldr	r3, [r7, #24]
 8005f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f9a:	d05a      	beq.n	8006052 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f9c:	f7fc fc6e 	bl	800287c <HAL_GetTick>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	1ad3      	subs	r3, r2, r3
 8005fa6:	69ba      	ldr	r2, [r7, #24]
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d302      	bcc.n	8005fb2 <UART_WaitOnFlagUntilTimeout+0x30>
 8005fac:	69bb      	ldr	r3, [r7, #24]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d11b      	bne.n	8005fea <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005fc0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	689a      	ldr	r2, [r3, #8]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f022 0201 	bic.w	r2, r2, #1
 8005fd0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2220      	movs	r2, #32
 8005fd6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2220      	movs	r2, #32
 8005fdc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005fe6:	2303      	movs	r3, #3
 8005fe8:	e043      	b.n	8006072 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f003 0304 	and.w	r3, r3, #4
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d02c      	beq.n	8006052 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	69db      	ldr	r3, [r3, #28]
 8005ffe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006002:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006006:	d124      	bne.n	8006052 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006010:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006020:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	689a      	ldr	r2, [r3, #8]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f022 0201 	bic.w	r2, r2, #1
 8006030:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2220      	movs	r2, #32
 8006036:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2220      	movs	r2, #32
 800603c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2220      	movs	r2, #32
 8006042:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2200      	movs	r2, #0
 800604a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800604e:	2303      	movs	r3, #3
 8006050:	e00f      	b.n	8006072 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	69da      	ldr	r2, [r3, #28]
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	4013      	ands	r3, r2
 800605c:	68ba      	ldr	r2, [r7, #8]
 800605e:	429a      	cmp	r2, r3
 8006060:	bf0c      	ite	eq
 8006062:	2301      	moveq	r3, #1
 8006064:	2300      	movne	r3, #0
 8006066:	b2db      	uxtb	r3, r3
 8006068:	461a      	mov	r2, r3
 800606a:	79fb      	ldrb	r3, [r7, #7]
 800606c:	429a      	cmp	r2, r3
 800606e:	d091      	beq.n	8005f94 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006070:	2300      	movs	r3, #0
}
 8006072:	4618      	mov	r0, r3
 8006074:	3710      	adds	r7, #16
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}
	...

0800607c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b084      	sub	sp, #16
 8006080:	af00      	add	r7, sp, #0
 8006082:	60f8      	str	r0, [r7, #12]
 8006084:	60b9      	str	r1, [r7, #8]
 8006086:	4613      	mov	r3, r2
 8006088:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	68ba      	ldr	r2, [r7, #8]
 800608e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	88fa      	ldrh	r2, [r7, #6]
 8006094:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2200      	movs	r2, #0
 800609c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2222      	movs	r2, #34	; 0x22
 80060a4:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d02b      	beq.n	8006106 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060b2:	4a25      	ldr	r2, [pc, #148]	; (8006148 <UART_Start_Receive_DMA+0xcc>)
 80060b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ba:	4a24      	ldr	r2, [pc, #144]	; (800614c <UART_Start_Receive_DMA+0xd0>)
 80060bc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060c2:	4a23      	ldr	r2, [pc, #140]	; (8006150 <UART_Start_Receive_DMA+0xd4>)
 80060c4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ca:	2200      	movs	r2, #0
 80060cc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	3324      	adds	r3, #36	; 0x24
 80060d8:	4619      	mov	r1, r3
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060de:	461a      	mov	r2, r3
 80060e0:	88fb      	ldrh	r3, [r7, #6]
 80060e2:	f7fc fd95 	bl	8002c10 <HAL_DMA_Start_IT>
 80060e6:	4603      	mov	r3, r0
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d00c      	beq.n	8006106 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2210      	movs	r2, #16
 80060f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2200      	movs	r2, #0
 80060f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2220      	movs	r2, #32
 8006100:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	e01c      	b.n	8006140 <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2200      	movs	r2, #0
 800610a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800611c:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	689a      	ldr	r2, [r3, #8]
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f042 0201 	orr.w	r2, r2, #1
 800612c:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	689a      	ldr	r2, [r3, #8]
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800613c:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800613e:	2300      	movs	r3, #0
}
 8006140:	4618      	mov	r0, r3
 8006142:	3710      	adds	r7, #16
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}
 8006148:	080061dd 	.word	0x080061dd
 800614c:	08006275 	.word	0x08006275
 8006150:	080062ad 	.word	0x080062ad

08006154 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006154:	b480      	push	{r7}
 8006156:	b083      	sub	sp, #12
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800616a:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2220      	movs	r2, #32
 8006170:	679a      	str	r2, [r3, #120]	; 0x78
}
 8006172:	bf00      	nop
 8006174:	370c      	adds	r7, #12
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr

0800617e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800617e:	b480      	push	{r7}
 8006180:	b083      	sub	sp, #12
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006194:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	689a      	ldr	r2, [r3, #8]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f022 0201 	bic.w	r2, r2, #1
 80061a4:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d107      	bne.n	80061be <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f022 0210 	bic.w	r2, r2, #16
 80061bc:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2220      	movs	r2, #32
 80061c2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2200      	movs	r2, #0
 80061c8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	665a      	str	r2, [r3, #100]	; 0x64
}
 80061d0:	bf00      	nop
 80061d2:	370c      	adds	r7, #12
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr

080061dc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b084      	sub	sp, #16
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061e8:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f003 0320 	and.w	r3, r3, #32
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d12a      	bne.n	800624e <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2200      	movs	r2, #0
 80061fc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800620e:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	689a      	ldr	r2, [r3, #8]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f022 0201 	bic.w	r2, r2, #1
 800621e:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	689a      	ldr	r2, [r3, #8]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800622e:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2220      	movs	r2, #32
 8006234:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800623a:	2b01      	cmp	r3, #1
 800623c:	d107      	bne.n	800624e <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f022 0210 	bic.w	r2, r2, #16
 800624c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006252:	2b01      	cmp	r3, #1
 8006254:	d107      	bne.n	8006266 <UART_DMAReceiveCplt+0x8a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800625c:	4619      	mov	r1, r3
 800625e:	68f8      	ldr	r0, [r7, #12]
 8006260:	f7ff fb64 	bl	800592c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006264:	e002      	b.n	800626c <UART_DMAReceiveCplt+0x90>
    HAL_UART_RxCpltCallback(huart);
 8006266:	68f8      	ldr	r0, [r7, #12]
 8006268:	f7fb f88c 	bl	8001384 <HAL_UART_RxCpltCallback>
}
 800626c:	bf00      	nop
 800626e:	3710      	adds	r7, #16
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}

08006274 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b084      	sub	sp, #16
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006280:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006286:	2b01      	cmp	r3, #1
 8006288:	d109      	bne.n	800629e <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006290:	085b      	lsrs	r3, r3, #1
 8006292:	b29b      	uxth	r3, r3
 8006294:	4619      	mov	r1, r3
 8006296:	68f8      	ldr	r0, [r7, #12]
 8006298:	f7ff fb48 	bl	800592c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800629c:	e002      	b.n	80062a4 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800629e:	68f8      	ldr	r0, [r7, #12]
 80062a0:	f7ff fb30 	bl	8005904 <HAL_UART_RxHalfCpltCallback>
}
 80062a4:	bf00      	nop
 80062a6:	3710      	adds	r7, #16
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}

080062ac <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b086      	sub	sp, #24
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062b8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062be:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062c4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062d0:	2b80      	cmp	r3, #128	; 0x80
 80062d2:	d109      	bne.n	80062e8 <UART_DMAError+0x3c>
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	2b21      	cmp	r3, #33	; 0x21
 80062d8:	d106      	bne.n	80062e8 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	2200      	movs	r2, #0
 80062de:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80062e2:	6978      	ldr	r0, [r7, #20]
 80062e4:	f7ff ff36 	bl	8006154 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062f2:	2b40      	cmp	r3, #64	; 0x40
 80062f4:	d109      	bne.n	800630a <UART_DMAError+0x5e>
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2b22      	cmp	r3, #34	; 0x22
 80062fa:	d106      	bne.n	800630a <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	2200      	movs	r2, #0
 8006300:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8006304:	6978      	ldr	r0, [r7, #20]
 8006306:	f7ff ff3a 	bl	800617e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006310:	f043 0210 	orr.w	r2, r3, #16
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800631a:	6978      	ldr	r0, [r7, #20]
 800631c:	f7ff fafc 	bl	8005918 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006320:	bf00      	nop
 8006322:	3718      	adds	r7, #24
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}

08006328 <__NVIC_SetPriority>:
{
 8006328:	b480      	push	{r7}
 800632a:	b083      	sub	sp, #12
 800632c:	af00      	add	r7, sp, #0
 800632e:	4603      	mov	r3, r0
 8006330:	6039      	str	r1, [r7, #0]
 8006332:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006338:	2b00      	cmp	r3, #0
 800633a:	db0a      	blt.n	8006352 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	b2da      	uxtb	r2, r3
 8006340:	490c      	ldr	r1, [pc, #48]	; (8006374 <__NVIC_SetPriority+0x4c>)
 8006342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006346:	0112      	lsls	r2, r2, #4
 8006348:	b2d2      	uxtb	r2, r2
 800634a:	440b      	add	r3, r1
 800634c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006350:	e00a      	b.n	8006368 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	b2da      	uxtb	r2, r3
 8006356:	4908      	ldr	r1, [pc, #32]	; (8006378 <__NVIC_SetPriority+0x50>)
 8006358:	79fb      	ldrb	r3, [r7, #7]
 800635a:	f003 030f 	and.w	r3, r3, #15
 800635e:	3b04      	subs	r3, #4
 8006360:	0112      	lsls	r2, r2, #4
 8006362:	b2d2      	uxtb	r2, r2
 8006364:	440b      	add	r3, r1
 8006366:	761a      	strb	r2, [r3, #24]
}
 8006368:	bf00      	nop
 800636a:	370c      	adds	r7, #12
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr
 8006374:	e000e100 	.word	0xe000e100
 8006378:	e000ed00 	.word	0xe000ed00

0800637c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800637c:	b580      	push	{r7, lr}
 800637e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006380:	4b05      	ldr	r3, [pc, #20]	; (8006398 <SysTick_Handler+0x1c>)
 8006382:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006384:	f001 fee8 	bl	8008158 <xTaskGetSchedulerState>
 8006388:	4603      	mov	r3, r0
 800638a:	2b01      	cmp	r3, #1
 800638c:	d001      	beq.n	8006392 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800638e:	f002 fcd3 	bl	8008d38 <xPortSysTickHandler>
  }
}
 8006392:	bf00      	nop
 8006394:	bd80      	pop	{r7, pc}
 8006396:	bf00      	nop
 8006398:	e000e010 	.word	0xe000e010

0800639c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800639c:	b580      	push	{r7, lr}
 800639e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80063a0:	2100      	movs	r1, #0
 80063a2:	f06f 0004 	mvn.w	r0, #4
 80063a6:	f7ff ffbf 	bl	8006328 <__NVIC_SetPriority>
#endif
}
 80063aa:	bf00      	nop
 80063ac:	bd80      	pop	{r7, pc}
	...

080063b0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80063b0:	b480      	push	{r7}
 80063b2:	b083      	sub	sp, #12
 80063b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063b6:	f3ef 8305 	mrs	r3, IPSR
 80063ba:	603b      	str	r3, [r7, #0]
  return(result);
 80063bc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d003      	beq.n	80063ca <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80063c2:	f06f 0305 	mvn.w	r3, #5
 80063c6:	607b      	str	r3, [r7, #4]
 80063c8:	e00c      	b.n	80063e4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80063ca:	4b0a      	ldr	r3, [pc, #40]	; (80063f4 <osKernelInitialize+0x44>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d105      	bne.n	80063de <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80063d2:	4b08      	ldr	r3, [pc, #32]	; (80063f4 <osKernelInitialize+0x44>)
 80063d4:	2201      	movs	r2, #1
 80063d6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80063d8:	2300      	movs	r3, #0
 80063da:	607b      	str	r3, [r7, #4]
 80063dc:	e002      	b.n	80063e4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80063de:	f04f 33ff 	mov.w	r3, #4294967295
 80063e2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80063e4:	687b      	ldr	r3, [r7, #4]
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	370c      	adds	r7, #12
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr
 80063f2:	bf00      	nop
 80063f4:	20000094 	.word	0x20000094

080063f8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b082      	sub	sp, #8
 80063fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063fe:	f3ef 8305 	mrs	r3, IPSR
 8006402:	603b      	str	r3, [r7, #0]
  return(result);
 8006404:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006406:	2b00      	cmp	r3, #0
 8006408:	d003      	beq.n	8006412 <osKernelStart+0x1a>
    stat = osErrorISR;
 800640a:	f06f 0305 	mvn.w	r3, #5
 800640e:	607b      	str	r3, [r7, #4]
 8006410:	e010      	b.n	8006434 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006412:	4b0b      	ldr	r3, [pc, #44]	; (8006440 <osKernelStart+0x48>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	2b01      	cmp	r3, #1
 8006418:	d109      	bne.n	800642e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800641a:	f7ff ffbf 	bl	800639c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800641e:	4b08      	ldr	r3, [pc, #32]	; (8006440 <osKernelStart+0x48>)
 8006420:	2202      	movs	r2, #2
 8006422:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006424:	f001 fa50 	bl	80078c8 <vTaskStartScheduler>
      stat = osOK;
 8006428:	2300      	movs	r3, #0
 800642a:	607b      	str	r3, [r7, #4]
 800642c:	e002      	b.n	8006434 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800642e:	f04f 33ff 	mov.w	r3, #4294967295
 8006432:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006434:	687b      	ldr	r3, [r7, #4]
}
 8006436:	4618      	mov	r0, r3
 8006438:	3708      	adds	r7, #8
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
 800643e:	bf00      	nop
 8006440:	20000094 	.word	0x20000094

08006444 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006444:	b580      	push	{r7, lr}
 8006446:	b08e      	sub	sp, #56	; 0x38
 8006448:	af04      	add	r7, sp, #16
 800644a:	60f8      	str	r0, [r7, #12]
 800644c:	60b9      	str	r1, [r7, #8]
 800644e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006450:	2300      	movs	r3, #0
 8006452:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006454:	f3ef 8305 	mrs	r3, IPSR
 8006458:	617b      	str	r3, [r7, #20]
  return(result);
 800645a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800645c:	2b00      	cmp	r3, #0
 800645e:	d17e      	bne.n	800655e <osThreadNew+0x11a>
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d07b      	beq.n	800655e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006466:	2380      	movs	r3, #128	; 0x80
 8006468:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800646a:	2318      	movs	r3, #24
 800646c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800646e:	2300      	movs	r3, #0
 8006470:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006472:	f04f 33ff 	mov.w	r3, #4294967295
 8006476:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d045      	beq.n	800650a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d002      	beq.n	800648c <osThreadNew+0x48>
        name = attr->name;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	699b      	ldr	r3, [r3, #24]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d002      	beq.n	800649a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	699b      	ldr	r3, [r3, #24]
 8006498:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800649a:	69fb      	ldr	r3, [r7, #28]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d008      	beq.n	80064b2 <osThreadNew+0x6e>
 80064a0:	69fb      	ldr	r3, [r7, #28]
 80064a2:	2b38      	cmp	r3, #56	; 0x38
 80064a4:	d805      	bhi.n	80064b2 <osThreadNew+0x6e>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	f003 0301 	and.w	r3, r3, #1
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d001      	beq.n	80064b6 <osThreadNew+0x72>
        return (NULL);
 80064b2:	2300      	movs	r3, #0
 80064b4:	e054      	b.n	8006560 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	695b      	ldr	r3, [r3, #20]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d003      	beq.n	80064c6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	695b      	ldr	r3, [r3, #20]
 80064c2:	089b      	lsrs	r3, r3, #2
 80064c4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	689b      	ldr	r3, [r3, #8]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d00e      	beq.n	80064ec <osThreadNew+0xa8>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	68db      	ldr	r3, [r3, #12]
 80064d2:	2b5b      	cmp	r3, #91	; 0x5b
 80064d4:	d90a      	bls.n	80064ec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d006      	beq.n	80064ec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	695b      	ldr	r3, [r3, #20]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d002      	beq.n	80064ec <osThreadNew+0xa8>
        mem = 1;
 80064e6:	2301      	movs	r3, #1
 80064e8:	61bb      	str	r3, [r7, #24]
 80064ea:	e010      	b.n	800650e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d10c      	bne.n	800650e <osThreadNew+0xca>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d108      	bne.n	800650e <osThreadNew+0xca>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	691b      	ldr	r3, [r3, #16]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d104      	bne.n	800650e <osThreadNew+0xca>
          mem = 0;
 8006504:	2300      	movs	r3, #0
 8006506:	61bb      	str	r3, [r7, #24]
 8006508:	e001      	b.n	800650e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800650a:	2300      	movs	r3, #0
 800650c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800650e:	69bb      	ldr	r3, [r7, #24]
 8006510:	2b01      	cmp	r3, #1
 8006512:	d110      	bne.n	8006536 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800651c:	9202      	str	r2, [sp, #8]
 800651e:	9301      	str	r3, [sp, #4]
 8006520:	69fb      	ldr	r3, [r7, #28]
 8006522:	9300      	str	r3, [sp, #0]
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	6a3a      	ldr	r2, [r7, #32]
 8006528:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800652a:	68f8      	ldr	r0, [r7, #12]
 800652c:	f000 fff6 	bl	800751c <xTaskCreateStatic>
 8006530:	4603      	mov	r3, r0
 8006532:	613b      	str	r3, [r7, #16]
 8006534:	e013      	b.n	800655e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006536:	69bb      	ldr	r3, [r7, #24]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d110      	bne.n	800655e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800653c:	6a3b      	ldr	r3, [r7, #32]
 800653e:	b29a      	uxth	r2, r3
 8006540:	f107 0310 	add.w	r3, r7, #16
 8006544:	9301      	str	r3, [sp, #4]
 8006546:	69fb      	ldr	r3, [r7, #28]
 8006548:	9300      	str	r3, [sp, #0]
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800654e:	68f8      	ldr	r0, [r7, #12]
 8006550:	f001 f841 	bl	80075d6 <xTaskCreate>
 8006554:	4603      	mov	r3, r0
 8006556:	2b01      	cmp	r3, #1
 8006558:	d001      	beq.n	800655e <osThreadNew+0x11a>
            hTask = NULL;
 800655a:	2300      	movs	r3, #0
 800655c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800655e:	693b      	ldr	r3, [r7, #16]
}
 8006560:	4618      	mov	r0, r3
 8006562:	3728      	adds	r7, #40	; 0x28
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}

08006568 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006568:	b580      	push	{r7, lr}
 800656a:	b084      	sub	sp, #16
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006570:	f3ef 8305 	mrs	r3, IPSR
 8006574:	60bb      	str	r3, [r7, #8]
  return(result);
 8006576:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006578:	2b00      	cmp	r3, #0
 800657a:	d003      	beq.n	8006584 <osDelay+0x1c>
    stat = osErrorISR;
 800657c:	f06f 0305 	mvn.w	r3, #5
 8006580:	60fb      	str	r3, [r7, #12]
 8006582:	e007      	b.n	8006594 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006584:	2300      	movs	r3, #0
 8006586:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d002      	beq.n	8006594 <osDelay+0x2c>
      vTaskDelay(ticks);
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f001 f966 	bl	8007860 <vTaskDelay>
    }
  }

  return (stat);
 8006594:	68fb      	ldr	r3, [r7, #12]
}
 8006596:	4618      	mov	r0, r3
 8006598:	3710      	adds	r7, #16
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}

0800659e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800659e:	b580      	push	{r7, lr}
 80065a0:	b08a      	sub	sp, #40	; 0x28
 80065a2:	af02      	add	r7, sp, #8
 80065a4:	60f8      	str	r0, [r7, #12]
 80065a6:	60b9      	str	r1, [r7, #8]
 80065a8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80065aa:	2300      	movs	r3, #0
 80065ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065ae:	f3ef 8305 	mrs	r3, IPSR
 80065b2:	613b      	str	r3, [r7, #16]
  return(result);
 80065b4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d15f      	bne.n	800667a <osMessageQueueNew+0xdc>
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d05c      	beq.n	800667a <osMessageQueueNew+0xdc>
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d059      	beq.n	800667a <osMessageQueueNew+0xdc>
    mem = -1;
 80065c6:	f04f 33ff 	mov.w	r3, #4294967295
 80065ca:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d029      	beq.n	8006626 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d012      	beq.n	8006600 <osMessageQueueNew+0x62>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	68db      	ldr	r3, [r3, #12]
 80065de:	2b4f      	cmp	r3, #79	; 0x4f
 80065e0:	d90e      	bls.n	8006600 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d00a      	beq.n	8006600 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	695a      	ldr	r2, [r3, #20]
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	68b9      	ldr	r1, [r7, #8]
 80065f2:	fb01 f303 	mul.w	r3, r1, r3
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d302      	bcc.n	8006600 <osMessageQueueNew+0x62>
        mem = 1;
 80065fa:	2301      	movs	r3, #1
 80065fc:	61bb      	str	r3, [r7, #24]
 80065fe:	e014      	b.n	800662a <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d110      	bne.n	800662a <osMessageQueueNew+0x8c>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	68db      	ldr	r3, [r3, #12]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d10c      	bne.n	800662a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006614:	2b00      	cmp	r3, #0
 8006616:	d108      	bne.n	800662a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	695b      	ldr	r3, [r3, #20]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d104      	bne.n	800662a <osMessageQueueNew+0x8c>
          mem = 0;
 8006620:	2300      	movs	r3, #0
 8006622:	61bb      	str	r3, [r7, #24]
 8006624:	e001      	b.n	800662a <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8006626:	2300      	movs	r3, #0
 8006628:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800662a:	69bb      	ldr	r3, [r7, #24]
 800662c:	2b01      	cmp	r3, #1
 800662e:	d10b      	bne.n	8006648 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	691a      	ldr	r2, [r3, #16]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	2100      	movs	r1, #0
 800663a:	9100      	str	r1, [sp, #0]
 800663c:	68b9      	ldr	r1, [r7, #8]
 800663e:	68f8      	ldr	r0, [r7, #12]
 8006640:	f000 fa2e 	bl	8006aa0 <xQueueGenericCreateStatic>
 8006644:	61f8      	str	r0, [r7, #28]
 8006646:	e008      	b.n	800665a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8006648:	69bb      	ldr	r3, [r7, #24]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d105      	bne.n	800665a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800664e:	2200      	movs	r2, #0
 8006650:	68b9      	ldr	r1, [r7, #8]
 8006652:	68f8      	ldr	r0, [r7, #12]
 8006654:	f000 fa9c 	bl	8006b90 <xQueueGenericCreate>
 8006658:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800665a:	69fb      	ldr	r3, [r7, #28]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d00c      	beq.n	800667a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d003      	beq.n	800666e <osMessageQueueNew+0xd0>
        name = attr->name;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	617b      	str	r3, [r7, #20]
 800666c:	e001      	b.n	8006672 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800666e:	2300      	movs	r3, #0
 8006670:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8006672:	6979      	ldr	r1, [r7, #20]
 8006674:	69f8      	ldr	r0, [r7, #28]
 8006676:	f000 fef3 	bl	8007460 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800667a:	69fb      	ldr	r3, [r7, #28]
}
 800667c:	4618      	mov	r0, r3
 800667e:	3720      	adds	r7, #32
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}

08006684 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006684:	b580      	push	{r7, lr}
 8006686:	b088      	sub	sp, #32
 8006688:	af00      	add	r7, sp, #0
 800668a:	60f8      	str	r0, [r7, #12]
 800668c:	60b9      	str	r1, [r7, #8]
 800668e:	603b      	str	r3, [r7, #0]
 8006690:	4613      	mov	r3, r2
 8006692:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006698:	2300      	movs	r3, #0
 800669a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800669c:	f3ef 8305 	mrs	r3, IPSR
 80066a0:	617b      	str	r3, [r7, #20]
  return(result);
 80066a2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d028      	beq.n	80066fa <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80066a8:	69bb      	ldr	r3, [r7, #24]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d005      	beq.n	80066ba <osMessageQueuePut+0x36>
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d002      	beq.n	80066ba <osMessageQueuePut+0x36>
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d003      	beq.n	80066c2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80066ba:	f06f 0303 	mvn.w	r3, #3
 80066be:	61fb      	str	r3, [r7, #28]
 80066c0:	e038      	b.n	8006734 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80066c2:	2300      	movs	r3, #0
 80066c4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80066c6:	f107 0210 	add.w	r2, r7, #16
 80066ca:	2300      	movs	r3, #0
 80066cc:	68b9      	ldr	r1, [r7, #8]
 80066ce:	69b8      	ldr	r0, [r7, #24]
 80066d0:	f000 fbba 	bl	8006e48 <xQueueGenericSendFromISR>
 80066d4:	4603      	mov	r3, r0
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d003      	beq.n	80066e2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80066da:	f06f 0302 	mvn.w	r3, #2
 80066de:	61fb      	str	r3, [r7, #28]
 80066e0:	e028      	b.n	8006734 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d025      	beq.n	8006734 <osMessageQueuePut+0xb0>
 80066e8:	4b15      	ldr	r3, [pc, #84]	; (8006740 <osMessageQueuePut+0xbc>)
 80066ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066ee:	601a      	str	r2, [r3, #0]
 80066f0:	f3bf 8f4f 	dsb	sy
 80066f4:	f3bf 8f6f 	isb	sy
 80066f8:	e01c      	b.n	8006734 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80066fa:	69bb      	ldr	r3, [r7, #24]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d002      	beq.n	8006706 <osMessageQueuePut+0x82>
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d103      	bne.n	800670e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8006706:	f06f 0303 	mvn.w	r3, #3
 800670a:	61fb      	str	r3, [r7, #28]
 800670c:	e012      	b.n	8006734 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800670e:	2300      	movs	r3, #0
 8006710:	683a      	ldr	r2, [r7, #0]
 8006712:	68b9      	ldr	r1, [r7, #8]
 8006714:	69b8      	ldr	r0, [r7, #24]
 8006716:	f000 fa99 	bl	8006c4c <xQueueGenericSend>
 800671a:	4603      	mov	r3, r0
 800671c:	2b01      	cmp	r3, #1
 800671e:	d009      	beq.n	8006734 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d003      	beq.n	800672e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8006726:	f06f 0301 	mvn.w	r3, #1
 800672a:	61fb      	str	r3, [r7, #28]
 800672c:	e002      	b.n	8006734 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800672e:	f06f 0302 	mvn.w	r3, #2
 8006732:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006734:	69fb      	ldr	r3, [r7, #28]
}
 8006736:	4618      	mov	r0, r3
 8006738:	3720      	adds	r7, #32
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}
 800673e:	bf00      	nop
 8006740:	e000ed04 	.word	0xe000ed04

08006744 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006744:	b580      	push	{r7, lr}
 8006746:	b088      	sub	sp, #32
 8006748:	af00      	add	r7, sp, #0
 800674a:	60f8      	str	r0, [r7, #12]
 800674c:	60b9      	str	r1, [r7, #8]
 800674e:	607a      	str	r2, [r7, #4]
 8006750:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006756:	2300      	movs	r3, #0
 8006758:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800675a:	f3ef 8305 	mrs	r3, IPSR
 800675e:	617b      	str	r3, [r7, #20]
  return(result);
 8006760:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006762:	2b00      	cmp	r3, #0
 8006764:	d028      	beq.n	80067b8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006766:	69bb      	ldr	r3, [r7, #24]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d005      	beq.n	8006778 <osMessageQueueGet+0x34>
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d002      	beq.n	8006778 <osMessageQueueGet+0x34>
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d003      	beq.n	8006780 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8006778:	f06f 0303 	mvn.w	r3, #3
 800677c:	61fb      	str	r3, [r7, #28]
 800677e:	e037      	b.n	80067f0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8006780:	2300      	movs	r3, #0
 8006782:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006784:	f107 0310 	add.w	r3, r7, #16
 8006788:	461a      	mov	r2, r3
 800678a:	68b9      	ldr	r1, [r7, #8]
 800678c:	69b8      	ldr	r0, [r7, #24]
 800678e:	f000 fcd7 	bl	8007140 <xQueueReceiveFromISR>
 8006792:	4603      	mov	r3, r0
 8006794:	2b01      	cmp	r3, #1
 8006796:	d003      	beq.n	80067a0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8006798:	f06f 0302 	mvn.w	r3, #2
 800679c:	61fb      	str	r3, [r7, #28]
 800679e:	e027      	b.n	80067f0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d024      	beq.n	80067f0 <osMessageQueueGet+0xac>
 80067a6:	4b15      	ldr	r3, [pc, #84]	; (80067fc <osMessageQueueGet+0xb8>)
 80067a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067ac:	601a      	str	r2, [r3, #0]
 80067ae:	f3bf 8f4f 	dsb	sy
 80067b2:	f3bf 8f6f 	isb	sy
 80067b6:	e01b      	b.n	80067f0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80067b8:	69bb      	ldr	r3, [r7, #24]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d002      	beq.n	80067c4 <osMessageQueueGet+0x80>
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d103      	bne.n	80067cc <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80067c4:	f06f 0303 	mvn.w	r3, #3
 80067c8:	61fb      	str	r3, [r7, #28]
 80067ca:	e011      	b.n	80067f0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80067cc:	683a      	ldr	r2, [r7, #0]
 80067ce:	68b9      	ldr	r1, [r7, #8]
 80067d0:	69b8      	ldr	r0, [r7, #24]
 80067d2:	f000 fbd5 	bl	8006f80 <xQueueReceive>
 80067d6:	4603      	mov	r3, r0
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d009      	beq.n	80067f0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d003      	beq.n	80067ea <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80067e2:	f06f 0301 	mvn.w	r3, #1
 80067e6:	61fb      	str	r3, [r7, #28]
 80067e8:	e002      	b.n	80067f0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80067ea:	f06f 0302 	mvn.w	r3, #2
 80067ee:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80067f0:	69fb      	ldr	r3, [r7, #28]
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3720      	adds	r7, #32
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	bf00      	nop
 80067fc:	e000ed04 	.word	0xe000ed04

08006800 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006800:	b480      	push	{r7}
 8006802:	b085      	sub	sp, #20
 8006804:	af00      	add	r7, sp, #0
 8006806:	60f8      	str	r0, [r7, #12]
 8006808:	60b9      	str	r1, [r7, #8]
 800680a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	4a07      	ldr	r2, [pc, #28]	; (800682c <vApplicationGetIdleTaskMemory+0x2c>)
 8006810:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	4a06      	ldr	r2, [pc, #24]	; (8006830 <vApplicationGetIdleTaskMemory+0x30>)
 8006816:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2280      	movs	r2, #128	; 0x80
 800681c:	601a      	str	r2, [r3, #0]
}
 800681e:	bf00      	nop
 8006820:	3714      	adds	r7, #20
 8006822:	46bd      	mov	sp, r7
 8006824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006828:	4770      	bx	lr
 800682a:	bf00      	nop
 800682c:	20000098 	.word	0x20000098
 8006830:	200000f4 	.word	0x200000f4

08006834 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006834:	b480      	push	{r7}
 8006836:	b085      	sub	sp, #20
 8006838:	af00      	add	r7, sp, #0
 800683a:	60f8      	str	r0, [r7, #12]
 800683c:	60b9      	str	r1, [r7, #8]
 800683e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	4a07      	ldr	r2, [pc, #28]	; (8006860 <vApplicationGetTimerTaskMemory+0x2c>)
 8006844:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	4a06      	ldr	r2, [pc, #24]	; (8006864 <vApplicationGetTimerTaskMemory+0x30>)
 800684a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006852:	601a      	str	r2, [r3, #0]
}
 8006854:	bf00      	nop
 8006856:	3714      	adds	r7, #20
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr
 8006860:	200002f4 	.word	0x200002f4
 8006864:	20000350 	.word	0x20000350

08006868 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006868:	b480      	push	{r7}
 800686a:	b083      	sub	sp, #12
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f103 0208 	add.w	r2, r3, #8
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f04f 32ff 	mov.w	r2, #4294967295
 8006880:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f103 0208 	add.w	r2, r3, #8
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f103 0208 	add.w	r2, r3, #8
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2200      	movs	r2, #0
 800689a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800689c:	bf00      	nop
 800689e:	370c      	adds	r7, #12
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr

080068a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80068a8:	b480      	push	{r7}
 80068aa:	b083      	sub	sp, #12
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2200      	movs	r2, #0
 80068b4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80068b6:	bf00      	nop
 80068b8:	370c      	adds	r7, #12
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr

080068c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80068c2:	b480      	push	{r7}
 80068c4:	b085      	sub	sp, #20
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	6078      	str	r0, [r7, #4]
 80068ca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	68fa      	ldr	r2, [r7, #12]
 80068d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	689a      	ldr	r2, [r3, #8]
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	683a      	ldr	r2, [r7, #0]
 80068e6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	683a      	ldr	r2, [r7, #0]
 80068ec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	1c5a      	adds	r2, r3, #1
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	601a      	str	r2, [r3, #0]
}
 80068fe:	bf00      	nop
 8006900:	3714      	adds	r7, #20
 8006902:	46bd      	mov	sp, r7
 8006904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006908:	4770      	bx	lr

0800690a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800690a:	b480      	push	{r7}
 800690c:	b085      	sub	sp, #20
 800690e:	af00      	add	r7, sp, #0
 8006910:	6078      	str	r0, [r7, #4]
 8006912:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006920:	d103      	bne.n	800692a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	691b      	ldr	r3, [r3, #16]
 8006926:	60fb      	str	r3, [r7, #12]
 8006928:	e00c      	b.n	8006944 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	3308      	adds	r3, #8
 800692e:	60fb      	str	r3, [r7, #12]
 8006930:	e002      	b.n	8006938 <vListInsert+0x2e>
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	60fb      	str	r3, [r7, #12]
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	68ba      	ldr	r2, [r7, #8]
 8006940:	429a      	cmp	r2, r3
 8006942:	d2f6      	bcs.n	8006932 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	685a      	ldr	r2, [r3, #4]
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	683a      	ldr	r2, [r7, #0]
 8006952:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	68fa      	ldr	r2, [r7, #12]
 8006958:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	683a      	ldr	r2, [r7, #0]
 800695e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	687a      	ldr	r2, [r7, #4]
 8006964:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	1c5a      	adds	r2, r3, #1
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	601a      	str	r2, [r3, #0]
}
 8006970:	bf00      	nop
 8006972:	3714      	adds	r7, #20
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr

0800697c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800697c:	b480      	push	{r7}
 800697e:	b085      	sub	sp, #20
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	691b      	ldr	r3, [r3, #16]
 8006988:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	6892      	ldr	r2, [r2, #8]
 8006992:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	6852      	ldr	r2, [r2, #4]
 800699c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d103      	bne.n	80069b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	689a      	ldr	r2, [r3, #8]
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	1e5a      	subs	r2, r3, #1
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	3714      	adds	r7, #20
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr

080069d0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b084      	sub	sp, #16
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
 80069d8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d10a      	bne.n	80069fa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80069e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e8:	f383 8811 	msr	BASEPRI, r3
 80069ec:	f3bf 8f6f 	isb	sy
 80069f0:	f3bf 8f4f 	dsb	sy
 80069f4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80069f6:	bf00      	nop
 80069f8:	e7fe      	b.n	80069f8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80069fa:	f002 f90b 	bl	8008c14 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681a      	ldr	r2, [r3, #0]
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a06:	68f9      	ldr	r1, [r7, #12]
 8006a08:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006a0a:	fb01 f303 	mul.w	r3, r1, r3
 8006a0e:	441a      	add	r2, r3
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2200      	movs	r2, #0
 8006a18:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681a      	ldr	r2, [r3, #0]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681a      	ldr	r2, [r3, #0]
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a2a:	3b01      	subs	r3, #1
 8006a2c:	68f9      	ldr	r1, [r7, #12]
 8006a2e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006a30:	fb01 f303 	mul.w	r3, r1, r3
 8006a34:	441a      	add	r2, r3
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	22ff      	movs	r2, #255	; 0xff
 8006a3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	22ff      	movs	r2, #255	; 0xff
 8006a46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d114      	bne.n	8006a7a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	691b      	ldr	r3, [r3, #16]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d01a      	beq.n	8006a8e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	3310      	adds	r3, #16
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f001 f9bd 	bl	8007ddc <xTaskRemoveFromEventList>
 8006a62:	4603      	mov	r3, r0
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d012      	beq.n	8006a8e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006a68:	4b0c      	ldr	r3, [pc, #48]	; (8006a9c <xQueueGenericReset+0xcc>)
 8006a6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a6e:	601a      	str	r2, [r3, #0]
 8006a70:	f3bf 8f4f 	dsb	sy
 8006a74:	f3bf 8f6f 	isb	sy
 8006a78:	e009      	b.n	8006a8e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	3310      	adds	r3, #16
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f7ff fef2 	bl	8006868 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	3324      	adds	r3, #36	; 0x24
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f7ff feed 	bl	8006868 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006a8e:	f002 f8f1 	bl	8008c74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006a92:	2301      	movs	r3, #1
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3710      	adds	r7, #16
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}
 8006a9c:	e000ed04 	.word	0xe000ed04

08006aa0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b08e      	sub	sp, #56	; 0x38
 8006aa4:	af02      	add	r7, sp, #8
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	60b9      	str	r1, [r7, #8]
 8006aaa:	607a      	str	r2, [r7, #4]
 8006aac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d10a      	bne.n	8006aca <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab8:	f383 8811 	msr	BASEPRI, r3
 8006abc:	f3bf 8f6f 	isb	sy
 8006ac0:	f3bf 8f4f 	dsb	sy
 8006ac4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006ac6:	bf00      	nop
 8006ac8:	e7fe      	b.n	8006ac8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d10a      	bne.n	8006ae6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad4:	f383 8811 	msr	BASEPRI, r3
 8006ad8:	f3bf 8f6f 	isb	sy
 8006adc:	f3bf 8f4f 	dsb	sy
 8006ae0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006ae2:	bf00      	nop
 8006ae4:	e7fe      	b.n	8006ae4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d002      	beq.n	8006af2 <xQueueGenericCreateStatic+0x52>
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d001      	beq.n	8006af6 <xQueueGenericCreateStatic+0x56>
 8006af2:	2301      	movs	r3, #1
 8006af4:	e000      	b.n	8006af8 <xQueueGenericCreateStatic+0x58>
 8006af6:	2300      	movs	r3, #0
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d10a      	bne.n	8006b12 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b00:	f383 8811 	msr	BASEPRI, r3
 8006b04:	f3bf 8f6f 	isb	sy
 8006b08:	f3bf 8f4f 	dsb	sy
 8006b0c:	623b      	str	r3, [r7, #32]
}
 8006b0e:	bf00      	nop
 8006b10:	e7fe      	b.n	8006b10 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d102      	bne.n	8006b1e <xQueueGenericCreateStatic+0x7e>
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d101      	bne.n	8006b22 <xQueueGenericCreateStatic+0x82>
 8006b1e:	2301      	movs	r3, #1
 8006b20:	e000      	b.n	8006b24 <xQueueGenericCreateStatic+0x84>
 8006b22:	2300      	movs	r3, #0
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d10a      	bne.n	8006b3e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b2c:	f383 8811 	msr	BASEPRI, r3
 8006b30:	f3bf 8f6f 	isb	sy
 8006b34:	f3bf 8f4f 	dsb	sy
 8006b38:	61fb      	str	r3, [r7, #28]
}
 8006b3a:	bf00      	nop
 8006b3c:	e7fe      	b.n	8006b3c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006b3e:	2350      	movs	r3, #80	; 0x50
 8006b40:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	2b50      	cmp	r3, #80	; 0x50
 8006b46:	d00a      	beq.n	8006b5e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b4c:	f383 8811 	msr	BASEPRI, r3
 8006b50:	f3bf 8f6f 	isb	sy
 8006b54:	f3bf 8f4f 	dsb	sy
 8006b58:	61bb      	str	r3, [r7, #24]
}
 8006b5a:	bf00      	nop
 8006b5c:	e7fe      	b.n	8006b5c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006b5e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d00d      	beq.n	8006b86 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006b72:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b78:	9300      	str	r3, [sp, #0]
 8006b7a:	4613      	mov	r3, r2
 8006b7c:	687a      	ldr	r2, [r7, #4]
 8006b7e:	68b9      	ldr	r1, [r7, #8]
 8006b80:	68f8      	ldr	r0, [r7, #12]
 8006b82:	f000 f83f 	bl	8006c04 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3730      	adds	r7, #48	; 0x30
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}

08006b90 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b08a      	sub	sp, #40	; 0x28
 8006b94:	af02      	add	r7, sp, #8
 8006b96:	60f8      	str	r0, [r7, #12]
 8006b98:	60b9      	str	r1, [r7, #8]
 8006b9a:	4613      	mov	r3, r2
 8006b9c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d10a      	bne.n	8006bba <xQueueGenericCreate+0x2a>
	__asm volatile
 8006ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba8:	f383 8811 	msr	BASEPRI, r3
 8006bac:	f3bf 8f6f 	isb	sy
 8006bb0:	f3bf 8f4f 	dsb	sy
 8006bb4:	613b      	str	r3, [r7, #16]
}
 8006bb6:	bf00      	nop
 8006bb8:	e7fe      	b.n	8006bb8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	68ba      	ldr	r2, [r7, #8]
 8006bbe:	fb02 f303 	mul.w	r3, r2, r3
 8006bc2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006bc4:	69fb      	ldr	r3, [r7, #28]
 8006bc6:	3350      	adds	r3, #80	; 0x50
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f002 f945 	bl	8008e58 <pvPortMalloc>
 8006bce:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006bd0:	69bb      	ldr	r3, [r7, #24]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d011      	beq.n	8006bfa <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006bd6:	69bb      	ldr	r3, [r7, #24]
 8006bd8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	3350      	adds	r3, #80	; 0x50
 8006bde:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006be0:	69bb      	ldr	r3, [r7, #24]
 8006be2:	2200      	movs	r2, #0
 8006be4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006be8:	79fa      	ldrb	r2, [r7, #7]
 8006bea:	69bb      	ldr	r3, [r7, #24]
 8006bec:	9300      	str	r3, [sp, #0]
 8006bee:	4613      	mov	r3, r2
 8006bf0:	697a      	ldr	r2, [r7, #20]
 8006bf2:	68b9      	ldr	r1, [r7, #8]
 8006bf4:	68f8      	ldr	r0, [r7, #12]
 8006bf6:	f000 f805 	bl	8006c04 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006bfa:	69bb      	ldr	r3, [r7, #24]
	}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3720      	adds	r7, #32
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b084      	sub	sp, #16
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	60f8      	str	r0, [r7, #12]
 8006c0c:	60b9      	str	r1, [r7, #8]
 8006c0e:	607a      	str	r2, [r7, #4]
 8006c10:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d103      	bne.n	8006c20 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006c18:	69bb      	ldr	r3, [r7, #24]
 8006c1a:	69ba      	ldr	r2, [r7, #24]
 8006c1c:	601a      	str	r2, [r3, #0]
 8006c1e:	e002      	b.n	8006c26 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006c20:	69bb      	ldr	r3, [r7, #24]
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006c26:	69bb      	ldr	r3, [r7, #24]
 8006c28:	68fa      	ldr	r2, [r7, #12]
 8006c2a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006c2c:	69bb      	ldr	r3, [r7, #24]
 8006c2e:	68ba      	ldr	r2, [r7, #8]
 8006c30:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006c32:	2101      	movs	r1, #1
 8006c34:	69b8      	ldr	r0, [r7, #24]
 8006c36:	f7ff fecb 	bl	80069d0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006c3a:	69bb      	ldr	r3, [r7, #24]
 8006c3c:	78fa      	ldrb	r2, [r7, #3]
 8006c3e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006c42:	bf00      	nop
 8006c44:	3710      	adds	r7, #16
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}
	...

08006c4c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b08e      	sub	sp, #56	; 0x38
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	60f8      	str	r0, [r7, #12]
 8006c54:	60b9      	str	r1, [r7, #8]
 8006c56:	607a      	str	r2, [r7, #4]
 8006c58:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d10a      	bne.n	8006c7e <xQueueGenericSend+0x32>
	__asm volatile
 8006c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c6c:	f383 8811 	msr	BASEPRI, r3
 8006c70:	f3bf 8f6f 	isb	sy
 8006c74:	f3bf 8f4f 	dsb	sy
 8006c78:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006c7a:	bf00      	nop
 8006c7c:	e7fe      	b.n	8006c7c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d103      	bne.n	8006c8c <xQueueGenericSend+0x40>
 8006c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d101      	bne.n	8006c90 <xQueueGenericSend+0x44>
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	e000      	b.n	8006c92 <xQueueGenericSend+0x46>
 8006c90:	2300      	movs	r3, #0
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d10a      	bne.n	8006cac <xQueueGenericSend+0x60>
	__asm volatile
 8006c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c9a:	f383 8811 	msr	BASEPRI, r3
 8006c9e:	f3bf 8f6f 	isb	sy
 8006ca2:	f3bf 8f4f 	dsb	sy
 8006ca6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006ca8:	bf00      	nop
 8006caa:	e7fe      	b.n	8006caa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	2b02      	cmp	r3, #2
 8006cb0:	d103      	bne.n	8006cba <xQueueGenericSend+0x6e>
 8006cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d101      	bne.n	8006cbe <xQueueGenericSend+0x72>
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e000      	b.n	8006cc0 <xQueueGenericSend+0x74>
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d10a      	bne.n	8006cda <xQueueGenericSend+0x8e>
	__asm volatile
 8006cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc8:	f383 8811 	msr	BASEPRI, r3
 8006ccc:	f3bf 8f6f 	isb	sy
 8006cd0:	f3bf 8f4f 	dsb	sy
 8006cd4:	623b      	str	r3, [r7, #32]
}
 8006cd6:	bf00      	nop
 8006cd8:	e7fe      	b.n	8006cd8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006cda:	f001 fa3d 	bl	8008158 <xTaskGetSchedulerState>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d102      	bne.n	8006cea <xQueueGenericSend+0x9e>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d101      	bne.n	8006cee <xQueueGenericSend+0xa2>
 8006cea:	2301      	movs	r3, #1
 8006cec:	e000      	b.n	8006cf0 <xQueueGenericSend+0xa4>
 8006cee:	2300      	movs	r3, #0
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d10a      	bne.n	8006d0a <xQueueGenericSend+0xbe>
	__asm volatile
 8006cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf8:	f383 8811 	msr	BASEPRI, r3
 8006cfc:	f3bf 8f6f 	isb	sy
 8006d00:	f3bf 8f4f 	dsb	sy
 8006d04:	61fb      	str	r3, [r7, #28]
}
 8006d06:	bf00      	nop
 8006d08:	e7fe      	b.n	8006d08 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006d0a:	f001 ff83 	bl	8008c14 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d302      	bcc.n	8006d20 <xQueueGenericSend+0xd4>
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	2b02      	cmp	r3, #2
 8006d1e:	d129      	bne.n	8006d74 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006d20:	683a      	ldr	r2, [r7, #0]
 8006d22:	68b9      	ldr	r1, [r7, #8]
 8006d24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d26:	f000 fa8b 	bl	8007240 <prvCopyDataToQueue>
 8006d2a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d010      	beq.n	8006d56 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d36:	3324      	adds	r3, #36	; 0x24
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f001 f84f 	bl	8007ddc <xTaskRemoveFromEventList>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d013      	beq.n	8006d6c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006d44:	4b3f      	ldr	r3, [pc, #252]	; (8006e44 <xQueueGenericSend+0x1f8>)
 8006d46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d4a:	601a      	str	r2, [r3, #0]
 8006d4c:	f3bf 8f4f 	dsb	sy
 8006d50:	f3bf 8f6f 	isb	sy
 8006d54:	e00a      	b.n	8006d6c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d007      	beq.n	8006d6c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006d5c:	4b39      	ldr	r3, [pc, #228]	; (8006e44 <xQueueGenericSend+0x1f8>)
 8006d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d62:	601a      	str	r2, [r3, #0]
 8006d64:	f3bf 8f4f 	dsb	sy
 8006d68:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006d6c:	f001 ff82 	bl	8008c74 <vPortExitCritical>
				return pdPASS;
 8006d70:	2301      	movs	r3, #1
 8006d72:	e063      	b.n	8006e3c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d103      	bne.n	8006d82 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006d7a:	f001 ff7b 	bl	8008c74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	e05c      	b.n	8006e3c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d106      	bne.n	8006d96 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006d88:	f107 0314 	add.w	r3, r7, #20
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f001 f889 	bl	8007ea4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006d92:	2301      	movs	r3, #1
 8006d94:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006d96:	f001 ff6d 	bl	8008c74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006d9a:	f000 fdfb 	bl	8007994 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006d9e:	f001 ff39 	bl	8008c14 <vPortEnterCritical>
 8006da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006da8:	b25b      	sxtb	r3, r3
 8006daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dae:	d103      	bne.n	8006db8 <xQueueGenericSend+0x16c>
 8006db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db2:	2200      	movs	r2, #0
 8006db4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006dbe:	b25b      	sxtb	r3, r3
 8006dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dc4:	d103      	bne.n	8006dce <xQueueGenericSend+0x182>
 8006dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc8:	2200      	movs	r2, #0
 8006dca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006dce:	f001 ff51 	bl	8008c74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006dd2:	1d3a      	adds	r2, r7, #4
 8006dd4:	f107 0314 	add.w	r3, r7, #20
 8006dd8:	4611      	mov	r1, r2
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f001 f878 	bl	8007ed0 <xTaskCheckForTimeOut>
 8006de0:	4603      	mov	r3, r0
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d124      	bne.n	8006e30 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006de6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006de8:	f000 fb22 	bl	8007430 <prvIsQueueFull>
 8006dec:	4603      	mov	r3, r0
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d018      	beq.n	8006e24 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df4:	3310      	adds	r3, #16
 8006df6:	687a      	ldr	r2, [r7, #4]
 8006df8:	4611      	mov	r1, r2
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f000 ff9e 	bl	8007d3c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006e00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e02:	f000 faad 	bl	8007360 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006e06:	f000 fdd3 	bl	80079b0 <xTaskResumeAll>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	f47f af7c 	bne.w	8006d0a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006e12:	4b0c      	ldr	r3, [pc, #48]	; (8006e44 <xQueueGenericSend+0x1f8>)
 8006e14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e18:	601a      	str	r2, [r3, #0]
 8006e1a:	f3bf 8f4f 	dsb	sy
 8006e1e:	f3bf 8f6f 	isb	sy
 8006e22:	e772      	b.n	8006d0a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006e24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e26:	f000 fa9b 	bl	8007360 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006e2a:	f000 fdc1 	bl	80079b0 <xTaskResumeAll>
 8006e2e:	e76c      	b.n	8006d0a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006e30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e32:	f000 fa95 	bl	8007360 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006e36:	f000 fdbb 	bl	80079b0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006e3a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3738      	adds	r7, #56	; 0x38
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}
 8006e44:	e000ed04 	.word	0xe000ed04

08006e48 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b090      	sub	sp, #64	; 0x40
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	60f8      	str	r0, [r7, #12]
 8006e50:	60b9      	str	r1, [r7, #8]
 8006e52:	607a      	str	r2, [r7, #4]
 8006e54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d10a      	bne.n	8006e76 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e64:	f383 8811 	msr	BASEPRI, r3
 8006e68:	f3bf 8f6f 	isb	sy
 8006e6c:	f3bf 8f4f 	dsb	sy
 8006e70:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006e72:	bf00      	nop
 8006e74:	e7fe      	b.n	8006e74 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d103      	bne.n	8006e84 <xQueueGenericSendFromISR+0x3c>
 8006e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d101      	bne.n	8006e88 <xQueueGenericSendFromISR+0x40>
 8006e84:	2301      	movs	r3, #1
 8006e86:	e000      	b.n	8006e8a <xQueueGenericSendFromISR+0x42>
 8006e88:	2300      	movs	r3, #0
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d10a      	bne.n	8006ea4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e92:	f383 8811 	msr	BASEPRI, r3
 8006e96:	f3bf 8f6f 	isb	sy
 8006e9a:	f3bf 8f4f 	dsb	sy
 8006e9e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006ea0:	bf00      	nop
 8006ea2:	e7fe      	b.n	8006ea2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	2b02      	cmp	r3, #2
 8006ea8:	d103      	bne.n	8006eb2 <xQueueGenericSendFromISR+0x6a>
 8006eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d101      	bne.n	8006eb6 <xQueueGenericSendFromISR+0x6e>
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	e000      	b.n	8006eb8 <xQueueGenericSendFromISR+0x70>
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d10a      	bne.n	8006ed2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec0:	f383 8811 	msr	BASEPRI, r3
 8006ec4:	f3bf 8f6f 	isb	sy
 8006ec8:	f3bf 8f4f 	dsb	sy
 8006ecc:	623b      	str	r3, [r7, #32]
}
 8006ece:	bf00      	nop
 8006ed0:	e7fe      	b.n	8006ed0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006ed2:	f001 ff81 	bl	8008dd8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006ed6:	f3ef 8211 	mrs	r2, BASEPRI
 8006eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ede:	f383 8811 	msr	BASEPRI, r3
 8006ee2:	f3bf 8f6f 	isb	sy
 8006ee6:	f3bf 8f4f 	dsb	sy
 8006eea:	61fa      	str	r2, [r7, #28]
 8006eec:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006eee:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006ef0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d302      	bcc.n	8006f04 <xQueueGenericSendFromISR+0xbc>
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	2b02      	cmp	r3, #2
 8006f02:	d12f      	bne.n	8006f64 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f12:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006f14:	683a      	ldr	r2, [r7, #0]
 8006f16:	68b9      	ldr	r1, [r7, #8]
 8006f18:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006f1a:	f000 f991 	bl	8007240 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006f1e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f26:	d112      	bne.n	8006f4e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d016      	beq.n	8006f5e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f32:	3324      	adds	r3, #36	; 0x24
 8006f34:	4618      	mov	r0, r3
 8006f36:	f000 ff51 	bl	8007ddc <xTaskRemoveFromEventList>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d00e      	beq.n	8006f5e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d00b      	beq.n	8006f5e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2201      	movs	r2, #1
 8006f4a:	601a      	str	r2, [r3, #0]
 8006f4c:	e007      	b.n	8006f5e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006f4e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006f52:	3301      	adds	r3, #1
 8006f54:	b2db      	uxtb	r3, r3
 8006f56:	b25a      	sxtb	r2, r3
 8006f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006f62:	e001      	b.n	8006f68 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006f64:	2300      	movs	r3, #0
 8006f66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f6a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006f72:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006f74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3740      	adds	r7, #64	; 0x40
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
	...

08006f80 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b08c      	sub	sp, #48	; 0x30
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	60f8      	str	r0, [r7, #12]
 8006f88:	60b9      	str	r1, [r7, #8]
 8006f8a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d10a      	bne.n	8006fb0 <xQueueReceive+0x30>
	__asm volatile
 8006f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f9e:	f383 8811 	msr	BASEPRI, r3
 8006fa2:	f3bf 8f6f 	isb	sy
 8006fa6:	f3bf 8f4f 	dsb	sy
 8006faa:	623b      	str	r3, [r7, #32]
}
 8006fac:	bf00      	nop
 8006fae:	e7fe      	b.n	8006fae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d103      	bne.n	8006fbe <xQueueReceive+0x3e>
 8006fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d101      	bne.n	8006fc2 <xQueueReceive+0x42>
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	e000      	b.n	8006fc4 <xQueueReceive+0x44>
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d10a      	bne.n	8006fde <xQueueReceive+0x5e>
	__asm volatile
 8006fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fcc:	f383 8811 	msr	BASEPRI, r3
 8006fd0:	f3bf 8f6f 	isb	sy
 8006fd4:	f3bf 8f4f 	dsb	sy
 8006fd8:	61fb      	str	r3, [r7, #28]
}
 8006fda:	bf00      	nop
 8006fdc:	e7fe      	b.n	8006fdc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006fde:	f001 f8bb 	bl	8008158 <xTaskGetSchedulerState>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d102      	bne.n	8006fee <xQueueReceive+0x6e>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d101      	bne.n	8006ff2 <xQueueReceive+0x72>
 8006fee:	2301      	movs	r3, #1
 8006ff0:	e000      	b.n	8006ff4 <xQueueReceive+0x74>
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d10a      	bne.n	800700e <xQueueReceive+0x8e>
	__asm volatile
 8006ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ffc:	f383 8811 	msr	BASEPRI, r3
 8007000:	f3bf 8f6f 	isb	sy
 8007004:	f3bf 8f4f 	dsb	sy
 8007008:	61bb      	str	r3, [r7, #24]
}
 800700a:	bf00      	nop
 800700c:	e7fe      	b.n	800700c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800700e:	f001 fe01 	bl	8008c14 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007016:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800701a:	2b00      	cmp	r3, #0
 800701c:	d01f      	beq.n	800705e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800701e:	68b9      	ldr	r1, [r7, #8]
 8007020:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007022:	f000 f977 	bl	8007314 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007028:	1e5a      	subs	r2, r3, #1
 800702a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800702c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800702e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007030:	691b      	ldr	r3, [r3, #16]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d00f      	beq.n	8007056 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007038:	3310      	adds	r3, #16
 800703a:	4618      	mov	r0, r3
 800703c:	f000 fece 	bl	8007ddc <xTaskRemoveFromEventList>
 8007040:	4603      	mov	r3, r0
 8007042:	2b00      	cmp	r3, #0
 8007044:	d007      	beq.n	8007056 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007046:	4b3d      	ldr	r3, [pc, #244]	; (800713c <xQueueReceive+0x1bc>)
 8007048:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800704c:	601a      	str	r2, [r3, #0]
 800704e:	f3bf 8f4f 	dsb	sy
 8007052:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007056:	f001 fe0d 	bl	8008c74 <vPortExitCritical>
				return pdPASS;
 800705a:	2301      	movs	r3, #1
 800705c:	e069      	b.n	8007132 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d103      	bne.n	800706c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007064:	f001 fe06 	bl	8008c74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007068:	2300      	movs	r3, #0
 800706a:	e062      	b.n	8007132 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800706c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800706e:	2b00      	cmp	r3, #0
 8007070:	d106      	bne.n	8007080 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007072:	f107 0310 	add.w	r3, r7, #16
 8007076:	4618      	mov	r0, r3
 8007078:	f000 ff14 	bl	8007ea4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800707c:	2301      	movs	r3, #1
 800707e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007080:	f001 fdf8 	bl	8008c74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007084:	f000 fc86 	bl	8007994 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007088:	f001 fdc4 	bl	8008c14 <vPortEnterCritical>
 800708c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800708e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007092:	b25b      	sxtb	r3, r3
 8007094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007098:	d103      	bne.n	80070a2 <xQueueReceive+0x122>
 800709a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800709c:	2200      	movs	r2, #0
 800709e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80070a8:	b25b      	sxtb	r3, r3
 80070aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070ae:	d103      	bne.n	80070b8 <xQueueReceive+0x138>
 80070b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b2:	2200      	movs	r2, #0
 80070b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80070b8:	f001 fddc 	bl	8008c74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80070bc:	1d3a      	adds	r2, r7, #4
 80070be:	f107 0310 	add.w	r3, r7, #16
 80070c2:	4611      	mov	r1, r2
 80070c4:	4618      	mov	r0, r3
 80070c6:	f000 ff03 	bl	8007ed0 <xTaskCheckForTimeOut>
 80070ca:	4603      	mov	r3, r0
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d123      	bne.n	8007118 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80070d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070d2:	f000 f997 	bl	8007404 <prvIsQueueEmpty>
 80070d6:	4603      	mov	r3, r0
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d017      	beq.n	800710c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80070dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070de:	3324      	adds	r3, #36	; 0x24
 80070e0:	687a      	ldr	r2, [r7, #4]
 80070e2:	4611      	mov	r1, r2
 80070e4:	4618      	mov	r0, r3
 80070e6:	f000 fe29 	bl	8007d3c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80070ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070ec:	f000 f938 	bl	8007360 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80070f0:	f000 fc5e 	bl	80079b0 <xTaskResumeAll>
 80070f4:	4603      	mov	r3, r0
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d189      	bne.n	800700e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80070fa:	4b10      	ldr	r3, [pc, #64]	; (800713c <xQueueReceive+0x1bc>)
 80070fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007100:	601a      	str	r2, [r3, #0]
 8007102:	f3bf 8f4f 	dsb	sy
 8007106:	f3bf 8f6f 	isb	sy
 800710a:	e780      	b.n	800700e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800710c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800710e:	f000 f927 	bl	8007360 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007112:	f000 fc4d 	bl	80079b0 <xTaskResumeAll>
 8007116:	e77a      	b.n	800700e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007118:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800711a:	f000 f921 	bl	8007360 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800711e:	f000 fc47 	bl	80079b0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007122:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007124:	f000 f96e 	bl	8007404 <prvIsQueueEmpty>
 8007128:	4603      	mov	r3, r0
 800712a:	2b00      	cmp	r3, #0
 800712c:	f43f af6f 	beq.w	800700e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007130:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007132:	4618      	mov	r0, r3
 8007134:	3730      	adds	r7, #48	; 0x30
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}
 800713a:	bf00      	nop
 800713c:	e000ed04 	.word	0xe000ed04

08007140 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b08e      	sub	sp, #56	; 0x38
 8007144:	af00      	add	r7, sp, #0
 8007146:	60f8      	str	r0, [r7, #12]
 8007148:	60b9      	str	r1, [r7, #8]
 800714a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007152:	2b00      	cmp	r3, #0
 8007154:	d10a      	bne.n	800716c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8007156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800715a:	f383 8811 	msr	BASEPRI, r3
 800715e:	f3bf 8f6f 	isb	sy
 8007162:	f3bf 8f4f 	dsb	sy
 8007166:	623b      	str	r3, [r7, #32]
}
 8007168:	bf00      	nop
 800716a:	e7fe      	b.n	800716a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d103      	bne.n	800717a <xQueueReceiveFromISR+0x3a>
 8007172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007176:	2b00      	cmp	r3, #0
 8007178:	d101      	bne.n	800717e <xQueueReceiveFromISR+0x3e>
 800717a:	2301      	movs	r3, #1
 800717c:	e000      	b.n	8007180 <xQueueReceiveFromISR+0x40>
 800717e:	2300      	movs	r3, #0
 8007180:	2b00      	cmp	r3, #0
 8007182:	d10a      	bne.n	800719a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8007184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007188:	f383 8811 	msr	BASEPRI, r3
 800718c:	f3bf 8f6f 	isb	sy
 8007190:	f3bf 8f4f 	dsb	sy
 8007194:	61fb      	str	r3, [r7, #28]
}
 8007196:	bf00      	nop
 8007198:	e7fe      	b.n	8007198 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800719a:	f001 fe1d 	bl	8008dd8 <vPortValidateInterruptPriority>
	__asm volatile
 800719e:	f3ef 8211 	mrs	r2, BASEPRI
 80071a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071a6:	f383 8811 	msr	BASEPRI, r3
 80071aa:	f3bf 8f6f 	isb	sy
 80071ae:	f3bf 8f4f 	dsb	sy
 80071b2:	61ba      	str	r2, [r7, #24]
 80071b4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80071b6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80071b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80071ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071be:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80071c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d02f      	beq.n	8007226 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80071c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80071cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80071d0:	68b9      	ldr	r1, [r7, #8]
 80071d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80071d4:	f000 f89e 	bl	8007314 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80071d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071da:	1e5a      	subs	r2, r3, #1
 80071dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071de:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80071e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80071e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071e8:	d112      	bne.n	8007210 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80071ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ec:	691b      	ldr	r3, [r3, #16]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d016      	beq.n	8007220 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80071f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f4:	3310      	adds	r3, #16
 80071f6:	4618      	mov	r0, r3
 80071f8:	f000 fdf0 	bl	8007ddc <xTaskRemoveFromEventList>
 80071fc:	4603      	mov	r3, r0
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d00e      	beq.n	8007220 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d00b      	beq.n	8007220 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2201      	movs	r2, #1
 800720c:	601a      	str	r2, [r3, #0]
 800720e:	e007      	b.n	8007220 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007210:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007214:	3301      	adds	r3, #1
 8007216:	b2db      	uxtb	r3, r3
 8007218:	b25a      	sxtb	r2, r3
 800721a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800721c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007220:	2301      	movs	r3, #1
 8007222:	637b      	str	r3, [r7, #52]	; 0x34
 8007224:	e001      	b.n	800722a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8007226:	2300      	movs	r3, #0
 8007228:	637b      	str	r3, [r7, #52]	; 0x34
 800722a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800722c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	f383 8811 	msr	BASEPRI, r3
}
 8007234:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007238:	4618      	mov	r0, r3
 800723a:	3738      	adds	r7, #56	; 0x38
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}

08007240 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b086      	sub	sp, #24
 8007244:	af00      	add	r7, sp, #0
 8007246:	60f8      	str	r0, [r7, #12]
 8007248:	60b9      	str	r1, [r7, #8]
 800724a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800724c:	2300      	movs	r3, #0
 800724e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007254:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800725a:	2b00      	cmp	r3, #0
 800725c:	d10d      	bne.n	800727a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d14d      	bne.n	8007302 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	689b      	ldr	r3, [r3, #8]
 800726a:	4618      	mov	r0, r3
 800726c:	f000 ff92 	bl	8008194 <xTaskPriorityDisinherit>
 8007270:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2200      	movs	r2, #0
 8007276:	609a      	str	r2, [r3, #8]
 8007278:	e043      	b.n	8007302 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d119      	bne.n	80072b4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	6858      	ldr	r0, [r3, #4]
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007288:	461a      	mov	r2, r3
 800728a:	68b9      	ldr	r1, [r7, #8]
 800728c:	f002 f80c 	bl	80092a8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	685a      	ldr	r2, [r3, #4]
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007298:	441a      	add	r2, r3
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	685a      	ldr	r2, [r3, #4]
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	429a      	cmp	r2, r3
 80072a8:	d32b      	bcc.n	8007302 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681a      	ldr	r2, [r3, #0]
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	605a      	str	r2, [r3, #4]
 80072b2:	e026      	b.n	8007302 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	68d8      	ldr	r0, [r3, #12]
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072bc:	461a      	mov	r2, r3
 80072be:	68b9      	ldr	r1, [r7, #8]
 80072c0:	f001 fff2 	bl	80092a8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	68da      	ldr	r2, [r3, #12]
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072cc:	425b      	negs	r3, r3
 80072ce:	441a      	add	r2, r3
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	68da      	ldr	r2, [r3, #12]
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	429a      	cmp	r2, r3
 80072de:	d207      	bcs.n	80072f0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	689a      	ldr	r2, [r3, #8]
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e8:	425b      	negs	r3, r3
 80072ea:	441a      	add	r2, r3
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2b02      	cmp	r3, #2
 80072f4:	d105      	bne.n	8007302 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d002      	beq.n	8007302 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	3b01      	subs	r3, #1
 8007300:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	1c5a      	adds	r2, r3, #1
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800730a:	697b      	ldr	r3, [r7, #20]
}
 800730c:	4618      	mov	r0, r3
 800730e:	3718      	adds	r7, #24
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b082      	sub	sp, #8
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007322:	2b00      	cmp	r3, #0
 8007324:	d018      	beq.n	8007358 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	68da      	ldr	r2, [r3, #12]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800732e:	441a      	add	r2, r3
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	68da      	ldr	r2, [r3, #12]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	429a      	cmp	r2, r3
 800733e:	d303      	bcc.n	8007348 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	68d9      	ldr	r1, [r3, #12]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007350:	461a      	mov	r2, r3
 8007352:	6838      	ldr	r0, [r7, #0]
 8007354:	f001 ffa8 	bl	80092a8 <memcpy>
	}
}
 8007358:	bf00      	nop
 800735a:	3708      	adds	r7, #8
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}

08007360 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b084      	sub	sp, #16
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007368:	f001 fc54 	bl	8008c14 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007372:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007374:	e011      	b.n	800739a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800737a:	2b00      	cmp	r3, #0
 800737c:	d012      	beq.n	80073a4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	3324      	adds	r3, #36	; 0x24
 8007382:	4618      	mov	r0, r3
 8007384:	f000 fd2a 	bl	8007ddc <xTaskRemoveFromEventList>
 8007388:	4603      	mov	r3, r0
 800738a:	2b00      	cmp	r3, #0
 800738c:	d001      	beq.n	8007392 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800738e:	f000 fe01 	bl	8007f94 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007392:	7bfb      	ldrb	r3, [r7, #15]
 8007394:	3b01      	subs	r3, #1
 8007396:	b2db      	uxtb	r3, r3
 8007398:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800739a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	dce9      	bgt.n	8007376 <prvUnlockQueue+0x16>
 80073a2:	e000      	b.n	80073a6 <prvUnlockQueue+0x46>
					break;
 80073a4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	22ff      	movs	r2, #255	; 0xff
 80073aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80073ae:	f001 fc61 	bl	8008c74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80073b2:	f001 fc2f 	bl	8008c14 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80073bc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80073be:	e011      	b.n	80073e4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	691b      	ldr	r3, [r3, #16]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d012      	beq.n	80073ee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	3310      	adds	r3, #16
 80073cc:	4618      	mov	r0, r3
 80073ce:	f000 fd05 	bl	8007ddc <xTaskRemoveFromEventList>
 80073d2:	4603      	mov	r3, r0
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d001      	beq.n	80073dc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80073d8:	f000 fddc 	bl	8007f94 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80073dc:	7bbb      	ldrb	r3, [r7, #14]
 80073de:	3b01      	subs	r3, #1
 80073e0:	b2db      	uxtb	r3, r3
 80073e2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80073e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	dce9      	bgt.n	80073c0 <prvUnlockQueue+0x60>
 80073ec:	e000      	b.n	80073f0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80073ee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	22ff      	movs	r2, #255	; 0xff
 80073f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80073f8:	f001 fc3c 	bl	8008c74 <vPortExitCritical>
}
 80073fc:	bf00      	nop
 80073fe:	3710      	adds	r7, #16
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}

08007404 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b084      	sub	sp, #16
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800740c:	f001 fc02 	bl	8008c14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007414:	2b00      	cmp	r3, #0
 8007416:	d102      	bne.n	800741e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007418:	2301      	movs	r3, #1
 800741a:	60fb      	str	r3, [r7, #12]
 800741c:	e001      	b.n	8007422 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800741e:	2300      	movs	r3, #0
 8007420:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007422:	f001 fc27 	bl	8008c74 <vPortExitCritical>

	return xReturn;
 8007426:	68fb      	ldr	r3, [r7, #12]
}
 8007428:	4618      	mov	r0, r3
 800742a:	3710      	adds	r7, #16
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}

08007430 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b084      	sub	sp, #16
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007438:	f001 fbec 	bl	8008c14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007444:	429a      	cmp	r2, r3
 8007446:	d102      	bne.n	800744e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007448:	2301      	movs	r3, #1
 800744a:	60fb      	str	r3, [r7, #12]
 800744c:	e001      	b.n	8007452 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800744e:	2300      	movs	r3, #0
 8007450:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007452:	f001 fc0f 	bl	8008c74 <vPortExitCritical>

	return xReturn;
 8007456:	68fb      	ldr	r3, [r7, #12]
}
 8007458:	4618      	mov	r0, r3
 800745a:	3710      	adds	r7, #16
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}

08007460 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007460:	b480      	push	{r7}
 8007462:	b085      	sub	sp, #20
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
 8007468:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800746a:	2300      	movs	r3, #0
 800746c:	60fb      	str	r3, [r7, #12]
 800746e:	e014      	b.n	800749a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007470:	4a0f      	ldr	r2, [pc, #60]	; (80074b0 <vQueueAddToRegistry+0x50>)
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d10b      	bne.n	8007494 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800747c:	490c      	ldr	r1, [pc, #48]	; (80074b0 <vQueueAddToRegistry+0x50>)
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	683a      	ldr	r2, [r7, #0]
 8007482:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007486:	4a0a      	ldr	r2, [pc, #40]	; (80074b0 <vQueueAddToRegistry+0x50>)
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	00db      	lsls	r3, r3, #3
 800748c:	4413      	add	r3, r2
 800748e:	687a      	ldr	r2, [r7, #4]
 8007490:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007492:	e006      	b.n	80074a2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	3301      	adds	r3, #1
 8007498:	60fb      	str	r3, [r7, #12]
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2b07      	cmp	r3, #7
 800749e:	d9e7      	bls.n	8007470 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80074a0:	bf00      	nop
 80074a2:	bf00      	nop
 80074a4:	3714      	adds	r7, #20
 80074a6:	46bd      	mov	sp, r7
 80074a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ac:	4770      	bx	lr
 80074ae:	bf00      	nop
 80074b0:	2000c1ac 	.word	0x2000c1ac

080074b4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b086      	sub	sp, #24
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	60f8      	str	r0, [r7, #12]
 80074bc:	60b9      	str	r1, [r7, #8]
 80074be:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80074c4:	f001 fba6 	bl	8008c14 <vPortEnterCritical>
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80074ce:	b25b      	sxtb	r3, r3
 80074d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074d4:	d103      	bne.n	80074de <vQueueWaitForMessageRestricted+0x2a>
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	2200      	movs	r2, #0
 80074da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80074e4:	b25b      	sxtb	r3, r3
 80074e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074ea:	d103      	bne.n	80074f4 <vQueueWaitForMessageRestricted+0x40>
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	2200      	movs	r2, #0
 80074f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80074f4:	f001 fbbe 	bl	8008c74 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d106      	bne.n	800750e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	3324      	adds	r3, #36	; 0x24
 8007504:	687a      	ldr	r2, [r7, #4]
 8007506:	68b9      	ldr	r1, [r7, #8]
 8007508:	4618      	mov	r0, r3
 800750a:	f000 fc3b 	bl	8007d84 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800750e:	6978      	ldr	r0, [r7, #20]
 8007510:	f7ff ff26 	bl	8007360 <prvUnlockQueue>
	}
 8007514:	bf00      	nop
 8007516:	3718      	adds	r7, #24
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}

0800751c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800751c:	b580      	push	{r7, lr}
 800751e:	b08e      	sub	sp, #56	; 0x38
 8007520:	af04      	add	r7, sp, #16
 8007522:	60f8      	str	r0, [r7, #12]
 8007524:	60b9      	str	r1, [r7, #8]
 8007526:	607a      	str	r2, [r7, #4]
 8007528:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800752a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800752c:	2b00      	cmp	r3, #0
 800752e:	d10a      	bne.n	8007546 <xTaskCreateStatic+0x2a>
	__asm volatile
 8007530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007534:	f383 8811 	msr	BASEPRI, r3
 8007538:	f3bf 8f6f 	isb	sy
 800753c:	f3bf 8f4f 	dsb	sy
 8007540:	623b      	str	r3, [r7, #32]
}
 8007542:	bf00      	nop
 8007544:	e7fe      	b.n	8007544 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007548:	2b00      	cmp	r3, #0
 800754a:	d10a      	bne.n	8007562 <xTaskCreateStatic+0x46>
	__asm volatile
 800754c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007550:	f383 8811 	msr	BASEPRI, r3
 8007554:	f3bf 8f6f 	isb	sy
 8007558:	f3bf 8f4f 	dsb	sy
 800755c:	61fb      	str	r3, [r7, #28]
}
 800755e:	bf00      	nop
 8007560:	e7fe      	b.n	8007560 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007562:	235c      	movs	r3, #92	; 0x5c
 8007564:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	2b5c      	cmp	r3, #92	; 0x5c
 800756a:	d00a      	beq.n	8007582 <xTaskCreateStatic+0x66>
	__asm volatile
 800756c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007570:	f383 8811 	msr	BASEPRI, r3
 8007574:	f3bf 8f6f 	isb	sy
 8007578:	f3bf 8f4f 	dsb	sy
 800757c:	61bb      	str	r3, [r7, #24]
}
 800757e:	bf00      	nop
 8007580:	e7fe      	b.n	8007580 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007582:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007586:	2b00      	cmp	r3, #0
 8007588:	d01e      	beq.n	80075c8 <xTaskCreateStatic+0xac>
 800758a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800758c:	2b00      	cmp	r3, #0
 800758e:	d01b      	beq.n	80075c8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007592:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007596:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007598:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800759a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759c:	2202      	movs	r2, #2
 800759e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80075a2:	2300      	movs	r3, #0
 80075a4:	9303      	str	r3, [sp, #12]
 80075a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a8:	9302      	str	r3, [sp, #8]
 80075aa:	f107 0314 	add.w	r3, r7, #20
 80075ae:	9301      	str	r3, [sp, #4]
 80075b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b2:	9300      	str	r3, [sp, #0]
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	687a      	ldr	r2, [r7, #4]
 80075b8:	68b9      	ldr	r1, [r7, #8]
 80075ba:	68f8      	ldr	r0, [r7, #12]
 80075bc:	f000 f850 	bl	8007660 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80075c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80075c2:	f000 f8dd 	bl	8007780 <prvAddNewTaskToReadyList>
 80075c6:	e001      	b.n	80075cc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80075c8:	2300      	movs	r3, #0
 80075ca:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80075cc:	697b      	ldr	r3, [r7, #20]
	}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3728      	adds	r7, #40	; 0x28
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}

080075d6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80075d6:	b580      	push	{r7, lr}
 80075d8:	b08c      	sub	sp, #48	; 0x30
 80075da:	af04      	add	r7, sp, #16
 80075dc:	60f8      	str	r0, [r7, #12]
 80075de:	60b9      	str	r1, [r7, #8]
 80075e0:	603b      	str	r3, [r7, #0]
 80075e2:	4613      	mov	r3, r2
 80075e4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80075e6:	88fb      	ldrh	r3, [r7, #6]
 80075e8:	009b      	lsls	r3, r3, #2
 80075ea:	4618      	mov	r0, r3
 80075ec:	f001 fc34 	bl	8008e58 <pvPortMalloc>
 80075f0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d00e      	beq.n	8007616 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80075f8:	205c      	movs	r0, #92	; 0x5c
 80075fa:	f001 fc2d 	bl	8008e58 <pvPortMalloc>
 80075fe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007600:	69fb      	ldr	r3, [r7, #28]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d003      	beq.n	800760e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007606:	69fb      	ldr	r3, [r7, #28]
 8007608:	697a      	ldr	r2, [r7, #20]
 800760a:	631a      	str	r2, [r3, #48]	; 0x30
 800760c:	e005      	b.n	800761a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800760e:	6978      	ldr	r0, [r7, #20]
 8007610:	f001 fcee 	bl	8008ff0 <vPortFree>
 8007614:	e001      	b.n	800761a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007616:	2300      	movs	r3, #0
 8007618:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800761a:	69fb      	ldr	r3, [r7, #28]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d017      	beq.n	8007650 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007620:	69fb      	ldr	r3, [r7, #28]
 8007622:	2200      	movs	r2, #0
 8007624:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007628:	88fa      	ldrh	r2, [r7, #6]
 800762a:	2300      	movs	r3, #0
 800762c:	9303      	str	r3, [sp, #12]
 800762e:	69fb      	ldr	r3, [r7, #28]
 8007630:	9302      	str	r3, [sp, #8]
 8007632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007634:	9301      	str	r3, [sp, #4]
 8007636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007638:	9300      	str	r3, [sp, #0]
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	68b9      	ldr	r1, [r7, #8]
 800763e:	68f8      	ldr	r0, [r7, #12]
 8007640:	f000 f80e 	bl	8007660 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007644:	69f8      	ldr	r0, [r7, #28]
 8007646:	f000 f89b 	bl	8007780 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800764a:	2301      	movs	r3, #1
 800764c:	61bb      	str	r3, [r7, #24]
 800764e:	e002      	b.n	8007656 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007650:	f04f 33ff 	mov.w	r3, #4294967295
 8007654:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007656:	69bb      	ldr	r3, [r7, #24]
	}
 8007658:	4618      	mov	r0, r3
 800765a:	3720      	adds	r7, #32
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}

08007660 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b088      	sub	sp, #32
 8007664:	af00      	add	r7, sp, #0
 8007666:	60f8      	str	r0, [r7, #12]
 8007668:	60b9      	str	r1, [r7, #8]
 800766a:	607a      	str	r2, [r7, #4]
 800766c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800766e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007670:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	009b      	lsls	r3, r3, #2
 8007676:	461a      	mov	r2, r3
 8007678:	21a5      	movs	r1, #165	; 0xa5
 800767a:	f001 fe23 	bl	80092c4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800767e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007680:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007688:	3b01      	subs	r3, #1
 800768a:	009b      	lsls	r3, r3, #2
 800768c:	4413      	add	r3, r2
 800768e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007690:	69bb      	ldr	r3, [r7, #24]
 8007692:	f023 0307 	bic.w	r3, r3, #7
 8007696:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007698:	69bb      	ldr	r3, [r7, #24]
 800769a:	f003 0307 	and.w	r3, r3, #7
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d00a      	beq.n	80076b8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80076a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076a6:	f383 8811 	msr	BASEPRI, r3
 80076aa:	f3bf 8f6f 	isb	sy
 80076ae:	f3bf 8f4f 	dsb	sy
 80076b2:	617b      	str	r3, [r7, #20]
}
 80076b4:	bf00      	nop
 80076b6:	e7fe      	b.n	80076b6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d01f      	beq.n	80076fe <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80076be:	2300      	movs	r3, #0
 80076c0:	61fb      	str	r3, [r7, #28]
 80076c2:	e012      	b.n	80076ea <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80076c4:	68ba      	ldr	r2, [r7, #8]
 80076c6:	69fb      	ldr	r3, [r7, #28]
 80076c8:	4413      	add	r3, r2
 80076ca:	7819      	ldrb	r1, [r3, #0]
 80076cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076ce:	69fb      	ldr	r3, [r7, #28]
 80076d0:	4413      	add	r3, r2
 80076d2:	3334      	adds	r3, #52	; 0x34
 80076d4:	460a      	mov	r2, r1
 80076d6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80076d8:	68ba      	ldr	r2, [r7, #8]
 80076da:	69fb      	ldr	r3, [r7, #28]
 80076dc:	4413      	add	r3, r2
 80076de:	781b      	ldrb	r3, [r3, #0]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d006      	beq.n	80076f2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80076e4:	69fb      	ldr	r3, [r7, #28]
 80076e6:	3301      	adds	r3, #1
 80076e8:	61fb      	str	r3, [r7, #28]
 80076ea:	69fb      	ldr	r3, [r7, #28]
 80076ec:	2b0f      	cmp	r3, #15
 80076ee:	d9e9      	bls.n	80076c4 <prvInitialiseNewTask+0x64>
 80076f0:	e000      	b.n	80076f4 <prvInitialiseNewTask+0x94>
			{
				break;
 80076f2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80076f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f6:	2200      	movs	r2, #0
 80076f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80076fc:	e003      	b.n	8007706 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80076fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007700:	2200      	movs	r2, #0
 8007702:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007708:	2b37      	cmp	r3, #55	; 0x37
 800770a:	d901      	bls.n	8007710 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800770c:	2337      	movs	r3, #55	; 0x37
 800770e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007712:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007714:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007718:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800771a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800771c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800771e:	2200      	movs	r2, #0
 8007720:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007724:	3304      	adds	r3, #4
 8007726:	4618      	mov	r0, r3
 8007728:	f7ff f8be 	bl	80068a8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800772c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800772e:	3318      	adds	r3, #24
 8007730:	4618      	mov	r0, r3
 8007732:	f7ff f8b9 	bl	80068a8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007738:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800773a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800773c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800773e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007744:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007748:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800774a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800774c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800774e:	2200      	movs	r2, #0
 8007750:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007754:	2200      	movs	r2, #0
 8007756:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800775a:	683a      	ldr	r2, [r7, #0]
 800775c:	68f9      	ldr	r1, [r7, #12]
 800775e:	69b8      	ldr	r0, [r7, #24]
 8007760:	f001 f928 	bl	80089b4 <pxPortInitialiseStack>
 8007764:	4602      	mov	r2, r0
 8007766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007768:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800776a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800776c:	2b00      	cmp	r3, #0
 800776e:	d002      	beq.n	8007776 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007772:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007774:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007776:	bf00      	nop
 8007778:	3720      	adds	r7, #32
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}
	...

08007780 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b082      	sub	sp, #8
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007788:	f001 fa44 	bl	8008c14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800778c:	4b2d      	ldr	r3, [pc, #180]	; (8007844 <prvAddNewTaskToReadyList+0xc4>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	3301      	adds	r3, #1
 8007792:	4a2c      	ldr	r2, [pc, #176]	; (8007844 <prvAddNewTaskToReadyList+0xc4>)
 8007794:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007796:	4b2c      	ldr	r3, [pc, #176]	; (8007848 <prvAddNewTaskToReadyList+0xc8>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d109      	bne.n	80077b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800779e:	4a2a      	ldr	r2, [pc, #168]	; (8007848 <prvAddNewTaskToReadyList+0xc8>)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80077a4:	4b27      	ldr	r3, [pc, #156]	; (8007844 <prvAddNewTaskToReadyList+0xc4>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d110      	bne.n	80077ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80077ac:	f000 fc16 	bl	8007fdc <prvInitialiseTaskLists>
 80077b0:	e00d      	b.n	80077ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80077b2:	4b26      	ldr	r3, [pc, #152]	; (800784c <prvAddNewTaskToReadyList+0xcc>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d109      	bne.n	80077ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80077ba:	4b23      	ldr	r3, [pc, #140]	; (8007848 <prvAddNewTaskToReadyList+0xc8>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d802      	bhi.n	80077ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80077c8:	4a1f      	ldr	r2, [pc, #124]	; (8007848 <prvAddNewTaskToReadyList+0xc8>)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80077ce:	4b20      	ldr	r3, [pc, #128]	; (8007850 <prvAddNewTaskToReadyList+0xd0>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	3301      	adds	r3, #1
 80077d4:	4a1e      	ldr	r2, [pc, #120]	; (8007850 <prvAddNewTaskToReadyList+0xd0>)
 80077d6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80077d8:	4b1d      	ldr	r3, [pc, #116]	; (8007850 <prvAddNewTaskToReadyList+0xd0>)
 80077da:	681a      	ldr	r2, [r3, #0]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077e4:	4b1b      	ldr	r3, [pc, #108]	; (8007854 <prvAddNewTaskToReadyList+0xd4>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	429a      	cmp	r2, r3
 80077ea:	d903      	bls.n	80077f4 <prvAddNewTaskToReadyList+0x74>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077f0:	4a18      	ldr	r2, [pc, #96]	; (8007854 <prvAddNewTaskToReadyList+0xd4>)
 80077f2:	6013      	str	r3, [r2, #0]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077f8:	4613      	mov	r3, r2
 80077fa:	009b      	lsls	r3, r3, #2
 80077fc:	4413      	add	r3, r2
 80077fe:	009b      	lsls	r3, r3, #2
 8007800:	4a15      	ldr	r2, [pc, #84]	; (8007858 <prvAddNewTaskToReadyList+0xd8>)
 8007802:	441a      	add	r2, r3
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	3304      	adds	r3, #4
 8007808:	4619      	mov	r1, r3
 800780a:	4610      	mov	r0, r2
 800780c:	f7ff f859 	bl	80068c2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007810:	f001 fa30 	bl	8008c74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007814:	4b0d      	ldr	r3, [pc, #52]	; (800784c <prvAddNewTaskToReadyList+0xcc>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d00e      	beq.n	800783a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800781c:	4b0a      	ldr	r3, [pc, #40]	; (8007848 <prvAddNewTaskToReadyList+0xc8>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007826:	429a      	cmp	r2, r3
 8007828:	d207      	bcs.n	800783a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800782a:	4b0c      	ldr	r3, [pc, #48]	; (800785c <prvAddNewTaskToReadyList+0xdc>)
 800782c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007830:	601a      	str	r2, [r3, #0]
 8007832:	f3bf 8f4f 	dsb	sy
 8007836:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800783a:	bf00      	nop
 800783c:	3708      	adds	r7, #8
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}
 8007842:	bf00      	nop
 8007844:	20000c24 	.word	0x20000c24
 8007848:	20000750 	.word	0x20000750
 800784c:	20000c30 	.word	0x20000c30
 8007850:	20000c40 	.word	0x20000c40
 8007854:	20000c2c 	.word	0x20000c2c
 8007858:	20000754 	.word	0x20000754
 800785c:	e000ed04 	.word	0xe000ed04

08007860 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007860:	b580      	push	{r7, lr}
 8007862:	b084      	sub	sp, #16
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007868:	2300      	movs	r3, #0
 800786a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d017      	beq.n	80078a2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007872:	4b13      	ldr	r3, [pc, #76]	; (80078c0 <vTaskDelay+0x60>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d00a      	beq.n	8007890 <vTaskDelay+0x30>
	__asm volatile
 800787a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800787e:	f383 8811 	msr	BASEPRI, r3
 8007882:	f3bf 8f6f 	isb	sy
 8007886:	f3bf 8f4f 	dsb	sy
 800788a:	60bb      	str	r3, [r7, #8]
}
 800788c:	bf00      	nop
 800788e:	e7fe      	b.n	800788e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007890:	f000 f880 	bl	8007994 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007894:	2100      	movs	r1, #0
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f000 fcea 	bl	8008270 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800789c:	f000 f888 	bl	80079b0 <xTaskResumeAll>
 80078a0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d107      	bne.n	80078b8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80078a8:	4b06      	ldr	r3, [pc, #24]	; (80078c4 <vTaskDelay+0x64>)
 80078aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078ae:	601a      	str	r2, [r3, #0]
 80078b0:	f3bf 8f4f 	dsb	sy
 80078b4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80078b8:	bf00      	nop
 80078ba:	3710      	adds	r7, #16
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}
 80078c0:	20000c4c 	.word	0x20000c4c
 80078c4:	e000ed04 	.word	0xe000ed04

080078c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b08a      	sub	sp, #40	; 0x28
 80078cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80078ce:	2300      	movs	r3, #0
 80078d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80078d2:	2300      	movs	r3, #0
 80078d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80078d6:	463a      	mov	r2, r7
 80078d8:	1d39      	adds	r1, r7, #4
 80078da:	f107 0308 	add.w	r3, r7, #8
 80078de:	4618      	mov	r0, r3
 80078e0:	f7fe ff8e 	bl	8006800 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80078e4:	6839      	ldr	r1, [r7, #0]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	68ba      	ldr	r2, [r7, #8]
 80078ea:	9202      	str	r2, [sp, #8]
 80078ec:	9301      	str	r3, [sp, #4]
 80078ee:	2300      	movs	r3, #0
 80078f0:	9300      	str	r3, [sp, #0]
 80078f2:	2300      	movs	r3, #0
 80078f4:	460a      	mov	r2, r1
 80078f6:	4921      	ldr	r1, [pc, #132]	; (800797c <vTaskStartScheduler+0xb4>)
 80078f8:	4821      	ldr	r0, [pc, #132]	; (8007980 <vTaskStartScheduler+0xb8>)
 80078fa:	f7ff fe0f 	bl	800751c <xTaskCreateStatic>
 80078fe:	4603      	mov	r3, r0
 8007900:	4a20      	ldr	r2, [pc, #128]	; (8007984 <vTaskStartScheduler+0xbc>)
 8007902:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007904:	4b1f      	ldr	r3, [pc, #124]	; (8007984 <vTaskStartScheduler+0xbc>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d002      	beq.n	8007912 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800790c:	2301      	movs	r3, #1
 800790e:	617b      	str	r3, [r7, #20]
 8007910:	e001      	b.n	8007916 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007912:	2300      	movs	r3, #0
 8007914:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	2b01      	cmp	r3, #1
 800791a:	d102      	bne.n	8007922 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800791c:	f000 fcfc 	bl	8008318 <xTimerCreateTimerTask>
 8007920:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	2b01      	cmp	r3, #1
 8007926:	d116      	bne.n	8007956 <vTaskStartScheduler+0x8e>
	__asm volatile
 8007928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800792c:	f383 8811 	msr	BASEPRI, r3
 8007930:	f3bf 8f6f 	isb	sy
 8007934:	f3bf 8f4f 	dsb	sy
 8007938:	613b      	str	r3, [r7, #16]
}
 800793a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800793c:	4b12      	ldr	r3, [pc, #72]	; (8007988 <vTaskStartScheduler+0xc0>)
 800793e:	f04f 32ff 	mov.w	r2, #4294967295
 8007942:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007944:	4b11      	ldr	r3, [pc, #68]	; (800798c <vTaskStartScheduler+0xc4>)
 8007946:	2201      	movs	r2, #1
 8007948:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800794a:	4b11      	ldr	r3, [pc, #68]	; (8007990 <vTaskStartScheduler+0xc8>)
 800794c:	2200      	movs	r2, #0
 800794e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007950:	f001 f8be 	bl	8008ad0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007954:	e00e      	b.n	8007974 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800795c:	d10a      	bne.n	8007974 <vTaskStartScheduler+0xac>
	__asm volatile
 800795e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007962:	f383 8811 	msr	BASEPRI, r3
 8007966:	f3bf 8f6f 	isb	sy
 800796a:	f3bf 8f4f 	dsb	sy
 800796e:	60fb      	str	r3, [r7, #12]
}
 8007970:	bf00      	nop
 8007972:	e7fe      	b.n	8007972 <vTaskStartScheduler+0xaa>
}
 8007974:	bf00      	nop
 8007976:	3718      	adds	r7, #24
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}
 800797c:	0800950c 	.word	0x0800950c
 8007980:	08007fad 	.word	0x08007fad
 8007984:	20000c48 	.word	0x20000c48
 8007988:	20000c44 	.word	0x20000c44
 800798c:	20000c30 	.word	0x20000c30
 8007990:	20000c28 	.word	0x20000c28

08007994 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007994:	b480      	push	{r7}
 8007996:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007998:	4b04      	ldr	r3, [pc, #16]	; (80079ac <vTaskSuspendAll+0x18>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	3301      	adds	r3, #1
 800799e:	4a03      	ldr	r2, [pc, #12]	; (80079ac <vTaskSuspendAll+0x18>)
 80079a0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80079a2:	bf00      	nop
 80079a4:	46bd      	mov	sp, r7
 80079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079aa:	4770      	bx	lr
 80079ac:	20000c4c 	.word	0x20000c4c

080079b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b084      	sub	sp, #16
 80079b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80079b6:	2300      	movs	r3, #0
 80079b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80079ba:	2300      	movs	r3, #0
 80079bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80079be:	4b42      	ldr	r3, [pc, #264]	; (8007ac8 <xTaskResumeAll+0x118>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d10a      	bne.n	80079dc <xTaskResumeAll+0x2c>
	__asm volatile
 80079c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ca:	f383 8811 	msr	BASEPRI, r3
 80079ce:	f3bf 8f6f 	isb	sy
 80079d2:	f3bf 8f4f 	dsb	sy
 80079d6:	603b      	str	r3, [r7, #0]
}
 80079d8:	bf00      	nop
 80079da:	e7fe      	b.n	80079da <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80079dc:	f001 f91a 	bl	8008c14 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80079e0:	4b39      	ldr	r3, [pc, #228]	; (8007ac8 <xTaskResumeAll+0x118>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	3b01      	subs	r3, #1
 80079e6:	4a38      	ldr	r2, [pc, #224]	; (8007ac8 <xTaskResumeAll+0x118>)
 80079e8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079ea:	4b37      	ldr	r3, [pc, #220]	; (8007ac8 <xTaskResumeAll+0x118>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d162      	bne.n	8007ab8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80079f2:	4b36      	ldr	r3, [pc, #216]	; (8007acc <xTaskResumeAll+0x11c>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d05e      	beq.n	8007ab8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80079fa:	e02f      	b.n	8007a5c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079fc:	4b34      	ldr	r3, [pc, #208]	; (8007ad0 <xTaskResumeAll+0x120>)
 80079fe:	68db      	ldr	r3, [r3, #12]
 8007a00:	68db      	ldr	r3, [r3, #12]
 8007a02:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	3318      	adds	r3, #24
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f7fe ffb7 	bl	800697c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	3304      	adds	r3, #4
 8007a12:	4618      	mov	r0, r3
 8007a14:	f7fe ffb2 	bl	800697c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a1c:	4b2d      	ldr	r3, [pc, #180]	; (8007ad4 <xTaskResumeAll+0x124>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	429a      	cmp	r2, r3
 8007a22:	d903      	bls.n	8007a2c <xTaskResumeAll+0x7c>
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a28:	4a2a      	ldr	r2, [pc, #168]	; (8007ad4 <xTaskResumeAll+0x124>)
 8007a2a:	6013      	str	r3, [r2, #0]
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a30:	4613      	mov	r3, r2
 8007a32:	009b      	lsls	r3, r3, #2
 8007a34:	4413      	add	r3, r2
 8007a36:	009b      	lsls	r3, r3, #2
 8007a38:	4a27      	ldr	r2, [pc, #156]	; (8007ad8 <xTaskResumeAll+0x128>)
 8007a3a:	441a      	add	r2, r3
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	3304      	adds	r3, #4
 8007a40:	4619      	mov	r1, r3
 8007a42:	4610      	mov	r0, r2
 8007a44:	f7fe ff3d 	bl	80068c2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a4c:	4b23      	ldr	r3, [pc, #140]	; (8007adc <xTaskResumeAll+0x12c>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a52:	429a      	cmp	r2, r3
 8007a54:	d302      	bcc.n	8007a5c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007a56:	4b22      	ldr	r3, [pc, #136]	; (8007ae0 <xTaskResumeAll+0x130>)
 8007a58:	2201      	movs	r2, #1
 8007a5a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007a5c:	4b1c      	ldr	r3, [pc, #112]	; (8007ad0 <xTaskResumeAll+0x120>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d1cb      	bne.n	80079fc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d001      	beq.n	8007a6e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007a6a:	f000 fb55 	bl	8008118 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007a6e:	4b1d      	ldr	r3, [pc, #116]	; (8007ae4 <xTaskResumeAll+0x134>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d010      	beq.n	8007a9c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007a7a:	f000 f847 	bl	8007b0c <xTaskIncrementTick>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d002      	beq.n	8007a8a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007a84:	4b16      	ldr	r3, [pc, #88]	; (8007ae0 <xTaskResumeAll+0x130>)
 8007a86:	2201      	movs	r2, #1
 8007a88:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	3b01      	subs	r3, #1
 8007a8e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d1f1      	bne.n	8007a7a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007a96:	4b13      	ldr	r3, [pc, #76]	; (8007ae4 <xTaskResumeAll+0x134>)
 8007a98:	2200      	movs	r2, #0
 8007a9a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007a9c:	4b10      	ldr	r3, [pc, #64]	; (8007ae0 <xTaskResumeAll+0x130>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d009      	beq.n	8007ab8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007aa8:	4b0f      	ldr	r3, [pc, #60]	; (8007ae8 <xTaskResumeAll+0x138>)
 8007aaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007aae:	601a      	str	r2, [r3, #0]
 8007ab0:	f3bf 8f4f 	dsb	sy
 8007ab4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007ab8:	f001 f8dc 	bl	8008c74 <vPortExitCritical>

	return xAlreadyYielded;
 8007abc:	68bb      	ldr	r3, [r7, #8]
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3710      	adds	r7, #16
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}
 8007ac6:	bf00      	nop
 8007ac8:	20000c4c 	.word	0x20000c4c
 8007acc:	20000c24 	.word	0x20000c24
 8007ad0:	20000be4 	.word	0x20000be4
 8007ad4:	20000c2c 	.word	0x20000c2c
 8007ad8:	20000754 	.word	0x20000754
 8007adc:	20000750 	.word	0x20000750
 8007ae0:	20000c38 	.word	0x20000c38
 8007ae4:	20000c34 	.word	0x20000c34
 8007ae8:	e000ed04 	.word	0xe000ed04

08007aec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007aec:	b480      	push	{r7}
 8007aee:	b083      	sub	sp, #12
 8007af0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007af2:	4b05      	ldr	r3, [pc, #20]	; (8007b08 <xTaskGetTickCount+0x1c>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007af8:	687b      	ldr	r3, [r7, #4]
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	370c      	adds	r7, #12
 8007afe:	46bd      	mov	sp, r7
 8007b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b04:	4770      	bx	lr
 8007b06:	bf00      	nop
 8007b08:	20000c28 	.word	0x20000c28

08007b0c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b086      	sub	sp, #24
 8007b10:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007b12:	2300      	movs	r3, #0
 8007b14:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b16:	4b4f      	ldr	r3, [pc, #316]	; (8007c54 <xTaskIncrementTick+0x148>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	f040 808f 	bne.w	8007c3e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007b20:	4b4d      	ldr	r3, [pc, #308]	; (8007c58 <xTaskIncrementTick+0x14c>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	3301      	adds	r3, #1
 8007b26:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007b28:	4a4b      	ldr	r2, [pc, #300]	; (8007c58 <xTaskIncrementTick+0x14c>)
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007b2e:	693b      	ldr	r3, [r7, #16]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d120      	bne.n	8007b76 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007b34:	4b49      	ldr	r3, [pc, #292]	; (8007c5c <xTaskIncrementTick+0x150>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d00a      	beq.n	8007b54 <xTaskIncrementTick+0x48>
	__asm volatile
 8007b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b42:	f383 8811 	msr	BASEPRI, r3
 8007b46:	f3bf 8f6f 	isb	sy
 8007b4a:	f3bf 8f4f 	dsb	sy
 8007b4e:	603b      	str	r3, [r7, #0]
}
 8007b50:	bf00      	nop
 8007b52:	e7fe      	b.n	8007b52 <xTaskIncrementTick+0x46>
 8007b54:	4b41      	ldr	r3, [pc, #260]	; (8007c5c <xTaskIncrementTick+0x150>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	60fb      	str	r3, [r7, #12]
 8007b5a:	4b41      	ldr	r3, [pc, #260]	; (8007c60 <xTaskIncrementTick+0x154>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4a3f      	ldr	r2, [pc, #252]	; (8007c5c <xTaskIncrementTick+0x150>)
 8007b60:	6013      	str	r3, [r2, #0]
 8007b62:	4a3f      	ldr	r2, [pc, #252]	; (8007c60 <xTaskIncrementTick+0x154>)
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	6013      	str	r3, [r2, #0]
 8007b68:	4b3e      	ldr	r3, [pc, #248]	; (8007c64 <xTaskIncrementTick+0x158>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	3301      	adds	r3, #1
 8007b6e:	4a3d      	ldr	r2, [pc, #244]	; (8007c64 <xTaskIncrementTick+0x158>)
 8007b70:	6013      	str	r3, [r2, #0]
 8007b72:	f000 fad1 	bl	8008118 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007b76:	4b3c      	ldr	r3, [pc, #240]	; (8007c68 <xTaskIncrementTick+0x15c>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	693a      	ldr	r2, [r7, #16]
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d349      	bcc.n	8007c14 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b80:	4b36      	ldr	r3, [pc, #216]	; (8007c5c <xTaskIncrementTick+0x150>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d104      	bne.n	8007b94 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b8a:	4b37      	ldr	r3, [pc, #220]	; (8007c68 <xTaskIncrementTick+0x15c>)
 8007b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8007b90:	601a      	str	r2, [r3, #0]
					break;
 8007b92:	e03f      	b.n	8007c14 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b94:	4b31      	ldr	r3, [pc, #196]	; (8007c5c <xTaskIncrementTick+0x150>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	68db      	ldr	r3, [r3, #12]
 8007b9a:	68db      	ldr	r3, [r3, #12]
 8007b9c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007ba4:	693a      	ldr	r2, [r7, #16]
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	429a      	cmp	r2, r3
 8007baa:	d203      	bcs.n	8007bb4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007bac:	4a2e      	ldr	r2, [pc, #184]	; (8007c68 <xTaskIncrementTick+0x15c>)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007bb2:	e02f      	b.n	8007c14 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	3304      	adds	r3, #4
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f7fe fedf 	bl	800697c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d004      	beq.n	8007bd0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	3318      	adds	r3, #24
 8007bca:	4618      	mov	r0, r3
 8007bcc:	f7fe fed6 	bl	800697c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bd4:	4b25      	ldr	r3, [pc, #148]	; (8007c6c <xTaskIncrementTick+0x160>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	d903      	bls.n	8007be4 <xTaskIncrementTick+0xd8>
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007be0:	4a22      	ldr	r2, [pc, #136]	; (8007c6c <xTaskIncrementTick+0x160>)
 8007be2:	6013      	str	r3, [r2, #0]
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007be8:	4613      	mov	r3, r2
 8007bea:	009b      	lsls	r3, r3, #2
 8007bec:	4413      	add	r3, r2
 8007bee:	009b      	lsls	r3, r3, #2
 8007bf0:	4a1f      	ldr	r2, [pc, #124]	; (8007c70 <xTaskIncrementTick+0x164>)
 8007bf2:	441a      	add	r2, r3
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	3304      	adds	r3, #4
 8007bf8:	4619      	mov	r1, r3
 8007bfa:	4610      	mov	r0, r2
 8007bfc:	f7fe fe61 	bl	80068c2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c04:	4b1b      	ldr	r3, [pc, #108]	; (8007c74 <xTaskIncrementTick+0x168>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c0a:	429a      	cmp	r2, r3
 8007c0c:	d3b8      	bcc.n	8007b80 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007c0e:	2301      	movs	r3, #1
 8007c10:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c12:	e7b5      	b.n	8007b80 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007c14:	4b17      	ldr	r3, [pc, #92]	; (8007c74 <xTaskIncrementTick+0x168>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c1a:	4915      	ldr	r1, [pc, #84]	; (8007c70 <xTaskIncrementTick+0x164>)
 8007c1c:	4613      	mov	r3, r2
 8007c1e:	009b      	lsls	r3, r3, #2
 8007c20:	4413      	add	r3, r2
 8007c22:	009b      	lsls	r3, r3, #2
 8007c24:	440b      	add	r3, r1
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	d901      	bls.n	8007c30 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007c30:	4b11      	ldr	r3, [pc, #68]	; (8007c78 <xTaskIncrementTick+0x16c>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d007      	beq.n	8007c48 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007c38:	2301      	movs	r3, #1
 8007c3a:	617b      	str	r3, [r7, #20]
 8007c3c:	e004      	b.n	8007c48 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007c3e:	4b0f      	ldr	r3, [pc, #60]	; (8007c7c <xTaskIncrementTick+0x170>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	3301      	adds	r3, #1
 8007c44:	4a0d      	ldr	r2, [pc, #52]	; (8007c7c <xTaskIncrementTick+0x170>)
 8007c46:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007c48:	697b      	ldr	r3, [r7, #20]
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3718      	adds	r7, #24
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}
 8007c52:	bf00      	nop
 8007c54:	20000c4c 	.word	0x20000c4c
 8007c58:	20000c28 	.word	0x20000c28
 8007c5c:	20000bdc 	.word	0x20000bdc
 8007c60:	20000be0 	.word	0x20000be0
 8007c64:	20000c3c 	.word	0x20000c3c
 8007c68:	20000c44 	.word	0x20000c44
 8007c6c:	20000c2c 	.word	0x20000c2c
 8007c70:	20000754 	.word	0x20000754
 8007c74:	20000750 	.word	0x20000750
 8007c78:	20000c38 	.word	0x20000c38
 8007c7c:	20000c34 	.word	0x20000c34

08007c80 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007c80:	b480      	push	{r7}
 8007c82:	b085      	sub	sp, #20
 8007c84:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007c86:	4b28      	ldr	r3, [pc, #160]	; (8007d28 <vTaskSwitchContext+0xa8>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d003      	beq.n	8007c96 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007c8e:	4b27      	ldr	r3, [pc, #156]	; (8007d2c <vTaskSwitchContext+0xac>)
 8007c90:	2201      	movs	r2, #1
 8007c92:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007c94:	e041      	b.n	8007d1a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8007c96:	4b25      	ldr	r3, [pc, #148]	; (8007d2c <vTaskSwitchContext+0xac>)
 8007c98:	2200      	movs	r2, #0
 8007c9a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c9c:	4b24      	ldr	r3, [pc, #144]	; (8007d30 <vTaskSwitchContext+0xb0>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	60fb      	str	r3, [r7, #12]
 8007ca2:	e010      	b.n	8007cc6 <vTaskSwitchContext+0x46>
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d10a      	bne.n	8007cc0 <vTaskSwitchContext+0x40>
	__asm volatile
 8007caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cae:	f383 8811 	msr	BASEPRI, r3
 8007cb2:	f3bf 8f6f 	isb	sy
 8007cb6:	f3bf 8f4f 	dsb	sy
 8007cba:	607b      	str	r3, [r7, #4]
}
 8007cbc:	bf00      	nop
 8007cbe:	e7fe      	b.n	8007cbe <vTaskSwitchContext+0x3e>
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	3b01      	subs	r3, #1
 8007cc4:	60fb      	str	r3, [r7, #12]
 8007cc6:	491b      	ldr	r1, [pc, #108]	; (8007d34 <vTaskSwitchContext+0xb4>)
 8007cc8:	68fa      	ldr	r2, [r7, #12]
 8007cca:	4613      	mov	r3, r2
 8007ccc:	009b      	lsls	r3, r3, #2
 8007cce:	4413      	add	r3, r2
 8007cd0:	009b      	lsls	r3, r3, #2
 8007cd2:	440b      	add	r3, r1
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d0e4      	beq.n	8007ca4 <vTaskSwitchContext+0x24>
 8007cda:	68fa      	ldr	r2, [r7, #12]
 8007cdc:	4613      	mov	r3, r2
 8007cde:	009b      	lsls	r3, r3, #2
 8007ce0:	4413      	add	r3, r2
 8007ce2:	009b      	lsls	r3, r3, #2
 8007ce4:	4a13      	ldr	r2, [pc, #76]	; (8007d34 <vTaskSwitchContext+0xb4>)
 8007ce6:	4413      	add	r3, r2
 8007ce8:	60bb      	str	r3, [r7, #8]
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	685a      	ldr	r2, [r3, #4]
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	605a      	str	r2, [r3, #4]
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	685a      	ldr	r2, [r3, #4]
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	3308      	adds	r3, #8
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	d104      	bne.n	8007d0a <vTaskSwitchContext+0x8a>
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	685b      	ldr	r3, [r3, #4]
 8007d04:	685a      	ldr	r2, [r3, #4]
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	605a      	str	r2, [r3, #4]
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	68db      	ldr	r3, [r3, #12]
 8007d10:	4a09      	ldr	r2, [pc, #36]	; (8007d38 <vTaskSwitchContext+0xb8>)
 8007d12:	6013      	str	r3, [r2, #0]
 8007d14:	4a06      	ldr	r2, [pc, #24]	; (8007d30 <vTaskSwitchContext+0xb0>)
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	6013      	str	r3, [r2, #0]
}
 8007d1a:	bf00      	nop
 8007d1c:	3714      	adds	r7, #20
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d24:	4770      	bx	lr
 8007d26:	bf00      	nop
 8007d28:	20000c4c 	.word	0x20000c4c
 8007d2c:	20000c38 	.word	0x20000c38
 8007d30:	20000c2c 	.word	0x20000c2c
 8007d34:	20000754 	.word	0x20000754
 8007d38:	20000750 	.word	0x20000750

08007d3c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b084      	sub	sp, #16
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d10a      	bne.n	8007d62 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d50:	f383 8811 	msr	BASEPRI, r3
 8007d54:	f3bf 8f6f 	isb	sy
 8007d58:	f3bf 8f4f 	dsb	sy
 8007d5c:	60fb      	str	r3, [r7, #12]
}
 8007d5e:	bf00      	nop
 8007d60:	e7fe      	b.n	8007d60 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007d62:	4b07      	ldr	r3, [pc, #28]	; (8007d80 <vTaskPlaceOnEventList+0x44>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	3318      	adds	r3, #24
 8007d68:	4619      	mov	r1, r3
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f7fe fdcd 	bl	800690a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007d70:	2101      	movs	r1, #1
 8007d72:	6838      	ldr	r0, [r7, #0]
 8007d74:	f000 fa7c 	bl	8008270 <prvAddCurrentTaskToDelayedList>
}
 8007d78:	bf00      	nop
 8007d7a:	3710      	adds	r7, #16
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}
 8007d80:	20000750 	.word	0x20000750

08007d84 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b086      	sub	sp, #24
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	60f8      	str	r0, [r7, #12]
 8007d8c:	60b9      	str	r1, [r7, #8]
 8007d8e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d10a      	bne.n	8007dac <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d9a:	f383 8811 	msr	BASEPRI, r3
 8007d9e:	f3bf 8f6f 	isb	sy
 8007da2:	f3bf 8f4f 	dsb	sy
 8007da6:	617b      	str	r3, [r7, #20]
}
 8007da8:	bf00      	nop
 8007daa:	e7fe      	b.n	8007daa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007dac:	4b0a      	ldr	r3, [pc, #40]	; (8007dd8 <vTaskPlaceOnEventListRestricted+0x54>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	3318      	adds	r3, #24
 8007db2:	4619      	mov	r1, r3
 8007db4:	68f8      	ldr	r0, [r7, #12]
 8007db6:	f7fe fd84 	bl	80068c2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d002      	beq.n	8007dc6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007dc0:	f04f 33ff 	mov.w	r3, #4294967295
 8007dc4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007dc6:	6879      	ldr	r1, [r7, #4]
 8007dc8:	68b8      	ldr	r0, [r7, #8]
 8007dca:	f000 fa51 	bl	8008270 <prvAddCurrentTaskToDelayedList>
	}
 8007dce:	bf00      	nop
 8007dd0:	3718      	adds	r7, #24
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
 8007dd6:	bf00      	nop
 8007dd8:	20000750 	.word	0x20000750

08007ddc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b086      	sub	sp, #24
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	68db      	ldr	r3, [r3, #12]
 8007de8:	68db      	ldr	r3, [r3, #12]
 8007dea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d10a      	bne.n	8007e08 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df6:	f383 8811 	msr	BASEPRI, r3
 8007dfa:	f3bf 8f6f 	isb	sy
 8007dfe:	f3bf 8f4f 	dsb	sy
 8007e02:	60fb      	str	r3, [r7, #12]
}
 8007e04:	bf00      	nop
 8007e06:	e7fe      	b.n	8007e06 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	3318      	adds	r3, #24
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f7fe fdb5 	bl	800697c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e12:	4b1e      	ldr	r3, [pc, #120]	; (8007e8c <xTaskRemoveFromEventList+0xb0>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d11d      	bne.n	8007e56 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	3304      	adds	r3, #4
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f7fe fdac 	bl	800697c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e28:	4b19      	ldr	r3, [pc, #100]	; (8007e90 <xTaskRemoveFromEventList+0xb4>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	429a      	cmp	r2, r3
 8007e2e:	d903      	bls.n	8007e38 <xTaskRemoveFromEventList+0x5c>
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e34:	4a16      	ldr	r2, [pc, #88]	; (8007e90 <xTaskRemoveFromEventList+0xb4>)
 8007e36:	6013      	str	r3, [r2, #0]
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e3c:	4613      	mov	r3, r2
 8007e3e:	009b      	lsls	r3, r3, #2
 8007e40:	4413      	add	r3, r2
 8007e42:	009b      	lsls	r3, r3, #2
 8007e44:	4a13      	ldr	r2, [pc, #76]	; (8007e94 <xTaskRemoveFromEventList+0xb8>)
 8007e46:	441a      	add	r2, r3
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	3304      	adds	r3, #4
 8007e4c:	4619      	mov	r1, r3
 8007e4e:	4610      	mov	r0, r2
 8007e50:	f7fe fd37 	bl	80068c2 <vListInsertEnd>
 8007e54:	e005      	b.n	8007e62 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	3318      	adds	r3, #24
 8007e5a:	4619      	mov	r1, r3
 8007e5c:	480e      	ldr	r0, [pc, #56]	; (8007e98 <xTaskRemoveFromEventList+0xbc>)
 8007e5e:	f7fe fd30 	bl	80068c2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e66:	4b0d      	ldr	r3, [pc, #52]	; (8007e9c <xTaskRemoveFromEventList+0xc0>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e6c:	429a      	cmp	r2, r3
 8007e6e:	d905      	bls.n	8007e7c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007e70:	2301      	movs	r3, #1
 8007e72:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007e74:	4b0a      	ldr	r3, [pc, #40]	; (8007ea0 <xTaskRemoveFromEventList+0xc4>)
 8007e76:	2201      	movs	r2, #1
 8007e78:	601a      	str	r2, [r3, #0]
 8007e7a:	e001      	b.n	8007e80 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007e80:	697b      	ldr	r3, [r7, #20]
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3718      	adds	r7, #24
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}
 8007e8a:	bf00      	nop
 8007e8c:	20000c4c 	.word	0x20000c4c
 8007e90:	20000c2c 	.word	0x20000c2c
 8007e94:	20000754 	.word	0x20000754
 8007e98:	20000be4 	.word	0x20000be4
 8007e9c:	20000750 	.word	0x20000750
 8007ea0:	20000c38 	.word	0x20000c38

08007ea4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b083      	sub	sp, #12
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007eac:	4b06      	ldr	r3, [pc, #24]	; (8007ec8 <vTaskInternalSetTimeOutState+0x24>)
 8007eae:	681a      	ldr	r2, [r3, #0]
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007eb4:	4b05      	ldr	r3, [pc, #20]	; (8007ecc <vTaskInternalSetTimeOutState+0x28>)
 8007eb6:	681a      	ldr	r2, [r3, #0]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	605a      	str	r2, [r3, #4]
}
 8007ebc:	bf00      	nop
 8007ebe:	370c      	adds	r7, #12
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr
 8007ec8:	20000c3c 	.word	0x20000c3c
 8007ecc:	20000c28 	.word	0x20000c28

08007ed0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b088      	sub	sp, #32
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
 8007ed8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d10a      	bne.n	8007ef6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ee4:	f383 8811 	msr	BASEPRI, r3
 8007ee8:	f3bf 8f6f 	isb	sy
 8007eec:	f3bf 8f4f 	dsb	sy
 8007ef0:	613b      	str	r3, [r7, #16]
}
 8007ef2:	bf00      	nop
 8007ef4:	e7fe      	b.n	8007ef4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d10a      	bne.n	8007f12 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f00:	f383 8811 	msr	BASEPRI, r3
 8007f04:	f3bf 8f6f 	isb	sy
 8007f08:	f3bf 8f4f 	dsb	sy
 8007f0c:	60fb      	str	r3, [r7, #12]
}
 8007f0e:	bf00      	nop
 8007f10:	e7fe      	b.n	8007f10 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007f12:	f000 fe7f 	bl	8008c14 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007f16:	4b1d      	ldr	r3, [pc, #116]	; (8007f8c <xTaskCheckForTimeOut+0xbc>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	69ba      	ldr	r2, [r7, #24]
 8007f22:	1ad3      	subs	r3, r2, r3
 8007f24:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f2e:	d102      	bne.n	8007f36 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007f30:	2300      	movs	r3, #0
 8007f32:	61fb      	str	r3, [r7, #28]
 8007f34:	e023      	b.n	8007f7e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681a      	ldr	r2, [r3, #0]
 8007f3a:	4b15      	ldr	r3, [pc, #84]	; (8007f90 <xTaskCheckForTimeOut+0xc0>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	429a      	cmp	r2, r3
 8007f40:	d007      	beq.n	8007f52 <xTaskCheckForTimeOut+0x82>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	685b      	ldr	r3, [r3, #4]
 8007f46:	69ba      	ldr	r2, [r7, #24]
 8007f48:	429a      	cmp	r2, r3
 8007f4a:	d302      	bcc.n	8007f52 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	61fb      	str	r3, [r7, #28]
 8007f50:	e015      	b.n	8007f7e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	697a      	ldr	r2, [r7, #20]
 8007f58:	429a      	cmp	r2, r3
 8007f5a:	d20b      	bcs.n	8007f74 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	681a      	ldr	r2, [r3, #0]
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	1ad2      	subs	r2, r2, r3
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f7ff ff9b 	bl	8007ea4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	61fb      	str	r3, [r7, #28]
 8007f72:	e004      	b.n	8007f7e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	2200      	movs	r2, #0
 8007f78:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007f7e:	f000 fe79 	bl	8008c74 <vPortExitCritical>

	return xReturn;
 8007f82:	69fb      	ldr	r3, [r7, #28]
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3720      	adds	r7, #32
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}
 8007f8c:	20000c28 	.word	0x20000c28
 8007f90:	20000c3c 	.word	0x20000c3c

08007f94 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007f94:	b480      	push	{r7}
 8007f96:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007f98:	4b03      	ldr	r3, [pc, #12]	; (8007fa8 <vTaskMissedYield+0x14>)
 8007f9a:	2201      	movs	r2, #1
 8007f9c:	601a      	str	r2, [r3, #0]
}
 8007f9e:	bf00      	nop
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa6:	4770      	bx	lr
 8007fa8:	20000c38 	.word	0x20000c38

08007fac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b082      	sub	sp, #8
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007fb4:	f000 f852 	bl	800805c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007fb8:	4b06      	ldr	r3, [pc, #24]	; (8007fd4 <prvIdleTask+0x28>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	2b01      	cmp	r3, #1
 8007fbe:	d9f9      	bls.n	8007fb4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007fc0:	4b05      	ldr	r3, [pc, #20]	; (8007fd8 <prvIdleTask+0x2c>)
 8007fc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fc6:	601a      	str	r2, [r3, #0]
 8007fc8:	f3bf 8f4f 	dsb	sy
 8007fcc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007fd0:	e7f0      	b.n	8007fb4 <prvIdleTask+0x8>
 8007fd2:	bf00      	nop
 8007fd4:	20000754 	.word	0x20000754
 8007fd8:	e000ed04 	.word	0xe000ed04

08007fdc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b082      	sub	sp, #8
 8007fe0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	607b      	str	r3, [r7, #4]
 8007fe6:	e00c      	b.n	8008002 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007fe8:	687a      	ldr	r2, [r7, #4]
 8007fea:	4613      	mov	r3, r2
 8007fec:	009b      	lsls	r3, r3, #2
 8007fee:	4413      	add	r3, r2
 8007ff0:	009b      	lsls	r3, r3, #2
 8007ff2:	4a12      	ldr	r2, [pc, #72]	; (800803c <prvInitialiseTaskLists+0x60>)
 8007ff4:	4413      	add	r3, r2
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f7fe fc36 	bl	8006868 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	3301      	adds	r3, #1
 8008000:	607b      	str	r3, [r7, #4]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2b37      	cmp	r3, #55	; 0x37
 8008006:	d9ef      	bls.n	8007fe8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008008:	480d      	ldr	r0, [pc, #52]	; (8008040 <prvInitialiseTaskLists+0x64>)
 800800a:	f7fe fc2d 	bl	8006868 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800800e:	480d      	ldr	r0, [pc, #52]	; (8008044 <prvInitialiseTaskLists+0x68>)
 8008010:	f7fe fc2a 	bl	8006868 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008014:	480c      	ldr	r0, [pc, #48]	; (8008048 <prvInitialiseTaskLists+0x6c>)
 8008016:	f7fe fc27 	bl	8006868 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800801a:	480c      	ldr	r0, [pc, #48]	; (800804c <prvInitialiseTaskLists+0x70>)
 800801c:	f7fe fc24 	bl	8006868 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008020:	480b      	ldr	r0, [pc, #44]	; (8008050 <prvInitialiseTaskLists+0x74>)
 8008022:	f7fe fc21 	bl	8006868 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008026:	4b0b      	ldr	r3, [pc, #44]	; (8008054 <prvInitialiseTaskLists+0x78>)
 8008028:	4a05      	ldr	r2, [pc, #20]	; (8008040 <prvInitialiseTaskLists+0x64>)
 800802a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800802c:	4b0a      	ldr	r3, [pc, #40]	; (8008058 <prvInitialiseTaskLists+0x7c>)
 800802e:	4a05      	ldr	r2, [pc, #20]	; (8008044 <prvInitialiseTaskLists+0x68>)
 8008030:	601a      	str	r2, [r3, #0]
}
 8008032:	bf00      	nop
 8008034:	3708      	adds	r7, #8
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}
 800803a:	bf00      	nop
 800803c:	20000754 	.word	0x20000754
 8008040:	20000bb4 	.word	0x20000bb4
 8008044:	20000bc8 	.word	0x20000bc8
 8008048:	20000be4 	.word	0x20000be4
 800804c:	20000bf8 	.word	0x20000bf8
 8008050:	20000c10 	.word	0x20000c10
 8008054:	20000bdc 	.word	0x20000bdc
 8008058:	20000be0 	.word	0x20000be0

0800805c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b082      	sub	sp, #8
 8008060:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008062:	e019      	b.n	8008098 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008064:	f000 fdd6 	bl	8008c14 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008068:	4b10      	ldr	r3, [pc, #64]	; (80080ac <prvCheckTasksWaitingTermination+0x50>)
 800806a:	68db      	ldr	r3, [r3, #12]
 800806c:	68db      	ldr	r3, [r3, #12]
 800806e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	3304      	adds	r3, #4
 8008074:	4618      	mov	r0, r3
 8008076:	f7fe fc81 	bl	800697c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800807a:	4b0d      	ldr	r3, [pc, #52]	; (80080b0 <prvCheckTasksWaitingTermination+0x54>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	3b01      	subs	r3, #1
 8008080:	4a0b      	ldr	r2, [pc, #44]	; (80080b0 <prvCheckTasksWaitingTermination+0x54>)
 8008082:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008084:	4b0b      	ldr	r3, [pc, #44]	; (80080b4 <prvCheckTasksWaitingTermination+0x58>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	3b01      	subs	r3, #1
 800808a:	4a0a      	ldr	r2, [pc, #40]	; (80080b4 <prvCheckTasksWaitingTermination+0x58>)
 800808c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800808e:	f000 fdf1 	bl	8008c74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f000 f810 	bl	80080b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008098:	4b06      	ldr	r3, [pc, #24]	; (80080b4 <prvCheckTasksWaitingTermination+0x58>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d1e1      	bne.n	8008064 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80080a0:	bf00      	nop
 80080a2:	bf00      	nop
 80080a4:	3708      	adds	r7, #8
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}
 80080aa:	bf00      	nop
 80080ac:	20000bf8 	.word	0x20000bf8
 80080b0:	20000c24 	.word	0x20000c24
 80080b4:	20000c0c 	.word	0x20000c0c

080080b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b084      	sub	sp, #16
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d108      	bne.n	80080dc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080ce:	4618      	mov	r0, r3
 80080d0:	f000 ff8e 	bl	8008ff0 <vPortFree>
				vPortFree( pxTCB );
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f000 ff8b 	bl	8008ff0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80080da:	e018      	b.n	800810e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80080e2:	2b01      	cmp	r3, #1
 80080e4:	d103      	bne.n	80080ee <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 ff82 	bl	8008ff0 <vPortFree>
	}
 80080ec:	e00f      	b.n	800810e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80080f4:	2b02      	cmp	r3, #2
 80080f6:	d00a      	beq.n	800810e <prvDeleteTCB+0x56>
	__asm volatile
 80080f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080fc:	f383 8811 	msr	BASEPRI, r3
 8008100:	f3bf 8f6f 	isb	sy
 8008104:	f3bf 8f4f 	dsb	sy
 8008108:	60fb      	str	r3, [r7, #12]
}
 800810a:	bf00      	nop
 800810c:	e7fe      	b.n	800810c <prvDeleteTCB+0x54>
	}
 800810e:	bf00      	nop
 8008110:	3710      	adds	r7, #16
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}
	...

08008118 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008118:	b480      	push	{r7}
 800811a:	b083      	sub	sp, #12
 800811c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800811e:	4b0c      	ldr	r3, [pc, #48]	; (8008150 <prvResetNextTaskUnblockTime+0x38>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d104      	bne.n	8008132 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008128:	4b0a      	ldr	r3, [pc, #40]	; (8008154 <prvResetNextTaskUnblockTime+0x3c>)
 800812a:	f04f 32ff 	mov.w	r2, #4294967295
 800812e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008130:	e008      	b.n	8008144 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008132:	4b07      	ldr	r3, [pc, #28]	; (8008150 <prvResetNextTaskUnblockTime+0x38>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	68db      	ldr	r3, [r3, #12]
 8008138:	68db      	ldr	r3, [r3, #12]
 800813a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	685b      	ldr	r3, [r3, #4]
 8008140:	4a04      	ldr	r2, [pc, #16]	; (8008154 <prvResetNextTaskUnblockTime+0x3c>)
 8008142:	6013      	str	r3, [r2, #0]
}
 8008144:	bf00      	nop
 8008146:	370c      	adds	r7, #12
 8008148:	46bd      	mov	sp, r7
 800814a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814e:	4770      	bx	lr
 8008150:	20000bdc 	.word	0x20000bdc
 8008154:	20000c44 	.word	0x20000c44

08008158 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008158:	b480      	push	{r7}
 800815a:	b083      	sub	sp, #12
 800815c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800815e:	4b0b      	ldr	r3, [pc, #44]	; (800818c <xTaskGetSchedulerState+0x34>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d102      	bne.n	800816c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008166:	2301      	movs	r3, #1
 8008168:	607b      	str	r3, [r7, #4]
 800816a:	e008      	b.n	800817e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800816c:	4b08      	ldr	r3, [pc, #32]	; (8008190 <xTaskGetSchedulerState+0x38>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d102      	bne.n	800817a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008174:	2302      	movs	r3, #2
 8008176:	607b      	str	r3, [r7, #4]
 8008178:	e001      	b.n	800817e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800817a:	2300      	movs	r3, #0
 800817c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800817e:	687b      	ldr	r3, [r7, #4]
	}
 8008180:	4618      	mov	r0, r3
 8008182:	370c      	adds	r7, #12
 8008184:	46bd      	mov	sp, r7
 8008186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818a:	4770      	bx	lr
 800818c:	20000c30 	.word	0x20000c30
 8008190:	20000c4c 	.word	0x20000c4c

08008194 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008194:	b580      	push	{r7, lr}
 8008196:	b086      	sub	sp, #24
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80081a0:	2300      	movs	r3, #0
 80081a2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d056      	beq.n	8008258 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80081aa:	4b2e      	ldr	r3, [pc, #184]	; (8008264 <xTaskPriorityDisinherit+0xd0>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	693a      	ldr	r2, [r7, #16]
 80081b0:	429a      	cmp	r2, r3
 80081b2:	d00a      	beq.n	80081ca <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80081b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081b8:	f383 8811 	msr	BASEPRI, r3
 80081bc:	f3bf 8f6f 	isb	sy
 80081c0:	f3bf 8f4f 	dsb	sy
 80081c4:	60fb      	str	r3, [r7, #12]
}
 80081c6:	bf00      	nop
 80081c8:	e7fe      	b.n	80081c8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d10a      	bne.n	80081e8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80081d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d6:	f383 8811 	msr	BASEPRI, r3
 80081da:	f3bf 8f6f 	isb	sy
 80081de:	f3bf 8f4f 	dsb	sy
 80081e2:	60bb      	str	r3, [r7, #8]
}
 80081e4:	bf00      	nop
 80081e6:	e7fe      	b.n	80081e6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081ec:	1e5a      	subs	r2, r3, #1
 80081ee:	693b      	ldr	r3, [r7, #16]
 80081f0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081fa:	429a      	cmp	r2, r3
 80081fc:	d02c      	beq.n	8008258 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008202:	2b00      	cmp	r3, #0
 8008204:	d128      	bne.n	8008258 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	3304      	adds	r3, #4
 800820a:	4618      	mov	r0, r3
 800820c:	f7fe fbb6 	bl	800697c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800821c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008228:	4b0f      	ldr	r3, [pc, #60]	; (8008268 <xTaskPriorityDisinherit+0xd4>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	429a      	cmp	r2, r3
 800822e:	d903      	bls.n	8008238 <xTaskPriorityDisinherit+0xa4>
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008234:	4a0c      	ldr	r2, [pc, #48]	; (8008268 <xTaskPriorityDisinherit+0xd4>)
 8008236:	6013      	str	r3, [r2, #0]
 8008238:	693b      	ldr	r3, [r7, #16]
 800823a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800823c:	4613      	mov	r3, r2
 800823e:	009b      	lsls	r3, r3, #2
 8008240:	4413      	add	r3, r2
 8008242:	009b      	lsls	r3, r3, #2
 8008244:	4a09      	ldr	r2, [pc, #36]	; (800826c <xTaskPriorityDisinherit+0xd8>)
 8008246:	441a      	add	r2, r3
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	3304      	adds	r3, #4
 800824c:	4619      	mov	r1, r3
 800824e:	4610      	mov	r0, r2
 8008250:	f7fe fb37 	bl	80068c2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008254:	2301      	movs	r3, #1
 8008256:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008258:	697b      	ldr	r3, [r7, #20]
	}
 800825a:	4618      	mov	r0, r3
 800825c:	3718      	adds	r7, #24
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}
 8008262:	bf00      	nop
 8008264:	20000750 	.word	0x20000750
 8008268:	20000c2c 	.word	0x20000c2c
 800826c:	20000754 	.word	0x20000754

08008270 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b084      	sub	sp, #16
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800827a:	4b21      	ldr	r3, [pc, #132]	; (8008300 <prvAddCurrentTaskToDelayedList+0x90>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008280:	4b20      	ldr	r3, [pc, #128]	; (8008304 <prvAddCurrentTaskToDelayedList+0x94>)
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	3304      	adds	r3, #4
 8008286:	4618      	mov	r0, r3
 8008288:	f7fe fb78 	bl	800697c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008292:	d10a      	bne.n	80082aa <prvAddCurrentTaskToDelayedList+0x3a>
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d007      	beq.n	80082aa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800829a:	4b1a      	ldr	r3, [pc, #104]	; (8008304 <prvAddCurrentTaskToDelayedList+0x94>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	3304      	adds	r3, #4
 80082a0:	4619      	mov	r1, r3
 80082a2:	4819      	ldr	r0, [pc, #100]	; (8008308 <prvAddCurrentTaskToDelayedList+0x98>)
 80082a4:	f7fe fb0d 	bl	80068c2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80082a8:	e026      	b.n	80082f8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80082aa:	68fa      	ldr	r2, [r7, #12]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	4413      	add	r3, r2
 80082b0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80082b2:	4b14      	ldr	r3, [pc, #80]	; (8008304 <prvAddCurrentTaskToDelayedList+0x94>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	68ba      	ldr	r2, [r7, #8]
 80082b8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80082ba:	68ba      	ldr	r2, [r7, #8]
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	429a      	cmp	r2, r3
 80082c0:	d209      	bcs.n	80082d6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082c2:	4b12      	ldr	r3, [pc, #72]	; (800830c <prvAddCurrentTaskToDelayedList+0x9c>)
 80082c4:	681a      	ldr	r2, [r3, #0]
 80082c6:	4b0f      	ldr	r3, [pc, #60]	; (8008304 <prvAddCurrentTaskToDelayedList+0x94>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	3304      	adds	r3, #4
 80082cc:	4619      	mov	r1, r3
 80082ce:	4610      	mov	r0, r2
 80082d0:	f7fe fb1b 	bl	800690a <vListInsert>
}
 80082d4:	e010      	b.n	80082f8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082d6:	4b0e      	ldr	r3, [pc, #56]	; (8008310 <prvAddCurrentTaskToDelayedList+0xa0>)
 80082d8:	681a      	ldr	r2, [r3, #0]
 80082da:	4b0a      	ldr	r3, [pc, #40]	; (8008304 <prvAddCurrentTaskToDelayedList+0x94>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	3304      	adds	r3, #4
 80082e0:	4619      	mov	r1, r3
 80082e2:	4610      	mov	r0, r2
 80082e4:	f7fe fb11 	bl	800690a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80082e8:	4b0a      	ldr	r3, [pc, #40]	; (8008314 <prvAddCurrentTaskToDelayedList+0xa4>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	68ba      	ldr	r2, [r7, #8]
 80082ee:	429a      	cmp	r2, r3
 80082f0:	d202      	bcs.n	80082f8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80082f2:	4a08      	ldr	r2, [pc, #32]	; (8008314 <prvAddCurrentTaskToDelayedList+0xa4>)
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	6013      	str	r3, [r2, #0]
}
 80082f8:	bf00      	nop
 80082fa:	3710      	adds	r7, #16
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}
 8008300:	20000c28 	.word	0x20000c28
 8008304:	20000750 	.word	0x20000750
 8008308:	20000c10 	.word	0x20000c10
 800830c:	20000be0 	.word	0x20000be0
 8008310:	20000bdc 	.word	0x20000bdc
 8008314:	20000c44 	.word	0x20000c44

08008318 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b08a      	sub	sp, #40	; 0x28
 800831c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800831e:	2300      	movs	r3, #0
 8008320:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008322:	f000 fb07 	bl	8008934 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008326:	4b1c      	ldr	r3, [pc, #112]	; (8008398 <xTimerCreateTimerTask+0x80>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d021      	beq.n	8008372 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800832e:	2300      	movs	r3, #0
 8008330:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008332:	2300      	movs	r3, #0
 8008334:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008336:	1d3a      	adds	r2, r7, #4
 8008338:	f107 0108 	add.w	r1, r7, #8
 800833c:	f107 030c 	add.w	r3, r7, #12
 8008340:	4618      	mov	r0, r3
 8008342:	f7fe fa77 	bl	8006834 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008346:	6879      	ldr	r1, [r7, #4]
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	68fa      	ldr	r2, [r7, #12]
 800834c:	9202      	str	r2, [sp, #8]
 800834e:	9301      	str	r3, [sp, #4]
 8008350:	2302      	movs	r3, #2
 8008352:	9300      	str	r3, [sp, #0]
 8008354:	2300      	movs	r3, #0
 8008356:	460a      	mov	r2, r1
 8008358:	4910      	ldr	r1, [pc, #64]	; (800839c <xTimerCreateTimerTask+0x84>)
 800835a:	4811      	ldr	r0, [pc, #68]	; (80083a0 <xTimerCreateTimerTask+0x88>)
 800835c:	f7ff f8de 	bl	800751c <xTaskCreateStatic>
 8008360:	4603      	mov	r3, r0
 8008362:	4a10      	ldr	r2, [pc, #64]	; (80083a4 <xTimerCreateTimerTask+0x8c>)
 8008364:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008366:	4b0f      	ldr	r3, [pc, #60]	; (80083a4 <xTimerCreateTimerTask+0x8c>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d001      	beq.n	8008372 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800836e:	2301      	movs	r3, #1
 8008370:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d10a      	bne.n	800838e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800837c:	f383 8811 	msr	BASEPRI, r3
 8008380:	f3bf 8f6f 	isb	sy
 8008384:	f3bf 8f4f 	dsb	sy
 8008388:	613b      	str	r3, [r7, #16]
}
 800838a:	bf00      	nop
 800838c:	e7fe      	b.n	800838c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800838e:	697b      	ldr	r3, [r7, #20]
}
 8008390:	4618      	mov	r0, r3
 8008392:	3718      	adds	r7, #24
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}
 8008398:	20000c80 	.word	0x20000c80
 800839c:	08009514 	.word	0x08009514
 80083a0:	080084dd 	.word	0x080084dd
 80083a4:	20000c84 	.word	0x20000c84

080083a8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b08a      	sub	sp, #40	; 0x28
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	60f8      	str	r0, [r7, #12]
 80083b0:	60b9      	str	r1, [r7, #8]
 80083b2:	607a      	str	r2, [r7, #4]
 80083b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80083b6:	2300      	movs	r3, #0
 80083b8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d10a      	bne.n	80083d6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80083c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c4:	f383 8811 	msr	BASEPRI, r3
 80083c8:	f3bf 8f6f 	isb	sy
 80083cc:	f3bf 8f4f 	dsb	sy
 80083d0:	623b      	str	r3, [r7, #32]
}
 80083d2:	bf00      	nop
 80083d4:	e7fe      	b.n	80083d4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80083d6:	4b1a      	ldr	r3, [pc, #104]	; (8008440 <xTimerGenericCommand+0x98>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d02a      	beq.n	8008434 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	2b05      	cmp	r3, #5
 80083ee:	dc18      	bgt.n	8008422 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80083f0:	f7ff feb2 	bl	8008158 <xTaskGetSchedulerState>
 80083f4:	4603      	mov	r3, r0
 80083f6:	2b02      	cmp	r3, #2
 80083f8:	d109      	bne.n	800840e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80083fa:	4b11      	ldr	r3, [pc, #68]	; (8008440 <xTimerGenericCommand+0x98>)
 80083fc:	6818      	ldr	r0, [r3, #0]
 80083fe:	f107 0110 	add.w	r1, r7, #16
 8008402:	2300      	movs	r3, #0
 8008404:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008406:	f7fe fc21 	bl	8006c4c <xQueueGenericSend>
 800840a:	6278      	str	r0, [r7, #36]	; 0x24
 800840c:	e012      	b.n	8008434 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800840e:	4b0c      	ldr	r3, [pc, #48]	; (8008440 <xTimerGenericCommand+0x98>)
 8008410:	6818      	ldr	r0, [r3, #0]
 8008412:	f107 0110 	add.w	r1, r7, #16
 8008416:	2300      	movs	r3, #0
 8008418:	2200      	movs	r2, #0
 800841a:	f7fe fc17 	bl	8006c4c <xQueueGenericSend>
 800841e:	6278      	str	r0, [r7, #36]	; 0x24
 8008420:	e008      	b.n	8008434 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008422:	4b07      	ldr	r3, [pc, #28]	; (8008440 <xTimerGenericCommand+0x98>)
 8008424:	6818      	ldr	r0, [r3, #0]
 8008426:	f107 0110 	add.w	r1, r7, #16
 800842a:	2300      	movs	r3, #0
 800842c:	683a      	ldr	r2, [r7, #0]
 800842e:	f7fe fd0b 	bl	8006e48 <xQueueGenericSendFromISR>
 8008432:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008436:	4618      	mov	r0, r3
 8008438:	3728      	adds	r7, #40	; 0x28
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}
 800843e:	bf00      	nop
 8008440:	20000c80 	.word	0x20000c80

08008444 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b088      	sub	sp, #32
 8008448:	af02      	add	r7, sp, #8
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800844e:	4b22      	ldr	r3, [pc, #136]	; (80084d8 <prvProcessExpiredTimer+0x94>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	68db      	ldr	r3, [r3, #12]
 8008454:	68db      	ldr	r3, [r3, #12]
 8008456:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	3304      	adds	r3, #4
 800845c:	4618      	mov	r0, r3
 800845e:	f7fe fa8d 	bl	800697c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008468:	f003 0304 	and.w	r3, r3, #4
 800846c:	2b00      	cmp	r3, #0
 800846e:	d022      	beq.n	80084b6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008470:	697b      	ldr	r3, [r7, #20]
 8008472:	699a      	ldr	r2, [r3, #24]
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	18d1      	adds	r1, r2, r3
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	683a      	ldr	r2, [r7, #0]
 800847c:	6978      	ldr	r0, [r7, #20]
 800847e:	f000 f8d1 	bl	8008624 <prvInsertTimerInActiveList>
 8008482:	4603      	mov	r3, r0
 8008484:	2b00      	cmp	r3, #0
 8008486:	d01f      	beq.n	80084c8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008488:	2300      	movs	r3, #0
 800848a:	9300      	str	r3, [sp, #0]
 800848c:	2300      	movs	r3, #0
 800848e:	687a      	ldr	r2, [r7, #4]
 8008490:	2100      	movs	r1, #0
 8008492:	6978      	ldr	r0, [r7, #20]
 8008494:	f7ff ff88 	bl	80083a8 <xTimerGenericCommand>
 8008498:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800849a:	693b      	ldr	r3, [r7, #16]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d113      	bne.n	80084c8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80084a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084a4:	f383 8811 	msr	BASEPRI, r3
 80084a8:	f3bf 8f6f 	isb	sy
 80084ac:	f3bf 8f4f 	dsb	sy
 80084b0:	60fb      	str	r3, [r7, #12]
}
 80084b2:	bf00      	nop
 80084b4:	e7fe      	b.n	80084b4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80084bc:	f023 0301 	bic.w	r3, r3, #1
 80084c0:	b2da      	uxtb	r2, r3
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	6a1b      	ldr	r3, [r3, #32]
 80084cc:	6978      	ldr	r0, [r7, #20]
 80084ce:	4798      	blx	r3
}
 80084d0:	bf00      	nop
 80084d2:	3718      	adds	r7, #24
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}
 80084d8:	20000c78 	.word	0x20000c78

080084dc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b084      	sub	sp, #16
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80084e4:	f107 0308 	add.w	r3, r7, #8
 80084e8:	4618      	mov	r0, r3
 80084ea:	f000 f857 	bl	800859c <prvGetNextExpireTime>
 80084ee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	4619      	mov	r1, r3
 80084f4:	68f8      	ldr	r0, [r7, #12]
 80084f6:	f000 f803 	bl	8008500 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80084fa:	f000 f8d5 	bl	80086a8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80084fe:	e7f1      	b.n	80084e4 <prvTimerTask+0x8>

08008500 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b084      	sub	sp, #16
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
 8008508:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800850a:	f7ff fa43 	bl	8007994 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800850e:	f107 0308 	add.w	r3, r7, #8
 8008512:	4618      	mov	r0, r3
 8008514:	f000 f866 	bl	80085e4 <prvSampleTimeNow>
 8008518:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d130      	bne.n	8008582 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d10a      	bne.n	800853c <prvProcessTimerOrBlockTask+0x3c>
 8008526:	687a      	ldr	r2, [r7, #4]
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	429a      	cmp	r2, r3
 800852c:	d806      	bhi.n	800853c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800852e:	f7ff fa3f 	bl	80079b0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008532:	68f9      	ldr	r1, [r7, #12]
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f7ff ff85 	bl	8008444 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800853a:	e024      	b.n	8008586 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d008      	beq.n	8008554 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008542:	4b13      	ldr	r3, [pc, #76]	; (8008590 <prvProcessTimerOrBlockTask+0x90>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d101      	bne.n	8008550 <prvProcessTimerOrBlockTask+0x50>
 800854c:	2301      	movs	r3, #1
 800854e:	e000      	b.n	8008552 <prvProcessTimerOrBlockTask+0x52>
 8008550:	2300      	movs	r3, #0
 8008552:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008554:	4b0f      	ldr	r3, [pc, #60]	; (8008594 <prvProcessTimerOrBlockTask+0x94>)
 8008556:	6818      	ldr	r0, [r3, #0]
 8008558:	687a      	ldr	r2, [r7, #4]
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	1ad3      	subs	r3, r2, r3
 800855e:	683a      	ldr	r2, [r7, #0]
 8008560:	4619      	mov	r1, r3
 8008562:	f7fe ffa7 	bl	80074b4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008566:	f7ff fa23 	bl	80079b0 <xTaskResumeAll>
 800856a:	4603      	mov	r3, r0
 800856c:	2b00      	cmp	r3, #0
 800856e:	d10a      	bne.n	8008586 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008570:	4b09      	ldr	r3, [pc, #36]	; (8008598 <prvProcessTimerOrBlockTask+0x98>)
 8008572:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008576:	601a      	str	r2, [r3, #0]
 8008578:	f3bf 8f4f 	dsb	sy
 800857c:	f3bf 8f6f 	isb	sy
}
 8008580:	e001      	b.n	8008586 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008582:	f7ff fa15 	bl	80079b0 <xTaskResumeAll>
}
 8008586:	bf00      	nop
 8008588:	3710      	adds	r7, #16
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}
 800858e:	bf00      	nop
 8008590:	20000c7c 	.word	0x20000c7c
 8008594:	20000c80 	.word	0x20000c80
 8008598:	e000ed04 	.word	0xe000ed04

0800859c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800859c:	b480      	push	{r7}
 800859e:	b085      	sub	sp, #20
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80085a4:	4b0e      	ldr	r3, [pc, #56]	; (80085e0 <prvGetNextExpireTime+0x44>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d101      	bne.n	80085b2 <prvGetNextExpireTime+0x16>
 80085ae:	2201      	movs	r2, #1
 80085b0:	e000      	b.n	80085b4 <prvGetNextExpireTime+0x18>
 80085b2:	2200      	movs	r2, #0
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d105      	bne.n	80085cc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80085c0:	4b07      	ldr	r3, [pc, #28]	; (80085e0 <prvGetNextExpireTime+0x44>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	68db      	ldr	r3, [r3, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	60fb      	str	r3, [r7, #12]
 80085ca:	e001      	b.n	80085d0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80085cc:	2300      	movs	r3, #0
 80085ce:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80085d0:	68fb      	ldr	r3, [r7, #12]
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3714      	adds	r7, #20
 80085d6:	46bd      	mov	sp, r7
 80085d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085dc:	4770      	bx	lr
 80085de:	bf00      	nop
 80085e0:	20000c78 	.word	0x20000c78

080085e4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b084      	sub	sp, #16
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80085ec:	f7ff fa7e 	bl	8007aec <xTaskGetTickCount>
 80085f0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80085f2:	4b0b      	ldr	r3, [pc, #44]	; (8008620 <prvSampleTimeNow+0x3c>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	68fa      	ldr	r2, [r7, #12]
 80085f8:	429a      	cmp	r2, r3
 80085fa:	d205      	bcs.n	8008608 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80085fc:	f000 f936 	bl	800886c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2201      	movs	r2, #1
 8008604:	601a      	str	r2, [r3, #0]
 8008606:	e002      	b.n	800860e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2200      	movs	r2, #0
 800860c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800860e:	4a04      	ldr	r2, [pc, #16]	; (8008620 <prvSampleTimeNow+0x3c>)
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008614:	68fb      	ldr	r3, [r7, #12]
}
 8008616:	4618      	mov	r0, r3
 8008618:	3710      	adds	r7, #16
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}
 800861e:	bf00      	nop
 8008620:	20000c88 	.word	0x20000c88

08008624 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b086      	sub	sp, #24
 8008628:	af00      	add	r7, sp, #0
 800862a:	60f8      	str	r0, [r7, #12]
 800862c:	60b9      	str	r1, [r7, #8]
 800862e:	607a      	str	r2, [r7, #4]
 8008630:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008632:	2300      	movs	r3, #0
 8008634:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	68ba      	ldr	r2, [r7, #8]
 800863a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	68fa      	ldr	r2, [r7, #12]
 8008640:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008642:	68ba      	ldr	r2, [r7, #8]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	429a      	cmp	r2, r3
 8008648:	d812      	bhi.n	8008670 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800864a:	687a      	ldr	r2, [r7, #4]
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	1ad2      	subs	r2, r2, r3
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	699b      	ldr	r3, [r3, #24]
 8008654:	429a      	cmp	r2, r3
 8008656:	d302      	bcc.n	800865e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008658:	2301      	movs	r3, #1
 800865a:	617b      	str	r3, [r7, #20]
 800865c:	e01b      	b.n	8008696 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800865e:	4b10      	ldr	r3, [pc, #64]	; (80086a0 <prvInsertTimerInActiveList+0x7c>)
 8008660:	681a      	ldr	r2, [r3, #0]
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	3304      	adds	r3, #4
 8008666:	4619      	mov	r1, r3
 8008668:	4610      	mov	r0, r2
 800866a:	f7fe f94e 	bl	800690a <vListInsert>
 800866e:	e012      	b.n	8008696 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008670:	687a      	ldr	r2, [r7, #4]
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	429a      	cmp	r2, r3
 8008676:	d206      	bcs.n	8008686 <prvInsertTimerInActiveList+0x62>
 8008678:	68ba      	ldr	r2, [r7, #8]
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	429a      	cmp	r2, r3
 800867e:	d302      	bcc.n	8008686 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008680:	2301      	movs	r3, #1
 8008682:	617b      	str	r3, [r7, #20]
 8008684:	e007      	b.n	8008696 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008686:	4b07      	ldr	r3, [pc, #28]	; (80086a4 <prvInsertTimerInActiveList+0x80>)
 8008688:	681a      	ldr	r2, [r3, #0]
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	3304      	adds	r3, #4
 800868e:	4619      	mov	r1, r3
 8008690:	4610      	mov	r0, r2
 8008692:	f7fe f93a 	bl	800690a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008696:	697b      	ldr	r3, [r7, #20]
}
 8008698:	4618      	mov	r0, r3
 800869a:	3718      	adds	r7, #24
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}
 80086a0:	20000c7c 	.word	0x20000c7c
 80086a4:	20000c78 	.word	0x20000c78

080086a8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b08e      	sub	sp, #56	; 0x38
 80086ac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80086ae:	e0ca      	b.n	8008846 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	da18      	bge.n	80086e8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80086b6:	1d3b      	adds	r3, r7, #4
 80086b8:	3304      	adds	r3, #4
 80086ba:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80086bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d10a      	bne.n	80086d8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80086c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c6:	f383 8811 	msr	BASEPRI, r3
 80086ca:	f3bf 8f6f 	isb	sy
 80086ce:	f3bf 8f4f 	dsb	sy
 80086d2:	61fb      	str	r3, [r7, #28]
}
 80086d4:	bf00      	nop
 80086d6:	e7fe      	b.n	80086d6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80086d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086de:	6850      	ldr	r0, [r2, #4]
 80086e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086e2:	6892      	ldr	r2, [r2, #8]
 80086e4:	4611      	mov	r1, r2
 80086e6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	f2c0 80aa 	blt.w	8008844 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80086f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f6:	695b      	ldr	r3, [r3, #20]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d004      	beq.n	8008706 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80086fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086fe:	3304      	adds	r3, #4
 8008700:	4618      	mov	r0, r3
 8008702:	f7fe f93b 	bl	800697c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008706:	463b      	mov	r3, r7
 8008708:	4618      	mov	r0, r3
 800870a:	f7ff ff6b 	bl	80085e4 <prvSampleTimeNow>
 800870e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2b09      	cmp	r3, #9
 8008714:	f200 8097 	bhi.w	8008846 <prvProcessReceivedCommands+0x19e>
 8008718:	a201      	add	r2, pc, #4	; (adr r2, 8008720 <prvProcessReceivedCommands+0x78>)
 800871a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800871e:	bf00      	nop
 8008720:	08008749 	.word	0x08008749
 8008724:	08008749 	.word	0x08008749
 8008728:	08008749 	.word	0x08008749
 800872c:	080087bd 	.word	0x080087bd
 8008730:	080087d1 	.word	0x080087d1
 8008734:	0800881b 	.word	0x0800881b
 8008738:	08008749 	.word	0x08008749
 800873c:	08008749 	.word	0x08008749
 8008740:	080087bd 	.word	0x080087bd
 8008744:	080087d1 	.word	0x080087d1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800874a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800874e:	f043 0301 	orr.w	r3, r3, #1
 8008752:	b2da      	uxtb	r2, r3
 8008754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008756:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800875a:	68ba      	ldr	r2, [r7, #8]
 800875c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800875e:	699b      	ldr	r3, [r3, #24]
 8008760:	18d1      	adds	r1, r2, r3
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008766:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008768:	f7ff ff5c 	bl	8008624 <prvInsertTimerInActiveList>
 800876c:	4603      	mov	r3, r0
 800876e:	2b00      	cmp	r3, #0
 8008770:	d069      	beq.n	8008846 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008774:	6a1b      	ldr	r3, [r3, #32]
 8008776:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008778:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800877a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800877c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008780:	f003 0304 	and.w	r3, r3, #4
 8008784:	2b00      	cmp	r3, #0
 8008786:	d05e      	beq.n	8008846 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008788:	68ba      	ldr	r2, [r7, #8]
 800878a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800878c:	699b      	ldr	r3, [r3, #24]
 800878e:	441a      	add	r2, r3
 8008790:	2300      	movs	r3, #0
 8008792:	9300      	str	r3, [sp, #0]
 8008794:	2300      	movs	r3, #0
 8008796:	2100      	movs	r1, #0
 8008798:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800879a:	f7ff fe05 	bl	80083a8 <xTimerGenericCommand>
 800879e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80087a0:	6a3b      	ldr	r3, [r7, #32]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d14f      	bne.n	8008846 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80087a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087aa:	f383 8811 	msr	BASEPRI, r3
 80087ae:	f3bf 8f6f 	isb	sy
 80087b2:	f3bf 8f4f 	dsb	sy
 80087b6:	61bb      	str	r3, [r7, #24]
}
 80087b8:	bf00      	nop
 80087ba:	e7fe      	b.n	80087ba <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80087bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80087c2:	f023 0301 	bic.w	r3, r3, #1
 80087c6:	b2da      	uxtb	r2, r3
 80087c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80087ce:	e03a      	b.n	8008846 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80087d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80087d6:	f043 0301 	orr.w	r3, r3, #1
 80087da:	b2da      	uxtb	r2, r3
 80087dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80087e2:	68ba      	ldr	r2, [r7, #8]
 80087e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087e6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80087e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ea:	699b      	ldr	r3, [r3, #24]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d10a      	bne.n	8008806 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80087f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f4:	f383 8811 	msr	BASEPRI, r3
 80087f8:	f3bf 8f6f 	isb	sy
 80087fc:	f3bf 8f4f 	dsb	sy
 8008800:	617b      	str	r3, [r7, #20]
}
 8008802:	bf00      	nop
 8008804:	e7fe      	b.n	8008804 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008808:	699a      	ldr	r2, [r3, #24]
 800880a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800880c:	18d1      	adds	r1, r2, r3
 800880e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008810:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008812:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008814:	f7ff ff06 	bl	8008624 <prvInsertTimerInActiveList>
					break;
 8008818:	e015      	b.n	8008846 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800881a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800881c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008820:	f003 0302 	and.w	r3, r3, #2
 8008824:	2b00      	cmp	r3, #0
 8008826:	d103      	bne.n	8008830 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008828:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800882a:	f000 fbe1 	bl	8008ff0 <vPortFree>
 800882e:	e00a      	b.n	8008846 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008832:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008836:	f023 0301 	bic.w	r3, r3, #1
 800883a:	b2da      	uxtb	r2, r3
 800883c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800883e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008842:	e000      	b.n	8008846 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008844:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008846:	4b08      	ldr	r3, [pc, #32]	; (8008868 <prvProcessReceivedCommands+0x1c0>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	1d39      	adds	r1, r7, #4
 800884c:	2200      	movs	r2, #0
 800884e:	4618      	mov	r0, r3
 8008850:	f7fe fb96 	bl	8006f80 <xQueueReceive>
 8008854:	4603      	mov	r3, r0
 8008856:	2b00      	cmp	r3, #0
 8008858:	f47f af2a 	bne.w	80086b0 <prvProcessReceivedCommands+0x8>
	}
}
 800885c:	bf00      	nop
 800885e:	bf00      	nop
 8008860:	3730      	adds	r7, #48	; 0x30
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}
 8008866:	bf00      	nop
 8008868:	20000c80 	.word	0x20000c80

0800886c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b088      	sub	sp, #32
 8008870:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008872:	e048      	b.n	8008906 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008874:	4b2d      	ldr	r3, [pc, #180]	; (800892c <prvSwitchTimerLists+0xc0>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	68db      	ldr	r3, [r3, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800887e:	4b2b      	ldr	r3, [pc, #172]	; (800892c <prvSwitchTimerLists+0xc0>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	68db      	ldr	r3, [r3, #12]
 8008884:	68db      	ldr	r3, [r3, #12]
 8008886:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	3304      	adds	r3, #4
 800888c:	4618      	mov	r0, r3
 800888e:	f7fe f875 	bl	800697c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	6a1b      	ldr	r3, [r3, #32]
 8008896:	68f8      	ldr	r0, [r7, #12]
 8008898:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80088a0:	f003 0304 	and.w	r3, r3, #4
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d02e      	beq.n	8008906 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	699b      	ldr	r3, [r3, #24]
 80088ac:	693a      	ldr	r2, [r7, #16]
 80088ae:	4413      	add	r3, r2
 80088b0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80088b2:	68ba      	ldr	r2, [r7, #8]
 80088b4:	693b      	ldr	r3, [r7, #16]
 80088b6:	429a      	cmp	r2, r3
 80088b8:	d90e      	bls.n	80088d8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	68ba      	ldr	r2, [r7, #8]
 80088be:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	68fa      	ldr	r2, [r7, #12]
 80088c4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80088c6:	4b19      	ldr	r3, [pc, #100]	; (800892c <prvSwitchTimerLists+0xc0>)
 80088c8:	681a      	ldr	r2, [r3, #0]
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	3304      	adds	r3, #4
 80088ce:	4619      	mov	r1, r3
 80088d0:	4610      	mov	r0, r2
 80088d2:	f7fe f81a 	bl	800690a <vListInsert>
 80088d6:	e016      	b.n	8008906 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80088d8:	2300      	movs	r3, #0
 80088da:	9300      	str	r3, [sp, #0]
 80088dc:	2300      	movs	r3, #0
 80088de:	693a      	ldr	r2, [r7, #16]
 80088e0:	2100      	movs	r1, #0
 80088e2:	68f8      	ldr	r0, [r7, #12]
 80088e4:	f7ff fd60 	bl	80083a8 <xTimerGenericCommand>
 80088e8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d10a      	bne.n	8008906 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80088f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088f4:	f383 8811 	msr	BASEPRI, r3
 80088f8:	f3bf 8f6f 	isb	sy
 80088fc:	f3bf 8f4f 	dsb	sy
 8008900:	603b      	str	r3, [r7, #0]
}
 8008902:	bf00      	nop
 8008904:	e7fe      	b.n	8008904 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008906:	4b09      	ldr	r3, [pc, #36]	; (800892c <prvSwitchTimerLists+0xc0>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d1b1      	bne.n	8008874 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008910:	4b06      	ldr	r3, [pc, #24]	; (800892c <prvSwitchTimerLists+0xc0>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008916:	4b06      	ldr	r3, [pc, #24]	; (8008930 <prvSwitchTimerLists+0xc4>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	4a04      	ldr	r2, [pc, #16]	; (800892c <prvSwitchTimerLists+0xc0>)
 800891c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800891e:	4a04      	ldr	r2, [pc, #16]	; (8008930 <prvSwitchTimerLists+0xc4>)
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	6013      	str	r3, [r2, #0]
}
 8008924:	bf00      	nop
 8008926:	3718      	adds	r7, #24
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}
 800892c:	20000c78 	.word	0x20000c78
 8008930:	20000c7c 	.word	0x20000c7c

08008934 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b082      	sub	sp, #8
 8008938:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800893a:	f000 f96b 	bl	8008c14 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800893e:	4b15      	ldr	r3, [pc, #84]	; (8008994 <prvCheckForValidListAndQueue+0x60>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d120      	bne.n	8008988 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008946:	4814      	ldr	r0, [pc, #80]	; (8008998 <prvCheckForValidListAndQueue+0x64>)
 8008948:	f7fd ff8e 	bl	8006868 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800894c:	4813      	ldr	r0, [pc, #76]	; (800899c <prvCheckForValidListAndQueue+0x68>)
 800894e:	f7fd ff8b 	bl	8006868 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008952:	4b13      	ldr	r3, [pc, #76]	; (80089a0 <prvCheckForValidListAndQueue+0x6c>)
 8008954:	4a10      	ldr	r2, [pc, #64]	; (8008998 <prvCheckForValidListAndQueue+0x64>)
 8008956:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008958:	4b12      	ldr	r3, [pc, #72]	; (80089a4 <prvCheckForValidListAndQueue+0x70>)
 800895a:	4a10      	ldr	r2, [pc, #64]	; (800899c <prvCheckForValidListAndQueue+0x68>)
 800895c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800895e:	2300      	movs	r3, #0
 8008960:	9300      	str	r3, [sp, #0]
 8008962:	4b11      	ldr	r3, [pc, #68]	; (80089a8 <prvCheckForValidListAndQueue+0x74>)
 8008964:	4a11      	ldr	r2, [pc, #68]	; (80089ac <prvCheckForValidListAndQueue+0x78>)
 8008966:	2110      	movs	r1, #16
 8008968:	200a      	movs	r0, #10
 800896a:	f7fe f899 	bl	8006aa0 <xQueueGenericCreateStatic>
 800896e:	4603      	mov	r3, r0
 8008970:	4a08      	ldr	r2, [pc, #32]	; (8008994 <prvCheckForValidListAndQueue+0x60>)
 8008972:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008974:	4b07      	ldr	r3, [pc, #28]	; (8008994 <prvCheckForValidListAndQueue+0x60>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d005      	beq.n	8008988 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800897c:	4b05      	ldr	r3, [pc, #20]	; (8008994 <prvCheckForValidListAndQueue+0x60>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	490b      	ldr	r1, [pc, #44]	; (80089b0 <prvCheckForValidListAndQueue+0x7c>)
 8008982:	4618      	mov	r0, r3
 8008984:	f7fe fd6c 	bl	8007460 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008988:	f000 f974 	bl	8008c74 <vPortExitCritical>
}
 800898c:	bf00      	nop
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}
 8008992:	bf00      	nop
 8008994:	20000c80 	.word	0x20000c80
 8008998:	20000c50 	.word	0x20000c50
 800899c:	20000c64 	.word	0x20000c64
 80089a0:	20000c78 	.word	0x20000c78
 80089a4:	20000c7c 	.word	0x20000c7c
 80089a8:	20000d2c 	.word	0x20000d2c
 80089ac:	20000c8c 	.word	0x20000c8c
 80089b0:	0800951c 	.word	0x0800951c

080089b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80089b4:	b480      	push	{r7}
 80089b6:	b085      	sub	sp, #20
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	60f8      	str	r0, [r7, #12]
 80089bc:	60b9      	str	r1, [r7, #8]
 80089be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	3b04      	subs	r3, #4
 80089c4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80089cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	3b04      	subs	r3, #4
 80089d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	f023 0201 	bic.w	r2, r3, #1
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	3b04      	subs	r3, #4
 80089e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80089e4:	4a0c      	ldr	r2, [pc, #48]	; (8008a18 <pxPortInitialiseStack+0x64>)
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	3b14      	subs	r3, #20
 80089ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80089f0:	687a      	ldr	r2, [r7, #4]
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	3b04      	subs	r3, #4
 80089fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	f06f 0202 	mvn.w	r2, #2
 8008a02:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	3b20      	subs	r3, #32
 8008a08:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3714      	adds	r7, #20
 8008a10:	46bd      	mov	sp, r7
 8008a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a16:	4770      	bx	lr
 8008a18:	08008a1d 	.word	0x08008a1d

08008a1c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b085      	sub	sp, #20
 8008a20:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008a22:	2300      	movs	r3, #0
 8008a24:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008a26:	4b12      	ldr	r3, [pc, #72]	; (8008a70 <prvTaskExitError+0x54>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a2e:	d00a      	beq.n	8008a46 <prvTaskExitError+0x2a>
	__asm volatile
 8008a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a34:	f383 8811 	msr	BASEPRI, r3
 8008a38:	f3bf 8f6f 	isb	sy
 8008a3c:	f3bf 8f4f 	dsb	sy
 8008a40:	60fb      	str	r3, [r7, #12]
}
 8008a42:	bf00      	nop
 8008a44:	e7fe      	b.n	8008a44 <prvTaskExitError+0x28>
	__asm volatile
 8008a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a4a:	f383 8811 	msr	BASEPRI, r3
 8008a4e:	f3bf 8f6f 	isb	sy
 8008a52:	f3bf 8f4f 	dsb	sy
 8008a56:	60bb      	str	r3, [r7, #8]
}
 8008a58:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008a5a:	bf00      	nop
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d0fc      	beq.n	8008a5c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008a62:	bf00      	nop
 8008a64:	bf00      	nop
 8008a66:	3714      	adds	r7, #20
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6e:	4770      	bx	lr
 8008a70:	20000048 	.word	0x20000048
	...

08008a80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008a80:	4b07      	ldr	r3, [pc, #28]	; (8008aa0 <pxCurrentTCBConst2>)
 8008a82:	6819      	ldr	r1, [r3, #0]
 8008a84:	6808      	ldr	r0, [r1, #0]
 8008a86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a8a:	f380 8809 	msr	PSP, r0
 8008a8e:	f3bf 8f6f 	isb	sy
 8008a92:	f04f 0000 	mov.w	r0, #0
 8008a96:	f380 8811 	msr	BASEPRI, r0
 8008a9a:	4770      	bx	lr
 8008a9c:	f3af 8000 	nop.w

08008aa0 <pxCurrentTCBConst2>:
 8008aa0:	20000750 	.word	0x20000750
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008aa4:	bf00      	nop
 8008aa6:	bf00      	nop

08008aa8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008aa8:	4808      	ldr	r0, [pc, #32]	; (8008acc <prvPortStartFirstTask+0x24>)
 8008aaa:	6800      	ldr	r0, [r0, #0]
 8008aac:	6800      	ldr	r0, [r0, #0]
 8008aae:	f380 8808 	msr	MSP, r0
 8008ab2:	f04f 0000 	mov.w	r0, #0
 8008ab6:	f380 8814 	msr	CONTROL, r0
 8008aba:	b662      	cpsie	i
 8008abc:	b661      	cpsie	f
 8008abe:	f3bf 8f4f 	dsb	sy
 8008ac2:	f3bf 8f6f 	isb	sy
 8008ac6:	df00      	svc	0
 8008ac8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008aca:	bf00      	nop
 8008acc:	e000ed08 	.word	0xe000ed08

08008ad0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b086      	sub	sp, #24
 8008ad4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008ad6:	4b46      	ldr	r3, [pc, #280]	; (8008bf0 <xPortStartScheduler+0x120>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	4a46      	ldr	r2, [pc, #280]	; (8008bf4 <xPortStartScheduler+0x124>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d10a      	bne.n	8008af6 <xPortStartScheduler+0x26>
	__asm volatile
 8008ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ae4:	f383 8811 	msr	BASEPRI, r3
 8008ae8:	f3bf 8f6f 	isb	sy
 8008aec:	f3bf 8f4f 	dsb	sy
 8008af0:	613b      	str	r3, [r7, #16]
}
 8008af2:	bf00      	nop
 8008af4:	e7fe      	b.n	8008af4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008af6:	4b3e      	ldr	r3, [pc, #248]	; (8008bf0 <xPortStartScheduler+0x120>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	4a3f      	ldr	r2, [pc, #252]	; (8008bf8 <xPortStartScheduler+0x128>)
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d10a      	bne.n	8008b16 <xPortStartScheduler+0x46>
	__asm volatile
 8008b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b04:	f383 8811 	msr	BASEPRI, r3
 8008b08:	f3bf 8f6f 	isb	sy
 8008b0c:	f3bf 8f4f 	dsb	sy
 8008b10:	60fb      	str	r3, [r7, #12]
}
 8008b12:	bf00      	nop
 8008b14:	e7fe      	b.n	8008b14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008b16:	4b39      	ldr	r3, [pc, #228]	; (8008bfc <xPortStartScheduler+0x12c>)
 8008b18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	781b      	ldrb	r3, [r3, #0]
 8008b1e:	b2db      	uxtb	r3, r3
 8008b20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	22ff      	movs	r2, #255	; 0xff
 8008b26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008b28:	697b      	ldr	r3, [r7, #20]
 8008b2a:	781b      	ldrb	r3, [r3, #0]
 8008b2c:	b2db      	uxtb	r3, r3
 8008b2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008b30:	78fb      	ldrb	r3, [r7, #3]
 8008b32:	b2db      	uxtb	r3, r3
 8008b34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008b38:	b2da      	uxtb	r2, r3
 8008b3a:	4b31      	ldr	r3, [pc, #196]	; (8008c00 <xPortStartScheduler+0x130>)
 8008b3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008b3e:	4b31      	ldr	r3, [pc, #196]	; (8008c04 <xPortStartScheduler+0x134>)
 8008b40:	2207      	movs	r2, #7
 8008b42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008b44:	e009      	b.n	8008b5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008b46:	4b2f      	ldr	r3, [pc, #188]	; (8008c04 <xPortStartScheduler+0x134>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	3b01      	subs	r3, #1
 8008b4c:	4a2d      	ldr	r2, [pc, #180]	; (8008c04 <xPortStartScheduler+0x134>)
 8008b4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008b50:	78fb      	ldrb	r3, [r7, #3]
 8008b52:	b2db      	uxtb	r3, r3
 8008b54:	005b      	lsls	r3, r3, #1
 8008b56:	b2db      	uxtb	r3, r3
 8008b58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008b5a:	78fb      	ldrb	r3, [r7, #3]
 8008b5c:	b2db      	uxtb	r3, r3
 8008b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b62:	2b80      	cmp	r3, #128	; 0x80
 8008b64:	d0ef      	beq.n	8008b46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008b66:	4b27      	ldr	r3, [pc, #156]	; (8008c04 <xPortStartScheduler+0x134>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f1c3 0307 	rsb	r3, r3, #7
 8008b6e:	2b04      	cmp	r3, #4
 8008b70:	d00a      	beq.n	8008b88 <xPortStartScheduler+0xb8>
	__asm volatile
 8008b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b76:	f383 8811 	msr	BASEPRI, r3
 8008b7a:	f3bf 8f6f 	isb	sy
 8008b7e:	f3bf 8f4f 	dsb	sy
 8008b82:	60bb      	str	r3, [r7, #8]
}
 8008b84:	bf00      	nop
 8008b86:	e7fe      	b.n	8008b86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008b88:	4b1e      	ldr	r3, [pc, #120]	; (8008c04 <xPortStartScheduler+0x134>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	021b      	lsls	r3, r3, #8
 8008b8e:	4a1d      	ldr	r2, [pc, #116]	; (8008c04 <xPortStartScheduler+0x134>)
 8008b90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008b92:	4b1c      	ldr	r3, [pc, #112]	; (8008c04 <xPortStartScheduler+0x134>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008b9a:	4a1a      	ldr	r2, [pc, #104]	; (8008c04 <xPortStartScheduler+0x134>)
 8008b9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	b2da      	uxtb	r2, r3
 8008ba2:	697b      	ldr	r3, [r7, #20]
 8008ba4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008ba6:	4b18      	ldr	r3, [pc, #96]	; (8008c08 <xPortStartScheduler+0x138>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	4a17      	ldr	r2, [pc, #92]	; (8008c08 <xPortStartScheduler+0x138>)
 8008bac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008bb0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008bb2:	4b15      	ldr	r3, [pc, #84]	; (8008c08 <xPortStartScheduler+0x138>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	4a14      	ldr	r2, [pc, #80]	; (8008c08 <xPortStartScheduler+0x138>)
 8008bb8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008bbc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008bbe:	f000 f8dd 	bl	8008d7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008bc2:	4b12      	ldr	r3, [pc, #72]	; (8008c0c <xPortStartScheduler+0x13c>)
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008bc8:	f000 f8fc 	bl	8008dc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008bcc:	4b10      	ldr	r3, [pc, #64]	; (8008c10 <xPortStartScheduler+0x140>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	4a0f      	ldr	r2, [pc, #60]	; (8008c10 <xPortStartScheduler+0x140>)
 8008bd2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008bd6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008bd8:	f7ff ff66 	bl	8008aa8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008bdc:	f7ff f850 	bl	8007c80 <vTaskSwitchContext>
	prvTaskExitError();
 8008be0:	f7ff ff1c 	bl	8008a1c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008be4:	2300      	movs	r3, #0
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3718      	adds	r7, #24
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}
 8008bee:	bf00      	nop
 8008bf0:	e000ed00 	.word	0xe000ed00
 8008bf4:	410fc271 	.word	0x410fc271
 8008bf8:	410fc270 	.word	0x410fc270
 8008bfc:	e000e400 	.word	0xe000e400
 8008c00:	20000d7c 	.word	0x20000d7c
 8008c04:	20000d80 	.word	0x20000d80
 8008c08:	e000ed20 	.word	0xe000ed20
 8008c0c:	20000048 	.word	0x20000048
 8008c10:	e000ef34 	.word	0xe000ef34

08008c14 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008c14:	b480      	push	{r7}
 8008c16:	b083      	sub	sp, #12
 8008c18:	af00      	add	r7, sp, #0
	__asm volatile
 8008c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c1e:	f383 8811 	msr	BASEPRI, r3
 8008c22:	f3bf 8f6f 	isb	sy
 8008c26:	f3bf 8f4f 	dsb	sy
 8008c2a:	607b      	str	r3, [r7, #4]
}
 8008c2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008c2e:	4b0f      	ldr	r3, [pc, #60]	; (8008c6c <vPortEnterCritical+0x58>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	3301      	adds	r3, #1
 8008c34:	4a0d      	ldr	r2, [pc, #52]	; (8008c6c <vPortEnterCritical+0x58>)
 8008c36:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008c38:	4b0c      	ldr	r3, [pc, #48]	; (8008c6c <vPortEnterCritical+0x58>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	2b01      	cmp	r3, #1
 8008c3e:	d10f      	bne.n	8008c60 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008c40:	4b0b      	ldr	r3, [pc, #44]	; (8008c70 <vPortEnterCritical+0x5c>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	b2db      	uxtb	r3, r3
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d00a      	beq.n	8008c60 <vPortEnterCritical+0x4c>
	__asm volatile
 8008c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c4e:	f383 8811 	msr	BASEPRI, r3
 8008c52:	f3bf 8f6f 	isb	sy
 8008c56:	f3bf 8f4f 	dsb	sy
 8008c5a:	603b      	str	r3, [r7, #0]
}
 8008c5c:	bf00      	nop
 8008c5e:	e7fe      	b.n	8008c5e <vPortEnterCritical+0x4a>
	}
}
 8008c60:	bf00      	nop
 8008c62:	370c      	adds	r7, #12
 8008c64:	46bd      	mov	sp, r7
 8008c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6a:	4770      	bx	lr
 8008c6c:	20000048 	.word	0x20000048
 8008c70:	e000ed04 	.word	0xe000ed04

08008c74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008c74:	b480      	push	{r7}
 8008c76:	b083      	sub	sp, #12
 8008c78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008c7a:	4b12      	ldr	r3, [pc, #72]	; (8008cc4 <vPortExitCritical+0x50>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d10a      	bne.n	8008c98 <vPortExitCritical+0x24>
	__asm volatile
 8008c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c86:	f383 8811 	msr	BASEPRI, r3
 8008c8a:	f3bf 8f6f 	isb	sy
 8008c8e:	f3bf 8f4f 	dsb	sy
 8008c92:	607b      	str	r3, [r7, #4]
}
 8008c94:	bf00      	nop
 8008c96:	e7fe      	b.n	8008c96 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008c98:	4b0a      	ldr	r3, [pc, #40]	; (8008cc4 <vPortExitCritical+0x50>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	3b01      	subs	r3, #1
 8008c9e:	4a09      	ldr	r2, [pc, #36]	; (8008cc4 <vPortExitCritical+0x50>)
 8008ca0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008ca2:	4b08      	ldr	r3, [pc, #32]	; (8008cc4 <vPortExitCritical+0x50>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d105      	bne.n	8008cb6 <vPortExitCritical+0x42>
 8008caa:	2300      	movs	r3, #0
 8008cac:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	f383 8811 	msr	BASEPRI, r3
}
 8008cb4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008cb6:	bf00      	nop
 8008cb8:	370c      	adds	r7, #12
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc0:	4770      	bx	lr
 8008cc2:	bf00      	nop
 8008cc4:	20000048 	.word	0x20000048
	...

08008cd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008cd0:	f3ef 8009 	mrs	r0, PSP
 8008cd4:	f3bf 8f6f 	isb	sy
 8008cd8:	4b15      	ldr	r3, [pc, #84]	; (8008d30 <pxCurrentTCBConst>)
 8008cda:	681a      	ldr	r2, [r3, #0]
 8008cdc:	f01e 0f10 	tst.w	lr, #16
 8008ce0:	bf08      	it	eq
 8008ce2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008ce6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cea:	6010      	str	r0, [r2, #0]
 8008cec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008cf0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008cf4:	f380 8811 	msr	BASEPRI, r0
 8008cf8:	f3bf 8f4f 	dsb	sy
 8008cfc:	f3bf 8f6f 	isb	sy
 8008d00:	f7fe ffbe 	bl	8007c80 <vTaskSwitchContext>
 8008d04:	f04f 0000 	mov.w	r0, #0
 8008d08:	f380 8811 	msr	BASEPRI, r0
 8008d0c:	bc09      	pop	{r0, r3}
 8008d0e:	6819      	ldr	r1, [r3, #0]
 8008d10:	6808      	ldr	r0, [r1, #0]
 8008d12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d16:	f01e 0f10 	tst.w	lr, #16
 8008d1a:	bf08      	it	eq
 8008d1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008d20:	f380 8809 	msr	PSP, r0
 8008d24:	f3bf 8f6f 	isb	sy
 8008d28:	4770      	bx	lr
 8008d2a:	bf00      	nop
 8008d2c:	f3af 8000 	nop.w

08008d30 <pxCurrentTCBConst>:
 8008d30:	20000750 	.word	0x20000750
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008d34:	bf00      	nop
 8008d36:	bf00      	nop

08008d38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b082      	sub	sp, #8
 8008d3c:	af00      	add	r7, sp, #0
	__asm volatile
 8008d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d42:	f383 8811 	msr	BASEPRI, r3
 8008d46:	f3bf 8f6f 	isb	sy
 8008d4a:	f3bf 8f4f 	dsb	sy
 8008d4e:	607b      	str	r3, [r7, #4]
}
 8008d50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008d52:	f7fe fedb 	bl	8007b0c <xTaskIncrementTick>
 8008d56:	4603      	mov	r3, r0
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d003      	beq.n	8008d64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008d5c:	4b06      	ldr	r3, [pc, #24]	; (8008d78 <xPortSysTickHandler+0x40>)
 8008d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d62:	601a      	str	r2, [r3, #0]
 8008d64:	2300      	movs	r3, #0
 8008d66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	f383 8811 	msr	BASEPRI, r3
}
 8008d6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008d70:	bf00      	nop
 8008d72:	3708      	adds	r7, #8
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}
 8008d78:	e000ed04 	.word	0xe000ed04

08008d7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008d80:	4b0b      	ldr	r3, [pc, #44]	; (8008db0 <vPortSetupTimerInterrupt+0x34>)
 8008d82:	2200      	movs	r2, #0
 8008d84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008d86:	4b0b      	ldr	r3, [pc, #44]	; (8008db4 <vPortSetupTimerInterrupt+0x38>)
 8008d88:	2200      	movs	r2, #0
 8008d8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008d8c:	4b0a      	ldr	r3, [pc, #40]	; (8008db8 <vPortSetupTimerInterrupt+0x3c>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4a0a      	ldr	r2, [pc, #40]	; (8008dbc <vPortSetupTimerInterrupt+0x40>)
 8008d92:	fba2 2303 	umull	r2, r3, r2, r3
 8008d96:	099b      	lsrs	r3, r3, #6
 8008d98:	4a09      	ldr	r2, [pc, #36]	; (8008dc0 <vPortSetupTimerInterrupt+0x44>)
 8008d9a:	3b01      	subs	r3, #1
 8008d9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008d9e:	4b04      	ldr	r3, [pc, #16]	; (8008db0 <vPortSetupTimerInterrupt+0x34>)
 8008da0:	2207      	movs	r2, #7
 8008da2:	601a      	str	r2, [r3, #0]
}
 8008da4:	bf00      	nop
 8008da6:	46bd      	mov	sp, r7
 8008da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dac:	4770      	bx	lr
 8008dae:	bf00      	nop
 8008db0:	e000e010 	.word	0xe000e010
 8008db4:	e000e018 	.word	0xe000e018
 8008db8:	20000018 	.word	0x20000018
 8008dbc:	10624dd3 	.word	0x10624dd3
 8008dc0:	e000e014 	.word	0xe000e014

08008dc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008dc4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008dd4 <vPortEnableVFP+0x10>
 8008dc8:	6801      	ldr	r1, [r0, #0]
 8008dca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008dce:	6001      	str	r1, [r0, #0]
 8008dd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008dd2:	bf00      	nop
 8008dd4:	e000ed88 	.word	0xe000ed88

08008dd8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008dd8:	b480      	push	{r7}
 8008dda:	b085      	sub	sp, #20
 8008ddc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008dde:	f3ef 8305 	mrs	r3, IPSR
 8008de2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	2b0f      	cmp	r3, #15
 8008de8:	d914      	bls.n	8008e14 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008dea:	4a17      	ldr	r2, [pc, #92]	; (8008e48 <vPortValidateInterruptPriority+0x70>)
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	4413      	add	r3, r2
 8008df0:	781b      	ldrb	r3, [r3, #0]
 8008df2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008df4:	4b15      	ldr	r3, [pc, #84]	; (8008e4c <vPortValidateInterruptPriority+0x74>)
 8008df6:	781b      	ldrb	r3, [r3, #0]
 8008df8:	7afa      	ldrb	r2, [r7, #11]
 8008dfa:	429a      	cmp	r2, r3
 8008dfc:	d20a      	bcs.n	8008e14 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e02:	f383 8811 	msr	BASEPRI, r3
 8008e06:	f3bf 8f6f 	isb	sy
 8008e0a:	f3bf 8f4f 	dsb	sy
 8008e0e:	607b      	str	r3, [r7, #4]
}
 8008e10:	bf00      	nop
 8008e12:	e7fe      	b.n	8008e12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008e14:	4b0e      	ldr	r3, [pc, #56]	; (8008e50 <vPortValidateInterruptPriority+0x78>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008e1c:	4b0d      	ldr	r3, [pc, #52]	; (8008e54 <vPortValidateInterruptPriority+0x7c>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	429a      	cmp	r2, r3
 8008e22:	d90a      	bls.n	8008e3a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e28:	f383 8811 	msr	BASEPRI, r3
 8008e2c:	f3bf 8f6f 	isb	sy
 8008e30:	f3bf 8f4f 	dsb	sy
 8008e34:	603b      	str	r3, [r7, #0]
}
 8008e36:	bf00      	nop
 8008e38:	e7fe      	b.n	8008e38 <vPortValidateInterruptPriority+0x60>
	}
 8008e3a:	bf00      	nop
 8008e3c:	3714      	adds	r7, #20
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e44:	4770      	bx	lr
 8008e46:	bf00      	nop
 8008e48:	e000e3f0 	.word	0xe000e3f0
 8008e4c:	20000d7c 	.word	0x20000d7c
 8008e50:	e000ed0c 	.word	0xe000ed0c
 8008e54:	20000d80 	.word	0x20000d80

08008e58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b08a      	sub	sp, #40	; 0x28
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008e60:	2300      	movs	r3, #0
 8008e62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008e64:	f7fe fd96 	bl	8007994 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008e68:	4b5b      	ldr	r3, [pc, #364]	; (8008fd8 <pvPortMalloc+0x180>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d101      	bne.n	8008e74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008e70:	f000 f920 	bl	80090b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008e74:	4b59      	ldr	r3, [pc, #356]	; (8008fdc <pvPortMalloc+0x184>)
 8008e76:	681a      	ldr	r2, [r3, #0]
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	4013      	ands	r3, r2
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	f040 8093 	bne.w	8008fa8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d01d      	beq.n	8008ec4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008e88:	2208      	movs	r2, #8
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	4413      	add	r3, r2
 8008e8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f003 0307 	and.w	r3, r3, #7
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d014      	beq.n	8008ec4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f023 0307 	bic.w	r3, r3, #7
 8008ea0:	3308      	adds	r3, #8
 8008ea2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f003 0307 	and.w	r3, r3, #7
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d00a      	beq.n	8008ec4 <pvPortMalloc+0x6c>
	__asm volatile
 8008eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eb2:	f383 8811 	msr	BASEPRI, r3
 8008eb6:	f3bf 8f6f 	isb	sy
 8008eba:	f3bf 8f4f 	dsb	sy
 8008ebe:	617b      	str	r3, [r7, #20]
}
 8008ec0:	bf00      	nop
 8008ec2:	e7fe      	b.n	8008ec2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d06e      	beq.n	8008fa8 <pvPortMalloc+0x150>
 8008eca:	4b45      	ldr	r3, [pc, #276]	; (8008fe0 <pvPortMalloc+0x188>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	687a      	ldr	r2, [r7, #4]
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	d869      	bhi.n	8008fa8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008ed4:	4b43      	ldr	r3, [pc, #268]	; (8008fe4 <pvPortMalloc+0x18c>)
 8008ed6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008ed8:	4b42      	ldr	r3, [pc, #264]	; (8008fe4 <pvPortMalloc+0x18c>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008ede:	e004      	b.n	8008eea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eec:	685b      	ldr	r3, [r3, #4]
 8008eee:	687a      	ldr	r2, [r7, #4]
 8008ef0:	429a      	cmp	r2, r3
 8008ef2:	d903      	bls.n	8008efc <pvPortMalloc+0xa4>
 8008ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d1f1      	bne.n	8008ee0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008efc:	4b36      	ldr	r3, [pc, #216]	; (8008fd8 <pvPortMalloc+0x180>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f02:	429a      	cmp	r2, r3
 8008f04:	d050      	beq.n	8008fa8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008f06:	6a3b      	ldr	r3, [r7, #32]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	2208      	movs	r2, #8
 8008f0c:	4413      	add	r3, r2
 8008f0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f12:	681a      	ldr	r2, [r3, #0]
 8008f14:	6a3b      	ldr	r3, [r7, #32]
 8008f16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f1a:	685a      	ldr	r2, [r3, #4]
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	1ad2      	subs	r2, r2, r3
 8008f20:	2308      	movs	r3, #8
 8008f22:	005b      	lsls	r3, r3, #1
 8008f24:	429a      	cmp	r2, r3
 8008f26:	d91f      	bls.n	8008f68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008f28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	4413      	add	r3, r2
 8008f2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f30:	69bb      	ldr	r3, [r7, #24]
 8008f32:	f003 0307 	and.w	r3, r3, #7
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d00a      	beq.n	8008f50 <pvPortMalloc+0xf8>
	__asm volatile
 8008f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f3e:	f383 8811 	msr	BASEPRI, r3
 8008f42:	f3bf 8f6f 	isb	sy
 8008f46:	f3bf 8f4f 	dsb	sy
 8008f4a:	613b      	str	r3, [r7, #16]
}
 8008f4c:	bf00      	nop
 8008f4e:	e7fe      	b.n	8008f4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f52:	685a      	ldr	r2, [r3, #4]
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	1ad2      	subs	r2, r2, r3
 8008f58:	69bb      	ldr	r3, [r7, #24]
 8008f5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f5e:	687a      	ldr	r2, [r7, #4]
 8008f60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008f62:	69b8      	ldr	r0, [r7, #24]
 8008f64:	f000 f908 	bl	8009178 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008f68:	4b1d      	ldr	r3, [pc, #116]	; (8008fe0 <pvPortMalloc+0x188>)
 8008f6a:	681a      	ldr	r2, [r3, #0]
 8008f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f6e:	685b      	ldr	r3, [r3, #4]
 8008f70:	1ad3      	subs	r3, r2, r3
 8008f72:	4a1b      	ldr	r2, [pc, #108]	; (8008fe0 <pvPortMalloc+0x188>)
 8008f74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008f76:	4b1a      	ldr	r3, [pc, #104]	; (8008fe0 <pvPortMalloc+0x188>)
 8008f78:	681a      	ldr	r2, [r3, #0]
 8008f7a:	4b1b      	ldr	r3, [pc, #108]	; (8008fe8 <pvPortMalloc+0x190>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	429a      	cmp	r2, r3
 8008f80:	d203      	bcs.n	8008f8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008f82:	4b17      	ldr	r3, [pc, #92]	; (8008fe0 <pvPortMalloc+0x188>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	4a18      	ldr	r2, [pc, #96]	; (8008fe8 <pvPortMalloc+0x190>)
 8008f88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f8c:	685a      	ldr	r2, [r3, #4]
 8008f8e:	4b13      	ldr	r3, [pc, #76]	; (8008fdc <pvPortMalloc+0x184>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	431a      	orrs	r2, r3
 8008f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008f9e:	4b13      	ldr	r3, [pc, #76]	; (8008fec <pvPortMalloc+0x194>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	3301      	adds	r3, #1
 8008fa4:	4a11      	ldr	r2, [pc, #68]	; (8008fec <pvPortMalloc+0x194>)
 8008fa6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008fa8:	f7fe fd02 	bl	80079b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008fac:	69fb      	ldr	r3, [r7, #28]
 8008fae:	f003 0307 	and.w	r3, r3, #7
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d00a      	beq.n	8008fcc <pvPortMalloc+0x174>
	__asm volatile
 8008fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fba:	f383 8811 	msr	BASEPRI, r3
 8008fbe:	f3bf 8f6f 	isb	sy
 8008fc2:	f3bf 8f4f 	dsb	sy
 8008fc6:	60fb      	str	r3, [r7, #12]
}
 8008fc8:	bf00      	nop
 8008fca:	e7fe      	b.n	8008fca <pvPortMalloc+0x172>
	return pvReturn;
 8008fcc:	69fb      	ldr	r3, [r7, #28]
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	3728      	adds	r7, #40	; 0x28
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}
 8008fd6:	bf00      	nop
 8008fd8:	20001944 	.word	0x20001944
 8008fdc:	20001958 	.word	0x20001958
 8008fe0:	20001948 	.word	0x20001948
 8008fe4:	2000193c 	.word	0x2000193c
 8008fe8:	2000194c 	.word	0x2000194c
 8008fec:	20001950 	.word	0x20001950

08008ff0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b086      	sub	sp, #24
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d04d      	beq.n	800909e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009002:	2308      	movs	r3, #8
 8009004:	425b      	negs	r3, r3
 8009006:	697a      	ldr	r2, [r7, #20]
 8009008:	4413      	add	r3, r2
 800900a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800900c:	697b      	ldr	r3, [r7, #20]
 800900e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009010:	693b      	ldr	r3, [r7, #16]
 8009012:	685a      	ldr	r2, [r3, #4]
 8009014:	4b24      	ldr	r3, [pc, #144]	; (80090a8 <vPortFree+0xb8>)
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	4013      	ands	r3, r2
 800901a:	2b00      	cmp	r3, #0
 800901c:	d10a      	bne.n	8009034 <vPortFree+0x44>
	__asm volatile
 800901e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009022:	f383 8811 	msr	BASEPRI, r3
 8009026:	f3bf 8f6f 	isb	sy
 800902a:	f3bf 8f4f 	dsb	sy
 800902e:	60fb      	str	r3, [r7, #12]
}
 8009030:	bf00      	nop
 8009032:	e7fe      	b.n	8009032 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009034:	693b      	ldr	r3, [r7, #16]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d00a      	beq.n	8009052 <vPortFree+0x62>
	__asm volatile
 800903c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009040:	f383 8811 	msr	BASEPRI, r3
 8009044:	f3bf 8f6f 	isb	sy
 8009048:	f3bf 8f4f 	dsb	sy
 800904c:	60bb      	str	r3, [r7, #8]
}
 800904e:	bf00      	nop
 8009050:	e7fe      	b.n	8009050 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009052:	693b      	ldr	r3, [r7, #16]
 8009054:	685a      	ldr	r2, [r3, #4]
 8009056:	4b14      	ldr	r3, [pc, #80]	; (80090a8 <vPortFree+0xb8>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	4013      	ands	r3, r2
 800905c:	2b00      	cmp	r3, #0
 800905e:	d01e      	beq.n	800909e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d11a      	bne.n	800909e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	685a      	ldr	r2, [r3, #4]
 800906c:	4b0e      	ldr	r3, [pc, #56]	; (80090a8 <vPortFree+0xb8>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	43db      	mvns	r3, r3
 8009072:	401a      	ands	r2, r3
 8009074:	693b      	ldr	r3, [r7, #16]
 8009076:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009078:	f7fe fc8c 	bl	8007994 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800907c:	693b      	ldr	r3, [r7, #16]
 800907e:	685a      	ldr	r2, [r3, #4]
 8009080:	4b0a      	ldr	r3, [pc, #40]	; (80090ac <vPortFree+0xbc>)
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	4413      	add	r3, r2
 8009086:	4a09      	ldr	r2, [pc, #36]	; (80090ac <vPortFree+0xbc>)
 8009088:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800908a:	6938      	ldr	r0, [r7, #16]
 800908c:	f000 f874 	bl	8009178 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009090:	4b07      	ldr	r3, [pc, #28]	; (80090b0 <vPortFree+0xc0>)
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	3301      	adds	r3, #1
 8009096:	4a06      	ldr	r2, [pc, #24]	; (80090b0 <vPortFree+0xc0>)
 8009098:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800909a:	f7fe fc89 	bl	80079b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800909e:	bf00      	nop
 80090a0:	3718      	adds	r7, #24
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}
 80090a6:	bf00      	nop
 80090a8:	20001958 	.word	0x20001958
 80090ac:	20001948 	.word	0x20001948
 80090b0:	20001954 	.word	0x20001954

080090b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80090b4:	b480      	push	{r7}
 80090b6:	b085      	sub	sp, #20
 80090b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80090ba:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80090be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80090c0:	4b27      	ldr	r3, [pc, #156]	; (8009160 <prvHeapInit+0xac>)
 80090c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	f003 0307 	and.w	r3, r3, #7
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d00c      	beq.n	80090e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	3307      	adds	r3, #7
 80090d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	f023 0307 	bic.w	r3, r3, #7
 80090da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80090dc:	68ba      	ldr	r2, [r7, #8]
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	1ad3      	subs	r3, r2, r3
 80090e2:	4a1f      	ldr	r2, [pc, #124]	; (8009160 <prvHeapInit+0xac>)
 80090e4:	4413      	add	r3, r2
 80090e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80090ec:	4a1d      	ldr	r2, [pc, #116]	; (8009164 <prvHeapInit+0xb0>)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80090f2:	4b1c      	ldr	r3, [pc, #112]	; (8009164 <prvHeapInit+0xb0>)
 80090f4:	2200      	movs	r2, #0
 80090f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	68ba      	ldr	r2, [r7, #8]
 80090fc:	4413      	add	r3, r2
 80090fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009100:	2208      	movs	r2, #8
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	1a9b      	subs	r3, r3, r2
 8009106:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	f023 0307 	bic.w	r3, r3, #7
 800910e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	4a15      	ldr	r2, [pc, #84]	; (8009168 <prvHeapInit+0xb4>)
 8009114:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009116:	4b14      	ldr	r3, [pc, #80]	; (8009168 <prvHeapInit+0xb4>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	2200      	movs	r2, #0
 800911c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800911e:	4b12      	ldr	r3, [pc, #72]	; (8009168 <prvHeapInit+0xb4>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	2200      	movs	r2, #0
 8009124:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	68fa      	ldr	r2, [r7, #12]
 800912e:	1ad2      	subs	r2, r2, r3
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009134:	4b0c      	ldr	r3, [pc, #48]	; (8009168 <prvHeapInit+0xb4>)
 8009136:	681a      	ldr	r2, [r3, #0]
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	685b      	ldr	r3, [r3, #4]
 8009140:	4a0a      	ldr	r2, [pc, #40]	; (800916c <prvHeapInit+0xb8>)
 8009142:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	685b      	ldr	r3, [r3, #4]
 8009148:	4a09      	ldr	r2, [pc, #36]	; (8009170 <prvHeapInit+0xbc>)
 800914a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800914c:	4b09      	ldr	r3, [pc, #36]	; (8009174 <prvHeapInit+0xc0>)
 800914e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009152:	601a      	str	r2, [r3, #0]
}
 8009154:	bf00      	nop
 8009156:	3714      	adds	r7, #20
 8009158:	46bd      	mov	sp, r7
 800915a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915e:	4770      	bx	lr
 8009160:	20000d84 	.word	0x20000d84
 8009164:	2000193c 	.word	0x2000193c
 8009168:	20001944 	.word	0x20001944
 800916c:	2000194c 	.word	0x2000194c
 8009170:	20001948 	.word	0x20001948
 8009174:	20001958 	.word	0x20001958

08009178 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009178:	b480      	push	{r7}
 800917a:	b085      	sub	sp, #20
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009180:	4b28      	ldr	r3, [pc, #160]	; (8009224 <prvInsertBlockIntoFreeList+0xac>)
 8009182:	60fb      	str	r3, [r7, #12]
 8009184:	e002      	b.n	800918c <prvInsertBlockIntoFreeList+0x14>
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	60fb      	str	r3, [r7, #12]
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	687a      	ldr	r2, [r7, #4]
 8009192:	429a      	cmp	r2, r3
 8009194:	d8f7      	bhi.n	8009186 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	685b      	ldr	r3, [r3, #4]
 800919e:	68ba      	ldr	r2, [r7, #8]
 80091a0:	4413      	add	r3, r2
 80091a2:	687a      	ldr	r2, [r7, #4]
 80091a4:	429a      	cmp	r2, r3
 80091a6:	d108      	bne.n	80091ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	685a      	ldr	r2, [r3, #4]
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	685b      	ldr	r3, [r3, #4]
 80091b0:	441a      	add	r2, r3
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	685b      	ldr	r3, [r3, #4]
 80091c2:	68ba      	ldr	r2, [r7, #8]
 80091c4:	441a      	add	r2, r3
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	429a      	cmp	r2, r3
 80091cc:	d118      	bne.n	8009200 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681a      	ldr	r2, [r3, #0]
 80091d2:	4b15      	ldr	r3, [pc, #84]	; (8009228 <prvInsertBlockIntoFreeList+0xb0>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	429a      	cmp	r2, r3
 80091d8:	d00d      	beq.n	80091f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	685a      	ldr	r2, [r3, #4]
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	685b      	ldr	r3, [r3, #4]
 80091e4:	441a      	add	r2, r3
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	681a      	ldr	r2, [r3, #0]
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	601a      	str	r2, [r3, #0]
 80091f4:	e008      	b.n	8009208 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80091f6:	4b0c      	ldr	r3, [pc, #48]	; (8009228 <prvInsertBlockIntoFreeList+0xb0>)
 80091f8:	681a      	ldr	r2, [r3, #0]
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	601a      	str	r2, [r3, #0]
 80091fe:	e003      	b.n	8009208 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681a      	ldr	r2, [r3, #0]
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009208:	68fa      	ldr	r2, [r7, #12]
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	429a      	cmp	r2, r3
 800920e:	d002      	beq.n	8009216 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	687a      	ldr	r2, [r7, #4]
 8009214:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009216:	bf00      	nop
 8009218:	3714      	adds	r7, #20
 800921a:	46bd      	mov	sp, r7
 800921c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009220:	4770      	bx	lr
 8009222:	bf00      	nop
 8009224:	2000193c 	.word	0x2000193c
 8009228:	20001944 	.word	0x20001944

0800922c <__libc_init_array>:
 800922c:	b570      	push	{r4, r5, r6, lr}
 800922e:	4d0d      	ldr	r5, [pc, #52]	; (8009264 <__libc_init_array+0x38>)
 8009230:	4c0d      	ldr	r4, [pc, #52]	; (8009268 <__libc_init_array+0x3c>)
 8009232:	1b64      	subs	r4, r4, r5
 8009234:	10a4      	asrs	r4, r4, #2
 8009236:	2600      	movs	r6, #0
 8009238:	42a6      	cmp	r6, r4
 800923a:	d109      	bne.n	8009250 <__libc_init_array+0x24>
 800923c:	4d0b      	ldr	r5, [pc, #44]	; (800926c <__libc_init_array+0x40>)
 800923e:	4c0c      	ldr	r4, [pc, #48]	; (8009270 <__libc_init_array+0x44>)
 8009240:	f000 f88a 	bl	8009358 <_init>
 8009244:	1b64      	subs	r4, r4, r5
 8009246:	10a4      	asrs	r4, r4, #2
 8009248:	2600      	movs	r6, #0
 800924a:	42a6      	cmp	r6, r4
 800924c:	d105      	bne.n	800925a <__libc_init_array+0x2e>
 800924e:	bd70      	pop	{r4, r5, r6, pc}
 8009250:	f855 3b04 	ldr.w	r3, [r5], #4
 8009254:	4798      	blx	r3
 8009256:	3601      	adds	r6, #1
 8009258:	e7ee      	b.n	8009238 <__libc_init_array+0xc>
 800925a:	f855 3b04 	ldr.w	r3, [r5], #4
 800925e:	4798      	blx	r3
 8009260:	3601      	adds	r6, #1
 8009262:	e7f2      	b.n	800924a <__libc_init_array+0x1e>
 8009264:	08009dc8 	.word	0x08009dc8
 8009268:	08009dc8 	.word	0x08009dc8
 800926c:	08009dc8 	.word	0x08009dc8
 8009270:	08009dcc 	.word	0x08009dcc

08009274 <__itoa>:
 8009274:	1e93      	subs	r3, r2, #2
 8009276:	2b22      	cmp	r3, #34	; 0x22
 8009278:	b510      	push	{r4, lr}
 800927a:	460c      	mov	r4, r1
 800927c:	d904      	bls.n	8009288 <__itoa+0x14>
 800927e:	2300      	movs	r3, #0
 8009280:	700b      	strb	r3, [r1, #0]
 8009282:	461c      	mov	r4, r3
 8009284:	4620      	mov	r0, r4
 8009286:	bd10      	pop	{r4, pc}
 8009288:	2a0a      	cmp	r2, #10
 800928a:	d109      	bne.n	80092a0 <__itoa+0x2c>
 800928c:	2800      	cmp	r0, #0
 800928e:	da07      	bge.n	80092a0 <__itoa+0x2c>
 8009290:	232d      	movs	r3, #45	; 0x2d
 8009292:	700b      	strb	r3, [r1, #0]
 8009294:	4240      	negs	r0, r0
 8009296:	2101      	movs	r1, #1
 8009298:	4421      	add	r1, r4
 800929a:	f000 f81b 	bl	80092d4 <__utoa>
 800929e:	e7f1      	b.n	8009284 <__itoa+0x10>
 80092a0:	2100      	movs	r1, #0
 80092a2:	e7f9      	b.n	8009298 <__itoa+0x24>

080092a4 <itoa>:
 80092a4:	f7ff bfe6 	b.w	8009274 <__itoa>

080092a8 <memcpy>:
 80092a8:	440a      	add	r2, r1
 80092aa:	4291      	cmp	r1, r2
 80092ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80092b0:	d100      	bne.n	80092b4 <memcpy+0xc>
 80092b2:	4770      	bx	lr
 80092b4:	b510      	push	{r4, lr}
 80092b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80092be:	4291      	cmp	r1, r2
 80092c0:	d1f9      	bne.n	80092b6 <memcpy+0xe>
 80092c2:	bd10      	pop	{r4, pc}

080092c4 <memset>:
 80092c4:	4402      	add	r2, r0
 80092c6:	4603      	mov	r3, r0
 80092c8:	4293      	cmp	r3, r2
 80092ca:	d100      	bne.n	80092ce <memset+0xa>
 80092cc:	4770      	bx	lr
 80092ce:	f803 1b01 	strb.w	r1, [r3], #1
 80092d2:	e7f9      	b.n	80092c8 <memset+0x4>

080092d4 <__utoa>:
 80092d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092d6:	4c1f      	ldr	r4, [pc, #124]	; (8009354 <__utoa+0x80>)
 80092d8:	b08b      	sub	sp, #44	; 0x2c
 80092da:	4605      	mov	r5, r0
 80092dc:	460b      	mov	r3, r1
 80092de:	466e      	mov	r6, sp
 80092e0:	f104 0c20 	add.w	ip, r4, #32
 80092e4:	6820      	ldr	r0, [r4, #0]
 80092e6:	6861      	ldr	r1, [r4, #4]
 80092e8:	4637      	mov	r7, r6
 80092ea:	c703      	stmia	r7!, {r0, r1}
 80092ec:	3408      	adds	r4, #8
 80092ee:	4564      	cmp	r4, ip
 80092f0:	463e      	mov	r6, r7
 80092f2:	d1f7      	bne.n	80092e4 <__utoa+0x10>
 80092f4:	7921      	ldrb	r1, [r4, #4]
 80092f6:	7139      	strb	r1, [r7, #4]
 80092f8:	1e91      	subs	r1, r2, #2
 80092fa:	6820      	ldr	r0, [r4, #0]
 80092fc:	6038      	str	r0, [r7, #0]
 80092fe:	2922      	cmp	r1, #34	; 0x22
 8009300:	f04f 0100 	mov.w	r1, #0
 8009304:	d904      	bls.n	8009310 <__utoa+0x3c>
 8009306:	7019      	strb	r1, [r3, #0]
 8009308:	460b      	mov	r3, r1
 800930a:	4618      	mov	r0, r3
 800930c:	b00b      	add	sp, #44	; 0x2c
 800930e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009310:	1e58      	subs	r0, r3, #1
 8009312:	4684      	mov	ip, r0
 8009314:	fbb5 f7f2 	udiv	r7, r5, r2
 8009318:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800931c:	fb02 5617 	mls	r6, r2, r7, r5
 8009320:	4476      	add	r6, lr
 8009322:	460c      	mov	r4, r1
 8009324:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8009328:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800932c:	462e      	mov	r6, r5
 800932e:	42b2      	cmp	r2, r6
 8009330:	f101 0101 	add.w	r1, r1, #1
 8009334:	463d      	mov	r5, r7
 8009336:	d9ed      	bls.n	8009314 <__utoa+0x40>
 8009338:	2200      	movs	r2, #0
 800933a:	545a      	strb	r2, [r3, r1]
 800933c:	1919      	adds	r1, r3, r4
 800933e:	1aa5      	subs	r5, r4, r2
 8009340:	42aa      	cmp	r2, r5
 8009342:	dae2      	bge.n	800930a <__utoa+0x36>
 8009344:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8009348:	780e      	ldrb	r6, [r1, #0]
 800934a:	7006      	strb	r6, [r0, #0]
 800934c:	3201      	adds	r2, #1
 800934e:	f801 5901 	strb.w	r5, [r1], #-1
 8009352:	e7f4      	b.n	800933e <__utoa+0x6a>
 8009354:	08009d98 	.word	0x08009d98

08009358 <_init>:
 8009358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800935a:	bf00      	nop
 800935c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800935e:	bc08      	pop	{r3}
 8009360:	469e      	mov	lr, r3
 8009362:	4770      	bx	lr

08009364 <_fini>:
 8009364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009366:	bf00      	nop
 8009368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800936a:	bc08      	pop	{r3}
 800936c:	469e      	mov	lr, r3
 800936e:	4770      	bx	lr
