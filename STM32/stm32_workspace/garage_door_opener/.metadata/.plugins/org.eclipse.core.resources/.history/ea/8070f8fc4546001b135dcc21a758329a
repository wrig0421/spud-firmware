/*
 * ssd1351_driver.c
 *
 *  Created on: Aug 2, 2020
 *      Author: spud
 */

#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include "stm32l433xx.h"
#include "stm32l4xx_hal.h"
#include "ssd1351_driver.h"
#include "fonts.h"

extern SPI_HandleTypeDef hspi2;


// On reset...
    // Display off
    // 128 MUX Display Mode
    // Normal segment and display data (SEG0 mapped to address 00h and COM0 to 00h)
    // Display start line is set at display RAM address 0
    // Column address counter is set at 0
    // Normal scan direction of the COM outputs
    // Command A2h, B1h, B3h, BBh, BEh are locked by command FDh

// GDDRAM 128 x 128 x 18 bits
    // Each pixel has 18-bit data.  6 bits A, B, and C.
    // See Table 8-7

// Command Decoder
    // If D/C+ pin is HIGH, data is written to GDDRAM
    // If D/C+ pin is LOW, data is interpreted as a command

// Write RAM Command
    // Data entries will be written into RAM until another cmd is written


typedef enum
{
	//SSD1351_PIN_DIN,
	//SSD1351_PIN_CLK,
	SSD1351_PIN_CS, // D10 (PA_11)
	SSD1351_PIN_DC, // D9 (PA_8)
	SSD1351_PIN_RST, // D8 (PB_6)
} ssd1351_pins;


// local prototypes below
static void ssd1351_spi_byte_write(uint8_t val);
static void ssd1351_spi_block_write(uint8_t *data, uint32_t len);
void ssd1351_set_pin(ssd1351_pins pin);
void ssd1351_clear_pin(ssd1351_pins pin);
void ssd1351_reset_pixel_address(void);


static void ssd1351_spi_byte_write(uint8_t val)
{
	uint8_t data = val;
	HAL_SPI_Transmit(&hspi2, &data, 1, 10000);
}


static void ssd1351_spi_block_write(uint8_t *data, uint32_t len)
{
	HAL_SPI_Transmit(&hspi2, data, len, 10000);
}


void ssd1351_byte_write_data(uint8_t data)
{
	ssd1351_set_pin(SSD1351_PIN_DC); // set DC (data mode)
	ssd1351_clear_pin(SSD1351_PIN_CS); // select chip (active low)
	ssd1351_spi_byte_write(data); // byte write
	ssd1351_set_pin(SSD1351_PIN_CS); // deselect chip
}


void ssd1351_block_write_data(uint8_t *data, uint32_t len)
{
	ssd1351_set_pin(SSD1351_PIN_DC); // set DC (data mode)
	ssd1351_clear_pin(SSD1351_PIN_CS); // select chip (active low)
	ssd1351_spi_block_write(data, len); // byte write
	ssd1351_set_pin(SSD1351_PIN_CS); // deselect chip
}


void ssd1351_write_cmd(ssd1351_cmd_e cmd)
{
	ssd1351_clear_pin(SSD1351_PIN_DC); // clear DC (cmd mode)
	ssd1351_clear_pin(SSD1351_PIN_CS); // select chip (active low)
	ssd1351_spi_byte_write(cmd); // send cmd
	ssd1351_set_pin(SSD1351_PIN_CS); // deselect chip
}


void ssd1351_write_buffer_to_display(void)
{
	ssd1351_write_cmd(SSD1351_CMD_WRITE_RAM);
	ssd1351_block_write_data(ssd1351_buffer.ssd1351_disp_buffer_uint8, sizeof(ssd1351_buffer.ssd1351_disp_buffer_uint8));
}


void ssd1351_delay_ms(uint32_t delay_ms)
{
	HAL_Delay(delay_ms);
}


void ssd1351_clear_pin(ssd1351_pins pin)
{
	GPIO_TypeDef *hal_port;
	uint16_t hal_pin;
	switch(pin)
	{
		case SSD1351_PIN_CS:
			hal_port = GPIOA;
			hal_pin = GPIO_PIN_11;
		break;
		case SSD1351_PIN_DC:
			hal_port = GPIOA;
			hal_pin = GPIO_PIN_8;
		break;
		case SSD1351_PIN_RST:
			hal_port = GPIOB;
			hal_pin = GPIO_PIN_6;
		break;
	}
	HAL_GPIO_WritePin(hal_port, hal_pin, GPIO_PIN_RESET);
}


void ssd1351_set_pin(ssd1351_pins pin)
{
	GPIO_TypeDef *hal_port;
	uint16_t hal_pin;
	switch(pin)
	{
		case SSD1351_PIN_CS:
			hal_port = GPIOA;
			hal_pin = GPIO_PIN_11;
		break;
		case SSD1351_PIN_DC:
			hal_port = GPIOA;
			hal_pin = GPIO_PIN_8;
		break;
		case SSD1351_PIN_RST:
			hal_port = GPIOB;
			hal_pin = GPIO_PIN_6;
		break;
	}
	HAL_GPIO_WritePin(hal_port, hal_pin, GPIO_PIN_SET);
}


void ssd1351_init(void)
{
	ssd1351_set_pin(SSD1351_PIN_RST); // clear DC (cmd mode)
	ssd1351_delay_ms(100); // how long to hold reset?
	ssd1351_clear_pin(SSD1351_PIN_RST); // clear DC (cmd mode)
	ssd1351_delay_ms(100); // how long to pause after reset?
	ssd1351_set_pin(SSD1351_PIN_RST); // clear DC (cmd mode)

	ssd1351_write_cmd(SSD1351_CMD_SET_CMD_LOCK);
	ssd1351_byte_write_data(SSD1351_CMD_UNLOCK_BYTE);
	ssd1351_write_cmd(SSD1351_CMD_SET_CMD_LOCK);
	ssd1351_byte_write_data(0xB1); // WHY?????

	ssd1351_write_cmd(SSD1351_CMD_SET_SLEEP_MODE_ON);
	ssd1351_write_cmd(SSD1351_CMD_SET_DISP_MODE_OFF);

	ssd1351_write_cmd(SSD1351_CMD_SET_COLUMN_ADDRESS);
	ssd1351_byte_write_data(0x00);
	ssd1351_byte_write_data(0x7F);

	ssd1351_write_cmd(SSD1351_CMD_SET_ROW_ADDRESS);
	ssd1351_byte_write_data(0x00);
	ssd1351_byte_write_data(0x7F);

	ssd1351_write_cmd(SSD1351_CMD_FRONT_CLOCK_DIVIDER);
	ssd1351_byte_write_data(0xF1); // highest frequency (div by 1)

	ssd1351_write_cmd(SSD1351_CMD_SET_MUX_RATIO);
	ssd1351_byte_write_data(0x7F); // 128 MUX (Reset value)

	ssd1351_write_cmd(SSD1351_CMD_SET_REMAP_COLOR_DEPTH);
	ssd1351_byte_write_data(0x74);

	ssd1351_write_cmd(SSD1351_CMD_SET_DISP_START_LINE);
	ssd1351_byte_write_data(0x00);

	ssd1351_write_cmd(SSD1351_CMD_SET_DISP_OFFSET);
	ssd1351_byte_write_data(0x00);

	ssd1351_write_cmd(SSD1351_CMD_FUNCTION_SELECTION);
	ssd1351_byte_write_data(0x01);

	ssd1351_write_cmd(SSD1351_CMD_SET_SEGMENT_LOW_VOLTAGE);
	ssd1351_byte_write_data(0xA0);
	ssd1351_byte_write_data(0xB5);
	ssd1351_byte_write_data(0x55);

	ssd1351_write_cmd(SSD1351_CMD_SET_CONTRAST_CURRENT);
	ssd1351_byte_write_data(0xC8);
	ssd1351_byte_write_data(0x80);
	ssd1351_byte_write_data(0xC0);

	ssd1351_write_cmd(SSD1351_CMD_MASTER_CONTRAST_CURRENT_CTRL);
	ssd1351_byte_write_data(0x0F);

	ssd1351_write_cmd(SSD1351_CMD_SET_RESET_PRECHARGE_PERIOD);
	ssd1351_byte_write_data(0x32);

	ssd1351_write_cmd(SSD1351_CMD_DISP_ENHANCEMENT);
	ssd1351_byte_write_data(0xA4);
	ssd1351_byte_write_data(0x00);
	ssd1351_byte_write_data(0x00);

	ssd1351_write_cmd(SSD1351_CMD_SET_PRECHARGE_VOLTAGE);
	ssd1351_byte_write_data(0x17);

	ssd1351_write_cmd(SSD1351_CMD_SET_SECOND_PRECHARGE_PERIOD);
	ssd1351_byte_write_data(0x01);

	ssd1351_write_cmd(SSD1351_CMD_SET_VCOMH_VOLTAGE);
	ssd1351_byte_write_data(0x05);

	ssd1351_write_cmd(SSD1351_CMD_SET_DISP_MODE_NORMAL);

	ssd1351_clear_screen();
	ssd1351_write_cmd(SSD1351_CMD_SET_SLEEP_MODE_OFF);

	ssd1351_clear_screen();
	ssd1351_reset_ram_address();
}


void ssd1351_turn_off_display(void)
{
	ssd1351_write_cmd(SSD1351_CMD_SET_DISP_MODE_OFF);
}


void ssd1351_draw_pixel(uint8_t x, uint8_t y, color_16bit_e color)
{
	if((x >= SSD1351_PIXEL_WIDTH - 1) || (y >= SSD1351_PIXEL_HEIGHT - 1)) return;
	else if((x < 0) || (y < 0)) return;
	// there are 128 columns and 128 row.  2 bytes stored per pixel
	//uint16_t index = ((SSD1351_PIXEL_WIDTH - 1) - x) + (y * (SSD1351_PIXEL_WIDTH - 1))
	uint16_t index = x + y * 128;
	ssd1351_buffer.ssd1351_disp_buffer_uint16[index] = color;
}


void ssd1351_draw_line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
	int16_t dx = abs(x1 - x0);
	int16_t sign_x = x0 < x1 ? 1 : -1;
	int16_t dy = abs(y1 - y0);
	int16_t sign_y = y0 < y1 ? 1 : -1;
	int16_t err = (dx>dy ? dx : -dy)/2;
	int16_t err2;

	int16_t x;
	int16_t y;

	while(1) // hate while(1) loops...
	{
		ssd1351_draw_pixel(x, y, color);
		if(x == x1 && y == y1) break;
		err2 = err;
		if(err2 > -dx)
		{
			err -= dy;
			x += sign_x;
		}
		if(err2 < dy)
		{
			err += dx;
			y += sign_y;
		}
	}
}


void ssd1351_draw_rectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
	ssd1351_draw_line(x, y, x + width, y, color);
	ssd1351_draw_line(x + width, y, x + width, y + height, color);
	ssd1351_draw_line(x, y, x + width, y, color);
	ssd1351_draw_line(x, y + height, x, y, color);
}


void swap(uint8_t *val_1, uint8_t *val_2);
void swap(uint8_t *val_1, uint8_t *val_2)
{
	uint8_t temp_val = *val_1;
	*val_1 = *val_2;
	*val_2 = temp_val;
}


/*
void ssd1351_draw_horizontal_line(uint8_t x0, uint8_t x1);
void ssd1351_draw_horizontal_line(uint8_t x0, uint8_t x1)
{
	if((x0 < 0) || (x0 > SSD1351_PIXEL_WIDTH)) return;
	else if((x1 < 0) || (x1 > SSD1351_PIXEL_WIDTH)) return;

	if(x0 > x1)
	{
#warning x1 > x0
		swap(&x0, &x1);
	}
	ssd1351_set_pixel_address(ssd1351_coordinates.x, x0);
	ssd1351_write_cmd(SSD1351_CMD_WRITE_RAM);
	for(uint8_t pixel = x0; pixel < x1; pixel++)
	{
		ssd1351_draw_pixel(ssd1351_coordinates.x, pixel);
	}
}
*/


void ssd1351_set_pixel_address(uint8_t column, uint8_t row)
{
	ssd1351_write_cmd(SSD1351_CMD_SET_COLUMN_ADDRESS);
	ssd1351_byte_write_data(column);
	ssd1351_byte_write_data(column);
	ssd1351_coordinates.x = column;

	ssd1351_write_cmd(SSD1351_CMD_SET_ROW_ADDRESS);
	ssd1351_byte_write_data(row);
	ssd1351_byte_write_data(row + 7);
	ssd1351_coordinates.y = row;
}


void ssd1351_reset_pixel_address(void)
{
	ssd1351_coordinates.x = 0;
	ssd1351_coordinates.y = 0;
}


void ssd1351_set_ram_address(uint16_t column, uint16_t row)
{
	ssd1351_write_cmd(SSD1351_CMD_SET_COLUMN_ADDRESS);
	ssd1351_byte_write_data((column & 0xFF00) >> 8);
	ssd1351_byte_write_data(column & 0x00FF);
	ssd1351_write_cmd(SSD1351_CMD_SET_ROW_ADDRESS);
	ssd1351_byte_write_data((row & 0xFF00) >> 8);
	ssd1351_byte_write_data(row & 0x00FF);
}


void ssd1351_reset_ram_address(void)
{
	ssd1351_set_ram_address(0x007F, 0x007F);
}


uint16_t g_color_16bit = 0;
void ssd1351_fill_screen(color_16bit_e color)
{
	uint8_t clear_byte[] = {((color & 0xFF00) >> 8), (color & 0x00FF)};
	ssd1351_write_cmd(SSD1351_CMD_SET_SLEEP_MODE_ON);
	ssd1351_reset_ram_address();

	ssd1351_write_cmd(SSD1351_CMD_WRITE_RAM);
	for(int i = 0; i < 128; i++)
	{
		for(int j = 0; j < 128; j++)
		{
			ssd1351_block_write_data(clear_byte, 2);
		}
	}

	ssd1351_write_cmd(SSD1351_CMD_SET_SLEEP_MODE_OFF);
}


void ssd1351_clear_screen(void)
{
	//uint8_t clear_byte[128*128] = {0x00, 0x00};
	ssd1351_reset_ram_address();
	ssd1351_write_cmd(SSD1351_CMD_WRITE_RAM);
	memset(ssd1351_buffer.ssd1351_disp_buffer_uint8, 0, sizeof(ssd1351_buffer.ssd1351_disp_buffer_uint8));
	ssd1351_block_write_data(ssd1351_buffer.ssd1351_disp_buffer_uint8, sizeof(ssd1351_buffer));
	//ssd1351_reset_ram_address();
	ssd1351_reset_pixel_address();
}


#define SPECIAL_CHAR_OFFSET 	32
void ssd1351_write_char(color_16bit_e color, font_t font, char c)
{
	// basic idea for writing a character is as follows:
	// 1x 16-bit value is returned for each row in pixel height.  For example if the pixel height is
	// 10 then 10x 16-bit values make up that character
	uint16_t char_pix_row_data;
	uint16_t char_pix_vert_pos = 0;
	uint16_t char_pix_horiz_pos = 0;
	uint16_t height = font.height;
	uint16_t width = font.width;

	if((SSD1351_PIXEL_WIDTH <= ssd1351_coordinates.x + width) || (SSD1351_PIXEL_HEIGHT <= ssd1351_coordinates.y + height))
	{
		return;
	}
	if (c == '\n') ssd1351_coordinates.x = SSD1351_PIXEL_WIDTH - 1; // if new line simply
	else
	{
		while(char_pix_vert_pos < height)
		{
			char_pix_row_data = font.data[(c - SPECIAL_CHAR_OFFSET) * height + char_pix_vert_pos]; // "* font.height" to skip over rows and "+ i" to get the 2 byte value for the row
			while(char_pix_horiz_pos < width)
			{
				if ((char_pix_row_data << char_pix_horiz_pos) & 0x8000) // if bit is set then draw
				{
					ssd1351_draw_pixel(ssd1351_coordinates.x + char_pix_horiz_pos, ssd1351_coordinates.y + char_pix_vert_pos, color);
				}
				char_pix_horiz_pos++;
			}
			char_pix_vert_pos++;
			char_pix_horiz_pos = 0;
		}

	}
	ssd1351_coordinates.x += width; // we just wrote a char increment x coordinate by font width
	if ((ssd1351_coordinates.x + width >= 127) & (ssd1351_coordinates.y + height <= 127)) // check if we need to go to new line
	{
		ssd1351_coordinates.y = ssd1351_coordinates.y + height + 2; // the +2 is simply additional space between lines
		ssd1351_coordinates.x = 0; // reset x coordinate to 0 for new line!
	}
	return;
}


color_16bit_e g_background_color = COLOR_16BIT_BLACK;
color_16bit_e g_font_color = COLOR_16BIT_RED;
void ssd1351_printf(char *string)
{
	uint8_t cnt = 0;
	char mem_string[18] = "";
	uint8_t mem_string_cnt = 0;
	uint8_t space_loc[18] = {0};
	uint16_t space_cnt = 0;
	uint8_t col_cnt = 0;
	uint8_t row_num = 0;

	row_num = 0; // careful may be starting on a new row
	bool new_word_flag = true;
	// find all spaces first...
	if (NULL == string) return;
	for(int i = 0; i < strlen(string); i++)
	{
		if (new_word_flag)
		{
			new_word_flag = false;
			row_num = i / 18;
		}

		if (string[i] != ' ')
		{
			mem_string[mem_string_cnt++] = string[i];
		}
		else
		{
			mem_string_cnt = 0;
			if ((i / 18) != row_num)
			{
				ssd1351_write_char(g_font_color, Font_7x10, '\n');
				//ssd1351_coordinates.y = ssd1351_coordinates.y + SSD1351_PIXEL_HEIGHT + 2; // the +2 is simply additional space between lines
				//ssd1351_coordinates.x = 0; // reset x coordinate to 0 for new line!
			}
			while(mem_string[mem_string_cnt] != 0)
			{
				ssd1351_write_char(g_font_color, Font_7x10, mem_string[mem_string_cnt++]);
			}
			ssd1351_write_char(g_font_color, Font_7x10, ' ');
			ssd1351_write_buffer_to_display();
			memset(mem_string, 0, sizeof(mem_string));
			mem_string_cnt = 0;
			new_word_flag = true;
			// move the row
		}
	}
	/*
	if (NULL == string) return;
	while (*string != 0)
	{
		//ssd1351_coordinates.y = ssd1351_coordinates.y + height + 2; // the +2 is simply additional space between lines
		//ssd1351_coordinates.x = 0; // reset x coordinate to 0 for new line!
		ssd1351_write_char(g_font_color, Font_7x10, *string);
		string++;
	}
	*/
	//ssd1351_write_buffer_to_display();

}


void ssd1351_write_string(color_16bit_e color, font_t font, char *string)
{
	if (NULL == string) return;
	while (*string != 0)
	{
		ssd1351_write_char(color, font, *string);
		string++;
	}
}


/*
void ssd1351_write_int(color_16bit_e color, font_t font, int8_t n)
{
	char number[5];
	//sprintf(number, "%i", n);
	ssd1351_write_string(color, font, number);
}


void ssd1351_printf(color_16bit_e color, font_t font, const char *format, ...)
{
	if (format == NULL)
	{
		return;
	}
	//va_list valist;
	//va_start(valist, format);
	while (*format != 0)
	{
		if (*format != '%')
		{
			ssd1351_write_char(color, font, *format);
			format++;
		}
		else
		{
			format++;
			switch(*format)
			{
				case 's':
					//ssd1351_write_string(color, font, va_arg(valist, char *));
				break;
				case 'c':
					//ssd1351_write_char(color, font, va_arg(valist, int));
				break;
				case 'i':
					//ssd1351_write_int(color, font, (int8_t)va_arg(valist, int));
				break;
				default:
				break;
			}
			format++;
		}
	}
}
*/





