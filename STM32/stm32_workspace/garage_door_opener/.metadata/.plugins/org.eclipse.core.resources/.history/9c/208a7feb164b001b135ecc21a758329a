/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under Ultimate Liberty license
  * SLA0044, the "License"; You may not use this file except in compliance with
  * the License. You may obtain a copy of the License at:
  *                             www.st.com/SLA0044
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "cmsis_os.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "packet_def.h"
#include "packet_queue.h"
#include <string.h>
#include "gt_521fx_driver.h"
#include "ssd1351_driver.h"
#include "board_init.h"

#include "task_sensor_access.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
typedef StaticTask_t osStaticThreadDef_t;
typedef StaticQueue_t osStaticMessageQDef_t;
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/


/* Definitions for defaultTask */
osThreadId_t defaultTaskHandle;
uint32_t defaultTaskBuffer[ 128 ];
osStaticThreadDef_t defaultTaskControlBlock;
const osThreadAttr_t defaultTask_attributes = {
  .name = "defaultTask",
  .stack_mem = &defaultTaskBuffer[0],
  .stack_size = sizeof(defaultTaskBuffer),
  .cb_mem = &defaultTaskControlBlock,
  .cb_size = sizeof(defaultTaskControlBlock),
  .priority = (osPriority_t) osPriorityNormal,
};


/* Definitions for task_sensor_rx */
osThreadId_t task_sensor_rxHandle;
uint32_t task_sensor_rxBuffer[ 128 ];
osStaticThreadDef_t task_sensor_rxControlBlock;
const osThreadAttr_t task_sensor_rx_attributes = {
  .name = "task_sensor_rx",
  .stack_mem = &task_sensor_rxBuffer[0],
  .stack_size = sizeof(task_sensor_rxBuffer),
  .cb_mem = &task_sensor_rxControlBlock,
  .cb_size = sizeof(task_sensor_rxControlBlock),
  .priority = (osPriority_t) osPriorityNormal,
};
/* Definitions for task_sensor_tx */
osThreadId_t task_sensor_txHandle;
uint32_t task_sensor_txBuffer[ 128 ];
osStaticThreadDef_t task_sensor_txControlBlock;
const osThreadAttr_t task_sensor_tx_attributes = {
  .name = "task_sensor_tx",
  .stack_mem = &task_sensor_txBuffer[0],
  .stack_size = sizeof(task_sensor_txBuffer),
  .cb_mem = &task_sensor_txControlBlock,
  .cb_size = sizeof(task_sensor_txControlBlock),
  .priority = (osPriority_t) osPriorityNormal,
};
/* Definitions for task_sensor_acc */
osThreadId_t task_sensor_accHandle;
uint32_t task_sensor_accBuffer[ 128 ];
osStaticThreadDef_t task_sensor_accControlBlock;
const osThreadAttr_t task_sensor_acc_attributes = {
  .name = "task_sensor_acc",
  .stack_mem = &task_sensor_accBuffer[0],
  .stack_size = sizeof(task_sensor_accBuffer),
  .cb_mem = &task_sensor_accControlBlock,
  .cb_size = sizeof(task_sensor_accControlBlock),
  .priority = (osPriority_t) osPriorityNormal,
};
/* Definitions for task_display_update */
osThreadId_t task_display_upHandle;
uint32_t task_display_upBuffer[ 128 ];
osStaticThreadDef_t task_display_upControlBlock;
const osThreadAttr_t task_display_up_attributes = {
  .name = "task_display_up",
  .stack_mem = &task_display_upBuffer[0],
  .stack_size = sizeof(task_display_upBuffer),
  .cb_mem = &task_display_upControlBlock,
  .cb_size = sizeof(task_display_upControlBlock),
  .priority = (osPriority_t) osPriorityNormal,
};


/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/

void StartDefaultTask(void *argument);
void sensor_rx_entry(void *argument);
void task_sensor_tx_entry(void *argument);
void task_sensor_access_entry(void *argument);
void task_display_update_entry(void *argument);

/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_SPI2_Init();
  MX_USART1_UART_Init();
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  packet_queue_init();
  ssd1351_init();

  // display is 18 characters wide
  //
  ssd1351_clear_screen();


  //while(1);

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);

  /* creation of task_sensor_rx */
  task_sensor_rxHandle = osThreadNew(sensor_rx_entry, NULL, &task_sensor_rx_attributes);

  /* creation of task_sensor_tx */
  task_sensor_txHandle = osThreadNew(task_sensor_tx_entry, NULL, &task_sensor_tx_attributes);

  /* creation of task_sensor_acc */
  task_sensor_accHandle = osThreadNew(task_sensor_access_entry, NULL, &task_sensor_acc_attributes);

  /* create task_display_up */
  task_display_upHandle = osThreadNew(task_display_update_entry, NULL, &task_display_up_attributes);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */
  /* Start scheduler */
  osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}


/**
  * @brief  Function implementing the defaultTask thread.
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
  }
  /* USER CODE END 5 */
}

















/* USER CODE BEGIN 4 */


/*
void task_usart_rx(void *arg)
{
	uint32_t tick_delay = pdMS_TO_TICKS(2000);
	while(1)
	{
		vTaskDelay(tick_delay);
	}
}

`
void task_usart_tx(void *arg)
{
	uint32_t tick_delay = pdMS_TO_TICKS(2000);
	while(1)
	{
		vTaskDelay(tick_delay);
	}
}
*/

/* USER CODE END 4 */

/* USER CODE BEGIN Header_StartDefaultTask */



/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
