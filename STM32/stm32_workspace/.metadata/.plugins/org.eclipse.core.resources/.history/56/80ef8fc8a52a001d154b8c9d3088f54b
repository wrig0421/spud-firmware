// SRW
#include <stdint.h>
#include <stdbool.h>
#include <stdlib.h>
#include <math.h>
#include "main.h"
#include "cmsis_os.h"
#include "numbers.h"
#include "color_led.h"
#include "ws2812b.h"
#include "board_specific.h"
#include "board_init_common.h"
#include "task_animate_led.h"
#include "animate_led.h"

extern uint32_t g_max_strip_length;

extern uint16_t g_all_strip_mask;


void animate_led_multiple_solid_custom_colors(strip_mask_t strip_mask, uint32_t* color_array)
{
    // not checking for interrupts in this function the solid color is too fast.  No way a user
    // would be able to tell if caught or not.
	strip_bit_e active_strip = STRIP_BIT_1; 
	strip_bit_e pre_strip = STRIP_BIT_1;
	uint8_t num_active_strips = 0;
	strip_bit_e active_strip_array[NUM_STRIPS] = {STRIP_BIT_NONE_SET};

	for (uint8_t iii = 0; iii < NUM_STRIPS; iii++)
	{
		active_strip = ws2812_get_next_active_strip(strip_mask, pre_strip);
		if ((active_strip != STRIP_BIT_NO_MORE_SET) && (active_strip != (1 << (NUM_STRIPS - 1))))
		{
			pre_strip = active_strip + 1;
		}
		if (STRIP_BIT_NO_MORE_SET == active_strip) break;
		num_active_strips++;
		active_strip_array[iii] = active_strip;
	}
	for (int yyy = 0; yyy < num_active_strips; yyy++)
	{
		animate_led_set_all_pixels(active_strip_array[yyy], ((color_array[yyy] & 0xFF0000) >> 16) / COLOR_LED_MAX_BRIGHTNESS_DIVISOR, ((color_array[yyy] & 0x00FF00) >> 8) / COLOR_LED_MAX_BRIGHTNESS_DIVISOR, (color_array[yyy] & 0x0000FF) / COLOR_LED_MAX_BRIGHTNESS_DIVISOR);
	}
}


void animate_led_solid_custom_color(const strip_mask_t strip_mask, color_hex_code_e color)
{
	uint8_t red, green, blue; 
	red = ((color & 0xFF0000) >> 16);
	green = ((color & 0x00FF00) >> 8);
	blue = (color & 0x0000FF);
	animate_led_set_all_pixels(strip_mask, red, green, blue);
	animate_led_show_strip(strip_mask);
}


void animate_led_turn_all_pixels_off(void)
{
	animate_led_set_all_pixels((strip_mask_t)STRIP_BIT_ALL_SET, 0, 0, 0);
}


void animate_led_spell_and_sparkle(const strip_mask_t spell_mask, const strip_mask_t sparkle_mask, color_hex_code_e color, bool fill, uint16_t speed_delay)
{
	uint16_t strip_size = ws2812_led_get_max_strip_size(spell_mask); // this makes more sense... SRW
	uint8_t red, green, blue; 
	red = ((color & 0xFF0000) >> 16);
	green = ((color & 0x00FF00) >> 8);
	blue = (color & 0x0000FF);
	if (!fill) animate_led_set_all_pixels(sparkle_mask, 0, 0, 0);
	for (int i = 0; i < strip_size; i++)
	{
	    if (task_animate_led_animate_led_interrupt_occurred()) if (task_animate_led_check_interrupts(&red, &green, &blue)) return;
        animate_led_sparkle_random_color(sparkle_mask, fill, 0);
        animate_led_set_pixel(spell_mask, i, red, green, blue);
		animate_led_show_strip(sparkle_mask|spell_mask);
		task_animate_led_delay((float_t)speed_delay / task_animate_led_speed_factor());
	}	
}


void animate_led_spell_and_solid_color(const strip_mask_t spell_mask, const strip_mask_t solid_color_mask, color_hex_code_e color, uint16_t speed_delay)
{
	uint16_t strip_size = ws2812_led_get_max_strip_size(spell_mask); // this makes more sense... SRW
	uint8_t red, green, blue; 
	red = ((color & 0xFF0000) >> 16);
	green = ((color & 0x00FF00) >> 8);
	blue = (color & 0x0000FF);
	animate_led_solid_custom_color(solid_color_mask, color_led_get_random_color());
	for (int i = 0; i < strip_size; i++)
	{
	    if (task_animate_led_animate_led_interrupt_occurred()) if (task_animate_led_check_interrupts(&red, &green, &blue)) return;
        animate_led_set_pixel(spell_mask, i, red, green, blue);
		animate_led_show_strip(spell_mask | solid_color_mask);
		task_animate_led_delay((float_t)speed_delay / task_animate_led_speed_factor());
	}	
}


void animate_led_spell_word_multiple_colors(strip_mask_t strip_mask, uint32_t* color_array, uint16_t speed_delay)
{
	strip_bit_e active_strip = STRIP_BIT_1; 
	strip_bit_e pre_strip = STRIP_BIT_1;
	uint16_t strip_size = ws2812_led_get_max_strip_size(strip_mask);
	uint8_t num_active_strips = 0;
	strip_bit_e active_strip_array[NUM_STRIPS] = {STRIP_BIT_NONE_SET};

	for (uint8_t iii = 0; iii < NUM_STRIPS; iii++)
	{
		active_strip = ws2812_get_next_active_strip(strip_mask, pre_strip);
		if ((active_strip != STRIP_BIT_NO_MORE_SET) && (active_strip != (1 << (NUM_STRIPS - 1))))
		{
			pre_strip = active_strip + 1;
		}
		if (STRIP_BIT_NO_MORE_SET == active_strip) break;
		num_active_strips++;
		active_strip_array[iii] = active_strip;
	}
	for (int i = 0; i < strip_size; i++)
	{
		for (int yyy = 0; yyy < num_active_strips; yyy++)
		{
		    //if (g_animate_led_interrupt) if (animate_led_check_interrupts(&red, &green, &blue)) return;
			animate_led_set_pixel(active_strip_array[yyy], i, ((color_array[yyy] & 0xFF0000) >> 16), ((color_array[yyy] & 0x00FF00) >> 8), (color_array[yyy] & 0x0000FF));
		}
		animate_led_show_strip(strip_mask);
		task_animate_led_delay((float_t)speed_delay / task_animate_led_speed_factor());
	}
}


void animate_led_only_spell_word(strip_mask_t strip_mask, color_hex_code_e color, uint16_t speed_delay)
{
	uint16_t strip_size = ws2812_led_get_max_strip_size(strip_mask);
	uint8_t red, green, blue; 
	red = ((color & 0xFF0000) >> 16);
	green = ((color & 0x00FF00) >> 8);
	blue = (color & 0x0000FF);
	for (int i = 0; i < strip_size; i++)
	{
	    if (task_animate_led_animate_led_interrupt_occurred()) if (task_animate_led_check_interrupts(&red, &green, &blue)) return;
		animate_led_set_pixel(strip_mask, i, red, green, blue);
		animate_led_show_strip(strip_mask);
		task_animate_led_delay((float_t)speed_delay / task_animate_led_speed_factor());
	}
}


void animate_led_fade_in_fade_out_multiple_colors(strip_mask_t strip_mask, uint32_t* color_array)
{
    // interrupts not handled yet!
	uint8_t red, green, blue; 
	strip_bit_e active_strip = STRIP_BIT_1; 
	strip_bit_e pre_strip = STRIP_BIT_1;
	uint8_t num_active_strips = 0;
	strip_bit_e active_strip_array[NUM_STRIPS] = {STRIP_BIT_NONE_SET};
	for (uint8_t iii = 0; iii < NUM_STRIPS; iii++)
	{
		active_strip = ws2812_get_next_active_strip(strip_mask, pre_strip);
		if ((active_strip != STRIP_BIT_NO_MORE_SET) && (active_strip != (1 << (NUM_STRIPS - 1))))
		{
			pre_strip = active_strip + 1;
		}
		if (STRIP_BIT_NO_MORE_SET == active_strip) break;
		num_active_strips++;
		active_strip_array[iii] = active_strip;
	}
    for (int i = 0; i < 256; i+=5)
    {
    	for (int yyy = 0; yyy < num_active_strips; yyy++)
		{
			animate_led_set_all_pixels(active_strip_array[yyy], (((color_array[yyy] & 0xFF0000) >> 16)) * (i / 256.0), (((color_array[yyy] & 0x00FF00) >> 8)) * (i / 256.0), ((color_array[yyy] & 0x0000FF)) * (i / 256.0));
		}
        if (task_animate_led_animate_led_interrupt_occurred()) if (task_animate_led_check_interrupts(&red, &green, &blue)) return;
    }
    for (int i = 255; i >= 0; i -= 5)
    {
    	for (int yyy = 0; yyy < num_active_strips; yyy++)
		{
			animate_led_set_all_pixels(active_strip_array[yyy], (((color_array[yyy] & 0xFF0000) >> 16)) * (i / 256.0), (((color_array[yyy] & 0x00FF00) >> 8)) * (i / 256.0), ((color_array[yyy] & 0x0000FF)) * (i / 256.0));
		}
        if (task_animate_led_animate_led_interrupt_occurred()) if (task_animate_led_check_interrupts(&red, &green, &blue)) return;
    }
}


void animate_led_fade_in_fade_out(strip_mask_t strip_mask, color_hex_code_e color)
{
    float r, g, b;
    uint8_t red, green, blue; 
	red = ((color & 0xFF0000) >> 16);
	green = ((color & 0x00FF00) >> 8);
	blue = (color & 0x0000FF);
    for (int i = 0; i < 256; i++)
    {
        if (task_animate_led_animate_led_interrupt_occurred()) if (task_animate_led_check_interrupts(&red, &green, &blue)) return;
        r = (i / 256.0) * red;
        g = (i / 256.0) * green;
        b = (i / 256.0) * blue;
        animate_led_set_all_pixels(strip_mask, r, g, b);
    }
    for (int i = 255; i >= 0; i = i-2)
    {
        if (task_animate_led_animate_led_interrupt_occurred()) if (task_animate_led_check_interrupts(&red, &green, &blue)) return;
        r = (i / 256.0) * red;
        g = (i / 256.0) * green;
        b = (i / 256.0) * blue;
        animate_led_set_all_pixels(strip_mask, r, g, b);
    }
}


void animate_led_strobe(strip_mask_t strip_mask, color_hex_code_e color, uint16_t animate_led_strobe_count, uint16_t flash_delay, uint16_t end_pause)
{
    // speed is not handled here currently
	uint8_t red, green, blue; 
	red = ((color & 0xFF0000) >> 16);
	green = ((color & 0x00FF00) >> 8);
	blue = (color & 0x0000FF);
    for (int i = 0; i < animate_led_strobe_count; i++)
    {
        if (task_animate_led_animate_led_interrupt_occurred()) if (task_animate_led_check_interrupts(&red, &green, &blue)) return;
        animate_led_set_all_pixels(strip_mask, red, green, blue);
        animate_led_show_strip(strip_mask);
        task_animate_led_delay(flash_delay);
        animate_led_set_all_pixels(strip_mask, 0, 0, 0);
        animate_led_show_strip(strip_mask);
        task_animate_led_delay(flash_delay);
    }
    task_animate_led_delay(end_pause);
}


void animate_led_cyclone_bounce(strip_mask_t strip_mask, color_hex_code_e color, uint16_t eye_size, uint16_t speed_delay, uint16_t return_delay)
{
	uint8_t red, green, blue; 
	uint16_t strip_size = ws2812_led_get_max_strip_size(strip_mask);
	red = ((color & 0xFF0000) >> 16);
	green = ((color & 0x00FF00) >> 8);
	blue = (color & 0x0000FF);
    for (int i = 0; i < strip_size - eye_size - 2; i++) // "-2" is CYA
    {
        if (task_animate_led_animate_led_interrupt_occurred()) if (task_animate_led_check_interrupts(&red, &green, &blue)) return;
        animate_led_set_all_pixels(strip_mask, 0, 0, 0);
        animate_led_set_pixel(strip_mask, i, red/10, green/10, blue/10);
        for (int j = 1; j <= eye_size; j++)
        {
            animate_led_set_pixel(strip_mask,(i + j), red, green, blue);
        }
        animate_led_set_pixel(strip_mask, i + eye_size + 1, red/10, green/10, blue/10);
        animate_led_show_strip(strip_mask);
        task_animate_led_delay(speed_delay);
    }
    task_animate_led_delay(return_delay);
    for (int i = strip_size - eye_size - 2; i > 0; i--)
    {
        if (task_animate_led_animate_led_interrupt_occurred()) if (task_animate_led_check_interrupts(&red, &green, &blue)) return;
        animate_led_set_all_pixels(strip_mask, 0, 0, 0); 
        animate_led_set_pixel(strip_mask, i , red/10, green/10, blue/10);
        for (int j = 1; j <= eye_size; j++)
        {
            animate_led_set_pixel(strip_mask, i + j, red, green, blue);
        }
        animate_led_set_pixel(strip_mask, i + eye_size + 1, red/10, green/10, blue/10);
        animate_led_show_strip(strip_mask);
        task_animate_led_delay(speed_delay);
    }
    task_animate_led_delay(return_delay);
	animate_led_set_all_pixels(strip_mask, 0, 0, 0);
}


void animate_led_center_to_outside(strip_mask_t strip_mask, color_hex_code_e color, uint16_t eye_size, uint16_t speed_delay, uint16_t return_delay)
{
    // interrupts not handled yet!
	uint16_t strip_size = ws2812_led_get_max_strip_size(strip_mask);
    uint8_t red, green, blue; 
	red = ((color & 0xFF0000) >> 16);
	green = ((color & 0x00FF00) >> 8);
	blue = (color & 0x0000FF);
    for (int i = ((strip_size - eye_size) / 2); i >= 0; i--)
    {
        animate_led_set_all_pixels(strip_mask, 0,0,0);
        animate_led_set_pixel(strip_mask, i, red/10, green/10, blue/10);
        for (int j = 1; j<= eye_size; j++)
        {
            animate_led_set_pixel(strip_mask, i + j, red, green, blue);
        }
        animate_led_set_pixel(strip_mask, i + eye_size + 1, red/10, green/10, blue/10);
        animate_led_set_pixel(strip_mask, strip_size - i, red/10, green/10, blue/10);
        for (int j = 1; j<= eye_size; j++)
        {
            animate_led_set_pixel(strip_mask, strip_size - i - j, red, green, blue);
        }
        animate_led_set_pixel(strip_mask, strip_size - i - eye_size - 1, red/10, green/10, blue/10);
        animate_led_show_strip(strip_mask);
        task_animate_led_delay((float_t)speed_delay / task_animate_led_speed_factor());
    }
    task_animate_led_delay(return_delay);
}


void animate_led_outside_to_center(strip_mask_t strip_mask, color_hex_code_e color, uint16_t eye_size, uint16_t speed_delay, uint16_t return_delay)
{
    // interrupts not handled yet!
	uint16_t strip_size = ws2812_led_get_max_strip_size(strip_mask);
    uint8_t red, green, blue; 
	red = ((color & 0xFF0000) >> 16);
	green = ((color & 0x00FF00) >> 8);
	blue = (color & 0x0000FF);
    for (int i = 0; i <= ((strip_size - eye_size) / 2 ); i++)
    {
        animate_led_set_all_pixels(strip_mask, 0, 0, 0);
        animate_led_set_pixel(strip_mask, i, red/10, green/10, blue/10);
        for (int j = 1; j <= eye_size; j++)
        {
            animate_led_set_pixel(strip_mask, i+j, red, green, blue);
        }
        animate_led_set_pixel(strip_mask, i + eye_size + 1, red/10, green/10, blue/10);
        animate_led_set_pixel(strip_mask, strip_size - i, red/10, green/10, blue/10);
        for (int j = 1; j <= eye_size; j++)
        {
            animate_led_set_pixel(strip_mask, strip_size - i - j, red, green, blue);
        }
        animate_led_set_pixel(strip_mask, strip_size - i - eye_size - 1, red/10, green/10, blue/10);
        animate_led_show_strip(strip_mask);
        task_animate_led_delay((float_t)speed_delay / task_animate_led_speed_factor());
    }
    task_animate_led_delay(return_delay);
}


void animate_led_left_to_right(strip_mask_t strip_mask, color_hex_code_e color, uint16_t eye_size, uint16_t speed_delay, uint16_t return_delay)
{
    // interrupts not handled yet!
	uint16_t strip_size = ws2812_led_get_max_strip_size(strip_mask);
    uint8_t red, green, blue; 
	red = ((color & 0xFF0000) >> 16);
	green = ((color & 0x00FF00) >> 8);
	blue = (color & 0x0000FF);
    for (int i = 0; i < strip_size - eye_size - 2; i++)
    {
        animate_led_set_all_pixels(strip_mask, 0, 0, 0);
        animate_led_set_pixel(strip_mask, i, red/10, green/10, blue/10);
        for (int j = 1; j <= eye_size; j++) animate_led_set_pixel(strip_mask, i + j, red, green, blue);
        animate_led_set_pixel(strip_mask, i + eye_size + 1, red/10, green/10, blue/10);
        animate_led_show_strip(strip_mask);
        task_animate_led_delay((float_t)speed_delay / task_animate_led_speed_factor());
    }
    task_animate_led_delay(return_delay);
}


void animate_led_right_to_left(strip_mask_t strip_mask, color_hex_code_e color, uint16_t eye_size, uint16_t speed_delay, uint16_t return_delay)
{
    // interrupts not handled yet!
	uint16_t strip_size = ws2812_led_get_max_strip_size(strip_mask);
    uint8_t red, green, blue; 
	red = ((color & 0xFF0000) >> 16);
	green = ((color & 0x00FF00) >> 8);
	blue = (color & 0x0000FF);
    for (int i = strip_size - eye_size - 2; i > 0; i--)
    {
        animate_led_set_all_pixels(strip_mask, 0, 0, 0);
        animate_led_set_pixel(strip_mask, i, red/10, green/10, blue/10);
        for (int j = 1; j <= eye_size; j++) animate_led_set_pixel(strip_mask, i + j, red, green, blue);
        animate_led_show_strip(strip_mask);
        task_animate_led_delay((float_t)speed_delay / task_animate_led_speed_factor());
    }
    task_animate_led_delay(return_delay);
}


void animate_led_new_kitt(uint16_t eye_size, uint16_t speed_delay, uint16_t return_delay)
{
    // interrupts not handled yet!
    animate_led_right_to_left((uint16_t)STRIP_BIT_ALL_SET, color_led_cur_color_hex(), eye_size, speed_delay, return_delay);
    animate_led_left_to_right((uint16_t)STRIP_BIT_ALL_SET, color_led_cur_color_hex(), eye_size, speed_delay, return_delay);
    animate_led_outside_to_center((uint16_t)STRIP_BIT_ALL_SET, color_led_cur_color_hex(), eye_size, speed_delay, return_delay);
    animate_led_center_to_outside((uint16_t)STRIP_BIT_ALL_SET, color_led_cur_color_hex(), eye_size, speed_delay, return_delay);
    animate_led_left_to_right((uint16_t)STRIP_BIT_ALL_SET, color_led_cur_color_hex(), eye_size, speed_delay, return_delay);
    animate_led_right_to_left((uint16_t)STRIP_BIT_ALL_SET, color_led_cur_color_hex(), eye_size, speed_delay, return_delay);
    animate_led_outside_to_center((uint16_t)STRIP_BIT_ALL_SET, color_led_cur_color_hex(), eye_size, speed_delay, return_delay);
    animate_led_center_to_outside((uint16_t)STRIP_BIT_ALL_SET, color_led_cur_color_hex(), eye_size, speed_delay, return_delay);
}


void animate_led_twinkle_multiple_colors(strip_mask_t strip_mask, uint32_t* color_array, uint16_t count, uint16_t speed_delay, bool only_one)
{
	uint8_t red, green, blue; 
	strip_bit_e active_strip = STRIP_BIT_1; 
	strip_bit_e pre_strip = STRIP_BIT_1;
	uint8_t num_active_strips = 0;
	strip_bit_e active_strip_array[NUM_STRIPS] = {STRIP_BIT_NONE_SET};
	for (uint8_t iii = 0; iii < NUM_STRIPS; iii++)
	{
		active_strip = ws2812_get_next_active_strip(strip_mask, pre_strip);
		if ((active_strip != STRIP_BIT_NO_MORE_SET) && (active_strip != (1 << (NUM_STRIPS - 1))))
		{
			pre_strip = active_strip + 1;
		}
		if (STRIP_BIT_NO_MORE_SET == active_strip) break;
		num_active_strips++;
		active_strip_array[iii] = active_strip;
	}
	for (int i = 0; i < count; i++)
    {
        if (task_animate_led_animate_led_interrupt_occurred()) if (task_animate_led_check_interrupts(&red, &green, &blue)) return;
        for (int yyy = 0; yyy < num_active_strips; yyy++)
		{
			animate_led_set_pixel(active_strip_array[yyy], random_num(0, ws2812_get_strip_size(active_strip_array[yyy])), (((color_array[yyy] & 0xFF0000) >> 16)), (((color_array[yyy] & 0x00FF00) >> 8)), ((color_array[yyy] & 0x0000FF)));
			animate_led_show_strip(strip_mask);
		}
        if (only_one) animate_led_set_all_pixels(strip_mask, 0, 0, 0);
    }
	task_animate_led_delay((float_t)speed_delay / task_animate_led_speed_factor());
}


void animate_led_twinkle(strip_mask_t strip_mask, color_hex_code_e color, uint16_t count, uint16_t speed_delay, bool only_one)
{
	uint16_t strip_size = ws2812_led_get_max_strip_size(strip_mask);
	uint8_t red, green, blue; 
	red = ((color & 0xFF0000) >> 16);
	green = ((color & 0x00FF00) >> 8);
	blue = (color & 0x0000FF);
    //animate_led_set_all_pixels(ALL_STRIPS, 0, 0, 0);
    for (int i = 0; i < count; i++)
    {
        if (task_animate_led_animate_led_interrupt_occurred()) if (task_animate_led_check_interrupts(&red, &green, &blue)) return;
        animate_led_set_pixel(strip_mask, random_num(0, strip_size), red, green, blue);
        animate_led_show_strip(strip_mask);
        task_animate_led_delay(speed_delay);
        if (only_one) animate_led_set_all_pixels(strip_mask, 0, 0, 0);
    }
    task_animate_led_delay((float_t)speed_delay / task_animate_led_speed_factor());
}


void animate_led_twinkle_random(strip_mask_t strip_mask, uint16_t count, uint16_t speed_delay, bool only_one)
{
    animate_led_set_all_pixels(strip_mask, 0, 0, 0);
    uint8_t dummy_red, dummy_green, dummy_blue; // not used but not worth creating a unique function IMO
    for (int i = 0; i < count; i++)
    {
        if (task_animate_led_animate_led_interrupt_occurred()) if (animate_led_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
        animate_led_set_pixel(strip_mask, random_num(0, g_max_strip_length), random_num(0, 255), random_num(0, 255), random_num(0, 255));
        animate_led_show_strip(strip_mask);
        task_animate_led_delay(speed_delay);
        if (only_one) animate_led_set_all_pixels(strip_mask, 0, 0, 0);
    }
    task_animate_led_delay((float_t)speed_delay / task_animate_led_speed_factor());
}


void animate_led_sparkle_only_random_color(strip_mask_t strip_mask, bool fill, uint16_t speed_delay)
{
	float percent_to_fill = 0.7;
	uint16_t strip_size = ws2812_led_get_max_strip_size(strip_mask);
	uint16_t num_active_leds = ws2812_get_num_active_animation_leds(strip_mask);
    uint8_t dummy_red, dummy_green, dummy_blue; // not used but not worth creating a unique function IMO
	for (uint16_t iii = 0; iii < (percent_to_fill * (float)num_active_leds); iii++)
	{
	    if (task_animate_led_animate_led_interrupt_occurred()) if (task_animate_led_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
		int pix = random_num(0, strip_size);
		animate_led_set_pixel(strip_mask, pix, random_num(0, 255), random_num(0, 255), random_num(0, 255));
		animate_led_show_strip(strip_mask);
		task_animate_led_delay(speed_delay);
		if (!fill) animate_led_set_pixel(strip_mask, pix, 0, 0, 0);
	}
}


void animate_led_sparkle_random_color(strip_mask_t strip_mask, bool fill, uint16_t speed_delay)
{
	uint16_t strip_size = ws2812_led_get_max_strip_size(strip_mask);
	//for (uint16_t iii = 0; iii < (percent_to_fill * (float)ws2812_get_num_active_animation_leds(strip_mask)); iii++)
	///{
		int pix = random_num(0, strip_size);
		animate_led_set_pixel(strip_mask, pix, random_num(0, 255), random_num(0, 255), random_num(0, 255));
		animate_led_show_strip(strip_mask);
		task_animate_led_delay(speed_delay);
		if (!fill) animate_led_set_pixel(strip_mask, pix, 0, 0, 0);
	//}
}


void animate_led_sparkle(strip_mask_t strip_mask, color_hex_code_e color, uint16_t speed_delay)
{
	uint16_t strip_size = ws2812_led_get_max_strip_size(strip_mask);
	uint8_t red, green, blue; 
	red = ((color & 0xFF0000) >> 16);
	green = ((color & 0x00FF00) >> 8);
	blue = (color & 0x0000FF);
    int pix = random_num(0, strip_size);
    animate_led_set_pixel(strip_mask, pix, red, green, blue);
    animate_led_show_strip(strip_mask);
    task_animate_led_delay((float_t)speed_delay / task_animate_led_speed_factor());
    animate_led_set_pixel(strip_mask, pix, 0, 0, 0);
}


void animate_led_running_lights(strip_mask_t strip_mask, color_hex_code_e color)
{
	uint16_t strip_size = ws2812_led_get_max_strip_size(strip_mask);
	uint8_t red, green, blue; 
	red = ((color & 0xFF0000) >> 16);
	green = ((color & 0x00FF00) >> 8);
	blue = (color & 0x0000FF);
    uint16_t pos = 0;
    for (int i = 0; i < strip_size * 2; i++)
    {
        if (task_animate_led_animate_led_interrupt_occurred()) if (animate_led_check_interrupts(&red, &green, &blue)) return;
        pos++;
        for(int i = 0; i < strip_size; i++)
        {
            animate_led_set_pixel(strip_mask, i, ((sin(i + pos) * 127 + 128) / 255) * red, ((sin(i + pos) * 127 + 128) / 255) * green, ((sin(i + pos) * 127 + 128) / 255) * blue); 
        }
        animate_led_show_strip(strip_mask);
        task_animate_led_delay(100 / task_animate_led_speed_factor()); // TODO remove the magic number here!!!
    }
}


void animate_led_color_wipe(strip_mask_t strip_mask, color_hex_code_e color, uint16_t speed_delay)
{
	uint16_t strip_size = ws2812_led_get_max_strip_size(strip_mask);
	uint8_t red, green, blue; 
	red = ((color & 0xFF0000) >> 16);
	green = ((color & 0x00FF00) >> 8);
	blue = (color & 0x0000FF);
    for (uint16_t i = 0; i < strip_size; i++)
    {
        animate_led_set_pixel(strip_mask, i, red, green, blue);
        animate_led_show_strip(strip_mask);
        task_animate_led_delay((float_t)speed_delay / task_animate_led_speed_factor());
    }
    for (uint16_t i = 0; i < g_max_strip_length; i++)
    {
        animate_led_set_pixel(strip_mask, i, 0, 0, 0);
        animate_led_show_strip(strip_mask);
        task_animate_led_delay((float_t)speed_delay / task_animate_led_speed_factor());
    }
}


void animate_led_rainbow_cycle(strip_mask_t strip_mask, uint16_t speed_delay)
{
	uint8_t dummy_red, dummy_green, dummy_blue;
	uint16_t strip_size = ws2812_led_get_max_strip_size(strip_mask);
    uint8_t *c;
    uint16_t i, j;
    //for (j = 0; j < 256 * 5; j++)
    for (j = 0; j < 256 * 5; j++)
    {
        if (task_animate_led_animate_led_interrupt_occurred()) if (task_animate_led_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
        for (i = 0; i < strip_size; i++)
        {
            if (task_animate_led_animate_led_interrupt_occurred()) if (task_animate_led_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
            c = animate_led_wheel(((i * 256 / strip_size) + j) & 255);
            animate_led_set_pixel(strip_mask, i, *c, *(c + 1), *(c + 2));
        }
        animate_led_show_strip(strip_mask);
        task_animate_led_delay((float_t)speed_delay / task_animate_led_speed_factor());
    }
}


uint8_t* animate_led_wheel(uint8_t wheel_pos)
{
    static uint8_t c[3];
    if (wheel_pos < 85)
    {
        c[0] = wheel_pos * 3;
        c[1] = 255 - wheel_pos * 3; 
        c[2] = 0;
    }
    else if(wheel_pos < 170)
    {
        wheel_pos -= 85;
        c[0] = 255 - wheel_pos * 3;
        c[1] = 0;
        c[2] = wheel_pos * 3;
    }
    else
    {
        wheel_pos -= 170;
        c[0] = 0;
        c[1] = wheel_pos * 3; 
        c[2] = 255 - wheel_pos * 3;
    }
    return c;
}

    
void animate_led_theater_chase_multiple_colors(strip_mask_t strip_mask, uint32_t* color_array, uint16_t speed_delay)
{
	uint8_t red, green, blue; 
	strip_bit_e active_strip = STRIP_BIT_1; 
	strip_bit_e pre_strip = STRIP_BIT_1;
	uint16_t strip_size = ws2812_led_get_max_strip_size(strip_mask);
	uint8_t num_active_strips = 0;
	strip_bit_e active_strip_array[NUM_STRIPS] = {STRIP_BIT_NONE_SET};
	for (uint8_t iii = 0; iii < NUM_STRIPS; iii++)
	{
		active_strip = ws2812_get_next_active_strip(strip_mask, pre_strip);
		if ((active_strip != STRIP_BIT_NO_MORE_SET) && (active_strip != (1 << (NUM_STRIPS - 1))))
		{
			pre_strip = active_strip + 1;
		}
		if (STRIP_BIT_NO_MORE_SET == active_strip) break;
		num_active_strips++;
		active_strip_array[iii] = active_strip;
	}
	for (int j = 0; j < 100; j++)
    {
        for (int q = 0; q < 3; q++)
        {
            if (task_animate_led_animate_led_interrupt_occurred()) if (animate_led_check_interrupts(&red, &green, &blue)) return;
            for (int i = 0; i < strip_size; i += 3) 
            {
            	for (int yyy = 0; yyy < num_active_strips; yyy++)
				{
					animate_led_set_pixel(active_strip_array[yyy], i + 	q, (((color_array[yyy] & 0xFF0000) >> 16)), (((color_array[yyy] & 0x00FF00) >> 8)), ((color_array[yyy] & 0x0000FF)));
				}
            }
            animate_led_show_strip(strip_mask);
            if (task_animate_led_animate_led_interrupt_occurred()) if (animate_led_check_interrupts(&red, &green, &blue)) return;
            task_animate_led_delay((float_t)speed_delay / task_animate_led_speed_factor());
            for (int i = 0; i < strip_size; i += 3) 
            {
            	for (int yyy = 0; yyy < num_active_strips; yyy++)
				{
					animate_led_set_pixel(active_strip_array[yyy], i + q, 0, 0, 0); 
				}
       		}
        }
    }
}


void animate_led_theater_chase(strip_mask_t strip_mask, color_hex_code_e color, uint16_t speed_delay)
{
	uint16_t strip_size = ws2812_led_get_max_strip_size(strip_mask);
	uint8_t red, green, blue; 
	red = ((color & 0xFF0000) >> 16);
	green = ((color & 0x00FF00) >> 8);
	blue = (color & 0x0000FF);
    for (int j = 0; j < 10; j++)
    {
        for (int q = 0; q < 3; q++)
        {
            if (task_animate_led_animate_led_interrupt_occurred()) if (task_animate_led_check_interrupts(&red, &green, &blue)) return;
            for (int i = 0; i < strip_size; i += 3) animate_led_set_pixel(strip_mask, i + q, red, green, blue); // turn every third pixel on
            animate_led_show_strip(strip_mask);
            if (task_animate_led_animate_led_interrupt_occurred()) if (task_animate_led_check_interrupts(&red, &green, &blue)) return;
            task_animate_led_delay((float_t)speed_delay / task_animate_led_speed_factor());
            for (int i = 0; i < strip_size; i += 3) animate_led_set_pixel(strip_mask, i + q, 0, 0, 0); // turn everty third pixel off
        }
    }
}


void animate_led_theater_chase_rainbow(strip_mask_t strip_mask, uint16_t speed_delay)
{
	uint8_t dummy_red, dummy_green, dummy_blue;
	uint16_t strip_size = ws2812_led_get_max_strip_size(strip_mask);
    uint8_t *c;
    for (int j = 0; j < 256; j++) // cycel all 256 colors in the animate_led_wheel
    {
        for (int q = 0; q < 3; q++)
        {
            if (task_animate_led_animate_led_interrupt_occurred()) if (animate_led_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
            for (int i = 0; i < strip_size; i = i + 3)
            {
                if (task_animate_led_animate_led_interrupt_occurred()) if (animate_led_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
                c = animate_led_wheel((i + j) % 255);
                animate_led_set_pixel(strip_mask, i + q, *c, *(c + 1), *(c + 2)); // turn every third pixel on
            }
            animate_led_show_strip(strip_mask);
            task_animate_led_delay((float_t)speed_delay / task_animate_led_speed_factor());
            for (int i = 0; i < strip_size; i = i + 3) animate_led_set_pixel(strip_mask, i + q, 0, 0, 0); // turn every third pixel off
        }
    }
}


void animate_led_bouncing_balls(strip_mask_t strip_mask, color_hex_code_e color, int ball_count)
{
	uint16_t strip_size = ws2812_led_get_max_strip_size(strip_mask);
    float gravity = -9.81;
    int start_height = 1;
    float height[ball_count];
    float impact_velocity_start = sqrt(-2 * gravity * start_height);
    float impact_velocity[ball_count];
    float time_since_last_bounce[ball_count];
    int pos[ball_count];
    long clock_time_since_last_bounce[ball_count];
    float dampening[ball_count];
	uint8_t red, green, blue; 
	red = ((color & 0xFF0000) >> 16);
	green = ((color & 0x00FF00) >> 8);
	blue = (color & 0x0000FF);
    for (int i = 0; i < ball_count; i++)
    {
        clock_time_since_last_bounce[i] = millis();
        height[i] = start_height;
        pos[i] = 0;
        impact_velocity[i] = impact_velocity_start;
        time_since_last_bounce[i] = 0;
        dampening[i] = 0.90 - (float)i / pow(ball_count, 2);
    }

	for (int i = 0; i < ball_count; i++)
	{
		time_since_last_bounce[i] = millis() - clock_time_since_last_bounce[i];
		height[i] = 0.5 * gravity * pow(time_since_last_bounce[i] / 1000, 2.0) + impact_velocity[i] * time_since_last_bounce[i] / 1000;
		if (height[i] < 0)
		{
			height[i] = 0;
			impact_velocity[i] = dampening[i] * impact_velocity[i];
			clock_time_since_last_bounce[i] = millis();
			if (impact_velocity[i] < 0.01)
			{
				impact_velocity[i] = impact_velocity_start;
			}
		}
		pos[i] = round(height[i] * (strip_size - 1) / start_height);
	}
	for (int i = 0; i < ball_count; i++)
	{
		animate_led_set_pixel(strip_mask, pos[i], red, green, blue);
	}
	animate_led_show_strip(strip_mask);
	animate_led_set_all_pixels(strip_mask, 0, 0, 0);
}


void animate_led_meteor_rain(strip_mask_t strip_mask, color_hex_code_e color, uint8_t meteor_size, uint8_t meteor_trail_decay, bool meteor_random_decay, int speed_delay)
{
    // interrupts not handled yet!
	//uint16_t offset = 0;
	uint16_t strip_size = ws2812_led_get_max_strip_size(strip_mask);
	uint8_t red, green, blue; 
	red = ((color & 0xFF0000) >> 16);
	green = ((color & 0x00FF00) >> 8);
	blue = (color & 0x0000FF);
    animate_led_set_all_pixels(strip_mask, 0, 0, 0);
    for(int i = 0; i < strip_size + 50; i++) // 50 arbitrarily chosen SRW
    {
        for (int j = 0; j < strip_size; j++)
        {
            if ((!meteor_random_decay) || (random_num(0, 10) > 5))
            {
            	if (strip_mask == g_all_strip_mask)
				{
					for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit < STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
					{
						//offset = animate_led_get_strip_offset(strip_bit);
						if (ws2812_pixel_is_in_strip_range(strip_bit, j)) ;//animate_led_fade_to_black(strip_mask, j, meteor_trail_decay);
					}
				}
				else
				{
					for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit < STRIP_BIT_NUM_STRIPS; strip_bit = strip_bit + 1)
					{
						if (strip_mask & strip_bit)
						{
							//offset = animate_led_get_strip_offset(strip_bit);
							if (ws2812_pixel_is_in_strip_range(strip_bit, j)) animate_led_fade_to_black(strip_mask, j, meteor_trail_decay);
						}
					}
				}
            }
        }
        for (int j = 0; j < meteor_size; j++)
        {
            if ((i - j < strip_size) && (i - j >= 0))
            {
            	if (strip_mask == g_all_strip_mask)
				{
					for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit < STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
					{
						//offset = animate_led_get_strip_offset(strip_bit);
						if (ws2812_pixel_is_in_strip_range(strip_bit, i - j)) animate_led_set_pixel(strip_mask, i - j, red, green, blue);
					}
				}
				else
				{
					for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit < STRIP_BIT_NUM_STRIPS; strip_bit = strip_bit + 1)
					{
						if (strip_mask & strip_bit)
						{
							//offset = animate_led_get_strip_offset(strip_bit);
							if (ws2812_pixel_is_in_strip_range(strip_bit, i - j)) animate_led_set_pixel(strip_mask, i - j, red, green, blue);
						}
					}
				}
            }
        }
//        if (animate_led_check_interrupts(&speed_delay, &red, &green, &blue))
//        {
//        	animate_led_set_all_pixels((strip_mask_t)STRIP_BIT_ALL_SET, 0, 0, 0);
//			return;
//        }
        animate_led_show_strip(strip_mask);
        task_animate_led_delay((float_t)speed_delay / task_animate_led_speed_factor());
    }
}


void animate_led_fade_to_black(strip_mask_t strip_mask, uint16_t pixel, uint8_t fade_value)
{
    // wtf?  update?
	if (STRIP_BIT_ALL_SET == strip_mask)
	{
		for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit < STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
		{
			//offset = animate_led_get_strip_offset(strip_bit);
			//if (ws2812_pixel_is_in_strip_range(strip_bit, pixel)) led_strip[pixel + offset].fadeToBlackBy(fade_value);
		}
	}	
	else
	{
		for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit < STRIP_BIT_NUM_STRIPS; strip_bit = strip_bit + 1)
		{
			if (strip_mask & strip_bit)
			{
				//offset = animate_led_get_strip_offset(strip_bit);
				//if (ws2812_pixel_is_in_strip_range(strip_bit, pixel)) led_strip[pixel + offset].fadeToBlackBy(fade_value);
			}
		}		
	}
}


void animate_led_set_pixel(strip_mask_t strip_mask, uint16_t pixel, uint8_t red, uint8_t green, uint8_t blue)
{
	uint8_t adj_red = red / COLOR_LED_MAX_BRIGHTNESS_DIVISOR;
	uint8_t adj_green = green / COLOR_LED_MAX_BRIGHTNESS_DIVISOR;
	uint8_t adj_blue = blue / COLOR_LED_MAX_BRIGHTNESS_DIVISOR;
	if (STRIP_BIT_ALL_SET == strip_mask)
	{
		for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
		{
			//offset = animate_led_get_strip_offset(strip_bit);
			if (ws2812_pixel_is_in_strip_range(strip_bit, pixel)) ws2812b_set_led(strip_bit, pixel, adj_red, adj_green, adj_blue);
		}
	}
	else
	{
		for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
		{
			if (strip_mask & strip_bit)
			{
				//offset = animate_led_get_strip_offset(strip_bit);
				if (ws2812_pixel_is_in_strip_range(strip_bit, pixel)) ws2812b_set_led(strip_bit, pixel, adj_red, adj_green, adj_blue);
			}
		}
	}
	//animate_led_show_strip();
}


void animate_led_set_all_pixels(strip_mask_t strip_mask, uint8_t red, uint8_t green, uint8_t blue)
{		
	uint16_t strip_size = 0;
	uint8_t adj_red = red / COLOR_LED_MAX_BRIGHTNESS_DIVISOR;
	uint8_t adj_green = green / COLOR_LED_MAX_BRIGHTNESS_DIVISOR;
	uint8_t adj_blue = blue / COLOR_LED_MAX_BRIGHTNESS_DIVISOR;
	if (strip_mask == g_all_strip_mask)
	{
		for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
		{
		    strip_size = ws2812_get_strip_size(strip_bit);
			//offset = animate_led_get_strip_offset(strip_bit);
			for (uint16_t iii = 0; iii < strip_size; iii++) ws2812b_set_led(strip_bit, iii, adj_red, adj_green, adj_blue);
		}
	}
	else
	{
		for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
		{
			if (strip_mask & strip_bit)
			{
				//offset = animate_led_get_strip_offset(strip_bit);
				strip_size = ws2812_get_strip_size(strip_bit);
				for (uint16_t yyy = 0; yyy < strip_size; yyy++) ws2812b_set_led(strip_bit, yyy, adj_red, adj_green, adj_blue);
			}
		}
	}
    animate_led_show_strip(strip_mask);
}

