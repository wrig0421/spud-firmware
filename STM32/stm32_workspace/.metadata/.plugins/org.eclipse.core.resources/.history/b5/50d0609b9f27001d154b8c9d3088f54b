/*
 * task_pin_level_count.c
 *
 *  Created on: Jul 31, 2022
 *      Author: splat
 */
#include "main.h"
#include "cmsis_os.h"
#include "animate_led.h"
#include "board_init_common.h"
#include "task_button_press.h"




// holding 'A' results in speed demo state?
// holding 'B' results in state change to demo mode
// holding 'C' results in demo color state
// holding 'D' does nothing...

void task_button_press(void *argument)
{
    while (1)
    {
        // wait on flag to unblock..
        for (int iii = 0; iii < NUM_PUSH_BUTTONS; iii++)
        {
            if (board_init_button_is_pressed(PUSH_BUTTON_A))
            {
                board_init_button_on_count_clear(PUSH_BUTTON_A);
                animate_led_set_interrupt_flag(ISR_SPEED);
                animate_led_adjust_speed();
                board_init_button_on_count_increment(PUSH_BUTTON_A);
            }
            else if (board_init_button_is_pressed(PUSH_BUTTON_B))
            {
                animate_led_set_interrupt_flag(ISR_STATE);
                board_init_button_on_count_clear(PUSH_BUTTON_B);
                while (board_init_button_is_pressed(PUSH_BUTTON_B))
                {
                    board_init_button_on_count_increment(PUSH_BUTTON_B);
                    osDelay(10);
                }
                if (board_init_button_on_count(PUSH_BUTTON_B) > 100)
                {
                    // signal to the user that color state is changing
                    for (uint8_t iii = 0; iii < 3; iii++)
                    {
                        animate_led_solid_custom_color((uint16_t)STRIP_BIT_ALL_SET, COLOR_HEX_RED);
                        osDelay(100);
                        animate_led_solid_custom_color((uint16_t)STRIP_BIT_ALL_SET, COLOR_HEX_BLACK);
                        osDelay(100);
                    }
                    animate_led_set_interrupt_flag(ISR_STATE);
                    animate_led_reset_animate_iteration_count();
                    animate_led_enter_demo_state();
                    while(board_init_button_is_pressed(PUSH_BUTTON_B)); // wait for release
                    board_init_button_on_count_clear(PUSH_BUTTON_B);
                    break;
                }
                else
                {
                    animate_led_reset_animate_iteration_count();
                    animate_led_set_interrupt_flag(ISR_STATE);
                    animate_led_adjust_state();
                }
            }
            else if (board_init_button_is_pressed(PUSH_BUTTON_C))
            {
                board_init_button_on_count_clear(PUSH_BUTTON_C);
                while (board_init_button_is_pressed(PUSH_BUTTON_C))
                {
                    board_init_button_on_count_increment(PUSH_BUTTON_C);
                    osDelay(10);
                }
                if (board_init_button_on_count(PUSH_BUTTON_C) > 100)
                {
                    // signal to the user that color state is changing
                    for (uint8_t iii = 0; iii < 3; iii++)
                    {
                        animate_led_solid_custom_color((uint16_t)STRIP_BIT_ALL_SET, COLOR_HEX_BLUE);
                        osDelay(100);
                        animate_led_solid_custom_color((uint16_t)STRIP_BIT_ALL_SET, COLOR_HEX_BLACK);
                        osDelay(100);
                    }
                    color_led_enter_demo_state();
                    while(board_init_button_is_pressed(PUSH_BUTTON_C)); // wait for release
                    board_init_button_on_count_clear(PUSH_BUTTON_C);
                    break;
                }
                else
                {
                    animate_led_set_interrupt_flag(ISR_COLOR);
                    color_led_adjust_color();
                }
            }
            else if (board_init_button_is_pressed(PUSH_BUTTON_D))
            {
                board_init_button_on_count_clear(PUSH_BUTTON_D);

//                while (board_init_button_is_pressed(PUSH_BUTTON_D))
//                {
//                    board_init_button_on_count_increment(PUSH_BUTTON_D);
//                    osDelay(10);
//                }
                animate_led_set_interrupt_flag(ISR_PAUSE);
                animate_led_pause();
            }
        }
        osDelay(100);
    }

}
