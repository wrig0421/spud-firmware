// SRW

#include "stm32l4xx_hal.h"
#include "board_common.h"
#include "board_specific.h"
#include "gpio_config_hal.h"

#if defined(BOARD_SPUD_GLO_V5)



gpio_config_t gpio_config[GPIO_CONFIG_NUM_PINS] =
{
    [GPIO_CONFIG_PIOA_PIN0] =
    {
        .pin = PIN_WKUP1,
        .port = PIN_PORT_A,
        .pin_mode = GPIO_CONFIG_PIN_MODE_INPUT_FLOAT
        .interrupt = GPIO_CONFIG_PIN_INTERRUPT_ENABLE,
    },
    [GPIO_CONFIG_PIOA_PIN1] =
    {
        .pin = PIN_ESP8266_SCK,
        .port = PIN_PORT_A,
        .pin_mode = GPIO_CONFIG_PIN_MODE_ALTERNATE_FUNCTION
        .interrupt = GPIO_CONFIG_PIN_INTERRUPT_NO_SETUP,
    },
    [GPIO_CONFIG_PIOA_PIN2] =
    {
        .pin = PIN_WKUP4,
        .port = PIN_PORT_A,
        .pin_mode = GPIO_CONFIG_PIN_MODE_INPUT_FLOAT
        .interrupt = GPIO_CONFIG_PIN_INTERRUPT_ENABLE,
    },
    [GPIO_CONFIG_PIOA_PIN4] =
    {
        .pin = PIN_ESP8266_CSN,
        .port = PIN_PORT_A,
        .pin_mode = GPIO_CONFIG_PIN_MODE_OUTPUT_PUSH_PULL
        .interrupt = GPIO_CONFIG_PIN_INTERRUPT_NO_SETUP,
    },
    [GPIO_CONFIG_PIOA_PIN5] =
    {
        .pin = PIN_ESP8266_GPIO0,
        .port = PIN_PORT_A,
        .pin_mode = GPIO_CONFIG_PIN_MODE_OUTPUT_PUSH_PULL
        .interrupt = GPIO_CONFIG_PIN_INTERRUPT_NO_SETUP,
    },
    [GPIO_CONFIG_PIOA_PIN6] =
    {
        .pin = PIN_ESP8266_EN,
        .port = PIN_PORT_A,
        .pin_mode = GPIO_CONFIG_PIN_MODE_OUTPUT_PUSH_PULL
        .interrupt = GPIO_CONFIG_PIN_INTERRUPT_NO_SETUP,
    },
    [GPIO_CONFIG_PIOA_PIN7] =
    {
        .pin = PIN_ESP8266_RST,
        .port = PIN_PORT_A,
        .pin_mode = GPIO_CONFIG_PIN_MODE_OUTPUT_PUSH_PULL
        .interrupt = GPIO_CONFIG_PIN_INTERRUPT_NO_SETUP,
    },
    [GPIO_CONFIG_PIOA_PIN8] =
    {
        .pin = PIN_TIM1_CH1,
        .port = PIN_PORT_A,
        .pin_mode = GPIO_CONFIG_PIN_MODE_ALTERNATE_FUNCTION
        .interrupt = GPIO_CONFIG_PIN_INTERRUPT_NO_SETUP,
    },
    [GPIO_CONFIG_PIOA_PIN9] =
    {
        .pin = PIN_TIM1_CH2,
        .port = PIN_PORT_A,
        .pin_mode = GPIO_CONFIG_PIN_MODE_ALTERNATE_FUNCTION
        .interrupt = GPIO_CONFIG_PIN_INTERRUPT_NO_SETUP,
    },
    [GPIO_CONFIG_PIOA_PIN10] =
    {
        .pin = PIN_TIM1_CH3,
        .port = PIN_PORT_A,
        .pin_mode = GPIO_CONFIG_PIN_MODE_ALTERNATE_FUNCTION
        .interrupt = GPIO_CONFIG_PIN_INTERRUPT_NO_SETUP,
    },
    [GPIO_CONFIG_PIOA_PIN11] =
    {
        .pin = PIN_ESP8266_CIPO,
        .port = PIN_PORT_A,
        .pin_mode = GPIO_CONFIG_PIN_MODE_ALTERNATE_FUNCTION
        .interrupt = GPIO_CONFIG_PIN_INTERRUPT_NO_SETUP,
    },
    [GPIO_CONFIG_PIOA_PIN12] =
    {
        .pin = PIN_ESP8266_COPI,
        .port = PIN_PORT_A,
        .pin_mode = GPIO_CONFIG_PIN_MODE_ALTERNATE_FUNCTION
        .interrupt = GPIO_CONFIG_PIN_INTERRUPT_NO_SETUP,
    },
    [GPIO_CONFIG_PIOB_PIN6] =
    {
        .pin = PIN_ESP8266_RXD,
        .port = PIN_PORT_B,
        .pin_mode = GPIO_CONFIG_PIN_MODE_ALTERNATE_FUNCTION
        .interrupt = GPIO_CONFIG_PIN_INTERRUPT_NO_SETUP,
    },
    [GPIO_CONFIG_PIOB_PIN7] =
    {
        .pin = PIN_ESP8266_TXD,
        .port = PIN_PORT_B,
        .pin_mode = GPIO_CONFIG_PIN_MODE_ALTERNATE_FUNCTION
        .interrupt = GPIO_CONFIG_PIN_INTERRUPT_NO_SETUP,
    },
    [GPIO_CONFIG_PIOB_PIN12] =
    {
        .pin = PIN_XR_GPIO,
        .port = PIN_PORT_B,
        .pin_mode = GPIO_CONFIG_PIN_MODE_INPUT
        .interrupt = GPIO_CONFIG_PIN_INTERRUPT_NO_SETUP,
    },
    [GPIO_CONFIG_PIOB_PIN13] =
    {
        .pin = PIN_VBUS_PRESENT,
        .port = PIN_PORT_B,
        .pin_mode = GPIO_CONFIG_PIN_MODE_INPUT
        .interrupt = GPIO_CONFIG_PIN_INTERRUPT_NO_SETUP,
    },
    [GPIO_CONFIG_PIOC_PIN0] =
    {
        .pin = PIN_VBUS_PRESENT,
        .port = PIN_PORT_B,
        .pin_mode = GPIO_CONFIG_PIN_MODE_INPUT
        .interrupt = GPIO_CONFIG_PIN_INTERRUPT_NO_SETUP,
    },


};



#if defined(BOARD_SPUD_GLO_V4P2)
static void board_init_peripheral_setup(void)
{
    uart_access_setup();
    spi_access_setup();
}
#endif


void board_init_specific(void)
{
    GPIO_InitTypeDef GPIO_InitStruct = {0};

    GPIO_InitStruct.Pin = PIN_INT_LVL_EN;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(PIN_PORT_B, &GPIO_InitStruct);
    HAL_GPIO_WritePin(PIN_PORT_B, PIN_INT_LVL_EN, GPIO_PIN_SET);

    GPIO_InitStruct.Pin = PIN_LVL_EN;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
    HAL_GPIO_WritePin(PIN_PORT_C, PIN_LVL_EN, GPIO_PIN_RESET);

    GPIO_InitStruct.Pin = PIN_LVL_DIR;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
    HAL_GPIO_WritePin(PIN_PORT_C, PIN_LVL_DIR, GPIO_PIN_SET);

    GPIO_InitStruct.Pin = PIN_DISP_RST | PIN_DISP_DC |PIN_DISP_BACKLIGHT;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(PIN_PORT_A, &GPIO_InitStruct);

    // setup XR_RX and XR_TX
    GPIO_InitStruct.Pin = PIN_XR_GPIO | PIN_VBUS_PRESENT;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(PIN_PORT_B, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = PIN_BLUE_LED | PIN_ORANGE_LED;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(PIN_PORT_B, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = PIN_GREEN_LED | PIN_RED_LED;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);

    board_init_peripheral_setup();
}


void board_init_specific_green_led_on(void)
{
    HAL_GPIO_WritePin(PIN_PORT_C, PIN_GREEN_LED, GPIO_PIN_SET);
}


void board_init_specific_green_led_off(void)
{
    HAL_GPIO_WritePin(PIN_PORT_C, PIN_GREEN_LED, GPIO_PIN_RESET);
}


void board_init_specific_red_led_on(void)
{
    HAL_GPIO_WritePin(PIN_PORT_C, PIN_RED_LED, GPIO_PIN_SET);
}


void board_init_specific_red_led_off(void)
{
    HAL_GPIO_WritePin(PIN_PORT_C, PIN_RED_LED, GPIO_PIN_RESET);
}


void board_init_specific_blue_led_on(void)
{
    HAL_GPIO_WritePin(PIN_PORT_B, PIN_BLUE_LED, GPIO_PIN_SET);
}


void board_init_specific_blue_led_off(void)
{
    HAL_GPIO_WritePin(PIN_PORT_B, PIN_BLUE_LED, GPIO_PIN_RESET);
}


void board_init_specific_orange_led_on(void)
{
    HAL_GPIO_WritePin(PIN_PORT_B, PIN_ORANGE_LED, GPIO_PIN_SET);
}


void board_init_specific_orange_led_off(void)
{
    HAL_GPIO_WritePin(PIN_PORT_B, PIN_ORANGE_LED, GPIO_PIN_RESET);
}


void board_init_specific_power_cycle_level_shifter(void)
{
    HAL_GPIO_WritePin(PIN_PORT_C, PIN_LVL_EN, GPIO_PIN_RESET);
    osDelay(1000);
    HAL_GPIO_WritePin(PIN_PORT_C, PIN_LVL_EN, GPIO_PIN_SET);
}


#endif

