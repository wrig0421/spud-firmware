/*
 * task_pin_level_count.c
 *
 *  Created on: Jul 31, 2022
 *      Author: splat
 */
#include "main.h"
#include "cmsis_os.h"
#include "animate_led.h"
#include "board_init_common.h"
#include "task_button_press.h"

#define TASK_BUTTON_PRESS_ITERATION_TIME_MILLISECONDS  10
#define TASK_BUTTON_PRESS_STATE_TRANSITION_TIME_SEC 3000

// holding 'A' results in speed demo state?
// holding 'B' results in state change to demo mode
// holding 'C' results in demo color state
// holding 'D' does nothing...

void task_button_press(void *argument)
{
    while (1)
    {
        // TODO add a task block here waiting for execution!
        // This task will only be executed when a button press occurs
        // wait on flag to unblock..
        for (board_init_push_buttons_e button = 0; button < NUM_PUSH_BUTTONS; button = (board_init_push_buttons_e)(button + 1))
        {
            if(board_init_button_is_pressed(button))
            {
                // clear current button count
                board_init_button_on_count_clear(button);
                // wait for use to release the button
                while (board_init_button_is_pressed(button))
                {
                    board_init_button_on_count_increment(button);
                    osDelay(TASK_BUTTON_PRESS_ITERATION_TIME_MILLISECONDS);
                }
                // button is released here!
                if ((TASK_BUTTON_PRESS_STATE_TRANSITION_TIME_SEC / TASK_BUTTON_PRESS_ITERATION_TIME_MILLISECONDS) > board_init_button_on_count(button))
                {
                    board_init_button_on_count_clear(button);
                    switch (button)
                    {
                        case PUSH_BUTTON_A:
                            // perhaps go to a default speed here??
                            // future
                        break;

                        case PUSH_BUTTON_B:
                            // signal to the user that color state is changing
                            for (uint8_t iii = 0; iii < 3; iii++)
                            {
                                animate_led_solid_custom_color((uint16_t)STRIP_BIT_ALL_SET, COLOR_HEX_RED);
                                osDelay(100);
                                animate_led_solid_custom_color((uint16_t)STRIP_BIT_ALL_SET, COLOR_HEX_BLACK);
                                osDelay(100);
                            }
                            animate_led_reset_animate_iteration_count();
                            animate_led_enter_demo_state(); // enter demo state
                        break;

                        case PUSH_BUTTON_C:
                            // signal to the user that color state is changing
                            for (uint8_t iii = 0; iii < 3; iii++)
                            {
                                animate_led_solid_custom_color((uint16_t)STRIP_BIT_ALL_SET, COLOR_HEX_BLUE);
                                osDelay(100);
                                animate_led_solid_custom_color((uint16_t)STRIP_BIT_ALL_SET, COLOR_HEX_BLACK);
                                osDelay(100);
                            }
                            // don't change iteration count.  Simply go to color demo mode.
                            color_led_enter_demo_state();
                        break;

                        case PUSH_BUTTON_D:
                            // future
                        break;

                        default:
                        break;
                    }
                }
                else
                {
                    // set ISR flag
                    animate_led_set_interrupt_flag(animate_led_button_to_isr(button));
                    switch (button)
                    {
                        case PUSH_BUTTON_A:
                            animate_led_adjust_speed();
                        break;
                        case PUSH_BUTTON_B:
                            animate_led_reset_animate_iteration_count();
                            animate_led_adjust_state();
                        break;
                        case PUSH_BUTTON_C:
                            color_led_adjust_color();
                        break;
                        case PUSH_BUTTON_D:
                            animate_led_pause();
                        break;
                        default:
                        break;
                    }

                }

            }
        }
    }

}
