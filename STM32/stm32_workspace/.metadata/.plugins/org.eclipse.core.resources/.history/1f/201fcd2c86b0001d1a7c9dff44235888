
#include <stdint.h>
#include "stm32l4xx_hal.h"
#include "flash_info.h"
#include <time.h>

#define FLASH_INFO_DEFAULT_IMAGE_SLOT   FLASH_INFO_IMAGE_SLOT_1
#define FLASH_INFO_MINI_MAIN_SLOT       FLASH_INFO_MINI_MAIN_SLOT

#pragma pack(1)
typedef struct
{
    uint8_t year_yy;
    uint8_t month_mm;
    uint8_t day_dd;
    uint8_t hour_hh;
    uint8_t minutes_mm;
    uint8_t seconds_ss;
    uint8_t fill[2];
} flash_info_fw_version_date_t;


typedef union
{
    flash_info_fw_version_date_t    fw_version_date;
    uint8_t                         flat_data_uint8[sizeof(flash_info_fw_version_date_t)];
} flash_info_fw_version_t;


typedef union
{
    struct
    {
        uint8_t num_strips;
    } config_data;
    uint8_t                     flat_data_uint8[FLASH_INFO_SUB_BLOCK_SIZE_BYTES];
    uint16_t                    flat_data_uint16[FLASH_INFO_SUB_BLOCK_SIZE_BYTES / sizeof(uint16_t)];
    uint32_t                    flat_data_uint32[FLASH_INFO_SUB_BLOCK_SIZE_BYTES / sizeof(uint32_t)];
} flash_info_config_block_t;


typedef union
{
    struct
    {
        uint32_t uuid[3];
    } status_data;
    uint8_t                     flat_data_uint8[FLASH_INFO_SUB_BLOCK_SIZE_BYTES];
    uint16_t                    flat_data_uint16[FLASH_INFO_SUB_BLOCK_SIZE_BYTES / sizeof(uint16_t)];
    uint32_t                    flat_data_uint32[FLASH_INFO_SUB_BLOCK_SIZE_BYTES / sizeof(uint32_t)];
} flash_info_status_block_t;


typedef union
{
    struct
    {
        flash_info_image_slot_t active_image;
        flash_info_fw_version_t active_image_fw_version;
        flash_info_image_slot_t mini_main_image;
        flash_info_fw_version_t mini_main_image_fw_version;

        uint8_t valid_image;
        uint8_t selected_image;
    } image_data;
    uint8_t                     flat_data_uint8[FLASH_INFO_SUB_BLOCK_SIZE_BYTES];
    uint16_t                    flat_data_uint16[FLASH_INFO_SUB_BLOCK_SIZE_BYTES / sizeof(uint16_t)];
    uint32_t                    flat_data_uint32[FLASH_INFO_SUB_BLOCK_SIZE_BYTES / sizeof(uint32_t)];
} flash_info_image_block_t;
#pragma pack(0)


flash_info_status_block_t   g_flash_info_status_block;
flash_info_config_block_t   g_flash_info_config_block;
flash_info_image_block_t    g_flash_info_image_block;


void flash_info_status_init(void)
{
    g_flash_info_status_block.status_data.uuid[0] = HAL_GetUIDw0();
    g_flash_info_status_block.status_data.uuid[1] = HAL_GetUIDw1();
    g_flash_info_status_block.status_data.uuid[2] = HAL_GetUIDw2();
}


void flash_info_config_init(void)
{
    g_flash_info_config_block.config_data.num_strips = 1;
}


void flash_info_image_init(void)
{
    g_flash_info_image_block.image_data.active_image = FLASH_INFO_IMAGE_SLOT_1;
    //g_flash_info_image_block.image_data.active_image_fw_version = ;
    g_flash_info_image_block.image_data.mini_main_image = FLASH_INFO_MINI_MAIN_SLOT;
//    g_flash_info_image_block.image_data.mini_main_image_fw_version = ;
    g_flash_info_image_block.image_data.selected_image = FLASH_INFO_IMAGE_SLOT_1;
    g_flash_info_image_block.image_data.valid_image = UINT8_MAX;
}


void flash_info_init(void)
{
    flash_access_read_sub_block(FLASH_INFO_SUB_BLOCK_STATUS, g_flash_info_status_block.flat_data_uint32);
    flash_access_read_sub_block(FLASH_INFO_SUB_BLOCK_CONFIG, g_flash_info_config_block.flat_data_uint32);
    flash_access_read_sub_block(FLASH_INFO_SUB_BLOCK_IMAGE, g_flash_info_image_block.flat_data_uint32);
    if ((UINT32_MAX == g_flash_info_status_block.status_data.uuid[0]) &&
                    (UINT32_MAX == g_flash_info_status_block.status_data.uuid[1]) &&
                    (UINT32_MAX == g_flash_info_status_block.status_data.uuid[2]))
    {
        flash_info_status_init();
        flash_info_config_init();
        flash_info_image_init();
    }
    _DATE_;
    _TIME_

}


void flash_info_read_unique_id(uint32_t *uuid)
{
    uuid[0] = HAL_GetUIDw0();
    uuid[1] = HAL_GetUIDw1();
    uuid[2] = HAL_GetUIDw2();
}


