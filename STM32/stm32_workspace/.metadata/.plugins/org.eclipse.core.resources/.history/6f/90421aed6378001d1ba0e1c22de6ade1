// SRW
#include <stdlib.h>
#include <stdbool.h>
#include <stdint.h>

#include "main.h"
#include "cmsis_os.h"
#include "FreeRTOS.h"
#include "task.h"

#include "board_init_common.h"
#include "board_specific.h"
#include "cmsis_os.h"
#include "task_led_ctrl.h"
#include "task_button_press.h"
#include "task_mn_wild.h"


typedef enum
{
   TASK_MN_WILD_STATE_IDLE = 0,
   TASK_MN_WILD_STATE_PLAY
} task_mn_wild_state_e;;


task_mn_wild_state g_task_mn_wild_state = TASK_MN_WILD_STATE_IDLE;


static void task_mn_wild_init(void)
{
    board_init_green_led_on();
    adafruit_soundboard_power_enable();
    osDelay(500);
    adafruit_soundboard_reset_disable();
    osDelay(200);
    adafruit_soundboard_init();
    board_init_green_led_off();
}


void task_mn_wild(void *argument)
{
    task_mn_wild_init();

    while (1)
    {
        //xTaskNotifyWait(0, button_pressed_bit, &button_pressed_bit, portMAX_DELAY);

        switch (g_task_mn_wild_state)
        {
            case TASK_MN_WILD_STATE_IDLE:
            break;
            case TASK_MN_WILD_STATE_PLAY:
                // turn on the relays
                // delay
                // trigger the sound

            break;
            default:
            break;
        }
        osDelay(500);
    }
}
