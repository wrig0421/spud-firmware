
#include "FreeRTOS.h"
#include "cmsis_os.h"
#include "semphr.h"
#include "main.h"
#include "semaphore_create.h"
#include "ws2812b.h"
#include "numbers.h"
#include "task_dma_transfer.h"


typedef enum
{
    TASK_DMA_TRANSFER_STATE_RESET = 0,
    TASK_DMA_TRANSFER_STATE_TIM1_CHANNEL_1 = (1 << 0),
    TASK_DMA_TRANSFER_STATE_TIM1_CHANNEL_2 = (1 << 1),
    TASK_DMA_TRANSFER_STATE_TIM1_CHANNEL_3 = (1 << 2),
    TASK_DMA_TRANSFER_STATE_TIM15_CHANNEL_1 = (1 << 3),
    TASK_DMA_TRANSFER_STATE_TIM16_CHANNEL_1 = (1 << 4),
    TASK_DMA_TRANSFER_CMPLT = 0xFF
} task_dma_transfer_state_e;

extern bool g_tim_pwm_transfer_cmplt;
extern TIM_HandleTypeDef g_tim1_handle;
extern TIM_HandleTypeDef g_tim15_handle;
extern TIM_HandleTypeDef g_tim16_handle;
extern SemaphoreHandle_t g_dma_transfer_semaphore;
extern p_pwm_data_t gp_pwm_data_fill;

uint16_t g_pwm_reset[50] = {0};

void task_dma_transfer(void *argument)
{
    uint32_t dma_transfer_state = 0;
    uint32_t count = 0;
    while (1)
    {
        xTaskNotifyWait(0, dma_transfer_state, &dma_transfer_state, portMAX_DELAY);
        dma_transfer_state = (task_dma_transfer_state_e)dma_transfer_state;
        if (TASK_DMA_TRANSFER_CMPLT == dma_transfer_state)
        {
            count++;
            if (NUM_STRIPS == count)
            {
                xSemaphoreGive(g_dma_transfer_semaphore);
            }
        }
        if (TASK_DMA_TRANSFER_STATE_RESET == dma_transfer_state)
        {
#if defined(STRIP_1_LENGTH)
            HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_1, (uint32_t *)g_pwm_reset, 50);
#endif
#if defined(STRIP_2_LENGTH)
            HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_2, (uint32_t *)g_pwm_reset, 50);
#endif
#if defined(STRIP_3_LENGTH)
            HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_3, (uint32_t *)g_pwm_reset, 50);
#endif
#if defined(STRIP_4_LENGTH)
            HAL_TIM_PWM_Start_DMA(&g_tim15_handle, TIM_CHANNEL_1, (uint32_t *)g_pwm_reset, 50);
#endif
#if defined(STRIP_5_LENGTH)
            HAL_TIM_PWM_Start_DMA(&g_tim16_handle, TIM_CHANNEL_1, (uint32_t *)g_pwm_reset, 50);
#endif
        }
#if defined(STRIP_1_LENGTH)
        if (dma_transfer_state & TASK_DMA_TRANSFER_STATE_TIM1_CHANNEL_1)
        {
            HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_1, (uint32_t *)gp_pwm_data_fill, (ws2812b_strip_size() * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + WS2812B_RESET_TIME_CYCLES);
        }
#endif
#if defined(STRIP_2_LENGTH)
        if (dma_transfer_state & TASK_DMA_TRANSFER_STATE_TIM1_CHANNEL_2)
        {
            HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_2, (uint32_t *)gp_pwm_data_fill, (ws2812b_strip_size() * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + WS2812B_RESET_TIME_CYCLES);
        }
#endif
#if defined(STRIP_3_LENGTH)
        if (dma_transfer_state & TASK_DMA_TRANSFER_STATE_TIM1_CHANNEL_3)
        {
            HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_3, (uint32_t *)gp_pwm_data_fill, (ws2812b_strip_size() * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + WS2812B_RESET_TIME_CYCLES);
        }
#endif
#if defined(STRIP_4_LENGTH)
        if (dma_transfer_state & TASK_DMA_TRANSFER_STATE_TIM15_CHANNEL_1)
        {
            HAL_TIM_PWM_Start_DMA(&g_tim15_handle, TIM_CHANNEL_1, (uint32_t *)gp_pwm_data_fill, (ws2812b_strip_size() * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + WS2812B_RESET_TIME_CYCLES);
        }
#endif
#if defined(STRIP_5_LENGTH)
        if (dma_transfer_state & TASK_DMA_TRANSFER_STATE_TIM16_CHANNEL_1)
        {
            HAL_TIM_PWM_Start_DMA(&g_tim16_handle, TIM_CHANNEL_1, (uint32_t *)gp_pwm_data_fill, (ws2812b_strip_size() * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + WS2812B_RESET_TIME_CYCLES);
        }
#endif
        while (!g_tim_pwm_transfer_cmplt)
        {
            osDelay(1);
        }
    }
}
