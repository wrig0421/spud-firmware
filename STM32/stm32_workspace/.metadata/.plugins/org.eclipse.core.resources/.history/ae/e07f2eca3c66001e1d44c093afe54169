
spudglo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088c0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000244  08008a50  08008a50  00018a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c94  08008c94  000202ec  2**0
                  CONTENTS
  4 .ARM          00000000  08008c94  08008c94  000202ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008c94  08008c94  000202ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c94  08008c94  00018c94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c98  08008c98  00018c98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002ec  20000000  08008c9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000026e8  200002ec  08008f88  000202ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200029d4  08008f88  000229d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d201  00000000  00000000  0002031c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004674  00000000  00000000  0003d51d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a30  00000000  00000000  00041b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001828  00000000  00000000  000435c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000282ce  00000000  00000000  00044df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f4fd  00000000  00000000  0006d0be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f63f4  00000000  00000000  0008c5bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001829af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007558  00000000  00000000  00182a00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  00189f58  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  00189f7c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002ec 	.word	0x200002ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008a38 	.word	0x08008a38

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002f0 	.word	0x200002f0
 80001cc:	08008a38 	.word	0x08008a38

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <current_monitor_init>:
    return g_max_current_ratio;
}


void current_monitor_init(void)
{
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
    while ((g_max_current_ratio * ((float)CURRENT_MONITOR_MAX_CURRENT_PER_LED_MA / 1000) * NUM_LEDS) > (float)CURRENT_MONITOR_MAX_CURRENT_DRAW_A)
 8000274:	e009      	b.n	800028a <current_monitor_init+0x1a>
    {
        g_max_current_ratio -= 0.05f;
 8000276:	4b17      	ldr	r3, [pc, #92]	; (80002d4 <current_monitor_init+0x64>)
 8000278:	edd3 7a00 	vldr	s15, [r3]
 800027c:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80002d8 <current_monitor_init+0x68>
 8000280:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000284:	4b13      	ldr	r3, [pc, #76]	; (80002d4 <current_monitor_init+0x64>)
 8000286:	edc3 7a00 	vstr	s15, [r3]
    while ((g_max_current_ratio * ((float)CURRENT_MONITOR_MAX_CURRENT_PER_LED_MA / 1000) * NUM_LEDS) > (float)CURRENT_MONITOR_MAX_CURRENT_DRAW_A)
 800028a:	4b12      	ldr	r3, [pc, #72]	; (80002d4 <current_monitor_init+0x64>)
 800028c:	edd3 7a00 	vldr	s15, [r3]
 8000290:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80002dc <current_monitor_init+0x6c>
 8000294:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000298:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80002e0 <current_monitor_init+0x70>
 800029c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80002a0:	eeb2 7a03 	vmov.f32	s14, #35	; 0x41180000  9.5
 80002a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80002a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80002ac:	dce3      	bgt.n	8000276 <current_monitor_init+0x6>
    }
    if (g_max_current_ratio <= 0) while(1); // broken..
 80002ae:	4b09      	ldr	r3, [pc, #36]	; (80002d4 <current_monitor_init+0x64>)
 80002b0:	edd3 7a00 	vldr	s15, [r3]
 80002b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80002b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80002bc:	d800      	bhi.n	80002c0 <current_monitor_init+0x50>
 80002be:	e7fe      	b.n	80002be <current_monitor_init+0x4e>
    g_absolute_max_current_ratio = g_max_current_ratio;
 80002c0:	4b04      	ldr	r3, [pc, #16]	; (80002d4 <current_monitor_init+0x64>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a07      	ldr	r2, [pc, #28]	; (80002e4 <current_monitor_init+0x74>)
 80002c6:	6013      	str	r3, [r2, #0]
}
 80002c8:	bf00      	nop
 80002ca:	46bd      	mov	sp, r7
 80002cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d0:	4770      	bx	lr
 80002d2:	bf00      	nop
 80002d4:	20000000 	.word	0x20000000
 80002d8:	3d4ccccd 	.word	0x3d4ccccd
 80002dc:	3d23d70a 	.word	0x3d23d70a
 80002e0:	43700000 	.word	0x43700000
 80002e4:	20000308 	.word	0x20000308

080002e8 <reset_ws2812b>:

extern volatile int datasentflag;

uint16_t pwm_reset[50] = {0};
void reset_ws2812b(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
    //xSemaphoreTake(g_dma_transfer_semaphore, portMAX_DELAY);
    //xTaskNotify(g_dma_transfer_handle, 0, eSetValueWithOverwrite);
    HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_1, (uint32_t *)pwm_reset, sizeof(pwm_reset));
 80002ec:	2364      	movs	r3, #100	; 0x64
 80002ee:	4a09      	ldr	r2, [pc, #36]	; (8000314 <reset_ws2812b+0x2c>)
 80002f0:	2100      	movs	r1, #0
 80002f2:	4809      	ldr	r0, [pc, #36]	; (8000318 <reset_ws2812b+0x30>)
 80002f4:	f005 f8c2 	bl	800547c <HAL_TIM_PWM_Start_DMA>
    HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_2, (uint32_t *)pwm_reset, sizeof(pwm_reset));
 80002f8:	2364      	movs	r3, #100	; 0x64
 80002fa:	4a06      	ldr	r2, [pc, #24]	; (8000314 <reset_ws2812b+0x2c>)
 80002fc:	2104      	movs	r1, #4
 80002fe:	4806      	ldr	r0, [pc, #24]	; (8000318 <reset_ws2812b+0x30>)
 8000300:	f005 f8bc 	bl	800547c <HAL_TIM_PWM_Start_DMA>
    HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_3, (uint32_t *)pwm_reset, sizeof(pwm_reset));
 8000304:	2364      	movs	r3, #100	; 0x64
 8000306:	4a03      	ldr	r2, [pc, #12]	; (8000314 <reset_ws2812b+0x2c>)
 8000308:	2108      	movs	r1, #8
 800030a:	4803      	ldr	r0, [pc, #12]	; (8000318 <reset_ws2812b+0x30>)
 800030c:	f005 f8b6 	bl	800547c <HAL_TIM_PWM_Start_DMA>
}
 8000310:	bf00      	nop
 8000312:	bd80      	pop	{r7, pc}
 8000314:	200005ec 	.word	0x200005ec
 8000318:	2000210c 	.word	0x2000210c

0800031c <ws2812b_init>:


uint32_t g_size = 0;

void ws2812b_init(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b082      	sub	sp, #8
 8000320:	af00      	add	r7, sp, #0

#if defined(STRIP_1_LENGTH)
	gp_ws28128b_strip[STRIP_NUM_1] = g_strip_1;
 8000322:	4b30      	ldr	r3, [pc, #192]	; (80003e4 <ws2812b_init+0xc8>)
 8000324:	4a30      	ldr	r2, [pc, #192]	; (80003e8 <ws2812b_init+0xcc>)
 8000326:	601a      	str	r2, [r3, #0]
#endif
#if defined(STRIP_4_LENGTH)
	gp_ws28128b_strip[STRIP_NUM_4] = g_strip_4;
#endif

	uint8_t num_strips = NUM_STRIPS;
 8000328:	2301      	movs	r3, #1
 800032a:	70fb      	strb	r3, [r7, #3]
	for (int iii = 0; iii < NUM_STRIPS; iii++) g_all_strip_mask |= 1 << iii;
 800032c:	2300      	movs	r3, #0
 800032e:	607b      	str	r3, [r7, #4]
 8000330:	e00f      	b.n	8000352 <ws2812b_init+0x36>
 8000332:	2201      	movs	r2, #1
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	fa02 f303 	lsl.w	r3, r2, r3
 800033a:	b21a      	sxth	r2, r3
 800033c:	4b2b      	ldr	r3, [pc, #172]	; (80003ec <ws2812b_init+0xd0>)
 800033e:	881b      	ldrh	r3, [r3, #0]
 8000340:	b21b      	sxth	r3, r3
 8000342:	4313      	orrs	r3, r2
 8000344:	b21b      	sxth	r3, r3
 8000346:	b29a      	uxth	r2, r3
 8000348:	4b28      	ldr	r3, [pc, #160]	; (80003ec <ws2812b_init+0xd0>)
 800034a:	801a      	strh	r2, [r3, #0]
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	3301      	adds	r3, #1
 8000350:	607b      	str	r3, [r7, #4]
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	2b00      	cmp	r3, #0
 8000356:	ddec      	ble.n	8000332 <ws2812b_init+0x16>
	switch (num_strips)
 8000358:	78fb      	ldrb	r3, [r7, #3]
 800035a:	2b01      	cmp	r3, #1
 800035c:	d10d      	bne.n	800037a <ws2812b_init+0x5e>
		case 2:
			g_num_leds += STRIP_2_LENGTH;
			if (STRIP_2_LENGTH > g_max_strip_length) g_max_strip_length = STRIP_2_LENGTH;
#endif
		case 1:
			g_num_leds += STRIP_1_LENGTH;
 800035e:	4b24      	ldr	r3, [pc, #144]	; (80003f0 <ws2812b_init+0xd4>)
 8000360:	881b      	ldrh	r3, [r3, #0]
 8000362:	33f0      	adds	r3, #240	; 0xf0
 8000364:	b29a      	uxth	r2, r3
 8000366:	4b22      	ldr	r3, [pc, #136]	; (80003f0 <ws2812b_init+0xd4>)
 8000368:	801a      	strh	r2, [r3, #0]
			if (STRIP_1_LENGTH > g_max_strip_length) g_max_strip_length = STRIP_1_LENGTH;
 800036a:	4b22      	ldr	r3, [pc, #136]	; (80003f4 <ws2812b_init+0xd8>)
 800036c:	881b      	ldrh	r3, [r3, #0]
 800036e:	2bef      	cmp	r3, #239	; 0xef
 8000370:	d802      	bhi.n	8000378 <ws2812b_init+0x5c>
 8000372:	4b20      	ldr	r3, [pc, #128]	; (80003f4 <ws2812b_init+0xd8>)
 8000374:	22f0      	movs	r2, #240	; 0xf0
 8000376:	801a      	strh	r2, [r3, #0]
		break;
 8000378:	bf00      	nop
	}
    gp_pwm_data_fill = malloc((sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_num_leds) + (NUM_STRIPS * WS2812B_RESET_TIME_CYCLES));
 800037a:	4b1d      	ldr	r3, [pc, #116]	; (80003f0 <ws2812b_init+0xd4>)
 800037c:	881b      	ldrh	r3, [r3, #0]
 800037e:	461a      	mov	r2, r3
 8000380:	4613      	mov	r3, r2
 8000382:	005b      	lsls	r3, r3, #1
 8000384:	4413      	add	r3, r2
 8000386:	00db      	lsls	r3, r3, #3
 8000388:	ee07 3a90 	vmov	s15, r3
 800038c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000390:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80003f8 <ws2812b_init+0xdc>
 8000394:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000398:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800039c:	ee17 0a90 	vmov	r0, s15
 80003a0:	f007 fad8 	bl	8007954 <malloc>
 80003a4:	4603      	mov	r3, r0
 80003a6:	461a      	mov	r2, r3
 80003a8:	4b14      	ldr	r3, [pc, #80]	; (80003fc <ws2812b_init+0xe0>)
 80003aa:	601a      	str	r2, [r3, #0]
    //gp_pwm_data_ping = malloc((sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_num_leds) + (NUM_STRIPS * WS2812B_RESET_TIME_CYCLES));
    //gp_pwm_data_pong = malloc((sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_num_leds) + (NUM_STRIPS * WS2812B_RESET_TIME_CYCLES));
    g_size = (sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_num_leds) + (NUM_STRIPS * WS2812B_RESET_TIME_CYCLES);
 80003ac:	4b10      	ldr	r3, [pc, #64]	; (80003f0 <ws2812b_init+0xd4>)
 80003ae:	881b      	ldrh	r3, [r3, #0]
 80003b0:	461a      	mov	r2, r3
 80003b2:	4613      	mov	r3, r2
 80003b4:	005b      	lsls	r3, r3, #1
 80003b6:	4413      	add	r3, r2
 80003b8:	00db      	lsls	r3, r3, #3
 80003ba:	ee07 3a90 	vmov	s15, r3
 80003be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80003c2:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80003f8 <ws2812b_init+0xdc>
 80003c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80003ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80003ce:	ee17 2a90 	vmov	r2, s15
 80003d2:	4b0b      	ldr	r3, [pc, #44]	; (8000400 <ws2812b_init+0xe4>)
 80003d4:	601a      	str	r2, [r3, #0]
    //gp_pwm_data_fill = malloc((sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_max_strip_length) + WS2812B_RESET_TIME_CYCLES);
	current_monitor_init();
 80003d6:	f7ff ff4b 	bl	8000270 <current_monitor_init>
}
 80003da:	bf00      	nop
 80003dc:	3708      	adds	r7, #8
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	200005e8 	.word	0x200005e8
 80003e8:	2000030c 	.word	0x2000030c
 80003ec:	200005de 	.word	0x200005de
 80003f0:	200005dc 	.word	0x200005dc
 80003f4:	200005e0 	.word	0x200005e0
 80003f8:	453b8000 	.word	0x453b8000
 80003fc:	200005e4 	.word	0x200005e4
 8000400:	20000650 	.word	0x20000650

08000404 <task_led_ctrl_strip_one>:
    if (MASTER_COLOR_STATE_DEMO == task_led_ctrl_color_state()) task_led_ctrl_color_random();
}


void task_led_ctrl_strip_one(void *argument)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
//        animate_led_solid_custom_color((uint16_t)STRIP_BIT_1, COLOR_HEX_GREEN);
//        osDelay(5000);
//        animate_led_solid_custom_color((uint16_t)STRIP_BIT_1, COLOR_HEX_BLUE);
//        osDelay(5000);
//    }
    gpio_config_led_all_off();
 800040c:	f006 fd38 	bl	8006e80 <gpio_config_led_all_off>
    while (1)
    {
        osDelay(500);
 8000410:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000414:	f000 f92e 	bl	8000674 <osDelay>
        gpio_config_green_led_on();
 8000418:	f006 fda6 	bl	8006f68 <gpio_config_green_led_on>
        gpio_config_red_led_off();
 800041c:	f006 fdbc 	bl	8006f98 <gpio_config_red_led_off>
        osDelay(500);
 8000420:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000424:	f000 f926 	bl	8000674 <osDelay>
        gpio_config_red_led_on();
 8000428:	f006 fdae 	bl	8006f88 <gpio_config_red_led_on>
        gpio_config_green_led_off();
 800042c:	f006 fda4 	bl	8006f78 <gpio_config_green_led_off>
        osDelay(500);
 8000430:	e7ee      	b.n	8000410 <task_led_ctrl_strip_one+0xc>
	...

08000434 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000434:	b480      	push	{r7}
 8000436:	b083      	sub	sp, #12
 8000438:	af00      	add	r7, sp, #0
 800043a:	4603      	mov	r3, r0
 800043c:	6039      	str	r1, [r7, #0]
 800043e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000444:	2b00      	cmp	r3, #0
 8000446:	db0a      	blt.n	800045e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000448:	683b      	ldr	r3, [r7, #0]
 800044a:	b2da      	uxtb	r2, r3
 800044c:	490c      	ldr	r1, [pc, #48]	; (8000480 <__NVIC_SetPriority+0x4c>)
 800044e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000452:	0112      	lsls	r2, r2, #4
 8000454:	b2d2      	uxtb	r2, r2
 8000456:	440b      	add	r3, r1
 8000458:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800045c:	e00a      	b.n	8000474 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800045e:	683b      	ldr	r3, [r7, #0]
 8000460:	b2da      	uxtb	r2, r3
 8000462:	4908      	ldr	r1, [pc, #32]	; (8000484 <__NVIC_SetPriority+0x50>)
 8000464:	79fb      	ldrb	r3, [r7, #7]
 8000466:	f003 030f 	and.w	r3, r3, #15
 800046a:	3b04      	subs	r3, #4
 800046c:	0112      	lsls	r2, r2, #4
 800046e:	b2d2      	uxtb	r2, r2
 8000470:	440b      	add	r3, r1
 8000472:	761a      	strb	r2, [r3, #24]
}
 8000474:	bf00      	nop
 8000476:	370c      	adds	r7, #12
 8000478:	46bd      	mov	sp, r7
 800047a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047e:	4770      	bx	lr
 8000480:	e000e100 	.word	0xe000e100
 8000484:	e000ed00 	.word	0xe000ed00

08000488 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800048c:	4b05      	ldr	r3, [pc, #20]	; (80004a4 <SysTick_Handler+0x1c>)
 800048e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8000490:	f001 fd10 	bl	8001eb4 <xTaskGetSchedulerState>
 8000494:	4603      	mov	r3, r0
 8000496:	2b01      	cmp	r3, #1
 8000498:	d001      	beq.n	800049e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800049a:	f002 fbd5 	bl	8002c48 <xPortSysTickHandler>
  }
}
 800049e:	bf00      	nop
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	e000e010 	.word	0xe000e010

080004a8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80004ac:	2100      	movs	r1, #0
 80004ae:	f06f 0004 	mvn.w	r0, #4
 80004b2:	f7ff ffbf 	bl	8000434 <__NVIC_SetPriority>
#endif
}
 80004b6:	bf00      	nop
 80004b8:	bd80      	pop	{r7, pc}
	...

080004bc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80004bc:	b480      	push	{r7}
 80004be:	b083      	sub	sp, #12
 80004c0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80004c2:	f3ef 8305 	mrs	r3, IPSR
 80004c6:	603b      	str	r3, [r7, #0]
  return(result);
 80004c8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d003      	beq.n	80004d6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80004ce:	f06f 0305 	mvn.w	r3, #5
 80004d2:	607b      	str	r3, [r7, #4]
 80004d4:	e00c      	b.n	80004f0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80004d6:	4b0a      	ldr	r3, [pc, #40]	; (8000500 <osKernelInitialize+0x44>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d105      	bne.n	80004ea <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80004de:	4b08      	ldr	r3, [pc, #32]	; (8000500 <osKernelInitialize+0x44>)
 80004e0:	2201      	movs	r2, #1
 80004e2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80004e4:	2300      	movs	r3, #0
 80004e6:	607b      	str	r3, [r7, #4]
 80004e8:	e002      	b.n	80004f0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80004ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80004ee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80004f0:	687b      	ldr	r3, [r7, #4]
}
 80004f2:	4618      	mov	r0, r3
 80004f4:	370c      	adds	r7, #12
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	20000674 	.word	0x20000674

08000504 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800050a:	f3ef 8305 	mrs	r3, IPSR
 800050e:	603b      	str	r3, [r7, #0]
  return(result);
 8000510:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8000512:	2b00      	cmp	r3, #0
 8000514:	d003      	beq.n	800051e <osKernelStart+0x1a>
    stat = osErrorISR;
 8000516:	f06f 0305 	mvn.w	r3, #5
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	e010      	b.n	8000540 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800051e:	4b0b      	ldr	r3, [pc, #44]	; (800054c <osKernelStart+0x48>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	2b01      	cmp	r3, #1
 8000524:	d109      	bne.n	800053a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8000526:	f7ff ffbf 	bl	80004a8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800052a:	4b08      	ldr	r3, [pc, #32]	; (800054c <osKernelStart+0x48>)
 800052c:	2202      	movs	r2, #2
 800052e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8000530:	f001 f866 	bl	8001600 <vTaskStartScheduler>
      stat = osOK;
 8000534:	2300      	movs	r3, #0
 8000536:	607b      	str	r3, [r7, #4]
 8000538:	e002      	b.n	8000540 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800053a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800053e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8000540:	687b      	ldr	r3, [r7, #4]
}
 8000542:	4618      	mov	r0, r3
 8000544:	3708      	adds	r7, #8
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	20000674 	.word	0x20000674

08000550 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8000550:	b580      	push	{r7, lr}
 8000552:	b08e      	sub	sp, #56	; 0x38
 8000554:	af04      	add	r7, sp, #16
 8000556:	60f8      	str	r0, [r7, #12]
 8000558:	60b9      	str	r1, [r7, #8]
 800055a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800055c:	2300      	movs	r3, #0
 800055e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8000560:	f3ef 8305 	mrs	r3, IPSR
 8000564:	617b      	str	r3, [r7, #20]
  return(result);
 8000566:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8000568:	2b00      	cmp	r3, #0
 800056a:	d17e      	bne.n	800066a <osThreadNew+0x11a>
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d07b      	beq.n	800066a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8000572:	2380      	movs	r3, #128	; 0x80
 8000574:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8000576:	2318      	movs	r3, #24
 8000578:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800057a:	2300      	movs	r3, #0
 800057c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800057e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000582:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	2b00      	cmp	r3, #0
 8000588:	d045      	beq.n	8000616 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d002      	beq.n	8000598 <osThreadNew+0x48>
        name = attr->name;
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	699b      	ldr	r3, [r3, #24]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d002      	beq.n	80005a6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	699b      	ldr	r3, [r3, #24]
 80005a4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80005a6:	69fb      	ldr	r3, [r7, #28]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d008      	beq.n	80005be <osThreadNew+0x6e>
 80005ac:	69fb      	ldr	r3, [r7, #28]
 80005ae:	2b38      	cmp	r3, #56	; 0x38
 80005b0:	d805      	bhi.n	80005be <osThreadNew+0x6e>
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	685b      	ldr	r3, [r3, #4]
 80005b6:	f003 0301 	and.w	r3, r3, #1
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <osThreadNew+0x72>
        return (NULL);
 80005be:	2300      	movs	r3, #0
 80005c0:	e054      	b.n	800066c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	695b      	ldr	r3, [r3, #20]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d003      	beq.n	80005d2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	695b      	ldr	r3, [r3, #20]
 80005ce:	089b      	lsrs	r3, r3, #2
 80005d0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	689b      	ldr	r3, [r3, #8]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d00e      	beq.n	80005f8 <osThreadNew+0xa8>
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	68db      	ldr	r3, [r3, #12]
 80005de:	2b5b      	cmp	r3, #91	; 0x5b
 80005e0:	d90a      	bls.n	80005f8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d006      	beq.n	80005f8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	695b      	ldr	r3, [r3, #20]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d002      	beq.n	80005f8 <osThreadNew+0xa8>
        mem = 1;
 80005f2:	2301      	movs	r3, #1
 80005f4:	61bb      	str	r3, [r7, #24]
 80005f6:	e010      	b.n	800061a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	689b      	ldr	r3, [r3, #8]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d10c      	bne.n	800061a <osThreadNew+0xca>
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	68db      	ldr	r3, [r3, #12]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d108      	bne.n	800061a <osThreadNew+0xca>
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	691b      	ldr	r3, [r3, #16]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d104      	bne.n	800061a <osThreadNew+0xca>
          mem = 0;
 8000610:	2300      	movs	r3, #0
 8000612:	61bb      	str	r3, [r7, #24]
 8000614:	e001      	b.n	800061a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8000616:	2300      	movs	r3, #0
 8000618:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800061a:	69bb      	ldr	r3, [r7, #24]
 800061c:	2b01      	cmp	r3, #1
 800061e:	d110      	bne.n	8000642 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8000624:	687a      	ldr	r2, [r7, #4]
 8000626:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8000628:	9202      	str	r2, [sp, #8]
 800062a:	9301      	str	r3, [sp, #4]
 800062c:	69fb      	ldr	r3, [r7, #28]
 800062e:	9300      	str	r3, [sp, #0]
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	6a3a      	ldr	r2, [r7, #32]
 8000634:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000636:	68f8      	ldr	r0, [r7, #12]
 8000638:	f000 fe0c 	bl	8001254 <xTaskCreateStatic>
 800063c:	4603      	mov	r3, r0
 800063e:	613b      	str	r3, [r7, #16]
 8000640:	e013      	b.n	800066a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8000642:	69bb      	ldr	r3, [r7, #24]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d110      	bne.n	800066a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8000648:	6a3b      	ldr	r3, [r7, #32]
 800064a:	b29a      	uxth	r2, r3
 800064c:	f107 0310 	add.w	r3, r7, #16
 8000650:	9301      	str	r3, [sp, #4]
 8000652:	69fb      	ldr	r3, [r7, #28]
 8000654:	9300      	str	r3, [sp, #0]
 8000656:	68bb      	ldr	r3, [r7, #8]
 8000658:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800065a:	68f8      	ldr	r0, [r7, #12]
 800065c:	f000 fe57 	bl	800130e <xTaskCreate>
 8000660:	4603      	mov	r3, r0
 8000662:	2b01      	cmp	r3, #1
 8000664:	d001      	beq.n	800066a <osThreadNew+0x11a>
            hTask = NULL;
 8000666:	2300      	movs	r3, #0
 8000668:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800066a:	693b      	ldr	r3, [r7, #16]
}
 800066c:	4618      	mov	r0, r3
 800066e:	3728      	adds	r7, #40	; 0x28
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}

08000674 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800067c:	f3ef 8305 	mrs	r3, IPSR
 8000680:	60bb      	str	r3, [r7, #8]
  return(result);
 8000682:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8000684:	2b00      	cmp	r3, #0
 8000686:	d003      	beq.n	8000690 <osDelay+0x1c>
    stat = osErrorISR;
 8000688:	f06f 0305 	mvn.w	r3, #5
 800068c:	60fb      	str	r3, [r7, #12]
 800068e:	e007      	b.n	80006a0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8000690:	2300      	movs	r3, #0
 8000692:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d002      	beq.n	80006a0 <osDelay+0x2c>
      vTaskDelay(ticks);
 800069a:	6878      	ldr	r0, [r7, #4]
 800069c:	f000 ff7c 	bl	8001598 <vTaskDelay>
    }
  }

  return (stat);
 80006a0:	68fb      	ldr	r3, [r7, #12]
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	3710      	adds	r7, #16
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
	...

080006ac <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80006ac:	b480      	push	{r7}
 80006ae:	b085      	sub	sp, #20
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	60f8      	str	r0, [r7, #12]
 80006b4:	60b9      	str	r1, [r7, #8]
 80006b6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	4a07      	ldr	r2, [pc, #28]	; (80006d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80006bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80006be:	68bb      	ldr	r3, [r7, #8]
 80006c0:	4a06      	ldr	r2, [pc, #24]	; (80006dc <vApplicationGetIdleTaskMemory+0x30>)
 80006c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	2280      	movs	r2, #128	; 0x80
 80006c8:	601a      	str	r2, [r3, #0]
}
 80006ca:	bf00      	nop
 80006cc:	3714      	adds	r7, #20
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	20000678 	.word	0x20000678
 80006dc:	200006d4 	.word	0x200006d4

080006e0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80006e0:	b480      	push	{r7}
 80006e2:	b085      	sub	sp, #20
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	60f8      	str	r0, [r7, #12]
 80006e8:	60b9      	str	r1, [r7, #8]
 80006ea:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	4a07      	ldr	r2, [pc, #28]	; (800070c <vApplicationGetTimerTaskMemory+0x2c>)
 80006f0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80006f2:	68bb      	ldr	r3, [r7, #8]
 80006f4:	4a06      	ldr	r2, [pc, #24]	; (8000710 <vApplicationGetTimerTaskMemory+0x30>)
 80006f6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006fe:	601a      	str	r2, [r3, #0]
}
 8000700:	bf00      	nop
 8000702:	3714      	adds	r7, #20
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr
 800070c:	200008d4 	.word	0x200008d4
 8000710:	20000930 	.word	0x20000930

08000714 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	f103 0208 	add.w	r2, r3, #8
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800072c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	f103 0208 	add.w	r2, r3, #8
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	f103 0208 	add.w	r2, r3, #8
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000748:	bf00      	nop
 800074a:	370c      	adds	r7, #12
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr

08000754 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	2200      	movs	r2, #0
 8000760:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000762:	bf00      	nop
 8000764:	370c      	adds	r7, #12
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr

0800076e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800076e:	b480      	push	{r7}
 8000770:	b085      	sub	sp, #20
 8000772:	af00      	add	r7, sp, #0
 8000774:	6078      	str	r0, [r7, #4]
 8000776:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	685b      	ldr	r3, [r3, #4]
 800077c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	68fa      	ldr	r2, [r7, #12]
 8000782:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	689a      	ldr	r2, [r3, #8]
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	689b      	ldr	r3, [r3, #8]
 8000790:	683a      	ldr	r2, [r7, #0]
 8000792:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	683a      	ldr	r2, [r7, #0]
 8000798:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	687a      	ldr	r2, [r7, #4]
 800079e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	1c5a      	adds	r2, r3, #1
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	601a      	str	r2, [r3, #0]
}
 80007aa:	bf00      	nop
 80007ac:	3714      	adds	r7, #20
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr

080007b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80007b6:	b480      	push	{r7}
 80007b8:	b085      	sub	sp, #20
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	6078      	str	r0, [r7, #4]
 80007be:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80007c6:	68bb      	ldr	r3, [r7, #8]
 80007c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80007cc:	d103      	bne.n	80007d6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	691b      	ldr	r3, [r3, #16]
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	e00c      	b.n	80007f0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	3308      	adds	r3, #8
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	e002      	b.n	80007e4 <vListInsert+0x2e>
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	685b      	ldr	r3, [r3, #4]
 80007e2:	60fb      	str	r3, [r7, #12]
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	685b      	ldr	r3, [r3, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	68ba      	ldr	r2, [r7, #8]
 80007ec:	429a      	cmp	r2, r3
 80007ee:	d2f6      	bcs.n	80007de <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	685a      	ldr	r2, [r3, #4]
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	685b      	ldr	r3, [r3, #4]
 80007fc:	683a      	ldr	r2, [r7, #0]
 80007fe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	68fa      	ldr	r2, [r7, #12]
 8000804:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	683a      	ldr	r2, [r7, #0]
 800080a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	687a      	ldr	r2, [r7, #4]
 8000810:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	1c5a      	adds	r2, r3, #1
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	601a      	str	r2, [r3, #0]
}
 800081c:	bf00      	nop
 800081e:	3714      	adds	r7, #20
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr

08000828 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000828:	b480      	push	{r7}
 800082a:	b085      	sub	sp, #20
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	691b      	ldr	r3, [r3, #16]
 8000834:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	685b      	ldr	r3, [r3, #4]
 800083a:	687a      	ldr	r2, [r7, #4]
 800083c:	6892      	ldr	r2, [r2, #8]
 800083e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	689b      	ldr	r3, [r3, #8]
 8000844:	687a      	ldr	r2, [r7, #4]
 8000846:	6852      	ldr	r2, [r2, #4]
 8000848:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	685b      	ldr	r3, [r3, #4]
 800084e:	687a      	ldr	r2, [r7, #4]
 8000850:	429a      	cmp	r2, r3
 8000852:	d103      	bne.n	800085c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	689a      	ldr	r2, [r3, #8]
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	2200      	movs	r2, #0
 8000860:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	1e5a      	subs	r2, r3, #1
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	681b      	ldr	r3, [r3, #0]
}
 8000870:	4618      	mov	r0, r3
 8000872:	3714      	adds	r7, #20
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr

0800087c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
 8000884:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d10a      	bne.n	80008a6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000894:	f383 8811 	msr	BASEPRI, r3
 8000898:	f3bf 8f6f 	isb	sy
 800089c:	f3bf 8f4f 	dsb	sy
 80008a0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80008a2:	bf00      	nop
 80008a4:	e7fe      	b.n	80008a4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80008a6:	f002 f93d 	bl	8002b24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	681a      	ldr	r2, [r3, #0]
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008b2:	68f9      	ldr	r1, [r7, #12]
 80008b4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80008b6:	fb01 f303 	mul.w	r3, r1, r3
 80008ba:	441a      	add	r2, r3
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	2200      	movs	r2, #0
 80008c4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	681a      	ldr	r2, [r3, #0]
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	681a      	ldr	r2, [r3, #0]
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008d6:	3b01      	subs	r3, #1
 80008d8:	68f9      	ldr	r1, [r7, #12]
 80008da:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80008dc:	fb01 f303 	mul.w	r3, r1, r3
 80008e0:	441a      	add	r2, r3
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	22ff      	movs	r2, #255	; 0xff
 80008ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	22ff      	movs	r2, #255	; 0xff
 80008f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d114      	bne.n	8000926 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	691b      	ldr	r3, [r3, #16]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d01a      	beq.n	800093a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	3310      	adds	r3, #16
 8000908:	4618      	mov	r0, r3
 800090a:	f001 f915 	bl	8001b38 <xTaskRemoveFromEventList>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d012      	beq.n	800093a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8000914:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <xQueueGenericReset+0xcc>)
 8000916:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	f3bf 8f4f 	dsb	sy
 8000920:	f3bf 8f6f 	isb	sy
 8000924:	e009      	b.n	800093a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	3310      	adds	r3, #16
 800092a:	4618      	mov	r0, r3
 800092c:	f7ff fef2 	bl	8000714 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	3324      	adds	r3, #36	; 0x24
 8000934:	4618      	mov	r0, r3
 8000936:	f7ff feed 	bl	8000714 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800093a:	f002 f923 	bl	8002b84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800093e:	2301      	movs	r3, #1
}
 8000940:	4618      	mov	r0, r3
 8000942:	3710      	adds	r7, #16
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	e000ed04 	.word	0xe000ed04

0800094c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08e      	sub	sp, #56	; 0x38
 8000950:	af02      	add	r7, sp, #8
 8000952:	60f8      	str	r0, [r7, #12]
 8000954:	60b9      	str	r1, [r7, #8]
 8000956:	607a      	str	r2, [r7, #4]
 8000958:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d10a      	bne.n	8000976 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8000960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000964:	f383 8811 	msr	BASEPRI, r3
 8000968:	f3bf 8f6f 	isb	sy
 800096c:	f3bf 8f4f 	dsb	sy
 8000970:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8000972:	bf00      	nop
 8000974:	e7fe      	b.n	8000974 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d10a      	bne.n	8000992 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800097c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000980:	f383 8811 	msr	BASEPRI, r3
 8000984:	f3bf 8f6f 	isb	sy
 8000988:	f3bf 8f4f 	dsb	sy
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800098e:	bf00      	nop
 8000990:	e7fe      	b.n	8000990 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d002      	beq.n	800099e <xQueueGenericCreateStatic+0x52>
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <xQueueGenericCreateStatic+0x56>
 800099e:	2301      	movs	r3, #1
 80009a0:	e000      	b.n	80009a4 <xQueueGenericCreateStatic+0x58>
 80009a2:	2300      	movs	r3, #0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d10a      	bne.n	80009be <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80009a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009ac:	f383 8811 	msr	BASEPRI, r3
 80009b0:	f3bf 8f6f 	isb	sy
 80009b4:	f3bf 8f4f 	dsb	sy
 80009b8:	623b      	str	r3, [r7, #32]
}
 80009ba:	bf00      	nop
 80009bc:	e7fe      	b.n	80009bc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d102      	bne.n	80009ca <xQueueGenericCreateStatic+0x7e>
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d101      	bne.n	80009ce <xQueueGenericCreateStatic+0x82>
 80009ca:	2301      	movs	r3, #1
 80009cc:	e000      	b.n	80009d0 <xQueueGenericCreateStatic+0x84>
 80009ce:	2300      	movs	r3, #0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d10a      	bne.n	80009ea <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80009d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009d8:	f383 8811 	msr	BASEPRI, r3
 80009dc:	f3bf 8f6f 	isb	sy
 80009e0:	f3bf 8f4f 	dsb	sy
 80009e4:	61fb      	str	r3, [r7, #28]
}
 80009e6:	bf00      	nop
 80009e8:	e7fe      	b.n	80009e8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80009ea:	2350      	movs	r3, #80	; 0x50
 80009ec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	2b50      	cmp	r3, #80	; 0x50
 80009f2:	d00a      	beq.n	8000a0a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80009f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009f8:	f383 8811 	msr	BASEPRI, r3
 80009fc:	f3bf 8f6f 	isb	sy
 8000a00:	f3bf 8f4f 	dsb	sy
 8000a04:	61bb      	str	r3, [r7, #24]
}
 8000a06:	bf00      	nop
 8000a08:	e7fe      	b.n	8000a08 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8000a0a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8000a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d00d      	beq.n	8000a32 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8000a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a18:	2201      	movs	r2, #1
 8000a1a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000a1e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8000a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a24:	9300      	str	r3, [sp, #0]
 8000a26:	4613      	mov	r3, r2
 8000a28:	687a      	ldr	r2, [r7, #4]
 8000a2a:	68b9      	ldr	r1, [r7, #8]
 8000a2c:	68f8      	ldr	r0, [r7, #12]
 8000a2e:	f000 f805 	bl	8000a3c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8000a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8000a34:	4618      	mov	r0, r3
 8000a36:	3730      	adds	r7, #48	; 0x30
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	60b9      	str	r1, [r7, #8]
 8000a46:	607a      	str	r2, [r7, #4]
 8000a48:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8000a4a:	68bb      	ldr	r3, [r7, #8]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d103      	bne.n	8000a58 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000a50:	69bb      	ldr	r3, [r7, #24]
 8000a52:	69ba      	ldr	r2, [r7, #24]
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	e002      	b.n	8000a5e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000a58:	69bb      	ldr	r3, [r7, #24]
 8000a5a:	687a      	ldr	r2, [r7, #4]
 8000a5c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8000a5e:	69bb      	ldr	r3, [r7, #24]
 8000a60:	68fa      	ldr	r2, [r7, #12]
 8000a62:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8000a64:	69bb      	ldr	r3, [r7, #24]
 8000a66:	68ba      	ldr	r2, [r7, #8]
 8000a68:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000a6a:	2101      	movs	r1, #1
 8000a6c:	69b8      	ldr	r0, [r7, #24]
 8000a6e:	f7ff ff05 	bl	800087c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8000a72:	69bb      	ldr	r3, [r7, #24]
 8000a74:	78fa      	ldrb	r2, [r7, #3]
 8000a76:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8000a7a:	bf00      	nop
 8000a7c:	3710      	adds	r7, #16
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
	...

08000a84 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08e      	sub	sp, #56	; 0x38
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	60f8      	str	r0, [r7, #12]
 8000a8c:	60b9      	str	r1, [r7, #8]
 8000a8e:	607a      	str	r2, [r7, #4]
 8000a90:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000a92:	2300      	movs	r3, #0
 8000a94:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8000a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d10a      	bne.n	8000ab6 <xQueueGenericSend+0x32>
	__asm volatile
 8000aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000aa4:	f383 8811 	msr	BASEPRI, r3
 8000aa8:	f3bf 8f6f 	isb	sy
 8000aac:	f3bf 8f4f 	dsb	sy
 8000ab0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8000ab2:	bf00      	nop
 8000ab4:	e7fe      	b.n	8000ab4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000ab6:	68bb      	ldr	r3, [r7, #8]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d103      	bne.n	8000ac4 <xQueueGenericSend+0x40>
 8000abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d101      	bne.n	8000ac8 <xQueueGenericSend+0x44>
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	e000      	b.n	8000aca <xQueueGenericSend+0x46>
 8000ac8:	2300      	movs	r3, #0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d10a      	bne.n	8000ae4 <xQueueGenericSend+0x60>
	__asm volatile
 8000ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ad2:	f383 8811 	msr	BASEPRI, r3
 8000ad6:	f3bf 8f6f 	isb	sy
 8000ada:	f3bf 8f4f 	dsb	sy
 8000ade:	627b      	str	r3, [r7, #36]	; 0x24
}
 8000ae0:	bf00      	nop
 8000ae2:	e7fe      	b.n	8000ae2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	2b02      	cmp	r3, #2
 8000ae8:	d103      	bne.n	8000af2 <xQueueGenericSend+0x6e>
 8000aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000aee:	2b01      	cmp	r3, #1
 8000af0:	d101      	bne.n	8000af6 <xQueueGenericSend+0x72>
 8000af2:	2301      	movs	r3, #1
 8000af4:	e000      	b.n	8000af8 <xQueueGenericSend+0x74>
 8000af6:	2300      	movs	r3, #0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d10a      	bne.n	8000b12 <xQueueGenericSend+0x8e>
	__asm volatile
 8000afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b00:	f383 8811 	msr	BASEPRI, r3
 8000b04:	f3bf 8f6f 	isb	sy
 8000b08:	f3bf 8f4f 	dsb	sy
 8000b0c:	623b      	str	r3, [r7, #32]
}
 8000b0e:	bf00      	nop
 8000b10:	e7fe      	b.n	8000b10 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000b12:	f001 f9cf 	bl	8001eb4 <xTaskGetSchedulerState>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d102      	bne.n	8000b22 <xQueueGenericSend+0x9e>
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d101      	bne.n	8000b26 <xQueueGenericSend+0xa2>
 8000b22:	2301      	movs	r3, #1
 8000b24:	e000      	b.n	8000b28 <xQueueGenericSend+0xa4>
 8000b26:	2300      	movs	r3, #0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d10a      	bne.n	8000b42 <xQueueGenericSend+0xbe>
	__asm volatile
 8000b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b30:	f383 8811 	msr	BASEPRI, r3
 8000b34:	f3bf 8f6f 	isb	sy
 8000b38:	f3bf 8f4f 	dsb	sy
 8000b3c:	61fb      	str	r3, [r7, #28]
}
 8000b3e:	bf00      	nop
 8000b40:	e7fe      	b.n	8000b40 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000b42:	f001 ffef 	bl	8002b24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b4e:	429a      	cmp	r2, r3
 8000b50:	d302      	bcc.n	8000b58 <xQueueGenericSend+0xd4>
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	2b02      	cmp	r3, #2
 8000b56:	d129      	bne.n	8000bac <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000b58:	683a      	ldr	r2, [r7, #0]
 8000b5a:	68b9      	ldr	r1, [r7, #8]
 8000b5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000b5e:	f000 fa0b 	bl	8000f78 <prvCopyDataToQueue>
 8000b62:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d010      	beq.n	8000b8e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b6e:	3324      	adds	r3, #36	; 0x24
 8000b70:	4618      	mov	r0, r3
 8000b72:	f000 ffe1 	bl	8001b38 <xTaskRemoveFromEventList>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d013      	beq.n	8000ba4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8000b7c:	4b3f      	ldr	r3, [pc, #252]	; (8000c7c <xQueueGenericSend+0x1f8>)
 8000b7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	f3bf 8f4f 	dsb	sy
 8000b88:	f3bf 8f6f 	isb	sy
 8000b8c:	e00a      	b.n	8000ba4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8000b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d007      	beq.n	8000ba4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8000b94:	4b39      	ldr	r3, [pc, #228]	; (8000c7c <xQueueGenericSend+0x1f8>)
 8000b96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	f3bf 8f4f 	dsb	sy
 8000ba0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8000ba4:	f001 ffee 	bl	8002b84 <vPortExitCritical>
				return pdPASS;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	e063      	b.n	8000c74 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d103      	bne.n	8000bba <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000bb2:	f001 ffe7 	bl	8002b84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	e05c      	b.n	8000c74 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d106      	bne.n	8000bce <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8000bc0:	f107 0314 	add.w	r3, r7, #20
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f001 f81b 	bl	8001c00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000bce:	f001 ffd9 	bl	8002b84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000bd2:	f000 fd7b 	bl	80016cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000bd6:	f001 ffa5 	bl	8002b24 <vPortEnterCritical>
 8000bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bdc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000be0:	b25b      	sxtb	r3, r3
 8000be2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000be6:	d103      	bne.n	8000bf0 <xQueueGenericSend+0x16c>
 8000be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bea:	2200      	movs	r2, #0
 8000bec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bf2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000bf6:	b25b      	sxtb	r3, r3
 8000bf8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000bfc:	d103      	bne.n	8000c06 <xQueueGenericSend+0x182>
 8000bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c00:	2200      	movs	r2, #0
 8000c02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000c06:	f001 ffbd 	bl	8002b84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000c0a:	1d3a      	adds	r2, r7, #4
 8000c0c:	f107 0314 	add.w	r3, r7, #20
 8000c10:	4611      	mov	r1, r2
 8000c12:	4618      	mov	r0, r3
 8000c14:	f001 f80a 	bl	8001c2c <xTaskCheckForTimeOut>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d124      	bne.n	8000c68 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000c1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000c20:	f000 faa2 	bl	8001168 <prvIsQueueFull>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d018      	beq.n	8000c5c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c2c:	3310      	adds	r3, #16
 8000c2e:	687a      	ldr	r2, [r7, #4]
 8000c30:	4611      	mov	r1, r2
 8000c32:	4618      	mov	r0, r3
 8000c34:	f000 ff30 	bl	8001a98 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8000c38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000c3a:	f000 fa2d 	bl	8001098 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8000c3e:	f000 fd53 	bl	80016e8 <xTaskResumeAll>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	f47f af7c 	bne.w	8000b42 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8000c4a:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <xQueueGenericSend+0x1f8>)
 8000c4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	f3bf 8f4f 	dsb	sy
 8000c56:	f3bf 8f6f 	isb	sy
 8000c5a:	e772      	b.n	8000b42 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8000c5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000c5e:	f000 fa1b 	bl	8001098 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000c62:	f000 fd41 	bl	80016e8 <xTaskResumeAll>
 8000c66:	e76c      	b.n	8000b42 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8000c68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000c6a:	f000 fa15 	bl	8001098 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000c6e:	f000 fd3b 	bl	80016e8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8000c72:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3738      	adds	r7, #56	; 0x38
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	e000ed04 	.word	0xe000ed04

08000c80 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b090      	sub	sp, #64	; 0x40
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	60f8      	str	r0, [r7, #12]
 8000c88:	60b9      	str	r1, [r7, #8]
 8000c8a:	607a      	str	r2, [r7, #4]
 8000c8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8000c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d10a      	bne.n	8000cae <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8000c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c9c:	f383 8811 	msr	BASEPRI, r3
 8000ca0:	f3bf 8f6f 	isb	sy
 8000ca4:	f3bf 8f4f 	dsb	sy
 8000ca8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8000caa:	bf00      	nop
 8000cac:	e7fe      	b.n	8000cac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000cae:	68bb      	ldr	r3, [r7, #8]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d103      	bne.n	8000cbc <xQueueGenericSendFromISR+0x3c>
 8000cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d101      	bne.n	8000cc0 <xQueueGenericSendFromISR+0x40>
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	e000      	b.n	8000cc2 <xQueueGenericSendFromISR+0x42>
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d10a      	bne.n	8000cdc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8000cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cca:	f383 8811 	msr	BASEPRI, r3
 8000cce:	f3bf 8f6f 	isb	sy
 8000cd2:	f3bf 8f4f 	dsb	sy
 8000cd6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8000cd8:	bf00      	nop
 8000cda:	e7fe      	b.n	8000cda <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	2b02      	cmp	r3, #2
 8000ce0:	d103      	bne.n	8000cea <xQueueGenericSendFromISR+0x6a>
 8000ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d101      	bne.n	8000cee <xQueueGenericSendFromISR+0x6e>
 8000cea:	2301      	movs	r3, #1
 8000cec:	e000      	b.n	8000cf0 <xQueueGenericSendFromISR+0x70>
 8000cee:	2300      	movs	r3, #0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d10a      	bne.n	8000d0a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8000cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cf8:	f383 8811 	msr	BASEPRI, r3
 8000cfc:	f3bf 8f6f 	isb	sy
 8000d00:	f3bf 8f4f 	dsb	sy
 8000d04:	623b      	str	r3, [r7, #32]
}
 8000d06:	bf00      	nop
 8000d08:	e7fe      	b.n	8000d08 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000d0a:	f001 ffed 	bl	8002ce8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8000d0e:	f3ef 8211 	mrs	r2, BASEPRI
 8000d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d16:	f383 8811 	msr	BASEPRI, r3
 8000d1a:	f3bf 8f6f 	isb	sy
 8000d1e:	f3bf 8f4f 	dsb	sy
 8000d22:	61fa      	str	r2, [r7, #28]
 8000d24:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8000d26:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000d28:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d302      	bcc.n	8000d3c <xQueueGenericSendFromISR+0xbc>
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	2b02      	cmp	r3, #2
 8000d3a:	d12f      	bne.n	8000d9c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8000d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000d42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000d4c:	683a      	ldr	r2, [r7, #0]
 8000d4e:	68b9      	ldr	r1, [r7, #8]
 8000d50:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000d52:	f000 f911 	bl	8000f78 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8000d56:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8000d5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d5e:	d112      	bne.n	8000d86 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d016      	beq.n	8000d96 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d6a:	3324      	adds	r3, #36	; 0x24
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f000 fee3 	bl	8001b38 <xTaskRemoveFromEventList>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d00e      	beq.n	8000d96 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d00b      	beq.n	8000d96 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2201      	movs	r2, #1
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	e007      	b.n	8000d96 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000d86:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	b25a      	sxtb	r2, r3
 8000d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8000d96:	2301      	movs	r3, #1
 8000d98:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8000d9a:	e001      	b.n	8000da0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000da2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8000daa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8000dac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3740      	adds	r7, #64	; 0x40
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
	...

08000db8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b08c      	sub	sp, #48	; 0x30
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	60f8      	str	r0, [r7, #12]
 8000dc0:	60b9      	str	r1, [r7, #8]
 8000dc2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8000dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d10a      	bne.n	8000de8 <xQueueReceive+0x30>
	__asm volatile
 8000dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000dd6:	f383 8811 	msr	BASEPRI, r3
 8000dda:	f3bf 8f6f 	isb	sy
 8000dde:	f3bf 8f4f 	dsb	sy
 8000de2:	623b      	str	r3, [r7, #32]
}
 8000de4:	bf00      	nop
 8000de6:	e7fe      	b.n	8000de6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d103      	bne.n	8000df6 <xQueueReceive+0x3e>
 8000dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d101      	bne.n	8000dfa <xQueueReceive+0x42>
 8000df6:	2301      	movs	r3, #1
 8000df8:	e000      	b.n	8000dfc <xQueueReceive+0x44>
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d10a      	bne.n	8000e16 <xQueueReceive+0x5e>
	__asm volatile
 8000e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e04:	f383 8811 	msr	BASEPRI, r3
 8000e08:	f3bf 8f6f 	isb	sy
 8000e0c:	f3bf 8f4f 	dsb	sy
 8000e10:	61fb      	str	r3, [r7, #28]
}
 8000e12:	bf00      	nop
 8000e14:	e7fe      	b.n	8000e14 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000e16:	f001 f84d 	bl	8001eb4 <xTaskGetSchedulerState>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d102      	bne.n	8000e26 <xQueueReceive+0x6e>
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d101      	bne.n	8000e2a <xQueueReceive+0x72>
 8000e26:	2301      	movs	r3, #1
 8000e28:	e000      	b.n	8000e2c <xQueueReceive+0x74>
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d10a      	bne.n	8000e46 <xQueueReceive+0x8e>
	__asm volatile
 8000e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e34:	f383 8811 	msr	BASEPRI, r3
 8000e38:	f3bf 8f6f 	isb	sy
 8000e3c:	f3bf 8f4f 	dsb	sy
 8000e40:	61bb      	str	r3, [r7, #24]
}
 8000e42:	bf00      	nop
 8000e44:	e7fe      	b.n	8000e44 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000e46:	f001 fe6d 	bl	8002b24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e4e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d01f      	beq.n	8000e96 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000e56:	68b9      	ldr	r1, [r7, #8]
 8000e58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e5a:	f000 f8f7 	bl	800104c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e60:	1e5a      	subs	r2, r3, #1
 8000e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e64:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e68:	691b      	ldr	r3, [r3, #16]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d00f      	beq.n	8000e8e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e70:	3310      	adds	r3, #16
 8000e72:	4618      	mov	r0, r3
 8000e74:	f000 fe60 	bl	8001b38 <xTaskRemoveFromEventList>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d007      	beq.n	8000e8e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8000e7e:	4b3d      	ldr	r3, [pc, #244]	; (8000f74 <xQueueReceive+0x1bc>)
 8000e80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e84:	601a      	str	r2, [r3, #0]
 8000e86:	f3bf 8f4f 	dsb	sy
 8000e8a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8000e8e:	f001 fe79 	bl	8002b84 <vPortExitCritical>
				return pdPASS;
 8000e92:	2301      	movs	r3, #1
 8000e94:	e069      	b.n	8000f6a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d103      	bne.n	8000ea4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000e9c:	f001 fe72 	bl	8002b84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	e062      	b.n	8000f6a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d106      	bne.n	8000eb8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8000eaa:	f107 0310 	add.w	r3, r7, #16
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f000 fea6 	bl	8001c00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000eb8:	f001 fe64 	bl	8002b84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000ebc:	f000 fc06 	bl	80016cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000ec0:	f001 fe30 	bl	8002b24 <vPortEnterCritical>
 8000ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ec6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000eca:	b25b      	sxtb	r3, r3
 8000ecc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ed0:	d103      	bne.n	8000eda <xQueueReceive+0x122>
 8000ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000edc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000ee0:	b25b      	sxtb	r3, r3
 8000ee2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ee6:	d103      	bne.n	8000ef0 <xQueueReceive+0x138>
 8000ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eea:	2200      	movs	r2, #0
 8000eec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000ef0:	f001 fe48 	bl	8002b84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000ef4:	1d3a      	adds	r2, r7, #4
 8000ef6:	f107 0310 	add.w	r3, r7, #16
 8000efa:	4611      	mov	r1, r2
 8000efc:	4618      	mov	r0, r3
 8000efe:	f000 fe95 	bl	8001c2c <xTaskCheckForTimeOut>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d123      	bne.n	8000f50 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000f08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000f0a:	f000 f917 	bl	800113c <prvIsQueueEmpty>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d017      	beq.n	8000f44 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f16:	3324      	adds	r3, #36	; 0x24
 8000f18:	687a      	ldr	r2, [r7, #4]
 8000f1a:	4611      	mov	r1, r2
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f000 fdbb 	bl	8001a98 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8000f22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000f24:	f000 f8b8 	bl	8001098 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8000f28:	f000 fbde 	bl	80016e8 <xTaskResumeAll>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d189      	bne.n	8000e46 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8000f32:	4b10      	ldr	r3, [pc, #64]	; (8000f74 <xQueueReceive+0x1bc>)
 8000f34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	f3bf 8f4f 	dsb	sy
 8000f3e:	f3bf 8f6f 	isb	sy
 8000f42:	e780      	b.n	8000e46 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8000f44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000f46:	f000 f8a7 	bl	8001098 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000f4a:	f000 fbcd 	bl	80016e8 <xTaskResumeAll>
 8000f4e:	e77a      	b.n	8000e46 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8000f50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000f52:	f000 f8a1 	bl	8001098 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000f56:	f000 fbc7 	bl	80016e8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000f5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000f5c:	f000 f8ee 	bl	800113c <prvIsQueueEmpty>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	f43f af6f 	beq.w	8000e46 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8000f68:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3730      	adds	r7, #48	; 0x30
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	e000ed04 	.word	0xe000ed04

08000f78 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8000f84:	2300      	movs	r3, #0
 8000f86:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f8c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d10d      	bne.n	8000fb2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d14d      	bne.n	800103a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f000 ffa4 	bl	8001ef0 <xTaskPriorityDisinherit>
 8000fa8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	2200      	movs	r2, #0
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	e043      	b.n	800103a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d119      	bne.n	8000fec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	6858      	ldr	r0, [r3, #4]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	68b9      	ldr	r1, [r7, #8]
 8000fc4:	f006 fcce 	bl	8007964 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	685a      	ldr	r2, [r3, #4]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd0:	441a      	add	r2, r3
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	685a      	ldr	r2, [r3, #4]
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	429a      	cmp	r2, r3
 8000fe0:	d32b      	bcc.n	800103a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	e026      	b.n	800103a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	68d8      	ldr	r0, [r3, #12]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	68b9      	ldr	r1, [r7, #8]
 8000ff8:	f006 fcb4 	bl	8007964 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	68da      	ldr	r2, [r3, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001004:	425b      	negs	r3, r3
 8001006:	441a      	add	r2, r3
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	68da      	ldr	r2, [r3, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	429a      	cmp	r2, r3
 8001016:	d207      	bcs.n	8001028 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	689a      	ldr	r2, [r3, #8]
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001020:	425b      	negs	r3, r3
 8001022:	441a      	add	r2, r3
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2b02      	cmp	r3, #2
 800102c:	d105      	bne.n	800103a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d002      	beq.n	800103a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	3b01      	subs	r3, #1
 8001038:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	1c5a      	adds	r2, r3, #1
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8001042:	697b      	ldr	r3, [r7, #20]
}
 8001044:	4618      	mov	r0, r3
 8001046:	3718      	adds	r7, #24
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105a:	2b00      	cmp	r3, #0
 800105c:	d018      	beq.n	8001090 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	68da      	ldr	r2, [r3, #12]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001066:	441a      	add	r2, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	68da      	ldr	r2, [r3, #12]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	429a      	cmp	r2, r3
 8001076:	d303      	bcc.n	8001080 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	68d9      	ldr	r1, [r3, #12]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001088:	461a      	mov	r2, r3
 800108a:	6838      	ldr	r0, [r7, #0]
 800108c:	f006 fc6a 	bl	8007964 <memcpy>
	}
}
 8001090:	bf00      	nop
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}

08001098 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80010a0:	f001 fd40 	bl	8002b24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80010aa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80010ac:	e011      	b.n	80010d2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d012      	beq.n	80010dc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	3324      	adds	r3, #36	; 0x24
 80010ba:	4618      	mov	r0, r3
 80010bc:	f000 fd3c 	bl	8001b38 <xTaskRemoveFromEventList>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80010c6:	f000 fe13 	bl	8001cf0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80010ca:	7bfb      	ldrb	r3, [r7, #15]
 80010cc:	3b01      	subs	r3, #1
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80010d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	dce9      	bgt.n	80010ae <prvUnlockQueue+0x16>
 80010da:	e000      	b.n	80010de <prvUnlockQueue+0x46>
					break;
 80010dc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	22ff      	movs	r2, #255	; 0xff
 80010e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80010e6:	f001 fd4d 	bl	8002b84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80010ea:	f001 fd1b 	bl	8002b24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80010f4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80010f6:	e011      	b.n	800111c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	691b      	ldr	r3, [r3, #16]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d012      	beq.n	8001126 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	3310      	adds	r3, #16
 8001104:	4618      	mov	r0, r3
 8001106:	f000 fd17 	bl	8001b38 <xTaskRemoveFromEventList>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8001110:	f000 fdee 	bl	8001cf0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8001114:	7bbb      	ldrb	r3, [r7, #14]
 8001116:	3b01      	subs	r3, #1
 8001118:	b2db      	uxtb	r3, r3
 800111a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800111c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001120:	2b00      	cmp	r3, #0
 8001122:	dce9      	bgt.n	80010f8 <prvUnlockQueue+0x60>
 8001124:	e000      	b.n	8001128 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8001126:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	22ff      	movs	r2, #255	; 0xff
 800112c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8001130:	f001 fd28 	bl	8002b84 <vPortExitCritical>
}
 8001134:	bf00      	nop
 8001136:	3710      	adds	r7, #16
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001144:	f001 fcee 	bl	8002b24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800114c:	2b00      	cmp	r3, #0
 800114e:	d102      	bne.n	8001156 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8001150:	2301      	movs	r3, #1
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	e001      	b.n	800115a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8001156:	2300      	movs	r3, #0
 8001158:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800115a:	f001 fd13 	bl	8002b84 <vPortExitCritical>

	return xReturn;
 800115e:	68fb      	ldr	r3, [r7, #12]
}
 8001160:	4618      	mov	r0, r3
 8001162:	3710      	adds	r7, #16
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001170:	f001 fcd8 	bl	8002b24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800117c:	429a      	cmp	r2, r3
 800117e:	d102      	bne.n	8001186 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8001180:	2301      	movs	r3, #1
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	e001      	b.n	800118a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8001186:	2300      	movs	r3, #0
 8001188:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800118a:	f001 fcfb 	bl	8002b84 <vPortExitCritical>

	return xReturn;
 800118e:	68fb      	ldr	r3, [r7, #12]
}
 8001190:	4618      	mov	r0, r3
 8001192:	3710      	adds	r7, #16
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8001198:	b480      	push	{r7}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80011a2:	2300      	movs	r3, #0
 80011a4:	60fb      	str	r3, [r7, #12]
 80011a6:	e014      	b.n	80011d2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80011a8:	4a0f      	ldr	r2, [pc, #60]	; (80011e8 <vQueueAddToRegistry+0x50>)
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d10b      	bne.n	80011cc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80011b4:	490c      	ldr	r1, [pc, #48]	; (80011e8 <vQueueAddToRegistry+0x50>)
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	683a      	ldr	r2, [r7, #0]
 80011ba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80011be:	4a0a      	ldr	r2, [pc, #40]	; (80011e8 <vQueueAddToRegistry+0x50>)
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	00db      	lsls	r3, r3, #3
 80011c4:	4413      	add	r3, r2
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80011ca:	e006      	b.n	80011da <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	3301      	adds	r3, #1
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	2b07      	cmp	r3, #7
 80011d6:	d9e7      	bls.n	80011a8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80011d8:	bf00      	nop
 80011da:	bf00      	nop
 80011dc:	3714      	adds	r7, #20
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	20000d30 	.word	0x20000d30

080011ec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b086      	sub	sp, #24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80011fc:	f001 fc92 	bl	8002b24 <vPortEnterCritical>
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001206:	b25b      	sxtb	r3, r3
 8001208:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800120c:	d103      	bne.n	8001216 <vQueueWaitForMessageRestricted+0x2a>
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	2200      	movs	r2, #0
 8001212:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800121c:	b25b      	sxtb	r3, r3
 800121e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001222:	d103      	bne.n	800122c <vQueueWaitForMessageRestricted+0x40>
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	2200      	movs	r2, #0
 8001228:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800122c:	f001 fcaa 	bl	8002b84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001234:	2b00      	cmp	r3, #0
 8001236:	d106      	bne.n	8001246 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	3324      	adds	r3, #36	; 0x24
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	68b9      	ldr	r1, [r7, #8]
 8001240:	4618      	mov	r0, r3
 8001242:	f000 fc4d 	bl	8001ae0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8001246:	6978      	ldr	r0, [r7, #20]
 8001248:	f7ff ff26 	bl	8001098 <prvUnlockQueue>
	}
 800124c:	bf00      	nop
 800124e:	3718      	adds	r7, #24
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8001254:	b580      	push	{r7, lr}
 8001256:	b08e      	sub	sp, #56	; 0x38
 8001258:	af04      	add	r7, sp, #16
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	607a      	str	r2, [r7, #4]
 8001260:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8001262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001264:	2b00      	cmp	r3, #0
 8001266:	d10a      	bne.n	800127e <xTaskCreateStatic+0x2a>
	__asm volatile
 8001268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800126c:	f383 8811 	msr	BASEPRI, r3
 8001270:	f3bf 8f6f 	isb	sy
 8001274:	f3bf 8f4f 	dsb	sy
 8001278:	623b      	str	r3, [r7, #32]
}
 800127a:	bf00      	nop
 800127c:	e7fe      	b.n	800127c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800127e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001280:	2b00      	cmp	r3, #0
 8001282:	d10a      	bne.n	800129a <xTaskCreateStatic+0x46>
	__asm volatile
 8001284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001288:	f383 8811 	msr	BASEPRI, r3
 800128c:	f3bf 8f6f 	isb	sy
 8001290:	f3bf 8f4f 	dsb	sy
 8001294:	61fb      	str	r3, [r7, #28]
}
 8001296:	bf00      	nop
 8001298:	e7fe      	b.n	8001298 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800129a:	235c      	movs	r3, #92	; 0x5c
 800129c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	2b5c      	cmp	r3, #92	; 0x5c
 80012a2:	d00a      	beq.n	80012ba <xTaskCreateStatic+0x66>
	__asm volatile
 80012a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012a8:	f383 8811 	msr	BASEPRI, r3
 80012ac:	f3bf 8f6f 	isb	sy
 80012b0:	f3bf 8f4f 	dsb	sy
 80012b4:	61bb      	str	r3, [r7, #24]
}
 80012b6:	bf00      	nop
 80012b8:	e7fe      	b.n	80012b8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80012ba:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80012bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d01e      	beq.n	8001300 <xTaskCreateStatic+0xac>
 80012c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d01b      	beq.n	8001300 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80012c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012ca:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80012cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80012d0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80012d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d4:	2202      	movs	r2, #2
 80012d6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80012da:	2300      	movs	r3, #0
 80012dc:	9303      	str	r3, [sp, #12]
 80012de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e0:	9302      	str	r3, [sp, #8]
 80012e2:	f107 0314 	add.w	r3, r7, #20
 80012e6:	9301      	str	r3, [sp, #4]
 80012e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012ea:	9300      	str	r3, [sp, #0]
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	68b9      	ldr	r1, [r7, #8]
 80012f2:	68f8      	ldr	r0, [r7, #12]
 80012f4:	f000 f850 	bl	8001398 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80012f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80012fa:	f000 f8dd 	bl	80014b8 <prvAddNewTaskToReadyList>
 80012fe:	e001      	b.n	8001304 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8001300:	2300      	movs	r3, #0
 8001302:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8001304:	697b      	ldr	r3, [r7, #20]
	}
 8001306:	4618      	mov	r0, r3
 8001308:	3728      	adds	r7, #40	; 0x28
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800130e:	b580      	push	{r7, lr}
 8001310:	b08c      	sub	sp, #48	; 0x30
 8001312:	af04      	add	r7, sp, #16
 8001314:	60f8      	str	r0, [r7, #12]
 8001316:	60b9      	str	r1, [r7, #8]
 8001318:	603b      	str	r3, [r7, #0]
 800131a:	4613      	mov	r3, r2
 800131c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800131e:	88fb      	ldrh	r3, [r7, #6]
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	4618      	mov	r0, r3
 8001324:	f001 fd20 	bl	8002d68 <pvPortMalloc>
 8001328:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d00e      	beq.n	800134e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001330:	205c      	movs	r0, #92	; 0x5c
 8001332:	f001 fd19 	bl	8002d68 <pvPortMalloc>
 8001336:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d003      	beq.n	8001346 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	697a      	ldr	r2, [r7, #20]
 8001342:	631a      	str	r2, [r3, #48]	; 0x30
 8001344:	e005      	b.n	8001352 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001346:	6978      	ldr	r0, [r7, #20]
 8001348:	f001 fdda 	bl	8002f00 <vPortFree>
 800134c:	e001      	b.n	8001352 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800134e:	2300      	movs	r3, #0
 8001350:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d017      	beq.n	8001388 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	2200      	movs	r2, #0
 800135c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001360:	88fa      	ldrh	r2, [r7, #6]
 8001362:	2300      	movs	r3, #0
 8001364:	9303      	str	r3, [sp, #12]
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	9302      	str	r3, [sp, #8]
 800136a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800136c:	9301      	str	r3, [sp, #4]
 800136e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001370:	9300      	str	r3, [sp, #0]
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	68b9      	ldr	r1, [r7, #8]
 8001376:	68f8      	ldr	r0, [r7, #12]
 8001378:	f000 f80e 	bl	8001398 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800137c:	69f8      	ldr	r0, [r7, #28]
 800137e:	f000 f89b 	bl	80014b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001382:	2301      	movs	r3, #1
 8001384:	61bb      	str	r3, [r7, #24]
 8001386:	e002      	b.n	800138e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001388:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800138c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800138e:	69bb      	ldr	r3, [r7, #24]
	}
 8001390:	4618      	mov	r0, r3
 8001392:	3720      	adds	r7, #32
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b088      	sub	sp, #32
 800139c:	af00      	add	r7, sp, #0
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	60b9      	str	r1, [r7, #8]
 80013a2:	607a      	str	r2, [r7, #4]
 80013a4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80013a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013a8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	461a      	mov	r2, r3
 80013b0:	21a5      	movs	r1, #165	; 0xa5
 80013b2:	f006 fae5 	bl	8007980 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80013b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80013c0:	3b01      	subs	r3, #1
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	4413      	add	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	f023 0307 	bic.w	r3, r3, #7
 80013ce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d00a      	beq.n	80013f0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80013da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013de:	f383 8811 	msr	BASEPRI, r3
 80013e2:	f3bf 8f6f 	isb	sy
 80013e6:	f3bf 8f4f 	dsb	sy
 80013ea:	617b      	str	r3, [r7, #20]
}
 80013ec:	bf00      	nop
 80013ee:	e7fe      	b.n	80013ee <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d01f      	beq.n	8001436 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80013f6:	2300      	movs	r3, #0
 80013f8:	61fb      	str	r3, [r7, #28]
 80013fa:	e012      	b.n	8001422 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80013fc:	68ba      	ldr	r2, [r7, #8]
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	4413      	add	r3, r2
 8001402:	7819      	ldrb	r1, [r3, #0]
 8001404:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	4413      	add	r3, r2
 800140a:	3334      	adds	r3, #52	; 0x34
 800140c:	460a      	mov	r2, r1
 800140e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8001410:	68ba      	ldr	r2, [r7, #8]
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	4413      	add	r3, r2
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d006      	beq.n	800142a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	3301      	adds	r3, #1
 8001420:	61fb      	str	r3, [r7, #28]
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	2b0f      	cmp	r3, #15
 8001426:	d9e9      	bls.n	80013fc <prvInitialiseNewTask+0x64>
 8001428:	e000      	b.n	800142c <prvInitialiseNewTask+0x94>
			{
				break;
 800142a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800142c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800142e:	2200      	movs	r2, #0
 8001430:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001434:	e003      	b.n	800143e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001438:	2200      	movs	r2, #0
 800143a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800143e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001440:	2b37      	cmp	r3, #55	; 0x37
 8001442:	d901      	bls.n	8001448 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001444:	2337      	movs	r3, #55	; 0x37
 8001446:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800144a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800144c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800144e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001450:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001452:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8001454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001456:	2200      	movs	r2, #0
 8001458:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800145a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800145c:	3304      	adds	r3, #4
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff f978 	bl	8000754 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001466:	3318      	adds	r3, #24
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff f973 	bl	8000754 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800146e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001470:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001472:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001476:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800147a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800147c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800147e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001480:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001482:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001486:	2200      	movs	r2, #0
 8001488:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800148a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800148c:	2200      	movs	r2, #0
 800148e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001492:	683a      	ldr	r2, [r7, #0]
 8001494:	68f9      	ldr	r1, [r7, #12]
 8001496:	69b8      	ldr	r0, [r7, #24]
 8001498:	f001 fa16 	bl	80028c8 <pxPortInitialiseStack>
 800149c:	4602      	mov	r2, r0
 800149e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014a0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80014a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d002      	beq.n	80014ae <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80014a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80014ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80014ae:	bf00      	nop
 80014b0:	3720      	adds	r7, #32
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
	...

080014b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80014c0:	f001 fb30 	bl	8002b24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80014c4:	4b2d      	ldr	r3, [pc, #180]	; (800157c <prvAddNewTaskToReadyList+0xc4>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	3301      	adds	r3, #1
 80014ca:	4a2c      	ldr	r2, [pc, #176]	; (800157c <prvAddNewTaskToReadyList+0xc4>)
 80014cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80014ce:	4b2c      	ldr	r3, [pc, #176]	; (8001580 <prvAddNewTaskToReadyList+0xc8>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d109      	bne.n	80014ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80014d6:	4a2a      	ldr	r2, [pc, #168]	; (8001580 <prvAddNewTaskToReadyList+0xc8>)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80014dc:	4b27      	ldr	r3, [pc, #156]	; (800157c <prvAddNewTaskToReadyList+0xc4>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d110      	bne.n	8001506 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80014e4:	f000 fc28 	bl	8001d38 <prvInitialiseTaskLists>
 80014e8:	e00d      	b.n	8001506 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80014ea:	4b26      	ldr	r3, [pc, #152]	; (8001584 <prvAddNewTaskToReadyList+0xcc>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d109      	bne.n	8001506 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80014f2:	4b23      	ldr	r3, [pc, #140]	; (8001580 <prvAddNewTaskToReadyList+0xc8>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d802      	bhi.n	8001506 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001500:	4a1f      	ldr	r2, [pc, #124]	; (8001580 <prvAddNewTaskToReadyList+0xc8>)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001506:	4b20      	ldr	r3, [pc, #128]	; (8001588 <prvAddNewTaskToReadyList+0xd0>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	3301      	adds	r3, #1
 800150c:	4a1e      	ldr	r2, [pc, #120]	; (8001588 <prvAddNewTaskToReadyList+0xd0>)
 800150e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001510:	4b1d      	ldr	r3, [pc, #116]	; (8001588 <prvAddNewTaskToReadyList+0xd0>)
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800151c:	4b1b      	ldr	r3, [pc, #108]	; (800158c <prvAddNewTaskToReadyList+0xd4>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	429a      	cmp	r2, r3
 8001522:	d903      	bls.n	800152c <prvAddNewTaskToReadyList+0x74>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001528:	4a18      	ldr	r2, [pc, #96]	; (800158c <prvAddNewTaskToReadyList+0xd4>)
 800152a:	6013      	str	r3, [r2, #0]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001530:	4613      	mov	r3, r2
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	4413      	add	r3, r2
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	4a15      	ldr	r2, [pc, #84]	; (8001590 <prvAddNewTaskToReadyList+0xd8>)
 800153a:	441a      	add	r2, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	3304      	adds	r3, #4
 8001540:	4619      	mov	r1, r3
 8001542:	4610      	mov	r0, r2
 8001544:	f7ff f913 	bl	800076e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001548:	f001 fb1c 	bl	8002b84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800154c:	4b0d      	ldr	r3, [pc, #52]	; (8001584 <prvAddNewTaskToReadyList+0xcc>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d00e      	beq.n	8001572 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001554:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <prvAddNewTaskToReadyList+0xc8>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800155e:	429a      	cmp	r2, r3
 8001560:	d207      	bcs.n	8001572 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001562:	4b0c      	ldr	r3, [pc, #48]	; (8001594 <prvAddNewTaskToReadyList+0xdc>)
 8001564:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	f3bf 8f4f 	dsb	sy
 800156e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001572:	bf00      	nop
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	20001244 	.word	0x20001244
 8001580:	20000d70 	.word	0x20000d70
 8001584:	20001250 	.word	0x20001250
 8001588:	20001260 	.word	0x20001260
 800158c:	2000124c 	.word	0x2000124c
 8001590:	20000d74 	.word	0x20000d74
 8001594:	e000ed04 	.word	0xe000ed04

08001598 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80015a0:	2300      	movs	r3, #0
 80015a2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d017      	beq.n	80015da <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80015aa:	4b13      	ldr	r3, [pc, #76]	; (80015f8 <vTaskDelay+0x60>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d00a      	beq.n	80015c8 <vTaskDelay+0x30>
	__asm volatile
 80015b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015b6:	f383 8811 	msr	BASEPRI, r3
 80015ba:	f3bf 8f6f 	isb	sy
 80015be:	f3bf 8f4f 	dsb	sy
 80015c2:	60bb      	str	r3, [r7, #8]
}
 80015c4:	bf00      	nop
 80015c6:	e7fe      	b.n	80015c6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80015c8:	f000 f880 	bl	80016cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80015cc:	2100      	movs	r1, #0
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f000 fdd8 	bl	8002184 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80015d4:	f000 f888 	bl	80016e8 <xTaskResumeAll>
 80015d8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d107      	bne.n	80015f0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80015e0:	4b06      	ldr	r3, [pc, #24]	; (80015fc <vTaskDelay+0x64>)
 80015e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	f3bf 8f4f 	dsb	sy
 80015ec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80015f0:	bf00      	nop
 80015f2:	3710      	adds	r7, #16
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	2000126c 	.word	0x2000126c
 80015fc:	e000ed04 	.word	0xe000ed04

08001600 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08a      	sub	sp, #40	; 0x28
 8001604:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8001606:	2300      	movs	r3, #0
 8001608:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800160a:	2300      	movs	r3, #0
 800160c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800160e:	463a      	mov	r2, r7
 8001610:	1d39      	adds	r1, r7, #4
 8001612:	f107 0308 	add.w	r3, r7, #8
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff f848 	bl	80006ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800161c:	6839      	ldr	r1, [r7, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	68ba      	ldr	r2, [r7, #8]
 8001622:	9202      	str	r2, [sp, #8]
 8001624:	9301      	str	r3, [sp, #4]
 8001626:	2300      	movs	r3, #0
 8001628:	9300      	str	r3, [sp, #0]
 800162a:	2300      	movs	r3, #0
 800162c:	460a      	mov	r2, r1
 800162e:	4921      	ldr	r1, [pc, #132]	; (80016b4 <vTaskStartScheduler+0xb4>)
 8001630:	4821      	ldr	r0, [pc, #132]	; (80016b8 <vTaskStartScheduler+0xb8>)
 8001632:	f7ff fe0f 	bl	8001254 <xTaskCreateStatic>
 8001636:	4603      	mov	r3, r0
 8001638:	4a20      	ldr	r2, [pc, #128]	; (80016bc <vTaskStartScheduler+0xbc>)
 800163a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800163c:	4b1f      	ldr	r3, [pc, #124]	; (80016bc <vTaskStartScheduler+0xbc>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d002      	beq.n	800164a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8001644:	2301      	movs	r3, #1
 8001646:	617b      	str	r3, [r7, #20]
 8001648:	e001      	b.n	800164e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800164a:	2300      	movs	r3, #0
 800164c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	2b01      	cmp	r3, #1
 8001652:	d102      	bne.n	800165a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8001654:	f000 fdea 	bl	800222c <xTimerCreateTimerTask>
 8001658:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	2b01      	cmp	r3, #1
 800165e:	d116      	bne.n	800168e <vTaskStartScheduler+0x8e>
	__asm volatile
 8001660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001664:	f383 8811 	msr	BASEPRI, r3
 8001668:	f3bf 8f6f 	isb	sy
 800166c:	f3bf 8f4f 	dsb	sy
 8001670:	613b      	str	r3, [r7, #16]
}
 8001672:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001674:	4b12      	ldr	r3, [pc, #72]	; (80016c0 <vTaskStartScheduler+0xc0>)
 8001676:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800167a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800167c:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <vTaskStartScheduler+0xc4>)
 800167e:	2201      	movs	r2, #1
 8001680:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001682:	4b11      	ldr	r3, [pc, #68]	; (80016c8 <vTaskStartScheduler+0xc8>)
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001688:	f001 f9aa 	bl	80029e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800168c:	e00e      	b.n	80016ac <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001694:	d10a      	bne.n	80016ac <vTaskStartScheduler+0xac>
	__asm volatile
 8001696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800169a:	f383 8811 	msr	BASEPRI, r3
 800169e:	f3bf 8f6f 	isb	sy
 80016a2:	f3bf 8f4f 	dsb	sy
 80016a6:	60fb      	str	r3, [r7, #12]
}
 80016a8:	bf00      	nop
 80016aa:	e7fe      	b.n	80016aa <vTaskStartScheduler+0xaa>
}
 80016ac:	bf00      	nop
 80016ae:	3718      	adds	r7, #24
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	08008a50 	.word	0x08008a50
 80016b8:	08001d09 	.word	0x08001d09
 80016bc:	20001268 	.word	0x20001268
 80016c0:	20001264 	.word	0x20001264
 80016c4:	20001250 	.word	0x20001250
 80016c8:	20001248 	.word	0x20001248

080016cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80016d0:	4b04      	ldr	r3, [pc, #16]	; (80016e4 <vTaskSuspendAll+0x18>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	3301      	adds	r3, #1
 80016d6:	4a03      	ldr	r2, [pc, #12]	; (80016e4 <vTaskSuspendAll+0x18>)
 80016d8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80016da:	bf00      	nop
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	2000126c 	.word	0x2000126c

080016e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80016ee:	2300      	movs	r3, #0
 80016f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80016f2:	2300      	movs	r3, #0
 80016f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80016f6:	4b42      	ldr	r3, [pc, #264]	; (8001800 <xTaskResumeAll+0x118>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d10a      	bne.n	8001714 <xTaskResumeAll+0x2c>
	__asm volatile
 80016fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001702:	f383 8811 	msr	BASEPRI, r3
 8001706:	f3bf 8f6f 	isb	sy
 800170a:	f3bf 8f4f 	dsb	sy
 800170e:	603b      	str	r3, [r7, #0]
}
 8001710:	bf00      	nop
 8001712:	e7fe      	b.n	8001712 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001714:	f001 fa06 	bl	8002b24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001718:	4b39      	ldr	r3, [pc, #228]	; (8001800 <xTaskResumeAll+0x118>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	3b01      	subs	r3, #1
 800171e:	4a38      	ldr	r2, [pc, #224]	; (8001800 <xTaskResumeAll+0x118>)
 8001720:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001722:	4b37      	ldr	r3, [pc, #220]	; (8001800 <xTaskResumeAll+0x118>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d162      	bne.n	80017f0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800172a:	4b36      	ldr	r3, [pc, #216]	; (8001804 <xTaskResumeAll+0x11c>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d05e      	beq.n	80017f0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001732:	e02f      	b.n	8001794 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001734:	4b34      	ldr	r3, [pc, #208]	; (8001808 <xTaskResumeAll+0x120>)
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	3318      	adds	r3, #24
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff f871 	bl	8000828 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	3304      	adds	r3, #4
 800174a:	4618      	mov	r0, r3
 800174c:	f7ff f86c 	bl	8000828 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001754:	4b2d      	ldr	r3, [pc, #180]	; (800180c <xTaskResumeAll+0x124>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	429a      	cmp	r2, r3
 800175a:	d903      	bls.n	8001764 <xTaskResumeAll+0x7c>
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001760:	4a2a      	ldr	r2, [pc, #168]	; (800180c <xTaskResumeAll+0x124>)
 8001762:	6013      	str	r3, [r2, #0]
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001768:	4613      	mov	r3, r2
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	4413      	add	r3, r2
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	4a27      	ldr	r2, [pc, #156]	; (8001810 <xTaskResumeAll+0x128>)
 8001772:	441a      	add	r2, r3
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	3304      	adds	r3, #4
 8001778:	4619      	mov	r1, r3
 800177a:	4610      	mov	r0, r2
 800177c:	f7fe fff7 	bl	800076e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001784:	4b23      	ldr	r3, [pc, #140]	; (8001814 <xTaskResumeAll+0x12c>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800178a:	429a      	cmp	r2, r3
 800178c:	d302      	bcc.n	8001794 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800178e:	4b22      	ldr	r3, [pc, #136]	; (8001818 <xTaskResumeAll+0x130>)
 8001790:	2201      	movs	r2, #1
 8001792:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001794:	4b1c      	ldr	r3, [pc, #112]	; (8001808 <xTaskResumeAll+0x120>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d1cb      	bne.n	8001734 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80017a2:	f000 fb67 	bl	8001e74 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80017a6:	4b1d      	ldr	r3, [pc, #116]	; (800181c <xTaskResumeAll+0x134>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d010      	beq.n	80017d4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80017b2:	f000 f859 	bl	8001868 <xTaskIncrementTick>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d002      	beq.n	80017c2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80017bc:	4b16      	ldr	r3, [pc, #88]	; (8001818 <xTaskResumeAll+0x130>)
 80017be:	2201      	movs	r2, #1
 80017c0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	3b01      	subs	r3, #1
 80017c6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d1f1      	bne.n	80017b2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80017ce:	4b13      	ldr	r3, [pc, #76]	; (800181c <xTaskResumeAll+0x134>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80017d4:	4b10      	ldr	r3, [pc, #64]	; (8001818 <xTaskResumeAll+0x130>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d009      	beq.n	80017f0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80017dc:	2301      	movs	r3, #1
 80017de:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80017e0:	4b0f      	ldr	r3, [pc, #60]	; (8001820 <xTaskResumeAll+0x138>)
 80017e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	f3bf 8f4f 	dsb	sy
 80017ec:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80017f0:	f001 f9c8 	bl	8002b84 <vPortExitCritical>

	return xAlreadyYielded;
 80017f4:	68bb      	ldr	r3, [r7, #8]
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3710      	adds	r7, #16
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	2000126c 	.word	0x2000126c
 8001804:	20001244 	.word	0x20001244
 8001808:	20001204 	.word	0x20001204
 800180c:	2000124c 	.word	0x2000124c
 8001810:	20000d74 	.word	0x20000d74
 8001814:	20000d70 	.word	0x20000d70
 8001818:	20001258 	.word	0x20001258
 800181c:	20001254 	.word	0x20001254
 8001820:	e000ed04 	.word	0xe000ed04

08001824 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800182a:	4b05      	ldr	r3, [pc, #20]	; (8001840 <xTaskGetTickCount+0x1c>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8001830:	687b      	ldr	r3, [r7, #4]
}
 8001832:	4618      	mov	r0, r3
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	20001248 	.word	0x20001248

08001844 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800184a:	f001 fa4d 	bl	8002ce8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800184e:	2300      	movs	r3, #0
 8001850:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8001852:	4b04      	ldr	r3, [pc, #16]	; (8001864 <xTaskGetTickCountFromISR+0x20>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001858:	683b      	ldr	r3, [r7, #0]
}
 800185a:	4618      	mov	r0, r3
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	20001248 	.word	0x20001248

08001868 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800186e:	2300      	movs	r3, #0
 8001870:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001872:	4b4f      	ldr	r3, [pc, #316]	; (80019b0 <xTaskIncrementTick+0x148>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2b00      	cmp	r3, #0
 8001878:	f040 808f 	bne.w	800199a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800187c:	4b4d      	ldr	r3, [pc, #308]	; (80019b4 <xTaskIncrementTick+0x14c>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	3301      	adds	r3, #1
 8001882:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001884:	4a4b      	ldr	r2, [pc, #300]	; (80019b4 <xTaskIncrementTick+0x14c>)
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d120      	bne.n	80018d2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8001890:	4b49      	ldr	r3, [pc, #292]	; (80019b8 <xTaskIncrementTick+0x150>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d00a      	beq.n	80018b0 <xTaskIncrementTick+0x48>
	__asm volatile
 800189a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800189e:	f383 8811 	msr	BASEPRI, r3
 80018a2:	f3bf 8f6f 	isb	sy
 80018a6:	f3bf 8f4f 	dsb	sy
 80018aa:	603b      	str	r3, [r7, #0]
}
 80018ac:	bf00      	nop
 80018ae:	e7fe      	b.n	80018ae <xTaskIncrementTick+0x46>
 80018b0:	4b41      	ldr	r3, [pc, #260]	; (80019b8 <xTaskIncrementTick+0x150>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	60fb      	str	r3, [r7, #12]
 80018b6:	4b41      	ldr	r3, [pc, #260]	; (80019bc <xTaskIncrementTick+0x154>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a3f      	ldr	r2, [pc, #252]	; (80019b8 <xTaskIncrementTick+0x150>)
 80018bc:	6013      	str	r3, [r2, #0]
 80018be:	4a3f      	ldr	r2, [pc, #252]	; (80019bc <xTaskIncrementTick+0x154>)
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	6013      	str	r3, [r2, #0]
 80018c4:	4b3e      	ldr	r3, [pc, #248]	; (80019c0 <xTaskIncrementTick+0x158>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	3301      	adds	r3, #1
 80018ca:	4a3d      	ldr	r2, [pc, #244]	; (80019c0 <xTaskIncrementTick+0x158>)
 80018cc:	6013      	str	r3, [r2, #0]
 80018ce:	f000 fad1 	bl	8001e74 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80018d2:	4b3c      	ldr	r3, [pc, #240]	; (80019c4 <xTaskIncrementTick+0x15c>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d349      	bcc.n	8001970 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80018dc:	4b36      	ldr	r3, [pc, #216]	; (80019b8 <xTaskIncrementTick+0x150>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d104      	bne.n	80018f0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80018e6:	4b37      	ldr	r3, [pc, #220]	; (80019c4 <xTaskIncrementTick+0x15c>)
 80018e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018ec:	601a      	str	r2, [r3, #0]
					break;
 80018ee:	e03f      	b.n	8001970 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80018f0:	4b31      	ldr	r3, [pc, #196]	; (80019b8 <xTaskIncrementTick+0x150>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	429a      	cmp	r2, r3
 8001906:	d203      	bcs.n	8001910 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001908:	4a2e      	ldr	r2, [pc, #184]	; (80019c4 <xTaskIncrementTick+0x15c>)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800190e:	e02f      	b.n	8001970 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	3304      	adds	r3, #4
 8001914:	4618      	mov	r0, r3
 8001916:	f7fe ff87 	bl	8000828 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800191e:	2b00      	cmp	r3, #0
 8001920:	d004      	beq.n	800192c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	3318      	adds	r3, #24
 8001926:	4618      	mov	r0, r3
 8001928:	f7fe ff7e 	bl	8000828 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001930:	4b25      	ldr	r3, [pc, #148]	; (80019c8 <xTaskIncrementTick+0x160>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	429a      	cmp	r2, r3
 8001936:	d903      	bls.n	8001940 <xTaskIncrementTick+0xd8>
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800193c:	4a22      	ldr	r2, [pc, #136]	; (80019c8 <xTaskIncrementTick+0x160>)
 800193e:	6013      	str	r3, [r2, #0]
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001944:	4613      	mov	r3, r2
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	4413      	add	r3, r2
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	4a1f      	ldr	r2, [pc, #124]	; (80019cc <xTaskIncrementTick+0x164>)
 800194e:	441a      	add	r2, r3
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	3304      	adds	r3, #4
 8001954:	4619      	mov	r1, r3
 8001956:	4610      	mov	r0, r2
 8001958:	f7fe ff09 	bl	800076e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001960:	4b1b      	ldr	r3, [pc, #108]	; (80019d0 <xTaskIncrementTick+0x168>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001966:	429a      	cmp	r2, r3
 8001968:	d3b8      	bcc.n	80018dc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800196a:	2301      	movs	r3, #1
 800196c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800196e:	e7b5      	b.n	80018dc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001970:	4b17      	ldr	r3, [pc, #92]	; (80019d0 <xTaskIncrementTick+0x168>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001976:	4915      	ldr	r1, [pc, #84]	; (80019cc <xTaskIncrementTick+0x164>)
 8001978:	4613      	mov	r3, r2
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	4413      	add	r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	440b      	add	r3, r1
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d901      	bls.n	800198c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8001988:	2301      	movs	r3, #1
 800198a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800198c:	4b11      	ldr	r3, [pc, #68]	; (80019d4 <xTaskIncrementTick+0x16c>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d007      	beq.n	80019a4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8001994:	2301      	movs	r3, #1
 8001996:	617b      	str	r3, [r7, #20]
 8001998:	e004      	b.n	80019a4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800199a:	4b0f      	ldr	r3, [pc, #60]	; (80019d8 <xTaskIncrementTick+0x170>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	3301      	adds	r3, #1
 80019a0:	4a0d      	ldr	r2, [pc, #52]	; (80019d8 <xTaskIncrementTick+0x170>)
 80019a2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80019a4:	697b      	ldr	r3, [r7, #20]
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3718      	adds	r7, #24
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	2000126c 	.word	0x2000126c
 80019b4:	20001248 	.word	0x20001248
 80019b8:	200011fc 	.word	0x200011fc
 80019bc:	20001200 	.word	0x20001200
 80019c0:	2000125c 	.word	0x2000125c
 80019c4:	20001264 	.word	0x20001264
 80019c8:	2000124c 	.word	0x2000124c
 80019cc:	20000d74 	.word	0x20000d74
 80019d0:	20000d70 	.word	0x20000d70
 80019d4:	20001258 	.word	0x20001258
 80019d8:	20001254 	.word	0x20001254

080019dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80019dc:	b480      	push	{r7}
 80019de:	b085      	sub	sp, #20
 80019e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80019e2:	4b28      	ldr	r3, [pc, #160]	; (8001a84 <vTaskSwitchContext+0xa8>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d003      	beq.n	80019f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80019ea:	4b27      	ldr	r3, [pc, #156]	; (8001a88 <vTaskSwitchContext+0xac>)
 80019ec:	2201      	movs	r2, #1
 80019ee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80019f0:	e041      	b.n	8001a76 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80019f2:	4b25      	ldr	r3, [pc, #148]	; (8001a88 <vTaskSwitchContext+0xac>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80019f8:	4b24      	ldr	r3, [pc, #144]	; (8001a8c <vTaskSwitchContext+0xb0>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	60fb      	str	r3, [r7, #12]
 80019fe:	e010      	b.n	8001a22 <vTaskSwitchContext+0x46>
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d10a      	bne.n	8001a1c <vTaskSwitchContext+0x40>
	__asm volatile
 8001a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a0a:	f383 8811 	msr	BASEPRI, r3
 8001a0e:	f3bf 8f6f 	isb	sy
 8001a12:	f3bf 8f4f 	dsb	sy
 8001a16:	607b      	str	r3, [r7, #4]
}
 8001a18:	bf00      	nop
 8001a1a:	e7fe      	b.n	8001a1a <vTaskSwitchContext+0x3e>
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	60fb      	str	r3, [r7, #12]
 8001a22:	491b      	ldr	r1, [pc, #108]	; (8001a90 <vTaskSwitchContext+0xb4>)
 8001a24:	68fa      	ldr	r2, [r7, #12]
 8001a26:	4613      	mov	r3, r2
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	4413      	add	r3, r2
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	440b      	add	r3, r1
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d0e4      	beq.n	8001a00 <vTaskSwitchContext+0x24>
 8001a36:	68fa      	ldr	r2, [r7, #12]
 8001a38:	4613      	mov	r3, r2
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	4413      	add	r3, r2
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	4a13      	ldr	r2, [pc, #76]	; (8001a90 <vTaskSwitchContext+0xb4>)
 8001a42:	4413      	add	r3, r2
 8001a44:	60bb      	str	r3, [r7, #8]
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	685a      	ldr	r2, [r3, #4]
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	605a      	str	r2, [r3, #4]
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	685a      	ldr	r2, [r3, #4]
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	3308      	adds	r3, #8
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d104      	bne.n	8001a66 <vTaskSwitchContext+0x8a>
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	685a      	ldr	r2, [r3, #4]
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	605a      	str	r2, [r3, #4]
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	4a09      	ldr	r2, [pc, #36]	; (8001a94 <vTaskSwitchContext+0xb8>)
 8001a6e:	6013      	str	r3, [r2, #0]
 8001a70:	4a06      	ldr	r2, [pc, #24]	; (8001a8c <vTaskSwitchContext+0xb0>)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	6013      	str	r3, [r2, #0]
}
 8001a76:	bf00      	nop
 8001a78:	3714      	adds	r7, #20
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	2000126c 	.word	0x2000126c
 8001a88:	20001258 	.word	0x20001258
 8001a8c:	2000124c 	.word	0x2000124c
 8001a90:	20000d74 	.word	0x20000d74
 8001a94:	20000d70 	.word	0x20000d70

08001a98 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d10a      	bne.n	8001abe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8001aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001aac:	f383 8811 	msr	BASEPRI, r3
 8001ab0:	f3bf 8f6f 	isb	sy
 8001ab4:	f3bf 8f4f 	dsb	sy
 8001ab8:	60fb      	str	r3, [r7, #12]
}
 8001aba:	bf00      	nop
 8001abc:	e7fe      	b.n	8001abc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001abe:	4b07      	ldr	r3, [pc, #28]	; (8001adc <vTaskPlaceOnEventList+0x44>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	3318      	adds	r3, #24
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f7fe fe75 	bl	80007b6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001acc:	2101      	movs	r1, #1
 8001ace:	6838      	ldr	r0, [r7, #0]
 8001ad0:	f000 fb58 	bl	8002184 <prvAddCurrentTaskToDelayedList>
}
 8001ad4:	bf00      	nop
 8001ad6:	3710      	adds	r7, #16
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	20000d70 	.word	0x20000d70

08001ae0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d10a      	bne.n	8001b08 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8001af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001af6:	f383 8811 	msr	BASEPRI, r3
 8001afa:	f3bf 8f6f 	isb	sy
 8001afe:	f3bf 8f4f 	dsb	sy
 8001b02:	617b      	str	r3, [r7, #20]
}
 8001b04:	bf00      	nop
 8001b06:	e7fe      	b.n	8001b06 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001b08:	4b0a      	ldr	r3, [pc, #40]	; (8001b34 <vTaskPlaceOnEventListRestricted+0x54>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	3318      	adds	r3, #24
 8001b0e:	4619      	mov	r1, r3
 8001b10:	68f8      	ldr	r0, [r7, #12]
 8001b12:	f7fe fe2c 	bl	800076e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d002      	beq.n	8001b22 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8001b1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b20:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001b22:	6879      	ldr	r1, [r7, #4]
 8001b24:	68b8      	ldr	r0, [r7, #8]
 8001b26:	f000 fb2d 	bl	8002184 <prvAddCurrentTaskToDelayedList>
	}
 8001b2a:	bf00      	nop
 8001b2c:	3718      	adds	r7, #24
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	20000d70 	.word	0x20000d70

08001b38 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b086      	sub	sp, #24
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d10a      	bne.n	8001b64 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8001b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b52:	f383 8811 	msr	BASEPRI, r3
 8001b56:	f3bf 8f6f 	isb	sy
 8001b5a:	f3bf 8f4f 	dsb	sy
 8001b5e:	60fb      	str	r3, [r7, #12]
}
 8001b60:	bf00      	nop
 8001b62:	e7fe      	b.n	8001b62 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	3318      	adds	r3, #24
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7fe fe5d 	bl	8000828 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001b6e:	4b1e      	ldr	r3, [pc, #120]	; (8001be8 <xTaskRemoveFromEventList+0xb0>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d11d      	bne.n	8001bb2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	3304      	adds	r3, #4
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7fe fe54 	bl	8000828 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b84:	4b19      	ldr	r3, [pc, #100]	; (8001bec <xTaskRemoveFromEventList+0xb4>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d903      	bls.n	8001b94 <xTaskRemoveFromEventList+0x5c>
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b90:	4a16      	ldr	r2, [pc, #88]	; (8001bec <xTaskRemoveFromEventList+0xb4>)
 8001b92:	6013      	str	r3, [r2, #0]
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b98:	4613      	mov	r3, r2
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	4413      	add	r3, r2
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	4a13      	ldr	r2, [pc, #76]	; (8001bf0 <xTaskRemoveFromEventList+0xb8>)
 8001ba2:	441a      	add	r2, r3
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	3304      	adds	r3, #4
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4610      	mov	r0, r2
 8001bac:	f7fe fddf 	bl	800076e <vListInsertEnd>
 8001bb0:	e005      	b.n	8001bbe <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	3318      	adds	r3, #24
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	480e      	ldr	r0, [pc, #56]	; (8001bf4 <xTaskRemoveFromEventList+0xbc>)
 8001bba:	f7fe fdd8 	bl	800076e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bc2:	4b0d      	ldr	r3, [pc, #52]	; (8001bf8 <xTaskRemoveFromEventList+0xc0>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d905      	bls.n	8001bd8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8001bd0:	4b0a      	ldr	r3, [pc, #40]	; (8001bfc <xTaskRemoveFromEventList+0xc4>)
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	e001      	b.n	8001bdc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8001bdc:	697b      	ldr	r3, [r7, #20]
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3718      	adds	r7, #24
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	2000126c 	.word	0x2000126c
 8001bec:	2000124c 	.word	0x2000124c
 8001bf0:	20000d74 	.word	0x20000d74
 8001bf4:	20001204 	.word	0x20001204
 8001bf8:	20000d70 	.word	0x20000d70
 8001bfc:	20001258 	.word	0x20001258

08001c00 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001c08:	4b06      	ldr	r3, [pc, #24]	; (8001c24 <vTaskInternalSetTimeOutState+0x24>)
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8001c10:	4b05      	ldr	r3, [pc, #20]	; (8001c28 <vTaskInternalSetTimeOutState+0x28>)
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	605a      	str	r2, [r3, #4]
}
 8001c18:	bf00      	nop
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	2000125c 	.word	0x2000125c
 8001c28:	20001248 	.word	0x20001248

08001c2c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b088      	sub	sp, #32
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d10a      	bne.n	8001c52 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8001c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c40:	f383 8811 	msr	BASEPRI, r3
 8001c44:	f3bf 8f6f 	isb	sy
 8001c48:	f3bf 8f4f 	dsb	sy
 8001c4c:	613b      	str	r3, [r7, #16]
}
 8001c4e:	bf00      	nop
 8001c50:	e7fe      	b.n	8001c50 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d10a      	bne.n	8001c6e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8001c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c5c:	f383 8811 	msr	BASEPRI, r3
 8001c60:	f3bf 8f6f 	isb	sy
 8001c64:	f3bf 8f4f 	dsb	sy
 8001c68:	60fb      	str	r3, [r7, #12]
}
 8001c6a:	bf00      	nop
 8001c6c:	e7fe      	b.n	8001c6c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8001c6e:	f000 ff59 	bl	8002b24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8001c72:	4b1d      	ldr	r3, [pc, #116]	; (8001ce8 <xTaskCheckForTimeOut+0xbc>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c8a:	d102      	bne.n	8001c92 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	61fb      	str	r3, [r7, #28]
 8001c90:	e023      	b.n	8001cda <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	4b15      	ldr	r3, [pc, #84]	; (8001cec <xTaskCheckForTimeOut+0xc0>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d007      	beq.n	8001cae <xTaskCheckForTimeOut+0x82>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d302      	bcc.n	8001cae <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	61fb      	str	r3, [r7, #28]
 8001cac:	e015      	b.n	8001cda <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	697a      	ldr	r2, [r7, #20]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d20b      	bcs.n	8001cd0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	1ad2      	subs	r2, r2, r3
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f7ff ff9b 	bl	8001c00 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	61fb      	str	r3, [r7, #28]
 8001cce:	e004      	b.n	8001cda <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8001cda:	f000 ff53 	bl	8002b84 <vPortExitCritical>

	return xReturn;
 8001cde:	69fb      	ldr	r3, [r7, #28]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3720      	adds	r7, #32
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	20001248 	.word	0x20001248
 8001cec:	2000125c 	.word	0x2000125c

08001cf0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8001cf4:	4b03      	ldr	r3, [pc, #12]	; (8001d04 <vTaskMissedYield+0x14>)
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	601a      	str	r2, [r3, #0]
}
 8001cfa:	bf00      	nop
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	20001258 	.word	0x20001258

08001d08 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8001d10:	f000 f852 	bl	8001db8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001d14:	4b06      	ldr	r3, [pc, #24]	; (8001d30 <prvIdleTask+0x28>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d9f9      	bls.n	8001d10 <prvIdleTask+0x8>
			{
				taskYIELD();
 8001d1c:	4b05      	ldr	r3, [pc, #20]	; (8001d34 <prvIdleTask+0x2c>)
 8001d1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	f3bf 8f4f 	dsb	sy
 8001d28:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8001d2c:	e7f0      	b.n	8001d10 <prvIdleTask+0x8>
 8001d2e:	bf00      	nop
 8001d30:	20000d74 	.word	0x20000d74
 8001d34:	e000ed04 	.word	0xe000ed04

08001d38 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001d3e:	2300      	movs	r3, #0
 8001d40:	607b      	str	r3, [r7, #4]
 8001d42:	e00c      	b.n	8001d5e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	4613      	mov	r3, r2
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	4413      	add	r3, r2
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	4a12      	ldr	r2, [pc, #72]	; (8001d98 <prvInitialiseTaskLists+0x60>)
 8001d50:	4413      	add	r3, r2
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7fe fcde 	bl	8000714 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	607b      	str	r3, [r7, #4]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2b37      	cmp	r3, #55	; 0x37
 8001d62:	d9ef      	bls.n	8001d44 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8001d64:	480d      	ldr	r0, [pc, #52]	; (8001d9c <prvInitialiseTaskLists+0x64>)
 8001d66:	f7fe fcd5 	bl	8000714 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001d6a:	480d      	ldr	r0, [pc, #52]	; (8001da0 <prvInitialiseTaskLists+0x68>)
 8001d6c:	f7fe fcd2 	bl	8000714 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001d70:	480c      	ldr	r0, [pc, #48]	; (8001da4 <prvInitialiseTaskLists+0x6c>)
 8001d72:	f7fe fccf 	bl	8000714 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8001d76:	480c      	ldr	r0, [pc, #48]	; (8001da8 <prvInitialiseTaskLists+0x70>)
 8001d78:	f7fe fccc 	bl	8000714 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001d7c:	480b      	ldr	r0, [pc, #44]	; (8001dac <prvInitialiseTaskLists+0x74>)
 8001d7e:	f7fe fcc9 	bl	8000714 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001d82:	4b0b      	ldr	r3, [pc, #44]	; (8001db0 <prvInitialiseTaskLists+0x78>)
 8001d84:	4a05      	ldr	r2, [pc, #20]	; (8001d9c <prvInitialiseTaskLists+0x64>)
 8001d86:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001d88:	4b0a      	ldr	r3, [pc, #40]	; (8001db4 <prvInitialiseTaskLists+0x7c>)
 8001d8a:	4a05      	ldr	r2, [pc, #20]	; (8001da0 <prvInitialiseTaskLists+0x68>)
 8001d8c:	601a      	str	r2, [r3, #0]
}
 8001d8e:	bf00      	nop
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	20000d74 	.word	0x20000d74
 8001d9c:	200011d4 	.word	0x200011d4
 8001da0:	200011e8 	.word	0x200011e8
 8001da4:	20001204 	.word	0x20001204
 8001da8:	20001218 	.word	0x20001218
 8001dac:	20001230 	.word	0x20001230
 8001db0:	200011fc 	.word	0x200011fc
 8001db4:	20001200 	.word	0x20001200

08001db8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001dbe:	e019      	b.n	8001df4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8001dc0:	f000 feb0 	bl	8002b24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001dc4:	4b10      	ldr	r3, [pc, #64]	; (8001e08 <prvCheckTasksWaitingTermination+0x50>)
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3304      	adds	r3, #4
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7fe fd29 	bl	8000828 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8001dd6:	4b0d      	ldr	r3, [pc, #52]	; (8001e0c <prvCheckTasksWaitingTermination+0x54>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	4a0b      	ldr	r2, [pc, #44]	; (8001e0c <prvCheckTasksWaitingTermination+0x54>)
 8001dde:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8001de0:	4b0b      	ldr	r3, [pc, #44]	; (8001e10 <prvCheckTasksWaitingTermination+0x58>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	3b01      	subs	r3, #1
 8001de6:	4a0a      	ldr	r2, [pc, #40]	; (8001e10 <prvCheckTasksWaitingTermination+0x58>)
 8001de8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8001dea:	f000 fecb 	bl	8002b84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f000 f810 	bl	8001e14 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001df4:	4b06      	ldr	r3, [pc, #24]	; (8001e10 <prvCheckTasksWaitingTermination+0x58>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d1e1      	bne.n	8001dc0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8001dfc:	bf00      	nop
 8001dfe:	bf00      	nop
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	20001218 	.word	0x20001218
 8001e0c:	20001244 	.word	0x20001244
 8001e10:	2000122c 	.word	0x2000122c

08001e14 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d108      	bne.n	8001e38 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f001 f868 	bl	8002f00 <vPortFree>
				vPortFree( pxTCB );
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f001 f865 	bl	8002f00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8001e36:	e018      	b.n	8001e6a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d103      	bne.n	8001e4a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f001 f85c 	bl	8002f00 <vPortFree>
	}
 8001e48:	e00f      	b.n	8001e6a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d00a      	beq.n	8001e6a <prvDeleteTCB+0x56>
	__asm volatile
 8001e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e58:	f383 8811 	msr	BASEPRI, r3
 8001e5c:	f3bf 8f6f 	isb	sy
 8001e60:	f3bf 8f4f 	dsb	sy
 8001e64:	60fb      	str	r3, [r7, #12]
}
 8001e66:	bf00      	nop
 8001e68:	e7fe      	b.n	8001e68 <prvDeleteTCB+0x54>
	}
 8001e6a:	bf00      	nop
 8001e6c:	3710      	adds	r7, #16
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
	...

08001e74 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001e7a:	4b0c      	ldr	r3, [pc, #48]	; (8001eac <prvResetNextTaskUnblockTime+0x38>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d104      	bne.n	8001e8e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001e84:	4b0a      	ldr	r3, [pc, #40]	; (8001eb0 <prvResetNextTaskUnblockTime+0x3c>)
 8001e86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e8a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8001e8c:	e008      	b.n	8001ea0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001e8e:	4b07      	ldr	r3, [pc, #28]	; (8001eac <prvResetNextTaskUnblockTime+0x38>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	4a04      	ldr	r2, [pc, #16]	; (8001eb0 <prvResetNextTaskUnblockTime+0x3c>)
 8001e9e:	6013      	str	r3, [r2, #0]
}
 8001ea0:	bf00      	nop
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr
 8001eac:	200011fc 	.word	0x200011fc
 8001eb0:	20001264 	.word	0x20001264

08001eb4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8001eba:	4b0b      	ldr	r3, [pc, #44]	; (8001ee8 <xTaskGetSchedulerState+0x34>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d102      	bne.n	8001ec8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	607b      	str	r3, [r7, #4]
 8001ec6:	e008      	b.n	8001eda <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001ec8:	4b08      	ldr	r3, [pc, #32]	; (8001eec <xTaskGetSchedulerState+0x38>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d102      	bne.n	8001ed6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	607b      	str	r3, [r7, #4]
 8001ed4:	e001      	b.n	8001eda <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8001eda:	687b      	ldr	r3, [r7, #4]
	}
 8001edc:	4618      	mov	r0, r3
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr
 8001ee8:	20001250 	.word	0x20001250
 8001eec:	2000126c 	.word	0x2000126c

08001ef0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8001efc:	2300      	movs	r3, #0
 8001efe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d056      	beq.n	8001fb4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8001f06:	4b2e      	ldr	r3, [pc, #184]	; (8001fc0 <xTaskPriorityDisinherit+0xd0>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	693a      	ldr	r2, [r7, #16]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d00a      	beq.n	8001f26 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8001f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f14:	f383 8811 	msr	BASEPRI, r3
 8001f18:	f3bf 8f6f 	isb	sy
 8001f1c:	f3bf 8f4f 	dsb	sy
 8001f20:	60fb      	str	r3, [r7, #12]
}
 8001f22:	bf00      	nop
 8001f24:	e7fe      	b.n	8001f24 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d10a      	bne.n	8001f44 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8001f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f32:	f383 8811 	msr	BASEPRI, r3
 8001f36:	f3bf 8f6f 	isb	sy
 8001f3a:	f3bf 8f4f 	dsb	sy
 8001f3e:	60bb      	str	r3, [r7, #8]
}
 8001f40:	bf00      	nop
 8001f42:	e7fe      	b.n	8001f42 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f48:	1e5a      	subs	r2, r3, #1
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d02c      	beq.n	8001fb4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d128      	bne.n	8001fb4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	3304      	adds	r3, #4
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7fe fc5e 	bl	8000828 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f78:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f84:	4b0f      	ldr	r3, [pc, #60]	; (8001fc4 <xTaskPriorityDisinherit+0xd4>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d903      	bls.n	8001f94 <xTaskPriorityDisinherit+0xa4>
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f90:	4a0c      	ldr	r2, [pc, #48]	; (8001fc4 <xTaskPriorityDisinherit+0xd4>)
 8001f92:	6013      	str	r3, [r2, #0]
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f98:	4613      	mov	r3, r2
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	4413      	add	r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	4a09      	ldr	r2, [pc, #36]	; (8001fc8 <xTaskPriorityDisinherit+0xd8>)
 8001fa2:	441a      	add	r2, r3
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	3304      	adds	r3, #4
 8001fa8:	4619      	mov	r1, r3
 8001faa:	4610      	mov	r0, r2
 8001fac:	f7fe fbdf 	bl	800076e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8001fb4:	697b      	ldr	r3, [r7, #20]
	}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3718      	adds	r7, #24
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	20000d70 	.word	0x20000d70
 8001fc4:	2000124c 	.word	0x2000124c
 8001fc8:	20000d74 	.word	0x20000d74

08001fcc <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b08e      	sub	sp, #56	; 0x38
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	60b9      	str	r1, [r7, #8]
 8001fd6:	603b      	str	r3, [r7, #0]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d10a      	bne.n	8001ffc <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8001fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fea:	f383 8811 	msr	BASEPRI, r3
 8001fee:	f3bf 8f6f 	isb	sy
 8001ff2:	f3bf 8f4f 	dsb	sy
 8001ff6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001ff8:	bf00      	nop
 8001ffa:	e7fe      	b.n	8001ffa <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001ffc:	f000 fe74 	bl	8002ce8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8002004:	f3ef 8211 	mrs	r2, BASEPRI
 8002008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800200c:	f383 8811 	msr	BASEPRI, r3
 8002010:	f3bf 8f6f 	isb	sy
 8002014:	f3bf 8f4f 	dsb	sy
 8002018:	623a      	str	r2, [r7, #32]
 800201a:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800201c:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800201e:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d003      	beq.n	800202e <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8002026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002028:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800202e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002030:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002034:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8002038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800203a:	2202      	movs	r2, #2
 800203c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8002040:	79fb      	ldrb	r3, [r7, #7]
 8002042:	2b04      	cmp	r3, #4
 8002044:	d828      	bhi.n	8002098 <xTaskGenericNotifyFromISR+0xcc>
 8002046:	a201      	add	r2, pc, #4	; (adr r2, 800204c <xTaskGenericNotifyFromISR+0x80>)
 8002048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800204c:	080020b9 	.word	0x080020b9
 8002050:	08002061 	.word	0x08002061
 8002054:	0800206f 	.word	0x0800206f
 8002058:	0800207b 	.word	0x0800207b
 800205c:	08002083 	.word	0x08002083
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8002060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002062:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	431a      	orrs	r2, r3
 8002068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800206a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800206c:	e027      	b.n	80020be <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800206e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002072:	1c5a      	adds	r2, r3, #1
 8002074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002076:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8002078:	e021      	b.n	80020be <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800207a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800207c:	68ba      	ldr	r2, [r7, #8]
 800207e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8002080:	e01d      	b.n	80020be <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8002082:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002086:	2b02      	cmp	r3, #2
 8002088:	d003      	beq.n	8002092 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800208a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800208c:	68ba      	ldr	r2, [r7, #8]
 800208e:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8002090:	e015      	b.n	80020be <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 8002092:	2300      	movs	r3, #0
 8002094:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8002096:	e012      	b.n	80020be <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8002098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800209a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800209c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020a0:	d00c      	beq.n	80020bc <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 80020a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020a6:	f383 8811 	msr	BASEPRI, r3
 80020aa:	f3bf 8f6f 	isb	sy
 80020ae:	f3bf 8f4f 	dsb	sy
 80020b2:	61bb      	str	r3, [r7, #24]
}
 80020b4:	bf00      	nop
 80020b6:	e7fe      	b.n	80020b6 <xTaskGenericNotifyFromISR+0xea>
					break;
 80020b8:	bf00      	nop
 80020ba:	e000      	b.n	80020be <xTaskGenericNotifyFromISR+0xf2>
					break;
 80020bc:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80020be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d146      	bne.n	8002154 <xTaskGenericNotifyFromISR+0x188>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80020c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d00a      	beq.n	80020e4 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 80020ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020d2:	f383 8811 	msr	BASEPRI, r3
 80020d6:	f3bf 8f6f 	isb	sy
 80020da:	f3bf 8f4f 	dsb	sy
 80020de:	617b      	str	r3, [r7, #20]
}
 80020e0:	bf00      	nop
 80020e2:	e7fe      	b.n	80020e2 <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80020e4:	4b21      	ldr	r3, [pc, #132]	; (800216c <xTaskGenericNotifyFromISR+0x1a0>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d11d      	bne.n	8002128 <xTaskGenericNotifyFromISR+0x15c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80020ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020ee:	3304      	adds	r3, #4
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7fe fb99 	bl	8000828 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80020f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020fa:	4b1d      	ldr	r3, [pc, #116]	; (8002170 <xTaskGenericNotifyFromISR+0x1a4>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d903      	bls.n	800210a <xTaskGenericNotifyFromISR+0x13e>
 8002102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002106:	4a1a      	ldr	r2, [pc, #104]	; (8002170 <xTaskGenericNotifyFromISR+0x1a4>)
 8002108:	6013      	str	r3, [r2, #0]
 800210a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800210c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800210e:	4613      	mov	r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	4413      	add	r3, r2
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	4a17      	ldr	r2, [pc, #92]	; (8002174 <xTaskGenericNotifyFromISR+0x1a8>)
 8002118:	441a      	add	r2, r3
 800211a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800211c:	3304      	adds	r3, #4
 800211e:	4619      	mov	r1, r3
 8002120:	4610      	mov	r0, r2
 8002122:	f7fe fb24 	bl	800076e <vListInsertEnd>
 8002126:	e005      	b.n	8002134 <xTaskGenericNotifyFromISR+0x168>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8002128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800212a:	3318      	adds	r3, #24
 800212c:	4619      	mov	r1, r3
 800212e:	4812      	ldr	r0, [pc, #72]	; (8002178 <xTaskGenericNotifyFromISR+0x1ac>)
 8002130:	f7fe fb1d 	bl	800076e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002138:	4b10      	ldr	r3, [pc, #64]	; (800217c <xTaskGenericNotifyFromISR+0x1b0>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800213e:	429a      	cmp	r2, r3
 8002140:	d908      	bls.n	8002154 <xTaskGenericNotifyFromISR+0x188>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8002142:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002144:	2b00      	cmp	r3, #0
 8002146:	d002      	beq.n	800214e <xTaskGenericNotifyFromISR+0x182>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8002148:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800214a:	2201      	movs	r2, #1
 800214c:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800214e:	4b0c      	ldr	r3, [pc, #48]	; (8002180 <xTaskGenericNotifyFromISR+0x1b4>)
 8002150:	2201      	movs	r2, #1
 8002152:	601a      	str	r2, [r3, #0]
 8002154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002156:	613b      	str	r3, [r7, #16]
	__asm volatile
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	f383 8811 	msr	BASEPRI, r3
}
 800215e:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8002160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8002162:	4618      	mov	r0, r3
 8002164:	3738      	adds	r7, #56	; 0x38
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	2000126c 	.word	0x2000126c
 8002170:	2000124c 	.word	0x2000124c
 8002174:	20000d74 	.word	0x20000d74
 8002178:	20001204 	.word	0x20001204
 800217c:	20000d70 	.word	0x20000d70
 8002180:	20001258 	.word	0x20001258

08002184 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800218e:	4b21      	ldr	r3, [pc, #132]	; (8002214 <prvAddCurrentTaskToDelayedList+0x90>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002194:	4b20      	ldr	r3, [pc, #128]	; (8002218 <prvAddCurrentTaskToDelayedList+0x94>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	3304      	adds	r3, #4
 800219a:	4618      	mov	r0, r3
 800219c:	f7fe fb44 	bl	8000828 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021a6:	d10a      	bne.n	80021be <prvAddCurrentTaskToDelayedList+0x3a>
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d007      	beq.n	80021be <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80021ae:	4b1a      	ldr	r3, [pc, #104]	; (8002218 <prvAddCurrentTaskToDelayedList+0x94>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	3304      	adds	r3, #4
 80021b4:	4619      	mov	r1, r3
 80021b6:	4819      	ldr	r0, [pc, #100]	; (800221c <prvAddCurrentTaskToDelayedList+0x98>)
 80021b8:	f7fe fad9 	bl	800076e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80021bc:	e026      	b.n	800220c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	4413      	add	r3, r2
 80021c4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80021c6:	4b14      	ldr	r3, [pc, #80]	; (8002218 <prvAddCurrentTaskToDelayedList+0x94>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	68ba      	ldr	r2, [r7, #8]
 80021cc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80021ce:	68ba      	ldr	r2, [r7, #8]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d209      	bcs.n	80021ea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80021d6:	4b12      	ldr	r3, [pc, #72]	; (8002220 <prvAddCurrentTaskToDelayedList+0x9c>)
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	4b0f      	ldr	r3, [pc, #60]	; (8002218 <prvAddCurrentTaskToDelayedList+0x94>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	3304      	adds	r3, #4
 80021e0:	4619      	mov	r1, r3
 80021e2:	4610      	mov	r0, r2
 80021e4:	f7fe fae7 	bl	80007b6 <vListInsert>
}
 80021e8:	e010      	b.n	800220c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80021ea:	4b0e      	ldr	r3, [pc, #56]	; (8002224 <prvAddCurrentTaskToDelayedList+0xa0>)
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	4b0a      	ldr	r3, [pc, #40]	; (8002218 <prvAddCurrentTaskToDelayedList+0x94>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	3304      	adds	r3, #4
 80021f4:	4619      	mov	r1, r3
 80021f6:	4610      	mov	r0, r2
 80021f8:	f7fe fadd 	bl	80007b6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80021fc:	4b0a      	ldr	r3, [pc, #40]	; (8002228 <prvAddCurrentTaskToDelayedList+0xa4>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	68ba      	ldr	r2, [r7, #8]
 8002202:	429a      	cmp	r2, r3
 8002204:	d202      	bcs.n	800220c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8002206:	4a08      	ldr	r2, [pc, #32]	; (8002228 <prvAddCurrentTaskToDelayedList+0xa4>)
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	6013      	str	r3, [r2, #0]
}
 800220c:	bf00      	nop
 800220e:	3710      	adds	r7, #16
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	20001248 	.word	0x20001248
 8002218:	20000d70 	.word	0x20000d70
 800221c:	20001230 	.word	0x20001230
 8002220:	20001200 	.word	0x20001200
 8002224:	200011fc 	.word	0x200011fc
 8002228:	20001264 	.word	0x20001264

0800222c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b08a      	sub	sp, #40	; 0x28
 8002230:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8002232:	2300      	movs	r3, #0
 8002234:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8002236:	f000 fb07 	bl	8002848 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800223a:	4b1c      	ldr	r3, [pc, #112]	; (80022ac <xTimerCreateTimerTask+0x80>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d021      	beq.n	8002286 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8002242:	2300      	movs	r3, #0
 8002244:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8002246:	2300      	movs	r3, #0
 8002248:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800224a:	1d3a      	adds	r2, r7, #4
 800224c:	f107 0108 	add.w	r1, r7, #8
 8002250:	f107 030c 	add.w	r3, r7, #12
 8002254:	4618      	mov	r0, r3
 8002256:	f7fe fa43 	bl	80006e0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800225a:	6879      	ldr	r1, [r7, #4]
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	68fa      	ldr	r2, [r7, #12]
 8002260:	9202      	str	r2, [sp, #8]
 8002262:	9301      	str	r3, [sp, #4]
 8002264:	2302      	movs	r3, #2
 8002266:	9300      	str	r3, [sp, #0]
 8002268:	2300      	movs	r3, #0
 800226a:	460a      	mov	r2, r1
 800226c:	4910      	ldr	r1, [pc, #64]	; (80022b0 <xTimerCreateTimerTask+0x84>)
 800226e:	4811      	ldr	r0, [pc, #68]	; (80022b4 <xTimerCreateTimerTask+0x88>)
 8002270:	f7fe fff0 	bl	8001254 <xTaskCreateStatic>
 8002274:	4603      	mov	r3, r0
 8002276:	4a10      	ldr	r2, [pc, #64]	; (80022b8 <xTimerCreateTimerTask+0x8c>)
 8002278:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800227a:	4b0f      	ldr	r3, [pc, #60]	; (80022b8 <xTimerCreateTimerTask+0x8c>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8002282:	2301      	movs	r3, #1
 8002284:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d10a      	bne.n	80022a2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800228c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002290:	f383 8811 	msr	BASEPRI, r3
 8002294:	f3bf 8f6f 	isb	sy
 8002298:	f3bf 8f4f 	dsb	sy
 800229c:	613b      	str	r3, [r7, #16]
}
 800229e:	bf00      	nop
 80022a0:	e7fe      	b.n	80022a0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80022a2:	697b      	ldr	r3, [r7, #20]
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3718      	adds	r7, #24
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	200012a0 	.word	0x200012a0
 80022b0:	08008a58 	.word	0x08008a58
 80022b4:	080023f1 	.word	0x080023f1
 80022b8:	200012a4 	.word	0x200012a4

080022bc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b08a      	sub	sp, #40	; 0x28
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	607a      	str	r2, [r7, #4]
 80022c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80022ca:	2300      	movs	r3, #0
 80022cc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d10a      	bne.n	80022ea <xTimerGenericCommand+0x2e>
	__asm volatile
 80022d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022d8:	f383 8811 	msr	BASEPRI, r3
 80022dc:	f3bf 8f6f 	isb	sy
 80022e0:	f3bf 8f4f 	dsb	sy
 80022e4:	623b      	str	r3, [r7, #32]
}
 80022e6:	bf00      	nop
 80022e8:	e7fe      	b.n	80022e8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80022ea:	4b1a      	ldr	r3, [pc, #104]	; (8002354 <xTimerGenericCommand+0x98>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d02a      	beq.n	8002348 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	2b05      	cmp	r3, #5
 8002302:	dc18      	bgt.n	8002336 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002304:	f7ff fdd6 	bl	8001eb4 <xTaskGetSchedulerState>
 8002308:	4603      	mov	r3, r0
 800230a:	2b02      	cmp	r3, #2
 800230c:	d109      	bne.n	8002322 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800230e:	4b11      	ldr	r3, [pc, #68]	; (8002354 <xTimerGenericCommand+0x98>)
 8002310:	6818      	ldr	r0, [r3, #0]
 8002312:	f107 0110 	add.w	r1, r7, #16
 8002316:	2300      	movs	r3, #0
 8002318:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800231a:	f7fe fbb3 	bl	8000a84 <xQueueGenericSend>
 800231e:	6278      	str	r0, [r7, #36]	; 0x24
 8002320:	e012      	b.n	8002348 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002322:	4b0c      	ldr	r3, [pc, #48]	; (8002354 <xTimerGenericCommand+0x98>)
 8002324:	6818      	ldr	r0, [r3, #0]
 8002326:	f107 0110 	add.w	r1, r7, #16
 800232a:	2300      	movs	r3, #0
 800232c:	2200      	movs	r2, #0
 800232e:	f7fe fba9 	bl	8000a84 <xQueueGenericSend>
 8002332:	6278      	str	r0, [r7, #36]	; 0x24
 8002334:	e008      	b.n	8002348 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002336:	4b07      	ldr	r3, [pc, #28]	; (8002354 <xTimerGenericCommand+0x98>)
 8002338:	6818      	ldr	r0, [r3, #0]
 800233a:	f107 0110 	add.w	r1, r7, #16
 800233e:	2300      	movs	r3, #0
 8002340:	683a      	ldr	r2, [r7, #0]
 8002342:	f7fe fc9d 	bl	8000c80 <xQueueGenericSendFromISR>
 8002346:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8002348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800234a:	4618      	mov	r0, r3
 800234c:	3728      	adds	r7, #40	; 0x28
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	200012a0 	.word	0x200012a0

08002358 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b088      	sub	sp, #32
 800235c:	af02      	add	r7, sp, #8
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002362:	4b22      	ldr	r3, [pc, #136]	; (80023ec <prvProcessExpiredTimer+0x94>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	3304      	adds	r3, #4
 8002370:	4618      	mov	r0, r3
 8002372:	f7fe fa59 	bl	8000828 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800237c:	f003 0304 	and.w	r3, r3, #4
 8002380:	2b00      	cmp	r3, #0
 8002382:	d022      	beq.n	80023ca <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	699a      	ldr	r2, [r3, #24]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	18d1      	adds	r1, r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	683a      	ldr	r2, [r7, #0]
 8002390:	6978      	ldr	r0, [r7, #20]
 8002392:	f000 f8d1 	bl	8002538 <prvInsertTimerInActiveList>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d01f      	beq.n	80023dc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800239c:	2300      	movs	r3, #0
 800239e:	9300      	str	r3, [sp, #0]
 80023a0:	2300      	movs	r3, #0
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	2100      	movs	r1, #0
 80023a6:	6978      	ldr	r0, [r7, #20]
 80023a8:	f7ff ff88 	bl	80022bc <xTimerGenericCommand>
 80023ac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d113      	bne.n	80023dc <prvProcessExpiredTimer+0x84>
	__asm volatile
 80023b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023b8:	f383 8811 	msr	BASEPRI, r3
 80023bc:	f3bf 8f6f 	isb	sy
 80023c0:	f3bf 8f4f 	dsb	sy
 80023c4:	60fb      	str	r3, [r7, #12]
}
 80023c6:	bf00      	nop
 80023c8:	e7fe      	b.n	80023c8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80023d0:	f023 0301 	bic.w	r3, r3, #1
 80023d4:	b2da      	uxtb	r2, r3
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	6a1b      	ldr	r3, [r3, #32]
 80023e0:	6978      	ldr	r0, [r7, #20]
 80023e2:	4798      	blx	r3
}
 80023e4:	bf00      	nop
 80023e6:	3718      	adds	r7, #24
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	20001298 	.word	0x20001298

080023f0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80023f8:	f107 0308 	add.w	r3, r7, #8
 80023fc:	4618      	mov	r0, r3
 80023fe:	f000 f857 	bl	80024b0 <prvGetNextExpireTime>
 8002402:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	4619      	mov	r1, r3
 8002408:	68f8      	ldr	r0, [r7, #12]
 800240a:	f000 f803 	bl	8002414 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800240e:	f000 f8d5 	bl	80025bc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002412:	e7f1      	b.n	80023f8 <prvTimerTask+0x8>

08002414 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800241e:	f7ff f955 	bl	80016cc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002422:	f107 0308 	add.w	r3, r7, #8
 8002426:	4618      	mov	r0, r3
 8002428:	f000 f866 	bl	80024f8 <prvSampleTimeNow>
 800242c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d130      	bne.n	8002496 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d10a      	bne.n	8002450 <prvProcessTimerOrBlockTask+0x3c>
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	429a      	cmp	r2, r3
 8002440:	d806      	bhi.n	8002450 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8002442:	f7ff f951 	bl	80016e8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002446:	68f9      	ldr	r1, [r7, #12]
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f7ff ff85 	bl	8002358 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800244e:	e024      	b.n	800249a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d008      	beq.n	8002468 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002456:	4b13      	ldr	r3, [pc, #76]	; (80024a4 <prvProcessTimerOrBlockTask+0x90>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d101      	bne.n	8002464 <prvProcessTimerOrBlockTask+0x50>
 8002460:	2301      	movs	r3, #1
 8002462:	e000      	b.n	8002466 <prvProcessTimerOrBlockTask+0x52>
 8002464:	2300      	movs	r3, #0
 8002466:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002468:	4b0f      	ldr	r3, [pc, #60]	; (80024a8 <prvProcessTimerOrBlockTask+0x94>)
 800246a:	6818      	ldr	r0, [r3, #0]
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	683a      	ldr	r2, [r7, #0]
 8002474:	4619      	mov	r1, r3
 8002476:	f7fe feb9 	bl	80011ec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800247a:	f7ff f935 	bl	80016e8 <xTaskResumeAll>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d10a      	bne.n	800249a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8002484:	4b09      	ldr	r3, [pc, #36]	; (80024ac <prvProcessTimerOrBlockTask+0x98>)
 8002486:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800248a:	601a      	str	r2, [r3, #0]
 800248c:	f3bf 8f4f 	dsb	sy
 8002490:	f3bf 8f6f 	isb	sy
}
 8002494:	e001      	b.n	800249a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8002496:	f7ff f927 	bl	80016e8 <xTaskResumeAll>
}
 800249a:	bf00      	nop
 800249c:	3710      	adds	r7, #16
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	2000129c 	.word	0x2000129c
 80024a8:	200012a0 	.word	0x200012a0
 80024ac:	e000ed04 	.word	0xe000ed04

080024b0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80024b0:	b480      	push	{r7}
 80024b2:	b085      	sub	sp, #20
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80024b8:	4b0e      	ldr	r3, [pc, #56]	; (80024f4 <prvGetNextExpireTime+0x44>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <prvGetNextExpireTime+0x16>
 80024c2:	2201      	movs	r2, #1
 80024c4:	e000      	b.n	80024c8 <prvGetNextExpireTime+0x18>
 80024c6:	2200      	movs	r2, #0
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d105      	bne.n	80024e0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80024d4:	4b07      	ldr	r3, [pc, #28]	; (80024f4 <prvGetNextExpireTime+0x44>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	60fb      	str	r3, [r7, #12]
 80024de:	e001      	b.n	80024e4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80024e0:	2300      	movs	r3, #0
 80024e2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80024e4:	68fb      	ldr	r3, [r7, #12]
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3714      	adds	r7, #20
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	20001298 	.word	0x20001298

080024f8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8002500:	f7ff f990 	bl	8001824 <xTaskGetTickCount>
 8002504:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8002506:	4b0b      	ldr	r3, [pc, #44]	; (8002534 <prvSampleTimeNow+0x3c>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	68fa      	ldr	r2, [r7, #12]
 800250c:	429a      	cmp	r2, r3
 800250e:	d205      	bcs.n	800251c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8002510:	f000 f936 	bl	8002780 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	601a      	str	r2, [r3, #0]
 800251a:	e002      	b.n	8002522 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8002522:	4a04      	ldr	r2, [pc, #16]	; (8002534 <prvSampleTimeNow+0x3c>)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8002528:	68fb      	ldr	r3, [r7, #12]
}
 800252a:	4618      	mov	r0, r3
 800252c:	3710      	adds	r7, #16
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	200012a8 	.word	0x200012a8

08002538 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b086      	sub	sp, #24
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	607a      	str	r2, [r7, #4]
 8002544:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8002546:	2300      	movs	r3, #0
 8002548:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	68ba      	ldr	r2, [r7, #8]
 800254e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8002556:	68ba      	ldr	r2, [r7, #8]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	429a      	cmp	r2, r3
 800255c:	d812      	bhi.n	8002584 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	1ad2      	subs	r2, r2, r3
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	429a      	cmp	r2, r3
 800256a:	d302      	bcc.n	8002572 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800256c:	2301      	movs	r3, #1
 800256e:	617b      	str	r3, [r7, #20]
 8002570:	e01b      	b.n	80025aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002572:	4b10      	ldr	r3, [pc, #64]	; (80025b4 <prvInsertTimerInActiveList+0x7c>)
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	3304      	adds	r3, #4
 800257a:	4619      	mov	r1, r3
 800257c:	4610      	mov	r0, r2
 800257e:	f7fe f91a 	bl	80007b6 <vListInsert>
 8002582:	e012      	b.n	80025aa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	429a      	cmp	r2, r3
 800258a:	d206      	bcs.n	800259a <prvInsertTimerInActiveList+0x62>
 800258c:	68ba      	ldr	r2, [r7, #8]
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	429a      	cmp	r2, r3
 8002592:	d302      	bcc.n	800259a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8002594:	2301      	movs	r3, #1
 8002596:	617b      	str	r3, [r7, #20]
 8002598:	e007      	b.n	80025aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800259a:	4b07      	ldr	r3, [pc, #28]	; (80025b8 <prvInsertTimerInActiveList+0x80>)
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	3304      	adds	r3, #4
 80025a2:	4619      	mov	r1, r3
 80025a4:	4610      	mov	r0, r2
 80025a6:	f7fe f906 	bl	80007b6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80025aa:	697b      	ldr	r3, [r7, #20]
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3718      	adds	r7, #24
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	2000129c 	.word	0x2000129c
 80025b8:	20001298 	.word	0x20001298

080025bc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b08e      	sub	sp, #56	; 0x38
 80025c0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80025c2:	e0ca      	b.n	800275a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	da18      	bge.n	80025fc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80025ca:	1d3b      	adds	r3, r7, #4
 80025cc:	3304      	adds	r3, #4
 80025ce:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80025d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d10a      	bne.n	80025ec <prvProcessReceivedCommands+0x30>
	__asm volatile
 80025d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025da:	f383 8811 	msr	BASEPRI, r3
 80025de:	f3bf 8f6f 	isb	sy
 80025e2:	f3bf 8f4f 	dsb	sy
 80025e6:	61fb      	str	r3, [r7, #28]
}
 80025e8:	bf00      	nop
 80025ea:	e7fe      	b.n	80025ea <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80025ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025f2:	6850      	ldr	r0, [r2, #4]
 80025f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025f6:	6892      	ldr	r2, [r2, #8]
 80025f8:	4611      	mov	r1, r2
 80025fa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	f2c0 80aa 	blt.w	8002758 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800260a:	695b      	ldr	r3, [r3, #20]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d004      	beq.n	800261a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002612:	3304      	adds	r3, #4
 8002614:	4618      	mov	r0, r3
 8002616:	f7fe f907 	bl	8000828 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800261a:	463b      	mov	r3, r7
 800261c:	4618      	mov	r0, r3
 800261e:	f7ff ff6b 	bl	80024f8 <prvSampleTimeNow>
 8002622:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2b09      	cmp	r3, #9
 8002628:	f200 8097 	bhi.w	800275a <prvProcessReceivedCommands+0x19e>
 800262c:	a201      	add	r2, pc, #4	; (adr r2, 8002634 <prvProcessReceivedCommands+0x78>)
 800262e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002632:	bf00      	nop
 8002634:	0800265d 	.word	0x0800265d
 8002638:	0800265d 	.word	0x0800265d
 800263c:	0800265d 	.word	0x0800265d
 8002640:	080026d1 	.word	0x080026d1
 8002644:	080026e5 	.word	0x080026e5
 8002648:	0800272f 	.word	0x0800272f
 800264c:	0800265d 	.word	0x0800265d
 8002650:	0800265d 	.word	0x0800265d
 8002654:	080026d1 	.word	0x080026d1
 8002658:	080026e5 	.word	0x080026e5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800265c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800265e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002662:	f043 0301 	orr.w	r3, r3, #1
 8002666:	b2da      	uxtb	r2, r3
 8002668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800266a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800266e:	68ba      	ldr	r2, [r7, #8]
 8002670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	18d1      	adds	r1, r2, r3
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800267a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800267c:	f7ff ff5c 	bl	8002538 <prvInsertTimerInActiveList>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d069      	beq.n	800275a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002688:	6a1b      	ldr	r3, [r3, #32]
 800268a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800268c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800268e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002690:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002694:	f003 0304 	and.w	r3, r3, #4
 8002698:	2b00      	cmp	r3, #0
 800269a:	d05e      	beq.n	800275a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800269c:	68ba      	ldr	r2, [r7, #8]
 800269e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	441a      	add	r2, r3
 80026a4:	2300      	movs	r3, #0
 80026a6:	9300      	str	r3, [sp, #0]
 80026a8:	2300      	movs	r3, #0
 80026aa:	2100      	movs	r1, #0
 80026ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80026ae:	f7ff fe05 	bl	80022bc <xTimerGenericCommand>
 80026b2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80026b4:	6a3b      	ldr	r3, [r7, #32]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d14f      	bne.n	800275a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80026ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026be:	f383 8811 	msr	BASEPRI, r3
 80026c2:	f3bf 8f6f 	isb	sy
 80026c6:	f3bf 8f4f 	dsb	sy
 80026ca:	61bb      	str	r3, [r7, #24]
}
 80026cc:	bf00      	nop
 80026ce:	e7fe      	b.n	80026ce <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80026d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80026d6:	f023 0301 	bic.w	r3, r3, #1
 80026da:	b2da      	uxtb	r2, r3
 80026dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80026e2:	e03a      	b.n	800275a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80026e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80026ea:	f043 0301 	orr.w	r3, r3, #1
 80026ee:	b2da      	uxtb	r2, r3
 80026f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80026f6:	68ba      	ldr	r2, [r7, #8]
 80026f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026fa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80026fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d10a      	bne.n	800271a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8002704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002708:	f383 8811 	msr	BASEPRI, r3
 800270c:	f3bf 8f6f 	isb	sy
 8002710:	f3bf 8f4f 	dsb	sy
 8002714:	617b      	str	r3, [r7, #20]
}
 8002716:	bf00      	nop
 8002718:	e7fe      	b.n	8002718 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800271a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800271c:	699a      	ldr	r2, [r3, #24]
 800271e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002720:	18d1      	adds	r1, r2, r3
 8002722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002724:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002726:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002728:	f7ff ff06 	bl	8002538 <prvInsertTimerInActiveList>
					break;
 800272c:	e015      	b.n	800275a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800272e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002730:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002734:	f003 0302 	and.w	r3, r3, #2
 8002738:	2b00      	cmp	r3, #0
 800273a:	d103      	bne.n	8002744 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800273c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800273e:	f000 fbdf 	bl	8002f00 <vPortFree>
 8002742:	e00a      	b.n	800275a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002746:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800274a:	f023 0301 	bic.w	r3, r3, #1
 800274e:	b2da      	uxtb	r2, r3
 8002750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002752:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8002756:	e000      	b.n	800275a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8002758:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800275a:	4b08      	ldr	r3, [pc, #32]	; (800277c <prvProcessReceivedCommands+0x1c0>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	1d39      	adds	r1, r7, #4
 8002760:	2200      	movs	r2, #0
 8002762:	4618      	mov	r0, r3
 8002764:	f7fe fb28 	bl	8000db8 <xQueueReceive>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	f47f af2a 	bne.w	80025c4 <prvProcessReceivedCommands+0x8>
	}
}
 8002770:	bf00      	nop
 8002772:	bf00      	nop
 8002774:	3730      	adds	r7, #48	; 0x30
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	200012a0 	.word	0x200012a0

08002780 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b088      	sub	sp, #32
 8002784:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002786:	e048      	b.n	800281a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002788:	4b2d      	ldr	r3, [pc, #180]	; (8002840 <prvSwitchTimerLists+0xc0>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002792:	4b2b      	ldr	r3, [pc, #172]	; (8002840 <prvSwitchTimerLists+0xc0>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	3304      	adds	r3, #4
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7fe f841 	bl	8000828 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6a1b      	ldr	r3, [r3, #32]
 80027aa:	68f8      	ldr	r0, [r7, #12]
 80027ac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80027b4:	f003 0304 	and.w	r3, r3, #4
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d02e      	beq.n	800281a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	693a      	ldr	r2, [r7, #16]
 80027c2:	4413      	add	r3, r2
 80027c4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80027c6:	68ba      	ldr	r2, [r7, #8]
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d90e      	bls.n	80027ec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	68ba      	ldr	r2, [r7, #8]
 80027d2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80027da:	4b19      	ldr	r3, [pc, #100]	; (8002840 <prvSwitchTimerLists+0xc0>)
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	3304      	adds	r3, #4
 80027e2:	4619      	mov	r1, r3
 80027e4:	4610      	mov	r0, r2
 80027e6:	f7fd ffe6 	bl	80007b6 <vListInsert>
 80027ea:	e016      	b.n	800281a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80027ec:	2300      	movs	r3, #0
 80027ee:	9300      	str	r3, [sp, #0]
 80027f0:	2300      	movs	r3, #0
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	2100      	movs	r1, #0
 80027f6:	68f8      	ldr	r0, [r7, #12]
 80027f8:	f7ff fd60 	bl	80022bc <xTimerGenericCommand>
 80027fc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d10a      	bne.n	800281a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8002804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002808:	f383 8811 	msr	BASEPRI, r3
 800280c:	f3bf 8f6f 	isb	sy
 8002810:	f3bf 8f4f 	dsb	sy
 8002814:	603b      	str	r3, [r7, #0]
}
 8002816:	bf00      	nop
 8002818:	e7fe      	b.n	8002818 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800281a:	4b09      	ldr	r3, [pc, #36]	; (8002840 <prvSwitchTimerLists+0xc0>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d1b1      	bne.n	8002788 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8002824:	4b06      	ldr	r3, [pc, #24]	; (8002840 <prvSwitchTimerLists+0xc0>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800282a:	4b06      	ldr	r3, [pc, #24]	; (8002844 <prvSwitchTimerLists+0xc4>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a04      	ldr	r2, [pc, #16]	; (8002840 <prvSwitchTimerLists+0xc0>)
 8002830:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8002832:	4a04      	ldr	r2, [pc, #16]	; (8002844 <prvSwitchTimerLists+0xc4>)
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	6013      	str	r3, [r2, #0]
}
 8002838:	bf00      	nop
 800283a:	3718      	adds	r7, #24
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	20001298 	.word	0x20001298
 8002844:	2000129c 	.word	0x2000129c

08002848 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800284e:	f000 f969 	bl	8002b24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8002852:	4b15      	ldr	r3, [pc, #84]	; (80028a8 <prvCheckForValidListAndQueue+0x60>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d120      	bne.n	800289c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800285a:	4814      	ldr	r0, [pc, #80]	; (80028ac <prvCheckForValidListAndQueue+0x64>)
 800285c:	f7fd ff5a 	bl	8000714 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8002860:	4813      	ldr	r0, [pc, #76]	; (80028b0 <prvCheckForValidListAndQueue+0x68>)
 8002862:	f7fd ff57 	bl	8000714 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8002866:	4b13      	ldr	r3, [pc, #76]	; (80028b4 <prvCheckForValidListAndQueue+0x6c>)
 8002868:	4a10      	ldr	r2, [pc, #64]	; (80028ac <prvCheckForValidListAndQueue+0x64>)
 800286a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800286c:	4b12      	ldr	r3, [pc, #72]	; (80028b8 <prvCheckForValidListAndQueue+0x70>)
 800286e:	4a10      	ldr	r2, [pc, #64]	; (80028b0 <prvCheckForValidListAndQueue+0x68>)
 8002870:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8002872:	2300      	movs	r3, #0
 8002874:	9300      	str	r3, [sp, #0]
 8002876:	4b11      	ldr	r3, [pc, #68]	; (80028bc <prvCheckForValidListAndQueue+0x74>)
 8002878:	4a11      	ldr	r2, [pc, #68]	; (80028c0 <prvCheckForValidListAndQueue+0x78>)
 800287a:	2110      	movs	r1, #16
 800287c:	200a      	movs	r0, #10
 800287e:	f7fe f865 	bl	800094c <xQueueGenericCreateStatic>
 8002882:	4603      	mov	r3, r0
 8002884:	4a08      	ldr	r2, [pc, #32]	; (80028a8 <prvCheckForValidListAndQueue+0x60>)
 8002886:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8002888:	4b07      	ldr	r3, [pc, #28]	; (80028a8 <prvCheckForValidListAndQueue+0x60>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d005      	beq.n	800289c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002890:	4b05      	ldr	r3, [pc, #20]	; (80028a8 <prvCheckForValidListAndQueue+0x60>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	490b      	ldr	r1, [pc, #44]	; (80028c4 <prvCheckForValidListAndQueue+0x7c>)
 8002896:	4618      	mov	r0, r3
 8002898:	f7fe fc7e 	bl	8001198 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800289c:	f000 f972 	bl	8002b84 <vPortExitCritical>
}
 80028a0:	bf00      	nop
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	200012a0 	.word	0x200012a0
 80028ac:	20001270 	.word	0x20001270
 80028b0:	20001284 	.word	0x20001284
 80028b4:	20001298 	.word	0x20001298
 80028b8:	2000129c 	.word	0x2000129c
 80028bc:	2000134c 	.word	0x2000134c
 80028c0:	200012ac 	.word	0x200012ac
 80028c4:	08008a60 	.word	0x08008a60

080028c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	3b04      	subs	r3, #4
 80028d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80028e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	3b04      	subs	r3, #4
 80028e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	f023 0201 	bic.w	r2, r3, #1
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	3b04      	subs	r3, #4
 80028f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80028f8:	4a0c      	ldr	r2, [pc, #48]	; (800292c <pxPortInitialiseStack+0x64>)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	3b14      	subs	r3, #20
 8002902:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	3b04      	subs	r3, #4
 800290e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f06f 0202 	mvn.w	r2, #2
 8002916:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	3b20      	subs	r3, #32
 800291c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800291e:	68fb      	ldr	r3, [r7, #12]
}
 8002920:	4618      	mov	r0, r3
 8002922:	3714      	adds	r7, #20
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr
 800292c:	08002931 	.word	0x08002931

08002930 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002930:	b480      	push	{r7}
 8002932:	b085      	sub	sp, #20
 8002934:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8002936:	2300      	movs	r3, #0
 8002938:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800293a:	4b12      	ldr	r3, [pc, #72]	; (8002984 <prvTaskExitError+0x54>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002942:	d00a      	beq.n	800295a <prvTaskExitError+0x2a>
	__asm volatile
 8002944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002948:	f383 8811 	msr	BASEPRI, r3
 800294c:	f3bf 8f6f 	isb	sy
 8002950:	f3bf 8f4f 	dsb	sy
 8002954:	60fb      	str	r3, [r7, #12]
}
 8002956:	bf00      	nop
 8002958:	e7fe      	b.n	8002958 <prvTaskExitError+0x28>
	__asm volatile
 800295a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800295e:	f383 8811 	msr	BASEPRI, r3
 8002962:	f3bf 8f6f 	isb	sy
 8002966:	f3bf 8f4f 	dsb	sy
 800296a:	60bb      	str	r3, [r7, #8]
}
 800296c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800296e:	bf00      	nop
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d0fc      	beq.n	8002970 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002976:	bf00      	nop
 8002978:	bf00      	nop
 800297a:	3714      	adds	r7, #20
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr
 8002984:	20000004 	.word	0x20000004
	...

08002990 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002990:	4b07      	ldr	r3, [pc, #28]	; (80029b0 <pxCurrentTCBConst2>)
 8002992:	6819      	ldr	r1, [r3, #0]
 8002994:	6808      	ldr	r0, [r1, #0]
 8002996:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800299a:	f380 8809 	msr	PSP, r0
 800299e:	f3bf 8f6f 	isb	sy
 80029a2:	f04f 0000 	mov.w	r0, #0
 80029a6:	f380 8811 	msr	BASEPRI, r0
 80029aa:	4770      	bx	lr
 80029ac:	f3af 8000 	nop.w

080029b0 <pxCurrentTCBConst2>:
 80029b0:	20000d70 	.word	0x20000d70
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80029b4:	bf00      	nop
 80029b6:	bf00      	nop

080029b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80029b8:	4808      	ldr	r0, [pc, #32]	; (80029dc <prvPortStartFirstTask+0x24>)
 80029ba:	6800      	ldr	r0, [r0, #0]
 80029bc:	6800      	ldr	r0, [r0, #0]
 80029be:	f380 8808 	msr	MSP, r0
 80029c2:	f04f 0000 	mov.w	r0, #0
 80029c6:	f380 8814 	msr	CONTROL, r0
 80029ca:	b662      	cpsie	i
 80029cc:	b661      	cpsie	f
 80029ce:	f3bf 8f4f 	dsb	sy
 80029d2:	f3bf 8f6f 	isb	sy
 80029d6:	df00      	svc	0
 80029d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80029da:	bf00      	nop
 80029dc:	e000ed08 	.word	0xe000ed08

080029e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b086      	sub	sp, #24
 80029e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80029e6:	4b46      	ldr	r3, [pc, #280]	; (8002b00 <xPortStartScheduler+0x120>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a46      	ldr	r2, [pc, #280]	; (8002b04 <xPortStartScheduler+0x124>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d10a      	bne.n	8002a06 <xPortStartScheduler+0x26>
	__asm volatile
 80029f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029f4:	f383 8811 	msr	BASEPRI, r3
 80029f8:	f3bf 8f6f 	isb	sy
 80029fc:	f3bf 8f4f 	dsb	sy
 8002a00:	613b      	str	r3, [r7, #16]
}
 8002a02:	bf00      	nop
 8002a04:	e7fe      	b.n	8002a04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002a06:	4b3e      	ldr	r3, [pc, #248]	; (8002b00 <xPortStartScheduler+0x120>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a3f      	ldr	r2, [pc, #252]	; (8002b08 <xPortStartScheduler+0x128>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d10a      	bne.n	8002a26 <xPortStartScheduler+0x46>
	__asm volatile
 8002a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a14:	f383 8811 	msr	BASEPRI, r3
 8002a18:	f3bf 8f6f 	isb	sy
 8002a1c:	f3bf 8f4f 	dsb	sy
 8002a20:	60fb      	str	r3, [r7, #12]
}
 8002a22:	bf00      	nop
 8002a24:	e7fe      	b.n	8002a24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002a26:	4b39      	ldr	r3, [pc, #228]	; (8002b0c <xPortStartScheduler+0x12c>)
 8002a28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	22ff      	movs	r2, #255	; 0xff
 8002a36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002a40:	78fb      	ldrb	r3, [r7, #3]
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002a48:	b2da      	uxtb	r2, r3
 8002a4a:	4b31      	ldr	r3, [pc, #196]	; (8002b10 <xPortStartScheduler+0x130>)
 8002a4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002a4e:	4b31      	ldr	r3, [pc, #196]	; (8002b14 <xPortStartScheduler+0x134>)
 8002a50:	2207      	movs	r2, #7
 8002a52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002a54:	e009      	b.n	8002a6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8002a56:	4b2f      	ldr	r3, [pc, #188]	; (8002b14 <xPortStartScheduler+0x134>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	4a2d      	ldr	r2, [pc, #180]	; (8002b14 <xPortStartScheduler+0x134>)
 8002a5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002a60:	78fb      	ldrb	r3, [r7, #3]
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002a6a:	78fb      	ldrb	r3, [r7, #3]
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a72:	2b80      	cmp	r3, #128	; 0x80
 8002a74:	d0ef      	beq.n	8002a56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002a76:	4b27      	ldr	r3, [pc, #156]	; (8002b14 <xPortStartScheduler+0x134>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f1c3 0307 	rsb	r3, r3, #7
 8002a7e:	2b04      	cmp	r3, #4
 8002a80:	d00a      	beq.n	8002a98 <xPortStartScheduler+0xb8>
	__asm volatile
 8002a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a86:	f383 8811 	msr	BASEPRI, r3
 8002a8a:	f3bf 8f6f 	isb	sy
 8002a8e:	f3bf 8f4f 	dsb	sy
 8002a92:	60bb      	str	r3, [r7, #8]
}
 8002a94:	bf00      	nop
 8002a96:	e7fe      	b.n	8002a96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002a98:	4b1e      	ldr	r3, [pc, #120]	; (8002b14 <xPortStartScheduler+0x134>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	021b      	lsls	r3, r3, #8
 8002a9e:	4a1d      	ldr	r2, [pc, #116]	; (8002b14 <xPortStartScheduler+0x134>)
 8002aa0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002aa2:	4b1c      	ldr	r3, [pc, #112]	; (8002b14 <xPortStartScheduler+0x134>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002aaa:	4a1a      	ldr	r2, [pc, #104]	; (8002b14 <xPortStartScheduler+0x134>)
 8002aac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	b2da      	uxtb	r2, r3
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002ab6:	4b18      	ldr	r3, [pc, #96]	; (8002b18 <xPortStartScheduler+0x138>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a17      	ldr	r2, [pc, #92]	; (8002b18 <xPortStartScheduler+0x138>)
 8002abc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ac0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002ac2:	4b15      	ldr	r3, [pc, #84]	; (8002b18 <xPortStartScheduler+0x138>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a14      	ldr	r2, [pc, #80]	; (8002b18 <xPortStartScheduler+0x138>)
 8002ac8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002acc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002ace:	f000 f8dd 	bl	8002c8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002ad2:	4b12      	ldr	r3, [pc, #72]	; (8002b1c <xPortStartScheduler+0x13c>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8002ad8:	f000 f8fc 	bl	8002cd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002adc:	4b10      	ldr	r3, [pc, #64]	; (8002b20 <xPortStartScheduler+0x140>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a0f      	ldr	r2, [pc, #60]	; (8002b20 <xPortStartScheduler+0x140>)
 8002ae2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002ae6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002ae8:	f7ff ff66 	bl	80029b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002aec:	f7fe ff76 	bl	80019dc <vTaskSwitchContext>
	prvTaskExitError();
 8002af0:	f7ff ff1e 	bl	8002930 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3718      	adds	r7, #24
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	e000ed00 	.word	0xe000ed00
 8002b04:	410fc271 	.word	0x410fc271
 8002b08:	410fc270 	.word	0x410fc270
 8002b0c:	e000e400 	.word	0xe000e400
 8002b10:	2000139c 	.word	0x2000139c
 8002b14:	200013a0 	.word	0x200013a0
 8002b18:	e000ed20 	.word	0xe000ed20
 8002b1c:	20000004 	.word	0x20000004
 8002b20:	e000ef34 	.word	0xe000ef34

08002b24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
	__asm volatile
 8002b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b2e:	f383 8811 	msr	BASEPRI, r3
 8002b32:	f3bf 8f6f 	isb	sy
 8002b36:	f3bf 8f4f 	dsb	sy
 8002b3a:	607b      	str	r3, [r7, #4]
}
 8002b3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002b3e:	4b0f      	ldr	r3, [pc, #60]	; (8002b7c <vPortEnterCritical+0x58>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	3301      	adds	r3, #1
 8002b44:	4a0d      	ldr	r2, [pc, #52]	; (8002b7c <vPortEnterCritical+0x58>)
 8002b46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002b48:	4b0c      	ldr	r3, [pc, #48]	; (8002b7c <vPortEnterCritical+0x58>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d10f      	bne.n	8002b70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002b50:	4b0b      	ldr	r3, [pc, #44]	; (8002b80 <vPortEnterCritical+0x5c>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00a      	beq.n	8002b70 <vPortEnterCritical+0x4c>
	__asm volatile
 8002b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b5e:	f383 8811 	msr	BASEPRI, r3
 8002b62:	f3bf 8f6f 	isb	sy
 8002b66:	f3bf 8f4f 	dsb	sy
 8002b6a:	603b      	str	r3, [r7, #0]
}
 8002b6c:	bf00      	nop
 8002b6e:	e7fe      	b.n	8002b6e <vPortEnterCritical+0x4a>
	}
}
 8002b70:	bf00      	nop
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr
 8002b7c:	20000004 	.word	0x20000004
 8002b80:	e000ed04 	.word	0xe000ed04

08002b84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002b8a:	4b12      	ldr	r3, [pc, #72]	; (8002bd4 <vPortExitCritical+0x50>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d10a      	bne.n	8002ba8 <vPortExitCritical+0x24>
	__asm volatile
 8002b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b96:	f383 8811 	msr	BASEPRI, r3
 8002b9a:	f3bf 8f6f 	isb	sy
 8002b9e:	f3bf 8f4f 	dsb	sy
 8002ba2:	607b      	str	r3, [r7, #4]
}
 8002ba4:	bf00      	nop
 8002ba6:	e7fe      	b.n	8002ba6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8002ba8:	4b0a      	ldr	r3, [pc, #40]	; (8002bd4 <vPortExitCritical+0x50>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	3b01      	subs	r3, #1
 8002bae:	4a09      	ldr	r2, [pc, #36]	; (8002bd4 <vPortExitCritical+0x50>)
 8002bb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002bb2:	4b08      	ldr	r3, [pc, #32]	; (8002bd4 <vPortExitCritical+0x50>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d105      	bne.n	8002bc6 <vPortExitCritical+0x42>
 8002bba:	2300      	movs	r3, #0
 8002bbc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	f383 8811 	msr	BASEPRI, r3
}
 8002bc4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8002bc6:	bf00      	nop
 8002bc8:	370c      	adds	r7, #12
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	20000004 	.word	0x20000004
	...

08002be0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002be0:	f3ef 8009 	mrs	r0, PSP
 8002be4:	f3bf 8f6f 	isb	sy
 8002be8:	4b15      	ldr	r3, [pc, #84]	; (8002c40 <pxCurrentTCBConst>)
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	f01e 0f10 	tst.w	lr, #16
 8002bf0:	bf08      	it	eq
 8002bf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002bf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bfa:	6010      	str	r0, [r2, #0]
 8002bfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002c00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002c04:	f380 8811 	msr	BASEPRI, r0
 8002c08:	f3bf 8f4f 	dsb	sy
 8002c0c:	f3bf 8f6f 	isb	sy
 8002c10:	f7fe fee4 	bl	80019dc <vTaskSwitchContext>
 8002c14:	f04f 0000 	mov.w	r0, #0
 8002c18:	f380 8811 	msr	BASEPRI, r0
 8002c1c:	bc09      	pop	{r0, r3}
 8002c1e:	6819      	ldr	r1, [r3, #0]
 8002c20:	6808      	ldr	r0, [r1, #0]
 8002c22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c26:	f01e 0f10 	tst.w	lr, #16
 8002c2a:	bf08      	it	eq
 8002c2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002c30:	f380 8809 	msr	PSP, r0
 8002c34:	f3bf 8f6f 	isb	sy
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	f3af 8000 	nop.w

08002c40 <pxCurrentTCBConst>:
 8002c40:	20000d70 	.word	0x20000d70
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002c44:	bf00      	nop
 8002c46:	bf00      	nop

08002c48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
	__asm volatile
 8002c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c52:	f383 8811 	msr	BASEPRI, r3
 8002c56:	f3bf 8f6f 	isb	sy
 8002c5a:	f3bf 8f4f 	dsb	sy
 8002c5e:	607b      	str	r3, [r7, #4]
}
 8002c60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002c62:	f7fe fe01 	bl	8001868 <xTaskIncrementTick>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d003      	beq.n	8002c74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002c6c:	4b06      	ldr	r3, [pc, #24]	; (8002c88 <xPortSysTickHandler+0x40>)
 8002c6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c72:	601a      	str	r2, [r3, #0]
 8002c74:	2300      	movs	r3, #0
 8002c76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	f383 8811 	msr	BASEPRI, r3
}
 8002c7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8002c80:	bf00      	nop
 8002c82:	3708      	adds	r7, #8
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	e000ed04 	.word	0xe000ed04

08002c8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002c90:	4b0b      	ldr	r3, [pc, #44]	; (8002cc0 <vPortSetupTimerInterrupt+0x34>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002c96:	4b0b      	ldr	r3, [pc, #44]	; (8002cc4 <vPortSetupTimerInterrupt+0x38>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002c9c:	4b0a      	ldr	r3, [pc, #40]	; (8002cc8 <vPortSetupTimerInterrupt+0x3c>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a0a      	ldr	r2, [pc, #40]	; (8002ccc <vPortSetupTimerInterrupt+0x40>)
 8002ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca6:	099b      	lsrs	r3, r3, #6
 8002ca8:	4a09      	ldr	r2, [pc, #36]	; (8002cd0 <vPortSetupTimerInterrupt+0x44>)
 8002caa:	3b01      	subs	r3, #1
 8002cac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002cae:	4b04      	ldr	r3, [pc, #16]	; (8002cc0 <vPortSetupTimerInterrupt+0x34>)
 8002cb0:	2207      	movs	r2, #7
 8002cb2:	601a      	str	r2, [r3, #0]
}
 8002cb4:	bf00      	nop
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	e000e010 	.word	0xe000e010
 8002cc4:	e000e018 	.word	0xe000e018
 8002cc8:	20000284 	.word	0x20000284
 8002ccc:	10624dd3 	.word	0x10624dd3
 8002cd0:	e000e014 	.word	0xe000e014

08002cd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002cd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002ce4 <vPortEnableVFP+0x10>
 8002cd8:	6801      	ldr	r1, [r0, #0]
 8002cda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002cde:	6001      	str	r1, [r0, #0]
 8002ce0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8002ce2:	bf00      	nop
 8002ce4:	e000ed88 	.word	0xe000ed88

08002ce8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8002ce8:	b480      	push	{r7}
 8002cea:	b085      	sub	sp, #20
 8002cec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8002cee:	f3ef 8305 	mrs	r3, IPSR
 8002cf2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2b0f      	cmp	r3, #15
 8002cf8:	d914      	bls.n	8002d24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002cfa:	4a17      	ldr	r2, [pc, #92]	; (8002d58 <vPortValidateInterruptPriority+0x70>)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	4413      	add	r3, r2
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002d04:	4b15      	ldr	r3, [pc, #84]	; (8002d5c <vPortValidateInterruptPriority+0x74>)
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	7afa      	ldrb	r2, [r7, #11]
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d20a      	bcs.n	8002d24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8002d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d12:	f383 8811 	msr	BASEPRI, r3
 8002d16:	f3bf 8f6f 	isb	sy
 8002d1a:	f3bf 8f4f 	dsb	sy
 8002d1e:	607b      	str	r3, [r7, #4]
}
 8002d20:	bf00      	nop
 8002d22:	e7fe      	b.n	8002d22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002d24:	4b0e      	ldr	r3, [pc, #56]	; (8002d60 <vPortValidateInterruptPriority+0x78>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002d2c:	4b0d      	ldr	r3, [pc, #52]	; (8002d64 <vPortValidateInterruptPriority+0x7c>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d90a      	bls.n	8002d4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8002d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d38:	f383 8811 	msr	BASEPRI, r3
 8002d3c:	f3bf 8f6f 	isb	sy
 8002d40:	f3bf 8f4f 	dsb	sy
 8002d44:	603b      	str	r3, [r7, #0]
}
 8002d46:	bf00      	nop
 8002d48:	e7fe      	b.n	8002d48 <vPortValidateInterruptPriority+0x60>
	}
 8002d4a:	bf00      	nop
 8002d4c:	3714      	adds	r7, #20
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	e000e3f0 	.word	0xe000e3f0
 8002d5c:	2000139c 	.word	0x2000139c
 8002d60:	e000ed0c 	.word	0xe000ed0c
 8002d64:	200013a0 	.word	0x200013a0

08002d68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b08a      	sub	sp, #40	; 0x28
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002d70:	2300      	movs	r3, #0
 8002d72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002d74:	f7fe fcaa 	bl	80016cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002d78:	4b5b      	ldr	r3, [pc, #364]	; (8002ee8 <pvPortMalloc+0x180>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d101      	bne.n	8002d84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002d80:	f000 f920 	bl	8002fc4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002d84:	4b59      	ldr	r3, [pc, #356]	; (8002eec <pvPortMalloc+0x184>)
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	f040 8093 	bne.w	8002eb8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d01d      	beq.n	8002dd4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8002d98:	2208      	movs	r2, #8
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4413      	add	r3, r2
 8002d9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f003 0307 	and.w	r3, r3, #7
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d014      	beq.n	8002dd4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f023 0307 	bic.w	r3, r3, #7
 8002db0:	3308      	adds	r3, #8
 8002db2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f003 0307 	and.w	r3, r3, #7
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d00a      	beq.n	8002dd4 <pvPortMalloc+0x6c>
	__asm volatile
 8002dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc2:	f383 8811 	msr	BASEPRI, r3
 8002dc6:	f3bf 8f6f 	isb	sy
 8002dca:	f3bf 8f4f 	dsb	sy
 8002dce:	617b      	str	r3, [r7, #20]
}
 8002dd0:	bf00      	nop
 8002dd2:	e7fe      	b.n	8002dd2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d06e      	beq.n	8002eb8 <pvPortMalloc+0x150>
 8002dda:	4b45      	ldr	r3, [pc, #276]	; (8002ef0 <pvPortMalloc+0x188>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d869      	bhi.n	8002eb8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002de4:	4b43      	ldr	r3, [pc, #268]	; (8002ef4 <pvPortMalloc+0x18c>)
 8002de6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002de8:	4b42      	ldr	r3, [pc, #264]	; (8002ef4 <pvPortMalloc+0x18c>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002dee:	e004      	b.n	8002dfa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8002df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d903      	bls.n	8002e0c <pvPortMalloc+0xa4>
 8002e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d1f1      	bne.n	8002df0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002e0c:	4b36      	ldr	r3, [pc, #216]	; (8002ee8 <pvPortMalloc+0x180>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d050      	beq.n	8002eb8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002e16:	6a3b      	ldr	r3, [r7, #32]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2208      	movs	r2, #8
 8002e1c:	4413      	add	r3, r2
 8002e1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	6a3b      	ldr	r3, [r7, #32]
 8002e26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2a:	685a      	ldr	r2, [r3, #4]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	1ad2      	subs	r2, r2, r3
 8002e30:	2308      	movs	r3, #8
 8002e32:	005b      	lsls	r3, r3, #1
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d91f      	bls.n	8002e78 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002e38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4413      	add	r3, r2
 8002e3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	f003 0307 	and.w	r3, r3, #7
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d00a      	beq.n	8002e60 <pvPortMalloc+0xf8>
	__asm volatile
 8002e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e4e:	f383 8811 	msr	BASEPRI, r3
 8002e52:	f3bf 8f6f 	isb	sy
 8002e56:	f3bf 8f4f 	dsb	sy
 8002e5a:	613b      	str	r3, [r7, #16]
}
 8002e5c:	bf00      	nop
 8002e5e:	e7fe      	b.n	8002e5e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e62:	685a      	ldr	r2, [r3, #4]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	1ad2      	subs	r2, r2, r3
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002e72:	69b8      	ldr	r0, [r7, #24]
 8002e74:	f000 f908 	bl	8003088 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002e78:	4b1d      	ldr	r3, [pc, #116]	; (8002ef0 <pvPortMalloc+0x188>)
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	4a1b      	ldr	r2, [pc, #108]	; (8002ef0 <pvPortMalloc+0x188>)
 8002e84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002e86:	4b1a      	ldr	r3, [pc, #104]	; (8002ef0 <pvPortMalloc+0x188>)
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	4b1b      	ldr	r3, [pc, #108]	; (8002ef8 <pvPortMalloc+0x190>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d203      	bcs.n	8002e9a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002e92:	4b17      	ldr	r3, [pc, #92]	; (8002ef0 <pvPortMalloc+0x188>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a18      	ldr	r2, [pc, #96]	; (8002ef8 <pvPortMalloc+0x190>)
 8002e98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9c:	685a      	ldr	r2, [r3, #4]
 8002e9e:	4b13      	ldr	r3, [pc, #76]	; (8002eec <pvPortMalloc+0x184>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	431a      	orrs	r2, r3
 8002ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eaa:	2200      	movs	r2, #0
 8002eac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8002eae:	4b13      	ldr	r3, [pc, #76]	; (8002efc <pvPortMalloc+0x194>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	4a11      	ldr	r2, [pc, #68]	; (8002efc <pvPortMalloc+0x194>)
 8002eb6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002eb8:	f7fe fc16 	bl	80016e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	f003 0307 	and.w	r3, r3, #7
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d00a      	beq.n	8002edc <pvPortMalloc+0x174>
	__asm volatile
 8002ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eca:	f383 8811 	msr	BASEPRI, r3
 8002ece:	f3bf 8f6f 	isb	sy
 8002ed2:	f3bf 8f4f 	dsb	sy
 8002ed6:	60fb      	str	r3, [r7, #12]
}
 8002ed8:	bf00      	nop
 8002eda:	e7fe      	b.n	8002eda <pvPortMalloc+0x172>
	return pvReturn;
 8002edc:	69fb      	ldr	r3, [r7, #28]
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3728      	adds	r7, #40	; 0x28
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	20001f64 	.word	0x20001f64
 8002eec:	20001f78 	.word	0x20001f78
 8002ef0:	20001f68 	.word	0x20001f68
 8002ef4:	20001f5c 	.word	0x20001f5c
 8002ef8:	20001f6c 	.word	0x20001f6c
 8002efc:	20001f70 	.word	0x20001f70

08002f00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b086      	sub	sp, #24
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d04d      	beq.n	8002fae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002f12:	2308      	movs	r3, #8
 8002f14:	425b      	negs	r3, r3
 8002f16:	697a      	ldr	r2, [r7, #20]
 8002f18:	4413      	add	r3, r2
 8002f1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	685a      	ldr	r2, [r3, #4]
 8002f24:	4b24      	ldr	r3, [pc, #144]	; (8002fb8 <vPortFree+0xb8>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d10a      	bne.n	8002f44 <vPortFree+0x44>
	__asm volatile
 8002f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f32:	f383 8811 	msr	BASEPRI, r3
 8002f36:	f3bf 8f6f 	isb	sy
 8002f3a:	f3bf 8f4f 	dsb	sy
 8002f3e:	60fb      	str	r3, [r7, #12]
}
 8002f40:	bf00      	nop
 8002f42:	e7fe      	b.n	8002f42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d00a      	beq.n	8002f62 <vPortFree+0x62>
	__asm volatile
 8002f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f50:	f383 8811 	msr	BASEPRI, r3
 8002f54:	f3bf 8f6f 	isb	sy
 8002f58:	f3bf 8f4f 	dsb	sy
 8002f5c:	60bb      	str	r3, [r7, #8]
}
 8002f5e:	bf00      	nop
 8002f60:	e7fe      	b.n	8002f60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	685a      	ldr	r2, [r3, #4]
 8002f66:	4b14      	ldr	r3, [pc, #80]	; (8002fb8 <vPortFree+0xb8>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d01e      	beq.n	8002fae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d11a      	bne.n	8002fae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	685a      	ldr	r2, [r3, #4]
 8002f7c:	4b0e      	ldr	r3, [pc, #56]	; (8002fb8 <vPortFree+0xb8>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	43db      	mvns	r3, r3
 8002f82:	401a      	ands	r2, r3
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002f88:	f7fe fba0 	bl	80016cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	685a      	ldr	r2, [r3, #4]
 8002f90:	4b0a      	ldr	r3, [pc, #40]	; (8002fbc <vPortFree+0xbc>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4413      	add	r3, r2
 8002f96:	4a09      	ldr	r2, [pc, #36]	; (8002fbc <vPortFree+0xbc>)
 8002f98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002f9a:	6938      	ldr	r0, [r7, #16]
 8002f9c:	f000 f874 	bl	8003088 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8002fa0:	4b07      	ldr	r3, [pc, #28]	; (8002fc0 <vPortFree+0xc0>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	4a06      	ldr	r2, [pc, #24]	; (8002fc0 <vPortFree+0xc0>)
 8002fa8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8002faa:	f7fe fb9d 	bl	80016e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002fae:	bf00      	nop
 8002fb0:	3718      	adds	r7, #24
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	20001f78 	.word	0x20001f78
 8002fbc:	20001f68 	.word	0x20001f68
 8002fc0:	20001f74 	.word	0x20001f74

08002fc4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b085      	sub	sp, #20
 8002fc8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002fca:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8002fce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002fd0:	4b27      	ldr	r3, [pc, #156]	; (8003070 <prvHeapInit+0xac>)
 8002fd2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f003 0307 	and.w	r3, r3, #7
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d00c      	beq.n	8002ff8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	3307      	adds	r3, #7
 8002fe2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f023 0307 	bic.w	r3, r3, #7
 8002fea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002fec:	68ba      	ldr	r2, [r7, #8]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	4a1f      	ldr	r2, [pc, #124]	; (8003070 <prvHeapInit+0xac>)
 8002ff4:	4413      	add	r3, r2
 8002ff6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002ffc:	4a1d      	ldr	r2, [pc, #116]	; (8003074 <prvHeapInit+0xb0>)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003002:	4b1c      	ldr	r3, [pc, #112]	; (8003074 <prvHeapInit+0xb0>)
 8003004:	2200      	movs	r2, #0
 8003006:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	68ba      	ldr	r2, [r7, #8]
 800300c:	4413      	add	r3, r2
 800300e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003010:	2208      	movs	r2, #8
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	1a9b      	subs	r3, r3, r2
 8003016:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f023 0307 	bic.w	r3, r3, #7
 800301e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	4a15      	ldr	r2, [pc, #84]	; (8003078 <prvHeapInit+0xb4>)
 8003024:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003026:	4b14      	ldr	r3, [pc, #80]	; (8003078 <prvHeapInit+0xb4>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2200      	movs	r2, #0
 800302c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800302e:	4b12      	ldr	r3, [pc, #72]	; (8003078 <prvHeapInit+0xb4>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2200      	movs	r2, #0
 8003034:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	68fa      	ldr	r2, [r7, #12]
 800303e:	1ad2      	subs	r2, r2, r3
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003044:	4b0c      	ldr	r3, [pc, #48]	; (8003078 <prvHeapInit+0xb4>)
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	4a0a      	ldr	r2, [pc, #40]	; (800307c <prvHeapInit+0xb8>)
 8003052:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	4a09      	ldr	r2, [pc, #36]	; (8003080 <prvHeapInit+0xbc>)
 800305a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800305c:	4b09      	ldr	r3, [pc, #36]	; (8003084 <prvHeapInit+0xc0>)
 800305e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003062:	601a      	str	r2, [r3, #0]
}
 8003064:	bf00      	nop
 8003066:	3714      	adds	r7, #20
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr
 8003070:	200013a4 	.word	0x200013a4
 8003074:	20001f5c 	.word	0x20001f5c
 8003078:	20001f64 	.word	0x20001f64
 800307c:	20001f6c 	.word	0x20001f6c
 8003080:	20001f68 	.word	0x20001f68
 8003084:	20001f78 	.word	0x20001f78

08003088 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003088:	b480      	push	{r7}
 800308a:	b085      	sub	sp, #20
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003090:	4b28      	ldr	r3, [pc, #160]	; (8003134 <prvInsertBlockIntoFreeList+0xac>)
 8003092:	60fb      	str	r3, [r7, #12]
 8003094:	e002      	b.n	800309c <prvInsertBlockIntoFreeList+0x14>
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	60fb      	str	r3, [r7, #12]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d8f7      	bhi.n	8003096 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	68ba      	ldr	r2, [r7, #8]
 80030b0:	4413      	add	r3, r2
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d108      	bne.n	80030ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	685a      	ldr	r2, [r3, #4]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	441a      	add	r2, r3
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	68ba      	ldr	r2, [r7, #8]
 80030d4:	441a      	add	r2, r3
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d118      	bne.n	8003110 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	4b15      	ldr	r3, [pc, #84]	; (8003138 <prvInsertBlockIntoFreeList+0xb0>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d00d      	beq.n	8003106 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685a      	ldr	r2, [r3, #4]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	441a      	add	r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	601a      	str	r2, [r3, #0]
 8003104:	e008      	b.n	8003118 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003106:	4b0c      	ldr	r3, [pc, #48]	; (8003138 <prvInsertBlockIntoFreeList+0xb0>)
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	601a      	str	r2, [r3, #0]
 800310e:	e003      	b.n	8003118 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003118:	68fa      	ldr	r2, [r7, #12]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	429a      	cmp	r2, r3
 800311e:	d002      	beq.n	8003126 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003126:	bf00      	nop
 8003128:	3714      	adds	r7, #20
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	20001f5c 	.word	0x20001f5c
 8003138:	20001f64 	.word	0x20001f64

0800313c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003142:	2300      	movs	r3, #0
 8003144:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set In terrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003146:	2003      	movs	r0, #3
 8003148:	f000 f970 	bl	800342c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800314c:	2000      	movs	r0, #0
 800314e:	f000 f80d 	bl	800316c <HAL_InitTick>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d002      	beq.n	800315e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	71fb      	strb	r3, [r7, #7]
 800315c:	e001      	b.n	8003162 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800315e:	f003 ff4d 	bl	8006ffc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003162:	79fb      	ldrb	r3, [r7, #7]
}
 8003164:	4618      	mov	r0, r3
 8003166:	3708      	adds	r7, #8
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003174:	2300      	movs	r3, #0
 8003176:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003178:	4b17      	ldr	r3, [pc, #92]	; (80031d8 <HAL_InitTick+0x6c>)
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d023      	beq.n	80031c8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003180:	4b16      	ldr	r3, [pc, #88]	; (80031dc <HAL_InitTick+0x70>)
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	4b14      	ldr	r3, [pc, #80]	; (80031d8 <HAL_InitTick+0x6c>)
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	4619      	mov	r1, r3
 800318a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800318e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003192:	fbb2 f3f3 	udiv	r3, r2, r3
 8003196:	4618      	mov	r0, r3
 8003198:	f000 f98b 	bl	80034b2 <HAL_SYSTICK_Config>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d10f      	bne.n	80031c2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2b0f      	cmp	r3, #15
 80031a6:	d809      	bhi.n	80031bc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031a8:	2200      	movs	r2, #0
 80031aa:	6879      	ldr	r1, [r7, #4]
 80031ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80031b0:	f000 f947 	bl	8003442 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80031b4:	4a0a      	ldr	r2, [pc, #40]	; (80031e0 <HAL_InitTick+0x74>)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6013      	str	r3, [r2, #0]
 80031ba:	e007      	b.n	80031cc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	73fb      	strb	r3, [r7, #15]
 80031c0:	e004      	b.n	80031cc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	73fb      	strb	r3, [r7, #15]
 80031c6:	e001      	b.n	80031cc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80031cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3710      	adds	r7, #16
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	2000000c 	.word	0x2000000c
 80031dc:	20000284 	.word	0x20000284
 80031e0:	20000008 	.word	0x20000008

080031e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0
    //return xTaskGetTickCount();
    return uwTick;
 80031e8:	4b03      	ldr	r3, [pc, #12]	; (80031f8 <HAL_GetTick+0x14>)
 80031ea:	681b      	ldr	r3, [r3, #0]
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop
 80031f8:	20001f7c 	.word	0x20001f7c

080031fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003204:	f7ff ffee 	bl	80031e4 <HAL_GetTick>
 8003208:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003214:	d005      	beq.n	8003222 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003216:	4b0a      	ldr	r3, [pc, #40]	; (8003240 <HAL_Delay+0x44>)
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	461a      	mov	r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	4413      	add	r3, r2
 8003220:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003222:	bf00      	nop
 8003224:	f7ff ffde 	bl	80031e4 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	68fa      	ldr	r2, [r7, #12]
 8003230:	429a      	cmp	r2, r3
 8003232:	d8f7      	bhi.n	8003224 <HAL_Delay+0x28>
  {
  }
}
 8003234:	bf00      	nop
 8003236:	bf00      	nop
 8003238:	3710      	adds	r7, #16
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	2000000c 	.word	0x2000000c

08003244 <__NVIC_SetPriorityGrouping>:
{
 8003244:	b480      	push	{r7}
 8003246:	b085      	sub	sp, #20
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f003 0307 	and.w	r3, r3, #7
 8003252:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003254:	4b0c      	ldr	r3, [pc, #48]	; (8003288 <__NVIC_SetPriorityGrouping+0x44>)
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800325a:	68ba      	ldr	r2, [r7, #8]
 800325c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003260:	4013      	ands	r3, r2
 8003262:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800326c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003270:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003274:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003276:	4a04      	ldr	r2, [pc, #16]	; (8003288 <__NVIC_SetPriorityGrouping+0x44>)
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	60d3      	str	r3, [r2, #12]
}
 800327c:	bf00      	nop
 800327e:	3714      	adds	r7, #20
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr
 8003288:	e000ed00 	.word	0xe000ed00

0800328c <__NVIC_GetPriorityGrouping>:
{
 800328c:	b480      	push	{r7}
 800328e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003290:	4b04      	ldr	r3, [pc, #16]	; (80032a4 <__NVIC_GetPriorityGrouping+0x18>)
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	0a1b      	lsrs	r3, r3, #8
 8003296:	f003 0307 	and.w	r3, r3, #7
}
 800329a:	4618      	mov	r0, r3
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr
 80032a4:	e000ed00 	.word	0xe000ed00

080032a8 <__NVIC_EnableIRQ>:
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	4603      	mov	r3, r0
 80032b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	db0b      	blt.n	80032d2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032ba:	79fb      	ldrb	r3, [r7, #7]
 80032bc:	f003 021f 	and.w	r2, r3, #31
 80032c0:	4907      	ldr	r1, [pc, #28]	; (80032e0 <__NVIC_EnableIRQ+0x38>)
 80032c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032c6:	095b      	lsrs	r3, r3, #5
 80032c8:	2001      	movs	r0, #1
 80032ca:	fa00 f202 	lsl.w	r2, r0, r2
 80032ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80032d2:	bf00      	nop
 80032d4:	370c      	adds	r7, #12
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	e000e100 	.word	0xe000e100

080032e4 <__NVIC_DisableIRQ>:
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	4603      	mov	r3, r0
 80032ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	db12      	blt.n	800331c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032f6:	79fb      	ldrb	r3, [r7, #7]
 80032f8:	f003 021f 	and.w	r2, r3, #31
 80032fc:	490a      	ldr	r1, [pc, #40]	; (8003328 <__NVIC_DisableIRQ+0x44>)
 80032fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003302:	095b      	lsrs	r3, r3, #5
 8003304:	2001      	movs	r0, #1
 8003306:	fa00 f202 	lsl.w	r2, r0, r2
 800330a:	3320      	adds	r3, #32
 800330c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003310:	f3bf 8f4f 	dsb	sy
}
 8003314:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003316:	f3bf 8f6f 	isb	sy
}
 800331a:	bf00      	nop
}
 800331c:	bf00      	nop
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr
 8003328:	e000e100 	.word	0xe000e100

0800332c <__NVIC_SetPriority>:
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	4603      	mov	r3, r0
 8003334:	6039      	str	r1, [r7, #0]
 8003336:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800333c:	2b00      	cmp	r3, #0
 800333e:	db0a      	blt.n	8003356 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	b2da      	uxtb	r2, r3
 8003344:	490c      	ldr	r1, [pc, #48]	; (8003378 <__NVIC_SetPriority+0x4c>)
 8003346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800334a:	0112      	lsls	r2, r2, #4
 800334c:	b2d2      	uxtb	r2, r2
 800334e:	440b      	add	r3, r1
 8003350:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003354:	e00a      	b.n	800336c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	b2da      	uxtb	r2, r3
 800335a:	4908      	ldr	r1, [pc, #32]	; (800337c <__NVIC_SetPriority+0x50>)
 800335c:	79fb      	ldrb	r3, [r7, #7]
 800335e:	f003 030f 	and.w	r3, r3, #15
 8003362:	3b04      	subs	r3, #4
 8003364:	0112      	lsls	r2, r2, #4
 8003366:	b2d2      	uxtb	r2, r2
 8003368:	440b      	add	r3, r1
 800336a:	761a      	strb	r2, [r3, #24]
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr
 8003378:	e000e100 	.word	0xe000e100
 800337c:	e000ed00 	.word	0xe000ed00

08003380 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003380:	b480      	push	{r7}
 8003382:	b089      	sub	sp, #36	; 0x24
 8003384:	af00      	add	r7, sp, #0
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	60b9      	str	r1, [r7, #8]
 800338a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f003 0307 	and.w	r3, r3, #7
 8003392:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	f1c3 0307 	rsb	r3, r3, #7
 800339a:	2b04      	cmp	r3, #4
 800339c:	bf28      	it	cs
 800339e:	2304      	movcs	r3, #4
 80033a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	3304      	adds	r3, #4
 80033a6:	2b06      	cmp	r3, #6
 80033a8:	d902      	bls.n	80033b0 <NVIC_EncodePriority+0x30>
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	3b03      	subs	r3, #3
 80033ae:	e000      	b.n	80033b2 <NVIC_EncodePriority+0x32>
 80033b0:	2300      	movs	r3, #0
 80033b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	fa02 f303 	lsl.w	r3, r2, r3
 80033be:	43da      	mvns	r2, r3
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	401a      	ands	r2, r3
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	fa01 f303 	lsl.w	r3, r1, r3
 80033d2:	43d9      	mvns	r1, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033d8:	4313      	orrs	r3, r2
         );
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3724      	adds	r7, #36	; 0x24
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
	...

080033e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	3b01      	subs	r3, #1
 80033f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033f8:	d301      	bcc.n	80033fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033fa:	2301      	movs	r3, #1
 80033fc:	e00f      	b.n	800341e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033fe:	4a0a      	ldr	r2, [pc, #40]	; (8003428 <SysTick_Config+0x40>)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	3b01      	subs	r3, #1
 8003404:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003406:	210f      	movs	r1, #15
 8003408:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800340c:	f7ff ff8e 	bl	800332c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003410:	4b05      	ldr	r3, [pc, #20]	; (8003428 <SysTick_Config+0x40>)
 8003412:	2200      	movs	r2, #0
 8003414:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003416:	4b04      	ldr	r3, [pc, #16]	; (8003428 <SysTick_Config+0x40>)
 8003418:	2207      	movs	r2, #7
 800341a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3708      	adds	r7, #8
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	e000e010 	.word	0xe000e010

0800342c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f7ff ff05 	bl	8003244 <__NVIC_SetPriorityGrouping>
}
 800343a:	bf00      	nop
 800343c:	3708      	adds	r7, #8
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}

08003442 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003442:	b580      	push	{r7, lr}
 8003444:	b086      	sub	sp, #24
 8003446:	af00      	add	r7, sp, #0
 8003448:	4603      	mov	r3, r0
 800344a:	60b9      	str	r1, [r7, #8]
 800344c:	607a      	str	r2, [r7, #4]
 800344e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003450:	2300      	movs	r3, #0
 8003452:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003454:	f7ff ff1a 	bl	800328c <__NVIC_GetPriorityGrouping>
 8003458:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	68b9      	ldr	r1, [r7, #8]
 800345e:	6978      	ldr	r0, [r7, #20]
 8003460:	f7ff ff8e 	bl	8003380 <NVIC_EncodePriority>
 8003464:	4602      	mov	r2, r0
 8003466:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800346a:	4611      	mov	r1, r2
 800346c:	4618      	mov	r0, r3
 800346e:	f7ff ff5d 	bl	800332c <__NVIC_SetPriority>
}
 8003472:	bf00      	nop
 8003474:	3718      	adds	r7, #24
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}

0800347a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800347a:	b580      	push	{r7, lr}
 800347c:	b082      	sub	sp, #8
 800347e:	af00      	add	r7, sp, #0
 8003480:	4603      	mov	r3, r0
 8003482:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003484:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003488:	4618      	mov	r0, r3
 800348a:	f7ff ff0d 	bl	80032a8 <__NVIC_EnableIRQ>
}
 800348e:	bf00      	nop
 8003490:	3708      	adds	r7, #8
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003496:	b580      	push	{r7, lr}
 8003498:	b082      	sub	sp, #8
 800349a:	af00      	add	r7, sp, #0
 800349c:	4603      	mov	r3, r0
 800349e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80034a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a4:	4618      	mov	r0, r3
 80034a6:	f7ff ff1d 	bl	80032e4 <__NVIC_DisableIRQ>
}
 80034aa:	bf00      	nop
 80034ac:	3708      	adds	r7, #8
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034b2:	b580      	push	{r7, lr}
 80034b4:	b082      	sub	sp, #8
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f7ff ff94 	bl	80033e8 <SysTick_Config>
 80034c0:	4603      	mov	r3, r0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3708      	adds	r7, #8
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
	...

080034cc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b085      	sub	sp, #20
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d101      	bne.n	80034de <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e098      	b.n	8003610 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	461a      	mov	r2, r3
 80034e4:	4b4d      	ldr	r3, [pc, #308]	; (800361c <HAL_DMA_Init+0x150>)
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d80f      	bhi.n	800350a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	461a      	mov	r2, r3
 80034f0:	4b4b      	ldr	r3, [pc, #300]	; (8003620 <HAL_DMA_Init+0x154>)
 80034f2:	4413      	add	r3, r2
 80034f4:	4a4b      	ldr	r2, [pc, #300]	; (8003624 <HAL_DMA_Init+0x158>)
 80034f6:	fba2 2303 	umull	r2, r3, r2, r3
 80034fa:	091b      	lsrs	r3, r3, #4
 80034fc:	009a      	lsls	r2, r3, #2
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a48      	ldr	r2, [pc, #288]	; (8003628 <HAL_DMA_Init+0x15c>)
 8003506:	641a      	str	r2, [r3, #64]	; 0x40
 8003508:	e00e      	b.n	8003528 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	461a      	mov	r2, r3
 8003510:	4b46      	ldr	r3, [pc, #280]	; (800362c <HAL_DMA_Init+0x160>)
 8003512:	4413      	add	r3, r2
 8003514:	4a43      	ldr	r2, [pc, #268]	; (8003624 <HAL_DMA_Init+0x158>)
 8003516:	fba2 2303 	umull	r2, r3, r2, r3
 800351a:	091b      	lsrs	r3, r3, #4
 800351c:	009a      	lsls	r2, r3, #2
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a42      	ldr	r2, [pc, #264]	; (8003630 <HAL_DMA_Init+0x164>)
 8003526:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2202      	movs	r2, #2
 800352c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800353e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003542:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800354c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003558:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003564:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800356c:	68fa      	ldr	r2, [r7, #12]
 800356e:	4313      	orrs	r3, r2
 8003570:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68fa      	ldr	r2, [r7, #12]
 8003578:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003582:	d039      	beq.n	80035f8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003588:	4a27      	ldr	r2, [pc, #156]	; (8003628 <HAL_DMA_Init+0x15c>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d11a      	bne.n	80035c4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800358e:	4b29      	ldr	r3, [pc, #164]	; (8003634 <HAL_DMA_Init+0x168>)
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003596:	f003 031c 	and.w	r3, r3, #28
 800359a:	210f      	movs	r1, #15
 800359c:	fa01 f303 	lsl.w	r3, r1, r3
 80035a0:	43db      	mvns	r3, r3
 80035a2:	4924      	ldr	r1, [pc, #144]	; (8003634 <HAL_DMA_Init+0x168>)
 80035a4:	4013      	ands	r3, r2
 80035a6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80035a8:	4b22      	ldr	r3, [pc, #136]	; (8003634 <HAL_DMA_Init+0x168>)
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6859      	ldr	r1, [r3, #4]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b4:	f003 031c 	and.w	r3, r3, #28
 80035b8:	fa01 f303 	lsl.w	r3, r1, r3
 80035bc:	491d      	ldr	r1, [pc, #116]	; (8003634 <HAL_DMA_Init+0x168>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	600b      	str	r3, [r1, #0]
 80035c2:	e019      	b.n	80035f8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80035c4:	4b1c      	ldr	r3, [pc, #112]	; (8003638 <HAL_DMA_Init+0x16c>)
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035cc:	f003 031c 	and.w	r3, r3, #28
 80035d0:	210f      	movs	r1, #15
 80035d2:	fa01 f303 	lsl.w	r3, r1, r3
 80035d6:	43db      	mvns	r3, r3
 80035d8:	4917      	ldr	r1, [pc, #92]	; (8003638 <HAL_DMA_Init+0x16c>)
 80035da:	4013      	ands	r3, r2
 80035dc:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80035de:	4b16      	ldr	r3, [pc, #88]	; (8003638 <HAL_DMA_Init+0x16c>)
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6859      	ldr	r1, [r3, #4]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ea:	f003 031c 	and.w	r3, r3, #28
 80035ee:	fa01 f303 	lsl.w	r3, r1, r3
 80035f2:	4911      	ldr	r1, [pc, #68]	; (8003638 <HAL_DMA_Init+0x16c>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2201      	movs	r2, #1
 8003602:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800360e:	2300      	movs	r3, #0
}
 8003610:	4618      	mov	r0, r3
 8003612:	3714      	adds	r7, #20
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr
 800361c:	40020407 	.word	0x40020407
 8003620:	bffdfff8 	.word	0xbffdfff8
 8003624:	cccccccd 	.word	0xcccccccd
 8003628:	40020000 	.word	0x40020000
 800362c:	bffdfbf8 	.word	0xbffdfbf8
 8003630:	40020400 	.word	0x40020400
 8003634:	400200a8 	.word	0x400200a8
 8003638:	400204a8 	.word	0x400204a8

0800363c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b086      	sub	sp, #24
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	607a      	str	r2, [r7, #4]
 8003648:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800364a:	2300      	movs	r3, #0
 800364c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003654:	2b01      	cmp	r3, #1
 8003656:	d101      	bne.n	800365c <HAL_DMA_Start_IT+0x20>
 8003658:	2302      	movs	r3, #2
 800365a:	e04b      	b.n	80036f4 <HAL_DMA_Start_IT+0xb8>
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800366a:	b2db      	uxtb	r3, r3
 800366c:	2b01      	cmp	r3, #1
 800366e:	d13a      	bne.n	80036e6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2202      	movs	r2, #2
 8003674:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2200      	movs	r2, #0
 800367c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f022 0201 	bic.w	r2, r2, #1
 800368c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	68b9      	ldr	r1, [r7, #8]
 8003694:	68f8      	ldr	r0, [r7, #12]
 8003696:	f000 f969 	bl	800396c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d008      	beq.n	80036b4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f042 020e 	orr.w	r2, r2, #14
 80036b0:	601a      	str	r2, [r3, #0]
 80036b2:	e00f      	b.n	80036d4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f022 0204 	bic.w	r2, r2, #4
 80036c2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f042 020a 	orr.w	r2, r2, #10
 80036d2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f042 0201 	orr.w	r2, r2, #1
 80036e2:	601a      	str	r2, [r3, #0]
 80036e4:	e005      	b.n	80036f2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80036ee:	2302      	movs	r3, #2
 80036f0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80036f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3718      	adds	r7, #24
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}

080036fc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003704:	2300      	movs	r3, #0
 8003706:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800370e:	b2db      	uxtb	r3, r3
 8003710:	2b02      	cmp	r3, #2
 8003712:	d005      	beq.n	8003720 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2204      	movs	r2, #4
 8003718:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	73fb      	strb	r3, [r7, #15]
 800371e:	e029      	b.n	8003774 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f022 020e 	bic.w	r2, r2, #14
 800372e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 0201 	bic.w	r2, r2, #1
 800373e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003744:	f003 021c 	and.w	r2, r3, #28
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374c:	2101      	movs	r1, #1
 800374e:	fa01 f202 	lsl.w	r2, r1, r2
 8003752:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003768:	2b00      	cmp	r3, #0
 800376a:	d003      	beq.n	8003774 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	4798      	blx	r3
    }
  }
  return status;
 8003774:	7bfb      	ldrb	r3, [r7, #15]
}
 8003776:	4618      	mov	r0, r3
 8003778:	3710      	adds	r7, #16
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}

0800377e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800377e:	b580      	push	{r7, lr}
 8003780:	b084      	sub	sp, #16
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800379a:	f003 031c 	and.w	r3, r3, #28
 800379e:	2204      	movs	r2, #4
 80037a0:	409a      	lsls	r2, r3
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	4013      	ands	r3, r2
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d026      	beq.n	80037f8 <HAL_DMA_IRQHandler+0x7a>
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	f003 0304 	and.w	r3, r3, #4
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d021      	beq.n	80037f8 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0320 	and.w	r3, r3, #32
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d107      	bne.n	80037d2 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f022 0204 	bic.w	r2, r2, #4
 80037d0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d6:	f003 021c 	and.w	r2, r3, #28
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037de:	2104      	movs	r1, #4
 80037e0:	fa01 f202 	lsl.w	r2, r1, r2
 80037e4:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d071      	beq.n	80038d2 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80037f6:	e06c      	b.n	80038d2 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037fc:	f003 031c 	and.w	r3, r3, #28
 8003800:	2202      	movs	r2, #2
 8003802:	409a      	lsls	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	4013      	ands	r3, r2
 8003808:	2b00      	cmp	r3, #0
 800380a:	d02e      	beq.n	800386a <HAL_DMA_IRQHandler+0xec>
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d029      	beq.n	800386a <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0320 	and.w	r3, r3, #32
 8003820:	2b00      	cmp	r3, #0
 8003822:	d10b      	bne.n	800383c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f022 020a 	bic.w	r2, r2, #10
 8003832:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003840:	f003 021c 	and.w	r2, r3, #28
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003848:	2102      	movs	r1, #2
 800384a:	fa01 f202 	lsl.w	r2, r1, r2
 800384e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385c:	2b00      	cmp	r3, #0
 800385e:	d038      	beq.n	80038d2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003868:	e033      	b.n	80038d2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800386e:	f003 031c 	and.w	r3, r3, #28
 8003872:	2208      	movs	r2, #8
 8003874:	409a      	lsls	r2, r3
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	4013      	ands	r3, r2
 800387a:	2b00      	cmp	r3, #0
 800387c:	d02a      	beq.n	80038d4 <HAL_DMA_IRQHandler+0x156>
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	f003 0308 	and.w	r3, r3, #8
 8003884:	2b00      	cmp	r3, #0
 8003886:	d025      	beq.n	80038d4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f022 020e 	bic.w	r2, r2, #14
 8003896:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800389c:	f003 021c 	and.w	r2, r3, #28
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a4:	2101      	movs	r1, #1
 80038a6:	fa01 f202 	lsl.w	r2, r1, r2
 80038aa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2201      	movs	r2, #1
 80038b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d004      	beq.n	80038d4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80038d2:	bf00      	nop
 80038d4:	bf00      	nop
}
 80038d6:	3710      	adds	r7, #16
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)( DMA_HandleTypeDef * _hdma))
{
 80038dc:	b480      	push	{r7}
 80038de:	b087      	sub	sp, #28
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	460b      	mov	r3, r1
 80038e6:	607a      	str	r2, [r7, #4]
 80038e8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80038ea:	2300      	movs	r3, #0
 80038ec:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d101      	bne.n	80038fc <HAL_DMA_RegisterCallback+0x20>
 80038f8:	2302      	movs	r3, #2
 80038fa:	e031      	b.n	8003960 <HAL_DMA_RegisterCallback+0x84>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800390a:	b2db      	uxtb	r3, r3
 800390c:	2b01      	cmp	r3, #1
 800390e:	d120      	bne.n	8003952 <HAL_DMA_RegisterCallback+0x76>
  {
    switch (CallbackID)
 8003910:	7afb      	ldrb	r3, [r7, #11]
 8003912:	2b03      	cmp	r3, #3
 8003914:	d81a      	bhi.n	800394c <HAL_DMA_RegisterCallback+0x70>
 8003916:	a201      	add	r2, pc, #4	; (adr r2, 800391c <HAL_DMA_RegisterCallback+0x40>)
 8003918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800391c:	0800392d 	.word	0x0800392d
 8003920:	08003935 	.word	0x08003935
 8003924:	0800393d 	.word	0x0800393d
 8003928:	08003945 	.word	0x08003945
    {
     case  HAL_DMA_XFER_CPLT_CB_ID:
           hdma->XferCpltCallback = pCallback;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	62da      	str	r2, [r3, #44]	; 0x2c
           break;
 8003932:	e010      	b.n	8003956 <HAL_DMA_RegisterCallback+0x7a>

     case  HAL_DMA_XFER_HALFCPLT_CB_ID:
           hdma->XferHalfCpltCallback = pCallback;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	631a      	str	r2, [r3, #48]	; 0x30
           break;
 800393a:	e00c      	b.n	8003956 <HAL_DMA_RegisterCallback+0x7a>

     case  HAL_DMA_XFER_ERROR_CB_ID:
           hdma->XferErrorCallback = pCallback;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	635a      	str	r2, [r3, #52]	; 0x34
           break;
 8003942:	e008      	b.n	8003956 <HAL_DMA_RegisterCallback+0x7a>

     case  HAL_DMA_XFER_ABORT_CB_ID:
           hdma->XferAbortCallback = pCallback;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	639a      	str	r2, [r3, #56]	; 0x38
           break;
 800394a:	e004      	b.n	8003956 <HAL_DMA_RegisterCallback+0x7a>

     default:
           status = HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	75fb      	strb	r3, [r7, #23]
           break;
 8003950:	e001      	b.n	8003956 <HAL_DMA_RegisterCallback+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800395e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003960:	4618      	mov	r0, r3
 8003962:	371c      	adds	r7, #28
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800396c:	b480      	push	{r7}
 800396e:	b085      	sub	sp, #20
 8003970:	af00      	add	r7, sp, #0
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	607a      	str	r2, [r7, #4]
 8003978:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800397e:	f003 021c 	and.w	r2, r3, #28
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003986:	2101      	movs	r1, #1
 8003988:	fa01 f202 	lsl.w	r2, r1, r2
 800398c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	683a      	ldr	r2, [r7, #0]
 8003994:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	2b10      	cmp	r3, #16
 800399c:	d108      	bne.n	80039b0 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	68ba      	ldr	r2, [r7, #8]
 80039ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80039ae:	e007      	b.n	80039c0 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68ba      	ldr	r2, [r7, #8]
 80039b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	60da      	str	r2, [r3, #12]
}
 80039c0:	bf00      	nop
 80039c2:	3714      	adds	r7, #20
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b087      	sub	sp, #28
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80039d6:	2300      	movs	r3, #0
 80039d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039da:	e154      	b.n	8003c86 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	2101      	movs	r1, #1
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	fa01 f303 	lsl.w	r3, r1, r3
 80039e8:	4013      	ands	r3, r2
 80039ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	f000 8146 	beq.w	8003c80 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f003 0303 	and.w	r3, r3, #3
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d005      	beq.n	8003a0c <HAL_GPIO_Init+0x40>
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f003 0303 	and.w	r3, r3, #3
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d130      	bne.n	8003a6e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	005b      	lsls	r3, r3, #1
 8003a16:	2203      	movs	r2, #3
 8003a18:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1c:	43db      	mvns	r3, r3
 8003a1e:	693a      	ldr	r2, [r7, #16]
 8003a20:	4013      	ands	r3, r2
 8003a22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	68da      	ldr	r2, [r3, #12]
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	005b      	lsls	r3, r3, #1
 8003a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a30:	693a      	ldr	r2, [r7, #16]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	693a      	ldr	r2, [r7, #16]
 8003a3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a42:	2201      	movs	r2, #1
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4a:	43db      	mvns	r3, r3
 8003a4c:	693a      	ldr	r2, [r7, #16]
 8003a4e:	4013      	ands	r3, r2
 8003a50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	091b      	lsrs	r3, r3, #4
 8003a58:	f003 0201 	and.w	r2, r3, #1
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a62:	693a      	ldr	r2, [r7, #16]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	693a      	ldr	r2, [r7, #16]
 8003a6c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f003 0303 	and.w	r3, r3, #3
 8003a76:	2b03      	cmp	r3, #3
 8003a78:	d017      	beq.n	8003aaa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	005b      	lsls	r3, r3, #1
 8003a84:	2203      	movs	r2, #3
 8003a86:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8a:	43db      	mvns	r3, r3
 8003a8c:	693a      	ldr	r2, [r7, #16]
 8003a8e:	4013      	ands	r3, r2
 8003a90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	689a      	ldr	r2, [r3, #8]
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	005b      	lsls	r3, r3, #1
 8003a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9e:	693a      	ldr	r2, [r7, #16]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	693a      	ldr	r2, [r7, #16]
 8003aa8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f003 0303 	and.w	r3, r3, #3
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d123      	bne.n	8003afe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	08da      	lsrs	r2, r3, #3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	3208      	adds	r2, #8
 8003abe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ac2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	f003 0307 	and.w	r3, r3, #7
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	220f      	movs	r2, #15
 8003ace:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad2:	43db      	mvns	r3, r3
 8003ad4:	693a      	ldr	r2, [r7, #16]
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	691a      	ldr	r2, [r3, #16]
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	f003 0307 	and.w	r3, r3, #7
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aea:	693a      	ldr	r2, [r7, #16]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	08da      	lsrs	r2, r3, #3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	3208      	adds	r2, #8
 8003af8:	6939      	ldr	r1, [r7, #16]
 8003afa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	005b      	lsls	r3, r3, #1
 8003b08:	2203      	movs	r2, #3
 8003b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0e:	43db      	mvns	r3, r3
 8003b10:	693a      	ldr	r2, [r7, #16]
 8003b12:	4013      	ands	r3, r2
 8003b14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f003 0203 	and.w	r2, r3, #3
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	005b      	lsls	r3, r3, #1
 8003b22:	fa02 f303 	lsl.w	r3, r2, r3
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	693a      	ldr	r2, [r7, #16]
 8003b30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	f000 80a0 	beq.w	8003c80 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b40:	4b58      	ldr	r3, [pc, #352]	; (8003ca4 <HAL_GPIO_Init+0x2d8>)
 8003b42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b44:	4a57      	ldr	r2, [pc, #348]	; (8003ca4 <HAL_GPIO_Init+0x2d8>)
 8003b46:	f043 0301 	orr.w	r3, r3, #1
 8003b4a:	6613      	str	r3, [r2, #96]	; 0x60
 8003b4c:	4b55      	ldr	r3, [pc, #340]	; (8003ca4 <HAL_GPIO_Init+0x2d8>)
 8003b4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b50:	f003 0301 	and.w	r3, r3, #1
 8003b54:	60bb      	str	r3, [r7, #8]
 8003b56:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003b58:	4a53      	ldr	r2, [pc, #332]	; (8003ca8 <HAL_GPIO_Init+0x2dc>)
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	089b      	lsrs	r3, r3, #2
 8003b5e:	3302      	adds	r3, #2
 8003b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	f003 0303 	and.w	r3, r3, #3
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	220f      	movs	r2, #15
 8003b70:	fa02 f303 	lsl.w	r3, r2, r3
 8003b74:	43db      	mvns	r3, r3
 8003b76:	693a      	ldr	r2, [r7, #16]
 8003b78:	4013      	ands	r3, r2
 8003b7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003b82:	d019      	beq.n	8003bb8 <HAL_GPIO_Init+0x1ec>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4a49      	ldr	r2, [pc, #292]	; (8003cac <HAL_GPIO_Init+0x2e0>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d013      	beq.n	8003bb4 <HAL_GPIO_Init+0x1e8>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4a48      	ldr	r2, [pc, #288]	; (8003cb0 <HAL_GPIO_Init+0x2e4>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d00d      	beq.n	8003bb0 <HAL_GPIO_Init+0x1e4>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4a47      	ldr	r2, [pc, #284]	; (8003cb4 <HAL_GPIO_Init+0x2e8>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d007      	beq.n	8003bac <HAL_GPIO_Init+0x1e0>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4a46      	ldr	r2, [pc, #280]	; (8003cb8 <HAL_GPIO_Init+0x2ec>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d101      	bne.n	8003ba8 <HAL_GPIO_Init+0x1dc>
 8003ba4:	2304      	movs	r3, #4
 8003ba6:	e008      	b.n	8003bba <HAL_GPIO_Init+0x1ee>
 8003ba8:	2307      	movs	r3, #7
 8003baa:	e006      	b.n	8003bba <HAL_GPIO_Init+0x1ee>
 8003bac:	2303      	movs	r3, #3
 8003bae:	e004      	b.n	8003bba <HAL_GPIO_Init+0x1ee>
 8003bb0:	2302      	movs	r3, #2
 8003bb2:	e002      	b.n	8003bba <HAL_GPIO_Init+0x1ee>
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e000      	b.n	8003bba <HAL_GPIO_Init+0x1ee>
 8003bb8:	2300      	movs	r3, #0
 8003bba:	697a      	ldr	r2, [r7, #20]
 8003bbc:	f002 0203 	and.w	r2, r2, #3
 8003bc0:	0092      	lsls	r2, r2, #2
 8003bc2:	4093      	lsls	r3, r2
 8003bc4:	693a      	ldr	r2, [r7, #16]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003bca:	4937      	ldr	r1, [pc, #220]	; (8003ca8 <HAL_GPIO_Init+0x2dc>)
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	089b      	lsrs	r3, r3, #2
 8003bd0:	3302      	adds	r3, #2
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003bd8:	4b38      	ldr	r3, [pc, #224]	; (8003cbc <HAL_GPIO_Init+0x2f0>)
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	43db      	mvns	r3, r3
 8003be2:	693a      	ldr	r2, [r7, #16]
 8003be4:	4013      	ands	r3, r2
 8003be6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d003      	beq.n	8003bfc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003bf4:	693a      	ldr	r2, [r7, #16]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003bfc:	4a2f      	ldr	r2, [pc, #188]	; (8003cbc <HAL_GPIO_Init+0x2f0>)
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003c02:	4b2e      	ldr	r3, [pc, #184]	; (8003cbc <HAL_GPIO_Init+0x2f0>)
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	43db      	mvns	r3, r3
 8003c0c:	693a      	ldr	r2, [r7, #16]
 8003c0e:	4013      	ands	r3, r2
 8003c10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d003      	beq.n	8003c26 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003c1e:	693a      	ldr	r2, [r7, #16]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c26:	4a25      	ldr	r2, [pc, #148]	; (8003cbc <HAL_GPIO_Init+0x2f0>)
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003c2c:	4b23      	ldr	r3, [pc, #140]	; (8003cbc <HAL_GPIO_Init+0x2f0>)
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	43db      	mvns	r3, r3
 8003c36:	693a      	ldr	r2, [r7, #16]
 8003c38:	4013      	ands	r3, r2
 8003c3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d003      	beq.n	8003c50 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003c48:	693a      	ldr	r2, [r7, #16]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c50:	4a1a      	ldr	r2, [pc, #104]	; (8003cbc <HAL_GPIO_Init+0x2f0>)
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003c56:	4b19      	ldr	r3, [pc, #100]	; (8003cbc <HAL_GPIO_Init+0x2f0>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	43db      	mvns	r3, r3
 8003c60:	693a      	ldr	r2, [r7, #16]
 8003c62:	4013      	ands	r3, r2
 8003c64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d003      	beq.n	8003c7a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003c72:	693a      	ldr	r2, [r7, #16]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003c7a:	4a10      	ldr	r2, [pc, #64]	; (8003cbc <HAL_GPIO_Init+0x2f0>)
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	3301      	adds	r3, #1
 8003c84:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	fa22 f303 	lsr.w	r3, r2, r3
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	f47f aea3 	bne.w	80039dc <HAL_GPIO_Init+0x10>
  }
}
 8003c96:	bf00      	nop
 8003c98:	bf00      	nop
 8003c9a:	371c      	adds	r7, #28
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr
 8003ca4:	40021000 	.word	0x40021000
 8003ca8:	40010000 	.word	0x40010000
 8003cac:	48000400 	.word	0x48000400
 8003cb0:	48000800 	.word	0x48000800
 8003cb4:	48000c00 	.word	0x48000c00
 8003cb8:	48001000 	.word	0x48001000
 8003cbc:	40010400 	.word	0x40010400

08003cc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	460b      	mov	r3, r1
 8003cca:	807b      	strh	r3, [r7, #2]
 8003ccc:	4613      	mov	r3, r2
 8003cce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003cd0:	787b      	ldrb	r3, [r7, #1]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d003      	beq.n	8003cde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003cd6:	887a      	ldrh	r2, [r7, #2]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003cdc:	e002      	b.n	8003ce4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003cde:	887a      	ldrh	r2, [r7, #2]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003ce4:	bf00      	nop
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003cfa:	4b08      	ldr	r3, [pc, #32]	; (8003d1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003cfc:	695a      	ldr	r2, [r3, #20]
 8003cfe:	88fb      	ldrh	r3, [r7, #6]
 8003d00:	4013      	ands	r3, r2
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d006      	beq.n	8003d14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d06:	4a05      	ldr	r2, [pc, #20]	; (8003d1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d08:	88fb      	ldrh	r3, [r7, #6]
 8003d0a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d0c:	88fb      	ldrh	r3, [r7, #6]
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f003 fc58 	bl	80075c4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003d14:	bf00      	nop
 8003d16:	3708      	adds	r7, #8
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	40010400 	.word	0x40010400

08003d20 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003d20:	b480      	push	{r7}
 8003d22:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d24:	4b05      	ldr	r3, [pc, #20]	; (8003d3c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a04      	ldr	r2, [pc, #16]	; (8003d3c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003d2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d2e:	6013      	str	r3, [r2, #0]
}
 8003d30:	bf00      	nop
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	40007000 	.word	0x40007000

08003d40 <HAL_PWR_ConfigPVD>:
  *         more details about the voltage thresholds corresponding to each
  *         detection level.
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 8003d48:	4b2b      	ldr	r3, [pc, #172]	; (8003df8 <HAL_PWR_ConfigPVD+0xb8>)
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	f023 020e 	bic.w	r2, r3, #14
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4928      	ldr	r1, [pc, #160]	; (8003df8 <HAL_PWR_ConfigPVD+0xb8>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	604b      	str	r3, [r1, #4]

  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 8003d5a:	4b28      	ldr	r3, [pc, #160]	; (8003dfc <HAL_PWR_ConfigPVD+0xbc>)
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	4a27      	ldr	r2, [pc, #156]	; (8003dfc <HAL_PWR_ConfigPVD+0xbc>)
 8003d60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d64:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 8003d66:	4b25      	ldr	r3, [pc, #148]	; (8003dfc <HAL_PWR_ConfigPVD+0xbc>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a24      	ldr	r2, [pc, #144]	; (8003dfc <HAL_PWR_ConfigPVD+0xbc>)
 8003d6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d70:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 8003d72:	4b22      	ldr	r3, [pc, #136]	; (8003dfc <HAL_PWR_ConfigPVD+0xbc>)
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	4a21      	ldr	r2, [pc, #132]	; (8003dfc <HAL_PWR_ConfigPVD+0xbc>)
 8003d78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d7c:	60d3      	str	r3, [r2, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8003d7e:	4b1f      	ldr	r3, [pc, #124]	; (8003dfc <HAL_PWR_ConfigPVD+0xbc>)
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	4a1e      	ldr	r2, [pc, #120]	; (8003dfc <HAL_PWR_ConfigPVD+0xbc>)
 8003d84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d88:	6093      	str	r3, [r2, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d005      	beq.n	8003da2 <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8003d96:	4b19      	ldr	r3, [pc, #100]	; (8003dfc <HAL_PWR_ConfigPVD+0xbc>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a18      	ldr	r2, [pc, #96]	; (8003dfc <HAL_PWR_ConfigPVD+0xbc>)
 8003d9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003da0:	6013      	str	r3, [r2, #0]
  }

  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d005      	beq.n	8003dba <HAL_PWR_ConfigPVD+0x7a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 8003dae:	4b13      	ldr	r3, [pc, #76]	; (8003dfc <HAL_PWR_ConfigPVD+0xbc>)
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	4a12      	ldr	r2, [pc, #72]	; (8003dfc <HAL_PWR_ConfigPVD+0xbc>)
 8003db4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003db8:	6053      	str	r3, [r2, #4]
  }

  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	f003 0301 	and.w	r3, r3, #1
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d005      	beq.n	8003dd2 <HAL_PWR_ConfigPVD+0x92>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8003dc6:	4b0d      	ldr	r3, [pc, #52]	; (8003dfc <HAL_PWR_ConfigPVD+0xbc>)
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	4a0c      	ldr	r2, [pc, #48]	; (8003dfc <HAL_PWR_ConfigPVD+0xbc>)
 8003dcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dd0:	6093      	str	r3, [r2, #8]
  }

  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f003 0302 	and.w	r3, r3, #2
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d005      	beq.n	8003dea <HAL_PWR_ConfigPVD+0xaa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8003dde:	4b07      	ldr	r3, [pc, #28]	; (8003dfc <HAL_PWR_ConfigPVD+0xbc>)
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	4a06      	ldr	r2, [pc, #24]	; (8003dfc <HAL_PWR_ConfigPVD+0xbc>)
 8003de4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003de8:	60d3      	str	r3, [r2, #12]
  }

  return HAL_OK;
 8003dea:	2300      	movs	r3, #0
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr
 8003df8:	40007000 	.word	0x40007000
 8003dfc:	40010400 	.word	0x40010400

08003e00 <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Power Voltage Detector (PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 8003e00:	b480      	push	{r7}
 8003e02:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 8003e04:	4b05      	ldr	r3, [pc, #20]	; (8003e1c <HAL_PWR_EnablePVD+0x1c>)
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	4a04      	ldr	r2, [pc, #16]	; (8003e1c <HAL_PWR_EnablePVD+0x1c>)
 8003e0a:	f043 0301 	orr.w	r3, r3, #1
 8003e0e:	6053      	str	r3, [r2, #4]
}
 8003e10:	bf00      	nop
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop
 8003e1c:	40007000 	.word	0x40007000

08003e20 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003e20:	b480      	push	{r7}
 8003e22:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003e24:	4b04      	ldr	r3, [pc, #16]	; (8003e38 <HAL_PWREx_GetVoltageRange+0x18>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	40007000 	.word	0x40007000

08003e3c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b085      	sub	sp, #20
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e4a:	d130      	bne.n	8003eae <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e4c:	4b23      	ldr	r3, [pc, #140]	; (8003edc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e58:	d038      	beq.n	8003ecc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e5a:	4b20      	ldr	r3, [pc, #128]	; (8003edc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e62:	4a1e      	ldr	r2, [pc, #120]	; (8003edc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e68:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003e6a:	4b1d      	ldr	r3, [pc, #116]	; (8003ee0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2232      	movs	r2, #50	; 0x32
 8003e70:	fb02 f303 	mul.w	r3, r2, r3
 8003e74:	4a1b      	ldr	r2, [pc, #108]	; (8003ee4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003e76:	fba2 2303 	umull	r2, r3, r2, r3
 8003e7a:	0c9b      	lsrs	r3, r3, #18
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e80:	e002      	b.n	8003e88 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	3b01      	subs	r3, #1
 8003e86:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e88:	4b14      	ldr	r3, [pc, #80]	; (8003edc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e8a:	695b      	ldr	r3, [r3, #20]
 8003e8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e94:	d102      	bne.n	8003e9c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d1f2      	bne.n	8003e82 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e9c:	4b0f      	ldr	r3, [pc, #60]	; (8003edc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e9e:	695b      	ldr	r3, [r3, #20]
 8003ea0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ea4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ea8:	d110      	bne.n	8003ecc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e00f      	b.n	8003ece <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003eae:	4b0b      	ldr	r3, [pc, #44]	; (8003edc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003eb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eba:	d007      	beq.n	8003ecc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003ebc:	4b07      	ldr	r3, [pc, #28]	; (8003edc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ec4:	4a05      	ldr	r2, [pc, #20]	; (8003edc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ec6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003eca:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3714      	adds	r7, #20
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr
 8003eda:	bf00      	nop
 8003edc:	40007000 	.word	0x40007000
 8003ee0:	20000284 	.word	0x20000284
 8003ee4:	431bde83 	.word	0x431bde83

08003ee8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b088      	sub	sp, #32
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d102      	bne.n	8003efc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	f000 bc02 	b.w	8004700 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003efc:	4b96      	ldr	r3, [pc, #600]	; (8004158 <HAL_RCC_OscConfig+0x270>)
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	f003 030c 	and.w	r3, r3, #12
 8003f04:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f06:	4b94      	ldr	r3, [pc, #592]	; (8004158 <HAL_RCC_OscConfig+0x270>)
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	f003 0303 	and.w	r3, r3, #3
 8003f0e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0310 	and.w	r3, r3, #16
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	f000 80e4 	beq.w	80040e6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d007      	beq.n	8003f34 <HAL_RCC_OscConfig+0x4c>
 8003f24:	69bb      	ldr	r3, [r7, #24]
 8003f26:	2b0c      	cmp	r3, #12
 8003f28:	f040 808b 	bne.w	8004042 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	f040 8087 	bne.w	8004042 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003f34:	4b88      	ldr	r3, [pc, #544]	; (8004158 <HAL_RCC_OscConfig+0x270>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0302 	and.w	r3, r3, #2
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d005      	beq.n	8003f4c <HAL_RCC_OscConfig+0x64>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	699b      	ldr	r3, [r3, #24]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d101      	bne.n	8003f4c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e3d9      	b.n	8004700 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a1a      	ldr	r2, [r3, #32]
 8003f50:	4b81      	ldr	r3, [pc, #516]	; (8004158 <HAL_RCC_OscConfig+0x270>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0308 	and.w	r3, r3, #8
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d004      	beq.n	8003f66 <HAL_RCC_OscConfig+0x7e>
 8003f5c:	4b7e      	ldr	r3, [pc, #504]	; (8004158 <HAL_RCC_OscConfig+0x270>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f64:	e005      	b.n	8003f72 <HAL_RCC_OscConfig+0x8a>
 8003f66:	4b7c      	ldr	r3, [pc, #496]	; (8004158 <HAL_RCC_OscConfig+0x270>)
 8003f68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f6c:	091b      	lsrs	r3, r3, #4
 8003f6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d223      	bcs.n	8003fbe <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a1b      	ldr	r3, [r3, #32]
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f000 fd54 	bl	8004a28 <RCC_SetFlashLatencyFromMSIRange>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d001      	beq.n	8003f8a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e3ba      	b.n	8004700 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f8a:	4b73      	ldr	r3, [pc, #460]	; (8004158 <HAL_RCC_OscConfig+0x270>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a72      	ldr	r2, [pc, #456]	; (8004158 <HAL_RCC_OscConfig+0x270>)
 8003f90:	f043 0308 	orr.w	r3, r3, #8
 8003f94:	6013      	str	r3, [r2, #0]
 8003f96:	4b70      	ldr	r3, [pc, #448]	; (8004158 <HAL_RCC_OscConfig+0x270>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a1b      	ldr	r3, [r3, #32]
 8003fa2:	496d      	ldr	r1, [pc, #436]	; (8004158 <HAL_RCC_OscConfig+0x270>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003fa8:	4b6b      	ldr	r3, [pc, #428]	; (8004158 <HAL_RCC_OscConfig+0x270>)
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	69db      	ldr	r3, [r3, #28]
 8003fb4:	021b      	lsls	r3, r3, #8
 8003fb6:	4968      	ldr	r1, [pc, #416]	; (8004158 <HAL_RCC_OscConfig+0x270>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	604b      	str	r3, [r1, #4]
 8003fbc:	e025      	b.n	800400a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003fbe:	4b66      	ldr	r3, [pc, #408]	; (8004158 <HAL_RCC_OscConfig+0x270>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a65      	ldr	r2, [pc, #404]	; (8004158 <HAL_RCC_OscConfig+0x270>)
 8003fc4:	f043 0308 	orr.w	r3, r3, #8
 8003fc8:	6013      	str	r3, [r2, #0]
 8003fca:	4b63      	ldr	r3, [pc, #396]	; (8004158 <HAL_RCC_OscConfig+0x270>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a1b      	ldr	r3, [r3, #32]
 8003fd6:	4960      	ldr	r1, [pc, #384]	; (8004158 <HAL_RCC_OscConfig+0x270>)
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003fdc:	4b5e      	ldr	r3, [pc, #376]	; (8004158 <HAL_RCC_OscConfig+0x270>)
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	69db      	ldr	r3, [r3, #28]
 8003fe8:	021b      	lsls	r3, r3, #8
 8003fea:	495b      	ldr	r1, [pc, #364]	; (8004158 <HAL_RCC_OscConfig+0x270>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d109      	bne.n	800400a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a1b      	ldr	r3, [r3, #32]
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f000 fd14 	bl	8004a28 <RCC_SetFlashLatencyFromMSIRange>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d001      	beq.n	800400a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e37a      	b.n	8004700 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800400a:	f000 fc81 	bl	8004910 <HAL_RCC_GetSysClockFreq>
 800400e:	4602      	mov	r2, r0
 8004010:	4b51      	ldr	r3, [pc, #324]	; (8004158 <HAL_RCC_OscConfig+0x270>)
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	091b      	lsrs	r3, r3, #4
 8004016:	f003 030f 	and.w	r3, r3, #15
 800401a:	4950      	ldr	r1, [pc, #320]	; (800415c <HAL_RCC_OscConfig+0x274>)
 800401c:	5ccb      	ldrb	r3, [r1, r3]
 800401e:	f003 031f 	and.w	r3, r3, #31
 8004022:	fa22 f303 	lsr.w	r3, r2, r3
 8004026:	4a4e      	ldr	r2, [pc, #312]	; (8004160 <HAL_RCC_OscConfig+0x278>)
 8004028:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800402a:	4b4e      	ldr	r3, [pc, #312]	; (8004164 <HAL_RCC_OscConfig+0x27c>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4618      	mov	r0, r3
 8004030:	f7ff f89c 	bl	800316c <HAL_InitTick>
 8004034:	4603      	mov	r3, r0
 8004036:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004038:	7bfb      	ldrb	r3, [r7, #15]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d052      	beq.n	80040e4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800403e:	7bfb      	ldrb	r3, [r7, #15]
 8004040:	e35e      	b.n	8004700 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	699b      	ldr	r3, [r3, #24]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d032      	beq.n	80040b0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800404a:	4b43      	ldr	r3, [pc, #268]	; (8004158 <HAL_RCC_OscConfig+0x270>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a42      	ldr	r2, [pc, #264]	; (8004158 <HAL_RCC_OscConfig+0x270>)
 8004050:	f043 0301 	orr.w	r3, r3, #1
 8004054:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004056:	f7ff f8c5 	bl	80031e4 <HAL_GetTick>
 800405a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800405c:	e008      	b.n	8004070 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800405e:	f7ff f8c1 	bl	80031e4 <HAL_GetTick>
 8004062:	4602      	mov	r2, r0
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	2b02      	cmp	r3, #2
 800406a:	d901      	bls.n	8004070 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800406c:	2303      	movs	r3, #3
 800406e:	e347      	b.n	8004700 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004070:	4b39      	ldr	r3, [pc, #228]	; (8004158 <HAL_RCC_OscConfig+0x270>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0302 	and.w	r3, r3, #2
 8004078:	2b00      	cmp	r3, #0
 800407a:	d0f0      	beq.n	800405e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800407c:	4b36      	ldr	r3, [pc, #216]	; (8004158 <HAL_RCC_OscConfig+0x270>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a35      	ldr	r2, [pc, #212]	; (8004158 <HAL_RCC_OscConfig+0x270>)
 8004082:	f043 0308 	orr.w	r3, r3, #8
 8004086:	6013      	str	r3, [r2, #0]
 8004088:	4b33      	ldr	r3, [pc, #204]	; (8004158 <HAL_RCC_OscConfig+0x270>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a1b      	ldr	r3, [r3, #32]
 8004094:	4930      	ldr	r1, [pc, #192]	; (8004158 <HAL_RCC_OscConfig+0x270>)
 8004096:	4313      	orrs	r3, r2
 8004098:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800409a:	4b2f      	ldr	r3, [pc, #188]	; (8004158 <HAL_RCC_OscConfig+0x270>)
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	69db      	ldr	r3, [r3, #28]
 80040a6:	021b      	lsls	r3, r3, #8
 80040a8:	492b      	ldr	r1, [pc, #172]	; (8004158 <HAL_RCC_OscConfig+0x270>)
 80040aa:	4313      	orrs	r3, r2
 80040ac:	604b      	str	r3, [r1, #4]
 80040ae:	e01a      	b.n	80040e6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80040b0:	4b29      	ldr	r3, [pc, #164]	; (8004158 <HAL_RCC_OscConfig+0x270>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a28      	ldr	r2, [pc, #160]	; (8004158 <HAL_RCC_OscConfig+0x270>)
 80040b6:	f023 0301 	bic.w	r3, r3, #1
 80040ba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80040bc:	f7ff f892 	bl	80031e4 <HAL_GetTick>
 80040c0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80040c2:	e008      	b.n	80040d6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80040c4:	f7ff f88e 	bl	80031e4 <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d901      	bls.n	80040d6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e314      	b.n	8004700 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80040d6:	4b20      	ldr	r3, [pc, #128]	; (8004158 <HAL_RCC_OscConfig+0x270>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0302 	and.w	r3, r3, #2
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d1f0      	bne.n	80040c4 <HAL_RCC_OscConfig+0x1dc>
 80040e2:	e000      	b.n	80040e6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80040e4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0301 	and.w	r3, r3, #1
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d073      	beq.n	80041da <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	2b08      	cmp	r3, #8
 80040f6:	d005      	beq.n	8004104 <HAL_RCC_OscConfig+0x21c>
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	2b0c      	cmp	r3, #12
 80040fc:	d10e      	bne.n	800411c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	2b03      	cmp	r3, #3
 8004102:	d10b      	bne.n	800411c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004104:	4b14      	ldr	r3, [pc, #80]	; (8004158 <HAL_RCC_OscConfig+0x270>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d063      	beq.n	80041d8 <HAL_RCC_OscConfig+0x2f0>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d15f      	bne.n	80041d8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e2f1      	b.n	8004700 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004124:	d106      	bne.n	8004134 <HAL_RCC_OscConfig+0x24c>
 8004126:	4b0c      	ldr	r3, [pc, #48]	; (8004158 <HAL_RCC_OscConfig+0x270>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a0b      	ldr	r2, [pc, #44]	; (8004158 <HAL_RCC_OscConfig+0x270>)
 800412c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004130:	6013      	str	r3, [r2, #0]
 8004132:	e025      	b.n	8004180 <HAL_RCC_OscConfig+0x298>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800413c:	d114      	bne.n	8004168 <HAL_RCC_OscConfig+0x280>
 800413e:	4b06      	ldr	r3, [pc, #24]	; (8004158 <HAL_RCC_OscConfig+0x270>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a05      	ldr	r2, [pc, #20]	; (8004158 <HAL_RCC_OscConfig+0x270>)
 8004144:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004148:	6013      	str	r3, [r2, #0]
 800414a:	4b03      	ldr	r3, [pc, #12]	; (8004158 <HAL_RCC_OscConfig+0x270>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a02      	ldr	r2, [pc, #8]	; (8004158 <HAL_RCC_OscConfig+0x270>)
 8004150:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004154:	6013      	str	r3, [r2, #0]
 8004156:	e013      	b.n	8004180 <HAL_RCC_OscConfig+0x298>
 8004158:	40021000 	.word	0x40021000
 800415c:	08008ae8 	.word	0x08008ae8
 8004160:	20000284 	.word	0x20000284
 8004164:	20000008 	.word	0x20000008
 8004168:	4ba0      	ldr	r3, [pc, #640]	; (80043ec <HAL_RCC_OscConfig+0x504>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a9f      	ldr	r2, [pc, #636]	; (80043ec <HAL_RCC_OscConfig+0x504>)
 800416e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004172:	6013      	str	r3, [r2, #0]
 8004174:	4b9d      	ldr	r3, [pc, #628]	; (80043ec <HAL_RCC_OscConfig+0x504>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a9c      	ldr	r2, [pc, #624]	; (80043ec <HAL_RCC_OscConfig+0x504>)
 800417a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800417e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d013      	beq.n	80041b0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004188:	f7ff f82c 	bl	80031e4 <HAL_GetTick>
 800418c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800418e:	e008      	b.n	80041a2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004190:	f7ff f828 	bl	80031e4 <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	2b64      	cmp	r3, #100	; 0x64
 800419c:	d901      	bls.n	80041a2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e2ae      	b.n	8004700 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041a2:	4b92      	ldr	r3, [pc, #584]	; (80043ec <HAL_RCC_OscConfig+0x504>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d0f0      	beq.n	8004190 <HAL_RCC_OscConfig+0x2a8>
 80041ae:	e014      	b.n	80041da <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b0:	f7ff f818 	bl	80031e4 <HAL_GetTick>
 80041b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80041b6:	e008      	b.n	80041ca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041b8:	f7ff f814 	bl	80031e4 <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	2b64      	cmp	r3, #100	; 0x64
 80041c4:	d901      	bls.n	80041ca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e29a      	b.n	8004700 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80041ca:	4b88      	ldr	r3, [pc, #544]	; (80043ec <HAL_RCC_OscConfig+0x504>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1f0      	bne.n	80041b8 <HAL_RCC_OscConfig+0x2d0>
 80041d6:	e000      	b.n	80041da <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0302 	and.w	r3, r3, #2
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d060      	beq.n	80042a8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	2b04      	cmp	r3, #4
 80041ea:	d005      	beq.n	80041f8 <HAL_RCC_OscConfig+0x310>
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	2b0c      	cmp	r3, #12
 80041f0:	d119      	bne.n	8004226 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	2b02      	cmp	r3, #2
 80041f6:	d116      	bne.n	8004226 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041f8:	4b7c      	ldr	r3, [pc, #496]	; (80043ec <HAL_RCC_OscConfig+0x504>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004200:	2b00      	cmp	r3, #0
 8004202:	d005      	beq.n	8004210 <HAL_RCC_OscConfig+0x328>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d101      	bne.n	8004210 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e277      	b.n	8004700 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004210:	4b76      	ldr	r3, [pc, #472]	; (80043ec <HAL_RCC_OscConfig+0x504>)
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	691b      	ldr	r3, [r3, #16]
 800421c:	061b      	lsls	r3, r3, #24
 800421e:	4973      	ldr	r1, [pc, #460]	; (80043ec <HAL_RCC_OscConfig+0x504>)
 8004220:	4313      	orrs	r3, r2
 8004222:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004224:	e040      	b.n	80042a8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d023      	beq.n	8004276 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800422e:	4b6f      	ldr	r3, [pc, #444]	; (80043ec <HAL_RCC_OscConfig+0x504>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a6e      	ldr	r2, [pc, #440]	; (80043ec <HAL_RCC_OscConfig+0x504>)
 8004234:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004238:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800423a:	f7fe ffd3 	bl	80031e4 <HAL_GetTick>
 800423e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004240:	e008      	b.n	8004254 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004242:	f7fe ffcf 	bl	80031e4 <HAL_GetTick>
 8004246:	4602      	mov	r2, r0
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	2b02      	cmp	r3, #2
 800424e:	d901      	bls.n	8004254 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004250:	2303      	movs	r3, #3
 8004252:	e255      	b.n	8004700 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004254:	4b65      	ldr	r3, [pc, #404]	; (80043ec <HAL_RCC_OscConfig+0x504>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800425c:	2b00      	cmp	r3, #0
 800425e:	d0f0      	beq.n	8004242 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004260:	4b62      	ldr	r3, [pc, #392]	; (80043ec <HAL_RCC_OscConfig+0x504>)
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	061b      	lsls	r3, r3, #24
 800426e:	495f      	ldr	r1, [pc, #380]	; (80043ec <HAL_RCC_OscConfig+0x504>)
 8004270:	4313      	orrs	r3, r2
 8004272:	604b      	str	r3, [r1, #4]
 8004274:	e018      	b.n	80042a8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004276:	4b5d      	ldr	r3, [pc, #372]	; (80043ec <HAL_RCC_OscConfig+0x504>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a5c      	ldr	r2, [pc, #368]	; (80043ec <HAL_RCC_OscConfig+0x504>)
 800427c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004280:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004282:	f7fe ffaf 	bl	80031e4 <HAL_GetTick>
 8004286:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004288:	e008      	b.n	800429c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800428a:	f7fe ffab 	bl	80031e4 <HAL_GetTick>
 800428e:	4602      	mov	r2, r0
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	2b02      	cmp	r3, #2
 8004296:	d901      	bls.n	800429c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	e231      	b.n	8004700 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800429c:	4b53      	ldr	r3, [pc, #332]	; (80043ec <HAL_RCC_OscConfig+0x504>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d1f0      	bne.n	800428a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0308 	and.w	r3, r3, #8
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d03c      	beq.n	800432e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	695b      	ldr	r3, [r3, #20]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d01c      	beq.n	80042f6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042bc:	4b4b      	ldr	r3, [pc, #300]	; (80043ec <HAL_RCC_OscConfig+0x504>)
 80042be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042c2:	4a4a      	ldr	r2, [pc, #296]	; (80043ec <HAL_RCC_OscConfig+0x504>)
 80042c4:	f043 0301 	orr.w	r3, r3, #1
 80042c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042cc:	f7fe ff8a 	bl	80031e4 <HAL_GetTick>
 80042d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042d2:	e008      	b.n	80042e6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042d4:	f7fe ff86 	bl	80031e4 <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d901      	bls.n	80042e6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e20c      	b.n	8004700 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042e6:	4b41      	ldr	r3, [pc, #260]	; (80043ec <HAL_RCC_OscConfig+0x504>)
 80042e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042ec:	f003 0302 	and.w	r3, r3, #2
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d0ef      	beq.n	80042d4 <HAL_RCC_OscConfig+0x3ec>
 80042f4:	e01b      	b.n	800432e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042f6:	4b3d      	ldr	r3, [pc, #244]	; (80043ec <HAL_RCC_OscConfig+0x504>)
 80042f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042fc:	4a3b      	ldr	r2, [pc, #236]	; (80043ec <HAL_RCC_OscConfig+0x504>)
 80042fe:	f023 0301 	bic.w	r3, r3, #1
 8004302:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004306:	f7fe ff6d 	bl	80031e4 <HAL_GetTick>
 800430a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800430c:	e008      	b.n	8004320 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800430e:	f7fe ff69 	bl	80031e4 <HAL_GetTick>
 8004312:	4602      	mov	r2, r0
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	2b02      	cmp	r3, #2
 800431a:	d901      	bls.n	8004320 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	e1ef      	b.n	8004700 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004320:	4b32      	ldr	r3, [pc, #200]	; (80043ec <HAL_RCC_OscConfig+0x504>)
 8004322:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004326:	f003 0302 	and.w	r3, r3, #2
 800432a:	2b00      	cmp	r3, #0
 800432c:	d1ef      	bne.n	800430e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0304 	and.w	r3, r3, #4
 8004336:	2b00      	cmp	r3, #0
 8004338:	f000 80a6 	beq.w	8004488 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800433c:	2300      	movs	r3, #0
 800433e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004340:	4b2a      	ldr	r3, [pc, #168]	; (80043ec <HAL_RCC_OscConfig+0x504>)
 8004342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004344:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004348:	2b00      	cmp	r3, #0
 800434a:	d10d      	bne.n	8004368 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800434c:	4b27      	ldr	r3, [pc, #156]	; (80043ec <HAL_RCC_OscConfig+0x504>)
 800434e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004350:	4a26      	ldr	r2, [pc, #152]	; (80043ec <HAL_RCC_OscConfig+0x504>)
 8004352:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004356:	6593      	str	r3, [r2, #88]	; 0x58
 8004358:	4b24      	ldr	r3, [pc, #144]	; (80043ec <HAL_RCC_OscConfig+0x504>)
 800435a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800435c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004360:	60bb      	str	r3, [r7, #8]
 8004362:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004364:	2301      	movs	r3, #1
 8004366:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004368:	4b21      	ldr	r3, [pc, #132]	; (80043f0 <HAL_RCC_OscConfig+0x508>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004370:	2b00      	cmp	r3, #0
 8004372:	d118      	bne.n	80043a6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004374:	4b1e      	ldr	r3, [pc, #120]	; (80043f0 <HAL_RCC_OscConfig+0x508>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a1d      	ldr	r2, [pc, #116]	; (80043f0 <HAL_RCC_OscConfig+0x508>)
 800437a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800437e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004380:	f7fe ff30 	bl	80031e4 <HAL_GetTick>
 8004384:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004386:	e008      	b.n	800439a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004388:	f7fe ff2c 	bl	80031e4 <HAL_GetTick>
 800438c:	4602      	mov	r2, r0
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	2b02      	cmp	r3, #2
 8004394:	d901      	bls.n	800439a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	e1b2      	b.n	8004700 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800439a:	4b15      	ldr	r3, [pc, #84]	; (80043f0 <HAL_RCC_OscConfig+0x508>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d0f0      	beq.n	8004388 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d108      	bne.n	80043c0 <HAL_RCC_OscConfig+0x4d8>
 80043ae:	4b0f      	ldr	r3, [pc, #60]	; (80043ec <HAL_RCC_OscConfig+0x504>)
 80043b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043b4:	4a0d      	ldr	r2, [pc, #52]	; (80043ec <HAL_RCC_OscConfig+0x504>)
 80043b6:	f043 0301 	orr.w	r3, r3, #1
 80043ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043be:	e029      	b.n	8004414 <HAL_RCC_OscConfig+0x52c>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	2b05      	cmp	r3, #5
 80043c6:	d115      	bne.n	80043f4 <HAL_RCC_OscConfig+0x50c>
 80043c8:	4b08      	ldr	r3, [pc, #32]	; (80043ec <HAL_RCC_OscConfig+0x504>)
 80043ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ce:	4a07      	ldr	r2, [pc, #28]	; (80043ec <HAL_RCC_OscConfig+0x504>)
 80043d0:	f043 0304 	orr.w	r3, r3, #4
 80043d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043d8:	4b04      	ldr	r3, [pc, #16]	; (80043ec <HAL_RCC_OscConfig+0x504>)
 80043da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043de:	4a03      	ldr	r2, [pc, #12]	; (80043ec <HAL_RCC_OscConfig+0x504>)
 80043e0:	f043 0301 	orr.w	r3, r3, #1
 80043e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043e8:	e014      	b.n	8004414 <HAL_RCC_OscConfig+0x52c>
 80043ea:	bf00      	nop
 80043ec:	40021000 	.word	0x40021000
 80043f0:	40007000 	.word	0x40007000
 80043f4:	4b9a      	ldr	r3, [pc, #616]	; (8004660 <HAL_RCC_OscConfig+0x778>)
 80043f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043fa:	4a99      	ldr	r2, [pc, #612]	; (8004660 <HAL_RCC_OscConfig+0x778>)
 80043fc:	f023 0301 	bic.w	r3, r3, #1
 8004400:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004404:	4b96      	ldr	r3, [pc, #600]	; (8004660 <HAL_RCC_OscConfig+0x778>)
 8004406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800440a:	4a95      	ldr	r2, [pc, #596]	; (8004660 <HAL_RCC_OscConfig+0x778>)
 800440c:	f023 0304 	bic.w	r3, r3, #4
 8004410:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d016      	beq.n	800444a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800441c:	f7fe fee2 	bl	80031e4 <HAL_GetTick>
 8004420:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004422:	e00a      	b.n	800443a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004424:	f7fe fede 	bl	80031e4 <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004432:	4293      	cmp	r3, r2
 8004434:	d901      	bls.n	800443a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e162      	b.n	8004700 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800443a:	4b89      	ldr	r3, [pc, #548]	; (8004660 <HAL_RCC_OscConfig+0x778>)
 800443c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004440:	f003 0302 	and.w	r3, r3, #2
 8004444:	2b00      	cmp	r3, #0
 8004446:	d0ed      	beq.n	8004424 <HAL_RCC_OscConfig+0x53c>
 8004448:	e015      	b.n	8004476 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800444a:	f7fe fecb 	bl	80031e4 <HAL_GetTick>
 800444e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004450:	e00a      	b.n	8004468 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004452:	f7fe fec7 	bl	80031e4 <HAL_GetTick>
 8004456:	4602      	mov	r2, r0
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004460:	4293      	cmp	r3, r2
 8004462:	d901      	bls.n	8004468 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e14b      	b.n	8004700 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004468:	4b7d      	ldr	r3, [pc, #500]	; (8004660 <HAL_RCC_OscConfig+0x778>)
 800446a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800446e:	f003 0302 	and.w	r3, r3, #2
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1ed      	bne.n	8004452 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004476:	7ffb      	ldrb	r3, [r7, #31]
 8004478:	2b01      	cmp	r3, #1
 800447a:	d105      	bne.n	8004488 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800447c:	4b78      	ldr	r3, [pc, #480]	; (8004660 <HAL_RCC_OscConfig+0x778>)
 800447e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004480:	4a77      	ldr	r2, [pc, #476]	; (8004660 <HAL_RCC_OscConfig+0x778>)
 8004482:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004486:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0320 	and.w	r3, r3, #32
 8004490:	2b00      	cmp	r3, #0
 8004492:	d03c      	beq.n	800450e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004498:	2b00      	cmp	r3, #0
 800449a:	d01c      	beq.n	80044d6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800449c:	4b70      	ldr	r3, [pc, #448]	; (8004660 <HAL_RCC_OscConfig+0x778>)
 800449e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044a2:	4a6f      	ldr	r2, [pc, #444]	; (8004660 <HAL_RCC_OscConfig+0x778>)
 80044a4:	f043 0301 	orr.w	r3, r3, #1
 80044a8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ac:	f7fe fe9a 	bl	80031e4 <HAL_GetTick>
 80044b0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80044b2:	e008      	b.n	80044c6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044b4:	f7fe fe96 	bl	80031e4 <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d901      	bls.n	80044c6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e11c      	b.n	8004700 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80044c6:	4b66      	ldr	r3, [pc, #408]	; (8004660 <HAL_RCC_OscConfig+0x778>)
 80044c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044cc:	f003 0302 	and.w	r3, r3, #2
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d0ef      	beq.n	80044b4 <HAL_RCC_OscConfig+0x5cc>
 80044d4:	e01b      	b.n	800450e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80044d6:	4b62      	ldr	r3, [pc, #392]	; (8004660 <HAL_RCC_OscConfig+0x778>)
 80044d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044dc:	4a60      	ldr	r2, [pc, #384]	; (8004660 <HAL_RCC_OscConfig+0x778>)
 80044de:	f023 0301 	bic.w	r3, r3, #1
 80044e2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044e6:	f7fe fe7d 	bl	80031e4 <HAL_GetTick>
 80044ea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80044ec:	e008      	b.n	8004500 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044ee:	f7fe fe79 	bl	80031e4 <HAL_GetTick>
 80044f2:	4602      	mov	r2, r0
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d901      	bls.n	8004500 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80044fc:	2303      	movs	r3, #3
 80044fe:	e0ff      	b.n	8004700 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004500:	4b57      	ldr	r3, [pc, #348]	; (8004660 <HAL_RCC_OscConfig+0x778>)
 8004502:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004506:	f003 0302 	and.w	r3, r3, #2
 800450a:	2b00      	cmp	r3, #0
 800450c:	d1ef      	bne.n	80044ee <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004512:	2b00      	cmp	r3, #0
 8004514:	f000 80f3 	beq.w	80046fe <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800451c:	2b02      	cmp	r3, #2
 800451e:	f040 80c9 	bne.w	80046b4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004522:	4b4f      	ldr	r3, [pc, #316]	; (8004660 <HAL_RCC_OscConfig+0x778>)
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	f003 0203 	and.w	r2, r3, #3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004532:	429a      	cmp	r2, r3
 8004534:	d12c      	bne.n	8004590 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004540:	3b01      	subs	r3, #1
 8004542:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004544:	429a      	cmp	r2, r3
 8004546:	d123      	bne.n	8004590 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004552:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004554:	429a      	cmp	r2, r3
 8004556:	d11b      	bne.n	8004590 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004562:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004564:	429a      	cmp	r2, r3
 8004566:	d113      	bne.n	8004590 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004572:	085b      	lsrs	r3, r3, #1
 8004574:	3b01      	subs	r3, #1
 8004576:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004578:	429a      	cmp	r2, r3
 800457a:	d109      	bne.n	8004590 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004586:	085b      	lsrs	r3, r3, #1
 8004588:	3b01      	subs	r3, #1
 800458a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800458c:	429a      	cmp	r2, r3
 800458e:	d06b      	beq.n	8004668 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	2b0c      	cmp	r3, #12
 8004594:	d062      	beq.n	800465c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004596:	4b32      	ldr	r3, [pc, #200]	; (8004660 <HAL_RCC_OscConfig+0x778>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d001      	beq.n	80045a6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e0ac      	b.n	8004700 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80045a6:	4b2e      	ldr	r3, [pc, #184]	; (8004660 <HAL_RCC_OscConfig+0x778>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a2d      	ldr	r2, [pc, #180]	; (8004660 <HAL_RCC_OscConfig+0x778>)
 80045ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045b0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80045b2:	f7fe fe17 	bl	80031e4 <HAL_GetTick>
 80045b6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045b8:	e008      	b.n	80045cc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045ba:	f7fe fe13 	bl	80031e4 <HAL_GetTick>
 80045be:	4602      	mov	r2, r0
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	2b02      	cmp	r3, #2
 80045c6:	d901      	bls.n	80045cc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80045c8:	2303      	movs	r3, #3
 80045ca:	e099      	b.n	8004700 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045cc:	4b24      	ldr	r3, [pc, #144]	; (8004660 <HAL_RCC_OscConfig+0x778>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d1f0      	bne.n	80045ba <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045d8:	4b21      	ldr	r3, [pc, #132]	; (8004660 <HAL_RCC_OscConfig+0x778>)
 80045da:	68da      	ldr	r2, [r3, #12]
 80045dc:	4b21      	ldr	r3, [pc, #132]	; (8004664 <HAL_RCC_OscConfig+0x77c>)
 80045de:	4013      	ands	r3, r2
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80045e8:	3a01      	subs	r2, #1
 80045ea:	0112      	lsls	r2, r2, #4
 80045ec:	4311      	orrs	r1, r2
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80045f2:	0212      	lsls	r2, r2, #8
 80045f4:	4311      	orrs	r1, r2
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80045fa:	0852      	lsrs	r2, r2, #1
 80045fc:	3a01      	subs	r2, #1
 80045fe:	0552      	lsls	r2, r2, #21
 8004600:	4311      	orrs	r1, r2
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004606:	0852      	lsrs	r2, r2, #1
 8004608:	3a01      	subs	r2, #1
 800460a:	0652      	lsls	r2, r2, #25
 800460c:	4311      	orrs	r1, r2
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004612:	06d2      	lsls	r2, r2, #27
 8004614:	430a      	orrs	r2, r1
 8004616:	4912      	ldr	r1, [pc, #72]	; (8004660 <HAL_RCC_OscConfig+0x778>)
 8004618:	4313      	orrs	r3, r2
 800461a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800461c:	4b10      	ldr	r3, [pc, #64]	; (8004660 <HAL_RCC_OscConfig+0x778>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a0f      	ldr	r2, [pc, #60]	; (8004660 <HAL_RCC_OscConfig+0x778>)
 8004622:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004626:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004628:	4b0d      	ldr	r3, [pc, #52]	; (8004660 <HAL_RCC_OscConfig+0x778>)
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	4a0c      	ldr	r2, [pc, #48]	; (8004660 <HAL_RCC_OscConfig+0x778>)
 800462e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004632:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004634:	f7fe fdd6 	bl	80031e4 <HAL_GetTick>
 8004638:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800463a:	e008      	b.n	800464e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800463c:	f7fe fdd2 	bl	80031e4 <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	2b02      	cmp	r3, #2
 8004648:	d901      	bls.n	800464e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e058      	b.n	8004700 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800464e:	4b04      	ldr	r3, [pc, #16]	; (8004660 <HAL_RCC_OscConfig+0x778>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d0f0      	beq.n	800463c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800465a:	e050      	b.n	80046fe <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e04f      	b.n	8004700 <HAL_RCC_OscConfig+0x818>
 8004660:	40021000 	.word	0x40021000
 8004664:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004668:	4b27      	ldr	r3, [pc, #156]	; (8004708 <HAL_RCC_OscConfig+0x820>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004670:	2b00      	cmp	r3, #0
 8004672:	d144      	bne.n	80046fe <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004674:	4b24      	ldr	r3, [pc, #144]	; (8004708 <HAL_RCC_OscConfig+0x820>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a23      	ldr	r2, [pc, #140]	; (8004708 <HAL_RCC_OscConfig+0x820>)
 800467a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800467e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004680:	4b21      	ldr	r3, [pc, #132]	; (8004708 <HAL_RCC_OscConfig+0x820>)
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	4a20      	ldr	r2, [pc, #128]	; (8004708 <HAL_RCC_OscConfig+0x820>)
 8004686:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800468a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800468c:	f7fe fdaa 	bl	80031e4 <HAL_GetTick>
 8004690:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004692:	e008      	b.n	80046a6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004694:	f7fe fda6 	bl	80031e4 <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d901      	bls.n	80046a6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e02c      	b.n	8004700 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046a6:	4b18      	ldr	r3, [pc, #96]	; (8004708 <HAL_RCC_OscConfig+0x820>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d0f0      	beq.n	8004694 <HAL_RCC_OscConfig+0x7ac>
 80046b2:	e024      	b.n	80046fe <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	2b0c      	cmp	r3, #12
 80046b8:	d01f      	beq.n	80046fa <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046ba:	4b13      	ldr	r3, [pc, #76]	; (8004708 <HAL_RCC_OscConfig+0x820>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a12      	ldr	r2, [pc, #72]	; (8004708 <HAL_RCC_OscConfig+0x820>)
 80046c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046c6:	f7fe fd8d 	bl	80031e4 <HAL_GetTick>
 80046ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046cc:	e008      	b.n	80046e0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046ce:	f7fe fd89 	bl	80031e4 <HAL_GetTick>
 80046d2:	4602      	mov	r2, r0
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d901      	bls.n	80046e0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e00f      	b.n	8004700 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046e0:	4b09      	ldr	r3, [pc, #36]	; (8004708 <HAL_RCC_OscConfig+0x820>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d1f0      	bne.n	80046ce <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80046ec:	4b06      	ldr	r3, [pc, #24]	; (8004708 <HAL_RCC_OscConfig+0x820>)
 80046ee:	68da      	ldr	r2, [r3, #12]
 80046f0:	4905      	ldr	r1, [pc, #20]	; (8004708 <HAL_RCC_OscConfig+0x820>)
 80046f2:	4b06      	ldr	r3, [pc, #24]	; (800470c <HAL_RCC_OscConfig+0x824>)
 80046f4:	4013      	ands	r3, r2
 80046f6:	60cb      	str	r3, [r1, #12]
 80046f8:	e001      	b.n	80046fe <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e000      	b.n	8004700 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80046fe:	2300      	movs	r3, #0
}
 8004700:	4618      	mov	r0, r3
 8004702:	3720      	adds	r7, #32
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}
 8004708:	40021000 	.word	0x40021000
 800470c:	feeefffc 	.word	0xfeeefffc

08004710 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d101      	bne.n	8004724 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e0e7      	b.n	80048f4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004724:	4b75      	ldr	r3, [pc, #468]	; (80048fc <HAL_RCC_ClockConfig+0x1ec>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0307 	and.w	r3, r3, #7
 800472c:	683a      	ldr	r2, [r7, #0]
 800472e:	429a      	cmp	r2, r3
 8004730:	d910      	bls.n	8004754 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004732:	4b72      	ldr	r3, [pc, #456]	; (80048fc <HAL_RCC_ClockConfig+0x1ec>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f023 0207 	bic.w	r2, r3, #7
 800473a:	4970      	ldr	r1, [pc, #448]	; (80048fc <HAL_RCC_ClockConfig+0x1ec>)
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	4313      	orrs	r3, r2
 8004740:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004742:	4b6e      	ldr	r3, [pc, #440]	; (80048fc <HAL_RCC_ClockConfig+0x1ec>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0307 	and.w	r3, r3, #7
 800474a:	683a      	ldr	r2, [r7, #0]
 800474c:	429a      	cmp	r2, r3
 800474e:	d001      	beq.n	8004754 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e0cf      	b.n	80048f4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 0302 	and.w	r3, r3, #2
 800475c:	2b00      	cmp	r3, #0
 800475e:	d010      	beq.n	8004782 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	689a      	ldr	r2, [r3, #8]
 8004764:	4b66      	ldr	r3, [pc, #408]	; (8004900 <HAL_RCC_ClockConfig+0x1f0>)
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800476c:	429a      	cmp	r2, r3
 800476e:	d908      	bls.n	8004782 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004770:	4b63      	ldr	r3, [pc, #396]	; (8004900 <HAL_RCC_ClockConfig+0x1f0>)
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	4960      	ldr	r1, [pc, #384]	; (8004900 <HAL_RCC_ClockConfig+0x1f0>)
 800477e:	4313      	orrs	r3, r2
 8004780:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0301 	and.w	r3, r3, #1
 800478a:	2b00      	cmp	r3, #0
 800478c:	d04c      	beq.n	8004828 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	2b03      	cmp	r3, #3
 8004794:	d107      	bne.n	80047a6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004796:	4b5a      	ldr	r3, [pc, #360]	; (8004900 <HAL_RCC_ClockConfig+0x1f0>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d121      	bne.n	80047e6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e0a6      	b.n	80048f4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d107      	bne.n	80047be <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047ae:	4b54      	ldr	r3, [pc, #336]	; (8004900 <HAL_RCC_ClockConfig+0x1f0>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d115      	bne.n	80047e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e09a      	b.n	80048f4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d107      	bne.n	80047d6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80047c6:	4b4e      	ldr	r3, [pc, #312]	; (8004900 <HAL_RCC_ClockConfig+0x1f0>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 0302 	and.w	r3, r3, #2
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d109      	bne.n	80047e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e08e      	b.n	80048f4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047d6:	4b4a      	ldr	r3, [pc, #296]	; (8004900 <HAL_RCC_ClockConfig+0x1f0>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d101      	bne.n	80047e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e086      	b.n	80048f4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80047e6:	4b46      	ldr	r3, [pc, #280]	; (8004900 <HAL_RCC_ClockConfig+0x1f0>)
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f023 0203 	bic.w	r2, r3, #3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	4943      	ldr	r1, [pc, #268]	; (8004900 <HAL_RCC_ClockConfig+0x1f0>)
 80047f4:	4313      	orrs	r3, r2
 80047f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047f8:	f7fe fcf4 	bl	80031e4 <HAL_GetTick>
 80047fc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047fe:	e00a      	b.n	8004816 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004800:	f7fe fcf0 	bl	80031e4 <HAL_GetTick>
 8004804:	4602      	mov	r2, r0
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	f241 3288 	movw	r2, #5000	; 0x1388
 800480e:	4293      	cmp	r3, r2
 8004810:	d901      	bls.n	8004816 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e06e      	b.n	80048f4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004816:	4b3a      	ldr	r3, [pc, #232]	; (8004900 <HAL_RCC_ClockConfig+0x1f0>)
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f003 020c 	and.w	r2, r3, #12
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	429a      	cmp	r2, r3
 8004826:	d1eb      	bne.n	8004800 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0302 	and.w	r3, r3, #2
 8004830:	2b00      	cmp	r3, #0
 8004832:	d010      	beq.n	8004856 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	689a      	ldr	r2, [r3, #8]
 8004838:	4b31      	ldr	r3, [pc, #196]	; (8004900 <HAL_RCC_ClockConfig+0x1f0>)
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004840:	429a      	cmp	r2, r3
 8004842:	d208      	bcs.n	8004856 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004844:	4b2e      	ldr	r3, [pc, #184]	; (8004900 <HAL_RCC_ClockConfig+0x1f0>)
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	492b      	ldr	r1, [pc, #172]	; (8004900 <HAL_RCC_ClockConfig+0x1f0>)
 8004852:	4313      	orrs	r3, r2
 8004854:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004856:	4b29      	ldr	r3, [pc, #164]	; (80048fc <HAL_RCC_ClockConfig+0x1ec>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0307 	and.w	r3, r3, #7
 800485e:	683a      	ldr	r2, [r7, #0]
 8004860:	429a      	cmp	r2, r3
 8004862:	d210      	bcs.n	8004886 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004864:	4b25      	ldr	r3, [pc, #148]	; (80048fc <HAL_RCC_ClockConfig+0x1ec>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f023 0207 	bic.w	r2, r3, #7
 800486c:	4923      	ldr	r1, [pc, #140]	; (80048fc <HAL_RCC_ClockConfig+0x1ec>)
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	4313      	orrs	r3, r2
 8004872:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004874:	4b21      	ldr	r3, [pc, #132]	; (80048fc <HAL_RCC_ClockConfig+0x1ec>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0307 	and.w	r3, r3, #7
 800487c:	683a      	ldr	r2, [r7, #0]
 800487e:	429a      	cmp	r2, r3
 8004880:	d001      	beq.n	8004886 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e036      	b.n	80048f4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0304 	and.w	r3, r3, #4
 800488e:	2b00      	cmp	r3, #0
 8004890:	d008      	beq.n	80048a4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004892:	4b1b      	ldr	r3, [pc, #108]	; (8004900 <HAL_RCC_ClockConfig+0x1f0>)
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	4918      	ldr	r1, [pc, #96]	; (8004900 <HAL_RCC_ClockConfig+0x1f0>)
 80048a0:	4313      	orrs	r3, r2
 80048a2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0308 	and.w	r3, r3, #8
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d009      	beq.n	80048c4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048b0:	4b13      	ldr	r3, [pc, #76]	; (8004900 <HAL_RCC_ClockConfig+0x1f0>)
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	691b      	ldr	r3, [r3, #16]
 80048bc:	00db      	lsls	r3, r3, #3
 80048be:	4910      	ldr	r1, [pc, #64]	; (8004900 <HAL_RCC_ClockConfig+0x1f0>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80048c4:	f000 f824 	bl	8004910 <HAL_RCC_GetSysClockFreq>
 80048c8:	4602      	mov	r2, r0
 80048ca:	4b0d      	ldr	r3, [pc, #52]	; (8004900 <HAL_RCC_ClockConfig+0x1f0>)
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	091b      	lsrs	r3, r3, #4
 80048d0:	f003 030f 	and.w	r3, r3, #15
 80048d4:	490b      	ldr	r1, [pc, #44]	; (8004904 <HAL_RCC_ClockConfig+0x1f4>)
 80048d6:	5ccb      	ldrb	r3, [r1, r3]
 80048d8:	f003 031f 	and.w	r3, r3, #31
 80048dc:	fa22 f303 	lsr.w	r3, r2, r3
 80048e0:	4a09      	ldr	r2, [pc, #36]	; (8004908 <HAL_RCC_ClockConfig+0x1f8>)
 80048e2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80048e4:	4b09      	ldr	r3, [pc, #36]	; (800490c <HAL_RCC_ClockConfig+0x1fc>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4618      	mov	r0, r3
 80048ea:	f7fe fc3f 	bl	800316c <HAL_InitTick>
 80048ee:	4603      	mov	r3, r0
 80048f0:	72fb      	strb	r3, [r7, #11]

  return status;
 80048f2:	7afb      	ldrb	r3, [r7, #11]
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3710      	adds	r7, #16
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	40022000 	.word	0x40022000
 8004900:	40021000 	.word	0x40021000
 8004904:	08008ae8 	.word	0x08008ae8
 8004908:	20000284 	.word	0x20000284
 800490c:	20000008 	.word	0x20000008

08004910 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004910:	b480      	push	{r7}
 8004912:	b089      	sub	sp, #36	; 0x24
 8004914:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004916:	2300      	movs	r3, #0
 8004918:	61fb      	str	r3, [r7, #28]
 800491a:	2300      	movs	r3, #0
 800491c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800491e:	4b3e      	ldr	r3, [pc, #248]	; (8004a18 <HAL_RCC_GetSysClockFreq+0x108>)
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f003 030c 	and.w	r3, r3, #12
 8004926:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004928:	4b3b      	ldr	r3, [pc, #236]	; (8004a18 <HAL_RCC_GetSysClockFreq+0x108>)
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	f003 0303 	and.w	r3, r3, #3
 8004930:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d005      	beq.n	8004944 <HAL_RCC_GetSysClockFreq+0x34>
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	2b0c      	cmp	r3, #12
 800493c:	d121      	bne.n	8004982 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2b01      	cmp	r3, #1
 8004942:	d11e      	bne.n	8004982 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004944:	4b34      	ldr	r3, [pc, #208]	; (8004a18 <HAL_RCC_GetSysClockFreq+0x108>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0308 	and.w	r3, r3, #8
 800494c:	2b00      	cmp	r3, #0
 800494e:	d107      	bne.n	8004960 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004950:	4b31      	ldr	r3, [pc, #196]	; (8004a18 <HAL_RCC_GetSysClockFreq+0x108>)
 8004952:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004956:	0a1b      	lsrs	r3, r3, #8
 8004958:	f003 030f 	and.w	r3, r3, #15
 800495c:	61fb      	str	r3, [r7, #28]
 800495e:	e005      	b.n	800496c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004960:	4b2d      	ldr	r3, [pc, #180]	; (8004a18 <HAL_RCC_GetSysClockFreq+0x108>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	091b      	lsrs	r3, r3, #4
 8004966:	f003 030f 	and.w	r3, r3, #15
 800496a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800496c:	4a2b      	ldr	r2, [pc, #172]	; (8004a1c <HAL_RCC_GetSysClockFreq+0x10c>)
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004974:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d10d      	bne.n	8004998 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004980:	e00a      	b.n	8004998 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	2b04      	cmp	r3, #4
 8004986:	d102      	bne.n	800498e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004988:	4b25      	ldr	r3, [pc, #148]	; (8004a20 <HAL_RCC_GetSysClockFreq+0x110>)
 800498a:	61bb      	str	r3, [r7, #24]
 800498c:	e004      	b.n	8004998 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	2b08      	cmp	r3, #8
 8004992:	d101      	bne.n	8004998 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004994:	4b23      	ldr	r3, [pc, #140]	; (8004a24 <HAL_RCC_GetSysClockFreq+0x114>)
 8004996:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	2b0c      	cmp	r3, #12
 800499c:	d134      	bne.n	8004a08 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800499e:	4b1e      	ldr	r3, [pc, #120]	; (8004a18 <HAL_RCC_GetSysClockFreq+0x108>)
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	f003 0303 	and.w	r3, r3, #3
 80049a6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d003      	beq.n	80049b6 <HAL_RCC_GetSysClockFreq+0xa6>
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	2b03      	cmp	r3, #3
 80049b2:	d003      	beq.n	80049bc <HAL_RCC_GetSysClockFreq+0xac>
 80049b4:	e005      	b.n	80049c2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80049b6:	4b1a      	ldr	r3, [pc, #104]	; (8004a20 <HAL_RCC_GetSysClockFreq+0x110>)
 80049b8:	617b      	str	r3, [r7, #20]
      break;
 80049ba:	e005      	b.n	80049c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80049bc:	4b19      	ldr	r3, [pc, #100]	; (8004a24 <HAL_RCC_GetSysClockFreq+0x114>)
 80049be:	617b      	str	r3, [r7, #20]
      break;
 80049c0:	e002      	b.n	80049c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80049c2:	69fb      	ldr	r3, [r7, #28]
 80049c4:	617b      	str	r3, [r7, #20]
      break;
 80049c6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80049c8:	4b13      	ldr	r3, [pc, #76]	; (8004a18 <HAL_RCC_GetSysClockFreq+0x108>)
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	091b      	lsrs	r3, r3, #4
 80049ce:	f003 0307 	and.w	r3, r3, #7
 80049d2:	3301      	adds	r3, #1
 80049d4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80049d6:	4b10      	ldr	r3, [pc, #64]	; (8004a18 <HAL_RCC_GetSysClockFreq+0x108>)
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	0a1b      	lsrs	r3, r3, #8
 80049dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049e0:	697a      	ldr	r2, [r7, #20]
 80049e2:	fb03 f202 	mul.w	r2, r3, r2
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80049ee:	4b0a      	ldr	r3, [pc, #40]	; (8004a18 <HAL_RCC_GetSysClockFreq+0x108>)
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	0e5b      	lsrs	r3, r3, #25
 80049f4:	f003 0303 	and.w	r3, r3, #3
 80049f8:	3301      	adds	r3, #1
 80049fa:	005b      	lsls	r3, r3, #1
 80049fc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80049fe:	697a      	ldr	r2, [r7, #20]
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a06:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004a08:	69bb      	ldr	r3, [r7, #24]
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3724      	adds	r7, #36	; 0x24
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop
 8004a18:	40021000 	.word	0x40021000
 8004a1c:	08008af8 	.word	0x08008af8
 8004a20:	00f42400 	.word	0x00f42400
 8004a24:	02dc6c00 	.word	0x02dc6c00

08004a28 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b086      	sub	sp, #24
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004a30:	2300      	movs	r3, #0
 8004a32:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004a34:	4b2a      	ldr	r3, [pc, #168]	; (8004ae0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d003      	beq.n	8004a48 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004a40:	f7ff f9ee 	bl	8003e20 <HAL_PWREx_GetVoltageRange>
 8004a44:	6178      	str	r0, [r7, #20]
 8004a46:	e014      	b.n	8004a72 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a48:	4b25      	ldr	r3, [pc, #148]	; (8004ae0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a4c:	4a24      	ldr	r2, [pc, #144]	; (8004ae0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a52:	6593      	str	r3, [r2, #88]	; 0x58
 8004a54:	4b22      	ldr	r3, [pc, #136]	; (8004ae0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a5c:	60fb      	str	r3, [r7, #12]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004a60:	f7ff f9de 	bl	8003e20 <HAL_PWREx_GetVoltageRange>
 8004a64:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004a66:	4b1e      	ldr	r3, [pc, #120]	; (8004ae0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a6a:	4a1d      	ldr	r2, [pc, #116]	; (8004ae0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a70:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a78:	d10b      	bne.n	8004a92 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2b80      	cmp	r3, #128	; 0x80
 8004a7e:	d919      	bls.n	8004ab4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2ba0      	cmp	r3, #160	; 0xa0
 8004a84:	d902      	bls.n	8004a8c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004a86:	2302      	movs	r3, #2
 8004a88:	613b      	str	r3, [r7, #16]
 8004a8a:	e013      	b.n	8004ab4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	613b      	str	r3, [r7, #16]
 8004a90:	e010      	b.n	8004ab4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2b80      	cmp	r3, #128	; 0x80
 8004a96:	d902      	bls.n	8004a9e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004a98:	2303      	movs	r3, #3
 8004a9a:	613b      	str	r3, [r7, #16]
 8004a9c:	e00a      	b.n	8004ab4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2b80      	cmp	r3, #128	; 0x80
 8004aa2:	d102      	bne.n	8004aaa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004aa4:	2302      	movs	r3, #2
 8004aa6:	613b      	str	r3, [r7, #16]
 8004aa8:	e004      	b.n	8004ab4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2b70      	cmp	r3, #112	; 0x70
 8004aae:	d101      	bne.n	8004ab4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004ab4:	4b0b      	ldr	r3, [pc, #44]	; (8004ae4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f023 0207 	bic.w	r2, r3, #7
 8004abc:	4909      	ldr	r1, [pc, #36]	; (8004ae4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004ac4:	4b07      	ldr	r3, [pc, #28]	; (8004ae4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0307 	and.w	r3, r3, #7
 8004acc:	693a      	ldr	r2, [r7, #16]
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d001      	beq.n	8004ad6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e000      	b.n	8004ad8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004ad6:	2300      	movs	r3, #0
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3718      	adds	r7, #24
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	40021000 	.word	0x40021000
 8004ae4:	40022000 	.word	0x40022000

08004ae8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b086      	sub	sp, #24
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004af0:	2300      	movs	r3, #0
 8004af2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004af4:	2300      	movs	r3, #0
 8004af6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d031      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b08:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004b0c:	d01a      	beq.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004b0e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004b12:	d814      	bhi.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d009      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004b18:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b1c:	d10f      	bne.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004b1e:	4b5d      	ldr	r3, [pc, #372]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	4a5c      	ldr	r2, [pc, #368]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b28:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004b2a:	e00c      	b.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	3304      	adds	r3, #4
 8004b30:	2100      	movs	r1, #0
 8004b32:	4618      	mov	r0, r3
 8004b34:	f000 f9f0 	bl	8004f18 <RCCEx_PLLSAI1_Config>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004b3c:	e003      	b.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	74fb      	strb	r3, [r7, #19]
      break;
 8004b42:	e000      	b.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004b44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b46:	7cfb      	ldrb	r3, [r7, #19]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d10b      	bne.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b4c:	4b51      	ldr	r3, [pc, #324]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b52:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b5a:	494e      	ldr	r1, [pc, #312]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004b62:	e001      	b.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b64:	7cfb      	ldrb	r3, [r7, #19]
 8004b66:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	f000 809e 	beq.w	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b76:	2300      	movs	r3, #0
 8004b78:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004b7a:	4b46      	ldr	r3, [pc, #280]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d101      	bne.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004b86:	2301      	movs	r3, #1
 8004b88:	e000      	b.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d00d      	beq.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b90:	4b40      	ldr	r3, [pc, #256]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b94:	4a3f      	ldr	r2, [pc, #252]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b9a:	6593      	str	r3, [r2, #88]	; 0x58
 8004b9c:	4b3d      	ldr	r3, [pc, #244]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ba0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ba4:	60bb      	str	r3, [r7, #8]
 8004ba6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004bac:	4b3a      	ldr	r3, [pc, #232]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a39      	ldr	r2, [pc, #228]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004bb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bb6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004bb8:	f7fe fb14 	bl	80031e4 <HAL_GetTick>
 8004bbc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004bbe:	e009      	b.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bc0:	f7fe fb10 	bl	80031e4 <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d902      	bls.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	74fb      	strb	r3, [r7, #19]
        break;
 8004bd2:	e005      	b.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004bd4:	4b30      	ldr	r3, [pc, #192]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d0ef      	beq.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004be0:	7cfb      	ldrb	r3, [r7, #19]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d15a      	bne.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004be6:	4b2b      	ldr	r3, [pc, #172]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bf0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d01e      	beq.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bfc:	697a      	ldr	r2, [r7, #20]
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d019      	beq.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004c02:	4b24      	ldr	r3, [pc, #144]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c0c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c0e:	4b21      	ldr	r3, [pc, #132]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c14:	4a1f      	ldr	r2, [pc, #124]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c1e:	4b1d      	ldr	r3, [pc, #116]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c24:	4a1b      	ldr	r2, [pc, #108]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004c2e:	4a19      	ldr	r2, [pc, #100]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	f003 0301 	and.w	r3, r3, #1
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d016      	beq.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c40:	f7fe fad0 	bl	80031e4 <HAL_GetTick>
 8004c44:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c46:	e00b      	b.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c48:	f7fe facc 	bl	80031e4 <HAL_GetTick>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d902      	bls.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	74fb      	strb	r3, [r7, #19]
            break;
 8004c5e:	e006      	b.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c60:	4b0c      	ldr	r3, [pc, #48]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c66:	f003 0302 	and.w	r3, r3, #2
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d0ec      	beq.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004c6e:	7cfb      	ldrb	r3, [r7, #19]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d10b      	bne.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c74:	4b07      	ldr	r3, [pc, #28]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c7a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c82:	4904      	ldr	r1, [pc, #16]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c84:	4313      	orrs	r3, r2
 8004c86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004c8a:	e009      	b.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c8c:	7cfb      	ldrb	r3, [r7, #19]
 8004c8e:	74bb      	strb	r3, [r7, #18]
 8004c90:	e006      	b.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004c92:	bf00      	nop
 8004c94:	40021000 	.word	0x40021000
 8004c98:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c9c:	7cfb      	ldrb	r3, [r7, #19]
 8004c9e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ca0:	7c7b      	ldrb	r3, [r7, #17]
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d105      	bne.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ca6:	4b9b      	ldr	r3, [pc, #620]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004caa:	4a9a      	ldr	r2, [pc, #616]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004cac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cb0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0301 	and.w	r3, r3, #1
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d00a      	beq.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004cbe:	4b95      	ldr	r3, [pc, #596]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cc4:	f023 0203 	bic.w	r2, r3, #3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6a1b      	ldr	r3, [r3, #32]
 8004ccc:	4991      	ldr	r1, [pc, #580]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 0302 	and.w	r3, r3, #2
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d00a      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ce0:	4b8c      	ldr	r3, [pc, #560]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce6:	f023 020c 	bic.w	r2, r3, #12
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cee:	4989      	ldr	r1, [pc, #548]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0304 	and.w	r3, r3, #4
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d00a      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d02:	4b84      	ldr	r3, [pc, #528]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d08:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d10:	4980      	ldr	r1, [pc, #512]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0320 	and.w	r3, r3, #32
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d00a      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d24:	4b7b      	ldr	r3, [pc, #492]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d2a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d32:	4978      	ldr	r1, [pc, #480]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004d34:	4313      	orrs	r3, r2
 8004d36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d00a      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d46:	4b73      	ldr	r3, [pc, #460]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d4c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d54:	496f      	ldr	r1, [pc, #444]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004d56:	4313      	orrs	r3, r2
 8004d58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d00a      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d68:	4b6a      	ldr	r3, [pc, #424]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d6e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d76:	4967      	ldr	r1, [pc, #412]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d00a      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d8a:	4b62      	ldr	r3, [pc, #392]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d90:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d98:	495e      	ldr	r1, [pc, #376]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d00a      	beq.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004dac:	4b59      	ldr	r3, [pc, #356]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004db2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dba:	4956      	ldr	r1, [pc, #344]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d00a      	beq.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004dce:	4b51      	ldr	r3, [pc, #324]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dd4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ddc:	494d      	ldr	r1, [pc, #308]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004dde:	4313      	orrs	r3, r2
 8004de0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d028      	beq.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004df0:	4b48      	ldr	r3, [pc, #288]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004df6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dfe:	4945      	ldr	r1, [pc, #276]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004e00:	4313      	orrs	r3, r2
 8004e02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e0e:	d106      	bne.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e10:	4b40      	ldr	r3, [pc, #256]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	4a3f      	ldr	r2, [pc, #252]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004e16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e1a:	60d3      	str	r3, [r2, #12]
 8004e1c:	e011      	b.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e22:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e26:	d10c      	bne.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	3304      	adds	r3, #4
 8004e2c:	2101      	movs	r1, #1
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f000 f872 	bl	8004f18 <RCCEx_PLLSAI1_Config>
 8004e34:	4603      	mov	r3, r0
 8004e36:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e38:	7cfb      	ldrb	r3, [r7, #19]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d001      	beq.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 8004e3e:	7cfb      	ldrb	r3, [r7, #19]
 8004e40:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d028      	beq.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e4e:	4b31      	ldr	r3, [pc, #196]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e54:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e5c:	492d      	ldr	r1, [pc, #180]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e6c:	d106      	bne.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e6e:	4b29      	ldr	r3, [pc, #164]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	4a28      	ldr	r2, [pc, #160]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004e74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e78:	60d3      	str	r3, [r2, #12]
 8004e7a:	e011      	b.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e80:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e84:	d10c      	bne.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	3304      	adds	r3, #4
 8004e8a:	2101      	movs	r1, #1
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f000 f843 	bl	8004f18 <RCCEx_PLLSAI1_Config>
 8004e92:	4603      	mov	r3, r0
 8004e94:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e96:	7cfb      	ldrb	r3, [r7, #19]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d001      	beq.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8004e9c:	7cfb      	ldrb	r3, [r7, #19]
 8004e9e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d01c      	beq.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004eac:	4b19      	ldr	r3, [pc, #100]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eb2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eba:	4916      	ldr	r1, [pc, #88]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ec6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004eca:	d10c      	bne.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	3304      	adds	r3, #4
 8004ed0:	2102      	movs	r1, #2
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f000 f820 	bl	8004f18 <RCCEx_PLLSAI1_Config>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004edc:	7cfb      	ldrb	r3, [r7, #19]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d001      	beq.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8004ee2:	7cfb      	ldrb	r3, [r7, #19]
 8004ee4:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d00a      	beq.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004ef2:	4b08      	ldr	r3, [pc, #32]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ef8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f00:	4904      	ldr	r1, [pc, #16]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004f02:	4313      	orrs	r3, r2
 8004f04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004f08:	7cbb      	ldrb	r3, [r7, #18]
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3718      	adds	r7, #24
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	40021000 	.word	0x40021000

08004f18 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f22:	2300      	movs	r3, #0
 8004f24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004f26:	4b74      	ldr	r3, [pc, #464]	; (80050f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	f003 0303 	and.w	r3, r3, #3
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d018      	beq.n	8004f64 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004f32:	4b71      	ldr	r3, [pc, #452]	; (80050f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	f003 0203 	and.w	r2, r3, #3
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d10d      	bne.n	8004f5e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
       ||
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d009      	beq.n	8004f5e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004f4a:	4b6b      	ldr	r3, [pc, #428]	; (80050f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	091b      	lsrs	r3, r3, #4
 8004f50:	f003 0307 	and.w	r3, r3, #7
 8004f54:	1c5a      	adds	r2, r3, #1
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	685b      	ldr	r3, [r3, #4]
       ||
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d047      	beq.n	8004fee <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	73fb      	strb	r3, [r7, #15]
 8004f62:	e044      	b.n	8004fee <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	2b03      	cmp	r3, #3
 8004f6a:	d018      	beq.n	8004f9e <RCCEx_PLLSAI1_Config+0x86>
 8004f6c:	2b03      	cmp	r3, #3
 8004f6e:	d825      	bhi.n	8004fbc <RCCEx_PLLSAI1_Config+0xa4>
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d002      	beq.n	8004f7a <RCCEx_PLLSAI1_Config+0x62>
 8004f74:	2b02      	cmp	r3, #2
 8004f76:	d009      	beq.n	8004f8c <RCCEx_PLLSAI1_Config+0x74>
 8004f78:	e020      	b.n	8004fbc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004f7a:	4b5f      	ldr	r3, [pc, #380]	; (80050f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 0302 	and.w	r3, r3, #2
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d11d      	bne.n	8004fc2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f8a:	e01a      	b.n	8004fc2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004f8c:	4b5a      	ldr	r3, [pc, #360]	; (80050f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d116      	bne.n	8004fc6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f9c:	e013      	b.n	8004fc6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004f9e:	4b56      	ldr	r3, [pc, #344]	; (80050f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d10f      	bne.n	8004fca <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004faa:	4b53      	ldr	r3, [pc, #332]	; (80050f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d109      	bne.n	8004fca <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004fba:	e006      	b.n	8004fca <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	73fb      	strb	r3, [r7, #15]
      break;
 8004fc0:	e004      	b.n	8004fcc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004fc2:	bf00      	nop
 8004fc4:	e002      	b.n	8004fcc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004fc6:	bf00      	nop
 8004fc8:	e000      	b.n	8004fcc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004fca:	bf00      	nop
    }

    if(status == HAL_OK)
 8004fcc:	7bfb      	ldrb	r3, [r7, #15]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d10d      	bne.n	8004fee <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004fd2:	4b49      	ldr	r3, [pc, #292]	; (80050f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6819      	ldr	r1, [r3, #0]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	011b      	lsls	r3, r3, #4
 8004fe6:	430b      	orrs	r3, r1
 8004fe8:	4943      	ldr	r1, [pc, #268]	; (80050f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fea:	4313      	orrs	r3, r2
 8004fec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004fee:	7bfb      	ldrb	r3, [r7, #15]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d17c      	bne.n	80050ee <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004ff4:	4b40      	ldr	r3, [pc, #256]	; (80050f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a3f      	ldr	r2, [pc, #252]	; (80050f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ffa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004ffe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005000:	f7fe f8f0 	bl	80031e4 <HAL_GetTick>
 8005004:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005006:	e009      	b.n	800501c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005008:	f7fe f8ec 	bl	80031e4 <HAL_GetTick>
 800500c:	4602      	mov	r2, r0
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	2b02      	cmp	r3, #2
 8005014:	d902      	bls.n	800501c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	73fb      	strb	r3, [r7, #15]
        break;
 800501a:	e005      	b.n	8005028 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800501c:	4b36      	ldr	r3, [pc, #216]	; (80050f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005024:	2b00      	cmp	r3, #0
 8005026:	d1ef      	bne.n	8005008 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005028:	7bfb      	ldrb	r3, [r7, #15]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d15f      	bne.n	80050ee <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d110      	bne.n	8005056 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005034:	4b30      	ldr	r3, [pc, #192]	; (80050f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005036:	691b      	ldr	r3, [r3, #16]
 8005038:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800503c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	6892      	ldr	r2, [r2, #8]
 8005044:	0211      	lsls	r1, r2, #8
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	68d2      	ldr	r2, [r2, #12]
 800504a:	06d2      	lsls	r2, r2, #27
 800504c:	430a      	orrs	r2, r1
 800504e:	492a      	ldr	r1, [pc, #168]	; (80050f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005050:	4313      	orrs	r3, r2
 8005052:	610b      	str	r3, [r1, #16]
 8005054:	e027      	b.n	80050a6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	2b01      	cmp	r3, #1
 800505a:	d112      	bne.n	8005082 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800505c:	4b26      	ldr	r3, [pc, #152]	; (80050f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800505e:	691b      	ldr	r3, [r3, #16]
 8005060:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005064:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	6892      	ldr	r2, [r2, #8]
 800506c:	0211      	lsls	r1, r2, #8
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	6912      	ldr	r2, [r2, #16]
 8005072:	0852      	lsrs	r2, r2, #1
 8005074:	3a01      	subs	r2, #1
 8005076:	0552      	lsls	r2, r2, #21
 8005078:	430a      	orrs	r2, r1
 800507a:	491f      	ldr	r1, [pc, #124]	; (80050f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800507c:	4313      	orrs	r3, r2
 800507e:	610b      	str	r3, [r1, #16]
 8005080:	e011      	b.n	80050a6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005082:	4b1d      	ldr	r3, [pc, #116]	; (80050f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005084:	691b      	ldr	r3, [r3, #16]
 8005086:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800508a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	6892      	ldr	r2, [r2, #8]
 8005092:	0211      	lsls	r1, r2, #8
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	6952      	ldr	r2, [r2, #20]
 8005098:	0852      	lsrs	r2, r2, #1
 800509a:	3a01      	subs	r2, #1
 800509c:	0652      	lsls	r2, r2, #25
 800509e:	430a      	orrs	r2, r1
 80050a0:	4915      	ldr	r1, [pc, #84]	; (80050f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80050a2:	4313      	orrs	r3, r2
 80050a4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80050a6:	4b14      	ldr	r3, [pc, #80]	; (80050f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a13      	ldr	r2, [pc, #76]	; (80050f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80050ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80050b0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050b2:	f7fe f897 	bl	80031e4 <HAL_GetTick>
 80050b6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80050b8:	e009      	b.n	80050ce <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80050ba:	f7fe f893 	bl	80031e4 <HAL_GetTick>
 80050be:	4602      	mov	r2, r0
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	2b02      	cmp	r3, #2
 80050c6:	d902      	bls.n	80050ce <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80050c8:	2303      	movs	r3, #3
 80050ca:	73fb      	strb	r3, [r7, #15]
          break;
 80050cc:	e005      	b.n	80050da <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80050ce:	4b0a      	ldr	r3, [pc, #40]	; (80050f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d0ef      	beq.n	80050ba <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80050da:	7bfb      	ldrb	r3, [r7, #15]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d106      	bne.n	80050ee <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80050e0:	4b05      	ldr	r3, [pc, #20]	; (80050f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80050e2:	691a      	ldr	r2, [r3, #16]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	699b      	ldr	r3, [r3, #24]
 80050e8:	4903      	ldr	r1, [pc, #12]	; (80050f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80050ea:	4313      	orrs	r3, r2
 80050ec:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80050ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3710      	adds	r7, #16
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}
 80050f8:	40021000 	.word	0x40021000

080050fc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b084      	sub	sp, #16
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d06c      	beq.n	80051e8 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005114:	b2db      	uxtb	r3, r3
 8005116:	2b00      	cmp	r3, #0
 8005118:	d106      	bne.n	8005128 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f001 ff9c 	bl	8007060 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2202      	movs	r2, #2
 800512c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	22ca      	movs	r2, #202	; 0xca
 8005136:	625a      	str	r2, [r3, #36]	; 0x24
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	2253      	movs	r2, #83	; 0x53
 800513e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f000 f87c 	bl	800523e <RTC_EnterInitMode>
 8005146:	4603      	mov	r3, r0
 8005148:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800514a:	7bfb      	ldrb	r3, [r7, #15]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d14b      	bne.n	80051e8 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	6812      	ldr	r2, [r2, #0]
 800515a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800515e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005162:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	6899      	ldr	r1, [r3, #8]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	685a      	ldr	r2, [r3, #4]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	431a      	orrs	r2, r3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	699b      	ldr	r3, [r3, #24]
 8005178:	431a      	orrs	r2, r3
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	430a      	orrs	r2, r1
 8005180:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	68d2      	ldr	r2, [r2, #12]
 800518a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	6919      	ldr	r1, [r3, #16]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	041a      	lsls	r2, r3, #16
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	430a      	orrs	r2, r1
 800519e:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f000 f87f 	bl	80052a4 <RTC_ExitInitMode>
 80051a6:	4603      	mov	r3, r0
 80051a8:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80051aa:	7bfb      	ldrb	r3, [r7, #15]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d11b      	bne.n	80051e8 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f022 0203 	bic.w	r2, r2, #3
 80051be:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	69da      	ldr	r2, [r3, #28]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	695b      	ldr	r3, [r3, #20]
 80051ce:	431a      	orrs	r2, r3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	430a      	orrs	r2, r1
 80051d6:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	22ff      	movs	r2, #255	; 0xff
 80051de:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 80051e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3710      	adds	r7, #16
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}

080051f2 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80051f2:	b580      	push	{r7, lr}
 80051f4:	b084      	sub	sp, #16
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68da      	ldr	r2, [r3, #12]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005208:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800520a:	f7fd ffeb 	bl	80031e4 <HAL_GetTick>
 800520e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005210:	e009      	b.n	8005226 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005212:	f7fd ffe7 	bl	80031e4 <HAL_GetTick>
 8005216:	4602      	mov	r2, r0
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	1ad3      	subs	r3, r2, r3
 800521c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005220:	d901      	bls.n	8005226 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	e007      	b.n	8005236 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	f003 0320 	and.w	r3, r3, #32
 8005230:	2b00      	cmp	r3, #0
 8005232:	d0ee      	beq.n	8005212 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8005234:	2300      	movs	r3, #0
}
 8005236:	4618      	mov	r0, r3
 8005238:	3710      	adds	r7, #16
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}

0800523e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800523e:	b580      	push	{r7, lr}
 8005240:	b084      	sub	sp, #16
 8005242:	af00      	add	r7, sp, #0
 8005244:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005246:	2300      	movs	r3, #0
 8005248:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005254:	2b00      	cmp	r3, #0
 8005256:	d120      	bne.n	800529a <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005260:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005262:	f7fd ffbf 	bl	80031e4 <HAL_GetTick>
 8005266:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005268:	e00d      	b.n	8005286 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800526a:	f7fd ffbb 	bl	80031e4 <HAL_GetTick>
 800526e:	4602      	mov	r2, r0
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	1ad3      	subs	r3, r2, r3
 8005274:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005278:	d905      	bls.n	8005286 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2203      	movs	r2, #3
 8005282:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005290:	2b00      	cmp	r3, #0
 8005292:	d102      	bne.n	800529a <RTC_EnterInitMode+0x5c>
 8005294:	7bfb      	ldrb	r3, [r7, #15]
 8005296:	2b03      	cmp	r3, #3
 8005298:	d1e7      	bne.n	800526a <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800529a:	7bfb      	ldrb	r3, [r7, #15]
}
 800529c:	4618      	mov	r0, r3
 800529e:	3710      	adds	r7, #16
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b084      	sub	sp, #16
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052ac:	2300      	movs	r3, #0
 80052ae:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80052b0:	4b1a      	ldr	r3, [pc, #104]	; (800531c <RTC_ExitInitMode+0x78>)
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	4a19      	ldr	r2, [pc, #100]	; (800531c <RTC_ExitInitMode+0x78>)
 80052b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052ba:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80052bc:	4b17      	ldr	r3, [pc, #92]	; (800531c <RTC_ExitInitMode+0x78>)
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	f003 0320 	and.w	r3, r3, #32
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d10c      	bne.n	80052e2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f7ff ff92 	bl	80051f2 <HAL_RTC_WaitForSynchro>
 80052ce:	4603      	mov	r3, r0
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d01e      	beq.n	8005312 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2203      	movs	r2, #3
 80052d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80052dc:	2303      	movs	r3, #3
 80052de:	73fb      	strb	r3, [r7, #15]
 80052e0:	e017      	b.n	8005312 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80052e2:	4b0e      	ldr	r3, [pc, #56]	; (800531c <RTC_ExitInitMode+0x78>)
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	4a0d      	ldr	r2, [pc, #52]	; (800531c <RTC_ExitInitMode+0x78>)
 80052e8:	f023 0320 	bic.w	r3, r3, #32
 80052ec:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f7ff ff7f 	bl	80051f2 <HAL_RTC_WaitForSynchro>
 80052f4:	4603      	mov	r3, r0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d005      	beq.n	8005306 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2203      	movs	r2, #3
 80052fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8005302:	2303      	movs	r3, #3
 8005304:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005306:	4b05      	ldr	r3, [pc, #20]	; (800531c <RTC_ExitInitMode+0x78>)
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	4a04      	ldr	r2, [pc, #16]	; (800531c <RTC_ExitInitMode+0x78>)
 800530c:	f043 0320 	orr.w	r3, r3, #32
 8005310:	6093      	str	r3, [r2, #8]
  }

  return status;
 8005312:	7bfb      	ldrb	r3, [r7, #15]
}
 8005314:	4618      	mov	r0, r3
 8005316:	3710      	adds	r7, #16
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}
 800531c:	40002800 	.word	0x40002800

08005320 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b082      	sub	sp, #8
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d101      	bne.n	8005332 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e049      	b.n	80053c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005338:	b2db      	uxtb	r3, r3
 800533a:	2b00      	cmp	r3, #0
 800533c:	d106      	bne.n	800534c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f001 fea6 	bl	8007098 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2202      	movs	r2, #2
 8005350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	3304      	adds	r3, #4
 800535c:	4619      	mov	r1, r3
 800535e:	4610      	mov	r0, r2
 8005360:	f000 fe2e 	bl	8005fc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3708      	adds	r7, #8
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}

080053ce <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80053ce:	b580      	push	{r7, lr}
 80053d0:	b082      	sub	sp, #8
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d101      	bne.n	80053e0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	e049      	b.n	8005474 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d106      	bne.n	80053fa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f001 ff49 	bl	800728c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2202      	movs	r2, #2
 80053fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	3304      	adds	r3, #4
 800540a:	4619      	mov	r1, r3
 800540c:	4610      	mov	r0, r2
 800540e:	f000 fdd7 	bl	8005fc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2201      	movs	r2, #1
 8005416:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2201      	movs	r2, #1
 800541e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2201      	movs	r2, #1
 8005426:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2201      	movs	r2, #1
 800542e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2201      	movs	r2, #1
 8005436:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2201      	movs	r2, #1
 800543e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2201      	movs	r2, #1
 8005446:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2201      	movs	r2, #1
 800544e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2201      	movs	r2, #1
 8005456:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2201      	movs	r2, #1
 800545e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2201      	movs	r2, #1
 8005466:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2201      	movs	r2, #1
 800546e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005472:	2300      	movs	r3, #0
}
 8005474:	4618      	mov	r0, r3
 8005476:	3708      	adds	r7, #8
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}

0800547c <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b086      	sub	sp, #24
 8005480:	af00      	add	r7, sp, #0
 8005482:	60f8      	str	r0, [r7, #12]
 8005484:	60b9      	str	r1, [r7, #8]
 8005486:	607a      	str	r2, [r7, #4]
 8005488:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800548a:	2300      	movs	r3, #0
 800548c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d109      	bne.n	80054a8 <HAL_TIM_PWM_Start_DMA+0x2c>
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800549a:	b2db      	uxtb	r3, r3
 800549c:	2b02      	cmp	r3, #2
 800549e:	bf0c      	ite	eq
 80054a0:	2301      	moveq	r3, #1
 80054a2:	2300      	movne	r3, #0
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	e03c      	b.n	8005522 <HAL_TIM_PWM_Start_DMA+0xa6>
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	2b04      	cmp	r3, #4
 80054ac:	d109      	bne.n	80054c2 <HAL_TIM_PWM_Start_DMA+0x46>
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	2b02      	cmp	r3, #2
 80054b8:	bf0c      	ite	eq
 80054ba:	2301      	moveq	r3, #1
 80054bc:	2300      	movne	r3, #0
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	e02f      	b.n	8005522 <HAL_TIM_PWM_Start_DMA+0xa6>
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	2b08      	cmp	r3, #8
 80054c6:	d109      	bne.n	80054dc <HAL_TIM_PWM_Start_DMA+0x60>
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	2b02      	cmp	r3, #2
 80054d2:	bf0c      	ite	eq
 80054d4:	2301      	moveq	r3, #1
 80054d6:	2300      	movne	r3, #0
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	e022      	b.n	8005522 <HAL_TIM_PWM_Start_DMA+0xa6>
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	2b0c      	cmp	r3, #12
 80054e0:	d109      	bne.n	80054f6 <HAL_TIM_PWM_Start_DMA+0x7a>
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	2b02      	cmp	r3, #2
 80054ec:	bf0c      	ite	eq
 80054ee:	2301      	moveq	r3, #1
 80054f0:	2300      	movne	r3, #0
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	e015      	b.n	8005522 <HAL_TIM_PWM_Start_DMA+0xa6>
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	2b10      	cmp	r3, #16
 80054fa:	d109      	bne.n	8005510 <HAL_TIM_PWM_Start_DMA+0x94>
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005502:	b2db      	uxtb	r3, r3
 8005504:	2b02      	cmp	r3, #2
 8005506:	bf0c      	ite	eq
 8005508:	2301      	moveq	r3, #1
 800550a:	2300      	movne	r3, #0
 800550c:	b2db      	uxtb	r3, r3
 800550e:	e008      	b.n	8005522 <HAL_TIM_PWM_Start_DMA+0xa6>
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005516:	b2db      	uxtb	r3, r3
 8005518:	2b02      	cmp	r3, #2
 800551a:	bf0c      	ite	eq
 800551c:	2301      	moveq	r3, #1
 800551e:	2300      	movne	r3, #0
 8005520:	b2db      	uxtb	r3, r3
 8005522:	2b00      	cmp	r3, #0
 8005524:	d001      	beq.n	800552a <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8005526:	2302      	movs	r3, #2
 8005528:	e18d      	b.n	8005846 <HAL_TIM_PWM_Start_DMA+0x3ca>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d109      	bne.n	8005544 <HAL_TIM_PWM_Start_DMA+0xc8>
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005536:	b2db      	uxtb	r3, r3
 8005538:	2b01      	cmp	r3, #1
 800553a:	bf0c      	ite	eq
 800553c:	2301      	moveq	r3, #1
 800553e:	2300      	movne	r3, #0
 8005540:	b2db      	uxtb	r3, r3
 8005542:	e03c      	b.n	80055be <HAL_TIM_PWM_Start_DMA+0x142>
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	2b04      	cmp	r3, #4
 8005548:	d109      	bne.n	800555e <HAL_TIM_PWM_Start_DMA+0xe2>
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005550:	b2db      	uxtb	r3, r3
 8005552:	2b01      	cmp	r3, #1
 8005554:	bf0c      	ite	eq
 8005556:	2301      	moveq	r3, #1
 8005558:	2300      	movne	r3, #0
 800555a:	b2db      	uxtb	r3, r3
 800555c:	e02f      	b.n	80055be <HAL_TIM_PWM_Start_DMA+0x142>
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	2b08      	cmp	r3, #8
 8005562:	d109      	bne.n	8005578 <HAL_TIM_PWM_Start_DMA+0xfc>
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800556a:	b2db      	uxtb	r3, r3
 800556c:	2b01      	cmp	r3, #1
 800556e:	bf0c      	ite	eq
 8005570:	2301      	moveq	r3, #1
 8005572:	2300      	movne	r3, #0
 8005574:	b2db      	uxtb	r3, r3
 8005576:	e022      	b.n	80055be <HAL_TIM_PWM_Start_DMA+0x142>
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	2b0c      	cmp	r3, #12
 800557c:	d109      	bne.n	8005592 <HAL_TIM_PWM_Start_DMA+0x116>
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005584:	b2db      	uxtb	r3, r3
 8005586:	2b01      	cmp	r3, #1
 8005588:	bf0c      	ite	eq
 800558a:	2301      	moveq	r3, #1
 800558c:	2300      	movne	r3, #0
 800558e:	b2db      	uxtb	r3, r3
 8005590:	e015      	b.n	80055be <HAL_TIM_PWM_Start_DMA+0x142>
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	2b10      	cmp	r3, #16
 8005596:	d109      	bne.n	80055ac <HAL_TIM_PWM_Start_DMA+0x130>
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	bf0c      	ite	eq
 80055a4:	2301      	moveq	r3, #1
 80055a6:	2300      	movne	r3, #0
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	e008      	b.n	80055be <HAL_TIM_PWM_Start_DMA+0x142>
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	bf0c      	ite	eq
 80055b8:	2301      	moveq	r3, #1
 80055ba:	2300      	movne	r3, #0
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d034      	beq.n	800562c <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d002      	beq.n	80055ce <HAL_TIM_PWM_Start_DMA+0x152>
 80055c8:	887b      	ldrh	r3, [r7, #2]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d101      	bne.n	80055d2 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e139      	b.n	8005846 <HAL_TIM_PWM_Start_DMA+0x3ca>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d104      	bne.n	80055e2 <HAL_TIM_PWM_Start_DMA+0x166>
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2202      	movs	r2, #2
 80055dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055e0:	e026      	b.n	8005630 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	2b04      	cmp	r3, #4
 80055e6:	d104      	bne.n	80055f2 <HAL_TIM_PWM_Start_DMA+0x176>
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2202      	movs	r2, #2
 80055ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055f0:	e01e      	b.n	8005630 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	2b08      	cmp	r3, #8
 80055f6:	d104      	bne.n	8005602 <HAL_TIM_PWM_Start_DMA+0x186>
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2202      	movs	r2, #2
 80055fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005600:	e016      	b.n	8005630 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	2b0c      	cmp	r3, #12
 8005606:	d104      	bne.n	8005612 <HAL_TIM_PWM_Start_DMA+0x196>
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2202      	movs	r2, #2
 800560c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005610:	e00e      	b.n	8005630 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	2b10      	cmp	r3, #16
 8005616:	d104      	bne.n	8005622 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2202      	movs	r2, #2
 800561c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005620:	e006      	b.n	8005630 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2202      	movs	r2, #2
 8005626:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800562a:	e001      	b.n	8005630 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	e10a      	b.n	8005846 <HAL_TIM_PWM_Start_DMA+0x3ca>
  }

  switch (Channel)
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	2b0c      	cmp	r3, #12
 8005634:	f200 80ae 	bhi.w	8005794 <HAL_TIM_PWM_Start_DMA+0x318>
 8005638:	a201      	add	r2, pc, #4	; (adr r2, 8005640 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800563a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800563e:	bf00      	nop
 8005640:	08005675 	.word	0x08005675
 8005644:	08005795 	.word	0x08005795
 8005648:	08005795 	.word	0x08005795
 800564c:	08005795 	.word	0x08005795
 8005650:	080056bd 	.word	0x080056bd
 8005654:	08005795 	.word	0x08005795
 8005658:	08005795 	.word	0x08005795
 800565c:	08005795 	.word	0x08005795
 8005660:	08005705 	.word	0x08005705
 8005664:	08005795 	.word	0x08005795
 8005668:	08005795 	.word	0x08005795
 800566c:	08005795 	.word	0x08005795
 8005670:	0800574d 	.word	0x0800574d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005678:	4a75      	ldr	r2, [pc, #468]	; (8005850 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 800567a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005680:	4a74      	ldr	r2, [pc, #464]	; (8005854 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8005682:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005688:	4a73      	ldr	r2, [pc, #460]	; (8005858 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 800568a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005690:	6879      	ldr	r1, [r7, #4]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	3334      	adds	r3, #52	; 0x34
 8005698:	461a      	mov	r2, r3
 800569a:	887b      	ldrh	r3, [r7, #2]
 800569c:	f7fd ffce 	bl	800363c <HAL_DMA_Start_IT>
 80056a0:	4603      	mov	r3, r0
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d001      	beq.n	80056aa <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	e0cd      	b.n	8005846 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	68da      	ldr	r2, [r3, #12]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056b8:	60da      	str	r2, [r3, #12]
      break;
 80056ba:	e06e      	b.n	800579a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c0:	4a63      	ldr	r2, [pc, #396]	; (8005850 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 80056c2:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c8:	4a62      	ldr	r2, [pc, #392]	; (8005854 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 80056ca:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056d0:	4a61      	ldr	r2, [pc, #388]	; (8005858 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 80056d2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80056d8:	6879      	ldr	r1, [r7, #4]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	3338      	adds	r3, #56	; 0x38
 80056e0:	461a      	mov	r2, r3
 80056e2:	887b      	ldrh	r3, [r7, #2]
 80056e4:	f7fd ffaa 	bl	800363c <HAL_DMA_Start_IT>
 80056e8:	4603      	mov	r3, r0
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d001      	beq.n	80056f2 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e0a9      	b.n	8005846 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	68da      	ldr	r2, [r3, #12]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005700:	60da      	str	r2, [r3, #12]
      break;
 8005702:	e04a      	b.n	800579a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005708:	4a51      	ldr	r2, [pc, #324]	; (8005850 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 800570a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005710:	4a50      	ldr	r2, [pc, #320]	; (8005854 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8005712:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005718:	4a4f      	ldr	r2, [pc, #316]	; (8005858 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 800571a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005720:	6879      	ldr	r1, [r7, #4]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	333c      	adds	r3, #60	; 0x3c
 8005728:	461a      	mov	r2, r3
 800572a:	887b      	ldrh	r3, [r7, #2]
 800572c:	f7fd ff86 	bl	800363c <HAL_DMA_Start_IT>
 8005730:	4603      	mov	r3, r0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d001      	beq.n	800573a <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e085      	b.n	8005846 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	68da      	ldr	r2, [r3, #12]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005748:	60da      	str	r2, [r3, #12]
      break;
 800574a:	e026      	b.n	800579a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005750:	4a3f      	ldr	r2, [pc, #252]	; (8005850 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8005752:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005758:	4a3e      	ldr	r2, [pc, #248]	; (8005854 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 800575a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005760:	4a3d      	ldr	r2, [pc, #244]	; (8005858 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8005762:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005768:	6879      	ldr	r1, [r7, #4]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	3340      	adds	r3, #64	; 0x40
 8005770:	461a      	mov	r2, r3
 8005772:	887b      	ldrh	r3, [r7, #2]
 8005774:	f7fd ff62 	bl	800363c <HAL_DMA_Start_IT>
 8005778:	4603      	mov	r3, r0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d001      	beq.n	8005782 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e061      	b.n	8005846 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	68da      	ldr	r2, [r3, #12]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005790:	60da      	str	r2, [r3, #12]
      break;
 8005792:	e002      	b.n	800579a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	75fb      	strb	r3, [r7, #23]
      break;
 8005798:	bf00      	nop
  }

  if (status == HAL_OK)
 800579a:	7dfb      	ldrb	r3, [r7, #23]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d151      	bne.n	8005844 <HAL_TIM_PWM_Start_DMA+0x3c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	2201      	movs	r2, #1
 80057a6:	68b9      	ldr	r1, [r7, #8]
 80057a8:	4618      	mov	r0, r3
 80057aa:	f000 ff85 	bl	80066b8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a2a      	ldr	r2, [pc, #168]	; (800585c <HAL_TIM_PWM_Start_DMA+0x3e0>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d009      	beq.n	80057cc <HAL_TIM_PWM_Start_DMA+0x350>
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a28      	ldr	r2, [pc, #160]	; (8005860 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d004      	beq.n	80057cc <HAL_TIM_PWM_Start_DMA+0x350>
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a27      	ldr	r2, [pc, #156]	; (8005864 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d101      	bne.n	80057d0 <HAL_TIM_PWM_Start_DMA+0x354>
 80057cc:	2301      	movs	r3, #1
 80057ce:	e000      	b.n	80057d2 <HAL_TIM_PWM_Start_DMA+0x356>
 80057d0:	2300      	movs	r3, #0
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d007      	beq.n	80057e6 <HAL_TIM_PWM_Start_DMA+0x36a>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80057e4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a1c      	ldr	r2, [pc, #112]	; (800585c <HAL_TIM_PWM_Start_DMA+0x3e0>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d009      	beq.n	8005804 <HAL_TIM_PWM_Start_DMA+0x388>
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057f8:	d004      	beq.n	8005804 <HAL_TIM_PWM_Start_DMA+0x388>
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a18      	ldr	r2, [pc, #96]	; (8005860 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d115      	bne.n	8005830 <HAL_TIM_PWM_Start_DMA+0x3b4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	689a      	ldr	r2, [r3, #8]
 800580a:	4b17      	ldr	r3, [pc, #92]	; (8005868 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 800580c:	4013      	ands	r3, r2
 800580e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	2b06      	cmp	r3, #6
 8005814:	d015      	beq.n	8005842 <HAL_TIM_PWM_Start_DMA+0x3c6>
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800581c:	d011      	beq.n	8005842 <HAL_TIM_PWM_Start_DMA+0x3c6>
      {
        __HAL_TIM_ENABLE(htim);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f042 0201 	orr.w	r2, r2, #1
 800582c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800582e:	e008      	b.n	8005842 <HAL_TIM_PWM_Start_DMA+0x3c6>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f042 0201 	orr.w	r2, r2, #1
 800583e:	601a      	str	r2, [r3, #0]
 8005840:	e000      	b.n	8005844 <HAL_TIM_PWM_Start_DMA+0x3c8>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005842:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8005844:	7dfb      	ldrb	r3, [r7, #23]
}
 8005846:	4618      	mov	r0, r3
 8005848:	3718      	adds	r7, #24
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	08005eb1 	.word	0x08005eb1
 8005854:	08005f59 	.word	0x08005f59
 8005858:	08005e1f 	.word	0x08005e1f
 800585c:	40012c00 	.word	0x40012c00
 8005860:	40014000 	.word	0x40014000
 8005864:	40014400 	.word	0x40014400
 8005868:	00010007 	.word	0x00010007

0800586c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005876:	2300      	movs	r3, #0
 8005878:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	2b0c      	cmp	r3, #12
 800587e:	d855      	bhi.n	800592c <HAL_TIM_PWM_Stop_DMA+0xc0>
 8005880:	a201      	add	r2, pc, #4	; (adr r2, 8005888 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8005882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005886:	bf00      	nop
 8005888:	080058bd 	.word	0x080058bd
 800588c:	0800592d 	.word	0x0800592d
 8005890:	0800592d 	.word	0x0800592d
 8005894:	0800592d 	.word	0x0800592d
 8005898:	080058d9 	.word	0x080058d9
 800589c:	0800592d 	.word	0x0800592d
 80058a0:	0800592d 	.word	0x0800592d
 80058a4:	0800592d 	.word	0x0800592d
 80058a8:	080058f5 	.word	0x080058f5
 80058ac:	0800592d 	.word	0x0800592d
 80058b0:	0800592d 	.word	0x0800592d
 80058b4:	0800592d 	.word	0x0800592d
 80058b8:	08005911 	.word	0x08005911
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	68da      	ldr	r2, [r3, #12]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80058ca:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d0:	4618      	mov	r0, r3
 80058d2:	f7fd ff13 	bl	80036fc <HAL_DMA_Abort_IT>
      break;
 80058d6:	e02c      	b.n	8005932 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	68da      	ldr	r2, [r3, #12]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058e6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ec:	4618      	mov	r0, r3
 80058ee:	f7fd ff05 	bl	80036fc <HAL_DMA_Abort_IT>
      break;
 80058f2:	e01e      	b.n	8005932 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	68da      	ldr	r2, [r3, #12]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005902:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005908:	4618      	mov	r0, r3
 800590a:	f7fd fef7 	bl	80036fc <HAL_DMA_Abort_IT>
      break;
 800590e:	e010      	b.n	8005932 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	68da      	ldr	r2, [r3, #12]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800591e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005924:	4618      	mov	r0, r3
 8005926:	f7fd fee9 	bl	80036fc <HAL_DMA_Abort_IT>
      break;
 800592a:	e002      	b.n	8005932 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	73fb      	strb	r3, [r7, #15]
      break;
 8005930:	bf00      	nop
  }

  if (status == HAL_OK)
 8005932:	7bfb      	ldrb	r3, [r7, #15]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d176      	bne.n	8005a26 <HAL_TIM_PWM_Stop_DMA+0x1ba>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	2200      	movs	r2, #0
 800593e:	6839      	ldr	r1, [r7, #0]
 8005940:	4618      	mov	r0, r3
 8005942:	f000 feb9 	bl	80066b8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a39      	ldr	r2, [pc, #228]	; (8005a30 <HAL_TIM_PWM_Stop_DMA+0x1c4>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d009      	beq.n	8005964 <HAL_TIM_PWM_Stop_DMA+0xf8>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a37      	ldr	r2, [pc, #220]	; (8005a34 <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d004      	beq.n	8005964 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a36      	ldr	r2, [pc, #216]	; (8005a38 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d101      	bne.n	8005968 <HAL_TIM_PWM_Stop_DMA+0xfc>
 8005964:	2301      	movs	r3, #1
 8005966:	e000      	b.n	800596a <HAL_TIM_PWM_Stop_DMA+0xfe>
 8005968:	2300      	movs	r3, #0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d017      	beq.n	800599e <HAL_TIM_PWM_Stop_DMA+0x132>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	6a1a      	ldr	r2, [r3, #32]
 8005974:	f241 1311 	movw	r3, #4369	; 0x1111
 8005978:	4013      	ands	r3, r2
 800597a:	2b00      	cmp	r3, #0
 800597c:	d10f      	bne.n	800599e <HAL_TIM_PWM_Stop_DMA+0x132>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	6a1a      	ldr	r2, [r3, #32]
 8005984:	f240 4344 	movw	r3, #1092	; 0x444
 8005988:	4013      	ands	r3, r2
 800598a:	2b00      	cmp	r3, #0
 800598c:	d107      	bne.n	800599e <HAL_TIM_PWM_Stop_DMA+0x132>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800599c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	6a1a      	ldr	r2, [r3, #32]
 80059a4:	f241 1311 	movw	r3, #4369	; 0x1111
 80059a8:	4013      	ands	r3, r2
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d10f      	bne.n	80059ce <HAL_TIM_PWM_Stop_DMA+0x162>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	6a1a      	ldr	r2, [r3, #32]
 80059b4:	f240 4344 	movw	r3, #1092	; 0x444
 80059b8:	4013      	ands	r3, r2
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d107      	bne.n	80059ce <HAL_TIM_PWM_Stop_DMA+0x162>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f022 0201 	bic.w	r2, r2, #1
 80059cc:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d104      	bne.n	80059de <HAL_TIM_PWM_Stop_DMA+0x172>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059dc:	e023      	b.n	8005a26 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	2b04      	cmp	r3, #4
 80059e2:	d104      	bne.n	80059ee <HAL_TIM_PWM_Stop_DMA+0x182>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059ec:	e01b      	b.n	8005a26 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	2b08      	cmp	r3, #8
 80059f2:	d104      	bne.n	80059fe <HAL_TIM_PWM_Stop_DMA+0x192>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059fc:	e013      	b.n	8005a26 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	2b0c      	cmp	r3, #12
 8005a02:	d104      	bne.n	8005a0e <HAL_TIM_PWM_Stop_DMA+0x1a2>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a0c:	e00b      	b.n	8005a26 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	2b10      	cmp	r3, #16
 8005a12:	d104      	bne.n	8005a1e <HAL_TIM_PWM_Stop_DMA+0x1b2>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a1c:	e003      	b.n	8005a26 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2201      	movs	r2, #1
 8005a22:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8005a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3710      	adds	r7, #16
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}
 8005a30:	40012c00 	.word	0x40012c00
 8005a34:	40014000 	.word	0x40014000
 8005a38:	40014400 	.word	0x40014400

08005a3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b086      	sub	sp, #24
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	60f8      	str	r0, [r7, #12]
 8005a44:	60b9      	str	r1, [r7, #8]
 8005a46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d101      	bne.n	8005a5a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005a56:	2302      	movs	r3, #2
 8005a58:	e0ff      	b.n	8005c5a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2b14      	cmp	r3, #20
 8005a66:	f200 80f0 	bhi.w	8005c4a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005a6a:	a201      	add	r2, pc, #4	; (adr r2, 8005a70 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a70:	08005ac5 	.word	0x08005ac5
 8005a74:	08005c4b 	.word	0x08005c4b
 8005a78:	08005c4b 	.word	0x08005c4b
 8005a7c:	08005c4b 	.word	0x08005c4b
 8005a80:	08005b05 	.word	0x08005b05
 8005a84:	08005c4b 	.word	0x08005c4b
 8005a88:	08005c4b 	.word	0x08005c4b
 8005a8c:	08005c4b 	.word	0x08005c4b
 8005a90:	08005b47 	.word	0x08005b47
 8005a94:	08005c4b 	.word	0x08005c4b
 8005a98:	08005c4b 	.word	0x08005c4b
 8005a9c:	08005c4b 	.word	0x08005c4b
 8005aa0:	08005b87 	.word	0x08005b87
 8005aa4:	08005c4b 	.word	0x08005c4b
 8005aa8:	08005c4b 	.word	0x08005c4b
 8005aac:	08005c4b 	.word	0x08005c4b
 8005ab0:	08005bc9 	.word	0x08005bc9
 8005ab4:	08005c4b 	.word	0x08005c4b
 8005ab8:	08005c4b 	.word	0x08005c4b
 8005abc:	08005c4b 	.word	0x08005c4b
 8005ac0:	08005c09 	.word	0x08005c09
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	68b9      	ldr	r1, [r7, #8]
 8005aca:	4618      	mov	r0, r3
 8005acc:	f000 fadc 	bl	8006088 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	699a      	ldr	r2, [r3, #24]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f042 0208 	orr.w	r2, r2, #8
 8005ade:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	699a      	ldr	r2, [r3, #24]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f022 0204 	bic.w	r2, r2, #4
 8005aee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	6999      	ldr	r1, [r3, #24]
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	691a      	ldr	r2, [r3, #16]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	430a      	orrs	r2, r1
 8005b00:	619a      	str	r2, [r3, #24]
      break;
 8005b02:	e0a5      	b.n	8005c50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	68b9      	ldr	r1, [r7, #8]
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f000 fb38 	bl	8006180 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	699a      	ldr	r2, [r3, #24]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	699a      	ldr	r2, [r3, #24]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	6999      	ldr	r1, [r3, #24]
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	691b      	ldr	r3, [r3, #16]
 8005b3a:	021a      	lsls	r2, r3, #8
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	430a      	orrs	r2, r1
 8005b42:	619a      	str	r2, [r3, #24]
      break;
 8005b44:	e084      	b.n	8005c50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	68b9      	ldr	r1, [r7, #8]
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f000 fb91 	bl	8006274 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	69da      	ldr	r2, [r3, #28]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f042 0208 	orr.w	r2, r2, #8
 8005b60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	69da      	ldr	r2, [r3, #28]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f022 0204 	bic.w	r2, r2, #4
 8005b70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	69d9      	ldr	r1, [r3, #28]
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	691a      	ldr	r2, [r3, #16]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	430a      	orrs	r2, r1
 8005b82:	61da      	str	r2, [r3, #28]
      break;
 8005b84:	e064      	b.n	8005c50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	68b9      	ldr	r1, [r7, #8]
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f000 fbe9 	bl	8006364 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	69da      	ldr	r2, [r3, #28]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ba0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	69da      	ldr	r2, [r3, #28]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	69d9      	ldr	r1, [r3, #28]
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	691b      	ldr	r3, [r3, #16]
 8005bbc:	021a      	lsls	r2, r3, #8
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	430a      	orrs	r2, r1
 8005bc4:	61da      	str	r2, [r3, #28]
      break;
 8005bc6:	e043      	b.n	8005c50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	68b9      	ldr	r1, [r7, #8]
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f000 fc26 	bl	8006420 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f042 0208 	orr.w	r2, r2, #8
 8005be2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f022 0204 	bic.w	r2, r2, #4
 8005bf2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	691a      	ldr	r2, [r3, #16]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	430a      	orrs	r2, r1
 8005c04:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005c06:	e023      	b.n	8005c50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	68b9      	ldr	r1, [r7, #8]
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f000 fc5e 	bl	80064d0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c22:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c32:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	691b      	ldr	r3, [r3, #16]
 8005c3e:	021a      	lsls	r2, r3, #8
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	430a      	orrs	r2, r1
 8005c46:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005c48:	e002      	b.n	8005c50 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	75fb      	strb	r3, [r7, #23]
      break;
 8005c4e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2200      	movs	r2, #0
 8005c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c58:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3718      	adds	r7, #24
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop

08005c64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b084      	sub	sp, #16
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d101      	bne.n	8005c80 <HAL_TIM_ConfigClockSource+0x1c>
 8005c7c:	2302      	movs	r3, #2
 8005c7e:	e0b6      	b.n	8005dee <HAL_TIM_ConfigClockSource+0x18a>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2202      	movs	r2, #2
 8005c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005ca2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005caa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	68ba      	ldr	r2, [r7, #8]
 8005cb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cbc:	d03e      	beq.n	8005d3c <HAL_TIM_ConfigClockSource+0xd8>
 8005cbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cc2:	f200 8087 	bhi.w	8005dd4 <HAL_TIM_ConfigClockSource+0x170>
 8005cc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cca:	f000 8086 	beq.w	8005dda <HAL_TIM_ConfigClockSource+0x176>
 8005cce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cd2:	d87f      	bhi.n	8005dd4 <HAL_TIM_ConfigClockSource+0x170>
 8005cd4:	2b70      	cmp	r3, #112	; 0x70
 8005cd6:	d01a      	beq.n	8005d0e <HAL_TIM_ConfigClockSource+0xaa>
 8005cd8:	2b70      	cmp	r3, #112	; 0x70
 8005cda:	d87b      	bhi.n	8005dd4 <HAL_TIM_ConfigClockSource+0x170>
 8005cdc:	2b60      	cmp	r3, #96	; 0x60
 8005cde:	d050      	beq.n	8005d82 <HAL_TIM_ConfigClockSource+0x11e>
 8005ce0:	2b60      	cmp	r3, #96	; 0x60
 8005ce2:	d877      	bhi.n	8005dd4 <HAL_TIM_ConfigClockSource+0x170>
 8005ce4:	2b50      	cmp	r3, #80	; 0x50
 8005ce6:	d03c      	beq.n	8005d62 <HAL_TIM_ConfigClockSource+0xfe>
 8005ce8:	2b50      	cmp	r3, #80	; 0x50
 8005cea:	d873      	bhi.n	8005dd4 <HAL_TIM_ConfigClockSource+0x170>
 8005cec:	2b40      	cmp	r3, #64	; 0x40
 8005cee:	d058      	beq.n	8005da2 <HAL_TIM_ConfigClockSource+0x13e>
 8005cf0:	2b40      	cmp	r3, #64	; 0x40
 8005cf2:	d86f      	bhi.n	8005dd4 <HAL_TIM_ConfigClockSource+0x170>
 8005cf4:	2b30      	cmp	r3, #48	; 0x30
 8005cf6:	d064      	beq.n	8005dc2 <HAL_TIM_ConfigClockSource+0x15e>
 8005cf8:	2b30      	cmp	r3, #48	; 0x30
 8005cfa:	d86b      	bhi.n	8005dd4 <HAL_TIM_ConfigClockSource+0x170>
 8005cfc:	2b20      	cmp	r3, #32
 8005cfe:	d060      	beq.n	8005dc2 <HAL_TIM_ConfigClockSource+0x15e>
 8005d00:	2b20      	cmp	r3, #32
 8005d02:	d867      	bhi.n	8005dd4 <HAL_TIM_ConfigClockSource+0x170>
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d05c      	beq.n	8005dc2 <HAL_TIM_ConfigClockSource+0x15e>
 8005d08:	2b10      	cmp	r3, #16
 8005d0a:	d05a      	beq.n	8005dc2 <HAL_TIM_ConfigClockSource+0x15e>
 8005d0c:	e062      	b.n	8005dd4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6818      	ldr	r0, [r3, #0]
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	6899      	ldr	r1, [r3, #8]
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	685a      	ldr	r2, [r3, #4]
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	68db      	ldr	r3, [r3, #12]
 8005d1e:	f000 fcab 	bl	8006678 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005d30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	68ba      	ldr	r2, [r7, #8]
 8005d38:	609a      	str	r2, [r3, #8]
      break;
 8005d3a:	e04f      	b.n	8005ddc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6818      	ldr	r0, [r3, #0]
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	6899      	ldr	r1, [r3, #8]
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	685a      	ldr	r2, [r3, #4]
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	68db      	ldr	r3, [r3, #12]
 8005d4c:	f000 fc94 	bl	8006678 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	689a      	ldr	r2, [r3, #8]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d5e:	609a      	str	r2, [r3, #8]
      break;
 8005d60:	e03c      	b.n	8005ddc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6818      	ldr	r0, [r3, #0]
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	6859      	ldr	r1, [r3, #4]
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	68db      	ldr	r3, [r3, #12]
 8005d6e:	461a      	mov	r2, r3
 8005d70:	f000 fc08 	bl	8006584 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	2150      	movs	r1, #80	; 0x50
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f000 fc61 	bl	8006642 <TIM_ITRx_SetConfig>
      break;
 8005d80:	e02c      	b.n	8005ddc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6818      	ldr	r0, [r3, #0]
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	6859      	ldr	r1, [r3, #4]
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	68db      	ldr	r3, [r3, #12]
 8005d8e:	461a      	mov	r2, r3
 8005d90:	f000 fc27 	bl	80065e2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	2160      	movs	r1, #96	; 0x60
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f000 fc51 	bl	8006642 <TIM_ITRx_SetConfig>
      break;
 8005da0:	e01c      	b.n	8005ddc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6818      	ldr	r0, [r3, #0]
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	6859      	ldr	r1, [r3, #4]
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	461a      	mov	r2, r3
 8005db0:	f000 fbe8 	bl	8006584 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	2140      	movs	r1, #64	; 0x40
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f000 fc41 	bl	8006642 <TIM_ITRx_SetConfig>
      break;
 8005dc0:	e00c      	b.n	8005ddc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4619      	mov	r1, r3
 8005dcc:	4610      	mov	r0, r2
 8005dce:	f000 fc38 	bl	8006642 <TIM_ITRx_SetConfig>
      break;
 8005dd2:	e003      	b.n	8005ddc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	73fb      	strb	r3, [r7, #15]
      break;
 8005dd8:	e000      	b.n	8005ddc <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005dda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2201      	movs	r2, #1
 8005de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3710      	adds	r7, #16
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}

08005df6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005df6:	b480      	push	{r7}
 8005df8:	b083      	sub	sp, #12
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8005dfe:	bf00      	nop
 8005e00:	370c      	adds	r7, #12
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr

08005e0a <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005e0a:	b480      	push	{r7}
 8005e0c:	b083      	sub	sp, #12
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005e12:	bf00      	nop
 8005e14:	370c      	adds	r7, #12
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr

08005e1e <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8005e1e:	b580      	push	{r7, lr}
 8005e20:	b084      	sub	sp, #16
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e2a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	429a      	cmp	r2, r3
 8005e34:	d107      	bne.n	8005e46 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2201      	movs	r2, #1
 8005e3a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e44:	e02a      	b.n	8005e9c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d107      	bne.n	8005e60 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2202      	movs	r2, #2
 8005e54:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2201      	movs	r2, #1
 8005e5a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e5e:	e01d      	b.n	8005e9c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e64:	687a      	ldr	r2, [r7, #4]
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d107      	bne.n	8005e7a <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2204      	movs	r2, #4
 8005e6e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2201      	movs	r2, #1
 8005e74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e78:	e010      	b.n	8005e9c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d107      	bne.n	8005e94 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2208      	movs	r2, #8
 8005e88:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e92:	e003      	b.n	8005e9c <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2201      	movs	r2, #1
 8005e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005e9c:	68f8      	ldr	r0, [r7, #12]
 8005e9e:	f7ff ffb4 	bl	8005e0a <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	771a      	strb	r2, [r3, #28]
}
 8005ea8:	bf00      	nop
 8005eaa:	3710      	adds	r7, #16
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b084      	sub	sp, #16
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ebc:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d10b      	bne.n	8005ee0 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	69db      	ldr	r3, [r3, #28]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d136      	bne.n	8005f44 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2201      	movs	r2, #1
 8005eda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ede:	e031      	b.n	8005f44 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ee4:	687a      	ldr	r2, [r7, #4]
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d10b      	bne.n	8005f02 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2202      	movs	r2, #2
 8005eee:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	69db      	ldr	r3, [r3, #28]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d125      	bne.n	8005f44 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f00:	e020      	b.n	8005f44 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f06:	687a      	ldr	r2, [r7, #4]
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d10b      	bne.n	8005f24 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2204      	movs	r2, #4
 8005f10:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	69db      	ldr	r3, [r3, #28]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d114      	bne.n	8005f44 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f22:	e00f      	b.n	8005f44 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d10a      	bne.n	8005f44 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2208      	movs	r2, #8
 8005f32:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	69db      	ldr	r3, [r3, #28]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d103      	bne.n	8005f44 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f44:	68f8      	ldr	r0, [r7, #12]
 8005f46:	f001 fb4d 	bl	80075e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	771a      	strb	r2, [r3, #28]
  //g_tim_pwm_transfer_cmplt = true;

}
 8005f50:	bf00      	nop
 8005f52:	3710      	adds	r7, #16
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}

08005f58 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b084      	sub	sp, #16
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f64:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d103      	bne.n	8005f78 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2201      	movs	r2, #1
 8005f74:	771a      	strb	r2, [r3, #28]
 8005f76:	e019      	b.n	8005fac <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f7c:	687a      	ldr	r2, [r7, #4]
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d103      	bne.n	8005f8a <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2202      	movs	r2, #2
 8005f86:	771a      	strb	r2, [r3, #28]
 8005f88:	e010      	b.n	8005fac <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d103      	bne.n	8005f9c <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2204      	movs	r2, #4
 8005f98:	771a      	strb	r2, [r3, #28]
 8005f9a:	e007      	b.n	8005fac <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d102      	bne.n	8005fac <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2208      	movs	r2, #8
 8005faa:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8005fac:	68f8      	ldr	r0, [r7, #12]
 8005fae:	f7ff ff22 	bl	8005df6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	771a      	strb	r2, [r3, #28]
}
 8005fb8:	bf00      	nop
 8005fba:	3710      	adds	r7, #16
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b085      	sub	sp, #20
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4a2a      	ldr	r2, [pc, #168]	; (800607c <TIM_Base_SetConfig+0xbc>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d003      	beq.n	8005fe0 <TIM_Base_SetConfig+0x20>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fde:	d108      	bne.n	8005ff2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fe6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	68fa      	ldr	r2, [r7, #12]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4a21      	ldr	r2, [pc, #132]	; (800607c <TIM_Base_SetConfig+0xbc>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d00b      	beq.n	8006012 <TIM_Base_SetConfig+0x52>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006000:	d007      	beq.n	8006012 <TIM_Base_SetConfig+0x52>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	4a1e      	ldr	r2, [pc, #120]	; (8006080 <TIM_Base_SetConfig+0xc0>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d003      	beq.n	8006012 <TIM_Base_SetConfig+0x52>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4a1d      	ldr	r2, [pc, #116]	; (8006084 <TIM_Base_SetConfig+0xc4>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d108      	bne.n	8006024 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006018:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	68db      	ldr	r3, [r3, #12]
 800601e:	68fa      	ldr	r2, [r7, #12]
 8006020:	4313      	orrs	r3, r2
 8006022:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	695b      	ldr	r3, [r3, #20]
 800602e:	4313      	orrs	r3, r2
 8006030:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	68fa      	ldr	r2, [r7, #12]
 8006036:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	689a      	ldr	r2, [r3, #8]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	4a0c      	ldr	r2, [pc, #48]	; (800607c <TIM_Base_SetConfig+0xbc>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d007      	beq.n	8006060 <TIM_Base_SetConfig+0xa0>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	4a0b      	ldr	r2, [pc, #44]	; (8006080 <TIM_Base_SetConfig+0xc0>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d003      	beq.n	8006060 <TIM_Base_SetConfig+0xa0>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	4a0a      	ldr	r2, [pc, #40]	; (8006084 <TIM_Base_SetConfig+0xc4>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d103      	bne.n	8006068 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	691a      	ldr	r2, [r3, #16]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2201      	movs	r2, #1
 800606c:	615a      	str	r2, [r3, #20]
}
 800606e:	bf00      	nop
 8006070:	3714      	adds	r7, #20
 8006072:	46bd      	mov	sp, r7
 8006074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006078:	4770      	bx	lr
 800607a:	bf00      	nop
 800607c:	40012c00 	.word	0x40012c00
 8006080:	40014000 	.word	0x40014000
 8006084:	40014400 	.word	0x40014400

08006088 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006088:	b480      	push	{r7}
 800608a:	b087      	sub	sp, #28
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6a1b      	ldr	r3, [r3, #32]
 8006096:	f023 0201 	bic.w	r2, r3, #1
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6a1b      	ldr	r3, [r3, #32]
 80060a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	699b      	ldr	r3, [r3, #24]
 80060ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f023 0303 	bic.w	r3, r3, #3
 80060c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	68fa      	ldr	r2, [r7, #12]
 80060ca:	4313      	orrs	r3, r2
 80060cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	f023 0302 	bic.w	r3, r3, #2
 80060d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	697a      	ldr	r2, [r7, #20]
 80060dc:	4313      	orrs	r3, r2
 80060de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	4a24      	ldr	r2, [pc, #144]	; (8006174 <TIM_OC1_SetConfig+0xec>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d007      	beq.n	80060f8 <TIM_OC1_SetConfig+0x70>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	4a23      	ldr	r2, [pc, #140]	; (8006178 <TIM_OC1_SetConfig+0xf0>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d003      	beq.n	80060f8 <TIM_OC1_SetConfig+0x70>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	4a22      	ldr	r2, [pc, #136]	; (800617c <TIM_OC1_SetConfig+0xf4>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d10c      	bne.n	8006112 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	f023 0308 	bic.w	r3, r3, #8
 80060fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	68db      	ldr	r3, [r3, #12]
 8006104:	697a      	ldr	r2, [r7, #20]
 8006106:	4313      	orrs	r3, r2
 8006108:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	f023 0304 	bic.w	r3, r3, #4
 8006110:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	4a17      	ldr	r2, [pc, #92]	; (8006174 <TIM_OC1_SetConfig+0xec>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d007      	beq.n	800612a <TIM_OC1_SetConfig+0xa2>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	4a16      	ldr	r2, [pc, #88]	; (8006178 <TIM_OC1_SetConfig+0xf0>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d003      	beq.n	800612a <TIM_OC1_SetConfig+0xa2>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4a15      	ldr	r2, [pc, #84]	; (800617c <TIM_OC1_SetConfig+0xf4>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d111      	bne.n	800614e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006130:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006138:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	695b      	ldr	r3, [r3, #20]
 800613e:	693a      	ldr	r2, [r7, #16]
 8006140:	4313      	orrs	r3, r2
 8006142:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	699b      	ldr	r3, [r3, #24]
 8006148:	693a      	ldr	r2, [r7, #16]
 800614a:	4313      	orrs	r3, r2
 800614c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	693a      	ldr	r2, [r7, #16]
 8006152:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	68fa      	ldr	r2, [r7, #12]
 8006158:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	685a      	ldr	r2, [r3, #4]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	697a      	ldr	r2, [r7, #20]
 8006166:	621a      	str	r2, [r3, #32]
}
 8006168:	bf00      	nop
 800616a:	371c      	adds	r7, #28
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr
 8006174:	40012c00 	.word	0x40012c00
 8006178:	40014000 	.word	0x40014000
 800617c:	40014400 	.word	0x40014400

08006180 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006180:	b480      	push	{r7}
 8006182:	b087      	sub	sp, #28
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6a1b      	ldr	r3, [r3, #32]
 800618e:	f023 0210 	bic.w	r2, r3, #16
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6a1b      	ldr	r3, [r3, #32]
 800619a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	699b      	ldr	r3, [r3, #24]
 80061a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80061ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	021b      	lsls	r3, r3, #8
 80061c2:	68fa      	ldr	r2, [r7, #12]
 80061c4:	4313      	orrs	r3, r2
 80061c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	f023 0320 	bic.w	r3, r3, #32
 80061ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	011b      	lsls	r3, r3, #4
 80061d6:	697a      	ldr	r2, [r7, #20]
 80061d8:	4313      	orrs	r3, r2
 80061da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	4a22      	ldr	r2, [pc, #136]	; (8006268 <TIM_OC2_SetConfig+0xe8>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d10d      	bne.n	8006200 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	68db      	ldr	r3, [r3, #12]
 80061f0:	011b      	lsls	r3, r3, #4
 80061f2:	697a      	ldr	r2, [r7, #20]
 80061f4:	4313      	orrs	r3, r2
 80061f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	4a19      	ldr	r2, [pc, #100]	; (8006268 <TIM_OC2_SetConfig+0xe8>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d007      	beq.n	8006218 <TIM_OC2_SetConfig+0x98>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	4a18      	ldr	r2, [pc, #96]	; (800626c <TIM_OC2_SetConfig+0xec>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d003      	beq.n	8006218 <TIM_OC2_SetConfig+0x98>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	4a17      	ldr	r2, [pc, #92]	; (8006270 <TIM_OC2_SetConfig+0xf0>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d113      	bne.n	8006240 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800621e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006226:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	695b      	ldr	r3, [r3, #20]
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	693a      	ldr	r2, [r7, #16]
 8006230:	4313      	orrs	r3, r2
 8006232:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	699b      	ldr	r3, [r3, #24]
 8006238:	009b      	lsls	r3, r3, #2
 800623a:	693a      	ldr	r2, [r7, #16]
 800623c:	4313      	orrs	r3, r2
 800623e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	693a      	ldr	r2, [r7, #16]
 8006244:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	68fa      	ldr	r2, [r7, #12]
 800624a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	685a      	ldr	r2, [r3, #4]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	697a      	ldr	r2, [r7, #20]
 8006258:	621a      	str	r2, [r3, #32]
}
 800625a:	bf00      	nop
 800625c:	371c      	adds	r7, #28
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr
 8006266:	bf00      	nop
 8006268:	40012c00 	.word	0x40012c00
 800626c:	40014000 	.word	0x40014000
 8006270:	40014400 	.word	0x40014400

08006274 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006274:	b480      	push	{r7}
 8006276:	b087      	sub	sp, #28
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6a1b      	ldr	r3, [r3, #32]
 8006282:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6a1b      	ldr	r3, [r3, #32]
 800628e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	69db      	ldr	r3, [r3, #28]
 800629a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f023 0303 	bic.w	r3, r3, #3
 80062ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	68fa      	ldr	r2, [r7, #12]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80062c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	021b      	lsls	r3, r3, #8
 80062c8:	697a      	ldr	r2, [r7, #20]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a21      	ldr	r2, [pc, #132]	; (8006358 <TIM_OC3_SetConfig+0xe4>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d10d      	bne.n	80062f2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80062dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	68db      	ldr	r3, [r3, #12]
 80062e2:	021b      	lsls	r3, r3, #8
 80062e4:	697a      	ldr	r2, [r7, #20]
 80062e6:	4313      	orrs	r3, r2
 80062e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80062f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	4a18      	ldr	r2, [pc, #96]	; (8006358 <TIM_OC3_SetConfig+0xe4>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d007      	beq.n	800630a <TIM_OC3_SetConfig+0x96>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	4a17      	ldr	r2, [pc, #92]	; (800635c <TIM_OC3_SetConfig+0xe8>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d003      	beq.n	800630a <TIM_OC3_SetConfig+0x96>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	4a16      	ldr	r2, [pc, #88]	; (8006360 <TIM_OC3_SetConfig+0xec>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d113      	bne.n	8006332 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006310:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006318:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	695b      	ldr	r3, [r3, #20]
 800631e:	011b      	lsls	r3, r3, #4
 8006320:	693a      	ldr	r2, [r7, #16]
 8006322:	4313      	orrs	r3, r2
 8006324:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	699b      	ldr	r3, [r3, #24]
 800632a:	011b      	lsls	r3, r3, #4
 800632c:	693a      	ldr	r2, [r7, #16]
 800632e:	4313      	orrs	r3, r2
 8006330:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	693a      	ldr	r2, [r7, #16]
 8006336:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	68fa      	ldr	r2, [r7, #12]
 800633c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	685a      	ldr	r2, [r3, #4]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	697a      	ldr	r2, [r7, #20]
 800634a:	621a      	str	r2, [r3, #32]
}
 800634c:	bf00      	nop
 800634e:	371c      	adds	r7, #28
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr
 8006358:	40012c00 	.word	0x40012c00
 800635c:	40014000 	.word	0x40014000
 8006360:	40014400 	.word	0x40014400

08006364 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006364:	b480      	push	{r7}
 8006366:	b087      	sub	sp, #28
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6a1b      	ldr	r3, [r3, #32]
 8006372:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6a1b      	ldr	r3, [r3, #32]
 800637e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	69db      	ldr	r3, [r3, #28]
 800638a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006392:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006396:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800639e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	021b      	lsls	r3, r3, #8
 80063a6:	68fa      	ldr	r2, [r7, #12]
 80063a8:	4313      	orrs	r3, r2
 80063aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80063b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	689b      	ldr	r3, [r3, #8]
 80063b8:	031b      	lsls	r3, r3, #12
 80063ba:	693a      	ldr	r2, [r7, #16]
 80063bc:	4313      	orrs	r3, r2
 80063be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	4a14      	ldr	r2, [pc, #80]	; (8006414 <TIM_OC4_SetConfig+0xb0>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d007      	beq.n	80063d8 <TIM_OC4_SetConfig+0x74>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	4a13      	ldr	r2, [pc, #76]	; (8006418 <TIM_OC4_SetConfig+0xb4>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d003      	beq.n	80063d8 <TIM_OC4_SetConfig+0x74>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	4a12      	ldr	r2, [pc, #72]	; (800641c <TIM_OC4_SetConfig+0xb8>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d109      	bne.n	80063ec <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	695b      	ldr	r3, [r3, #20]
 80063e4:	019b      	lsls	r3, r3, #6
 80063e6:	697a      	ldr	r2, [r7, #20]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	697a      	ldr	r2, [r7, #20]
 80063f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	68fa      	ldr	r2, [r7, #12]
 80063f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	685a      	ldr	r2, [r3, #4]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	693a      	ldr	r2, [r7, #16]
 8006404:	621a      	str	r2, [r3, #32]
}
 8006406:	bf00      	nop
 8006408:	371c      	adds	r7, #28
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr
 8006412:	bf00      	nop
 8006414:	40012c00 	.word	0x40012c00
 8006418:	40014000 	.word	0x40014000
 800641c:	40014400 	.word	0x40014400

08006420 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006420:	b480      	push	{r7}
 8006422:	b087      	sub	sp, #28
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6a1b      	ldr	r3, [r3, #32]
 800642e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6a1b      	ldr	r3, [r3, #32]
 800643a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800644e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006452:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	68fa      	ldr	r2, [r7, #12]
 800645a:	4313      	orrs	r3, r2
 800645c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006464:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	041b      	lsls	r3, r3, #16
 800646c:	693a      	ldr	r2, [r7, #16]
 800646e:	4313      	orrs	r3, r2
 8006470:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	4a13      	ldr	r2, [pc, #76]	; (80064c4 <TIM_OC5_SetConfig+0xa4>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d007      	beq.n	800648a <TIM_OC5_SetConfig+0x6a>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	4a12      	ldr	r2, [pc, #72]	; (80064c8 <TIM_OC5_SetConfig+0xa8>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d003      	beq.n	800648a <TIM_OC5_SetConfig+0x6a>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	4a11      	ldr	r2, [pc, #68]	; (80064cc <TIM_OC5_SetConfig+0xac>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d109      	bne.n	800649e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006490:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	695b      	ldr	r3, [r3, #20]
 8006496:	021b      	lsls	r3, r3, #8
 8006498:	697a      	ldr	r2, [r7, #20]
 800649a:	4313      	orrs	r3, r2
 800649c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	697a      	ldr	r2, [r7, #20]
 80064a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	68fa      	ldr	r2, [r7, #12]
 80064a8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	685a      	ldr	r2, [r3, #4]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	693a      	ldr	r2, [r7, #16]
 80064b6:	621a      	str	r2, [r3, #32]
}
 80064b8:	bf00      	nop
 80064ba:	371c      	adds	r7, #28
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr
 80064c4:	40012c00 	.word	0x40012c00
 80064c8:	40014000 	.word	0x40014000
 80064cc:	40014400 	.word	0x40014400

080064d0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b087      	sub	sp, #28
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6a1b      	ldr	r3, [r3, #32]
 80064de:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6a1b      	ldr	r3, [r3, #32]
 80064ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80064fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006502:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	021b      	lsls	r3, r3, #8
 800650a:	68fa      	ldr	r2, [r7, #12]
 800650c:	4313      	orrs	r3, r2
 800650e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006516:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	051b      	lsls	r3, r3, #20
 800651e:	693a      	ldr	r2, [r7, #16]
 8006520:	4313      	orrs	r3, r2
 8006522:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	4a14      	ldr	r2, [pc, #80]	; (8006578 <TIM_OC6_SetConfig+0xa8>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d007      	beq.n	800653c <TIM_OC6_SetConfig+0x6c>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	4a13      	ldr	r2, [pc, #76]	; (800657c <TIM_OC6_SetConfig+0xac>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d003      	beq.n	800653c <TIM_OC6_SetConfig+0x6c>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	4a12      	ldr	r2, [pc, #72]	; (8006580 <TIM_OC6_SetConfig+0xb0>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d109      	bne.n	8006550 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006542:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	695b      	ldr	r3, [r3, #20]
 8006548:	029b      	lsls	r3, r3, #10
 800654a:	697a      	ldr	r2, [r7, #20]
 800654c:	4313      	orrs	r3, r2
 800654e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	697a      	ldr	r2, [r7, #20]
 8006554:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	68fa      	ldr	r2, [r7, #12]
 800655a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	685a      	ldr	r2, [r3, #4]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	693a      	ldr	r2, [r7, #16]
 8006568:	621a      	str	r2, [r3, #32]
}
 800656a:	bf00      	nop
 800656c:	371c      	adds	r7, #28
 800656e:	46bd      	mov	sp, r7
 8006570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006574:	4770      	bx	lr
 8006576:	bf00      	nop
 8006578:	40012c00 	.word	0x40012c00
 800657c:	40014000 	.word	0x40014000
 8006580:	40014400 	.word	0x40014400

08006584 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006584:	b480      	push	{r7}
 8006586:	b087      	sub	sp, #28
 8006588:	af00      	add	r7, sp, #0
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	60b9      	str	r1, [r7, #8]
 800658e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	6a1b      	ldr	r3, [r3, #32]
 8006594:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	6a1b      	ldr	r3, [r3, #32]
 800659a:	f023 0201 	bic.w	r2, r3, #1
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	699b      	ldr	r3, [r3, #24]
 80065a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	011b      	lsls	r3, r3, #4
 80065b4:	693a      	ldr	r2, [r7, #16]
 80065b6:	4313      	orrs	r3, r2
 80065b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	f023 030a 	bic.w	r3, r3, #10
 80065c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80065c2:	697a      	ldr	r2, [r7, #20]
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	4313      	orrs	r3, r2
 80065c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	693a      	ldr	r2, [r7, #16]
 80065ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	697a      	ldr	r2, [r7, #20]
 80065d4:	621a      	str	r2, [r3, #32]
}
 80065d6:	bf00      	nop
 80065d8:	371c      	adds	r7, #28
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr

080065e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065e2:	b480      	push	{r7}
 80065e4:	b087      	sub	sp, #28
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	60f8      	str	r0, [r7, #12]
 80065ea:	60b9      	str	r1, [r7, #8]
 80065ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	6a1b      	ldr	r3, [r3, #32]
 80065f2:	f023 0210 	bic.w	r2, r3, #16
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	699b      	ldr	r3, [r3, #24]
 80065fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	6a1b      	ldr	r3, [r3, #32]
 8006604:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800660c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	031b      	lsls	r3, r3, #12
 8006612:	697a      	ldr	r2, [r7, #20]
 8006614:	4313      	orrs	r3, r2
 8006616:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800661e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	011b      	lsls	r3, r3, #4
 8006624:	693a      	ldr	r2, [r7, #16]
 8006626:	4313      	orrs	r3, r2
 8006628:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	697a      	ldr	r2, [r7, #20]
 800662e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	693a      	ldr	r2, [r7, #16]
 8006634:	621a      	str	r2, [r3, #32]
}
 8006636:	bf00      	nop
 8006638:	371c      	adds	r7, #28
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr

08006642 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006642:	b480      	push	{r7}
 8006644:	b085      	sub	sp, #20
 8006646:	af00      	add	r7, sp, #0
 8006648:	6078      	str	r0, [r7, #4]
 800664a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006658:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800665a:	683a      	ldr	r2, [r7, #0]
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	4313      	orrs	r3, r2
 8006660:	f043 0307 	orr.w	r3, r3, #7
 8006664:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	68fa      	ldr	r2, [r7, #12]
 800666a:	609a      	str	r2, [r3, #8]
}
 800666c:	bf00      	nop
 800666e:	3714      	adds	r7, #20
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr

08006678 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006678:	b480      	push	{r7}
 800667a:	b087      	sub	sp, #28
 800667c:	af00      	add	r7, sp, #0
 800667e:	60f8      	str	r0, [r7, #12]
 8006680:	60b9      	str	r1, [r7, #8]
 8006682:	607a      	str	r2, [r7, #4]
 8006684:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006692:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	021a      	lsls	r2, r3, #8
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	431a      	orrs	r2, r3
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	4313      	orrs	r3, r2
 80066a0:	697a      	ldr	r2, [r7, #20]
 80066a2:	4313      	orrs	r3, r2
 80066a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	697a      	ldr	r2, [r7, #20]
 80066aa:	609a      	str	r2, [r3, #8]
}
 80066ac:	bf00      	nop
 80066ae:	371c      	adds	r7, #28
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr

080066b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b087      	sub	sp, #28
 80066bc:	af00      	add	r7, sp, #0
 80066be:	60f8      	str	r0, [r7, #12]
 80066c0:	60b9      	str	r1, [r7, #8]
 80066c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	f003 031f 	and.w	r3, r3, #31
 80066ca:	2201      	movs	r2, #1
 80066cc:	fa02 f303 	lsl.w	r3, r2, r3
 80066d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	6a1a      	ldr	r2, [r3, #32]
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	43db      	mvns	r3, r3
 80066da:	401a      	ands	r2, r3
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	6a1a      	ldr	r2, [r3, #32]
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	f003 031f 	and.w	r3, r3, #31
 80066ea:	6879      	ldr	r1, [r7, #4]
 80066ec:	fa01 f303 	lsl.w	r3, r1, r3
 80066f0:	431a      	orrs	r2, r3
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	621a      	str	r2, [r3, #32]
}
 80066f6:	bf00      	nop
 80066f8:	371c      	adds	r7, #28
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr
	...

08006704 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006704:	b480      	push	{r7}
 8006706:	b085      	sub	sp, #20
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006714:	2b01      	cmp	r3, #1
 8006716:	d101      	bne.n	800671c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006718:	2302      	movs	r3, #2
 800671a:	e04f      	b.n	80067bc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2201      	movs	r2, #1
 8006720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2202      	movs	r2, #2
 8006728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a21      	ldr	r2, [pc, #132]	; (80067c8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d108      	bne.n	8006758 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800674c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	68fa      	ldr	r2, [r7, #12]
 8006754:	4313      	orrs	r3, r2
 8006756:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800675e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	68fa      	ldr	r2, [r7, #12]
 8006766:	4313      	orrs	r3, r2
 8006768:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	68fa      	ldr	r2, [r7, #12]
 8006770:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a14      	ldr	r2, [pc, #80]	; (80067c8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d009      	beq.n	8006790 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006784:	d004      	beq.n	8006790 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a10      	ldr	r2, [pc, #64]	; (80067cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d10c      	bne.n	80067aa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006796:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	68ba      	ldr	r2, [r7, #8]
 800679e:	4313      	orrs	r3, r2
 80067a0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	68ba      	ldr	r2, [r7, #8]
 80067a8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2201      	movs	r2, #1
 80067ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2200      	movs	r2, #0
 80067b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067ba:	2300      	movs	r3, #0
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3714      	adds	r7, #20
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr
 80067c8:	40012c00 	.word	0x40012c00
 80067cc:	40014000 	.word	0x40014000

080067d0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b085      	sub	sp, #20
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80067da:	2300      	movs	r3, #0
 80067dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	d101      	bne.n	80067ec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80067e8:	2302      	movs	r3, #2
 80067ea:	e060      	b.n	80068ae <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2201      	movs	r2, #1
 80067f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	68db      	ldr	r3, [r3, #12]
 80067fe:	4313      	orrs	r3, r2
 8006800:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	4313      	orrs	r3, r2
 800680e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	4313      	orrs	r3, r2
 800681c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4313      	orrs	r3, r2
 800682a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	691b      	ldr	r3, [r3, #16]
 8006836:	4313      	orrs	r3, r2
 8006838:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	695b      	ldr	r3, [r3, #20]
 8006844:	4313      	orrs	r3, r2
 8006846:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006852:	4313      	orrs	r3, r2
 8006854:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	699b      	ldr	r3, [r3, #24]
 8006860:	041b      	lsls	r3, r3, #16
 8006862:	4313      	orrs	r3, r2
 8006864:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a14      	ldr	r2, [pc, #80]	; (80068bc <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d115      	bne.n	800689c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800687a:	051b      	lsls	r3, r3, #20
 800687c:	4313      	orrs	r3, r2
 800687e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	69db      	ldr	r3, [r3, #28]
 800688a:	4313      	orrs	r3, r2
 800688c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	6a1b      	ldr	r3, [r3, #32]
 8006898:	4313      	orrs	r3, r2
 800689a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	68fa      	ldr	r2, [r7, #12]
 80068a2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068ac:	2300      	movs	r3, #0
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3714      	adds	r7, #20
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr
 80068ba:	bf00      	nop
 80068bc:	40012c00 	.word	0x40012c00

080068c0 <board_init_common_rtc_init>:
uint32_t g_button_on_count[NUM_PUSH_BUTTONS] = {0};
bool button_press_state[NUM_PUSH_BUTTONS] = {false};
extern UART_HandleTypeDef      gh_host_usart;

static void board_init_common_rtc_init(void)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	af00      	add	r7, sp, #0
    g_rtc_handle.Instance = RTC;
 80068c4:	4b10      	ldr	r3, [pc, #64]	; (8006908 <board_init_common_rtc_init+0x48>)
 80068c6:	4a11      	ldr	r2, [pc, #68]	; (800690c <board_init_common_rtc_init+0x4c>)
 80068c8:	601a      	str	r2, [r3, #0]
    g_rtc_handle.Init.HourFormat = RTC_HOURFORMAT_24;
 80068ca:	4b0f      	ldr	r3, [pc, #60]	; (8006908 <board_init_common_rtc_init+0x48>)
 80068cc:	2200      	movs	r2, #0
 80068ce:	605a      	str	r2, [r3, #4]
    g_rtc_handle.Init.AsynchPrediv = 127;
 80068d0:	4b0d      	ldr	r3, [pc, #52]	; (8006908 <board_init_common_rtc_init+0x48>)
 80068d2:	227f      	movs	r2, #127	; 0x7f
 80068d4:	609a      	str	r2, [r3, #8]
    g_rtc_handle.Init.SynchPrediv = 255;
 80068d6:	4b0c      	ldr	r3, [pc, #48]	; (8006908 <board_init_common_rtc_init+0x48>)
 80068d8:	22ff      	movs	r2, #255	; 0xff
 80068da:	60da      	str	r2, [r3, #12]
    g_rtc_handle.Init.OutPut = RTC_OUTPUT_DISABLE;
 80068dc:	4b0a      	ldr	r3, [pc, #40]	; (8006908 <board_init_common_rtc_init+0x48>)
 80068de:	2200      	movs	r2, #0
 80068e0:	611a      	str	r2, [r3, #16]
    g_rtc_handle.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80068e2:	4b09      	ldr	r3, [pc, #36]	; (8006908 <board_init_common_rtc_init+0x48>)
 80068e4:	2200      	movs	r2, #0
 80068e6:	615a      	str	r2, [r3, #20]
    g_rtc_handle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80068e8:	4b07      	ldr	r3, [pc, #28]	; (8006908 <board_init_common_rtc_init+0x48>)
 80068ea:	2200      	movs	r2, #0
 80068ec:	619a      	str	r2, [r3, #24]
    g_rtc_handle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80068ee:	4b06      	ldr	r3, [pc, #24]	; (8006908 <board_init_common_rtc_init+0x48>)
 80068f0:	2200      	movs	r2, #0
 80068f2:	61da      	str	r2, [r3, #28]
    if (HAL_RTC_Init(&g_rtc_handle) != HAL_OK) Error_Handler();
 80068f4:	4804      	ldr	r0, [pc, #16]	; (8006908 <board_init_common_rtc_init+0x48>)
 80068f6:	f7fe fc01 	bl	80050fc <HAL_RTC_Init>
 80068fa:	4603      	mov	r3, r0
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d001      	beq.n	8006904 <board_init_common_rtc_init+0x44>
 8006900:	f000 f9b7 	bl	8006c72 <Error_Handler>
}
 8006904:	bf00      	nop
 8006906:	bd80      	pop	{r7, pc}
 8006908:	200020e8 	.word	0x200020e8
 800690c:	40002800 	.word	0x40002800

08006910 <SystemClock_Config>:

static void SystemClock_Config(void)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b0ae      	sub	sp, #184	; 0xb8
 8006914:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006916:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800691a:	2244      	movs	r2, #68	; 0x44
 800691c:	2100      	movs	r1, #0
 800691e:	4618      	mov	r0, r3
 8006920:	f001 f82e 	bl	8007980 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006924:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8006928:	2200      	movs	r2, #0
 800692a:	601a      	str	r2, [r3, #0]
 800692c:	605a      	str	r2, [r3, #4]
 800692e:	609a      	str	r2, [r3, #8]
 8006930:	60da      	str	r2, [r3, #12]
 8006932:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006934:	1d3b      	adds	r3, r7, #4
 8006936:	225c      	movs	r2, #92	; 0x5c
 8006938:	2100      	movs	r1, #0
 800693a:	4618      	mov	r0, r3
 800693c:	f001 f820 	bl	8007980 <memset>

    HAL_PWR_EnableBkUpAccess();
 8006940:	f7fd f9ee 	bl	8003d20 <HAL_PWR_EnableBkUpAccess>
    __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8006944:	4b25      	ldr	r3, [pc, #148]	; (80069dc <SystemClock_Config+0xcc>)
 8006946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800694a:	4a24      	ldr	r2, [pc, #144]	; (80069dc <SystemClock_Config+0xcc>)
 800694c:	f023 0318 	bic.w	r3, r3, #24
 8006950:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8006954:	2305      	movs	r3, #5
 8006956:	677b      	str	r3, [r7, #116]	; 0x74
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006958:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800695c:	67bb      	str	r3, [r7, #120]	; 0x78
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800695e:	2301      	movs	r3, #1
 8006960:	67fb      	str	r3, [r7, #124]	; 0x7c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8006962:	2300      	movs	r3, #0
 8006964:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) while(1);
 8006968:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800696c:	4618      	mov	r0, r3
 800696e:	f7fd fabb 	bl	8003ee8 <HAL_RCC_OscConfig>
 8006972:	4603      	mov	r3, r0
 8006974:	2b00      	cmp	r3, #0
 8006976:	d000      	beq.n	800697a <SystemClock_Config+0x6a>
 8006978:	e7fe      	b.n	8006978 <SystemClock_Config+0x68>

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800697a:	230f      	movs	r3, #15
 800697c:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800697e:	2302      	movs	r3, #2
 8006980:	667b      	str	r3, [r7, #100]	; 0x64
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006982:	2300      	movs	r3, #0
 8006984:	66bb      	str	r3, [r7, #104]	; 0x68
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006986:	2300      	movs	r3, #0
 8006988:	66fb      	str	r3, [r7, #108]	; 0x6c
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800698a:	2300      	movs	r3, #0
 800698c:	673b      	str	r3, [r7, #112]	; 0x70

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) while(1);
 800698e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8006992:	2102      	movs	r1, #2
 8006994:	4618      	mov	r0, r3
 8006996:	f7fd febb 	bl	8004710 <HAL_RCC_ClockConfig>
 800699a:	4603      	mov	r3, r0
 800699c:	2b00      	cmp	r3, #0
 800699e:	d000      	beq.n	80069a2 <SystemClock_Config+0x92>
 80069a0:	e7fe      	b.n	80069a0 <SystemClock_Config+0x90>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80069a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80069a6:	607b      	str	r3, [r7, #4]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80069a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80069ac:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) Error_Handler();
 80069ae:	1d3b      	adds	r3, r7, #4
 80069b0:	4618      	mov	r0, r3
 80069b2:	f7fe f899 	bl	8004ae8 <HAL_RCCEx_PeriphCLKConfig>
 80069b6:	4603      	mov	r3, r0
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d001      	beq.n	80069c0 <SystemClock_Config+0xb0>
 80069bc:	f000 f959 	bl	8006c72 <Error_Handler>
    if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK) Error_Handler();
 80069c0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80069c4:	f7fd fa3a 	bl	8003e3c <HAL_PWREx_ControlVoltageScaling>
 80069c8:	4603      	mov	r3, r0
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d001      	beq.n	80069d2 <SystemClock_Config+0xc2>
 80069ce:	f000 f950 	bl	8006c72 <Error_Handler>
}
 80069d2:	bf00      	nop
 80069d4:	37b8      	adds	r7, #184	; 0xb8
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
 80069da:	bf00      	nop
 80069dc:	40021000 	.word	0x40021000

080069e0 <board_init_common_timer_init>:


static void board_init_common_timer_init(void)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b09e      	sub	sp, #120	; 0x78
 80069e4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80069e6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80069ea:	2200      	movs	r2, #0
 80069ec:	601a      	str	r2, [r3, #0]
 80069ee:	605a      	str	r2, [r3, #4]
 80069f0:	609a      	str	r2, [r3, #8]
 80069f2:	60da      	str	r2, [r3, #12]
 80069f4:	611a      	str	r2, [r3, #16]
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80069f6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80069fa:	2200      	movs	r2, #0
 80069fc:	601a      	str	r2, [r3, #0]
 80069fe:	605a      	str	r2, [r3, #4]
 8006a00:	609a      	str	r2, [r3, #8]
 8006a02:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006a04:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006a08:	2200      	movs	r2, #0
 8006a0a:	601a      	str	r2, [r3, #0]
 8006a0c:	605a      	str	r2, [r3, #4]
 8006a0e:	609a      	str	r2, [r3, #8]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8006a10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006a14:	2200      	movs	r2, #0
 8006a16:	601a      	str	r2, [r3, #0]
 8006a18:	605a      	str	r2, [r3, #4]
 8006a1a:	609a      	str	r2, [r3, #8]
 8006a1c:	60da      	str	r2, [r3, #12]
 8006a1e:	611a      	str	r2, [r3, #16]
 8006a20:	615a      	str	r2, [r3, #20]
 8006a22:	619a      	str	r2, [r3, #24]
    TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8006a24:	463b      	mov	r3, r7
 8006a26:	222c      	movs	r2, #44	; 0x2c
 8006a28:	2100      	movs	r1, #0
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f000 ffa8 	bl	8007980 <memset>
    g_tim1_handle.Instance = TIM1;
 8006a30:	4b5c      	ldr	r3, [pc, #368]	; (8006ba4 <board_init_common_timer_init+0x1c4>)
 8006a32:	4a5d      	ldr	r2, [pc, #372]	; (8006ba8 <board_init_common_timer_init+0x1c8>)
 8006a34:	601a      	str	r2, [r3, #0]
    g_tim1_handle.Init.Prescaler = 0;
 8006a36:	4b5b      	ldr	r3, [pc, #364]	; (8006ba4 <board_init_common_timer_init+0x1c4>)
 8006a38:	2200      	movs	r2, #0
 8006a3a:	605a      	str	r2, [r3, #4]
    g_tim1_handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006a3c:	4b59      	ldr	r3, [pc, #356]	; (8006ba4 <board_init_common_timer_init+0x1c4>)
 8006a3e:	2200      	movs	r2, #0
 8006a40:	609a      	str	r2, [r3, #8]
    g_tim1_handle.Init.Period = 60-1;
 8006a42:	4b58      	ldr	r3, [pc, #352]	; (8006ba4 <board_init_common_timer_init+0x1c4>)
 8006a44:	223b      	movs	r2, #59	; 0x3b
 8006a46:	60da      	str	r2, [r3, #12]
    g_tim1_handle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006a48:	4b56      	ldr	r3, [pc, #344]	; (8006ba4 <board_init_common_timer_init+0x1c4>)
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	611a      	str	r2, [r3, #16]
    g_tim1_handle.Init.RepetitionCounter = 0;
 8006a4e:	4b55      	ldr	r3, [pc, #340]	; (8006ba4 <board_init_common_timer_init+0x1c4>)
 8006a50:	2200      	movs	r2, #0
 8006a52:	615a      	str	r2, [r3, #20]
    g_tim1_handle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006a54:	4b53      	ldr	r3, [pc, #332]	; (8006ba4 <board_init_common_timer_init+0x1c4>)
 8006a56:	2200      	movs	r2, #0
 8006a58:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&g_tim1_handle) != HAL_OK) Error_Handler();
 8006a5a:	4852      	ldr	r0, [pc, #328]	; (8006ba4 <board_init_common_timer_init+0x1c4>)
 8006a5c:	f7fe fc60 	bl	8005320 <HAL_TIM_Base_Init>
 8006a60:	4603      	mov	r3, r0
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d001      	beq.n	8006a6a <board_init_common_timer_init+0x8a>
 8006a66:	f000 f904 	bl	8006c72 <Error_Handler>
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006a6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006a6e:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_TIM_ConfigClockSource(&g_tim1_handle, &sClockSourceConfig) != HAL_OK) Error_Handler();
 8006a70:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006a74:	4619      	mov	r1, r3
 8006a76:	484b      	ldr	r0, [pc, #300]	; (8006ba4 <board_init_common_timer_init+0x1c4>)
 8006a78:	f7ff f8f4 	bl	8005c64 <HAL_TIM_ConfigClockSource>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d001      	beq.n	8006a86 <board_init_common_timer_init+0xa6>
 8006a82:	f000 f8f6 	bl	8006c72 <Error_Handler>
    if (HAL_TIM_PWM_Init(&g_tim1_handle) != HAL_OK) Error_Handler();
 8006a86:	4847      	ldr	r0, [pc, #284]	; (8006ba4 <board_init_common_timer_init+0x1c4>)
 8006a88:	f7fe fca1 	bl	80053ce <HAL_TIM_PWM_Init>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d001      	beq.n	8006a96 <board_init_common_timer_init+0xb6>
 8006a92:	f000 f8ee 	bl	8006c72 <Error_Handler>
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006a96:	2300      	movs	r3, #0
 8006a98:	64bb      	str	r3, [r7, #72]	; 0x48
    sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	64fb      	str	r3, [r7, #76]	; 0x4c
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_TIMEx_MasterConfigSynchronization(&g_tim1_handle, &sMasterConfig) != HAL_OK) Error_Handler();
 8006aa2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006aa6:	4619      	mov	r1, r3
 8006aa8:	483e      	ldr	r0, [pc, #248]	; (8006ba4 <board_init_common_timer_init+0x1c4>)
 8006aaa:	f7ff fe2b 	bl	8006704 <HAL_TIMEx_MasterConfigSynchronization>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d001      	beq.n	8006ab8 <board_init_common_timer_init+0xd8>
 8006ab4:	f000 f8dd 	bl	8006c72 <Error_Handler>
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006ab8:	2360      	movs	r3, #96	; 0x60
 8006aba:	62fb      	str	r3, [r7, #44]	; 0x2c
    sConfigOC.Pulse = 0;
 8006abc:	2300      	movs	r3, #0
 8006abe:	633b      	str	r3, [r7, #48]	; 0x30
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	637b      	str	r3, [r7, #52]	; 0x34
    sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	63bb      	str	r3, [r7, #56]	; 0x38
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	63fb      	str	r3, [r7, #60]	; 0x3c
    sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006acc:	2300      	movs	r3, #0
 8006ace:	643b      	str	r3, [r7, #64]	; 0x40
    sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_TIM_PWM_ConfigChannel(&g_tim1_handle, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) Error_Handler();
 8006ad4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006ad8:	2200      	movs	r2, #0
 8006ada:	4619      	mov	r1, r3
 8006adc:	4831      	ldr	r0, [pc, #196]	; (8006ba4 <board_init_common_timer_init+0x1c4>)
 8006ade:	f7fe ffad 	bl	8005a3c <HAL_TIM_PWM_ConfigChannel>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d001      	beq.n	8006aec <board_init_common_timer_init+0x10c>
 8006ae8:	f000 f8c3 	bl	8006c72 <Error_Handler>
    if (HAL_TIM_PWM_ConfigChannel(&g_tim1_handle, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) Error_Handler();
 8006aec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006af0:	2204      	movs	r2, #4
 8006af2:	4619      	mov	r1, r3
 8006af4:	482b      	ldr	r0, [pc, #172]	; (8006ba4 <board_init_common_timer_init+0x1c4>)
 8006af6:	f7fe ffa1 	bl	8005a3c <HAL_TIM_PWM_ConfigChannel>
 8006afa:	4603      	mov	r3, r0
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d001      	beq.n	8006b04 <board_init_common_timer_init+0x124>
 8006b00:	f000 f8b7 	bl	8006c72 <Error_Handler>
    if (HAL_TIM_PWM_ConfigChannel(&g_tim1_handle, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) Error_Handler();
 8006b04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006b08:	2208      	movs	r2, #8
 8006b0a:	4619      	mov	r1, r3
 8006b0c:	4825      	ldr	r0, [pc, #148]	; (8006ba4 <board_init_common_timer_init+0x1c4>)
 8006b0e:	f7fe ff95 	bl	8005a3c <HAL_TIM_PWM_ConfigChannel>
 8006b12:	4603      	mov	r3, r0
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d001      	beq.n	8006b1c <board_init_common_timer_init+0x13c>
 8006b18:	f000 f8ab 	bl	8006c72 <Error_Handler>
    sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	603b      	str	r3, [r7, #0]
    sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8006b20:	2300      	movs	r3, #0
 8006b22:	607b      	str	r3, [r7, #4]
    sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8006b24:	2300      	movs	r3, #0
 8006b26:	60bb      	str	r3, [r7, #8]
    sBreakDeadTimeConfig.DeadTime = 0;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	60fb      	str	r3, [r7, #12]
    sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	613b      	str	r3, [r7, #16]
    sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8006b30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006b34:	617b      	str	r3, [r7, #20]
    sBreakDeadTimeConfig.BreakFilter = 0;
 8006b36:	2300      	movs	r3, #0
 8006b38:	61bb      	str	r3, [r7, #24]
    sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	61fb      	str	r3, [r7, #28]
    sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8006b3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006b42:	623b      	str	r3, [r7, #32]
    sBreakDeadTimeConfig.Break2Filter = 0;
 8006b44:	2300      	movs	r3, #0
 8006b46:	627b      	str	r3, [r7, #36]	; 0x24
    sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_TIMEx_ConfigBreakDeadTime(&g_tim1_handle, &sBreakDeadTimeConfig) != HAL_OK) Error_Handler();
 8006b4c:	463b      	mov	r3, r7
 8006b4e:	4619      	mov	r1, r3
 8006b50:	4814      	ldr	r0, [pc, #80]	; (8006ba4 <board_init_common_timer_init+0x1c4>)
 8006b52:	f7ff fe3d 	bl	80067d0 <HAL_TIMEx_ConfigBreakDeadTime>
 8006b56:	4603      	mov	r3, r0
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d001      	beq.n	8006b60 <board_init_common_timer_init+0x180>
 8006b5c:	f000 f889 	bl	8006c72 <Error_Handler>
    HAL_TIM_PWM_Stop_DMA(&g_tim1_handle, TIM_CHANNEL_1);
 8006b60:	2100      	movs	r1, #0
 8006b62:	4810      	ldr	r0, [pc, #64]	; (8006ba4 <board_init_common_timer_init+0x1c4>)
 8006b64:	f7fe fe82 	bl	800586c <HAL_TIM_PWM_Stop_DMA>
    HAL_TIM_PWM_Stop_DMA(&g_tim1_handle, TIM_CHANNEL_2);
 8006b68:	2104      	movs	r1, #4
 8006b6a:	480e      	ldr	r0, [pc, #56]	; (8006ba4 <board_init_common_timer_init+0x1c4>)
 8006b6c:	f7fe fe7e 	bl	800586c <HAL_TIM_PWM_Stop_DMA>
    HAL_TIM_PWM_Stop_DMA(&g_tim1_handle, TIM_CHANNEL_3);
 8006b70:	2108      	movs	r1, #8
 8006b72:	480c      	ldr	r0, [pc, #48]	; (8006ba4 <board_init_common_timer_init+0x1c4>)
 8006b74:	f7fe fe7a 	bl	800586c <HAL_TIM_PWM_Stop_DMA>
    GPIO_InitStruct.Pin = PIN_TIM1_CH1|PIN_TIM1_CH2|PIN_TIM1_CH3;
 8006b78:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8006b7c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b7e:	2302      	movs	r3, #2
 8006b80:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b82:	2300      	movs	r3, #0
 8006b84:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b86:	2300      	movs	r3, #0
 8006b88:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b8e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8006b92:	4619      	mov	r1, r3
 8006b94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006b98:	f7fc ff18 	bl	80039cc <HAL_GPIO_Init>
}
 8006b9c:	bf00      	nop
 8006b9e:	3778      	adds	r7, #120	; 0x78
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}
 8006ba4:	2000210c 	.word	0x2000210c
 8006ba8:	40012c00 	.word	0x40012c00

08006bac <board_init_port_wakeup>:
//    HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
//}


static void board_init_port_wakeup(void)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b087      	sub	sp, #28
 8006bb0:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006bb2:	4b21      	ldr	r3, [pc, #132]	; (8006c38 <board_init_port_wakeup+0x8c>)
 8006bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bb6:	4a20      	ldr	r2, [pc, #128]	; (8006c38 <board_init_port_wakeup+0x8c>)
 8006bb8:	f043 0301 	orr.w	r3, r3, #1
 8006bbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006bbe:	4b1e      	ldr	r3, [pc, #120]	; (8006c38 <board_init_port_wakeup+0x8c>)
 8006bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bc2:	f003 0301 	and.w	r3, r3, #1
 8006bc6:	617b      	str	r3, [r7, #20]
 8006bc8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006bca:	4b1b      	ldr	r3, [pc, #108]	; (8006c38 <board_init_port_wakeup+0x8c>)
 8006bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bce:	4a1a      	ldr	r2, [pc, #104]	; (8006c38 <board_init_port_wakeup+0x8c>)
 8006bd0:	f043 0302 	orr.w	r3, r3, #2
 8006bd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006bd6:	4b18      	ldr	r3, [pc, #96]	; (8006c38 <board_init_port_wakeup+0x8c>)
 8006bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bda:	f003 0302 	and.w	r3, r3, #2
 8006bde:	613b      	str	r3, [r7, #16]
 8006be0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006be2:	4b15      	ldr	r3, [pc, #84]	; (8006c38 <board_init_port_wakeup+0x8c>)
 8006be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006be6:	4a14      	ldr	r2, [pc, #80]	; (8006c38 <board_init_port_wakeup+0x8c>)
 8006be8:	f043 0304 	orr.w	r3, r3, #4
 8006bec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006bee:	4b12      	ldr	r3, [pc, #72]	; (8006c38 <board_init_port_wakeup+0x8c>)
 8006bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bf2:	f003 0304 	and.w	r3, r3, #4
 8006bf6:	60fb      	str	r3, [r7, #12]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8006bfa:	4b0f      	ldr	r3, [pc, #60]	; (8006c38 <board_init_port_wakeup+0x8c>)
 8006bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bfe:	4a0e      	ldr	r2, [pc, #56]	; (8006c38 <board_init_port_wakeup+0x8c>)
 8006c00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006c06:	4b0c      	ldr	r3, [pc, #48]	; (8006c38 <board_init_port_wakeup+0x8c>)
 8006c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c0e:	60bb      	str	r3, [r7, #8]
 8006c10:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_DMA1_CLK_ENABLE();
 8006c12:	4b09      	ldr	r3, [pc, #36]	; (8006c38 <board_init_port_wakeup+0x8c>)
 8006c14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c16:	4a08      	ldr	r2, [pc, #32]	; (8006c38 <board_init_port_wakeup+0x8c>)
 8006c18:	f043 0301 	orr.w	r3, r3, #1
 8006c1c:	6493      	str	r3, [r2, #72]	; 0x48
 8006c1e:	4b06      	ldr	r3, [pc, #24]	; (8006c38 <board_init_port_wakeup+0x8c>)
 8006c20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c22:	f003 0301 	and.w	r3, r3, #1
 8006c26:	607b      	str	r3, [r7, #4]
 8006c28:	687b      	ldr	r3, [r7, #4]
}
 8006c2a:	bf00      	nop
 8006c2c:	371c      	adds	r7, #28
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr
 8006c36:	bf00      	nop
 8006c38:	40021000 	.word	0x40021000

08006c3c <board_init_common_board_init>:


void board_init_common_board_init(void)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	af00      	add	r7, sp, #0
    srand(time(0));
 8006c40:	2000      	movs	r0, #0
 8006c42:	f000 ffc3 	bl	8007bcc <time>
 8006c46:	4602      	mov	r2, r0
 8006c48:	460b      	mov	r3, r1
 8006c4a:	4613      	mov	r3, r2
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f000 ff7f 	bl	8007b50 <srand>
    HAL_Init();
 8006c52:	f7fc fa73 	bl	800313c <HAL_Init>
    SystemClock_Config();
 8006c56:	f7ff fe5b 	bl	8006910 <SystemClock_Config>

    board_init_port_wakeup();
 8006c5a:	f7ff ffa7 	bl	8006bac <board_init_port_wakeup>
    gpio_config_init();
 8006c5e:	f000 f80d 	bl	8006c7c <gpio_config_init>
    board_init_common_timer_init();
 8006c62:	f7ff febd 	bl	80069e0 <board_init_common_timer_init>

    ws2812b_init();
 8006c66:	f7f9 fb59 	bl	800031c <ws2812b_init>

    board_init_common_rtc_init();
 8006c6a:	f7ff fe29 	bl	80068c0 <board_init_common_rtc_init>
}
 8006c6e:	bf00      	nop
 8006c70:	bd80      	pop	{r7, pc}

08006c72 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006c72:	b480      	push	{r7}
 8006c74:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8006c76:	b672      	cpsid	i
}
 8006c78:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006c7a:	e7fe      	b.n	8006c7a <Error_Handler+0x8>

08006c7c <gpio_config_init>:


extern gpio_config_t gpio_config[GPIO_CONFIG_NUM_PINS];

void gpio_config_init(void)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b086      	sub	sp, #24
 8006c80:	af00      	add	r7, sp, #0
    for (gpio_config_pin_e pin = GPIO_CONFIG_PIN_FIRST;
 8006c82:	2300      	movs	r3, #0
 8006c84:	75fb      	strb	r3, [r7, #23]
 8006c86:	e0ed      	b.n	8006e64 <gpio_config_init+0x1e8>
                    pin < GPIO_CONFIG_NUM_PINS;
                    pin = (gpio_config_pin_e)(pin + 1))
    {
        GPIO_PinState output_lvl = GPIO_PIN_RESET;
 8006c88:	2300      	movs	r3, #0
 8006c8a:	75bb      	strb	r3, [r7, #22]
        GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c8c:	463b      	mov	r3, r7
 8006c8e:	2200      	movs	r2, #0
 8006c90:	601a      	str	r2, [r3, #0]
 8006c92:	605a      	str	r2, [r3, #4]
 8006c94:	609a      	str	r2, [r3, #8]
 8006c96:	60da      	str	r2, [r3, #12]
 8006c98:	611a      	str	r2, [r3, #16]
        GPIO_InitStruct.Pin = gpio_config[pin].pin;
 8006c9a:	7dfa      	ldrb	r2, [r7, #23]
 8006c9c:	4976      	ldr	r1, [pc, #472]	; (8006e78 <gpio_config_init+0x1fc>)
 8006c9e:	4613      	mov	r3, r2
 8006ca0:	005b      	lsls	r3, r3, #1
 8006ca2:	4413      	add	r3, r2
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	440b      	add	r3, r1
 8006ca8:	881b      	ldrh	r3, [r3, #0]
 8006caa:	603b      	str	r3, [r7, #0]
        switch (gpio_config[pin].pin_mode)
 8006cac:	7dfa      	ldrb	r2, [r7, #23]
 8006cae:	4972      	ldr	r1, [pc, #456]	; (8006e78 <gpio_config_init+0x1fc>)
 8006cb0:	4613      	mov	r3, r2
 8006cb2:	005b      	lsls	r3, r3, #1
 8006cb4:	4413      	add	r3, r2
 8006cb6:	009b      	lsls	r3, r3, #2
 8006cb8:	440b      	add	r3, r1
 8006cba:	3308      	adds	r3, #8
 8006cbc:	781b      	ldrb	r3, [r3, #0]
 8006cbe:	3b01      	subs	r3, #1
 8006cc0:	2b04      	cmp	r3, #4
 8006cc2:	d84c      	bhi.n	8006d5e <gpio_config_init+0xe2>
 8006cc4:	a201      	add	r2, pc, #4	; (adr r2, 8006ccc <gpio_config_init+0x50>)
 8006cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cca:	bf00      	nop
 8006ccc:	08006ce1 	.word	0x08006ce1
 8006cd0:	08006ceb 	.word	0x08006ceb
 8006cd4:	08006cf5 	.word	0x08006cf5
 8006cd8:	08006cff 	.word	0x08006cff
 8006cdc:	08006d55 	.word	0x08006d55
        {
            case GPIO_CONFIG_PIN_MODE_OUTPUT_PUSH_PULL:
                GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	607b      	str	r3, [r7, #4]
                GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	60bb      	str	r3, [r7, #8]
            break;
 8006ce8:	e03a      	b.n	8006d60 <gpio_config_init+0xe4>
            case GPIO_CONFIG_PIN_MODE_OUTPUT_OPEN_DRAIN:
                GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8006cea:	2311      	movs	r3, #17
 8006cec:	607b      	str	r3, [r7, #4]
                GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	60bb      	str	r3, [r7, #8]
            break;
 8006cf2:	e035      	b.n	8006d60 <gpio_config_init+0xe4>
            case GPIO_CONFIG_PIN_MODE_INPUT_FLOAT:
                GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	607b      	str	r3, [r7, #4]
                GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	60bb      	str	r3, [r7, #8]
            break;
 8006cfc:	e030      	b.n	8006d60 <gpio_config_init+0xe4>
            case GPIO_CONFIG_PIN_MODE_INPUT_PULLUP:
                if (GPIO_CONFIG_PIN_INTERRUPT_ENABLE == gpio_config[pin].interrupt)
 8006cfe:	7dfa      	ldrb	r2, [r7, #23]
 8006d00:	495d      	ldr	r1, [pc, #372]	; (8006e78 <gpio_config_init+0x1fc>)
 8006d02:	4613      	mov	r3, r2
 8006d04:	005b      	lsls	r3, r3, #1
 8006d06:	4413      	add	r3, r2
 8006d08:	009b      	lsls	r3, r3, #2
 8006d0a:	440b      	add	r3, r1
 8006d0c:	3309      	adds	r3, #9
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	d119      	bne.n	8006d48 <gpio_config_init+0xcc>
                {
                    switch (gpio_config[pin].pin_mode)
 8006d14:	7dfa      	ldrb	r2, [r7, #23]
 8006d16:	4958      	ldr	r1, [pc, #352]	; (8006e78 <gpio_config_init+0x1fc>)
 8006d18:	4613      	mov	r3, r2
 8006d1a:	005b      	lsls	r3, r3, #1
 8006d1c:	4413      	add	r3, r2
 8006d1e:	009b      	lsls	r3, r3, #2
 8006d20:	440b      	add	r3, r1
 8006d22:	3308      	adds	r3, #8
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	2b04      	cmp	r3, #4
 8006d28:	d002      	beq.n	8006d30 <gpio_config_init+0xb4>
 8006d2a:	2b05      	cmp	r3, #5
 8006d2c:	d006      	beq.n	8006d3c <gpio_config_init+0xc0>
                        case GPIO_CONFIG_PIN_MODE_INPUT_PULLDOWN:
                            GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
                            GPIO_InitStruct.Pull = GPIO_PULLDOWN;
                        break;
                        default:
                        break;
 8006d2e:	e010      	b.n	8006d52 <gpio_config_init+0xd6>
                            GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006d30:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8006d34:	607b      	str	r3, [r7, #4]
                            GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006d36:	2301      	movs	r3, #1
 8006d38:	60bb      	str	r3, [r7, #8]
                        break;
 8006d3a:	e00a      	b.n	8006d52 <gpio_config_init+0xd6>
                            GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006d3c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8006d40:	607b      	str	r3, [r7, #4]
                            GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006d42:	2302      	movs	r3, #2
 8006d44:	60bb      	str	r3, [r7, #8]
                        break;
 8006d46:	e004      	b.n	8006d52 <gpio_config_init+0xd6>
                    }
                }
                else
                {
                    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	607b      	str	r3, [r7, #4]
                    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	60bb      	str	r3, [r7, #8]
                }
            break;
 8006d50:	e006      	b.n	8006d60 <gpio_config_init+0xe4>
 8006d52:	e005      	b.n	8006d60 <gpio_config_init+0xe4>
            case GPIO_CONFIG_PIN_MODE_INPUT_PULLDOWN:
                GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006d54:	2300      	movs	r3, #0
 8006d56:	607b      	str	r3, [r7, #4]
                GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006d58:	2302      	movs	r3, #2
 8006d5a:	60bb      	str	r3, [r7, #8]
            break;
 8006d5c:	e000      	b.n	8006d60 <gpio_config_init+0xe4>
            case GPIO_CONFIG_PIN_MODE_ALTERNATE_FUNCTION: // fall through
            case GPIO_CONFIG_PIN_MODE_NO_SETUP: // fall through
            default:
            break;
 8006d5e:	bf00      	nop
        }
        HAL_GPIO_Init(gpio_config[pin].port, &GPIO_InitStruct);
 8006d60:	7dfa      	ldrb	r2, [r7, #23]
 8006d62:	4945      	ldr	r1, [pc, #276]	; (8006e78 <gpio_config_init+0x1fc>)
 8006d64:	4613      	mov	r3, r2
 8006d66:	005b      	lsls	r3, r3, #1
 8006d68:	4413      	add	r3, r2
 8006d6a:	009b      	lsls	r3, r3, #2
 8006d6c:	440b      	add	r3, r1
 8006d6e:	3304      	adds	r3, #4
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	463a      	mov	r2, r7
 8006d74:	4611      	mov	r1, r2
 8006d76:	4618      	mov	r0, r3
 8006d78:	f7fc fe28 	bl	80039cc <HAL_GPIO_Init>
        switch (gpio_config[pin].pin_mode)
 8006d7c:	7dfa      	ldrb	r2, [r7, #23]
 8006d7e:	493e      	ldr	r1, [pc, #248]	; (8006e78 <gpio_config_init+0x1fc>)
 8006d80:	4613      	mov	r3, r2
 8006d82:	005b      	lsls	r3, r3, #1
 8006d84:	4413      	add	r3, r2
 8006d86:	009b      	lsls	r3, r3, #2
 8006d88:	440b      	add	r3, r1
 8006d8a:	3308      	adds	r3, #8
 8006d8c:	781b      	ldrb	r3, [r3, #0]
 8006d8e:	3b01      	subs	r3, #1
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d824      	bhi.n	8006dde <gpio_config_init+0x162>
        {
            case GPIO_CONFIG_PIN_MODE_OUTPUT_PUSH_PULL:
            case GPIO_CONFIG_PIN_MODE_OUTPUT_OPEN_DRAIN:
                output_lvl = ((gpio_config[pin].output_lvl == GPIO_CONFIG_OUTPUT_LVL_HIGH) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8006d94:	7dfa      	ldrb	r2, [r7, #23]
 8006d96:	4938      	ldr	r1, [pc, #224]	; (8006e78 <gpio_config_init+0x1fc>)
 8006d98:	4613      	mov	r3, r2
 8006d9a:	005b      	lsls	r3, r3, #1
 8006d9c:	4413      	add	r3, r2
 8006d9e:	009b      	lsls	r3, r3, #2
 8006da0:	440b      	add	r3, r1
 8006da2:	330b      	adds	r3, #11
 8006da4:	781b      	ldrb	r3, [r3, #0]
 8006da6:	2b02      	cmp	r3, #2
 8006da8:	bf0c      	ite	eq
 8006daa:	2301      	moveq	r3, #1
 8006dac:	2300      	movne	r3, #0
 8006dae:	b2db      	uxtb	r3, r3
 8006db0:	75bb      	strb	r3, [r7, #22]
                HAL_GPIO_WritePin(gpio_config[pin].port, gpio_config[pin].pin, output_lvl);
 8006db2:	7dfa      	ldrb	r2, [r7, #23]
 8006db4:	4930      	ldr	r1, [pc, #192]	; (8006e78 <gpio_config_init+0x1fc>)
 8006db6:	4613      	mov	r3, r2
 8006db8:	005b      	lsls	r3, r3, #1
 8006dba:	4413      	add	r3, r2
 8006dbc:	009b      	lsls	r3, r3, #2
 8006dbe:	440b      	add	r3, r1
 8006dc0:	3304      	adds	r3, #4
 8006dc2:	6818      	ldr	r0, [r3, #0]
 8006dc4:	7dfa      	ldrb	r2, [r7, #23]
 8006dc6:	492c      	ldr	r1, [pc, #176]	; (8006e78 <gpio_config_init+0x1fc>)
 8006dc8:	4613      	mov	r3, r2
 8006dca:	005b      	lsls	r3, r3, #1
 8006dcc:	4413      	add	r3, r2
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	440b      	add	r3, r1
 8006dd2:	881b      	ldrh	r3, [r3, #0]
 8006dd4:	7dba      	ldrb	r2, [r7, #22]
 8006dd6:	4619      	mov	r1, r3
 8006dd8:	f7fc ff72 	bl	8003cc0 <HAL_GPIO_WritePin>
            break;
 8006ddc:	e000      	b.n	8006de0 <gpio_config_init+0x164>
            default:
            break;
 8006dde:	bf00      	nop
        }
        if (GPIO_CONFIG_PIN_INTERRUPT_ENABLE == gpio_config[pin].interrupt)
 8006de0:	7dfa      	ldrb	r2, [r7, #23]
 8006de2:	4925      	ldr	r1, [pc, #148]	; (8006e78 <gpio_config_init+0x1fc>)
 8006de4:	4613      	mov	r3, r2
 8006de6:	005b      	lsls	r3, r3, #1
 8006de8:	4413      	add	r3, r2
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	440b      	add	r3, r1
 8006dee:	3309      	adds	r3, #9
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d133      	bne.n	8006e5e <gpio_config_init+0x1e2>
        {
            __HAL_GPIO_EXTI_CLEAR_IT(gpio_config[pin].interrupt_type);
 8006df6:	7dfa      	ldrb	r2, [r7, #23]
 8006df8:	491f      	ldr	r1, [pc, #124]	; (8006e78 <gpio_config_init+0x1fc>)
 8006dfa:	4613      	mov	r3, r2
 8006dfc:	005b      	lsls	r3, r3, #1
 8006dfe:	4413      	add	r3, r2
 8006e00:	009b      	lsls	r3, r3, #2
 8006e02:	440b      	add	r3, r1
 8006e04:	330a      	adds	r3, #10
 8006e06:	f993 2000 	ldrsb.w	r2, [r3]
 8006e0a:	4b1c      	ldr	r3, [pc, #112]	; (8006e7c <gpio_config_init+0x200>)
 8006e0c:	615a      	str	r2, [r3, #20]
            HAL_NVIC_SetPriority(gpio_config[pin].interrupt_type, 24, 0);
 8006e0e:	7dfa      	ldrb	r2, [r7, #23]
 8006e10:	4919      	ldr	r1, [pc, #100]	; (8006e78 <gpio_config_init+0x1fc>)
 8006e12:	4613      	mov	r3, r2
 8006e14:	005b      	lsls	r3, r3, #1
 8006e16:	4413      	add	r3, r2
 8006e18:	009b      	lsls	r3, r3, #2
 8006e1a:	440b      	add	r3, r1
 8006e1c:	330a      	adds	r3, #10
 8006e1e:	f993 3000 	ldrsb.w	r3, [r3]
 8006e22:	2200      	movs	r2, #0
 8006e24:	2118      	movs	r1, #24
 8006e26:	4618      	mov	r0, r3
 8006e28:	f7fc fb0b 	bl	8003442 <HAL_NVIC_SetPriority>
            HAL_NVIC_EnableIRQ(gpio_config[pin].interrupt_type);
 8006e2c:	7dfa      	ldrb	r2, [r7, #23]
 8006e2e:	4912      	ldr	r1, [pc, #72]	; (8006e78 <gpio_config_init+0x1fc>)
 8006e30:	4613      	mov	r3, r2
 8006e32:	005b      	lsls	r3, r3, #1
 8006e34:	4413      	add	r3, r2
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	440b      	add	r3, r1
 8006e3a:	330a      	adds	r3, #10
 8006e3c:	f993 3000 	ldrsb.w	r3, [r3]
 8006e40:	4618      	mov	r0, r3
 8006e42:	f7fc fb1a 	bl	800347a <HAL_NVIC_EnableIRQ>
            __HAL_GPIO_EXTI_CLEAR_IT(gpio_config[pin].interrupt_type);
 8006e46:	7dfa      	ldrb	r2, [r7, #23]
 8006e48:	490b      	ldr	r1, [pc, #44]	; (8006e78 <gpio_config_init+0x1fc>)
 8006e4a:	4613      	mov	r3, r2
 8006e4c:	005b      	lsls	r3, r3, #1
 8006e4e:	4413      	add	r3, r2
 8006e50:	009b      	lsls	r3, r3, #2
 8006e52:	440b      	add	r3, r1
 8006e54:	330a      	adds	r3, #10
 8006e56:	f993 2000 	ldrsb.w	r2, [r3]
 8006e5a:	4b08      	ldr	r3, [pc, #32]	; (8006e7c <gpio_config_init+0x200>)
 8006e5c:	615a      	str	r2, [r3, #20]
                    pin = (gpio_config_pin_e)(pin + 1))
 8006e5e:	7dfb      	ldrb	r3, [r7, #23]
 8006e60:	3301      	adds	r3, #1
 8006e62:	75fb      	strb	r3, [r7, #23]
    for (gpio_config_pin_e pin = GPIO_CONFIG_PIN_FIRST;
 8006e64:	7dfb      	ldrb	r3, [r7, #23]
 8006e66:	2b33      	cmp	r3, #51	; 0x33
 8006e68:	f67f af0e 	bls.w	8006c88 <gpio_config_init+0xc>
        }
    }
}
 8006e6c:	bf00      	nop
 8006e6e:	bf00      	nop
 8006e70:	3718      	adds	r7, #24
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}
 8006e76:	bf00      	nop
 8006e78:	20000010 	.word	0x20000010
 8006e7c:	40010400 	.word	0x40010400

08006e80 <gpio_config_led_all_off>:
    }
};


bool gpio_config_led_all_off(void)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b082      	sub	sp, #8
 8006e84:	af00      	add	r7, sp, #0
    bool return_val = true;
 8006e86:	2301      	movs	r3, #1
 8006e88:	71fb      	strb	r3, [r7, #7]
    return_val &= gpio_config_green_led_off();
 8006e8a:	f000 f875 	bl	8006f78 <gpio_config_green_led_off>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	461a      	mov	r2, r3
 8006e92:	79fb      	ldrb	r3, [r7, #7]
 8006e94:	4013      	ands	r3, r2
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	bf14      	ite	ne
 8006e9a:	2301      	movne	r3, #1
 8006e9c:	2300      	moveq	r3, #0
 8006e9e:	71fb      	strb	r3, [r7, #7]
    return_val &= gpio_config_red_led_off();
 8006ea0:	f000 f87a 	bl	8006f98 <gpio_config_red_led_off>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	461a      	mov	r2, r3
 8006ea8:	79fb      	ldrb	r3, [r7, #7]
 8006eaa:	4013      	ands	r3, r2
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	bf14      	ite	ne
 8006eb0:	2301      	movne	r3, #1
 8006eb2:	2300      	moveq	r3, #0
 8006eb4:	71fb      	strb	r3, [r7, #7]
    return return_val;
 8006eb6:	79fb      	ldrb	r3, [r7, #7]
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3708      	adds	r7, #8
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <gpio_config_led_on>:
    return return_val;
}


bool gpio_config_led_on(gpio_config_led_e led)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b084      	sub	sp, #16
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	71fb      	strb	r3, [r7, #7]
    bool return_val = false;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	73fb      	strb	r3, [r7, #15]
    switch (led)
 8006ece:	79fb      	ldrb	r3, [r7, #7]
 8006ed0:	2b03      	cmp	r3, #3
 8006ed2:	dc17      	bgt.n	8006f04 <gpio_config_led_on+0x44>
 8006ed4:	2b02      	cmp	r3, #2
 8006ed6:	da14      	bge.n	8006f02 <gpio_config_led_on+0x42>
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d002      	beq.n	8006ee2 <gpio_config_led_on+0x22>
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d008      	beq.n	8006ef2 <gpio_config_led_on+0x32>
 8006ee0:	e010      	b.n	8006f04 <gpio_config_led_on+0x44>
    {
        case GPIO_CONFIG_LED_GREEN:
            return_val = true;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	73fb      	strb	r3, [r7, #15]
            HAL_GPIO_WritePin(PIN_PORT_C, PIN_GREEN_LED, GPIO_PIN_SET);
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	2104      	movs	r1, #4
 8006eea:	4809      	ldr	r0, [pc, #36]	; (8006f10 <gpio_config_led_on+0x50>)
 8006eec:	f7fc fee8 	bl	8003cc0 <HAL_GPIO_WritePin>
        break;
 8006ef0:	e008      	b.n	8006f04 <gpio_config_led_on+0x44>
        case GPIO_CONFIG_LED_RED:
            return_val = true;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	73fb      	strb	r3, [r7, #15]
            HAL_GPIO_WritePin(PIN_PORT_C, PIN_RED_LED, GPIO_PIN_SET);
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	2108      	movs	r1, #8
 8006efa:	4805      	ldr	r0, [pc, #20]	; (8006f10 <gpio_config_led_on+0x50>)
 8006efc:	f7fc fee0 	bl	8003cc0 <HAL_GPIO_WritePin>
        break;
 8006f00:	e000      	b.n	8006f04 <gpio_config_led_on+0x44>
        case GPIO_CONFIG_LED_BLUE: // no blue (fall through intentionally)
        case GPIO_CONFIG_LED_ORANGE: // no orange
        break;
 8006f02:	bf00      	nop
    }
    return return_val;
 8006f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3710      	adds	r7, #16
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}
 8006f0e:	bf00      	nop
 8006f10:	48000800 	.word	0x48000800

08006f14 <gpio_config_led_off>:


bool gpio_config_led_off(gpio_config_led_e led)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b084      	sub	sp, #16
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	71fb      	strb	r3, [r7, #7]
    bool return_val = false;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	73fb      	strb	r3, [r7, #15]
    switch (led)
 8006f22:	79fb      	ldrb	r3, [r7, #7]
 8006f24:	2b03      	cmp	r3, #3
 8006f26:	dc17      	bgt.n	8006f58 <gpio_config_led_off+0x44>
 8006f28:	2b02      	cmp	r3, #2
 8006f2a:	da14      	bge.n	8006f56 <gpio_config_led_off+0x42>
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d002      	beq.n	8006f36 <gpio_config_led_off+0x22>
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d008      	beq.n	8006f46 <gpio_config_led_off+0x32>
 8006f34:	e010      	b.n	8006f58 <gpio_config_led_off+0x44>
    {
        case GPIO_CONFIG_LED_GREEN:
            return_val = true;
 8006f36:	2301      	movs	r3, #1
 8006f38:	73fb      	strb	r3, [r7, #15]
            HAL_GPIO_WritePin(PIN_PORT_C, PIN_GREEN_LED, GPIO_PIN_RESET);
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	2104      	movs	r1, #4
 8006f3e:	4809      	ldr	r0, [pc, #36]	; (8006f64 <gpio_config_led_off+0x50>)
 8006f40:	f7fc febe 	bl	8003cc0 <HAL_GPIO_WritePin>
        break;
 8006f44:	e008      	b.n	8006f58 <gpio_config_led_off+0x44>
        case GPIO_CONFIG_LED_RED:
            return_val = true;
 8006f46:	2301      	movs	r3, #1
 8006f48:	73fb      	strb	r3, [r7, #15]
            HAL_GPIO_WritePin(PIN_PORT_C, PIN_RED_LED, GPIO_PIN_RESET);
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	2108      	movs	r1, #8
 8006f4e:	4805      	ldr	r0, [pc, #20]	; (8006f64 <gpio_config_led_off+0x50>)
 8006f50:	f7fc feb6 	bl	8003cc0 <HAL_GPIO_WritePin>
        break;
 8006f54:	e000      	b.n	8006f58 <gpio_config_led_off+0x44>
        case GPIO_CONFIG_LED_BLUE: // no blue (fall through intentionally)
        case GPIO_CONFIG_LED_ORANGE: // no orange
        break;
 8006f56:	bf00      	nop
    }
    return return_val;
 8006f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3710      	adds	r7, #16
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}
 8006f62:	bf00      	nop
 8006f64:	48000800 	.word	0x48000800

08006f68 <gpio_config_green_led_on>:


bool gpio_config_green_led_on(void)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	af00      	add	r7, sp, #0
    return gpio_config_led_on(GPIO_CONFIG_LED_GREEN);
 8006f6c:	2000      	movs	r0, #0
 8006f6e:	f7ff ffa7 	bl	8006ec0 <gpio_config_led_on>
 8006f72:	4603      	mov	r3, r0
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	bd80      	pop	{r7, pc}

08006f78 <gpio_config_green_led_off>:


bool gpio_config_green_led_off(void)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	af00      	add	r7, sp, #0
    return gpio_config_led_off(GPIO_CONFIG_LED_GREEN);
 8006f7c:	2000      	movs	r0, #0
 8006f7e:	f7ff ffc9 	bl	8006f14 <gpio_config_led_off>
 8006f82:	4603      	mov	r3, r0
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <gpio_config_red_led_on>:


bool gpio_config_red_led_on(void)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	af00      	add	r7, sp, #0
    return gpio_config_led_on(GPIO_CONFIG_LED_RED);
 8006f8c:	2001      	movs	r0, #1
 8006f8e:	f7ff ff97 	bl	8006ec0 <gpio_config_led_on>
 8006f92:	4603      	mov	r3, r0
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	bd80      	pop	{r7, pc}

08006f98 <gpio_config_red_led_off>:


bool gpio_config_red_led_off(void)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	af00      	add	r7, sp, #0
    return gpio_config_led_off(GPIO_CONFIG_LED_RED);
 8006f9c:	2001      	movs	r0, #1
 8006f9e:	f7ff ffb9 	bl	8006f14 <gpio_config_led_off>
 8006fa2:	4603      	mov	r3, r0
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	bd80      	pop	{r7, pc}

08006fa8 <HAL_Set_DMA_Callbacks>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);


// Function below added by SRW
static void HAL_Set_DMA_Callbacks(void)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	af00      	add	r7, sp, #0
    HAL_DMA_RegisterCallback(&hdma_tim1_ch1, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 8006fac:	4a0d      	ldr	r2, [pc, #52]	; (8006fe4 <HAL_Set_DMA_Callbacks+0x3c>)
 8006fae:	2100      	movs	r1, #0
 8006fb0:	480d      	ldr	r0, [pc, #52]	; (8006fe8 <HAL_Set_DMA_Callbacks+0x40>)
 8006fb2:	f7fc fc93 	bl	80038dc <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&hdma_tim1_ch2, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 8006fb6:	4a0b      	ldr	r2, [pc, #44]	; (8006fe4 <HAL_Set_DMA_Callbacks+0x3c>)
 8006fb8:	2100      	movs	r1, #0
 8006fba:	480c      	ldr	r0, [pc, #48]	; (8006fec <HAL_Set_DMA_Callbacks+0x44>)
 8006fbc:	f7fc fc8e 	bl	80038dc <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&hdma_tim1_ch3, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 8006fc0:	4a08      	ldr	r2, [pc, #32]	; (8006fe4 <HAL_Set_DMA_Callbacks+0x3c>)
 8006fc2:	2100      	movs	r1, #0
 8006fc4:	480a      	ldr	r0, [pc, #40]	; (8006ff0 <HAL_Set_DMA_Callbacks+0x48>)
 8006fc6:	f7fc fc89 	bl	80038dc <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&hdma_tim15_ch1_up_trig_com, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 8006fca:	4a06      	ldr	r2, [pc, #24]	; (8006fe4 <HAL_Set_DMA_Callbacks+0x3c>)
 8006fcc:	2100      	movs	r1, #0
 8006fce:	4809      	ldr	r0, [pc, #36]	; (8006ff4 <HAL_Set_DMA_Callbacks+0x4c>)
 8006fd0:	f7fc fc84 	bl	80038dc <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&hdma_tim16_ch1_up, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 8006fd4:	4a03      	ldr	r2, [pc, #12]	; (8006fe4 <HAL_Set_DMA_Callbacks+0x3c>)
 8006fd6:	2100      	movs	r1, #0
 8006fd8:	4807      	ldr	r0, [pc, #28]	; (8006ff8 <HAL_Set_DMA_Callbacks+0x50>)
 8006fda:	f7fc fc7f 	bl	80038dc <HAL_DMA_RegisterCallback>
}
 8006fde:	bf00      	nop
 8006fe0:	bd80      	pop	{r7, pc}
 8006fe2:	bf00      	nop
 8006fe4:	080075db 	.word	0x080075db
 8006fe8:	20001f80 	.word	0x20001f80
 8006fec:	20001fc8 	.word	0x20001fc8
 8006ff0:	20002010 	.word	0x20002010
 8006ff4:	20002058 	.word	0x20002058
 8006ff8:	200020a0 	.word	0x200020a0

08006ffc <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b084      	sub	sp, #16
 8007000:	af00      	add	r7, sp, #0
  PWR_PVDTypeDef sConfigPVD = {0};
 8007002:	f107 0308 	add.w	r3, r7, #8
 8007006:	2200      	movs	r2, #0
 8007008:	601a      	str	r2, [r3, #0]
 800700a:	605a      	str	r2, [r3, #4]

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800700c:	4b13      	ldr	r3, [pc, #76]	; (800705c <HAL_MspInit+0x60>)
 800700e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007010:	4a12      	ldr	r2, [pc, #72]	; (800705c <HAL_MspInit+0x60>)
 8007012:	f043 0301 	orr.w	r3, r3, #1
 8007016:	6613      	str	r3, [r2, #96]	; 0x60
 8007018:	4b10      	ldr	r3, [pc, #64]	; (800705c <HAL_MspInit+0x60>)
 800701a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800701c:	f003 0301 	and.w	r3, r3, #1
 8007020:	607b      	str	r3, [r7, #4]
 8007022:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007024:	4b0d      	ldr	r3, [pc, #52]	; (800705c <HAL_MspInit+0x60>)
 8007026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007028:	4a0c      	ldr	r2, [pc, #48]	; (800705c <HAL_MspInit+0x60>)
 800702a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800702e:	6593      	str	r3, [r2, #88]	; 0x58
 8007030:	4b0a      	ldr	r3, [pc, #40]	; (800705c <HAL_MspInit+0x60>)
 8007032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007034:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007038:	603b      	str	r3, [r7, #0]
 800703a:	683b      	ldr	r3, [r7, #0]

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 800703c:	2300      	movs	r3, #0
 800703e:	60bb      	str	r3, [r7, #8]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 8007040:	2300      	movs	r3, #0
 8007042:	60fb      	str	r3, [r7, #12]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8007044:	f107 0308 	add.w	r3, r7, #8
 8007048:	4618      	mov	r0, r3
 800704a:	f7fc fe79 	bl	8003d40 <HAL_PWR_ConfigPVD>
  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 800704e:	f7fc fed7 	bl	8003e00 <HAL_PWR_EnablePVD>
}
 8007052:	bf00      	nop
 8007054:	3710      	adds	r7, #16
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}
 800705a:	bf00      	nop
 800705c:	40021000 	.word	0x40021000

08007060 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8007060:	b480      	push	{r7}
 8007062:	b083      	sub	sp, #12
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a08      	ldr	r2, [pc, #32]	; (8007090 <HAL_RTC_MspInit+0x30>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d107      	bne.n	8007082 <HAL_RTC_MspInit+0x22>
  {
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8007072:	4b08      	ldr	r3, [pc, #32]	; (8007094 <HAL_RTC_MspInit+0x34>)
 8007074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007078:	4a06      	ldr	r2, [pc, #24]	; (8007094 <HAL_RTC_MspInit+0x34>)
 800707a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800707e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

}
 8007082:	bf00      	nop
 8007084:	370c      	adds	r7, #12
 8007086:	46bd      	mov	sp, r7
 8007088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708c:	4770      	bx	lr
 800708e:	bf00      	nop
 8007090:	40002800 	.word	0x40002800
 8007094:	40021000 	.word	0x40021000

08007098 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b084      	sub	sp, #16
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a6e      	ldr	r2, [pc, #440]	; (8007260 <HAL_TIM_Base_MspInit+0x1c8>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	f040 8091 	bne.w	80071ce <HAL_TIM_Base_MspInit+0x136>
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80070ac:	4b6d      	ldr	r3, [pc, #436]	; (8007264 <HAL_TIM_Base_MspInit+0x1cc>)
 80070ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070b0:	4a6c      	ldr	r2, [pc, #432]	; (8007264 <HAL_TIM_Base_MspInit+0x1cc>)
 80070b2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80070b6:	6613      	str	r3, [r2, #96]	; 0x60
 80070b8:	4b6a      	ldr	r3, [pc, #424]	; (8007264 <HAL_TIM_Base_MspInit+0x1cc>)
 80070ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070c0:	60fb      	str	r3, [r7, #12]
 80070c2:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 80070c4:	4b68      	ldr	r3, [pc, #416]	; (8007268 <HAL_TIM_Base_MspInit+0x1d0>)
 80070c6:	4a69      	ldr	r2, [pc, #420]	; (800726c <HAL_TIM_Base_MspInit+0x1d4>)
 80070c8:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_7;
 80070ca:	4b67      	ldr	r3, [pc, #412]	; (8007268 <HAL_TIM_Base_MspInit+0x1d0>)
 80070cc:	2207      	movs	r2, #7
 80070ce:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80070d0:	4b65      	ldr	r3, [pc, #404]	; (8007268 <HAL_TIM_Base_MspInit+0x1d0>)
 80070d2:	2210      	movs	r2, #16
 80070d4:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80070d6:	4b64      	ldr	r3, [pc, #400]	; (8007268 <HAL_TIM_Base_MspInit+0x1d0>)
 80070d8:	2200      	movs	r2, #0
 80070da:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80070dc:	4b62      	ldr	r3, [pc, #392]	; (8007268 <HAL_TIM_Base_MspInit+0x1d0>)
 80070de:	2280      	movs	r2, #128	; 0x80
 80070e0:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80070e2:	4b61      	ldr	r3, [pc, #388]	; (8007268 <HAL_TIM_Base_MspInit+0x1d0>)
 80070e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80070e8:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80070ea:	4b5f      	ldr	r3, [pc, #380]	; (8007268 <HAL_TIM_Base_MspInit+0x1d0>)
 80070ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80070f0:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 80070f2:	4b5d      	ldr	r3, [pc, #372]	; (8007268 <HAL_TIM_Base_MspInit+0x1d0>)
 80070f4:	2200      	movs	r2, #0
 80070f6:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80070f8:	4b5b      	ldr	r3, [pc, #364]	; (8007268 <HAL_TIM_Base_MspInit+0x1d0>)
 80070fa:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80070fe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8007100:	4859      	ldr	r0, [pc, #356]	; (8007268 <HAL_TIM_Base_MspInit+0x1d0>)
 8007102:	f7fc f9e3 	bl	80034cc <HAL_DMA_Init>
 8007106:	4603      	mov	r3, r0
 8007108:	2b00      	cmp	r3, #0
 800710a:	d001      	beq.n	8007110 <HAL_TIM_Base_MspInit+0x78>
    {
      Error_Handler();
 800710c:	f7ff fdb1 	bl	8006c72 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	4a55      	ldr	r2, [pc, #340]	; (8007268 <HAL_TIM_Base_MspInit+0x1d0>)
 8007114:	625a      	str	r2, [r3, #36]	; 0x24
 8007116:	4a54      	ldr	r2, [pc, #336]	; (8007268 <HAL_TIM_Base_MspInit+0x1d0>)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA1_Channel3;
 800711c:	4b54      	ldr	r3, [pc, #336]	; (8007270 <HAL_TIM_Base_MspInit+0x1d8>)
 800711e:	4a55      	ldr	r2, [pc, #340]	; (8007274 <HAL_TIM_Base_MspInit+0x1dc>)
 8007120:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Request = DMA_REQUEST_7;
 8007122:	4b53      	ldr	r3, [pc, #332]	; (8007270 <HAL_TIM_Base_MspInit+0x1d8>)
 8007124:	2207      	movs	r2, #7
 8007126:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007128:	4b51      	ldr	r3, [pc, #324]	; (8007270 <HAL_TIM_Base_MspInit+0x1d8>)
 800712a:	2210      	movs	r2, #16
 800712c:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800712e:	4b50      	ldr	r3, [pc, #320]	; (8007270 <HAL_TIM_Base_MspInit+0x1d8>)
 8007130:	2200      	movs	r2, #0
 8007132:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8007134:	4b4e      	ldr	r3, [pc, #312]	; (8007270 <HAL_TIM_Base_MspInit+0x1d8>)
 8007136:	2280      	movs	r2, #128	; 0x80
 8007138:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800713a:	4b4d      	ldr	r3, [pc, #308]	; (8007270 <HAL_TIM_Base_MspInit+0x1d8>)
 800713c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007140:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8007142:	4b4b      	ldr	r3, [pc, #300]	; (8007270 <HAL_TIM_Base_MspInit+0x1d8>)
 8007144:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007148:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Mode = DMA_NORMAL;
 800714a:	4b49      	ldr	r3, [pc, #292]	; (8007270 <HAL_TIM_Base_MspInit+0x1d8>)
 800714c:	2200      	movs	r2, #0
 800714e:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8007150:	4b47      	ldr	r3, [pc, #284]	; (8007270 <HAL_TIM_Base_MspInit+0x1d8>)
 8007152:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8007156:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 8007158:	4845      	ldr	r0, [pc, #276]	; (8007270 <HAL_TIM_Base_MspInit+0x1d8>)
 800715a:	f7fc f9b7 	bl	80034cc <HAL_DMA_Init>
 800715e:	4603      	mov	r3, r0
 8007160:	2b00      	cmp	r3, #0
 8007162:	d001      	beq.n	8007168 <HAL_TIM_Base_MspInit+0xd0>
    {
      Error_Handler();
 8007164:	f7ff fd85 	bl	8006c72 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	4a41      	ldr	r2, [pc, #260]	; (8007270 <HAL_TIM_Base_MspInit+0x1d8>)
 800716c:	629a      	str	r2, [r3, #40]	; 0x28
 800716e:	4a40      	ldr	r2, [pc, #256]	; (8007270 <HAL_TIM_Base_MspInit+0x1d8>)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM1_CH3 Init */
    hdma_tim1_ch3.Instance = DMA1_Channel7;
 8007174:	4b40      	ldr	r3, [pc, #256]	; (8007278 <HAL_TIM_Base_MspInit+0x1e0>)
 8007176:	4a41      	ldr	r2, [pc, #260]	; (800727c <HAL_TIM_Base_MspInit+0x1e4>)
 8007178:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch3.Init.Request = DMA_REQUEST_7;
 800717a:	4b3f      	ldr	r3, [pc, #252]	; (8007278 <HAL_TIM_Base_MspInit+0x1e0>)
 800717c:	2207      	movs	r2, #7
 800717e:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007180:	4b3d      	ldr	r3, [pc, #244]	; (8007278 <HAL_TIM_Base_MspInit+0x1e0>)
 8007182:	2210      	movs	r2, #16
 8007184:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8007186:	4b3c      	ldr	r3, [pc, #240]	; (8007278 <HAL_TIM_Base_MspInit+0x1e0>)
 8007188:	2200      	movs	r2, #0
 800718a:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800718c:	4b3a      	ldr	r3, [pc, #232]	; (8007278 <HAL_TIM_Base_MspInit+0x1e0>)
 800718e:	2280      	movs	r2, #128	; 0x80
 8007190:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007192:	4b39      	ldr	r3, [pc, #228]	; (8007278 <HAL_TIM_Base_MspInit+0x1e0>)
 8007194:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007198:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800719a:	4b37      	ldr	r3, [pc, #220]	; (8007278 <HAL_TIM_Base_MspInit+0x1e0>)
 800719c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80071a0:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch3.Init.Mode = DMA_NORMAL;
 80071a2:	4b35      	ldr	r3, [pc, #212]	; (8007278 <HAL_TIM_Base_MspInit+0x1e0>)
 80071a4:	2200      	movs	r2, #0
 80071a6:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80071a8:	4b33      	ldr	r3, [pc, #204]	; (8007278 <HAL_TIM_Base_MspInit+0x1e0>)
 80071aa:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80071ae:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch3) != HAL_OK)
 80071b0:	4831      	ldr	r0, [pc, #196]	; (8007278 <HAL_TIM_Base_MspInit+0x1e0>)
 80071b2:	f7fc f98b 	bl	80034cc <HAL_DMA_Init>
 80071b6:	4603      	mov	r3, r0
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d001      	beq.n	80071c0 <HAL_TIM_Base_MspInit+0x128>
    {
      Error_Handler();
 80071bc:	f7ff fd59 	bl	8006c72 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	4a2d      	ldr	r2, [pc, #180]	; (8007278 <HAL_TIM_Base_MspInit+0x1e0>)
 80071c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80071c6:	4a2c      	ldr	r2, [pc, #176]	; (8007278 <HAL_TIM_Base_MspInit+0x1e0>)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6293      	str	r3, [r2, #40]	; 0x28
 80071cc:	e041      	b.n	8007252 <HAL_TIM_Base_MspInit+0x1ba>
  }
  else if(htim_base->Instance==TIM16)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a2b      	ldr	r2, [pc, #172]	; (8007280 <HAL_TIM_Base_MspInit+0x1e8>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d13c      	bne.n	8007252 <HAL_TIM_Base_MspInit+0x1ba>
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80071d8:	4b22      	ldr	r3, [pc, #136]	; (8007264 <HAL_TIM_Base_MspInit+0x1cc>)
 80071da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071dc:	4a21      	ldr	r2, [pc, #132]	; (8007264 <HAL_TIM_Base_MspInit+0x1cc>)
 80071de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071e2:	6613      	str	r3, [r2, #96]	; 0x60
 80071e4:	4b1f      	ldr	r3, [pc, #124]	; (8007264 <HAL_TIM_Base_MspInit+0x1cc>)
 80071e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071ec:	60bb      	str	r3, [r7, #8]
 80071ee:	68bb      	ldr	r3, [r7, #8]

    /* TIM16 DMA Init */
    /* TIM16_CH1_UP Init */
    hdma_tim16_ch1_up.Instance = DMA1_Channel6;
 80071f0:	4b24      	ldr	r3, [pc, #144]	; (8007284 <HAL_TIM_Base_MspInit+0x1ec>)
 80071f2:	4a25      	ldr	r2, [pc, #148]	; (8007288 <HAL_TIM_Base_MspInit+0x1f0>)
 80071f4:	601a      	str	r2, [r3, #0]
    hdma_tim16_ch1_up.Init.Request = DMA_REQUEST_4;
 80071f6:	4b23      	ldr	r3, [pc, #140]	; (8007284 <HAL_TIM_Base_MspInit+0x1ec>)
 80071f8:	2204      	movs	r2, #4
 80071fa:	605a      	str	r2, [r3, #4]
    hdma_tim16_ch1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80071fc:	4b21      	ldr	r3, [pc, #132]	; (8007284 <HAL_TIM_Base_MspInit+0x1ec>)
 80071fe:	2210      	movs	r2, #16
 8007200:	609a      	str	r2, [r3, #8]
    hdma_tim16_ch1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8007202:	4b20      	ldr	r3, [pc, #128]	; (8007284 <HAL_TIM_Base_MspInit+0x1ec>)
 8007204:	2200      	movs	r2, #0
 8007206:	60da      	str	r2, [r3, #12]
    hdma_tim16_ch1_up.Init.MemInc = DMA_MINC_ENABLE;
 8007208:	4b1e      	ldr	r3, [pc, #120]	; (8007284 <HAL_TIM_Base_MspInit+0x1ec>)
 800720a:	2280      	movs	r2, #128	; 0x80
 800720c:	611a      	str	r2, [r3, #16]
    hdma_tim16_ch1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800720e:	4b1d      	ldr	r3, [pc, #116]	; (8007284 <HAL_TIM_Base_MspInit+0x1ec>)
 8007210:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007214:	615a      	str	r2, [r3, #20]
    hdma_tim16_ch1_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8007216:	4b1b      	ldr	r3, [pc, #108]	; (8007284 <HAL_TIM_Base_MspInit+0x1ec>)
 8007218:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800721c:	619a      	str	r2, [r3, #24]
    hdma_tim16_ch1_up.Init.Mode = DMA_NORMAL;
 800721e:	4b19      	ldr	r3, [pc, #100]	; (8007284 <HAL_TIM_Base_MspInit+0x1ec>)
 8007220:	2200      	movs	r2, #0
 8007222:	61da      	str	r2, [r3, #28]
    hdma_tim16_ch1_up.Init.Priority = DMA_PRIORITY_LOW;
 8007224:	4b17      	ldr	r3, [pc, #92]	; (8007284 <HAL_TIM_Base_MspInit+0x1ec>)
 8007226:	2200      	movs	r2, #0
 8007228:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim16_ch1_up) != HAL_OK)
 800722a:	4816      	ldr	r0, [pc, #88]	; (8007284 <HAL_TIM_Base_MspInit+0x1ec>)
 800722c:	f7fc f94e 	bl	80034cc <HAL_DMA_Init>
 8007230:	4603      	mov	r3, r0
 8007232:	2b00      	cmp	r3, #0
 8007234:	d001      	beq.n	800723a <HAL_TIM_Base_MspInit+0x1a2>
    {
      Error_Handler();
 8007236:	f7ff fd1c 	bl	8006c72 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim16_ch1_up);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	4a11      	ldr	r2, [pc, #68]	; (8007284 <HAL_TIM_Base_MspInit+0x1ec>)
 800723e:	625a      	str	r2, [r3, #36]	; 0x24
 8007240:	4a10      	ldr	r2, [pc, #64]	; (8007284 <HAL_TIM_Base_MspInit+0x1ec>)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim16_ch1_up);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	4a0e      	ldr	r2, [pc, #56]	; (8007284 <HAL_TIM_Base_MspInit+0x1ec>)
 800724a:	621a      	str	r2, [r3, #32]
 800724c:	4a0d      	ldr	r2, [pc, #52]	; (8007284 <HAL_TIM_Base_MspInit+0x1ec>)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6293      	str	r3, [r2, #40]	; 0x28
  }
  HAL_Set_DMA_Callbacks();
 8007252:	f7ff fea9 	bl	8006fa8 <HAL_Set_DMA_Callbacks>
}
 8007256:	bf00      	nop
 8007258:	3710      	adds	r7, #16
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}
 800725e:	bf00      	nop
 8007260:	40012c00 	.word	0x40012c00
 8007264:	40021000 	.word	0x40021000
 8007268:	20001f80 	.word	0x20001f80
 800726c:	4002001c 	.word	0x4002001c
 8007270:	20001fc8 	.word	0x20001fc8
 8007274:	40020030 	.word	0x40020030
 8007278:	20002010 	.word	0x20002010
 800727c:	40020080 	.word	0x40020080
 8007280:	40014400 	.word	0x40014400
 8007284:	200020a0 	.word	0x200020a0
 8007288:	4002006c 	.word	0x4002006c

0800728c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b084      	sub	sp, #16
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM15)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a28      	ldr	r2, [pc, #160]	; (800733c <HAL_TIM_PWM_MspInit+0xb0>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d149      	bne.n	8007332 <HAL_TIM_PWM_MspInit+0xa6>
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 800729e:	4b28      	ldr	r3, [pc, #160]	; (8007340 <HAL_TIM_PWM_MspInit+0xb4>)
 80072a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072a2:	4a27      	ldr	r2, [pc, #156]	; (8007340 <HAL_TIM_PWM_MspInit+0xb4>)
 80072a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072a8:	6613      	str	r3, [r2, #96]	; 0x60
 80072aa:	4b25      	ldr	r3, [pc, #148]	; (8007340 <HAL_TIM_PWM_MspInit+0xb4>)
 80072ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80072b2:	60fb      	str	r3, [r7, #12]
 80072b4:	68fb      	ldr	r3, [r7, #12]

    /* TIM15 DMA Init */
    /* TIM15_CH1_UP_TRIG_COM Init */
    hdma_tim15_ch1_up_trig_com.Instance = DMA1_Channel5;
 80072b6:	4b23      	ldr	r3, [pc, #140]	; (8007344 <HAL_TIM_PWM_MspInit+0xb8>)
 80072b8:	4a23      	ldr	r2, [pc, #140]	; (8007348 <HAL_TIM_PWM_MspInit+0xbc>)
 80072ba:	601a      	str	r2, [r3, #0]
    hdma_tim15_ch1_up_trig_com.Init.Request = DMA_REQUEST_7;
 80072bc:	4b21      	ldr	r3, [pc, #132]	; (8007344 <HAL_TIM_PWM_MspInit+0xb8>)
 80072be:	2207      	movs	r2, #7
 80072c0:	605a      	str	r2, [r3, #4]
    hdma_tim15_ch1_up_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80072c2:	4b20      	ldr	r3, [pc, #128]	; (8007344 <HAL_TIM_PWM_MspInit+0xb8>)
 80072c4:	2210      	movs	r2, #16
 80072c6:	609a      	str	r2, [r3, #8]
    hdma_tim15_ch1_up_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 80072c8:	4b1e      	ldr	r3, [pc, #120]	; (8007344 <HAL_TIM_PWM_MspInit+0xb8>)
 80072ca:	2200      	movs	r2, #0
 80072cc:	60da      	str	r2, [r3, #12]
    hdma_tim15_ch1_up_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 80072ce:	4b1d      	ldr	r3, [pc, #116]	; (8007344 <HAL_TIM_PWM_MspInit+0xb8>)
 80072d0:	2280      	movs	r2, #128	; 0x80
 80072d2:	611a      	str	r2, [r3, #16]
    hdma_tim15_ch1_up_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80072d4:	4b1b      	ldr	r3, [pc, #108]	; (8007344 <HAL_TIM_PWM_MspInit+0xb8>)
 80072d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80072da:	615a      	str	r2, [r3, #20]
    hdma_tim15_ch1_up_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80072dc:	4b19      	ldr	r3, [pc, #100]	; (8007344 <HAL_TIM_PWM_MspInit+0xb8>)
 80072de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80072e2:	619a      	str	r2, [r3, #24]
    hdma_tim15_ch1_up_trig_com.Init.Mode = DMA_NORMAL;
 80072e4:	4b17      	ldr	r3, [pc, #92]	; (8007344 <HAL_TIM_PWM_MspInit+0xb8>)
 80072e6:	2200      	movs	r2, #0
 80072e8:	61da      	str	r2, [r3, #28]
    hdma_tim15_ch1_up_trig_com.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80072ea:	4b16      	ldr	r3, [pc, #88]	; (8007344 <HAL_TIM_PWM_MspInit+0xb8>)
 80072ec:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80072f0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim15_ch1_up_trig_com) != HAL_OK)
 80072f2:	4814      	ldr	r0, [pc, #80]	; (8007344 <HAL_TIM_PWM_MspInit+0xb8>)
 80072f4:	f7fc f8ea 	bl	80034cc <HAL_DMA_Init>
 80072f8:	4603      	mov	r3, r0
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d001      	beq.n	8007302 <HAL_TIM_PWM_MspInit+0x76>
    {
      Error_Handler();
 80072fe:	f7ff fcb8 	bl	8006c72 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim15_ch1_up_trig_com);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	4a0f      	ldr	r2, [pc, #60]	; (8007344 <HAL_TIM_PWM_MspInit+0xb8>)
 8007306:	625a      	str	r2, [r3, #36]	; 0x24
 8007308:	4a0e      	ldr	r2, [pc, #56]	; (8007344 <HAL_TIM_PWM_MspInit+0xb8>)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_UPDATE],hdma_tim15_ch1_up_trig_com);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	4a0c      	ldr	r2, [pc, #48]	; (8007344 <HAL_TIM_PWM_MspInit+0xb8>)
 8007312:	621a      	str	r2, [r3, #32]
 8007314:	4a0b      	ldr	r2, [pc, #44]	; (8007344 <HAL_TIM_PWM_MspInit+0xb8>)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim15_ch1_up_trig_com);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	4a09      	ldr	r2, [pc, #36]	; (8007344 <HAL_TIM_PWM_MspInit+0xb8>)
 800731e:	639a      	str	r2, [r3, #56]	; 0x38
 8007320:	4a08      	ldr	r2, [pc, #32]	; (8007344 <HAL_TIM_PWM_MspInit+0xb8>)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim15_ch1_up_trig_com);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	4a06      	ldr	r2, [pc, #24]	; (8007344 <HAL_TIM_PWM_MspInit+0xb8>)
 800732a:	635a      	str	r2, [r3, #52]	; 0x34
 800732c:	4a05      	ldr	r2, [pc, #20]	; (8007344 <HAL_TIM_PWM_MspInit+0xb8>)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 8007332:	bf00      	nop
 8007334:	3710      	adds	r7, #16
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}
 800733a:	bf00      	nop
 800733c:	40014000 	.word	0x40014000
 8007340:	40021000 	.word	0x40021000
 8007344:	20002058 	.word	0x20002058
 8007348:	40020058 	.word	0x40020058

0800734c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b082      	sub	sp, #8
 8007350:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 1; iii++)
 8007352:	2300      	movs	r3, #0
 8007354:	71fb      	strb	r3, [r7, #7]
 8007356:	e005      	b.n	8007364 <NMI_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 8007358:	2064      	movs	r0, #100	; 0x64
 800735a:	f7fb ff4f 	bl	80031fc <HAL_Delay>
        for (uint8_t iii = 0; iii < 1; iii++)
 800735e:	79fb      	ldrb	r3, [r7, #7]
 8007360:	3301      	adds	r3, #1
 8007362:	71fb      	strb	r3, [r7, #7]
 8007364:	79fb      	ldrb	r3, [r7, #7]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d0f6      	beq.n	8007358 <NMI_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 800736a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800736e:	f7fb ff45 	bl	80031fc <HAL_Delay>
        for (uint8_t iii = 0; iii < 1; iii++)
 8007372:	e7ee      	b.n	8007352 <NMI_Handler+0x6>

08007374 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b082      	sub	sp, #8
 8007378:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 2; iii++)
 800737a:	2300      	movs	r3, #0
 800737c:	71fb      	strb	r3, [r7, #7]
 800737e:	e005      	b.n	800738c <HardFault_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 8007380:	2064      	movs	r0, #100	; 0x64
 8007382:	f7fb ff3b 	bl	80031fc <HAL_Delay>
        for (uint8_t iii = 0; iii < 2; iii++)
 8007386:	79fb      	ldrb	r3, [r7, #7]
 8007388:	3301      	adds	r3, #1
 800738a:	71fb      	strb	r3, [r7, #7]
 800738c:	79fb      	ldrb	r3, [r7, #7]
 800738e:	2b01      	cmp	r3, #1
 8007390:	d9f6      	bls.n	8007380 <HardFault_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 8007392:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8007396:	f7fb ff31 	bl	80031fc <HAL_Delay>
        for (uint8_t iii = 0; iii < 2; iii++)
 800739a:	e7ee      	b.n	800737a <HardFault_Handler+0x6>

0800739c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b082      	sub	sp, #8
 80073a0:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 3; iii++)
 80073a2:	2300      	movs	r3, #0
 80073a4:	71fb      	strb	r3, [r7, #7]
 80073a6:	e005      	b.n	80073b4 <MemManage_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 80073a8:	2064      	movs	r0, #100	; 0x64
 80073aa:	f7fb ff27 	bl	80031fc <HAL_Delay>
        for (uint8_t iii = 0; iii < 3; iii++)
 80073ae:	79fb      	ldrb	r3, [r7, #7]
 80073b0:	3301      	adds	r3, #1
 80073b2:	71fb      	strb	r3, [r7, #7]
 80073b4:	79fb      	ldrb	r3, [r7, #7]
 80073b6:	2b02      	cmp	r3, #2
 80073b8:	d9f6      	bls.n	80073a8 <MemManage_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 80073ba:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80073be:	f7fb ff1d 	bl	80031fc <HAL_Delay>
        for (uint8_t iii = 0; iii < 3; iii++)
 80073c2:	e7ee      	b.n	80073a2 <MemManage_Handler+0x6>

080073c4 <BusFault_Handler>:
}
/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b082      	sub	sp, #8
 80073c8:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 4; iii++)
 80073ca:	2300      	movs	r3, #0
 80073cc:	71fb      	strb	r3, [r7, #7]
 80073ce:	e005      	b.n	80073dc <BusFault_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 80073d0:	2064      	movs	r0, #100	; 0x64
 80073d2:	f7fb ff13 	bl	80031fc <HAL_Delay>
        for (uint8_t iii = 0; iii < 4; iii++)
 80073d6:	79fb      	ldrb	r3, [r7, #7]
 80073d8:	3301      	adds	r3, #1
 80073da:	71fb      	strb	r3, [r7, #7]
 80073dc:	79fb      	ldrb	r3, [r7, #7]
 80073de:	2b03      	cmp	r3, #3
 80073e0:	d9f6      	bls.n	80073d0 <BusFault_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 80073e2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80073e6:	f7fb ff09 	bl	80031fc <HAL_Delay>
        for (uint8_t iii = 0; iii < 4; iii++)
 80073ea:	e7ee      	b.n	80073ca <BusFault_Handler+0x6>

080073ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b082      	sub	sp, #8
 80073f0:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 5; iii++)
 80073f2:	2300      	movs	r3, #0
 80073f4:	71fb      	strb	r3, [r7, #7]
 80073f6:	e005      	b.n	8007404 <UsageFault_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 80073f8:	2064      	movs	r0, #100	; 0x64
 80073fa:	f7fb feff 	bl	80031fc <HAL_Delay>
        for (uint8_t iii = 0; iii < 5; iii++)
 80073fe:	79fb      	ldrb	r3, [r7, #7]
 8007400:	3301      	adds	r3, #1
 8007402:	71fb      	strb	r3, [r7, #7]
 8007404:	79fb      	ldrb	r3, [r7, #7]
 8007406:	2b04      	cmp	r3, #4
 8007408:	d9f6      	bls.n	80073f8 <UsageFault_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 800740a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800740e:	f7fb fef5 	bl	80031fc <HAL_Delay>
        for (uint8_t iii = 0; iii < 5; iii++)
 8007412:	e7ee      	b.n	80073f2 <UsageFault_Handler+0x6>

08007414 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007414:	b480      	push	{r7}
 8007416:	af00      	add	r7, sp, #0
}
 8007418:	bf00      	nop
 800741a:	46bd      	mov	sp, r7
 800741c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007420:	4770      	bx	lr
	...

08007424 <EXTI0_IRQHandler>:
volatile uint32_t d_passes = 0;
/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8007424:	b590      	push	{r4, r7, lr}
 8007426:	b087      	sub	sp, #28
 8007428:	af02      	add	r7, sp, #8
    // D is pause
    BaseType_t xHigherPriorityTaskWoken;
    gpio_config_push_button_pin_e button_pin = PUSH_BUTTON_D_PIN;
 800742a:	2301      	movs	r3, #1
 800742c:	81fb      	strh	r3, [r7, #14]
    gpio_config_push_button_pin_e button = PUSH_BUTTON_D;
 800742e:	2303      	movs	r3, #3
 8007430:	81bb      	strh	r3, [r7, #12]
    gpio_config_push_button_irq_e button_irq = PUSH_BUTTON_D_IRQ;
 8007432:	2306      	movs	r3, #6
 8007434:	72fb      	strb	r3, [r7, #11]
    HAL_GPIO_EXTI_IRQHandler(button_pin);
 8007436:	89fb      	ldrh	r3, [r7, #14]
 8007438:	4618      	mov	r0, r3
 800743a:	f7fc fc59 	bl	8003cf0 <HAL_GPIO_EXTI_IRQHandler>
    g_button_press_timestamp[button][TIMESTAMP_PREVIOUS] = g_button_press_timestamp[button][TIMESTAMP_CURRENT];
 800743e:	89ba      	ldrh	r2, [r7, #12]
 8007440:	89bb      	ldrh	r3, [r7, #12]
 8007442:	4910      	ldr	r1, [pc, #64]	; (8007484 <EXTI0_IRQHandler+0x60>)
 8007444:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 8007448:	490e      	ldr	r1, [pc, #56]	; (8007484 <EXTI0_IRQHandler+0x60>)
 800744a:	00db      	lsls	r3, r3, #3
 800744c:	440b      	add	r3, r1
 800744e:	605a      	str	r2, [r3, #4]
    g_button_press_timestamp[button][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 8007450:	89bc      	ldrh	r4, [r7, #12]
 8007452:	f7fa f9f7 	bl	8001844 <xTaskGetTickCountFromISR>
 8007456:	4603      	mov	r3, r0
 8007458:	4a0a      	ldr	r2, [pc, #40]	; (8007484 <EXTI0_IRQHandler+0x60>)
 800745a:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
    HAL_NVIC_DisableIRQ(button_irq);
 800745e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8007462:	4618      	mov	r0, r3
 8007464:	f7fc f817 	bl	8003496 <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, button, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 8007468:	4b07      	ldr	r3, [pc, #28]	; (8007488 <EXTI0_IRQHandler+0x64>)
 800746a:	6818      	ldr	r0, [r3, #0]
 800746c:	89b9      	ldrh	r1, [r7, #12]
 800746e:	1d3b      	adds	r3, r7, #4
 8007470:	9300      	str	r3, [sp, #0]
 8007472:	2300      	movs	r3, #0
 8007474:	2203      	movs	r2, #3
 8007476:	f7fa fda9 	bl	8001fcc <xTaskGenericNotifyFromISR>
}
 800747a:	bf00      	nop
 800747c:	3714      	adds	r7, #20
 800747e:	46bd      	mov	sp, r7
 8007480:	bd90      	pop	{r4, r7, pc}
 8007482:	bf00      	nop
 8007484:	20000654 	.word	0x20000654
 8007488:	20002160 	.word	0x20002160

0800748c <EXTI2_IRQHandler>:
uint32_t g_dbg_b_interrupt_count = 0;
/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800748c:	b590      	push	{r4, r7, lr}
 800748e:	b087      	sub	sp, #28
 8007490:	af02      	add	r7, sp, #8
    // A is speed
    BaseType_t xHigherPriorityTaskWoken;
    gpio_config_push_button_pin_e button_pin = PUSH_BUTTON_A_PIN;
 8007492:	2304      	movs	r3, #4
 8007494:	81fb      	strh	r3, [r7, #14]
    gpio_config_push_button_pin_e button = PUSH_BUTTON_A;
 8007496:	2300      	movs	r3, #0
 8007498:	81bb      	strh	r3, [r7, #12]
    gpio_config_push_button_irq_e button_irq = PUSH_BUTTON_A_IRQ;
 800749a:	2308      	movs	r3, #8
 800749c:	72fb      	strb	r3, [r7, #11]
    HAL_GPIO_EXTI_IRQHandler(button_pin);
 800749e:	89fb      	ldrh	r3, [r7, #14]
 80074a0:	4618      	mov	r0, r3
 80074a2:	f7fc fc25 	bl	8003cf0 <HAL_GPIO_EXTI_IRQHandler>
    g_button_press_timestamp[button][TIMESTAMP_PREVIOUS] = g_button_press_timestamp[button][TIMESTAMP_CURRENT];
 80074a6:	89ba      	ldrh	r2, [r7, #12]
 80074a8:	89bb      	ldrh	r3, [r7, #12]
 80074aa:	4910      	ldr	r1, [pc, #64]	; (80074ec <EXTI2_IRQHandler+0x60>)
 80074ac:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 80074b0:	490e      	ldr	r1, [pc, #56]	; (80074ec <EXTI2_IRQHandler+0x60>)
 80074b2:	00db      	lsls	r3, r3, #3
 80074b4:	440b      	add	r3, r1
 80074b6:	605a      	str	r2, [r3, #4]
    g_button_press_timestamp[button][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 80074b8:	89bc      	ldrh	r4, [r7, #12]
 80074ba:	f7fa f9c3 	bl	8001844 <xTaskGetTickCountFromISR>
 80074be:	4603      	mov	r3, r0
 80074c0:	4a0a      	ldr	r2, [pc, #40]	; (80074ec <EXTI2_IRQHandler+0x60>)
 80074c2:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
    HAL_NVIC_DisableIRQ(button_irq);
 80074c6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80074ca:	4618      	mov	r0, r3
 80074cc:	f7fb ffe3 	bl	8003496 <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, button, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 80074d0:	4b07      	ldr	r3, [pc, #28]	; (80074f0 <EXTI2_IRQHandler+0x64>)
 80074d2:	6818      	ldr	r0, [r3, #0]
 80074d4:	89b9      	ldrh	r1, [r7, #12]
 80074d6:	1d3b      	adds	r3, r7, #4
 80074d8:	9300      	str	r3, [sp, #0]
 80074da:	2300      	movs	r3, #0
 80074dc:	2203      	movs	r2, #3
 80074de:	f7fa fd75 	bl	8001fcc <xTaskGenericNotifyFromISR>
}
 80074e2:	bf00      	nop
 80074e4:	3714      	adds	r7, #20
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd90      	pop	{r4, r7, pc}
 80074ea:	bf00      	nop
 80074ec:	20000654 	.word	0x20000654
 80074f0:	20002160 	.word	0x20002160

080074f4 <EXTI15_10_IRQHandler>:
volatile uint32_t b_passes = 0;
/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80074f4:	b590      	push	{r4, r7, lr}
 80074f6:	b087      	sub	sp, #28
 80074f8:	af02      	add	r7, sp, #8
    // B is state
    BaseType_t xHigherPriorityTaskWoken;
    gpio_config_push_button_pin_e button_pin = PUSH_BUTTON_B_PIN;
 80074fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80074fe:	81fb      	strh	r3, [r7, #14]
    gpio_config_push_button_pin_e button = PUSH_BUTTON_B;
 8007500:	2301      	movs	r3, #1
 8007502:	81bb      	strh	r3, [r7, #12]
    gpio_config_push_button_irq_e button_irq = PUSH_BUTTON_B_IRQ;
 8007504:	2328      	movs	r3, #40	; 0x28
 8007506:	72fb      	strb	r3, [r7, #11]
    HAL_GPIO_EXTI_IRQHandler(button_pin);
 8007508:	89fb      	ldrh	r3, [r7, #14]
 800750a:	4618      	mov	r0, r3
 800750c:	f7fc fbf0 	bl	8003cf0 <HAL_GPIO_EXTI_IRQHandler>
    g_button_press_timestamp[button][TIMESTAMP_PREVIOUS] = g_button_press_timestamp[button][TIMESTAMP_CURRENT];
 8007510:	89ba      	ldrh	r2, [r7, #12]
 8007512:	89bb      	ldrh	r3, [r7, #12]
 8007514:	490f      	ldr	r1, [pc, #60]	; (8007554 <EXTI15_10_IRQHandler+0x60>)
 8007516:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 800751a:	490e      	ldr	r1, [pc, #56]	; (8007554 <EXTI15_10_IRQHandler+0x60>)
 800751c:	00db      	lsls	r3, r3, #3
 800751e:	440b      	add	r3, r1
 8007520:	605a      	str	r2, [r3, #4]
    g_button_press_timestamp[button][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 8007522:	89bc      	ldrh	r4, [r7, #12]
 8007524:	f7fa f98e 	bl	8001844 <xTaskGetTickCountFromISR>
 8007528:	4603      	mov	r3, r0
 800752a:	4a0a      	ldr	r2, [pc, #40]	; (8007554 <EXTI15_10_IRQHandler+0x60>)
 800752c:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
    HAL_NVIC_DisableIRQ(button_irq);
 8007530:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8007534:	4618      	mov	r0, r3
 8007536:	f7fb ffae 	bl	8003496 <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, button, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 800753a:	4b07      	ldr	r3, [pc, #28]	; (8007558 <EXTI15_10_IRQHandler+0x64>)
 800753c:	6818      	ldr	r0, [r3, #0]
 800753e:	89b9      	ldrh	r1, [r7, #12]
 8007540:	1d3b      	adds	r3, r7, #4
 8007542:	9300      	str	r3, [sp, #0]
 8007544:	2300      	movs	r3, #0
 8007546:	2203      	movs	r2, #3
 8007548:	f7fa fd40 	bl	8001fcc <xTaskGenericNotifyFromISR>
}
 800754c:	bf00      	nop
 800754e:	3714      	adds	r7, #20
 8007550:	46bd      	mov	sp, r7
 8007552:	bd90      	pop	{r4, r7, pc}
 8007554:	20000654 	.word	0x20000654
 8007558:	20002160 	.word	0x20002160

0800755c <EXTI9_5_IRQHandler>:
volatile uint32_t c_passes = 0;
/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800755c:	b590      	push	{r4, r7, lr}
 800755e:	b087      	sub	sp, #28
 8007560:	af02      	add	r7, sp, #8
    // C is color
    BaseType_t xHigherPriorityTaskWoken;
    gpio_config_push_button_pin_e button_pin = PUSH_BUTTON_C_PIN;
 8007562:	2320      	movs	r3, #32
 8007564:	81fb      	strh	r3, [r7, #14]
    gpio_config_push_button_pin_e button = PUSH_BUTTON_C;
 8007566:	2302      	movs	r3, #2
 8007568:	81bb      	strh	r3, [r7, #12]
    gpio_config_push_button_irq_e button_irq = PUSH_BUTTON_C_IRQ;
 800756a:	2317      	movs	r3, #23
 800756c:	72fb      	strb	r3, [r7, #11]
    // add button irq here..
    HAL_GPIO_EXTI_IRQHandler(button_pin);
 800756e:	89fb      	ldrh	r3, [r7, #14]
 8007570:	4618      	mov	r0, r3
 8007572:	f7fc fbbd 	bl	8003cf0 <HAL_GPIO_EXTI_IRQHandler>
    g_button_press_timestamp[button][TIMESTAMP_PREVIOUS] = g_button_press_timestamp[button][TIMESTAMP_CURRENT];
 8007576:	89ba      	ldrh	r2, [r7, #12]
 8007578:	89bb      	ldrh	r3, [r7, #12]
 800757a:	4910      	ldr	r1, [pc, #64]	; (80075bc <EXTI9_5_IRQHandler+0x60>)
 800757c:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 8007580:	490e      	ldr	r1, [pc, #56]	; (80075bc <EXTI9_5_IRQHandler+0x60>)
 8007582:	00db      	lsls	r3, r3, #3
 8007584:	440b      	add	r3, r1
 8007586:	605a      	str	r2, [r3, #4]
    g_button_press_timestamp[button][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 8007588:	89bc      	ldrh	r4, [r7, #12]
 800758a:	f7fa f95b 	bl	8001844 <xTaskGetTickCountFromISR>
 800758e:	4603      	mov	r3, r0
 8007590:	4a0a      	ldr	r2, [pc, #40]	; (80075bc <EXTI9_5_IRQHandler+0x60>)
 8007592:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
    HAL_NVIC_DisableIRQ(button_irq);
 8007596:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800759a:	4618      	mov	r0, r3
 800759c:	f7fb ff7b 	bl	8003496 <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, button, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 80075a0:	4b07      	ldr	r3, [pc, #28]	; (80075c0 <EXTI9_5_IRQHandler+0x64>)
 80075a2:	6818      	ldr	r0, [r3, #0]
 80075a4:	89b9      	ldrh	r1, [r7, #12]
 80075a6:	1d3b      	adds	r3, r7, #4
 80075a8:	9300      	str	r3, [sp, #0]
 80075aa:	2300      	movs	r3, #0
 80075ac:	2203      	movs	r2, #3
 80075ae:	f7fa fd0d 	bl	8001fcc <xTaskGenericNotifyFromISR>
}
 80075b2:	bf00      	nop
 80075b4:	3714      	adds	r7, #20
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd90      	pop	{r4, r7, pc}
 80075ba:	bf00      	nop
 80075bc:	20000654 	.word	0x20000654
 80075c0:	20002160 	.word	0x20002160

080075c4 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b083      	sub	sp, #12
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	4603      	mov	r3, r0
 80075cc:	80fb      	strh	r3, [r7, #6]

}
 80075ce:	bf00      	nop
 80075d0:	370c      	adds	r7, #12
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr

080075da <HAL_DMA_CMPLT_CALLBACK>:


void HAL_DMA_CMPLT_CALLBACK(DMA_HandleTypeDef *hdma)
{
 80075da:	b480      	push	{r7}
 80075dc:	b083      	sub	sp, #12
 80075de:	af00      	add	r7, sp, #0
 80075e0:	6078      	str	r0, [r7, #4]
    while(1);
 80075e2:	e7fe      	b.n	80075e2 <HAL_DMA_CMPLT_CALLBACK+0x8>

080075e4 <HAL_TIM_PWM_PulseFinishedCallback>:
bool gb_dma_cmplt_strip_1 = true;
bool gb_dma_cmplt_strip_2 = true;
bool gb_dma_cmplt_strip_3 = true;

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b082      	sub	sp, #8
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
    switch (htim->Channel)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	7f1b      	ldrb	r3, [r3, #28]
 80075f0:	2b04      	cmp	r3, #4
 80075f2:	d016      	beq.n	8007622 <HAL_TIM_PWM_PulseFinishedCallback+0x3e>
 80075f4:	2b04      	cmp	r3, #4
 80075f6:	dc1c      	bgt.n	8007632 <HAL_TIM_PWM_PulseFinishedCallback+0x4e>
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	d002      	beq.n	8007602 <HAL_TIM_PWM_PulseFinishedCallback+0x1e>
 80075fc:	2b02      	cmp	r3, #2
 80075fe:	d008      	beq.n	8007612 <HAL_TIM_PWM_PulseFinishedCallback+0x2e>
        case HAL_TIM_ACTIVE_CHANNEL_3:
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_3);
            gb_dma_cmplt_strip_3 = true;
        break;
        default:
        break;
 8007600:	e017      	b.n	8007632 <HAL_TIM_PWM_PulseFinishedCallback+0x4e>
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
 8007602:	2100      	movs	r1, #0
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f7fe f931 	bl	800586c <HAL_TIM_PWM_Stop_DMA>
            gb_dma_cmplt_strip_1 = true;
 800760a:	4b0c      	ldr	r3, [pc, #48]	; (800763c <HAL_TIM_PWM_PulseFinishedCallback+0x58>)
 800760c:	2201      	movs	r2, #1
 800760e:	701a      	strb	r2, [r3, #0]
        break;
 8007610:	e010      	b.n	8007634 <HAL_TIM_PWM_PulseFinishedCallback+0x50>
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_2);
 8007612:	2104      	movs	r1, #4
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f7fe f929 	bl	800586c <HAL_TIM_PWM_Stop_DMA>
            gb_dma_cmplt_strip_2 = true;
 800761a:	4b09      	ldr	r3, [pc, #36]	; (8007640 <HAL_TIM_PWM_PulseFinishedCallback+0x5c>)
 800761c:	2201      	movs	r2, #1
 800761e:	701a      	strb	r2, [r3, #0]
        break;
 8007620:	e008      	b.n	8007634 <HAL_TIM_PWM_PulseFinishedCallback+0x50>
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_3);
 8007622:	2108      	movs	r1, #8
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f7fe f921 	bl	800586c <HAL_TIM_PWM_Stop_DMA>
            gb_dma_cmplt_strip_3 = true;
 800762a:	4b06      	ldr	r3, [pc, #24]	; (8007644 <HAL_TIM_PWM_PulseFinishedCallback+0x60>)
 800762c:	2201      	movs	r2, #1
 800762e:	701a      	strb	r2, [r3, #0]
        break;
 8007630:	e000      	b.n	8007634 <HAL_TIM_PWM_PulseFinishedCallback+0x50>
        break;
 8007632:	bf00      	nop
    }
}
 8007634:	bf00      	nop
 8007636:	3708      	adds	r7, #8
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}
 800763c:	20000280 	.word	0x20000280
 8007640:	20000281 	.word	0x20000281
 8007644:	20000282 	.word	0x20000282

08007648 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 800764c:	4802      	ldr	r0, [pc, #8]	; (8007658 <DMA1_Channel2_IRQHandler+0x10>)
 800764e:	f7fc f896 	bl	800377e <HAL_DMA_IRQHandler>
}
 8007652:	bf00      	nop
 8007654:	bd80      	pop	{r7, pc}
 8007656:	bf00      	nop
 8007658:	20001f80 	.word	0x20001f80

0800765c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 8007660:	4802      	ldr	r0, [pc, #8]	; (800766c <DMA1_Channel3_IRQHandler+0x10>)
 8007662:	f7fc f88c 	bl	800377e <HAL_DMA_IRQHandler>
}
 8007666:	bf00      	nop
 8007668:	bd80      	pop	{r7, pc}
 800766a:	bf00      	nop
 800766c:	20001fc8 	.word	0x20001fc8

08007670 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim15_ch1_up_trig_com);
 8007674:	4802      	ldr	r0, [pc, #8]	; (8007680 <DMA1_Channel5_IRQHandler+0x10>)
 8007676:	f7fc f882 	bl	800377e <HAL_DMA_IRQHandler>
}
 800767a:	bf00      	nop
 800767c:	bd80      	pop	{r7, pc}
 800767e:	bf00      	nop
 8007680:	20002058 	.word	0x20002058

08007684 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim16_ch1_up);
 8007688:	4802      	ldr	r0, [pc, #8]	; (8007694 <DMA1_Channel6_IRQHandler+0x10>)
 800768a:	f7fc f878 	bl	800377e <HAL_DMA_IRQHandler>
}
 800768e:	bf00      	nop
 8007690:	bd80      	pop	{r7, pc}
 8007692:	bf00      	nop
 8007694:	200020a0 	.word	0x200020a0

08007698 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim1_ch3);
 800769c:	4802      	ldr	r0, [pc, #8]	; (80076a8 <DMA1_Channel7_IRQHandler+0x10>)
 800769e:	f7fc f86e 	bl	800377e <HAL_DMA_IRQHandler>
}
 80076a2:	bf00      	nop
 80076a4:	bd80      	pop	{r7, pc}
 80076a6:	bf00      	nop
 80076a8:	20002010 	.word	0x20002010

080076ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80076ac:	b480      	push	{r7}
 80076ae:	af00      	add	r7, sp, #0
	return 1;
 80076b0:	2301      	movs	r3, #1
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr

080076bc <_kill>:

int _kill(int pid, int sig)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b082      	sub	sp, #8
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80076c6:	f000 f91b 	bl	8007900 <__errno>
 80076ca:	4603      	mov	r3, r0
 80076cc:	2216      	movs	r2, #22
 80076ce:	601a      	str	r2, [r3, #0]
	return -1;
 80076d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3708      	adds	r7, #8
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}

080076dc <_exit>:

void _exit (int status)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b082      	sub	sp, #8
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80076e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f7ff ffe7 	bl	80076bc <_kill>
	while (1) {}		/* Make sure we hang here */
 80076ee:	e7fe      	b.n	80076ee <_exit+0x12>

080076f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b086      	sub	sp, #24
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	60f8      	str	r0, [r7, #12]
 80076f8:	60b9      	str	r1, [r7, #8]
 80076fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80076fc:	2300      	movs	r3, #0
 80076fe:	617b      	str	r3, [r7, #20]
 8007700:	e00a      	b.n	8007718 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8007702:	f3af 8000 	nop.w
 8007706:	4601      	mov	r1, r0
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	1c5a      	adds	r2, r3, #1
 800770c:	60ba      	str	r2, [r7, #8]
 800770e:	b2ca      	uxtb	r2, r1
 8007710:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	3301      	adds	r3, #1
 8007716:	617b      	str	r3, [r7, #20]
 8007718:	697a      	ldr	r2, [r7, #20]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	429a      	cmp	r2, r3
 800771e:	dbf0      	blt.n	8007702 <_read+0x12>
	}

return len;
 8007720:	687b      	ldr	r3, [r7, #4]
}
 8007722:	4618      	mov	r0, r3
 8007724:	3718      	adds	r7, #24
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}

0800772a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800772a:	b580      	push	{r7, lr}
 800772c:	b086      	sub	sp, #24
 800772e:	af00      	add	r7, sp, #0
 8007730:	60f8      	str	r0, [r7, #12]
 8007732:	60b9      	str	r1, [r7, #8]
 8007734:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007736:	2300      	movs	r3, #0
 8007738:	617b      	str	r3, [r7, #20]
 800773a:	e009      	b.n	8007750 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	1c5a      	adds	r2, r3, #1
 8007740:	60ba      	str	r2, [r7, #8]
 8007742:	781b      	ldrb	r3, [r3, #0]
 8007744:	4618      	mov	r0, r3
 8007746:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	3301      	adds	r3, #1
 800774e:	617b      	str	r3, [r7, #20]
 8007750:	697a      	ldr	r2, [r7, #20]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	429a      	cmp	r2, r3
 8007756:	dbf1      	blt.n	800773c <_write+0x12>
	}
	return len;
 8007758:	687b      	ldr	r3, [r7, #4]
}
 800775a:	4618      	mov	r0, r3
 800775c:	3718      	adds	r7, #24
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}

08007762 <_close>:

int _close(int file)
{
 8007762:	b480      	push	{r7}
 8007764:	b083      	sub	sp, #12
 8007766:	af00      	add	r7, sp, #0
 8007768:	6078      	str	r0, [r7, #4]
	return -1;
 800776a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800776e:	4618      	mov	r0, r3
 8007770:	370c      	adds	r7, #12
 8007772:	46bd      	mov	sp, r7
 8007774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007778:	4770      	bx	lr

0800777a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800777a:	b480      	push	{r7}
 800777c:	b083      	sub	sp, #12
 800777e:	af00      	add	r7, sp, #0
 8007780:	6078      	str	r0, [r7, #4]
 8007782:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800778a:	605a      	str	r2, [r3, #4]
	return 0;
 800778c:	2300      	movs	r3, #0
}
 800778e:	4618      	mov	r0, r3
 8007790:	370c      	adds	r7, #12
 8007792:	46bd      	mov	sp, r7
 8007794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007798:	4770      	bx	lr

0800779a <_isatty>:

int _isatty(int file)
{
 800779a:	b480      	push	{r7}
 800779c:	b083      	sub	sp, #12
 800779e:	af00      	add	r7, sp, #0
 80077a0:	6078      	str	r0, [r7, #4]
	return 1;
 80077a2:	2301      	movs	r3, #1
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	370c      	adds	r7, #12
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr

080077b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80077b0:	b480      	push	{r7}
 80077b2:	b085      	sub	sp, #20
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	60f8      	str	r0, [r7, #12]
 80077b8:	60b9      	str	r1, [r7, #8]
 80077ba:	607a      	str	r2, [r7, #4]
	return 0;
 80077bc:	2300      	movs	r3, #0
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3714      	adds	r7, #20
 80077c2:	46bd      	mov	sp, r7
 80077c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c8:	4770      	bx	lr
	...

080077cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b086      	sub	sp, #24
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80077d4:	4a14      	ldr	r2, [pc, #80]	; (8007828 <_sbrk+0x5c>)
 80077d6:	4b15      	ldr	r3, [pc, #84]	; (800782c <_sbrk+0x60>)
 80077d8:	1ad3      	subs	r3, r2, r3
 80077da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80077e0:	4b13      	ldr	r3, [pc, #76]	; (8007830 <_sbrk+0x64>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d102      	bne.n	80077ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80077e8:	4b11      	ldr	r3, [pc, #68]	; (8007830 <_sbrk+0x64>)
 80077ea:	4a12      	ldr	r2, [pc, #72]	; (8007834 <_sbrk+0x68>)
 80077ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80077ee:	4b10      	ldr	r3, [pc, #64]	; (8007830 <_sbrk+0x64>)
 80077f0:	681a      	ldr	r2, [r3, #0]
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	4413      	add	r3, r2
 80077f6:	693a      	ldr	r2, [r7, #16]
 80077f8:	429a      	cmp	r2, r3
 80077fa:	d207      	bcs.n	800780c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80077fc:	f000 f880 	bl	8007900 <__errno>
 8007800:	4603      	mov	r3, r0
 8007802:	220c      	movs	r2, #12
 8007804:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007806:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800780a:	e009      	b.n	8007820 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800780c:	4b08      	ldr	r3, [pc, #32]	; (8007830 <_sbrk+0x64>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007812:	4b07      	ldr	r3, [pc, #28]	; (8007830 <_sbrk+0x64>)
 8007814:	681a      	ldr	r2, [r3, #0]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	4413      	add	r3, r2
 800781a:	4a05      	ldr	r2, [pc, #20]	; (8007830 <_sbrk+0x64>)
 800781c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800781e:	68fb      	ldr	r3, [r7, #12]
}
 8007820:	4618      	mov	r0, r3
 8007822:	3718      	adds	r7, #24
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}
 8007828:	20010000 	.word	0x20010000
 800782c:	00000400 	.word	0x00000400
 8007830:	20002158 	.word	0x20002158
 8007834:	200029d8 	.word	0x200029d8

08007838 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8007838:	b480      	push	{r7}
 800783a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800783c:	4b06      	ldr	r3, [pc, #24]	; (8007858 <SystemInit+0x20>)
 800783e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007842:	4a05      	ldr	r2, [pc, #20]	; (8007858 <SystemInit+0x20>)
 8007844:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007848:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800784c:	bf00      	nop
 800784e:	46bd      	mov	sp, r7
 8007850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007854:	4770      	bx	lr
 8007856:	bf00      	nop
 8007858:	e000ed00 	.word	0xe000ed00

0800785c <main>:
#include "animate_led.h"
#include "flash_info.h"


int main(void)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	af00      	add	r7, sp, #0
    board_init_common_board_init();
 8007860:	f7ff f9ec 	bl	8006c3c <board_init_common_board_init>
    //flash_info_init();
    task_create();
 8007864:	f000 f808 	bl	8007878 <task_create>
	//semaphore_create();
    reset_ws2812b();
 8007868:	f7f8 fd3e 	bl	80002e8 <reset_ws2812b>
	osKernelStart();
 800786c:	f7f8 fe4a 	bl	8000504 <osKernelStart>
 8007870:	2300      	movs	r3, #0
}
 8007872:	4618      	mov	r0, r3
 8007874:	bd80      	pop	{r7, pc}
	...

08007878 <task_create>:
	.priority = (osPriority_t) osPriorityNormal,
};


void task_create(void)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	af00      	add	r7, sp, #0
    osKernelInitialize();
 800787c:	f7f8 fe1e 	bl	80004bc <osKernelInitialize>
//	g_button_press_handle = osThreadNew(task_button_press, NULL, &g_task_button_press_attributes);
    //g_dma_transfer_handle = osThreadNew(task_dma_transfer, NULL, &g_task_dma_transfer_attributes);
    g_led_strip_1_ctrl_handle = osThreadNew(task_led_ctrl_strip_one, NULL, &g_task_strip_1_led_ctrl_attributes);
 8007880:	4a06      	ldr	r2, [pc, #24]	; (800789c <task_create+0x24>)
 8007882:	2100      	movs	r1, #0
 8007884:	4806      	ldr	r0, [pc, #24]	; (80078a0 <task_create+0x28>)
 8007886:	f7f8 fe63 	bl	8000550 <osThreadNew>
 800788a:	4603      	mov	r3, r0
 800788c:	4a05      	ldr	r2, [pc, #20]	; (80078a4 <task_create+0x2c>)
 800788e:	6013      	str	r3, [r2, #0]
    g_tasks_running = true; // technically will be running after task scheduler started
 8007890:	4b05      	ldr	r3, [pc, #20]	; (80078a8 <task_create+0x30>)
 8007892:	2201      	movs	r2, #1
 8007894:	701a      	strb	r2, [r3, #0]
}
 8007896:	bf00      	nop
 8007898:	bd80      	pop	{r7, pc}
 800789a:	bf00      	nop
 800789c:	08008b28 	.word	0x08008b28
 80078a0:	08000405 	.word	0x08000405
 80078a4:	2000215c 	.word	0x2000215c
 80078a8:	200029c0 	.word	0x200029c0

080078ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80078ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80078e4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80078b0:	f7ff ffc2 	bl	8007838 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80078b4:	480c      	ldr	r0, [pc, #48]	; (80078e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80078b6:	490d      	ldr	r1, [pc, #52]	; (80078ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80078b8:	4a0d      	ldr	r2, [pc, #52]	; (80078f0 <LoopForever+0xe>)
  movs r3, #0
 80078ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80078bc:	e002      	b.n	80078c4 <LoopCopyDataInit>

080078be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80078be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80078c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80078c2:	3304      	adds	r3, #4

080078c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80078c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80078c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80078c8:	d3f9      	bcc.n	80078be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80078ca:	4a0a      	ldr	r2, [pc, #40]	; (80078f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80078cc:	4c0a      	ldr	r4, [pc, #40]	; (80078f8 <LoopForever+0x16>)
  movs r3, #0
 80078ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80078d0:	e001      	b.n	80078d6 <LoopFillZerobss>

080078d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80078d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80078d4:	3204      	adds	r2, #4

080078d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80078d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80078d8:	d3fb      	bcc.n	80078d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80078da:	f000 f817 	bl	800790c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80078de:	f7ff ffbd 	bl	800785c <main>

080078e2 <LoopForever>:

LoopForever:
    b LoopForever
 80078e2:	e7fe      	b.n	80078e2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80078e4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80078e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80078ec:	200002ec 	.word	0x200002ec
  ldr r2, =_sidata
 80078f0:	08008c9c 	.word	0x08008c9c
  ldr r2, =_sbss
 80078f4:	200002ec 	.word	0x200002ec
  ldr r4, =_ebss
 80078f8:	200029d4 	.word	0x200029d4

080078fc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80078fc:	e7fe      	b.n	80078fc <ADC1_IRQHandler>
	...

08007900 <__errno>:
 8007900:	4b01      	ldr	r3, [pc, #4]	; (8007908 <__errno+0x8>)
 8007902:	6818      	ldr	r0, [r3, #0]
 8007904:	4770      	bx	lr
 8007906:	bf00      	nop
 8007908:	20000288 	.word	0x20000288

0800790c <__libc_init_array>:
 800790c:	b570      	push	{r4, r5, r6, lr}
 800790e:	4d0d      	ldr	r5, [pc, #52]	; (8007944 <__libc_init_array+0x38>)
 8007910:	4c0d      	ldr	r4, [pc, #52]	; (8007948 <__libc_init_array+0x3c>)
 8007912:	1b64      	subs	r4, r4, r5
 8007914:	10a4      	asrs	r4, r4, #2
 8007916:	2600      	movs	r6, #0
 8007918:	42a6      	cmp	r6, r4
 800791a:	d109      	bne.n	8007930 <__libc_init_array+0x24>
 800791c:	4d0b      	ldr	r5, [pc, #44]	; (800794c <__libc_init_array+0x40>)
 800791e:	4c0c      	ldr	r4, [pc, #48]	; (8007950 <__libc_init_array+0x44>)
 8007920:	f001 f88a 	bl	8008a38 <_init>
 8007924:	1b64      	subs	r4, r4, r5
 8007926:	10a4      	asrs	r4, r4, #2
 8007928:	2600      	movs	r6, #0
 800792a:	42a6      	cmp	r6, r4
 800792c:	d105      	bne.n	800793a <__libc_init_array+0x2e>
 800792e:	bd70      	pop	{r4, r5, r6, pc}
 8007930:	f855 3b04 	ldr.w	r3, [r5], #4
 8007934:	4798      	blx	r3
 8007936:	3601      	adds	r6, #1
 8007938:	e7ee      	b.n	8007918 <__libc_init_array+0xc>
 800793a:	f855 3b04 	ldr.w	r3, [r5], #4
 800793e:	4798      	blx	r3
 8007940:	3601      	adds	r6, #1
 8007942:	e7f2      	b.n	800792a <__libc_init_array+0x1e>
 8007944:	08008c94 	.word	0x08008c94
 8007948:	08008c94 	.word	0x08008c94
 800794c:	08008c94 	.word	0x08008c94
 8007950:	08008c98 	.word	0x08008c98

08007954 <malloc>:
 8007954:	4b02      	ldr	r3, [pc, #8]	; (8007960 <malloc+0xc>)
 8007956:	4601      	mov	r1, r0
 8007958:	6818      	ldr	r0, [r3, #0]
 800795a:	f000 b885 	b.w	8007a68 <_malloc_r>
 800795e:	bf00      	nop
 8007960:	20000288 	.word	0x20000288

08007964 <memcpy>:
 8007964:	440a      	add	r2, r1
 8007966:	4291      	cmp	r1, r2
 8007968:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800796c:	d100      	bne.n	8007970 <memcpy+0xc>
 800796e:	4770      	bx	lr
 8007970:	b510      	push	{r4, lr}
 8007972:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007976:	f803 4f01 	strb.w	r4, [r3, #1]!
 800797a:	4291      	cmp	r1, r2
 800797c:	d1f9      	bne.n	8007972 <memcpy+0xe>
 800797e:	bd10      	pop	{r4, pc}

08007980 <memset>:
 8007980:	4402      	add	r2, r0
 8007982:	4603      	mov	r3, r0
 8007984:	4293      	cmp	r3, r2
 8007986:	d100      	bne.n	800798a <memset+0xa>
 8007988:	4770      	bx	lr
 800798a:	f803 1b01 	strb.w	r1, [r3], #1
 800798e:	e7f9      	b.n	8007984 <memset+0x4>

08007990 <_free_r>:
 8007990:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007992:	2900      	cmp	r1, #0
 8007994:	d044      	beq.n	8007a20 <_free_r+0x90>
 8007996:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800799a:	9001      	str	r0, [sp, #4]
 800799c:	2b00      	cmp	r3, #0
 800799e:	f1a1 0404 	sub.w	r4, r1, #4
 80079a2:	bfb8      	it	lt
 80079a4:	18e4      	addlt	r4, r4, r3
 80079a6:	f000 f96d 	bl	8007c84 <__malloc_lock>
 80079aa:	4a1e      	ldr	r2, [pc, #120]	; (8007a24 <_free_r+0x94>)
 80079ac:	9801      	ldr	r0, [sp, #4]
 80079ae:	6813      	ldr	r3, [r2, #0]
 80079b0:	b933      	cbnz	r3, 80079c0 <_free_r+0x30>
 80079b2:	6063      	str	r3, [r4, #4]
 80079b4:	6014      	str	r4, [r2, #0]
 80079b6:	b003      	add	sp, #12
 80079b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80079bc:	f000 b968 	b.w	8007c90 <__malloc_unlock>
 80079c0:	42a3      	cmp	r3, r4
 80079c2:	d908      	bls.n	80079d6 <_free_r+0x46>
 80079c4:	6825      	ldr	r5, [r4, #0]
 80079c6:	1961      	adds	r1, r4, r5
 80079c8:	428b      	cmp	r3, r1
 80079ca:	bf01      	itttt	eq
 80079cc:	6819      	ldreq	r1, [r3, #0]
 80079ce:	685b      	ldreq	r3, [r3, #4]
 80079d0:	1949      	addeq	r1, r1, r5
 80079d2:	6021      	streq	r1, [r4, #0]
 80079d4:	e7ed      	b.n	80079b2 <_free_r+0x22>
 80079d6:	461a      	mov	r2, r3
 80079d8:	685b      	ldr	r3, [r3, #4]
 80079da:	b10b      	cbz	r3, 80079e0 <_free_r+0x50>
 80079dc:	42a3      	cmp	r3, r4
 80079de:	d9fa      	bls.n	80079d6 <_free_r+0x46>
 80079e0:	6811      	ldr	r1, [r2, #0]
 80079e2:	1855      	adds	r5, r2, r1
 80079e4:	42a5      	cmp	r5, r4
 80079e6:	d10b      	bne.n	8007a00 <_free_r+0x70>
 80079e8:	6824      	ldr	r4, [r4, #0]
 80079ea:	4421      	add	r1, r4
 80079ec:	1854      	adds	r4, r2, r1
 80079ee:	42a3      	cmp	r3, r4
 80079f0:	6011      	str	r1, [r2, #0]
 80079f2:	d1e0      	bne.n	80079b6 <_free_r+0x26>
 80079f4:	681c      	ldr	r4, [r3, #0]
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	6053      	str	r3, [r2, #4]
 80079fa:	4421      	add	r1, r4
 80079fc:	6011      	str	r1, [r2, #0]
 80079fe:	e7da      	b.n	80079b6 <_free_r+0x26>
 8007a00:	d902      	bls.n	8007a08 <_free_r+0x78>
 8007a02:	230c      	movs	r3, #12
 8007a04:	6003      	str	r3, [r0, #0]
 8007a06:	e7d6      	b.n	80079b6 <_free_r+0x26>
 8007a08:	6825      	ldr	r5, [r4, #0]
 8007a0a:	1961      	adds	r1, r4, r5
 8007a0c:	428b      	cmp	r3, r1
 8007a0e:	bf04      	itt	eq
 8007a10:	6819      	ldreq	r1, [r3, #0]
 8007a12:	685b      	ldreq	r3, [r3, #4]
 8007a14:	6063      	str	r3, [r4, #4]
 8007a16:	bf04      	itt	eq
 8007a18:	1949      	addeq	r1, r1, r5
 8007a1a:	6021      	streq	r1, [r4, #0]
 8007a1c:	6054      	str	r4, [r2, #4]
 8007a1e:	e7ca      	b.n	80079b6 <_free_r+0x26>
 8007a20:	b003      	add	sp, #12
 8007a22:	bd30      	pop	{r4, r5, pc}
 8007a24:	200029c4 	.word	0x200029c4

08007a28 <sbrk_aligned>:
 8007a28:	b570      	push	{r4, r5, r6, lr}
 8007a2a:	4e0e      	ldr	r6, [pc, #56]	; (8007a64 <sbrk_aligned+0x3c>)
 8007a2c:	460c      	mov	r4, r1
 8007a2e:	6831      	ldr	r1, [r6, #0]
 8007a30:	4605      	mov	r5, r0
 8007a32:	b911      	cbnz	r1, 8007a3a <sbrk_aligned+0x12>
 8007a34:	f000 f8ba 	bl	8007bac <_sbrk_r>
 8007a38:	6030      	str	r0, [r6, #0]
 8007a3a:	4621      	mov	r1, r4
 8007a3c:	4628      	mov	r0, r5
 8007a3e:	f000 f8b5 	bl	8007bac <_sbrk_r>
 8007a42:	1c43      	adds	r3, r0, #1
 8007a44:	d00a      	beq.n	8007a5c <sbrk_aligned+0x34>
 8007a46:	1cc4      	adds	r4, r0, #3
 8007a48:	f024 0403 	bic.w	r4, r4, #3
 8007a4c:	42a0      	cmp	r0, r4
 8007a4e:	d007      	beq.n	8007a60 <sbrk_aligned+0x38>
 8007a50:	1a21      	subs	r1, r4, r0
 8007a52:	4628      	mov	r0, r5
 8007a54:	f000 f8aa 	bl	8007bac <_sbrk_r>
 8007a58:	3001      	adds	r0, #1
 8007a5a:	d101      	bne.n	8007a60 <sbrk_aligned+0x38>
 8007a5c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007a60:	4620      	mov	r0, r4
 8007a62:	bd70      	pop	{r4, r5, r6, pc}
 8007a64:	200029c8 	.word	0x200029c8

08007a68 <_malloc_r>:
 8007a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a6c:	1ccd      	adds	r5, r1, #3
 8007a6e:	f025 0503 	bic.w	r5, r5, #3
 8007a72:	3508      	adds	r5, #8
 8007a74:	2d0c      	cmp	r5, #12
 8007a76:	bf38      	it	cc
 8007a78:	250c      	movcc	r5, #12
 8007a7a:	2d00      	cmp	r5, #0
 8007a7c:	4607      	mov	r7, r0
 8007a7e:	db01      	blt.n	8007a84 <_malloc_r+0x1c>
 8007a80:	42a9      	cmp	r1, r5
 8007a82:	d905      	bls.n	8007a90 <_malloc_r+0x28>
 8007a84:	230c      	movs	r3, #12
 8007a86:	603b      	str	r3, [r7, #0]
 8007a88:	2600      	movs	r6, #0
 8007a8a:	4630      	mov	r0, r6
 8007a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a90:	4e2e      	ldr	r6, [pc, #184]	; (8007b4c <_malloc_r+0xe4>)
 8007a92:	f000 f8f7 	bl	8007c84 <__malloc_lock>
 8007a96:	6833      	ldr	r3, [r6, #0]
 8007a98:	461c      	mov	r4, r3
 8007a9a:	bb34      	cbnz	r4, 8007aea <_malloc_r+0x82>
 8007a9c:	4629      	mov	r1, r5
 8007a9e:	4638      	mov	r0, r7
 8007aa0:	f7ff ffc2 	bl	8007a28 <sbrk_aligned>
 8007aa4:	1c43      	adds	r3, r0, #1
 8007aa6:	4604      	mov	r4, r0
 8007aa8:	d14d      	bne.n	8007b46 <_malloc_r+0xde>
 8007aaa:	6834      	ldr	r4, [r6, #0]
 8007aac:	4626      	mov	r6, r4
 8007aae:	2e00      	cmp	r6, #0
 8007ab0:	d140      	bne.n	8007b34 <_malloc_r+0xcc>
 8007ab2:	6823      	ldr	r3, [r4, #0]
 8007ab4:	4631      	mov	r1, r6
 8007ab6:	4638      	mov	r0, r7
 8007ab8:	eb04 0803 	add.w	r8, r4, r3
 8007abc:	f000 f876 	bl	8007bac <_sbrk_r>
 8007ac0:	4580      	cmp	r8, r0
 8007ac2:	d13a      	bne.n	8007b3a <_malloc_r+0xd2>
 8007ac4:	6821      	ldr	r1, [r4, #0]
 8007ac6:	3503      	adds	r5, #3
 8007ac8:	1a6d      	subs	r5, r5, r1
 8007aca:	f025 0503 	bic.w	r5, r5, #3
 8007ace:	3508      	adds	r5, #8
 8007ad0:	2d0c      	cmp	r5, #12
 8007ad2:	bf38      	it	cc
 8007ad4:	250c      	movcc	r5, #12
 8007ad6:	4629      	mov	r1, r5
 8007ad8:	4638      	mov	r0, r7
 8007ada:	f7ff ffa5 	bl	8007a28 <sbrk_aligned>
 8007ade:	3001      	adds	r0, #1
 8007ae0:	d02b      	beq.n	8007b3a <_malloc_r+0xd2>
 8007ae2:	6823      	ldr	r3, [r4, #0]
 8007ae4:	442b      	add	r3, r5
 8007ae6:	6023      	str	r3, [r4, #0]
 8007ae8:	e00e      	b.n	8007b08 <_malloc_r+0xa0>
 8007aea:	6822      	ldr	r2, [r4, #0]
 8007aec:	1b52      	subs	r2, r2, r5
 8007aee:	d41e      	bmi.n	8007b2e <_malloc_r+0xc6>
 8007af0:	2a0b      	cmp	r2, #11
 8007af2:	d916      	bls.n	8007b22 <_malloc_r+0xba>
 8007af4:	1961      	adds	r1, r4, r5
 8007af6:	42a3      	cmp	r3, r4
 8007af8:	6025      	str	r5, [r4, #0]
 8007afa:	bf18      	it	ne
 8007afc:	6059      	strne	r1, [r3, #4]
 8007afe:	6863      	ldr	r3, [r4, #4]
 8007b00:	bf08      	it	eq
 8007b02:	6031      	streq	r1, [r6, #0]
 8007b04:	5162      	str	r2, [r4, r5]
 8007b06:	604b      	str	r3, [r1, #4]
 8007b08:	4638      	mov	r0, r7
 8007b0a:	f104 060b 	add.w	r6, r4, #11
 8007b0e:	f000 f8bf 	bl	8007c90 <__malloc_unlock>
 8007b12:	f026 0607 	bic.w	r6, r6, #7
 8007b16:	1d23      	adds	r3, r4, #4
 8007b18:	1af2      	subs	r2, r6, r3
 8007b1a:	d0b6      	beq.n	8007a8a <_malloc_r+0x22>
 8007b1c:	1b9b      	subs	r3, r3, r6
 8007b1e:	50a3      	str	r3, [r4, r2]
 8007b20:	e7b3      	b.n	8007a8a <_malloc_r+0x22>
 8007b22:	6862      	ldr	r2, [r4, #4]
 8007b24:	42a3      	cmp	r3, r4
 8007b26:	bf0c      	ite	eq
 8007b28:	6032      	streq	r2, [r6, #0]
 8007b2a:	605a      	strne	r2, [r3, #4]
 8007b2c:	e7ec      	b.n	8007b08 <_malloc_r+0xa0>
 8007b2e:	4623      	mov	r3, r4
 8007b30:	6864      	ldr	r4, [r4, #4]
 8007b32:	e7b2      	b.n	8007a9a <_malloc_r+0x32>
 8007b34:	4634      	mov	r4, r6
 8007b36:	6876      	ldr	r6, [r6, #4]
 8007b38:	e7b9      	b.n	8007aae <_malloc_r+0x46>
 8007b3a:	230c      	movs	r3, #12
 8007b3c:	603b      	str	r3, [r7, #0]
 8007b3e:	4638      	mov	r0, r7
 8007b40:	f000 f8a6 	bl	8007c90 <__malloc_unlock>
 8007b44:	e7a1      	b.n	8007a8a <_malloc_r+0x22>
 8007b46:	6025      	str	r5, [r4, #0]
 8007b48:	e7de      	b.n	8007b08 <_malloc_r+0xa0>
 8007b4a:	bf00      	nop
 8007b4c:	200029c4 	.word	0x200029c4

08007b50 <srand>:
 8007b50:	b538      	push	{r3, r4, r5, lr}
 8007b52:	4b10      	ldr	r3, [pc, #64]	; (8007b94 <srand+0x44>)
 8007b54:	681d      	ldr	r5, [r3, #0]
 8007b56:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8007b58:	4604      	mov	r4, r0
 8007b5a:	b9b3      	cbnz	r3, 8007b8a <srand+0x3a>
 8007b5c:	2018      	movs	r0, #24
 8007b5e:	f7ff fef9 	bl	8007954 <malloc>
 8007b62:	4602      	mov	r2, r0
 8007b64:	63a8      	str	r0, [r5, #56]	; 0x38
 8007b66:	b920      	cbnz	r0, 8007b72 <srand+0x22>
 8007b68:	4b0b      	ldr	r3, [pc, #44]	; (8007b98 <srand+0x48>)
 8007b6a:	480c      	ldr	r0, [pc, #48]	; (8007b9c <srand+0x4c>)
 8007b6c:	2142      	movs	r1, #66	; 0x42
 8007b6e:	f000 f847 	bl	8007c00 <__assert_func>
 8007b72:	490b      	ldr	r1, [pc, #44]	; (8007ba0 <srand+0x50>)
 8007b74:	4b0b      	ldr	r3, [pc, #44]	; (8007ba4 <srand+0x54>)
 8007b76:	e9c0 1300 	strd	r1, r3, [r0]
 8007b7a:	4b0b      	ldr	r3, [pc, #44]	; (8007ba8 <srand+0x58>)
 8007b7c:	6083      	str	r3, [r0, #8]
 8007b7e:	230b      	movs	r3, #11
 8007b80:	8183      	strh	r3, [r0, #12]
 8007b82:	2100      	movs	r1, #0
 8007b84:	2001      	movs	r0, #1
 8007b86:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8007b8a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	611c      	str	r4, [r3, #16]
 8007b90:	615a      	str	r2, [r3, #20]
 8007b92:	bd38      	pop	{r3, r4, r5, pc}
 8007b94:	20000288 	.word	0x20000288
 8007b98:	08008b50 	.word	0x08008b50
 8007b9c:	08008b67 	.word	0x08008b67
 8007ba0:	abcd330e 	.word	0xabcd330e
 8007ba4:	e66d1234 	.word	0xe66d1234
 8007ba8:	0005deec 	.word	0x0005deec

08007bac <_sbrk_r>:
 8007bac:	b538      	push	{r3, r4, r5, lr}
 8007bae:	4d06      	ldr	r5, [pc, #24]	; (8007bc8 <_sbrk_r+0x1c>)
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	4604      	mov	r4, r0
 8007bb4:	4608      	mov	r0, r1
 8007bb6:	602b      	str	r3, [r5, #0]
 8007bb8:	f7ff fe08 	bl	80077cc <_sbrk>
 8007bbc:	1c43      	adds	r3, r0, #1
 8007bbe:	d102      	bne.n	8007bc6 <_sbrk_r+0x1a>
 8007bc0:	682b      	ldr	r3, [r5, #0]
 8007bc2:	b103      	cbz	r3, 8007bc6 <_sbrk_r+0x1a>
 8007bc4:	6023      	str	r3, [r4, #0]
 8007bc6:	bd38      	pop	{r3, r4, r5, pc}
 8007bc8:	200029cc 	.word	0x200029cc

08007bcc <time>:
 8007bcc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007bce:	4b0b      	ldr	r3, [pc, #44]	; (8007bfc <time+0x30>)
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	4669      	mov	r1, sp
 8007bd4:	4604      	mov	r4, r0
 8007bd6:	6818      	ldr	r0, [r3, #0]
 8007bd8:	f000 f842 	bl	8007c60 <_gettimeofday_r>
 8007bdc:	2800      	cmp	r0, #0
 8007bde:	bfbe      	ittt	lt
 8007be0:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
 8007be4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007be8:	e9cd 2300 	strdlt	r2, r3, [sp]
 8007bec:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007bf0:	b10c      	cbz	r4, 8007bf6 <time+0x2a>
 8007bf2:	e9c4 0100 	strd	r0, r1, [r4]
 8007bf6:	b004      	add	sp, #16
 8007bf8:	bd10      	pop	{r4, pc}
 8007bfa:	bf00      	nop
 8007bfc:	20000288 	.word	0x20000288

08007c00 <__assert_func>:
 8007c00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007c02:	4614      	mov	r4, r2
 8007c04:	461a      	mov	r2, r3
 8007c06:	4b09      	ldr	r3, [pc, #36]	; (8007c2c <__assert_func+0x2c>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4605      	mov	r5, r0
 8007c0c:	68d8      	ldr	r0, [r3, #12]
 8007c0e:	b14c      	cbz	r4, 8007c24 <__assert_func+0x24>
 8007c10:	4b07      	ldr	r3, [pc, #28]	; (8007c30 <__assert_func+0x30>)
 8007c12:	9100      	str	r1, [sp, #0]
 8007c14:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007c18:	4906      	ldr	r1, [pc, #24]	; (8007c34 <__assert_func+0x34>)
 8007c1a:	462b      	mov	r3, r5
 8007c1c:	f000 f80e 	bl	8007c3c <fiprintf>
 8007c20:	f000 fbea 	bl	80083f8 <abort>
 8007c24:	4b04      	ldr	r3, [pc, #16]	; (8007c38 <__assert_func+0x38>)
 8007c26:	461c      	mov	r4, r3
 8007c28:	e7f3      	b.n	8007c12 <__assert_func+0x12>
 8007c2a:	bf00      	nop
 8007c2c:	20000288 	.word	0x20000288
 8007c30:	08008bc2 	.word	0x08008bc2
 8007c34:	08008bcf 	.word	0x08008bcf
 8007c38:	08008bfd 	.word	0x08008bfd

08007c3c <fiprintf>:
 8007c3c:	b40e      	push	{r1, r2, r3}
 8007c3e:	b503      	push	{r0, r1, lr}
 8007c40:	4601      	mov	r1, r0
 8007c42:	ab03      	add	r3, sp, #12
 8007c44:	4805      	ldr	r0, [pc, #20]	; (8007c5c <fiprintf+0x20>)
 8007c46:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c4a:	6800      	ldr	r0, [r0, #0]
 8007c4c:	9301      	str	r3, [sp, #4]
 8007c4e:	f000 f84f 	bl	8007cf0 <_vfiprintf_r>
 8007c52:	b002      	add	sp, #8
 8007c54:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c58:	b003      	add	sp, #12
 8007c5a:	4770      	bx	lr
 8007c5c:	20000288 	.word	0x20000288

08007c60 <_gettimeofday_r>:
 8007c60:	b538      	push	{r3, r4, r5, lr}
 8007c62:	4d07      	ldr	r5, [pc, #28]	; (8007c80 <_gettimeofday_r+0x20>)
 8007c64:	2300      	movs	r3, #0
 8007c66:	4604      	mov	r4, r0
 8007c68:	4608      	mov	r0, r1
 8007c6a:	4611      	mov	r1, r2
 8007c6c:	602b      	str	r3, [r5, #0]
 8007c6e:	f000 fedb 	bl	8008a28 <_gettimeofday>
 8007c72:	1c43      	adds	r3, r0, #1
 8007c74:	d102      	bne.n	8007c7c <_gettimeofday_r+0x1c>
 8007c76:	682b      	ldr	r3, [r5, #0]
 8007c78:	b103      	cbz	r3, 8007c7c <_gettimeofday_r+0x1c>
 8007c7a:	6023      	str	r3, [r4, #0]
 8007c7c:	bd38      	pop	{r3, r4, r5, pc}
 8007c7e:	bf00      	nop
 8007c80:	200029cc 	.word	0x200029cc

08007c84 <__malloc_lock>:
 8007c84:	4801      	ldr	r0, [pc, #4]	; (8007c8c <__malloc_lock+0x8>)
 8007c86:	f000 bd77 	b.w	8008778 <__retarget_lock_acquire_recursive>
 8007c8a:	bf00      	nop
 8007c8c:	200029d0 	.word	0x200029d0

08007c90 <__malloc_unlock>:
 8007c90:	4801      	ldr	r0, [pc, #4]	; (8007c98 <__malloc_unlock+0x8>)
 8007c92:	f000 bd72 	b.w	800877a <__retarget_lock_release_recursive>
 8007c96:	bf00      	nop
 8007c98:	200029d0 	.word	0x200029d0

08007c9c <__sfputc_r>:
 8007c9c:	6893      	ldr	r3, [r2, #8]
 8007c9e:	3b01      	subs	r3, #1
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	b410      	push	{r4}
 8007ca4:	6093      	str	r3, [r2, #8]
 8007ca6:	da08      	bge.n	8007cba <__sfputc_r+0x1e>
 8007ca8:	6994      	ldr	r4, [r2, #24]
 8007caa:	42a3      	cmp	r3, r4
 8007cac:	db01      	blt.n	8007cb2 <__sfputc_r+0x16>
 8007cae:	290a      	cmp	r1, #10
 8007cb0:	d103      	bne.n	8007cba <__sfputc_r+0x1e>
 8007cb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007cb6:	f000 badf 	b.w	8008278 <__swbuf_r>
 8007cba:	6813      	ldr	r3, [r2, #0]
 8007cbc:	1c58      	adds	r0, r3, #1
 8007cbe:	6010      	str	r0, [r2, #0]
 8007cc0:	7019      	strb	r1, [r3, #0]
 8007cc2:	4608      	mov	r0, r1
 8007cc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007cc8:	4770      	bx	lr

08007cca <__sfputs_r>:
 8007cca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ccc:	4606      	mov	r6, r0
 8007cce:	460f      	mov	r7, r1
 8007cd0:	4614      	mov	r4, r2
 8007cd2:	18d5      	adds	r5, r2, r3
 8007cd4:	42ac      	cmp	r4, r5
 8007cd6:	d101      	bne.n	8007cdc <__sfputs_r+0x12>
 8007cd8:	2000      	movs	r0, #0
 8007cda:	e007      	b.n	8007cec <__sfputs_r+0x22>
 8007cdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ce0:	463a      	mov	r2, r7
 8007ce2:	4630      	mov	r0, r6
 8007ce4:	f7ff ffda 	bl	8007c9c <__sfputc_r>
 8007ce8:	1c43      	adds	r3, r0, #1
 8007cea:	d1f3      	bne.n	8007cd4 <__sfputs_r+0xa>
 8007cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007cf0 <_vfiprintf_r>:
 8007cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cf4:	460d      	mov	r5, r1
 8007cf6:	b09d      	sub	sp, #116	; 0x74
 8007cf8:	4614      	mov	r4, r2
 8007cfa:	4698      	mov	r8, r3
 8007cfc:	4606      	mov	r6, r0
 8007cfe:	b118      	cbz	r0, 8007d08 <_vfiprintf_r+0x18>
 8007d00:	6983      	ldr	r3, [r0, #24]
 8007d02:	b90b      	cbnz	r3, 8007d08 <_vfiprintf_r+0x18>
 8007d04:	f000 fc9a 	bl	800863c <__sinit>
 8007d08:	4b89      	ldr	r3, [pc, #548]	; (8007f30 <_vfiprintf_r+0x240>)
 8007d0a:	429d      	cmp	r5, r3
 8007d0c:	d11b      	bne.n	8007d46 <_vfiprintf_r+0x56>
 8007d0e:	6875      	ldr	r5, [r6, #4]
 8007d10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d12:	07d9      	lsls	r1, r3, #31
 8007d14:	d405      	bmi.n	8007d22 <_vfiprintf_r+0x32>
 8007d16:	89ab      	ldrh	r3, [r5, #12]
 8007d18:	059a      	lsls	r2, r3, #22
 8007d1a:	d402      	bmi.n	8007d22 <_vfiprintf_r+0x32>
 8007d1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d1e:	f000 fd2b 	bl	8008778 <__retarget_lock_acquire_recursive>
 8007d22:	89ab      	ldrh	r3, [r5, #12]
 8007d24:	071b      	lsls	r3, r3, #28
 8007d26:	d501      	bpl.n	8007d2c <_vfiprintf_r+0x3c>
 8007d28:	692b      	ldr	r3, [r5, #16]
 8007d2a:	b9eb      	cbnz	r3, 8007d68 <_vfiprintf_r+0x78>
 8007d2c:	4629      	mov	r1, r5
 8007d2e:	4630      	mov	r0, r6
 8007d30:	f000 faf4 	bl	800831c <__swsetup_r>
 8007d34:	b1c0      	cbz	r0, 8007d68 <_vfiprintf_r+0x78>
 8007d36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d38:	07dc      	lsls	r4, r3, #31
 8007d3a:	d50e      	bpl.n	8007d5a <_vfiprintf_r+0x6a>
 8007d3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d40:	b01d      	add	sp, #116	; 0x74
 8007d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d46:	4b7b      	ldr	r3, [pc, #492]	; (8007f34 <_vfiprintf_r+0x244>)
 8007d48:	429d      	cmp	r5, r3
 8007d4a:	d101      	bne.n	8007d50 <_vfiprintf_r+0x60>
 8007d4c:	68b5      	ldr	r5, [r6, #8]
 8007d4e:	e7df      	b.n	8007d10 <_vfiprintf_r+0x20>
 8007d50:	4b79      	ldr	r3, [pc, #484]	; (8007f38 <_vfiprintf_r+0x248>)
 8007d52:	429d      	cmp	r5, r3
 8007d54:	bf08      	it	eq
 8007d56:	68f5      	ldreq	r5, [r6, #12]
 8007d58:	e7da      	b.n	8007d10 <_vfiprintf_r+0x20>
 8007d5a:	89ab      	ldrh	r3, [r5, #12]
 8007d5c:	0598      	lsls	r0, r3, #22
 8007d5e:	d4ed      	bmi.n	8007d3c <_vfiprintf_r+0x4c>
 8007d60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d62:	f000 fd0a 	bl	800877a <__retarget_lock_release_recursive>
 8007d66:	e7e9      	b.n	8007d3c <_vfiprintf_r+0x4c>
 8007d68:	2300      	movs	r3, #0
 8007d6a:	9309      	str	r3, [sp, #36]	; 0x24
 8007d6c:	2320      	movs	r3, #32
 8007d6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d72:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d76:	2330      	movs	r3, #48	; 0x30
 8007d78:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007f3c <_vfiprintf_r+0x24c>
 8007d7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d80:	f04f 0901 	mov.w	r9, #1
 8007d84:	4623      	mov	r3, r4
 8007d86:	469a      	mov	sl, r3
 8007d88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d8c:	b10a      	cbz	r2, 8007d92 <_vfiprintf_r+0xa2>
 8007d8e:	2a25      	cmp	r2, #37	; 0x25
 8007d90:	d1f9      	bne.n	8007d86 <_vfiprintf_r+0x96>
 8007d92:	ebba 0b04 	subs.w	fp, sl, r4
 8007d96:	d00b      	beq.n	8007db0 <_vfiprintf_r+0xc0>
 8007d98:	465b      	mov	r3, fp
 8007d9a:	4622      	mov	r2, r4
 8007d9c:	4629      	mov	r1, r5
 8007d9e:	4630      	mov	r0, r6
 8007da0:	f7ff ff93 	bl	8007cca <__sfputs_r>
 8007da4:	3001      	adds	r0, #1
 8007da6:	f000 80aa 	beq.w	8007efe <_vfiprintf_r+0x20e>
 8007daa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007dac:	445a      	add	r2, fp
 8007dae:	9209      	str	r2, [sp, #36]	; 0x24
 8007db0:	f89a 3000 	ldrb.w	r3, [sl]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	f000 80a2 	beq.w	8007efe <_vfiprintf_r+0x20e>
 8007dba:	2300      	movs	r3, #0
 8007dbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007dc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007dc4:	f10a 0a01 	add.w	sl, sl, #1
 8007dc8:	9304      	str	r3, [sp, #16]
 8007dca:	9307      	str	r3, [sp, #28]
 8007dcc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007dd0:	931a      	str	r3, [sp, #104]	; 0x68
 8007dd2:	4654      	mov	r4, sl
 8007dd4:	2205      	movs	r2, #5
 8007dd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dda:	4858      	ldr	r0, [pc, #352]	; (8007f3c <_vfiprintf_r+0x24c>)
 8007ddc:	f7f8 f9f8 	bl	80001d0 <memchr>
 8007de0:	9a04      	ldr	r2, [sp, #16]
 8007de2:	b9d8      	cbnz	r0, 8007e1c <_vfiprintf_r+0x12c>
 8007de4:	06d1      	lsls	r1, r2, #27
 8007de6:	bf44      	itt	mi
 8007de8:	2320      	movmi	r3, #32
 8007dea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007dee:	0713      	lsls	r3, r2, #28
 8007df0:	bf44      	itt	mi
 8007df2:	232b      	movmi	r3, #43	; 0x2b
 8007df4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007df8:	f89a 3000 	ldrb.w	r3, [sl]
 8007dfc:	2b2a      	cmp	r3, #42	; 0x2a
 8007dfe:	d015      	beq.n	8007e2c <_vfiprintf_r+0x13c>
 8007e00:	9a07      	ldr	r2, [sp, #28]
 8007e02:	4654      	mov	r4, sl
 8007e04:	2000      	movs	r0, #0
 8007e06:	f04f 0c0a 	mov.w	ip, #10
 8007e0a:	4621      	mov	r1, r4
 8007e0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e10:	3b30      	subs	r3, #48	; 0x30
 8007e12:	2b09      	cmp	r3, #9
 8007e14:	d94e      	bls.n	8007eb4 <_vfiprintf_r+0x1c4>
 8007e16:	b1b0      	cbz	r0, 8007e46 <_vfiprintf_r+0x156>
 8007e18:	9207      	str	r2, [sp, #28]
 8007e1a:	e014      	b.n	8007e46 <_vfiprintf_r+0x156>
 8007e1c:	eba0 0308 	sub.w	r3, r0, r8
 8007e20:	fa09 f303 	lsl.w	r3, r9, r3
 8007e24:	4313      	orrs	r3, r2
 8007e26:	9304      	str	r3, [sp, #16]
 8007e28:	46a2      	mov	sl, r4
 8007e2a:	e7d2      	b.n	8007dd2 <_vfiprintf_r+0xe2>
 8007e2c:	9b03      	ldr	r3, [sp, #12]
 8007e2e:	1d19      	adds	r1, r3, #4
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	9103      	str	r1, [sp, #12]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	bfbb      	ittet	lt
 8007e38:	425b      	neglt	r3, r3
 8007e3a:	f042 0202 	orrlt.w	r2, r2, #2
 8007e3e:	9307      	strge	r3, [sp, #28]
 8007e40:	9307      	strlt	r3, [sp, #28]
 8007e42:	bfb8      	it	lt
 8007e44:	9204      	strlt	r2, [sp, #16]
 8007e46:	7823      	ldrb	r3, [r4, #0]
 8007e48:	2b2e      	cmp	r3, #46	; 0x2e
 8007e4a:	d10c      	bne.n	8007e66 <_vfiprintf_r+0x176>
 8007e4c:	7863      	ldrb	r3, [r4, #1]
 8007e4e:	2b2a      	cmp	r3, #42	; 0x2a
 8007e50:	d135      	bne.n	8007ebe <_vfiprintf_r+0x1ce>
 8007e52:	9b03      	ldr	r3, [sp, #12]
 8007e54:	1d1a      	adds	r2, r3, #4
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	9203      	str	r2, [sp, #12]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	bfb8      	it	lt
 8007e5e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007e62:	3402      	adds	r4, #2
 8007e64:	9305      	str	r3, [sp, #20]
 8007e66:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007f4c <_vfiprintf_r+0x25c>
 8007e6a:	7821      	ldrb	r1, [r4, #0]
 8007e6c:	2203      	movs	r2, #3
 8007e6e:	4650      	mov	r0, sl
 8007e70:	f7f8 f9ae 	bl	80001d0 <memchr>
 8007e74:	b140      	cbz	r0, 8007e88 <_vfiprintf_r+0x198>
 8007e76:	2340      	movs	r3, #64	; 0x40
 8007e78:	eba0 000a 	sub.w	r0, r0, sl
 8007e7c:	fa03 f000 	lsl.w	r0, r3, r0
 8007e80:	9b04      	ldr	r3, [sp, #16]
 8007e82:	4303      	orrs	r3, r0
 8007e84:	3401      	adds	r4, #1
 8007e86:	9304      	str	r3, [sp, #16]
 8007e88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e8c:	482c      	ldr	r0, [pc, #176]	; (8007f40 <_vfiprintf_r+0x250>)
 8007e8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e92:	2206      	movs	r2, #6
 8007e94:	f7f8 f99c 	bl	80001d0 <memchr>
 8007e98:	2800      	cmp	r0, #0
 8007e9a:	d03f      	beq.n	8007f1c <_vfiprintf_r+0x22c>
 8007e9c:	4b29      	ldr	r3, [pc, #164]	; (8007f44 <_vfiprintf_r+0x254>)
 8007e9e:	bb1b      	cbnz	r3, 8007ee8 <_vfiprintf_r+0x1f8>
 8007ea0:	9b03      	ldr	r3, [sp, #12]
 8007ea2:	3307      	adds	r3, #7
 8007ea4:	f023 0307 	bic.w	r3, r3, #7
 8007ea8:	3308      	adds	r3, #8
 8007eaa:	9303      	str	r3, [sp, #12]
 8007eac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007eae:	443b      	add	r3, r7
 8007eb0:	9309      	str	r3, [sp, #36]	; 0x24
 8007eb2:	e767      	b.n	8007d84 <_vfiprintf_r+0x94>
 8007eb4:	fb0c 3202 	mla	r2, ip, r2, r3
 8007eb8:	460c      	mov	r4, r1
 8007eba:	2001      	movs	r0, #1
 8007ebc:	e7a5      	b.n	8007e0a <_vfiprintf_r+0x11a>
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	3401      	adds	r4, #1
 8007ec2:	9305      	str	r3, [sp, #20]
 8007ec4:	4619      	mov	r1, r3
 8007ec6:	f04f 0c0a 	mov.w	ip, #10
 8007eca:	4620      	mov	r0, r4
 8007ecc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ed0:	3a30      	subs	r2, #48	; 0x30
 8007ed2:	2a09      	cmp	r2, #9
 8007ed4:	d903      	bls.n	8007ede <_vfiprintf_r+0x1ee>
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d0c5      	beq.n	8007e66 <_vfiprintf_r+0x176>
 8007eda:	9105      	str	r1, [sp, #20]
 8007edc:	e7c3      	b.n	8007e66 <_vfiprintf_r+0x176>
 8007ede:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ee2:	4604      	mov	r4, r0
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	e7f0      	b.n	8007eca <_vfiprintf_r+0x1da>
 8007ee8:	ab03      	add	r3, sp, #12
 8007eea:	9300      	str	r3, [sp, #0]
 8007eec:	462a      	mov	r2, r5
 8007eee:	4b16      	ldr	r3, [pc, #88]	; (8007f48 <_vfiprintf_r+0x258>)
 8007ef0:	a904      	add	r1, sp, #16
 8007ef2:	4630      	mov	r0, r6
 8007ef4:	f3af 8000 	nop.w
 8007ef8:	4607      	mov	r7, r0
 8007efa:	1c78      	adds	r0, r7, #1
 8007efc:	d1d6      	bne.n	8007eac <_vfiprintf_r+0x1bc>
 8007efe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f00:	07d9      	lsls	r1, r3, #31
 8007f02:	d405      	bmi.n	8007f10 <_vfiprintf_r+0x220>
 8007f04:	89ab      	ldrh	r3, [r5, #12]
 8007f06:	059a      	lsls	r2, r3, #22
 8007f08:	d402      	bmi.n	8007f10 <_vfiprintf_r+0x220>
 8007f0a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f0c:	f000 fc35 	bl	800877a <__retarget_lock_release_recursive>
 8007f10:	89ab      	ldrh	r3, [r5, #12]
 8007f12:	065b      	lsls	r3, r3, #25
 8007f14:	f53f af12 	bmi.w	8007d3c <_vfiprintf_r+0x4c>
 8007f18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f1a:	e711      	b.n	8007d40 <_vfiprintf_r+0x50>
 8007f1c:	ab03      	add	r3, sp, #12
 8007f1e:	9300      	str	r3, [sp, #0]
 8007f20:	462a      	mov	r2, r5
 8007f22:	4b09      	ldr	r3, [pc, #36]	; (8007f48 <_vfiprintf_r+0x258>)
 8007f24:	a904      	add	r1, sp, #16
 8007f26:	4630      	mov	r0, r6
 8007f28:	f000 f880 	bl	800802c <_printf_i>
 8007f2c:	e7e4      	b.n	8007ef8 <_vfiprintf_r+0x208>
 8007f2e:	bf00      	nop
 8007f30:	08008c54 	.word	0x08008c54
 8007f34:	08008c74 	.word	0x08008c74
 8007f38:	08008c34 	.word	0x08008c34
 8007f3c:	08008bfe 	.word	0x08008bfe
 8007f40:	08008c08 	.word	0x08008c08
 8007f44:	00000000 	.word	0x00000000
 8007f48:	08007ccb 	.word	0x08007ccb
 8007f4c:	08008c04 	.word	0x08008c04

08007f50 <_printf_common>:
 8007f50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f54:	4616      	mov	r6, r2
 8007f56:	4699      	mov	r9, r3
 8007f58:	688a      	ldr	r2, [r1, #8]
 8007f5a:	690b      	ldr	r3, [r1, #16]
 8007f5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007f60:	4293      	cmp	r3, r2
 8007f62:	bfb8      	it	lt
 8007f64:	4613      	movlt	r3, r2
 8007f66:	6033      	str	r3, [r6, #0]
 8007f68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007f6c:	4607      	mov	r7, r0
 8007f6e:	460c      	mov	r4, r1
 8007f70:	b10a      	cbz	r2, 8007f76 <_printf_common+0x26>
 8007f72:	3301      	adds	r3, #1
 8007f74:	6033      	str	r3, [r6, #0]
 8007f76:	6823      	ldr	r3, [r4, #0]
 8007f78:	0699      	lsls	r1, r3, #26
 8007f7a:	bf42      	ittt	mi
 8007f7c:	6833      	ldrmi	r3, [r6, #0]
 8007f7e:	3302      	addmi	r3, #2
 8007f80:	6033      	strmi	r3, [r6, #0]
 8007f82:	6825      	ldr	r5, [r4, #0]
 8007f84:	f015 0506 	ands.w	r5, r5, #6
 8007f88:	d106      	bne.n	8007f98 <_printf_common+0x48>
 8007f8a:	f104 0a19 	add.w	sl, r4, #25
 8007f8e:	68e3      	ldr	r3, [r4, #12]
 8007f90:	6832      	ldr	r2, [r6, #0]
 8007f92:	1a9b      	subs	r3, r3, r2
 8007f94:	42ab      	cmp	r3, r5
 8007f96:	dc26      	bgt.n	8007fe6 <_printf_common+0x96>
 8007f98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007f9c:	1e13      	subs	r3, r2, #0
 8007f9e:	6822      	ldr	r2, [r4, #0]
 8007fa0:	bf18      	it	ne
 8007fa2:	2301      	movne	r3, #1
 8007fa4:	0692      	lsls	r2, r2, #26
 8007fa6:	d42b      	bmi.n	8008000 <_printf_common+0xb0>
 8007fa8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007fac:	4649      	mov	r1, r9
 8007fae:	4638      	mov	r0, r7
 8007fb0:	47c0      	blx	r8
 8007fb2:	3001      	adds	r0, #1
 8007fb4:	d01e      	beq.n	8007ff4 <_printf_common+0xa4>
 8007fb6:	6823      	ldr	r3, [r4, #0]
 8007fb8:	68e5      	ldr	r5, [r4, #12]
 8007fba:	6832      	ldr	r2, [r6, #0]
 8007fbc:	f003 0306 	and.w	r3, r3, #6
 8007fc0:	2b04      	cmp	r3, #4
 8007fc2:	bf08      	it	eq
 8007fc4:	1aad      	subeq	r5, r5, r2
 8007fc6:	68a3      	ldr	r3, [r4, #8]
 8007fc8:	6922      	ldr	r2, [r4, #16]
 8007fca:	bf0c      	ite	eq
 8007fcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007fd0:	2500      	movne	r5, #0
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	bfc4      	itt	gt
 8007fd6:	1a9b      	subgt	r3, r3, r2
 8007fd8:	18ed      	addgt	r5, r5, r3
 8007fda:	2600      	movs	r6, #0
 8007fdc:	341a      	adds	r4, #26
 8007fde:	42b5      	cmp	r5, r6
 8007fe0:	d11a      	bne.n	8008018 <_printf_common+0xc8>
 8007fe2:	2000      	movs	r0, #0
 8007fe4:	e008      	b.n	8007ff8 <_printf_common+0xa8>
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	4652      	mov	r2, sl
 8007fea:	4649      	mov	r1, r9
 8007fec:	4638      	mov	r0, r7
 8007fee:	47c0      	blx	r8
 8007ff0:	3001      	adds	r0, #1
 8007ff2:	d103      	bne.n	8007ffc <_printf_common+0xac>
 8007ff4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ffc:	3501      	adds	r5, #1
 8007ffe:	e7c6      	b.n	8007f8e <_printf_common+0x3e>
 8008000:	18e1      	adds	r1, r4, r3
 8008002:	1c5a      	adds	r2, r3, #1
 8008004:	2030      	movs	r0, #48	; 0x30
 8008006:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800800a:	4422      	add	r2, r4
 800800c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008010:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008014:	3302      	adds	r3, #2
 8008016:	e7c7      	b.n	8007fa8 <_printf_common+0x58>
 8008018:	2301      	movs	r3, #1
 800801a:	4622      	mov	r2, r4
 800801c:	4649      	mov	r1, r9
 800801e:	4638      	mov	r0, r7
 8008020:	47c0      	blx	r8
 8008022:	3001      	adds	r0, #1
 8008024:	d0e6      	beq.n	8007ff4 <_printf_common+0xa4>
 8008026:	3601      	adds	r6, #1
 8008028:	e7d9      	b.n	8007fde <_printf_common+0x8e>
	...

0800802c <_printf_i>:
 800802c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008030:	7e0f      	ldrb	r7, [r1, #24]
 8008032:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008034:	2f78      	cmp	r7, #120	; 0x78
 8008036:	4691      	mov	r9, r2
 8008038:	4680      	mov	r8, r0
 800803a:	460c      	mov	r4, r1
 800803c:	469a      	mov	sl, r3
 800803e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008042:	d807      	bhi.n	8008054 <_printf_i+0x28>
 8008044:	2f62      	cmp	r7, #98	; 0x62
 8008046:	d80a      	bhi.n	800805e <_printf_i+0x32>
 8008048:	2f00      	cmp	r7, #0
 800804a:	f000 80d8 	beq.w	80081fe <_printf_i+0x1d2>
 800804e:	2f58      	cmp	r7, #88	; 0x58
 8008050:	f000 80a3 	beq.w	800819a <_printf_i+0x16e>
 8008054:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008058:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800805c:	e03a      	b.n	80080d4 <_printf_i+0xa8>
 800805e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008062:	2b15      	cmp	r3, #21
 8008064:	d8f6      	bhi.n	8008054 <_printf_i+0x28>
 8008066:	a101      	add	r1, pc, #4	; (adr r1, 800806c <_printf_i+0x40>)
 8008068:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800806c:	080080c5 	.word	0x080080c5
 8008070:	080080d9 	.word	0x080080d9
 8008074:	08008055 	.word	0x08008055
 8008078:	08008055 	.word	0x08008055
 800807c:	08008055 	.word	0x08008055
 8008080:	08008055 	.word	0x08008055
 8008084:	080080d9 	.word	0x080080d9
 8008088:	08008055 	.word	0x08008055
 800808c:	08008055 	.word	0x08008055
 8008090:	08008055 	.word	0x08008055
 8008094:	08008055 	.word	0x08008055
 8008098:	080081e5 	.word	0x080081e5
 800809c:	08008109 	.word	0x08008109
 80080a0:	080081c7 	.word	0x080081c7
 80080a4:	08008055 	.word	0x08008055
 80080a8:	08008055 	.word	0x08008055
 80080ac:	08008207 	.word	0x08008207
 80080b0:	08008055 	.word	0x08008055
 80080b4:	08008109 	.word	0x08008109
 80080b8:	08008055 	.word	0x08008055
 80080bc:	08008055 	.word	0x08008055
 80080c0:	080081cf 	.word	0x080081cf
 80080c4:	682b      	ldr	r3, [r5, #0]
 80080c6:	1d1a      	adds	r2, r3, #4
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	602a      	str	r2, [r5, #0]
 80080cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80080d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80080d4:	2301      	movs	r3, #1
 80080d6:	e0a3      	b.n	8008220 <_printf_i+0x1f4>
 80080d8:	6820      	ldr	r0, [r4, #0]
 80080da:	6829      	ldr	r1, [r5, #0]
 80080dc:	0606      	lsls	r6, r0, #24
 80080de:	f101 0304 	add.w	r3, r1, #4
 80080e2:	d50a      	bpl.n	80080fa <_printf_i+0xce>
 80080e4:	680e      	ldr	r6, [r1, #0]
 80080e6:	602b      	str	r3, [r5, #0]
 80080e8:	2e00      	cmp	r6, #0
 80080ea:	da03      	bge.n	80080f4 <_printf_i+0xc8>
 80080ec:	232d      	movs	r3, #45	; 0x2d
 80080ee:	4276      	negs	r6, r6
 80080f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080f4:	485e      	ldr	r0, [pc, #376]	; (8008270 <_printf_i+0x244>)
 80080f6:	230a      	movs	r3, #10
 80080f8:	e019      	b.n	800812e <_printf_i+0x102>
 80080fa:	680e      	ldr	r6, [r1, #0]
 80080fc:	602b      	str	r3, [r5, #0]
 80080fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008102:	bf18      	it	ne
 8008104:	b236      	sxthne	r6, r6
 8008106:	e7ef      	b.n	80080e8 <_printf_i+0xbc>
 8008108:	682b      	ldr	r3, [r5, #0]
 800810a:	6820      	ldr	r0, [r4, #0]
 800810c:	1d19      	adds	r1, r3, #4
 800810e:	6029      	str	r1, [r5, #0]
 8008110:	0601      	lsls	r1, r0, #24
 8008112:	d501      	bpl.n	8008118 <_printf_i+0xec>
 8008114:	681e      	ldr	r6, [r3, #0]
 8008116:	e002      	b.n	800811e <_printf_i+0xf2>
 8008118:	0646      	lsls	r6, r0, #25
 800811a:	d5fb      	bpl.n	8008114 <_printf_i+0xe8>
 800811c:	881e      	ldrh	r6, [r3, #0]
 800811e:	4854      	ldr	r0, [pc, #336]	; (8008270 <_printf_i+0x244>)
 8008120:	2f6f      	cmp	r7, #111	; 0x6f
 8008122:	bf0c      	ite	eq
 8008124:	2308      	moveq	r3, #8
 8008126:	230a      	movne	r3, #10
 8008128:	2100      	movs	r1, #0
 800812a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800812e:	6865      	ldr	r5, [r4, #4]
 8008130:	60a5      	str	r5, [r4, #8]
 8008132:	2d00      	cmp	r5, #0
 8008134:	bfa2      	ittt	ge
 8008136:	6821      	ldrge	r1, [r4, #0]
 8008138:	f021 0104 	bicge.w	r1, r1, #4
 800813c:	6021      	strge	r1, [r4, #0]
 800813e:	b90e      	cbnz	r6, 8008144 <_printf_i+0x118>
 8008140:	2d00      	cmp	r5, #0
 8008142:	d04d      	beq.n	80081e0 <_printf_i+0x1b4>
 8008144:	4615      	mov	r5, r2
 8008146:	fbb6 f1f3 	udiv	r1, r6, r3
 800814a:	fb03 6711 	mls	r7, r3, r1, r6
 800814e:	5dc7      	ldrb	r7, [r0, r7]
 8008150:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008154:	4637      	mov	r7, r6
 8008156:	42bb      	cmp	r3, r7
 8008158:	460e      	mov	r6, r1
 800815a:	d9f4      	bls.n	8008146 <_printf_i+0x11a>
 800815c:	2b08      	cmp	r3, #8
 800815e:	d10b      	bne.n	8008178 <_printf_i+0x14c>
 8008160:	6823      	ldr	r3, [r4, #0]
 8008162:	07de      	lsls	r6, r3, #31
 8008164:	d508      	bpl.n	8008178 <_printf_i+0x14c>
 8008166:	6923      	ldr	r3, [r4, #16]
 8008168:	6861      	ldr	r1, [r4, #4]
 800816a:	4299      	cmp	r1, r3
 800816c:	bfde      	ittt	le
 800816e:	2330      	movle	r3, #48	; 0x30
 8008170:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008174:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008178:	1b52      	subs	r2, r2, r5
 800817a:	6122      	str	r2, [r4, #16]
 800817c:	f8cd a000 	str.w	sl, [sp]
 8008180:	464b      	mov	r3, r9
 8008182:	aa03      	add	r2, sp, #12
 8008184:	4621      	mov	r1, r4
 8008186:	4640      	mov	r0, r8
 8008188:	f7ff fee2 	bl	8007f50 <_printf_common>
 800818c:	3001      	adds	r0, #1
 800818e:	d14c      	bne.n	800822a <_printf_i+0x1fe>
 8008190:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008194:	b004      	add	sp, #16
 8008196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800819a:	4835      	ldr	r0, [pc, #212]	; (8008270 <_printf_i+0x244>)
 800819c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80081a0:	6829      	ldr	r1, [r5, #0]
 80081a2:	6823      	ldr	r3, [r4, #0]
 80081a4:	f851 6b04 	ldr.w	r6, [r1], #4
 80081a8:	6029      	str	r1, [r5, #0]
 80081aa:	061d      	lsls	r5, r3, #24
 80081ac:	d514      	bpl.n	80081d8 <_printf_i+0x1ac>
 80081ae:	07df      	lsls	r7, r3, #31
 80081b0:	bf44      	itt	mi
 80081b2:	f043 0320 	orrmi.w	r3, r3, #32
 80081b6:	6023      	strmi	r3, [r4, #0]
 80081b8:	b91e      	cbnz	r6, 80081c2 <_printf_i+0x196>
 80081ba:	6823      	ldr	r3, [r4, #0]
 80081bc:	f023 0320 	bic.w	r3, r3, #32
 80081c0:	6023      	str	r3, [r4, #0]
 80081c2:	2310      	movs	r3, #16
 80081c4:	e7b0      	b.n	8008128 <_printf_i+0xfc>
 80081c6:	6823      	ldr	r3, [r4, #0]
 80081c8:	f043 0320 	orr.w	r3, r3, #32
 80081cc:	6023      	str	r3, [r4, #0]
 80081ce:	2378      	movs	r3, #120	; 0x78
 80081d0:	4828      	ldr	r0, [pc, #160]	; (8008274 <_printf_i+0x248>)
 80081d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80081d6:	e7e3      	b.n	80081a0 <_printf_i+0x174>
 80081d8:	0659      	lsls	r1, r3, #25
 80081da:	bf48      	it	mi
 80081dc:	b2b6      	uxthmi	r6, r6
 80081de:	e7e6      	b.n	80081ae <_printf_i+0x182>
 80081e0:	4615      	mov	r5, r2
 80081e2:	e7bb      	b.n	800815c <_printf_i+0x130>
 80081e4:	682b      	ldr	r3, [r5, #0]
 80081e6:	6826      	ldr	r6, [r4, #0]
 80081e8:	6961      	ldr	r1, [r4, #20]
 80081ea:	1d18      	adds	r0, r3, #4
 80081ec:	6028      	str	r0, [r5, #0]
 80081ee:	0635      	lsls	r5, r6, #24
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	d501      	bpl.n	80081f8 <_printf_i+0x1cc>
 80081f4:	6019      	str	r1, [r3, #0]
 80081f6:	e002      	b.n	80081fe <_printf_i+0x1d2>
 80081f8:	0670      	lsls	r0, r6, #25
 80081fa:	d5fb      	bpl.n	80081f4 <_printf_i+0x1c8>
 80081fc:	8019      	strh	r1, [r3, #0]
 80081fe:	2300      	movs	r3, #0
 8008200:	6123      	str	r3, [r4, #16]
 8008202:	4615      	mov	r5, r2
 8008204:	e7ba      	b.n	800817c <_printf_i+0x150>
 8008206:	682b      	ldr	r3, [r5, #0]
 8008208:	1d1a      	adds	r2, r3, #4
 800820a:	602a      	str	r2, [r5, #0]
 800820c:	681d      	ldr	r5, [r3, #0]
 800820e:	6862      	ldr	r2, [r4, #4]
 8008210:	2100      	movs	r1, #0
 8008212:	4628      	mov	r0, r5
 8008214:	f7f7 ffdc 	bl	80001d0 <memchr>
 8008218:	b108      	cbz	r0, 800821e <_printf_i+0x1f2>
 800821a:	1b40      	subs	r0, r0, r5
 800821c:	6060      	str	r0, [r4, #4]
 800821e:	6863      	ldr	r3, [r4, #4]
 8008220:	6123      	str	r3, [r4, #16]
 8008222:	2300      	movs	r3, #0
 8008224:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008228:	e7a8      	b.n	800817c <_printf_i+0x150>
 800822a:	6923      	ldr	r3, [r4, #16]
 800822c:	462a      	mov	r2, r5
 800822e:	4649      	mov	r1, r9
 8008230:	4640      	mov	r0, r8
 8008232:	47d0      	blx	sl
 8008234:	3001      	adds	r0, #1
 8008236:	d0ab      	beq.n	8008190 <_printf_i+0x164>
 8008238:	6823      	ldr	r3, [r4, #0]
 800823a:	079b      	lsls	r3, r3, #30
 800823c:	d413      	bmi.n	8008266 <_printf_i+0x23a>
 800823e:	68e0      	ldr	r0, [r4, #12]
 8008240:	9b03      	ldr	r3, [sp, #12]
 8008242:	4298      	cmp	r0, r3
 8008244:	bfb8      	it	lt
 8008246:	4618      	movlt	r0, r3
 8008248:	e7a4      	b.n	8008194 <_printf_i+0x168>
 800824a:	2301      	movs	r3, #1
 800824c:	4632      	mov	r2, r6
 800824e:	4649      	mov	r1, r9
 8008250:	4640      	mov	r0, r8
 8008252:	47d0      	blx	sl
 8008254:	3001      	adds	r0, #1
 8008256:	d09b      	beq.n	8008190 <_printf_i+0x164>
 8008258:	3501      	adds	r5, #1
 800825a:	68e3      	ldr	r3, [r4, #12]
 800825c:	9903      	ldr	r1, [sp, #12]
 800825e:	1a5b      	subs	r3, r3, r1
 8008260:	42ab      	cmp	r3, r5
 8008262:	dcf2      	bgt.n	800824a <_printf_i+0x21e>
 8008264:	e7eb      	b.n	800823e <_printf_i+0x212>
 8008266:	2500      	movs	r5, #0
 8008268:	f104 0619 	add.w	r6, r4, #25
 800826c:	e7f5      	b.n	800825a <_printf_i+0x22e>
 800826e:	bf00      	nop
 8008270:	08008c0f 	.word	0x08008c0f
 8008274:	08008c20 	.word	0x08008c20

08008278 <__swbuf_r>:
 8008278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800827a:	460e      	mov	r6, r1
 800827c:	4614      	mov	r4, r2
 800827e:	4605      	mov	r5, r0
 8008280:	b118      	cbz	r0, 800828a <__swbuf_r+0x12>
 8008282:	6983      	ldr	r3, [r0, #24]
 8008284:	b90b      	cbnz	r3, 800828a <__swbuf_r+0x12>
 8008286:	f000 f9d9 	bl	800863c <__sinit>
 800828a:	4b21      	ldr	r3, [pc, #132]	; (8008310 <__swbuf_r+0x98>)
 800828c:	429c      	cmp	r4, r3
 800828e:	d12b      	bne.n	80082e8 <__swbuf_r+0x70>
 8008290:	686c      	ldr	r4, [r5, #4]
 8008292:	69a3      	ldr	r3, [r4, #24]
 8008294:	60a3      	str	r3, [r4, #8]
 8008296:	89a3      	ldrh	r3, [r4, #12]
 8008298:	071a      	lsls	r2, r3, #28
 800829a:	d52f      	bpl.n	80082fc <__swbuf_r+0x84>
 800829c:	6923      	ldr	r3, [r4, #16]
 800829e:	b36b      	cbz	r3, 80082fc <__swbuf_r+0x84>
 80082a0:	6923      	ldr	r3, [r4, #16]
 80082a2:	6820      	ldr	r0, [r4, #0]
 80082a4:	1ac0      	subs	r0, r0, r3
 80082a6:	6963      	ldr	r3, [r4, #20]
 80082a8:	b2f6      	uxtb	r6, r6
 80082aa:	4283      	cmp	r3, r0
 80082ac:	4637      	mov	r7, r6
 80082ae:	dc04      	bgt.n	80082ba <__swbuf_r+0x42>
 80082b0:	4621      	mov	r1, r4
 80082b2:	4628      	mov	r0, r5
 80082b4:	f000 f92e 	bl	8008514 <_fflush_r>
 80082b8:	bb30      	cbnz	r0, 8008308 <__swbuf_r+0x90>
 80082ba:	68a3      	ldr	r3, [r4, #8]
 80082bc:	3b01      	subs	r3, #1
 80082be:	60a3      	str	r3, [r4, #8]
 80082c0:	6823      	ldr	r3, [r4, #0]
 80082c2:	1c5a      	adds	r2, r3, #1
 80082c4:	6022      	str	r2, [r4, #0]
 80082c6:	701e      	strb	r6, [r3, #0]
 80082c8:	6963      	ldr	r3, [r4, #20]
 80082ca:	3001      	adds	r0, #1
 80082cc:	4283      	cmp	r3, r0
 80082ce:	d004      	beq.n	80082da <__swbuf_r+0x62>
 80082d0:	89a3      	ldrh	r3, [r4, #12]
 80082d2:	07db      	lsls	r3, r3, #31
 80082d4:	d506      	bpl.n	80082e4 <__swbuf_r+0x6c>
 80082d6:	2e0a      	cmp	r6, #10
 80082d8:	d104      	bne.n	80082e4 <__swbuf_r+0x6c>
 80082da:	4621      	mov	r1, r4
 80082dc:	4628      	mov	r0, r5
 80082de:	f000 f919 	bl	8008514 <_fflush_r>
 80082e2:	b988      	cbnz	r0, 8008308 <__swbuf_r+0x90>
 80082e4:	4638      	mov	r0, r7
 80082e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082e8:	4b0a      	ldr	r3, [pc, #40]	; (8008314 <__swbuf_r+0x9c>)
 80082ea:	429c      	cmp	r4, r3
 80082ec:	d101      	bne.n	80082f2 <__swbuf_r+0x7a>
 80082ee:	68ac      	ldr	r4, [r5, #8]
 80082f0:	e7cf      	b.n	8008292 <__swbuf_r+0x1a>
 80082f2:	4b09      	ldr	r3, [pc, #36]	; (8008318 <__swbuf_r+0xa0>)
 80082f4:	429c      	cmp	r4, r3
 80082f6:	bf08      	it	eq
 80082f8:	68ec      	ldreq	r4, [r5, #12]
 80082fa:	e7ca      	b.n	8008292 <__swbuf_r+0x1a>
 80082fc:	4621      	mov	r1, r4
 80082fe:	4628      	mov	r0, r5
 8008300:	f000 f80c 	bl	800831c <__swsetup_r>
 8008304:	2800      	cmp	r0, #0
 8008306:	d0cb      	beq.n	80082a0 <__swbuf_r+0x28>
 8008308:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800830c:	e7ea      	b.n	80082e4 <__swbuf_r+0x6c>
 800830e:	bf00      	nop
 8008310:	08008c54 	.word	0x08008c54
 8008314:	08008c74 	.word	0x08008c74
 8008318:	08008c34 	.word	0x08008c34

0800831c <__swsetup_r>:
 800831c:	4b32      	ldr	r3, [pc, #200]	; (80083e8 <__swsetup_r+0xcc>)
 800831e:	b570      	push	{r4, r5, r6, lr}
 8008320:	681d      	ldr	r5, [r3, #0]
 8008322:	4606      	mov	r6, r0
 8008324:	460c      	mov	r4, r1
 8008326:	b125      	cbz	r5, 8008332 <__swsetup_r+0x16>
 8008328:	69ab      	ldr	r3, [r5, #24]
 800832a:	b913      	cbnz	r3, 8008332 <__swsetup_r+0x16>
 800832c:	4628      	mov	r0, r5
 800832e:	f000 f985 	bl	800863c <__sinit>
 8008332:	4b2e      	ldr	r3, [pc, #184]	; (80083ec <__swsetup_r+0xd0>)
 8008334:	429c      	cmp	r4, r3
 8008336:	d10f      	bne.n	8008358 <__swsetup_r+0x3c>
 8008338:	686c      	ldr	r4, [r5, #4]
 800833a:	89a3      	ldrh	r3, [r4, #12]
 800833c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008340:	0719      	lsls	r1, r3, #28
 8008342:	d42c      	bmi.n	800839e <__swsetup_r+0x82>
 8008344:	06dd      	lsls	r5, r3, #27
 8008346:	d411      	bmi.n	800836c <__swsetup_r+0x50>
 8008348:	2309      	movs	r3, #9
 800834a:	6033      	str	r3, [r6, #0]
 800834c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008350:	81a3      	strh	r3, [r4, #12]
 8008352:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008356:	e03e      	b.n	80083d6 <__swsetup_r+0xba>
 8008358:	4b25      	ldr	r3, [pc, #148]	; (80083f0 <__swsetup_r+0xd4>)
 800835a:	429c      	cmp	r4, r3
 800835c:	d101      	bne.n	8008362 <__swsetup_r+0x46>
 800835e:	68ac      	ldr	r4, [r5, #8]
 8008360:	e7eb      	b.n	800833a <__swsetup_r+0x1e>
 8008362:	4b24      	ldr	r3, [pc, #144]	; (80083f4 <__swsetup_r+0xd8>)
 8008364:	429c      	cmp	r4, r3
 8008366:	bf08      	it	eq
 8008368:	68ec      	ldreq	r4, [r5, #12]
 800836a:	e7e6      	b.n	800833a <__swsetup_r+0x1e>
 800836c:	0758      	lsls	r0, r3, #29
 800836e:	d512      	bpl.n	8008396 <__swsetup_r+0x7a>
 8008370:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008372:	b141      	cbz	r1, 8008386 <__swsetup_r+0x6a>
 8008374:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008378:	4299      	cmp	r1, r3
 800837a:	d002      	beq.n	8008382 <__swsetup_r+0x66>
 800837c:	4630      	mov	r0, r6
 800837e:	f7ff fb07 	bl	8007990 <_free_r>
 8008382:	2300      	movs	r3, #0
 8008384:	6363      	str	r3, [r4, #52]	; 0x34
 8008386:	89a3      	ldrh	r3, [r4, #12]
 8008388:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800838c:	81a3      	strh	r3, [r4, #12]
 800838e:	2300      	movs	r3, #0
 8008390:	6063      	str	r3, [r4, #4]
 8008392:	6923      	ldr	r3, [r4, #16]
 8008394:	6023      	str	r3, [r4, #0]
 8008396:	89a3      	ldrh	r3, [r4, #12]
 8008398:	f043 0308 	orr.w	r3, r3, #8
 800839c:	81a3      	strh	r3, [r4, #12]
 800839e:	6923      	ldr	r3, [r4, #16]
 80083a0:	b94b      	cbnz	r3, 80083b6 <__swsetup_r+0x9a>
 80083a2:	89a3      	ldrh	r3, [r4, #12]
 80083a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80083a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083ac:	d003      	beq.n	80083b6 <__swsetup_r+0x9a>
 80083ae:	4621      	mov	r1, r4
 80083b0:	4630      	mov	r0, r6
 80083b2:	f000 fa09 	bl	80087c8 <__smakebuf_r>
 80083b6:	89a0      	ldrh	r0, [r4, #12]
 80083b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80083bc:	f010 0301 	ands.w	r3, r0, #1
 80083c0:	d00a      	beq.n	80083d8 <__swsetup_r+0xbc>
 80083c2:	2300      	movs	r3, #0
 80083c4:	60a3      	str	r3, [r4, #8]
 80083c6:	6963      	ldr	r3, [r4, #20]
 80083c8:	425b      	negs	r3, r3
 80083ca:	61a3      	str	r3, [r4, #24]
 80083cc:	6923      	ldr	r3, [r4, #16]
 80083ce:	b943      	cbnz	r3, 80083e2 <__swsetup_r+0xc6>
 80083d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80083d4:	d1ba      	bne.n	800834c <__swsetup_r+0x30>
 80083d6:	bd70      	pop	{r4, r5, r6, pc}
 80083d8:	0781      	lsls	r1, r0, #30
 80083da:	bf58      	it	pl
 80083dc:	6963      	ldrpl	r3, [r4, #20]
 80083de:	60a3      	str	r3, [r4, #8]
 80083e0:	e7f4      	b.n	80083cc <__swsetup_r+0xb0>
 80083e2:	2000      	movs	r0, #0
 80083e4:	e7f7      	b.n	80083d6 <__swsetup_r+0xba>
 80083e6:	bf00      	nop
 80083e8:	20000288 	.word	0x20000288
 80083ec:	08008c54 	.word	0x08008c54
 80083f0:	08008c74 	.word	0x08008c74
 80083f4:	08008c34 	.word	0x08008c34

080083f8 <abort>:
 80083f8:	b508      	push	{r3, lr}
 80083fa:	2006      	movs	r0, #6
 80083fc:	f000 fa4c 	bl	8008898 <raise>
 8008400:	2001      	movs	r0, #1
 8008402:	f7ff f96b 	bl	80076dc <_exit>
	...

08008408 <__sflush_r>:
 8008408:	898a      	ldrh	r2, [r1, #12]
 800840a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800840e:	4605      	mov	r5, r0
 8008410:	0710      	lsls	r0, r2, #28
 8008412:	460c      	mov	r4, r1
 8008414:	d458      	bmi.n	80084c8 <__sflush_r+0xc0>
 8008416:	684b      	ldr	r3, [r1, #4]
 8008418:	2b00      	cmp	r3, #0
 800841a:	dc05      	bgt.n	8008428 <__sflush_r+0x20>
 800841c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800841e:	2b00      	cmp	r3, #0
 8008420:	dc02      	bgt.n	8008428 <__sflush_r+0x20>
 8008422:	2000      	movs	r0, #0
 8008424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008428:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800842a:	2e00      	cmp	r6, #0
 800842c:	d0f9      	beq.n	8008422 <__sflush_r+0x1a>
 800842e:	2300      	movs	r3, #0
 8008430:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008434:	682f      	ldr	r7, [r5, #0]
 8008436:	602b      	str	r3, [r5, #0]
 8008438:	d032      	beq.n	80084a0 <__sflush_r+0x98>
 800843a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800843c:	89a3      	ldrh	r3, [r4, #12]
 800843e:	075a      	lsls	r2, r3, #29
 8008440:	d505      	bpl.n	800844e <__sflush_r+0x46>
 8008442:	6863      	ldr	r3, [r4, #4]
 8008444:	1ac0      	subs	r0, r0, r3
 8008446:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008448:	b10b      	cbz	r3, 800844e <__sflush_r+0x46>
 800844a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800844c:	1ac0      	subs	r0, r0, r3
 800844e:	2300      	movs	r3, #0
 8008450:	4602      	mov	r2, r0
 8008452:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008454:	6a21      	ldr	r1, [r4, #32]
 8008456:	4628      	mov	r0, r5
 8008458:	47b0      	blx	r6
 800845a:	1c43      	adds	r3, r0, #1
 800845c:	89a3      	ldrh	r3, [r4, #12]
 800845e:	d106      	bne.n	800846e <__sflush_r+0x66>
 8008460:	6829      	ldr	r1, [r5, #0]
 8008462:	291d      	cmp	r1, #29
 8008464:	d82c      	bhi.n	80084c0 <__sflush_r+0xb8>
 8008466:	4a2a      	ldr	r2, [pc, #168]	; (8008510 <__sflush_r+0x108>)
 8008468:	40ca      	lsrs	r2, r1
 800846a:	07d6      	lsls	r6, r2, #31
 800846c:	d528      	bpl.n	80084c0 <__sflush_r+0xb8>
 800846e:	2200      	movs	r2, #0
 8008470:	6062      	str	r2, [r4, #4]
 8008472:	04d9      	lsls	r1, r3, #19
 8008474:	6922      	ldr	r2, [r4, #16]
 8008476:	6022      	str	r2, [r4, #0]
 8008478:	d504      	bpl.n	8008484 <__sflush_r+0x7c>
 800847a:	1c42      	adds	r2, r0, #1
 800847c:	d101      	bne.n	8008482 <__sflush_r+0x7a>
 800847e:	682b      	ldr	r3, [r5, #0]
 8008480:	b903      	cbnz	r3, 8008484 <__sflush_r+0x7c>
 8008482:	6560      	str	r0, [r4, #84]	; 0x54
 8008484:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008486:	602f      	str	r7, [r5, #0]
 8008488:	2900      	cmp	r1, #0
 800848a:	d0ca      	beq.n	8008422 <__sflush_r+0x1a>
 800848c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008490:	4299      	cmp	r1, r3
 8008492:	d002      	beq.n	800849a <__sflush_r+0x92>
 8008494:	4628      	mov	r0, r5
 8008496:	f7ff fa7b 	bl	8007990 <_free_r>
 800849a:	2000      	movs	r0, #0
 800849c:	6360      	str	r0, [r4, #52]	; 0x34
 800849e:	e7c1      	b.n	8008424 <__sflush_r+0x1c>
 80084a0:	6a21      	ldr	r1, [r4, #32]
 80084a2:	2301      	movs	r3, #1
 80084a4:	4628      	mov	r0, r5
 80084a6:	47b0      	blx	r6
 80084a8:	1c41      	adds	r1, r0, #1
 80084aa:	d1c7      	bne.n	800843c <__sflush_r+0x34>
 80084ac:	682b      	ldr	r3, [r5, #0]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d0c4      	beq.n	800843c <__sflush_r+0x34>
 80084b2:	2b1d      	cmp	r3, #29
 80084b4:	d001      	beq.n	80084ba <__sflush_r+0xb2>
 80084b6:	2b16      	cmp	r3, #22
 80084b8:	d101      	bne.n	80084be <__sflush_r+0xb6>
 80084ba:	602f      	str	r7, [r5, #0]
 80084bc:	e7b1      	b.n	8008422 <__sflush_r+0x1a>
 80084be:	89a3      	ldrh	r3, [r4, #12]
 80084c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084c4:	81a3      	strh	r3, [r4, #12]
 80084c6:	e7ad      	b.n	8008424 <__sflush_r+0x1c>
 80084c8:	690f      	ldr	r7, [r1, #16]
 80084ca:	2f00      	cmp	r7, #0
 80084cc:	d0a9      	beq.n	8008422 <__sflush_r+0x1a>
 80084ce:	0793      	lsls	r3, r2, #30
 80084d0:	680e      	ldr	r6, [r1, #0]
 80084d2:	bf08      	it	eq
 80084d4:	694b      	ldreq	r3, [r1, #20]
 80084d6:	600f      	str	r7, [r1, #0]
 80084d8:	bf18      	it	ne
 80084da:	2300      	movne	r3, #0
 80084dc:	eba6 0807 	sub.w	r8, r6, r7
 80084e0:	608b      	str	r3, [r1, #8]
 80084e2:	f1b8 0f00 	cmp.w	r8, #0
 80084e6:	dd9c      	ble.n	8008422 <__sflush_r+0x1a>
 80084e8:	6a21      	ldr	r1, [r4, #32]
 80084ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80084ec:	4643      	mov	r3, r8
 80084ee:	463a      	mov	r2, r7
 80084f0:	4628      	mov	r0, r5
 80084f2:	47b0      	blx	r6
 80084f4:	2800      	cmp	r0, #0
 80084f6:	dc06      	bgt.n	8008506 <__sflush_r+0xfe>
 80084f8:	89a3      	ldrh	r3, [r4, #12]
 80084fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084fe:	81a3      	strh	r3, [r4, #12]
 8008500:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008504:	e78e      	b.n	8008424 <__sflush_r+0x1c>
 8008506:	4407      	add	r7, r0
 8008508:	eba8 0800 	sub.w	r8, r8, r0
 800850c:	e7e9      	b.n	80084e2 <__sflush_r+0xda>
 800850e:	bf00      	nop
 8008510:	20400001 	.word	0x20400001

08008514 <_fflush_r>:
 8008514:	b538      	push	{r3, r4, r5, lr}
 8008516:	690b      	ldr	r3, [r1, #16]
 8008518:	4605      	mov	r5, r0
 800851a:	460c      	mov	r4, r1
 800851c:	b913      	cbnz	r3, 8008524 <_fflush_r+0x10>
 800851e:	2500      	movs	r5, #0
 8008520:	4628      	mov	r0, r5
 8008522:	bd38      	pop	{r3, r4, r5, pc}
 8008524:	b118      	cbz	r0, 800852e <_fflush_r+0x1a>
 8008526:	6983      	ldr	r3, [r0, #24]
 8008528:	b90b      	cbnz	r3, 800852e <_fflush_r+0x1a>
 800852a:	f000 f887 	bl	800863c <__sinit>
 800852e:	4b14      	ldr	r3, [pc, #80]	; (8008580 <_fflush_r+0x6c>)
 8008530:	429c      	cmp	r4, r3
 8008532:	d11b      	bne.n	800856c <_fflush_r+0x58>
 8008534:	686c      	ldr	r4, [r5, #4]
 8008536:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d0ef      	beq.n	800851e <_fflush_r+0xa>
 800853e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008540:	07d0      	lsls	r0, r2, #31
 8008542:	d404      	bmi.n	800854e <_fflush_r+0x3a>
 8008544:	0599      	lsls	r1, r3, #22
 8008546:	d402      	bmi.n	800854e <_fflush_r+0x3a>
 8008548:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800854a:	f000 f915 	bl	8008778 <__retarget_lock_acquire_recursive>
 800854e:	4628      	mov	r0, r5
 8008550:	4621      	mov	r1, r4
 8008552:	f7ff ff59 	bl	8008408 <__sflush_r>
 8008556:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008558:	07da      	lsls	r2, r3, #31
 800855a:	4605      	mov	r5, r0
 800855c:	d4e0      	bmi.n	8008520 <_fflush_r+0xc>
 800855e:	89a3      	ldrh	r3, [r4, #12]
 8008560:	059b      	lsls	r3, r3, #22
 8008562:	d4dd      	bmi.n	8008520 <_fflush_r+0xc>
 8008564:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008566:	f000 f908 	bl	800877a <__retarget_lock_release_recursive>
 800856a:	e7d9      	b.n	8008520 <_fflush_r+0xc>
 800856c:	4b05      	ldr	r3, [pc, #20]	; (8008584 <_fflush_r+0x70>)
 800856e:	429c      	cmp	r4, r3
 8008570:	d101      	bne.n	8008576 <_fflush_r+0x62>
 8008572:	68ac      	ldr	r4, [r5, #8]
 8008574:	e7df      	b.n	8008536 <_fflush_r+0x22>
 8008576:	4b04      	ldr	r3, [pc, #16]	; (8008588 <_fflush_r+0x74>)
 8008578:	429c      	cmp	r4, r3
 800857a:	bf08      	it	eq
 800857c:	68ec      	ldreq	r4, [r5, #12]
 800857e:	e7da      	b.n	8008536 <_fflush_r+0x22>
 8008580:	08008c54 	.word	0x08008c54
 8008584:	08008c74 	.word	0x08008c74
 8008588:	08008c34 	.word	0x08008c34

0800858c <std>:
 800858c:	2300      	movs	r3, #0
 800858e:	b510      	push	{r4, lr}
 8008590:	4604      	mov	r4, r0
 8008592:	e9c0 3300 	strd	r3, r3, [r0]
 8008596:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800859a:	6083      	str	r3, [r0, #8]
 800859c:	8181      	strh	r1, [r0, #12]
 800859e:	6643      	str	r3, [r0, #100]	; 0x64
 80085a0:	81c2      	strh	r2, [r0, #14]
 80085a2:	6183      	str	r3, [r0, #24]
 80085a4:	4619      	mov	r1, r3
 80085a6:	2208      	movs	r2, #8
 80085a8:	305c      	adds	r0, #92	; 0x5c
 80085aa:	f7ff f9e9 	bl	8007980 <memset>
 80085ae:	4b05      	ldr	r3, [pc, #20]	; (80085c4 <std+0x38>)
 80085b0:	6263      	str	r3, [r4, #36]	; 0x24
 80085b2:	4b05      	ldr	r3, [pc, #20]	; (80085c8 <std+0x3c>)
 80085b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80085b6:	4b05      	ldr	r3, [pc, #20]	; (80085cc <std+0x40>)
 80085b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80085ba:	4b05      	ldr	r3, [pc, #20]	; (80085d0 <std+0x44>)
 80085bc:	6224      	str	r4, [r4, #32]
 80085be:	6323      	str	r3, [r4, #48]	; 0x30
 80085c0:	bd10      	pop	{r4, pc}
 80085c2:	bf00      	nop
 80085c4:	080088d1 	.word	0x080088d1
 80085c8:	080088f3 	.word	0x080088f3
 80085cc:	0800892b 	.word	0x0800892b
 80085d0:	0800894f 	.word	0x0800894f

080085d4 <_cleanup_r>:
 80085d4:	4901      	ldr	r1, [pc, #4]	; (80085dc <_cleanup_r+0x8>)
 80085d6:	f000 b8af 	b.w	8008738 <_fwalk_reent>
 80085da:	bf00      	nop
 80085dc:	08008515 	.word	0x08008515

080085e0 <__sfmoreglue>:
 80085e0:	b570      	push	{r4, r5, r6, lr}
 80085e2:	2268      	movs	r2, #104	; 0x68
 80085e4:	1e4d      	subs	r5, r1, #1
 80085e6:	4355      	muls	r5, r2
 80085e8:	460e      	mov	r6, r1
 80085ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80085ee:	f7ff fa3b 	bl	8007a68 <_malloc_r>
 80085f2:	4604      	mov	r4, r0
 80085f4:	b140      	cbz	r0, 8008608 <__sfmoreglue+0x28>
 80085f6:	2100      	movs	r1, #0
 80085f8:	e9c0 1600 	strd	r1, r6, [r0]
 80085fc:	300c      	adds	r0, #12
 80085fe:	60a0      	str	r0, [r4, #8]
 8008600:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008604:	f7ff f9bc 	bl	8007980 <memset>
 8008608:	4620      	mov	r0, r4
 800860a:	bd70      	pop	{r4, r5, r6, pc}

0800860c <__sfp_lock_acquire>:
 800860c:	4801      	ldr	r0, [pc, #4]	; (8008614 <__sfp_lock_acquire+0x8>)
 800860e:	f000 b8b3 	b.w	8008778 <__retarget_lock_acquire_recursive>
 8008612:	bf00      	nop
 8008614:	200029d1 	.word	0x200029d1

08008618 <__sfp_lock_release>:
 8008618:	4801      	ldr	r0, [pc, #4]	; (8008620 <__sfp_lock_release+0x8>)
 800861a:	f000 b8ae 	b.w	800877a <__retarget_lock_release_recursive>
 800861e:	bf00      	nop
 8008620:	200029d1 	.word	0x200029d1

08008624 <__sinit_lock_acquire>:
 8008624:	4801      	ldr	r0, [pc, #4]	; (800862c <__sinit_lock_acquire+0x8>)
 8008626:	f000 b8a7 	b.w	8008778 <__retarget_lock_acquire_recursive>
 800862a:	bf00      	nop
 800862c:	200029d2 	.word	0x200029d2

08008630 <__sinit_lock_release>:
 8008630:	4801      	ldr	r0, [pc, #4]	; (8008638 <__sinit_lock_release+0x8>)
 8008632:	f000 b8a2 	b.w	800877a <__retarget_lock_release_recursive>
 8008636:	bf00      	nop
 8008638:	200029d2 	.word	0x200029d2

0800863c <__sinit>:
 800863c:	b510      	push	{r4, lr}
 800863e:	4604      	mov	r4, r0
 8008640:	f7ff fff0 	bl	8008624 <__sinit_lock_acquire>
 8008644:	69a3      	ldr	r3, [r4, #24]
 8008646:	b11b      	cbz	r3, 8008650 <__sinit+0x14>
 8008648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800864c:	f7ff bff0 	b.w	8008630 <__sinit_lock_release>
 8008650:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008654:	6523      	str	r3, [r4, #80]	; 0x50
 8008656:	4b13      	ldr	r3, [pc, #76]	; (80086a4 <__sinit+0x68>)
 8008658:	4a13      	ldr	r2, [pc, #76]	; (80086a8 <__sinit+0x6c>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	62a2      	str	r2, [r4, #40]	; 0x28
 800865e:	42a3      	cmp	r3, r4
 8008660:	bf04      	itt	eq
 8008662:	2301      	moveq	r3, #1
 8008664:	61a3      	streq	r3, [r4, #24]
 8008666:	4620      	mov	r0, r4
 8008668:	f000 f820 	bl	80086ac <__sfp>
 800866c:	6060      	str	r0, [r4, #4]
 800866e:	4620      	mov	r0, r4
 8008670:	f000 f81c 	bl	80086ac <__sfp>
 8008674:	60a0      	str	r0, [r4, #8]
 8008676:	4620      	mov	r0, r4
 8008678:	f000 f818 	bl	80086ac <__sfp>
 800867c:	2200      	movs	r2, #0
 800867e:	60e0      	str	r0, [r4, #12]
 8008680:	2104      	movs	r1, #4
 8008682:	6860      	ldr	r0, [r4, #4]
 8008684:	f7ff ff82 	bl	800858c <std>
 8008688:	68a0      	ldr	r0, [r4, #8]
 800868a:	2201      	movs	r2, #1
 800868c:	2109      	movs	r1, #9
 800868e:	f7ff ff7d 	bl	800858c <std>
 8008692:	68e0      	ldr	r0, [r4, #12]
 8008694:	2202      	movs	r2, #2
 8008696:	2112      	movs	r1, #18
 8008698:	f7ff ff78 	bl	800858c <std>
 800869c:	2301      	movs	r3, #1
 800869e:	61a3      	str	r3, [r4, #24]
 80086a0:	e7d2      	b.n	8008648 <__sinit+0xc>
 80086a2:	bf00      	nop
 80086a4:	08008b4c 	.word	0x08008b4c
 80086a8:	080085d5 	.word	0x080085d5

080086ac <__sfp>:
 80086ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ae:	4607      	mov	r7, r0
 80086b0:	f7ff ffac 	bl	800860c <__sfp_lock_acquire>
 80086b4:	4b1e      	ldr	r3, [pc, #120]	; (8008730 <__sfp+0x84>)
 80086b6:	681e      	ldr	r6, [r3, #0]
 80086b8:	69b3      	ldr	r3, [r6, #24]
 80086ba:	b913      	cbnz	r3, 80086c2 <__sfp+0x16>
 80086bc:	4630      	mov	r0, r6
 80086be:	f7ff ffbd 	bl	800863c <__sinit>
 80086c2:	3648      	adds	r6, #72	; 0x48
 80086c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80086c8:	3b01      	subs	r3, #1
 80086ca:	d503      	bpl.n	80086d4 <__sfp+0x28>
 80086cc:	6833      	ldr	r3, [r6, #0]
 80086ce:	b30b      	cbz	r3, 8008714 <__sfp+0x68>
 80086d0:	6836      	ldr	r6, [r6, #0]
 80086d2:	e7f7      	b.n	80086c4 <__sfp+0x18>
 80086d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80086d8:	b9d5      	cbnz	r5, 8008710 <__sfp+0x64>
 80086da:	4b16      	ldr	r3, [pc, #88]	; (8008734 <__sfp+0x88>)
 80086dc:	60e3      	str	r3, [r4, #12]
 80086de:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80086e2:	6665      	str	r5, [r4, #100]	; 0x64
 80086e4:	f000 f847 	bl	8008776 <__retarget_lock_init_recursive>
 80086e8:	f7ff ff96 	bl	8008618 <__sfp_lock_release>
 80086ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80086f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80086f4:	6025      	str	r5, [r4, #0]
 80086f6:	61a5      	str	r5, [r4, #24]
 80086f8:	2208      	movs	r2, #8
 80086fa:	4629      	mov	r1, r5
 80086fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008700:	f7ff f93e 	bl	8007980 <memset>
 8008704:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008708:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800870c:	4620      	mov	r0, r4
 800870e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008710:	3468      	adds	r4, #104	; 0x68
 8008712:	e7d9      	b.n	80086c8 <__sfp+0x1c>
 8008714:	2104      	movs	r1, #4
 8008716:	4638      	mov	r0, r7
 8008718:	f7ff ff62 	bl	80085e0 <__sfmoreglue>
 800871c:	4604      	mov	r4, r0
 800871e:	6030      	str	r0, [r6, #0]
 8008720:	2800      	cmp	r0, #0
 8008722:	d1d5      	bne.n	80086d0 <__sfp+0x24>
 8008724:	f7ff ff78 	bl	8008618 <__sfp_lock_release>
 8008728:	230c      	movs	r3, #12
 800872a:	603b      	str	r3, [r7, #0]
 800872c:	e7ee      	b.n	800870c <__sfp+0x60>
 800872e:	bf00      	nop
 8008730:	08008b4c 	.word	0x08008b4c
 8008734:	ffff0001 	.word	0xffff0001

08008738 <_fwalk_reent>:
 8008738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800873c:	4606      	mov	r6, r0
 800873e:	4688      	mov	r8, r1
 8008740:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008744:	2700      	movs	r7, #0
 8008746:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800874a:	f1b9 0901 	subs.w	r9, r9, #1
 800874e:	d505      	bpl.n	800875c <_fwalk_reent+0x24>
 8008750:	6824      	ldr	r4, [r4, #0]
 8008752:	2c00      	cmp	r4, #0
 8008754:	d1f7      	bne.n	8008746 <_fwalk_reent+0xe>
 8008756:	4638      	mov	r0, r7
 8008758:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800875c:	89ab      	ldrh	r3, [r5, #12]
 800875e:	2b01      	cmp	r3, #1
 8008760:	d907      	bls.n	8008772 <_fwalk_reent+0x3a>
 8008762:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008766:	3301      	adds	r3, #1
 8008768:	d003      	beq.n	8008772 <_fwalk_reent+0x3a>
 800876a:	4629      	mov	r1, r5
 800876c:	4630      	mov	r0, r6
 800876e:	47c0      	blx	r8
 8008770:	4307      	orrs	r7, r0
 8008772:	3568      	adds	r5, #104	; 0x68
 8008774:	e7e9      	b.n	800874a <_fwalk_reent+0x12>

08008776 <__retarget_lock_init_recursive>:
 8008776:	4770      	bx	lr

08008778 <__retarget_lock_acquire_recursive>:
 8008778:	4770      	bx	lr

0800877a <__retarget_lock_release_recursive>:
 800877a:	4770      	bx	lr

0800877c <__swhatbuf_r>:
 800877c:	b570      	push	{r4, r5, r6, lr}
 800877e:	460e      	mov	r6, r1
 8008780:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008784:	2900      	cmp	r1, #0
 8008786:	b096      	sub	sp, #88	; 0x58
 8008788:	4614      	mov	r4, r2
 800878a:	461d      	mov	r5, r3
 800878c:	da08      	bge.n	80087a0 <__swhatbuf_r+0x24>
 800878e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008792:	2200      	movs	r2, #0
 8008794:	602a      	str	r2, [r5, #0]
 8008796:	061a      	lsls	r2, r3, #24
 8008798:	d410      	bmi.n	80087bc <__swhatbuf_r+0x40>
 800879a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800879e:	e00e      	b.n	80087be <__swhatbuf_r+0x42>
 80087a0:	466a      	mov	r2, sp
 80087a2:	f000 f8fb 	bl	800899c <_fstat_r>
 80087a6:	2800      	cmp	r0, #0
 80087a8:	dbf1      	blt.n	800878e <__swhatbuf_r+0x12>
 80087aa:	9a01      	ldr	r2, [sp, #4]
 80087ac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80087b0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80087b4:	425a      	negs	r2, r3
 80087b6:	415a      	adcs	r2, r3
 80087b8:	602a      	str	r2, [r5, #0]
 80087ba:	e7ee      	b.n	800879a <__swhatbuf_r+0x1e>
 80087bc:	2340      	movs	r3, #64	; 0x40
 80087be:	2000      	movs	r0, #0
 80087c0:	6023      	str	r3, [r4, #0]
 80087c2:	b016      	add	sp, #88	; 0x58
 80087c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080087c8 <__smakebuf_r>:
 80087c8:	898b      	ldrh	r3, [r1, #12]
 80087ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80087cc:	079d      	lsls	r5, r3, #30
 80087ce:	4606      	mov	r6, r0
 80087d0:	460c      	mov	r4, r1
 80087d2:	d507      	bpl.n	80087e4 <__smakebuf_r+0x1c>
 80087d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80087d8:	6023      	str	r3, [r4, #0]
 80087da:	6123      	str	r3, [r4, #16]
 80087dc:	2301      	movs	r3, #1
 80087de:	6163      	str	r3, [r4, #20]
 80087e0:	b002      	add	sp, #8
 80087e2:	bd70      	pop	{r4, r5, r6, pc}
 80087e4:	ab01      	add	r3, sp, #4
 80087e6:	466a      	mov	r2, sp
 80087e8:	f7ff ffc8 	bl	800877c <__swhatbuf_r>
 80087ec:	9900      	ldr	r1, [sp, #0]
 80087ee:	4605      	mov	r5, r0
 80087f0:	4630      	mov	r0, r6
 80087f2:	f7ff f939 	bl	8007a68 <_malloc_r>
 80087f6:	b948      	cbnz	r0, 800880c <__smakebuf_r+0x44>
 80087f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087fc:	059a      	lsls	r2, r3, #22
 80087fe:	d4ef      	bmi.n	80087e0 <__smakebuf_r+0x18>
 8008800:	f023 0303 	bic.w	r3, r3, #3
 8008804:	f043 0302 	orr.w	r3, r3, #2
 8008808:	81a3      	strh	r3, [r4, #12]
 800880a:	e7e3      	b.n	80087d4 <__smakebuf_r+0xc>
 800880c:	4b0d      	ldr	r3, [pc, #52]	; (8008844 <__smakebuf_r+0x7c>)
 800880e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008810:	89a3      	ldrh	r3, [r4, #12]
 8008812:	6020      	str	r0, [r4, #0]
 8008814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008818:	81a3      	strh	r3, [r4, #12]
 800881a:	9b00      	ldr	r3, [sp, #0]
 800881c:	6163      	str	r3, [r4, #20]
 800881e:	9b01      	ldr	r3, [sp, #4]
 8008820:	6120      	str	r0, [r4, #16]
 8008822:	b15b      	cbz	r3, 800883c <__smakebuf_r+0x74>
 8008824:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008828:	4630      	mov	r0, r6
 800882a:	f000 f8c9 	bl	80089c0 <_isatty_r>
 800882e:	b128      	cbz	r0, 800883c <__smakebuf_r+0x74>
 8008830:	89a3      	ldrh	r3, [r4, #12]
 8008832:	f023 0303 	bic.w	r3, r3, #3
 8008836:	f043 0301 	orr.w	r3, r3, #1
 800883a:	81a3      	strh	r3, [r4, #12]
 800883c:	89a0      	ldrh	r0, [r4, #12]
 800883e:	4305      	orrs	r5, r0
 8008840:	81a5      	strh	r5, [r4, #12]
 8008842:	e7cd      	b.n	80087e0 <__smakebuf_r+0x18>
 8008844:	080085d5 	.word	0x080085d5

08008848 <_raise_r>:
 8008848:	291f      	cmp	r1, #31
 800884a:	b538      	push	{r3, r4, r5, lr}
 800884c:	4604      	mov	r4, r0
 800884e:	460d      	mov	r5, r1
 8008850:	d904      	bls.n	800885c <_raise_r+0x14>
 8008852:	2316      	movs	r3, #22
 8008854:	6003      	str	r3, [r0, #0]
 8008856:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800885a:	bd38      	pop	{r3, r4, r5, pc}
 800885c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800885e:	b112      	cbz	r2, 8008866 <_raise_r+0x1e>
 8008860:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008864:	b94b      	cbnz	r3, 800887a <_raise_r+0x32>
 8008866:	4620      	mov	r0, r4
 8008868:	f000 f830 	bl	80088cc <_getpid_r>
 800886c:	462a      	mov	r2, r5
 800886e:	4601      	mov	r1, r0
 8008870:	4620      	mov	r0, r4
 8008872:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008876:	f000 b817 	b.w	80088a8 <_kill_r>
 800887a:	2b01      	cmp	r3, #1
 800887c:	d00a      	beq.n	8008894 <_raise_r+0x4c>
 800887e:	1c59      	adds	r1, r3, #1
 8008880:	d103      	bne.n	800888a <_raise_r+0x42>
 8008882:	2316      	movs	r3, #22
 8008884:	6003      	str	r3, [r0, #0]
 8008886:	2001      	movs	r0, #1
 8008888:	e7e7      	b.n	800885a <_raise_r+0x12>
 800888a:	2400      	movs	r4, #0
 800888c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008890:	4628      	mov	r0, r5
 8008892:	4798      	blx	r3
 8008894:	2000      	movs	r0, #0
 8008896:	e7e0      	b.n	800885a <_raise_r+0x12>

08008898 <raise>:
 8008898:	4b02      	ldr	r3, [pc, #8]	; (80088a4 <raise+0xc>)
 800889a:	4601      	mov	r1, r0
 800889c:	6818      	ldr	r0, [r3, #0]
 800889e:	f7ff bfd3 	b.w	8008848 <_raise_r>
 80088a2:	bf00      	nop
 80088a4:	20000288 	.word	0x20000288

080088a8 <_kill_r>:
 80088a8:	b538      	push	{r3, r4, r5, lr}
 80088aa:	4d07      	ldr	r5, [pc, #28]	; (80088c8 <_kill_r+0x20>)
 80088ac:	2300      	movs	r3, #0
 80088ae:	4604      	mov	r4, r0
 80088b0:	4608      	mov	r0, r1
 80088b2:	4611      	mov	r1, r2
 80088b4:	602b      	str	r3, [r5, #0]
 80088b6:	f7fe ff01 	bl	80076bc <_kill>
 80088ba:	1c43      	adds	r3, r0, #1
 80088bc:	d102      	bne.n	80088c4 <_kill_r+0x1c>
 80088be:	682b      	ldr	r3, [r5, #0]
 80088c0:	b103      	cbz	r3, 80088c4 <_kill_r+0x1c>
 80088c2:	6023      	str	r3, [r4, #0]
 80088c4:	bd38      	pop	{r3, r4, r5, pc}
 80088c6:	bf00      	nop
 80088c8:	200029cc 	.word	0x200029cc

080088cc <_getpid_r>:
 80088cc:	f7fe beee 	b.w	80076ac <_getpid>

080088d0 <__sread>:
 80088d0:	b510      	push	{r4, lr}
 80088d2:	460c      	mov	r4, r1
 80088d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088d8:	f000 f894 	bl	8008a04 <_read_r>
 80088dc:	2800      	cmp	r0, #0
 80088de:	bfab      	itete	ge
 80088e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80088e2:	89a3      	ldrhlt	r3, [r4, #12]
 80088e4:	181b      	addge	r3, r3, r0
 80088e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80088ea:	bfac      	ite	ge
 80088ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80088ee:	81a3      	strhlt	r3, [r4, #12]
 80088f0:	bd10      	pop	{r4, pc}

080088f2 <__swrite>:
 80088f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088f6:	461f      	mov	r7, r3
 80088f8:	898b      	ldrh	r3, [r1, #12]
 80088fa:	05db      	lsls	r3, r3, #23
 80088fc:	4605      	mov	r5, r0
 80088fe:	460c      	mov	r4, r1
 8008900:	4616      	mov	r6, r2
 8008902:	d505      	bpl.n	8008910 <__swrite+0x1e>
 8008904:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008908:	2302      	movs	r3, #2
 800890a:	2200      	movs	r2, #0
 800890c:	f000 f868 	bl	80089e0 <_lseek_r>
 8008910:	89a3      	ldrh	r3, [r4, #12]
 8008912:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008916:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800891a:	81a3      	strh	r3, [r4, #12]
 800891c:	4632      	mov	r2, r6
 800891e:	463b      	mov	r3, r7
 8008920:	4628      	mov	r0, r5
 8008922:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008926:	f000 b817 	b.w	8008958 <_write_r>

0800892a <__sseek>:
 800892a:	b510      	push	{r4, lr}
 800892c:	460c      	mov	r4, r1
 800892e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008932:	f000 f855 	bl	80089e0 <_lseek_r>
 8008936:	1c43      	adds	r3, r0, #1
 8008938:	89a3      	ldrh	r3, [r4, #12]
 800893a:	bf15      	itete	ne
 800893c:	6560      	strne	r0, [r4, #84]	; 0x54
 800893e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008942:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008946:	81a3      	strheq	r3, [r4, #12]
 8008948:	bf18      	it	ne
 800894a:	81a3      	strhne	r3, [r4, #12]
 800894c:	bd10      	pop	{r4, pc}

0800894e <__sclose>:
 800894e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008952:	f000 b813 	b.w	800897c <_close_r>
	...

08008958 <_write_r>:
 8008958:	b538      	push	{r3, r4, r5, lr}
 800895a:	4d07      	ldr	r5, [pc, #28]	; (8008978 <_write_r+0x20>)
 800895c:	4604      	mov	r4, r0
 800895e:	4608      	mov	r0, r1
 8008960:	4611      	mov	r1, r2
 8008962:	2200      	movs	r2, #0
 8008964:	602a      	str	r2, [r5, #0]
 8008966:	461a      	mov	r2, r3
 8008968:	f7fe fedf 	bl	800772a <_write>
 800896c:	1c43      	adds	r3, r0, #1
 800896e:	d102      	bne.n	8008976 <_write_r+0x1e>
 8008970:	682b      	ldr	r3, [r5, #0]
 8008972:	b103      	cbz	r3, 8008976 <_write_r+0x1e>
 8008974:	6023      	str	r3, [r4, #0]
 8008976:	bd38      	pop	{r3, r4, r5, pc}
 8008978:	200029cc 	.word	0x200029cc

0800897c <_close_r>:
 800897c:	b538      	push	{r3, r4, r5, lr}
 800897e:	4d06      	ldr	r5, [pc, #24]	; (8008998 <_close_r+0x1c>)
 8008980:	2300      	movs	r3, #0
 8008982:	4604      	mov	r4, r0
 8008984:	4608      	mov	r0, r1
 8008986:	602b      	str	r3, [r5, #0]
 8008988:	f7fe feeb 	bl	8007762 <_close>
 800898c:	1c43      	adds	r3, r0, #1
 800898e:	d102      	bne.n	8008996 <_close_r+0x1a>
 8008990:	682b      	ldr	r3, [r5, #0]
 8008992:	b103      	cbz	r3, 8008996 <_close_r+0x1a>
 8008994:	6023      	str	r3, [r4, #0]
 8008996:	bd38      	pop	{r3, r4, r5, pc}
 8008998:	200029cc 	.word	0x200029cc

0800899c <_fstat_r>:
 800899c:	b538      	push	{r3, r4, r5, lr}
 800899e:	4d07      	ldr	r5, [pc, #28]	; (80089bc <_fstat_r+0x20>)
 80089a0:	2300      	movs	r3, #0
 80089a2:	4604      	mov	r4, r0
 80089a4:	4608      	mov	r0, r1
 80089a6:	4611      	mov	r1, r2
 80089a8:	602b      	str	r3, [r5, #0]
 80089aa:	f7fe fee6 	bl	800777a <_fstat>
 80089ae:	1c43      	adds	r3, r0, #1
 80089b0:	d102      	bne.n	80089b8 <_fstat_r+0x1c>
 80089b2:	682b      	ldr	r3, [r5, #0]
 80089b4:	b103      	cbz	r3, 80089b8 <_fstat_r+0x1c>
 80089b6:	6023      	str	r3, [r4, #0]
 80089b8:	bd38      	pop	{r3, r4, r5, pc}
 80089ba:	bf00      	nop
 80089bc:	200029cc 	.word	0x200029cc

080089c0 <_isatty_r>:
 80089c0:	b538      	push	{r3, r4, r5, lr}
 80089c2:	4d06      	ldr	r5, [pc, #24]	; (80089dc <_isatty_r+0x1c>)
 80089c4:	2300      	movs	r3, #0
 80089c6:	4604      	mov	r4, r0
 80089c8:	4608      	mov	r0, r1
 80089ca:	602b      	str	r3, [r5, #0]
 80089cc:	f7fe fee5 	bl	800779a <_isatty>
 80089d0:	1c43      	adds	r3, r0, #1
 80089d2:	d102      	bne.n	80089da <_isatty_r+0x1a>
 80089d4:	682b      	ldr	r3, [r5, #0]
 80089d6:	b103      	cbz	r3, 80089da <_isatty_r+0x1a>
 80089d8:	6023      	str	r3, [r4, #0]
 80089da:	bd38      	pop	{r3, r4, r5, pc}
 80089dc:	200029cc 	.word	0x200029cc

080089e0 <_lseek_r>:
 80089e0:	b538      	push	{r3, r4, r5, lr}
 80089e2:	4d07      	ldr	r5, [pc, #28]	; (8008a00 <_lseek_r+0x20>)
 80089e4:	4604      	mov	r4, r0
 80089e6:	4608      	mov	r0, r1
 80089e8:	4611      	mov	r1, r2
 80089ea:	2200      	movs	r2, #0
 80089ec:	602a      	str	r2, [r5, #0]
 80089ee:	461a      	mov	r2, r3
 80089f0:	f7fe fede 	bl	80077b0 <_lseek>
 80089f4:	1c43      	adds	r3, r0, #1
 80089f6:	d102      	bne.n	80089fe <_lseek_r+0x1e>
 80089f8:	682b      	ldr	r3, [r5, #0]
 80089fa:	b103      	cbz	r3, 80089fe <_lseek_r+0x1e>
 80089fc:	6023      	str	r3, [r4, #0]
 80089fe:	bd38      	pop	{r3, r4, r5, pc}
 8008a00:	200029cc 	.word	0x200029cc

08008a04 <_read_r>:
 8008a04:	b538      	push	{r3, r4, r5, lr}
 8008a06:	4d07      	ldr	r5, [pc, #28]	; (8008a24 <_read_r+0x20>)
 8008a08:	4604      	mov	r4, r0
 8008a0a:	4608      	mov	r0, r1
 8008a0c:	4611      	mov	r1, r2
 8008a0e:	2200      	movs	r2, #0
 8008a10:	602a      	str	r2, [r5, #0]
 8008a12:	461a      	mov	r2, r3
 8008a14:	f7fe fe6c 	bl	80076f0 <_read>
 8008a18:	1c43      	adds	r3, r0, #1
 8008a1a:	d102      	bne.n	8008a22 <_read_r+0x1e>
 8008a1c:	682b      	ldr	r3, [r5, #0]
 8008a1e:	b103      	cbz	r3, 8008a22 <_read_r+0x1e>
 8008a20:	6023      	str	r3, [r4, #0]
 8008a22:	bd38      	pop	{r3, r4, r5, pc}
 8008a24:	200029cc 	.word	0x200029cc

08008a28 <_gettimeofday>:
 8008a28:	4b02      	ldr	r3, [pc, #8]	; (8008a34 <_gettimeofday+0xc>)
 8008a2a:	2258      	movs	r2, #88	; 0x58
 8008a2c:	601a      	str	r2, [r3, #0]
 8008a2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a32:	4770      	bx	lr
 8008a34:	200029cc 	.word	0x200029cc

08008a38 <_init>:
 8008a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a3a:	bf00      	nop
 8008a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a3e:	bc08      	pop	{r3}
 8008a40:	469e      	mov	lr, r3
 8008a42:	4770      	bx	lr

08008a44 <_fini>:
 8008a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a46:	bf00      	nop
 8008a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a4a:	bc08      	pop	{r3}
 8008a4c:	469e      	mov	lr, r3
 8008a4e:	4770      	bx	lr
