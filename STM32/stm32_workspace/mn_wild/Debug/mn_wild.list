
mn_wild.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006eec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d4  0800707c  0800707c  0001707c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007250  08007250  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08007250  08007250  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007250  08007250  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007250  08007250  00017250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007254  08007254  00017254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007258  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000232c  20000074  080072cc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200023a0  080072cc  000223a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015dd1  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000391a  00000000  00000000  00035e75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001388  00000000  00000000  00039790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011e0  00000000  00000000  0003ab18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000253f4  00000000  00000000  0003bcf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001619b  00000000  00000000  000610ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd778  00000000  00000000  00077287  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001549ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057e8  00000000  00000000  00154a50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  0015a238  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  0015a25c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007064 	.word	0x08007064

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08007064 	.word	0x08007064

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <adafruit_soundboard_power_enable_disable>:
#define ADAFRUIT_SOUNDBOARD_RESET_TIME_MILLISECONDS         1000
#define ADAFRUIT_SOUNDBOARD_VOLUME_DELAY_MILLISECONDS       200


static void adafruit_soundboard_power_enable_disable(adafruit_soundboard_power_enable_disable_e enable_disable)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
 8000276:	4603      	mov	r3, r0
 8000278:	71fb      	strb	r3, [r7, #7]
    board_init_adafruit_soundboard_power_enable_disable(enable_disable);
 800027a:	79fb      	ldrb	r3, [r7, #7]
 800027c:	4618      	mov	r0, r3
 800027e:	f005 f935 	bl	80054ec <board_init_adafruit_soundboard_power_enable_disable>
}
 8000282:	bf00      	nop
 8000284:	3708      	adds	r7, #8
 8000286:	46bd      	mov	sp, r7
 8000288:	bd80      	pop	{r7, pc}

0800028a <adafruit_soundboard_trigger_enable_disable>:


static void adafruit_soundboard_trigger_enable_disable(adafruit_soundboard_trig_e trigger,
                                                       adafruit_soundboard_trig_enable_disable_e enable_disable)
{
 800028a:	b580      	push	{r7, lr}
 800028c:	b082      	sub	sp, #8
 800028e:	af00      	add	r7, sp, #0
 8000290:	4603      	mov	r3, r0
 8000292:	460a      	mov	r2, r1
 8000294:	71fb      	strb	r3, [r7, #7]
 8000296:	4613      	mov	r3, r2
 8000298:	71bb      	strb	r3, [r7, #6]
    board_init_adafruit_soundboard_trigger(trigger, enable_disable);
 800029a:	79ba      	ldrb	r2, [r7, #6]
 800029c:	79fb      	ldrb	r3, [r7, #7]
 800029e:	4611      	mov	r1, r2
 80002a0:	4618      	mov	r0, r3
 80002a2:	f005 f983 	bl	80055ac <board_init_adafruit_soundboard_trigger>
}
 80002a6:	bf00      	nop
 80002a8:	3708      	adds	r7, #8
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}

080002ae <adafruit_soundboard_reset_enable_disable>:


static void adafruit_soundboard_reset_enable_disable(adafruit_soundboard_reset_e enable_disable)
{
 80002ae:	b580      	push	{r7, lr}
 80002b0:	b082      	sub	sp, #8
 80002b2:	af00      	add	r7, sp, #0
 80002b4:	4603      	mov	r3, r0
 80002b6:	71fb      	strb	r3, [r7, #7]
    board_init_adafruit_reset(enable_disable);
 80002b8:	79fb      	ldrb	r3, [r7, #7]
 80002ba:	4618      	mov	r0, r3
 80002bc:	f005 f86a 	bl	8005394 <board_init_adafruit_reset>
}
 80002c0:	bf00      	nop
 80002c2:	3708      	adds	r7, #8
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}

080002c8 <adafruit_soundboard_mode>:


static void adafruit_soundboard_mode(adafruit_soundboard_mode_e mode)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b082      	sub	sp, #8
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	4603      	mov	r3, r0
 80002d0:	71fb      	strb	r3, [r7, #7]
    board_init_adafruit_soundboard_enable_mode(mode);
 80002d2:	79fb      	ldrb	r3, [r7, #7]
 80002d4:	4618      	mov	r0, r3
 80002d6:	f005 f939 	bl	800554c <board_init_adafruit_soundboard_enable_mode>
    adafruit_soundboard_reset_enable();
 80002da:	f000 f87e 	bl	80003da <adafruit_soundboard_reset_enable>
    osDelay(ADAFRUIT_SOUNDBOARD_RESET_TIME_MILLISECONDS);
 80002de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002e2:	f000 fa59 	bl	8000798 <osDelay>
    adafruit_soundboard_reset_disable();
 80002e6:	f000 f87f 	bl	80003e8 <adafruit_soundboard_reset_disable>
}
 80002ea:	bf00      	nop
 80002ec:	3708      	adds	r7, #8
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}

080002f2 <adafruit_soundboard_adjust_volume>:


static void adafruit_soundboard_adjust_volume(adafruit_soundboard_volume_e volume)
{
 80002f2:	b580      	push	{r7, lr}
 80002f4:	b082      	sub	sp, #8
 80002f6:	af00      	add	r7, sp, #0
 80002f8:	4603      	mov	r3, r0
 80002fa:	71fb      	strb	r3, [r7, #7]
    board_init_adafruit_soundboard_adjust_volume(volume);
 80002fc:	79fb      	ldrb	r3, [r7, #7]
 80002fe:	4618      	mov	r0, r3
 8000300:	f005 f89e 	bl	8005440 <board_init_adafruit_soundboard_adjust_volume>
    osDelay(ADAFRUIT_SOUNDBOARD_VOLUME_DELAY_MILLISECONDS);
 8000304:	20c8      	movs	r0, #200	; 0xc8
 8000306:	f000 fa47 	bl	8000798 <osDelay>
    board_init_adafruit_soundboard_adjust_volume(ADAFRUIT_SOUNDBOARD_VOLUME_RELEASE);
 800030a:	2002      	movs	r0, #2
 800030c:	f005 f898 	bl	8005440 <board_init_adafruit_soundboard_adjust_volume>
    osDelay(ADAFRUIT_SOUNDBOARD_VOLUME_DELAY_MILLISECONDS);
 8000310:	20c8      	movs	r0, #200	; 0xc8
 8000312:	f000 fa41 	bl	8000798 <osDelay>

}
 8000316:	bf00      	nop
 8000318:	3708      	adds	r7, #8
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}

0800031e <adafruit_soundboard_enable_disable_relay>:


static void adafruit_soundboard_enable_disable_relay(adafruit_soundboard_relay_e relay,
                                                     adafruit_soundboard_relay_enable_disable_e enable_disable)
{
 800031e:	b580      	push	{r7, lr}
 8000320:	b082      	sub	sp, #8
 8000322:	af00      	add	r7, sp, #0
 8000324:	4603      	mov	r3, r0
 8000326:	460a      	mov	r2, r1
 8000328:	71fb      	strb	r3, [r7, #7]
 800032a:	4613      	mov	r3, r2
 800032c:	71bb      	strb	r3, [r7, #6]
    if (ADAFRUIT_SOUNDBOARD_RELAY_ENABLE == enable_disable)
 800032e:	79bb      	ldrb	r3, [r7, #6]
 8000330:	2b00      	cmp	r3, #0
 8000332:	d104      	bne.n	800033e <adafruit_soundboard_enable_disable_relay+0x20>
    {
        board_init_adafruit_soundboard_enable_relay(relay);
 8000334:	79fb      	ldrb	r3, [r7, #7]
 8000336:	4618      	mov	r0, r3
 8000338:	f005 f9ca 	bl	80056d0 <board_init_adafruit_soundboard_enable_relay>
    }
    else
    {
        board_init_adafruit_soundboard_disable_relay(relay);
    }
}
 800033c:	e003      	b.n	8000346 <adafruit_soundboard_enable_disable_relay+0x28>
        board_init_adafruit_soundboard_disable_relay(relay);
 800033e:	79fb      	ldrb	r3, [r7, #7]
 8000340:	4618      	mov	r0, r3
 8000342:	f005 f9f3 	bl	800572c <board_init_adafruit_soundboard_disable_relay>
}
 8000346:	bf00      	nop
 8000348:	3708      	adds	r7, #8
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}

0800034e <adafruit_soundboard_init>:


void adafruit_soundboard_init(void)
{
 800034e:	b580      	push	{r7, lr}
 8000350:	b082      	sub	sp, #8
 8000352:	af00      	add	r7, sp, #0
    adafruit_soundboard_disable_relay(ADAFRUIT_SOUNDBOARD_RELAY_SOUND_CTRL);
 8000354:	2001      	movs	r0, #1
 8000356:	f000 f86a 	bl	800042e <adafruit_soundboard_disable_relay>
    adafruit_soundboard_disable_relay(ADAFRUIT_SOUNDBOARD_RELAY_LIGHT_CTRL);
 800035a:	2000      	movs	r0, #0
 800035c:	f000 f867 	bl	800042e <adafruit_soundboard_disable_relay>
    adafruit_soundboard_is_playing_audio(); // this sets up the pin as input
 8000360:	f000 f849 	bl	80003f6 <adafruit_soundboard_is_playing_audio>
    adafruit_soundboard_adjust_volume(ADAFRUIT_SOUNDBOARD_VOLUME_RELEASE); // this will release both volume up and down
 8000364:	2002      	movs	r0, #2
 8000366:	f7ff ffc4 	bl	80002f2 <adafruit_soundboard_adjust_volume>
    adafruit_soundboard_enable_gpio_mode(); // not UART mode..
 800036a:	f000 f84b 	bl	8000404 <adafruit_soundboard_enable_gpio_mode>
    for (adafruit_soundboard_trig_e trig = ADAFRUIT_SOUNDBOARD_TRIG_0; trig < NUM_ADAFRUIT_SOUNDBOARD_TRIG; trig = (adafruit_soundboard_trig_e)(trig + 1))
 800036e:	2300      	movs	r3, #0
 8000370:	71fb      	strb	r3, [r7, #7]
 8000372:	e007      	b.n	8000384 <adafruit_soundboard_init+0x36>
    {
        adafruit_soundboard_trigger_enable_disable(trig, ADAFRUIT_SOUNDBOARD_TRIG_DISABLE);
 8000374:	79fb      	ldrb	r3, [r7, #7]
 8000376:	2101      	movs	r1, #1
 8000378:	4618      	mov	r0, r3
 800037a:	f7ff ff86 	bl	800028a <adafruit_soundboard_trigger_enable_disable>
    for (adafruit_soundboard_trig_e trig = ADAFRUIT_SOUNDBOARD_TRIG_0; trig < NUM_ADAFRUIT_SOUNDBOARD_TRIG; trig = (adafruit_soundboard_trig_e)(trig + 1))
 800037e:	79fb      	ldrb	r3, [r7, #7]
 8000380:	3301      	adds	r3, #1
 8000382:	71fb      	strb	r3, [r7, #7]
 8000384:	79fb      	ldrb	r3, [r7, #7]
 8000386:	2b0a      	cmp	r3, #10
 8000388:	d9f4      	bls.n	8000374 <adafruit_soundboard_init+0x26>
//    adafruit_soundboard_trigger_enable_disable(ADAFRUIT_SOUNDBOARD_TRIG_6, ADAFRUIT_SOUNDBOARD_TRIG_DISABLE);
//    adafruit_soundboard_trigger_enable_disable(ADAFRUIT_SOUNDBOARD_TRIG_7, ADAFRUIT_SOUNDBOARD_TRIG_DISABLE);
//    adafruit_soundboard_trigger_enable_disable(ADAFRUIT_SOUNDBOARD_TRIG_8, ADAFRUIT_SOUNDBOARD_TRIG_DISABLE);
//    adafruit_soundboard_trigger_enable_disable(ADAFRUIT_SOUNDBOARD_TRIG_9, ADAFRUIT_SOUNDBOARD_TRIG_DISABLE);
//    adafruit_soundboard_trigger_enable_disable(ADAFRUIT_SOUNDBOARD_TRIG_10, ADAFRUIT_SOUNDBOARD_TRIG_DISABLE);
}
 800038a:	bf00      	nop
 800038c:	bf00      	nop
 800038e:	3708      	adds	r7, #8
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}

08000394 <adafruit_soundboard_power_enable>:


void adafruit_soundboard_power_enable(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
    adafruit_soundboard_power_enable_disable(ADAFRUIT_SOUNDBOARD_POWER_ENABLE);
 8000398:	2000      	movs	r0, #0
 800039a:	f7ff ff69 	bl	8000270 <adafruit_soundboard_power_enable_disable>
}
 800039e:	bf00      	nop
 80003a0:	bd80      	pop	{r7, pc}

080003a2 <adafruit_soundboard_trigger_enable>:
    adafruit_soundboard_power_enable_disable(ADAFRUIT_SOUNDBOARD_POWER_DISABLE);
}


void adafruit_soundboard_trigger_enable(adafruit_soundboard_trig_e trigger)
{
 80003a2:	b580      	push	{r7, lr}
 80003a4:	b082      	sub	sp, #8
 80003a6:	af00      	add	r7, sp, #0
 80003a8:	4603      	mov	r3, r0
 80003aa:	71fb      	strb	r3, [r7, #7]
    adafruit_soundboard_trigger_enable_disable(trigger, ADAFRUIT_SOUNDBOARD_TRIG_ENABLE);
 80003ac:	79fb      	ldrb	r3, [r7, #7]
 80003ae:	2100      	movs	r1, #0
 80003b0:	4618      	mov	r0, r3
 80003b2:	f7ff ff6a 	bl	800028a <adafruit_soundboard_trigger_enable_disable>
}
 80003b6:	bf00      	nop
 80003b8:	3708      	adds	r7, #8
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}

080003be <adafruit_soundboard_trigger_disable>:


void adafruit_soundboard_trigger_disable(adafruit_soundboard_trig_e trigger)
{
 80003be:	b580      	push	{r7, lr}
 80003c0:	b082      	sub	sp, #8
 80003c2:	af00      	add	r7, sp, #0
 80003c4:	4603      	mov	r3, r0
 80003c6:	71fb      	strb	r3, [r7, #7]
    adafruit_soundboard_trigger_enable_disable(trigger, ADAFRUIT_SOUNDBOARD_TRIG_DISABLE);
 80003c8:	79fb      	ldrb	r3, [r7, #7]
 80003ca:	2101      	movs	r1, #1
 80003cc:	4618      	mov	r0, r3
 80003ce:	f7ff ff5c 	bl	800028a <adafruit_soundboard_trigger_enable_disable>
}
 80003d2:	bf00      	nop
 80003d4:	3708      	adds	r7, #8
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}

080003da <adafruit_soundboard_reset_enable>:


void adafruit_soundboard_reset_enable(void)
{
 80003da:	b580      	push	{r7, lr}
 80003dc:	af00      	add	r7, sp, #0
    adafruit_soundboard_reset_enable_disable(ADAFRUIT_SOUNDBOARD_RESET_ENABLE);
 80003de:	2000      	movs	r0, #0
 80003e0:	f7ff ff65 	bl	80002ae <adafruit_soundboard_reset_enable_disable>
}
 80003e4:	bf00      	nop
 80003e6:	bd80      	pop	{r7, pc}

080003e8 <adafruit_soundboard_reset_disable>:


void adafruit_soundboard_reset_disable(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
    adafruit_soundboard_reset_enable_disable(ADAFRUIT_SOUNDBOARD_RESET_DISABLE);
 80003ec:	2001      	movs	r0, #1
 80003ee:	f7ff ff5e 	bl	80002ae <adafruit_soundboard_reset_enable_disable>
}
 80003f2:	bf00      	nop
 80003f4:	bd80      	pop	{r7, pc}

080003f6 <adafruit_soundboard_is_playing_audio>:


bool adafruit_soundboard_is_playing_audio(void)
{
 80003f6:	b580      	push	{r7, lr}
 80003f8:	af00      	add	r7, sp, #0
    return board_init_adafruit_soundboard_is_playing_audio();
 80003fa:	f004 fff9 	bl	80053f0 <board_init_adafruit_soundboard_is_playing_audio>
 80003fe:	4603      	mov	r3, r0
}
 8000400:	4618      	mov	r0, r3
 8000402:	bd80      	pop	{r7, pc}

08000404 <adafruit_soundboard_enable_gpio_mode>:
    adafruit_soundboard_mode(ADAFRUIT_SOUNDBOARD_UART_MODE);
}


void adafruit_soundboard_enable_gpio_mode(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
    adafruit_soundboard_mode(ADAFRUIT_SOUNDBOARD_GPIO_MODE);
 8000408:	2001      	movs	r0, #1
 800040a:	f7ff ff5d 	bl	80002c8 <adafruit_soundboard_mode>
}
 800040e:	bf00      	nop
 8000410:	bd80      	pop	{r7, pc}

08000412 <adafruit_soundboard_enable_relay>:
    }
}


void adafruit_soundboard_enable_relay(adafruit_soundboard_relay_e relay)
{
 8000412:	b580      	push	{r7, lr}
 8000414:	b082      	sub	sp, #8
 8000416:	af00      	add	r7, sp, #0
 8000418:	4603      	mov	r3, r0
 800041a:	71fb      	strb	r3, [r7, #7]
    adafruit_soundboard_enable_disable_relay(relay, ADAFRUIT_SOUNDBOARD_RELAY_ENABLE);
 800041c:	79fb      	ldrb	r3, [r7, #7]
 800041e:	2100      	movs	r1, #0
 8000420:	4618      	mov	r0, r3
 8000422:	f7ff ff7c 	bl	800031e <adafruit_soundboard_enable_disable_relay>
}
 8000426:	bf00      	nop
 8000428:	3708      	adds	r7, #8
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}

0800042e <adafruit_soundboard_disable_relay>:


void adafruit_soundboard_disable_relay(adafruit_soundboard_relay_e relay)
{
 800042e:	b580      	push	{r7, lr}
 8000430:	b082      	sub	sp, #8
 8000432:	af00      	add	r7, sp, #0
 8000434:	4603      	mov	r3, r0
 8000436:	71fb      	strb	r3, [r7, #7]
    adafruit_soundboard_enable_disable_relay(relay, ADAFRUIT_SOUNDBOARD_RELAY_DISABLE);
 8000438:	79fb      	ldrb	r3, [r7, #7]
 800043a:	2101      	movs	r1, #1
 800043c:	4618      	mov	r0, r3
 800043e:	f7ff ff6e 	bl	800031e <adafruit_soundboard_enable_disable_relay>
}
 8000442:	bf00      	nop
 8000444:	3708      	adds	r7, #8
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}

0800044a <task_mn_wild_init>:

task_mn_wild_state_e g_task_mn_wild_state = TASK_MN_WILD_STATE_IDLE;


static void task_mn_wild_init(void)
{
 800044a:	b580      	push	{r7, lr}
 800044c:	af00      	add	r7, sp, #0
    board_init_green_led_on();
 800044e:	f005 fabb 	bl	80059c8 <board_init_green_led_on>
    adafruit_soundboard_power_enable();
 8000452:	f7ff ff9f 	bl	8000394 <adafruit_soundboard_power_enable>
    osDelay(500);
 8000456:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800045a:	f000 f99d 	bl	8000798 <osDelay>
    adafruit_soundboard_reset_enable();
 800045e:	f7ff ffbc 	bl	80003da <adafruit_soundboard_reset_enable>
    osDelay(100);
 8000462:	2064      	movs	r0, #100	; 0x64
 8000464:	f000 f998 	bl	8000798 <osDelay>
    adafruit_soundboard_reset_disable();
 8000468:	f7ff ffbe 	bl	80003e8 <adafruit_soundboard_reset_disable>
    osDelay(100);
 800046c:	2064      	movs	r0, #100	; 0x64
 800046e:	f000 f993 	bl	8000798 <osDelay>
    adafruit_soundboard_init();
 8000472:	f7ff ff6c 	bl	800034e <adafruit_soundboard_init>
    board_init_green_led_off();
 8000476:	f005 fac7 	bl	8005a08 <board_init_green_led_off>
    adafruit_soundboard_enable_relay(ADAFRUIT_SOUNDBOARD_RELAY_SOUND_CTRL);
 800047a:	2001      	movs	r0, #1
 800047c:	f7ff ffc9 	bl	8000412 <adafruit_soundboard_enable_relay>
}
 8000480:	bf00      	nop
 8000482:	bd80      	pop	{r7, pc}

08000484 <task_mn_wild_state>:


task_mn_wild_state_e task_mn_wild_state(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
    return g_task_mn_wild_state;
 8000488:	4b03      	ldr	r3, [pc, #12]	; (8000498 <task_mn_wild_state+0x14>)
 800048a:	781b      	ldrb	r3, [r3, #0]
}
 800048c:	4618      	mov	r0, r3
 800048e:	46bd      	mov	sp, r7
 8000490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000494:	4770      	bx	lr
 8000496:	bf00      	nop
 8000498:	20000090 	.word	0x20000090

0800049c <task_mn_wild_enter_idle>:


void task_mn_wild_enter_idle(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
    g_task_mn_wild_state = TASK_MN_WILD_STATE_IDLE;
 80004a0:	4b03      	ldr	r3, [pc, #12]	; (80004b0 <task_mn_wild_enter_idle+0x14>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	701a      	strb	r2, [r3, #0]
}
 80004a6:	bf00      	nop
 80004a8:	46bd      	mov	sp, r7
 80004aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ae:	4770      	bx	lr
 80004b0:	20000090 	.word	0x20000090

080004b4 <task_mn_wild_play_sound>:


static void task_mn_wild_play_sound(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
    adafruit_soundboard_trigger_enable(ADAFRUIT_SOUNDBOARD_TRIG_1);
 80004b8:	2001      	movs	r0, #1
 80004ba:	f7ff ff72 	bl	80003a2 <adafruit_soundboard_trigger_enable>
    osDelay(250);
 80004be:	20fa      	movs	r0, #250	; 0xfa
 80004c0:	f000 f96a 	bl	8000798 <osDelay>
    adafruit_soundboard_trigger_disable(ADAFRUIT_SOUNDBOARD_TRIG_1);
 80004c4:	2001      	movs	r0, #1
 80004c6:	f7ff ff7a 	bl	80003be <adafruit_soundboard_trigger_disable>
    adafruit_soundboard_enable_relay(ADAFRUIT_SOUNDBOARD_RELAY_LIGHT_CTRL);
 80004ca:	2000      	movs	r0, #0
 80004cc:	f7ff ffa1 	bl	8000412 <adafruit_soundboard_enable_relay>
}
 80004d0:	bf00      	nop
 80004d2:	bd80      	pop	{r7, pc}

080004d4 <task_mn_wild>:


void task_mn_wild(void *argument)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b084      	sub	sp, #16
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
    uint32_t button_pressed_bit = 0;
 80004dc:	2300      	movs	r3, #0
 80004de:	60fb      	str	r3, [r7, #12]
    task_mn_wild_init();
 80004e0:	f7ff ffb3 	bl	800044a <task_mn_wild_init>

    while (1)
    {
        // TODO add debounce for the switch!
        xTaskNotifyWait(0, button_pressed_bit, &button_pressed_bit, portMAX_DELAY);
 80004e4:	68f9      	ldr	r1, [r7, #12]
 80004e6:	f107 020c 	add.w	r2, r7, #12
 80004ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80004ee:	2000      	movs	r0, #0
 80004f0:	f001 fdec 	bl	80020cc <xTaskNotifyWait>
        g_task_mn_wild_state = TASK_MN_WILD_STATE_ACTIVE;
 80004f4:	4b17      	ldr	r3, [pc, #92]	; (8000554 <task_mn_wild+0x80>)
 80004f6:	2201      	movs	r2, #1
 80004f8:	701a      	strb	r2, [r3, #0]
        task_mn_wild_play_sound();
 80004fa:	f7ff ffdb 	bl	80004b4 <task_mn_wild_play_sound>
        while (adafruit_soundboard_is_playing_audio() && (TASK_MN_WILD_STATE_ACTIVE == g_task_mn_wild_state))
 80004fe:	e002      	b.n	8000506 <task_mn_wild+0x32>
        {
            osDelay(100);
 8000500:	2064      	movs	r0, #100	; 0x64
 8000502:	f000 f949 	bl	8000798 <osDelay>
        while (adafruit_soundboard_is_playing_audio() && (TASK_MN_WILD_STATE_ACTIVE == g_task_mn_wild_state))
 8000506:	f7ff ff76 	bl	80003f6 <adafruit_soundboard_is_playing_audio>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	d003      	beq.n	8000518 <task_mn_wild+0x44>
 8000510:	4b10      	ldr	r3, [pc, #64]	; (8000554 <task_mn_wild+0x80>)
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	2b01      	cmp	r3, #1
 8000516:	d0f3      	beq.n	8000500 <task_mn_wild+0x2c>
        }
        if (TASK_MN_WILD_STATE_IDLE == g_task_mn_wild_state)
 8000518:	4b0e      	ldr	r3, [pc, #56]	; (8000554 <task_mn_wild+0x80>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	2b00      	cmp	r3, #0
 800051e:	d111      	bne.n	8000544 <task_mn_wild+0x70>
        {
            adafruit_soundboard_reset_enable();
 8000520:	f7ff ff5b 	bl	80003da <adafruit_soundboard_reset_enable>
            adafruit_soundboard_disable_relay(ADAFRUIT_SOUNDBOARD_RELAY_LIGHT_CTRL);
 8000524:	2000      	movs	r0, #0
 8000526:	f7ff ff82 	bl	800042e <adafruit_soundboard_disable_relay>
            adafruit_soundboard_disable_relay(ADAFRUIT_SOUNDBOARD_RELAY_SOUND_CTRL);
 800052a:	2001      	movs	r0, #1
 800052c:	f7ff ff7f 	bl	800042e <adafruit_soundboard_disable_relay>
            osDelay(1000);
 8000530:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000534:	f000 f930 	bl	8000798 <osDelay>
            adafruit_soundboard_reset_disable();
 8000538:	f7ff ff56 	bl	80003e8 <adafruit_soundboard_reset_disable>
            adafruit_soundboard_enable_relay(ADAFRUIT_SOUNDBOARD_RELAY_SOUND_CTRL); // leave sound enabled
 800053c:	2001      	movs	r0, #1
 800053e:	f7ff ff68 	bl	8000412 <adafruit_soundboard_enable_relay>
 8000542:	e002      	b.n	800054a <task_mn_wild+0x76>
        }
        else
        {
            g_task_mn_wild_state = TASK_MN_WILD_STATE_IDLE;
 8000544:	4b03      	ldr	r3, [pc, #12]	; (8000554 <task_mn_wild+0x80>)
 8000546:	2200      	movs	r2, #0
 8000548:	701a      	strb	r2, [r3, #0]
        }
        adafruit_soundboard_disable_relay(ADAFRUIT_SOUNDBOARD_RELAY_LIGHT_CTRL); // leave sound enabled
 800054a:	2000      	movs	r0, #0
 800054c:	f7ff ff6f 	bl	800042e <adafruit_soundboard_disable_relay>
        xTaskNotifyWait(0, button_pressed_bit, &button_pressed_bit, portMAX_DELAY);
 8000550:	e7c8      	b.n	80004e4 <task_mn_wild+0x10>
 8000552:	bf00      	nop
 8000554:	20000090 	.word	0x20000090

08000558 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	4603      	mov	r3, r0
 8000560:	6039      	str	r1, [r7, #0]
 8000562:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000568:	2b00      	cmp	r3, #0
 800056a:	db0a      	blt.n	8000582 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800056c:	683b      	ldr	r3, [r7, #0]
 800056e:	b2da      	uxtb	r2, r3
 8000570:	490c      	ldr	r1, [pc, #48]	; (80005a4 <__NVIC_SetPriority+0x4c>)
 8000572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000576:	0112      	lsls	r2, r2, #4
 8000578:	b2d2      	uxtb	r2, r2
 800057a:	440b      	add	r3, r1
 800057c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000580:	e00a      	b.n	8000598 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000582:	683b      	ldr	r3, [r7, #0]
 8000584:	b2da      	uxtb	r2, r3
 8000586:	4908      	ldr	r1, [pc, #32]	; (80005a8 <__NVIC_SetPriority+0x50>)
 8000588:	79fb      	ldrb	r3, [r7, #7]
 800058a:	f003 030f 	and.w	r3, r3, #15
 800058e:	3b04      	subs	r3, #4
 8000590:	0112      	lsls	r2, r2, #4
 8000592:	b2d2      	uxtb	r2, r2
 8000594:	440b      	add	r3, r1
 8000596:	761a      	strb	r2, [r3, #24]
}
 8000598:	bf00      	nop
 800059a:	370c      	adds	r7, #12
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr
 80005a4:	e000e100 	.word	0xe000e100
 80005a8:	e000ed00 	.word	0xe000ed00

080005ac <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80005b0:	4b05      	ldr	r3, [pc, #20]	; (80005c8 <SysTick_Handler+0x1c>)
 80005b2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80005b4:	f001 fcfe 	bl	8001fb4 <xTaskGetSchedulerState>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b01      	cmp	r3, #1
 80005bc:	d001      	beq.n	80005c2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80005be:	f002 fc1b 	bl	8002df8 <xPortSysTickHandler>
  }
}
 80005c2:	bf00      	nop
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	e000e010 	.word	0xe000e010

080005cc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80005d0:	2100      	movs	r1, #0
 80005d2:	f06f 0004 	mvn.w	r0, #4
 80005d6:	f7ff ffbf 	bl	8000558 <__NVIC_SetPriority>
#endif
}
 80005da:	bf00      	nop
 80005dc:	bd80      	pop	{r7, pc}
	...

080005e0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80005e6:	f3ef 8305 	mrs	r3, IPSR
 80005ea:	603b      	str	r3, [r7, #0]
  return(result);
 80005ec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d003      	beq.n	80005fa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80005f2:	f06f 0305 	mvn.w	r3, #5
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	e00c      	b.n	8000614 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80005fa:	4b0a      	ldr	r3, [pc, #40]	; (8000624 <osKernelInitialize+0x44>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d105      	bne.n	800060e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8000602:	4b08      	ldr	r3, [pc, #32]	; (8000624 <osKernelInitialize+0x44>)
 8000604:	2201      	movs	r2, #1
 8000606:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8000608:	2300      	movs	r3, #0
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	e002      	b.n	8000614 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800060e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000612:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8000614:	687b      	ldr	r3, [r7, #4]
}
 8000616:	4618      	mov	r0, r3
 8000618:	370c      	adds	r7, #12
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	20000094 	.word	0x20000094

08000628 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800062e:	f3ef 8305 	mrs	r3, IPSR
 8000632:	603b      	str	r3, [r7, #0]
  return(result);
 8000634:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8000636:	2b00      	cmp	r3, #0
 8000638:	d003      	beq.n	8000642 <osKernelStart+0x1a>
    stat = osErrorISR;
 800063a:	f06f 0305 	mvn.w	r3, #5
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	e010      	b.n	8000664 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8000642:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <osKernelStart+0x48>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	2b01      	cmp	r3, #1
 8000648:	d109      	bne.n	800065e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800064a:	f7ff ffbf 	bl	80005cc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800064e:	4b08      	ldr	r3, [pc, #32]	; (8000670 <osKernelStart+0x48>)
 8000650:	2202      	movs	r2, #2
 8000652:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8000654:	f001 f866 	bl	8001724 <vTaskStartScheduler>
      stat = osOK;
 8000658:	2300      	movs	r3, #0
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	e002      	b.n	8000664 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800065e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000662:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8000664:	687b      	ldr	r3, [r7, #4]
}
 8000666:	4618      	mov	r0, r3
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	20000094 	.word	0x20000094

08000674 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b08e      	sub	sp, #56	; 0x38
 8000678:	af04      	add	r7, sp, #16
 800067a:	60f8      	str	r0, [r7, #12]
 800067c:	60b9      	str	r1, [r7, #8]
 800067e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8000680:	2300      	movs	r3, #0
 8000682:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8000684:	f3ef 8305 	mrs	r3, IPSR
 8000688:	617b      	str	r3, [r7, #20]
  return(result);
 800068a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800068c:	2b00      	cmp	r3, #0
 800068e:	d17e      	bne.n	800078e <osThreadNew+0x11a>
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d07b      	beq.n	800078e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8000696:	2380      	movs	r3, #128	; 0x80
 8000698:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800069a:	2318      	movs	r3, #24
 800069c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800069e:	2300      	movs	r3, #0
 80006a0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80006a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006a6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d045      	beq.n	800073a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d002      	beq.n	80006bc <osThreadNew+0x48>
        name = attr->name;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	699b      	ldr	r3, [r3, #24]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d002      	beq.n	80006ca <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	699b      	ldr	r3, [r3, #24]
 80006c8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80006ca:	69fb      	ldr	r3, [r7, #28]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d008      	beq.n	80006e2 <osThreadNew+0x6e>
 80006d0:	69fb      	ldr	r3, [r7, #28]
 80006d2:	2b38      	cmp	r3, #56	; 0x38
 80006d4:	d805      	bhi.n	80006e2 <osThreadNew+0x6e>
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	685b      	ldr	r3, [r3, #4]
 80006da:	f003 0301 	and.w	r3, r3, #1
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <osThreadNew+0x72>
        return (NULL);
 80006e2:	2300      	movs	r3, #0
 80006e4:	e054      	b.n	8000790 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	695b      	ldr	r3, [r3, #20]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d003      	beq.n	80006f6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	695b      	ldr	r3, [r3, #20]
 80006f2:	089b      	lsrs	r3, r3, #2
 80006f4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	689b      	ldr	r3, [r3, #8]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d00e      	beq.n	800071c <osThreadNew+0xa8>
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	68db      	ldr	r3, [r3, #12]
 8000702:	2b5b      	cmp	r3, #91	; 0x5b
 8000704:	d90a      	bls.n	800071c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800070a:	2b00      	cmp	r3, #0
 800070c:	d006      	beq.n	800071c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	695b      	ldr	r3, [r3, #20]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d002      	beq.n	800071c <osThreadNew+0xa8>
        mem = 1;
 8000716:	2301      	movs	r3, #1
 8000718:	61bb      	str	r3, [r7, #24]
 800071a:	e010      	b.n	800073e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	689b      	ldr	r3, [r3, #8]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d10c      	bne.n	800073e <osThreadNew+0xca>
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	68db      	ldr	r3, [r3, #12]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d108      	bne.n	800073e <osThreadNew+0xca>
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	691b      	ldr	r3, [r3, #16]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d104      	bne.n	800073e <osThreadNew+0xca>
          mem = 0;
 8000734:	2300      	movs	r3, #0
 8000736:	61bb      	str	r3, [r7, #24]
 8000738:	e001      	b.n	800073e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800073a:	2300      	movs	r3, #0
 800073c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800073e:	69bb      	ldr	r3, [r7, #24]
 8000740:	2b01      	cmp	r3, #1
 8000742:	d110      	bne.n	8000766 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8000748:	687a      	ldr	r2, [r7, #4]
 800074a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800074c:	9202      	str	r2, [sp, #8]
 800074e:	9301      	str	r3, [sp, #4]
 8000750:	69fb      	ldr	r3, [r7, #28]
 8000752:	9300      	str	r3, [sp, #0]
 8000754:	68bb      	ldr	r3, [r7, #8]
 8000756:	6a3a      	ldr	r2, [r7, #32]
 8000758:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800075a:	68f8      	ldr	r0, [r7, #12]
 800075c:	f000 fe0c 	bl	8001378 <xTaskCreateStatic>
 8000760:	4603      	mov	r3, r0
 8000762:	613b      	str	r3, [r7, #16]
 8000764:	e013      	b.n	800078e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8000766:	69bb      	ldr	r3, [r7, #24]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d110      	bne.n	800078e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800076c:	6a3b      	ldr	r3, [r7, #32]
 800076e:	b29a      	uxth	r2, r3
 8000770:	f107 0310 	add.w	r3, r7, #16
 8000774:	9301      	str	r3, [sp, #4]
 8000776:	69fb      	ldr	r3, [r7, #28]
 8000778:	9300      	str	r3, [sp, #0]
 800077a:	68bb      	ldr	r3, [r7, #8]
 800077c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800077e:	68f8      	ldr	r0, [r7, #12]
 8000780:	f000 fe57 	bl	8001432 <xTaskCreate>
 8000784:	4603      	mov	r3, r0
 8000786:	2b01      	cmp	r3, #1
 8000788:	d001      	beq.n	800078e <osThreadNew+0x11a>
            hTask = NULL;
 800078a:	2300      	movs	r3, #0
 800078c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800078e:	693b      	ldr	r3, [r7, #16]
}
 8000790:	4618      	mov	r0, r3
 8000792:	3728      	adds	r7, #40	; 0x28
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80007a0:	f3ef 8305 	mrs	r3, IPSR
 80007a4:	60bb      	str	r3, [r7, #8]
  return(result);
 80007a6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d003      	beq.n	80007b4 <osDelay+0x1c>
    stat = osErrorISR;
 80007ac:	f06f 0305 	mvn.w	r3, #5
 80007b0:	60fb      	str	r3, [r7, #12]
 80007b2:	e007      	b.n	80007c4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80007b4:	2300      	movs	r3, #0
 80007b6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d002      	beq.n	80007c4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80007be:	6878      	ldr	r0, [r7, #4]
 80007c0:	f000 ff7c 	bl	80016bc <vTaskDelay>
    }
  }

  return (stat);
 80007c4:	68fb      	ldr	r3, [r7, #12]
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3710      	adds	r7, #16
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
	...

080007d0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80007d0:	b480      	push	{r7}
 80007d2:	b085      	sub	sp, #20
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	60f8      	str	r0, [r7, #12]
 80007d8:	60b9      	str	r1, [r7, #8]
 80007da:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	4a07      	ldr	r2, [pc, #28]	; (80007fc <vApplicationGetIdleTaskMemory+0x2c>)
 80007e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80007e2:	68bb      	ldr	r3, [r7, #8]
 80007e4:	4a06      	ldr	r2, [pc, #24]	; (8000800 <vApplicationGetIdleTaskMemory+0x30>)
 80007e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	2280      	movs	r2, #128	; 0x80
 80007ec:	601a      	str	r2, [r3, #0]
}
 80007ee:	bf00      	nop
 80007f0:	3714      	adds	r7, #20
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	20000098 	.word	0x20000098
 8000800:	200000f4 	.word	0x200000f4

08000804 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8000804:	b480      	push	{r7}
 8000806:	b085      	sub	sp, #20
 8000808:	af00      	add	r7, sp, #0
 800080a:	60f8      	str	r0, [r7, #12]
 800080c:	60b9      	str	r1, [r7, #8]
 800080e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	4a07      	ldr	r2, [pc, #28]	; (8000830 <vApplicationGetTimerTaskMemory+0x2c>)
 8000814:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8000816:	68bb      	ldr	r3, [r7, #8]
 8000818:	4a06      	ldr	r2, [pc, #24]	; (8000834 <vApplicationGetTimerTaskMemory+0x30>)
 800081a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000822:	601a      	str	r2, [r3, #0]
}
 8000824:	bf00      	nop
 8000826:	3714      	adds	r7, #20
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr
 8000830:	200002f4 	.word	0x200002f4
 8000834:	20000350 	.word	0x20000350

08000838 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	f103 0208 	add.w	r2, r3, #8
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000850:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	f103 0208 	add.w	r2, r3, #8
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	f103 0208 	add.w	r2, r3, #8
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800086c:	bf00      	nop
 800086e:	370c      	adds	r7, #12
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr

08000878 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	2200      	movs	r2, #0
 8000884:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000886:	bf00      	nop
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr

08000892 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000892:	b480      	push	{r7}
 8000894:	b085      	sub	sp, #20
 8000896:	af00      	add	r7, sp, #0
 8000898:	6078      	str	r0, [r7, #4]
 800089a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	685b      	ldr	r3, [r3, #4]
 80008a0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	68fa      	ldr	r2, [r7, #12]
 80008a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	689a      	ldr	r2, [r3, #8]
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	689b      	ldr	r3, [r3, #8]
 80008b4:	683a      	ldr	r2, [r7, #0]
 80008b6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	683a      	ldr	r2, [r7, #0]
 80008bc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	687a      	ldr	r2, [r7, #4]
 80008c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	1c5a      	adds	r2, r3, #1
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	601a      	str	r2, [r3, #0]
}
 80008ce:	bf00      	nop
 80008d0:	3714      	adds	r7, #20
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr

080008da <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80008da:	b480      	push	{r7}
 80008dc:	b085      	sub	sp, #20
 80008de:	af00      	add	r7, sp, #0
 80008e0:	6078      	str	r0, [r7, #4]
 80008e2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80008ea:	68bb      	ldr	r3, [r7, #8]
 80008ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80008f0:	d103      	bne.n	80008fa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	691b      	ldr	r3, [r3, #16]
 80008f6:	60fb      	str	r3, [r7, #12]
 80008f8:	e00c      	b.n	8000914 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	3308      	adds	r3, #8
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	e002      	b.n	8000908 <vListInsert+0x2e>
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	685b      	ldr	r3, [r3, #4]
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	685b      	ldr	r3, [r3, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	68ba      	ldr	r2, [r7, #8]
 8000910:	429a      	cmp	r2, r3
 8000912:	d2f6      	bcs.n	8000902 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	685a      	ldr	r2, [r3, #4]
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	685b      	ldr	r3, [r3, #4]
 8000920:	683a      	ldr	r2, [r7, #0]
 8000922:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	68fa      	ldr	r2, [r7, #12]
 8000928:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	683a      	ldr	r2, [r7, #0]
 800092e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	687a      	ldr	r2, [r7, #4]
 8000934:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	1c5a      	adds	r2, r3, #1
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	601a      	str	r2, [r3, #0]
}
 8000940:	bf00      	nop
 8000942:	3714      	adds	r7, #20
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr

0800094c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800094c:	b480      	push	{r7}
 800094e:	b085      	sub	sp, #20
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	691b      	ldr	r3, [r3, #16]
 8000958:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	685b      	ldr	r3, [r3, #4]
 800095e:	687a      	ldr	r2, [r7, #4]
 8000960:	6892      	ldr	r2, [r2, #8]
 8000962:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	689b      	ldr	r3, [r3, #8]
 8000968:	687a      	ldr	r2, [r7, #4]
 800096a:	6852      	ldr	r2, [r2, #4]
 800096c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	687a      	ldr	r2, [r7, #4]
 8000974:	429a      	cmp	r2, r3
 8000976:	d103      	bne.n	8000980 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	689a      	ldr	r2, [r3, #8]
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	2200      	movs	r2, #0
 8000984:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	1e5a      	subs	r2, r3, #1
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	681b      	ldr	r3, [r3, #0]
}
 8000994:	4618      	mov	r0, r3
 8000996:	3714      	adds	r7, #20
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr

080009a0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b084      	sub	sp, #16
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
 80009a8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d10a      	bne.n	80009ca <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80009b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009b8:	f383 8811 	msr	BASEPRI, r3
 80009bc:	f3bf 8f6f 	isb	sy
 80009c0:	f3bf 8f4f 	dsb	sy
 80009c4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80009c6:	bf00      	nop
 80009c8:	e7fe      	b.n	80009c8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80009ca:	f002 f983 	bl	8002cd4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80009d6:	68f9      	ldr	r1, [r7, #12]
 80009d8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80009da:	fb01 f303 	mul.w	r3, r1, r3
 80009de:	441a      	add	r2, r3
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	2200      	movs	r2, #0
 80009e8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	681a      	ldr	r2, [r3, #0]
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80009fa:	3b01      	subs	r3, #1
 80009fc:	68f9      	ldr	r1, [r7, #12]
 80009fe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000a00:	fb01 f303 	mul.w	r3, r1, r3
 8000a04:	441a      	add	r2, r3
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	22ff      	movs	r2, #255	; 0xff
 8000a0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	22ff      	movs	r2, #255	; 0xff
 8000a16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d114      	bne.n	8000a4a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	691b      	ldr	r3, [r3, #16]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d01a      	beq.n	8000a5e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	3310      	adds	r3, #16
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f001 f903 	bl	8001c38 <xTaskRemoveFromEventList>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d012      	beq.n	8000a5e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8000a38:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <xQueueGenericReset+0xcc>)
 8000a3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	f3bf 8f4f 	dsb	sy
 8000a44:	f3bf 8f6f 	isb	sy
 8000a48:	e009      	b.n	8000a5e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	3310      	adds	r3, #16
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f7ff fef2 	bl	8000838 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	3324      	adds	r3, #36	; 0x24
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f7ff feed 	bl	8000838 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8000a5e:	f002 f969 	bl	8002d34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8000a62:	2301      	movs	r3, #1
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	3710      	adds	r7, #16
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	e000ed04 	.word	0xe000ed04

08000a70 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08e      	sub	sp, #56	; 0x38
 8000a74:	af02      	add	r7, sp, #8
 8000a76:	60f8      	str	r0, [r7, #12]
 8000a78:	60b9      	str	r1, [r7, #8]
 8000a7a:	607a      	str	r2, [r7, #4]
 8000a7c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d10a      	bne.n	8000a9a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8000a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a88:	f383 8811 	msr	BASEPRI, r3
 8000a8c:	f3bf 8f6f 	isb	sy
 8000a90:	f3bf 8f4f 	dsb	sy
 8000a94:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8000a96:	bf00      	nop
 8000a98:	e7fe      	b.n	8000a98 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d10a      	bne.n	8000ab6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8000aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000aa4:	f383 8811 	msr	BASEPRI, r3
 8000aa8:	f3bf 8f6f 	isb	sy
 8000aac:	f3bf 8f4f 	dsb	sy
 8000ab0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8000ab2:	bf00      	nop
 8000ab4:	e7fe      	b.n	8000ab4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d002      	beq.n	8000ac2 <xQueueGenericCreateStatic+0x52>
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <xQueueGenericCreateStatic+0x56>
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	e000      	b.n	8000ac8 <xQueueGenericCreateStatic+0x58>
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d10a      	bne.n	8000ae2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8000acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ad0:	f383 8811 	msr	BASEPRI, r3
 8000ad4:	f3bf 8f6f 	isb	sy
 8000ad8:	f3bf 8f4f 	dsb	sy
 8000adc:	623b      	str	r3, [r7, #32]
}
 8000ade:	bf00      	nop
 8000ae0:	e7fe      	b.n	8000ae0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d102      	bne.n	8000aee <xQueueGenericCreateStatic+0x7e>
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d101      	bne.n	8000af2 <xQueueGenericCreateStatic+0x82>
 8000aee:	2301      	movs	r3, #1
 8000af0:	e000      	b.n	8000af4 <xQueueGenericCreateStatic+0x84>
 8000af2:	2300      	movs	r3, #0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d10a      	bne.n	8000b0e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8000af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000afc:	f383 8811 	msr	BASEPRI, r3
 8000b00:	f3bf 8f6f 	isb	sy
 8000b04:	f3bf 8f4f 	dsb	sy
 8000b08:	61fb      	str	r3, [r7, #28]
}
 8000b0a:	bf00      	nop
 8000b0c:	e7fe      	b.n	8000b0c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8000b0e:	2350      	movs	r3, #80	; 0x50
 8000b10:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	2b50      	cmp	r3, #80	; 0x50
 8000b16:	d00a      	beq.n	8000b2e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8000b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b1c:	f383 8811 	msr	BASEPRI, r3
 8000b20:	f3bf 8f6f 	isb	sy
 8000b24:	f3bf 8f4f 	dsb	sy
 8000b28:	61bb      	str	r3, [r7, #24]
}
 8000b2a:	bf00      	nop
 8000b2c:	e7fe      	b.n	8000b2c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8000b2e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8000b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d00d      	beq.n	8000b56 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8000b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000b42:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8000b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b48:	9300      	str	r3, [sp, #0]
 8000b4a:	4613      	mov	r3, r2
 8000b4c:	687a      	ldr	r2, [r7, #4]
 8000b4e:	68b9      	ldr	r1, [r7, #8]
 8000b50:	68f8      	ldr	r0, [r7, #12]
 8000b52:	f000 f805 	bl	8000b60 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8000b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3730      	adds	r7, #48	; 0x30
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	60f8      	str	r0, [r7, #12]
 8000b68:	60b9      	str	r1, [r7, #8]
 8000b6a:	607a      	str	r2, [r7, #4]
 8000b6c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8000b6e:	68bb      	ldr	r3, [r7, #8]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d103      	bne.n	8000b7c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000b74:	69bb      	ldr	r3, [r7, #24]
 8000b76:	69ba      	ldr	r2, [r7, #24]
 8000b78:	601a      	str	r2, [r3, #0]
 8000b7a:	e002      	b.n	8000b82 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000b7c:	69bb      	ldr	r3, [r7, #24]
 8000b7e:	687a      	ldr	r2, [r7, #4]
 8000b80:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8000b82:	69bb      	ldr	r3, [r7, #24]
 8000b84:	68fa      	ldr	r2, [r7, #12]
 8000b86:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8000b88:	69bb      	ldr	r3, [r7, #24]
 8000b8a:	68ba      	ldr	r2, [r7, #8]
 8000b8c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000b8e:	2101      	movs	r1, #1
 8000b90:	69b8      	ldr	r0, [r7, #24]
 8000b92:	f7ff ff05 	bl	80009a0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8000b96:	69bb      	ldr	r3, [r7, #24]
 8000b98:	78fa      	ldrb	r2, [r7, #3]
 8000b9a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8000b9e:	bf00      	nop
 8000ba0:	3710      	adds	r7, #16
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
	...

08000ba8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08e      	sub	sp, #56	; 0x38
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	60f8      	str	r0, [r7, #12]
 8000bb0:	60b9      	str	r1, [r7, #8]
 8000bb2:	607a      	str	r2, [r7, #4]
 8000bb4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8000bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d10a      	bne.n	8000bda <xQueueGenericSend+0x32>
	__asm volatile
 8000bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bc8:	f383 8811 	msr	BASEPRI, r3
 8000bcc:	f3bf 8f6f 	isb	sy
 8000bd0:	f3bf 8f4f 	dsb	sy
 8000bd4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8000bd6:	bf00      	nop
 8000bd8:	e7fe      	b.n	8000bd8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000bda:	68bb      	ldr	r3, [r7, #8]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d103      	bne.n	8000be8 <xQueueGenericSend+0x40>
 8000be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d101      	bne.n	8000bec <xQueueGenericSend+0x44>
 8000be8:	2301      	movs	r3, #1
 8000bea:	e000      	b.n	8000bee <xQueueGenericSend+0x46>
 8000bec:	2300      	movs	r3, #0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d10a      	bne.n	8000c08 <xQueueGenericSend+0x60>
	__asm volatile
 8000bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bf6:	f383 8811 	msr	BASEPRI, r3
 8000bfa:	f3bf 8f6f 	isb	sy
 8000bfe:	f3bf 8f4f 	dsb	sy
 8000c02:	627b      	str	r3, [r7, #36]	; 0x24
}
 8000c04:	bf00      	nop
 8000c06:	e7fe      	b.n	8000c06 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	2b02      	cmp	r3, #2
 8000c0c:	d103      	bne.n	8000c16 <xQueueGenericSend+0x6e>
 8000c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c12:	2b01      	cmp	r3, #1
 8000c14:	d101      	bne.n	8000c1a <xQueueGenericSend+0x72>
 8000c16:	2301      	movs	r3, #1
 8000c18:	e000      	b.n	8000c1c <xQueueGenericSend+0x74>
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d10a      	bne.n	8000c36 <xQueueGenericSend+0x8e>
	__asm volatile
 8000c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c24:	f383 8811 	msr	BASEPRI, r3
 8000c28:	f3bf 8f6f 	isb	sy
 8000c2c:	f3bf 8f4f 	dsb	sy
 8000c30:	623b      	str	r3, [r7, #32]
}
 8000c32:	bf00      	nop
 8000c34:	e7fe      	b.n	8000c34 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000c36:	f001 f9bd 	bl	8001fb4 <xTaskGetSchedulerState>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d102      	bne.n	8000c46 <xQueueGenericSend+0x9e>
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d101      	bne.n	8000c4a <xQueueGenericSend+0xa2>
 8000c46:	2301      	movs	r3, #1
 8000c48:	e000      	b.n	8000c4c <xQueueGenericSend+0xa4>
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d10a      	bne.n	8000c66 <xQueueGenericSend+0xbe>
	__asm volatile
 8000c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c54:	f383 8811 	msr	BASEPRI, r3
 8000c58:	f3bf 8f6f 	isb	sy
 8000c5c:	f3bf 8f4f 	dsb	sy
 8000c60:	61fb      	str	r3, [r7, #28]
}
 8000c62:	bf00      	nop
 8000c64:	e7fe      	b.n	8000c64 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000c66:	f002 f835 	bl	8002cd4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d302      	bcc.n	8000c7c <xQueueGenericSend+0xd4>
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	2b02      	cmp	r3, #2
 8000c7a:	d129      	bne.n	8000cd0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000c7c:	683a      	ldr	r2, [r7, #0]
 8000c7e:	68b9      	ldr	r1, [r7, #8]
 8000c80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000c82:	f000 fa0b 	bl	800109c <prvCopyDataToQueue>
 8000c86:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d010      	beq.n	8000cb2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c92:	3324      	adds	r3, #36	; 0x24
 8000c94:	4618      	mov	r0, r3
 8000c96:	f000 ffcf 	bl	8001c38 <xTaskRemoveFromEventList>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d013      	beq.n	8000cc8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8000ca0:	4b3f      	ldr	r3, [pc, #252]	; (8000da0 <xQueueGenericSend+0x1f8>)
 8000ca2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	f3bf 8f4f 	dsb	sy
 8000cac:	f3bf 8f6f 	isb	sy
 8000cb0:	e00a      	b.n	8000cc8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8000cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d007      	beq.n	8000cc8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8000cb8:	4b39      	ldr	r3, [pc, #228]	; (8000da0 <xQueueGenericSend+0x1f8>)
 8000cba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	f3bf 8f4f 	dsb	sy
 8000cc4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8000cc8:	f002 f834 	bl	8002d34 <vPortExitCritical>
				return pdPASS;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	e063      	b.n	8000d98 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d103      	bne.n	8000cde <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000cd6:	f002 f82d 	bl	8002d34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	e05c      	b.n	8000d98 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000cde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d106      	bne.n	8000cf2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f001 f809 	bl	8001d00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000cf2:	f002 f81f 	bl	8002d34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000cf6:	f000 fd7b 	bl	80017f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000cfa:	f001 ffeb 	bl	8002cd4 <vPortEnterCritical>
 8000cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000d04:	b25b      	sxtb	r3, r3
 8000d06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d0a:	d103      	bne.n	8000d14 <xQueueGenericSend+0x16c>
 8000d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d0e:	2200      	movs	r2, #0
 8000d10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000d1a:	b25b      	sxtb	r3, r3
 8000d1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d20:	d103      	bne.n	8000d2a <xQueueGenericSend+0x182>
 8000d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d24:	2200      	movs	r2, #0
 8000d26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000d2a:	f002 f803 	bl	8002d34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000d2e:	1d3a      	adds	r2, r7, #4
 8000d30:	f107 0314 	add.w	r3, r7, #20
 8000d34:	4611      	mov	r1, r2
 8000d36:	4618      	mov	r0, r3
 8000d38:	f000 fff8 	bl	8001d2c <xTaskCheckForTimeOut>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d124      	bne.n	8000d8c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000d42:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000d44:	f000 faa2 	bl	800128c <prvIsQueueFull>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d018      	beq.n	8000d80 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d50:	3310      	adds	r3, #16
 8000d52:	687a      	ldr	r2, [r7, #4]
 8000d54:	4611      	mov	r1, r2
 8000d56:	4618      	mov	r0, r3
 8000d58:	f000 ff1e 	bl	8001b98 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8000d5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000d5e:	f000 fa2d 	bl	80011bc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8000d62:	f000 fd53 	bl	800180c <xTaskResumeAll>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	f47f af7c 	bne.w	8000c66 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8000d6e:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <xQueueGenericSend+0x1f8>)
 8000d70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	f3bf 8f4f 	dsb	sy
 8000d7a:	f3bf 8f6f 	isb	sy
 8000d7e:	e772      	b.n	8000c66 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8000d80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000d82:	f000 fa1b 	bl	80011bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000d86:	f000 fd41 	bl	800180c <xTaskResumeAll>
 8000d8a:	e76c      	b.n	8000c66 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8000d8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000d8e:	f000 fa15 	bl	80011bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000d92:	f000 fd3b 	bl	800180c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8000d96:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3738      	adds	r7, #56	; 0x38
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	e000ed04 	.word	0xe000ed04

08000da4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b090      	sub	sp, #64	; 0x40
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	60f8      	str	r0, [r7, #12]
 8000dac:	60b9      	str	r1, [r7, #8]
 8000dae:	607a      	str	r2, [r7, #4]
 8000db0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8000db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d10a      	bne.n	8000dd2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8000dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000dc0:	f383 8811 	msr	BASEPRI, r3
 8000dc4:	f3bf 8f6f 	isb	sy
 8000dc8:	f3bf 8f4f 	dsb	sy
 8000dcc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8000dce:	bf00      	nop
 8000dd0:	e7fe      	b.n	8000dd0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000dd2:	68bb      	ldr	r3, [r7, #8]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d103      	bne.n	8000de0 <xQueueGenericSendFromISR+0x3c>
 8000dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d101      	bne.n	8000de4 <xQueueGenericSendFromISR+0x40>
 8000de0:	2301      	movs	r3, #1
 8000de2:	e000      	b.n	8000de6 <xQueueGenericSendFromISR+0x42>
 8000de4:	2300      	movs	r3, #0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d10a      	bne.n	8000e00 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8000dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000dee:	f383 8811 	msr	BASEPRI, r3
 8000df2:	f3bf 8f6f 	isb	sy
 8000df6:	f3bf 8f4f 	dsb	sy
 8000dfa:	627b      	str	r3, [r7, #36]	; 0x24
}
 8000dfc:	bf00      	nop
 8000dfe:	e7fe      	b.n	8000dfe <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	2b02      	cmp	r3, #2
 8000e04:	d103      	bne.n	8000e0e <xQueueGenericSendFromISR+0x6a>
 8000e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d101      	bne.n	8000e12 <xQueueGenericSendFromISR+0x6e>
 8000e0e:	2301      	movs	r3, #1
 8000e10:	e000      	b.n	8000e14 <xQueueGenericSendFromISR+0x70>
 8000e12:	2300      	movs	r3, #0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d10a      	bne.n	8000e2e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8000e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e1c:	f383 8811 	msr	BASEPRI, r3
 8000e20:	f3bf 8f6f 	isb	sy
 8000e24:	f3bf 8f4f 	dsb	sy
 8000e28:	623b      	str	r3, [r7, #32]
}
 8000e2a:	bf00      	nop
 8000e2c:	e7fe      	b.n	8000e2c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000e2e:	f002 f833 	bl	8002e98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8000e32:	f3ef 8211 	mrs	r2, BASEPRI
 8000e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e3a:	f383 8811 	msr	BASEPRI, r3
 8000e3e:	f3bf 8f6f 	isb	sy
 8000e42:	f3bf 8f4f 	dsb	sy
 8000e46:	61fa      	str	r2, [r7, #28]
 8000e48:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8000e4a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000e4c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e56:	429a      	cmp	r2, r3
 8000e58:	d302      	bcc.n	8000e60 <xQueueGenericSendFromISR+0xbc>
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	2b02      	cmp	r3, #2
 8000e5e:	d12f      	bne.n	8000ec0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8000e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000e66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000e70:	683a      	ldr	r2, [r7, #0]
 8000e72:	68b9      	ldr	r1, [r7, #8]
 8000e74:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000e76:	f000 f911 	bl	800109c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8000e7a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8000e7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e82:	d112      	bne.n	8000eaa <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d016      	beq.n	8000eba <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e8e:	3324      	adds	r3, #36	; 0x24
 8000e90:	4618      	mov	r0, r3
 8000e92:	f000 fed1 	bl	8001c38 <xTaskRemoveFromEventList>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d00e      	beq.n	8000eba <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d00b      	beq.n	8000eba <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	e007      	b.n	8000eba <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000eaa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000eae:	3301      	adds	r3, #1
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	b25a      	sxtb	r2, r3
 8000eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000eb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8000ebe:	e001      	b.n	8000ec4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ec6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8000ece:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8000ed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3740      	adds	r7, #64	; 0x40
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
	...

08000edc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b08c      	sub	sp, #48	; 0x30
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	60f8      	str	r0, [r7, #12]
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8000ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d10a      	bne.n	8000f0c <xQueueReceive+0x30>
	__asm volatile
 8000ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000efa:	f383 8811 	msr	BASEPRI, r3
 8000efe:	f3bf 8f6f 	isb	sy
 8000f02:	f3bf 8f4f 	dsb	sy
 8000f06:	623b      	str	r3, [r7, #32]
}
 8000f08:	bf00      	nop
 8000f0a:	e7fe      	b.n	8000f0a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d103      	bne.n	8000f1a <xQueueReceive+0x3e>
 8000f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d101      	bne.n	8000f1e <xQueueReceive+0x42>
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e000      	b.n	8000f20 <xQueueReceive+0x44>
 8000f1e:	2300      	movs	r3, #0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d10a      	bne.n	8000f3a <xQueueReceive+0x5e>
	__asm volatile
 8000f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f28:	f383 8811 	msr	BASEPRI, r3
 8000f2c:	f3bf 8f6f 	isb	sy
 8000f30:	f3bf 8f4f 	dsb	sy
 8000f34:	61fb      	str	r3, [r7, #28]
}
 8000f36:	bf00      	nop
 8000f38:	e7fe      	b.n	8000f38 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000f3a:	f001 f83b 	bl	8001fb4 <xTaskGetSchedulerState>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d102      	bne.n	8000f4a <xQueueReceive+0x6e>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d101      	bne.n	8000f4e <xQueueReceive+0x72>
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e000      	b.n	8000f50 <xQueueReceive+0x74>
 8000f4e:	2300      	movs	r3, #0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d10a      	bne.n	8000f6a <xQueueReceive+0x8e>
	__asm volatile
 8000f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f58:	f383 8811 	msr	BASEPRI, r3
 8000f5c:	f3bf 8f6f 	isb	sy
 8000f60:	f3bf 8f4f 	dsb	sy
 8000f64:	61bb      	str	r3, [r7, #24]
}
 8000f66:	bf00      	nop
 8000f68:	e7fe      	b.n	8000f68 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000f6a:	f001 feb3 	bl	8002cd4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f72:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d01f      	beq.n	8000fba <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000f7a:	68b9      	ldr	r1, [r7, #8]
 8000f7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000f7e:	f000 f8f7 	bl	8001170 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f84:	1e5a      	subs	r2, r3, #1
 8000f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f88:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f8c:	691b      	ldr	r3, [r3, #16]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d00f      	beq.n	8000fb2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f94:	3310      	adds	r3, #16
 8000f96:	4618      	mov	r0, r3
 8000f98:	f000 fe4e 	bl	8001c38 <xTaskRemoveFromEventList>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d007      	beq.n	8000fb2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8000fa2:	4b3d      	ldr	r3, [pc, #244]	; (8001098 <xQueueReceive+0x1bc>)
 8000fa4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	f3bf 8f4f 	dsb	sy
 8000fae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8000fb2:	f001 febf 	bl	8002d34 <vPortExitCritical>
				return pdPASS;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e069      	b.n	800108e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d103      	bne.n	8000fc8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000fc0:	f001 feb8 	bl	8002d34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	e062      	b.n	800108e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d106      	bne.n	8000fdc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8000fce:	f107 0310 	add.w	r3, r7, #16
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f000 fe94 	bl	8001d00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000fdc:	f001 feaa 	bl	8002d34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000fe0:	f000 fc06 	bl	80017f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000fe4:	f001 fe76 	bl	8002cd4 <vPortEnterCritical>
 8000fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000fee:	b25b      	sxtb	r3, r3
 8000ff0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ff4:	d103      	bne.n	8000ffe <xQueueReceive+0x122>
 8000ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001000:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001004:	b25b      	sxtb	r3, r3
 8001006:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800100a:	d103      	bne.n	8001014 <xQueueReceive+0x138>
 800100c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800100e:	2200      	movs	r2, #0
 8001010:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001014:	f001 fe8e 	bl	8002d34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001018:	1d3a      	adds	r2, r7, #4
 800101a:	f107 0310 	add.w	r3, r7, #16
 800101e:	4611      	mov	r1, r2
 8001020:	4618      	mov	r0, r3
 8001022:	f000 fe83 	bl	8001d2c <xTaskCheckForTimeOut>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d123      	bne.n	8001074 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800102c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800102e:	f000 f917 	bl	8001260 <prvIsQueueEmpty>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d017      	beq.n	8001068 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800103a:	3324      	adds	r3, #36	; 0x24
 800103c:	687a      	ldr	r2, [r7, #4]
 800103e:	4611      	mov	r1, r2
 8001040:	4618      	mov	r0, r3
 8001042:	f000 fda9 	bl	8001b98 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001046:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001048:	f000 f8b8 	bl	80011bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800104c:	f000 fbde 	bl	800180c <xTaskResumeAll>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d189      	bne.n	8000f6a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8001056:	4b10      	ldr	r3, [pc, #64]	; (8001098 <xQueueReceive+0x1bc>)
 8001058:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	f3bf 8f4f 	dsb	sy
 8001062:	f3bf 8f6f 	isb	sy
 8001066:	e780      	b.n	8000f6a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8001068:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800106a:	f000 f8a7 	bl	80011bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800106e:	f000 fbcd 	bl	800180c <xTaskResumeAll>
 8001072:	e77a      	b.n	8000f6a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8001074:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001076:	f000 f8a1 	bl	80011bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800107a:	f000 fbc7 	bl	800180c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800107e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001080:	f000 f8ee 	bl	8001260 <prvIsQueueEmpty>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	f43f af6f 	beq.w	8000f6a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800108c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800108e:	4618      	mov	r0, r3
 8001090:	3730      	adds	r7, #48	; 0x30
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	e000ed04 	.word	0xe000ed04

0800109c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	60b9      	str	r1, [r7, #8]
 80010a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80010a8:	2300      	movs	r3, #0
 80010aa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010b0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d10d      	bne.n	80010d6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d14d      	bne.n	800115e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	4618      	mov	r0, r3
 80010c8:	f000 ff92 	bl	8001ff0 <xTaskPriorityDisinherit>
 80010cc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	2200      	movs	r2, #0
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	e043      	b.n	800115e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d119      	bne.n	8001110 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	6858      	ldr	r0, [r3, #4]
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e4:	461a      	mov	r2, r3
 80010e6:	68b9      	ldr	r1, [r7, #8]
 80010e8:	f004 ff52 	bl	8005f90 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	685a      	ldr	r2, [r3, #4]
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f4:	441a      	add	r2, r3
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	685a      	ldr	r2, [r3, #4]
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	429a      	cmp	r2, r3
 8001104:	d32b      	bcc.n	800115e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	e026      	b.n	800115e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	68d8      	ldr	r0, [r3, #12]
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001118:	461a      	mov	r2, r3
 800111a:	68b9      	ldr	r1, [r7, #8]
 800111c:	f004 ff38 	bl	8005f90 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	68da      	ldr	r2, [r3, #12]
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001128:	425b      	negs	r3, r3
 800112a:	441a      	add	r2, r3
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	68da      	ldr	r2, [r3, #12]
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	429a      	cmp	r2, r3
 800113a:	d207      	bcs.n	800114c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	689a      	ldr	r2, [r3, #8]
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001144:	425b      	negs	r3, r3
 8001146:	441a      	add	r2, r3
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2b02      	cmp	r3, #2
 8001150:	d105      	bne.n	800115e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d002      	beq.n	800115e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	3b01      	subs	r3, #1
 800115c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	1c5a      	adds	r2, r3, #1
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8001166:	697b      	ldr	r3, [r7, #20]
}
 8001168:	4618      	mov	r0, r3
 800116a:	3718      	adds	r7, #24
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}

08001170 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117e:	2b00      	cmp	r3, #0
 8001180:	d018      	beq.n	80011b4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	68da      	ldr	r2, [r3, #12]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118a:	441a      	add	r2, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	68da      	ldr	r2, [r3, #12]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	429a      	cmp	r2, r3
 800119a:	d303      	bcc.n	80011a4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	68d9      	ldr	r1, [r3, #12]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ac:	461a      	mov	r2, r3
 80011ae:	6838      	ldr	r0, [r7, #0]
 80011b0:	f004 feee 	bl	8005f90 <memcpy>
	}
}
 80011b4:	bf00      	nop
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80011c4:	f001 fd86 	bl	8002cd4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80011ce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80011d0:	e011      	b.n	80011f6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d012      	beq.n	8001200 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	3324      	adds	r3, #36	; 0x24
 80011de:	4618      	mov	r0, r3
 80011e0:	f000 fd2a 	bl	8001c38 <xTaskRemoveFromEventList>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80011ea:	f000 fe01 	bl	8001df0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80011ee:	7bfb      	ldrb	r3, [r7, #15]
 80011f0:	3b01      	subs	r3, #1
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80011f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	dce9      	bgt.n	80011d2 <prvUnlockQueue+0x16>
 80011fe:	e000      	b.n	8001202 <prvUnlockQueue+0x46>
					break;
 8001200:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	22ff      	movs	r2, #255	; 0xff
 8001206:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800120a:	f001 fd93 	bl	8002d34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800120e:	f001 fd61 	bl	8002cd4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001218:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800121a:	e011      	b.n	8001240 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	691b      	ldr	r3, [r3, #16]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d012      	beq.n	800124a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3310      	adds	r3, #16
 8001228:	4618      	mov	r0, r3
 800122a:	f000 fd05 	bl	8001c38 <xTaskRemoveFromEventList>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8001234:	f000 fddc 	bl	8001df0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8001238:	7bbb      	ldrb	r3, [r7, #14]
 800123a:	3b01      	subs	r3, #1
 800123c:	b2db      	uxtb	r3, r3
 800123e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001240:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001244:	2b00      	cmp	r3, #0
 8001246:	dce9      	bgt.n	800121c <prvUnlockQueue+0x60>
 8001248:	e000      	b.n	800124c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800124a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	22ff      	movs	r2, #255	; 0xff
 8001250:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8001254:	f001 fd6e 	bl	8002d34 <vPortExitCritical>
}
 8001258:	bf00      	nop
 800125a:	3710      	adds	r7, #16
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}

08001260 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001268:	f001 fd34 	bl	8002cd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001270:	2b00      	cmp	r3, #0
 8001272:	d102      	bne.n	800127a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8001274:	2301      	movs	r3, #1
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	e001      	b.n	800127e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800127a:	2300      	movs	r3, #0
 800127c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800127e:	f001 fd59 	bl	8002d34 <vPortExitCritical>

	return xReturn;
 8001282:	68fb      	ldr	r3, [r7, #12]
}
 8001284:	4618      	mov	r0, r3
 8001286:	3710      	adds	r7, #16
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001294:	f001 fd1e 	bl	8002cd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d102      	bne.n	80012aa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80012a4:	2301      	movs	r3, #1
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	e001      	b.n	80012ae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80012aa:	2300      	movs	r3, #0
 80012ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80012ae:	f001 fd41 	bl	8002d34 <vPortExitCritical>

	return xReturn;
 80012b2:	68fb      	ldr	r3, [r7, #12]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3710      	adds	r7, #16
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}

080012bc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80012c6:	2300      	movs	r3, #0
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	e014      	b.n	80012f6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80012cc:	4a0f      	ldr	r2, [pc, #60]	; (800130c <vQueueAddToRegistry+0x50>)
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d10b      	bne.n	80012f0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80012d8:	490c      	ldr	r1, [pc, #48]	; (800130c <vQueueAddToRegistry+0x50>)
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	683a      	ldr	r2, [r7, #0]
 80012de:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80012e2:	4a0a      	ldr	r2, [pc, #40]	; (800130c <vQueueAddToRegistry+0x50>)
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	00db      	lsls	r3, r3, #3
 80012e8:	4413      	add	r3, r2
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80012ee:	e006      	b.n	80012fe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	3301      	adds	r3, #1
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	2b07      	cmp	r3, #7
 80012fa:	d9e7      	bls.n	80012cc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80012fc:	bf00      	nop
 80012fe:	bf00      	nop
 8001300:	3714      	adds	r7, #20
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	20000750 	.word	0x20000750

08001310 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001310:	b580      	push	{r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8001320:	f001 fcd8 	bl	8002cd4 <vPortEnterCritical>
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800132a:	b25b      	sxtb	r3, r3
 800132c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001330:	d103      	bne.n	800133a <vQueueWaitForMessageRestricted+0x2a>
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	2200      	movs	r2, #0
 8001336:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001340:	b25b      	sxtb	r3, r3
 8001342:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001346:	d103      	bne.n	8001350 <vQueueWaitForMessageRestricted+0x40>
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	2200      	movs	r2, #0
 800134c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001350:	f001 fcf0 	bl	8002d34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001358:	2b00      	cmp	r3, #0
 800135a:	d106      	bne.n	800136a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	3324      	adds	r3, #36	; 0x24
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	68b9      	ldr	r1, [r7, #8]
 8001364:	4618      	mov	r0, r3
 8001366:	f000 fc3b 	bl	8001be0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800136a:	6978      	ldr	r0, [r7, #20]
 800136c:	f7ff ff26 	bl	80011bc <prvUnlockQueue>
	}
 8001370:	bf00      	nop
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8001378:	b580      	push	{r7, lr}
 800137a:	b08e      	sub	sp, #56	; 0x38
 800137c:	af04      	add	r7, sp, #16
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	607a      	str	r2, [r7, #4]
 8001384:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8001386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001388:	2b00      	cmp	r3, #0
 800138a:	d10a      	bne.n	80013a2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800138c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001390:	f383 8811 	msr	BASEPRI, r3
 8001394:	f3bf 8f6f 	isb	sy
 8001398:	f3bf 8f4f 	dsb	sy
 800139c:	623b      	str	r3, [r7, #32]
}
 800139e:	bf00      	nop
 80013a0:	e7fe      	b.n	80013a0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80013a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d10a      	bne.n	80013be <xTaskCreateStatic+0x46>
	__asm volatile
 80013a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013ac:	f383 8811 	msr	BASEPRI, r3
 80013b0:	f3bf 8f6f 	isb	sy
 80013b4:	f3bf 8f4f 	dsb	sy
 80013b8:	61fb      	str	r3, [r7, #28]
}
 80013ba:	bf00      	nop
 80013bc:	e7fe      	b.n	80013bc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80013be:	235c      	movs	r3, #92	; 0x5c
 80013c0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	2b5c      	cmp	r3, #92	; 0x5c
 80013c6:	d00a      	beq.n	80013de <xTaskCreateStatic+0x66>
	__asm volatile
 80013c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013cc:	f383 8811 	msr	BASEPRI, r3
 80013d0:	f3bf 8f6f 	isb	sy
 80013d4:	f3bf 8f4f 	dsb	sy
 80013d8:	61bb      	str	r3, [r7, #24]
}
 80013da:	bf00      	nop
 80013dc:	e7fe      	b.n	80013dc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80013de:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80013e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d01e      	beq.n	8001424 <xTaskCreateStatic+0xac>
 80013e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d01b      	beq.n	8001424 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80013ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013ee:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80013f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80013f4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80013f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f8:	2202      	movs	r2, #2
 80013fa:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80013fe:	2300      	movs	r3, #0
 8001400:	9303      	str	r3, [sp, #12]
 8001402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001404:	9302      	str	r3, [sp, #8]
 8001406:	f107 0314 	add.w	r3, r7, #20
 800140a:	9301      	str	r3, [sp, #4]
 800140c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800140e:	9300      	str	r3, [sp, #0]
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	68b9      	ldr	r1, [r7, #8]
 8001416:	68f8      	ldr	r0, [r7, #12]
 8001418:	f000 f850 	bl	80014bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800141c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800141e:	f000 f8dd 	bl	80015dc <prvAddNewTaskToReadyList>
 8001422:	e001      	b.n	8001428 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8001428:	697b      	ldr	r3, [r7, #20]
	}
 800142a:	4618      	mov	r0, r3
 800142c:	3728      	adds	r7, #40	; 0x28
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001432:	b580      	push	{r7, lr}
 8001434:	b08c      	sub	sp, #48	; 0x30
 8001436:	af04      	add	r7, sp, #16
 8001438:	60f8      	str	r0, [r7, #12]
 800143a:	60b9      	str	r1, [r7, #8]
 800143c:	603b      	str	r3, [r7, #0]
 800143e:	4613      	mov	r3, r2
 8001440:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001442:	88fb      	ldrh	r3, [r7, #6]
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	4618      	mov	r0, r3
 8001448:	f001 fd66 	bl	8002f18 <pvPortMalloc>
 800144c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d00e      	beq.n	8001472 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001454:	205c      	movs	r0, #92	; 0x5c
 8001456:	f001 fd5f 	bl	8002f18 <pvPortMalloc>
 800145a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d003      	beq.n	800146a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	697a      	ldr	r2, [r7, #20]
 8001466:	631a      	str	r2, [r3, #48]	; 0x30
 8001468:	e005      	b.n	8001476 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800146a:	6978      	ldr	r0, [r7, #20]
 800146c:	f001 fe20 	bl	80030b0 <vPortFree>
 8001470:	e001      	b.n	8001476 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001472:	2300      	movs	r3, #0
 8001474:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d017      	beq.n	80014ac <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	2200      	movs	r2, #0
 8001480:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001484:	88fa      	ldrh	r2, [r7, #6]
 8001486:	2300      	movs	r3, #0
 8001488:	9303      	str	r3, [sp, #12]
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	9302      	str	r3, [sp, #8]
 800148e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001490:	9301      	str	r3, [sp, #4]
 8001492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001494:	9300      	str	r3, [sp, #0]
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	68b9      	ldr	r1, [r7, #8]
 800149a:	68f8      	ldr	r0, [r7, #12]
 800149c:	f000 f80e 	bl	80014bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80014a0:	69f8      	ldr	r0, [r7, #28]
 80014a2:	f000 f89b 	bl	80015dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80014a6:	2301      	movs	r3, #1
 80014a8:	61bb      	str	r3, [r7, #24]
 80014aa:	e002      	b.n	80014b2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80014ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014b0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80014b2:	69bb      	ldr	r3, [r7, #24]
	}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3720      	adds	r7, #32
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}

080014bc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b088      	sub	sp, #32
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	60b9      	str	r1, [r7, #8]
 80014c6:	607a      	str	r2, [r7, #4]
 80014c8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80014ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014cc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	461a      	mov	r2, r3
 80014d4:	21a5      	movs	r1, #165	; 0xa5
 80014d6:	f004 fd69 	bl	8005fac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80014da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80014e4:	3b01      	subs	r3, #1
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	4413      	add	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80014ec:	69bb      	ldr	r3, [r7, #24]
 80014ee:	f023 0307 	bic.w	r3, r3, #7
 80014f2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	f003 0307 	and.w	r3, r3, #7
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d00a      	beq.n	8001514 <prvInitialiseNewTask+0x58>
	__asm volatile
 80014fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001502:	f383 8811 	msr	BASEPRI, r3
 8001506:	f3bf 8f6f 	isb	sy
 800150a:	f3bf 8f4f 	dsb	sy
 800150e:	617b      	str	r3, [r7, #20]
}
 8001510:	bf00      	nop
 8001512:	e7fe      	b.n	8001512 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d01f      	beq.n	800155a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800151a:	2300      	movs	r3, #0
 800151c:	61fb      	str	r3, [r7, #28]
 800151e:	e012      	b.n	8001546 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001520:	68ba      	ldr	r2, [r7, #8]
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	4413      	add	r3, r2
 8001526:	7819      	ldrb	r1, [r3, #0]
 8001528:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	4413      	add	r3, r2
 800152e:	3334      	adds	r3, #52	; 0x34
 8001530:	460a      	mov	r2, r1
 8001532:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8001534:	68ba      	ldr	r2, [r7, #8]
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	4413      	add	r3, r2
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d006      	beq.n	800154e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	3301      	adds	r3, #1
 8001544:	61fb      	str	r3, [r7, #28]
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	2b0f      	cmp	r3, #15
 800154a:	d9e9      	bls.n	8001520 <prvInitialiseNewTask+0x64>
 800154c:	e000      	b.n	8001550 <prvInitialiseNewTask+0x94>
			{
				break;
 800154e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001552:	2200      	movs	r2, #0
 8001554:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001558:	e003      	b.n	8001562 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800155a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800155c:	2200      	movs	r2, #0
 800155e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001564:	2b37      	cmp	r3, #55	; 0x37
 8001566:	d901      	bls.n	800156c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001568:	2337      	movs	r3, #55	; 0x37
 800156a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800156c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800156e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001570:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001574:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001576:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8001578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800157a:	2200      	movs	r2, #0
 800157c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800157e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001580:	3304      	adds	r3, #4
 8001582:	4618      	mov	r0, r3
 8001584:	f7ff f978 	bl	8000878 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800158a:	3318      	adds	r3, #24
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff f973 	bl	8000878 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001594:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001596:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800159a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800159e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015a0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80015a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015a6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80015a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015aa:	2200      	movs	r2, #0
 80015ac:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80015ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015b0:	2200      	movs	r2, #0
 80015b2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80015b6:	683a      	ldr	r2, [r7, #0]
 80015b8:	68f9      	ldr	r1, [r7, #12]
 80015ba:	69b8      	ldr	r0, [r7, #24]
 80015bc:	f001 fa5e 	bl	8002a7c <pxPortInitialiseStack>
 80015c0:	4602      	mov	r2, r0
 80015c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015c4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80015c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d002      	beq.n	80015d2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80015cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80015d2:	bf00      	nop
 80015d4:	3720      	adds	r7, #32
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
	...

080015dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80015e4:	f001 fb76 	bl	8002cd4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80015e8:	4b2d      	ldr	r3, [pc, #180]	; (80016a0 <prvAddNewTaskToReadyList+0xc4>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	3301      	adds	r3, #1
 80015ee:	4a2c      	ldr	r2, [pc, #176]	; (80016a0 <prvAddNewTaskToReadyList+0xc4>)
 80015f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80015f2:	4b2c      	ldr	r3, [pc, #176]	; (80016a4 <prvAddNewTaskToReadyList+0xc8>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d109      	bne.n	800160e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80015fa:	4a2a      	ldr	r2, [pc, #168]	; (80016a4 <prvAddNewTaskToReadyList+0xc8>)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001600:	4b27      	ldr	r3, [pc, #156]	; (80016a0 <prvAddNewTaskToReadyList+0xc4>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2b01      	cmp	r3, #1
 8001606:	d110      	bne.n	800162a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001608:	f000 fc16 	bl	8001e38 <prvInitialiseTaskLists>
 800160c:	e00d      	b.n	800162a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800160e:	4b26      	ldr	r3, [pc, #152]	; (80016a8 <prvAddNewTaskToReadyList+0xcc>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d109      	bne.n	800162a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001616:	4b23      	ldr	r3, [pc, #140]	; (80016a4 <prvAddNewTaskToReadyList+0xc8>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001620:	429a      	cmp	r2, r3
 8001622:	d802      	bhi.n	800162a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001624:	4a1f      	ldr	r2, [pc, #124]	; (80016a4 <prvAddNewTaskToReadyList+0xc8>)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800162a:	4b20      	ldr	r3, [pc, #128]	; (80016ac <prvAddNewTaskToReadyList+0xd0>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	3301      	adds	r3, #1
 8001630:	4a1e      	ldr	r2, [pc, #120]	; (80016ac <prvAddNewTaskToReadyList+0xd0>)
 8001632:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001634:	4b1d      	ldr	r3, [pc, #116]	; (80016ac <prvAddNewTaskToReadyList+0xd0>)
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001640:	4b1b      	ldr	r3, [pc, #108]	; (80016b0 <prvAddNewTaskToReadyList+0xd4>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	429a      	cmp	r2, r3
 8001646:	d903      	bls.n	8001650 <prvAddNewTaskToReadyList+0x74>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800164c:	4a18      	ldr	r2, [pc, #96]	; (80016b0 <prvAddNewTaskToReadyList+0xd4>)
 800164e:	6013      	str	r3, [r2, #0]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001654:	4613      	mov	r3, r2
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	4413      	add	r3, r2
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	4a15      	ldr	r2, [pc, #84]	; (80016b4 <prvAddNewTaskToReadyList+0xd8>)
 800165e:	441a      	add	r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	3304      	adds	r3, #4
 8001664:	4619      	mov	r1, r3
 8001666:	4610      	mov	r0, r2
 8001668:	f7ff f913 	bl	8000892 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800166c:	f001 fb62 	bl	8002d34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001670:	4b0d      	ldr	r3, [pc, #52]	; (80016a8 <prvAddNewTaskToReadyList+0xcc>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d00e      	beq.n	8001696 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001678:	4b0a      	ldr	r3, [pc, #40]	; (80016a4 <prvAddNewTaskToReadyList+0xc8>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001682:	429a      	cmp	r2, r3
 8001684:	d207      	bcs.n	8001696 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001686:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <prvAddNewTaskToReadyList+0xdc>)
 8001688:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	f3bf 8f4f 	dsb	sy
 8001692:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001696:	bf00      	nop
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	20000c64 	.word	0x20000c64
 80016a4:	20000790 	.word	0x20000790
 80016a8:	20000c70 	.word	0x20000c70
 80016ac:	20000c80 	.word	0x20000c80
 80016b0:	20000c6c 	.word	0x20000c6c
 80016b4:	20000794 	.word	0x20000794
 80016b8:	e000ed04 	.word	0xe000ed04

080016bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80016c4:	2300      	movs	r3, #0
 80016c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d017      	beq.n	80016fe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80016ce:	4b13      	ldr	r3, [pc, #76]	; (800171c <vTaskDelay+0x60>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d00a      	beq.n	80016ec <vTaskDelay+0x30>
	__asm volatile
 80016d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016da:	f383 8811 	msr	BASEPRI, r3
 80016de:	f3bf 8f6f 	isb	sy
 80016e2:	f3bf 8f4f 	dsb	sy
 80016e6:	60bb      	str	r3, [r7, #8]
}
 80016e8:	bf00      	nop
 80016ea:	e7fe      	b.n	80016ea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80016ec:	f000 f880 	bl	80017f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80016f0:	2100      	movs	r1, #0
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f000 fe20 	bl	8002338 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80016f8:	f000 f888 	bl	800180c <xTaskResumeAll>
 80016fc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d107      	bne.n	8001714 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8001704:	4b06      	ldr	r3, [pc, #24]	; (8001720 <vTaskDelay+0x64>)
 8001706:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	f3bf 8f4f 	dsb	sy
 8001710:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001714:	bf00      	nop
 8001716:	3710      	adds	r7, #16
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	20000c8c 	.word	0x20000c8c
 8001720:	e000ed04 	.word	0xe000ed04

08001724 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b08a      	sub	sp, #40	; 0x28
 8001728:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800172a:	2300      	movs	r3, #0
 800172c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800172e:	2300      	movs	r3, #0
 8001730:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8001732:	463a      	mov	r2, r7
 8001734:	1d39      	adds	r1, r7, #4
 8001736:	f107 0308 	add.w	r3, r7, #8
 800173a:	4618      	mov	r0, r3
 800173c:	f7ff f848 	bl	80007d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8001740:	6839      	ldr	r1, [r7, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	68ba      	ldr	r2, [r7, #8]
 8001746:	9202      	str	r2, [sp, #8]
 8001748:	9301      	str	r3, [sp, #4]
 800174a:	2300      	movs	r3, #0
 800174c:	9300      	str	r3, [sp, #0]
 800174e:	2300      	movs	r3, #0
 8001750:	460a      	mov	r2, r1
 8001752:	4921      	ldr	r1, [pc, #132]	; (80017d8 <vTaskStartScheduler+0xb4>)
 8001754:	4821      	ldr	r0, [pc, #132]	; (80017dc <vTaskStartScheduler+0xb8>)
 8001756:	f7ff fe0f 	bl	8001378 <xTaskCreateStatic>
 800175a:	4603      	mov	r3, r0
 800175c:	4a20      	ldr	r2, [pc, #128]	; (80017e0 <vTaskStartScheduler+0xbc>)
 800175e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8001760:	4b1f      	ldr	r3, [pc, #124]	; (80017e0 <vTaskStartScheduler+0xbc>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d002      	beq.n	800176e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8001768:	2301      	movs	r3, #1
 800176a:	617b      	str	r3, [r7, #20]
 800176c:	e001      	b.n	8001772 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800176e:	2300      	movs	r3, #0
 8001770:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	2b01      	cmp	r3, #1
 8001776:	d102      	bne.n	800177e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8001778:	f000 fe32 	bl	80023e0 <xTimerCreateTimerTask>
 800177c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	2b01      	cmp	r3, #1
 8001782:	d116      	bne.n	80017b2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8001784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001788:	f383 8811 	msr	BASEPRI, r3
 800178c:	f3bf 8f6f 	isb	sy
 8001790:	f3bf 8f4f 	dsb	sy
 8001794:	613b      	str	r3, [r7, #16]
}
 8001796:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001798:	4b12      	ldr	r3, [pc, #72]	; (80017e4 <vTaskStartScheduler+0xc0>)
 800179a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800179e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80017a0:	4b11      	ldr	r3, [pc, #68]	; (80017e8 <vTaskStartScheduler+0xc4>)
 80017a2:	2201      	movs	r2, #1
 80017a4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80017a6:	4b11      	ldr	r3, [pc, #68]	; (80017ec <vTaskStartScheduler+0xc8>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80017ac:	f001 f9f0 	bl	8002b90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80017b0:	e00e      	b.n	80017d0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80017b8:	d10a      	bne.n	80017d0 <vTaskStartScheduler+0xac>
	__asm volatile
 80017ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017be:	f383 8811 	msr	BASEPRI, r3
 80017c2:	f3bf 8f6f 	isb	sy
 80017c6:	f3bf 8f4f 	dsb	sy
 80017ca:	60fb      	str	r3, [r7, #12]
}
 80017cc:	bf00      	nop
 80017ce:	e7fe      	b.n	80017ce <vTaskStartScheduler+0xaa>
}
 80017d0:	bf00      	nop
 80017d2:	3718      	adds	r7, #24
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	0800707c 	.word	0x0800707c
 80017dc:	08001e09 	.word	0x08001e09
 80017e0:	20000c88 	.word	0x20000c88
 80017e4:	20000c84 	.word	0x20000c84
 80017e8:	20000c70 	.word	0x20000c70
 80017ec:	20000c68 	.word	0x20000c68

080017f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80017f4:	4b04      	ldr	r3, [pc, #16]	; (8001808 <vTaskSuspendAll+0x18>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	3301      	adds	r3, #1
 80017fa:	4a03      	ldr	r2, [pc, #12]	; (8001808 <vTaskSuspendAll+0x18>)
 80017fc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80017fe:	bf00      	nop
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	20000c8c 	.word	0x20000c8c

0800180c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001812:	2300      	movs	r3, #0
 8001814:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001816:	2300      	movs	r3, #0
 8001818:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800181a:	4b42      	ldr	r3, [pc, #264]	; (8001924 <xTaskResumeAll+0x118>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d10a      	bne.n	8001838 <xTaskResumeAll+0x2c>
	__asm volatile
 8001822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001826:	f383 8811 	msr	BASEPRI, r3
 800182a:	f3bf 8f6f 	isb	sy
 800182e:	f3bf 8f4f 	dsb	sy
 8001832:	603b      	str	r3, [r7, #0]
}
 8001834:	bf00      	nop
 8001836:	e7fe      	b.n	8001836 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001838:	f001 fa4c 	bl	8002cd4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800183c:	4b39      	ldr	r3, [pc, #228]	; (8001924 <xTaskResumeAll+0x118>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	3b01      	subs	r3, #1
 8001842:	4a38      	ldr	r2, [pc, #224]	; (8001924 <xTaskResumeAll+0x118>)
 8001844:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001846:	4b37      	ldr	r3, [pc, #220]	; (8001924 <xTaskResumeAll+0x118>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d162      	bne.n	8001914 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800184e:	4b36      	ldr	r3, [pc, #216]	; (8001928 <xTaskResumeAll+0x11c>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d05e      	beq.n	8001914 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001856:	e02f      	b.n	80018b8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001858:	4b34      	ldr	r3, [pc, #208]	; (800192c <xTaskResumeAll+0x120>)
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	68db      	ldr	r3, [r3, #12]
 800185e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	3318      	adds	r3, #24
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff f871 	bl	800094c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	3304      	adds	r3, #4
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff f86c 	bl	800094c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001878:	4b2d      	ldr	r3, [pc, #180]	; (8001930 <xTaskResumeAll+0x124>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	429a      	cmp	r2, r3
 800187e:	d903      	bls.n	8001888 <xTaskResumeAll+0x7c>
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001884:	4a2a      	ldr	r2, [pc, #168]	; (8001930 <xTaskResumeAll+0x124>)
 8001886:	6013      	str	r3, [r2, #0]
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800188c:	4613      	mov	r3, r2
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	4413      	add	r3, r2
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	4a27      	ldr	r2, [pc, #156]	; (8001934 <xTaskResumeAll+0x128>)
 8001896:	441a      	add	r2, r3
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	3304      	adds	r3, #4
 800189c:	4619      	mov	r1, r3
 800189e:	4610      	mov	r0, r2
 80018a0:	f7fe fff7 	bl	8000892 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018a8:	4b23      	ldr	r3, [pc, #140]	; (8001938 <xTaskResumeAll+0x12c>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d302      	bcc.n	80018b8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80018b2:	4b22      	ldr	r3, [pc, #136]	; (800193c <xTaskResumeAll+0x130>)
 80018b4:	2201      	movs	r2, #1
 80018b6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80018b8:	4b1c      	ldr	r3, [pc, #112]	; (800192c <xTaskResumeAll+0x120>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d1cb      	bne.n	8001858 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80018c6:	f000 fb55 	bl	8001f74 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80018ca:	4b1d      	ldr	r3, [pc, #116]	; (8001940 <xTaskResumeAll+0x134>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d010      	beq.n	80018f8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80018d6:	f000 f847 	bl	8001968 <xTaskIncrementTick>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d002      	beq.n	80018e6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80018e0:	4b16      	ldr	r3, [pc, #88]	; (800193c <xTaskResumeAll+0x130>)
 80018e2:	2201      	movs	r2, #1
 80018e4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	3b01      	subs	r3, #1
 80018ea:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d1f1      	bne.n	80018d6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80018f2:	4b13      	ldr	r3, [pc, #76]	; (8001940 <xTaskResumeAll+0x134>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80018f8:	4b10      	ldr	r3, [pc, #64]	; (800193c <xTaskResumeAll+0x130>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d009      	beq.n	8001914 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001900:	2301      	movs	r3, #1
 8001902:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001904:	4b0f      	ldr	r3, [pc, #60]	; (8001944 <xTaskResumeAll+0x138>)
 8001906:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	f3bf 8f4f 	dsb	sy
 8001910:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001914:	f001 fa0e 	bl	8002d34 <vPortExitCritical>

	return xAlreadyYielded;
 8001918:	68bb      	ldr	r3, [r7, #8]
}
 800191a:	4618      	mov	r0, r3
 800191c:	3710      	adds	r7, #16
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	20000c8c 	.word	0x20000c8c
 8001928:	20000c64 	.word	0x20000c64
 800192c:	20000c24 	.word	0x20000c24
 8001930:	20000c6c 	.word	0x20000c6c
 8001934:	20000794 	.word	0x20000794
 8001938:	20000790 	.word	0x20000790
 800193c:	20000c78 	.word	0x20000c78
 8001940:	20000c74 	.word	0x20000c74
 8001944:	e000ed04 	.word	0xe000ed04

08001948 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800194e:	4b05      	ldr	r3, [pc, #20]	; (8001964 <xTaskGetTickCount+0x1c>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8001954:	687b      	ldr	r3, [r7, #4]
}
 8001956:	4618      	mov	r0, r3
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	20000c68 	.word	0x20000c68

08001968 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b086      	sub	sp, #24
 800196c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800196e:	2300      	movs	r3, #0
 8001970:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001972:	4b4f      	ldr	r3, [pc, #316]	; (8001ab0 <xTaskIncrementTick+0x148>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2b00      	cmp	r3, #0
 8001978:	f040 808f 	bne.w	8001a9a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800197c:	4b4d      	ldr	r3, [pc, #308]	; (8001ab4 <xTaskIncrementTick+0x14c>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	3301      	adds	r3, #1
 8001982:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001984:	4a4b      	ldr	r2, [pc, #300]	; (8001ab4 <xTaskIncrementTick+0x14c>)
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d120      	bne.n	80019d2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8001990:	4b49      	ldr	r3, [pc, #292]	; (8001ab8 <xTaskIncrementTick+0x150>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d00a      	beq.n	80019b0 <xTaskIncrementTick+0x48>
	__asm volatile
 800199a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800199e:	f383 8811 	msr	BASEPRI, r3
 80019a2:	f3bf 8f6f 	isb	sy
 80019a6:	f3bf 8f4f 	dsb	sy
 80019aa:	603b      	str	r3, [r7, #0]
}
 80019ac:	bf00      	nop
 80019ae:	e7fe      	b.n	80019ae <xTaskIncrementTick+0x46>
 80019b0:	4b41      	ldr	r3, [pc, #260]	; (8001ab8 <xTaskIncrementTick+0x150>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	60fb      	str	r3, [r7, #12]
 80019b6:	4b41      	ldr	r3, [pc, #260]	; (8001abc <xTaskIncrementTick+0x154>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a3f      	ldr	r2, [pc, #252]	; (8001ab8 <xTaskIncrementTick+0x150>)
 80019bc:	6013      	str	r3, [r2, #0]
 80019be:	4a3f      	ldr	r2, [pc, #252]	; (8001abc <xTaskIncrementTick+0x154>)
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	6013      	str	r3, [r2, #0]
 80019c4:	4b3e      	ldr	r3, [pc, #248]	; (8001ac0 <xTaskIncrementTick+0x158>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	3301      	adds	r3, #1
 80019ca:	4a3d      	ldr	r2, [pc, #244]	; (8001ac0 <xTaskIncrementTick+0x158>)
 80019cc:	6013      	str	r3, [r2, #0]
 80019ce:	f000 fad1 	bl	8001f74 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80019d2:	4b3c      	ldr	r3, [pc, #240]	; (8001ac4 <xTaskIncrementTick+0x15c>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d349      	bcc.n	8001a70 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80019dc:	4b36      	ldr	r3, [pc, #216]	; (8001ab8 <xTaskIncrementTick+0x150>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d104      	bne.n	80019f0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80019e6:	4b37      	ldr	r3, [pc, #220]	; (8001ac4 <xTaskIncrementTick+0x15c>)
 80019e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019ec:	601a      	str	r2, [r3, #0]
					break;
 80019ee:	e03f      	b.n	8001a70 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80019f0:	4b31      	ldr	r3, [pc, #196]	; (8001ab8 <xTaskIncrementTick+0x150>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	68db      	ldr	r3, [r3, #12]
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001a00:	693a      	ldr	r2, [r7, #16]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d203      	bcs.n	8001a10 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001a08:	4a2e      	ldr	r2, [pc, #184]	; (8001ac4 <xTaskIncrementTick+0x15c>)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001a0e:	e02f      	b.n	8001a70 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	3304      	adds	r3, #4
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7fe ff99 	bl	800094c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d004      	beq.n	8001a2c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	3318      	adds	r3, #24
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7fe ff90 	bl	800094c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a30:	4b25      	ldr	r3, [pc, #148]	; (8001ac8 <xTaskIncrementTick+0x160>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d903      	bls.n	8001a40 <xTaskIncrementTick+0xd8>
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a3c:	4a22      	ldr	r2, [pc, #136]	; (8001ac8 <xTaskIncrementTick+0x160>)
 8001a3e:	6013      	str	r3, [r2, #0]
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a44:	4613      	mov	r3, r2
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	4413      	add	r3, r2
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	4a1f      	ldr	r2, [pc, #124]	; (8001acc <xTaskIncrementTick+0x164>)
 8001a4e:	441a      	add	r2, r3
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	3304      	adds	r3, #4
 8001a54:	4619      	mov	r1, r3
 8001a56:	4610      	mov	r0, r2
 8001a58:	f7fe ff1b 	bl	8000892 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a60:	4b1b      	ldr	r3, [pc, #108]	; (8001ad0 <xTaskIncrementTick+0x168>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d3b8      	bcc.n	80019dc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001a6e:	e7b5      	b.n	80019dc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001a70:	4b17      	ldr	r3, [pc, #92]	; (8001ad0 <xTaskIncrementTick+0x168>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a76:	4915      	ldr	r1, [pc, #84]	; (8001acc <xTaskIncrementTick+0x164>)
 8001a78:	4613      	mov	r3, r2
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	4413      	add	r3, r2
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	440b      	add	r3, r1
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d901      	bls.n	8001a8c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8001a8c:	4b11      	ldr	r3, [pc, #68]	; (8001ad4 <xTaskIncrementTick+0x16c>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d007      	beq.n	8001aa4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8001a94:	2301      	movs	r3, #1
 8001a96:	617b      	str	r3, [r7, #20]
 8001a98:	e004      	b.n	8001aa4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8001a9a:	4b0f      	ldr	r3, [pc, #60]	; (8001ad8 <xTaskIncrementTick+0x170>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	4a0d      	ldr	r2, [pc, #52]	; (8001ad8 <xTaskIncrementTick+0x170>)
 8001aa2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8001aa4:	697b      	ldr	r3, [r7, #20]
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3718      	adds	r7, #24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	20000c8c 	.word	0x20000c8c
 8001ab4:	20000c68 	.word	0x20000c68
 8001ab8:	20000c1c 	.word	0x20000c1c
 8001abc:	20000c20 	.word	0x20000c20
 8001ac0:	20000c7c 	.word	0x20000c7c
 8001ac4:	20000c84 	.word	0x20000c84
 8001ac8:	20000c6c 	.word	0x20000c6c
 8001acc:	20000794 	.word	0x20000794
 8001ad0:	20000790 	.word	0x20000790
 8001ad4:	20000c78 	.word	0x20000c78
 8001ad8:	20000c74 	.word	0x20000c74

08001adc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001ae2:	4b28      	ldr	r3, [pc, #160]	; (8001b84 <vTaskSwitchContext+0xa8>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d003      	beq.n	8001af2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001aea:	4b27      	ldr	r3, [pc, #156]	; (8001b88 <vTaskSwitchContext+0xac>)
 8001aec:	2201      	movs	r2, #1
 8001aee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001af0:	e041      	b.n	8001b76 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8001af2:	4b25      	ldr	r3, [pc, #148]	; (8001b88 <vTaskSwitchContext+0xac>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001af8:	4b24      	ldr	r3, [pc, #144]	; (8001b8c <vTaskSwitchContext+0xb0>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	60fb      	str	r3, [r7, #12]
 8001afe:	e010      	b.n	8001b22 <vTaskSwitchContext+0x46>
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d10a      	bne.n	8001b1c <vTaskSwitchContext+0x40>
	__asm volatile
 8001b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b0a:	f383 8811 	msr	BASEPRI, r3
 8001b0e:	f3bf 8f6f 	isb	sy
 8001b12:	f3bf 8f4f 	dsb	sy
 8001b16:	607b      	str	r3, [r7, #4]
}
 8001b18:	bf00      	nop
 8001b1a:	e7fe      	b.n	8001b1a <vTaskSwitchContext+0x3e>
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	60fb      	str	r3, [r7, #12]
 8001b22:	491b      	ldr	r1, [pc, #108]	; (8001b90 <vTaskSwitchContext+0xb4>)
 8001b24:	68fa      	ldr	r2, [r7, #12]
 8001b26:	4613      	mov	r3, r2
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	4413      	add	r3, r2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	440b      	add	r3, r1
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d0e4      	beq.n	8001b00 <vTaskSwitchContext+0x24>
 8001b36:	68fa      	ldr	r2, [r7, #12]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	4413      	add	r3, r2
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	4a13      	ldr	r2, [pc, #76]	; (8001b90 <vTaskSwitchContext+0xb4>)
 8001b42:	4413      	add	r3, r2
 8001b44:	60bb      	str	r3, [r7, #8]
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	685a      	ldr	r2, [r3, #4]
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	605a      	str	r2, [r3, #4]
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	685a      	ldr	r2, [r3, #4]
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	3308      	adds	r3, #8
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d104      	bne.n	8001b66 <vTaskSwitchContext+0x8a>
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	685a      	ldr	r2, [r3, #4]
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	605a      	str	r2, [r3, #4]
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	4a09      	ldr	r2, [pc, #36]	; (8001b94 <vTaskSwitchContext+0xb8>)
 8001b6e:	6013      	str	r3, [r2, #0]
 8001b70:	4a06      	ldr	r2, [pc, #24]	; (8001b8c <vTaskSwitchContext+0xb0>)
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	6013      	str	r3, [r2, #0]
}
 8001b76:	bf00      	nop
 8001b78:	3714      	adds	r7, #20
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	20000c8c 	.word	0x20000c8c
 8001b88:	20000c78 	.word	0x20000c78
 8001b8c:	20000c6c 	.word	0x20000c6c
 8001b90:	20000794 	.word	0x20000794
 8001b94:	20000790 	.word	0x20000790

08001b98 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d10a      	bne.n	8001bbe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8001ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bac:	f383 8811 	msr	BASEPRI, r3
 8001bb0:	f3bf 8f6f 	isb	sy
 8001bb4:	f3bf 8f4f 	dsb	sy
 8001bb8:	60fb      	str	r3, [r7, #12]
}
 8001bba:	bf00      	nop
 8001bbc:	e7fe      	b.n	8001bbc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001bbe:	4b07      	ldr	r3, [pc, #28]	; (8001bdc <vTaskPlaceOnEventList+0x44>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	3318      	adds	r3, #24
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f7fe fe87 	bl	80008da <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001bcc:	2101      	movs	r1, #1
 8001bce:	6838      	ldr	r0, [r7, #0]
 8001bd0:	f000 fbb2 	bl	8002338 <prvAddCurrentTaskToDelayedList>
}
 8001bd4:	bf00      	nop
 8001bd6:	3710      	adds	r7, #16
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	20000790 	.word	0x20000790

08001be0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d10a      	bne.n	8001c08 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8001bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bf6:	f383 8811 	msr	BASEPRI, r3
 8001bfa:	f3bf 8f6f 	isb	sy
 8001bfe:	f3bf 8f4f 	dsb	sy
 8001c02:	617b      	str	r3, [r7, #20]
}
 8001c04:	bf00      	nop
 8001c06:	e7fe      	b.n	8001c06 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001c08:	4b0a      	ldr	r3, [pc, #40]	; (8001c34 <vTaskPlaceOnEventListRestricted+0x54>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	3318      	adds	r3, #24
 8001c0e:	4619      	mov	r1, r3
 8001c10:	68f8      	ldr	r0, [r7, #12]
 8001c12:	f7fe fe3e 	bl	8000892 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d002      	beq.n	8001c22 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8001c1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c20:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001c22:	6879      	ldr	r1, [r7, #4]
 8001c24:	68b8      	ldr	r0, [r7, #8]
 8001c26:	f000 fb87 	bl	8002338 <prvAddCurrentTaskToDelayedList>
	}
 8001c2a:	bf00      	nop
 8001c2c:	3718      	adds	r7, #24
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	20000790 	.word	0x20000790

08001c38 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d10a      	bne.n	8001c64 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8001c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c52:	f383 8811 	msr	BASEPRI, r3
 8001c56:	f3bf 8f6f 	isb	sy
 8001c5a:	f3bf 8f4f 	dsb	sy
 8001c5e:	60fb      	str	r3, [r7, #12]
}
 8001c60:	bf00      	nop
 8001c62:	e7fe      	b.n	8001c62 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	3318      	adds	r3, #24
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7fe fe6f 	bl	800094c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001c6e:	4b1e      	ldr	r3, [pc, #120]	; (8001ce8 <xTaskRemoveFromEventList+0xb0>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d11d      	bne.n	8001cb2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	3304      	adds	r3, #4
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7fe fe66 	bl	800094c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c84:	4b19      	ldr	r3, [pc, #100]	; (8001cec <xTaskRemoveFromEventList+0xb4>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d903      	bls.n	8001c94 <xTaskRemoveFromEventList+0x5c>
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c90:	4a16      	ldr	r2, [pc, #88]	; (8001cec <xTaskRemoveFromEventList+0xb4>)
 8001c92:	6013      	str	r3, [r2, #0]
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c98:	4613      	mov	r3, r2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	4413      	add	r3, r2
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	4a13      	ldr	r2, [pc, #76]	; (8001cf0 <xTaskRemoveFromEventList+0xb8>)
 8001ca2:	441a      	add	r2, r3
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	3304      	adds	r3, #4
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4610      	mov	r0, r2
 8001cac:	f7fe fdf1 	bl	8000892 <vListInsertEnd>
 8001cb0:	e005      	b.n	8001cbe <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	3318      	adds	r3, #24
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	480e      	ldr	r0, [pc, #56]	; (8001cf4 <xTaskRemoveFromEventList+0xbc>)
 8001cba:	f7fe fdea 	bl	8000892 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cc2:	4b0d      	ldr	r3, [pc, #52]	; (8001cf8 <xTaskRemoveFromEventList+0xc0>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d905      	bls.n	8001cd8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8001cd0:	4b0a      	ldr	r3, [pc, #40]	; (8001cfc <xTaskRemoveFromEventList+0xc4>)
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	e001      	b.n	8001cdc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8001cdc:	697b      	ldr	r3, [r7, #20]
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3718      	adds	r7, #24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	20000c8c 	.word	0x20000c8c
 8001cec:	20000c6c 	.word	0x20000c6c
 8001cf0:	20000794 	.word	0x20000794
 8001cf4:	20000c24 	.word	0x20000c24
 8001cf8:	20000790 	.word	0x20000790
 8001cfc:	20000c78 	.word	0x20000c78

08001d00 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001d08:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <vTaskInternalSetTimeOutState+0x24>)
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8001d10:	4b05      	ldr	r3, [pc, #20]	; (8001d28 <vTaskInternalSetTimeOutState+0x28>)
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	605a      	str	r2, [r3, #4]
}
 8001d18:	bf00      	nop
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	20000c7c 	.word	0x20000c7c
 8001d28:	20000c68 	.word	0x20000c68

08001d2c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b088      	sub	sp, #32
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d10a      	bne.n	8001d52 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8001d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d40:	f383 8811 	msr	BASEPRI, r3
 8001d44:	f3bf 8f6f 	isb	sy
 8001d48:	f3bf 8f4f 	dsb	sy
 8001d4c:	613b      	str	r3, [r7, #16]
}
 8001d4e:	bf00      	nop
 8001d50:	e7fe      	b.n	8001d50 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d10a      	bne.n	8001d6e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8001d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d5c:	f383 8811 	msr	BASEPRI, r3
 8001d60:	f3bf 8f6f 	isb	sy
 8001d64:	f3bf 8f4f 	dsb	sy
 8001d68:	60fb      	str	r3, [r7, #12]
}
 8001d6a:	bf00      	nop
 8001d6c:	e7fe      	b.n	8001d6c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8001d6e:	f000 ffb1 	bl	8002cd4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8001d72:	4b1d      	ldr	r3, [pc, #116]	; (8001de8 <xTaskCheckForTimeOut+0xbc>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d8a:	d102      	bne.n	8001d92 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	61fb      	str	r3, [r7, #28]
 8001d90:	e023      	b.n	8001dda <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	4b15      	ldr	r3, [pc, #84]	; (8001dec <xTaskCheckForTimeOut+0xc0>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d007      	beq.n	8001dae <xTaskCheckForTimeOut+0x82>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d302      	bcc.n	8001dae <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8001da8:	2301      	movs	r3, #1
 8001daa:	61fb      	str	r3, [r7, #28]
 8001dac:	e015      	b.n	8001dda <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	697a      	ldr	r2, [r7, #20]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d20b      	bcs.n	8001dd0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	1ad2      	subs	r2, r2, r3
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f7ff ff9b 	bl	8001d00 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	61fb      	str	r3, [r7, #28]
 8001dce:	e004      	b.n	8001dda <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8001dda:	f000 ffab 	bl	8002d34 <vPortExitCritical>

	return xReturn;
 8001dde:	69fb      	ldr	r3, [r7, #28]
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3720      	adds	r7, #32
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	20000c68 	.word	0x20000c68
 8001dec:	20000c7c 	.word	0x20000c7c

08001df0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8001df4:	4b03      	ldr	r3, [pc, #12]	; (8001e04 <vTaskMissedYield+0x14>)
 8001df6:	2201      	movs	r2, #1
 8001df8:	601a      	str	r2, [r3, #0]
}
 8001dfa:	bf00      	nop
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr
 8001e04:	20000c78 	.word	0x20000c78

08001e08 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8001e10:	f000 f852 	bl	8001eb8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001e14:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <prvIdleTask+0x28>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d9f9      	bls.n	8001e10 <prvIdleTask+0x8>
			{
				taskYIELD();
 8001e1c:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <prvIdleTask+0x2c>)
 8001e1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	f3bf 8f4f 	dsb	sy
 8001e28:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8001e2c:	e7f0      	b.n	8001e10 <prvIdleTask+0x8>
 8001e2e:	bf00      	nop
 8001e30:	20000794 	.word	0x20000794
 8001e34:	e000ed04 	.word	0xe000ed04

08001e38 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001e3e:	2300      	movs	r3, #0
 8001e40:	607b      	str	r3, [r7, #4]
 8001e42:	e00c      	b.n	8001e5e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	4613      	mov	r3, r2
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	4413      	add	r3, r2
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	4a12      	ldr	r2, [pc, #72]	; (8001e98 <prvInitialiseTaskLists+0x60>)
 8001e50:	4413      	add	r3, r2
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7fe fcf0 	bl	8000838 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	607b      	str	r3, [r7, #4]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2b37      	cmp	r3, #55	; 0x37
 8001e62:	d9ef      	bls.n	8001e44 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8001e64:	480d      	ldr	r0, [pc, #52]	; (8001e9c <prvInitialiseTaskLists+0x64>)
 8001e66:	f7fe fce7 	bl	8000838 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001e6a:	480d      	ldr	r0, [pc, #52]	; (8001ea0 <prvInitialiseTaskLists+0x68>)
 8001e6c:	f7fe fce4 	bl	8000838 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001e70:	480c      	ldr	r0, [pc, #48]	; (8001ea4 <prvInitialiseTaskLists+0x6c>)
 8001e72:	f7fe fce1 	bl	8000838 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8001e76:	480c      	ldr	r0, [pc, #48]	; (8001ea8 <prvInitialiseTaskLists+0x70>)
 8001e78:	f7fe fcde 	bl	8000838 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001e7c:	480b      	ldr	r0, [pc, #44]	; (8001eac <prvInitialiseTaskLists+0x74>)
 8001e7e:	f7fe fcdb 	bl	8000838 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001e82:	4b0b      	ldr	r3, [pc, #44]	; (8001eb0 <prvInitialiseTaskLists+0x78>)
 8001e84:	4a05      	ldr	r2, [pc, #20]	; (8001e9c <prvInitialiseTaskLists+0x64>)
 8001e86:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001e88:	4b0a      	ldr	r3, [pc, #40]	; (8001eb4 <prvInitialiseTaskLists+0x7c>)
 8001e8a:	4a05      	ldr	r2, [pc, #20]	; (8001ea0 <prvInitialiseTaskLists+0x68>)
 8001e8c:	601a      	str	r2, [r3, #0]
}
 8001e8e:	bf00      	nop
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	20000794 	.word	0x20000794
 8001e9c:	20000bf4 	.word	0x20000bf4
 8001ea0:	20000c08 	.word	0x20000c08
 8001ea4:	20000c24 	.word	0x20000c24
 8001ea8:	20000c38 	.word	0x20000c38
 8001eac:	20000c50 	.word	0x20000c50
 8001eb0:	20000c1c 	.word	0x20000c1c
 8001eb4:	20000c20 	.word	0x20000c20

08001eb8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001ebe:	e019      	b.n	8001ef4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8001ec0:	f000 ff08 	bl	8002cd4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001ec4:	4b10      	ldr	r3, [pc, #64]	; (8001f08 <prvCheckTasksWaitingTermination+0x50>)
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	3304      	adds	r3, #4
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7fe fd3b 	bl	800094c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8001ed6:	4b0d      	ldr	r3, [pc, #52]	; (8001f0c <prvCheckTasksWaitingTermination+0x54>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	3b01      	subs	r3, #1
 8001edc:	4a0b      	ldr	r2, [pc, #44]	; (8001f0c <prvCheckTasksWaitingTermination+0x54>)
 8001ede:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8001ee0:	4b0b      	ldr	r3, [pc, #44]	; (8001f10 <prvCheckTasksWaitingTermination+0x58>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	3b01      	subs	r3, #1
 8001ee6:	4a0a      	ldr	r2, [pc, #40]	; (8001f10 <prvCheckTasksWaitingTermination+0x58>)
 8001ee8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8001eea:	f000 ff23 	bl	8002d34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f000 f810 	bl	8001f14 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001ef4:	4b06      	ldr	r3, [pc, #24]	; (8001f10 <prvCheckTasksWaitingTermination+0x58>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d1e1      	bne.n	8001ec0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8001efc:	bf00      	nop
 8001efe:	bf00      	nop
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	20000c38 	.word	0x20000c38
 8001f0c:	20000c64 	.word	0x20000c64
 8001f10:	20000c4c 	.word	0x20000c4c

08001f14 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d108      	bne.n	8001f38 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f001 f8c0 	bl	80030b0 <vPortFree>
				vPortFree( pxTCB );
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f001 f8bd 	bl	80030b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8001f36:	e018      	b.n	8001f6a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d103      	bne.n	8001f4a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f001 f8b4 	bl	80030b0 <vPortFree>
	}
 8001f48:	e00f      	b.n	8001f6a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d00a      	beq.n	8001f6a <prvDeleteTCB+0x56>
	__asm volatile
 8001f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f58:	f383 8811 	msr	BASEPRI, r3
 8001f5c:	f3bf 8f6f 	isb	sy
 8001f60:	f3bf 8f4f 	dsb	sy
 8001f64:	60fb      	str	r3, [r7, #12]
}
 8001f66:	bf00      	nop
 8001f68:	e7fe      	b.n	8001f68 <prvDeleteTCB+0x54>
	}
 8001f6a:	bf00      	nop
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
	...

08001f74 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001f7a:	4b0c      	ldr	r3, [pc, #48]	; (8001fac <prvResetNextTaskUnblockTime+0x38>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d104      	bne.n	8001f8e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001f84:	4b0a      	ldr	r3, [pc, #40]	; (8001fb0 <prvResetNextTaskUnblockTime+0x3c>)
 8001f86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f8a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8001f8c:	e008      	b.n	8001fa0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001f8e:	4b07      	ldr	r3, [pc, #28]	; (8001fac <prvResetNextTaskUnblockTime+0x38>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	4a04      	ldr	r2, [pc, #16]	; (8001fb0 <prvResetNextTaskUnblockTime+0x3c>)
 8001f9e:	6013      	str	r3, [r2, #0]
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr
 8001fac:	20000c1c 	.word	0x20000c1c
 8001fb0:	20000c84 	.word	0x20000c84

08001fb4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8001fba:	4b0b      	ldr	r3, [pc, #44]	; (8001fe8 <xTaskGetSchedulerState+0x34>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d102      	bne.n	8001fc8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	607b      	str	r3, [r7, #4]
 8001fc6:	e008      	b.n	8001fda <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001fc8:	4b08      	ldr	r3, [pc, #32]	; (8001fec <xTaskGetSchedulerState+0x38>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d102      	bne.n	8001fd6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	607b      	str	r3, [r7, #4]
 8001fd4:	e001      	b.n	8001fda <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8001fda:	687b      	ldr	r3, [r7, #4]
	}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	20000c70 	.word	0x20000c70
 8001fec:	20000c8c 	.word	0x20000c8c

08001ff0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b086      	sub	sp, #24
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d056      	beq.n	80020b4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8002006:	4b2e      	ldr	r3, [pc, #184]	; (80020c0 <xTaskPriorityDisinherit+0xd0>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	429a      	cmp	r2, r3
 800200e:	d00a      	beq.n	8002026 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8002010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002014:	f383 8811 	msr	BASEPRI, r3
 8002018:	f3bf 8f6f 	isb	sy
 800201c:	f3bf 8f4f 	dsb	sy
 8002020:	60fb      	str	r3, [r7, #12]
}
 8002022:	bf00      	nop
 8002024:	e7fe      	b.n	8002024 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800202a:	2b00      	cmp	r3, #0
 800202c:	d10a      	bne.n	8002044 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800202e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002032:	f383 8811 	msr	BASEPRI, r3
 8002036:	f3bf 8f6f 	isb	sy
 800203a:	f3bf 8f4f 	dsb	sy
 800203e:	60bb      	str	r3, [r7, #8]
}
 8002040:	bf00      	nop
 8002042:	e7fe      	b.n	8002042 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002048:	1e5a      	subs	r2, r3, #1
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002056:	429a      	cmp	r2, r3
 8002058:	d02c      	beq.n	80020b4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800205e:	2b00      	cmp	r3, #0
 8002060:	d128      	bne.n	80020b4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	3304      	adds	r3, #4
 8002066:	4618      	mov	r0, r3
 8002068:	f7fe fc70 	bl	800094c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002078:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002084:	4b0f      	ldr	r3, [pc, #60]	; (80020c4 <xTaskPriorityDisinherit+0xd4>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	429a      	cmp	r2, r3
 800208a:	d903      	bls.n	8002094 <xTaskPriorityDisinherit+0xa4>
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002090:	4a0c      	ldr	r2, [pc, #48]	; (80020c4 <xTaskPriorityDisinherit+0xd4>)
 8002092:	6013      	str	r3, [r2, #0]
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002098:	4613      	mov	r3, r2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	4413      	add	r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	4a09      	ldr	r2, [pc, #36]	; (80020c8 <xTaskPriorityDisinherit+0xd8>)
 80020a2:	441a      	add	r2, r3
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	3304      	adds	r3, #4
 80020a8:	4619      	mov	r1, r3
 80020aa:	4610      	mov	r0, r2
 80020ac:	f7fe fbf1 	bl	8000892 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80020b0:	2301      	movs	r3, #1
 80020b2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80020b4:	697b      	ldr	r3, [r7, #20]
	}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3718      	adds	r7, #24
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	20000790 	.word	0x20000790
 80020c4:	20000c6c 	.word	0x20000c6c
 80020c8:	20000794 	.word	0x20000794

080020cc <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b086      	sub	sp, #24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	607a      	str	r2, [r7, #4]
 80020d8:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80020da:	f000 fdfb 	bl	8002cd4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80020de:	4b26      	ldr	r3, [pc, #152]	; (8002178 <xTaskNotifyWait+0xac>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d01a      	beq.n	8002122 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80020ec:	4b22      	ldr	r3, [pc, #136]	; (8002178 <xTaskNotifyWait+0xac>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80020f2:	68fa      	ldr	r2, [r7, #12]
 80020f4:	43d2      	mvns	r2, r2
 80020f6:	400a      	ands	r2, r1
 80020f8:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80020fa:	4b1f      	ldr	r3, [pc, #124]	; (8002178 <xTaskNotifyWait+0xac>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d00b      	beq.n	8002122 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800210a:	2101      	movs	r1, #1
 800210c:	6838      	ldr	r0, [r7, #0]
 800210e:	f000 f913 	bl	8002338 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8002112:	4b1a      	ldr	r3, [pc, #104]	; (800217c <xTaskNotifyWait+0xb0>)
 8002114:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002118:	601a      	str	r2, [r3, #0]
 800211a:	f3bf 8f4f 	dsb	sy
 800211e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8002122:	f000 fe07 	bl	8002d34 <vPortExitCritical>

		taskENTER_CRITICAL();
 8002126:	f000 fdd5 	bl	8002cd4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d004      	beq.n	800213a <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8002130:	4b11      	ldr	r3, [pc, #68]	; (8002178 <xTaskNotifyWait+0xac>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800213a:	4b0f      	ldr	r3, [pc, #60]	; (8002178 <xTaskNotifyWait+0xac>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002142:	b2db      	uxtb	r3, r3
 8002144:	2b02      	cmp	r3, #2
 8002146:	d002      	beq.n	800214e <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8002148:	2300      	movs	r3, #0
 800214a:	617b      	str	r3, [r7, #20]
 800214c:	e008      	b.n	8002160 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800214e:	4b0a      	ldr	r3, [pc, #40]	; (8002178 <xTaskNotifyWait+0xac>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002154:	68ba      	ldr	r2, [r7, #8]
 8002156:	43d2      	mvns	r2, r2
 8002158:	400a      	ands	r2, r1
 800215a:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 800215c:	2301      	movs	r3, #1
 800215e:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002160:	4b05      	ldr	r3, [pc, #20]	; (8002178 <xTaskNotifyWait+0xac>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800216a:	f000 fde3 	bl	8002d34 <vPortExitCritical>

		return xReturn;
 800216e:	697b      	ldr	r3, [r7, #20]
	}
 8002170:	4618      	mov	r0, r3
 8002172:	3718      	adds	r7, #24
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	20000790 	.word	0x20000790
 800217c:	e000ed04 	.word	0xe000ed04

08002180 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8002180:	b580      	push	{r7, lr}
 8002182:	b08e      	sub	sp, #56	; 0x38
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	603b      	str	r3, [r7, #0]
 800218c:	4613      	mov	r3, r2
 800218e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8002190:	2301      	movs	r3, #1
 8002192:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d10a      	bne.n	80021b0 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800219a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800219e:	f383 8811 	msr	BASEPRI, r3
 80021a2:	f3bf 8f6f 	isb	sy
 80021a6:	f3bf 8f4f 	dsb	sy
 80021aa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80021ac:	bf00      	nop
 80021ae:	e7fe      	b.n	80021ae <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80021b0:	f000 fe72 	bl	8002e98 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 80021b8:	f3ef 8211 	mrs	r2, BASEPRI
 80021bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021c0:	f383 8811 	msr	BASEPRI, r3
 80021c4:	f3bf 8f6f 	isb	sy
 80021c8:	f3bf 8f4f 	dsb	sy
 80021cc:	623a      	str	r2, [r7, #32]
 80021ce:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80021d0:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80021d2:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d003      	beq.n	80021e2 <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80021da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80021e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021e4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80021e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80021ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ee:	2202      	movs	r2, #2
 80021f0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 80021f4:	79fb      	ldrb	r3, [r7, #7]
 80021f6:	2b04      	cmp	r3, #4
 80021f8:	d828      	bhi.n	800224c <xTaskGenericNotifyFromISR+0xcc>
 80021fa:	a201      	add	r2, pc, #4	; (adr r2, 8002200 <xTaskGenericNotifyFromISR+0x80>)
 80021fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002200:	0800226d 	.word	0x0800226d
 8002204:	08002215 	.word	0x08002215
 8002208:	08002223 	.word	0x08002223
 800220c:	0800222f 	.word	0x0800222f
 8002210:	08002237 	.word	0x08002237
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8002214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002216:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	431a      	orrs	r2, r3
 800221c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800221e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8002220:	e027      	b.n	8002272 <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8002222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002226:	1c5a      	adds	r2, r3, #1
 8002228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800222a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800222c:	e021      	b.n	8002272 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800222e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002230:	68ba      	ldr	r2, [r7, #8]
 8002232:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8002234:	e01d      	b.n	8002272 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8002236:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800223a:	2b02      	cmp	r3, #2
 800223c:	d003      	beq.n	8002246 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800223e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002240:	68ba      	ldr	r2, [r7, #8]
 8002242:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8002244:	e015      	b.n	8002272 <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 8002246:	2300      	movs	r3, #0
 8002248:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800224a:	e012      	b.n	8002272 <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800224c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800224e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002250:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002254:	d00c      	beq.n	8002270 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 8002256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800225a:	f383 8811 	msr	BASEPRI, r3
 800225e:	f3bf 8f6f 	isb	sy
 8002262:	f3bf 8f4f 	dsb	sy
 8002266:	61bb      	str	r3, [r7, #24]
}
 8002268:	bf00      	nop
 800226a:	e7fe      	b.n	800226a <xTaskGenericNotifyFromISR+0xea>
					break;
 800226c:	bf00      	nop
 800226e:	e000      	b.n	8002272 <xTaskGenericNotifyFromISR+0xf2>
					break;
 8002270:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8002272:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002276:	2b01      	cmp	r3, #1
 8002278:	d146      	bne.n	8002308 <xTaskGenericNotifyFromISR+0x188>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800227a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800227c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00a      	beq.n	8002298 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 8002282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002286:	f383 8811 	msr	BASEPRI, r3
 800228a:	f3bf 8f6f 	isb	sy
 800228e:	f3bf 8f4f 	dsb	sy
 8002292:	617b      	str	r3, [r7, #20]
}
 8002294:	bf00      	nop
 8002296:	e7fe      	b.n	8002296 <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002298:	4b21      	ldr	r3, [pc, #132]	; (8002320 <xTaskGenericNotifyFromISR+0x1a0>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d11d      	bne.n	80022dc <xTaskGenericNotifyFromISR+0x15c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80022a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022a2:	3304      	adds	r3, #4
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7fe fb51 	bl	800094c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80022aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022ae:	4b1d      	ldr	r3, [pc, #116]	; (8002324 <xTaskGenericNotifyFromISR+0x1a4>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d903      	bls.n	80022be <xTaskGenericNotifyFromISR+0x13e>
 80022b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ba:	4a1a      	ldr	r2, [pc, #104]	; (8002324 <xTaskGenericNotifyFromISR+0x1a4>)
 80022bc:	6013      	str	r3, [r2, #0]
 80022be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022c2:	4613      	mov	r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	4413      	add	r3, r2
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	4a17      	ldr	r2, [pc, #92]	; (8002328 <xTaskGenericNotifyFromISR+0x1a8>)
 80022cc:	441a      	add	r2, r3
 80022ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022d0:	3304      	adds	r3, #4
 80022d2:	4619      	mov	r1, r3
 80022d4:	4610      	mov	r0, r2
 80022d6:	f7fe fadc 	bl	8000892 <vListInsertEnd>
 80022da:	e005      	b.n	80022e8 <xTaskGenericNotifyFromISR+0x168>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80022dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022de:	3318      	adds	r3, #24
 80022e0:	4619      	mov	r1, r3
 80022e2:	4812      	ldr	r0, [pc, #72]	; (800232c <xTaskGenericNotifyFromISR+0x1ac>)
 80022e4:	f7fe fad5 	bl	8000892 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80022e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022ec:	4b10      	ldr	r3, [pc, #64]	; (8002330 <xTaskGenericNotifyFromISR+0x1b0>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d908      	bls.n	8002308 <xTaskGenericNotifyFromISR+0x188>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80022f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d002      	beq.n	8002302 <xTaskGenericNotifyFromISR+0x182>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80022fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022fe:	2201      	movs	r2, #1
 8002300:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8002302:	4b0c      	ldr	r3, [pc, #48]	; (8002334 <xTaskGenericNotifyFromISR+0x1b4>)
 8002304:	2201      	movs	r2, #1
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800230a:	613b      	str	r3, [r7, #16]
	__asm volatile
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	f383 8811 	msr	BASEPRI, r3
}
 8002312:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8002314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8002316:	4618      	mov	r0, r3
 8002318:	3738      	adds	r7, #56	; 0x38
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	20000c8c 	.word	0x20000c8c
 8002324:	20000c6c 	.word	0x20000c6c
 8002328:	20000794 	.word	0x20000794
 800232c:	20000c24 	.word	0x20000c24
 8002330:	20000790 	.word	0x20000790
 8002334:	20000c78 	.word	0x20000c78

08002338 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002342:	4b21      	ldr	r3, [pc, #132]	; (80023c8 <prvAddCurrentTaskToDelayedList+0x90>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002348:	4b20      	ldr	r3, [pc, #128]	; (80023cc <prvAddCurrentTaskToDelayedList+0x94>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	3304      	adds	r3, #4
 800234e:	4618      	mov	r0, r3
 8002350:	f7fe fafc 	bl	800094c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800235a:	d10a      	bne.n	8002372 <prvAddCurrentTaskToDelayedList+0x3a>
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d007      	beq.n	8002372 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002362:	4b1a      	ldr	r3, [pc, #104]	; (80023cc <prvAddCurrentTaskToDelayedList+0x94>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	3304      	adds	r3, #4
 8002368:	4619      	mov	r1, r3
 800236a:	4819      	ldr	r0, [pc, #100]	; (80023d0 <prvAddCurrentTaskToDelayedList+0x98>)
 800236c:	f7fe fa91 	bl	8000892 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002370:	e026      	b.n	80023c0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4413      	add	r3, r2
 8002378:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800237a:	4b14      	ldr	r3, [pc, #80]	; (80023cc <prvAddCurrentTaskToDelayedList+0x94>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	68ba      	ldr	r2, [r7, #8]
 8002380:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002382:	68ba      	ldr	r2, [r7, #8]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	429a      	cmp	r2, r3
 8002388:	d209      	bcs.n	800239e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800238a:	4b12      	ldr	r3, [pc, #72]	; (80023d4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	4b0f      	ldr	r3, [pc, #60]	; (80023cc <prvAddCurrentTaskToDelayedList+0x94>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	3304      	adds	r3, #4
 8002394:	4619      	mov	r1, r3
 8002396:	4610      	mov	r0, r2
 8002398:	f7fe fa9f 	bl	80008da <vListInsert>
}
 800239c:	e010      	b.n	80023c0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800239e:	4b0e      	ldr	r3, [pc, #56]	; (80023d8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	4b0a      	ldr	r3, [pc, #40]	; (80023cc <prvAddCurrentTaskToDelayedList+0x94>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	3304      	adds	r3, #4
 80023a8:	4619      	mov	r1, r3
 80023aa:	4610      	mov	r0, r2
 80023ac:	f7fe fa95 	bl	80008da <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80023b0:	4b0a      	ldr	r3, [pc, #40]	; (80023dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	68ba      	ldr	r2, [r7, #8]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d202      	bcs.n	80023c0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80023ba:	4a08      	ldr	r2, [pc, #32]	; (80023dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	6013      	str	r3, [r2, #0]
}
 80023c0:	bf00      	nop
 80023c2:	3710      	adds	r7, #16
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	20000c68 	.word	0x20000c68
 80023cc:	20000790 	.word	0x20000790
 80023d0:	20000c50 	.word	0x20000c50
 80023d4:	20000c20 	.word	0x20000c20
 80023d8:	20000c1c 	.word	0x20000c1c
 80023dc:	20000c84 	.word	0x20000c84

080023e0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b08a      	sub	sp, #40	; 0x28
 80023e4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80023e6:	2300      	movs	r3, #0
 80023e8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80023ea:	f000 fb07 	bl	80029fc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80023ee:	4b1c      	ldr	r3, [pc, #112]	; (8002460 <xTimerCreateTimerTask+0x80>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d021      	beq.n	800243a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80023f6:	2300      	movs	r3, #0
 80023f8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80023fa:	2300      	movs	r3, #0
 80023fc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80023fe:	1d3a      	adds	r2, r7, #4
 8002400:	f107 0108 	add.w	r1, r7, #8
 8002404:	f107 030c 	add.w	r3, r7, #12
 8002408:	4618      	mov	r0, r3
 800240a:	f7fe f9fb 	bl	8000804 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	68fa      	ldr	r2, [r7, #12]
 8002414:	9202      	str	r2, [sp, #8]
 8002416:	9301      	str	r3, [sp, #4]
 8002418:	2302      	movs	r3, #2
 800241a:	9300      	str	r3, [sp, #0]
 800241c:	2300      	movs	r3, #0
 800241e:	460a      	mov	r2, r1
 8002420:	4910      	ldr	r1, [pc, #64]	; (8002464 <xTimerCreateTimerTask+0x84>)
 8002422:	4811      	ldr	r0, [pc, #68]	; (8002468 <xTimerCreateTimerTask+0x88>)
 8002424:	f7fe ffa8 	bl	8001378 <xTaskCreateStatic>
 8002428:	4603      	mov	r3, r0
 800242a:	4a10      	ldr	r2, [pc, #64]	; (800246c <xTimerCreateTimerTask+0x8c>)
 800242c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800242e:	4b0f      	ldr	r3, [pc, #60]	; (800246c <xTimerCreateTimerTask+0x8c>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8002436:	2301      	movs	r3, #1
 8002438:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d10a      	bne.n	8002456 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8002440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002444:	f383 8811 	msr	BASEPRI, r3
 8002448:	f3bf 8f6f 	isb	sy
 800244c:	f3bf 8f4f 	dsb	sy
 8002450:	613b      	str	r3, [r7, #16]
}
 8002452:	bf00      	nop
 8002454:	e7fe      	b.n	8002454 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8002456:	697b      	ldr	r3, [r7, #20]
}
 8002458:	4618      	mov	r0, r3
 800245a:	3718      	adds	r7, #24
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	20000cc0 	.word	0x20000cc0
 8002464:	08007084 	.word	0x08007084
 8002468:	080025a5 	.word	0x080025a5
 800246c:	20000cc4 	.word	0x20000cc4

08002470 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b08a      	sub	sp, #40	; 0x28
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	607a      	str	r2, [r7, #4]
 800247c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800247e:	2300      	movs	r3, #0
 8002480:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d10a      	bne.n	800249e <xTimerGenericCommand+0x2e>
	__asm volatile
 8002488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800248c:	f383 8811 	msr	BASEPRI, r3
 8002490:	f3bf 8f6f 	isb	sy
 8002494:	f3bf 8f4f 	dsb	sy
 8002498:	623b      	str	r3, [r7, #32]
}
 800249a:	bf00      	nop
 800249c:	e7fe      	b.n	800249c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800249e:	4b1a      	ldr	r3, [pc, #104]	; (8002508 <xTimerGenericCommand+0x98>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d02a      	beq.n	80024fc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	2b05      	cmp	r3, #5
 80024b6:	dc18      	bgt.n	80024ea <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80024b8:	f7ff fd7c 	bl	8001fb4 <xTaskGetSchedulerState>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d109      	bne.n	80024d6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80024c2:	4b11      	ldr	r3, [pc, #68]	; (8002508 <xTimerGenericCommand+0x98>)
 80024c4:	6818      	ldr	r0, [r3, #0]
 80024c6:	f107 0110 	add.w	r1, r7, #16
 80024ca:	2300      	movs	r3, #0
 80024cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024ce:	f7fe fb6b 	bl	8000ba8 <xQueueGenericSend>
 80024d2:	6278      	str	r0, [r7, #36]	; 0x24
 80024d4:	e012      	b.n	80024fc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80024d6:	4b0c      	ldr	r3, [pc, #48]	; (8002508 <xTimerGenericCommand+0x98>)
 80024d8:	6818      	ldr	r0, [r3, #0]
 80024da:	f107 0110 	add.w	r1, r7, #16
 80024de:	2300      	movs	r3, #0
 80024e0:	2200      	movs	r2, #0
 80024e2:	f7fe fb61 	bl	8000ba8 <xQueueGenericSend>
 80024e6:	6278      	str	r0, [r7, #36]	; 0x24
 80024e8:	e008      	b.n	80024fc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80024ea:	4b07      	ldr	r3, [pc, #28]	; (8002508 <xTimerGenericCommand+0x98>)
 80024ec:	6818      	ldr	r0, [r3, #0]
 80024ee:	f107 0110 	add.w	r1, r7, #16
 80024f2:	2300      	movs	r3, #0
 80024f4:	683a      	ldr	r2, [r7, #0]
 80024f6:	f7fe fc55 	bl	8000da4 <xQueueGenericSendFromISR>
 80024fa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80024fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3728      	adds	r7, #40	; 0x28
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	20000cc0 	.word	0x20000cc0

0800250c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b088      	sub	sp, #32
 8002510:	af02      	add	r7, sp, #8
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002516:	4b22      	ldr	r3, [pc, #136]	; (80025a0 <prvProcessExpiredTimer+0x94>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	3304      	adds	r3, #4
 8002524:	4618      	mov	r0, r3
 8002526:	f7fe fa11 	bl	800094c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002530:	f003 0304 	and.w	r3, r3, #4
 8002534:	2b00      	cmp	r3, #0
 8002536:	d022      	beq.n	800257e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	699a      	ldr	r2, [r3, #24]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	18d1      	adds	r1, r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	683a      	ldr	r2, [r7, #0]
 8002544:	6978      	ldr	r0, [r7, #20]
 8002546:	f000 f8d1 	bl	80026ec <prvInsertTimerInActiveList>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d01f      	beq.n	8002590 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002550:	2300      	movs	r3, #0
 8002552:	9300      	str	r3, [sp, #0]
 8002554:	2300      	movs	r3, #0
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	2100      	movs	r1, #0
 800255a:	6978      	ldr	r0, [r7, #20]
 800255c:	f7ff ff88 	bl	8002470 <xTimerGenericCommand>
 8002560:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d113      	bne.n	8002590 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8002568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800256c:	f383 8811 	msr	BASEPRI, r3
 8002570:	f3bf 8f6f 	isb	sy
 8002574:	f3bf 8f4f 	dsb	sy
 8002578:	60fb      	str	r3, [r7, #12]
}
 800257a:	bf00      	nop
 800257c:	e7fe      	b.n	800257c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002584:	f023 0301 	bic.w	r3, r3, #1
 8002588:	b2da      	uxtb	r2, r3
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	6a1b      	ldr	r3, [r3, #32]
 8002594:	6978      	ldr	r0, [r7, #20]
 8002596:	4798      	blx	r3
}
 8002598:	bf00      	nop
 800259a:	3718      	adds	r7, #24
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	20000cb8 	.word	0x20000cb8

080025a4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80025ac:	f107 0308 	add.w	r3, r7, #8
 80025b0:	4618      	mov	r0, r3
 80025b2:	f000 f857 	bl	8002664 <prvGetNextExpireTime>
 80025b6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	4619      	mov	r1, r3
 80025bc:	68f8      	ldr	r0, [r7, #12]
 80025be:	f000 f803 	bl	80025c8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80025c2:	f000 f8d5 	bl	8002770 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80025c6:	e7f1      	b.n	80025ac <prvTimerTask+0x8>

080025c8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80025d2:	f7ff f90d 	bl	80017f0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80025d6:	f107 0308 	add.w	r3, r7, #8
 80025da:	4618      	mov	r0, r3
 80025dc:	f000 f866 	bl	80026ac <prvSampleTimeNow>
 80025e0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d130      	bne.n	800264a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d10a      	bne.n	8002604 <prvProcessTimerOrBlockTask+0x3c>
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d806      	bhi.n	8002604 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80025f6:	f7ff f909 	bl	800180c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80025fa:	68f9      	ldr	r1, [r7, #12]
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f7ff ff85 	bl	800250c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8002602:	e024      	b.n	800264e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d008      	beq.n	800261c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800260a:	4b13      	ldr	r3, [pc, #76]	; (8002658 <prvProcessTimerOrBlockTask+0x90>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d101      	bne.n	8002618 <prvProcessTimerOrBlockTask+0x50>
 8002614:	2301      	movs	r3, #1
 8002616:	e000      	b.n	800261a <prvProcessTimerOrBlockTask+0x52>
 8002618:	2300      	movs	r3, #0
 800261a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800261c:	4b0f      	ldr	r3, [pc, #60]	; (800265c <prvProcessTimerOrBlockTask+0x94>)
 800261e:	6818      	ldr	r0, [r3, #0]
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	683a      	ldr	r2, [r7, #0]
 8002628:	4619      	mov	r1, r3
 800262a:	f7fe fe71 	bl	8001310 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800262e:	f7ff f8ed 	bl	800180c <xTaskResumeAll>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d10a      	bne.n	800264e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8002638:	4b09      	ldr	r3, [pc, #36]	; (8002660 <prvProcessTimerOrBlockTask+0x98>)
 800263a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800263e:	601a      	str	r2, [r3, #0]
 8002640:	f3bf 8f4f 	dsb	sy
 8002644:	f3bf 8f6f 	isb	sy
}
 8002648:	e001      	b.n	800264e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800264a:	f7ff f8df 	bl	800180c <xTaskResumeAll>
}
 800264e:	bf00      	nop
 8002650:	3710      	adds	r7, #16
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	20000cbc 	.word	0x20000cbc
 800265c:	20000cc0 	.word	0x20000cc0
 8002660:	e000ed04 	.word	0xe000ed04

08002664 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8002664:	b480      	push	{r7}
 8002666:	b085      	sub	sp, #20
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800266c:	4b0e      	ldr	r3, [pc, #56]	; (80026a8 <prvGetNextExpireTime+0x44>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d101      	bne.n	800267a <prvGetNextExpireTime+0x16>
 8002676:	2201      	movs	r2, #1
 8002678:	e000      	b.n	800267c <prvGetNextExpireTime+0x18>
 800267a:	2200      	movs	r2, #0
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d105      	bne.n	8002694 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002688:	4b07      	ldr	r3, [pc, #28]	; (80026a8 <prvGetNextExpireTime+0x44>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	60fb      	str	r3, [r7, #12]
 8002692:	e001      	b.n	8002698 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8002694:	2300      	movs	r3, #0
 8002696:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8002698:	68fb      	ldr	r3, [r7, #12]
}
 800269a:	4618      	mov	r0, r3
 800269c:	3714      	adds	r7, #20
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	20000cb8 	.word	0x20000cb8

080026ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80026b4:	f7ff f948 	bl	8001948 <xTaskGetTickCount>
 80026b8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80026ba:	4b0b      	ldr	r3, [pc, #44]	; (80026e8 <prvSampleTimeNow+0x3c>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68fa      	ldr	r2, [r7, #12]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d205      	bcs.n	80026d0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80026c4:	f000 f936 	bl	8002934 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	601a      	str	r2, [r3, #0]
 80026ce:	e002      	b.n	80026d6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80026d6:	4a04      	ldr	r2, [pc, #16]	; (80026e8 <prvSampleTimeNow+0x3c>)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80026dc:	68fb      	ldr	r3, [r7, #12]
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3710      	adds	r7, #16
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	20000cc8 	.word	0x20000cc8

080026ec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	60b9      	str	r1, [r7, #8]
 80026f6:	607a      	str	r2, [r7, #4]
 80026f8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80026fa:	2300      	movs	r3, #0
 80026fc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	68ba      	ldr	r2, [r7, #8]
 8002702:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	68fa      	ldr	r2, [r7, #12]
 8002708:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800270a:	68ba      	ldr	r2, [r7, #8]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	429a      	cmp	r2, r3
 8002710:	d812      	bhi.n	8002738 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	1ad2      	subs	r2, r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	699b      	ldr	r3, [r3, #24]
 800271c:	429a      	cmp	r2, r3
 800271e:	d302      	bcc.n	8002726 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8002720:	2301      	movs	r3, #1
 8002722:	617b      	str	r3, [r7, #20]
 8002724:	e01b      	b.n	800275e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002726:	4b10      	ldr	r3, [pc, #64]	; (8002768 <prvInsertTimerInActiveList+0x7c>)
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	3304      	adds	r3, #4
 800272e:	4619      	mov	r1, r3
 8002730:	4610      	mov	r0, r2
 8002732:	f7fe f8d2 	bl	80008da <vListInsert>
 8002736:	e012      	b.n	800275e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	429a      	cmp	r2, r3
 800273e:	d206      	bcs.n	800274e <prvInsertTimerInActiveList+0x62>
 8002740:	68ba      	ldr	r2, [r7, #8]
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	429a      	cmp	r2, r3
 8002746:	d302      	bcc.n	800274e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8002748:	2301      	movs	r3, #1
 800274a:	617b      	str	r3, [r7, #20]
 800274c:	e007      	b.n	800275e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800274e:	4b07      	ldr	r3, [pc, #28]	; (800276c <prvInsertTimerInActiveList+0x80>)
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	3304      	adds	r3, #4
 8002756:	4619      	mov	r1, r3
 8002758:	4610      	mov	r0, r2
 800275a:	f7fe f8be 	bl	80008da <vListInsert>
		}
	}

	return xProcessTimerNow;
 800275e:	697b      	ldr	r3, [r7, #20]
}
 8002760:	4618      	mov	r0, r3
 8002762:	3718      	adds	r7, #24
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	20000cbc 	.word	0x20000cbc
 800276c:	20000cb8 	.word	0x20000cb8

08002770 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b08e      	sub	sp, #56	; 0x38
 8002774:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002776:	e0ca      	b.n	800290e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2b00      	cmp	r3, #0
 800277c:	da18      	bge.n	80027b0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800277e:	1d3b      	adds	r3, r7, #4
 8002780:	3304      	adds	r3, #4
 8002782:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8002784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002786:	2b00      	cmp	r3, #0
 8002788:	d10a      	bne.n	80027a0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800278a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800278e:	f383 8811 	msr	BASEPRI, r3
 8002792:	f3bf 8f6f 	isb	sy
 8002796:	f3bf 8f4f 	dsb	sy
 800279a:	61fb      	str	r3, [r7, #28]
}
 800279c:	bf00      	nop
 800279e:	e7fe      	b.n	800279e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80027a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027a6:	6850      	ldr	r0, [r2, #4]
 80027a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027aa:	6892      	ldr	r2, [r2, #8]
 80027ac:	4611      	mov	r1, r2
 80027ae:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f2c0 80aa 	blt.w	800290c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80027bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027be:	695b      	ldr	r3, [r3, #20]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d004      	beq.n	80027ce <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80027c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027c6:	3304      	adds	r3, #4
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7fe f8bf 	bl	800094c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80027ce:	463b      	mov	r3, r7
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7ff ff6b 	bl	80026ac <prvSampleTimeNow>
 80027d6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2b09      	cmp	r3, #9
 80027dc:	f200 8097 	bhi.w	800290e <prvProcessReceivedCommands+0x19e>
 80027e0:	a201      	add	r2, pc, #4	; (adr r2, 80027e8 <prvProcessReceivedCommands+0x78>)
 80027e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027e6:	bf00      	nop
 80027e8:	08002811 	.word	0x08002811
 80027ec:	08002811 	.word	0x08002811
 80027f0:	08002811 	.word	0x08002811
 80027f4:	08002885 	.word	0x08002885
 80027f8:	08002899 	.word	0x08002899
 80027fc:	080028e3 	.word	0x080028e3
 8002800:	08002811 	.word	0x08002811
 8002804:	08002811 	.word	0x08002811
 8002808:	08002885 	.word	0x08002885
 800280c:	08002899 	.word	0x08002899
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002812:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002816:	f043 0301 	orr.w	r3, r3, #1
 800281a:	b2da      	uxtb	r2, r3
 800281c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800281e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002822:	68ba      	ldr	r2, [r7, #8]
 8002824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	18d1      	adds	r1, r2, r3
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800282e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002830:	f7ff ff5c 	bl	80026ec <prvInsertTimerInActiveList>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d069      	beq.n	800290e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800283a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800283c:	6a1b      	ldr	r3, [r3, #32]
 800283e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002840:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002844:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002848:	f003 0304 	and.w	r3, r3, #4
 800284c:	2b00      	cmp	r3, #0
 800284e:	d05e      	beq.n	800290e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002850:	68ba      	ldr	r2, [r7, #8]
 8002852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	441a      	add	r2, r3
 8002858:	2300      	movs	r3, #0
 800285a:	9300      	str	r3, [sp, #0]
 800285c:	2300      	movs	r3, #0
 800285e:	2100      	movs	r1, #0
 8002860:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002862:	f7ff fe05 	bl	8002470 <xTimerGenericCommand>
 8002866:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8002868:	6a3b      	ldr	r3, [r7, #32]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d14f      	bne.n	800290e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800286e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002872:	f383 8811 	msr	BASEPRI, r3
 8002876:	f3bf 8f6f 	isb	sy
 800287a:	f3bf 8f4f 	dsb	sy
 800287e:	61bb      	str	r3, [r7, #24]
}
 8002880:	bf00      	nop
 8002882:	e7fe      	b.n	8002882 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002886:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800288a:	f023 0301 	bic.w	r3, r3, #1
 800288e:	b2da      	uxtb	r2, r3
 8002890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002892:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8002896:	e03a      	b.n	800290e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800289a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800289e:	f043 0301 	orr.w	r3, r3, #1
 80028a2:	b2da      	uxtb	r2, r3
 80028a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80028aa:	68ba      	ldr	r2, [r7, #8]
 80028ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ae:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80028b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d10a      	bne.n	80028ce <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80028b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028bc:	f383 8811 	msr	BASEPRI, r3
 80028c0:	f3bf 8f6f 	isb	sy
 80028c4:	f3bf 8f4f 	dsb	sy
 80028c8:	617b      	str	r3, [r7, #20]
}
 80028ca:	bf00      	nop
 80028cc:	e7fe      	b.n	80028cc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80028ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d0:	699a      	ldr	r2, [r3, #24]
 80028d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d4:	18d1      	adds	r1, r2, r3
 80028d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028dc:	f7ff ff06 	bl	80026ec <prvInsertTimerInActiveList>
					break;
 80028e0:	e015      	b.n	800290e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80028e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80028e8:	f003 0302 	and.w	r3, r3, #2
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d103      	bne.n	80028f8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80028f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028f2:	f000 fbdd 	bl	80030b0 <vPortFree>
 80028f6:	e00a      	b.n	800290e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80028f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80028fe:	f023 0301 	bic.w	r3, r3, #1
 8002902:	b2da      	uxtb	r2, r3
 8002904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002906:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800290a:	e000      	b.n	800290e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800290c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800290e:	4b08      	ldr	r3, [pc, #32]	; (8002930 <prvProcessReceivedCommands+0x1c0>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	1d39      	adds	r1, r7, #4
 8002914:	2200      	movs	r2, #0
 8002916:	4618      	mov	r0, r3
 8002918:	f7fe fae0 	bl	8000edc <xQueueReceive>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	f47f af2a 	bne.w	8002778 <prvProcessReceivedCommands+0x8>
	}
}
 8002924:	bf00      	nop
 8002926:	bf00      	nop
 8002928:	3730      	adds	r7, #48	; 0x30
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	20000cc0 	.word	0x20000cc0

08002934 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b088      	sub	sp, #32
 8002938:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800293a:	e048      	b.n	80029ce <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800293c:	4b2d      	ldr	r3, [pc, #180]	; (80029f4 <prvSwitchTimerLists+0xc0>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002946:	4b2b      	ldr	r3, [pc, #172]	; (80029f4 <prvSwitchTimerLists+0xc0>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	3304      	adds	r3, #4
 8002954:	4618      	mov	r0, r3
 8002956:	f7fd fff9 	bl	800094c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6a1b      	ldr	r3, [r3, #32]
 800295e:	68f8      	ldr	r0, [r7, #12]
 8002960:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002968:	f003 0304 	and.w	r3, r3, #4
 800296c:	2b00      	cmp	r3, #0
 800296e:	d02e      	beq.n	80029ce <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	699b      	ldr	r3, [r3, #24]
 8002974:	693a      	ldr	r2, [r7, #16]
 8002976:	4413      	add	r3, r2
 8002978:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800297a:	68ba      	ldr	r2, [r7, #8]
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	429a      	cmp	r2, r3
 8002980:	d90e      	bls.n	80029a0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	68ba      	ldr	r2, [r7, #8]
 8002986:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800298e:	4b19      	ldr	r3, [pc, #100]	; (80029f4 <prvSwitchTimerLists+0xc0>)
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	3304      	adds	r3, #4
 8002996:	4619      	mov	r1, r3
 8002998:	4610      	mov	r0, r2
 800299a:	f7fd ff9e 	bl	80008da <vListInsert>
 800299e:	e016      	b.n	80029ce <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80029a0:	2300      	movs	r3, #0
 80029a2:	9300      	str	r3, [sp, #0]
 80029a4:	2300      	movs	r3, #0
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	2100      	movs	r1, #0
 80029aa:	68f8      	ldr	r0, [r7, #12]
 80029ac:	f7ff fd60 	bl	8002470 <xTimerGenericCommand>
 80029b0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d10a      	bne.n	80029ce <prvSwitchTimerLists+0x9a>
	__asm volatile
 80029b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029bc:	f383 8811 	msr	BASEPRI, r3
 80029c0:	f3bf 8f6f 	isb	sy
 80029c4:	f3bf 8f4f 	dsb	sy
 80029c8:	603b      	str	r3, [r7, #0]
}
 80029ca:	bf00      	nop
 80029cc:	e7fe      	b.n	80029cc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80029ce:	4b09      	ldr	r3, [pc, #36]	; (80029f4 <prvSwitchTimerLists+0xc0>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d1b1      	bne.n	800293c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80029d8:	4b06      	ldr	r3, [pc, #24]	; (80029f4 <prvSwitchTimerLists+0xc0>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80029de:	4b06      	ldr	r3, [pc, #24]	; (80029f8 <prvSwitchTimerLists+0xc4>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a04      	ldr	r2, [pc, #16]	; (80029f4 <prvSwitchTimerLists+0xc0>)
 80029e4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80029e6:	4a04      	ldr	r2, [pc, #16]	; (80029f8 <prvSwitchTimerLists+0xc4>)
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	6013      	str	r3, [r2, #0]
}
 80029ec:	bf00      	nop
 80029ee:	3718      	adds	r7, #24
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	20000cb8 	.word	0x20000cb8
 80029f8:	20000cbc 	.word	0x20000cbc

080029fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8002a02:	f000 f967 	bl	8002cd4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8002a06:	4b15      	ldr	r3, [pc, #84]	; (8002a5c <prvCheckForValidListAndQueue+0x60>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d120      	bne.n	8002a50 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8002a0e:	4814      	ldr	r0, [pc, #80]	; (8002a60 <prvCheckForValidListAndQueue+0x64>)
 8002a10:	f7fd ff12 	bl	8000838 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8002a14:	4813      	ldr	r0, [pc, #76]	; (8002a64 <prvCheckForValidListAndQueue+0x68>)
 8002a16:	f7fd ff0f 	bl	8000838 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8002a1a:	4b13      	ldr	r3, [pc, #76]	; (8002a68 <prvCheckForValidListAndQueue+0x6c>)
 8002a1c:	4a10      	ldr	r2, [pc, #64]	; (8002a60 <prvCheckForValidListAndQueue+0x64>)
 8002a1e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8002a20:	4b12      	ldr	r3, [pc, #72]	; (8002a6c <prvCheckForValidListAndQueue+0x70>)
 8002a22:	4a10      	ldr	r2, [pc, #64]	; (8002a64 <prvCheckForValidListAndQueue+0x68>)
 8002a24:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8002a26:	2300      	movs	r3, #0
 8002a28:	9300      	str	r3, [sp, #0]
 8002a2a:	4b11      	ldr	r3, [pc, #68]	; (8002a70 <prvCheckForValidListAndQueue+0x74>)
 8002a2c:	4a11      	ldr	r2, [pc, #68]	; (8002a74 <prvCheckForValidListAndQueue+0x78>)
 8002a2e:	2110      	movs	r1, #16
 8002a30:	200a      	movs	r0, #10
 8002a32:	f7fe f81d 	bl	8000a70 <xQueueGenericCreateStatic>
 8002a36:	4603      	mov	r3, r0
 8002a38:	4a08      	ldr	r2, [pc, #32]	; (8002a5c <prvCheckForValidListAndQueue+0x60>)
 8002a3a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8002a3c:	4b07      	ldr	r3, [pc, #28]	; (8002a5c <prvCheckForValidListAndQueue+0x60>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d005      	beq.n	8002a50 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002a44:	4b05      	ldr	r3, [pc, #20]	; (8002a5c <prvCheckForValidListAndQueue+0x60>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	490b      	ldr	r1, [pc, #44]	; (8002a78 <prvCheckForValidListAndQueue+0x7c>)
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7fe fc36 	bl	80012bc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002a50:	f000 f970 	bl	8002d34 <vPortExitCritical>
}
 8002a54:	bf00      	nop
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	20000cc0 	.word	0x20000cc0
 8002a60:	20000c90 	.word	0x20000c90
 8002a64:	20000ca4 	.word	0x20000ca4
 8002a68:	20000cb8 	.word	0x20000cb8
 8002a6c:	20000cbc 	.word	0x20000cbc
 8002a70:	20000d6c 	.word	0x20000d6c
 8002a74:	20000ccc 	.word	0x20000ccc
 8002a78:	0800708c 	.word	0x0800708c

08002a7c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b085      	sub	sp, #20
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	60b9      	str	r1, [r7, #8]
 8002a86:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	3b04      	subs	r3, #4
 8002a8c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002a94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	3b04      	subs	r3, #4
 8002a9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	f023 0201 	bic.w	r2, r3, #1
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	3b04      	subs	r3, #4
 8002aaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002aac:	4a0c      	ldr	r2, [pc, #48]	; (8002ae0 <pxPortInitialiseStack+0x64>)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	3b14      	subs	r3, #20
 8002ab6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	3b04      	subs	r3, #4
 8002ac2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f06f 0202 	mvn.w	r2, #2
 8002aca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	3b20      	subs	r3, #32
 8002ad0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3714      	adds	r7, #20
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr
 8002ae0:	08002ae5 	.word	0x08002ae5

08002ae4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8002aea:	2300      	movs	r3, #0
 8002aec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002aee:	4b12      	ldr	r3, [pc, #72]	; (8002b38 <prvTaskExitError+0x54>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002af6:	d00a      	beq.n	8002b0e <prvTaskExitError+0x2a>
	__asm volatile
 8002af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002afc:	f383 8811 	msr	BASEPRI, r3
 8002b00:	f3bf 8f6f 	isb	sy
 8002b04:	f3bf 8f4f 	dsb	sy
 8002b08:	60fb      	str	r3, [r7, #12]
}
 8002b0a:	bf00      	nop
 8002b0c:	e7fe      	b.n	8002b0c <prvTaskExitError+0x28>
	__asm volatile
 8002b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b12:	f383 8811 	msr	BASEPRI, r3
 8002b16:	f3bf 8f6f 	isb	sy
 8002b1a:	f3bf 8f4f 	dsb	sy
 8002b1e:	60bb      	str	r3, [r7, #8]
}
 8002b20:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002b22:	bf00      	nop
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d0fc      	beq.n	8002b24 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002b2a:	bf00      	nop
 8002b2c:	bf00      	nop
 8002b2e:	3714      	adds	r7, #20
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr
 8002b38:	20000000 	.word	0x20000000
 8002b3c:	00000000 	.word	0x00000000

08002b40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002b40:	4b07      	ldr	r3, [pc, #28]	; (8002b60 <pxCurrentTCBConst2>)
 8002b42:	6819      	ldr	r1, [r3, #0]
 8002b44:	6808      	ldr	r0, [r1, #0]
 8002b46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b4a:	f380 8809 	msr	PSP, r0
 8002b4e:	f3bf 8f6f 	isb	sy
 8002b52:	f04f 0000 	mov.w	r0, #0
 8002b56:	f380 8811 	msr	BASEPRI, r0
 8002b5a:	4770      	bx	lr
 8002b5c:	f3af 8000 	nop.w

08002b60 <pxCurrentTCBConst2>:
 8002b60:	20000790 	.word	0x20000790
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002b64:	bf00      	nop
 8002b66:	bf00      	nop

08002b68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002b68:	4808      	ldr	r0, [pc, #32]	; (8002b8c <prvPortStartFirstTask+0x24>)
 8002b6a:	6800      	ldr	r0, [r0, #0]
 8002b6c:	6800      	ldr	r0, [r0, #0]
 8002b6e:	f380 8808 	msr	MSP, r0
 8002b72:	f04f 0000 	mov.w	r0, #0
 8002b76:	f380 8814 	msr	CONTROL, r0
 8002b7a:	b662      	cpsie	i
 8002b7c:	b661      	cpsie	f
 8002b7e:	f3bf 8f4f 	dsb	sy
 8002b82:	f3bf 8f6f 	isb	sy
 8002b86:	df00      	svc	0
 8002b88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002b8a:	bf00      	nop
 8002b8c:	e000ed08 	.word	0xe000ed08

08002b90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b086      	sub	sp, #24
 8002b94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002b96:	4b46      	ldr	r3, [pc, #280]	; (8002cb0 <xPortStartScheduler+0x120>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a46      	ldr	r2, [pc, #280]	; (8002cb4 <xPortStartScheduler+0x124>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d10a      	bne.n	8002bb6 <xPortStartScheduler+0x26>
	__asm volatile
 8002ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ba4:	f383 8811 	msr	BASEPRI, r3
 8002ba8:	f3bf 8f6f 	isb	sy
 8002bac:	f3bf 8f4f 	dsb	sy
 8002bb0:	613b      	str	r3, [r7, #16]
}
 8002bb2:	bf00      	nop
 8002bb4:	e7fe      	b.n	8002bb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002bb6:	4b3e      	ldr	r3, [pc, #248]	; (8002cb0 <xPortStartScheduler+0x120>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a3f      	ldr	r2, [pc, #252]	; (8002cb8 <xPortStartScheduler+0x128>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d10a      	bne.n	8002bd6 <xPortStartScheduler+0x46>
	__asm volatile
 8002bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bc4:	f383 8811 	msr	BASEPRI, r3
 8002bc8:	f3bf 8f6f 	isb	sy
 8002bcc:	f3bf 8f4f 	dsb	sy
 8002bd0:	60fb      	str	r3, [r7, #12]
}
 8002bd2:	bf00      	nop
 8002bd4:	e7fe      	b.n	8002bd4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002bd6:	4b39      	ldr	r3, [pc, #228]	; (8002cbc <xPortStartScheduler+0x12c>)
 8002bd8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	22ff      	movs	r2, #255	; 0xff
 8002be6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002bf0:	78fb      	ldrb	r3, [r7, #3]
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002bf8:	b2da      	uxtb	r2, r3
 8002bfa:	4b31      	ldr	r3, [pc, #196]	; (8002cc0 <xPortStartScheduler+0x130>)
 8002bfc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002bfe:	4b31      	ldr	r3, [pc, #196]	; (8002cc4 <xPortStartScheduler+0x134>)
 8002c00:	2207      	movs	r2, #7
 8002c02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002c04:	e009      	b.n	8002c1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8002c06:	4b2f      	ldr	r3, [pc, #188]	; (8002cc4 <xPortStartScheduler+0x134>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	4a2d      	ldr	r2, [pc, #180]	; (8002cc4 <xPortStartScheduler+0x134>)
 8002c0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002c10:	78fb      	ldrb	r3, [r7, #3]
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002c1a:	78fb      	ldrb	r3, [r7, #3]
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c22:	2b80      	cmp	r3, #128	; 0x80
 8002c24:	d0ef      	beq.n	8002c06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002c26:	4b27      	ldr	r3, [pc, #156]	; (8002cc4 <xPortStartScheduler+0x134>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f1c3 0307 	rsb	r3, r3, #7
 8002c2e:	2b04      	cmp	r3, #4
 8002c30:	d00a      	beq.n	8002c48 <xPortStartScheduler+0xb8>
	__asm volatile
 8002c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c36:	f383 8811 	msr	BASEPRI, r3
 8002c3a:	f3bf 8f6f 	isb	sy
 8002c3e:	f3bf 8f4f 	dsb	sy
 8002c42:	60bb      	str	r3, [r7, #8]
}
 8002c44:	bf00      	nop
 8002c46:	e7fe      	b.n	8002c46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002c48:	4b1e      	ldr	r3, [pc, #120]	; (8002cc4 <xPortStartScheduler+0x134>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	021b      	lsls	r3, r3, #8
 8002c4e:	4a1d      	ldr	r2, [pc, #116]	; (8002cc4 <xPortStartScheduler+0x134>)
 8002c50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002c52:	4b1c      	ldr	r3, [pc, #112]	; (8002cc4 <xPortStartScheduler+0x134>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002c5a:	4a1a      	ldr	r2, [pc, #104]	; (8002cc4 <xPortStartScheduler+0x134>)
 8002c5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	b2da      	uxtb	r2, r3
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002c66:	4b18      	ldr	r3, [pc, #96]	; (8002cc8 <xPortStartScheduler+0x138>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a17      	ldr	r2, [pc, #92]	; (8002cc8 <xPortStartScheduler+0x138>)
 8002c6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002c72:	4b15      	ldr	r3, [pc, #84]	; (8002cc8 <xPortStartScheduler+0x138>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a14      	ldr	r2, [pc, #80]	; (8002cc8 <xPortStartScheduler+0x138>)
 8002c78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002c7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002c7e:	f000 f8dd 	bl	8002e3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002c82:	4b12      	ldr	r3, [pc, #72]	; (8002ccc <xPortStartScheduler+0x13c>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8002c88:	f000 f8fc 	bl	8002e84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002c8c:	4b10      	ldr	r3, [pc, #64]	; (8002cd0 <xPortStartScheduler+0x140>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a0f      	ldr	r2, [pc, #60]	; (8002cd0 <xPortStartScheduler+0x140>)
 8002c92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002c96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002c98:	f7ff ff66 	bl	8002b68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002c9c:	f7fe ff1e 	bl	8001adc <vTaskSwitchContext>
	prvTaskExitError();
 8002ca0:	f7ff ff20 	bl	8002ae4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3718      	adds	r7, #24
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	e000ed00 	.word	0xe000ed00
 8002cb4:	410fc271 	.word	0x410fc271
 8002cb8:	410fc270 	.word	0x410fc270
 8002cbc:	e000e400 	.word	0xe000e400
 8002cc0:	20000dbc 	.word	0x20000dbc
 8002cc4:	20000dc0 	.word	0x20000dc0
 8002cc8:	e000ed20 	.word	0xe000ed20
 8002ccc:	20000000 	.word	0x20000000
 8002cd0:	e000ef34 	.word	0xe000ef34

08002cd4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
	__asm volatile
 8002cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cde:	f383 8811 	msr	BASEPRI, r3
 8002ce2:	f3bf 8f6f 	isb	sy
 8002ce6:	f3bf 8f4f 	dsb	sy
 8002cea:	607b      	str	r3, [r7, #4]
}
 8002cec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002cee:	4b0f      	ldr	r3, [pc, #60]	; (8002d2c <vPortEnterCritical+0x58>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	4a0d      	ldr	r2, [pc, #52]	; (8002d2c <vPortEnterCritical+0x58>)
 8002cf6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002cf8:	4b0c      	ldr	r3, [pc, #48]	; (8002d2c <vPortEnterCritical+0x58>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d10f      	bne.n	8002d20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002d00:	4b0b      	ldr	r3, [pc, #44]	; (8002d30 <vPortEnterCritical+0x5c>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d00a      	beq.n	8002d20 <vPortEnterCritical+0x4c>
	__asm volatile
 8002d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d0e:	f383 8811 	msr	BASEPRI, r3
 8002d12:	f3bf 8f6f 	isb	sy
 8002d16:	f3bf 8f4f 	dsb	sy
 8002d1a:	603b      	str	r3, [r7, #0]
}
 8002d1c:	bf00      	nop
 8002d1e:	e7fe      	b.n	8002d1e <vPortEnterCritical+0x4a>
	}
}
 8002d20:	bf00      	nop
 8002d22:	370c      	adds	r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr
 8002d2c:	20000000 	.word	0x20000000
 8002d30:	e000ed04 	.word	0xe000ed04

08002d34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002d3a:	4b12      	ldr	r3, [pc, #72]	; (8002d84 <vPortExitCritical+0x50>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d10a      	bne.n	8002d58 <vPortExitCritical+0x24>
	__asm volatile
 8002d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d46:	f383 8811 	msr	BASEPRI, r3
 8002d4a:	f3bf 8f6f 	isb	sy
 8002d4e:	f3bf 8f4f 	dsb	sy
 8002d52:	607b      	str	r3, [r7, #4]
}
 8002d54:	bf00      	nop
 8002d56:	e7fe      	b.n	8002d56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8002d58:	4b0a      	ldr	r3, [pc, #40]	; (8002d84 <vPortExitCritical+0x50>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	3b01      	subs	r3, #1
 8002d5e:	4a09      	ldr	r2, [pc, #36]	; (8002d84 <vPortExitCritical+0x50>)
 8002d60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002d62:	4b08      	ldr	r3, [pc, #32]	; (8002d84 <vPortExitCritical+0x50>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d105      	bne.n	8002d76 <vPortExitCritical+0x42>
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	f383 8811 	msr	BASEPRI, r3
}
 8002d74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8002d76:	bf00      	nop
 8002d78:	370c      	adds	r7, #12
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	20000000 	.word	0x20000000
	...

08002d90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002d90:	f3ef 8009 	mrs	r0, PSP
 8002d94:	f3bf 8f6f 	isb	sy
 8002d98:	4b15      	ldr	r3, [pc, #84]	; (8002df0 <pxCurrentTCBConst>)
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	f01e 0f10 	tst.w	lr, #16
 8002da0:	bf08      	it	eq
 8002da2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002da6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002daa:	6010      	str	r0, [r2, #0]
 8002dac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002db0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002db4:	f380 8811 	msr	BASEPRI, r0
 8002db8:	f3bf 8f4f 	dsb	sy
 8002dbc:	f3bf 8f6f 	isb	sy
 8002dc0:	f7fe fe8c 	bl	8001adc <vTaskSwitchContext>
 8002dc4:	f04f 0000 	mov.w	r0, #0
 8002dc8:	f380 8811 	msr	BASEPRI, r0
 8002dcc:	bc09      	pop	{r0, r3}
 8002dce:	6819      	ldr	r1, [r3, #0]
 8002dd0:	6808      	ldr	r0, [r1, #0]
 8002dd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dd6:	f01e 0f10 	tst.w	lr, #16
 8002dda:	bf08      	it	eq
 8002ddc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002de0:	f380 8809 	msr	PSP, r0
 8002de4:	f3bf 8f6f 	isb	sy
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	f3af 8000 	nop.w

08002df0 <pxCurrentTCBConst>:
 8002df0:	20000790 	.word	0x20000790
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002df4:	bf00      	nop
 8002df6:	bf00      	nop

08002df8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
	__asm volatile
 8002dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e02:	f383 8811 	msr	BASEPRI, r3
 8002e06:	f3bf 8f6f 	isb	sy
 8002e0a:	f3bf 8f4f 	dsb	sy
 8002e0e:	607b      	str	r3, [r7, #4]
}
 8002e10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002e12:	f7fe fda9 	bl	8001968 <xTaskIncrementTick>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d003      	beq.n	8002e24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002e1c:	4b06      	ldr	r3, [pc, #24]	; (8002e38 <xPortSysTickHandler+0x40>)
 8002e1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e22:	601a      	str	r2, [r3, #0]
 8002e24:	2300      	movs	r3, #0
 8002e26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	f383 8811 	msr	BASEPRI, r3
}
 8002e2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8002e30:	bf00      	nop
 8002e32:	3708      	adds	r7, #8
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	e000ed04 	.word	0xe000ed04

08002e3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002e40:	4b0b      	ldr	r3, [pc, #44]	; (8002e70 <vPortSetupTimerInterrupt+0x34>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002e46:	4b0b      	ldr	r3, [pc, #44]	; (8002e74 <vPortSetupTimerInterrupt+0x38>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002e4c:	4b0a      	ldr	r3, [pc, #40]	; (8002e78 <vPortSetupTimerInterrupt+0x3c>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a0a      	ldr	r2, [pc, #40]	; (8002e7c <vPortSetupTimerInterrupt+0x40>)
 8002e52:	fba2 2303 	umull	r2, r3, r2, r3
 8002e56:	099b      	lsrs	r3, r3, #6
 8002e58:	4a09      	ldr	r2, [pc, #36]	; (8002e80 <vPortSetupTimerInterrupt+0x44>)
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002e5e:	4b04      	ldr	r3, [pc, #16]	; (8002e70 <vPortSetupTimerInterrupt+0x34>)
 8002e60:	2207      	movs	r2, #7
 8002e62:	601a      	str	r2, [r3, #0]
}
 8002e64:	bf00      	nop
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	e000e010 	.word	0xe000e010
 8002e74:	e000e018 	.word	0xe000e018
 8002e78:	2000000c 	.word	0x2000000c
 8002e7c:	10624dd3 	.word	0x10624dd3
 8002e80:	e000e014 	.word	0xe000e014

08002e84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002e84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002e94 <vPortEnableVFP+0x10>
 8002e88:	6801      	ldr	r1, [r0, #0]
 8002e8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002e8e:	6001      	str	r1, [r0, #0]
 8002e90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8002e92:	bf00      	nop
 8002e94:	e000ed88 	.word	0xe000ed88

08002e98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8002e98:	b480      	push	{r7}
 8002e9a:	b085      	sub	sp, #20
 8002e9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8002e9e:	f3ef 8305 	mrs	r3, IPSR
 8002ea2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2b0f      	cmp	r3, #15
 8002ea8:	d914      	bls.n	8002ed4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002eaa:	4a17      	ldr	r2, [pc, #92]	; (8002f08 <vPortValidateInterruptPriority+0x70>)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	4413      	add	r3, r2
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002eb4:	4b15      	ldr	r3, [pc, #84]	; (8002f0c <vPortValidateInterruptPriority+0x74>)
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	7afa      	ldrb	r2, [r7, #11]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d20a      	bcs.n	8002ed4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8002ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ec2:	f383 8811 	msr	BASEPRI, r3
 8002ec6:	f3bf 8f6f 	isb	sy
 8002eca:	f3bf 8f4f 	dsb	sy
 8002ece:	607b      	str	r3, [r7, #4]
}
 8002ed0:	bf00      	nop
 8002ed2:	e7fe      	b.n	8002ed2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002ed4:	4b0e      	ldr	r3, [pc, #56]	; (8002f10 <vPortValidateInterruptPriority+0x78>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002edc:	4b0d      	ldr	r3, [pc, #52]	; (8002f14 <vPortValidateInterruptPriority+0x7c>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d90a      	bls.n	8002efa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8002ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ee8:	f383 8811 	msr	BASEPRI, r3
 8002eec:	f3bf 8f6f 	isb	sy
 8002ef0:	f3bf 8f4f 	dsb	sy
 8002ef4:	603b      	str	r3, [r7, #0]
}
 8002ef6:	bf00      	nop
 8002ef8:	e7fe      	b.n	8002ef8 <vPortValidateInterruptPriority+0x60>
	}
 8002efa:	bf00      	nop
 8002efc:	3714      	adds	r7, #20
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	e000e3f0 	.word	0xe000e3f0
 8002f0c:	20000dbc 	.word	0x20000dbc
 8002f10:	e000ed0c 	.word	0xe000ed0c
 8002f14:	20000dc0 	.word	0x20000dc0

08002f18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b08a      	sub	sp, #40	; 0x28
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002f20:	2300      	movs	r3, #0
 8002f22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002f24:	f7fe fc64 	bl	80017f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002f28:	4b5b      	ldr	r3, [pc, #364]	; (8003098 <pvPortMalloc+0x180>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d101      	bne.n	8002f34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002f30:	f000 f920 	bl	8003174 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002f34:	4b59      	ldr	r3, [pc, #356]	; (800309c <pvPortMalloc+0x184>)
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	f040 8093 	bne.w	8003068 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d01d      	beq.n	8002f84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8002f48:	2208      	movs	r2, #8
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f003 0307 	and.w	r3, r3, #7
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d014      	beq.n	8002f84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f023 0307 	bic.w	r3, r3, #7
 8002f60:	3308      	adds	r3, #8
 8002f62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f003 0307 	and.w	r3, r3, #7
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d00a      	beq.n	8002f84 <pvPortMalloc+0x6c>
	__asm volatile
 8002f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f72:	f383 8811 	msr	BASEPRI, r3
 8002f76:	f3bf 8f6f 	isb	sy
 8002f7a:	f3bf 8f4f 	dsb	sy
 8002f7e:	617b      	str	r3, [r7, #20]
}
 8002f80:	bf00      	nop
 8002f82:	e7fe      	b.n	8002f82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d06e      	beq.n	8003068 <pvPortMalloc+0x150>
 8002f8a:	4b45      	ldr	r3, [pc, #276]	; (80030a0 <pvPortMalloc+0x188>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d869      	bhi.n	8003068 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002f94:	4b43      	ldr	r3, [pc, #268]	; (80030a4 <pvPortMalloc+0x18c>)
 8002f96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002f98:	4b42      	ldr	r3, [pc, #264]	; (80030a4 <pvPortMalloc+0x18c>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002f9e:	e004      	b.n	8002faa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8002fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d903      	bls.n	8002fbc <pvPortMalloc+0xa4>
 8002fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d1f1      	bne.n	8002fa0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002fbc:	4b36      	ldr	r3, [pc, #216]	; (8003098 <pvPortMalloc+0x180>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d050      	beq.n	8003068 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002fc6:	6a3b      	ldr	r3, [r7, #32]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2208      	movs	r2, #8
 8002fcc:	4413      	add	r3, r2
 8002fce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	6a3b      	ldr	r3, [r7, #32]
 8002fd6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fda:	685a      	ldr	r2, [r3, #4]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	1ad2      	subs	r2, r2, r3
 8002fe0:	2308      	movs	r3, #8
 8002fe2:	005b      	lsls	r3, r3, #1
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d91f      	bls.n	8003028 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002fe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4413      	add	r3, r2
 8002fee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	f003 0307 	and.w	r3, r3, #7
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d00a      	beq.n	8003010 <pvPortMalloc+0xf8>
	__asm volatile
 8002ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ffe:	f383 8811 	msr	BASEPRI, r3
 8003002:	f3bf 8f6f 	isb	sy
 8003006:	f3bf 8f4f 	dsb	sy
 800300a:	613b      	str	r3, [r7, #16]
}
 800300c:	bf00      	nop
 800300e:	e7fe      	b.n	800300e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003012:	685a      	ldr	r2, [r3, #4]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	1ad2      	subs	r2, r2, r3
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800301c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003022:	69b8      	ldr	r0, [r7, #24]
 8003024:	f000 f908 	bl	8003238 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003028:	4b1d      	ldr	r3, [pc, #116]	; (80030a0 <pvPortMalloc+0x188>)
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	4a1b      	ldr	r2, [pc, #108]	; (80030a0 <pvPortMalloc+0x188>)
 8003034:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003036:	4b1a      	ldr	r3, [pc, #104]	; (80030a0 <pvPortMalloc+0x188>)
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	4b1b      	ldr	r3, [pc, #108]	; (80030a8 <pvPortMalloc+0x190>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	429a      	cmp	r2, r3
 8003040:	d203      	bcs.n	800304a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003042:	4b17      	ldr	r3, [pc, #92]	; (80030a0 <pvPortMalloc+0x188>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a18      	ldr	r2, [pc, #96]	; (80030a8 <pvPortMalloc+0x190>)
 8003048:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800304a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304c:	685a      	ldr	r2, [r3, #4]
 800304e:	4b13      	ldr	r3, [pc, #76]	; (800309c <pvPortMalloc+0x184>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	431a      	orrs	r2, r3
 8003054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003056:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305a:	2200      	movs	r2, #0
 800305c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800305e:	4b13      	ldr	r3, [pc, #76]	; (80030ac <pvPortMalloc+0x194>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	3301      	adds	r3, #1
 8003064:	4a11      	ldr	r2, [pc, #68]	; (80030ac <pvPortMalloc+0x194>)
 8003066:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003068:	f7fe fbd0 	bl	800180c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	f003 0307 	and.w	r3, r3, #7
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00a      	beq.n	800308c <pvPortMalloc+0x174>
	__asm volatile
 8003076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800307a:	f383 8811 	msr	BASEPRI, r3
 800307e:	f3bf 8f6f 	isb	sy
 8003082:	f3bf 8f4f 	dsb	sy
 8003086:	60fb      	str	r3, [r7, #12]
}
 8003088:	bf00      	nop
 800308a:	e7fe      	b.n	800308a <pvPortMalloc+0x172>
	return pvReturn;
 800308c:	69fb      	ldr	r3, [r7, #28]
}
 800308e:	4618      	mov	r0, r3
 8003090:	3728      	adds	r7, #40	; 0x28
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	20001984 	.word	0x20001984
 800309c:	20001998 	.word	0x20001998
 80030a0:	20001988 	.word	0x20001988
 80030a4:	2000197c 	.word	0x2000197c
 80030a8:	2000198c 	.word	0x2000198c
 80030ac:	20001990 	.word	0x20001990

080030b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b086      	sub	sp, #24
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d04d      	beq.n	800315e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80030c2:	2308      	movs	r3, #8
 80030c4:	425b      	negs	r3, r3
 80030c6:	697a      	ldr	r2, [r7, #20]
 80030c8:	4413      	add	r3, r2
 80030ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	685a      	ldr	r2, [r3, #4]
 80030d4:	4b24      	ldr	r3, [pc, #144]	; (8003168 <vPortFree+0xb8>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4013      	ands	r3, r2
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d10a      	bne.n	80030f4 <vPortFree+0x44>
	__asm volatile
 80030de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e2:	f383 8811 	msr	BASEPRI, r3
 80030e6:	f3bf 8f6f 	isb	sy
 80030ea:	f3bf 8f4f 	dsb	sy
 80030ee:	60fb      	str	r3, [r7, #12]
}
 80030f0:	bf00      	nop
 80030f2:	e7fe      	b.n	80030f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d00a      	beq.n	8003112 <vPortFree+0x62>
	__asm volatile
 80030fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003100:	f383 8811 	msr	BASEPRI, r3
 8003104:	f3bf 8f6f 	isb	sy
 8003108:	f3bf 8f4f 	dsb	sy
 800310c:	60bb      	str	r3, [r7, #8]
}
 800310e:	bf00      	nop
 8003110:	e7fe      	b.n	8003110 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	685a      	ldr	r2, [r3, #4]
 8003116:	4b14      	ldr	r3, [pc, #80]	; (8003168 <vPortFree+0xb8>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4013      	ands	r3, r2
 800311c:	2b00      	cmp	r3, #0
 800311e:	d01e      	beq.n	800315e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d11a      	bne.n	800315e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	685a      	ldr	r2, [r3, #4]
 800312c:	4b0e      	ldr	r3, [pc, #56]	; (8003168 <vPortFree+0xb8>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	43db      	mvns	r3, r3
 8003132:	401a      	ands	r2, r3
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003138:	f7fe fb5a 	bl	80017f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	685a      	ldr	r2, [r3, #4]
 8003140:	4b0a      	ldr	r3, [pc, #40]	; (800316c <vPortFree+0xbc>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4413      	add	r3, r2
 8003146:	4a09      	ldr	r2, [pc, #36]	; (800316c <vPortFree+0xbc>)
 8003148:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800314a:	6938      	ldr	r0, [r7, #16]
 800314c:	f000 f874 	bl	8003238 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003150:	4b07      	ldr	r3, [pc, #28]	; (8003170 <vPortFree+0xc0>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	3301      	adds	r3, #1
 8003156:	4a06      	ldr	r2, [pc, #24]	; (8003170 <vPortFree+0xc0>)
 8003158:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800315a:	f7fe fb57 	bl	800180c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800315e:	bf00      	nop
 8003160:	3718      	adds	r7, #24
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	20001998 	.word	0x20001998
 800316c:	20001988 	.word	0x20001988
 8003170:	20001994 	.word	0x20001994

08003174 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003174:	b480      	push	{r7}
 8003176:	b085      	sub	sp, #20
 8003178:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800317a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800317e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003180:	4b27      	ldr	r3, [pc, #156]	; (8003220 <prvHeapInit+0xac>)
 8003182:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f003 0307 	and.w	r3, r3, #7
 800318a:	2b00      	cmp	r3, #0
 800318c:	d00c      	beq.n	80031a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	3307      	adds	r3, #7
 8003192:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f023 0307 	bic.w	r3, r3, #7
 800319a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800319c:	68ba      	ldr	r2, [r7, #8]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	4a1f      	ldr	r2, [pc, #124]	; (8003220 <prvHeapInit+0xac>)
 80031a4:	4413      	add	r3, r2
 80031a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80031ac:	4a1d      	ldr	r2, [pc, #116]	; (8003224 <prvHeapInit+0xb0>)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80031b2:	4b1c      	ldr	r3, [pc, #112]	; (8003224 <prvHeapInit+0xb0>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	68ba      	ldr	r2, [r7, #8]
 80031bc:	4413      	add	r3, r2
 80031be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80031c0:	2208      	movs	r2, #8
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	1a9b      	subs	r3, r3, r2
 80031c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f023 0307 	bic.w	r3, r3, #7
 80031ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	4a15      	ldr	r2, [pc, #84]	; (8003228 <prvHeapInit+0xb4>)
 80031d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80031d6:	4b14      	ldr	r3, [pc, #80]	; (8003228 <prvHeapInit+0xb4>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2200      	movs	r2, #0
 80031dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80031de:	4b12      	ldr	r3, [pc, #72]	; (8003228 <prvHeapInit+0xb4>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2200      	movs	r2, #0
 80031e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	68fa      	ldr	r2, [r7, #12]
 80031ee:	1ad2      	subs	r2, r2, r3
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80031f4:	4b0c      	ldr	r3, [pc, #48]	; (8003228 <prvHeapInit+0xb4>)
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	4a0a      	ldr	r2, [pc, #40]	; (800322c <prvHeapInit+0xb8>)
 8003202:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	4a09      	ldr	r2, [pc, #36]	; (8003230 <prvHeapInit+0xbc>)
 800320a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800320c:	4b09      	ldr	r3, [pc, #36]	; (8003234 <prvHeapInit+0xc0>)
 800320e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003212:	601a      	str	r2, [r3, #0]
}
 8003214:	bf00      	nop
 8003216:	3714      	adds	r7, #20
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr
 8003220:	20000dc4 	.word	0x20000dc4
 8003224:	2000197c 	.word	0x2000197c
 8003228:	20001984 	.word	0x20001984
 800322c:	2000198c 	.word	0x2000198c
 8003230:	20001988 	.word	0x20001988
 8003234:	20001998 	.word	0x20001998

08003238 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003238:	b480      	push	{r7}
 800323a:	b085      	sub	sp, #20
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003240:	4b28      	ldr	r3, [pc, #160]	; (80032e4 <prvInsertBlockIntoFreeList+0xac>)
 8003242:	60fb      	str	r3, [r7, #12]
 8003244:	e002      	b.n	800324c <prvInsertBlockIntoFreeList+0x14>
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	60fb      	str	r3, [r7, #12]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	429a      	cmp	r2, r3
 8003254:	d8f7      	bhi.n	8003246 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	68ba      	ldr	r2, [r7, #8]
 8003260:	4413      	add	r3, r2
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	429a      	cmp	r2, r3
 8003266:	d108      	bne.n	800327a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	685a      	ldr	r2, [r3, #4]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	441a      	add	r2, r3
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	68ba      	ldr	r2, [r7, #8]
 8003284:	441a      	add	r2, r3
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	429a      	cmp	r2, r3
 800328c:	d118      	bne.n	80032c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	4b15      	ldr	r3, [pc, #84]	; (80032e8 <prvInsertBlockIntoFreeList+0xb0>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	429a      	cmp	r2, r3
 8003298:	d00d      	beq.n	80032b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685a      	ldr	r2, [r3, #4]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	441a      	add	r2, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	601a      	str	r2, [r3, #0]
 80032b4:	e008      	b.n	80032c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80032b6:	4b0c      	ldr	r3, [pc, #48]	; (80032e8 <prvInsertBlockIntoFreeList+0xb0>)
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	601a      	str	r2, [r3, #0]
 80032be:	e003      	b.n	80032c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80032c8:	68fa      	ldr	r2, [r7, #12]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d002      	beq.n	80032d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80032d6:	bf00      	nop
 80032d8:	3714      	adds	r7, #20
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	2000197c 	.word	0x2000197c
 80032e8:	20001984 	.word	0x20001984

080032ec <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80032f2:	2300      	movs	r3, #0
 80032f4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032f6:	2003      	movs	r0, #3
 80032f8:	f000 f94c 	bl	8003594 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80032fc:	2000      	movs	r0, #0
 80032fe:	f000 f80d 	bl	800331c <HAL_InitTick>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d002      	beq.n	800330e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	71fb      	strb	r3, [r7, #7]
 800330c:	e001      	b.n	8003312 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800330e:	f002 fbbf 	bl	8005a90 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003312:	79fb      	ldrb	r3, [r7, #7]
}
 8003314:	4618      	mov	r0, r3
 8003316:	3708      	adds	r7, #8
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003324:	2300      	movs	r3, #0
 8003326:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003328:	4b17      	ldr	r3, [pc, #92]	; (8003388 <HAL_InitTick+0x6c>)
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d023      	beq.n	8003378 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003330:	4b16      	ldr	r3, [pc, #88]	; (800338c <HAL_InitTick+0x70>)
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	4b14      	ldr	r3, [pc, #80]	; (8003388 <HAL_InitTick+0x6c>)
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	4619      	mov	r1, r3
 800333a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800333e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003342:	fbb2 f3f3 	udiv	r3, r2, r3
 8003346:	4618      	mov	r0, r3
 8003348:	f000 f959 	bl	80035fe <HAL_SYSTICK_Config>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d10f      	bne.n	8003372 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2b0f      	cmp	r3, #15
 8003356:	d809      	bhi.n	800336c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003358:	2200      	movs	r2, #0
 800335a:	6879      	ldr	r1, [r7, #4]
 800335c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003360:	f000 f923 	bl	80035aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003364:	4a0a      	ldr	r2, [pc, #40]	; (8003390 <HAL_InitTick+0x74>)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6013      	str	r3, [r2, #0]
 800336a:	e007      	b.n	800337c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	73fb      	strb	r3, [r7, #15]
 8003370:	e004      	b.n	800337c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	73fb      	strb	r3, [r7, #15]
 8003376:	e001      	b.n	800337c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800337c:	7bfb      	ldrb	r3, [r7, #15]
}
 800337e:	4618      	mov	r0, r3
 8003380:	3710      	adds	r7, #16
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	20000008 	.word	0x20000008
 800338c:	2000000c 	.word	0x2000000c
 8003390:	20000004 	.word	0x20000004

08003394 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003394:	b480      	push	{r7}
 8003396:	af00      	add	r7, sp, #0
  return uwTick;
 8003398:	4b03      	ldr	r3, [pc, #12]	; (80033a8 <HAL_GetTick+0x14>)
 800339a:	681b      	ldr	r3, [r3, #0]
}
 800339c:	4618      	mov	r0, r3
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	2000199c 	.word	0x2000199c

080033ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033b4:	f7ff ffee 	bl	8003394 <HAL_GetTick>
 80033b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033c4:	d005      	beq.n	80033d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80033c6:	4b0a      	ldr	r3, [pc, #40]	; (80033f0 <HAL_Delay+0x44>)
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	461a      	mov	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	4413      	add	r3, r2
 80033d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80033d2:	bf00      	nop
 80033d4:	f7ff ffde 	bl	8003394 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	68fa      	ldr	r2, [r7, #12]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d8f7      	bhi.n	80033d4 <HAL_Delay+0x28>
  {
  }
}
 80033e4:	bf00      	nop
 80033e6:	bf00      	nop
 80033e8:	3710      	adds	r7, #16
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	20000008 	.word	0x20000008

080033f4 <__NVIC_SetPriorityGrouping>:
{
 80033f4:	b480      	push	{r7}
 80033f6:	b085      	sub	sp, #20
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f003 0307 	and.w	r3, r3, #7
 8003402:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003404:	4b0c      	ldr	r3, [pc, #48]	; (8003438 <__NVIC_SetPriorityGrouping+0x44>)
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800340a:	68ba      	ldr	r2, [r7, #8]
 800340c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003410:	4013      	ands	r3, r2
 8003412:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800341c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003420:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003424:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003426:	4a04      	ldr	r2, [pc, #16]	; (8003438 <__NVIC_SetPriorityGrouping+0x44>)
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	60d3      	str	r3, [r2, #12]
}
 800342c:	bf00      	nop
 800342e:	3714      	adds	r7, #20
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr
 8003438:	e000ed00 	.word	0xe000ed00

0800343c <__NVIC_GetPriorityGrouping>:
{
 800343c:	b480      	push	{r7}
 800343e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003440:	4b04      	ldr	r3, [pc, #16]	; (8003454 <__NVIC_GetPriorityGrouping+0x18>)
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	0a1b      	lsrs	r3, r3, #8
 8003446:	f003 0307 	and.w	r3, r3, #7
}
 800344a:	4618      	mov	r0, r3
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr
 8003454:	e000ed00 	.word	0xe000ed00

08003458 <__NVIC_EnableIRQ>:
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	4603      	mov	r3, r0
 8003460:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003466:	2b00      	cmp	r3, #0
 8003468:	db0b      	blt.n	8003482 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800346a:	79fb      	ldrb	r3, [r7, #7]
 800346c:	f003 021f 	and.w	r2, r3, #31
 8003470:	4907      	ldr	r1, [pc, #28]	; (8003490 <__NVIC_EnableIRQ+0x38>)
 8003472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003476:	095b      	lsrs	r3, r3, #5
 8003478:	2001      	movs	r0, #1
 800347a:	fa00 f202 	lsl.w	r2, r0, r2
 800347e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003482:	bf00      	nop
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	e000e100 	.word	0xe000e100

08003494 <__NVIC_SetPriority>:
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	4603      	mov	r3, r0
 800349c:	6039      	str	r1, [r7, #0]
 800349e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	db0a      	blt.n	80034be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	b2da      	uxtb	r2, r3
 80034ac:	490c      	ldr	r1, [pc, #48]	; (80034e0 <__NVIC_SetPriority+0x4c>)
 80034ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034b2:	0112      	lsls	r2, r2, #4
 80034b4:	b2d2      	uxtb	r2, r2
 80034b6:	440b      	add	r3, r1
 80034b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80034bc:	e00a      	b.n	80034d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	b2da      	uxtb	r2, r3
 80034c2:	4908      	ldr	r1, [pc, #32]	; (80034e4 <__NVIC_SetPriority+0x50>)
 80034c4:	79fb      	ldrb	r3, [r7, #7]
 80034c6:	f003 030f 	and.w	r3, r3, #15
 80034ca:	3b04      	subs	r3, #4
 80034cc:	0112      	lsls	r2, r2, #4
 80034ce:	b2d2      	uxtb	r2, r2
 80034d0:	440b      	add	r3, r1
 80034d2:	761a      	strb	r2, [r3, #24]
}
 80034d4:	bf00      	nop
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr
 80034e0:	e000e100 	.word	0xe000e100
 80034e4:	e000ed00 	.word	0xe000ed00

080034e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b089      	sub	sp, #36	; 0x24
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f003 0307 	and.w	r3, r3, #7
 80034fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	f1c3 0307 	rsb	r3, r3, #7
 8003502:	2b04      	cmp	r3, #4
 8003504:	bf28      	it	cs
 8003506:	2304      	movcs	r3, #4
 8003508:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	3304      	adds	r3, #4
 800350e:	2b06      	cmp	r3, #6
 8003510:	d902      	bls.n	8003518 <NVIC_EncodePriority+0x30>
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	3b03      	subs	r3, #3
 8003516:	e000      	b.n	800351a <NVIC_EncodePriority+0x32>
 8003518:	2300      	movs	r3, #0
 800351a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800351c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	fa02 f303 	lsl.w	r3, r2, r3
 8003526:	43da      	mvns	r2, r3
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	401a      	ands	r2, r3
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003530:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	fa01 f303 	lsl.w	r3, r1, r3
 800353a:	43d9      	mvns	r1, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003540:	4313      	orrs	r3, r2
         );
}
 8003542:	4618      	mov	r0, r3
 8003544:	3724      	adds	r7, #36	; 0x24
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
	...

08003550 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	3b01      	subs	r3, #1
 800355c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003560:	d301      	bcc.n	8003566 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003562:	2301      	movs	r3, #1
 8003564:	e00f      	b.n	8003586 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003566:	4a0a      	ldr	r2, [pc, #40]	; (8003590 <SysTick_Config+0x40>)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	3b01      	subs	r3, #1
 800356c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800356e:	210f      	movs	r1, #15
 8003570:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003574:	f7ff ff8e 	bl	8003494 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003578:	4b05      	ldr	r3, [pc, #20]	; (8003590 <SysTick_Config+0x40>)
 800357a:	2200      	movs	r2, #0
 800357c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800357e:	4b04      	ldr	r3, [pc, #16]	; (8003590 <SysTick_Config+0x40>)
 8003580:	2207      	movs	r2, #7
 8003582:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3708      	adds	r7, #8
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	e000e010 	.word	0xe000e010

08003594 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f7ff ff29 	bl	80033f4 <__NVIC_SetPriorityGrouping>
}
 80035a2:	bf00      	nop
 80035a4:	3708      	adds	r7, #8
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}

080035aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b086      	sub	sp, #24
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	4603      	mov	r3, r0
 80035b2:	60b9      	str	r1, [r7, #8]
 80035b4:	607a      	str	r2, [r7, #4]
 80035b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80035b8:	2300      	movs	r3, #0
 80035ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80035bc:	f7ff ff3e 	bl	800343c <__NVIC_GetPriorityGrouping>
 80035c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	68b9      	ldr	r1, [r7, #8]
 80035c6:	6978      	ldr	r0, [r7, #20]
 80035c8:	f7ff ff8e 	bl	80034e8 <NVIC_EncodePriority>
 80035cc:	4602      	mov	r2, r0
 80035ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035d2:	4611      	mov	r1, r2
 80035d4:	4618      	mov	r0, r3
 80035d6:	f7ff ff5d 	bl	8003494 <__NVIC_SetPriority>
}
 80035da:	bf00      	nop
 80035dc:	3718      	adds	r7, #24
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}

080035e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b082      	sub	sp, #8
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	4603      	mov	r3, r0
 80035ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7ff ff31 	bl	8003458 <__NVIC_EnableIRQ>
}
 80035f6:	bf00      	nop
 80035f8:	3708      	adds	r7, #8
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}

080035fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035fe:	b580      	push	{r7, lr}
 8003600:	b082      	sub	sp, #8
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f7ff ffa2 	bl	8003550 <SysTick_Config>
 800360c:	4603      	mov	r3, r0
}
 800360e:	4618      	mov	r0, r3
 8003610:	3708      	adds	r7, #8
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003616:	b580      	push	{r7, lr}
 8003618:	b084      	sub	sp, #16
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003632:	f003 031c 	and.w	r3, r3, #28
 8003636:	2204      	movs	r2, #4
 8003638:	409a      	lsls	r2, r3
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	4013      	ands	r3, r2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d026      	beq.n	8003690 <HAL_DMA_IRQHandler+0x7a>
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	f003 0304 	and.w	r3, r3, #4
 8003648:	2b00      	cmp	r3, #0
 800364a:	d021      	beq.n	8003690 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0320 	and.w	r3, r3, #32
 8003656:	2b00      	cmp	r3, #0
 8003658:	d107      	bne.n	800366a <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f022 0204 	bic.w	r2, r2, #4
 8003668:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800366e:	f003 021c 	and.w	r2, r3, #28
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003676:	2104      	movs	r1, #4
 8003678:	fa01 f202 	lsl.w	r2, r1, r2
 800367c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003682:	2b00      	cmp	r3, #0
 8003684:	d071      	beq.n	800376a <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800368e:	e06c      	b.n	800376a <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003694:	f003 031c 	and.w	r3, r3, #28
 8003698:	2202      	movs	r2, #2
 800369a:	409a      	lsls	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	4013      	ands	r3, r2
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d02e      	beq.n	8003702 <HAL_DMA_IRQHandler+0xec>
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	f003 0302 	and.w	r3, r3, #2
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d029      	beq.n	8003702 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0320 	and.w	r3, r3, #32
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d10b      	bne.n	80036d4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f022 020a 	bic.w	r2, r2, #10
 80036ca:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d8:	f003 021c 	and.w	r2, r3, #28
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e0:	2102      	movs	r1, #2
 80036e2:	fa01 f202 	lsl.w	r2, r1, r2
 80036e6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d038      	beq.n	800376a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003700:	e033      	b.n	800376a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003706:	f003 031c 	and.w	r3, r3, #28
 800370a:	2208      	movs	r2, #8
 800370c:	409a      	lsls	r2, r3
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	4013      	ands	r3, r2
 8003712:	2b00      	cmp	r3, #0
 8003714:	d02a      	beq.n	800376c <HAL_DMA_IRQHandler+0x156>
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	f003 0308 	and.w	r3, r3, #8
 800371c:	2b00      	cmp	r3, #0
 800371e:	d025      	beq.n	800376c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f022 020e 	bic.w	r2, r2, #14
 800372e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003734:	f003 021c 	and.w	r2, r3, #28
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373c:	2101      	movs	r1, #1
 800373e:	fa01 f202 	lsl.w	r2, r1, r2
 8003742:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800375e:	2b00      	cmp	r3, #0
 8003760:	d004      	beq.n	800376c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800376a:	bf00      	nop
 800376c:	bf00      	nop
}
 800376e:	3710      	adds	r7, #16
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003774:	b480      	push	{r7}
 8003776:	b087      	sub	sp, #28
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800377e:	2300      	movs	r3, #0
 8003780:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003782:	e154      	b.n	8003a2e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	2101      	movs	r1, #1
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	fa01 f303 	lsl.w	r3, r1, r3
 8003790:	4013      	ands	r3, r2
 8003792:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2b00      	cmp	r3, #0
 8003798:	f000 8146 	beq.w	8003a28 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f003 0303 	and.w	r3, r3, #3
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d005      	beq.n	80037b4 <HAL_GPIO_Init+0x40>
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f003 0303 	and.w	r3, r3, #3
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d130      	bne.n	8003816 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	005b      	lsls	r3, r3, #1
 80037be:	2203      	movs	r2, #3
 80037c0:	fa02 f303 	lsl.w	r3, r2, r3
 80037c4:	43db      	mvns	r3, r3
 80037c6:	693a      	ldr	r2, [r7, #16]
 80037c8:	4013      	ands	r3, r2
 80037ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	68da      	ldr	r2, [r3, #12]
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	005b      	lsls	r3, r3, #1
 80037d4:	fa02 f303 	lsl.w	r3, r2, r3
 80037d8:	693a      	ldr	r2, [r7, #16]
 80037da:	4313      	orrs	r3, r2
 80037dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80037ea:	2201      	movs	r2, #1
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	fa02 f303 	lsl.w	r3, r2, r3
 80037f2:	43db      	mvns	r3, r3
 80037f4:	693a      	ldr	r2, [r7, #16]
 80037f6:	4013      	ands	r3, r2
 80037f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	091b      	lsrs	r3, r3, #4
 8003800:	f003 0201 	and.w	r2, r3, #1
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	fa02 f303 	lsl.w	r3, r2, r3
 800380a:	693a      	ldr	r2, [r7, #16]
 800380c:	4313      	orrs	r3, r2
 800380e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	693a      	ldr	r2, [r7, #16]
 8003814:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f003 0303 	and.w	r3, r3, #3
 800381e:	2b03      	cmp	r3, #3
 8003820:	d017      	beq.n	8003852 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	005b      	lsls	r3, r3, #1
 800382c:	2203      	movs	r2, #3
 800382e:	fa02 f303 	lsl.w	r3, r2, r3
 8003832:	43db      	mvns	r3, r3
 8003834:	693a      	ldr	r2, [r7, #16]
 8003836:	4013      	ands	r3, r2
 8003838:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	689a      	ldr	r2, [r3, #8]
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	005b      	lsls	r3, r3, #1
 8003842:	fa02 f303 	lsl.w	r3, r2, r3
 8003846:	693a      	ldr	r2, [r7, #16]
 8003848:	4313      	orrs	r3, r2
 800384a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	693a      	ldr	r2, [r7, #16]
 8003850:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f003 0303 	and.w	r3, r3, #3
 800385a:	2b02      	cmp	r3, #2
 800385c:	d123      	bne.n	80038a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	08da      	lsrs	r2, r3, #3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	3208      	adds	r2, #8
 8003866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800386a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	f003 0307 	and.w	r3, r3, #7
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	220f      	movs	r2, #15
 8003876:	fa02 f303 	lsl.w	r3, r2, r3
 800387a:	43db      	mvns	r3, r3
 800387c:	693a      	ldr	r2, [r7, #16]
 800387e:	4013      	ands	r3, r2
 8003880:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	691a      	ldr	r2, [r3, #16]
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	f003 0307 	and.w	r3, r3, #7
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	fa02 f303 	lsl.w	r3, r2, r3
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	4313      	orrs	r3, r2
 8003896:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	08da      	lsrs	r2, r3, #3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	3208      	adds	r2, #8
 80038a0:	6939      	ldr	r1, [r7, #16]
 80038a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	005b      	lsls	r3, r3, #1
 80038b0:	2203      	movs	r2, #3
 80038b2:	fa02 f303 	lsl.w	r3, r2, r3
 80038b6:	43db      	mvns	r3, r3
 80038b8:	693a      	ldr	r2, [r7, #16]
 80038ba:	4013      	ands	r3, r2
 80038bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	f003 0203 	and.w	r2, r3, #3
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	005b      	lsls	r3, r3, #1
 80038ca:	fa02 f303 	lsl.w	r3, r2, r3
 80038ce:	693a      	ldr	r2, [r7, #16]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	693a      	ldr	r2, [r7, #16]
 80038d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	f000 80a0 	beq.w	8003a28 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038e8:	4b58      	ldr	r3, [pc, #352]	; (8003a4c <HAL_GPIO_Init+0x2d8>)
 80038ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038ec:	4a57      	ldr	r2, [pc, #348]	; (8003a4c <HAL_GPIO_Init+0x2d8>)
 80038ee:	f043 0301 	orr.w	r3, r3, #1
 80038f2:	6613      	str	r3, [r2, #96]	; 0x60
 80038f4:	4b55      	ldr	r3, [pc, #340]	; (8003a4c <HAL_GPIO_Init+0x2d8>)
 80038f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038f8:	f003 0301 	and.w	r3, r3, #1
 80038fc:	60bb      	str	r3, [r7, #8]
 80038fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003900:	4a53      	ldr	r2, [pc, #332]	; (8003a50 <HAL_GPIO_Init+0x2dc>)
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	089b      	lsrs	r3, r3, #2
 8003906:	3302      	adds	r3, #2
 8003908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800390c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	f003 0303 	and.w	r3, r3, #3
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	220f      	movs	r2, #15
 8003918:	fa02 f303 	lsl.w	r3, r2, r3
 800391c:	43db      	mvns	r3, r3
 800391e:	693a      	ldr	r2, [r7, #16]
 8003920:	4013      	ands	r3, r2
 8003922:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800392a:	d019      	beq.n	8003960 <HAL_GPIO_Init+0x1ec>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	4a49      	ldr	r2, [pc, #292]	; (8003a54 <HAL_GPIO_Init+0x2e0>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d013      	beq.n	800395c <HAL_GPIO_Init+0x1e8>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4a48      	ldr	r2, [pc, #288]	; (8003a58 <HAL_GPIO_Init+0x2e4>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d00d      	beq.n	8003958 <HAL_GPIO_Init+0x1e4>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	4a47      	ldr	r2, [pc, #284]	; (8003a5c <HAL_GPIO_Init+0x2e8>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d007      	beq.n	8003954 <HAL_GPIO_Init+0x1e0>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4a46      	ldr	r2, [pc, #280]	; (8003a60 <HAL_GPIO_Init+0x2ec>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d101      	bne.n	8003950 <HAL_GPIO_Init+0x1dc>
 800394c:	2304      	movs	r3, #4
 800394e:	e008      	b.n	8003962 <HAL_GPIO_Init+0x1ee>
 8003950:	2307      	movs	r3, #7
 8003952:	e006      	b.n	8003962 <HAL_GPIO_Init+0x1ee>
 8003954:	2303      	movs	r3, #3
 8003956:	e004      	b.n	8003962 <HAL_GPIO_Init+0x1ee>
 8003958:	2302      	movs	r3, #2
 800395a:	e002      	b.n	8003962 <HAL_GPIO_Init+0x1ee>
 800395c:	2301      	movs	r3, #1
 800395e:	e000      	b.n	8003962 <HAL_GPIO_Init+0x1ee>
 8003960:	2300      	movs	r3, #0
 8003962:	697a      	ldr	r2, [r7, #20]
 8003964:	f002 0203 	and.w	r2, r2, #3
 8003968:	0092      	lsls	r2, r2, #2
 800396a:	4093      	lsls	r3, r2
 800396c:	693a      	ldr	r2, [r7, #16]
 800396e:	4313      	orrs	r3, r2
 8003970:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003972:	4937      	ldr	r1, [pc, #220]	; (8003a50 <HAL_GPIO_Init+0x2dc>)
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	089b      	lsrs	r3, r3, #2
 8003978:	3302      	adds	r3, #2
 800397a:	693a      	ldr	r2, [r7, #16]
 800397c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003980:	4b38      	ldr	r3, [pc, #224]	; (8003a64 <HAL_GPIO_Init+0x2f0>)
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	43db      	mvns	r3, r3
 800398a:	693a      	ldr	r2, [r7, #16]
 800398c:	4013      	ands	r3, r2
 800398e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d003      	beq.n	80039a4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800399c:	693a      	ldr	r2, [r7, #16]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80039a4:	4a2f      	ldr	r2, [pc, #188]	; (8003a64 <HAL_GPIO_Init+0x2f0>)
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80039aa:	4b2e      	ldr	r3, [pc, #184]	; (8003a64 <HAL_GPIO_Init+0x2f0>)
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	43db      	mvns	r3, r3
 80039b4:	693a      	ldr	r2, [r7, #16]
 80039b6:	4013      	ands	r3, r2
 80039b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d003      	beq.n	80039ce <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80039c6:	693a      	ldr	r2, [r7, #16]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80039ce:	4a25      	ldr	r2, [pc, #148]	; (8003a64 <HAL_GPIO_Init+0x2f0>)
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80039d4:	4b23      	ldr	r3, [pc, #140]	; (8003a64 <HAL_GPIO_Init+0x2f0>)
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	43db      	mvns	r3, r3
 80039de:	693a      	ldr	r2, [r7, #16]
 80039e0:	4013      	ands	r3, r2
 80039e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d003      	beq.n	80039f8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80039f0:	693a      	ldr	r2, [r7, #16]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80039f8:	4a1a      	ldr	r2, [pc, #104]	; (8003a64 <HAL_GPIO_Init+0x2f0>)
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80039fe:	4b19      	ldr	r3, [pc, #100]	; (8003a64 <HAL_GPIO_Init+0x2f0>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	43db      	mvns	r3, r3
 8003a08:	693a      	ldr	r2, [r7, #16]
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d003      	beq.n	8003a22 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003a1a:	693a      	ldr	r2, [r7, #16]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003a22:	4a10      	ldr	r2, [pc, #64]	; (8003a64 <HAL_GPIO_Init+0x2f0>)
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	fa22 f303 	lsr.w	r3, r2, r3
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	f47f aea3 	bne.w	8003784 <HAL_GPIO_Init+0x10>
  }
}
 8003a3e:	bf00      	nop
 8003a40:	bf00      	nop
 8003a42:	371c      	adds	r7, #28
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr
 8003a4c:	40021000 	.word	0x40021000
 8003a50:	40010000 	.word	0x40010000
 8003a54:	48000400 	.word	0x48000400
 8003a58:	48000800 	.word	0x48000800
 8003a5c:	48000c00 	.word	0x48000c00
 8003a60:	48001000 	.word	0x48001000
 8003a64:	40010400 	.word	0x40010400

08003a68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b085      	sub	sp, #20
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	460b      	mov	r3, r1
 8003a72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	691a      	ldr	r2, [r3, #16]
 8003a78:	887b      	ldrh	r3, [r7, #2]
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d002      	beq.n	8003a86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a80:	2301      	movs	r3, #1
 8003a82:	73fb      	strb	r3, [r7, #15]
 8003a84:	e001      	b.n	8003a8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a86:	2300      	movs	r3, #0
 8003a88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3714      	adds	r7, #20
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	807b      	strh	r3, [r7, #2]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003aa8:	787b      	ldrb	r3, [r7, #1]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d003      	beq.n	8003ab6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003aae:	887a      	ldrh	r2, [r7, #2]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ab4:	e002      	b.n	8003abc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ab6:	887a      	ldrh	r2, [r7, #2]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003abc:	bf00      	nop
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	4603      	mov	r3, r0
 8003ad0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003ad2:	4b08      	ldr	r3, [pc, #32]	; (8003af4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ad4:	695a      	ldr	r2, [r3, #20]
 8003ad6:	88fb      	ldrh	r3, [r7, #6]
 8003ad8:	4013      	ands	r3, r2
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d006      	beq.n	8003aec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003ade:	4a05      	ldr	r2, [pc, #20]	; (8003af4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ae0:	88fb      	ldrh	r3, [r7, #6]
 8003ae2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ae4:	88fb      	ldrh	r3, [r7, #6]
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f000 f806 	bl	8003af8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003aec:	bf00      	nop
 8003aee:	3708      	adds	r7, #8
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	40010400 	.word	0x40010400

08003af8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	4603      	mov	r3, r0
 8003b00:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003b02:	bf00      	nop
 8003b04:	370c      	adds	r7, #12
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
	...

08003b10 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003b10:	b480      	push	{r7}
 8003b12:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b14:	4b05      	ldr	r3, [pc, #20]	; (8003b2c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a04      	ldr	r2, [pc, #16]	; (8003b2c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003b1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b1e:	6013      	str	r3, [r2, #0]
}
 8003b20:	bf00      	nop
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	40007000 	.word	0x40007000

08003b30 <HAL_PWR_ConfigPVD>:
  *         more details about the voltage thresholds corresponding to each
  *         detection level.
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 8003b38:	4b2b      	ldr	r3, [pc, #172]	; (8003be8 <HAL_PWR_ConfigPVD+0xb8>)
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f023 020e 	bic.w	r2, r3, #14
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4928      	ldr	r1, [pc, #160]	; (8003be8 <HAL_PWR_ConfigPVD+0xb8>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	604b      	str	r3, [r1, #4]

  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 8003b4a:	4b28      	ldr	r3, [pc, #160]	; (8003bec <HAL_PWR_ConfigPVD+0xbc>)
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	4a27      	ldr	r2, [pc, #156]	; (8003bec <HAL_PWR_ConfigPVD+0xbc>)
 8003b50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b54:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 8003b56:	4b25      	ldr	r3, [pc, #148]	; (8003bec <HAL_PWR_ConfigPVD+0xbc>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a24      	ldr	r2, [pc, #144]	; (8003bec <HAL_PWR_ConfigPVD+0xbc>)
 8003b5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b60:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 8003b62:	4b22      	ldr	r3, [pc, #136]	; (8003bec <HAL_PWR_ConfigPVD+0xbc>)
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	4a21      	ldr	r2, [pc, #132]	; (8003bec <HAL_PWR_ConfigPVD+0xbc>)
 8003b68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b6c:	60d3      	str	r3, [r2, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8003b6e:	4b1f      	ldr	r3, [pc, #124]	; (8003bec <HAL_PWR_ConfigPVD+0xbc>)
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	4a1e      	ldr	r2, [pc, #120]	; (8003bec <HAL_PWR_ConfigPVD+0xbc>)
 8003b74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b78:	6093      	str	r3, [r2, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d005      	beq.n	8003b92 <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8003b86:	4b19      	ldr	r3, [pc, #100]	; (8003bec <HAL_PWR_ConfigPVD+0xbc>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a18      	ldr	r2, [pc, #96]	; (8003bec <HAL_PWR_ConfigPVD+0xbc>)
 8003b8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b90:	6013      	str	r3, [r2, #0]
  }

  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d005      	beq.n	8003baa <HAL_PWR_ConfigPVD+0x7a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 8003b9e:	4b13      	ldr	r3, [pc, #76]	; (8003bec <HAL_PWR_ConfigPVD+0xbc>)
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	4a12      	ldr	r2, [pc, #72]	; (8003bec <HAL_PWR_ConfigPVD+0xbc>)
 8003ba4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ba8:	6053      	str	r3, [r2, #4]
  }

  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f003 0301 	and.w	r3, r3, #1
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d005      	beq.n	8003bc2 <HAL_PWR_ConfigPVD+0x92>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8003bb6:	4b0d      	ldr	r3, [pc, #52]	; (8003bec <HAL_PWR_ConfigPVD+0xbc>)
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	4a0c      	ldr	r2, [pc, #48]	; (8003bec <HAL_PWR_ConfigPVD+0xbc>)
 8003bbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bc0:	6093      	str	r3, [r2, #8]
  }

  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	f003 0302 	and.w	r3, r3, #2
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d005      	beq.n	8003bda <HAL_PWR_ConfigPVD+0xaa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8003bce:	4b07      	ldr	r3, [pc, #28]	; (8003bec <HAL_PWR_ConfigPVD+0xbc>)
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	4a06      	ldr	r2, [pc, #24]	; (8003bec <HAL_PWR_ConfigPVD+0xbc>)
 8003bd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bd8:	60d3      	str	r3, [r2, #12]
  }

  return HAL_OK;
 8003bda:	2300      	movs	r3, #0
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr
 8003be8:	40007000 	.word	0x40007000
 8003bec:	40010400 	.word	0x40010400

08003bf0 <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Power Voltage Detector (PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 8003bf4:	4b05      	ldr	r3, [pc, #20]	; (8003c0c <HAL_PWR_EnablePVD+0x1c>)
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	4a04      	ldr	r2, [pc, #16]	; (8003c0c <HAL_PWR_EnablePVD+0x1c>)
 8003bfa:	f043 0301 	orr.w	r3, r3, #1
 8003bfe:	6053      	str	r3, [r2, #4]
}
 8003c00:	bf00      	nop
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	40007000 	.word	0x40007000

08003c10 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003c10:	b480      	push	{r7}
 8003c12:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003c14:	4b04      	ldr	r3, [pc, #16]	; (8003c28 <HAL_PWREx_GetVoltageRange+0x18>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr
 8003c26:	bf00      	nop
 8003c28:	40007000 	.word	0x40007000

08003c2c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b085      	sub	sp, #20
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c3a:	d130      	bne.n	8003c9e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c3c:	4b23      	ldr	r3, [pc, #140]	; (8003ccc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003c44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c48:	d038      	beq.n	8003cbc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c4a:	4b20      	ldr	r3, [pc, #128]	; (8003ccc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c52:	4a1e      	ldr	r2, [pc, #120]	; (8003ccc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c54:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c58:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003c5a:	4b1d      	ldr	r3, [pc, #116]	; (8003cd0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2232      	movs	r2, #50	; 0x32
 8003c60:	fb02 f303 	mul.w	r3, r2, r3
 8003c64:	4a1b      	ldr	r2, [pc, #108]	; (8003cd4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003c66:	fba2 2303 	umull	r2, r3, r2, r3
 8003c6a:	0c9b      	lsrs	r3, r3, #18
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c70:	e002      	b.n	8003c78 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	3b01      	subs	r3, #1
 8003c76:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c78:	4b14      	ldr	r3, [pc, #80]	; (8003ccc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c7a:	695b      	ldr	r3, [r3, #20]
 8003c7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c84:	d102      	bne.n	8003c8c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d1f2      	bne.n	8003c72 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c8c:	4b0f      	ldr	r3, [pc, #60]	; (8003ccc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c8e:	695b      	ldr	r3, [r3, #20]
 8003c90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c98:	d110      	bne.n	8003cbc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e00f      	b.n	8003cbe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c9e:	4b0b      	ldr	r3, [pc, #44]	; (8003ccc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ca6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003caa:	d007      	beq.n	8003cbc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003cac:	4b07      	ldr	r3, [pc, #28]	; (8003ccc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003cb4:	4a05      	ldr	r2, [pc, #20]	; (8003ccc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003cba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3714      	adds	r7, #20
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop
 8003ccc:	40007000 	.word	0x40007000
 8003cd0:	2000000c 	.word	0x2000000c
 8003cd4:	431bde83 	.word	0x431bde83

08003cd8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b088      	sub	sp, #32
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d102      	bne.n	8003cec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	f000 bc02 	b.w	80044f0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cec:	4b96      	ldr	r3, [pc, #600]	; (8003f48 <HAL_RCC_OscConfig+0x270>)
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f003 030c 	and.w	r3, r3, #12
 8003cf4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cf6:	4b94      	ldr	r3, [pc, #592]	; (8003f48 <HAL_RCC_OscConfig+0x270>)
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	f003 0303 	and.w	r3, r3, #3
 8003cfe:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0310 	and.w	r3, r3, #16
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	f000 80e4 	beq.w	8003ed6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d007      	beq.n	8003d24 <HAL_RCC_OscConfig+0x4c>
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	2b0c      	cmp	r3, #12
 8003d18:	f040 808b 	bne.w	8003e32 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	f040 8087 	bne.w	8003e32 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d24:	4b88      	ldr	r3, [pc, #544]	; (8003f48 <HAL_RCC_OscConfig+0x270>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0302 	and.w	r3, r3, #2
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d005      	beq.n	8003d3c <HAL_RCC_OscConfig+0x64>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d101      	bne.n	8003d3c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e3d9      	b.n	80044f0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a1a      	ldr	r2, [r3, #32]
 8003d40:	4b81      	ldr	r3, [pc, #516]	; (8003f48 <HAL_RCC_OscConfig+0x270>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0308 	and.w	r3, r3, #8
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d004      	beq.n	8003d56 <HAL_RCC_OscConfig+0x7e>
 8003d4c:	4b7e      	ldr	r3, [pc, #504]	; (8003f48 <HAL_RCC_OscConfig+0x270>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d54:	e005      	b.n	8003d62 <HAL_RCC_OscConfig+0x8a>
 8003d56:	4b7c      	ldr	r3, [pc, #496]	; (8003f48 <HAL_RCC_OscConfig+0x270>)
 8003d58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d5c:	091b      	lsrs	r3, r3, #4
 8003d5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d223      	bcs.n	8003dae <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a1b      	ldr	r3, [r3, #32]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f000 fd54 	bl	8004818 <RCC_SetFlashLatencyFromMSIRange>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d001      	beq.n	8003d7a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e3ba      	b.n	80044f0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d7a:	4b73      	ldr	r3, [pc, #460]	; (8003f48 <HAL_RCC_OscConfig+0x270>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a72      	ldr	r2, [pc, #456]	; (8003f48 <HAL_RCC_OscConfig+0x270>)
 8003d80:	f043 0308 	orr.w	r3, r3, #8
 8003d84:	6013      	str	r3, [r2, #0]
 8003d86:	4b70      	ldr	r3, [pc, #448]	; (8003f48 <HAL_RCC_OscConfig+0x270>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a1b      	ldr	r3, [r3, #32]
 8003d92:	496d      	ldr	r1, [pc, #436]	; (8003f48 <HAL_RCC_OscConfig+0x270>)
 8003d94:	4313      	orrs	r3, r2
 8003d96:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d98:	4b6b      	ldr	r3, [pc, #428]	; (8003f48 <HAL_RCC_OscConfig+0x270>)
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	69db      	ldr	r3, [r3, #28]
 8003da4:	021b      	lsls	r3, r3, #8
 8003da6:	4968      	ldr	r1, [pc, #416]	; (8003f48 <HAL_RCC_OscConfig+0x270>)
 8003da8:	4313      	orrs	r3, r2
 8003daa:	604b      	str	r3, [r1, #4]
 8003dac:	e025      	b.n	8003dfa <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003dae:	4b66      	ldr	r3, [pc, #408]	; (8003f48 <HAL_RCC_OscConfig+0x270>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a65      	ldr	r2, [pc, #404]	; (8003f48 <HAL_RCC_OscConfig+0x270>)
 8003db4:	f043 0308 	orr.w	r3, r3, #8
 8003db8:	6013      	str	r3, [r2, #0]
 8003dba:	4b63      	ldr	r3, [pc, #396]	; (8003f48 <HAL_RCC_OscConfig+0x270>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a1b      	ldr	r3, [r3, #32]
 8003dc6:	4960      	ldr	r1, [pc, #384]	; (8003f48 <HAL_RCC_OscConfig+0x270>)
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003dcc:	4b5e      	ldr	r3, [pc, #376]	; (8003f48 <HAL_RCC_OscConfig+0x270>)
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	69db      	ldr	r3, [r3, #28]
 8003dd8:	021b      	lsls	r3, r3, #8
 8003dda:	495b      	ldr	r1, [pc, #364]	; (8003f48 <HAL_RCC_OscConfig+0x270>)
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d109      	bne.n	8003dfa <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a1b      	ldr	r3, [r3, #32]
 8003dea:	4618      	mov	r0, r3
 8003dec:	f000 fd14 	bl	8004818 <RCC_SetFlashLatencyFromMSIRange>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d001      	beq.n	8003dfa <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e37a      	b.n	80044f0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003dfa:	f000 fc81 	bl	8004700 <HAL_RCC_GetSysClockFreq>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	4b51      	ldr	r3, [pc, #324]	; (8003f48 <HAL_RCC_OscConfig+0x270>)
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	091b      	lsrs	r3, r3, #4
 8003e06:	f003 030f 	and.w	r3, r3, #15
 8003e0a:	4950      	ldr	r1, [pc, #320]	; (8003f4c <HAL_RCC_OscConfig+0x274>)
 8003e0c:	5ccb      	ldrb	r3, [r1, r3]
 8003e0e:	f003 031f 	and.w	r3, r3, #31
 8003e12:	fa22 f303 	lsr.w	r3, r2, r3
 8003e16:	4a4e      	ldr	r2, [pc, #312]	; (8003f50 <HAL_RCC_OscConfig+0x278>)
 8003e18:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003e1a:	4b4e      	ldr	r3, [pc, #312]	; (8003f54 <HAL_RCC_OscConfig+0x27c>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f7ff fa7c 	bl	800331c <HAL_InitTick>
 8003e24:	4603      	mov	r3, r0
 8003e26:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003e28:	7bfb      	ldrb	r3, [r7, #15]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d052      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003e2e:	7bfb      	ldrb	r3, [r7, #15]
 8003e30:	e35e      	b.n	80044f0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	699b      	ldr	r3, [r3, #24]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d032      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003e3a:	4b43      	ldr	r3, [pc, #268]	; (8003f48 <HAL_RCC_OscConfig+0x270>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a42      	ldr	r2, [pc, #264]	; (8003f48 <HAL_RCC_OscConfig+0x270>)
 8003e40:	f043 0301 	orr.w	r3, r3, #1
 8003e44:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e46:	f7ff faa5 	bl	8003394 <HAL_GetTick>
 8003e4a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e4c:	e008      	b.n	8003e60 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e4e:	f7ff faa1 	bl	8003394 <HAL_GetTick>
 8003e52:	4602      	mov	r2, r0
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d901      	bls.n	8003e60 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	e347      	b.n	80044f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e60:	4b39      	ldr	r3, [pc, #228]	; (8003f48 <HAL_RCC_OscConfig+0x270>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0302 	and.w	r3, r3, #2
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d0f0      	beq.n	8003e4e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e6c:	4b36      	ldr	r3, [pc, #216]	; (8003f48 <HAL_RCC_OscConfig+0x270>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a35      	ldr	r2, [pc, #212]	; (8003f48 <HAL_RCC_OscConfig+0x270>)
 8003e72:	f043 0308 	orr.w	r3, r3, #8
 8003e76:	6013      	str	r3, [r2, #0]
 8003e78:	4b33      	ldr	r3, [pc, #204]	; (8003f48 <HAL_RCC_OscConfig+0x270>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6a1b      	ldr	r3, [r3, #32]
 8003e84:	4930      	ldr	r1, [pc, #192]	; (8003f48 <HAL_RCC_OscConfig+0x270>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e8a:	4b2f      	ldr	r3, [pc, #188]	; (8003f48 <HAL_RCC_OscConfig+0x270>)
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	69db      	ldr	r3, [r3, #28]
 8003e96:	021b      	lsls	r3, r3, #8
 8003e98:	492b      	ldr	r1, [pc, #172]	; (8003f48 <HAL_RCC_OscConfig+0x270>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	604b      	str	r3, [r1, #4]
 8003e9e:	e01a      	b.n	8003ed6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003ea0:	4b29      	ldr	r3, [pc, #164]	; (8003f48 <HAL_RCC_OscConfig+0x270>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a28      	ldr	r2, [pc, #160]	; (8003f48 <HAL_RCC_OscConfig+0x270>)
 8003ea6:	f023 0301 	bic.w	r3, r3, #1
 8003eaa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003eac:	f7ff fa72 	bl	8003394 <HAL_GetTick>
 8003eb0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003eb2:	e008      	b.n	8003ec6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003eb4:	f7ff fa6e 	bl	8003394 <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d901      	bls.n	8003ec6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e314      	b.n	80044f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ec6:	4b20      	ldr	r3, [pc, #128]	; (8003f48 <HAL_RCC_OscConfig+0x270>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0302 	and.w	r3, r3, #2
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d1f0      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x1dc>
 8003ed2:	e000      	b.n	8003ed6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ed4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0301 	and.w	r3, r3, #1
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d073      	beq.n	8003fca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	2b08      	cmp	r3, #8
 8003ee6:	d005      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x21c>
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	2b0c      	cmp	r3, #12
 8003eec:	d10e      	bne.n	8003f0c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	2b03      	cmp	r3, #3
 8003ef2:	d10b      	bne.n	8003f0c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ef4:	4b14      	ldr	r3, [pc, #80]	; (8003f48 <HAL_RCC_OscConfig+0x270>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d063      	beq.n	8003fc8 <HAL_RCC_OscConfig+0x2f0>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d15f      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e2f1      	b.n	80044f0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f14:	d106      	bne.n	8003f24 <HAL_RCC_OscConfig+0x24c>
 8003f16:	4b0c      	ldr	r3, [pc, #48]	; (8003f48 <HAL_RCC_OscConfig+0x270>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a0b      	ldr	r2, [pc, #44]	; (8003f48 <HAL_RCC_OscConfig+0x270>)
 8003f1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f20:	6013      	str	r3, [r2, #0]
 8003f22:	e025      	b.n	8003f70 <HAL_RCC_OscConfig+0x298>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f2c:	d114      	bne.n	8003f58 <HAL_RCC_OscConfig+0x280>
 8003f2e:	4b06      	ldr	r3, [pc, #24]	; (8003f48 <HAL_RCC_OscConfig+0x270>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a05      	ldr	r2, [pc, #20]	; (8003f48 <HAL_RCC_OscConfig+0x270>)
 8003f34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f38:	6013      	str	r3, [r2, #0]
 8003f3a:	4b03      	ldr	r3, [pc, #12]	; (8003f48 <HAL_RCC_OscConfig+0x270>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a02      	ldr	r2, [pc, #8]	; (8003f48 <HAL_RCC_OscConfig+0x270>)
 8003f40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f44:	6013      	str	r3, [r2, #0]
 8003f46:	e013      	b.n	8003f70 <HAL_RCC_OscConfig+0x298>
 8003f48:	40021000 	.word	0x40021000
 8003f4c:	080070c8 	.word	0x080070c8
 8003f50:	2000000c 	.word	0x2000000c
 8003f54:	20000004 	.word	0x20000004
 8003f58:	4ba0      	ldr	r3, [pc, #640]	; (80041dc <HAL_RCC_OscConfig+0x504>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a9f      	ldr	r2, [pc, #636]	; (80041dc <HAL_RCC_OscConfig+0x504>)
 8003f5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f62:	6013      	str	r3, [r2, #0]
 8003f64:	4b9d      	ldr	r3, [pc, #628]	; (80041dc <HAL_RCC_OscConfig+0x504>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a9c      	ldr	r2, [pc, #624]	; (80041dc <HAL_RCC_OscConfig+0x504>)
 8003f6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d013      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f78:	f7ff fa0c 	bl	8003394 <HAL_GetTick>
 8003f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f7e:	e008      	b.n	8003f92 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f80:	f7ff fa08 	bl	8003394 <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	2b64      	cmp	r3, #100	; 0x64
 8003f8c:	d901      	bls.n	8003f92 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e2ae      	b.n	80044f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f92:	4b92      	ldr	r3, [pc, #584]	; (80041dc <HAL_RCC_OscConfig+0x504>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d0f0      	beq.n	8003f80 <HAL_RCC_OscConfig+0x2a8>
 8003f9e:	e014      	b.n	8003fca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa0:	f7ff f9f8 	bl	8003394 <HAL_GetTick>
 8003fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003fa6:	e008      	b.n	8003fba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fa8:	f7ff f9f4 	bl	8003394 <HAL_GetTick>
 8003fac:	4602      	mov	r2, r0
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	2b64      	cmp	r3, #100	; 0x64
 8003fb4:	d901      	bls.n	8003fba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e29a      	b.n	80044f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003fba:	4b88      	ldr	r3, [pc, #544]	; (80041dc <HAL_RCC_OscConfig+0x504>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d1f0      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x2d0>
 8003fc6:	e000      	b.n	8003fca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0302 	and.w	r3, r3, #2
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d060      	beq.n	8004098 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	2b04      	cmp	r3, #4
 8003fda:	d005      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x310>
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	2b0c      	cmp	r3, #12
 8003fe0:	d119      	bne.n	8004016 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d116      	bne.n	8004016 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fe8:	4b7c      	ldr	r3, [pc, #496]	; (80041dc <HAL_RCC_OscConfig+0x504>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d005      	beq.n	8004000 <HAL_RCC_OscConfig+0x328>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d101      	bne.n	8004000 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e277      	b.n	80044f0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004000:	4b76      	ldr	r3, [pc, #472]	; (80041dc <HAL_RCC_OscConfig+0x504>)
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	061b      	lsls	r3, r3, #24
 800400e:	4973      	ldr	r1, [pc, #460]	; (80041dc <HAL_RCC_OscConfig+0x504>)
 8004010:	4313      	orrs	r3, r2
 8004012:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004014:	e040      	b.n	8004098 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d023      	beq.n	8004066 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800401e:	4b6f      	ldr	r3, [pc, #444]	; (80041dc <HAL_RCC_OscConfig+0x504>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a6e      	ldr	r2, [pc, #440]	; (80041dc <HAL_RCC_OscConfig+0x504>)
 8004024:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004028:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800402a:	f7ff f9b3 	bl	8003394 <HAL_GetTick>
 800402e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004030:	e008      	b.n	8004044 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004032:	f7ff f9af 	bl	8003394 <HAL_GetTick>
 8004036:	4602      	mov	r2, r0
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	2b02      	cmp	r3, #2
 800403e:	d901      	bls.n	8004044 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	e255      	b.n	80044f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004044:	4b65      	ldr	r3, [pc, #404]	; (80041dc <HAL_RCC_OscConfig+0x504>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800404c:	2b00      	cmp	r3, #0
 800404e:	d0f0      	beq.n	8004032 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004050:	4b62      	ldr	r3, [pc, #392]	; (80041dc <HAL_RCC_OscConfig+0x504>)
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	061b      	lsls	r3, r3, #24
 800405e:	495f      	ldr	r1, [pc, #380]	; (80041dc <HAL_RCC_OscConfig+0x504>)
 8004060:	4313      	orrs	r3, r2
 8004062:	604b      	str	r3, [r1, #4]
 8004064:	e018      	b.n	8004098 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004066:	4b5d      	ldr	r3, [pc, #372]	; (80041dc <HAL_RCC_OscConfig+0x504>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a5c      	ldr	r2, [pc, #368]	; (80041dc <HAL_RCC_OscConfig+0x504>)
 800406c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004070:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004072:	f7ff f98f 	bl	8003394 <HAL_GetTick>
 8004076:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004078:	e008      	b.n	800408c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800407a:	f7ff f98b 	bl	8003394 <HAL_GetTick>
 800407e:	4602      	mov	r2, r0
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	2b02      	cmp	r3, #2
 8004086:	d901      	bls.n	800408c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004088:	2303      	movs	r3, #3
 800408a:	e231      	b.n	80044f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800408c:	4b53      	ldr	r3, [pc, #332]	; (80041dc <HAL_RCC_OscConfig+0x504>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004094:	2b00      	cmp	r3, #0
 8004096:	d1f0      	bne.n	800407a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0308 	and.w	r3, r3, #8
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d03c      	beq.n	800411e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	695b      	ldr	r3, [r3, #20]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d01c      	beq.n	80040e6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040ac:	4b4b      	ldr	r3, [pc, #300]	; (80041dc <HAL_RCC_OscConfig+0x504>)
 80040ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040b2:	4a4a      	ldr	r2, [pc, #296]	; (80041dc <HAL_RCC_OscConfig+0x504>)
 80040b4:	f043 0301 	orr.w	r3, r3, #1
 80040b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040bc:	f7ff f96a 	bl	8003394 <HAL_GetTick>
 80040c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040c2:	e008      	b.n	80040d6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040c4:	f7ff f966 	bl	8003394 <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d901      	bls.n	80040d6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e20c      	b.n	80044f0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040d6:	4b41      	ldr	r3, [pc, #260]	; (80041dc <HAL_RCC_OscConfig+0x504>)
 80040d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040dc:	f003 0302 	and.w	r3, r3, #2
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d0ef      	beq.n	80040c4 <HAL_RCC_OscConfig+0x3ec>
 80040e4:	e01b      	b.n	800411e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040e6:	4b3d      	ldr	r3, [pc, #244]	; (80041dc <HAL_RCC_OscConfig+0x504>)
 80040e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040ec:	4a3b      	ldr	r2, [pc, #236]	; (80041dc <HAL_RCC_OscConfig+0x504>)
 80040ee:	f023 0301 	bic.w	r3, r3, #1
 80040f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040f6:	f7ff f94d 	bl	8003394 <HAL_GetTick>
 80040fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040fc:	e008      	b.n	8004110 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040fe:	f7ff f949 	bl	8003394 <HAL_GetTick>
 8004102:	4602      	mov	r2, r0
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	2b02      	cmp	r3, #2
 800410a:	d901      	bls.n	8004110 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	e1ef      	b.n	80044f0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004110:	4b32      	ldr	r3, [pc, #200]	; (80041dc <HAL_RCC_OscConfig+0x504>)
 8004112:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004116:	f003 0302 	and.w	r3, r3, #2
 800411a:	2b00      	cmp	r3, #0
 800411c:	d1ef      	bne.n	80040fe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0304 	and.w	r3, r3, #4
 8004126:	2b00      	cmp	r3, #0
 8004128:	f000 80a6 	beq.w	8004278 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800412c:	2300      	movs	r3, #0
 800412e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004130:	4b2a      	ldr	r3, [pc, #168]	; (80041dc <HAL_RCC_OscConfig+0x504>)
 8004132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004134:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d10d      	bne.n	8004158 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800413c:	4b27      	ldr	r3, [pc, #156]	; (80041dc <HAL_RCC_OscConfig+0x504>)
 800413e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004140:	4a26      	ldr	r2, [pc, #152]	; (80041dc <HAL_RCC_OscConfig+0x504>)
 8004142:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004146:	6593      	str	r3, [r2, #88]	; 0x58
 8004148:	4b24      	ldr	r3, [pc, #144]	; (80041dc <HAL_RCC_OscConfig+0x504>)
 800414a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800414c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004150:	60bb      	str	r3, [r7, #8]
 8004152:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004154:	2301      	movs	r3, #1
 8004156:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004158:	4b21      	ldr	r3, [pc, #132]	; (80041e0 <HAL_RCC_OscConfig+0x508>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004160:	2b00      	cmp	r3, #0
 8004162:	d118      	bne.n	8004196 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004164:	4b1e      	ldr	r3, [pc, #120]	; (80041e0 <HAL_RCC_OscConfig+0x508>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a1d      	ldr	r2, [pc, #116]	; (80041e0 <HAL_RCC_OscConfig+0x508>)
 800416a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800416e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004170:	f7ff f910 	bl	8003394 <HAL_GetTick>
 8004174:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004176:	e008      	b.n	800418a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004178:	f7ff f90c 	bl	8003394 <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	2b02      	cmp	r3, #2
 8004184:	d901      	bls.n	800418a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e1b2      	b.n	80044f0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800418a:	4b15      	ldr	r3, [pc, #84]	; (80041e0 <HAL_RCC_OscConfig+0x508>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004192:	2b00      	cmp	r3, #0
 8004194:	d0f0      	beq.n	8004178 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	2b01      	cmp	r3, #1
 800419c:	d108      	bne.n	80041b0 <HAL_RCC_OscConfig+0x4d8>
 800419e:	4b0f      	ldr	r3, [pc, #60]	; (80041dc <HAL_RCC_OscConfig+0x504>)
 80041a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041a4:	4a0d      	ldr	r2, [pc, #52]	; (80041dc <HAL_RCC_OscConfig+0x504>)
 80041a6:	f043 0301 	orr.w	r3, r3, #1
 80041aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041ae:	e029      	b.n	8004204 <HAL_RCC_OscConfig+0x52c>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	2b05      	cmp	r3, #5
 80041b6:	d115      	bne.n	80041e4 <HAL_RCC_OscConfig+0x50c>
 80041b8:	4b08      	ldr	r3, [pc, #32]	; (80041dc <HAL_RCC_OscConfig+0x504>)
 80041ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041be:	4a07      	ldr	r2, [pc, #28]	; (80041dc <HAL_RCC_OscConfig+0x504>)
 80041c0:	f043 0304 	orr.w	r3, r3, #4
 80041c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041c8:	4b04      	ldr	r3, [pc, #16]	; (80041dc <HAL_RCC_OscConfig+0x504>)
 80041ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ce:	4a03      	ldr	r2, [pc, #12]	; (80041dc <HAL_RCC_OscConfig+0x504>)
 80041d0:	f043 0301 	orr.w	r3, r3, #1
 80041d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041d8:	e014      	b.n	8004204 <HAL_RCC_OscConfig+0x52c>
 80041da:	bf00      	nop
 80041dc:	40021000 	.word	0x40021000
 80041e0:	40007000 	.word	0x40007000
 80041e4:	4b9a      	ldr	r3, [pc, #616]	; (8004450 <HAL_RCC_OscConfig+0x778>)
 80041e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ea:	4a99      	ldr	r2, [pc, #612]	; (8004450 <HAL_RCC_OscConfig+0x778>)
 80041ec:	f023 0301 	bic.w	r3, r3, #1
 80041f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041f4:	4b96      	ldr	r3, [pc, #600]	; (8004450 <HAL_RCC_OscConfig+0x778>)
 80041f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041fa:	4a95      	ldr	r2, [pc, #596]	; (8004450 <HAL_RCC_OscConfig+0x778>)
 80041fc:	f023 0304 	bic.w	r3, r3, #4
 8004200:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d016      	beq.n	800423a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800420c:	f7ff f8c2 	bl	8003394 <HAL_GetTick>
 8004210:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004212:	e00a      	b.n	800422a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004214:	f7ff f8be 	bl	8003394 <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004222:	4293      	cmp	r3, r2
 8004224:	d901      	bls.n	800422a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e162      	b.n	80044f0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800422a:	4b89      	ldr	r3, [pc, #548]	; (8004450 <HAL_RCC_OscConfig+0x778>)
 800422c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004230:	f003 0302 	and.w	r3, r3, #2
 8004234:	2b00      	cmp	r3, #0
 8004236:	d0ed      	beq.n	8004214 <HAL_RCC_OscConfig+0x53c>
 8004238:	e015      	b.n	8004266 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800423a:	f7ff f8ab 	bl	8003394 <HAL_GetTick>
 800423e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004240:	e00a      	b.n	8004258 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004242:	f7ff f8a7 	bl	8003394 <HAL_GetTick>
 8004246:	4602      	mov	r2, r0
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004250:	4293      	cmp	r3, r2
 8004252:	d901      	bls.n	8004258 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004254:	2303      	movs	r3, #3
 8004256:	e14b      	b.n	80044f0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004258:	4b7d      	ldr	r3, [pc, #500]	; (8004450 <HAL_RCC_OscConfig+0x778>)
 800425a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800425e:	f003 0302 	and.w	r3, r3, #2
 8004262:	2b00      	cmp	r3, #0
 8004264:	d1ed      	bne.n	8004242 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004266:	7ffb      	ldrb	r3, [r7, #31]
 8004268:	2b01      	cmp	r3, #1
 800426a:	d105      	bne.n	8004278 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800426c:	4b78      	ldr	r3, [pc, #480]	; (8004450 <HAL_RCC_OscConfig+0x778>)
 800426e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004270:	4a77      	ldr	r2, [pc, #476]	; (8004450 <HAL_RCC_OscConfig+0x778>)
 8004272:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004276:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0320 	and.w	r3, r3, #32
 8004280:	2b00      	cmp	r3, #0
 8004282:	d03c      	beq.n	80042fe <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004288:	2b00      	cmp	r3, #0
 800428a:	d01c      	beq.n	80042c6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800428c:	4b70      	ldr	r3, [pc, #448]	; (8004450 <HAL_RCC_OscConfig+0x778>)
 800428e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004292:	4a6f      	ldr	r2, [pc, #444]	; (8004450 <HAL_RCC_OscConfig+0x778>)
 8004294:	f043 0301 	orr.w	r3, r3, #1
 8004298:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800429c:	f7ff f87a 	bl	8003394 <HAL_GetTick>
 80042a0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80042a2:	e008      	b.n	80042b6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042a4:	f7ff f876 	bl	8003394 <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	d901      	bls.n	80042b6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e11c      	b.n	80044f0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80042b6:	4b66      	ldr	r3, [pc, #408]	; (8004450 <HAL_RCC_OscConfig+0x778>)
 80042b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042bc:	f003 0302 	and.w	r3, r3, #2
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d0ef      	beq.n	80042a4 <HAL_RCC_OscConfig+0x5cc>
 80042c4:	e01b      	b.n	80042fe <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80042c6:	4b62      	ldr	r3, [pc, #392]	; (8004450 <HAL_RCC_OscConfig+0x778>)
 80042c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042cc:	4a60      	ldr	r2, [pc, #384]	; (8004450 <HAL_RCC_OscConfig+0x778>)
 80042ce:	f023 0301 	bic.w	r3, r3, #1
 80042d2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042d6:	f7ff f85d 	bl	8003394 <HAL_GetTick>
 80042da:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80042dc:	e008      	b.n	80042f0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042de:	f7ff f859 	bl	8003394 <HAL_GetTick>
 80042e2:	4602      	mov	r2, r0
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	d901      	bls.n	80042f0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80042ec:	2303      	movs	r3, #3
 80042ee:	e0ff      	b.n	80044f0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80042f0:	4b57      	ldr	r3, [pc, #348]	; (8004450 <HAL_RCC_OscConfig+0x778>)
 80042f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042f6:	f003 0302 	and.w	r3, r3, #2
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d1ef      	bne.n	80042de <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004302:	2b00      	cmp	r3, #0
 8004304:	f000 80f3 	beq.w	80044ee <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800430c:	2b02      	cmp	r3, #2
 800430e:	f040 80c9 	bne.w	80044a4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004312:	4b4f      	ldr	r3, [pc, #316]	; (8004450 <HAL_RCC_OscConfig+0x778>)
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	f003 0203 	and.w	r2, r3, #3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004322:	429a      	cmp	r2, r3
 8004324:	d12c      	bne.n	8004380 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004330:	3b01      	subs	r3, #1
 8004332:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004334:	429a      	cmp	r2, r3
 8004336:	d123      	bne.n	8004380 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004342:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004344:	429a      	cmp	r2, r3
 8004346:	d11b      	bne.n	8004380 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004352:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004354:	429a      	cmp	r2, r3
 8004356:	d113      	bne.n	8004380 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004362:	085b      	lsrs	r3, r3, #1
 8004364:	3b01      	subs	r3, #1
 8004366:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004368:	429a      	cmp	r2, r3
 800436a:	d109      	bne.n	8004380 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004376:	085b      	lsrs	r3, r3, #1
 8004378:	3b01      	subs	r3, #1
 800437a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800437c:	429a      	cmp	r2, r3
 800437e:	d06b      	beq.n	8004458 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004380:	69bb      	ldr	r3, [r7, #24]
 8004382:	2b0c      	cmp	r3, #12
 8004384:	d062      	beq.n	800444c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004386:	4b32      	ldr	r3, [pc, #200]	; (8004450 <HAL_RCC_OscConfig+0x778>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d001      	beq.n	8004396 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e0ac      	b.n	80044f0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004396:	4b2e      	ldr	r3, [pc, #184]	; (8004450 <HAL_RCC_OscConfig+0x778>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a2d      	ldr	r2, [pc, #180]	; (8004450 <HAL_RCC_OscConfig+0x778>)
 800439c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043a0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80043a2:	f7fe fff7 	bl	8003394 <HAL_GetTick>
 80043a6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043a8:	e008      	b.n	80043bc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043aa:	f7fe fff3 	bl	8003394 <HAL_GetTick>
 80043ae:	4602      	mov	r2, r0
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	d901      	bls.n	80043bc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80043b8:	2303      	movs	r3, #3
 80043ba:	e099      	b.n	80044f0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043bc:	4b24      	ldr	r3, [pc, #144]	; (8004450 <HAL_RCC_OscConfig+0x778>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d1f0      	bne.n	80043aa <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043c8:	4b21      	ldr	r3, [pc, #132]	; (8004450 <HAL_RCC_OscConfig+0x778>)
 80043ca:	68da      	ldr	r2, [r3, #12]
 80043cc:	4b21      	ldr	r3, [pc, #132]	; (8004454 <HAL_RCC_OscConfig+0x77c>)
 80043ce:	4013      	ands	r3, r2
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80043d8:	3a01      	subs	r2, #1
 80043da:	0112      	lsls	r2, r2, #4
 80043dc:	4311      	orrs	r1, r2
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80043e2:	0212      	lsls	r2, r2, #8
 80043e4:	4311      	orrs	r1, r2
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80043ea:	0852      	lsrs	r2, r2, #1
 80043ec:	3a01      	subs	r2, #1
 80043ee:	0552      	lsls	r2, r2, #21
 80043f0:	4311      	orrs	r1, r2
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80043f6:	0852      	lsrs	r2, r2, #1
 80043f8:	3a01      	subs	r2, #1
 80043fa:	0652      	lsls	r2, r2, #25
 80043fc:	4311      	orrs	r1, r2
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004402:	06d2      	lsls	r2, r2, #27
 8004404:	430a      	orrs	r2, r1
 8004406:	4912      	ldr	r1, [pc, #72]	; (8004450 <HAL_RCC_OscConfig+0x778>)
 8004408:	4313      	orrs	r3, r2
 800440a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800440c:	4b10      	ldr	r3, [pc, #64]	; (8004450 <HAL_RCC_OscConfig+0x778>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a0f      	ldr	r2, [pc, #60]	; (8004450 <HAL_RCC_OscConfig+0x778>)
 8004412:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004416:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004418:	4b0d      	ldr	r3, [pc, #52]	; (8004450 <HAL_RCC_OscConfig+0x778>)
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	4a0c      	ldr	r2, [pc, #48]	; (8004450 <HAL_RCC_OscConfig+0x778>)
 800441e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004422:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004424:	f7fe ffb6 	bl	8003394 <HAL_GetTick>
 8004428:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800442a:	e008      	b.n	800443e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800442c:	f7fe ffb2 	bl	8003394 <HAL_GetTick>
 8004430:	4602      	mov	r2, r0
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	2b02      	cmp	r3, #2
 8004438:	d901      	bls.n	800443e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e058      	b.n	80044f0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800443e:	4b04      	ldr	r3, [pc, #16]	; (8004450 <HAL_RCC_OscConfig+0x778>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d0f0      	beq.n	800442c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800444a:	e050      	b.n	80044ee <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e04f      	b.n	80044f0 <HAL_RCC_OscConfig+0x818>
 8004450:	40021000 	.word	0x40021000
 8004454:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004458:	4b27      	ldr	r3, [pc, #156]	; (80044f8 <HAL_RCC_OscConfig+0x820>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d144      	bne.n	80044ee <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004464:	4b24      	ldr	r3, [pc, #144]	; (80044f8 <HAL_RCC_OscConfig+0x820>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a23      	ldr	r2, [pc, #140]	; (80044f8 <HAL_RCC_OscConfig+0x820>)
 800446a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800446e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004470:	4b21      	ldr	r3, [pc, #132]	; (80044f8 <HAL_RCC_OscConfig+0x820>)
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	4a20      	ldr	r2, [pc, #128]	; (80044f8 <HAL_RCC_OscConfig+0x820>)
 8004476:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800447a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800447c:	f7fe ff8a 	bl	8003394 <HAL_GetTick>
 8004480:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004482:	e008      	b.n	8004496 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004484:	f7fe ff86 	bl	8003394 <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	2b02      	cmp	r3, #2
 8004490:	d901      	bls.n	8004496 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e02c      	b.n	80044f0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004496:	4b18      	ldr	r3, [pc, #96]	; (80044f8 <HAL_RCC_OscConfig+0x820>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d0f0      	beq.n	8004484 <HAL_RCC_OscConfig+0x7ac>
 80044a2:	e024      	b.n	80044ee <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80044a4:	69bb      	ldr	r3, [r7, #24]
 80044a6:	2b0c      	cmp	r3, #12
 80044a8:	d01f      	beq.n	80044ea <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044aa:	4b13      	ldr	r3, [pc, #76]	; (80044f8 <HAL_RCC_OscConfig+0x820>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a12      	ldr	r2, [pc, #72]	; (80044f8 <HAL_RCC_OscConfig+0x820>)
 80044b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044b6:	f7fe ff6d 	bl	8003394 <HAL_GetTick>
 80044ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044bc:	e008      	b.n	80044d0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044be:	f7fe ff69 	bl	8003394 <HAL_GetTick>
 80044c2:	4602      	mov	r2, r0
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	2b02      	cmp	r3, #2
 80044ca:	d901      	bls.n	80044d0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80044cc:	2303      	movs	r3, #3
 80044ce:	e00f      	b.n	80044f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044d0:	4b09      	ldr	r3, [pc, #36]	; (80044f8 <HAL_RCC_OscConfig+0x820>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d1f0      	bne.n	80044be <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80044dc:	4b06      	ldr	r3, [pc, #24]	; (80044f8 <HAL_RCC_OscConfig+0x820>)
 80044de:	68da      	ldr	r2, [r3, #12]
 80044e0:	4905      	ldr	r1, [pc, #20]	; (80044f8 <HAL_RCC_OscConfig+0x820>)
 80044e2:	4b06      	ldr	r3, [pc, #24]	; (80044fc <HAL_RCC_OscConfig+0x824>)
 80044e4:	4013      	ands	r3, r2
 80044e6:	60cb      	str	r3, [r1, #12]
 80044e8:	e001      	b.n	80044ee <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e000      	b.n	80044f0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80044ee:	2300      	movs	r3, #0
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3720      	adds	r7, #32
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	40021000 	.word	0x40021000
 80044fc:	feeefffc 	.word	0xfeeefffc

08004500 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d101      	bne.n	8004514 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e0e7      	b.n	80046e4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004514:	4b75      	ldr	r3, [pc, #468]	; (80046ec <HAL_RCC_ClockConfig+0x1ec>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0307 	and.w	r3, r3, #7
 800451c:	683a      	ldr	r2, [r7, #0]
 800451e:	429a      	cmp	r2, r3
 8004520:	d910      	bls.n	8004544 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004522:	4b72      	ldr	r3, [pc, #456]	; (80046ec <HAL_RCC_ClockConfig+0x1ec>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f023 0207 	bic.w	r2, r3, #7
 800452a:	4970      	ldr	r1, [pc, #448]	; (80046ec <HAL_RCC_ClockConfig+0x1ec>)
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	4313      	orrs	r3, r2
 8004530:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004532:	4b6e      	ldr	r3, [pc, #440]	; (80046ec <HAL_RCC_ClockConfig+0x1ec>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0307 	and.w	r3, r3, #7
 800453a:	683a      	ldr	r2, [r7, #0]
 800453c:	429a      	cmp	r2, r3
 800453e:	d001      	beq.n	8004544 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e0cf      	b.n	80046e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0302 	and.w	r3, r3, #2
 800454c:	2b00      	cmp	r3, #0
 800454e:	d010      	beq.n	8004572 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	689a      	ldr	r2, [r3, #8]
 8004554:	4b66      	ldr	r3, [pc, #408]	; (80046f0 <HAL_RCC_ClockConfig+0x1f0>)
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800455c:	429a      	cmp	r2, r3
 800455e:	d908      	bls.n	8004572 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004560:	4b63      	ldr	r3, [pc, #396]	; (80046f0 <HAL_RCC_ClockConfig+0x1f0>)
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	4960      	ldr	r1, [pc, #384]	; (80046f0 <HAL_RCC_ClockConfig+0x1f0>)
 800456e:	4313      	orrs	r3, r2
 8004570:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0301 	and.w	r3, r3, #1
 800457a:	2b00      	cmp	r3, #0
 800457c:	d04c      	beq.n	8004618 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	2b03      	cmp	r3, #3
 8004584:	d107      	bne.n	8004596 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004586:	4b5a      	ldr	r3, [pc, #360]	; (80046f0 <HAL_RCC_ClockConfig+0x1f0>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d121      	bne.n	80045d6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e0a6      	b.n	80046e4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	2b02      	cmp	r3, #2
 800459c:	d107      	bne.n	80045ae <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800459e:	4b54      	ldr	r3, [pc, #336]	; (80046f0 <HAL_RCC_ClockConfig+0x1f0>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d115      	bne.n	80045d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e09a      	b.n	80046e4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d107      	bne.n	80045c6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80045b6:	4b4e      	ldr	r3, [pc, #312]	; (80046f0 <HAL_RCC_ClockConfig+0x1f0>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0302 	and.w	r3, r3, #2
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d109      	bne.n	80045d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e08e      	b.n	80046e4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045c6:	4b4a      	ldr	r3, [pc, #296]	; (80046f0 <HAL_RCC_ClockConfig+0x1f0>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d101      	bne.n	80045d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e086      	b.n	80046e4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80045d6:	4b46      	ldr	r3, [pc, #280]	; (80046f0 <HAL_RCC_ClockConfig+0x1f0>)
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	f023 0203 	bic.w	r2, r3, #3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	4943      	ldr	r1, [pc, #268]	; (80046f0 <HAL_RCC_ClockConfig+0x1f0>)
 80045e4:	4313      	orrs	r3, r2
 80045e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045e8:	f7fe fed4 	bl	8003394 <HAL_GetTick>
 80045ec:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ee:	e00a      	b.n	8004606 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045f0:	f7fe fed0 	bl	8003394 <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80045fe:	4293      	cmp	r3, r2
 8004600:	d901      	bls.n	8004606 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e06e      	b.n	80046e4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004606:	4b3a      	ldr	r3, [pc, #232]	; (80046f0 <HAL_RCC_ClockConfig+0x1f0>)
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	f003 020c 	and.w	r2, r3, #12
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	429a      	cmp	r2, r3
 8004616:	d1eb      	bne.n	80045f0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0302 	and.w	r3, r3, #2
 8004620:	2b00      	cmp	r3, #0
 8004622:	d010      	beq.n	8004646 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	689a      	ldr	r2, [r3, #8]
 8004628:	4b31      	ldr	r3, [pc, #196]	; (80046f0 <HAL_RCC_ClockConfig+0x1f0>)
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004630:	429a      	cmp	r2, r3
 8004632:	d208      	bcs.n	8004646 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004634:	4b2e      	ldr	r3, [pc, #184]	; (80046f0 <HAL_RCC_ClockConfig+0x1f0>)
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	492b      	ldr	r1, [pc, #172]	; (80046f0 <HAL_RCC_ClockConfig+0x1f0>)
 8004642:	4313      	orrs	r3, r2
 8004644:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004646:	4b29      	ldr	r3, [pc, #164]	; (80046ec <HAL_RCC_ClockConfig+0x1ec>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0307 	and.w	r3, r3, #7
 800464e:	683a      	ldr	r2, [r7, #0]
 8004650:	429a      	cmp	r2, r3
 8004652:	d210      	bcs.n	8004676 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004654:	4b25      	ldr	r3, [pc, #148]	; (80046ec <HAL_RCC_ClockConfig+0x1ec>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f023 0207 	bic.w	r2, r3, #7
 800465c:	4923      	ldr	r1, [pc, #140]	; (80046ec <HAL_RCC_ClockConfig+0x1ec>)
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	4313      	orrs	r3, r2
 8004662:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004664:	4b21      	ldr	r3, [pc, #132]	; (80046ec <HAL_RCC_ClockConfig+0x1ec>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0307 	and.w	r3, r3, #7
 800466c:	683a      	ldr	r2, [r7, #0]
 800466e:	429a      	cmp	r2, r3
 8004670:	d001      	beq.n	8004676 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e036      	b.n	80046e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0304 	and.w	r3, r3, #4
 800467e:	2b00      	cmp	r3, #0
 8004680:	d008      	beq.n	8004694 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004682:	4b1b      	ldr	r3, [pc, #108]	; (80046f0 <HAL_RCC_ClockConfig+0x1f0>)
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	4918      	ldr	r1, [pc, #96]	; (80046f0 <HAL_RCC_ClockConfig+0x1f0>)
 8004690:	4313      	orrs	r3, r2
 8004692:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0308 	and.w	r3, r3, #8
 800469c:	2b00      	cmp	r3, #0
 800469e:	d009      	beq.n	80046b4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046a0:	4b13      	ldr	r3, [pc, #76]	; (80046f0 <HAL_RCC_ClockConfig+0x1f0>)
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	00db      	lsls	r3, r3, #3
 80046ae:	4910      	ldr	r1, [pc, #64]	; (80046f0 <HAL_RCC_ClockConfig+0x1f0>)
 80046b0:	4313      	orrs	r3, r2
 80046b2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80046b4:	f000 f824 	bl	8004700 <HAL_RCC_GetSysClockFreq>
 80046b8:	4602      	mov	r2, r0
 80046ba:	4b0d      	ldr	r3, [pc, #52]	; (80046f0 <HAL_RCC_ClockConfig+0x1f0>)
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	091b      	lsrs	r3, r3, #4
 80046c0:	f003 030f 	and.w	r3, r3, #15
 80046c4:	490b      	ldr	r1, [pc, #44]	; (80046f4 <HAL_RCC_ClockConfig+0x1f4>)
 80046c6:	5ccb      	ldrb	r3, [r1, r3]
 80046c8:	f003 031f 	and.w	r3, r3, #31
 80046cc:	fa22 f303 	lsr.w	r3, r2, r3
 80046d0:	4a09      	ldr	r2, [pc, #36]	; (80046f8 <HAL_RCC_ClockConfig+0x1f8>)
 80046d2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80046d4:	4b09      	ldr	r3, [pc, #36]	; (80046fc <HAL_RCC_ClockConfig+0x1fc>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4618      	mov	r0, r3
 80046da:	f7fe fe1f 	bl	800331c <HAL_InitTick>
 80046de:	4603      	mov	r3, r0
 80046e0:	72fb      	strb	r3, [r7, #11]

  return status;
 80046e2:	7afb      	ldrb	r3, [r7, #11]
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3710      	adds	r7, #16
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	40022000 	.word	0x40022000
 80046f0:	40021000 	.word	0x40021000
 80046f4:	080070c8 	.word	0x080070c8
 80046f8:	2000000c 	.word	0x2000000c
 80046fc:	20000004 	.word	0x20000004

08004700 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004700:	b480      	push	{r7}
 8004702:	b089      	sub	sp, #36	; 0x24
 8004704:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004706:	2300      	movs	r3, #0
 8004708:	61fb      	str	r3, [r7, #28]
 800470a:	2300      	movs	r3, #0
 800470c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800470e:	4b3e      	ldr	r3, [pc, #248]	; (8004808 <HAL_RCC_GetSysClockFreq+0x108>)
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	f003 030c 	and.w	r3, r3, #12
 8004716:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004718:	4b3b      	ldr	r3, [pc, #236]	; (8004808 <HAL_RCC_GetSysClockFreq+0x108>)
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	f003 0303 	and.w	r3, r3, #3
 8004720:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d005      	beq.n	8004734 <HAL_RCC_GetSysClockFreq+0x34>
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	2b0c      	cmp	r3, #12
 800472c:	d121      	bne.n	8004772 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2b01      	cmp	r3, #1
 8004732:	d11e      	bne.n	8004772 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004734:	4b34      	ldr	r3, [pc, #208]	; (8004808 <HAL_RCC_GetSysClockFreq+0x108>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0308 	and.w	r3, r3, #8
 800473c:	2b00      	cmp	r3, #0
 800473e:	d107      	bne.n	8004750 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004740:	4b31      	ldr	r3, [pc, #196]	; (8004808 <HAL_RCC_GetSysClockFreq+0x108>)
 8004742:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004746:	0a1b      	lsrs	r3, r3, #8
 8004748:	f003 030f 	and.w	r3, r3, #15
 800474c:	61fb      	str	r3, [r7, #28]
 800474e:	e005      	b.n	800475c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004750:	4b2d      	ldr	r3, [pc, #180]	; (8004808 <HAL_RCC_GetSysClockFreq+0x108>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	091b      	lsrs	r3, r3, #4
 8004756:	f003 030f 	and.w	r3, r3, #15
 800475a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800475c:	4a2b      	ldr	r2, [pc, #172]	; (800480c <HAL_RCC_GetSysClockFreq+0x10c>)
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004764:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d10d      	bne.n	8004788 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004770:	e00a      	b.n	8004788 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	2b04      	cmp	r3, #4
 8004776:	d102      	bne.n	800477e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004778:	4b25      	ldr	r3, [pc, #148]	; (8004810 <HAL_RCC_GetSysClockFreq+0x110>)
 800477a:	61bb      	str	r3, [r7, #24]
 800477c:	e004      	b.n	8004788 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	2b08      	cmp	r3, #8
 8004782:	d101      	bne.n	8004788 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004784:	4b23      	ldr	r3, [pc, #140]	; (8004814 <HAL_RCC_GetSysClockFreq+0x114>)
 8004786:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	2b0c      	cmp	r3, #12
 800478c:	d134      	bne.n	80047f8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800478e:	4b1e      	ldr	r3, [pc, #120]	; (8004808 <HAL_RCC_GetSysClockFreq+0x108>)
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	f003 0303 	and.w	r3, r3, #3
 8004796:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	2b02      	cmp	r3, #2
 800479c:	d003      	beq.n	80047a6 <HAL_RCC_GetSysClockFreq+0xa6>
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	2b03      	cmp	r3, #3
 80047a2:	d003      	beq.n	80047ac <HAL_RCC_GetSysClockFreq+0xac>
 80047a4:	e005      	b.n	80047b2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80047a6:	4b1a      	ldr	r3, [pc, #104]	; (8004810 <HAL_RCC_GetSysClockFreq+0x110>)
 80047a8:	617b      	str	r3, [r7, #20]
      break;
 80047aa:	e005      	b.n	80047b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80047ac:	4b19      	ldr	r3, [pc, #100]	; (8004814 <HAL_RCC_GetSysClockFreq+0x114>)
 80047ae:	617b      	str	r3, [r7, #20]
      break;
 80047b0:	e002      	b.n	80047b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	617b      	str	r3, [r7, #20]
      break;
 80047b6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80047b8:	4b13      	ldr	r3, [pc, #76]	; (8004808 <HAL_RCC_GetSysClockFreq+0x108>)
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	091b      	lsrs	r3, r3, #4
 80047be:	f003 0307 	and.w	r3, r3, #7
 80047c2:	3301      	adds	r3, #1
 80047c4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80047c6:	4b10      	ldr	r3, [pc, #64]	; (8004808 <HAL_RCC_GetSysClockFreq+0x108>)
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	0a1b      	lsrs	r3, r3, #8
 80047cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047d0:	697a      	ldr	r2, [r7, #20]
 80047d2:	fb03 f202 	mul.w	r2, r3, r2
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047dc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80047de:	4b0a      	ldr	r3, [pc, #40]	; (8004808 <HAL_RCC_GetSysClockFreq+0x108>)
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	0e5b      	lsrs	r3, r3, #25
 80047e4:	f003 0303 	and.w	r3, r3, #3
 80047e8:	3301      	adds	r3, #1
 80047ea:	005b      	lsls	r3, r3, #1
 80047ec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80047ee:	697a      	ldr	r2, [r7, #20]
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80047f6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80047f8:	69bb      	ldr	r3, [r7, #24]
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3724      	adds	r7, #36	; 0x24
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop
 8004808:	40021000 	.word	0x40021000
 800480c:	080070d8 	.word	0x080070d8
 8004810:	00f42400 	.word	0x00f42400
 8004814:	02dc6c00 	.word	0x02dc6c00

08004818 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b086      	sub	sp, #24
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004820:	2300      	movs	r3, #0
 8004822:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004824:	4b2a      	ldr	r3, [pc, #168]	; (80048d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004828:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800482c:	2b00      	cmp	r3, #0
 800482e:	d003      	beq.n	8004838 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004830:	f7ff f9ee 	bl	8003c10 <HAL_PWREx_GetVoltageRange>
 8004834:	6178      	str	r0, [r7, #20]
 8004836:	e014      	b.n	8004862 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004838:	4b25      	ldr	r3, [pc, #148]	; (80048d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800483a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800483c:	4a24      	ldr	r2, [pc, #144]	; (80048d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800483e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004842:	6593      	str	r3, [r2, #88]	; 0x58
 8004844:	4b22      	ldr	r3, [pc, #136]	; (80048d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800484c:	60fb      	str	r3, [r7, #12]
 800484e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004850:	f7ff f9de 	bl	8003c10 <HAL_PWREx_GetVoltageRange>
 8004854:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004856:	4b1e      	ldr	r3, [pc, #120]	; (80048d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800485a:	4a1d      	ldr	r2, [pc, #116]	; (80048d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800485c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004860:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004868:	d10b      	bne.n	8004882 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2b80      	cmp	r3, #128	; 0x80
 800486e:	d919      	bls.n	80048a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2ba0      	cmp	r3, #160	; 0xa0
 8004874:	d902      	bls.n	800487c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004876:	2302      	movs	r3, #2
 8004878:	613b      	str	r3, [r7, #16]
 800487a:	e013      	b.n	80048a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800487c:	2301      	movs	r3, #1
 800487e:	613b      	str	r3, [r7, #16]
 8004880:	e010      	b.n	80048a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2b80      	cmp	r3, #128	; 0x80
 8004886:	d902      	bls.n	800488e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004888:	2303      	movs	r3, #3
 800488a:	613b      	str	r3, [r7, #16]
 800488c:	e00a      	b.n	80048a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2b80      	cmp	r3, #128	; 0x80
 8004892:	d102      	bne.n	800489a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004894:	2302      	movs	r3, #2
 8004896:	613b      	str	r3, [r7, #16]
 8004898:	e004      	b.n	80048a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2b70      	cmp	r3, #112	; 0x70
 800489e:	d101      	bne.n	80048a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80048a0:	2301      	movs	r3, #1
 80048a2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80048a4:	4b0b      	ldr	r3, [pc, #44]	; (80048d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f023 0207 	bic.w	r2, r3, #7
 80048ac:	4909      	ldr	r1, [pc, #36]	; (80048d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80048b4:	4b07      	ldr	r3, [pc, #28]	; (80048d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0307 	and.w	r3, r3, #7
 80048bc:	693a      	ldr	r2, [r7, #16]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d001      	beq.n	80048c6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e000      	b.n	80048c8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80048c6:	2300      	movs	r3, #0
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3718      	adds	r7, #24
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	40021000 	.word	0x40021000
 80048d4:	40022000 	.word	0x40022000

080048d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b086      	sub	sp, #24
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80048e0:	2300      	movs	r3, #0
 80048e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80048e4:	2300      	movs	r3, #0
 80048e6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d031      	beq.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048f8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80048fc:	d01a      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80048fe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004902:	d814      	bhi.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004904:	2b00      	cmp	r3, #0
 8004906:	d009      	beq.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004908:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800490c:	d10f      	bne.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800490e:	4b5d      	ldr	r3, [pc, #372]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	4a5c      	ldr	r2, [pc, #368]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004914:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004918:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800491a:	e00c      	b.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	3304      	adds	r3, #4
 8004920:	2100      	movs	r1, #0
 8004922:	4618      	mov	r0, r3
 8004924:	f000 f9f0 	bl	8004d08 <RCCEx_PLLSAI1_Config>
 8004928:	4603      	mov	r3, r0
 800492a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800492c:	e003      	b.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	74fb      	strb	r3, [r7, #19]
      break;
 8004932:	e000      	b.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004934:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004936:	7cfb      	ldrb	r3, [r7, #19]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d10b      	bne.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800493c:	4b51      	ldr	r3, [pc, #324]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800493e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004942:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800494a:	494e      	ldr	r1, [pc, #312]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800494c:	4313      	orrs	r3, r2
 800494e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004952:	e001      	b.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004954:	7cfb      	ldrb	r3, [r7, #19]
 8004956:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004960:	2b00      	cmp	r3, #0
 8004962:	f000 809e 	beq.w	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004966:	2300      	movs	r3, #0
 8004968:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800496a:	4b46      	ldr	r3, [pc, #280]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800496c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800496e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d101      	bne.n	800497a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004976:	2301      	movs	r3, #1
 8004978:	e000      	b.n	800497c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800497a:	2300      	movs	r3, #0
 800497c:	2b00      	cmp	r3, #0
 800497e:	d00d      	beq.n	800499c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004980:	4b40      	ldr	r3, [pc, #256]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004984:	4a3f      	ldr	r2, [pc, #252]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004986:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800498a:	6593      	str	r3, [r2, #88]	; 0x58
 800498c:	4b3d      	ldr	r3, [pc, #244]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800498e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004994:	60bb      	str	r3, [r7, #8]
 8004996:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004998:	2301      	movs	r3, #1
 800499a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800499c:	4b3a      	ldr	r3, [pc, #232]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a39      	ldr	r2, [pc, #228]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80049a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80049a8:	f7fe fcf4 	bl	8003394 <HAL_GetTick>
 80049ac:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80049ae:	e009      	b.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049b0:	f7fe fcf0 	bl	8003394 <HAL_GetTick>
 80049b4:	4602      	mov	r2, r0
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d902      	bls.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	74fb      	strb	r3, [r7, #19]
        break;
 80049c2:	e005      	b.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80049c4:	4b30      	ldr	r3, [pc, #192]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d0ef      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80049d0:	7cfb      	ldrb	r3, [r7, #19]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d15a      	bne.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80049d6:	4b2b      	ldr	r3, [pc, #172]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80049d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049e0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d01e      	beq.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ec:	697a      	ldr	r2, [r7, #20]
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d019      	beq.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80049f2:	4b24      	ldr	r3, [pc, #144]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80049f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049fc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80049fe:	4b21      	ldr	r3, [pc, #132]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a04:	4a1f      	ldr	r2, [pc, #124]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a0e:	4b1d      	ldr	r3, [pc, #116]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a14:	4a1b      	ldr	r2, [pc, #108]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004a1e:	4a19      	ldr	r2, [pc, #100]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	f003 0301 	and.w	r3, r3, #1
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d016      	beq.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a30:	f7fe fcb0 	bl	8003394 <HAL_GetTick>
 8004a34:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a36:	e00b      	b.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a38:	f7fe fcac 	bl	8003394 <HAL_GetTick>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d902      	bls.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	74fb      	strb	r3, [r7, #19]
            break;
 8004a4e:	e006      	b.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a50:	4b0c      	ldr	r3, [pc, #48]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a56:	f003 0302 	and.w	r3, r3, #2
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d0ec      	beq.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004a5e:	7cfb      	ldrb	r3, [r7, #19]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d10b      	bne.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a64:	4b07      	ldr	r3, [pc, #28]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a6a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a72:	4904      	ldr	r1, [pc, #16]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004a7a:	e009      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a7c:	7cfb      	ldrb	r3, [r7, #19]
 8004a7e:	74bb      	strb	r3, [r7, #18]
 8004a80:	e006      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004a82:	bf00      	nop
 8004a84:	40021000 	.word	0x40021000
 8004a88:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a8c:	7cfb      	ldrb	r3, [r7, #19]
 8004a8e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a90:	7c7b      	ldrb	r3, [r7, #17]
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d105      	bne.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a96:	4b9b      	ldr	r3, [pc, #620]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a9a:	4a9a      	ldr	r2, [pc, #616]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004a9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004aa0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 0301 	and.w	r3, r3, #1
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00a      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004aae:	4b95      	ldr	r3, [pc, #596]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ab4:	f023 0203 	bic.w	r2, r3, #3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a1b      	ldr	r3, [r3, #32]
 8004abc:	4991      	ldr	r1, [pc, #580]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0302 	and.w	r3, r3, #2
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d00a      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ad0:	4b8c      	ldr	r3, [pc, #560]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ad6:	f023 020c 	bic.w	r2, r3, #12
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ade:	4989      	ldr	r1, [pc, #548]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0304 	and.w	r3, r3, #4
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d00a      	beq.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004af2:	4b84      	ldr	r3, [pc, #528]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004af8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b00:	4980      	ldr	r1, [pc, #512]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004b02:	4313      	orrs	r3, r2
 8004b04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 0320 	and.w	r3, r3, #32
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d00a      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b14:	4b7b      	ldr	r3, [pc, #492]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b1a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b22:	4978      	ldr	r1, [pc, #480]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004b24:	4313      	orrs	r3, r2
 8004b26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00a      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b36:	4b73      	ldr	r3, [pc, #460]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b3c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b44:	496f      	ldr	r1, [pc, #444]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004b46:	4313      	orrs	r3, r2
 8004b48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d00a      	beq.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004b58:	4b6a      	ldr	r3, [pc, #424]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b5e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b66:	4967      	ldr	r1, [pc, #412]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d00a      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b7a:	4b62      	ldr	r3, [pc, #392]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b80:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b88:	495e      	ldr	r1, [pc, #376]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d00a      	beq.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b9c:	4b59      	ldr	r3, [pc, #356]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ba2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004baa:	4956      	ldr	r1, [pc, #344]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d00a      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004bbe:	4b51      	ldr	r3, [pc, #324]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bc4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bcc:	494d      	ldr	r1, [pc, #308]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d028      	beq.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004be0:	4b48      	ldr	r3, [pc, #288]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004be6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bee:	4945      	ldr	r1, [pc, #276]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bfa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bfe:	d106      	bne.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c00:	4b40      	ldr	r3, [pc, #256]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	4a3f      	ldr	r2, [pc, #252]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004c06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c0a:	60d3      	str	r3, [r2, #12]
 8004c0c:	e011      	b.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c12:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c16:	d10c      	bne.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	3304      	adds	r3, #4
 8004c1c:	2101      	movs	r1, #1
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f000 f872 	bl	8004d08 <RCCEx_PLLSAI1_Config>
 8004c24:	4603      	mov	r3, r0
 8004c26:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c28:	7cfb      	ldrb	r3, [r7, #19]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d001      	beq.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 8004c2e:	7cfb      	ldrb	r3, [r7, #19]
 8004c30:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d028      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c3e:	4b31      	ldr	r3, [pc, #196]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c44:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c4c:	492d      	ldr	r1, [pc, #180]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c5c:	d106      	bne.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c5e:	4b29      	ldr	r3, [pc, #164]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	4a28      	ldr	r2, [pc, #160]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004c64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c68:	60d3      	str	r3, [r2, #12]
 8004c6a:	e011      	b.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c74:	d10c      	bne.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	3304      	adds	r3, #4
 8004c7a:	2101      	movs	r1, #1
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f000 f843 	bl	8004d08 <RCCEx_PLLSAI1_Config>
 8004c82:	4603      	mov	r3, r0
 8004c84:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c86:	7cfb      	ldrb	r3, [r7, #19]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d001      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8004c8c:	7cfb      	ldrb	r3, [r7, #19]
 8004c8e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d01c      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c9c:	4b19      	ldr	r3, [pc, #100]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004caa:	4916      	ldr	r1, [pc, #88]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004cac:	4313      	orrs	r3, r2
 8004cae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004cba:	d10c      	bne.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	3304      	adds	r3, #4
 8004cc0:	2102      	movs	r1, #2
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f000 f820 	bl	8004d08 <RCCEx_PLLSAI1_Config>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ccc:	7cfb      	ldrb	r3, [r7, #19]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d001      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8004cd2:	7cfb      	ldrb	r3, [r7, #19]
 8004cd4:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d00a      	beq.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004ce2:	4b08      	ldr	r3, [pc, #32]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cf0:	4904      	ldr	r1, [pc, #16]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004cf8:	7cbb      	ldrb	r3, [r7, #18]
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3718      	adds	r7, #24
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	40021000 	.word	0x40021000

08004d08 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d12:	2300      	movs	r3, #0
 8004d14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004d16:	4b74      	ldr	r3, [pc, #464]	; (8004ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	f003 0303 	and.w	r3, r3, #3
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d018      	beq.n	8004d54 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004d22:	4b71      	ldr	r3, [pc, #452]	; (8004ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	f003 0203 	and.w	r2, r3, #3
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d10d      	bne.n	8004d4e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
       ||
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d009      	beq.n	8004d4e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004d3a:	4b6b      	ldr	r3, [pc, #428]	; (8004ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	091b      	lsrs	r3, r3, #4
 8004d40:	f003 0307 	and.w	r3, r3, #7
 8004d44:	1c5a      	adds	r2, r3, #1
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	685b      	ldr	r3, [r3, #4]
       ||
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d047      	beq.n	8004dde <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	73fb      	strb	r3, [r7, #15]
 8004d52:	e044      	b.n	8004dde <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	2b03      	cmp	r3, #3
 8004d5a:	d018      	beq.n	8004d8e <RCCEx_PLLSAI1_Config+0x86>
 8004d5c:	2b03      	cmp	r3, #3
 8004d5e:	d825      	bhi.n	8004dac <RCCEx_PLLSAI1_Config+0xa4>
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d002      	beq.n	8004d6a <RCCEx_PLLSAI1_Config+0x62>
 8004d64:	2b02      	cmp	r3, #2
 8004d66:	d009      	beq.n	8004d7c <RCCEx_PLLSAI1_Config+0x74>
 8004d68:	e020      	b.n	8004dac <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004d6a:	4b5f      	ldr	r3, [pc, #380]	; (8004ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 0302 	and.w	r3, r3, #2
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d11d      	bne.n	8004db2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d7a:	e01a      	b.n	8004db2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004d7c:	4b5a      	ldr	r3, [pc, #360]	; (8004ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d116      	bne.n	8004db6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d8c:	e013      	b.n	8004db6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004d8e:	4b56      	ldr	r3, [pc, #344]	; (8004ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d10f      	bne.n	8004dba <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004d9a:	4b53      	ldr	r3, [pc, #332]	; (8004ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d109      	bne.n	8004dba <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004daa:	e006      	b.n	8004dba <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	73fb      	strb	r3, [r7, #15]
      break;
 8004db0:	e004      	b.n	8004dbc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004db2:	bf00      	nop
 8004db4:	e002      	b.n	8004dbc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004db6:	bf00      	nop
 8004db8:	e000      	b.n	8004dbc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004dba:	bf00      	nop
    }

    if(status == HAL_OK)
 8004dbc:	7bfb      	ldrb	r3, [r7, #15]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d10d      	bne.n	8004dde <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004dc2:	4b49      	ldr	r3, [pc, #292]	; (8004ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6819      	ldr	r1, [r3, #0]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	011b      	lsls	r3, r3, #4
 8004dd6:	430b      	orrs	r3, r1
 8004dd8:	4943      	ldr	r1, [pc, #268]	; (8004ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004dde:	7bfb      	ldrb	r3, [r7, #15]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d17c      	bne.n	8004ede <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004de4:	4b40      	ldr	r3, [pc, #256]	; (8004ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a3f      	ldr	r2, [pc, #252]	; (8004ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004dea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004dee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004df0:	f7fe fad0 	bl	8003394 <HAL_GetTick>
 8004df4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004df6:	e009      	b.n	8004e0c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004df8:	f7fe facc 	bl	8003394 <HAL_GetTick>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	2b02      	cmp	r3, #2
 8004e04:	d902      	bls.n	8004e0c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	73fb      	strb	r3, [r7, #15]
        break;
 8004e0a:	e005      	b.n	8004e18 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004e0c:	4b36      	ldr	r3, [pc, #216]	; (8004ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d1ef      	bne.n	8004df8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004e18:	7bfb      	ldrb	r3, [r7, #15]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d15f      	bne.n	8004ede <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d110      	bne.n	8004e46 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e24:	4b30      	ldr	r3, [pc, #192]	; (8004ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e26:	691b      	ldr	r3, [r3, #16]
 8004e28:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004e2c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	6892      	ldr	r2, [r2, #8]
 8004e34:	0211      	lsls	r1, r2, #8
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	68d2      	ldr	r2, [r2, #12]
 8004e3a:	06d2      	lsls	r2, r2, #27
 8004e3c:	430a      	orrs	r2, r1
 8004e3e:	492a      	ldr	r1, [pc, #168]	; (8004ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e40:	4313      	orrs	r3, r2
 8004e42:	610b      	str	r3, [r1, #16]
 8004e44:	e027      	b.n	8004e96 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d112      	bne.n	8004e72 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e4c:	4b26      	ldr	r3, [pc, #152]	; (8004ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e4e:	691b      	ldr	r3, [r3, #16]
 8004e50:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004e54:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	6892      	ldr	r2, [r2, #8]
 8004e5c:	0211      	lsls	r1, r2, #8
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	6912      	ldr	r2, [r2, #16]
 8004e62:	0852      	lsrs	r2, r2, #1
 8004e64:	3a01      	subs	r2, #1
 8004e66:	0552      	lsls	r2, r2, #21
 8004e68:	430a      	orrs	r2, r1
 8004e6a:	491f      	ldr	r1, [pc, #124]	; (8004ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	610b      	str	r3, [r1, #16]
 8004e70:	e011      	b.n	8004e96 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e72:	4b1d      	ldr	r3, [pc, #116]	; (8004ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004e7a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	6892      	ldr	r2, [r2, #8]
 8004e82:	0211      	lsls	r1, r2, #8
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	6952      	ldr	r2, [r2, #20]
 8004e88:	0852      	lsrs	r2, r2, #1
 8004e8a:	3a01      	subs	r2, #1
 8004e8c:	0652      	lsls	r2, r2, #25
 8004e8e:	430a      	orrs	r2, r1
 8004e90:	4915      	ldr	r1, [pc, #84]	; (8004ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e92:	4313      	orrs	r3, r2
 8004e94:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004e96:	4b14      	ldr	r3, [pc, #80]	; (8004ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a13      	ldr	r2, [pc, #76]	; (8004ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e9c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ea0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ea2:	f7fe fa77 	bl	8003394 <HAL_GetTick>
 8004ea6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ea8:	e009      	b.n	8004ebe <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004eaa:	f7fe fa73 	bl	8003394 <HAL_GetTick>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	d902      	bls.n	8004ebe <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004eb8:	2303      	movs	r3, #3
 8004eba:	73fb      	strb	r3, [r7, #15]
          break;
 8004ebc:	e005      	b.n	8004eca <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ebe:	4b0a      	ldr	r3, [pc, #40]	; (8004ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d0ef      	beq.n	8004eaa <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004eca:	7bfb      	ldrb	r3, [r7, #15]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d106      	bne.n	8004ede <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004ed0:	4b05      	ldr	r3, [pc, #20]	; (8004ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ed2:	691a      	ldr	r2, [r3, #16]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	699b      	ldr	r3, [r3, #24]
 8004ed8:	4903      	ldr	r1, [pc, #12]	; (8004ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004eda:	4313      	orrs	r3, r2
 8004edc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3710      	adds	r7, #16
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	40021000 	.word	0x40021000

08004eec <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d06c      	beq.n	8004fd8 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d106      	bne.n	8004f18 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 fdee 	bl	8005af4 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2202      	movs	r2, #2
 8004f1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	22ca      	movs	r2, #202	; 0xca
 8004f26:	625a      	str	r2, [r3, #36]	; 0x24
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	2253      	movs	r2, #83	; 0x53
 8004f2e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f000 f87c 	bl	800502e <RTC_EnterInitMode>
 8004f36:	4603      	mov	r3, r0
 8004f38:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8004f3a:	7bfb      	ldrb	r3, [r7, #15]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d14b      	bne.n	8004fd8 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	6812      	ldr	r2, [r2, #0]
 8004f4a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004f4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f52:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	6899      	ldr	r1, [r3, #8]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	685a      	ldr	r2, [r3, #4]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	691b      	ldr	r3, [r3, #16]
 8004f62:	431a      	orrs	r2, r3
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	699b      	ldr	r3, [r3, #24]
 8004f68:	431a      	orrs	r2, r3
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	430a      	orrs	r2, r1
 8004f70:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	68d2      	ldr	r2, [r2, #12]
 8004f7a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	6919      	ldr	r1, [r3, #16]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	041a      	lsls	r2, r3, #16
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	430a      	orrs	r2, r1
 8004f8e:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f000 f87f 	bl	8005094 <RTC_ExitInitMode>
 8004f96:	4603      	mov	r3, r0
 8004f98:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004f9a:	7bfb      	ldrb	r3, [r7, #15]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d11b      	bne.n	8004fd8 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f022 0203 	bic.w	r2, r2, #3
 8004fae:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	69da      	ldr	r2, [r3, #28]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	695b      	ldr	r3, [r3, #20]
 8004fbe:	431a      	orrs	r2, r3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	430a      	orrs	r2, r1
 8004fc6:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	22ff      	movs	r2, #255	; 0xff
 8004fce:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8004fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3710      	adds	r7, #16
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}

08004fe2 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004fe2:	b580      	push	{r7, lr}
 8004fe4:	b084      	sub	sp, #16
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	68da      	ldr	r2, [r3, #12]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004ff8:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8004ffa:	f7fe f9cb 	bl	8003394 <HAL_GetTick>
 8004ffe:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005000:	e009      	b.n	8005016 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005002:	f7fe f9c7 	bl	8003394 <HAL_GetTick>
 8005006:	4602      	mov	r2, r0
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005010:	d901      	bls.n	8005016 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8005012:	2303      	movs	r3, #3
 8005014:	e007      	b.n	8005026 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	f003 0320 	and.w	r3, r3, #32
 8005020:	2b00      	cmp	r3, #0
 8005022:	d0ee      	beq.n	8005002 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8005024:	2300      	movs	r3, #0
}
 8005026:	4618      	mov	r0, r3
 8005028:	3710      	adds	r7, #16
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}

0800502e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800502e:	b580      	push	{r7, lr}
 8005030:	b084      	sub	sp, #16
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005036:	2300      	movs	r3, #0
 8005038:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005044:	2b00      	cmp	r3, #0
 8005046:	d120      	bne.n	800508a <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005050:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005052:	f7fe f99f 	bl	8003394 <HAL_GetTick>
 8005056:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005058:	e00d      	b.n	8005076 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800505a:	f7fe f99b 	bl	8003394 <HAL_GetTick>
 800505e:	4602      	mov	r2, r0
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005068:	d905      	bls.n	8005076 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800506a:	2303      	movs	r3, #3
 800506c:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2203      	movs	r2, #3
 8005072:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005080:	2b00      	cmp	r3, #0
 8005082:	d102      	bne.n	800508a <RTC_EnterInitMode+0x5c>
 8005084:	7bfb      	ldrb	r3, [r7, #15]
 8005086:	2b03      	cmp	r3, #3
 8005088:	d1e7      	bne.n	800505a <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800508a:	7bfb      	ldrb	r3, [r7, #15]
}
 800508c:	4618      	mov	r0, r3
 800508e:	3710      	adds	r7, #16
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}

08005094 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800509c:	2300      	movs	r3, #0
 800509e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80050a0:	4b1a      	ldr	r3, [pc, #104]	; (800510c <RTC_ExitInitMode+0x78>)
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	4a19      	ldr	r2, [pc, #100]	; (800510c <RTC_ExitInitMode+0x78>)
 80050a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050aa:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80050ac:	4b17      	ldr	r3, [pc, #92]	; (800510c <RTC_ExitInitMode+0x78>)
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	f003 0320 	and.w	r3, r3, #32
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d10c      	bne.n	80050d2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f7ff ff92 	bl	8004fe2 <HAL_RTC_WaitForSynchro>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d01e      	beq.n	8005102 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2203      	movs	r2, #3
 80050c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80050cc:	2303      	movs	r3, #3
 80050ce:	73fb      	strb	r3, [r7, #15]
 80050d0:	e017      	b.n	8005102 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80050d2:	4b0e      	ldr	r3, [pc, #56]	; (800510c <RTC_ExitInitMode+0x78>)
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	4a0d      	ldr	r2, [pc, #52]	; (800510c <RTC_ExitInitMode+0x78>)
 80050d8:	f023 0320 	bic.w	r3, r3, #32
 80050dc:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f7ff ff7f 	bl	8004fe2 <HAL_RTC_WaitForSynchro>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d005      	beq.n	80050f6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2203      	movs	r2, #3
 80050ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80050f2:	2303      	movs	r3, #3
 80050f4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80050f6:	4b05      	ldr	r3, [pc, #20]	; (800510c <RTC_ExitInitMode+0x78>)
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	4a04      	ldr	r2, [pc, #16]	; (800510c <RTC_ExitInitMode+0x78>)
 80050fc:	f043 0320 	orr.w	r3, r3, #32
 8005100:	6093      	str	r3, [r2, #8]
  }

  return status;
 8005102:	7bfb      	ldrb	r3, [r7, #15]
}
 8005104:	4618      	mov	r0, r3
 8005106:	3710      	adds	r7, #16
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}
 800510c:	40002800 	.word	0x40002800

08005110 <board_init_common_rtc_init>:
volatile int datasentflag = 0;
uint32_t g_button_on_count[NUM_PUSH_BUTTONS] = {0};
bool button_press_state[NUM_PUSH_BUTTONS] = {false};

static void board_init_common_rtc_init(void)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	af00      	add	r7, sp, #0
    g_rtc_handle.Instance = RTC;
 8005114:	4b10      	ldr	r3, [pc, #64]	; (8005158 <board_init_common_rtc_init+0x48>)
 8005116:	4a11      	ldr	r2, [pc, #68]	; (800515c <board_init_common_rtc_init+0x4c>)
 8005118:	601a      	str	r2, [r3, #0]
    g_rtc_handle.Init.HourFormat = RTC_HOURFORMAT_24;
 800511a:	4b0f      	ldr	r3, [pc, #60]	; (8005158 <board_init_common_rtc_init+0x48>)
 800511c:	2200      	movs	r2, #0
 800511e:	605a      	str	r2, [r3, #4]
    g_rtc_handle.Init.AsynchPrediv = 127;
 8005120:	4b0d      	ldr	r3, [pc, #52]	; (8005158 <board_init_common_rtc_init+0x48>)
 8005122:	227f      	movs	r2, #127	; 0x7f
 8005124:	609a      	str	r2, [r3, #8]
    g_rtc_handle.Init.SynchPrediv = 255;
 8005126:	4b0c      	ldr	r3, [pc, #48]	; (8005158 <board_init_common_rtc_init+0x48>)
 8005128:	22ff      	movs	r2, #255	; 0xff
 800512a:	60da      	str	r2, [r3, #12]
    g_rtc_handle.Init.OutPut = RTC_OUTPUT_DISABLE;
 800512c:	4b0a      	ldr	r3, [pc, #40]	; (8005158 <board_init_common_rtc_init+0x48>)
 800512e:	2200      	movs	r2, #0
 8005130:	611a      	str	r2, [r3, #16]
    g_rtc_handle.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8005132:	4b09      	ldr	r3, [pc, #36]	; (8005158 <board_init_common_rtc_init+0x48>)
 8005134:	2200      	movs	r2, #0
 8005136:	615a      	str	r2, [r3, #20]
    g_rtc_handle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8005138:	4b07      	ldr	r3, [pc, #28]	; (8005158 <board_init_common_rtc_init+0x48>)
 800513a:	2200      	movs	r2, #0
 800513c:	619a      	str	r2, [r3, #24]
    g_rtc_handle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800513e:	4b06      	ldr	r3, [pc, #24]	; (8005158 <board_init_common_rtc_init+0x48>)
 8005140:	2200      	movs	r2, #0
 8005142:	61da      	str	r2, [r3, #28]
    if (HAL_RTC_Init(&g_rtc_handle) != HAL_OK) Error_Handler();
 8005144:	4804      	ldr	r0, [pc, #16]	; (8005158 <board_init_common_rtc_init+0x48>)
 8005146:	f7ff fed1 	bl	8004eec <HAL_RTC_Init>
 800514a:	4603      	mov	r3, r0
 800514c:	2b00      	cmp	r3, #0
 800514e:	d001      	beq.n	8005154 <board_init_common_rtc_init+0x44>
 8005150:	f000 fc7a 	bl	8005a48 <Error_Handler>
}
 8005154:	bf00      	nop
 8005156:	bd80      	pop	{r7, pc}
 8005158:	20001b08 	.word	0x20001b08
 800515c:	40002800 	.word	0x40002800

08005160 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
static void SystemClock_Config(void)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b0ae      	sub	sp, #184	; 0xb8
 8005164:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005166:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800516a:	2244      	movs	r2, #68	; 0x44
 800516c:	2100      	movs	r1, #0
 800516e:	4618      	mov	r0, r3
 8005170:	f000 ff1c 	bl	8005fac <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005174:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8005178:	2200      	movs	r2, #0
 800517a:	601a      	str	r2, [r3, #0]
 800517c:	605a      	str	r2, [r3, #4]
 800517e:	609a      	str	r2, [r3, #8]
 8005180:	60da      	str	r2, [r3, #12]
 8005182:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005184:	1d3b      	adds	r3, r7, #4
 8005186:	225c      	movs	r2, #92	; 0x5c
 8005188:	2100      	movs	r1, #0
 800518a:	4618      	mov	r0, r3
 800518c:	f000 ff0e 	bl	8005fac <memset>

    /** Configure LSE Drive Capability
    */
    HAL_PWR_EnableBkUpAccess();
 8005190:	f7fe fcbe 	bl	8003b10 <HAL_PWR_EnableBkUpAccess>
    __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8005194:	4b26      	ldr	r3, [pc, #152]	; (8005230 <SystemClock_Config+0xd0>)
 8005196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800519a:	4a25      	ldr	r2, [pc, #148]	; (8005230 <SystemClock_Config+0xd0>)
 800519c:	f023 0318 	bic.w	r3, r3, #24
 80051a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /** Initializes the RCC Oscillators according to the specified parameters
    * in the RCC_OscInitTypeDef structure.
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80051a4:	2305      	movs	r3, #5
 80051a6:	677b      	str	r3, [r7, #116]	; 0x74
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80051a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80051ac:	67bb      	str	r3, [r7, #120]	; 0x78
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80051ae:	2301      	movs	r3, #1
 80051b0:	67fb      	str	r3, [r7, #124]	; 0x7c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80051b2:	2300      	movs	r3, #0
 80051b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) Error_Handler();
 80051b8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80051bc:	4618      	mov	r0, r3
 80051be:	f7fe fd8b 	bl	8003cd8 <HAL_RCC_OscConfig>
 80051c2:	4603      	mov	r3, r0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d001      	beq.n	80051cc <SystemClock_Config+0x6c>
 80051c8:	f000 fc3e 	bl	8005a48 <Error_Handler>
    /** Initializes the CPU, AHB and APB buses clocks
    */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80051cc:	230f      	movs	r3, #15
 80051ce:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80051d0:	2302      	movs	r3, #2
 80051d2:	667b      	str	r3, [r7, #100]	; 0x64
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80051d4:	2300      	movs	r3, #0
 80051d6:	66bb      	str	r3, [r7, #104]	; 0x68
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80051d8:	2300      	movs	r3, #0
 80051da:	66fb      	str	r3, [r7, #108]	; 0x6c
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80051dc:	2300      	movs	r3, #0
 80051de:	673b      	str	r3, [r7, #112]	; 0x70

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) Error_Handler();
 80051e0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80051e4:	2102      	movs	r1, #2
 80051e6:	4618      	mov	r0, r3
 80051e8:	f7ff f98a 	bl	8004500 <HAL_RCC_ClockConfig>
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d001      	beq.n	80051f6 <SystemClock_Config+0x96>
 80051f2:	f000 fc29 	bl	8005a48 <Error_Handler>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80051f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80051fa:	607b      	str	r3, [r7, #4]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80051fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005200:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) Error_Handler();
 8005202:	1d3b      	adds	r3, r7, #4
 8005204:	4618      	mov	r0, r3
 8005206:	f7ff fb67 	bl	80048d8 <HAL_RCCEx_PeriphCLKConfig>
 800520a:	4603      	mov	r3, r0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d001      	beq.n	8005214 <SystemClock_Config+0xb4>
 8005210:	f000 fc1a 	bl	8005a48 <Error_Handler>
    /** Configure the main internal regulator output voltage
    */
    if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK) Error_Handler();
 8005214:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005218:	f7fe fd08 	bl	8003c2c <HAL_PWREx_ControlVoltageScaling>
 800521c:	4603      	mov	r3, r0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d001      	beq.n	8005226 <SystemClock_Config+0xc6>
 8005222:	f000 fc11 	bl	8005a48 <Error_Handler>
}
 8005226:	bf00      	nop
 8005228:	37b8      	adds	r7, #184	; 0xb8
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	40021000 	.word	0x40021000

08005234 <board_init_common_nvic_setup_interrupts>:
    }
}


static void board_init_common_nvic_setup_interrupts(void)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	af00      	add	r7, sp, #0
    HAL_NVIC_SetPriority(EXTI0_IRQn, 24, 0);
 8005238:	2200      	movs	r2, #0
 800523a:	2118      	movs	r1, #24
 800523c:	2006      	movs	r0, #6
 800523e:	f7fe f9b4 	bl	80035aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8005242:	2006      	movs	r0, #6
 8005244:	f7fe f9cd 	bl	80035e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI2_IRQn, 24, 0);
 8005248:	2200      	movs	r2, #0
 800524a:	2118      	movs	r1, #24
 800524c:	2008      	movs	r0, #8
 800524e:	f7fe f9ac 	bl	80035aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8005252:	2008      	movs	r0, #8
 8005254:	f7fe f9c5 	bl	80035e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI9_5_IRQn , 24, 0);
 8005258:	2200      	movs	r2, #0
 800525a:	2118      	movs	r1, #24
 800525c:	2017      	movs	r0, #23
 800525e:	f7fe f9a4 	bl	80035aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8005262:	2017      	movs	r0, #23
 8005264:	f7fe f9bd 	bl	80035e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 24, 0);
 8005268:	2200      	movs	r2, #0
 800526a:	2118      	movs	r1, #24
 800526c:	2028      	movs	r0, #40	; 0x28
 800526e:	f7fe f99c 	bl	80035aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005272:	2028      	movs	r0, #40	; 0x28
 8005274:	f7fe f9b5 	bl	80035e2 <HAL_NVIC_EnableIRQ>

    __HAL_GPIO_EXTI_CLEAR_IT(EXTI0_IRQn);
 8005278:	4b06      	ldr	r3, [pc, #24]	; (8005294 <board_init_common_nvic_setup_interrupts+0x60>)
 800527a:	2206      	movs	r2, #6
 800527c:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI9_5_IRQn);
 800527e:	4b05      	ldr	r3, [pc, #20]	; (8005294 <board_init_common_nvic_setup_interrupts+0x60>)
 8005280:	2217      	movs	r2, #23
 8005282:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI15_10_IRQn);
 8005284:	4b03      	ldr	r3, [pc, #12]	; (8005294 <board_init_common_nvic_setup_interrupts+0x60>)
 8005286:	2228      	movs	r2, #40	; 0x28
 8005288:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI2_IRQn);
 800528a:	4b02      	ldr	r3, [pc, #8]	; (8005294 <board_init_common_nvic_setup_interrupts+0x60>)
 800528c:	2208      	movs	r2, #8
 800528e:	615a      	str	r2, [r3, #20]
//    HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
//    HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
//    HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
//    HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
//    HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
}
 8005290:	bf00      	nop
 8005292:	bd80      	pop	{r7, pc}
 8005294:	40010400 	.word	0x40010400

08005298 <board_init_setup_gpio_input_no_pull>:


void board_init_setup_gpio_input_no_pull(GPIO_TypeDef* port, uint16_t pin)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b088      	sub	sp, #32
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	460b      	mov	r3, r1
 80052a2:	807b      	strh	r3, [r7, #2]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052a4:	f107 030c 	add.w	r3, r7, #12
 80052a8:	2200      	movs	r2, #0
 80052aa:	601a      	str	r2, [r3, #0]
 80052ac:	605a      	str	r2, [r3, #4]
 80052ae:	609a      	str	r2, [r3, #8]
 80052b0:	60da      	str	r2, [r3, #12]
 80052b2:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = pin;
 80052b4:	887b      	ldrh	r3, [r7, #2]
 80052b6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80052b8:	2300      	movs	r3, #0
 80052ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052bc:	2300      	movs	r3, #0
 80052be:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(port, &GPIO_InitStruct);
 80052c0:	f107 030c 	add.w	r3, r7, #12
 80052c4:	4619      	mov	r1, r3
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f7fe fa54 	bl	8003774 <HAL_GPIO_Init>
}
 80052cc:	bf00      	nop
 80052ce:	3720      	adds	r7, #32
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}

080052d4 <board_init_setup_gpio_input_pulldown>:
    HAL_GPIO_Init(port, &GPIO_InitStruct);
}


static void board_init_setup_gpio_input_pulldown(GPIO_TypeDef* port, uint16_t pin)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b088      	sub	sp, #32
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	460b      	mov	r3, r1
 80052de:	807b      	strh	r3, [r7, #2]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052e0:	f107 030c 	add.w	r3, r7, #12
 80052e4:	2200      	movs	r2, #0
 80052e6:	601a      	str	r2, [r3, #0]
 80052e8:	605a      	str	r2, [r3, #4]
 80052ea:	609a      	str	r2, [r3, #8]
 80052ec:	60da      	str	r2, [r3, #12]
 80052ee:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = pin;
 80052f0:	887b      	ldrh	r3, [r7, #2]
 80052f2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80052f4:	2300      	movs	r3, #0
 80052f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80052f8:	2302      	movs	r3, #2
 80052fa:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(port, &GPIO_InitStruct);
 80052fc:	f107 030c 	add.w	r3, r7, #12
 8005300:	4619      	mov	r1, r3
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f7fe fa36 	bl	8003774 <HAL_GPIO_Init>
}
 8005308:	bf00      	nop
 800530a:	3720      	adds	r7, #32
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}

08005310 <board_init_setup_gpio_output_no_pull>:


static void board_init_setup_gpio_output_no_pull(GPIO_TypeDef* port, uint16_t pin)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b088      	sub	sp, #32
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	460b      	mov	r3, r1
 800531a:	807b      	strh	r3, [r7, #2]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800531c:	f107 030c 	add.w	r3, r7, #12
 8005320:	2200      	movs	r2, #0
 8005322:	601a      	str	r2, [r3, #0]
 8005324:	605a      	str	r2, [r3, #4]
 8005326:	609a      	str	r2, [r3, #8]
 8005328:	60da      	str	r2, [r3, #12]
 800532a:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = pin;
 800532c:	887b      	ldrh	r3, [r7, #2]
 800532e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005330:	2301      	movs	r3, #1
 8005332:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005334:	2300      	movs	r3, #0
 8005336:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(port, &GPIO_InitStruct);
 8005338:	f107 030c 	add.w	r3, r7, #12
 800533c:	4619      	mov	r1, r3
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f7fe fa18 	bl	8003774 <HAL_GPIO_Init>
}
 8005344:	bf00      	nop
 8005346:	3720      	adds	r7, #32
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}

0800534c <board_init_setup_gpio_output_low>:
    HAL_GPIO_WritePin(port, pin, GPIO_PIN_SET);
}


static void board_init_setup_gpio_output_low(GPIO_TypeDef* port, uint16_t pin)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b088      	sub	sp, #32
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	460b      	mov	r3, r1
 8005356:	807b      	strh	r3, [r7, #2]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005358:	f107 030c 	add.w	r3, r7, #12
 800535c:	2200      	movs	r2, #0
 800535e:	601a      	str	r2, [r3, #0]
 8005360:	605a      	str	r2, [r3, #4]
 8005362:	609a      	str	r2, [r3, #8]
 8005364:	60da      	str	r2, [r3, #12]
 8005366:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = pin;
 8005368:	887b      	ldrh	r3, [r7, #2]
 800536a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800536c:	2301      	movs	r3, #1
 800536e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005370:	2300      	movs	r3, #0
 8005372:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(port, &GPIO_InitStruct);
 8005374:	f107 030c 	add.w	r3, r7, #12
 8005378:	4619      	mov	r1, r3
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f7fe f9fa 	bl	8003774 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET);
 8005380:	887b      	ldrh	r3, [r7, #2]
 8005382:	2200      	movs	r2, #0
 8005384:	4619      	mov	r1, r3
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f7fe fb86 	bl	8003a98 <HAL_GPIO_WritePin>
}
 800538c:	bf00      	nop
 800538e:	3720      	adds	r7, #32
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <board_init_adafruit_reset>:


void board_init_adafruit_reset(adafruit_soundboard_reset_e reset)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b088      	sub	sp, #32
 8005398:	af00      	add	r7, sp, #0
 800539a:	4603      	mov	r3, r0
 800539c:	71fb      	strb	r3, [r7, #7]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800539e:	f107 030c 	add.w	r3, r7, #12
 80053a2:	2200      	movs	r2, #0
 80053a4:	601a      	str	r2, [r3, #0]
 80053a6:	605a      	str	r2, [r3, #4]
 80053a8:	609a      	str	r2, [r3, #8]
 80053aa:	60da      	str	r2, [r3, #12]
 80053ac:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = PIN_ADAFRUIT_RESET_N;
 80053ae:	2302      	movs	r3, #2
 80053b0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80053b2:	2301      	movs	r3, #1
 80053b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053b6:	2300      	movs	r3, #0
 80053b8:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(PIN_PORT_A, &GPIO_InitStruct);
 80053ba:	f107 030c 	add.w	r3, r7, #12
 80053be:	4619      	mov	r1, r3
 80053c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80053c4:	f7fe f9d6 	bl	8003774 <HAL_GPIO_Init>
    if (ADAFRUIT_SOUNDBOARD_RESET_ENABLE == reset)
 80053c8:	79fb      	ldrb	r3, [r7, #7]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d106      	bne.n	80053dc <board_init_adafruit_reset+0x48>
    {
        HAL_GPIO_WritePin(PIN_PORT_A, PIN_ADAFRUIT_RESET_N, GPIO_PIN_RESET);
 80053ce:	2200      	movs	r2, #0
 80053d0:	2102      	movs	r1, #2
 80053d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80053d6:	f7fe fb5f 	bl	8003a98 <HAL_GPIO_WritePin>
    }
    else
    {
        HAL_GPIO_WritePin(PIN_PORT_A, PIN_ADAFRUIT_RESET_N, GPIO_PIN_SET);
    }
}
 80053da:	e005      	b.n	80053e8 <board_init_adafruit_reset+0x54>
        HAL_GPIO_WritePin(PIN_PORT_A, PIN_ADAFRUIT_RESET_N, GPIO_PIN_SET);
 80053dc:	2201      	movs	r2, #1
 80053de:	2102      	movs	r1, #2
 80053e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80053e4:	f7fe fb58 	bl	8003a98 <HAL_GPIO_WritePin>
}
 80053e8:	bf00      	nop
 80053ea:	3720      	adds	r7, #32
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <board_init_adafruit_soundboard_is_playing_audio>:


bool board_init_adafruit_soundboard_is_playing_audio(void)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b086      	sub	sp, #24
 80053f4:	af00      	add	r7, sp, #0
    bool return_val = false;
 80053f6:	2300      	movs	r3, #0
 80053f8:	75fb      	strb	r3, [r7, #23]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053fa:	463b      	mov	r3, r7
 80053fc:	2200      	movs	r2, #0
 80053fe:	601a      	str	r2, [r3, #0]
 8005400:	605a      	str	r2, [r3, #4]
 8005402:	609a      	str	r2, [r3, #8]
 8005404:	60da      	str	r2, [r3, #12]
 8005406:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = PIN_ADAFRUIT_ACT;
 8005408:	2380      	movs	r3, #128	; 0x80
 800540a:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800540c:	2300      	movs	r3, #0
 800540e:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005410:	2300      	movs	r3, #0
 8005412:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 8005414:	463b      	mov	r3, r7
 8005416:	4619      	mov	r1, r3
 8005418:	4808      	ldr	r0, [pc, #32]	; (800543c <board_init_adafruit_soundboard_is_playing_audio+0x4c>)
 800541a:	f7fe f9ab 	bl	8003774 <HAL_GPIO_Init>
    if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(PIN_PORT_C, PIN_ADAFRUIT_ACT))
 800541e:	2180      	movs	r1, #128	; 0x80
 8005420:	4806      	ldr	r0, [pc, #24]	; (800543c <board_init_adafruit_soundboard_is_playing_audio+0x4c>)
 8005422:	f7fe fb21 	bl	8003a68 <HAL_GPIO_ReadPin>
 8005426:	4603      	mov	r3, r0
 8005428:	2b00      	cmp	r3, #0
 800542a:	d101      	bne.n	8005430 <board_init_adafruit_soundboard_is_playing_audio+0x40>
    {
        return_val = true;
 800542c:	2301      	movs	r3, #1
 800542e:	75fb      	strb	r3, [r7, #23]
    }
    return return_val;
 8005430:	7dfb      	ldrb	r3, [r7, #23]
}
 8005432:	4618      	mov	r0, r3
 8005434:	3718      	adds	r7, #24
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop
 800543c:	48000800 	.word	0x48000800

08005440 <board_init_adafruit_soundboard_adjust_volume>:


void board_init_adafruit_soundboard_adjust_volume(adafruit_soundboard_volume_e volume)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b088      	sub	sp, #32
 8005444:	af00      	add	r7, sp, #0
 8005446:	4603      	mov	r3, r0
 8005448:	71fb      	strb	r3, [r7, #7]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800544a:	f107 030c 	add.w	r3, r7, #12
 800544e:	2200      	movs	r2, #0
 8005450:	601a      	str	r2, [r3, #0]
 8005452:	605a      	str	r2, [r3, #4]
 8005454:	609a      	str	r2, [r3, #8]
 8005456:	60da      	str	r2, [r3, #12]
 8005458:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800545a:	2301      	movs	r3, #1
 800545c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800545e:	2300      	movs	r3, #0
 8005460:	617b      	str	r3, [r7, #20]
    switch (volume)
 8005462:	79fb      	ldrb	r3, [r7, #7]
 8005464:	2b02      	cmp	r3, #2
 8005466:	d028      	beq.n	80054ba <board_init_adafruit_soundboard_adjust_volume+0x7a>
 8005468:	2b02      	cmp	r3, #2
 800546a:	dc37      	bgt.n	80054dc <board_init_adafruit_soundboard_adjust_volume+0x9c>
 800546c:	2b00      	cmp	r3, #0
 800546e:	d002      	beq.n	8005476 <board_init_adafruit_soundboard_adjust_volume+0x36>
 8005470:	2b01      	cmp	r3, #1
 8005472:	d011      	beq.n	8005498 <board_init_adafruit_soundboard_adjust_volume+0x58>
            GPIO_InitStruct.Pin = PIN_ADAFRUIT_VOL_UP | PIN_ADAFRUIT_VOL_DOWN;
            HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
            HAL_GPIO_WritePin(PIN_PORT_C, GPIO_InitStruct.Pin, GPIO_PIN_SET);
        break;
        default:
        break;
 8005474:	e032      	b.n	80054dc <board_init_adafruit_soundboard_adjust_volume+0x9c>
            GPIO_InitStruct.Pin = PIN_ADAFRUIT_VOL_UP;
 8005476:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800547a:	60fb      	str	r3, [r7, #12]
            HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 800547c:	f107 030c 	add.w	r3, r7, #12
 8005480:	4619      	mov	r1, r3
 8005482:	4819      	ldr	r0, [pc, #100]	; (80054e8 <board_init_adafruit_soundboard_adjust_volume+0xa8>)
 8005484:	f7fe f976 	bl	8003774 <HAL_GPIO_Init>
            HAL_GPIO_WritePin(PIN_PORT_C, GPIO_InitStruct.Pin, GPIO_PIN_RESET);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	b29b      	uxth	r3, r3
 800548c:	2200      	movs	r2, #0
 800548e:	4619      	mov	r1, r3
 8005490:	4815      	ldr	r0, [pc, #84]	; (80054e8 <board_init_adafruit_soundboard_adjust_volume+0xa8>)
 8005492:	f7fe fb01 	bl	8003a98 <HAL_GPIO_WritePin>
        break;
 8005496:	e022      	b.n	80054de <board_init_adafruit_soundboard_adjust_volume+0x9e>
            GPIO_InitStruct.Pin = PIN_ADAFRUIT_VOL_DOWN;
 8005498:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800549c:	60fb      	str	r3, [r7, #12]
            HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 800549e:	f107 030c 	add.w	r3, r7, #12
 80054a2:	4619      	mov	r1, r3
 80054a4:	4810      	ldr	r0, [pc, #64]	; (80054e8 <board_init_adafruit_soundboard_adjust_volume+0xa8>)
 80054a6:	f7fe f965 	bl	8003774 <HAL_GPIO_Init>
            HAL_GPIO_WritePin(PIN_PORT_C, GPIO_InitStruct.Pin, GPIO_PIN_RESET);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	2200      	movs	r2, #0
 80054b0:	4619      	mov	r1, r3
 80054b2:	480d      	ldr	r0, [pc, #52]	; (80054e8 <board_init_adafruit_soundboard_adjust_volume+0xa8>)
 80054b4:	f7fe faf0 	bl	8003a98 <HAL_GPIO_WritePin>
        break;
 80054b8:	e011      	b.n	80054de <board_init_adafruit_soundboard_adjust_volume+0x9e>
            GPIO_InitStruct.Pin = PIN_ADAFRUIT_VOL_UP | PIN_ADAFRUIT_VOL_DOWN;
 80054ba:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80054be:	60fb      	str	r3, [r7, #12]
            HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 80054c0:	f107 030c 	add.w	r3, r7, #12
 80054c4:	4619      	mov	r1, r3
 80054c6:	4808      	ldr	r0, [pc, #32]	; (80054e8 <board_init_adafruit_soundboard_adjust_volume+0xa8>)
 80054c8:	f7fe f954 	bl	8003774 <HAL_GPIO_Init>
            HAL_GPIO_WritePin(PIN_PORT_C, GPIO_InitStruct.Pin, GPIO_PIN_SET);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	2201      	movs	r2, #1
 80054d2:	4619      	mov	r1, r3
 80054d4:	4804      	ldr	r0, [pc, #16]	; (80054e8 <board_init_adafruit_soundboard_adjust_volume+0xa8>)
 80054d6:	f7fe fadf 	bl	8003a98 <HAL_GPIO_WritePin>
        break;
 80054da:	e000      	b.n	80054de <board_init_adafruit_soundboard_adjust_volume+0x9e>
        break;
 80054dc:	bf00      	nop
    }
}
 80054de:	bf00      	nop
 80054e0:	3720      	adds	r7, #32
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop
 80054e8:	48000800 	.word	0x48000800

080054ec <board_init_adafruit_soundboard_power_enable_disable>:


void board_init_adafruit_soundboard_power_enable_disable(adafruit_soundboard_power_enable_disable_e enable_disable)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b088      	sub	sp, #32
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	4603      	mov	r3, r0
 80054f4:	71fb      	strb	r3, [r7, #7]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054f6:	f107 030c 	add.w	r3, r7, #12
 80054fa:	2200      	movs	r2, #0
 80054fc:	601a      	str	r2, [r3, #0]
 80054fe:	605a      	str	r2, [r3, #4]
 8005500:	609a      	str	r2, [r3, #8]
 8005502:	60da      	str	r2, [r3, #12]
 8005504:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = PIN_ADAFRUIT_PWR_EN;
 8005506:	f44f 7380 	mov.w	r3, #256	; 0x100
 800550a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800550c:	2301      	movs	r3, #1
 800550e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005510:	2300      	movs	r3, #0
 8005512:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 8005514:	f107 030c 	add.w	r3, r7, #12
 8005518:	4619      	mov	r1, r3
 800551a:	480b      	ldr	r0, [pc, #44]	; (8005548 <board_init_adafruit_soundboard_power_enable_disable+0x5c>)
 800551c:	f7fe f92a 	bl	8003774 <HAL_GPIO_Init>
    if (ADAFRUIT_SOUNDBOARD_POWER_ENABLE == enable_disable)
 8005520:	79fb      	ldrb	r3, [r7, #7]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d106      	bne.n	8005534 <board_init_adafruit_soundboard_power_enable_disable+0x48>
    {
        HAL_GPIO_WritePin(PIN_PORT_C, PIN_ADAFRUIT_PWR_EN, GPIO_PIN_SET);
 8005526:	2201      	movs	r2, #1
 8005528:	f44f 7180 	mov.w	r1, #256	; 0x100
 800552c:	4806      	ldr	r0, [pc, #24]	; (8005548 <board_init_adafruit_soundboard_power_enable_disable+0x5c>)
 800552e:	f7fe fab3 	bl	8003a98 <HAL_GPIO_WritePin>
    }
    else
    {
        HAL_GPIO_WritePin(PIN_PORT_C, PIN_ADAFRUIT_PWR_EN, GPIO_PIN_RESET);
    }
}
 8005532:	e005      	b.n	8005540 <board_init_adafruit_soundboard_power_enable_disable+0x54>
        HAL_GPIO_WritePin(PIN_PORT_C, PIN_ADAFRUIT_PWR_EN, GPIO_PIN_RESET);
 8005534:	2200      	movs	r2, #0
 8005536:	f44f 7180 	mov.w	r1, #256	; 0x100
 800553a:	4803      	ldr	r0, [pc, #12]	; (8005548 <board_init_adafruit_soundboard_power_enable_disable+0x5c>)
 800553c:	f7fe faac 	bl	8003a98 <HAL_GPIO_WritePin>
}
 8005540:	bf00      	nop
 8005542:	3720      	adds	r7, #32
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}
 8005548:	48000800 	.word	0x48000800

0800554c <board_init_adafruit_soundboard_enable_mode>:


void board_init_adafruit_soundboard_enable_mode(adafruit_soundboard_mode_e mode)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b088      	sub	sp, #32
 8005550:	af00      	add	r7, sp, #0
 8005552:	4603      	mov	r3, r0
 8005554:	71fb      	strb	r3, [r7, #7]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005556:	f107 030c 	add.w	r3, r7, #12
 800555a:	2200      	movs	r2, #0
 800555c:	601a      	str	r2, [r3, #0]
 800555e:	605a      	str	r2, [r3, #4]
 8005560:	609a      	str	r2, [r3, #8]
 8005562:	60da      	str	r2, [r3, #12]
 8005564:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = PIN_ADAFRUIT_UART_ENABLE_N;
 8005566:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800556a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800556c:	2301      	movs	r3, #1
 800556e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005570:	2300      	movs	r3, #0
 8005572:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 8005574:	f107 030c 	add.w	r3, r7, #12
 8005578:	4619      	mov	r1, r3
 800557a:	480b      	ldr	r0, [pc, #44]	; (80055a8 <board_init_adafruit_soundboard_enable_mode+0x5c>)
 800557c:	f7fe f8fa 	bl	8003774 <HAL_GPIO_Init>
    if (ADAFRUIT_SOUNDBOARD_UART_MODE == mode)
 8005580:	79fb      	ldrb	r3, [r7, #7]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d106      	bne.n	8005594 <board_init_adafruit_soundboard_enable_mode+0x48>
    {
        HAL_GPIO_WritePin(PIN_PORT_C, PIN_ADAFRUIT_UART_ENABLE_N, GPIO_PIN_RESET);
 8005586:	2200      	movs	r2, #0
 8005588:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800558c:	4806      	ldr	r0, [pc, #24]	; (80055a8 <board_init_adafruit_soundboard_enable_mode+0x5c>)
 800558e:	f7fe fa83 	bl	8003a98 <HAL_GPIO_WritePin>
    }
    else
    {
        HAL_GPIO_WritePin(PIN_PORT_C, PIN_ADAFRUIT_UART_ENABLE_N, GPIO_PIN_SET);
    }
}
 8005592:	e005      	b.n	80055a0 <board_init_adafruit_soundboard_enable_mode+0x54>
        HAL_GPIO_WritePin(PIN_PORT_C, PIN_ADAFRUIT_UART_ENABLE_N, GPIO_PIN_SET);
 8005594:	2201      	movs	r2, #1
 8005596:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800559a:	4803      	ldr	r0, [pc, #12]	; (80055a8 <board_init_adafruit_soundboard_enable_mode+0x5c>)
 800559c:	f7fe fa7c 	bl	8003a98 <HAL_GPIO_WritePin>
}
 80055a0:	bf00      	nop
 80055a2:	3720      	adds	r7, #32
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	48000800 	.word	0x48000800

080055ac <board_init_adafruit_soundboard_trigger>:


void board_init_adafruit_soundboard_trigger(adafruit_soundboard_trig_e trigger,
                                            adafruit_soundboard_trig_enable_disable_e enable_disable)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b088      	sub	sp, #32
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	4603      	mov	r3, r0
 80055b4:	460a      	mov	r2, r1
 80055b6:	71fb      	strb	r3, [r7, #7]
 80055b8:	4613      	mov	r3, r2
 80055ba:	71bb      	strb	r3, [r7, #6]
    GPIO_TypeDef* port;
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055bc:	f107 0308 	add.w	r3, r7, #8
 80055c0:	2200      	movs	r2, #0
 80055c2:	601a      	str	r2, [r3, #0]
 80055c4:	605a      	str	r2, [r3, #4]
 80055c6:	609a      	str	r2, [r3, #8]
 80055c8:	60da      	str	r2, [r3, #12]
 80055ca:	611a      	str	r2, [r3, #16]
    switch (trigger)
 80055cc:	79fb      	ldrb	r3, [r7, #7]
 80055ce:	2b0a      	cmp	r3, #10
 80055d0:	d858      	bhi.n	8005684 <board_init_adafruit_soundboard_trigger+0xd8>
 80055d2:	a201      	add	r2, pc, #4	; (adr r2, 80055d8 <board_init_adafruit_soundboard_trigger+0x2c>)
 80055d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d8:	08005605 	.word	0x08005605
 80055dc:	08005611 	.word	0x08005611
 80055e0:	0800561d 	.word	0x0800561d
 80055e4:	08005629 	.word	0x08005629
 80055e8:	08005635 	.word	0x08005635
 80055ec:	08005641 	.word	0x08005641
 80055f0:	0800564b 	.word	0x0800564b
 80055f4:	08005657 	.word	0x08005657
 80055f8:	08005663 	.word	0x08005663
 80055fc:	0800566f 	.word	0x0800566f
 8005600:	0800567b 	.word	0x0800567b
    {
        case ADAFRUIT_SOUNDBOARD_TRIG_0:
            port = PIN_PORT_A;
 8005604:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005608:	61fb      	str	r3, [r7, #28]
            GPIO_InitStruct.Pin = PIN_ADAFRUIT_TRIG_0;
 800560a:	2308      	movs	r3, #8
 800560c:	60bb      	str	r3, [r7, #8]
        break;
 800560e:	e03a      	b.n	8005686 <board_init_adafruit_soundboard_trigger+0xda>
        case ADAFRUIT_SOUNDBOARD_TRIG_1:
            port = PIN_PORT_A;
 8005610:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005614:	61fb      	str	r3, [r7, #28]
            GPIO_InitStruct.Pin = PIN_ADAFRUIT_TRIG_1;
 8005616:	2310      	movs	r3, #16
 8005618:	60bb      	str	r3, [r7, #8]
        break;
 800561a:	e034      	b.n	8005686 <board_init_adafruit_soundboard_trigger+0xda>
        case ADAFRUIT_SOUNDBOARD_TRIG_2:
            port = PIN_PORT_A;
 800561c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005620:	61fb      	str	r3, [r7, #28]
            GPIO_InitStruct.Pin = PIN_ADAFRUIT_TRIG_2;
 8005622:	2320      	movs	r3, #32
 8005624:	60bb      	str	r3, [r7, #8]
        break;
 8005626:	e02e      	b.n	8005686 <board_init_adafruit_soundboard_trigger+0xda>
        case ADAFRUIT_SOUNDBOARD_TRIG_3:
            port = PIN_PORT_A;
 8005628:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800562c:	61fb      	str	r3, [r7, #28]
            GPIO_InitStruct.Pin = PIN_ADAFRUIT_TRIG_3;
 800562e:	2340      	movs	r3, #64	; 0x40
 8005630:	60bb      	str	r3, [r7, #8]
        break;
 8005632:	e028      	b.n	8005686 <board_init_adafruit_soundboard_trigger+0xda>
        case ADAFRUIT_SOUNDBOARD_TRIG_4:
            port = PIN_PORT_A;
 8005634:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005638:	61fb      	str	r3, [r7, #28]
            GPIO_InitStruct.Pin = PIN_ADAFRUIT_TRIG_4;
 800563a:	2380      	movs	r3, #128	; 0x80
 800563c:	60bb      	str	r3, [r7, #8]
        break;
 800563e:	e022      	b.n	8005686 <board_init_adafruit_soundboard_trigger+0xda>
        case ADAFRUIT_SOUNDBOARD_TRIG_5:
            port = PIN_PORT_C;
 8005640:	4b21      	ldr	r3, [pc, #132]	; (80056c8 <board_init_adafruit_soundboard_trigger+0x11c>)
 8005642:	61fb      	str	r3, [r7, #28]
            GPIO_InitStruct.Pin = PIN_ADAFRUIT_TRIG_5;
 8005644:	2310      	movs	r3, #16
 8005646:	60bb      	str	r3, [r7, #8]
        break;
 8005648:	e01d      	b.n	8005686 <board_init_adafruit_soundboard_trigger+0xda>
        case ADAFRUIT_SOUNDBOARD_TRIG_6:
            port = PIN_PORT_B;
 800564a:	4b20      	ldr	r3, [pc, #128]	; (80056cc <board_init_adafruit_soundboard_trigger+0x120>)
 800564c:	61fb      	str	r3, [r7, #28]
            GPIO_InitStruct.Pin = PIN_ADAFRUIT_TRIG_6;
 800564e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005652:	60bb      	str	r3, [r7, #8]
        break;
 8005654:	e017      	b.n	8005686 <board_init_adafruit_soundboard_trigger+0xda>
        case ADAFRUIT_SOUNDBOARD_TRIG_7:
            port = PIN_PORT_B;
 8005656:	4b1d      	ldr	r3, [pc, #116]	; (80056cc <board_init_adafruit_soundboard_trigger+0x120>)
 8005658:	61fb      	str	r3, [r7, #28]
            GPIO_InitStruct.Pin = PIN_ADAFRUIT_TRIG_7;
 800565a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800565e:	60bb      	str	r3, [r7, #8]
        break;
 8005660:	e011      	b.n	8005686 <board_init_adafruit_soundboard_trigger+0xda>
        case ADAFRUIT_SOUNDBOARD_TRIG_8:
            port = PIN_PORT_B;
 8005662:	4b1a      	ldr	r3, [pc, #104]	; (80056cc <board_init_adafruit_soundboard_trigger+0x120>)
 8005664:	61fb      	str	r3, [r7, #28]
            GPIO_InitStruct.Pin = PIN_ADAFRUIT_TRIG_8;
 8005666:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800566a:	60bb      	str	r3, [r7, #8]
        break;
 800566c:	e00b      	b.n	8005686 <board_init_adafruit_soundboard_trigger+0xda>
        case ADAFRUIT_SOUNDBOARD_TRIG_9:
            port = PIN_PORT_B;
 800566e:	4b17      	ldr	r3, [pc, #92]	; (80056cc <board_init_adafruit_soundboard_trigger+0x120>)
 8005670:	61fb      	str	r3, [r7, #28]
            GPIO_InitStruct.Pin = PIN_ADAFRUIT_TRIG_9;
 8005672:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005676:	60bb      	str	r3, [r7, #8]
        break;
 8005678:	e005      	b.n	8005686 <board_init_adafruit_soundboard_trigger+0xda>
        case ADAFRUIT_SOUNDBOARD_TRIG_10:
            port = PIN_PORT_C;
 800567a:	4b13      	ldr	r3, [pc, #76]	; (80056c8 <board_init_adafruit_soundboard_trigger+0x11c>)
 800567c:	61fb      	str	r3, [r7, #28]
            GPIO_InitStruct.Pin = PIN_ADAFRUIT_TRIG_10;
 800567e:	2340      	movs	r3, #64	; 0x40
 8005680:	60bb      	str	r3, [r7, #8]
        break;
 8005682:	e000      	b.n	8005686 <board_init_adafruit_soundboard_trigger+0xda>
        default:
        break;
 8005684:	bf00      	nop
    }
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005686:	2301      	movs	r3, #1
 8005688:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800568a:	2300      	movs	r3, #0
 800568c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(port, &GPIO_InitStruct);
 800568e:	f107 0308 	add.w	r3, r7, #8
 8005692:	4619      	mov	r1, r3
 8005694:	69f8      	ldr	r0, [r7, #28]
 8005696:	f7fe f86d 	bl	8003774 <HAL_GPIO_Init>
    if (ADAFRUIT_SOUNDBOARD_TRIG_ENABLE == enable_disable)
 800569a:	79bb      	ldrb	r3, [r7, #6]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d107      	bne.n	80056b0 <board_init_adafruit_soundboard_trigger+0x104>
    {
        HAL_GPIO_WritePin(port, GPIO_InitStruct.Pin, GPIO_PIN_RESET); // LOW for enable
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	2200      	movs	r2, #0
 80056a6:	4619      	mov	r1, r3
 80056a8:	69f8      	ldr	r0, [r7, #28]
 80056aa:	f7fe f9f5 	bl	8003a98 <HAL_GPIO_WritePin>
    }
    else
    {
        HAL_GPIO_WritePin(port, GPIO_InitStruct.Pin, GPIO_PIN_SET); // HIGH for disable
    }
}
 80056ae:	e006      	b.n	80056be <board_init_adafruit_soundboard_trigger+0x112>
        HAL_GPIO_WritePin(port, GPIO_InitStruct.Pin, GPIO_PIN_SET); // HIGH for disable
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	2201      	movs	r2, #1
 80056b6:	4619      	mov	r1, r3
 80056b8:	69f8      	ldr	r0, [r7, #28]
 80056ba:	f7fe f9ed 	bl	8003a98 <HAL_GPIO_WritePin>
}
 80056be:	bf00      	nop
 80056c0:	3720      	adds	r7, #32
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	bf00      	nop
 80056c8:	48000800 	.word	0x48000800
 80056cc:	48000400 	.word	0x48000400

080056d0 <board_init_adafruit_soundboard_enable_relay>:


void board_init_adafruit_soundboard_enable_relay(adafruit_soundboard_relay_e relay)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b088      	sub	sp, #32
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	4603      	mov	r3, r0
 80056d8:	71fb      	strb	r3, [r7, #7]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056da:	f107 030c 	add.w	r3, r7, #12
 80056de:	2200      	movs	r2, #0
 80056e0:	601a      	str	r2, [r3, #0]
 80056e2:	605a      	str	r2, [r3, #4]
 80056e4:	609a      	str	r2, [r3, #8]
 80056e6:	60da      	str	r2, [r3, #12]
 80056e8:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80056ea:	2301      	movs	r3, #1
 80056ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056ee:	2300      	movs	r3, #0
 80056f0:	617b      	str	r3, [r7, #20]
    if (ADAFRUIT_SOUNDBOARD_RELAY_LIGHT_CTRL == relay)
 80056f2:	79fb      	ldrb	r3, [r7, #7]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d103      	bne.n	8005700 <board_init_adafruit_soundboard_enable_relay+0x30>
    {
        GPIO_InitStruct.Pin = PIN_LIGHT_CTRL;
 80056f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80056fc:	60fb      	str	r3, [r7, #12]
 80056fe:	e002      	b.n	8005706 <board_init_adafruit_soundboard_enable_relay+0x36>
    }
    else
    {
        GPIO_InitStruct.Pin = PIN_SPEAKER_CTRL;
 8005700:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005704:	60fb      	str	r3, [r7, #12]
    }
    HAL_GPIO_Init(PIN_PORT_A, &GPIO_InitStruct);
 8005706:	f107 030c 	add.w	r3, r7, #12
 800570a:	4619      	mov	r1, r3
 800570c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005710:	f7fe f830 	bl	8003774 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PIN_PORT_A, GPIO_InitStruct.Pin, GPIO_PIN_SET);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	b29b      	uxth	r3, r3
 8005718:	2201      	movs	r2, #1
 800571a:	4619      	mov	r1, r3
 800571c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005720:	f7fe f9ba 	bl	8003a98 <HAL_GPIO_WritePin>
}
 8005724:	bf00      	nop
 8005726:	3720      	adds	r7, #32
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}

0800572c <board_init_adafruit_soundboard_disable_relay>:


void board_init_adafruit_soundboard_disable_relay(adafruit_soundboard_relay_e relay)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b088      	sub	sp, #32
 8005730:	af00      	add	r7, sp, #0
 8005732:	4603      	mov	r3, r0
 8005734:	71fb      	strb	r3, [r7, #7]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005736:	f107 030c 	add.w	r3, r7, #12
 800573a:	2200      	movs	r2, #0
 800573c:	601a      	str	r2, [r3, #0]
 800573e:	605a      	str	r2, [r3, #4]
 8005740:	609a      	str	r2, [r3, #8]
 8005742:	60da      	str	r2, [r3, #12]
 8005744:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005746:	2301      	movs	r3, #1
 8005748:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800574a:	2300      	movs	r3, #0
 800574c:	617b      	str	r3, [r7, #20]
    if (ADAFRUIT_SOUNDBOARD_RELAY_LIGHT_CTRL == relay)
 800574e:	79fb      	ldrb	r3, [r7, #7]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d103      	bne.n	800575c <board_init_adafruit_soundboard_disable_relay+0x30>
    {
        GPIO_InitStruct.Pin = PIN_LIGHT_CTRL;
 8005754:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005758:	60fb      	str	r3, [r7, #12]
 800575a:	e002      	b.n	8005762 <board_init_adafruit_soundboard_disable_relay+0x36>
    }
    else
    {
        GPIO_InitStruct.Pin = PIN_SPEAKER_CTRL;
 800575c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005760:	60fb      	str	r3, [r7, #12]
    }
    HAL_GPIO_Init(PIN_PORT_A, &GPIO_InitStruct);
 8005762:	f107 030c 	add.w	r3, r7, #12
 8005766:	4619      	mov	r1, r3
 8005768:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800576c:	f7fe f802 	bl	8003774 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PIN_PORT_A, GPIO_InitStruct.Pin, GPIO_PIN_RESET);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	b29b      	uxth	r3, r3
 8005774:	2200      	movs	r2, #0
 8005776:	4619      	mov	r1, r3
 8005778:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800577c:	f7fe f98c 	bl	8003a98 <HAL_GPIO_WritePin>
}
 8005780:	bf00      	nop
 8005782:	3720      	adds	r7, #32
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}

08005788 <board_init_common_board_init>:


void board_init_common_board_init(void)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b08a      	sub	sp, #40	; 0x28
 800578c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800578e:	f107 0314 	add.w	r3, r7, #20
 8005792:	2200      	movs	r2, #0
 8005794:	601a      	str	r2, [r3, #0]
 8005796:	605a      	str	r2, [r3, #4]
 8005798:	609a      	str	r2, [r3, #8]
 800579a:	60da      	str	r2, [r3, #12]
 800579c:	611a      	str	r2, [r3, #16]

    srand(time(0));
 800579e:	2000      	movs	r0, #0
 80057a0:	f000 fd2a 	bl	80061f8 <time>
 80057a4:	4602      	mov	r2, r0
 80057a6:	460b      	mov	r3, r1
 80057a8:	4613      	mov	r3, r2
 80057aa:	4618      	mov	r0, r3
 80057ac:	f000 fce6 	bl	800617c <srand>
    HAL_Init();
 80057b0:	f7fd fd9c 	bl	80032ec <HAL_Init>
    SystemClock_Config();
 80057b4:	f7ff fcd4 	bl	8005160 <SystemClock_Config>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80057b8:	4b60      	ldr	r3, [pc, #384]	; (800593c <board_init_common_board_init+0x1b4>)
 80057ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057bc:	4a5f      	ldr	r2, [pc, #380]	; (800593c <board_init_common_board_init+0x1b4>)
 80057be:	f043 0301 	orr.w	r3, r3, #1
 80057c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80057c4:	4b5d      	ldr	r3, [pc, #372]	; (800593c <board_init_common_board_init+0x1b4>)
 80057c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057c8:	f003 0301 	and.w	r3, r3, #1
 80057cc:	613b      	str	r3, [r7, #16]
 80057ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80057d0:	4b5a      	ldr	r3, [pc, #360]	; (800593c <board_init_common_board_init+0x1b4>)
 80057d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057d4:	4a59      	ldr	r2, [pc, #356]	; (800593c <board_init_common_board_init+0x1b4>)
 80057d6:	f043 0302 	orr.w	r3, r3, #2
 80057da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80057dc:	4b57      	ldr	r3, [pc, #348]	; (800593c <board_init_common_board_init+0x1b4>)
 80057de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057e0:	f003 0302 	and.w	r3, r3, #2
 80057e4:	60fb      	str	r3, [r7, #12]
 80057e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80057e8:	4b54      	ldr	r3, [pc, #336]	; (800593c <board_init_common_board_init+0x1b4>)
 80057ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057ec:	4a53      	ldr	r2, [pc, #332]	; (800593c <board_init_common_board_init+0x1b4>)
 80057ee:	f043 0304 	orr.w	r3, r3, #4
 80057f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80057f4:	4b51      	ldr	r3, [pc, #324]	; (800593c <board_init_common_board_init+0x1b4>)
 80057f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057f8:	f003 0304 	and.w	r3, r3, #4
 80057fc:	60bb      	str	r3, [r7, #8]
 80057fe:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8005800:	4b4e      	ldr	r3, [pc, #312]	; (800593c <board_init_common_board_init+0x1b4>)
 8005802:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005804:	4a4d      	ldr	r2, [pc, #308]	; (800593c <board_init_common_board_init+0x1b4>)
 8005806:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800580a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800580c:	4b4b      	ldr	r3, [pc, #300]	; (800593c <board_init_common_board_init+0x1b4>)
 800580e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005814:	607b      	str	r3, [r7, #4]
 8005816:	687b      	ldr	r3, [r7, #4]

    board_init_setup_gpio_output_no_pull(PIN_PORT_C, PIN_LED_OUT_1);
 8005818:	2104      	movs	r1, #4
 800581a:	4849      	ldr	r0, [pc, #292]	; (8005940 <board_init_common_board_init+0x1b8>)
 800581c:	f7ff fd78 	bl	8005310 <board_init_setup_gpio_output_no_pull>
    board_init_setup_gpio_output_no_pull(PIN_PORT_C, PIN_LED_OUT_2);
 8005820:	2108      	movs	r1, #8
 8005822:	4847      	ldr	r0, [pc, #284]	; (8005940 <board_init_common_board_init+0x1b8>)
 8005824:	f7ff fd74 	bl	8005310 <board_init_setup_gpio_output_no_pull>
    HAL_GPIO_WritePin(PIN_PORT_C, PIN_LED_OUT_1|PIN_LED_OUT_2, GPIO_PIN_RESET);
 8005828:	2200      	movs	r2, #0
 800582a:	210c      	movs	r1, #12
 800582c:	4844      	ldr	r0, [pc, #272]	; (8005940 <board_init_common_board_init+0x1b8>)
 800582e:	f7fe f933 	bl	8003a98 <HAL_GPIO_WritePin>

    board_init_setup_gpio_input_pulldown(PIN_PORT_B, PIN_GPIO_0);
 8005832:	2101      	movs	r1, #1
 8005834:	4843      	ldr	r0, [pc, #268]	; (8005944 <board_init_common_board_init+0x1bc>)
 8005836:	f7ff fd4d 	bl	80052d4 <board_init_setup_gpio_input_pulldown>
    board_init_setup_gpio_input_pulldown(PIN_PORT_B, PIN_GPIO_1);
 800583a:	2102      	movs	r1, #2
 800583c:	4841      	ldr	r0, [pc, #260]	; (8005944 <board_init_common_board_init+0x1bc>)
 800583e:	f7ff fd49 	bl	80052d4 <board_init_setup_gpio_input_pulldown>
    board_init_setup_gpio_input_pulldown(PIN_PORT_B, PIN_GPIO_2);
 8005842:	2104      	movs	r1, #4
 8005844:	483f      	ldr	r0, [pc, #252]	; (8005944 <board_init_common_board_init+0x1bc>)
 8005846:	f7ff fd45 	bl	80052d4 <board_init_setup_gpio_input_pulldown>
    board_init_setup_gpio_input_pulldown(PIN_PORT_C, PIN_GPIO_3);
 800584a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800584e:	483c      	ldr	r0, [pc, #240]	; (8005940 <board_init_common_board_init+0x1b8>)
 8005850:	f7ff fd40 	bl	80052d4 <board_init_setup_gpio_input_pulldown>
    board_init_setup_gpio_input_pulldown(PIN_PORT_B, PIN_GPIO_4);
 8005854:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005858:	483a      	ldr	r0, [pc, #232]	; (8005944 <board_init_common_board_init+0x1bc>)
 800585a:	f7ff fd3b 	bl	80052d4 <board_init_setup_gpio_input_pulldown>
    board_init_setup_gpio_input_pulldown(PIN_PORT_B, PIN_GPIO_5);
 800585e:	2180      	movs	r1, #128	; 0x80
 8005860:	4838      	ldr	r0, [pc, #224]	; (8005944 <board_init_common_board_init+0x1bc>)
 8005862:	f7ff fd37 	bl	80052d4 <board_init_setup_gpio_input_pulldown>
    board_init_setup_gpio_input_pulldown(PIN_PORT_B, PIN_GPIO_6);
 8005866:	2140      	movs	r1, #64	; 0x40
 8005868:	4836      	ldr	r0, [pc, #216]	; (8005944 <board_init_common_board_init+0x1bc>)
 800586a:	f7ff fd33 	bl	80052d4 <board_init_setup_gpio_input_pulldown>
    board_init_setup_gpio_input_pulldown(PIN_PORT_B, PIN_GPIO_7);
 800586e:	2120      	movs	r1, #32
 8005870:	4834      	ldr	r0, [pc, #208]	; (8005944 <board_init_common_board_init+0x1bc>)
 8005872:	f7ff fd2f 	bl	80052d4 <board_init_setup_gpio_input_pulldown>

    board_init_adafruit_reset(ADAFRUIT_SOUNDBOARD_RESET_ENABLE);
 8005876:	2000      	movs	r0, #0
 8005878:	f7ff fd8c 	bl	8005394 <board_init_adafruit_reset>
    board_init_adafruit_soundboard_power_enable_disable(ADAFRUIT_SOUNDBOARD_POWER_DISABLE);
 800587c:	2001      	movs	r0, #1
 800587e:	f7ff fe35 	bl	80054ec <board_init_adafruit_soundboard_power_enable_disable>

    board_init_setup_gpio_output_no_pull(PIN_PORT_A, PIN_LVL_DIR); // A -> B enable via pullup on board
 8005882:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005886:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800588a:	f7ff fd41 	bl	8005310 <board_init_setup_gpio_output_no_pull>
    board_init_setup_gpio_output_no_pull(PIN_PORT_A, PIN_LVL_EN); // active low enabled by pulldown on board
 800588e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005892:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005896:	f7ff fd3b 	bl	8005310 <board_init_setup_gpio_output_no_pull>

    board_init_setup_gpio_output_low(PIN_PORT_A, PIN_LIGHT_CTRL);
 800589a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800589e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80058a2:	f7ff fd53 	bl	800534c <board_init_setup_gpio_output_low>
    board_init_setup_gpio_output_low(PIN_PORT_A, PIN_SPEAKER_CTRL);
 80058a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80058aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80058ae:	f7ff fd4d 	bl	800534c <board_init_setup_gpio_output_low>

    board_init_setup_gpio_input_no_pull(PIN_PORT_A, PIN_WKUP_1);
 80058b2:	2101      	movs	r1, #1
 80058b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80058b8:	f7ff fcee 	bl	8005298 <board_init_setup_gpio_input_no_pull>
    board_init_setup_gpio_input_no_pull(PIN_PORT_A, PIN_WKUP_4);
 80058bc:	2104      	movs	r1, #4
 80058be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80058c2:	f7ff fce9 	bl	8005298 <board_init_setup_gpio_input_no_pull>
    board_init_setup_gpio_input_no_pull(PIN_PORT_C, PIN_WKUP_2);
 80058c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80058ca:	481d      	ldr	r0, [pc, #116]	; (8005940 <board_init_common_board_init+0x1b8>)
 80058cc:	f7ff fce4 	bl	8005298 <board_init_setup_gpio_input_no_pull>
    board_init_setup_gpio_input_no_pull(PIN_PORT_C, PIN_WKUP_3);
 80058d0:	2120      	movs	r1, #32
 80058d2:	481b      	ldr	r0, [pc, #108]	; (8005940 <board_init_common_board_init+0x1b8>)
 80058d4:	f7ff fce0 	bl	8005298 <board_init_setup_gpio_input_no_pull>

    HAL_GPIO_WritePin(PIN_PORT_A, PIN_LVL_DIR, GPIO_PIN_SET);
 80058d8:	2201      	movs	r2, #1
 80058da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80058de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80058e2:	f7fe f8d9 	bl	8003a98 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PIN_PORT_A, PIN_LVL_EN, GPIO_PIN_RESET);
 80058e6:	2200      	movs	r2, #0
 80058e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80058ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80058f0:	f7fe f8d2 	bl	8003a98 <HAL_GPIO_WritePin>
    //while (GPIO_PIN_SET == HAL_GPIO_ReadPin(PIN_PORT_A, PIN_WKUP_1));
    // setup the wakeups as only interrupts without the WKUP enabled yet... TODO
    GPIO_InitStruct.Pin = PIN_WKUP_1|PIN_WKUP_4;
 80058f4:	2305      	movs	r3, #5
 80058f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80058f8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80058fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058fe:	2300      	movs	r3, #0
 8005900:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PIN_PORT_A, &GPIO_InitStruct);
 8005902:	f107 0314 	add.w	r3, r7, #20
 8005906:	4619      	mov	r1, r3
 8005908:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800590c:	f7fd ff32 	bl	8003774 <HAL_GPIO_Init>


    GPIO_InitStruct.Pin = PIN_WKUP_2|PIN_WKUP_3;
 8005910:	f242 0320 	movw	r3, #8224	; 0x2020
 8005914:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005916:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800591a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800591c:	2300      	movs	r3, #0
 800591e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 8005920:	f107 0314 	add.w	r3, r7, #20
 8005924:	4619      	mov	r1, r3
 8005926:	4806      	ldr	r0, [pc, #24]	; (8005940 <board_init_common_board_init+0x1b8>)
 8005928:	f7fd ff24 	bl	8003774 <HAL_GPIO_Init>

    board_init_common_nvic_setup_interrupts();
 800592c:	f7ff fc82 	bl	8005234 <board_init_common_nvic_setup_interrupts>
    board_init_common_rtc_init();
 8005930:	f7ff fbee 	bl	8005110 <board_init_common_rtc_init>
}
 8005934:	bf00      	nop
 8005936:	3728      	adds	r7, #40	; 0x28
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}
 800593c:	40021000 	.word	0x40021000
 8005940:	48000800 	.word	0x48000800
 8005944:	48000400 	.word	0x48000400

08005948 <board_init_red_led_on>:
    HAL_TIM_PWM_Stop_DMA(&g_tim15_handle, TIM_CHANNEL_1);
}


void board_init_red_led_on(void)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b086      	sub	sp, #24
 800594c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800594e:	1d3b      	adds	r3, r7, #4
 8005950:	2200      	movs	r2, #0
 8005952:	601a      	str	r2, [r3, #0]
 8005954:	605a      	str	r2, [r3, #4]
 8005956:	609a      	str	r2, [r3, #8]
 8005958:	60da      	str	r2, [r3, #12]
 800595a:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = RED_LED;
 800595c:	2304      	movs	r3, #4
 800595e:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005960:	2301      	movs	r3, #1
 8005962:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005964:	2300      	movs	r3, #0
 8005966:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 8005968:	1d3b      	adds	r3, r7, #4
 800596a:	4619      	mov	r1, r3
 800596c:	4805      	ldr	r0, [pc, #20]	; (8005984 <board_init_red_led_on+0x3c>)
 800596e:	f7fd ff01 	bl	8003774 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PIN_PORT_C, RED_LED, GPIO_PIN_SET);
 8005972:	2201      	movs	r2, #1
 8005974:	2104      	movs	r1, #4
 8005976:	4803      	ldr	r0, [pc, #12]	; (8005984 <board_init_red_led_on+0x3c>)
 8005978:	f7fe f88e 	bl	8003a98 <HAL_GPIO_WritePin>
}
 800597c:	bf00      	nop
 800597e:	3718      	adds	r7, #24
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}
 8005984:	48000800 	.word	0x48000800

08005988 <board_init_red_led_off>:


void board_init_red_led_off(void)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b086      	sub	sp, #24
 800598c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800598e:	1d3b      	adds	r3, r7, #4
 8005990:	2200      	movs	r2, #0
 8005992:	601a      	str	r2, [r3, #0]
 8005994:	605a      	str	r2, [r3, #4]
 8005996:	609a      	str	r2, [r3, #8]
 8005998:	60da      	str	r2, [r3, #12]
 800599a:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = RED_LED;
 800599c:	2304      	movs	r3, #4
 800599e:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80059a0:	2301      	movs	r3, #1
 80059a2:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059a4:	2300      	movs	r3, #0
 80059a6:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 80059a8:	1d3b      	adds	r3, r7, #4
 80059aa:	4619      	mov	r1, r3
 80059ac:	4805      	ldr	r0, [pc, #20]	; (80059c4 <board_init_red_led_off+0x3c>)
 80059ae:	f7fd fee1 	bl	8003774 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PIN_PORT_C, RED_LED, GPIO_PIN_RESET);
 80059b2:	2200      	movs	r2, #0
 80059b4:	2104      	movs	r1, #4
 80059b6:	4803      	ldr	r0, [pc, #12]	; (80059c4 <board_init_red_led_off+0x3c>)
 80059b8:	f7fe f86e 	bl	8003a98 <HAL_GPIO_WritePin>
}
 80059bc:	bf00      	nop
 80059be:	3718      	adds	r7, #24
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}
 80059c4:	48000800 	.word	0x48000800

080059c8 <board_init_green_led_on>:


void board_init_green_led_on(void)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b086      	sub	sp, #24
 80059cc:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059ce:	1d3b      	adds	r3, r7, #4
 80059d0:	2200      	movs	r2, #0
 80059d2:	601a      	str	r2, [r3, #0]
 80059d4:	605a      	str	r2, [r3, #4]
 80059d6:	609a      	str	r2, [r3, #8]
 80059d8:	60da      	str	r2, [r3, #12]
 80059da:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = GREEN_LED;
 80059dc:	2308      	movs	r3, #8
 80059de:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80059e0:	2301      	movs	r3, #1
 80059e2:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059e4:	2300      	movs	r3, #0
 80059e6:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 80059e8:	1d3b      	adds	r3, r7, #4
 80059ea:	4619      	mov	r1, r3
 80059ec:	4805      	ldr	r0, [pc, #20]	; (8005a04 <board_init_green_led_on+0x3c>)
 80059ee:	f7fd fec1 	bl	8003774 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PIN_PORT_C, GREEN_LED, GPIO_PIN_SET);
 80059f2:	2201      	movs	r2, #1
 80059f4:	2108      	movs	r1, #8
 80059f6:	4803      	ldr	r0, [pc, #12]	; (8005a04 <board_init_green_led_on+0x3c>)
 80059f8:	f7fe f84e 	bl	8003a98 <HAL_GPIO_WritePin>
}
 80059fc:	bf00      	nop
 80059fe:	3718      	adds	r7, #24
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}
 8005a04:	48000800 	.word	0x48000800

08005a08 <board_init_green_led_off>:


void board_init_green_led_off(void)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b086      	sub	sp, #24
 8005a0c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a0e:	1d3b      	adds	r3, r7, #4
 8005a10:	2200      	movs	r2, #0
 8005a12:	601a      	str	r2, [r3, #0]
 8005a14:	605a      	str	r2, [r3, #4]
 8005a16:	609a      	str	r2, [r3, #8]
 8005a18:	60da      	str	r2, [r3, #12]
 8005a1a:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = GREEN_LED;
 8005a1c:	2308      	movs	r3, #8
 8005a1e:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005a20:	2301      	movs	r3, #1
 8005a22:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a24:	2300      	movs	r3, #0
 8005a26:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 8005a28:	1d3b      	adds	r3, r7, #4
 8005a2a:	4619      	mov	r1, r3
 8005a2c:	4805      	ldr	r0, [pc, #20]	; (8005a44 <board_init_green_led_off+0x3c>)
 8005a2e:	f7fd fea1 	bl	8003774 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PIN_PORT_C, GREEN_LED, GPIO_PIN_RESET);
 8005a32:	2200      	movs	r2, #0
 8005a34:	2108      	movs	r1, #8
 8005a36:	4803      	ldr	r0, [pc, #12]	; (8005a44 <board_init_green_led_off+0x3c>)
 8005a38:	f7fe f82e 	bl	8003a98 <HAL_GPIO_WritePin>
}
 8005a3c:	bf00      	nop
 8005a3e:	3718      	adds	r7, #24
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}
 8005a44:	48000800 	.word	0x48000800

08005a48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8005a4c:	b672      	cpsid	i
}
 8005a4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005a50:	e7fe      	b.n	8005a50 <Error_Handler+0x8>

08005a52 <main>:
#include "semaphore_create.h"
#include "task_create.h"


int main(void)
{
 8005a52:	b580      	push	{r7, lr}
 8005a54:	af00      	add	r7, sp, #0
    board_init_common_board_init();
 8005a56:	f7ff fe97 	bl	8005788 <board_init_common_board_init>
	task_create();
 8005a5a:	f000 f805 	bl	8005a68 <task_create>
	//semaphore_create();
    //reset_ws2812b();
	osKernelStart();
 8005a5e:	f7fa fde3 	bl	8000628 <osKernelStart>
 8005a62:	2300      	movs	r3, #0
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <task_create>:
//	.priority = (osPriority_t) osPriorityNormal,
//};


void task_create(void)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	af00      	add	r7, sp, #0
    osKernelInitialize();
 8005a6c:	f7fa fdb8 	bl	80005e0 <osKernelInitialize>

    g_mn_wild_ctrl_handle = osThreadNew(task_mn_wild, NULL, &g_mn_wild_attributes);
 8005a70:	4a04      	ldr	r2, [pc, #16]	; (8005a84 <task_create+0x1c>)
 8005a72:	2100      	movs	r1, #0
 8005a74:	4804      	ldr	r0, [pc, #16]	; (8005a88 <task_create+0x20>)
 8005a76:	f7fa fdfd 	bl	8000674 <osThreadNew>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	4a03      	ldr	r2, [pc, #12]	; (8005a8c <task_create+0x24>)
 8005a7e:	6013      	str	r3, [r2, #0]
//    g_led_ctrl_handle = osThreadNew(task_led_ctrl, NULL, &g_task_led_ctrl_attributes);
//	g_button_press_handle = osThreadNew(task_button_press, NULL, &g_task_button_press_attributes);
//    g_dma_transfer_handle = osThreadNew(task_dma_transfer, NULL, &g_task_dma_transfer_attributes);
//    g_tasks_running = true; // technically will be running after task scheduler started
}
 8005a80:	bf00      	nop
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	080070a4 	.word	0x080070a4
 8005a88:	080004d5 	.word	0x080004d5
 8005a8c:	20001b2c 	.word	0x20001b2c

08005a90 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
  PWR_PVDTypeDef sConfigPVD = {0};
 8005a96:	f107 0308 	add.w	r3, r7, #8
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	601a      	str	r2, [r3, #0]
 8005a9e:	605a      	str	r2, [r3, #4]

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005aa0:	4b13      	ldr	r3, [pc, #76]	; (8005af0 <HAL_MspInit+0x60>)
 8005aa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005aa4:	4a12      	ldr	r2, [pc, #72]	; (8005af0 <HAL_MspInit+0x60>)
 8005aa6:	f043 0301 	orr.w	r3, r3, #1
 8005aaa:	6613      	str	r3, [r2, #96]	; 0x60
 8005aac:	4b10      	ldr	r3, [pc, #64]	; (8005af0 <HAL_MspInit+0x60>)
 8005aae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ab0:	f003 0301 	and.w	r3, r3, #1
 8005ab4:	607b      	str	r3, [r7, #4]
 8005ab6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005ab8:	4b0d      	ldr	r3, [pc, #52]	; (8005af0 <HAL_MspInit+0x60>)
 8005aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005abc:	4a0c      	ldr	r2, [pc, #48]	; (8005af0 <HAL_MspInit+0x60>)
 8005abe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ac2:	6593      	str	r3, [r2, #88]	; 0x58
 8005ac4:	4b0a      	ldr	r3, [pc, #40]	; (8005af0 <HAL_MspInit+0x60>)
 8005ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ac8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005acc:	603b      	str	r3, [r7, #0]
 8005ace:	683b      	ldr	r3, [r7, #0]

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	60bb      	str	r3, [r7, #8]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	60fb      	str	r3, [r7, #12]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8005ad8:	f107 0308 	add.w	r3, r7, #8
 8005adc:	4618      	mov	r0, r3
 8005ade:	f7fe f827 	bl	8003b30 <HAL_PWR_ConfigPVD>
  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 8005ae2:	f7fe f885 	bl	8003bf0 <HAL_PWR_EnablePVD>
}
 8005ae6:	bf00      	nop
 8005ae8:	3710      	adds	r7, #16
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	bf00      	nop
 8005af0:	40021000 	.word	0x40021000

08005af4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a08      	ldr	r2, [pc, #32]	; (8005b24 <HAL_RTC_MspInit+0x30>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d107      	bne.n	8005b16 <HAL_RTC_MspInit+0x22>
  {
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8005b06:	4b08      	ldr	r3, [pc, #32]	; (8005b28 <HAL_RTC_MspInit+0x34>)
 8005b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b0c:	4a06      	ldr	r2, [pc, #24]	; (8005b28 <HAL_RTC_MspInit+0x34>)
 8005b0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

}
 8005b16:	bf00      	nop
 8005b18:	370c      	adds	r7, #12
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr
 8005b22:	bf00      	nop
 8005b24:	40002800 	.word	0x40002800
 8005b28:	40021000 	.word	0x40021000

08005b2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b082      	sub	sp, #8
 8005b30:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 1; iii++)
 8005b32:	2300      	movs	r3, #0
 8005b34:	71fb      	strb	r3, [r7, #7]
 8005b36:	e009      	b.n	8005b4c <NMI_Handler+0x20>
        {
            board_init_red_led_on();
 8005b38:	f7ff ff06 	bl	8005948 <board_init_red_led_on>
            HAL_Delay(100);
 8005b3c:	2064      	movs	r0, #100	; 0x64
 8005b3e:	f7fd fc35 	bl	80033ac <HAL_Delay>
            board_init_red_led_off();
 8005b42:	f7ff ff21 	bl	8005988 <board_init_red_led_off>
        for (uint8_t iii = 0; iii < 1; iii++)
 8005b46:	79fb      	ldrb	r3, [r7, #7]
 8005b48:	3301      	adds	r3, #1
 8005b4a:	71fb      	strb	r3, [r7, #7]
 8005b4c:	79fb      	ldrb	r3, [r7, #7]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d0f2      	beq.n	8005b38 <NMI_Handler+0xc>
        }
        HAL_Delay(3000);
 8005b52:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8005b56:	f7fd fc29 	bl	80033ac <HAL_Delay>
        for (uint8_t iii = 0; iii < 1; iii++)
 8005b5a:	e7ea      	b.n	8005b32 <NMI_Handler+0x6>

08005b5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b082      	sub	sp, #8
 8005b60:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 2; iii++)
 8005b62:	2300      	movs	r3, #0
 8005b64:	71fb      	strb	r3, [r7, #7]
 8005b66:	e009      	b.n	8005b7c <HardFault_Handler+0x20>
        {
            board_init_red_led_on();
 8005b68:	f7ff feee 	bl	8005948 <board_init_red_led_on>
            HAL_Delay(100);
 8005b6c:	2064      	movs	r0, #100	; 0x64
 8005b6e:	f7fd fc1d 	bl	80033ac <HAL_Delay>
            board_init_red_led_off();
 8005b72:	f7ff ff09 	bl	8005988 <board_init_red_led_off>
        for (uint8_t iii = 0; iii < 2; iii++)
 8005b76:	79fb      	ldrb	r3, [r7, #7]
 8005b78:	3301      	adds	r3, #1
 8005b7a:	71fb      	strb	r3, [r7, #7]
 8005b7c:	79fb      	ldrb	r3, [r7, #7]
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d9f2      	bls.n	8005b68 <HardFault_Handler+0xc>
        }
        HAL_Delay(3000);
 8005b82:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8005b86:	f7fd fc11 	bl	80033ac <HAL_Delay>
        for (uint8_t iii = 0; iii < 2; iii++)
 8005b8a:	e7ea      	b.n	8005b62 <HardFault_Handler+0x6>

08005b8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b082      	sub	sp, #8
 8005b90:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 3; iii++)
 8005b92:	2300      	movs	r3, #0
 8005b94:	71fb      	strb	r3, [r7, #7]
 8005b96:	e009      	b.n	8005bac <MemManage_Handler+0x20>
        {
            board_init_red_led_on();
 8005b98:	f7ff fed6 	bl	8005948 <board_init_red_led_on>
            HAL_Delay(100);
 8005b9c:	2064      	movs	r0, #100	; 0x64
 8005b9e:	f7fd fc05 	bl	80033ac <HAL_Delay>
            board_init_red_led_off();
 8005ba2:	f7ff fef1 	bl	8005988 <board_init_red_led_off>
        for (uint8_t iii = 0; iii < 3; iii++)
 8005ba6:	79fb      	ldrb	r3, [r7, #7]
 8005ba8:	3301      	adds	r3, #1
 8005baa:	71fb      	strb	r3, [r7, #7]
 8005bac:	79fb      	ldrb	r3, [r7, #7]
 8005bae:	2b02      	cmp	r3, #2
 8005bb0:	d9f2      	bls.n	8005b98 <MemManage_Handler+0xc>
        }
        HAL_Delay(3000);
 8005bb2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8005bb6:	f7fd fbf9 	bl	80033ac <HAL_Delay>
        for (uint8_t iii = 0; iii < 3; iii++)
 8005bba:	e7ea      	b.n	8005b92 <MemManage_Handler+0x6>

08005bbc <BusFault_Handler>:
}
/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b082      	sub	sp, #8
 8005bc0:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 4; iii++)
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	71fb      	strb	r3, [r7, #7]
 8005bc6:	e009      	b.n	8005bdc <BusFault_Handler+0x20>
        {
            board_init_red_led_on();
 8005bc8:	f7ff febe 	bl	8005948 <board_init_red_led_on>
            HAL_Delay(100);
 8005bcc:	2064      	movs	r0, #100	; 0x64
 8005bce:	f7fd fbed 	bl	80033ac <HAL_Delay>
            board_init_red_led_off();
 8005bd2:	f7ff fed9 	bl	8005988 <board_init_red_led_off>
        for (uint8_t iii = 0; iii < 4; iii++)
 8005bd6:	79fb      	ldrb	r3, [r7, #7]
 8005bd8:	3301      	adds	r3, #1
 8005bda:	71fb      	strb	r3, [r7, #7]
 8005bdc:	79fb      	ldrb	r3, [r7, #7]
 8005bde:	2b03      	cmp	r3, #3
 8005be0:	d9f2      	bls.n	8005bc8 <BusFault_Handler+0xc>
        }
        HAL_Delay(3000);
 8005be2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8005be6:	f7fd fbe1 	bl	80033ac <HAL_Delay>
        for (uint8_t iii = 0; iii < 4; iii++)
 8005bea:	e7ea      	b.n	8005bc2 <BusFault_Handler+0x6>

08005bec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b082      	sub	sp, #8
 8005bf0:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 5; iii++)
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	71fb      	strb	r3, [r7, #7]
 8005bf6:	e009      	b.n	8005c0c <UsageFault_Handler+0x20>
        {
            board_init_red_led_on();
 8005bf8:	f7ff fea6 	bl	8005948 <board_init_red_led_on>
            HAL_Delay(100);
 8005bfc:	2064      	movs	r0, #100	; 0x64
 8005bfe:	f7fd fbd5 	bl	80033ac <HAL_Delay>
            board_init_red_led_off();
 8005c02:	f7ff fec1 	bl	8005988 <board_init_red_led_off>
        for (uint8_t iii = 0; iii < 5; iii++)
 8005c06:	79fb      	ldrb	r3, [r7, #7]
 8005c08:	3301      	adds	r3, #1
 8005c0a:	71fb      	strb	r3, [r7, #7]
 8005c0c:	79fb      	ldrb	r3, [r7, #7]
 8005c0e:	2b04      	cmp	r3, #4
 8005c10:	d9f2      	bls.n	8005bf8 <UsageFault_Handler+0xc>
        }
        HAL_Delay(3000);
 8005c12:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8005c16:	f7fd fbc9 	bl	80033ac <HAL_Delay>
        for (uint8_t iii = 0; iii < 5; iii++)
 8005c1a:	e7ea      	b.n	8005bf2 <UsageFault_Handler+0x6>

08005c1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	af00      	add	r7, sp, #0
}
 8005c20:	bf00      	nop
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr
	...

08005c2c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b084      	sub	sp, #16
 8005c30:	af02      	add	r7, sp, #8
    BaseType_t xHigherPriorityTaskWoken;
    HAL_GPIO_EXTI_IRQHandler(PIN_WKUP_1);
 8005c32:	2001      	movs	r0, #1
 8005c34:	f7fd ff48 	bl	8003ac8 <HAL_GPIO_EXTI_IRQHandler>
    if (TASK_MN_WILD_STATE_ACTIVE == task_mn_wild_state())
 8005c38:	f7fa fc24 	bl	8000484 <task_mn_wild_state>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d102      	bne.n	8005c48 <EXTI0_IRQHandler+0x1c>
    {
        task_mn_wild_enter_idle();
 8005c42:	f7fa fc2b 	bl	800049c <task_mn_wild_enter_idle>
    }
    else
    {
        xTaskNotifyFromISR(g_mn_wild_ctrl_handle, PUSH_BUTTON_B, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
    }
}
 8005c46:	e008      	b.n	8005c5a <EXTI0_IRQHandler+0x2e>
        xTaskNotifyFromISR(g_mn_wild_ctrl_handle, PUSH_BUTTON_B, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 8005c48:	4b06      	ldr	r3, [pc, #24]	; (8005c64 <EXTI0_IRQHandler+0x38>)
 8005c4a:	6818      	ldr	r0, [r3, #0]
 8005c4c:	1d3b      	adds	r3, r7, #4
 8005c4e:	9300      	str	r3, [sp, #0]
 8005c50:	2300      	movs	r3, #0
 8005c52:	2203      	movs	r2, #3
 8005c54:	2101      	movs	r1, #1
 8005c56:	f7fc fa93 	bl	8002180 <xTaskGenericNotifyFromISR>
}
 8005c5a:	bf00      	nop
 8005c5c:	3708      	adds	r7, #8
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop
 8005c64:	20001b2c 	.word	0x20001b2c

08005c68 <EXTI2_IRQHandler>:
uint32_t g_dbg_b_interrupt_count = 0;
/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(PIN_WKUP_4);
 8005c6c:	2004      	movs	r0, #4
 8005c6e:	f7fd ff2b 	bl	8003ac8 <HAL_GPIO_EXTI_IRQHandler>
}
 8005c72:	bf00      	nop
 8005c74:	bd80      	pop	{r7, pc}
	...

08005c78 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af02      	add	r7, sp, #8
    BaseType_t xHigherPriorityTaskWoken;
    HAL_GPIO_EXTI_IRQHandler(PIN_WKUP_2);
 8005c7e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005c82:	f7fd ff21 	bl	8003ac8 <HAL_GPIO_EXTI_IRQHandler>
    if (TASK_MN_WILD_STATE_ACTIVE == task_mn_wild_state())
 8005c86:	f7fa fbfd 	bl	8000484 <task_mn_wild_state>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d102      	bne.n	8005c96 <EXTI15_10_IRQHandler+0x1e>
    {
        task_mn_wild_enter_idle();
 8005c90:	f7fa fc04 	bl	800049c <task_mn_wild_enter_idle>
    }
    else
    {
        xTaskNotifyFromISR(g_mn_wild_ctrl_handle, PUSH_BUTTON_A, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
    }
}
 8005c94:	e008      	b.n	8005ca8 <EXTI15_10_IRQHandler+0x30>
        xTaskNotifyFromISR(g_mn_wild_ctrl_handle, PUSH_BUTTON_A, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 8005c96:	4b06      	ldr	r3, [pc, #24]	; (8005cb0 <EXTI15_10_IRQHandler+0x38>)
 8005c98:	6818      	ldr	r0, [r3, #0]
 8005c9a:	1d3b      	adds	r3, r7, #4
 8005c9c:	9300      	str	r3, [sp, #0]
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	2203      	movs	r2, #3
 8005ca2:	2100      	movs	r1, #0
 8005ca4:	f7fc fa6c 	bl	8002180 <xTaskGenericNotifyFromISR>
}
 8005ca8:	bf00      	nop
 8005caa:	3708      	adds	r7, #8
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}
 8005cb0:	20001b2c 	.word	0x20001b2c

08005cb4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(PIN_WKUP_3);
 8005cb8:	2020      	movs	r0, #32
 8005cba:	f7fd ff05 	bl	8003ac8 <HAL_GPIO_EXTI_IRQHandler>
}
 8005cbe:	bf00      	nop
 8005cc0:	bd80      	pop	{r7, pc}
	...

08005cc4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8005cc8:	4802      	ldr	r0, [pc, #8]	; (8005cd4 <DMA1_Channel2_IRQHandler+0x10>)
 8005cca:	f7fd fca4 	bl	8003616 <HAL_DMA_IRQHandler>
}
 8005cce:	bf00      	nop
 8005cd0:	bd80      	pop	{r7, pc}
 8005cd2:	bf00      	nop
 8005cd4:	200019a0 	.word	0x200019a0

08005cd8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 8005cdc:	4802      	ldr	r0, [pc, #8]	; (8005ce8 <DMA1_Channel3_IRQHandler+0x10>)
 8005cde:	f7fd fc9a 	bl	8003616 <HAL_DMA_IRQHandler>
}
 8005ce2:	bf00      	nop
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	bf00      	nop
 8005ce8:	200019e8 	.word	0x200019e8

08005cec <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim15_ch1_up_trig_com);
 8005cf0:	4802      	ldr	r0, [pc, #8]	; (8005cfc <DMA1_Channel5_IRQHandler+0x10>)
 8005cf2:	f7fd fc90 	bl	8003616 <HAL_DMA_IRQHandler>
}
 8005cf6:	bf00      	nop
 8005cf8:	bd80      	pop	{r7, pc}
 8005cfa:	bf00      	nop
 8005cfc:	20001a78 	.word	0x20001a78

08005d00 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim16_ch1_up);
 8005d04:	4802      	ldr	r0, [pc, #8]	; (8005d10 <DMA1_Channel6_IRQHandler+0x10>)
 8005d06:	f7fd fc86 	bl	8003616 <HAL_DMA_IRQHandler>
}
 8005d0a:	bf00      	nop
 8005d0c:	bd80      	pop	{r7, pc}
 8005d0e:	bf00      	nop
 8005d10:	20001ac0 	.word	0x20001ac0

08005d14 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim1_ch3);
 8005d18:	4802      	ldr	r0, [pc, #8]	; (8005d24 <DMA1_Channel7_IRQHandler+0x10>)
 8005d1a:	f7fd fc7c 	bl	8003616 <HAL_DMA_IRQHandler>
}
 8005d1e:	bf00      	nop
 8005d20:	bd80      	pop	{r7, pc}
 8005d22:	bf00      	nop
 8005d24:	20001a30 	.word	0x20001a30

08005d28 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	af00      	add	r7, sp, #0
	return 1;
 8005d2c:	2301      	movs	r3, #1
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr

08005d38 <_kill>:

int _kill(int pid, int sig)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b082      	sub	sp, #8
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005d42:	f000 f8f3 	bl	8005f2c <__errno>
 8005d46:	4603      	mov	r3, r0
 8005d48:	2216      	movs	r2, #22
 8005d4a:	601a      	str	r2, [r3, #0]
	return -1;
 8005d4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3708      	adds	r7, #8
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <_exit>:

void _exit (int status)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b082      	sub	sp, #8
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005d60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f7ff ffe7 	bl	8005d38 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005d6a:	e7fe      	b.n	8005d6a <_exit+0x12>

08005d6c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b086      	sub	sp, #24
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	60f8      	str	r0, [r7, #12]
 8005d74:	60b9      	str	r1, [r7, #8]
 8005d76:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005d78:	2300      	movs	r3, #0
 8005d7a:	617b      	str	r3, [r7, #20]
 8005d7c:	e00a      	b.n	8005d94 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005d7e:	f3af 8000 	nop.w
 8005d82:	4601      	mov	r1, r0
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	1c5a      	adds	r2, r3, #1
 8005d88:	60ba      	str	r2, [r7, #8]
 8005d8a:	b2ca      	uxtb	r2, r1
 8005d8c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	3301      	adds	r3, #1
 8005d92:	617b      	str	r3, [r7, #20]
 8005d94:	697a      	ldr	r2, [r7, #20]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	dbf0      	blt.n	8005d7e <_read+0x12>
	}

return len;
 8005d9c:	687b      	ldr	r3, [r7, #4]
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3718      	adds	r7, #24
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}

08005da6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005da6:	b580      	push	{r7, lr}
 8005da8:	b086      	sub	sp, #24
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	60f8      	str	r0, [r7, #12]
 8005dae:	60b9      	str	r1, [r7, #8]
 8005db0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005db2:	2300      	movs	r3, #0
 8005db4:	617b      	str	r3, [r7, #20]
 8005db6:	e009      	b.n	8005dcc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	1c5a      	adds	r2, r3, #1
 8005dbc:	60ba      	str	r2, [r7, #8]
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	3301      	adds	r3, #1
 8005dca:	617b      	str	r3, [r7, #20]
 8005dcc:	697a      	ldr	r2, [r7, #20]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	dbf1      	blt.n	8005db8 <_write+0x12>
	}
	return len;
 8005dd4:	687b      	ldr	r3, [r7, #4]
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3718      	adds	r7, #24
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}

08005dde <_close>:

int _close(int file)
{
 8005dde:	b480      	push	{r7}
 8005de0:	b083      	sub	sp, #12
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]
	return -1;
 8005de6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	370c      	adds	r7, #12
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr

08005df6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005df6:	b480      	push	{r7}
 8005df8:	b083      	sub	sp, #12
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	6078      	str	r0, [r7, #4]
 8005dfe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005e06:	605a      	str	r2, [r3, #4]
	return 0;
 8005e08:	2300      	movs	r3, #0
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	370c      	adds	r7, #12
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr

08005e16 <_isatty>:

int _isatty(int file)
{
 8005e16:	b480      	push	{r7}
 8005e18:	b083      	sub	sp, #12
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	6078      	str	r0, [r7, #4]
	return 1;
 8005e1e:	2301      	movs	r3, #1
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	370c      	adds	r7, #12
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr

08005e2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b085      	sub	sp, #20
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	60f8      	str	r0, [r7, #12]
 8005e34:	60b9      	str	r1, [r7, #8]
 8005e36:	607a      	str	r2, [r7, #4]
	return 0;
 8005e38:	2300      	movs	r3, #0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3714      	adds	r7, #20
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr
	...

08005e48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b086      	sub	sp, #24
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005e50:	4a14      	ldr	r2, [pc, #80]	; (8005ea4 <_sbrk+0x5c>)
 8005e52:	4b15      	ldr	r3, [pc, #84]	; (8005ea8 <_sbrk+0x60>)
 8005e54:	1ad3      	subs	r3, r2, r3
 8005e56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005e5c:	4b13      	ldr	r3, [pc, #76]	; (8005eac <_sbrk+0x64>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d102      	bne.n	8005e6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005e64:	4b11      	ldr	r3, [pc, #68]	; (8005eac <_sbrk+0x64>)
 8005e66:	4a12      	ldr	r2, [pc, #72]	; (8005eb0 <_sbrk+0x68>)
 8005e68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005e6a:	4b10      	ldr	r3, [pc, #64]	; (8005eac <_sbrk+0x64>)
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	4413      	add	r3, r2
 8005e72:	693a      	ldr	r2, [r7, #16]
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d207      	bcs.n	8005e88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005e78:	f000 f858 	bl	8005f2c <__errno>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	220c      	movs	r2, #12
 8005e80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005e82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e86:	e009      	b.n	8005e9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005e88:	4b08      	ldr	r3, [pc, #32]	; (8005eac <_sbrk+0x64>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005e8e:	4b07      	ldr	r3, [pc, #28]	; (8005eac <_sbrk+0x64>)
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4413      	add	r3, r2
 8005e96:	4a05      	ldr	r2, [pc, #20]	; (8005eac <_sbrk+0x64>)
 8005e98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3718      	adds	r7, #24
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}
 8005ea4:	20010000 	.word	0x20010000
 8005ea8:	00000400 	.word	0x00000400
 8005eac:	2000238c 	.word	0x2000238c
 8005eb0:	200023a0 	.word	0x200023a0

08005eb4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8005eb8:	4b06      	ldr	r3, [pc, #24]	; (8005ed4 <SystemInit+0x20>)
 8005eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ebe:	4a05      	ldr	r2, [pc, #20]	; (8005ed4 <SystemInit+0x20>)
 8005ec0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005ec4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8005ec8:	bf00      	nop
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr
 8005ed2:	bf00      	nop
 8005ed4:	e000ed00 	.word	0xe000ed00

08005ed8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8005ed8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005f10 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005edc:	f7ff ffea 	bl	8005eb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005ee0:	480c      	ldr	r0, [pc, #48]	; (8005f14 <LoopForever+0x6>)
  ldr r1, =_edata
 8005ee2:	490d      	ldr	r1, [pc, #52]	; (8005f18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005ee4:	4a0d      	ldr	r2, [pc, #52]	; (8005f1c <LoopForever+0xe>)
  movs r3, #0
 8005ee6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005ee8:	e002      	b.n	8005ef0 <LoopCopyDataInit>

08005eea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005eea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005eec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005eee:	3304      	adds	r3, #4

08005ef0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005ef0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005ef2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005ef4:	d3f9      	bcc.n	8005eea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005ef6:	4a0a      	ldr	r2, [pc, #40]	; (8005f20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005ef8:	4c0a      	ldr	r4, [pc, #40]	; (8005f24 <LoopForever+0x16>)
  movs r3, #0
 8005efa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005efc:	e001      	b.n	8005f02 <LoopFillZerobss>

08005efe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005efe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005f00:	3204      	adds	r2, #4

08005f02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005f02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005f04:	d3fb      	bcc.n	8005efe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005f06:	f000 f817 	bl	8005f38 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005f0a:	f7ff fda2 	bl	8005a52 <main>

08005f0e <LoopForever>:

LoopForever:
    b LoopForever
 8005f0e:	e7fe      	b.n	8005f0e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8005f10:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8005f14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005f18:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8005f1c:	08007258 	.word	0x08007258
  ldr r2, =_sbss
 8005f20:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8005f24:	200023a0 	.word	0x200023a0

08005f28 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005f28:	e7fe      	b.n	8005f28 <ADC1_IRQHandler>
	...

08005f2c <__errno>:
 8005f2c:	4b01      	ldr	r3, [pc, #4]	; (8005f34 <__errno+0x8>)
 8005f2e:	6818      	ldr	r0, [r3, #0]
 8005f30:	4770      	bx	lr
 8005f32:	bf00      	nop
 8005f34:	20000010 	.word	0x20000010

08005f38 <__libc_init_array>:
 8005f38:	b570      	push	{r4, r5, r6, lr}
 8005f3a:	4d0d      	ldr	r5, [pc, #52]	; (8005f70 <__libc_init_array+0x38>)
 8005f3c:	4c0d      	ldr	r4, [pc, #52]	; (8005f74 <__libc_init_array+0x3c>)
 8005f3e:	1b64      	subs	r4, r4, r5
 8005f40:	10a4      	asrs	r4, r4, #2
 8005f42:	2600      	movs	r6, #0
 8005f44:	42a6      	cmp	r6, r4
 8005f46:	d109      	bne.n	8005f5c <__libc_init_array+0x24>
 8005f48:	4d0b      	ldr	r5, [pc, #44]	; (8005f78 <__libc_init_array+0x40>)
 8005f4a:	4c0c      	ldr	r4, [pc, #48]	; (8005f7c <__libc_init_array+0x44>)
 8005f4c:	f001 f88a 	bl	8007064 <_init>
 8005f50:	1b64      	subs	r4, r4, r5
 8005f52:	10a4      	asrs	r4, r4, #2
 8005f54:	2600      	movs	r6, #0
 8005f56:	42a6      	cmp	r6, r4
 8005f58:	d105      	bne.n	8005f66 <__libc_init_array+0x2e>
 8005f5a:	bd70      	pop	{r4, r5, r6, pc}
 8005f5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f60:	4798      	blx	r3
 8005f62:	3601      	adds	r6, #1
 8005f64:	e7ee      	b.n	8005f44 <__libc_init_array+0xc>
 8005f66:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f6a:	4798      	blx	r3
 8005f6c:	3601      	adds	r6, #1
 8005f6e:	e7f2      	b.n	8005f56 <__libc_init_array+0x1e>
 8005f70:	08007250 	.word	0x08007250
 8005f74:	08007250 	.word	0x08007250
 8005f78:	08007250 	.word	0x08007250
 8005f7c:	08007254 	.word	0x08007254

08005f80 <malloc>:
 8005f80:	4b02      	ldr	r3, [pc, #8]	; (8005f8c <malloc+0xc>)
 8005f82:	4601      	mov	r1, r0
 8005f84:	6818      	ldr	r0, [r3, #0]
 8005f86:	f000 b885 	b.w	8006094 <_malloc_r>
 8005f8a:	bf00      	nop
 8005f8c:	20000010 	.word	0x20000010

08005f90 <memcpy>:
 8005f90:	440a      	add	r2, r1
 8005f92:	4291      	cmp	r1, r2
 8005f94:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005f98:	d100      	bne.n	8005f9c <memcpy+0xc>
 8005f9a:	4770      	bx	lr
 8005f9c:	b510      	push	{r4, lr}
 8005f9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005fa2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005fa6:	4291      	cmp	r1, r2
 8005fa8:	d1f9      	bne.n	8005f9e <memcpy+0xe>
 8005faa:	bd10      	pop	{r4, pc}

08005fac <memset>:
 8005fac:	4402      	add	r2, r0
 8005fae:	4603      	mov	r3, r0
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d100      	bne.n	8005fb6 <memset+0xa>
 8005fb4:	4770      	bx	lr
 8005fb6:	f803 1b01 	strb.w	r1, [r3], #1
 8005fba:	e7f9      	b.n	8005fb0 <memset+0x4>

08005fbc <_free_r>:
 8005fbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005fbe:	2900      	cmp	r1, #0
 8005fc0:	d044      	beq.n	800604c <_free_r+0x90>
 8005fc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fc6:	9001      	str	r0, [sp, #4]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	f1a1 0404 	sub.w	r4, r1, #4
 8005fce:	bfb8      	it	lt
 8005fd0:	18e4      	addlt	r4, r4, r3
 8005fd2:	f000 f96d 	bl	80062b0 <__malloc_lock>
 8005fd6:	4a1e      	ldr	r2, [pc, #120]	; (8006050 <_free_r+0x94>)
 8005fd8:	9801      	ldr	r0, [sp, #4]
 8005fda:	6813      	ldr	r3, [r2, #0]
 8005fdc:	b933      	cbnz	r3, 8005fec <_free_r+0x30>
 8005fde:	6063      	str	r3, [r4, #4]
 8005fe0:	6014      	str	r4, [r2, #0]
 8005fe2:	b003      	add	sp, #12
 8005fe4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005fe8:	f000 b968 	b.w	80062bc <__malloc_unlock>
 8005fec:	42a3      	cmp	r3, r4
 8005fee:	d908      	bls.n	8006002 <_free_r+0x46>
 8005ff0:	6825      	ldr	r5, [r4, #0]
 8005ff2:	1961      	adds	r1, r4, r5
 8005ff4:	428b      	cmp	r3, r1
 8005ff6:	bf01      	itttt	eq
 8005ff8:	6819      	ldreq	r1, [r3, #0]
 8005ffa:	685b      	ldreq	r3, [r3, #4]
 8005ffc:	1949      	addeq	r1, r1, r5
 8005ffe:	6021      	streq	r1, [r4, #0]
 8006000:	e7ed      	b.n	8005fde <_free_r+0x22>
 8006002:	461a      	mov	r2, r3
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	b10b      	cbz	r3, 800600c <_free_r+0x50>
 8006008:	42a3      	cmp	r3, r4
 800600a:	d9fa      	bls.n	8006002 <_free_r+0x46>
 800600c:	6811      	ldr	r1, [r2, #0]
 800600e:	1855      	adds	r5, r2, r1
 8006010:	42a5      	cmp	r5, r4
 8006012:	d10b      	bne.n	800602c <_free_r+0x70>
 8006014:	6824      	ldr	r4, [r4, #0]
 8006016:	4421      	add	r1, r4
 8006018:	1854      	adds	r4, r2, r1
 800601a:	42a3      	cmp	r3, r4
 800601c:	6011      	str	r1, [r2, #0]
 800601e:	d1e0      	bne.n	8005fe2 <_free_r+0x26>
 8006020:	681c      	ldr	r4, [r3, #0]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	6053      	str	r3, [r2, #4]
 8006026:	4421      	add	r1, r4
 8006028:	6011      	str	r1, [r2, #0]
 800602a:	e7da      	b.n	8005fe2 <_free_r+0x26>
 800602c:	d902      	bls.n	8006034 <_free_r+0x78>
 800602e:	230c      	movs	r3, #12
 8006030:	6003      	str	r3, [r0, #0]
 8006032:	e7d6      	b.n	8005fe2 <_free_r+0x26>
 8006034:	6825      	ldr	r5, [r4, #0]
 8006036:	1961      	adds	r1, r4, r5
 8006038:	428b      	cmp	r3, r1
 800603a:	bf04      	itt	eq
 800603c:	6819      	ldreq	r1, [r3, #0]
 800603e:	685b      	ldreq	r3, [r3, #4]
 8006040:	6063      	str	r3, [r4, #4]
 8006042:	bf04      	itt	eq
 8006044:	1949      	addeq	r1, r1, r5
 8006046:	6021      	streq	r1, [r4, #0]
 8006048:	6054      	str	r4, [r2, #4]
 800604a:	e7ca      	b.n	8005fe2 <_free_r+0x26>
 800604c:	b003      	add	sp, #12
 800604e:	bd30      	pop	{r4, r5, pc}
 8006050:	20002390 	.word	0x20002390

08006054 <sbrk_aligned>:
 8006054:	b570      	push	{r4, r5, r6, lr}
 8006056:	4e0e      	ldr	r6, [pc, #56]	; (8006090 <sbrk_aligned+0x3c>)
 8006058:	460c      	mov	r4, r1
 800605a:	6831      	ldr	r1, [r6, #0]
 800605c:	4605      	mov	r5, r0
 800605e:	b911      	cbnz	r1, 8006066 <sbrk_aligned+0x12>
 8006060:	f000 f8ba 	bl	80061d8 <_sbrk_r>
 8006064:	6030      	str	r0, [r6, #0]
 8006066:	4621      	mov	r1, r4
 8006068:	4628      	mov	r0, r5
 800606a:	f000 f8b5 	bl	80061d8 <_sbrk_r>
 800606e:	1c43      	adds	r3, r0, #1
 8006070:	d00a      	beq.n	8006088 <sbrk_aligned+0x34>
 8006072:	1cc4      	adds	r4, r0, #3
 8006074:	f024 0403 	bic.w	r4, r4, #3
 8006078:	42a0      	cmp	r0, r4
 800607a:	d007      	beq.n	800608c <sbrk_aligned+0x38>
 800607c:	1a21      	subs	r1, r4, r0
 800607e:	4628      	mov	r0, r5
 8006080:	f000 f8aa 	bl	80061d8 <_sbrk_r>
 8006084:	3001      	adds	r0, #1
 8006086:	d101      	bne.n	800608c <sbrk_aligned+0x38>
 8006088:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800608c:	4620      	mov	r0, r4
 800608e:	bd70      	pop	{r4, r5, r6, pc}
 8006090:	20002394 	.word	0x20002394

08006094 <_malloc_r>:
 8006094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006098:	1ccd      	adds	r5, r1, #3
 800609a:	f025 0503 	bic.w	r5, r5, #3
 800609e:	3508      	adds	r5, #8
 80060a0:	2d0c      	cmp	r5, #12
 80060a2:	bf38      	it	cc
 80060a4:	250c      	movcc	r5, #12
 80060a6:	2d00      	cmp	r5, #0
 80060a8:	4607      	mov	r7, r0
 80060aa:	db01      	blt.n	80060b0 <_malloc_r+0x1c>
 80060ac:	42a9      	cmp	r1, r5
 80060ae:	d905      	bls.n	80060bc <_malloc_r+0x28>
 80060b0:	230c      	movs	r3, #12
 80060b2:	603b      	str	r3, [r7, #0]
 80060b4:	2600      	movs	r6, #0
 80060b6:	4630      	mov	r0, r6
 80060b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060bc:	4e2e      	ldr	r6, [pc, #184]	; (8006178 <_malloc_r+0xe4>)
 80060be:	f000 f8f7 	bl	80062b0 <__malloc_lock>
 80060c2:	6833      	ldr	r3, [r6, #0]
 80060c4:	461c      	mov	r4, r3
 80060c6:	bb34      	cbnz	r4, 8006116 <_malloc_r+0x82>
 80060c8:	4629      	mov	r1, r5
 80060ca:	4638      	mov	r0, r7
 80060cc:	f7ff ffc2 	bl	8006054 <sbrk_aligned>
 80060d0:	1c43      	adds	r3, r0, #1
 80060d2:	4604      	mov	r4, r0
 80060d4:	d14d      	bne.n	8006172 <_malloc_r+0xde>
 80060d6:	6834      	ldr	r4, [r6, #0]
 80060d8:	4626      	mov	r6, r4
 80060da:	2e00      	cmp	r6, #0
 80060dc:	d140      	bne.n	8006160 <_malloc_r+0xcc>
 80060de:	6823      	ldr	r3, [r4, #0]
 80060e0:	4631      	mov	r1, r6
 80060e2:	4638      	mov	r0, r7
 80060e4:	eb04 0803 	add.w	r8, r4, r3
 80060e8:	f000 f876 	bl	80061d8 <_sbrk_r>
 80060ec:	4580      	cmp	r8, r0
 80060ee:	d13a      	bne.n	8006166 <_malloc_r+0xd2>
 80060f0:	6821      	ldr	r1, [r4, #0]
 80060f2:	3503      	adds	r5, #3
 80060f4:	1a6d      	subs	r5, r5, r1
 80060f6:	f025 0503 	bic.w	r5, r5, #3
 80060fa:	3508      	adds	r5, #8
 80060fc:	2d0c      	cmp	r5, #12
 80060fe:	bf38      	it	cc
 8006100:	250c      	movcc	r5, #12
 8006102:	4629      	mov	r1, r5
 8006104:	4638      	mov	r0, r7
 8006106:	f7ff ffa5 	bl	8006054 <sbrk_aligned>
 800610a:	3001      	adds	r0, #1
 800610c:	d02b      	beq.n	8006166 <_malloc_r+0xd2>
 800610e:	6823      	ldr	r3, [r4, #0]
 8006110:	442b      	add	r3, r5
 8006112:	6023      	str	r3, [r4, #0]
 8006114:	e00e      	b.n	8006134 <_malloc_r+0xa0>
 8006116:	6822      	ldr	r2, [r4, #0]
 8006118:	1b52      	subs	r2, r2, r5
 800611a:	d41e      	bmi.n	800615a <_malloc_r+0xc6>
 800611c:	2a0b      	cmp	r2, #11
 800611e:	d916      	bls.n	800614e <_malloc_r+0xba>
 8006120:	1961      	adds	r1, r4, r5
 8006122:	42a3      	cmp	r3, r4
 8006124:	6025      	str	r5, [r4, #0]
 8006126:	bf18      	it	ne
 8006128:	6059      	strne	r1, [r3, #4]
 800612a:	6863      	ldr	r3, [r4, #4]
 800612c:	bf08      	it	eq
 800612e:	6031      	streq	r1, [r6, #0]
 8006130:	5162      	str	r2, [r4, r5]
 8006132:	604b      	str	r3, [r1, #4]
 8006134:	4638      	mov	r0, r7
 8006136:	f104 060b 	add.w	r6, r4, #11
 800613a:	f000 f8bf 	bl	80062bc <__malloc_unlock>
 800613e:	f026 0607 	bic.w	r6, r6, #7
 8006142:	1d23      	adds	r3, r4, #4
 8006144:	1af2      	subs	r2, r6, r3
 8006146:	d0b6      	beq.n	80060b6 <_malloc_r+0x22>
 8006148:	1b9b      	subs	r3, r3, r6
 800614a:	50a3      	str	r3, [r4, r2]
 800614c:	e7b3      	b.n	80060b6 <_malloc_r+0x22>
 800614e:	6862      	ldr	r2, [r4, #4]
 8006150:	42a3      	cmp	r3, r4
 8006152:	bf0c      	ite	eq
 8006154:	6032      	streq	r2, [r6, #0]
 8006156:	605a      	strne	r2, [r3, #4]
 8006158:	e7ec      	b.n	8006134 <_malloc_r+0xa0>
 800615a:	4623      	mov	r3, r4
 800615c:	6864      	ldr	r4, [r4, #4]
 800615e:	e7b2      	b.n	80060c6 <_malloc_r+0x32>
 8006160:	4634      	mov	r4, r6
 8006162:	6876      	ldr	r6, [r6, #4]
 8006164:	e7b9      	b.n	80060da <_malloc_r+0x46>
 8006166:	230c      	movs	r3, #12
 8006168:	603b      	str	r3, [r7, #0]
 800616a:	4638      	mov	r0, r7
 800616c:	f000 f8a6 	bl	80062bc <__malloc_unlock>
 8006170:	e7a1      	b.n	80060b6 <_malloc_r+0x22>
 8006172:	6025      	str	r5, [r4, #0]
 8006174:	e7de      	b.n	8006134 <_malloc_r+0xa0>
 8006176:	bf00      	nop
 8006178:	20002390 	.word	0x20002390

0800617c <srand>:
 800617c:	b538      	push	{r3, r4, r5, lr}
 800617e:	4b10      	ldr	r3, [pc, #64]	; (80061c0 <srand+0x44>)
 8006180:	681d      	ldr	r5, [r3, #0]
 8006182:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8006184:	4604      	mov	r4, r0
 8006186:	b9b3      	cbnz	r3, 80061b6 <srand+0x3a>
 8006188:	2018      	movs	r0, #24
 800618a:	f7ff fef9 	bl	8005f80 <malloc>
 800618e:	4602      	mov	r2, r0
 8006190:	63a8      	str	r0, [r5, #56]	; 0x38
 8006192:	b920      	cbnz	r0, 800619e <srand+0x22>
 8006194:	4b0b      	ldr	r3, [pc, #44]	; (80061c4 <srand+0x48>)
 8006196:	480c      	ldr	r0, [pc, #48]	; (80061c8 <srand+0x4c>)
 8006198:	2142      	movs	r1, #66	; 0x42
 800619a:	f000 f847 	bl	800622c <__assert_func>
 800619e:	490b      	ldr	r1, [pc, #44]	; (80061cc <srand+0x50>)
 80061a0:	4b0b      	ldr	r3, [pc, #44]	; (80061d0 <srand+0x54>)
 80061a2:	e9c0 1300 	strd	r1, r3, [r0]
 80061a6:	4b0b      	ldr	r3, [pc, #44]	; (80061d4 <srand+0x58>)
 80061a8:	6083      	str	r3, [r0, #8]
 80061aa:	230b      	movs	r3, #11
 80061ac:	8183      	strh	r3, [r0, #12]
 80061ae:	2100      	movs	r1, #0
 80061b0:	2001      	movs	r0, #1
 80061b2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80061b6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80061b8:	2200      	movs	r2, #0
 80061ba:	611c      	str	r4, [r3, #16]
 80061bc:	615a      	str	r2, [r3, #20]
 80061be:	bd38      	pop	{r3, r4, r5, pc}
 80061c0:	20000010 	.word	0x20000010
 80061c4:	0800710c 	.word	0x0800710c
 80061c8:	08007123 	.word	0x08007123
 80061cc:	abcd330e 	.word	0xabcd330e
 80061d0:	e66d1234 	.word	0xe66d1234
 80061d4:	0005deec 	.word	0x0005deec

080061d8 <_sbrk_r>:
 80061d8:	b538      	push	{r3, r4, r5, lr}
 80061da:	4d06      	ldr	r5, [pc, #24]	; (80061f4 <_sbrk_r+0x1c>)
 80061dc:	2300      	movs	r3, #0
 80061de:	4604      	mov	r4, r0
 80061e0:	4608      	mov	r0, r1
 80061e2:	602b      	str	r3, [r5, #0]
 80061e4:	f7ff fe30 	bl	8005e48 <_sbrk>
 80061e8:	1c43      	adds	r3, r0, #1
 80061ea:	d102      	bne.n	80061f2 <_sbrk_r+0x1a>
 80061ec:	682b      	ldr	r3, [r5, #0]
 80061ee:	b103      	cbz	r3, 80061f2 <_sbrk_r+0x1a>
 80061f0:	6023      	str	r3, [r4, #0]
 80061f2:	bd38      	pop	{r3, r4, r5, pc}
 80061f4:	20002398 	.word	0x20002398

080061f8 <time>:
 80061f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80061fa:	4b0b      	ldr	r3, [pc, #44]	; (8006228 <time+0x30>)
 80061fc:	2200      	movs	r2, #0
 80061fe:	4669      	mov	r1, sp
 8006200:	4604      	mov	r4, r0
 8006202:	6818      	ldr	r0, [r3, #0]
 8006204:	f000 f842 	bl	800628c <_gettimeofday_r>
 8006208:	2800      	cmp	r0, #0
 800620a:	bfbe      	ittt	lt
 800620c:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
 8006210:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006214:	e9cd 2300 	strdlt	r2, r3, [sp]
 8006218:	e9dd 0100 	ldrd	r0, r1, [sp]
 800621c:	b10c      	cbz	r4, 8006222 <time+0x2a>
 800621e:	e9c4 0100 	strd	r0, r1, [r4]
 8006222:	b004      	add	sp, #16
 8006224:	bd10      	pop	{r4, pc}
 8006226:	bf00      	nop
 8006228:	20000010 	.word	0x20000010

0800622c <__assert_func>:
 800622c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800622e:	4614      	mov	r4, r2
 8006230:	461a      	mov	r2, r3
 8006232:	4b09      	ldr	r3, [pc, #36]	; (8006258 <__assert_func+0x2c>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4605      	mov	r5, r0
 8006238:	68d8      	ldr	r0, [r3, #12]
 800623a:	b14c      	cbz	r4, 8006250 <__assert_func+0x24>
 800623c:	4b07      	ldr	r3, [pc, #28]	; (800625c <__assert_func+0x30>)
 800623e:	9100      	str	r1, [sp, #0]
 8006240:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006244:	4906      	ldr	r1, [pc, #24]	; (8006260 <__assert_func+0x34>)
 8006246:	462b      	mov	r3, r5
 8006248:	f000 f80e 	bl	8006268 <fiprintf>
 800624c:	f000 fbea 	bl	8006a24 <abort>
 8006250:	4b04      	ldr	r3, [pc, #16]	; (8006264 <__assert_func+0x38>)
 8006252:	461c      	mov	r4, r3
 8006254:	e7f3      	b.n	800623e <__assert_func+0x12>
 8006256:	bf00      	nop
 8006258:	20000010 	.word	0x20000010
 800625c:	0800717e 	.word	0x0800717e
 8006260:	0800718b 	.word	0x0800718b
 8006264:	080071b9 	.word	0x080071b9

08006268 <fiprintf>:
 8006268:	b40e      	push	{r1, r2, r3}
 800626a:	b503      	push	{r0, r1, lr}
 800626c:	4601      	mov	r1, r0
 800626e:	ab03      	add	r3, sp, #12
 8006270:	4805      	ldr	r0, [pc, #20]	; (8006288 <fiprintf+0x20>)
 8006272:	f853 2b04 	ldr.w	r2, [r3], #4
 8006276:	6800      	ldr	r0, [r0, #0]
 8006278:	9301      	str	r3, [sp, #4]
 800627a:	f000 f84f 	bl	800631c <_vfiprintf_r>
 800627e:	b002      	add	sp, #8
 8006280:	f85d eb04 	ldr.w	lr, [sp], #4
 8006284:	b003      	add	sp, #12
 8006286:	4770      	bx	lr
 8006288:	20000010 	.word	0x20000010

0800628c <_gettimeofday_r>:
 800628c:	b538      	push	{r3, r4, r5, lr}
 800628e:	4d07      	ldr	r5, [pc, #28]	; (80062ac <_gettimeofday_r+0x20>)
 8006290:	2300      	movs	r3, #0
 8006292:	4604      	mov	r4, r0
 8006294:	4608      	mov	r0, r1
 8006296:	4611      	mov	r1, r2
 8006298:	602b      	str	r3, [r5, #0]
 800629a:	f000 fedb 	bl	8007054 <_gettimeofday>
 800629e:	1c43      	adds	r3, r0, #1
 80062a0:	d102      	bne.n	80062a8 <_gettimeofday_r+0x1c>
 80062a2:	682b      	ldr	r3, [r5, #0]
 80062a4:	b103      	cbz	r3, 80062a8 <_gettimeofday_r+0x1c>
 80062a6:	6023      	str	r3, [r4, #0]
 80062a8:	bd38      	pop	{r3, r4, r5, pc}
 80062aa:	bf00      	nop
 80062ac:	20002398 	.word	0x20002398

080062b0 <__malloc_lock>:
 80062b0:	4801      	ldr	r0, [pc, #4]	; (80062b8 <__malloc_lock+0x8>)
 80062b2:	f000 bd77 	b.w	8006da4 <__retarget_lock_acquire_recursive>
 80062b6:	bf00      	nop
 80062b8:	2000239c 	.word	0x2000239c

080062bc <__malloc_unlock>:
 80062bc:	4801      	ldr	r0, [pc, #4]	; (80062c4 <__malloc_unlock+0x8>)
 80062be:	f000 bd72 	b.w	8006da6 <__retarget_lock_release_recursive>
 80062c2:	bf00      	nop
 80062c4:	2000239c 	.word	0x2000239c

080062c8 <__sfputc_r>:
 80062c8:	6893      	ldr	r3, [r2, #8]
 80062ca:	3b01      	subs	r3, #1
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	b410      	push	{r4}
 80062d0:	6093      	str	r3, [r2, #8]
 80062d2:	da08      	bge.n	80062e6 <__sfputc_r+0x1e>
 80062d4:	6994      	ldr	r4, [r2, #24]
 80062d6:	42a3      	cmp	r3, r4
 80062d8:	db01      	blt.n	80062de <__sfputc_r+0x16>
 80062da:	290a      	cmp	r1, #10
 80062dc:	d103      	bne.n	80062e6 <__sfputc_r+0x1e>
 80062de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80062e2:	f000 badf 	b.w	80068a4 <__swbuf_r>
 80062e6:	6813      	ldr	r3, [r2, #0]
 80062e8:	1c58      	adds	r0, r3, #1
 80062ea:	6010      	str	r0, [r2, #0]
 80062ec:	7019      	strb	r1, [r3, #0]
 80062ee:	4608      	mov	r0, r1
 80062f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80062f4:	4770      	bx	lr

080062f6 <__sfputs_r>:
 80062f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062f8:	4606      	mov	r6, r0
 80062fa:	460f      	mov	r7, r1
 80062fc:	4614      	mov	r4, r2
 80062fe:	18d5      	adds	r5, r2, r3
 8006300:	42ac      	cmp	r4, r5
 8006302:	d101      	bne.n	8006308 <__sfputs_r+0x12>
 8006304:	2000      	movs	r0, #0
 8006306:	e007      	b.n	8006318 <__sfputs_r+0x22>
 8006308:	f814 1b01 	ldrb.w	r1, [r4], #1
 800630c:	463a      	mov	r2, r7
 800630e:	4630      	mov	r0, r6
 8006310:	f7ff ffda 	bl	80062c8 <__sfputc_r>
 8006314:	1c43      	adds	r3, r0, #1
 8006316:	d1f3      	bne.n	8006300 <__sfputs_r+0xa>
 8006318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800631c <_vfiprintf_r>:
 800631c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006320:	460d      	mov	r5, r1
 8006322:	b09d      	sub	sp, #116	; 0x74
 8006324:	4614      	mov	r4, r2
 8006326:	4698      	mov	r8, r3
 8006328:	4606      	mov	r6, r0
 800632a:	b118      	cbz	r0, 8006334 <_vfiprintf_r+0x18>
 800632c:	6983      	ldr	r3, [r0, #24]
 800632e:	b90b      	cbnz	r3, 8006334 <_vfiprintf_r+0x18>
 8006330:	f000 fc9a 	bl	8006c68 <__sinit>
 8006334:	4b89      	ldr	r3, [pc, #548]	; (800655c <_vfiprintf_r+0x240>)
 8006336:	429d      	cmp	r5, r3
 8006338:	d11b      	bne.n	8006372 <_vfiprintf_r+0x56>
 800633a:	6875      	ldr	r5, [r6, #4]
 800633c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800633e:	07d9      	lsls	r1, r3, #31
 8006340:	d405      	bmi.n	800634e <_vfiprintf_r+0x32>
 8006342:	89ab      	ldrh	r3, [r5, #12]
 8006344:	059a      	lsls	r2, r3, #22
 8006346:	d402      	bmi.n	800634e <_vfiprintf_r+0x32>
 8006348:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800634a:	f000 fd2b 	bl	8006da4 <__retarget_lock_acquire_recursive>
 800634e:	89ab      	ldrh	r3, [r5, #12]
 8006350:	071b      	lsls	r3, r3, #28
 8006352:	d501      	bpl.n	8006358 <_vfiprintf_r+0x3c>
 8006354:	692b      	ldr	r3, [r5, #16]
 8006356:	b9eb      	cbnz	r3, 8006394 <_vfiprintf_r+0x78>
 8006358:	4629      	mov	r1, r5
 800635a:	4630      	mov	r0, r6
 800635c:	f000 faf4 	bl	8006948 <__swsetup_r>
 8006360:	b1c0      	cbz	r0, 8006394 <_vfiprintf_r+0x78>
 8006362:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006364:	07dc      	lsls	r4, r3, #31
 8006366:	d50e      	bpl.n	8006386 <_vfiprintf_r+0x6a>
 8006368:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800636c:	b01d      	add	sp, #116	; 0x74
 800636e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006372:	4b7b      	ldr	r3, [pc, #492]	; (8006560 <_vfiprintf_r+0x244>)
 8006374:	429d      	cmp	r5, r3
 8006376:	d101      	bne.n	800637c <_vfiprintf_r+0x60>
 8006378:	68b5      	ldr	r5, [r6, #8]
 800637a:	e7df      	b.n	800633c <_vfiprintf_r+0x20>
 800637c:	4b79      	ldr	r3, [pc, #484]	; (8006564 <_vfiprintf_r+0x248>)
 800637e:	429d      	cmp	r5, r3
 8006380:	bf08      	it	eq
 8006382:	68f5      	ldreq	r5, [r6, #12]
 8006384:	e7da      	b.n	800633c <_vfiprintf_r+0x20>
 8006386:	89ab      	ldrh	r3, [r5, #12]
 8006388:	0598      	lsls	r0, r3, #22
 800638a:	d4ed      	bmi.n	8006368 <_vfiprintf_r+0x4c>
 800638c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800638e:	f000 fd0a 	bl	8006da6 <__retarget_lock_release_recursive>
 8006392:	e7e9      	b.n	8006368 <_vfiprintf_r+0x4c>
 8006394:	2300      	movs	r3, #0
 8006396:	9309      	str	r3, [sp, #36]	; 0x24
 8006398:	2320      	movs	r3, #32
 800639a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800639e:	f8cd 800c 	str.w	r8, [sp, #12]
 80063a2:	2330      	movs	r3, #48	; 0x30
 80063a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006568 <_vfiprintf_r+0x24c>
 80063a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80063ac:	f04f 0901 	mov.w	r9, #1
 80063b0:	4623      	mov	r3, r4
 80063b2:	469a      	mov	sl, r3
 80063b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80063b8:	b10a      	cbz	r2, 80063be <_vfiprintf_r+0xa2>
 80063ba:	2a25      	cmp	r2, #37	; 0x25
 80063bc:	d1f9      	bne.n	80063b2 <_vfiprintf_r+0x96>
 80063be:	ebba 0b04 	subs.w	fp, sl, r4
 80063c2:	d00b      	beq.n	80063dc <_vfiprintf_r+0xc0>
 80063c4:	465b      	mov	r3, fp
 80063c6:	4622      	mov	r2, r4
 80063c8:	4629      	mov	r1, r5
 80063ca:	4630      	mov	r0, r6
 80063cc:	f7ff ff93 	bl	80062f6 <__sfputs_r>
 80063d0:	3001      	adds	r0, #1
 80063d2:	f000 80aa 	beq.w	800652a <_vfiprintf_r+0x20e>
 80063d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063d8:	445a      	add	r2, fp
 80063da:	9209      	str	r2, [sp, #36]	; 0x24
 80063dc:	f89a 3000 	ldrb.w	r3, [sl]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	f000 80a2 	beq.w	800652a <_vfiprintf_r+0x20e>
 80063e6:	2300      	movs	r3, #0
 80063e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80063ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80063f0:	f10a 0a01 	add.w	sl, sl, #1
 80063f4:	9304      	str	r3, [sp, #16]
 80063f6:	9307      	str	r3, [sp, #28]
 80063f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80063fc:	931a      	str	r3, [sp, #104]	; 0x68
 80063fe:	4654      	mov	r4, sl
 8006400:	2205      	movs	r2, #5
 8006402:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006406:	4858      	ldr	r0, [pc, #352]	; (8006568 <_vfiprintf_r+0x24c>)
 8006408:	f7f9 fee2 	bl	80001d0 <memchr>
 800640c:	9a04      	ldr	r2, [sp, #16]
 800640e:	b9d8      	cbnz	r0, 8006448 <_vfiprintf_r+0x12c>
 8006410:	06d1      	lsls	r1, r2, #27
 8006412:	bf44      	itt	mi
 8006414:	2320      	movmi	r3, #32
 8006416:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800641a:	0713      	lsls	r3, r2, #28
 800641c:	bf44      	itt	mi
 800641e:	232b      	movmi	r3, #43	; 0x2b
 8006420:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006424:	f89a 3000 	ldrb.w	r3, [sl]
 8006428:	2b2a      	cmp	r3, #42	; 0x2a
 800642a:	d015      	beq.n	8006458 <_vfiprintf_r+0x13c>
 800642c:	9a07      	ldr	r2, [sp, #28]
 800642e:	4654      	mov	r4, sl
 8006430:	2000      	movs	r0, #0
 8006432:	f04f 0c0a 	mov.w	ip, #10
 8006436:	4621      	mov	r1, r4
 8006438:	f811 3b01 	ldrb.w	r3, [r1], #1
 800643c:	3b30      	subs	r3, #48	; 0x30
 800643e:	2b09      	cmp	r3, #9
 8006440:	d94e      	bls.n	80064e0 <_vfiprintf_r+0x1c4>
 8006442:	b1b0      	cbz	r0, 8006472 <_vfiprintf_r+0x156>
 8006444:	9207      	str	r2, [sp, #28]
 8006446:	e014      	b.n	8006472 <_vfiprintf_r+0x156>
 8006448:	eba0 0308 	sub.w	r3, r0, r8
 800644c:	fa09 f303 	lsl.w	r3, r9, r3
 8006450:	4313      	orrs	r3, r2
 8006452:	9304      	str	r3, [sp, #16]
 8006454:	46a2      	mov	sl, r4
 8006456:	e7d2      	b.n	80063fe <_vfiprintf_r+0xe2>
 8006458:	9b03      	ldr	r3, [sp, #12]
 800645a:	1d19      	adds	r1, r3, #4
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	9103      	str	r1, [sp, #12]
 8006460:	2b00      	cmp	r3, #0
 8006462:	bfbb      	ittet	lt
 8006464:	425b      	neglt	r3, r3
 8006466:	f042 0202 	orrlt.w	r2, r2, #2
 800646a:	9307      	strge	r3, [sp, #28]
 800646c:	9307      	strlt	r3, [sp, #28]
 800646e:	bfb8      	it	lt
 8006470:	9204      	strlt	r2, [sp, #16]
 8006472:	7823      	ldrb	r3, [r4, #0]
 8006474:	2b2e      	cmp	r3, #46	; 0x2e
 8006476:	d10c      	bne.n	8006492 <_vfiprintf_r+0x176>
 8006478:	7863      	ldrb	r3, [r4, #1]
 800647a:	2b2a      	cmp	r3, #42	; 0x2a
 800647c:	d135      	bne.n	80064ea <_vfiprintf_r+0x1ce>
 800647e:	9b03      	ldr	r3, [sp, #12]
 8006480:	1d1a      	adds	r2, r3, #4
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	9203      	str	r2, [sp, #12]
 8006486:	2b00      	cmp	r3, #0
 8006488:	bfb8      	it	lt
 800648a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800648e:	3402      	adds	r4, #2
 8006490:	9305      	str	r3, [sp, #20]
 8006492:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006578 <_vfiprintf_r+0x25c>
 8006496:	7821      	ldrb	r1, [r4, #0]
 8006498:	2203      	movs	r2, #3
 800649a:	4650      	mov	r0, sl
 800649c:	f7f9 fe98 	bl	80001d0 <memchr>
 80064a0:	b140      	cbz	r0, 80064b4 <_vfiprintf_r+0x198>
 80064a2:	2340      	movs	r3, #64	; 0x40
 80064a4:	eba0 000a 	sub.w	r0, r0, sl
 80064a8:	fa03 f000 	lsl.w	r0, r3, r0
 80064ac:	9b04      	ldr	r3, [sp, #16]
 80064ae:	4303      	orrs	r3, r0
 80064b0:	3401      	adds	r4, #1
 80064b2:	9304      	str	r3, [sp, #16]
 80064b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064b8:	482c      	ldr	r0, [pc, #176]	; (800656c <_vfiprintf_r+0x250>)
 80064ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80064be:	2206      	movs	r2, #6
 80064c0:	f7f9 fe86 	bl	80001d0 <memchr>
 80064c4:	2800      	cmp	r0, #0
 80064c6:	d03f      	beq.n	8006548 <_vfiprintf_r+0x22c>
 80064c8:	4b29      	ldr	r3, [pc, #164]	; (8006570 <_vfiprintf_r+0x254>)
 80064ca:	bb1b      	cbnz	r3, 8006514 <_vfiprintf_r+0x1f8>
 80064cc:	9b03      	ldr	r3, [sp, #12]
 80064ce:	3307      	adds	r3, #7
 80064d0:	f023 0307 	bic.w	r3, r3, #7
 80064d4:	3308      	adds	r3, #8
 80064d6:	9303      	str	r3, [sp, #12]
 80064d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064da:	443b      	add	r3, r7
 80064dc:	9309      	str	r3, [sp, #36]	; 0x24
 80064de:	e767      	b.n	80063b0 <_vfiprintf_r+0x94>
 80064e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80064e4:	460c      	mov	r4, r1
 80064e6:	2001      	movs	r0, #1
 80064e8:	e7a5      	b.n	8006436 <_vfiprintf_r+0x11a>
 80064ea:	2300      	movs	r3, #0
 80064ec:	3401      	adds	r4, #1
 80064ee:	9305      	str	r3, [sp, #20]
 80064f0:	4619      	mov	r1, r3
 80064f2:	f04f 0c0a 	mov.w	ip, #10
 80064f6:	4620      	mov	r0, r4
 80064f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80064fc:	3a30      	subs	r2, #48	; 0x30
 80064fe:	2a09      	cmp	r2, #9
 8006500:	d903      	bls.n	800650a <_vfiprintf_r+0x1ee>
 8006502:	2b00      	cmp	r3, #0
 8006504:	d0c5      	beq.n	8006492 <_vfiprintf_r+0x176>
 8006506:	9105      	str	r1, [sp, #20]
 8006508:	e7c3      	b.n	8006492 <_vfiprintf_r+0x176>
 800650a:	fb0c 2101 	mla	r1, ip, r1, r2
 800650e:	4604      	mov	r4, r0
 8006510:	2301      	movs	r3, #1
 8006512:	e7f0      	b.n	80064f6 <_vfiprintf_r+0x1da>
 8006514:	ab03      	add	r3, sp, #12
 8006516:	9300      	str	r3, [sp, #0]
 8006518:	462a      	mov	r2, r5
 800651a:	4b16      	ldr	r3, [pc, #88]	; (8006574 <_vfiprintf_r+0x258>)
 800651c:	a904      	add	r1, sp, #16
 800651e:	4630      	mov	r0, r6
 8006520:	f3af 8000 	nop.w
 8006524:	4607      	mov	r7, r0
 8006526:	1c78      	adds	r0, r7, #1
 8006528:	d1d6      	bne.n	80064d8 <_vfiprintf_r+0x1bc>
 800652a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800652c:	07d9      	lsls	r1, r3, #31
 800652e:	d405      	bmi.n	800653c <_vfiprintf_r+0x220>
 8006530:	89ab      	ldrh	r3, [r5, #12]
 8006532:	059a      	lsls	r2, r3, #22
 8006534:	d402      	bmi.n	800653c <_vfiprintf_r+0x220>
 8006536:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006538:	f000 fc35 	bl	8006da6 <__retarget_lock_release_recursive>
 800653c:	89ab      	ldrh	r3, [r5, #12]
 800653e:	065b      	lsls	r3, r3, #25
 8006540:	f53f af12 	bmi.w	8006368 <_vfiprintf_r+0x4c>
 8006544:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006546:	e711      	b.n	800636c <_vfiprintf_r+0x50>
 8006548:	ab03      	add	r3, sp, #12
 800654a:	9300      	str	r3, [sp, #0]
 800654c:	462a      	mov	r2, r5
 800654e:	4b09      	ldr	r3, [pc, #36]	; (8006574 <_vfiprintf_r+0x258>)
 8006550:	a904      	add	r1, sp, #16
 8006552:	4630      	mov	r0, r6
 8006554:	f000 f880 	bl	8006658 <_printf_i>
 8006558:	e7e4      	b.n	8006524 <_vfiprintf_r+0x208>
 800655a:	bf00      	nop
 800655c:	08007210 	.word	0x08007210
 8006560:	08007230 	.word	0x08007230
 8006564:	080071f0 	.word	0x080071f0
 8006568:	080071ba 	.word	0x080071ba
 800656c:	080071c4 	.word	0x080071c4
 8006570:	00000000 	.word	0x00000000
 8006574:	080062f7 	.word	0x080062f7
 8006578:	080071c0 	.word	0x080071c0

0800657c <_printf_common>:
 800657c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006580:	4616      	mov	r6, r2
 8006582:	4699      	mov	r9, r3
 8006584:	688a      	ldr	r2, [r1, #8]
 8006586:	690b      	ldr	r3, [r1, #16]
 8006588:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800658c:	4293      	cmp	r3, r2
 800658e:	bfb8      	it	lt
 8006590:	4613      	movlt	r3, r2
 8006592:	6033      	str	r3, [r6, #0]
 8006594:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006598:	4607      	mov	r7, r0
 800659a:	460c      	mov	r4, r1
 800659c:	b10a      	cbz	r2, 80065a2 <_printf_common+0x26>
 800659e:	3301      	adds	r3, #1
 80065a0:	6033      	str	r3, [r6, #0]
 80065a2:	6823      	ldr	r3, [r4, #0]
 80065a4:	0699      	lsls	r1, r3, #26
 80065a6:	bf42      	ittt	mi
 80065a8:	6833      	ldrmi	r3, [r6, #0]
 80065aa:	3302      	addmi	r3, #2
 80065ac:	6033      	strmi	r3, [r6, #0]
 80065ae:	6825      	ldr	r5, [r4, #0]
 80065b0:	f015 0506 	ands.w	r5, r5, #6
 80065b4:	d106      	bne.n	80065c4 <_printf_common+0x48>
 80065b6:	f104 0a19 	add.w	sl, r4, #25
 80065ba:	68e3      	ldr	r3, [r4, #12]
 80065bc:	6832      	ldr	r2, [r6, #0]
 80065be:	1a9b      	subs	r3, r3, r2
 80065c0:	42ab      	cmp	r3, r5
 80065c2:	dc26      	bgt.n	8006612 <_printf_common+0x96>
 80065c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80065c8:	1e13      	subs	r3, r2, #0
 80065ca:	6822      	ldr	r2, [r4, #0]
 80065cc:	bf18      	it	ne
 80065ce:	2301      	movne	r3, #1
 80065d0:	0692      	lsls	r2, r2, #26
 80065d2:	d42b      	bmi.n	800662c <_printf_common+0xb0>
 80065d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80065d8:	4649      	mov	r1, r9
 80065da:	4638      	mov	r0, r7
 80065dc:	47c0      	blx	r8
 80065de:	3001      	adds	r0, #1
 80065e0:	d01e      	beq.n	8006620 <_printf_common+0xa4>
 80065e2:	6823      	ldr	r3, [r4, #0]
 80065e4:	68e5      	ldr	r5, [r4, #12]
 80065e6:	6832      	ldr	r2, [r6, #0]
 80065e8:	f003 0306 	and.w	r3, r3, #6
 80065ec:	2b04      	cmp	r3, #4
 80065ee:	bf08      	it	eq
 80065f0:	1aad      	subeq	r5, r5, r2
 80065f2:	68a3      	ldr	r3, [r4, #8]
 80065f4:	6922      	ldr	r2, [r4, #16]
 80065f6:	bf0c      	ite	eq
 80065f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80065fc:	2500      	movne	r5, #0
 80065fe:	4293      	cmp	r3, r2
 8006600:	bfc4      	itt	gt
 8006602:	1a9b      	subgt	r3, r3, r2
 8006604:	18ed      	addgt	r5, r5, r3
 8006606:	2600      	movs	r6, #0
 8006608:	341a      	adds	r4, #26
 800660a:	42b5      	cmp	r5, r6
 800660c:	d11a      	bne.n	8006644 <_printf_common+0xc8>
 800660e:	2000      	movs	r0, #0
 8006610:	e008      	b.n	8006624 <_printf_common+0xa8>
 8006612:	2301      	movs	r3, #1
 8006614:	4652      	mov	r2, sl
 8006616:	4649      	mov	r1, r9
 8006618:	4638      	mov	r0, r7
 800661a:	47c0      	blx	r8
 800661c:	3001      	adds	r0, #1
 800661e:	d103      	bne.n	8006628 <_printf_common+0xac>
 8006620:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006628:	3501      	adds	r5, #1
 800662a:	e7c6      	b.n	80065ba <_printf_common+0x3e>
 800662c:	18e1      	adds	r1, r4, r3
 800662e:	1c5a      	adds	r2, r3, #1
 8006630:	2030      	movs	r0, #48	; 0x30
 8006632:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006636:	4422      	add	r2, r4
 8006638:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800663c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006640:	3302      	adds	r3, #2
 8006642:	e7c7      	b.n	80065d4 <_printf_common+0x58>
 8006644:	2301      	movs	r3, #1
 8006646:	4622      	mov	r2, r4
 8006648:	4649      	mov	r1, r9
 800664a:	4638      	mov	r0, r7
 800664c:	47c0      	blx	r8
 800664e:	3001      	adds	r0, #1
 8006650:	d0e6      	beq.n	8006620 <_printf_common+0xa4>
 8006652:	3601      	adds	r6, #1
 8006654:	e7d9      	b.n	800660a <_printf_common+0x8e>
	...

08006658 <_printf_i>:
 8006658:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800665c:	7e0f      	ldrb	r7, [r1, #24]
 800665e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006660:	2f78      	cmp	r7, #120	; 0x78
 8006662:	4691      	mov	r9, r2
 8006664:	4680      	mov	r8, r0
 8006666:	460c      	mov	r4, r1
 8006668:	469a      	mov	sl, r3
 800666a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800666e:	d807      	bhi.n	8006680 <_printf_i+0x28>
 8006670:	2f62      	cmp	r7, #98	; 0x62
 8006672:	d80a      	bhi.n	800668a <_printf_i+0x32>
 8006674:	2f00      	cmp	r7, #0
 8006676:	f000 80d8 	beq.w	800682a <_printf_i+0x1d2>
 800667a:	2f58      	cmp	r7, #88	; 0x58
 800667c:	f000 80a3 	beq.w	80067c6 <_printf_i+0x16e>
 8006680:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006684:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006688:	e03a      	b.n	8006700 <_printf_i+0xa8>
 800668a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800668e:	2b15      	cmp	r3, #21
 8006690:	d8f6      	bhi.n	8006680 <_printf_i+0x28>
 8006692:	a101      	add	r1, pc, #4	; (adr r1, 8006698 <_printf_i+0x40>)
 8006694:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006698:	080066f1 	.word	0x080066f1
 800669c:	08006705 	.word	0x08006705
 80066a0:	08006681 	.word	0x08006681
 80066a4:	08006681 	.word	0x08006681
 80066a8:	08006681 	.word	0x08006681
 80066ac:	08006681 	.word	0x08006681
 80066b0:	08006705 	.word	0x08006705
 80066b4:	08006681 	.word	0x08006681
 80066b8:	08006681 	.word	0x08006681
 80066bc:	08006681 	.word	0x08006681
 80066c0:	08006681 	.word	0x08006681
 80066c4:	08006811 	.word	0x08006811
 80066c8:	08006735 	.word	0x08006735
 80066cc:	080067f3 	.word	0x080067f3
 80066d0:	08006681 	.word	0x08006681
 80066d4:	08006681 	.word	0x08006681
 80066d8:	08006833 	.word	0x08006833
 80066dc:	08006681 	.word	0x08006681
 80066e0:	08006735 	.word	0x08006735
 80066e4:	08006681 	.word	0x08006681
 80066e8:	08006681 	.word	0x08006681
 80066ec:	080067fb 	.word	0x080067fb
 80066f0:	682b      	ldr	r3, [r5, #0]
 80066f2:	1d1a      	adds	r2, r3, #4
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	602a      	str	r2, [r5, #0]
 80066f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80066fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006700:	2301      	movs	r3, #1
 8006702:	e0a3      	b.n	800684c <_printf_i+0x1f4>
 8006704:	6820      	ldr	r0, [r4, #0]
 8006706:	6829      	ldr	r1, [r5, #0]
 8006708:	0606      	lsls	r6, r0, #24
 800670a:	f101 0304 	add.w	r3, r1, #4
 800670e:	d50a      	bpl.n	8006726 <_printf_i+0xce>
 8006710:	680e      	ldr	r6, [r1, #0]
 8006712:	602b      	str	r3, [r5, #0]
 8006714:	2e00      	cmp	r6, #0
 8006716:	da03      	bge.n	8006720 <_printf_i+0xc8>
 8006718:	232d      	movs	r3, #45	; 0x2d
 800671a:	4276      	negs	r6, r6
 800671c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006720:	485e      	ldr	r0, [pc, #376]	; (800689c <_printf_i+0x244>)
 8006722:	230a      	movs	r3, #10
 8006724:	e019      	b.n	800675a <_printf_i+0x102>
 8006726:	680e      	ldr	r6, [r1, #0]
 8006728:	602b      	str	r3, [r5, #0]
 800672a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800672e:	bf18      	it	ne
 8006730:	b236      	sxthne	r6, r6
 8006732:	e7ef      	b.n	8006714 <_printf_i+0xbc>
 8006734:	682b      	ldr	r3, [r5, #0]
 8006736:	6820      	ldr	r0, [r4, #0]
 8006738:	1d19      	adds	r1, r3, #4
 800673a:	6029      	str	r1, [r5, #0]
 800673c:	0601      	lsls	r1, r0, #24
 800673e:	d501      	bpl.n	8006744 <_printf_i+0xec>
 8006740:	681e      	ldr	r6, [r3, #0]
 8006742:	e002      	b.n	800674a <_printf_i+0xf2>
 8006744:	0646      	lsls	r6, r0, #25
 8006746:	d5fb      	bpl.n	8006740 <_printf_i+0xe8>
 8006748:	881e      	ldrh	r6, [r3, #0]
 800674a:	4854      	ldr	r0, [pc, #336]	; (800689c <_printf_i+0x244>)
 800674c:	2f6f      	cmp	r7, #111	; 0x6f
 800674e:	bf0c      	ite	eq
 8006750:	2308      	moveq	r3, #8
 8006752:	230a      	movne	r3, #10
 8006754:	2100      	movs	r1, #0
 8006756:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800675a:	6865      	ldr	r5, [r4, #4]
 800675c:	60a5      	str	r5, [r4, #8]
 800675e:	2d00      	cmp	r5, #0
 8006760:	bfa2      	ittt	ge
 8006762:	6821      	ldrge	r1, [r4, #0]
 8006764:	f021 0104 	bicge.w	r1, r1, #4
 8006768:	6021      	strge	r1, [r4, #0]
 800676a:	b90e      	cbnz	r6, 8006770 <_printf_i+0x118>
 800676c:	2d00      	cmp	r5, #0
 800676e:	d04d      	beq.n	800680c <_printf_i+0x1b4>
 8006770:	4615      	mov	r5, r2
 8006772:	fbb6 f1f3 	udiv	r1, r6, r3
 8006776:	fb03 6711 	mls	r7, r3, r1, r6
 800677a:	5dc7      	ldrb	r7, [r0, r7]
 800677c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006780:	4637      	mov	r7, r6
 8006782:	42bb      	cmp	r3, r7
 8006784:	460e      	mov	r6, r1
 8006786:	d9f4      	bls.n	8006772 <_printf_i+0x11a>
 8006788:	2b08      	cmp	r3, #8
 800678a:	d10b      	bne.n	80067a4 <_printf_i+0x14c>
 800678c:	6823      	ldr	r3, [r4, #0]
 800678e:	07de      	lsls	r6, r3, #31
 8006790:	d508      	bpl.n	80067a4 <_printf_i+0x14c>
 8006792:	6923      	ldr	r3, [r4, #16]
 8006794:	6861      	ldr	r1, [r4, #4]
 8006796:	4299      	cmp	r1, r3
 8006798:	bfde      	ittt	le
 800679a:	2330      	movle	r3, #48	; 0x30
 800679c:	f805 3c01 	strble.w	r3, [r5, #-1]
 80067a0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80067a4:	1b52      	subs	r2, r2, r5
 80067a6:	6122      	str	r2, [r4, #16]
 80067a8:	f8cd a000 	str.w	sl, [sp]
 80067ac:	464b      	mov	r3, r9
 80067ae:	aa03      	add	r2, sp, #12
 80067b0:	4621      	mov	r1, r4
 80067b2:	4640      	mov	r0, r8
 80067b4:	f7ff fee2 	bl	800657c <_printf_common>
 80067b8:	3001      	adds	r0, #1
 80067ba:	d14c      	bne.n	8006856 <_printf_i+0x1fe>
 80067bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80067c0:	b004      	add	sp, #16
 80067c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067c6:	4835      	ldr	r0, [pc, #212]	; (800689c <_printf_i+0x244>)
 80067c8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80067cc:	6829      	ldr	r1, [r5, #0]
 80067ce:	6823      	ldr	r3, [r4, #0]
 80067d0:	f851 6b04 	ldr.w	r6, [r1], #4
 80067d4:	6029      	str	r1, [r5, #0]
 80067d6:	061d      	lsls	r5, r3, #24
 80067d8:	d514      	bpl.n	8006804 <_printf_i+0x1ac>
 80067da:	07df      	lsls	r7, r3, #31
 80067dc:	bf44      	itt	mi
 80067de:	f043 0320 	orrmi.w	r3, r3, #32
 80067e2:	6023      	strmi	r3, [r4, #0]
 80067e4:	b91e      	cbnz	r6, 80067ee <_printf_i+0x196>
 80067e6:	6823      	ldr	r3, [r4, #0]
 80067e8:	f023 0320 	bic.w	r3, r3, #32
 80067ec:	6023      	str	r3, [r4, #0]
 80067ee:	2310      	movs	r3, #16
 80067f0:	e7b0      	b.n	8006754 <_printf_i+0xfc>
 80067f2:	6823      	ldr	r3, [r4, #0]
 80067f4:	f043 0320 	orr.w	r3, r3, #32
 80067f8:	6023      	str	r3, [r4, #0]
 80067fa:	2378      	movs	r3, #120	; 0x78
 80067fc:	4828      	ldr	r0, [pc, #160]	; (80068a0 <_printf_i+0x248>)
 80067fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006802:	e7e3      	b.n	80067cc <_printf_i+0x174>
 8006804:	0659      	lsls	r1, r3, #25
 8006806:	bf48      	it	mi
 8006808:	b2b6      	uxthmi	r6, r6
 800680a:	e7e6      	b.n	80067da <_printf_i+0x182>
 800680c:	4615      	mov	r5, r2
 800680e:	e7bb      	b.n	8006788 <_printf_i+0x130>
 8006810:	682b      	ldr	r3, [r5, #0]
 8006812:	6826      	ldr	r6, [r4, #0]
 8006814:	6961      	ldr	r1, [r4, #20]
 8006816:	1d18      	adds	r0, r3, #4
 8006818:	6028      	str	r0, [r5, #0]
 800681a:	0635      	lsls	r5, r6, #24
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	d501      	bpl.n	8006824 <_printf_i+0x1cc>
 8006820:	6019      	str	r1, [r3, #0]
 8006822:	e002      	b.n	800682a <_printf_i+0x1d2>
 8006824:	0670      	lsls	r0, r6, #25
 8006826:	d5fb      	bpl.n	8006820 <_printf_i+0x1c8>
 8006828:	8019      	strh	r1, [r3, #0]
 800682a:	2300      	movs	r3, #0
 800682c:	6123      	str	r3, [r4, #16]
 800682e:	4615      	mov	r5, r2
 8006830:	e7ba      	b.n	80067a8 <_printf_i+0x150>
 8006832:	682b      	ldr	r3, [r5, #0]
 8006834:	1d1a      	adds	r2, r3, #4
 8006836:	602a      	str	r2, [r5, #0]
 8006838:	681d      	ldr	r5, [r3, #0]
 800683a:	6862      	ldr	r2, [r4, #4]
 800683c:	2100      	movs	r1, #0
 800683e:	4628      	mov	r0, r5
 8006840:	f7f9 fcc6 	bl	80001d0 <memchr>
 8006844:	b108      	cbz	r0, 800684a <_printf_i+0x1f2>
 8006846:	1b40      	subs	r0, r0, r5
 8006848:	6060      	str	r0, [r4, #4]
 800684a:	6863      	ldr	r3, [r4, #4]
 800684c:	6123      	str	r3, [r4, #16]
 800684e:	2300      	movs	r3, #0
 8006850:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006854:	e7a8      	b.n	80067a8 <_printf_i+0x150>
 8006856:	6923      	ldr	r3, [r4, #16]
 8006858:	462a      	mov	r2, r5
 800685a:	4649      	mov	r1, r9
 800685c:	4640      	mov	r0, r8
 800685e:	47d0      	blx	sl
 8006860:	3001      	adds	r0, #1
 8006862:	d0ab      	beq.n	80067bc <_printf_i+0x164>
 8006864:	6823      	ldr	r3, [r4, #0]
 8006866:	079b      	lsls	r3, r3, #30
 8006868:	d413      	bmi.n	8006892 <_printf_i+0x23a>
 800686a:	68e0      	ldr	r0, [r4, #12]
 800686c:	9b03      	ldr	r3, [sp, #12]
 800686e:	4298      	cmp	r0, r3
 8006870:	bfb8      	it	lt
 8006872:	4618      	movlt	r0, r3
 8006874:	e7a4      	b.n	80067c0 <_printf_i+0x168>
 8006876:	2301      	movs	r3, #1
 8006878:	4632      	mov	r2, r6
 800687a:	4649      	mov	r1, r9
 800687c:	4640      	mov	r0, r8
 800687e:	47d0      	blx	sl
 8006880:	3001      	adds	r0, #1
 8006882:	d09b      	beq.n	80067bc <_printf_i+0x164>
 8006884:	3501      	adds	r5, #1
 8006886:	68e3      	ldr	r3, [r4, #12]
 8006888:	9903      	ldr	r1, [sp, #12]
 800688a:	1a5b      	subs	r3, r3, r1
 800688c:	42ab      	cmp	r3, r5
 800688e:	dcf2      	bgt.n	8006876 <_printf_i+0x21e>
 8006890:	e7eb      	b.n	800686a <_printf_i+0x212>
 8006892:	2500      	movs	r5, #0
 8006894:	f104 0619 	add.w	r6, r4, #25
 8006898:	e7f5      	b.n	8006886 <_printf_i+0x22e>
 800689a:	bf00      	nop
 800689c:	080071cb 	.word	0x080071cb
 80068a0:	080071dc 	.word	0x080071dc

080068a4 <__swbuf_r>:
 80068a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068a6:	460e      	mov	r6, r1
 80068a8:	4614      	mov	r4, r2
 80068aa:	4605      	mov	r5, r0
 80068ac:	b118      	cbz	r0, 80068b6 <__swbuf_r+0x12>
 80068ae:	6983      	ldr	r3, [r0, #24]
 80068b0:	b90b      	cbnz	r3, 80068b6 <__swbuf_r+0x12>
 80068b2:	f000 f9d9 	bl	8006c68 <__sinit>
 80068b6:	4b21      	ldr	r3, [pc, #132]	; (800693c <__swbuf_r+0x98>)
 80068b8:	429c      	cmp	r4, r3
 80068ba:	d12b      	bne.n	8006914 <__swbuf_r+0x70>
 80068bc:	686c      	ldr	r4, [r5, #4]
 80068be:	69a3      	ldr	r3, [r4, #24]
 80068c0:	60a3      	str	r3, [r4, #8]
 80068c2:	89a3      	ldrh	r3, [r4, #12]
 80068c4:	071a      	lsls	r2, r3, #28
 80068c6:	d52f      	bpl.n	8006928 <__swbuf_r+0x84>
 80068c8:	6923      	ldr	r3, [r4, #16]
 80068ca:	b36b      	cbz	r3, 8006928 <__swbuf_r+0x84>
 80068cc:	6923      	ldr	r3, [r4, #16]
 80068ce:	6820      	ldr	r0, [r4, #0]
 80068d0:	1ac0      	subs	r0, r0, r3
 80068d2:	6963      	ldr	r3, [r4, #20]
 80068d4:	b2f6      	uxtb	r6, r6
 80068d6:	4283      	cmp	r3, r0
 80068d8:	4637      	mov	r7, r6
 80068da:	dc04      	bgt.n	80068e6 <__swbuf_r+0x42>
 80068dc:	4621      	mov	r1, r4
 80068de:	4628      	mov	r0, r5
 80068e0:	f000 f92e 	bl	8006b40 <_fflush_r>
 80068e4:	bb30      	cbnz	r0, 8006934 <__swbuf_r+0x90>
 80068e6:	68a3      	ldr	r3, [r4, #8]
 80068e8:	3b01      	subs	r3, #1
 80068ea:	60a3      	str	r3, [r4, #8]
 80068ec:	6823      	ldr	r3, [r4, #0]
 80068ee:	1c5a      	adds	r2, r3, #1
 80068f0:	6022      	str	r2, [r4, #0]
 80068f2:	701e      	strb	r6, [r3, #0]
 80068f4:	6963      	ldr	r3, [r4, #20]
 80068f6:	3001      	adds	r0, #1
 80068f8:	4283      	cmp	r3, r0
 80068fa:	d004      	beq.n	8006906 <__swbuf_r+0x62>
 80068fc:	89a3      	ldrh	r3, [r4, #12]
 80068fe:	07db      	lsls	r3, r3, #31
 8006900:	d506      	bpl.n	8006910 <__swbuf_r+0x6c>
 8006902:	2e0a      	cmp	r6, #10
 8006904:	d104      	bne.n	8006910 <__swbuf_r+0x6c>
 8006906:	4621      	mov	r1, r4
 8006908:	4628      	mov	r0, r5
 800690a:	f000 f919 	bl	8006b40 <_fflush_r>
 800690e:	b988      	cbnz	r0, 8006934 <__swbuf_r+0x90>
 8006910:	4638      	mov	r0, r7
 8006912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006914:	4b0a      	ldr	r3, [pc, #40]	; (8006940 <__swbuf_r+0x9c>)
 8006916:	429c      	cmp	r4, r3
 8006918:	d101      	bne.n	800691e <__swbuf_r+0x7a>
 800691a:	68ac      	ldr	r4, [r5, #8]
 800691c:	e7cf      	b.n	80068be <__swbuf_r+0x1a>
 800691e:	4b09      	ldr	r3, [pc, #36]	; (8006944 <__swbuf_r+0xa0>)
 8006920:	429c      	cmp	r4, r3
 8006922:	bf08      	it	eq
 8006924:	68ec      	ldreq	r4, [r5, #12]
 8006926:	e7ca      	b.n	80068be <__swbuf_r+0x1a>
 8006928:	4621      	mov	r1, r4
 800692a:	4628      	mov	r0, r5
 800692c:	f000 f80c 	bl	8006948 <__swsetup_r>
 8006930:	2800      	cmp	r0, #0
 8006932:	d0cb      	beq.n	80068cc <__swbuf_r+0x28>
 8006934:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006938:	e7ea      	b.n	8006910 <__swbuf_r+0x6c>
 800693a:	bf00      	nop
 800693c:	08007210 	.word	0x08007210
 8006940:	08007230 	.word	0x08007230
 8006944:	080071f0 	.word	0x080071f0

08006948 <__swsetup_r>:
 8006948:	4b32      	ldr	r3, [pc, #200]	; (8006a14 <__swsetup_r+0xcc>)
 800694a:	b570      	push	{r4, r5, r6, lr}
 800694c:	681d      	ldr	r5, [r3, #0]
 800694e:	4606      	mov	r6, r0
 8006950:	460c      	mov	r4, r1
 8006952:	b125      	cbz	r5, 800695e <__swsetup_r+0x16>
 8006954:	69ab      	ldr	r3, [r5, #24]
 8006956:	b913      	cbnz	r3, 800695e <__swsetup_r+0x16>
 8006958:	4628      	mov	r0, r5
 800695a:	f000 f985 	bl	8006c68 <__sinit>
 800695e:	4b2e      	ldr	r3, [pc, #184]	; (8006a18 <__swsetup_r+0xd0>)
 8006960:	429c      	cmp	r4, r3
 8006962:	d10f      	bne.n	8006984 <__swsetup_r+0x3c>
 8006964:	686c      	ldr	r4, [r5, #4]
 8006966:	89a3      	ldrh	r3, [r4, #12]
 8006968:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800696c:	0719      	lsls	r1, r3, #28
 800696e:	d42c      	bmi.n	80069ca <__swsetup_r+0x82>
 8006970:	06dd      	lsls	r5, r3, #27
 8006972:	d411      	bmi.n	8006998 <__swsetup_r+0x50>
 8006974:	2309      	movs	r3, #9
 8006976:	6033      	str	r3, [r6, #0]
 8006978:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800697c:	81a3      	strh	r3, [r4, #12]
 800697e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006982:	e03e      	b.n	8006a02 <__swsetup_r+0xba>
 8006984:	4b25      	ldr	r3, [pc, #148]	; (8006a1c <__swsetup_r+0xd4>)
 8006986:	429c      	cmp	r4, r3
 8006988:	d101      	bne.n	800698e <__swsetup_r+0x46>
 800698a:	68ac      	ldr	r4, [r5, #8]
 800698c:	e7eb      	b.n	8006966 <__swsetup_r+0x1e>
 800698e:	4b24      	ldr	r3, [pc, #144]	; (8006a20 <__swsetup_r+0xd8>)
 8006990:	429c      	cmp	r4, r3
 8006992:	bf08      	it	eq
 8006994:	68ec      	ldreq	r4, [r5, #12]
 8006996:	e7e6      	b.n	8006966 <__swsetup_r+0x1e>
 8006998:	0758      	lsls	r0, r3, #29
 800699a:	d512      	bpl.n	80069c2 <__swsetup_r+0x7a>
 800699c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800699e:	b141      	cbz	r1, 80069b2 <__swsetup_r+0x6a>
 80069a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80069a4:	4299      	cmp	r1, r3
 80069a6:	d002      	beq.n	80069ae <__swsetup_r+0x66>
 80069a8:	4630      	mov	r0, r6
 80069aa:	f7ff fb07 	bl	8005fbc <_free_r>
 80069ae:	2300      	movs	r3, #0
 80069b0:	6363      	str	r3, [r4, #52]	; 0x34
 80069b2:	89a3      	ldrh	r3, [r4, #12]
 80069b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80069b8:	81a3      	strh	r3, [r4, #12]
 80069ba:	2300      	movs	r3, #0
 80069bc:	6063      	str	r3, [r4, #4]
 80069be:	6923      	ldr	r3, [r4, #16]
 80069c0:	6023      	str	r3, [r4, #0]
 80069c2:	89a3      	ldrh	r3, [r4, #12]
 80069c4:	f043 0308 	orr.w	r3, r3, #8
 80069c8:	81a3      	strh	r3, [r4, #12]
 80069ca:	6923      	ldr	r3, [r4, #16]
 80069cc:	b94b      	cbnz	r3, 80069e2 <__swsetup_r+0x9a>
 80069ce:	89a3      	ldrh	r3, [r4, #12]
 80069d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80069d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069d8:	d003      	beq.n	80069e2 <__swsetup_r+0x9a>
 80069da:	4621      	mov	r1, r4
 80069dc:	4630      	mov	r0, r6
 80069de:	f000 fa09 	bl	8006df4 <__smakebuf_r>
 80069e2:	89a0      	ldrh	r0, [r4, #12]
 80069e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80069e8:	f010 0301 	ands.w	r3, r0, #1
 80069ec:	d00a      	beq.n	8006a04 <__swsetup_r+0xbc>
 80069ee:	2300      	movs	r3, #0
 80069f0:	60a3      	str	r3, [r4, #8]
 80069f2:	6963      	ldr	r3, [r4, #20]
 80069f4:	425b      	negs	r3, r3
 80069f6:	61a3      	str	r3, [r4, #24]
 80069f8:	6923      	ldr	r3, [r4, #16]
 80069fa:	b943      	cbnz	r3, 8006a0e <__swsetup_r+0xc6>
 80069fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006a00:	d1ba      	bne.n	8006978 <__swsetup_r+0x30>
 8006a02:	bd70      	pop	{r4, r5, r6, pc}
 8006a04:	0781      	lsls	r1, r0, #30
 8006a06:	bf58      	it	pl
 8006a08:	6963      	ldrpl	r3, [r4, #20]
 8006a0a:	60a3      	str	r3, [r4, #8]
 8006a0c:	e7f4      	b.n	80069f8 <__swsetup_r+0xb0>
 8006a0e:	2000      	movs	r0, #0
 8006a10:	e7f7      	b.n	8006a02 <__swsetup_r+0xba>
 8006a12:	bf00      	nop
 8006a14:	20000010 	.word	0x20000010
 8006a18:	08007210 	.word	0x08007210
 8006a1c:	08007230 	.word	0x08007230
 8006a20:	080071f0 	.word	0x080071f0

08006a24 <abort>:
 8006a24:	b508      	push	{r3, lr}
 8006a26:	2006      	movs	r0, #6
 8006a28:	f000 fa4c 	bl	8006ec4 <raise>
 8006a2c:	2001      	movs	r0, #1
 8006a2e:	f7ff f993 	bl	8005d58 <_exit>
	...

08006a34 <__sflush_r>:
 8006a34:	898a      	ldrh	r2, [r1, #12]
 8006a36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a3a:	4605      	mov	r5, r0
 8006a3c:	0710      	lsls	r0, r2, #28
 8006a3e:	460c      	mov	r4, r1
 8006a40:	d458      	bmi.n	8006af4 <__sflush_r+0xc0>
 8006a42:	684b      	ldr	r3, [r1, #4]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	dc05      	bgt.n	8006a54 <__sflush_r+0x20>
 8006a48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	dc02      	bgt.n	8006a54 <__sflush_r+0x20>
 8006a4e:	2000      	movs	r0, #0
 8006a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a56:	2e00      	cmp	r6, #0
 8006a58:	d0f9      	beq.n	8006a4e <__sflush_r+0x1a>
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006a60:	682f      	ldr	r7, [r5, #0]
 8006a62:	602b      	str	r3, [r5, #0]
 8006a64:	d032      	beq.n	8006acc <__sflush_r+0x98>
 8006a66:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006a68:	89a3      	ldrh	r3, [r4, #12]
 8006a6a:	075a      	lsls	r2, r3, #29
 8006a6c:	d505      	bpl.n	8006a7a <__sflush_r+0x46>
 8006a6e:	6863      	ldr	r3, [r4, #4]
 8006a70:	1ac0      	subs	r0, r0, r3
 8006a72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006a74:	b10b      	cbz	r3, 8006a7a <__sflush_r+0x46>
 8006a76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006a78:	1ac0      	subs	r0, r0, r3
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	4602      	mov	r2, r0
 8006a7e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a80:	6a21      	ldr	r1, [r4, #32]
 8006a82:	4628      	mov	r0, r5
 8006a84:	47b0      	blx	r6
 8006a86:	1c43      	adds	r3, r0, #1
 8006a88:	89a3      	ldrh	r3, [r4, #12]
 8006a8a:	d106      	bne.n	8006a9a <__sflush_r+0x66>
 8006a8c:	6829      	ldr	r1, [r5, #0]
 8006a8e:	291d      	cmp	r1, #29
 8006a90:	d82c      	bhi.n	8006aec <__sflush_r+0xb8>
 8006a92:	4a2a      	ldr	r2, [pc, #168]	; (8006b3c <__sflush_r+0x108>)
 8006a94:	40ca      	lsrs	r2, r1
 8006a96:	07d6      	lsls	r6, r2, #31
 8006a98:	d528      	bpl.n	8006aec <__sflush_r+0xb8>
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	6062      	str	r2, [r4, #4]
 8006a9e:	04d9      	lsls	r1, r3, #19
 8006aa0:	6922      	ldr	r2, [r4, #16]
 8006aa2:	6022      	str	r2, [r4, #0]
 8006aa4:	d504      	bpl.n	8006ab0 <__sflush_r+0x7c>
 8006aa6:	1c42      	adds	r2, r0, #1
 8006aa8:	d101      	bne.n	8006aae <__sflush_r+0x7a>
 8006aaa:	682b      	ldr	r3, [r5, #0]
 8006aac:	b903      	cbnz	r3, 8006ab0 <__sflush_r+0x7c>
 8006aae:	6560      	str	r0, [r4, #84]	; 0x54
 8006ab0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ab2:	602f      	str	r7, [r5, #0]
 8006ab4:	2900      	cmp	r1, #0
 8006ab6:	d0ca      	beq.n	8006a4e <__sflush_r+0x1a>
 8006ab8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006abc:	4299      	cmp	r1, r3
 8006abe:	d002      	beq.n	8006ac6 <__sflush_r+0x92>
 8006ac0:	4628      	mov	r0, r5
 8006ac2:	f7ff fa7b 	bl	8005fbc <_free_r>
 8006ac6:	2000      	movs	r0, #0
 8006ac8:	6360      	str	r0, [r4, #52]	; 0x34
 8006aca:	e7c1      	b.n	8006a50 <__sflush_r+0x1c>
 8006acc:	6a21      	ldr	r1, [r4, #32]
 8006ace:	2301      	movs	r3, #1
 8006ad0:	4628      	mov	r0, r5
 8006ad2:	47b0      	blx	r6
 8006ad4:	1c41      	adds	r1, r0, #1
 8006ad6:	d1c7      	bne.n	8006a68 <__sflush_r+0x34>
 8006ad8:	682b      	ldr	r3, [r5, #0]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d0c4      	beq.n	8006a68 <__sflush_r+0x34>
 8006ade:	2b1d      	cmp	r3, #29
 8006ae0:	d001      	beq.n	8006ae6 <__sflush_r+0xb2>
 8006ae2:	2b16      	cmp	r3, #22
 8006ae4:	d101      	bne.n	8006aea <__sflush_r+0xb6>
 8006ae6:	602f      	str	r7, [r5, #0]
 8006ae8:	e7b1      	b.n	8006a4e <__sflush_r+0x1a>
 8006aea:	89a3      	ldrh	r3, [r4, #12]
 8006aec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006af0:	81a3      	strh	r3, [r4, #12]
 8006af2:	e7ad      	b.n	8006a50 <__sflush_r+0x1c>
 8006af4:	690f      	ldr	r7, [r1, #16]
 8006af6:	2f00      	cmp	r7, #0
 8006af8:	d0a9      	beq.n	8006a4e <__sflush_r+0x1a>
 8006afa:	0793      	lsls	r3, r2, #30
 8006afc:	680e      	ldr	r6, [r1, #0]
 8006afe:	bf08      	it	eq
 8006b00:	694b      	ldreq	r3, [r1, #20]
 8006b02:	600f      	str	r7, [r1, #0]
 8006b04:	bf18      	it	ne
 8006b06:	2300      	movne	r3, #0
 8006b08:	eba6 0807 	sub.w	r8, r6, r7
 8006b0c:	608b      	str	r3, [r1, #8]
 8006b0e:	f1b8 0f00 	cmp.w	r8, #0
 8006b12:	dd9c      	ble.n	8006a4e <__sflush_r+0x1a>
 8006b14:	6a21      	ldr	r1, [r4, #32]
 8006b16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006b18:	4643      	mov	r3, r8
 8006b1a:	463a      	mov	r2, r7
 8006b1c:	4628      	mov	r0, r5
 8006b1e:	47b0      	blx	r6
 8006b20:	2800      	cmp	r0, #0
 8006b22:	dc06      	bgt.n	8006b32 <__sflush_r+0xfe>
 8006b24:	89a3      	ldrh	r3, [r4, #12]
 8006b26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b2a:	81a3      	strh	r3, [r4, #12]
 8006b2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b30:	e78e      	b.n	8006a50 <__sflush_r+0x1c>
 8006b32:	4407      	add	r7, r0
 8006b34:	eba8 0800 	sub.w	r8, r8, r0
 8006b38:	e7e9      	b.n	8006b0e <__sflush_r+0xda>
 8006b3a:	bf00      	nop
 8006b3c:	20400001 	.word	0x20400001

08006b40 <_fflush_r>:
 8006b40:	b538      	push	{r3, r4, r5, lr}
 8006b42:	690b      	ldr	r3, [r1, #16]
 8006b44:	4605      	mov	r5, r0
 8006b46:	460c      	mov	r4, r1
 8006b48:	b913      	cbnz	r3, 8006b50 <_fflush_r+0x10>
 8006b4a:	2500      	movs	r5, #0
 8006b4c:	4628      	mov	r0, r5
 8006b4e:	bd38      	pop	{r3, r4, r5, pc}
 8006b50:	b118      	cbz	r0, 8006b5a <_fflush_r+0x1a>
 8006b52:	6983      	ldr	r3, [r0, #24]
 8006b54:	b90b      	cbnz	r3, 8006b5a <_fflush_r+0x1a>
 8006b56:	f000 f887 	bl	8006c68 <__sinit>
 8006b5a:	4b14      	ldr	r3, [pc, #80]	; (8006bac <_fflush_r+0x6c>)
 8006b5c:	429c      	cmp	r4, r3
 8006b5e:	d11b      	bne.n	8006b98 <_fflush_r+0x58>
 8006b60:	686c      	ldr	r4, [r5, #4]
 8006b62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d0ef      	beq.n	8006b4a <_fflush_r+0xa>
 8006b6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006b6c:	07d0      	lsls	r0, r2, #31
 8006b6e:	d404      	bmi.n	8006b7a <_fflush_r+0x3a>
 8006b70:	0599      	lsls	r1, r3, #22
 8006b72:	d402      	bmi.n	8006b7a <_fflush_r+0x3a>
 8006b74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b76:	f000 f915 	bl	8006da4 <__retarget_lock_acquire_recursive>
 8006b7a:	4628      	mov	r0, r5
 8006b7c:	4621      	mov	r1, r4
 8006b7e:	f7ff ff59 	bl	8006a34 <__sflush_r>
 8006b82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b84:	07da      	lsls	r2, r3, #31
 8006b86:	4605      	mov	r5, r0
 8006b88:	d4e0      	bmi.n	8006b4c <_fflush_r+0xc>
 8006b8a:	89a3      	ldrh	r3, [r4, #12]
 8006b8c:	059b      	lsls	r3, r3, #22
 8006b8e:	d4dd      	bmi.n	8006b4c <_fflush_r+0xc>
 8006b90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b92:	f000 f908 	bl	8006da6 <__retarget_lock_release_recursive>
 8006b96:	e7d9      	b.n	8006b4c <_fflush_r+0xc>
 8006b98:	4b05      	ldr	r3, [pc, #20]	; (8006bb0 <_fflush_r+0x70>)
 8006b9a:	429c      	cmp	r4, r3
 8006b9c:	d101      	bne.n	8006ba2 <_fflush_r+0x62>
 8006b9e:	68ac      	ldr	r4, [r5, #8]
 8006ba0:	e7df      	b.n	8006b62 <_fflush_r+0x22>
 8006ba2:	4b04      	ldr	r3, [pc, #16]	; (8006bb4 <_fflush_r+0x74>)
 8006ba4:	429c      	cmp	r4, r3
 8006ba6:	bf08      	it	eq
 8006ba8:	68ec      	ldreq	r4, [r5, #12]
 8006baa:	e7da      	b.n	8006b62 <_fflush_r+0x22>
 8006bac:	08007210 	.word	0x08007210
 8006bb0:	08007230 	.word	0x08007230
 8006bb4:	080071f0 	.word	0x080071f0

08006bb8 <std>:
 8006bb8:	2300      	movs	r3, #0
 8006bba:	b510      	push	{r4, lr}
 8006bbc:	4604      	mov	r4, r0
 8006bbe:	e9c0 3300 	strd	r3, r3, [r0]
 8006bc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006bc6:	6083      	str	r3, [r0, #8]
 8006bc8:	8181      	strh	r1, [r0, #12]
 8006bca:	6643      	str	r3, [r0, #100]	; 0x64
 8006bcc:	81c2      	strh	r2, [r0, #14]
 8006bce:	6183      	str	r3, [r0, #24]
 8006bd0:	4619      	mov	r1, r3
 8006bd2:	2208      	movs	r2, #8
 8006bd4:	305c      	adds	r0, #92	; 0x5c
 8006bd6:	f7ff f9e9 	bl	8005fac <memset>
 8006bda:	4b05      	ldr	r3, [pc, #20]	; (8006bf0 <std+0x38>)
 8006bdc:	6263      	str	r3, [r4, #36]	; 0x24
 8006bde:	4b05      	ldr	r3, [pc, #20]	; (8006bf4 <std+0x3c>)
 8006be0:	62a3      	str	r3, [r4, #40]	; 0x28
 8006be2:	4b05      	ldr	r3, [pc, #20]	; (8006bf8 <std+0x40>)
 8006be4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006be6:	4b05      	ldr	r3, [pc, #20]	; (8006bfc <std+0x44>)
 8006be8:	6224      	str	r4, [r4, #32]
 8006bea:	6323      	str	r3, [r4, #48]	; 0x30
 8006bec:	bd10      	pop	{r4, pc}
 8006bee:	bf00      	nop
 8006bf0:	08006efd 	.word	0x08006efd
 8006bf4:	08006f1f 	.word	0x08006f1f
 8006bf8:	08006f57 	.word	0x08006f57
 8006bfc:	08006f7b 	.word	0x08006f7b

08006c00 <_cleanup_r>:
 8006c00:	4901      	ldr	r1, [pc, #4]	; (8006c08 <_cleanup_r+0x8>)
 8006c02:	f000 b8af 	b.w	8006d64 <_fwalk_reent>
 8006c06:	bf00      	nop
 8006c08:	08006b41 	.word	0x08006b41

08006c0c <__sfmoreglue>:
 8006c0c:	b570      	push	{r4, r5, r6, lr}
 8006c0e:	2268      	movs	r2, #104	; 0x68
 8006c10:	1e4d      	subs	r5, r1, #1
 8006c12:	4355      	muls	r5, r2
 8006c14:	460e      	mov	r6, r1
 8006c16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006c1a:	f7ff fa3b 	bl	8006094 <_malloc_r>
 8006c1e:	4604      	mov	r4, r0
 8006c20:	b140      	cbz	r0, 8006c34 <__sfmoreglue+0x28>
 8006c22:	2100      	movs	r1, #0
 8006c24:	e9c0 1600 	strd	r1, r6, [r0]
 8006c28:	300c      	adds	r0, #12
 8006c2a:	60a0      	str	r0, [r4, #8]
 8006c2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006c30:	f7ff f9bc 	bl	8005fac <memset>
 8006c34:	4620      	mov	r0, r4
 8006c36:	bd70      	pop	{r4, r5, r6, pc}

08006c38 <__sfp_lock_acquire>:
 8006c38:	4801      	ldr	r0, [pc, #4]	; (8006c40 <__sfp_lock_acquire+0x8>)
 8006c3a:	f000 b8b3 	b.w	8006da4 <__retarget_lock_acquire_recursive>
 8006c3e:	bf00      	nop
 8006c40:	2000239d 	.word	0x2000239d

08006c44 <__sfp_lock_release>:
 8006c44:	4801      	ldr	r0, [pc, #4]	; (8006c4c <__sfp_lock_release+0x8>)
 8006c46:	f000 b8ae 	b.w	8006da6 <__retarget_lock_release_recursive>
 8006c4a:	bf00      	nop
 8006c4c:	2000239d 	.word	0x2000239d

08006c50 <__sinit_lock_acquire>:
 8006c50:	4801      	ldr	r0, [pc, #4]	; (8006c58 <__sinit_lock_acquire+0x8>)
 8006c52:	f000 b8a7 	b.w	8006da4 <__retarget_lock_acquire_recursive>
 8006c56:	bf00      	nop
 8006c58:	2000239e 	.word	0x2000239e

08006c5c <__sinit_lock_release>:
 8006c5c:	4801      	ldr	r0, [pc, #4]	; (8006c64 <__sinit_lock_release+0x8>)
 8006c5e:	f000 b8a2 	b.w	8006da6 <__retarget_lock_release_recursive>
 8006c62:	bf00      	nop
 8006c64:	2000239e 	.word	0x2000239e

08006c68 <__sinit>:
 8006c68:	b510      	push	{r4, lr}
 8006c6a:	4604      	mov	r4, r0
 8006c6c:	f7ff fff0 	bl	8006c50 <__sinit_lock_acquire>
 8006c70:	69a3      	ldr	r3, [r4, #24]
 8006c72:	b11b      	cbz	r3, 8006c7c <__sinit+0x14>
 8006c74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c78:	f7ff bff0 	b.w	8006c5c <__sinit_lock_release>
 8006c7c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006c80:	6523      	str	r3, [r4, #80]	; 0x50
 8006c82:	4b13      	ldr	r3, [pc, #76]	; (8006cd0 <__sinit+0x68>)
 8006c84:	4a13      	ldr	r2, [pc, #76]	; (8006cd4 <__sinit+0x6c>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	62a2      	str	r2, [r4, #40]	; 0x28
 8006c8a:	42a3      	cmp	r3, r4
 8006c8c:	bf04      	itt	eq
 8006c8e:	2301      	moveq	r3, #1
 8006c90:	61a3      	streq	r3, [r4, #24]
 8006c92:	4620      	mov	r0, r4
 8006c94:	f000 f820 	bl	8006cd8 <__sfp>
 8006c98:	6060      	str	r0, [r4, #4]
 8006c9a:	4620      	mov	r0, r4
 8006c9c:	f000 f81c 	bl	8006cd8 <__sfp>
 8006ca0:	60a0      	str	r0, [r4, #8]
 8006ca2:	4620      	mov	r0, r4
 8006ca4:	f000 f818 	bl	8006cd8 <__sfp>
 8006ca8:	2200      	movs	r2, #0
 8006caa:	60e0      	str	r0, [r4, #12]
 8006cac:	2104      	movs	r1, #4
 8006cae:	6860      	ldr	r0, [r4, #4]
 8006cb0:	f7ff ff82 	bl	8006bb8 <std>
 8006cb4:	68a0      	ldr	r0, [r4, #8]
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	2109      	movs	r1, #9
 8006cba:	f7ff ff7d 	bl	8006bb8 <std>
 8006cbe:	68e0      	ldr	r0, [r4, #12]
 8006cc0:	2202      	movs	r2, #2
 8006cc2:	2112      	movs	r1, #18
 8006cc4:	f7ff ff78 	bl	8006bb8 <std>
 8006cc8:	2301      	movs	r3, #1
 8006cca:	61a3      	str	r3, [r4, #24]
 8006ccc:	e7d2      	b.n	8006c74 <__sinit+0xc>
 8006cce:	bf00      	nop
 8006cd0:	08007108 	.word	0x08007108
 8006cd4:	08006c01 	.word	0x08006c01

08006cd8 <__sfp>:
 8006cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cda:	4607      	mov	r7, r0
 8006cdc:	f7ff ffac 	bl	8006c38 <__sfp_lock_acquire>
 8006ce0:	4b1e      	ldr	r3, [pc, #120]	; (8006d5c <__sfp+0x84>)
 8006ce2:	681e      	ldr	r6, [r3, #0]
 8006ce4:	69b3      	ldr	r3, [r6, #24]
 8006ce6:	b913      	cbnz	r3, 8006cee <__sfp+0x16>
 8006ce8:	4630      	mov	r0, r6
 8006cea:	f7ff ffbd 	bl	8006c68 <__sinit>
 8006cee:	3648      	adds	r6, #72	; 0x48
 8006cf0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006cf4:	3b01      	subs	r3, #1
 8006cf6:	d503      	bpl.n	8006d00 <__sfp+0x28>
 8006cf8:	6833      	ldr	r3, [r6, #0]
 8006cfa:	b30b      	cbz	r3, 8006d40 <__sfp+0x68>
 8006cfc:	6836      	ldr	r6, [r6, #0]
 8006cfe:	e7f7      	b.n	8006cf0 <__sfp+0x18>
 8006d00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006d04:	b9d5      	cbnz	r5, 8006d3c <__sfp+0x64>
 8006d06:	4b16      	ldr	r3, [pc, #88]	; (8006d60 <__sfp+0x88>)
 8006d08:	60e3      	str	r3, [r4, #12]
 8006d0a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006d0e:	6665      	str	r5, [r4, #100]	; 0x64
 8006d10:	f000 f847 	bl	8006da2 <__retarget_lock_init_recursive>
 8006d14:	f7ff ff96 	bl	8006c44 <__sfp_lock_release>
 8006d18:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006d1c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006d20:	6025      	str	r5, [r4, #0]
 8006d22:	61a5      	str	r5, [r4, #24]
 8006d24:	2208      	movs	r2, #8
 8006d26:	4629      	mov	r1, r5
 8006d28:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006d2c:	f7ff f93e 	bl	8005fac <memset>
 8006d30:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006d34:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006d38:	4620      	mov	r0, r4
 8006d3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d3c:	3468      	adds	r4, #104	; 0x68
 8006d3e:	e7d9      	b.n	8006cf4 <__sfp+0x1c>
 8006d40:	2104      	movs	r1, #4
 8006d42:	4638      	mov	r0, r7
 8006d44:	f7ff ff62 	bl	8006c0c <__sfmoreglue>
 8006d48:	4604      	mov	r4, r0
 8006d4a:	6030      	str	r0, [r6, #0]
 8006d4c:	2800      	cmp	r0, #0
 8006d4e:	d1d5      	bne.n	8006cfc <__sfp+0x24>
 8006d50:	f7ff ff78 	bl	8006c44 <__sfp_lock_release>
 8006d54:	230c      	movs	r3, #12
 8006d56:	603b      	str	r3, [r7, #0]
 8006d58:	e7ee      	b.n	8006d38 <__sfp+0x60>
 8006d5a:	bf00      	nop
 8006d5c:	08007108 	.word	0x08007108
 8006d60:	ffff0001 	.word	0xffff0001

08006d64 <_fwalk_reent>:
 8006d64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d68:	4606      	mov	r6, r0
 8006d6a:	4688      	mov	r8, r1
 8006d6c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006d70:	2700      	movs	r7, #0
 8006d72:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006d76:	f1b9 0901 	subs.w	r9, r9, #1
 8006d7a:	d505      	bpl.n	8006d88 <_fwalk_reent+0x24>
 8006d7c:	6824      	ldr	r4, [r4, #0]
 8006d7e:	2c00      	cmp	r4, #0
 8006d80:	d1f7      	bne.n	8006d72 <_fwalk_reent+0xe>
 8006d82:	4638      	mov	r0, r7
 8006d84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d88:	89ab      	ldrh	r3, [r5, #12]
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	d907      	bls.n	8006d9e <_fwalk_reent+0x3a>
 8006d8e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d92:	3301      	adds	r3, #1
 8006d94:	d003      	beq.n	8006d9e <_fwalk_reent+0x3a>
 8006d96:	4629      	mov	r1, r5
 8006d98:	4630      	mov	r0, r6
 8006d9a:	47c0      	blx	r8
 8006d9c:	4307      	orrs	r7, r0
 8006d9e:	3568      	adds	r5, #104	; 0x68
 8006da0:	e7e9      	b.n	8006d76 <_fwalk_reent+0x12>

08006da2 <__retarget_lock_init_recursive>:
 8006da2:	4770      	bx	lr

08006da4 <__retarget_lock_acquire_recursive>:
 8006da4:	4770      	bx	lr

08006da6 <__retarget_lock_release_recursive>:
 8006da6:	4770      	bx	lr

08006da8 <__swhatbuf_r>:
 8006da8:	b570      	push	{r4, r5, r6, lr}
 8006daa:	460e      	mov	r6, r1
 8006dac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006db0:	2900      	cmp	r1, #0
 8006db2:	b096      	sub	sp, #88	; 0x58
 8006db4:	4614      	mov	r4, r2
 8006db6:	461d      	mov	r5, r3
 8006db8:	da08      	bge.n	8006dcc <__swhatbuf_r+0x24>
 8006dba:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	602a      	str	r2, [r5, #0]
 8006dc2:	061a      	lsls	r2, r3, #24
 8006dc4:	d410      	bmi.n	8006de8 <__swhatbuf_r+0x40>
 8006dc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006dca:	e00e      	b.n	8006dea <__swhatbuf_r+0x42>
 8006dcc:	466a      	mov	r2, sp
 8006dce:	f000 f8fb 	bl	8006fc8 <_fstat_r>
 8006dd2:	2800      	cmp	r0, #0
 8006dd4:	dbf1      	blt.n	8006dba <__swhatbuf_r+0x12>
 8006dd6:	9a01      	ldr	r2, [sp, #4]
 8006dd8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006ddc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006de0:	425a      	negs	r2, r3
 8006de2:	415a      	adcs	r2, r3
 8006de4:	602a      	str	r2, [r5, #0]
 8006de6:	e7ee      	b.n	8006dc6 <__swhatbuf_r+0x1e>
 8006de8:	2340      	movs	r3, #64	; 0x40
 8006dea:	2000      	movs	r0, #0
 8006dec:	6023      	str	r3, [r4, #0]
 8006dee:	b016      	add	sp, #88	; 0x58
 8006df0:	bd70      	pop	{r4, r5, r6, pc}
	...

08006df4 <__smakebuf_r>:
 8006df4:	898b      	ldrh	r3, [r1, #12]
 8006df6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006df8:	079d      	lsls	r5, r3, #30
 8006dfa:	4606      	mov	r6, r0
 8006dfc:	460c      	mov	r4, r1
 8006dfe:	d507      	bpl.n	8006e10 <__smakebuf_r+0x1c>
 8006e00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006e04:	6023      	str	r3, [r4, #0]
 8006e06:	6123      	str	r3, [r4, #16]
 8006e08:	2301      	movs	r3, #1
 8006e0a:	6163      	str	r3, [r4, #20]
 8006e0c:	b002      	add	sp, #8
 8006e0e:	bd70      	pop	{r4, r5, r6, pc}
 8006e10:	ab01      	add	r3, sp, #4
 8006e12:	466a      	mov	r2, sp
 8006e14:	f7ff ffc8 	bl	8006da8 <__swhatbuf_r>
 8006e18:	9900      	ldr	r1, [sp, #0]
 8006e1a:	4605      	mov	r5, r0
 8006e1c:	4630      	mov	r0, r6
 8006e1e:	f7ff f939 	bl	8006094 <_malloc_r>
 8006e22:	b948      	cbnz	r0, 8006e38 <__smakebuf_r+0x44>
 8006e24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e28:	059a      	lsls	r2, r3, #22
 8006e2a:	d4ef      	bmi.n	8006e0c <__smakebuf_r+0x18>
 8006e2c:	f023 0303 	bic.w	r3, r3, #3
 8006e30:	f043 0302 	orr.w	r3, r3, #2
 8006e34:	81a3      	strh	r3, [r4, #12]
 8006e36:	e7e3      	b.n	8006e00 <__smakebuf_r+0xc>
 8006e38:	4b0d      	ldr	r3, [pc, #52]	; (8006e70 <__smakebuf_r+0x7c>)
 8006e3a:	62b3      	str	r3, [r6, #40]	; 0x28
 8006e3c:	89a3      	ldrh	r3, [r4, #12]
 8006e3e:	6020      	str	r0, [r4, #0]
 8006e40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e44:	81a3      	strh	r3, [r4, #12]
 8006e46:	9b00      	ldr	r3, [sp, #0]
 8006e48:	6163      	str	r3, [r4, #20]
 8006e4a:	9b01      	ldr	r3, [sp, #4]
 8006e4c:	6120      	str	r0, [r4, #16]
 8006e4e:	b15b      	cbz	r3, 8006e68 <__smakebuf_r+0x74>
 8006e50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e54:	4630      	mov	r0, r6
 8006e56:	f000 f8c9 	bl	8006fec <_isatty_r>
 8006e5a:	b128      	cbz	r0, 8006e68 <__smakebuf_r+0x74>
 8006e5c:	89a3      	ldrh	r3, [r4, #12]
 8006e5e:	f023 0303 	bic.w	r3, r3, #3
 8006e62:	f043 0301 	orr.w	r3, r3, #1
 8006e66:	81a3      	strh	r3, [r4, #12]
 8006e68:	89a0      	ldrh	r0, [r4, #12]
 8006e6a:	4305      	orrs	r5, r0
 8006e6c:	81a5      	strh	r5, [r4, #12]
 8006e6e:	e7cd      	b.n	8006e0c <__smakebuf_r+0x18>
 8006e70:	08006c01 	.word	0x08006c01

08006e74 <_raise_r>:
 8006e74:	291f      	cmp	r1, #31
 8006e76:	b538      	push	{r3, r4, r5, lr}
 8006e78:	4604      	mov	r4, r0
 8006e7a:	460d      	mov	r5, r1
 8006e7c:	d904      	bls.n	8006e88 <_raise_r+0x14>
 8006e7e:	2316      	movs	r3, #22
 8006e80:	6003      	str	r3, [r0, #0]
 8006e82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e86:	bd38      	pop	{r3, r4, r5, pc}
 8006e88:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006e8a:	b112      	cbz	r2, 8006e92 <_raise_r+0x1e>
 8006e8c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006e90:	b94b      	cbnz	r3, 8006ea6 <_raise_r+0x32>
 8006e92:	4620      	mov	r0, r4
 8006e94:	f000 f830 	bl	8006ef8 <_getpid_r>
 8006e98:	462a      	mov	r2, r5
 8006e9a:	4601      	mov	r1, r0
 8006e9c:	4620      	mov	r0, r4
 8006e9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ea2:	f000 b817 	b.w	8006ed4 <_kill_r>
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	d00a      	beq.n	8006ec0 <_raise_r+0x4c>
 8006eaa:	1c59      	adds	r1, r3, #1
 8006eac:	d103      	bne.n	8006eb6 <_raise_r+0x42>
 8006eae:	2316      	movs	r3, #22
 8006eb0:	6003      	str	r3, [r0, #0]
 8006eb2:	2001      	movs	r0, #1
 8006eb4:	e7e7      	b.n	8006e86 <_raise_r+0x12>
 8006eb6:	2400      	movs	r4, #0
 8006eb8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006ebc:	4628      	mov	r0, r5
 8006ebe:	4798      	blx	r3
 8006ec0:	2000      	movs	r0, #0
 8006ec2:	e7e0      	b.n	8006e86 <_raise_r+0x12>

08006ec4 <raise>:
 8006ec4:	4b02      	ldr	r3, [pc, #8]	; (8006ed0 <raise+0xc>)
 8006ec6:	4601      	mov	r1, r0
 8006ec8:	6818      	ldr	r0, [r3, #0]
 8006eca:	f7ff bfd3 	b.w	8006e74 <_raise_r>
 8006ece:	bf00      	nop
 8006ed0:	20000010 	.word	0x20000010

08006ed4 <_kill_r>:
 8006ed4:	b538      	push	{r3, r4, r5, lr}
 8006ed6:	4d07      	ldr	r5, [pc, #28]	; (8006ef4 <_kill_r+0x20>)
 8006ed8:	2300      	movs	r3, #0
 8006eda:	4604      	mov	r4, r0
 8006edc:	4608      	mov	r0, r1
 8006ede:	4611      	mov	r1, r2
 8006ee0:	602b      	str	r3, [r5, #0]
 8006ee2:	f7fe ff29 	bl	8005d38 <_kill>
 8006ee6:	1c43      	adds	r3, r0, #1
 8006ee8:	d102      	bne.n	8006ef0 <_kill_r+0x1c>
 8006eea:	682b      	ldr	r3, [r5, #0]
 8006eec:	b103      	cbz	r3, 8006ef0 <_kill_r+0x1c>
 8006eee:	6023      	str	r3, [r4, #0]
 8006ef0:	bd38      	pop	{r3, r4, r5, pc}
 8006ef2:	bf00      	nop
 8006ef4:	20002398 	.word	0x20002398

08006ef8 <_getpid_r>:
 8006ef8:	f7fe bf16 	b.w	8005d28 <_getpid>

08006efc <__sread>:
 8006efc:	b510      	push	{r4, lr}
 8006efe:	460c      	mov	r4, r1
 8006f00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f04:	f000 f894 	bl	8007030 <_read_r>
 8006f08:	2800      	cmp	r0, #0
 8006f0a:	bfab      	itete	ge
 8006f0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006f0e:	89a3      	ldrhlt	r3, [r4, #12]
 8006f10:	181b      	addge	r3, r3, r0
 8006f12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006f16:	bfac      	ite	ge
 8006f18:	6563      	strge	r3, [r4, #84]	; 0x54
 8006f1a:	81a3      	strhlt	r3, [r4, #12]
 8006f1c:	bd10      	pop	{r4, pc}

08006f1e <__swrite>:
 8006f1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f22:	461f      	mov	r7, r3
 8006f24:	898b      	ldrh	r3, [r1, #12]
 8006f26:	05db      	lsls	r3, r3, #23
 8006f28:	4605      	mov	r5, r0
 8006f2a:	460c      	mov	r4, r1
 8006f2c:	4616      	mov	r6, r2
 8006f2e:	d505      	bpl.n	8006f3c <__swrite+0x1e>
 8006f30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f34:	2302      	movs	r3, #2
 8006f36:	2200      	movs	r2, #0
 8006f38:	f000 f868 	bl	800700c <_lseek_r>
 8006f3c:	89a3      	ldrh	r3, [r4, #12]
 8006f3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f46:	81a3      	strh	r3, [r4, #12]
 8006f48:	4632      	mov	r2, r6
 8006f4a:	463b      	mov	r3, r7
 8006f4c:	4628      	mov	r0, r5
 8006f4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f52:	f000 b817 	b.w	8006f84 <_write_r>

08006f56 <__sseek>:
 8006f56:	b510      	push	{r4, lr}
 8006f58:	460c      	mov	r4, r1
 8006f5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f5e:	f000 f855 	bl	800700c <_lseek_r>
 8006f62:	1c43      	adds	r3, r0, #1
 8006f64:	89a3      	ldrh	r3, [r4, #12]
 8006f66:	bf15      	itete	ne
 8006f68:	6560      	strne	r0, [r4, #84]	; 0x54
 8006f6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006f6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006f72:	81a3      	strheq	r3, [r4, #12]
 8006f74:	bf18      	it	ne
 8006f76:	81a3      	strhne	r3, [r4, #12]
 8006f78:	bd10      	pop	{r4, pc}

08006f7a <__sclose>:
 8006f7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f7e:	f000 b813 	b.w	8006fa8 <_close_r>
	...

08006f84 <_write_r>:
 8006f84:	b538      	push	{r3, r4, r5, lr}
 8006f86:	4d07      	ldr	r5, [pc, #28]	; (8006fa4 <_write_r+0x20>)
 8006f88:	4604      	mov	r4, r0
 8006f8a:	4608      	mov	r0, r1
 8006f8c:	4611      	mov	r1, r2
 8006f8e:	2200      	movs	r2, #0
 8006f90:	602a      	str	r2, [r5, #0]
 8006f92:	461a      	mov	r2, r3
 8006f94:	f7fe ff07 	bl	8005da6 <_write>
 8006f98:	1c43      	adds	r3, r0, #1
 8006f9a:	d102      	bne.n	8006fa2 <_write_r+0x1e>
 8006f9c:	682b      	ldr	r3, [r5, #0]
 8006f9e:	b103      	cbz	r3, 8006fa2 <_write_r+0x1e>
 8006fa0:	6023      	str	r3, [r4, #0]
 8006fa2:	bd38      	pop	{r3, r4, r5, pc}
 8006fa4:	20002398 	.word	0x20002398

08006fa8 <_close_r>:
 8006fa8:	b538      	push	{r3, r4, r5, lr}
 8006faa:	4d06      	ldr	r5, [pc, #24]	; (8006fc4 <_close_r+0x1c>)
 8006fac:	2300      	movs	r3, #0
 8006fae:	4604      	mov	r4, r0
 8006fb0:	4608      	mov	r0, r1
 8006fb2:	602b      	str	r3, [r5, #0]
 8006fb4:	f7fe ff13 	bl	8005dde <_close>
 8006fb8:	1c43      	adds	r3, r0, #1
 8006fba:	d102      	bne.n	8006fc2 <_close_r+0x1a>
 8006fbc:	682b      	ldr	r3, [r5, #0]
 8006fbe:	b103      	cbz	r3, 8006fc2 <_close_r+0x1a>
 8006fc0:	6023      	str	r3, [r4, #0]
 8006fc2:	bd38      	pop	{r3, r4, r5, pc}
 8006fc4:	20002398 	.word	0x20002398

08006fc8 <_fstat_r>:
 8006fc8:	b538      	push	{r3, r4, r5, lr}
 8006fca:	4d07      	ldr	r5, [pc, #28]	; (8006fe8 <_fstat_r+0x20>)
 8006fcc:	2300      	movs	r3, #0
 8006fce:	4604      	mov	r4, r0
 8006fd0:	4608      	mov	r0, r1
 8006fd2:	4611      	mov	r1, r2
 8006fd4:	602b      	str	r3, [r5, #0]
 8006fd6:	f7fe ff0e 	bl	8005df6 <_fstat>
 8006fda:	1c43      	adds	r3, r0, #1
 8006fdc:	d102      	bne.n	8006fe4 <_fstat_r+0x1c>
 8006fde:	682b      	ldr	r3, [r5, #0]
 8006fe0:	b103      	cbz	r3, 8006fe4 <_fstat_r+0x1c>
 8006fe2:	6023      	str	r3, [r4, #0]
 8006fe4:	bd38      	pop	{r3, r4, r5, pc}
 8006fe6:	bf00      	nop
 8006fe8:	20002398 	.word	0x20002398

08006fec <_isatty_r>:
 8006fec:	b538      	push	{r3, r4, r5, lr}
 8006fee:	4d06      	ldr	r5, [pc, #24]	; (8007008 <_isatty_r+0x1c>)
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	4604      	mov	r4, r0
 8006ff4:	4608      	mov	r0, r1
 8006ff6:	602b      	str	r3, [r5, #0]
 8006ff8:	f7fe ff0d 	bl	8005e16 <_isatty>
 8006ffc:	1c43      	adds	r3, r0, #1
 8006ffe:	d102      	bne.n	8007006 <_isatty_r+0x1a>
 8007000:	682b      	ldr	r3, [r5, #0]
 8007002:	b103      	cbz	r3, 8007006 <_isatty_r+0x1a>
 8007004:	6023      	str	r3, [r4, #0]
 8007006:	bd38      	pop	{r3, r4, r5, pc}
 8007008:	20002398 	.word	0x20002398

0800700c <_lseek_r>:
 800700c:	b538      	push	{r3, r4, r5, lr}
 800700e:	4d07      	ldr	r5, [pc, #28]	; (800702c <_lseek_r+0x20>)
 8007010:	4604      	mov	r4, r0
 8007012:	4608      	mov	r0, r1
 8007014:	4611      	mov	r1, r2
 8007016:	2200      	movs	r2, #0
 8007018:	602a      	str	r2, [r5, #0]
 800701a:	461a      	mov	r2, r3
 800701c:	f7fe ff06 	bl	8005e2c <_lseek>
 8007020:	1c43      	adds	r3, r0, #1
 8007022:	d102      	bne.n	800702a <_lseek_r+0x1e>
 8007024:	682b      	ldr	r3, [r5, #0]
 8007026:	b103      	cbz	r3, 800702a <_lseek_r+0x1e>
 8007028:	6023      	str	r3, [r4, #0]
 800702a:	bd38      	pop	{r3, r4, r5, pc}
 800702c:	20002398 	.word	0x20002398

08007030 <_read_r>:
 8007030:	b538      	push	{r3, r4, r5, lr}
 8007032:	4d07      	ldr	r5, [pc, #28]	; (8007050 <_read_r+0x20>)
 8007034:	4604      	mov	r4, r0
 8007036:	4608      	mov	r0, r1
 8007038:	4611      	mov	r1, r2
 800703a:	2200      	movs	r2, #0
 800703c:	602a      	str	r2, [r5, #0]
 800703e:	461a      	mov	r2, r3
 8007040:	f7fe fe94 	bl	8005d6c <_read>
 8007044:	1c43      	adds	r3, r0, #1
 8007046:	d102      	bne.n	800704e <_read_r+0x1e>
 8007048:	682b      	ldr	r3, [r5, #0]
 800704a:	b103      	cbz	r3, 800704e <_read_r+0x1e>
 800704c:	6023      	str	r3, [r4, #0]
 800704e:	bd38      	pop	{r3, r4, r5, pc}
 8007050:	20002398 	.word	0x20002398

08007054 <_gettimeofday>:
 8007054:	4b02      	ldr	r3, [pc, #8]	; (8007060 <_gettimeofday+0xc>)
 8007056:	2258      	movs	r2, #88	; 0x58
 8007058:	601a      	str	r2, [r3, #0]
 800705a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800705e:	4770      	bx	lr
 8007060:	20002398 	.word	0x20002398

08007064 <_init>:
 8007064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007066:	bf00      	nop
 8007068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800706a:	bc08      	pop	{r3}
 800706c:	469e      	mov	lr, r3
 800706e:	4770      	bx	lr

08007070 <_fini>:
 8007070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007072:	bf00      	nop
 8007074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007076:	bc08      	pop	{r3}
 8007078:	469e      	mov	lr, r3
 800707a:	4770      	bx	lr
