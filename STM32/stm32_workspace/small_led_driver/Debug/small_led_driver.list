
small_led_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009750  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000024c  080098e0  080098e0  000198e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b2c  08009b2c  00020108  2**0
                  CONTENTS
  4 .ARM          00000008  08009b2c  08009b2c  00019b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b34  08009b34  00020108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b34  08009b34  00019b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b38  08009b38  00019b38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000108  20000000  08009b3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003300  20000108  08009c44  00020108  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003408  08009c44  00023408  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002368b  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004f56  00000000  00000000  000437c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d98  00000000  00000000  00048720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b80  00000000  00000000  0004a4b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027a1d  00000000  00000000  0004c038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000254d7  00000000  00000000  00073a55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9570  00000000  00000000  00098f2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019249c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008420  00000000  00000000  001924ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  0019a90c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  0019a930  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000108 	.word	0x20000108
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080098c8 	.word	0x080098c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000010c 	.word	0x2000010c
 80001cc:	080098c8 	.word	0x080098c8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <color_led_init>:

color_hex_code_e g_color_hex_codes[NUM_COLORS];


void color_led_init(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
    // initialize color arrays
    g_color_hex_codes[COLORS_RED] = COLOR_HEX_RED;
 8000578:	4b26      	ldr	r3, [pc, #152]	; (8000614 <color_led_init+0xa0>)
 800057a:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 800057e:	601a      	str	r2, [r3, #0]
    g_color_hex_codes[COLORS_LIME] = COLOR_HEX_LIME;
 8000580:	4b24      	ldr	r3, [pc, #144]	; (8000614 <color_led_init+0xa0>)
 8000582:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8000586:	605a      	str	r2, [r3, #4]
    g_color_hex_codes[COLORS_BLUE] = COLOR_HEX_BLUE;
 8000588:	4b22      	ldr	r3, [pc, #136]	; (8000614 <color_led_init+0xa0>)
 800058a:	22ff      	movs	r2, #255	; 0xff
 800058c:	609a      	str	r2, [r3, #8]
    g_color_hex_codes[COLORS_YELLOW] = COLOR_HEX_YELLOW;
 800058e:	4b21      	ldr	r3, [pc, #132]	; (8000614 <color_led_init+0xa0>)
 8000590:	4a21      	ldr	r2, [pc, #132]	; (8000618 <color_led_init+0xa4>)
 8000592:	60da      	str	r2, [r3, #12]
    g_color_hex_codes[COLORS_CYAN] = COLOR_HEX_CYAN;
 8000594:	4b1f      	ldr	r3, [pc, #124]	; (8000614 <color_led_init+0xa0>)
 8000596:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800059a:	611a      	str	r2, [r3, #16]
    g_color_hex_codes[COLORS_MAGENTA] = COLOR_HEX_MAGENTA;
 800059c:	4b1d      	ldr	r3, [pc, #116]	; (8000614 <color_led_init+0xa0>)
 800059e:	f04f 12ff 	mov.w	r2, #16711935	; 0xff00ff
 80005a2:	615a      	str	r2, [r3, #20]
    g_color_hex_codes[COLORS_GREEN] = COLOR_HEX_GREEN;
 80005a4:	4b1b      	ldr	r3, [pc, #108]	; (8000614 <color_led_init+0xa0>)
 80005a6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80005aa:	619a      	str	r2, [r3, #24]
    g_color_hex_codes[COLORS_PURPLE] = COLOR_HEX_PURPLE;
 80005ac:	4b19      	ldr	r3, [pc, #100]	; (8000614 <color_led_init+0xa0>)
 80005ae:	f04f 1280 	mov.w	r2, #8388736	; 0x800080
 80005b2:	61da      	str	r2, [r3, #28]
    g_color_hex_codes[COLORS_TEAL] = COLOR_HEX_TEAL;
 80005b4:	4b17      	ldr	r3, [pc, #92]	; (8000614 <color_led_init+0xa0>)
 80005b6:	f248 0280 	movw	r2, #32896	; 0x8080
 80005ba:	621a      	str	r2, [r3, #32]
    g_color_hex_codes[COLORS_NAVY] = COLOR_HEX_NAVY;
 80005bc:	4b15      	ldr	r3, [pc, #84]	; (8000614 <color_led_init+0xa0>)
 80005be:	2280      	movs	r2, #128	; 0x80
 80005c0:	625a      	str	r2, [r3, #36]	; 0x24
    g_color_hex_codes[COLORS_ORANGE_RED] = COLOR_HEX_ORANGE_RED;
 80005c2:	4b14      	ldr	r3, [pc, #80]	; (8000614 <color_led_init+0xa0>)
 80005c4:	4a15      	ldr	r2, [pc, #84]	; (800061c <color_led_init+0xa8>)
 80005c6:	629a      	str	r2, [r3, #40]	; 0x28
    g_color_hex_codes[COLORS_ORANGE] = COLOR_HEX_ORANGE;
 80005c8:	4b12      	ldr	r3, [pc, #72]	; (8000614 <color_led_init+0xa0>)
 80005ca:	4a15      	ldr	r2, [pc, #84]	; (8000620 <color_led_init+0xac>)
 80005cc:	62da      	str	r2, [r3, #44]	; 0x2c
    g_color_hex_codes[COLORS_KHAKI] = COLOR_HEX_KHAKI;
 80005ce:	4b11      	ldr	r3, [pc, #68]	; (8000614 <color_led_init+0xa0>)
 80005d0:	4a14      	ldr	r2, [pc, #80]	; (8000624 <color_led_init+0xb0>)
 80005d2:	631a      	str	r2, [r3, #48]	; 0x30
    g_color_hex_codes[COLORS_LAWN_GREEN] = COLOR_HEX_LAWN_GREEN;
 80005d4:	4b0f      	ldr	r3, [pc, #60]	; (8000614 <color_led_init+0xa0>)
 80005d6:	4a14      	ldr	r2, [pc, #80]	; (8000628 <color_led_init+0xb4>)
 80005d8:	635a      	str	r2, [r3, #52]	; 0x34
    g_color_hex_codes[COLORS_SPRING_GREEN] = COLOR_HEX_SPRING_GREEN;
 80005da:	4b0e      	ldr	r3, [pc, #56]	; (8000614 <color_led_init+0xa0>)
 80005dc:	f64f 727f 	movw	r2, #65407	; 0xff7f
 80005e0:	639a      	str	r2, [r3, #56]	; 0x38
    g_color_hex_codes[COLORS_MIDNIGHT_BLUE] = COLOR_HEX_MIDNIGHT_BLUE;
 80005e2:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <color_led_init+0xa0>)
 80005e4:	4a11      	ldr	r2, [pc, #68]	; (800062c <color_led_init+0xb8>)
 80005e6:	63da      	str	r2, [r3, #60]	; 0x3c
    g_color_hex_codes[COLORS_BLUE_VIOLET] = COLOR_HEX_BLUE_VIOLET;
 80005e8:	4b0a      	ldr	r3, [pc, #40]	; (8000614 <color_led_init+0xa0>)
 80005ea:	4a11      	ldr	r2, [pc, #68]	; (8000630 <color_led_init+0xbc>)
 80005ec:	641a      	str	r2, [r3, #64]	; 0x40
    g_color_hex_codes[COLORS_DARK_MAGENTA] = COLOR_HEX_DARK_MAGENTA;
 80005ee:	4b09      	ldr	r3, [pc, #36]	; (8000614 <color_led_init+0xa0>)
 80005f0:	f04f 128b 	mov.w	r2, #9109643	; 0x8b008b
 80005f4:	645a      	str	r2, [r3, #68]	; 0x44
    g_color_hex_codes[COLORS_HOT_PINK] = COLOR_HEX_HOT_PINK;
 80005f6:	4b07      	ldr	r3, [pc, #28]	; (8000614 <color_led_init+0xa0>)
 80005f8:	4a0e      	ldr	r2, [pc, #56]	; (8000634 <color_led_init+0xc0>)
 80005fa:	649a      	str	r2, [r3, #72]	; 0x48
    g_color_hex_codes[COLORS_MINT] = COLOR_HEX_MINT;
 80005fc:	4b05      	ldr	r3, [pc, #20]	; (8000614 <color_led_init+0xa0>)
 80005fe:	4a0e      	ldr	r2, [pc, #56]	; (8000638 <color_led_init+0xc4>)
 8000600:	64da      	str	r2, [r3, #76]	; 0x4c
    //g_color_hex_codes[COLORS_GRAY] = COLOR_HEX_GRAY;
    g_color_hex_codes[COLORS_BROWN] = COLOR_HEX_BROWN;
 8000602:	4b04      	ldr	r3, [pc, #16]	; (8000614 <color_led_init+0xa0>)
 8000604:	4a0d      	ldr	r2, [pc, #52]	; (800063c <color_led_init+0xc8>)
 8000606:	651a      	str	r2, [r3, #80]	; 0x50
}
 8000608:	bf00      	nop
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	20000124 	.word	0x20000124
 8000618:	00ffff00 	.word	0x00ffff00
 800061c:	00ff4500 	.word	0x00ff4500
 8000620:	00ffa500 	.word	0x00ffa500
 8000624:	00f0e68c 	.word	0x00f0e68c
 8000628:	007cfc00 	.word	0x007cfc00
 800062c:	00191970 	.word	0x00191970
 8000630:	008a2be2 	.word	0x008a2be2
 8000634:	00ff69b4 	.word	0x00ff69b4
 8000638:	004ebd88 	.word	0x004ebd88
 800063c:	00a52a2a 	.word	0x00a52a2a

08000640 <current_monitor_init>:
    return g_max_current_ratio;
}


void current_monitor_init(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
    while ((g_max_current_ratio * ((float)CURRENT_MONITOR_MAX_CURRENT_PER_LED_MA / 1000) * NUM_LEDS) > (float)CURRENT_MONITOR_MAX_CURRENT_DRAW_A)
 8000644:	e009      	b.n	800065a <current_monitor_init+0x1a>
    {
        g_max_current_ratio -= 0.05f;
 8000646:	4b15      	ldr	r3, [pc, #84]	; (800069c <current_monitor_init+0x5c>)
 8000648:	edd3 7a00 	vldr	s15, [r3]
 800064c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80006a0 <current_monitor_init+0x60>
 8000650:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000654:	4b11      	ldr	r3, [pc, #68]	; (800069c <current_monitor_init+0x5c>)
 8000656:	edc3 7a00 	vstr	s15, [r3]
    while ((g_max_current_ratio * ((float)CURRENT_MONITOR_MAX_CURRENT_PER_LED_MA / 1000) * NUM_LEDS) > (float)CURRENT_MONITOR_MAX_CURRENT_DRAW_A)
 800065a:	4b10      	ldr	r3, [pc, #64]	; (800069c <current_monitor_init+0x5c>)
 800065c:	edd3 7a00 	vldr	s15, [r3]
 8000660:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80006a4 <current_monitor_init+0x64>
 8000664:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000668:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80006a8 <current_monitor_init+0x68>
 800066c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000670:	eeb2 7a03 	vmov.f32	s14, #35	; 0x41180000  9.5
 8000674:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800067c:	dce3      	bgt.n	8000646 <current_monitor_init+0x6>
    }
    if (g_max_current_ratio <= 0) while(1); // broken..
 800067e:	4b07      	ldr	r3, [pc, #28]	; (800069c <current_monitor_init+0x5c>)
 8000680:	edd3 7a00 	vldr	s15, [r3]
 8000684:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800068c:	d900      	bls.n	8000690 <current_monitor_init+0x50>
    //g_max_current_ratio = 1.0f;
}
 800068e:	e000      	b.n	8000692 <current_monitor_init+0x52>
    if (g_max_current_ratio <= 0) while(1); // broken..
 8000690:	e7fe      	b.n	8000690 <current_monitor_init+0x50>
}
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	20000000 	.word	0x20000000
 80006a0:	3d4ccccd 	.word	0x3d4ccccd
 80006a4:	3d23d70a 	.word	0x3d23d70a
 80006a8:	4400c000 	.word	0x4400c000

080006ac <semaphore_create>:
SemaphoreHandle_t g_dma_fill_semaphore;
StaticSemaphore_t g_dma_fill_semaphore_buffer;


void semaphore_create(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af02      	add	r7, sp, #8
    g_dma_transfer_semaphore = xSemaphoreCreateBinaryStatic(&g_dma_transfer_semaphore_buffer);
 80006b2:	2303      	movs	r3, #3
 80006b4:	9300      	str	r3, [sp, #0]
 80006b6:	4b12      	ldr	r3, [pc, #72]	; (8000700 <semaphore_create+0x54>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	2100      	movs	r1, #0
 80006bc:	2001      	movs	r0, #1
 80006be:	f000 fb67 	bl	8000d90 <xQueueGenericCreateStatic>
 80006c2:	4603      	mov	r3, r0
 80006c4:	4a0f      	ldr	r2, [pc, #60]	; (8000704 <semaphore_create+0x58>)
 80006c6:	6013      	str	r3, [r2, #0]
    g_dma_fill_semaphore = xSemaphoreCreateBinaryStatic(&g_dma_fill_semaphore_buffer);
 80006c8:	2303      	movs	r3, #3
 80006ca:	9300      	str	r3, [sp, #0]
 80006cc:	4b0e      	ldr	r3, [pc, #56]	; (8000708 <semaphore_create+0x5c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	2100      	movs	r1, #0
 80006d2:	2001      	movs	r0, #1
 80006d4:	f000 fb5c 	bl	8000d90 <xQueueGenericCreateStatic>
 80006d8:	4603      	mov	r3, r0
 80006da:	4a0c      	ldr	r2, [pc, #48]	; (800070c <semaphore_create+0x60>)
 80006dc:	6013      	str	r3, [r2, #0]
    xSemaphoreGive(g_dma_transfer_semaphore);
 80006de:	4b09      	ldr	r3, [pc, #36]	; (8000704 <semaphore_create+0x58>)
 80006e0:	6818      	ldr	r0, [r3, #0]
 80006e2:	2300      	movs	r3, #0
 80006e4:	2200      	movs	r2, #0
 80006e6:	2100      	movs	r1, #0
 80006e8:	f000 fbee 	bl	8000ec8 <xQueueGenericSend>
    xSemaphoreGive(g_dma_fill_semaphore);
 80006ec:	4b07      	ldr	r3, [pc, #28]	; (800070c <semaphore_create+0x60>)
 80006ee:	6818      	ldr	r0, [r3, #0]
 80006f0:	2300      	movs	r3, #0
 80006f2:	2200      	movs	r2, #0
 80006f4:	2100      	movs	r1, #0
 80006f6:	f000 fbe7 	bl	8000ec8 <xQueueGenericSend>
}
 80006fa:	bf00      	nop
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	2000017c 	.word	0x2000017c
 8000704:	20000178 	.word	0x20000178
 8000708:	200001d0 	.word	0x200001d0
 800070c:	200001cc 	.word	0x200001cc

08000710 <task_led_ctrl_strip_two>:



uint8_t rx_buffer[8] = {0x38};
void task_led_ctrl_strip_two(void *argument)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
    while (task_button_press_major_change)
 8000718:	e002      	b.n	8000720 <task_led_ctrl_strip_two+0x10>
    {
        osDelay(10);
 800071a:	200a      	movs	r0, #10
 800071c:	f000 f9cc 	bl	8000ab8 <osDelay>
    while (task_button_press_major_change)
 8000720:	4b08      	ldr	r3, [pc, #32]	; (8000744 <task_led_ctrl_strip_two+0x34>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d1f8      	bne.n	800071a <task_led_ctrl_strip_two+0xa>
//        if(HAL_UART_Transmit(&gh_host_usart, rx_buffer, 4, 10000) == HAL_OK)
//        {
//            osDelay(500);
//        }

        if(HAL_USART_Receive(&gh_host_usart, rx_buffer, 4, 10000) != HAL_OK)
 8000728:	f242 7310 	movw	r3, #10000	; 0x2710
 800072c:	2204      	movs	r2, #4
 800072e:	4906      	ldr	r1, [pc, #24]	; (8000748 <task_led_ctrl_strip_two+0x38>)
 8000730:	4806      	ldr	r0, [pc, #24]	; (800074c <task_led_ctrl_strip_two+0x3c>)
 8000732:	f006 feb8 	bl	80074a6 <HAL_USART_Receive>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d0f5      	beq.n	8000728 <task_led_ctrl_strip_two+0x18>
        {
            rx_buffer[0] = 0x92;
 800073c:	4b02      	ldr	r3, [pc, #8]	; (8000748 <task_led_ctrl_strip_two+0x38>)
 800073e:	2292      	movs	r2, #146	; 0x92
 8000740:	701a      	strb	r2, [r3, #0]
        if(HAL_USART_Receive(&gh_host_usart, rx_buffer, 4, 10000) != HAL_OK)
 8000742:	e7f1      	b.n	8000728 <task_led_ctrl_strip_two+0x18>
 8000744:	20000240 	.word	0x20000240
 8000748:	20000004 	.word	0x20000004
 800074c:	20000018 	.word	0x20000018

08000750 <reset_ws2812b>:

extern volatile int datasentflag;

uint16_t pwm_reset[50] = {0};
void reset_ws2812b(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
    //xSemaphoreTake(g_dma_transfer_semaphore, portMAX_DELAY);
    //xTaskNotify(g_dma_transfer_handle, 0, eSetValueWithOverwrite);

    HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_1, (uint32_t *)pwm_reset, sizeof(pwm_reset));
 8000754:	2364      	movs	r3, #100	; 0x64
 8000756:	4a09      	ldr	r2, [pc, #36]	; (800077c <reset_ws2812b+0x2c>)
 8000758:	2100      	movs	r1, #0
 800075a:	4809      	ldr	r0, [pc, #36]	; (8000780 <reset_ws2812b+0x30>)
 800075c:	f004 ffe6 	bl	800572c <HAL_TIM_PWM_Start_DMA>
    HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_2, (uint32_t *)pwm_reset, sizeof(pwm_reset));
 8000760:	2364      	movs	r3, #100	; 0x64
 8000762:	4a06      	ldr	r2, [pc, #24]	; (800077c <reset_ws2812b+0x2c>)
 8000764:	2104      	movs	r1, #4
 8000766:	4806      	ldr	r0, [pc, #24]	; (8000780 <reset_ws2812b+0x30>)
 8000768:	f004 ffe0 	bl	800572c <HAL_TIM_PWM_Start_DMA>
    HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_3, (uint32_t *)pwm_reset, sizeof(pwm_reset));
 800076c:	2364      	movs	r3, #100	; 0x64
 800076e:	4a03      	ldr	r2, [pc, #12]	; (800077c <reset_ws2812b+0x2c>)
 8000770:	2108      	movs	r1, #8
 8000772:	4803      	ldr	r0, [pc, #12]	; (8000780 <reset_ws2812b+0x30>)
 8000774:	f004 ffda 	bl	800572c <HAL_TIM_PWM_Start_DMA>
//    HAL_TIM_PWM_Start_DMA(&g_tim15_handle, TIM_CHANNEL_1, (uint32_t *)pwm_reset, sizeof(pwm_reset)));
//    HAL_TIM_PWM_Start_DMA(&g_tim16_handle, TIM_CHANNEL_1, (uint32_t *)pwm_reset, sizeof(pwm_reset)));
}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20000860 	.word	0x20000860
 8000780:	2000233c 	.word	0x2000233c

08000784 <ws2812b_init>:


uint32_t g_size = 0;

void ws2812b_init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0

#if defined(STRIP_1_LENGTH)
	gp_ws28128b_strip[STRIP_NUM_1] = g_strip_1;
 800078a:	4b3a      	ldr	r3, [pc, #232]	; (8000874 <ws2812b_init+0xf0>)
 800078c:	4a3a      	ldr	r2, [pc, #232]	; (8000878 <ws2812b_init+0xf4>)
 800078e:	601a      	str	r2, [r3, #0]
#endif
#if defined(STRIP_2_LENGTH)
	gp_ws28128b_strip[STRIP_NUM_2] = g_strip_2;
 8000790:	4b38      	ldr	r3, [pc, #224]	; (8000874 <ws2812b_init+0xf0>)
 8000792:	4a3a      	ldr	r2, [pc, #232]	; (800087c <ws2812b_init+0xf8>)
 8000794:	605a      	str	r2, [r3, #4]
#endif
#if defined(STRIP_4_LENGTH)
	gp_ws28128b_strip[STRIP_NUM_4] = g_strip_4;
#endif

	uint8_t num_strips = NUM_STRIPS;
 8000796:	2302      	movs	r3, #2
 8000798:	70fb      	strb	r3, [r7, #3]
	for (int iii = 0; iii < NUM_STRIPS; iii++) g_all_strip_mask |= 1 << iii;
 800079a:	2300      	movs	r3, #0
 800079c:	607b      	str	r3, [r7, #4]
 800079e:	e00f      	b.n	80007c0 <ws2812b_init+0x3c>
 80007a0:	2201      	movs	r2, #1
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	fa02 f303 	lsl.w	r3, r2, r3
 80007a8:	b21a      	sxth	r2, r3
 80007aa:	4b35      	ldr	r3, [pc, #212]	; (8000880 <ws2812b_init+0xfc>)
 80007ac:	881b      	ldrh	r3, [r3, #0]
 80007ae:	b21b      	sxth	r3, r3
 80007b0:	4313      	orrs	r3, r2
 80007b2:	b21b      	sxth	r3, r3
 80007b4:	b29a      	uxth	r2, r3
 80007b6:	4b32      	ldr	r3, [pc, #200]	; (8000880 <ws2812b_init+0xfc>)
 80007b8:	801a      	strh	r2, [r3, #0]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	3301      	adds	r3, #1
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	2b01      	cmp	r3, #1
 80007c4:	ddec      	ble.n	80007a0 <ws2812b_init+0x1c>
	switch (num_strips)
 80007c6:	78fb      	ldrb	r3, [r7, #3]
 80007c8:	2b01      	cmp	r3, #1
 80007ca:	d00e      	beq.n	80007ea <ws2812b_init+0x66>
 80007cc:	2b02      	cmp	r3, #2
 80007ce:	d11d      	bne.n	800080c <ws2812b_init+0x88>
			g_num_leds += STRIP_3_LENGTH;
			if (STRIP_3_LENGTH > g_max_strip_length) g_max_strip_length = STRIP_3_LENGTH;
#endif
#if defined(STRIP_2_LENGTH)
		case 2:
			g_num_leds += STRIP_2_LENGTH;
 80007d0:	4b2c      	ldr	r3, [pc, #176]	; (8000884 <ws2812b_init+0x100>)
 80007d2:	881b      	ldrh	r3, [r3, #0]
 80007d4:	33d7      	adds	r3, #215	; 0xd7
 80007d6:	b29a      	uxth	r2, r3
 80007d8:	4b2a      	ldr	r3, [pc, #168]	; (8000884 <ws2812b_init+0x100>)
 80007da:	801a      	strh	r2, [r3, #0]
			if (STRIP_2_LENGTH > g_max_strip_length) g_max_strip_length = STRIP_2_LENGTH;
 80007dc:	4b2a      	ldr	r3, [pc, #168]	; (8000888 <ws2812b_init+0x104>)
 80007de:	881b      	ldrh	r3, [r3, #0]
 80007e0:	2bd6      	cmp	r3, #214	; 0xd6
 80007e2:	d802      	bhi.n	80007ea <ws2812b_init+0x66>
 80007e4:	4b28      	ldr	r3, [pc, #160]	; (8000888 <ws2812b_init+0x104>)
 80007e6:	22d7      	movs	r2, #215	; 0xd7
 80007e8:	801a      	strh	r2, [r3, #0]
#endif
		case 1:
			g_num_leds += STRIP_1_LENGTH;
 80007ea:	4b26      	ldr	r3, [pc, #152]	; (8000884 <ws2812b_init+0x100>)
 80007ec:	881b      	ldrh	r3, [r3, #0]
 80007ee:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 80007f2:	b29a      	uxth	r2, r3
 80007f4:	4b23      	ldr	r3, [pc, #140]	; (8000884 <ws2812b_init+0x100>)
 80007f6:	801a      	strh	r2, [r3, #0]
			if (STRIP_1_LENGTH > g_max_strip_length) g_max_strip_length = STRIP_1_LENGTH;
 80007f8:	4b23      	ldr	r3, [pc, #140]	; (8000888 <ws2812b_init+0x104>)
 80007fa:	881b      	ldrh	r3, [r3, #0]
 80007fc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000800:	d203      	bcs.n	800080a <ws2812b_init+0x86>
 8000802:	4b21      	ldr	r3, [pc, #132]	; (8000888 <ws2812b_init+0x104>)
 8000804:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000808:	801a      	strh	r2, [r3, #0]
		break;
 800080a:	bf00      	nop
	}
    gp_pwm_data_fill = malloc((sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_num_leds) + (NUM_STRIPS * WS2812B_RESET_TIME_CYCLES));
 800080c:	4b1d      	ldr	r3, [pc, #116]	; (8000884 <ws2812b_init+0x100>)
 800080e:	881b      	ldrh	r3, [r3, #0]
 8000810:	461a      	mov	r2, r3
 8000812:	4613      	mov	r3, r2
 8000814:	005b      	lsls	r3, r3, #1
 8000816:	4413      	add	r3, r2
 8000818:	00db      	lsls	r3, r3, #3
 800081a:	ee07 3a90 	vmov	s15, r3
 800081e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000822:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800088c <ws2812b_init+0x108>
 8000826:	ee77 7a87 	vadd.f32	s15, s15, s14
 800082a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800082e:	ee17 0a90 	vmov	r0, s15
 8000832:	f007 ffd7 	bl	80087e4 <malloc>
 8000836:	4603      	mov	r3, r0
 8000838:	461a      	mov	r2, r3
 800083a:	4b15      	ldr	r3, [pc, #84]	; (8000890 <ws2812b_init+0x10c>)
 800083c:	601a      	str	r2, [r3, #0]
    //gp_pwm_data_ping = malloc((sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_num_leds) + (NUM_STRIPS * WS2812B_RESET_TIME_CYCLES));
    //gp_pwm_data_pong = malloc((sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_num_leds) + (NUM_STRIPS * WS2812B_RESET_TIME_CYCLES));
    g_size = (sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_num_leds) + (NUM_STRIPS * WS2812B_RESET_TIME_CYCLES);
 800083e:	4b11      	ldr	r3, [pc, #68]	; (8000884 <ws2812b_init+0x100>)
 8000840:	881b      	ldrh	r3, [r3, #0]
 8000842:	461a      	mov	r2, r3
 8000844:	4613      	mov	r3, r2
 8000846:	005b      	lsls	r3, r3, #1
 8000848:	4413      	add	r3, r2
 800084a:	00db      	lsls	r3, r3, #3
 800084c:	ee07 3a90 	vmov	s15, r3
 8000850:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000854:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800088c <ws2812b_init+0x108>
 8000858:	ee77 7a87 	vadd.f32	s15, s15, s14
 800085c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000860:	ee17 2a90 	vmov	r2, s15
 8000864:	4b0b      	ldr	r3, [pc, #44]	; (8000894 <ws2812b_init+0x110>)
 8000866:	601a      	str	r2, [r3, #0]
    //gp_pwm_data_fill = malloc((sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_max_strip_length) + WS2812B_RESET_TIME_CYCLES);
	current_monitor_init();
 8000868:	f7ff feea 	bl	8000640 <current_monitor_init>
}
 800086c:	bf00      	nop
 800086e:	3708      	adds	r7, #8
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	20000858 	.word	0x20000858
 8000878:	20000244 	.word	0x20000244
 800087c:	200005c8 	.word	0x200005c8
 8000880:	20000850 	.word	0x20000850
 8000884:	2000084e 	.word	0x2000084e
 8000888:	20000852 	.word	0x20000852
 800088c:	45bb8000 	.word	0x45bb8000
 8000890:	20000854 	.word	0x20000854
 8000894:	200008c4 	.word	0x200008c4

08000898 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	6039      	str	r1, [r7, #0]
 80008a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	db0a      	blt.n	80008c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	b2da      	uxtb	r2, r3
 80008b0:	490c      	ldr	r1, [pc, #48]	; (80008e4 <__NVIC_SetPriority+0x4c>)
 80008b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b6:	0112      	lsls	r2, r2, #4
 80008b8:	b2d2      	uxtb	r2, r2
 80008ba:	440b      	add	r3, r1
 80008bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008c0:	e00a      	b.n	80008d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	b2da      	uxtb	r2, r3
 80008c6:	4908      	ldr	r1, [pc, #32]	; (80008e8 <__NVIC_SetPriority+0x50>)
 80008c8:	79fb      	ldrb	r3, [r7, #7]
 80008ca:	f003 030f 	and.w	r3, r3, #15
 80008ce:	3b04      	subs	r3, #4
 80008d0:	0112      	lsls	r2, r2, #4
 80008d2:	b2d2      	uxtb	r2, r2
 80008d4:	440b      	add	r3, r1
 80008d6:	761a      	strb	r2, [r3, #24]
}
 80008d8:	bf00      	nop
 80008da:	370c      	adds	r7, #12
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr
 80008e4:	e000e100 	.word	0xe000e100
 80008e8:	e000ed00 	.word	0xe000ed00

080008ec <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80008f0:	2100      	movs	r1, #0
 80008f2:	f06f 0004 	mvn.w	r0, #4
 80008f6:	f7ff ffcf 	bl	8000898 <__NVIC_SetPriority>
#endif
}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
	...

08000900 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8000906:	f3ef 8305 	mrs	r3, IPSR
 800090a:	603b      	str	r3, [r7, #0]
  return(result);
 800090c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800090e:	2b00      	cmp	r3, #0
 8000910:	d003      	beq.n	800091a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8000912:	f06f 0305 	mvn.w	r3, #5
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	e00c      	b.n	8000934 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800091a:	4b0a      	ldr	r3, [pc, #40]	; (8000944 <osKernelInitialize+0x44>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d105      	bne.n	800092e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8000922:	4b08      	ldr	r3, [pc, #32]	; (8000944 <osKernelInitialize+0x44>)
 8000924:	2201      	movs	r2, #1
 8000926:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8000928:	2300      	movs	r3, #0
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	e002      	b.n	8000934 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800092e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000932:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8000934:	687b      	ldr	r3, [r7, #4]
}
 8000936:	4618      	mov	r0, r3
 8000938:	370c      	adds	r7, #12
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	200008c8 	.word	0x200008c8

08000948 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800094e:	f3ef 8305 	mrs	r3, IPSR
 8000952:	603b      	str	r3, [r7, #0]
  return(result);
 8000954:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8000956:	2b00      	cmp	r3, #0
 8000958:	d003      	beq.n	8000962 <osKernelStart+0x1a>
    stat = osErrorISR;
 800095a:	f06f 0305 	mvn.w	r3, #5
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	e010      	b.n	8000984 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8000962:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <osKernelStart+0x48>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	2b01      	cmp	r3, #1
 8000968:	d109      	bne.n	800097e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800096a:	f7ff ffbf 	bl	80008ec <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800096e:	4b08      	ldr	r3, [pc, #32]	; (8000990 <osKernelStart+0x48>)
 8000970:	2202      	movs	r2, #2
 8000972:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8000974:	f001 f866 	bl	8001a44 <vTaskStartScheduler>
      stat = osOK;
 8000978:	2300      	movs	r3, #0
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	e002      	b.n	8000984 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800097e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000982:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8000984:	687b      	ldr	r3, [r7, #4]
}
 8000986:	4618      	mov	r0, r3
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	200008c8 	.word	0x200008c8

08000994 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8000994:	b580      	push	{r7, lr}
 8000996:	b08e      	sub	sp, #56	; 0x38
 8000998:	af04      	add	r7, sp, #16
 800099a:	60f8      	str	r0, [r7, #12]
 800099c:	60b9      	str	r1, [r7, #8]
 800099e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80009a4:	f3ef 8305 	mrs	r3, IPSR
 80009a8:	617b      	str	r3, [r7, #20]
  return(result);
 80009aa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d17e      	bne.n	8000aae <osThreadNew+0x11a>
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d07b      	beq.n	8000aae <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80009b6:	2380      	movs	r3, #128	; 0x80
 80009b8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80009ba:	2318      	movs	r3, #24
 80009bc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80009c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009c6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d045      	beq.n	8000a5a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d002      	beq.n	80009dc <osThreadNew+0x48>
        name = attr->name;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	699b      	ldr	r3, [r3, #24]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d002      	beq.n	80009ea <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	699b      	ldr	r3, [r3, #24]
 80009e8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80009ea:	69fb      	ldr	r3, [r7, #28]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d008      	beq.n	8000a02 <osThreadNew+0x6e>
 80009f0:	69fb      	ldr	r3, [r7, #28]
 80009f2:	2b38      	cmp	r3, #56	; 0x38
 80009f4:	d805      	bhi.n	8000a02 <osThreadNew+0x6e>
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	685b      	ldr	r3, [r3, #4]
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <osThreadNew+0x72>
        return (NULL);
 8000a02:	2300      	movs	r3, #0
 8000a04:	e054      	b.n	8000ab0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	695b      	ldr	r3, [r3, #20]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d003      	beq.n	8000a16 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	695b      	ldr	r3, [r3, #20]
 8000a12:	089b      	lsrs	r3, r3, #2
 8000a14:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	689b      	ldr	r3, [r3, #8]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d00e      	beq.n	8000a3c <osThreadNew+0xa8>
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	68db      	ldr	r3, [r3, #12]
 8000a22:	2b5b      	cmp	r3, #91	; 0x5b
 8000a24:	d90a      	bls.n	8000a3c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d006      	beq.n	8000a3c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	695b      	ldr	r3, [r3, #20]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d002      	beq.n	8000a3c <osThreadNew+0xa8>
        mem = 1;
 8000a36:	2301      	movs	r3, #1
 8000a38:	61bb      	str	r3, [r7, #24]
 8000a3a:	e010      	b.n	8000a5e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	689b      	ldr	r3, [r3, #8]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d10c      	bne.n	8000a5e <osThreadNew+0xca>
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	68db      	ldr	r3, [r3, #12]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d108      	bne.n	8000a5e <osThreadNew+0xca>
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	691b      	ldr	r3, [r3, #16]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d104      	bne.n	8000a5e <osThreadNew+0xca>
          mem = 0;
 8000a54:	2300      	movs	r3, #0
 8000a56:	61bb      	str	r3, [r7, #24]
 8000a58:	e001      	b.n	8000a5e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8000a5e:	69bb      	ldr	r3, [r7, #24]
 8000a60:	2b01      	cmp	r3, #1
 8000a62:	d110      	bne.n	8000a86 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8000a68:	687a      	ldr	r2, [r7, #4]
 8000a6a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8000a6c:	9202      	str	r2, [sp, #8]
 8000a6e:	9301      	str	r3, [sp, #4]
 8000a70:	69fb      	ldr	r3, [r7, #28]
 8000a72:	9300      	str	r3, [sp, #0]
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	6a3a      	ldr	r2, [r7, #32]
 8000a78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000a7a:	68f8      	ldr	r0, [r7, #12]
 8000a7c:	f000 fe0c 	bl	8001698 <xTaskCreateStatic>
 8000a80:	4603      	mov	r3, r0
 8000a82:	613b      	str	r3, [r7, #16]
 8000a84:	e013      	b.n	8000aae <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8000a86:	69bb      	ldr	r3, [r7, #24]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d110      	bne.n	8000aae <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8000a8c:	6a3b      	ldr	r3, [r7, #32]
 8000a8e:	b29a      	uxth	r2, r3
 8000a90:	f107 0310 	add.w	r3, r7, #16
 8000a94:	9301      	str	r3, [sp, #4]
 8000a96:	69fb      	ldr	r3, [r7, #28]
 8000a98:	9300      	str	r3, [sp, #0]
 8000a9a:	68bb      	ldr	r3, [r7, #8]
 8000a9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000a9e:	68f8      	ldr	r0, [r7, #12]
 8000aa0:	f000 fe57 	bl	8001752 <xTaskCreate>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d001      	beq.n	8000aae <osThreadNew+0x11a>
            hTask = NULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8000aae:	693b      	ldr	r3, [r7, #16]
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3728      	adds	r7, #40	; 0x28
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}

08000ab8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8000ac0:	f3ef 8305 	mrs	r3, IPSR
 8000ac4:	60bb      	str	r3, [r7, #8]
  return(result);
 8000ac6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d003      	beq.n	8000ad4 <osDelay+0x1c>
    stat = osErrorISR;
 8000acc:	f06f 0305 	mvn.w	r3, #5
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	e007      	b.n	8000ae4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d002      	beq.n	8000ae4 <osDelay+0x2c>
      vTaskDelay(ticks);
 8000ade:	6878      	ldr	r0, [r7, #4]
 8000ae0:	f000 ff7c 	bl	80019dc <vTaskDelay>
    }
  }

  return (stat);
 8000ae4:	68fb      	ldr	r3, [r7, #12]
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3710      	adds	r7, #16
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
	...

08000af0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8000af0:	b480      	push	{r7}
 8000af2:	b085      	sub	sp, #20
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	60f8      	str	r0, [r7, #12]
 8000af8:	60b9      	str	r1, [r7, #8]
 8000afa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	4a07      	ldr	r2, [pc, #28]	; (8000b1c <vApplicationGetIdleTaskMemory+0x2c>)
 8000b00:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8000b02:	68bb      	ldr	r3, [r7, #8]
 8000b04:	4a06      	ldr	r2, [pc, #24]	; (8000b20 <vApplicationGetIdleTaskMemory+0x30>)
 8000b06:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2280      	movs	r2, #128	; 0x80
 8000b0c:	601a      	str	r2, [r3, #0]
}
 8000b0e:	bf00      	nop
 8000b10:	3714      	adds	r7, #20
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	200008cc 	.word	0x200008cc
 8000b20:	20000928 	.word	0x20000928

08000b24 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8000b24:	b480      	push	{r7}
 8000b26:	b085      	sub	sp, #20
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	60f8      	str	r0, [r7, #12]
 8000b2c:	60b9      	str	r1, [r7, #8]
 8000b2e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	4a07      	ldr	r2, [pc, #28]	; (8000b50 <vApplicationGetTimerTaskMemory+0x2c>)
 8000b34:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8000b36:	68bb      	ldr	r3, [r7, #8]
 8000b38:	4a06      	ldr	r2, [pc, #24]	; (8000b54 <vApplicationGetTimerTaskMemory+0x30>)
 8000b3a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b42:	601a      	str	r2, [r3, #0]
}
 8000b44:	bf00      	nop
 8000b46:	3714      	adds	r7, #20
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	20000b28 	.word	0x20000b28
 8000b54:	20000b84 	.word	0x20000b84

08000b58 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	f103 0208 	add.w	r2, r3, #8
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b70:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	f103 0208 	add.w	r2, r3, #8
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	f103 0208 	add.w	r2, r3, #8
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000b8c:	bf00      	nop
 8000b8e:	370c      	adds	r7, #12
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000ba6:	bf00      	nop
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr

08000bb2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	b085      	sub	sp, #20
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	6078      	str	r0, [r7, #4]
 8000bba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	68fa      	ldr	r2, [r7, #12]
 8000bc6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	689a      	ldr	r2, [r3, #8]
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	689b      	ldr	r3, [r3, #8]
 8000bd4:	683a      	ldr	r2, [r7, #0]
 8000bd6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	683a      	ldr	r2, [r7, #0]
 8000bdc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	687a      	ldr	r2, [r7, #4]
 8000be2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	1c5a      	adds	r2, r3, #1
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	601a      	str	r2, [r3, #0]
}
 8000bee:	bf00      	nop
 8000bf0:	3714      	adds	r7, #20
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr

08000bfa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	b085      	sub	sp, #20
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
 8000c02:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000c0a:	68bb      	ldr	r3, [r7, #8]
 8000c0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c10:	d103      	bne.n	8000c1a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	691b      	ldr	r3, [r3, #16]
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	e00c      	b.n	8000c34 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	3308      	adds	r3, #8
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	e002      	b.n	8000c28 <vListInsert+0x2e>
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	68ba      	ldr	r2, [r7, #8]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	d2f6      	bcs.n	8000c22 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	685a      	ldr	r2, [r3, #4]
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	683a      	ldr	r2, [r7, #0]
 8000c42:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	68fa      	ldr	r2, [r7, #12]
 8000c48:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	683a      	ldr	r2, [r7, #0]
 8000c4e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	687a      	ldr	r2, [r7, #4]
 8000c54:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	1c5a      	adds	r2, r3, #1
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	601a      	str	r2, [r3, #0]
}
 8000c60:	bf00      	nop
 8000c62:	3714      	adds	r7, #20
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr

08000c6c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	691b      	ldr	r3, [r3, #16]
 8000c78:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	687a      	ldr	r2, [r7, #4]
 8000c80:	6892      	ldr	r2, [r2, #8]
 8000c82:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	689b      	ldr	r3, [r3, #8]
 8000c88:	687a      	ldr	r2, [r7, #4]
 8000c8a:	6852      	ldr	r2, [r2, #4]
 8000c8c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	687a      	ldr	r2, [r7, #4]
 8000c94:	429a      	cmp	r2, r3
 8000c96:	d103      	bne.n	8000ca0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	689a      	ldr	r2, [r3, #8]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	1e5a      	subs	r2, r3, #1
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	681b      	ldr	r3, [r3, #0]
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3714      	adds	r7, #20
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d10a      	bne.n	8000cea <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cd8:	f383 8811 	msr	BASEPRI, r3
 8000cdc:	f3bf 8f6f 	isb	sy
 8000ce0:	f3bf 8f4f 	dsb	sy
 8000ce4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000ce6:	bf00      	nop
 8000ce8:	e7fe      	b.n	8000ce8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8000cea:	f002 f93b 	bl	8002f64 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cf6:	68f9      	ldr	r1, [r7, #12]
 8000cf8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000cfa:	fb01 f303 	mul.w	r3, r1, r3
 8000cfe:	441a      	add	r2, r3
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	2200      	movs	r2, #0
 8000d08:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d1a:	3b01      	subs	r3, #1
 8000d1c:	68f9      	ldr	r1, [r7, #12]
 8000d1e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000d20:	fb01 f303 	mul.w	r3, r1, r3
 8000d24:	441a      	add	r2, r3
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	22ff      	movs	r2, #255	; 0xff
 8000d2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	22ff      	movs	r2, #255	; 0xff
 8000d36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d114      	bne.n	8000d6a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	691b      	ldr	r3, [r3, #16]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d01a      	beq.n	8000d7e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	3310      	adds	r3, #16
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f001 f915 	bl	8001f7c <xTaskRemoveFromEventList>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d012      	beq.n	8000d7e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8000d58:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <xQueueGenericReset+0xcc>)
 8000d5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	f3bf 8f4f 	dsb	sy
 8000d64:	f3bf 8f6f 	isb	sy
 8000d68:	e009      	b.n	8000d7e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	3310      	adds	r3, #16
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f7ff fef2 	bl	8000b58 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	3324      	adds	r3, #36	; 0x24
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff feed 	bl	8000b58 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8000d7e:	f002 f921 	bl	8002fc4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8000d82:	2301      	movs	r3, #1
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3710      	adds	r7, #16
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	e000ed04 	.word	0xe000ed04

08000d90 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b08e      	sub	sp, #56	; 0x38
 8000d94:	af02      	add	r7, sp, #8
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	60b9      	str	r1, [r7, #8]
 8000d9a:	607a      	str	r2, [r7, #4]
 8000d9c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d10a      	bne.n	8000dba <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8000da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000da8:	f383 8811 	msr	BASEPRI, r3
 8000dac:	f3bf 8f6f 	isb	sy
 8000db0:	f3bf 8f4f 	dsb	sy
 8000db4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8000db6:	bf00      	nop
 8000db8:	e7fe      	b.n	8000db8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d10a      	bne.n	8000dd6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8000dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000dc4:	f383 8811 	msr	BASEPRI, r3
 8000dc8:	f3bf 8f6f 	isb	sy
 8000dcc:	f3bf 8f4f 	dsb	sy
 8000dd0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8000dd2:	bf00      	nop
 8000dd4:	e7fe      	b.n	8000dd4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d002      	beq.n	8000de2 <xQueueGenericCreateStatic+0x52>
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <xQueueGenericCreateStatic+0x56>
 8000de2:	2301      	movs	r3, #1
 8000de4:	e000      	b.n	8000de8 <xQueueGenericCreateStatic+0x58>
 8000de6:	2300      	movs	r3, #0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d10a      	bne.n	8000e02 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8000dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000df0:	f383 8811 	msr	BASEPRI, r3
 8000df4:	f3bf 8f6f 	isb	sy
 8000df8:	f3bf 8f4f 	dsb	sy
 8000dfc:	623b      	str	r3, [r7, #32]
}
 8000dfe:	bf00      	nop
 8000e00:	e7fe      	b.n	8000e00 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d102      	bne.n	8000e0e <xQueueGenericCreateStatic+0x7e>
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d101      	bne.n	8000e12 <xQueueGenericCreateStatic+0x82>
 8000e0e:	2301      	movs	r3, #1
 8000e10:	e000      	b.n	8000e14 <xQueueGenericCreateStatic+0x84>
 8000e12:	2300      	movs	r3, #0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d10a      	bne.n	8000e2e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8000e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e1c:	f383 8811 	msr	BASEPRI, r3
 8000e20:	f3bf 8f6f 	isb	sy
 8000e24:	f3bf 8f4f 	dsb	sy
 8000e28:	61fb      	str	r3, [r7, #28]
}
 8000e2a:	bf00      	nop
 8000e2c:	e7fe      	b.n	8000e2c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8000e2e:	2350      	movs	r3, #80	; 0x50
 8000e30:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	2b50      	cmp	r3, #80	; 0x50
 8000e36:	d00a      	beq.n	8000e4e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8000e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e3c:	f383 8811 	msr	BASEPRI, r3
 8000e40:	f3bf 8f6f 	isb	sy
 8000e44:	f3bf 8f4f 	dsb	sy
 8000e48:	61bb      	str	r3, [r7, #24]
}
 8000e4a:	bf00      	nop
 8000e4c:	e7fe      	b.n	8000e4c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8000e4e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8000e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d00d      	beq.n	8000e76 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8000e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000e62:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8000e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e68:	9300      	str	r3, [sp, #0]
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	687a      	ldr	r2, [r7, #4]
 8000e6e:	68b9      	ldr	r1, [r7, #8]
 8000e70:	68f8      	ldr	r0, [r7, #12]
 8000e72:	f000 f805 	bl	8000e80 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8000e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3730      	adds	r7, #48	; 0x30
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	60f8      	str	r0, [r7, #12]
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	607a      	str	r2, [r7, #4]
 8000e8c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d103      	bne.n	8000e9c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000e94:	69bb      	ldr	r3, [r7, #24]
 8000e96:	69ba      	ldr	r2, [r7, #24]
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	e002      	b.n	8000ea2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000e9c:	69bb      	ldr	r3, [r7, #24]
 8000e9e:	687a      	ldr	r2, [r7, #4]
 8000ea0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8000ea2:	69bb      	ldr	r3, [r7, #24]
 8000ea4:	68fa      	ldr	r2, [r7, #12]
 8000ea6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8000ea8:	69bb      	ldr	r3, [r7, #24]
 8000eaa:	68ba      	ldr	r2, [r7, #8]
 8000eac:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000eae:	2101      	movs	r1, #1
 8000eb0:	69b8      	ldr	r0, [r7, #24]
 8000eb2:	f7ff ff05 	bl	8000cc0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8000eb6:	69bb      	ldr	r3, [r7, #24]
 8000eb8:	78fa      	ldrb	r2, [r7, #3]
 8000eba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8000ebe:	bf00      	nop
 8000ec0:	3710      	adds	r7, #16
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
	...

08000ec8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b08e      	sub	sp, #56	; 0x38
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
 8000ed4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8000ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d10a      	bne.n	8000efa <xQueueGenericSend+0x32>
	__asm volatile
 8000ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ee8:	f383 8811 	msr	BASEPRI, r3
 8000eec:	f3bf 8f6f 	isb	sy
 8000ef0:	f3bf 8f4f 	dsb	sy
 8000ef4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8000ef6:	bf00      	nop
 8000ef8:	e7fe      	b.n	8000ef8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d103      	bne.n	8000f08 <xQueueGenericSend+0x40>
 8000f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d101      	bne.n	8000f0c <xQueueGenericSend+0x44>
 8000f08:	2301      	movs	r3, #1
 8000f0a:	e000      	b.n	8000f0e <xQueueGenericSend+0x46>
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d10a      	bne.n	8000f28 <xQueueGenericSend+0x60>
	__asm volatile
 8000f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f16:	f383 8811 	msr	BASEPRI, r3
 8000f1a:	f3bf 8f6f 	isb	sy
 8000f1e:	f3bf 8f4f 	dsb	sy
 8000f22:	627b      	str	r3, [r7, #36]	; 0x24
}
 8000f24:	bf00      	nop
 8000f26:	e7fe      	b.n	8000f26 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	2b02      	cmp	r3, #2
 8000f2c:	d103      	bne.n	8000f36 <xQueueGenericSend+0x6e>
 8000f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d101      	bne.n	8000f3a <xQueueGenericSend+0x72>
 8000f36:	2301      	movs	r3, #1
 8000f38:	e000      	b.n	8000f3c <xQueueGenericSend+0x74>
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d10a      	bne.n	8000f56 <xQueueGenericSend+0x8e>
	__asm volatile
 8000f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f44:	f383 8811 	msr	BASEPRI, r3
 8000f48:	f3bf 8f6f 	isb	sy
 8000f4c:	f3bf 8f4f 	dsb	sy
 8000f50:	623b      	str	r3, [r7, #32]
}
 8000f52:	bf00      	nop
 8000f54:	e7fe      	b.n	8000f54 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000f56:	f001 f9cf 	bl	80022f8 <xTaskGetSchedulerState>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d102      	bne.n	8000f66 <xQueueGenericSend+0x9e>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d101      	bne.n	8000f6a <xQueueGenericSend+0xa2>
 8000f66:	2301      	movs	r3, #1
 8000f68:	e000      	b.n	8000f6c <xQueueGenericSend+0xa4>
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d10a      	bne.n	8000f86 <xQueueGenericSend+0xbe>
	__asm volatile
 8000f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f74:	f383 8811 	msr	BASEPRI, r3
 8000f78:	f3bf 8f6f 	isb	sy
 8000f7c:	f3bf 8f4f 	dsb	sy
 8000f80:	61fb      	str	r3, [r7, #28]
}
 8000f82:	bf00      	nop
 8000f84:	e7fe      	b.n	8000f84 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000f86:	f001 ffed 	bl	8002f64 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f92:	429a      	cmp	r2, r3
 8000f94:	d302      	bcc.n	8000f9c <xQueueGenericSend+0xd4>
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	2b02      	cmp	r3, #2
 8000f9a:	d129      	bne.n	8000ff0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000f9c:	683a      	ldr	r2, [r7, #0]
 8000f9e:	68b9      	ldr	r1, [r7, #8]
 8000fa0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000fa2:	f000 fa0b 	bl	80013bc <prvCopyDataToQueue>
 8000fa6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d010      	beq.n	8000fd2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fb2:	3324      	adds	r3, #36	; 0x24
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f000 ffe1 	bl	8001f7c <xTaskRemoveFromEventList>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d013      	beq.n	8000fe8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8000fc0:	4b3f      	ldr	r3, [pc, #252]	; (80010c0 <xQueueGenericSend+0x1f8>)
 8000fc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	f3bf 8f4f 	dsb	sy
 8000fcc:	f3bf 8f6f 	isb	sy
 8000fd0:	e00a      	b.n	8000fe8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8000fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d007      	beq.n	8000fe8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8000fd8:	4b39      	ldr	r3, [pc, #228]	; (80010c0 <xQueueGenericSend+0x1f8>)
 8000fda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	f3bf 8f4f 	dsb	sy
 8000fe4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8000fe8:	f001 ffec 	bl	8002fc4 <vPortExitCritical>
				return pdPASS;
 8000fec:	2301      	movs	r3, #1
 8000fee:	e063      	b.n	80010b8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d103      	bne.n	8000ffe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000ff6:	f001 ffe5 	bl	8002fc4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	e05c      	b.n	80010b8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001000:	2b00      	cmp	r3, #0
 8001002:	d106      	bne.n	8001012 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001004:	f107 0314 	add.w	r3, r7, #20
 8001008:	4618      	mov	r0, r3
 800100a:	f001 f81b 	bl	8002044 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800100e:	2301      	movs	r3, #1
 8001010:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001012:	f001 ffd7 	bl	8002fc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001016:	f000 fd7b 	bl	8001b10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800101a:	f001 ffa3 	bl	8002f64 <vPortEnterCritical>
 800101e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001020:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001024:	b25b      	sxtb	r3, r3
 8001026:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800102a:	d103      	bne.n	8001034 <xQueueGenericSend+0x16c>
 800102c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800102e:	2200      	movs	r2, #0
 8001030:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001036:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800103a:	b25b      	sxtb	r3, r3
 800103c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001040:	d103      	bne.n	800104a <xQueueGenericSend+0x182>
 8001042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001044:	2200      	movs	r2, #0
 8001046:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800104a:	f001 ffbb 	bl	8002fc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800104e:	1d3a      	adds	r2, r7, #4
 8001050:	f107 0314 	add.w	r3, r7, #20
 8001054:	4611      	mov	r1, r2
 8001056:	4618      	mov	r0, r3
 8001058:	f001 f80a 	bl	8002070 <xTaskCheckForTimeOut>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d124      	bne.n	80010ac <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001062:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001064:	f000 faa2 	bl	80015ac <prvIsQueueFull>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d018      	beq.n	80010a0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800106e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001070:	3310      	adds	r3, #16
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	4611      	mov	r1, r2
 8001076:	4618      	mov	r0, r3
 8001078:	f000 ff30 	bl	8001edc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800107c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800107e:	f000 fa2d 	bl	80014dc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001082:	f000 fd53 	bl	8001b2c <xTaskResumeAll>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	f47f af7c 	bne.w	8000f86 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800108e:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <xQueueGenericSend+0x1f8>)
 8001090:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	f3bf 8f4f 	dsb	sy
 800109a:	f3bf 8f6f 	isb	sy
 800109e:	e772      	b.n	8000f86 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80010a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80010a2:	f000 fa1b 	bl	80014dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80010a6:	f000 fd41 	bl	8001b2c <xTaskResumeAll>
 80010aa:	e76c      	b.n	8000f86 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80010ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80010ae:	f000 fa15 	bl	80014dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80010b2:	f000 fd3b 	bl	8001b2c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80010b6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3738      	adds	r7, #56	; 0x38
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	e000ed04 	.word	0xe000ed04

080010c4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b090      	sub	sp, #64	; 0x40
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
 80010d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80010d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d10a      	bne.n	80010f2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80010dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010e0:	f383 8811 	msr	BASEPRI, r3
 80010e4:	f3bf 8f6f 	isb	sy
 80010e8:	f3bf 8f4f 	dsb	sy
 80010ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80010ee:	bf00      	nop
 80010f0:	e7fe      	b.n	80010f0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d103      	bne.n	8001100 <xQueueGenericSendFromISR+0x3c>
 80010f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d101      	bne.n	8001104 <xQueueGenericSendFromISR+0x40>
 8001100:	2301      	movs	r3, #1
 8001102:	e000      	b.n	8001106 <xQueueGenericSendFromISR+0x42>
 8001104:	2300      	movs	r3, #0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d10a      	bne.n	8001120 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800110a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800110e:	f383 8811 	msr	BASEPRI, r3
 8001112:	f3bf 8f6f 	isb	sy
 8001116:	f3bf 8f4f 	dsb	sy
 800111a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800111c:	bf00      	nop
 800111e:	e7fe      	b.n	800111e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	2b02      	cmp	r3, #2
 8001124:	d103      	bne.n	800112e <xQueueGenericSendFromISR+0x6a>
 8001126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800112a:	2b01      	cmp	r3, #1
 800112c:	d101      	bne.n	8001132 <xQueueGenericSendFromISR+0x6e>
 800112e:	2301      	movs	r3, #1
 8001130:	e000      	b.n	8001134 <xQueueGenericSendFromISR+0x70>
 8001132:	2300      	movs	r3, #0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d10a      	bne.n	800114e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8001138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800113c:	f383 8811 	msr	BASEPRI, r3
 8001140:	f3bf 8f6f 	isb	sy
 8001144:	f3bf 8f4f 	dsb	sy
 8001148:	623b      	str	r3, [r7, #32]
}
 800114a:	bf00      	nop
 800114c:	e7fe      	b.n	800114c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800114e:	f001 ffc9 	bl	80030e4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001152:	f3ef 8211 	mrs	r2, BASEPRI
 8001156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800115a:	f383 8811 	msr	BASEPRI, r3
 800115e:	f3bf 8f6f 	isb	sy
 8001162:	f3bf 8f4f 	dsb	sy
 8001166:	61fa      	str	r2, [r7, #28]
 8001168:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800116a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800116c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800116e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001170:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001176:	429a      	cmp	r2, r3
 8001178:	d302      	bcc.n	8001180 <xQueueGenericSendFromISR+0xbc>
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	2b02      	cmp	r3, #2
 800117e:	d12f      	bne.n	80011e0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8001180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001182:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001186:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800118a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800118c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800118e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001190:	683a      	ldr	r2, [r7, #0]
 8001192:	68b9      	ldr	r1, [r7, #8]
 8001194:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001196:	f000 f911 	bl	80013bc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800119a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800119e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80011a2:	d112      	bne.n	80011ca <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80011a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d016      	beq.n	80011da <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80011ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011ae:	3324      	adds	r3, #36	; 0x24
 80011b0:	4618      	mov	r0, r3
 80011b2:	f000 fee3 	bl	8001f7c <xTaskRemoveFromEventList>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d00e      	beq.n	80011da <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d00b      	beq.n	80011da <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2201      	movs	r2, #1
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	e007      	b.n	80011da <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80011ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80011ce:	3301      	adds	r3, #1
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	b25a      	sxtb	r2, r3
 80011d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80011da:	2301      	movs	r3, #1
 80011dc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80011de:	e001      	b.n	80011e4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80011e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011e6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80011ee:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80011f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3740      	adds	r7, #64	; 0x40
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
	...

080011fc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b08c      	sub	sp, #48	; 0x30
 8001200:	af00      	add	r7, sp, #0
 8001202:	60f8      	str	r0, [r7, #12]
 8001204:	60b9      	str	r1, [r7, #8]
 8001206:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8001208:	2300      	movs	r3, #0
 800120a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8001210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001212:	2b00      	cmp	r3, #0
 8001214:	d10a      	bne.n	800122c <xQueueReceive+0x30>
	__asm volatile
 8001216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800121a:	f383 8811 	msr	BASEPRI, r3
 800121e:	f3bf 8f6f 	isb	sy
 8001222:	f3bf 8f4f 	dsb	sy
 8001226:	623b      	str	r3, [r7, #32]
}
 8001228:	bf00      	nop
 800122a:	e7fe      	b.n	800122a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d103      	bne.n	800123a <xQueueReceive+0x3e>
 8001232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001236:	2b00      	cmp	r3, #0
 8001238:	d101      	bne.n	800123e <xQueueReceive+0x42>
 800123a:	2301      	movs	r3, #1
 800123c:	e000      	b.n	8001240 <xQueueReceive+0x44>
 800123e:	2300      	movs	r3, #0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d10a      	bne.n	800125a <xQueueReceive+0x5e>
	__asm volatile
 8001244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001248:	f383 8811 	msr	BASEPRI, r3
 800124c:	f3bf 8f6f 	isb	sy
 8001250:	f3bf 8f4f 	dsb	sy
 8001254:	61fb      	str	r3, [r7, #28]
}
 8001256:	bf00      	nop
 8001258:	e7fe      	b.n	8001258 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800125a:	f001 f84d 	bl	80022f8 <xTaskGetSchedulerState>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d102      	bne.n	800126a <xQueueReceive+0x6e>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d101      	bne.n	800126e <xQueueReceive+0x72>
 800126a:	2301      	movs	r3, #1
 800126c:	e000      	b.n	8001270 <xQueueReceive+0x74>
 800126e:	2300      	movs	r3, #0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d10a      	bne.n	800128a <xQueueReceive+0x8e>
	__asm volatile
 8001274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001278:	f383 8811 	msr	BASEPRI, r3
 800127c:	f3bf 8f6f 	isb	sy
 8001280:	f3bf 8f4f 	dsb	sy
 8001284:	61bb      	str	r3, [r7, #24]
}
 8001286:	bf00      	nop
 8001288:	e7fe      	b.n	8001288 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800128a:	f001 fe6b 	bl	8002f64 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800128e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001292:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001296:	2b00      	cmp	r3, #0
 8001298:	d01f      	beq.n	80012da <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800129a:	68b9      	ldr	r1, [r7, #8]
 800129c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800129e:	f000 f8f7 	bl	8001490 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80012a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a4:	1e5a      	subs	r2, r3, #1
 80012a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012a8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80012aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ac:	691b      	ldr	r3, [r3, #16]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d00f      	beq.n	80012d2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80012b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012b4:	3310      	adds	r3, #16
 80012b6:	4618      	mov	r0, r3
 80012b8:	f000 fe60 	bl	8001f7c <xTaskRemoveFromEventList>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d007      	beq.n	80012d2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80012c2:	4b3d      	ldr	r3, [pc, #244]	; (80013b8 <xQueueReceive+0x1bc>)
 80012c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	f3bf 8f4f 	dsb	sy
 80012ce:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80012d2:	f001 fe77 	bl	8002fc4 <vPortExitCritical>
				return pdPASS;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e069      	b.n	80013ae <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d103      	bne.n	80012e8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80012e0:	f001 fe70 	bl	8002fc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80012e4:	2300      	movs	r3, #0
 80012e6:	e062      	b.n	80013ae <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80012e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d106      	bne.n	80012fc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80012ee:	f107 0310 	add.w	r3, r7, #16
 80012f2:	4618      	mov	r0, r3
 80012f4:	f000 fea6 	bl	8002044 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80012f8:	2301      	movs	r3, #1
 80012fa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80012fc:	f001 fe62 	bl	8002fc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001300:	f000 fc06 	bl	8001b10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001304:	f001 fe2e 	bl	8002f64 <vPortEnterCritical>
 8001308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800130a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800130e:	b25b      	sxtb	r3, r3
 8001310:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001314:	d103      	bne.n	800131e <xQueueReceive+0x122>
 8001316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001318:	2200      	movs	r2, #0
 800131a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800131e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001320:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001324:	b25b      	sxtb	r3, r3
 8001326:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800132a:	d103      	bne.n	8001334 <xQueueReceive+0x138>
 800132c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800132e:	2200      	movs	r2, #0
 8001330:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001334:	f001 fe46 	bl	8002fc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001338:	1d3a      	adds	r2, r7, #4
 800133a:	f107 0310 	add.w	r3, r7, #16
 800133e:	4611      	mov	r1, r2
 8001340:	4618      	mov	r0, r3
 8001342:	f000 fe95 	bl	8002070 <xTaskCheckForTimeOut>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d123      	bne.n	8001394 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800134c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800134e:	f000 f917 	bl	8001580 <prvIsQueueEmpty>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d017      	beq.n	8001388 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800135a:	3324      	adds	r3, #36	; 0x24
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	4611      	mov	r1, r2
 8001360:	4618      	mov	r0, r3
 8001362:	f000 fdbb 	bl	8001edc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001366:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001368:	f000 f8b8 	bl	80014dc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800136c:	f000 fbde 	bl	8001b2c <xTaskResumeAll>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d189      	bne.n	800128a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8001376:	4b10      	ldr	r3, [pc, #64]	; (80013b8 <xQueueReceive+0x1bc>)
 8001378:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	f3bf 8f4f 	dsb	sy
 8001382:	f3bf 8f6f 	isb	sy
 8001386:	e780      	b.n	800128a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8001388:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800138a:	f000 f8a7 	bl	80014dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800138e:	f000 fbcd 	bl	8001b2c <xTaskResumeAll>
 8001392:	e77a      	b.n	800128a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8001394:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001396:	f000 f8a1 	bl	80014dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800139a:	f000 fbc7 	bl	8001b2c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800139e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80013a0:	f000 f8ee 	bl	8001580 <prvIsQueueEmpty>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	f43f af6f 	beq.w	800128a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80013ac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3730      	adds	r7, #48	; 0x30
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	e000ed04 	.word	0xe000ed04

080013bc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b086      	sub	sp, #24
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	60f8      	str	r0, [r7, #12]
 80013c4:	60b9      	str	r1, [r7, #8]
 80013c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80013c8:	2300      	movs	r3, #0
 80013ca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013d0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d10d      	bne.n	80013f6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d14d      	bne.n	800147e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f000 ffa4 	bl	8002334 <xTaskPriorityDisinherit>
 80013ec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	e043      	b.n	800147e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d119      	bne.n	8001430 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	6858      	ldr	r0, [r3, #4]
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001404:	461a      	mov	r2, r3
 8001406:	68b9      	ldr	r1, [r7, #8]
 8001408:	f007 f9f4 	bl	80087f4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	685a      	ldr	r2, [r3, #4]
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001414:	441a      	add	r2, r3
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	685a      	ldr	r2, [r3, #4]
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	429a      	cmp	r2, r3
 8001424:	d32b      	bcc.n	800147e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	e026      	b.n	800147e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	68d8      	ldr	r0, [r3, #12]
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001438:	461a      	mov	r2, r3
 800143a:	68b9      	ldr	r1, [r7, #8]
 800143c:	f007 f9da 	bl	80087f4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	68da      	ldr	r2, [r3, #12]
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001448:	425b      	negs	r3, r3
 800144a:	441a      	add	r2, r3
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	68da      	ldr	r2, [r3, #12]
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	429a      	cmp	r2, r3
 800145a:	d207      	bcs.n	800146c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	689a      	ldr	r2, [r3, #8]
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001464:	425b      	negs	r3, r3
 8001466:	441a      	add	r2, r3
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2b02      	cmp	r3, #2
 8001470:	d105      	bne.n	800147e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d002      	beq.n	800147e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	3b01      	subs	r3, #1
 800147c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	1c5a      	adds	r2, r3, #1
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8001486:	697b      	ldr	r3, [r7, #20]
}
 8001488:	4618      	mov	r0, r3
 800148a:	3718      	adds	r7, #24
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d018      	beq.n	80014d4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	68da      	ldr	r2, [r3, #12]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014aa:	441a      	add	r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	68da      	ldr	r2, [r3, #12]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d303      	bcc.n	80014c4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	68d9      	ldr	r1, [r3, #12]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014cc:	461a      	mov	r2, r3
 80014ce:	6838      	ldr	r0, [r7, #0]
 80014d0:	f007 f990 	bl	80087f4 <memcpy>
	}
}
 80014d4:	bf00      	nop
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80014e4:	f001 fd3e 	bl	8002f64 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80014ee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80014f0:	e011      	b.n	8001516 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d012      	beq.n	8001520 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	3324      	adds	r3, #36	; 0x24
 80014fe:	4618      	mov	r0, r3
 8001500:	f000 fd3c 	bl	8001f7c <xTaskRemoveFromEventList>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800150a:	f000 fe13 	bl	8002134 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800150e:	7bfb      	ldrb	r3, [r7, #15]
 8001510:	3b01      	subs	r3, #1
 8001512:	b2db      	uxtb	r3, r3
 8001514:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001516:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800151a:	2b00      	cmp	r3, #0
 800151c:	dce9      	bgt.n	80014f2 <prvUnlockQueue+0x16>
 800151e:	e000      	b.n	8001522 <prvUnlockQueue+0x46>
					break;
 8001520:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	22ff      	movs	r2, #255	; 0xff
 8001526:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800152a:	f001 fd4b 	bl	8002fc4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800152e:	f001 fd19 	bl	8002f64 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001538:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800153a:	e011      	b.n	8001560 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	691b      	ldr	r3, [r3, #16]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d012      	beq.n	800156a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	3310      	adds	r3, #16
 8001548:	4618      	mov	r0, r3
 800154a:	f000 fd17 	bl	8001f7c <xTaskRemoveFromEventList>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8001554:	f000 fdee 	bl	8002134 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8001558:	7bbb      	ldrb	r3, [r7, #14]
 800155a:	3b01      	subs	r3, #1
 800155c:	b2db      	uxtb	r3, r3
 800155e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001560:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001564:	2b00      	cmp	r3, #0
 8001566:	dce9      	bgt.n	800153c <prvUnlockQueue+0x60>
 8001568:	e000      	b.n	800156c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800156a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	22ff      	movs	r2, #255	; 0xff
 8001570:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8001574:	f001 fd26 	bl	8002fc4 <vPortExitCritical>
}
 8001578:	bf00      	nop
 800157a:	3710      	adds	r7, #16
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001588:	f001 fcec 	bl	8002f64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001590:	2b00      	cmp	r3, #0
 8001592:	d102      	bne.n	800159a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8001594:	2301      	movs	r3, #1
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	e001      	b.n	800159e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800159a:	2300      	movs	r3, #0
 800159c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800159e:	f001 fd11 	bl	8002fc4 <vPortExitCritical>

	return xReturn;
 80015a2:	68fb      	ldr	r3, [r7, #12]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3710      	adds	r7, #16
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}

080015ac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80015b4:	f001 fcd6 	bl	8002f64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d102      	bne.n	80015ca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80015c4:	2301      	movs	r3, #1
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	e001      	b.n	80015ce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80015ca:	2300      	movs	r3, #0
 80015cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80015ce:	f001 fcf9 	bl	8002fc4 <vPortExitCritical>

	return xReturn;
 80015d2:	68fb      	ldr	r3, [r7, #12]
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3710      	adds	r7, #16
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}

080015dc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80015e6:	2300      	movs	r3, #0
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	e014      	b.n	8001616 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80015ec:	4a0f      	ldr	r2, [pc, #60]	; (800162c <vQueueAddToRegistry+0x50>)
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d10b      	bne.n	8001610 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80015f8:	490c      	ldr	r1, [pc, #48]	; (800162c <vQueueAddToRegistry+0x50>)
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	683a      	ldr	r2, [r7, #0]
 80015fe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8001602:	4a0a      	ldr	r2, [pc, #40]	; (800162c <vQueueAddToRegistry+0x50>)
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	00db      	lsls	r3, r3, #3
 8001608:	4413      	add	r3, r2
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800160e:	e006      	b.n	800161e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	3301      	adds	r3, #1
 8001614:	60fb      	str	r3, [r7, #12]
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	2b07      	cmp	r3, #7
 800161a:	d9e7      	bls.n	80015ec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800161c:	bf00      	nop
 800161e:	bf00      	nop
 8001620:	3714      	adds	r7, #20
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	20000f84 	.word	0x20000f84

08001630 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001630:	b580      	push	{r7, lr}
 8001632:	b086      	sub	sp, #24
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8001640:	f001 fc90 	bl	8002f64 <vPortEnterCritical>
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800164a:	b25b      	sxtb	r3, r3
 800164c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001650:	d103      	bne.n	800165a <vQueueWaitForMessageRestricted+0x2a>
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	2200      	movs	r2, #0
 8001656:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001660:	b25b      	sxtb	r3, r3
 8001662:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001666:	d103      	bne.n	8001670 <vQueueWaitForMessageRestricted+0x40>
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	2200      	movs	r2, #0
 800166c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001670:	f001 fca8 	bl	8002fc4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001678:	2b00      	cmp	r3, #0
 800167a:	d106      	bne.n	800168a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	3324      	adds	r3, #36	; 0x24
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	68b9      	ldr	r1, [r7, #8]
 8001684:	4618      	mov	r0, r3
 8001686:	f000 fc4d 	bl	8001f24 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800168a:	6978      	ldr	r0, [r7, #20]
 800168c:	f7ff ff26 	bl	80014dc <prvUnlockQueue>
	}
 8001690:	bf00      	nop
 8001692:	3718      	adds	r7, #24
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08e      	sub	sp, #56	; 0x38
 800169c:	af04      	add	r7, sp, #16
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	607a      	str	r2, [r7, #4]
 80016a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80016a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d10a      	bne.n	80016c2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80016ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016b0:	f383 8811 	msr	BASEPRI, r3
 80016b4:	f3bf 8f6f 	isb	sy
 80016b8:	f3bf 8f4f 	dsb	sy
 80016bc:	623b      	str	r3, [r7, #32]
}
 80016be:	bf00      	nop
 80016c0:	e7fe      	b.n	80016c0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80016c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d10a      	bne.n	80016de <xTaskCreateStatic+0x46>
	__asm volatile
 80016c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016cc:	f383 8811 	msr	BASEPRI, r3
 80016d0:	f3bf 8f6f 	isb	sy
 80016d4:	f3bf 8f4f 	dsb	sy
 80016d8:	61fb      	str	r3, [r7, #28]
}
 80016da:	bf00      	nop
 80016dc:	e7fe      	b.n	80016dc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80016de:	235c      	movs	r3, #92	; 0x5c
 80016e0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	2b5c      	cmp	r3, #92	; 0x5c
 80016e6:	d00a      	beq.n	80016fe <xTaskCreateStatic+0x66>
	__asm volatile
 80016e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016ec:	f383 8811 	msr	BASEPRI, r3
 80016f0:	f3bf 8f6f 	isb	sy
 80016f4:	f3bf 8f4f 	dsb	sy
 80016f8:	61bb      	str	r3, [r7, #24]
}
 80016fa:	bf00      	nop
 80016fc:	e7fe      	b.n	80016fc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80016fe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8001700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001702:	2b00      	cmp	r3, #0
 8001704:	d01e      	beq.n	8001744 <xTaskCreateStatic+0xac>
 8001706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001708:	2b00      	cmp	r3, #0
 800170a:	d01b      	beq.n	8001744 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800170c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800170e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001712:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001714:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001718:	2202      	movs	r2, #2
 800171a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800171e:	2300      	movs	r3, #0
 8001720:	9303      	str	r3, [sp, #12]
 8001722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001724:	9302      	str	r3, [sp, #8]
 8001726:	f107 0314 	add.w	r3, r7, #20
 800172a:	9301      	str	r3, [sp, #4]
 800172c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800172e:	9300      	str	r3, [sp, #0]
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	68b9      	ldr	r1, [r7, #8]
 8001736:	68f8      	ldr	r0, [r7, #12]
 8001738:	f000 f850 	bl	80017dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800173c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800173e:	f000 f8dd 	bl	80018fc <prvAddNewTaskToReadyList>
 8001742:	e001      	b.n	8001748 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8001744:	2300      	movs	r3, #0
 8001746:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8001748:	697b      	ldr	r3, [r7, #20]
	}
 800174a:	4618      	mov	r0, r3
 800174c:	3728      	adds	r7, #40	; 0x28
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}

08001752 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001752:	b580      	push	{r7, lr}
 8001754:	b08c      	sub	sp, #48	; 0x30
 8001756:	af04      	add	r7, sp, #16
 8001758:	60f8      	str	r0, [r7, #12]
 800175a:	60b9      	str	r1, [r7, #8]
 800175c:	603b      	str	r3, [r7, #0]
 800175e:	4613      	mov	r3, r2
 8001760:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001762:	88fb      	ldrh	r3, [r7, #6]
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	4618      	mov	r0, r3
 8001768:	f001 fcfc 	bl	8003164 <pvPortMalloc>
 800176c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d00e      	beq.n	8001792 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001774:	205c      	movs	r0, #92	; 0x5c
 8001776:	f001 fcf5 	bl	8003164 <pvPortMalloc>
 800177a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d003      	beq.n	800178a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	697a      	ldr	r2, [r7, #20]
 8001786:	631a      	str	r2, [r3, #48]	; 0x30
 8001788:	e005      	b.n	8001796 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800178a:	6978      	ldr	r0, [r7, #20]
 800178c:	f001 fdb6 	bl	80032fc <vPortFree>
 8001790:	e001      	b.n	8001796 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001792:	2300      	movs	r3, #0
 8001794:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d017      	beq.n	80017cc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	2200      	movs	r2, #0
 80017a0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80017a4:	88fa      	ldrh	r2, [r7, #6]
 80017a6:	2300      	movs	r3, #0
 80017a8:	9303      	str	r3, [sp, #12]
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	9302      	str	r3, [sp, #8]
 80017ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017b0:	9301      	str	r3, [sp, #4]
 80017b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017b4:	9300      	str	r3, [sp, #0]
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	68b9      	ldr	r1, [r7, #8]
 80017ba:	68f8      	ldr	r0, [r7, #12]
 80017bc:	f000 f80e 	bl	80017dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80017c0:	69f8      	ldr	r0, [r7, #28]
 80017c2:	f000 f89b 	bl	80018fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80017c6:	2301      	movs	r3, #1
 80017c8:	61bb      	str	r3, [r7, #24]
 80017ca:	e002      	b.n	80017d2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80017cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017d0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80017d2:	69bb      	ldr	r3, [r7, #24]
	}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3720      	adds	r7, #32
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}

080017dc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b088      	sub	sp, #32
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	60b9      	str	r1, [r7, #8]
 80017e6:	607a      	str	r2, [r7, #4]
 80017e8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80017ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017ec:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	461a      	mov	r2, r3
 80017f4:	21a5      	movs	r1, #165	; 0xa5
 80017f6:	f007 f80b 	bl	8008810 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80017fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001804:	3b01      	subs	r3, #1
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	4413      	add	r3, r2
 800180a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	f023 0307 	bic.w	r3, r3, #7
 8001812:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	f003 0307 	and.w	r3, r3, #7
 800181a:	2b00      	cmp	r3, #0
 800181c:	d00a      	beq.n	8001834 <prvInitialiseNewTask+0x58>
	__asm volatile
 800181e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001822:	f383 8811 	msr	BASEPRI, r3
 8001826:	f3bf 8f6f 	isb	sy
 800182a:	f3bf 8f4f 	dsb	sy
 800182e:	617b      	str	r3, [r7, #20]
}
 8001830:	bf00      	nop
 8001832:	e7fe      	b.n	8001832 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d01f      	beq.n	800187a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800183a:	2300      	movs	r3, #0
 800183c:	61fb      	str	r3, [r7, #28]
 800183e:	e012      	b.n	8001866 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001840:	68ba      	ldr	r2, [r7, #8]
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	4413      	add	r3, r2
 8001846:	7819      	ldrb	r1, [r3, #0]
 8001848:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	4413      	add	r3, r2
 800184e:	3334      	adds	r3, #52	; 0x34
 8001850:	460a      	mov	r2, r1
 8001852:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8001854:	68ba      	ldr	r2, [r7, #8]
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	4413      	add	r3, r2
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d006      	beq.n	800186e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	3301      	adds	r3, #1
 8001864:	61fb      	str	r3, [r7, #28]
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	2b0f      	cmp	r3, #15
 800186a:	d9e9      	bls.n	8001840 <prvInitialiseNewTask+0x64>
 800186c:	e000      	b.n	8001870 <prvInitialiseNewTask+0x94>
			{
				break;
 800186e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001872:	2200      	movs	r2, #0
 8001874:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001878:	e003      	b.n	8001882 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800187a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800187c:	2200      	movs	r2, #0
 800187e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001884:	2b37      	cmp	r3, #55	; 0x37
 8001886:	d901      	bls.n	800188c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001888:	2337      	movs	r3, #55	; 0x37
 800188a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800188c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800188e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001890:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001894:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001896:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8001898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800189a:	2200      	movs	r2, #0
 800189c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800189e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018a0:	3304      	adds	r3, #4
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff f978 	bl	8000b98 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80018a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018aa:	3318      	adds	r3, #24
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff f973 	bl	8000b98 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80018b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018b6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80018b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018ba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80018be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018c0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80018c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018c6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80018c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018ca:	2200      	movs	r2, #0
 80018cc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80018ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018d0:	2200      	movs	r2, #0
 80018d2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80018d6:	683a      	ldr	r2, [r7, #0]
 80018d8:	68f9      	ldr	r1, [r7, #12]
 80018da:	69b8      	ldr	r0, [r7, #24]
 80018dc:	f001 fa16 	bl	8002d0c <pxPortInitialiseStack>
 80018e0:	4602      	mov	r2, r0
 80018e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018e4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80018e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d002      	beq.n	80018f2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80018ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80018f2:	bf00      	nop
 80018f4:	3720      	adds	r7, #32
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
	...

080018fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001904:	f001 fb2e 	bl	8002f64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001908:	4b2d      	ldr	r3, [pc, #180]	; (80019c0 <prvAddNewTaskToReadyList+0xc4>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	3301      	adds	r3, #1
 800190e:	4a2c      	ldr	r2, [pc, #176]	; (80019c0 <prvAddNewTaskToReadyList+0xc4>)
 8001910:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001912:	4b2c      	ldr	r3, [pc, #176]	; (80019c4 <prvAddNewTaskToReadyList+0xc8>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d109      	bne.n	800192e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800191a:	4a2a      	ldr	r2, [pc, #168]	; (80019c4 <prvAddNewTaskToReadyList+0xc8>)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001920:	4b27      	ldr	r3, [pc, #156]	; (80019c0 <prvAddNewTaskToReadyList+0xc4>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2b01      	cmp	r3, #1
 8001926:	d110      	bne.n	800194a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001928:	f000 fc28 	bl	800217c <prvInitialiseTaskLists>
 800192c:	e00d      	b.n	800194a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800192e:	4b26      	ldr	r3, [pc, #152]	; (80019c8 <prvAddNewTaskToReadyList+0xcc>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d109      	bne.n	800194a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001936:	4b23      	ldr	r3, [pc, #140]	; (80019c4 <prvAddNewTaskToReadyList+0xc8>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001940:	429a      	cmp	r2, r3
 8001942:	d802      	bhi.n	800194a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001944:	4a1f      	ldr	r2, [pc, #124]	; (80019c4 <prvAddNewTaskToReadyList+0xc8>)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800194a:	4b20      	ldr	r3, [pc, #128]	; (80019cc <prvAddNewTaskToReadyList+0xd0>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	3301      	adds	r3, #1
 8001950:	4a1e      	ldr	r2, [pc, #120]	; (80019cc <prvAddNewTaskToReadyList+0xd0>)
 8001952:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001954:	4b1d      	ldr	r3, [pc, #116]	; (80019cc <prvAddNewTaskToReadyList+0xd0>)
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001960:	4b1b      	ldr	r3, [pc, #108]	; (80019d0 <prvAddNewTaskToReadyList+0xd4>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	429a      	cmp	r2, r3
 8001966:	d903      	bls.n	8001970 <prvAddNewTaskToReadyList+0x74>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800196c:	4a18      	ldr	r2, [pc, #96]	; (80019d0 <prvAddNewTaskToReadyList+0xd4>)
 800196e:	6013      	str	r3, [r2, #0]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001974:	4613      	mov	r3, r2
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	4413      	add	r3, r2
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	4a15      	ldr	r2, [pc, #84]	; (80019d4 <prvAddNewTaskToReadyList+0xd8>)
 800197e:	441a      	add	r2, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3304      	adds	r3, #4
 8001984:	4619      	mov	r1, r3
 8001986:	4610      	mov	r0, r2
 8001988:	f7ff f913 	bl	8000bb2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800198c:	f001 fb1a 	bl	8002fc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001990:	4b0d      	ldr	r3, [pc, #52]	; (80019c8 <prvAddNewTaskToReadyList+0xcc>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d00e      	beq.n	80019b6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001998:	4b0a      	ldr	r3, [pc, #40]	; (80019c4 <prvAddNewTaskToReadyList+0xc8>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d207      	bcs.n	80019b6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80019a6:	4b0c      	ldr	r3, [pc, #48]	; (80019d8 <prvAddNewTaskToReadyList+0xdc>)
 80019a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	f3bf 8f4f 	dsb	sy
 80019b2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80019b6:	bf00      	nop
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	20001498 	.word	0x20001498
 80019c4:	20000fc4 	.word	0x20000fc4
 80019c8:	200014a4 	.word	0x200014a4
 80019cc:	200014b4 	.word	0x200014b4
 80019d0:	200014a0 	.word	0x200014a0
 80019d4:	20000fc8 	.word	0x20000fc8
 80019d8:	e000ed04 	.word	0xe000ed04

080019dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80019e4:	2300      	movs	r3, #0
 80019e6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d017      	beq.n	8001a1e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80019ee:	4b13      	ldr	r3, [pc, #76]	; (8001a3c <vTaskDelay+0x60>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d00a      	beq.n	8001a0c <vTaskDelay+0x30>
	__asm volatile
 80019f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019fa:	f383 8811 	msr	BASEPRI, r3
 80019fe:	f3bf 8f6f 	isb	sy
 8001a02:	f3bf 8f4f 	dsb	sy
 8001a06:	60bb      	str	r3, [r7, #8]
}
 8001a08:	bf00      	nop
 8001a0a:	e7fe      	b.n	8001a0a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8001a0c:	f000 f880 	bl	8001b10 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001a10:	2100      	movs	r1, #0
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f000 fdd8 	bl	80025c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8001a18:	f000 f888 	bl	8001b2c <xTaskResumeAll>
 8001a1c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d107      	bne.n	8001a34 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8001a24:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <vTaskDelay+0x64>)
 8001a26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	f3bf 8f4f 	dsb	sy
 8001a30:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001a34:	bf00      	nop
 8001a36:	3710      	adds	r7, #16
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	200014c0 	.word	0x200014c0
 8001a40:	e000ed04 	.word	0xe000ed04

08001a44 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b08a      	sub	sp, #40	; 0x28
 8001a48:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8001a52:	463a      	mov	r2, r7
 8001a54:	1d39      	adds	r1, r7, #4
 8001a56:	f107 0308 	add.w	r3, r7, #8
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff f848 	bl	8000af0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8001a60:	6839      	ldr	r1, [r7, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	68ba      	ldr	r2, [r7, #8]
 8001a66:	9202      	str	r2, [sp, #8]
 8001a68:	9301      	str	r3, [sp, #4]
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	9300      	str	r3, [sp, #0]
 8001a6e:	2300      	movs	r3, #0
 8001a70:	460a      	mov	r2, r1
 8001a72:	4921      	ldr	r1, [pc, #132]	; (8001af8 <vTaskStartScheduler+0xb4>)
 8001a74:	4821      	ldr	r0, [pc, #132]	; (8001afc <vTaskStartScheduler+0xb8>)
 8001a76:	f7ff fe0f 	bl	8001698 <xTaskCreateStatic>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	4a20      	ldr	r2, [pc, #128]	; (8001b00 <vTaskStartScheduler+0xbc>)
 8001a7e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8001a80:	4b1f      	ldr	r3, [pc, #124]	; (8001b00 <vTaskStartScheduler+0xbc>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d002      	beq.n	8001a8e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	617b      	str	r3, [r7, #20]
 8001a8c:	e001      	b.n	8001a92 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d102      	bne.n	8001a9e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8001a98:	f000 fdea 	bl	8002670 <xTimerCreateTimerTask>
 8001a9c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d116      	bne.n	8001ad2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8001aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001aa8:	f383 8811 	msr	BASEPRI, r3
 8001aac:	f3bf 8f6f 	isb	sy
 8001ab0:	f3bf 8f4f 	dsb	sy
 8001ab4:	613b      	str	r3, [r7, #16]
}
 8001ab6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001ab8:	4b12      	ldr	r3, [pc, #72]	; (8001b04 <vTaskStartScheduler+0xc0>)
 8001aba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001abe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001ac0:	4b11      	ldr	r3, [pc, #68]	; (8001b08 <vTaskStartScheduler+0xc4>)
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001ac6:	4b11      	ldr	r3, [pc, #68]	; (8001b0c <vTaskStartScheduler+0xc8>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001acc:	f001 f9a8 	bl	8002e20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001ad0:	e00e      	b.n	8001af0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ad8:	d10a      	bne.n	8001af0 <vTaskStartScheduler+0xac>
	__asm volatile
 8001ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ade:	f383 8811 	msr	BASEPRI, r3
 8001ae2:	f3bf 8f6f 	isb	sy
 8001ae6:	f3bf 8f4f 	dsb	sy
 8001aea:	60fb      	str	r3, [r7, #12]
}
 8001aec:	bf00      	nop
 8001aee:	e7fe      	b.n	8001aee <vTaskStartScheduler+0xaa>
}
 8001af0:	bf00      	nop
 8001af2:	3718      	adds	r7, #24
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	080098e0 	.word	0x080098e0
 8001afc:	0800214d 	.word	0x0800214d
 8001b00:	200014bc 	.word	0x200014bc
 8001b04:	200014b8 	.word	0x200014b8
 8001b08:	200014a4 	.word	0x200014a4
 8001b0c:	2000149c 	.word	0x2000149c

08001b10 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8001b14:	4b04      	ldr	r3, [pc, #16]	; (8001b28 <vTaskSuspendAll+0x18>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	3301      	adds	r3, #1
 8001b1a:	4a03      	ldr	r2, [pc, #12]	; (8001b28 <vTaskSuspendAll+0x18>)
 8001b1c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8001b1e:	bf00      	nop
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	200014c0 	.word	0x200014c0

08001b2c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001b32:	2300      	movs	r3, #0
 8001b34:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001b36:	2300      	movs	r3, #0
 8001b38:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001b3a:	4b42      	ldr	r3, [pc, #264]	; (8001c44 <xTaskResumeAll+0x118>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d10a      	bne.n	8001b58 <xTaskResumeAll+0x2c>
	__asm volatile
 8001b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b46:	f383 8811 	msr	BASEPRI, r3
 8001b4a:	f3bf 8f6f 	isb	sy
 8001b4e:	f3bf 8f4f 	dsb	sy
 8001b52:	603b      	str	r3, [r7, #0]
}
 8001b54:	bf00      	nop
 8001b56:	e7fe      	b.n	8001b56 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001b58:	f001 fa04 	bl	8002f64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001b5c:	4b39      	ldr	r3, [pc, #228]	; (8001c44 <xTaskResumeAll+0x118>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	3b01      	subs	r3, #1
 8001b62:	4a38      	ldr	r2, [pc, #224]	; (8001c44 <xTaskResumeAll+0x118>)
 8001b64:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001b66:	4b37      	ldr	r3, [pc, #220]	; (8001c44 <xTaskResumeAll+0x118>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d162      	bne.n	8001c34 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001b6e:	4b36      	ldr	r3, [pc, #216]	; (8001c48 <xTaskResumeAll+0x11c>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d05e      	beq.n	8001c34 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001b76:	e02f      	b.n	8001bd8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001b78:	4b34      	ldr	r3, [pc, #208]	; (8001c4c <xTaskResumeAll+0x120>)
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	3318      	adds	r3, #24
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff f871 	bl	8000c6c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	3304      	adds	r3, #4
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff f86c 	bl	8000c6c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b98:	4b2d      	ldr	r3, [pc, #180]	; (8001c50 <xTaskResumeAll+0x124>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d903      	bls.n	8001ba8 <xTaskResumeAll+0x7c>
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba4:	4a2a      	ldr	r2, [pc, #168]	; (8001c50 <xTaskResumeAll+0x124>)
 8001ba6:	6013      	str	r3, [r2, #0]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bac:	4613      	mov	r3, r2
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	4413      	add	r3, r2
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	4a27      	ldr	r2, [pc, #156]	; (8001c54 <xTaskResumeAll+0x128>)
 8001bb6:	441a      	add	r2, r3
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	3304      	adds	r3, #4
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4610      	mov	r0, r2
 8001bc0:	f7fe fff7 	bl	8000bb2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bc8:	4b23      	ldr	r3, [pc, #140]	; (8001c58 <xTaskResumeAll+0x12c>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d302      	bcc.n	8001bd8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8001bd2:	4b22      	ldr	r3, [pc, #136]	; (8001c5c <xTaskResumeAll+0x130>)
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001bd8:	4b1c      	ldr	r3, [pc, #112]	; (8001c4c <xTaskResumeAll+0x120>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d1cb      	bne.n	8001b78 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001be6:	f000 fb67 	bl	80022b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001bea:	4b1d      	ldr	r3, [pc, #116]	; (8001c60 <xTaskResumeAll+0x134>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d010      	beq.n	8001c18 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001bf6:	f000 f859 	bl	8001cac <xTaskIncrementTick>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d002      	beq.n	8001c06 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8001c00:	4b16      	ldr	r3, [pc, #88]	; (8001c5c <xTaskResumeAll+0x130>)
 8001c02:	2201      	movs	r2, #1
 8001c04:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	3b01      	subs	r3, #1
 8001c0a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d1f1      	bne.n	8001bf6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8001c12:	4b13      	ldr	r3, [pc, #76]	; (8001c60 <xTaskResumeAll+0x134>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001c18:	4b10      	ldr	r3, [pc, #64]	; (8001c5c <xTaskResumeAll+0x130>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d009      	beq.n	8001c34 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001c20:	2301      	movs	r3, #1
 8001c22:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001c24:	4b0f      	ldr	r3, [pc, #60]	; (8001c64 <xTaskResumeAll+0x138>)
 8001c26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	f3bf 8f4f 	dsb	sy
 8001c30:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001c34:	f001 f9c6 	bl	8002fc4 <vPortExitCritical>

	return xAlreadyYielded;
 8001c38:	68bb      	ldr	r3, [r7, #8]
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3710      	adds	r7, #16
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	200014c0 	.word	0x200014c0
 8001c48:	20001498 	.word	0x20001498
 8001c4c:	20001458 	.word	0x20001458
 8001c50:	200014a0 	.word	0x200014a0
 8001c54:	20000fc8 	.word	0x20000fc8
 8001c58:	20000fc4 	.word	0x20000fc4
 8001c5c:	200014ac 	.word	0x200014ac
 8001c60:	200014a8 	.word	0x200014a8
 8001c64:	e000ed04 	.word	0xe000ed04

08001c68 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8001c6e:	4b05      	ldr	r3, [pc, #20]	; (8001c84 <xTaskGetTickCount+0x1c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8001c74:	687b      	ldr	r3, [r7, #4]
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	2000149c 	.word	0x2000149c

08001c88 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001c8e:	f001 fa29 	bl	80030e4 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8001c92:	2300      	movs	r3, #0
 8001c94:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8001c96:	4b04      	ldr	r3, [pc, #16]	; (8001ca8 <xTaskGetTickCountFromISR+0x20>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001c9c:	683b      	ldr	r3, [r7, #0]
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	2000149c 	.word	0x2000149c

08001cac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001cb6:	4b4f      	ldr	r3, [pc, #316]	; (8001df4 <xTaskIncrementTick+0x148>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	f040 808f 	bne.w	8001dde <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001cc0:	4b4d      	ldr	r3, [pc, #308]	; (8001df8 <xTaskIncrementTick+0x14c>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001cc8:	4a4b      	ldr	r2, [pc, #300]	; (8001df8 <xTaskIncrementTick+0x14c>)
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d120      	bne.n	8001d16 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8001cd4:	4b49      	ldr	r3, [pc, #292]	; (8001dfc <xTaskIncrementTick+0x150>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d00a      	beq.n	8001cf4 <xTaskIncrementTick+0x48>
	__asm volatile
 8001cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ce2:	f383 8811 	msr	BASEPRI, r3
 8001ce6:	f3bf 8f6f 	isb	sy
 8001cea:	f3bf 8f4f 	dsb	sy
 8001cee:	603b      	str	r3, [r7, #0]
}
 8001cf0:	bf00      	nop
 8001cf2:	e7fe      	b.n	8001cf2 <xTaskIncrementTick+0x46>
 8001cf4:	4b41      	ldr	r3, [pc, #260]	; (8001dfc <xTaskIncrementTick+0x150>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	60fb      	str	r3, [r7, #12]
 8001cfa:	4b41      	ldr	r3, [pc, #260]	; (8001e00 <xTaskIncrementTick+0x154>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a3f      	ldr	r2, [pc, #252]	; (8001dfc <xTaskIncrementTick+0x150>)
 8001d00:	6013      	str	r3, [r2, #0]
 8001d02:	4a3f      	ldr	r2, [pc, #252]	; (8001e00 <xTaskIncrementTick+0x154>)
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	6013      	str	r3, [r2, #0]
 8001d08:	4b3e      	ldr	r3, [pc, #248]	; (8001e04 <xTaskIncrementTick+0x158>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	4a3d      	ldr	r2, [pc, #244]	; (8001e04 <xTaskIncrementTick+0x158>)
 8001d10:	6013      	str	r3, [r2, #0]
 8001d12:	f000 fad1 	bl	80022b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001d16:	4b3c      	ldr	r3, [pc, #240]	; (8001e08 <xTaskIncrementTick+0x15c>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d349      	bcc.n	8001db4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001d20:	4b36      	ldr	r3, [pc, #216]	; (8001dfc <xTaskIncrementTick+0x150>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d104      	bne.n	8001d34 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d2a:	4b37      	ldr	r3, [pc, #220]	; (8001e08 <xTaskIncrementTick+0x15c>)
 8001d2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d30:	601a      	str	r2, [r3, #0]
					break;
 8001d32:	e03f      	b.n	8001db4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001d34:	4b31      	ldr	r3, [pc, #196]	; (8001dfc <xTaskIncrementTick+0x150>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001d44:	693a      	ldr	r2, [r7, #16]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d203      	bcs.n	8001d54 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001d4c:	4a2e      	ldr	r2, [pc, #184]	; (8001e08 <xTaskIncrementTick+0x15c>)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001d52:	e02f      	b.n	8001db4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	3304      	adds	r3, #4
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7fe ff87 	bl	8000c6c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d004      	beq.n	8001d70 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	3318      	adds	r3, #24
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7fe ff7e 	bl	8000c6c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d74:	4b25      	ldr	r3, [pc, #148]	; (8001e0c <xTaskIncrementTick+0x160>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d903      	bls.n	8001d84 <xTaskIncrementTick+0xd8>
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d80:	4a22      	ldr	r2, [pc, #136]	; (8001e0c <xTaskIncrementTick+0x160>)
 8001d82:	6013      	str	r3, [r2, #0]
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d88:	4613      	mov	r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	4413      	add	r3, r2
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	4a1f      	ldr	r2, [pc, #124]	; (8001e10 <xTaskIncrementTick+0x164>)
 8001d92:	441a      	add	r2, r3
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	3304      	adds	r3, #4
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4610      	mov	r0, r2
 8001d9c:	f7fe ff09 	bl	8000bb2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001da4:	4b1b      	ldr	r3, [pc, #108]	; (8001e14 <xTaskIncrementTick+0x168>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d3b8      	bcc.n	8001d20 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8001dae:	2301      	movs	r3, #1
 8001db0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001db2:	e7b5      	b.n	8001d20 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001db4:	4b17      	ldr	r3, [pc, #92]	; (8001e14 <xTaskIncrementTick+0x168>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dba:	4915      	ldr	r1, [pc, #84]	; (8001e10 <xTaskIncrementTick+0x164>)
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	4413      	add	r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	440b      	add	r3, r1
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d901      	bls.n	8001dd0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8001dd0:	4b11      	ldr	r3, [pc, #68]	; (8001e18 <xTaskIncrementTick+0x16c>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d007      	beq.n	8001de8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	617b      	str	r3, [r7, #20]
 8001ddc:	e004      	b.n	8001de8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8001dde:	4b0f      	ldr	r3, [pc, #60]	; (8001e1c <xTaskIncrementTick+0x170>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	3301      	adds	r3, #1
 8001de4:	4a0d      	ldr	r2, [pc, #52]	; (8001e1c <xTaskIncrementTick+0x170>)
 8001de6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8001de8:	697b      	ldr	r3, [r7, #20]
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3718      	adds	r7, #24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	200014c0 	.word	0x200014c0
 8001df8:	2000149c 	.word	0x2000149c
 8001dfc:	20001450 	.word	0x20001450
 8001e00:	20001454 	.word	0x20001454
 8001e04:	200014b0 	.word	0x200014b0
 8001e08:	200014b8 	.word	0x200014b8
 8001e0c:	200014a0 	.word	0x200014a0
 8001e10:	20000fc8 	.word	0x20000fc8
 8001e14:	20000fc4 	.word	0x20000fc4
 8001e18:	200014ac 	.word	0x200014ac
 8001e1c:	200014a8 	.word	0x200014a8

08001e20 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001e26:	4b28      	ldr	r3, [pc, #160]	; (8001ec8 <vTaskSwitchContext+0xa8>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d003      	beq.n	8001e36 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001e2e:	4b27      	ldr	r3, [pc, #156]	; (8001ecc <vTaskSwitchContext+0xac>)
 8001e30:	2201      	movs	r2, #1
 8001e32:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001e34:	e041      	b.n	8001eba <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8001e36:	4b25      	ldr	r3, [pc, #148]	; (8001ecc <vTaskSwitchContext+0xac>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001e3c:	4b24      	ldr	r3, [pc, #144]	; (8001ed0 <vTaskSwitchContext+0xb0>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	60fb      	str	r3, [r7, #12]
 8001e42:	e010      	b.n	8001e66 <vTaskSwitchContext+0x46>
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d10a      	bne.n	8001e60 <vTaskSwitchContext+0x40>
	__asm volatile
 8001e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e4e:	f383 8811 	msr	BASEPRI, r3
 8001e52:	f3bf 8f6f 	isb	sy
 8001e56:	f3bf 8f4f 	dsb	sy
 8001e5a:	607b      	str	r3, [r7, #4]
}
 8001e5c:	bf00      	nop
 8001e5e:	e7fe      	b.n	8001e5e <vTaskSwitchContext+0x3e>
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	3b01      	subs	r3, #1
 8001e64:	60fb      	str	r3, [r7, #12]
 8001e66:	491b      	ldr	r1, [pc, #108]	; (8001ed4 <vTaskSwitchContext+0xb4>)
 8001e68:	68fa      	ldr	r2, [r7, #12]
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	4413      	add	r3, r2
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	440b      	add	r3, r1
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d0e4      	beq.n	8001e44 <vTaskSwitchContext+0x24>
 8001e7a:	68fa      	ldr	r2, [r7, #12]
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	4413      	add	r3, r2
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	4a13      	ldr	r2, [pc, #76]	; (8001ed4 <vTaskSwitchContext+0xb4>)
 8001e86:	4413      	add	r3, r2
 8001e88:	60bb      	str	r3, [r7, #8]
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	685a      	ldr	r2, [r3, #4]
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	605a      	str	r2, [r3, #4]
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	685a      	ldr	r2, [r3, #4]
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	3308      	adds	r3, #8
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d104      	bne.n	8001eaa <vTaskSwitchContext+0x8a>
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	685a      	ldr	r2, [r3, #4]
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	605a      	str	r2, [r3, #4]
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	4a09      	ldr	r2, [pc, #36]	; (8001ed8 <vTaskSwitchContext+0xb8>)
 8001eb2:	6013      	str	r3, [r2, #0]
 8001eb4:	4a06      	ldr	r2, [pc, #24]	; (8001ed0 <vTaskSwitchContext+0xb0>)
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	6013      	str	r3, [r2, #0]
}
 8001eba:	bf00      	nop
 8001ebc:	3714      	adds	r7, #20
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	200014c0 	.word	0x200014c0
 8001ecc:	200014ac 	.word	0x200014ac
 8001ed0:	200014a0 	.word	0x200014a0
 8001ed4:	20000fc8 	.word	0x20000fc8
 8001ed8:	20000fc4 	.word	0x20000fc4

08001edc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d10a      	bne.n	8001f02 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8001eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ef0:	f383 8811 	msr	BASEPRI, r3
 8001ef4:	f3bf 8f6f 	isb	sy
 8001ef8:	f3bf 8f4f 	dsb	sy
 8001efc:	60fb      	str	r3, [r7, #12]
}
 8001efe:	bf00      	nop
 8001f00:	e7fe      	b.n	8001f00 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001f02:	4b07      	ldr	r3, [pc, #28]	; (8001f20 <vTaskPlaceOnEventList+0x44>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	3318      	adds	r3, #24
 8001f08:	4619      	mov	r1, r3
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f7fe fe75 	bl	8000bfa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001f10:	2101      	movs	r1, #1
 8001f12:	6838      	ldr	r0, [r7, #0]
 8001f14:	f000 fb58 	bl	80025c8 <prvAddCurrentTaskToDelayedList>
}
 8001f18:	bf00      	nop
 8001f1a:	3710      	adds	r7, #16
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	20000fc4 	.word	0x20000fc4

08001f24 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d10a      	bne.n	8001f4c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8001f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f3a:	f383 8811 	msr	BASEPRI, r3
 8001f3e:	f3bf 8f6f 	isb	sy
 8001f42:	f3bf 8f4f 	dsb	sy
 8001f46:	617b      	str	r3, [r7, #20]
}
 8001f48:	bf00      	nop
 8001f4a:	e7fe      	b.n	8001f4a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001f4c:	4b0a      	ldr	r3, [pc, #40]	; (8001f78 <vTaskPlaceOnEventListRestricted+0x54>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	3318      	adds	r3, #24
 8001f52:	4619      	mov	r1, r3
 8001f54:	68f8      	ldr	r0, [r7, #12]
 8001f56:	f7fe fe2c 	bl	8000bb2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d002      	beq.n	8001f66 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8001f60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f64:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001f66:	6879      	ldr	r1, [r7, #4]
 8001f68:	68b8      	ldr	r0, [r7, #8]
 8001f6a:	f000 fb2d 	bl	80025c8 <prvAddCurrentTaskToDelayedList>
	}
 8001f6e:	bf00      	nop
 8001f70:	3718      	adds	r7, #24
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	20000fc4 	.word	0x20000fc4

08001f7c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d10a      	bne.n	8001fa8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8001f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f96:	f383 8811 	msr	BASEPRI, r3
 8001f9a:	f3bf 8f6f 	isb	sy
 8001f9e:	f3bf 8f4f 	dsb	sy
 8001fa2:	60fb      	str	r3, [r7, #12]
}
 8001fa4:	bf00      	nop
 8001fa6:	e7fe      	b.n	8001fa6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	3318      	adds	r3, #24
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7fe fe5d 	bl	8000c6c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001fb2:	4b1e      	ldr	r3, [pc, #120]	; (800202c <xTaskRemoveFromEventList+0xb0>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d11d      	bne.n	8001ff6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	3304      	adds	r3, #4
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7fe fe54 	bl	8000c6c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fc8:	4b19      	ldr	r3, [pc, #100]	; (8002030 <xTaskRemoveFromEventList+0xb4>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d903      	bls.n	8001fd8 <xTaskRemoveFromEventList+0x5c>
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd4:	4a16      	ldr	r2, [pc, #88]	; (8002030 <xTaskRemoveFromEventList+0xb4>)
 8001fd6:	6013      	str	r3, [r2, #0]
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fdc:	4613      	mov	r3, r2
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	4413      	add	r3, r2
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	4a13      	ldr	r2, [pc, #76]	; (8002034 <xTaskRemoveFromEventList+0xb8>)
 8001fe6:	441a      	add	r2, r3
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	3304      	adds	r3, #4
 8001fec:	4619      	mov	r1, r3
 8001fee:	4610      	mov	r0, r2
 8001ff0:	f7fe fddf 	bl	8000bb2 <vListInsertEnd>
 8001ff4:	e005      	b.n	8002002 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	3318      	adds	r3, #24
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	480e      	ldr	r0, [pc, #56]	; (8002038 <xTaskRemoveFromEventList+0xbc>)
 8001ffe:	f7fe fdd8 	bl	8000bb2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002006:	4b0d      	ldr	r3, [pc, #52]	; (800203c <xTaskRemoveFromEventList+0xc0>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800200c:	429a      	cmp	r2, r3
 800200e:	d905      	bls.n	800201c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002010:	2301      	movs	r3, #1
 8002012:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002014:	4b0a      	ldr	r3, [pc, #40]	; (8002040 <xTaskRemoveFromEventList+0xc4>)
 8002016:	2201      	movs	r2, #1
 8002018:	601a      	str	r2, [r3, #0]
 800201a:	e001      	b.n	8002020 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800201c:	2300      	movs	r3, #0
 800201e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8002020:	697b      	ldr	r3, [r7, #20]
}
 8002022:	4618      	mov	r0, r3
 8002024:	3718      	adds	r7, #24
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	200014c0 	.word	0x200014c0
 8002030:	200014a0 	.word	0x200014a0
 8002034:	20000fc8 	.word	0x20000fc8
 8002038:	20001458 	.word	0x20001458
 800203c:	20000fc4 	.word	0x20000fc4
 8002040:	200014ac 	.word	0x200014ac

08002044 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800204c:	4b06      	ldr	r3, [pc, #24]	; (8002068 <vTaskInternalSetTimeOutState+0x24>)
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002054:	4b05      	ldr	r3, [pc, #20]	; (800206c <vTaskInternalSetTimeOutState+0x28>)
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	605a      	str	r2, [r3, #4]
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr
 8002068:	200014b0 	.word	0x200014b0
 800206c:	2000149c 	.word	0x2000149c

08002070 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b088      	sub	sp, #32
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d10a      	bne.n	8002096 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8002080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002084:	f383 8811 	msr	BASEPRI, r3
 8002088:	f3bf 8f6f 	isb	sy
 800208c:	f3bf 8f4f 	dsb	sy
 8002090:	613b      	str	r3, [r7, #16]
}
 8002092:	bf00      	nop
 8002094:	e7fe      	b.n	8002094 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d10a      	bne.n	80020b2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800209c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020a0:	f383 8811 	msr	BASEPRI, r3
 80020a4:	f3bf 8f6f 	isb	sy
 80020a8:	f3bf 8f4f 	dsb	sy
 80020ac:	60fb      	str	r3, [r7, #12]
}
 80020ae:	bf00      	nop
 80020b0:	e7fe      	b.n	80020b0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80020b2:	f000 ff57 	bl	8002f64 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80020b6:	4b1d      	ldr	r3, [pc, #116]	; (800212c <xTaskCheckForTimeOut+0xbc>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020ce:	d102      	bne.n	80020d6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80020d0:	2300      	movs	r3, #0
 80020d2:	61fb      	str	r3, [r7, #28]
 80020d4:	e023      	b.n	800211e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	4b15      	ldr	r3, [pc, #84]	; (8002130 <xTaskCheckForTimeOut+0xc0>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	429a      	cmp	r2, r3
 80020e0:	d007      	beq.n	80020f2 <xTaskCheckForTimeOut+0x82>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d302      	bcc.n	80020f2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80020ec:	2301      	movs	r3, #1
 80020ee:	61fb      	str	r3, [r7, #28]
 80020f0:	e015      	b.n	800211e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	697a      	ldr	r2, [r7, #20]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d20b      	bcs.n	8002114 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	1ad2      	subs	r2, r2, r3
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f7ff ff9b 	bl	8002044 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800210e:	2300      	movs	r3, #0
 8002110:	61fb      	str	r3, [r7, #28]
 8002112:	e004      	b.n	800211e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	2200      	movs	r2, #0
 8002118:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800211a:	2301      	movs	r3, #1
 800211c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800211e:	f000 ff51 	bl	8002fc4 <vPortExitCritical>

	return xReturn;
 8002122:	69fb      	ldr	r3, [r7, #28]
}
 8002124:	4618      	mov	r0, r3
 8002126:	3720      	adds	r7, #32
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	2000149c 	.word	0x2000149c
 8002130:	200014b0 	.word	0x200014b0

08002134 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002138:	4b03      	ldr	r3, [pc, #12]	; (8002148 <vTaskMissedYield+0x14>)
 800213a:	2201      	movs	r2, #1
 800213c:	601a      	str	r2, [r3, #0]
}
 800213e:	bf00      	nop
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr
 8002148:	200014ac 	.word	0x200014ac

0800214c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002154:	f000 f852 	bl	80021fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002158:	4b06      	ldr	r3, [pc, #24]	; (8002174 <prvIdleTask+0x28>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2b01      	cmp	r3, #1
 800215e:	d9f9      	bls.n	8002154 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002160:	4b05      	ldr	r3, [pc, #20]	; (8002178 <prvIdleTask+0x2c>)
 8002162:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	f3bf 8f4f 	dsb	sy
 800216c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002170:	e7f0      	b.n	8002154 <prvIdleTask+0x8>
 8002172:	bf00      	nop
 8002174:	20000fc8 	.word	0x20000fc8
 8002178:	e000ed04 	.word	0xe000ed04

0800217c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002182:	2300      	movs	r3, #0
 8002184:	607b      	str	r3, [r7, #4]
 8002186:	e00c      	b.n	80021a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	4613      	mov	r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	4413      	add	r3, r2
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	4a12      	ldr	r2, [pc, #72]	; (80021dc <prvInitialiseTaskLists+0x60>)
 8002194:	4413      	add	r3, r2
 8002196:	4618      	mov	r0, r3
 8002198:	f7fe fcde 	bl	8000b58 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	3301      	adds	r3, #1
 80021a0:	607b      	str	r3, [r7, #4]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2b37      	cmp	r3, #55	; 0x37
 80021a6:	d9ef      	bls.n	8002188 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80021a8:	480d      	ldr	r0, [pc, #52]	; (80021e0 <prvInitialiseTaskLists+0x64>)
 80021aa:	f7fe fcd5 	bl	8000b58 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80021ae:	480d      	ldr	r0, [pc, #52]	; (80021e4 <prvInitialiseTaskLists+0x68>)
 80021b0:	f7fe fcd2 	bl	8000b58 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80021b4:	480c      	ldr	r0, [pc, #48]	; (80021e8 <prvInitialiseTaskLists+0x6c>)
 80021b6:	f7fe fccf 	bl	8000b58 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80021ba:	480c      	ldr	r0, [pc, #48]	; (80021ec <prvInitialiseTaskLists+0x70>)
 80021bc:	f7fe fccc 	bl	8000b58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80021c0:	480b      	ldr	r0, [pc, #44]	; (80021f0 <prvInitialiseTaskLists+0x74>)
 80021c2:	f7fe fcc9 	bl	8000b58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80021c6:	4b0b      	ldr	r3, [pc, #44]	; (80021f4 <prvInitialiseTaskLists+0x78>)
 80021c8:	4a05      	ldr	r2, [pc, #20]	; (80021e0 <prvInitialiseTaskLists+0x64>)
 80021ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80021cc:	4b0a      	ldr	r3, [pc, #40]	; (80021f8 <prvInitialiseTaskLists+0x7c>)
 80021ce:	4a05      	ldr	r2, [pc, #20]	; (80021e4 <prvInitialiseTaskLists+0x68>)
 80021d0:	601a      	str	r2, [r3, #0]
}
 80021d2:	bf00      	nop
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	20000fc8 	.word	0x20000fc8
 80021e0:	20001428 	.word	0x20001428
 80021e4:	2000143c 	.word	0x2000143c
 80021e8:	20001458 	.word	0x20001458
 80021ec:	2000146c 	.word	0x2000146c
 80021f0:	20001484 	.word	0x20001484
 80021f4:	20001450 	.word	0x20001450
 80021f8:	20001454 	.word	0x20001454

080021fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002202:	e019      	b.n	8002238 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002204:	f000 feae 	bl	8002f64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002208:	4b10      	ldr	r3, [pc, #64]	; (800224c <prvCheckTasksWaitingTermination+0x50>)
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	3304      	adds	r3, #4
 8002214:	4618      	mov	r0, r3
 8002216:	f7fe fd29 	bl	8000c6c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800221a:	4b0d      	ldr	r3, [pc, #52]	; (8002250 <prvCheckTasksWaitingTermination+0x54>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	3b01      	subs	r3, #1
 8002220:	4a0b      	ldr	r2, [pc, #44]	; (8002250 <prvCheckTasksWaitingTermination+0x54>)
 8002222:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002224:	4b0b      	ldr	r3, [pc, #44]	; (8002254 <prvCheckTasksWaitingTermination+0x58>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	3b01      	subs	r3, #1
 800222a:	4a0a      	ldr	r2, [pc, #40]	; (8002254 <prvCheckTasksWaitingTermination+0x58>)
 800222c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800222e:	f000 fec9 	bl	8002fc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f000 f810 	bl	8002258 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002238:	4b06      	ldr	r3, [pc, #24]	; (8002254 <prvCheckTasksWaitingTermination+0x58>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d1e1      	bne.n	8002204 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002240:	bf00      	nop
 8002242:	bf00      	nop
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	2000146c 	.word	0x2000146c
 8002250:	20001498 	.word	0x20001498
 8002254:	20001480 	.word	0x20001480

08002258 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8002266:	2b00      	cmp	r3, #0
 8002268:	d108      	bne.n	800227c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226e:	4618      	mov	r0, r3
 8002270:	f001 f844 	bl	80032fc <vPortFree>
				vPortFree( pxTCB );
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f001 f841 	bl	80032fc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800227a:	e018      	b.n	80022ae <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8002282:	2b01      	cmp	r3, #1
 8002284:	d103      	bne.n	800228e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f001 f838 	bl	80032fc <vPortFree>
	}
 800228c:	e00f      	b.n	80022ae <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8002294:	2b02      	cmp	r3, #2
 8002296:	d00a      	beq.n	80022ae <prvDeleteTCB+0x56>
	__asm volatile
 8002298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800229c:	f383 8811 	msr	BASEPRI, r3
 80022a0:	f3bf 8f6f 	isb	sy
 80022a4:	f3bf 8f4f 	dsb	sy
 80022a8:	60fb      	str	r3, [r7, #12]
}
 80022aa:	bf00      	nop
 80022ac:	e7fe      	b.n	80022ac <prvDeleteTCB+0x54>
	}
 80022ae:	bf00      	nop
 80022b0:	3710      	adds	r7, #16
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
	...

080022b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80022be:	4b0c      	ldr	r3, [pc, #48]	; (80022f0 <prvResetNextTaskUnblockTime+0x38>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d104      	bne.n	80022d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80022c8:	4b0a      	ldr	r3, [pc, #40]	; (80022f4 <prvResetNextTaskUnblockTime+0x3c>)
 80022ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80022ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80022d0:	e008      	b.n	80022e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80022d2:	4b07      	ldr	r3, [pc, #28]	; (80022f0 <prvResetNextTaskUnblockTime+0x38>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	4a04      	ldr	r2, [pc, #16]	; (80022f4 <prvResetNextTaskUnblockTime+0x3c>)
 80022e2:	6013      	str	r3, [r2, #0]
}
 80022e4:	bf00      	nop
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr
 80022f0:	20001450 	.word	0x20001450
 80022f4:	200014b8 	.word	0x200014b8

080022f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80022fe:	4b0b      	ldr	r3, [pc, #44]	; (800232c <xTaskGetSchedulerState+0x34>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d102      	bne.n	800230c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002306:	2301      	movs	r3, #1
 8002308:	607b      	str	r3, [r7, #4]
 800230a:	e008      	b.n	800231e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800230c:	4b08      	ldr	r3, [pc, #32]	; (8002330 <xTaskGetSchedulerState+0x38>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d102      	bne.n	800231a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002314:	2302      	movs	r3, #2
 8002316:	607b      	str	r3, [r7, #4]
 8002318:	e001      	b.n	800231e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800231a:	2300      	movs	r3, #0
 800231c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800231e:	687b      	ldr	r3, [r7, #4]
	}
 8002320:	4618      	mov	r0, r3
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr
 800232c:	200014a4 	.word	0x200014a4
 8002330:	200014c0 	.word	0x200014c0

08002334 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002334:	b580      	push	{r7, lr}
 8002336:	b086      	sub	sp, #24
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8002340:	2300      	movs	r3, #0
 8002342:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d056      	beq.n	80023f8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800234a:	4b2e      	ldr	r3, [pc, #184]	; (8002404 <xTaskPriorityDisinherit+0xd0>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	693a      	ldr	r2, [r7, #16]
 8002350:	429a      	cmp	r2, r3
 8002352:	d00a      	beq.n	800236a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8002354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002358:	f383 8811 	msr	BASEPRI, r3
 800235c:	f3bf 8f6f 	isb	sy
 8002360:	f3bf 8f4f 	dsb	sy
 8002364:	60fb      	str	r3, [r7, #12]
}
 8002366:	bf00      	nop
 8002368:	e7fe      	b.n	8002368 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800236e:	2b00      	cmp	r3, #0
 8002370:	d10a      	bne.n	8002388 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8002372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002376:	f383 8811 	msr	BASEPRI, r3
 800237a:	f3bf 8f6f 	isb	sy
 800237e:	f3bf 8f4f 	dsb	sy
 8002382:	60bb      	str	r3, [r7, #8]
}
 8002384:	bf00      	nop
 8002386:	e7fe      	b.n	8002386 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800238c:	1e5a      	subs	r2, r3, #1
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800239a:	429a      	cmp	r2, r3
 800239c:	d02c      	beq.n	80023f8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d128      	bne.n	80023f8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	3304      	adds	r3, #4
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7fe fc5e 	bl	8000c6c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023bc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023c8:	4b0f      	ldr	r3, [pc, #60]	; (8002408 <xTaskPriorityDisinherit+0xd4>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d903      	bls.n	80023d8 <xTaskPriorityDisinherit+0xa4>
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d4:	4a0c      	ldr	r2, [pc, #48]	; (8002408 <xTaskPriorityDisinherit+0xd4>)
 80023d6:	6013      	str	r3, [r2, #0]
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023dc:	4613      	mov	r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	4413      	add	r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	4a09      	ldr	r2, [pc, #36]	; (800240c <xTaskPriorityDisinherit+0xd8>)
 80023e6:	441a      	add	r2, r3
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	3304      	adds	r3, #4
 80023ec:	4619      	mov	r1, r3
 80023ee:	4610      	mov	r0, r2
 80023f0:	f7fe fbdf 	bl	8000bb2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80023f4:	2301      	movs	r3, #1
 80023f6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80023f8:	697b      	ldr	r3, [r7, #20]
	}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3718      	adds	r7, #24
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	20000fc4 	.word	0x20000fc4
 8002408:	200014a0 	.word	0x200014a0
 800240c:	20000fc8 	.word	0x20000fc8

08002410 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8002410:	b580      	push	{r7, lr}
 8002412:	b08e      	sub	sp, #56	; 0x38
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	603b      	str	r3, [r7, #0]
 800241c:	4613      	mov	r3, r2
 800241e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8002420:	2301      	movs	r3, #1
 8002422:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d10a      	bne.n	8002440 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800242a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800242e:	f383 8811 	msr	BASEPRI, r3
 8002432:	f3bf 8f6f 	isb	sy
 8002436:	f3bf 8f4f 	dsb	sy
 800243a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800243c:	bf00      	nop
 800243e:	e7fe      	b.n	800243e <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002440:	f000 fe50 	bl	80030e4 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8002448:	f3ef 8211 	mrs	r2, BASEPRI
 800244c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002450:	f383 8811 	msr	BASEPRI, r3
 8002454:	f3bf 8f6f 	isb	sy
 8002458:	f3bf 8f4f 	dsb	sy
 800245c:	623a      	str	r2, [r7, #32]
 800245e:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8002460:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002462:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d003      	beq.n	8002472 <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800246a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800246c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8002472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002474:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002478:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800247c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800247e:	2202      	movs	r2, #2
 8002480:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8002484:	79fb      	ldrb	r3, [r7, #7]
 8002486:	2b04      	cmp	r3, #4
 8002488:	d828      	bhi.n	80024dc <xTaskGenericNotifyFromISR+0xcc>
 800248a:	a201      	add	r2, pc, #4	; (adr r2, 8002490 <xTaskGenericNotifyFromISR+0x80>)
 800248c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002490:	080024fd 	.word	0x080024fd
 8002494:	080024a5 	.word	0x080024a5
 8002498:	080024b3 	.word	0x080024b3
 800249c:	080024bf 	.word	0x080024bf
 80024a0:	080024c7 	.word	0x080024c7
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80024a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	431a      	orrs	r2, r3
 80024ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ae:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80024b0:	e027      	b.n	8002502 <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80024b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024b6:	1c5a      	adds	r2, r3, #1
 80024b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ba:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80024bc:	e021      	b.n	8002502 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80024be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c0:	68ba      	ldr	r2, [r7, #8]
 80024c2:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80024c4:	e01d      	b.n	8002502 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80024c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d003      	beq.n	80024d6 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80024ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d0:	68ba      	ldr	r2, [r7, #8]
 80024d2:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80024d4:	e015      	b.n	8002502 <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 80024d6:	2300      	movs	r3, #0
 80024d8:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 80024da:	e012      	b.n	8002502 <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80024dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024e4:	d00c      	beq.n	8002500 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 80024e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024ea:	f383 8811 	msr	BASEPRI, r3
 80024ee:	f3bf 8f6f 	isb	sy
 80024f2:	f3bf 8f4f 	dsb	sy
 80024f6:	61bb      	str	r3, [r7, #24]
}
 80024f8:	bf00      	nop
 80024fa:	e7fe      	b.n	80024fa <xTaskGenericNotifyFromISR+0xea>
					break;
 80024fc:	bf00      	nop
 80024fe:	e000      	b.n	8002502 <xTaskGenericNotifyFromISR+0xf2>
					break;
 8002500:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8002502:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002506:	2b01      	cmp	r3, #1
 8002508:	d146      	bne.n	8002598 <xTaskGenericNotifyFromISR+0x188>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800250a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800250c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800250e:	2b00      	cmp	r3, #0
 8002510:	d00a      	beq.n	8002528 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 8002512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002516:	f383 8811 	msr	BASEPRI, r3
 800251a:	f3bf 8f6f 	isb	sy
 800251e:	f3bf 8f4f 	dsb	sy
 8002522:	617b      	str	r3, [r7, #20]
}
 8002524:	bf00      	nop
 8002526:	e7fe      	b.n	8002526 <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002528:	4b21      	ldr	r3, [pc, #132]	; (80025b0 <xTaskGenericNotifyFromISR+0x1a0>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d11d      	bne.n	800256c <xTaskGenericNotifyFromISR+0x15c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002532:	3304      	adds	r3, #4
 8002534:	4618      	mov	r0, r3
 8002536:	f7fe fb99 	bl	8000c6c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800253a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800253c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800253e:	4b1d      	ldr	r3, [pc, #116]	; (80025b4 <xTaskGenericNotifyFromISR+0x1a4>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	429a      	cmp	r2, r3
 8002544:	d903      	bls.n	800254e <xTaskGenericNotifyFromISR+0x13e>
 8002546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254a:	4a1a      	ldr	r2, [pc, #104]	; (80025b4 <xTaskGenericNotifyFromISR+0x1a4>)
 800254c:	6013      	str	r3, [r2, #0]
 800254e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002552:	4613      	mov	r3, r2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	4413      	add	r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	4a17      	ldr	r2, [pc, #92]	; (80025b8 <xTaskGenericNotifyFromISR+0x1a8>)
 800255c:	441a      	add	r2, r3
 800255e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002560:	3304      	adds	r3, #4
 8002562:	4619      	mov	r1, r3
 8002564:	4610      	mov	r0, r2
 8002566:	f7fe fb24 	bl	8000bb2 <vListInsertEnd>
 800256a:	e005      	b.n	8002578 <xTaskGenericNotifyFromISR+0x168>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800256c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800256e:	3318      	adds	r3, #24
 8002570:	4619      	mov	r1, r3
 8002572:	4812      	ldr	r0, [pc, #72]	; (80025bc <xTaskGenericNotifyFromISR+0x1ac>)
 8002574:	f7fe fb1d 	bl	8000bb2 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800257a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800257c:	4b10      	ldr	r3, [pc, #64]	; (80025c0 <xTaskGenericNotifyFromISR+0x1b0>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002582:	429a      	cmp	r2, r3
 8002584:	d908      	bls.n	8002598 <xTaskGenericNotifyFromISR+0x188>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8002586:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002588:	2b00      	cmp	r3, #0
 800258a:	d002      	beq.n	8002592 <xTaskGenericNotifyFromISR+0x182>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800258c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800258e:	2201      	movs	r2, #1
 8002590:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8002592:	4b0c      	ldr	r3, [pc, #48]	; (80025c4 <xTaskGenericNotifyFromISR+0x1b4>)
 8002594:	2201      	movs	r2, #1
 8002596:	601a      	str	r2, [r3, #0]
 8002598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800259a:	613b      	str	r3, [r7, #16]
	__asm volatile
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	f383 8811 	msr	BASEPRI, r3
}
 80025a2:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80025a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3738      	adds	r7, #56	; 0x38
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	200014c0 	.word	0x200014c0
 80025b4:	200014a0 	.word	0x200014a0
 80025b8:	20000fc8 	.word	0x20000fc8
 80025bc:	20001458 	.word	0x20001458
 80025c0:	20000fc4 	.word	0x20000fc4
 80025c4:	200014ac 	.word	0x200014ac

080025c8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80025d2:	4b21      	ldr	r3, [pc, #132]	; (8002658 <prvAddCurrentTaskToDelayedList+0x90>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80025d8:	4b20      	ldr	r3, [pc, #128]	; (800265c <prvAddCurrentTaskToDelayedList+0x94>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	3304      	adds	r3, #4
 80025de:	4618      	mov	r0, r3
 80025e0:	f7fe fb44 	bl	8000c6c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025ea:	d10a      	bne.n	8002602 <prvAddCurrentTaskToDelayedList+0x3a>
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d007      	beq.n	8002602 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80025f2:	4b1a      	ldr	r3, [pc, #104]	; (800265c <prvAddCurrentTaskToDelayedList+0x94>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	3304      	adds	r3, #4
 80025f8:	4619      	mov	r1, r3
 80025fa:	4819      	ldr	r0, [pc, #100]	; (8002660 <prvAddCurrentTaskToDelayedList+0x98>)
 80025fc:	f7fe fad9 	bl	8000bb2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002600:	e026      	b.n	8002650 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002602:	68fa      	ldr	r2, [r7, #12]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4413      	add	r3, r2
 8002608:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800260a:	4b14      	ldr	r3, [pc, #80]	; (800265c <prvAddCurrentTaskToDelayedList+0x94>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	68ba      	ldr	r2, [r7, #8]
 8002610:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002612:	68ba      	ldr	r2, [r7, #8]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	429a      	cmp	r2, r3
 8002618:	d209      	bcs.n	800262e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800261a:	4b12      	ldr	r3, [pc, #72]	; (8002664 <prvAddCurrentTaskToDelayedList+0x9c>)
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	4b0f      	ldr	r3, [pc, #60]	; (800265c <prvAddCurrentTaskToDelayedList+0x94>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	3304      	adds	r3, #4
 8002624:	4619      	mov	r1, r3
 8002626:	4610      	mov	r0, r2
 8002628:	f7fe fae7 	bl	8000bfa <vListInsert>
}
 800262c:	e010      	b.n	8002650 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800262e:	4b0e      	ldr	r3, [pc, #56]	; (8002668 <prvAddCurrentTaskToDelayedList+0xa0>)
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	4b0a      	ldr	r3, [pc, #40]	; (800265c <prvAddCurrentTaskToDelayedList+0x94>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	3304      	adds	r3, #4
 8002638:	4619      	mov	r1, r3
 800263a:	4610      	mov	r0, r2
 800263c:	f7fe fadd 	bl	8000bfa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002640:	4b0a      	ldr	r3, [pc, #40]	; (800266c <prvAddCurrentTaskToDelayedList+0xa4>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	68ba      	ldr	r2, [r7, #8]
 8002646:	429a      	cmp	r2, r3
 8002648:	d202      	bcs.n	8002650 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800264a:	4a08      	ldr	r2, [pc, #32]	; (800266c <prvAddCurrentTaskToDelayedList+0xa4>)
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	6013      	str	r3, [r2, #0]
}
 8002650:	bf00      	nop
 8002652:	3710      	adds	r7, #16
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	2000149c 	.word	0x2000149c
 800265c:	20000fc4 	.word	0x20000fc4
 8002660:	20001484 	.word	0x20001484
 8002664:	20001454 	.word	0x20001454
 8002668:	20001450 	.word	0x20001450
 800266c:	200014b8 	.word	0x200014b8

08002670 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b08a      	sub	sp, #40	; 0x28
 8002674:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8002676:	2300      	movs	r3, #0
 8002678:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800267a:	f000 fb07 	bl	8002c8c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800267e:	4b1c      	ldr	r3, [pc, #112]	; (80026f0 <xTimerCreateTimerTask+0x80>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d021      	beq.n	80026ca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8002686:	2300      	movs	r3, #0
 8002688:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800268a:	2300      	movs	r3, #0
 800268c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800268e:	1d3a      	adds	r2, r7, #4
 8002690:	f107 0108 	add.w	r1, r7, #8
 8002694:	f107 030c 	add.w	r3, r7, #12
 8002698:	4618      	mov	r0, r3
 800269a:	f7fe fa43 	bl	8000b24 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800269e:	6879      	ldr	r1, [r7, #4]
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	9202      	str	r2, [sp, #8]
 80026a6:	9301      	str	r3, [sp, #4]
 80026a8:	2302      	movs	r3, #2
 80026aa:	9300      	str	r3, [sp, #0]
 80026ac:	2300      	movs	r3, #0
 80026ae:	460a      	mov	r2, r1
 80026b0:	4910      	ldr	r1, [pc, #64]	; (80026f4 <xTimerCreateTimerTask+0x84>)
 80026b2:	4811      	ldr	r0, [pc, #68]	; (80026f8 <xTimerCreateTimerTask+0x88>)
 80026b4:	f7fe fff0 	bl	8001698 <xTaskCreateStatic>
 80026b8:	4603      	mov	r3, r0
 80026ba:	4a10      	ldr	r2, [pc, #64]	; (80026fc <xTimerCreateTimerTask+0x8c>)
 80026bc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80026be:	4b0f      	ldr	r3, [pc, #60]	; (80026fc <xTimerCreateTimerTask+0x8c>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80026c6:	2301      	movs	r3, #1
 80026c8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d10a      	bne.n	80026e6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80026d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026d4:	f383 8811 	msr	BASEPRI, r3
 80026d8:	f3bf 8f6f 	isb	sy
 80026dc:	f3bf 8f4f 	dsb	sy
 80026e0:	613b      	str	r3, [r7, #16]
}
 80026e2:	bf00      	nop
 80026e4:	e7fe      	b.n	80026e4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80026e6:	697b      	ldr	r3, [r7, #20]
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3718      	adds	r7, #24
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	200014f4 	.word	0x200014f4
 80026f4:	080098e8 	.word	0x080098e8
 80026f8:	08002835 	.word	0x08002835
 80026fc:	200014f8 	.word	0x200014f8

08002700 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b08a      	sub	sp, #40	; 0x28
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	607a      	str	r2, [r7, #4]
 800270c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800270e:	2300      	movs	r3, #0
 8002710:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d10a      	bne.n	800272e <xTimerGenericCommand+0x2e>
	__asm volatile
 8002718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800271c:	f383 8811 	msr	BASEPRI, r3
 8002720:	f3bf 8f6f 	isb	sy
 8002724:	f3bf 8f4f 	dsb	sy
 8002728:	623b      	str	r3, [r7, #32]
}
 800272a:	bf00      	nop
 800272c:	e7fe      	b.n	800272c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800272e:	4b1a      	ldr	r3, [pc, #104]	; (8002798 <xTimerGenericCommand+0x98>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d02a      	beq.n	800278c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	2b05      	cmp	r3, #5
 8002746:	dc18      	bgt.n	800277a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002748:	f7ff fdd6 	bl	80022f8 <xTaskGetSchedulerState>
 800274c:	4603      	mov	r3, r0
 800274e:	2b02      	cmp	r3, #2
 8002750:	d109      	bne.n	8002766 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002752:	4b11      	ldr	r3, [pc, #68]	; (8002798 <xTimerGenericCommand+0x98>)
 8002754:	6818      	ldr	r0, [r3, #0]
 8002756:	f107 0110 	add.w	r1, r7, #16
 800275a:	2300      	movs	r3, #0
 800275c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800275e:	f7fe fbb3 	bl	8000ec8 <xQueueGenericSend>
 8002762:	6278      	str	r0, [r7, #36]	; 0x24
 8002764:	e012      	b.n	800278c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002766:	4b0c      	ldr	r3, [pc, #48]	; (8002798 <xTimerGenericCommand+0x98>)
 8002768:	6818      	ldr	r0, [r3, #0]
 800276a:	f107 0110 	add.w	r1, r7, #16
 800276e:	2300      	movs	r3, #0
 8002770:	2200      	movs	r2, #0
 8002772:	f7fe fba9 	bl	8000ec8 <xQueueGenericSend>
 8002776:	6278      	str	r0, [r7, #36]	; 0x24
 8002778:	e008      	b.n	800278c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800277a:	4b07      	ldr	r3, [pc, #28]	; (8002798 <xTimerGenericCommand+0x98>)
 800277c:	6818      	ldr	r0, [r3, #0]
 800277e:	f107 0110 	add.w	r1, r7, #16
 8002782:	2300      	movs	r3, #0
 8002784:	683a      	ldr	r2, [r7, #0]
 8002786:	f7fe fc9d 	bl	80010c4 <xQueueGenericSendFromISR>
 800278a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800278c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800278e:	4618      	mov	r0, r3
 8002790:	3728      	adds	r7, #40	; 0x28
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	200014f4 	.word	0x200014f4

0800279c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b088      	sub	sp, #32
 80027a0:	af02      	add	r7, sp, #8
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80027a6:	4b22      	ldr	r3, [pc, #136]	; (8002830 <prvProcessExpiredTimer+0x94>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	3304      	adds	r3, #4
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7fe fa59 	bl	8000c6c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80027c0:	f003 0304 	and.w	r3, r3, #4
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d022      	beq.n	800280e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	699a      	ldr	r2, [r3, #24]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	18d1      	adds	r1, r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	683a      	ldr	r2, [r7, #0]
 80027d4:	6978      	ldr	r0, [r7, #20]
 80027d6:	f000 f8d1 	bl	800297c <prvInsertTimerInActiveList>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d01f      	beq.n	8002820 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80027e0:	2300      	movs	r3, #0
 80027e2:	9300      	str	r3, [sp, #0]
 80027e4:	2300      	movs	r3, #0
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	2100      	movs	r1, #0
 80027ea:	6978      	ldr	r0, [r7, #20]
 80027ec:	f7ff ff88 	bl	8002700 <xTimerGenericCommand>
 80027f0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d113      	bne.n	8002820 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80027f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027fc:	f383 8811 	msr	BASEPRI, r3
 8002800:	f3bf 8f6f 	isb	sy
 8002804:	f3bf 8f4f 	dsb	sy
 8002808:	60fb      	str	r3, [r7, #12]
}
 800280a:	bf00      	nop
 800280c:	e7fe      	b.n	800280c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002814:	f023 0301 	bic.w	r3, r3, #1
 8002818:	b2da      	uxtb	r2, r3
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	6a1b      	ldr	r3, [r3, #32]
 8002824:	6978      	ldr	r0, [r7, #20]
 8002826:	4798      	blx	r3
}
 8002828:	bf00      	nop
 800282a:	3718      	adds	r7, #24
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	200014ec 	.word	0x200014ec

08002834 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800283c:	f107 0308 	add.w	r3, r7, #8
 8002840:	4618      	mov	r0, r3
 8002842:	f000 f857 	bl	80028f4 <prvGetNextExpireTime>
 8002846:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	4619      	mov	r1, r3
 800284c:	68f8      	ldr	r0, [r7, #12]
 800284e:	f000 f803 	bl	8002858 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8002852:	f000 f8d5 	bl	8002a00 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002856:	e7f1      	b.n	800283c <prvTimerTask+0x8>

08002858 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8002862:	f7ff f955 	bl	8001b10 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002866:	f107 0308 	add.w	r3, r7, #8
 800286a:	4618      	mov	r0, r3
 800286c:	f000 f866 	bl	800293c <prvSampleTimeNow>
 8002870:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d130      	bne.n	80028da <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d10a      	bne.n	8002894 <prvProcessTimerOrBlockTask+0x3c>
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	429a      	cmp	r2, r3
 8002884:	d806      	bhi.n	8002894 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8002886:	f7ff f951 	bl	8001b2c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800288a:	68f9      	ldr	r1, [r7, #12]
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f7ff ff85 	bl	800279c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8002892:	e024      	b.n	80028de <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d008      	beq.n	80028ac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800289a:	4b13      	ldr	r3, [pc, #76]	; (80028e8 <prvProcessTimerOrBlockTask+0x90>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d101      	bne.n	80028a8 <prvProcessTimerOrBlockTask+0x50>
 80028a4:	2301      	movs	r3, #1
 80028a6:	e000      	b.n	80028aa <prvProcessTimerOrBlockTask+0x52>
 80028a8:	2300      	movs	r3, #0
 80028aa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80028ac:	4b0f      	ldr	r3, [pc, #60]	; (80028ec <prvProcessTimerOrBlockTask+0x94>)
 80028ae:	6818      	ldr	r0, [r3, #0]
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	683a      	ldr	r2, [r7, #0]
 80028b8:	4619      	mov	r1, r3
 80028ba:	f7fe feb9 	bl	8001630 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80028be:	f7ff f935 	bl	8001b2c <xTaskResumeAll>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d10a      	bne.n	80028de <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80028c8:	4b09      	ldr	r3, [pc, #36]	; (80028f0 <prvProcessTimerOrBlockTask+0x98>)
 80028ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	f3bf 8f4f 	dsb	sy
 80028d4:	f3bf 8f6f 	isb	sy
}
 80028d8:	e001      	b.n	80028de <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80028da:	f7ff f927 	bl	8001b2c <xTaskResumeAll>
}
 80028de:	bf00      	nop
 80028e0:	3710      	adds	r7, #16
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	200014f0 	.word	0x200014f0
 80028ec:	200014f4 	.word	0x200014f4
 80028f0:	e000ed04 	.word	0xe000ed04

080028f4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80028f4:	b480      	push	{r7}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80028fc:	4b0e      	ldr	r3, [pc, #56]	; (8002938 <prvGetNextExpireTime+0x44>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d101      	bne.n	800290a <prvGetNextExpireTime+0x16>
 8002906:	2201      	movs	r2, #1
 8002908:	e000      	b.n	800290c <prvGetNextExpireTime+0x18>
 800290a:	2200      	movs	r2, #0
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d105      	bne.n	8002924 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002918:	4b07      	ldr	r3, [pc, #28]	; (8002938 <prvGetNextExpireTime+0x44>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	60fb      	str	r3, [r7, #12]
 8002922:	e001      	b.n	8002928 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8002924:	2300      	movs	r3, #0
 8002926:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8002928:	68fb      	ldr	r3, [r7, #12]
}
 800292a:	4618      	mov	r0, r3
 800292c:	3714      	adds	r7, #20
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	200014ec 	.word	0x200014ec

0800293c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8002944:	f7ff f990 	bl	8001c68 <xTaskGetTickCount>
 8002948:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800294a:	4b0b      	ldr	r3, [pc, #44]	; (8002978 <prvSampleTimeNow+0x3c>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	68fa      	ldr	r2, [r7, #12]
 8002950:	429a      	cmp	r2, r3
 8002952:	d205      	bcs.n	8002960 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8002954:	f000 f936 	bl	8002bc4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	601a      	str	r2, [r3, #0]
 800295e:	e002      	b.n	8002966 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8002966:	4a04      	ldr	r2, [pc, #16]	; (8002978 <prvSampleTimeNow+0x3c>)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800296c:	68fb      	ldr	r3, [r7, #12]
}
 800296e:	4618      	mov	r0, r3
 8002970:	3710      	adds	r7, #16
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	200014fc 	.word	0x200014fc

0800297c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]
 8002988:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800298a:	2300      	movs	r3, #0
 800298c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	68ba      	ldr	r2, [r7, #8]
 8002992:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800299a:	68ba      	ldr	r2, [r7, #8]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	429a      	cmp	r2, r3
 80029a0:	d812      	bhi.n	80029c8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	1ad2      	subs	r2, r2, r3
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	699b      	ldr	r3, [r3, #24]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d302      	bcc.n	80029b6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80029b0:	2301      	movs	r3, #1
 80029b2:	617b      	str	r3, [r7, #20]
 80029b4:	e01b      	b.n	80029ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80029b6:	4b10      	ldr	r3, [pc, #64]	; (80029f8 <prvInsertTimerInActiveList+0x7c>)
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	3304      	adds	r3, #4
 80029be:	4619      	mov	r1, r3
 80029c0:	4610      	mov	r0, r2
 80029c2:	f7fe f91a 	bl	8000bfa <vListInsert>
 80029c6:	e012      	b.n	80029ee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d206      	bcs.n	80029de <prvInsertTimerInActiveList+0x62>
 80029d0:	68ba      	ldr	r2, [r7, #8]
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d302      	bcc.n	80029de <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80029d8:	2301      	movs	r3, #1
 80029da:	617b      	str	r3, [r7, #20]
 80029dc:	e007      	b.n	80029ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80029de:	4b07      	ldr	r3, [pc, #28]	; (80029fc <prvInsertTimerInActiveList+0x80>)
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	3304      	adds	r3, #4
 80029e6:	4619      	mov	r1, r3
 80029e8:	4610      	mov	r0, r2
 80029ea:	f7fe f906 	bl	8000bfa <vListInsert>
		}
	}

	return xProcessTimerNow;
 80029ee:	697b      	ldr	r3, [r7, #20]
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3718      	adds	r7, #24
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	200014f0 	.word	0x200014f0
 80029fc:	200014ec 	.word	0x200014ec

08002a00 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b08e      	sub	sp, #56	; 0x38
 8002a04:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002a06:	e0ca      	b.n	8002b9e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	da18      	bge.n	8002a40 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8002a0e:	1d3b      	adds	r3, r7, #4
 8002a10:	3304      	adds	r3, #4
 8002a12:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8002a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d10a      	bne.n	8002a30 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8002a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a1e:	f383 8811 	msr	BASEPRI, r3
 8002a22:	f3bf 8f6f 	isb	sy
 8002a26:	f3bf 8f4f 	dsb	sy
 8002a2a:	61fb      	str	r3, [r7, #28]
}
 8002a2c:	bf00      	nop
 8002a2e:	e7fe      	b.n	8002a2e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8002a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a36:	6850      	ldr	r0, [r2, #4]
 8002a38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a3a:	6892      	ldr	r2, [r2, #8]
 8002a3c:	4611      	mov	r1, r2
 8002a3e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	f2c0 80aa 	blt.w	8002b9c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a4e:	695b      	ldr	r3, [r3, #20]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d004      	beq.n	8002a5e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a56:	3304      	adds	r3, #4
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7fe f907 	bl	8000c6c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002a5e:	463b      	mov	r3, r7
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7ff ff6b 	bl	800293c <prvSampleTimeNow>
 8002a66:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2b09      	cmp	r3, #9
 8002a6c:	f200 8097 	bhi.w	8002b9e <prvProcessReceivedCommands+0x19e>
 8002a70:	a201      	add	r2, pc, #4	; (adr r2, 8002a78 <prvProcessReceivedCommands+0x78>)
 8002a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a76:	bf00      	nop
 8002a78:	08002aa1 	.word	0x08002aa1
 8002a7c:	08002aa1 	.word	0x08002aa1
 8002a80:	08002aa1 	.word	0x08002aa1
 8002a84:	08002b15 	.word	0x08002b15
 8002a88:	08002b29 	.word	0x08002b29
 8002a8c:	08002b73 	.word	0x08002b73
 8002a90:	08002aa1 	.word	0x08002aa1
 8002a94:	08002aa1 	.word	0x08002aa1
 8002a98:	08002b15 	.word	0x08002b15
 8002a9c:	08002b29 	.word	0x08002b29
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002aa6:	f043 0301 	orr.w	r3, r3, #1
 8002aaa:	b2da      	uxtb	r2, r3
 8002aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002ab2:	68ba      	ldr	r2, [r7, #8]
 8002ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ab6:	699b      	ldr	r3, [r3, #24]
 8002ab8:	18d1      	adds	r1, r2, r3
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002abe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ac0:	f7ff ff5c 	bl	800297c <prvInsertTimerInActiveList>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d069      	beq.n	8002b9e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002acc:	6a1b      	ldr	r3, [r3, #32]
 8002ace:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ad0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002ad8:	f003 0304 	and.w	r3, r3, #4
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d05e      	beq.n	8002b9e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002ae0:	68ba      	ldr	r2, [r7, #8]
 8002ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	441a      	add	r2, r3
 8002ae8:	2300      	movs	r3, #0
 8002aea:	9300      	str	r3, [sp, #0]
 8002aec:	2300      	movs	r3, #0
 8002aee:	2100      	movs	r1, #0
 8002af0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002af2:	f7ff fe05 	bl	8002700 <xTimerGenericCommand>
 8002af6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8002af8:	6a3b      	ldr	r3, [r7, #32]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d14f      	bne.n	8002b9e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8002afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b02:	f383 8811 	msr	BASEPRI, r3
 8002b06:	f3bf 8f6f 	isb	sy
 8002b0a:	f3bf 8f4f 	dsb	sy
 8002b0e:	61bb      	str	r3, [r7, #24]
}
 8002b10:	bf00      	nop
 8002b12:	e7fe      	b.n	8002b12 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002b1a:	f023 0301 	bic.w	r3, r3, #1
 8002b1e:	b2da      	uxtb	r2, r3
 8002b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8002b26:	e03a      	b.n	8002b9e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002b2e:	f043 0301 	orr.w	r3, r3, #1
 8002b32:	b2da      	uxtb	r2, r3
 8002b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002b3a:	68ba      	ldr	r2, [r7, #8]
 8002b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b3e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d10a      	bne.n	8002b5e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8002b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b4c:	f383 8811 	msr	BASEPRI, r3
 8002b50:	f3bf 8f6f 	isb	sy
 8002b54:	f3bf 8f4f 	dsb	sy
 8002b58:	617b      	str	r3, [r7, #20]
}
 8002b5a:	bf00      	nop
 8002b5c:	e7fe      	b.n	8002b5c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b60:	699a      	ldr	r2, [r3, #24]
 8002b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b64:	18d1      	adds	r1, r2, r3
 8002b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b6c:	f7ff ff06 	bl	800297c <prvInsertTimerInActiveList>
					break;
 8002b70:	e015      	b.n	8002b9e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002b78:	f003 0302 	and.w	r3, r3, #2
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d103      	bne.n	8002b88 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8002b80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b82:	f000 fbbb 	bl	80032fc <vPortFree>
 8002b86:	e00a      	b.n	8002b9e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002b8e:	f023 0301 	bic.w	r3, r3, #1
 8002b92:	b2da      	uxtb	r2, r3
 8002b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8002b9a:	e000      	b.n	8002b9e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8002b9c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002b9e:	4b08      	ldr	r3, [pc, #32]	; (8002bc0 <prvProcessReceivedCommands+0x1c0>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	1d39      	adds	r1, r7, #4
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7fe fb28 	bl	80011fc <xQueueReceive>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	f47f af2a 	bne.w	8002a08 <prvProcessReceivedCommands+0x8>
	}
}
 8002bb4:	bf00      	nop
 8002bb6:	bf00      	nop
 8002bb8:	3730      	adds	r7, #48	; 0x30
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	200014f4 	.word	0x200014f4

08002bc4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b088      	sub	sp, #32
 8002bc8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002bca:	e048      	b.n	8002c5e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002bcc:	4b2d      	ldr	r3, [pc, #180]	; (8002c84 <prvSwitchTimerLists+0xc0>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002bd6:	4b2b      	ldr	r3, [pc, #172]	; (8002c84 <prvSwitchTimerLists+0xc0>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	3304      	adds	r3, #4
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7fe f841 	bl	8000c6c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6a1b      	ldr	r3, [r3, #32]
 8002bee:	68f8      	ldr	r0, [r7, #12]
 8002bf0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002bf8:	f003 0304 	and.w	r3, r3, #4
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d02e      	beq.n	8002c5e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	699b      	ldr	r3, [r3, #24]
 8002c04:	693a      	ldr	r2, [r7, #16]
 8002c06:	4413      	add	r3, r2
 8002c08:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8002c0a:	68ba      	ldr	r2, [r7, #8]
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d90e      	bls.n	8002c30 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	68ba      	ldr	r2, [r7, #8]
 8002c16:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	68fa      	ldr	r2, [r7, #12]
 8002c1c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002c1e:	4b19      	ldr	r3, [pc, #100]	; (8002c84 <prvSwitchTimerLists+0xc0>)
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	3304      	adds	r3, #4
 8002c26:	4619      	mov	r1, r3
 8002c28:	4610      	mov	r0, r2
 8002c2a:	f7fd ffe6 	bl	8000bfa <vListInsert>
 8002c2e:	e016      	b.n	8002c5e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002c30:	2300      	movs	r3, #0
 8002c32:	9300      	str	r3, [sp, #0]
 8002c34:	2300      	movs	r3, #0
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	2100      	movs	r1, #0
 8002c3a:	68f8      	ldr	r0, [r7, #12]
 8002c3c:	f7ff fd60 	bl	8002700 <xTimerGenericCommand>
 8002c40:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d10a      	bne.n	8002c5e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8002c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c4c:	f383 8811 	msr	BASEPRI, r3
 8002c50:	f3bf 8f6f 	isb	sy
 8002c54:	f3bf 8f4f 	dsb	sy
 8002c58:	603b      	str	r3, [r7, #0]
}
 8002c5a:	bf00      	nop
 8002c5c:	e7fe      	b.n	8002c5c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002c5e:	4b09      	ldr	r3, [pc, #36]	; (8002c84 <prvSwitchTimerLists+0xc0>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d1b1      	bne.n	8002bcc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8002c68:	4b06      	ldr	r3, [pc, #24]	; (8002c84 <prvSwitchTimerLists+0xc0>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8002c6e:	4b06      	ldr	r3, [pc, #24]	; (8002c88 <prvSwitchTimerLists+0xc4>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a04      	ldr	r2, [pc, #16]	; (8002c84 <prvSwitchTimerLists+0xc0>)
 8002c74:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8002c76:	4a04      	ldr	r2, [pc, #16]	; (8002c88 <prvSwitchTimerLists+0xc4>)
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	6013      	str	r3, [r2, #0]
}
 8002c7c:	bf00      	nop
 8002c7e:	3718      	adds	r7, #24
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	200014ec 	.word	0x200014ec
 8002c88:	200014f0 	.word	0x200014f0

08002c8c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8002c92:	f000 f967 	bl	8002f64 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8002c96:	4b15      	ldr	r3, [pc, #84]	; (8002cec <prvCheckForValidListAndQueue+0x60>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d120      	bne.n	8002ce0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8002c9e:	4814      	ldr	r0, [pc, #80]	; (8002cf0 <prvCheckForValidListAndQueue+0x64>)
 8002ca0:	f7fd ff5a 	bl	8000b58 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8002ca4:	4813      	ldr	r0, [pc, #76]	; (8002cf4 <prvCheckForValidListAndQueue+0x68>)
 8002ca6:	f7fd ff57 	bl	8000b58 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8002caa:	4b13      	ldr	r3, [pc, #76]	; (8002cf8 <prvCheckForValidListAndQueue+0x6c>)
 8002cac:	4a10      	ldr	r2, [pc, #64]	; (8002cf0 <prvCheckForValidListAndQueue+0x64>)
 8002cae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8002cb0:	4b12      	ldr	r3, [pc, #72]	; (8002cfc <prvCheckForValidListAndQueue+0x70>)
 8002cb2:	4a10      	ldr	r2, [pc, #64]	; (8002cf4 <prvCheckForValidListAndQueue+0x68>)
 8002cb4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	9300      	str	r3, [sp, #0]
 8002cba:	4b11      	ldr	r3, [pc, #68]	; (8002d00 <prvCheckForValidListAndQueue+0x74>)
 8002cbc:	4a11      	ldr	r2, [pc, #68]	; (8002d04 <prvCheckForValidListAndQueue+0x78>)
 8002cbe:	2110      	movs	r1, #16
 8002cc0:	200a      	movs	r0, #10
 8002cc2:	f7fe f865 	bl	8000d90 <xQueueGenericCreateStatic>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	4a08      	ldr	r2, [pc, #32]	; (8002cec <prvCheckForValidListAndQueue+0x60>)
 8002cca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8002ccc:	4b07      	ldr	r3, [pc, #28]	; (8002cec <prvCheckForValidListAndQueue+0x60>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d005      	beq.n	8002ce0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002cd4:	4b05      	ldr	r3, [pc, #20]	; (8002cec <prvCheckForValidListAndQueue+0x60>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	490b      	ldr	r1, [pc, #44]	; (8002d08 <prvCheckForValidListAndQueue+0x7c>)
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7fe fc7e 	bl	80015dc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002ce0:	f000 f970 	bl	8002fc4 <vPortExitCritical>
}
 8002ce4:	bf00      	nop
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	200014f4 	.word	0x200014f4
 8002cf0:	200014c4 	.word	0x200014c4
 8002cf4:	200014d8 	.word	0x200014d8
 8002cf8:	200014ec 	.word	0x200014ec
 8002cfc:	200014f0 	.word	0x200014f0
 8002d00:	200015a0 	.word	0x200015a0
 8002d04:	20001500 	.word	0x20001500
 8002d08:	080098f0 	.word	0x080098f0

08002d0c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b085      	sub	sp, #20
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	3b04      	subs	r3, #4
 8002d1c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	3b04      	subs	r3, #4
 8002d2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	f023 0201 	bic.w	r2, r3, #1
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	3b04      	subs	r3, #4
 8002d3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002d3c:	4a0c      	ldr	r2, [pc, #48]	; (8002d70 <pxPortInitialiseStack+0x64>)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	3b14      	subs	r3, #20
 8002d46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	3b04      	subs	r3, #4
 8002d52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f06f 0202 	mvn.w	r2, #2
 8002d5a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	3b20      	subs	r3, #32
 8002d60:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002d62:	68fb      	ldr	r3, [r7, #12]
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3714      	adds	r7, #20
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr
 8002d70:	08002d75 	.word	0x08002d75

08002d74 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002d74:	b480      	push	{r7}
 8002d76:	b085      	sub	sp, #20
 8002d78:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002d7e:	4b12      	ldr	r3, [pc, #72]	; (8002dc8 <prvTaskExitError+0x54>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d86:	d00a      	beq.n	8002d9e <prvTaskExitError+0x2a>
	__asm volatile
 8002d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d8c:	f383 8811 	msr	BASEPRI, r3
 8002d90:	f3bf 8f6f 	isb	sy
 8002d94:	f3bf 8f4f 	dsb	sy
 8002d98:	60fb      	str	r3, [r7, #12]
}
 8002d9a:	bf00      	nop
 8002d9c:	e7fe      	b.n	8002d9c <prvTaskExitError+0x28>
	__asm volatile
 8002d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002da2:	f383 8811 	msr	BASEPRI, r3
 8002da6:	f3bf 8f6f 	isb	sy
 8002daa:	f3bf 8f4f 	dsb	sy
 8002dae:	60bb      	str	r3, [r7, #8]
}
 8002db0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002db2:	bf00      	nop
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d0fc      	beq.n	8002db4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002dba:	bf00      	nop
 8002dbc:	bf00      	nop
 8002dbe:	3714      	adds	r7, #20
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr
 8002dc8:	2000000c 	.word	0x2000000c
 8002dcc:	00000000 	.word	0x00000000

08002dd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002dd0:	4b07      	ldr	r3, [pc, #28]	; (8002df0 <pxCurrentTCBConst2>)
 8002dd2:	6819      	ldr	r1, [r3, #0]
 8002dd4:	6808      	ldr	r0, [r1, #0]
 8002dd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dda:	f380 8809 	msr	PSP, r0
 8002dde:	f3bf 8f6f 	isb	sy
 8002de2:	f04f 0000 	mov.w	r0, #0
 8002de6:	f380 8811 	msr	BASEPRI, r0
 8002dea:	4770      	bx	lr
 8002dec:	f3af 8000 	nop.w

08002df0 <pxCurrentTCBConst2>:
 8002df0:	20000fc4 	.word	0x20000fc4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002df4:	bf00      	nop
 8002df6:	bf00      	nop

08002df8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002df8:	4808      	ldr	r0, [pc, #32]	; (8002e1c <prvPortStartFirstTask+0x24>)
 8002dfa:	6800      	ldr	r0, [r0, #0]
 8002dfc:	6800      	ldr	r0, [r0, #0]
 8002dfe:	f380 8808 	msr	MSP, r0
 8002e02:	f04f 0000 	mov.w	r0, #0
 8002e06:	f380 8814 	msr	CONTROL, r0
 8002e0a:	b662      	cpsie	i
 8002e0c:	b661      	cpsie	f
 8002e0e:	f3bf 8f4f 	dsb	sy
 8002e12:	f3bf 8f6f 	isb	sy
 8002e16:	df00      	svc	0
 8002e18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002e1a:	bf00      	nop
 8002e1c:	e000ed08 	.word	0xe000ed08

08002e20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b086      	sub	sp, #24
 8002e24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002e26:	4b46      	ldr	r3, [pc, #280]	; (8002f40 <xPortStartScheduler+0x120>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a46      	ldr	r2, [pc, #280]	; (8002f44 <xPortStartScheduler+0x124>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d10a      	bne.n	8002e46 <xPortStartScheduler+0x26>
	__asm volatile
 8002e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e34:	f383 8811 	msr	BASEPRI, r3
 8002e38:	f3bf 8f6f 	isb	sy
 8002e3c:	f3bf 8f4f 	dsb	sy
 8002e40:	613b      	str	r3, [r7, #16]
}
 8002e42:	bf00      	nop
 8002e44:	e7fe      	b.n	8002e44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002e46:	4b3e      	ldr	r3, [pc, #248]	; (8002f40 <xPortStartScheduler+0x120>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a3f      	ldr	r2, [pc, #252]	; (8002f48 <xPortStartScheduler+0x128>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d10a      	bne.n	8002e66 <xPortStartScheduler+0x46>
	__asm volatile
 8002e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e54:	f383 8811 	msr	BASEPRI, r3
 8002e58:	f3bf 8f6f 	isb	sy
 8002e5c:	f3bf 8f4f 	dsb	sy
 8002e60:	60fb      	str	r3, [r7, #12]
}
 8002e62:	bf00      	nop
 8002e64:	e7fe      	b.n	8002e64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002e66:	4b39      	ldr	r3, [pc, #228]	; (8002f4c <xPortStartScheduler+0x12c>)
 8002e68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	22ff      	movs	r2, #255	; 0xff
 8002e76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002e80:	78fb      	ldrb	r3, [r7, #3]
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002e88:	b2da      	uxtb	r2, r3
 8002e8a:	4b31      	ldr	r3, [pc, #196]	; (8002f50 <xPortStartScheduler+0x130>)
 8002e8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002e8e:	4b31      	ldr	r3, [pc, #196]	; (8002f54 <xPortStartScheduler+0x134>)
 8002e90:	2207      	movs	r2, #7
 8002e92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002e94:	e009      	b.n	8002eaa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8002e96:	4b2f      	ldr	r3, [pc, #188]	; (8002f54 <xPortStartScheduler+0x134>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	4a2d      	ldr	r2, [pc, #180]	; (8002f54 <xPortStartScheduler+0x134>)
 8002e9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002ea0:	78fb      	ldrb	r3, [r7, #3]
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	005b      	lsls	r3, r3, #1
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002eaa:	78fb      	ldrb	r3, [r7, #3]
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eb2:	2b80      	cmp	r3, #128	; 0x80
 8002eb4:	d0ef      	beq.n	8002e96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002eb6:	4b27      	ldr	r3, [pc, #156]	; (8002f54 <xPortStartScheduler+0x134>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f1c3 0307 	rsb	r3, r3, #7
 8002ebe:	2b04      	cmp	r3, #4
 8002ec0:	d00a      	beq.n	8002ed8 <xPortStartScheduler+0xb8>
	__asm volatile
 8002ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ec6:	f383 8811 	msr	BASEPRI, r3
 8002eca:	f3bf 8f6f 	isb	sy
 8002ece:	f3bf 8f4f 	dsb	sy
 8002ed2:	60bb      	str	r3, [r7, #8]
}
 8002ed4:	bf00      	nop
 8002ed6:	e7fe      	b.n	8002ed6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002ed8:	4b1e      	ldr	r3, [pc, #120]	; (8002f54 <xPortStartScheduler+0x134>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	021b      	lsls	r3, r3, #8
 8002ede:	4a1d      	ldr	r2, [pc, #116]	; (8002f54 <xPortStartScheduler+0x134>)
 8002ee0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002ee2:	4b1c      	ldr	r3, [pc, #112]	; (8002f54 <xPortStartScheduler+0x134>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002eea:	4a1a      	ldr	r2, [pc, #104]	; (8002f54 <xPortStartScheduler+0x134>)
 8002eec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	b2da      	uxtb	r2, r3
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002ef6:	4b18      	ldr	r3, [pc, #96]	; (8002f58 <xPortStartScheduler+0x138>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a17      	ldr	r2, [pc, #92]	; (8002f58 <xPortStartScheduler+0x138>)
 8002efc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002f02:	4b15      	ldr	r3, [pc, #84]	; (8002f58 <xPortStartScheduler+0x138>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a14      	ldr	r2, [pc, #80]	; (8002f58 <xPortStartScheduler+0x138>)
 8002f08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002f0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002f0e:	f000 f8bb 	bl	8003088 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002f12:	4b12      	ldr	r3, [pc, #72]	; (8002f5c <xPortStartScheduler+0x13c>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8002f18:	f000 f8da 	bl	80030d0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002f1c:	4b10      	ldr	r3, [pc, #64]	; (8002f60 <xPortStartScheduler+0x140>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a0f      	ldr	r2, [pc, #60]	; (8002f60 <xPortStartScheduler+0x140>)
 8002f22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002f26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002f28:	f7ff ff66 	bl	8002df8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002f2c:	f7fe ff78 	bl	8001e20 <vTaskSwitchContext>
	prvTaskExitError();
 8002f30:	f7ff ff20 	bl	8002d74 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3718      	adds	r7, #24
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	e000ed00 	.word	0xe000ed00
 8002f44:	410fc271 	.word	0x410fc271
 8002f48:	410fc270 	.word	0x410fc270
 8002f4c:	e000e400 	.word	0xe000e400
 8002f50:	200015f0 	.word	0x200015f0
 8002f54:	200015f4 	.word	0x200015f4
 8002f58:	e000ed20 	.word	0xe000ed20
 8002f5c:	2000000c 	.word	0x2000000c
 8002f60:	e000ef34 	.word	0xe000ef34

08002f64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
	__asm volatile
 8002f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f6e:	f383 8811 	msr	BASEPRI, r3
 8002f72:	f3bf 8f6f 	isb	sy
 8002f76:	f3bf 8f4f 	dsb	sy
 8002f7a:	607b      	str	r3, [r7, #4]
}
 8002f7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002f7e:	4b0f      	ldr	r3, [pc, #60]	; (8002fbc <vPortEnterCritical+0x58>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	3301      	adds	r3, #1
 8002f84:	4a0d      	ldr	r2, [pc, #52]	; (8002fbc <vPortEnterCritical+0x58>)
 8002f86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002f88:	4b0c      	ldr	r3, [pc, #48]	; (8002fbc <vPortEnterCritical+0x58>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d10f      	bne.n	8002fb0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002f90:	4b0b      	ldr	r3, [pc, #44]	; (8002fc0 <vPortEnterCritical+0x5c>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d00a      	beq.n	8002fb0 <vPortEnterCritical+0x4c>
	__asm volatile
 8002f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f9e:	f383 8811 	msr	BASEPRI, r3
 8002fa2:	f3bf 8f6f 	isb	sy
 8002fa6:	f3bf 8f4f 	dsb	sy
 8002faa:	603b      	str	r3, [r7, #0]
}
 8002fac:	bf00      	nop
 8002fae:	e7fe      	b.n	8002fae <vPortEnterCritical+0x4a>
	}
}
 8002fb0:	bf00      	nop
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr
 8002fbc:	2000000c 	.word	0x2000000c
 8002fc0:	e000ed04 	.word	0xe000ed04

08002fc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002fca:	4b12      	ldr	r3, [pc, #72]	; (8003014 <vPortExitCritical+0x50>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d10a      	bne.n	8002fe8 <vPortExitCritical+0x24>
	__asm volatile
 8002fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fd6:	f383 8811 	msr	BASEPRI, r3
 8002fda:	f3bf 8f6f 	isb	sy
 8002fde:	f3bf 8f4f 	dsb	sy
 8002fe2:	607b      	str	r3, [r7, #4]
}
 8002fe4:	bf00      	nop
 8002fe6:	e7fe      	b.n	8002fe6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8002fe8:	4b0a      	ldr	r3, [pc, #40]	; (8003014 <vPortExitCritical+0x50>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	3b01      	subs	r3, #1
 8002fee:	4a09      	ldr	r2, [pc, #36]	; (8003014 <vPortExitCritical+0x50>)
 8002ff0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002ff2:	4b08      	ldr	r3, [pc, #32]	; (8003014 <vPortExitCritical+0x50>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d105      	bne.n	8003006 <vPortExitCritical+0x42>
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	f383 8811 	msr	BASEPRI, r3
}
 8003004:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003006:	bf00      	nop
 8003008:	370c      	adds	r7, #12
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	2000000c 	.word	0x2000000c
	...

08003020 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003020:	f3ef 8009 	mrs	r0, PSP
 8003024:	f3bf 8f6f 	isb	sy
 8003028:	4b15      	ldr	r3, [pc, #84]	; (8003080 <pxCurrentTCBConst>)
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	f01e 0f10 	tst.w	lr, #16
 8003030:	bf08      	it	eq
 8003032:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003036:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800303a:	6010      	str	r0, [r2, #0]
 800303c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003040:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003044:	f380 8811 	msr	BASEPRI, r0
 8003048:	f3bf 8f4f 	dsb	sy
 800304c:	f3bf 8f6f 	isb	sy
 8003050:	f7fe fee6 	bl	8001e20 <vTaskSwitchContext>
 8003054:	f04f 0000 	mov.w	r0, #0
 8003058:	f380 8811 	msr	BASEPRI, r0
 800305c:	bc09      	pop	{r0, r3}
 800305e:	6819      	ldr	r1, [r3, #0]
 8003060:	6808      	ldr	r0, [r1, #0]
 8003062:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003066:	f01e 0f10 	tst.w	lr, #16
 800306a:	bf08      	it	eq
 800306c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003070:	f380 8809 	msr	PSP, r0
 8003074:	f3bf 8f6f 	isb	sy
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	f3af 8000 	nop.w

08003080 <pxCurrentTCBConst>:
 8003080:	20000fc4 	.word	0x20000fc4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003084:	bf00      	nop
 8003086:	bf00      	nop

08003088 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003088:	b480      	push	{r7}
 800308a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800308c:	4b0b      	ldr	r3, [pc, #44]	; (80030bc <vPortSetupTimerInterrupt+0x34>)
 800308e:	2200      	movs	r2, #0
 8003090:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003092:	4b0b      	ldr	r3, [pc, #44]	; (80030c0 <vPortSetupTimerInterrupt+0x38>)
 8003094:	2200      	movs	r2, #0
 8003096:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003098:	4b0a      	ldr	r3, [pc, #40]	; (80030c4 <vPortSetupTimerInterrupt+0x3c>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a0a      	ldr	r2, [pc, #40]	; (80030c8 <vPortSetupTimerInterrupt+0x40>)
 800309e:	fba2 2303 	umull	r2, r3, r2, r3
 80030a2:	099b      	lsrs	r3, r3, #6
 80030a4:	4a09      	ldr	r2, [pc, #36]	; (80030cc <vPortSetupTimerInterrupt+0x44>)
 80030a6:	3b01      	subs	r3, #1
 80030a8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80030aa:	4b04      	ldr	r3, [pc, #16]	; (80030bc <vPortSetupTimerInterrupt+0x34>)
 80030ac:	2207      	movs	r2, #7
 80030ae:	601a      	str	r2, [r3, #0]
}
 80030b0:	bf00      	nop
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	e000e010 	.word	0xe000e010
 80030c0:	e000e018 	.word	0xe000e018
 80030c4:	200000a0 	.word	0x200000a0
 80030c8:	10624dd3 	.word	0x10624dd3
 80030cc:	e000e014 	.word	0xe000e014

080030d0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80030d0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80030e0 <vPortEnableVFP+0x10>
 80030d4:	6801      	ldr	r1, [r0, #0]
 80030d6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80030da:	6001      	str	r1, [r0, #0]
 80030dc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80030de:	bf00      	nop
 80030e0:	e000ed88 	.word	0xe000ed88

080030e4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80030e4:	b480      	push	{r7}
 80030e6:	b085      	sub	sp, #20
 80030e8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80030ea:	f3ef 8305 	mrs	r3, IPSR
 80030ee:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2b0f      	cmp	r3, #15
 80030f4:	d914      	bls.n	8003120 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80030f6:	4a17      	ldr	r2, [pc, #92]	; (8003154 <vPortValidateInterruptPriority+0x70>)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	4413      	add	r3, r2
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003100:	4b15      	ldr	r3, [pc, #84]	; (8003158 <vPortValidateInterruptPriority+0x74>)
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	7afa      	ldrb	r2, [r7, #11]
 8003106:	429a      	cmp	r2, r3
 8003108:	d20a      	bcs.n	8003120 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800310a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800310e:	f383 8811 	msr	BASEPRI, r3
 8003112:	f3bf 8f6f 	isb	sy
 8003116:	f3bf 8f4f 	dsb	sy
 800311a:	607b      	str	r3, [r7, #4]
}
 800311c:	bf00      	nop
 800311e:	e7fe      	b.n	800311e <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003120:	4b0e      	ldr	r3, [pc, #56]	; (800315c <vPortValidateInterruptPriority+0x78>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003128:	4b0d      	ldr	r3, [pc, #52]	; (8003160 <vPortValidateInterruptPriority+0x7c>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	429a      	cmp	r2, r3
 800312e:	d90a      	bls.n	8003146 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8003130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003134:	f383 8811 	msr	BASEPRI, r3
 8003138:	f3bf 8f6f 	isb	sy
 800313c:	f3bf 8f4f 	dsb	sy
 8003140:	603b      	str	r3, [r7, #0]
}
 8003142:	bf00      	nop
 8003144:	e7fe      	b.n	8003144 <vPortValidateInterruptPriority+0x60>
	}
 8003146:	bf00      	nop
 8003148:	3714      	adds	r7, #20
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	e000e3f0 	.word	0xe000e3f0
 8003158:	200015f0 	.word	0x200015f0
 800315c:	e000ed0c 	.word	0xe000ed0c
 8003160:	200015f4 	.word	0x200015f4

08003164 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b08a      	sub	sp, #40	; 0x28
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800316c:	2300      	movs	r3, #0
 800316e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003170:	f7fe fcce 	bl	8001b10 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003174:	4b5b      	ldr	r3, [pc, #364]	; (80032e4 <pvPortMalloc+0x180>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d101      	bne.n	8003180 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800317c:	f000 f920 	bl	80033c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003180:	4b59      	ldr	r3, [pc, #356]	; (80032e8 <pvPortMalloc+0x184>)
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4013      	ands	r3, r2
 8003188:	2b00      	cmp	r3, #0
 800318a:	f040 8093 	bne.w	80032b4 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d01d      	beq.n	80031d0 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003194:	2208      	movs	r2, #8
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4413      	add	r3, r2
 800319a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f003 0307 	and.w	r3, r3, #7
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d014      	beq.n	80031d0 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f023 0307 	bic.w	r3, r3, #7
 80031ac:	3308      	adds	r3, #8
 80031ae:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f003 0307 	and.w	r3, r3, #7
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00a      	beq.n	80031d0 <pvPortMalloc+0x6c>
	__asm volatile
 80031ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031be:	f383 8811 	msr	BASEPRI, r3
 80031c2:	f3bf 8f6f 	isb	sy
 80031c6:	f3bf 8f4f 	dsb	sy
 80031ca:	617b      	str	r3, [r7, #20]
}
 80031cc:	bf00      	nop
 80031ce:	e7fe      	b.n	80031ce <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d06e      	beq.n	80032b4 <pvPortMalloc+0x150>
 80031d6:	4b45      	ldr	r3, [pc, #276]	; (80032ec <pvPortMalloc+0x188>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	429a      	cmp	r2, r3
 80031de:	d869      	bhi.n	80032b4 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80031e0:	4b43      	ldr	r3, [pc, #268]	; (80032f0 <pvPortMalloc+0x18c>)
 80031e2:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80031e4:	4b42      	ldr	r3, [pc, #264]	; (80032f0 <pvPortMalloc+0x18c>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80031ea:	e004      	b.n	80031f6 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80031ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ee:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80031f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80031f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d903      	bls.n	8003208 <pvPortMalloc+0xa4>
 8003200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d1f1      	bne.n	80031ec <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003208:	4b36      	ldr	r3, [pc, #216]	; (80032e4 <pvPortMalloc+0x180>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800320e:	429a      	cmp	r2, r3
 8003210:	d050      	beq.n	80032b4 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003212:	6a3b      	ldr	r3, [r7, #32]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2208      	movs	r2, #8
 8003218:	4413      	add	r3, r2
 800321a:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800321c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	6a3b      	ldr	r3, [r7, #32]
 8003222:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003226:	685a      	ldr	r2, [r3, #4]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	1ad2      	subs	r2, r2, r3
 800322c:	2308      	movs	r3, #8
 800322e:	005b      	lsls	r3, r3, #1
 8003230:	429a      	cmp	r2, r3
 8003232:	d91f      	bls.n	8003274 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003234:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4413      	add	r3, r2
 800323a:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	f003 0307 	and.w	r3, r3, #7
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00a      	beq.n	800325c <pvPortMalloc+0xf8>
	__asm volatile
 8003246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800324a:	f383 8811 	msr	BASEPRI, r3
 800324e:	f3bf 8f6f 	isb	sy
 8003252:	f3bf 8f4f 	dsb	sy
 8003256:	613b      	str	r3, [r7, #16]
}
 8003258:	bf00      	nop
 800325a:	e7fe      	b.n	800325a <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800325c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325e:	685a      	ldr	r2, [r3, #4]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	1ad2      	subs	r2, r2, r3
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800326e:	69b8      	ldr	r0, [r7, #24]
 8003270:	f000 f908 	bl	8003484 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003274:	4b1d      	ldr	r3, [pc, #116]	; (80032ec <pvPortMalloc+0x188>)
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	4a1b      	ldr	r2, [pc, #108]	; (80032ec <pvPortMalloc+0x188>)
 8003280:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003282:	4b1a      	ldr	r3, [pc, #104]	; (80032ec <pvPortMalloc+0x188>)
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	4b1b      	ldr	r3, [pc, #108]	; (80032f4 <pvPortMalloc+0x190>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	429a      	cmp	r2, r3
 800328c:	d203      	bcs.n	8003296 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800328e:	4b17      	ldr	r3, [pc, #92]	; (80032ec <pvPortMalloc+0x188>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a18      	ldr	r2, [pc, #96]	; (80032f4 <pvPortMalloc+0x190>)
 8003294:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003298:	685a      	ldr	r2, [r3, #4]
 800329a:	4b13      	ldr	r3, [pc, #76]	; (80032e8 <pvPortMalloc+0x184>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	431a      	orrs	r2, r3
 80032a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80032a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a6:	2200      	movs	r2, #0
 80032a8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80032aa:	4b13      	ldr	r3, [pc, #76]	; (80032f8 <pvPortMalloc+0x194>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	3301      	adds	r3, #1
 80032b0:	4a11      	ldr	r2, [pc, #68]	; (80032f8 <pvPortMalloc+0x194>)
 80032b2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80032b4:	f7fe fc3a 	bl	8001b2c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	f003 0307 	and.w	r3, r3, #7
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d00a      	beq.n	80032d8 <pvPortMalloc+0x174>
	__asm volatile
 80032c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032c6:	f383 8811 	msr	BASEPRI, r3
 80032ca:	f3bf 8f6f 	isb	sy
 80032ce:	f3bf 8f4f 	dsb	sy
 80032d2:	60fb      	str	r3, [r7, #12]
}
 80032d4:	bf00      	nop
 80032d6:	e7fe      	b.n	80032d6 <pvPortMalloc+0x172>
	return pvReturn;
 80032d8:	69fb      	ldr	r3, [r7, #28]
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3728      	adds	r7, #40	; 0x28
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	200021b8 	.word	0x200021b8
 80032e8:	200021cc 	.word	0x200021cc
 80032ec:	200021bc 	.word	0x200021bc
 80032f0:	200021b0 	.word	0x200021b0
 80032f4:	200021c0 	.word	0x200021c0
 80032f8:	200021c4 	.word	0x200021c4

080032fc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b086      	sub	sp, #24
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d04d      	beq.n	80033aa <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800330e:	2308      	movs	r3, #8
 8003310:	425b      	negs	r3, r3
 8003312:	697a      	ldr	r2, [r7, #20]
 8003314:	4413      	add	r3, r2
 8003316:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	685a      	ldr	r2, [r3, #4]
 8003320:	4b24      	ldr	r3, [pc, #144]	; (80033b4 <vPortFree+0xb8>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4013      	ands	r3, r2
 8003326:	2b00      	cmp	r3, #0
 8003328:	d10a      	bne.n	8003340 <vPortFree+0x44>
	__asm volatile
 800332a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800332e:	f383 8811 	msr	BASEPRI, r3
 8003332:	f3bf 8f6f 	isb	sy
 8003336:	f3bf 8f4f 	dsb	sy
 800333a:	60fb      	str	r3, [r7, #12]
}
 800333c:	bf00      	nop
 800333e:	e7fe      	b.n	800333e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d00a      	beq.n	800335e <vPortFree+0x62>
	__asm volatile
 8003348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800334c:	f383 8811 	msr	BASEPRI, r3
 8003350:	f3bf 8f6f 	isb	sy
 8003354:	f3bf 8f4f 	dsb	sy
 8003358:	60bb      	str	r3, [r7, #8]
}
 800335a:	bf00      	nop
 800335c:	e7fe      	b.n	800335c <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	685a      	ldr	r2, [r3, #4]
 8003362:	4b14      	ldr	r3, [pc, #80]	; (80033b4 <vPortFree+0xb8>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4013      	ands	r3, r2
 8003368:	2b00      	cmp	r3, #0
 800336a:	d01e      	beq.n	80033aa <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d11a      	bne.n	80033aa <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	685a      	ldr	r2, [r3, #4]
 8003378:	4b0e      	ldr	r3, [pc, #56]	; (80033b4 <vPortFree+0xb8>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	43db      	mvns	r3, r3
 800337e:	401a      	ands	r2, r3
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003384:	f7fe fbc4 	bl	8001b10 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	685a      	ldr	r2, [r3, #4]
 800338c:	4b0a      	ldr	r3, [pc, #40]	; (80033b8 <vPortFree+0xbc>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4413      	add	r3, r2
 8003392:	4a09      	ldr	r2, [pc, #36]	; (80033b8 <vPortFree+0xbc>)
 8003394:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003396:	6938      	ldr	r0, [r7, #16]
 8003398:	f000 f874 	bl	8003484 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800339c:	4b07      	ldr	r3, [pc, #28]	; (80033bc <vPortFree+0xc0>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	3301      	adds	r3, #1
 80033a2:	4a06      	ldr	r2, [pc, #24]	; (80033bc <vPortFree+0xc0>)
 80033a4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80033a6:	f7fe fbc1 	bl	8001b2c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80033aa:	bf00      	nop
 80033ac:	3718      	adds	r7, #24
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	200021cc 	.word	0x200021cc
 80033b8:	200021bc 	.word	0x200021bc
 80033bc:	200021c8 	.word	0x200021c8

080033c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80033c0:	b480      	push	{r7}
 80033c2:	b085      	sub	sp, #20
 80033c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80033c6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80033ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80033cc:	4b27      	ldr	r3, [pc, #156]	; (800346c <prvHeapInit+0xac>)
 80033ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f003 0307 	and.w	r3, r3, #7
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00c      	beq.n	80033f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	3307      	adds	r3, #7
 80033de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f023 0307 	bic.w	r3, r3, #7
 80033e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80033e8:	68ba      	ldr	r2, [r7, #8]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	4a1f      	ldr	r2, [pc, #124]	; (800346c <prvHeapInit+0xac>)
 80033f0:	4413      	add	r3, r2
 80033f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80033f8:	4a1d      	ldr	r2, [pc, #116]	; (8003470 <prvHeapInit+0xb0>)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80033fe:	4b1c      	ldr	r3, [pc, #112]	; (8003470 <prvHeapInit+0xb0>)
 8003400:	2200      	movs	r2, #0
 8003402:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	68ba      	ldr	r2, [r7, #8]
 8003408:	4413      	add	r3, r2
 800340a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800340c:	2208      	movs	r2, #8
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	1a9b      	subs	r3, r3, r2
 8003412:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f023 0307 	bic.w	r3, r3, #7
 800341a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	4a15      	ldr	r2, [pc, #84]	; (8003474 <prvHeapInit+0xb4>)
 8003420:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003422:	4b14      	ldr	r3, [pc, #80]	; (8003474 <prvHeapInit+0xb4>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2200      	movs	r2, #0
 8003428:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800342a:	4b12      	ldr	r3, [pc, #72]	; (8003474 <prvHeapInit+0xb4>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2200      	movs	r2, #0
 8003430:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	68fa      	ldr	r2, [r7, #12]
 800343a:	1ad2      	subs	r2, r2, r3
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003440:	4b0c      	ldr	r3, [pc, #48]	; (8003474 <prvHeapInit+0xb4>)
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	4a0a      	ldr	r2, [pc, #40]	; (8003478 <prvHeapInit+0xb8>)
 800344e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	4a09      	ldr	r2, [pc, #36]	; (800347c <prvHeapInit+0xbc>)
 8003456:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003458:	4b09      	ldr	r3, [pc, #36]	; (8003480 <prvHeapInit+0xc0>)
 800345a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800345e:	601a      	str	r2, [r3, #0]
}
 8003460:	bf00      	nop
 8003462:	3714      	adds	r7, #20
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr
 800346c:	200015f8 	.word	0x200015f8
 8003470:	200021b0 	.word	0x200021b0
 8003474:	200021b8 	.word	0x200021b8
 8003478:	200021c0 	.word	0x200021c0
 800347c:	200021bc 	.word	0x200021bc
 8003480:	200021cc 	.word	0x200021cc

08003484 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003484:	b480      	push	{r7}
 8003486:	b085      	sub	sp, #20
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800348c:	4b28      	ldr	r3, [pc, #160]	; (8003530 <prvInsertBlockIntoFreeList+0xac>)
 800348e:	60fb      	str	r3, [r7, #12]
 8003490:	e002      	b.n	8003498 <prvInsertBlockIntoFreeList+0x14>
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	60fb      	str	r3, [r7, #12]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	429a      	cmp	r2, r3
 80034a0:	d8f7      	bhi.n	8003492 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	68ba      	ldr	r2, [r7, #8]
 80034ac:	4413      	add	r3, r2
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d108      	bne.n	80034c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	685a      	ldr	r2, [r3, #4]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	441a      	add	r2, r3
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	68ba      	ldr	r2, [r7, #8]
 80034d0:	441a      	add	r2, r3
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d118      	bne.n	800350c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	4b15      	ldr	r3, [pc, #84]	; (8003534 <prvInsertBlockIntoFreeList+0xb0>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d00d      	beq.n	8003502 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685a      	ldr	r2, [r3, #4]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	441a      	add	r2, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	601a      	str	r2, [r3, #0]
 8003500:	e008      	b.n	8003514 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003502:	4b0c      	ldr	r3, [pc, #48]	; (8003534 <prvInsertBlockIntoFreeList+0xb0>)
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	601a      	str	r2, [r3, #0]
 800350a:	e003      	b.n	8003514 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003514:	68fa      	ldr	r2, [r7, #12]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	429a      	cmp	r2, r3
 800351a:	d002      	beq.n	8003522 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003522:	bf00      	nop
 8003524:	3714      	adds	r7, #20
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	200021b0 	.word	0x200021b0
 8003534:	200021b8 	.word	0x200021b8

08003538 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800353e:	2300      	movs	r3, #0
 8003540:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003542:	2003      	movs	r0, #3
 8003544:	f000 f9a8 	bl	8003898 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003548:	2000      	movs	r0, #0
 800354a:	f000 f80d 	bl	8003568 <HAL_InitTick>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d002      	beq.n	800355a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	71fb      	strb	r3, [r7, #7]
 8003558:	e001      	b.n	800355e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800355a:	f004 fd0b 	bl	8007f74 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800355e:	79fb      	ldrb	r3, [r7, #7]
}
 8003560:	4618      	mov	r0, r3
 8003562:	3708      	adds	r7, #8
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003570:	2300      	movs	r3, #0
 8003572:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003574:	4b17      	ldr	r3, [pc, #92]	; (80035d4 <HAL_InitTick+0x6c>)
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d023      	beq.n	80035c4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800357c:	4b16      	ldr	r3, [pc, #88]	; (80035d8 <HAL_InitTick+0x70>)
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	4b14      	ldr	r3, [pc, #80]	; (80035d4 <HAL_InitTick+0x6c>)
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	4619      	mov	r1, r3
 8003586:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800358a:	fbb3 f3f1 	udiv	r3, r3, r1
 800358e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003592:	4618      	mov	r0, r3
 8003594:	f000 f9c3 	bl	800391e <HAL_SYSTICK_Config>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d10f      	bne.n	80035be <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2b0f      	cmp	r3, #15
 80035a2:	d809      	bhi.n	80035b8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80035a4:	2200      	movs	r2, #0
 80035a6:	6879      	ldr	r1, [r7, #4]
 80035a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80035ac:	f000 f97f 	bl	80038ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80035b0:	4a0a      	ldr	r2, [pc, #40]	; (80035dc <HAL_InitTick+0x74>)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6013      	str	r3, [r2, #0]
 80035b6:	e007      	b.n	80035c8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	73fb      	strb	r3, [r7, #15]
 80035bc:	e004      	b.n	80035c8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	73fb      	strb	r3, [r7, #15]
 80035c2:	e001      	b.n	80035c8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80035c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	20000014 	.word	0x20000014
 80035d8:	200000a0 	.word	0x200000a0
 80035dc:	20000010 	.word	0x20000010

080035e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035e0:	b480      	push	{r7}
 80035e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80035e4:	4b06      	ldr	r3, [pc, #24]	; (8003600 <HAL_IncTick+0x20>)
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	461a      	mov	r2, r3
 80035ea:	4b06      	ldr	r3, [pc, #24]	; (8003604 <HAL_IncTick+0x24>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4413      	add	r3, r2
 80035f0:	4a04      	ldr	r2, [pc, #16]	; (8003604 <HAL_IncTick+0x24>)
 80035f2:	6013      	str	r3, [r2, #0]
}
 80035f4:	bf00      	nop
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	20000014 	.word	0x20000014
 8003604:	200021d0 	.word	0x200021d0

08003608 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003608:	b480      	push	{r7}
 800360a:	af00      	add	r7, sp, #0
    //return xTaskGetTickCount();
    return uwTick;
 800360c:	4b03      	ldr	r3, [pc, #12]	; (800361c <HAL_GetTick+0x14>)
 800360e:	681b      	ldr	r3, [r3, #0]
}
 8003610:	4618      	mov	r0, r3
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	200021d0 	.word	0x200021d0

08003620 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003628:	f7ff ffee 	bl	8003608 <HAL_GetTick>
 800362c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003638:	d005      	beq.n	8003646 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800363a:	4b0a      	ldr	r3, [pc, #40]	; (8003664 <HAL_Delay+0x44>)
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	461a      	mov	r2, r3
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	4413      	add	r3, r2
 8003644:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003646:	bf00      	nop
 8003648:	f7ff ffde 	bl	8003608 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	68fa      	ldr	r2, [r7, #12]
 8003654:	429a      	cmp	r2, r3
 8003656:	d8f7      	bhi.n	8003648 <HAL_Delay+0x28>
  {
  }
}
 8003658:	bf00      	nop
 800365a:	bf00      	nop
 800365c:	3710      	adds	r7, #16
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	20000014 	.word	0x20000014

08003668 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8003668:	b480      	push	{r7}
 800366a:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 800366c:	4b03      	ldr	r3, [pc, #12]	; (800367c <HAL_GetUIDw0+0x14>)
 800366e:	681b      	ldr	r3, [r3, #0]
}
 8003670:	4618      	mov	r0, r3
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	1fff7590 	.word	0x1fff7590

08003680 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8003680:	b480      	push	{r7}
 8003682:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8003684:	4b03      	ldr	r3, [pc, #12]	; (8003694 <HAL_GetUIDw1+0x14>)
 8003686:	681b      	ldr	r3, [r3, #0]
}
 8003688:	4618      	mov	r0, r3
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	1fff7594 	.word	0x1fff7594

08003698 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8003698:	b480      	push	{r7}
 800369a:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 800369c:	4b03      	ldr	r3, [pc, #12]	; (80036ac <HAL_GetUIDw2+0x14>)
 800369e:	681b      	ldr	r3, [r3, #0]
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop
 80036ac:	1fff7598 	.word	0x1fff7598

080036b0 <__NVIC_SetPriorityGrouping>:
{
 80036b0:	b480      	push	{r7}
 80036b2:	b085      	sub	sp, #20
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f003 0307 	and.w	r3, r3, #7
 80036be:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036c0:	4b0c      	ldr	r3, [pc, #48]	; (80036f4 <__NVIC_SetPriorityGrouping+0x44>)
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036c6:	68ba      	ldr	r2, [r7, #8]
 80036c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80036cc:	4013      	ands	r3, r2
 80036ce:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80036dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036e2:	4a04      	ldr	r2, [pc, #16]	; (80036f4 <__NVIC_SetPriorityGrouping+0x44>)
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	60d3      	str	r3, [r2, #12]
}
 80036e8:	bf00      	nop
 80036ea:	3714      	adds	r7, #20
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr
 80036f4:	e000ed00 	.word	0xe000ed00

080036f8 <__NVIC_GetPriorityGrouping>:
{
 80036f8:	b480      	push	{r7}
 80036fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036fc:	4b04      	ldr	r3, [pc, #16]	; (8003710 <__NVIC_GetPriorityGrouping+0x18>)
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	0a1b      	lsrs	r3, r3, #8
 8003702:	f003 0307 	and.w	r3, r3, #7
}
 8003706:	4618      	mov	r0, r3
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr
 8003710:	e000ed00 	.word	0xe000ed00

08003714 <__NVIC_EnableIRQ>:
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	4603      	mov	r3, r0
 800371c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800371e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003722:	2b00      	cmp	r3, #0
 8003724:	db0b      	blt.n	800373e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003726:	79fb      	ldrb	r3, [r7, #7]
 8003728:	f003 021f 	and.w	r2, r3, #31
 800372c:	4907      	ldr	r1, [pc, #28]	; (800374c <__NVIC_EnableIRQ+0x38>)
 800372e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003732:	095b      	lsrs	r3, r3, #5
 8003734:	2001      	movs	r0, #1
 8003736:	fa00 f202 	lsl.w	r2, r0, r2
 800373a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800373e:	bf00      	nop
 8003740:	370c      	adds	r7, #12
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	e000e100 	.word	0xe000e100

08003750 <__NVIC_DisableIRQ>:
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	4603      	mov	r3, r0
 8003758:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800375a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800375e:	2b00      	cmp	r3, #0
 8003760:	db12      	blt.n	8003788 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003762:	79fb      	ldrb	r3, [r7, #7]
 8003764:	f003 021f 	and.w	r2, r3, #31
 8003768:	490a      	ldr	r1, [pc, #40]	; (8003794 <__NVIC_DisableIRQ+0x44>)
 800376a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800376e:	095b      	lsrs	r3, r3, #5
 8003770:	2001      	movs	r0, #1
 8003772:	fa00 f202 	lsl.w	r2, r0, r2
 8003776:	3320      	adds	r3, #32
 8003778:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800377c:	f3bf 8f4f 	dsb	sy
}
 8003780:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003782:	f3bf 8f6f 	isb	sy
}
 8003786:	bf00      	nop
}
 8003788:	bf00      	nop
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr
 8003794:	e000e100 	.word	0xe000e100

08003798 <__NVIC_SetPriority>:
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	4603      	mov	r3, r0
 80037a0:	6039      	str	r1, [r7, #0]
 80037a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	db0a      	blt.n	80037c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	b2da      	uxtb	r2, r3
 80037b0:	490c      	ldr	r1, [pc, #48]	; (80037e4 <__NVIC_SetPriority+0x4c>)
 80037b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037b6:	0112      	lsls	r2, r2, #4
 80037b8:	b2d2      	uxtb	r2, r2
 80037ba:	440b      	add	r3, r1
 80037bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80037c0:	e00a      	b.n	80037d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	b2da      	uxtb	r2, r3
 80037c6:	4908      	ldr	r1, [pc, #32]	; (80037e8 <__NVIC_SetPriority+0x50>)
 80037c8:	79fb      	ldrb	r3, [r7, #7]
 80037ca:	f003 030f 	and.w	r3, r3, #15
 80037ce:	3b04      	subs	r3, #4
 80037d0:	0112      	lsls	r2, r2, #4
 80037d2:	b2d2      	uxtb	r2, r2
 80037d4:	440b      	add	r3, r1
 80037d6:	761a      	strb	r2, [r3, #24]
}
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr
 80037e4:	e000e100 	.word	0xe000e100
 80037e8:	e000ed00 	.word	0xe000ed00

080037ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b089      	sub	sp, #36	; 0x24
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f003 0307 	and.w	r3, r3, #7
 80037fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	f1c3 0307 	rsb	r3, r3, #7
 8003806:	2b04      	cmp	r3, #4
 8003808:	bf28      	it	cs
 800380a:	2304      	movcs	r3, #4
 800380c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	3304      	adds	r3, #4
 8003812:	2b06      	cmp	r3, #6
 8003814:	d902      	bls.n	800381c <NVIC_EncodePriority+0x30>
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	3b03      	subs	r3, #3
 800381a:	e000      	b.n	800381e <NVIC_EncodePriority+0x32>
 800381c:	2300      	movs	r3, #0
 800381e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003820:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	fa02 f303 	lsl.w	r3, r2, r3
 800382a:	43da      	mvns	r2, r3
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	401a      	ands	r2, r3
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003834:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	fa01 f303 	lsl.w	r3, r1, r3
 800383e:	43d9      	mvns	r1, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003844:	4313      	orrs	r3, r2
         );
}
 8003846:	4618      	mov	r0, r3
 8003848:	3724      	adds	r7, #36	; 0x24
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
	...

08003854 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	3b01      	subs	r3, #1
 8003860:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003864:	d301      	bcc.n	800386a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003866:	2301      	movs	r3, #1
 8003868:	e00f      	b.n	800388a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800386a:	4a0a      	ldr	r2, [pc, #40]	; (8003894 <SysTick_Config+0x40>)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	3b01      	subs	r3, #1
 8003870:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003872:	210f      	movs	r1, #15
 8003874:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003878:	f7ff ff8e 	bl	8003798 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800387c:	4b05      	ldr	r3, [pc, #20]	; (8003894 <SysTick_Config+0x40>)
 800387e:	2200      	movs	r2, #0
 8003880:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003882:	4b04      	ldr	r3, [pc, #16]	; (8003894 <SysTick_Config+0x40>)
 8003884:	2207      	movs	r2, #7
 8003886:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003888:	2300      	movs	r3, #0
}
 800388a:	4618      	mov	r0, r3
 800388c:	3708      	adds	r7, #8
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	e000e010 	.word	0xe000e010

08003898 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f7ff ff05 	bl	80036b0 <__NVIC_SetPriorityGrouping>
}
 80038a6:	bf00      	nop
 80038a8:	3708      	adds	r7, #8
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}

080038ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038ae:	b580      	push	{r7, lr}
 80038b0:	b086      	sub	sp, #24
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	4603      	mov	r3, r0
 80038b6:	60b9      	str	r1, [r7, #8]
 80038b8:	607a      	str	r2, [r7, #4]
 80038ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80038bc:	2300      	movs	r3, #0
 80038be:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80038c0:	f7ff ff1a 	bl	80036f8 <__NVIC_GetPriorityGrouping>
 80038c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	68b9      	ldr	r1, [r7, #8]
 80038ca:	6978      	ldr	r0, [r7, #20]
 80038cc:	f7ff ff8e 	bl	80037ec <NVIC_EncodePriority>
 80038d0:	4602      	mov	r2, r0
 80038d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038d6:	4611      	mov	r1, r2
 80038d8:	4618      	mov	r0, r3
 80038da:	f7ff ff5d 	bl	8003798 <__NVIC_SetPriority>
}
 80038de:	bf00      	nop
 80038e0:	3718      	adds	r7, #24
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}

080038e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b082      	sub	sp, #8
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	4603      	mov	r3, r0
 80038ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038f4:	4618      	mov	r0, r3
 80038f6:	f7ff ff0d 	bl	8003714 <__NVIC_EnableIRQ>
}
 80038fa:	bf00      	nop
 80038fc:	3708      	adds	r7, #8
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}

08003902 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003902:	b580      	push	{r7, lr}
 8003904:	b082      	sub	sp, #8
 8003906:	af00      	add	r7, sp, #0
 8003908:	4603      	mov	r3, r0
 800390a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800390c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003910:	4618      	mov	r0, r3
 8003912:	f7ff ff1d 	bl	8003750 <__NVIC_DisableIRQ>
}
 8003916:	bf00      	nop
 8003918:	3708      	adds	r7, #8
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800391e:	b580      	push	{r7, lr}
 8003920:	b082      	sub	sp, #8
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f7ff ff94 	bl	8003854 <SysTick_Config>
 800392c:	4603      	mov	r3, r0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3708      	adds	r7, #8
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
	...

08003938 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003938:	b480      	push	{r7}
 800393a:	b085      	sub	sp, #20
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d101      	bne.n	800394a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e098      	b.n	8003a7c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	461a      	mov	r2, r3
 8003950:	4b4d      	ldr	r3, [pc, #308]	; (8003a88 <HAL_DMA_Init+0x150>)
 8003952:	429a      	cmp	r2, r3
 8003954:	d80f      	bhi.n	8003976 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	461a      	mov	r2, r3
 800395c:	4b4b      	ldr	r3, [pc, #300]	; (8003a8c <HAL_DMA_Init+0x154>)
 800395e:	4413      	add	r3, r2
 8003960:	4a4b      	ldr	r2, [pc, #300]	; (8003a90 <HAL_DMA_Init+0x158>)
 8003962:	fba2 2303 	umull	r2, r3, r2, r3
 8003966:	091b      	lsrs	r3, r3, #4
 8003968:	009a      	lsls	r2, r3, #2
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a48      	ldr	r2, [pc, #288]	; (8003a94 <HAL_DMA_Init+0x15c>)
 8003972:	641a      	str	r2, [r3, #64]	; 0x40
 8003974:	e00e      	b.n	8003994 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	461a      	mov	r2, r3
 800397c:	4b46      	ldr	r3, [pc, #280]	; (8003a98 <HAL_DMA_Init+0x160>)
 800397e:	4413      	add	r3, r2
 8003980:	4a43      	ldr	r2, [pc, #268]	; (8003a90 <HAL_DMA_Init+0x158>)
 8003982:	fba2 2303 	umull	r2, r3, r2, r3
 8003986:	091b      	lsrs	r3, r3, #4
 8003988:	009a      	lsls	r2, r3, #2
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a42      	ldr	r2, [pc, #264]	; (8003a9c <HAL_DMA_Init+0x164>)
 8003992:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2202      	movs	r2, #2
 8003998:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80039aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ae:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80039b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	699b      	ldr	r3, [r3, #24]
 80039ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a1b      	ldr	r3, [r3, #32]
 80039d6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80039d8:	68fa      	ldr	r2, [r7, #12]
 80039da:	4313      	orrs	r3, r2
 80039dc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	68fa      	ldr	r2, [r7, #12]
 80039e4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039ee:	d039      	beq.n	8003a64 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f4:	4a27      	ldr	r2, [pc, #156]	; (8003a94 <HAL_DMA_Init+0x15c>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d11a      	bne.n	8003a30 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80039fa:	4b29      	ldr	r3, [pc, #164]	; (8003aa0 <HAL_DMA_Init+0x168>)
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a02:	f003 031c 	and.w	r3, r3, #28
 8003a06:	210f      	movs	r1, #15
 8003a08:	fa01 f303 	lsl.w	r3, r1, r3
 8003a0c:	43db      	mvns	r3, r3
 8003a0e:	4924      	ldr	r1, [pc, #144]	; (8003aa0 <HAL_DMA_Init+0x168>)
 8003a10:	4013      	ands	r3, r2
 8003a12:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003a14:	4b22      	ldr	r3, [pc, #136]	; (8003aa0 <HAL_DMA_Init+0x168>)
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6859      	ldr	r1, [r3, #4]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a20:	f003 031c 	and.w	r3, r3, #28
 8003a24:	fa01 f303 	lsl.w	r3, r1, r3
 8003a28:	491d      	ldr	r1, [pc, #116]	; (8003aa0 <HAL_DMA_Init+0x168>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	600b      	str	r3, [r1, #0]
 8003a2e:	e019      	b.n	8003a64 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003a30:	4b1c      	ldr	r3, [pc, #112]	; (8003aa4 <HAL_DMA_Init+0x16c>)
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a38:	f003 031c 	and.w	r3, r3, #28
 8003a3c:	210f      	movs	r1, #15
 8003a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a42:	43db      	mvns	r3, r3
 8003a44:	4917      	ldr	r1, [pc, #92]	; (8003aa4 <HAL_DMA_Init+0x16c>)
 8003a46:	4013      	ands	r3, r2
 8003a48:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003a4a:	4b16      	ldr	r3, [pc, #88]	; (8003aa4 <HAL_DMA_Init+0x16c>)
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6859      	ldr	r1, [r3, #4]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a56:	f003 031c 	and.w	r3, r3, #28
 8003a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a5e:	4911      	ldr	r1, [pc, #68]	; (8003aa4 <HAL_DMA_Init+0x16c>)
 8003a60:	4313      	orrs	r3, r2
 8003a62:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003a7a:	2300      	movs	r3, #0
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3714      	adds	r7, #20
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr
 8003a88:	40020407 	.word	0x40020407
 8003a8c:	bffdfff8 	.word	0xbffdfff8
 8003a90:	cccccccd 	.word	0xcccccccd
 8003a94:	40020000 	.word	0x40020000
 8003a98:	bffdfbf8 	.word	0xbffdfbf8
 8003a9c:	40020400 	.word	0x40020400
 8003aa0:	400200a8 	.word	0x400200a8
 8003aa4:	400204a8 	.word	0x400204a8

08003aa8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b086      	sub	sp, #24
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	60b9      	str	r1, [r7, #8]
 8003ab2:	607a      	str	r2, [r7, #4]
 8003ab4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d101      	bne.n	8003ac8 <HAL_DMA_Start_IT+0x20>
 8003ac4:	2302      	movs	r3, #2
 8003ac6:	e04b      	b.n	8003b60 <HAL_DMA_Start_IT+0xb8>
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d13a      	bne.n	8003b52 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2202      	movs	r2, #2
 8003ae0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f022 0201 	bic.w	r2, r2, #1
 8003af8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	68b9      	ldr	r1, [r7, #8]
 8003b00:	68f8      	ldr	r0, [r7, #12]
 8003b02:	f000 f969 	bl	8003dd8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d008      	beq.n	8003b20 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f042 020e 	orr.w	r2, r2, #14
 8003b1c:	601a      	str	r2, [r3, #0]
 8003b1e:	e00f      	b.n	8003b40 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f022 0204 	bic.w	r2, r2, #4
 8003b2e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f042 020a 	orr.w	r2, r2, #10
 8003b3e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f042 0201 	orr.w	r2, r2, #1
 8003b4e:	601a      	str	r2, [r3, #0]
 8003b50:	e005      	b.n	8003b5e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003b5a:	2302      	movs	r3, #2
 8003b5c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003b5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3718      	adds	r7, #24
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b084      	sub	sp, #16
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b70:	2300      	movs	r3, #0
 8003b72:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d005      	beq.n	8003b8c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2204      	movs	r2, #4
 8003b84:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	73fb      	strb	r3, [r7, #15]
 8003b8a:	e029      	b.n	8003be0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f022 020e 	bic.w	r2, r2, #14
 8003b9a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f022 0201 	bic.w	r2, r2, #1
 8003baa:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bb0:	f003 021c 	and.w	r2, r3, #28
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb8:	2101      	movs	r1, #1
 8003bba:	fa01 f202 	lsl.w	r2, r1, r2
 8003bbe:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d003      	beq.n	8003be0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	4798      	blx	r3
    }
  }
  return status;
 8003be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3710      	adds	r7, #16
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}

08003bea <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003bea:	b580      	push	{r7, lr}
 8003bec:	b084      	sub	sp, #16
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c06:	f003 031c 	and.w	r3, r3, #28
 8003c0a:	2204      	movs	r2, #4
 8003c0c:	409a      	lsls	r2, r3
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	4013      	ands	r3, r2
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d026      	beq.n	8003c64 <HAL_DMA_IRQHandler+0x7a>
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	f003 0304 	and.w	r3, r3, #4
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d021      	beq.n	8003c64 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0320 	and.w	r3, r3, #32
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d107      	bne.n	8003c3e <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f022 0204 	bic.w	r2, r2, #4
 8003c3c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c42:	f003 021c 	and.w	r2, r3, #28
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4a:	2104      	movs	r1, #4
 8003c4c:	fa01 f202 	lsl.w	r2, r1, r2
 8003c50:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d071      	beq.n	8003d3e <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003c62:	e06c      	b.n	8003d3e <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c68:	f003 031c 	and.w	r3, r3, #28
 8003c6c:	2202      	movs	r2, #2
 8003c6e:	409a      	lsls	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	4013      	ands	r3, r2
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d02e      	beq.n	8003cd6 <HAL_DMA_IRQHandler+0xec>
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	f003 0302 	and.w	r3, r3, #2
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d029      	beq.n	8003cd6 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0320 	and.w	r3, r3, #32
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d10b      	bne.n	8003ca8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f022 020a 	bic.w	r2, r2, #10
 8003c9e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cac:	f003 021c 	and.w	r2, r3, #28
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb4:	2102      	movs	r1, #2
 8003cb6:	fa01 f202 	lsl.w	r2, r1, r2
 8003cba:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d038      	beq.n	8003d3e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003cd4:	e033      	b.n	8003d3e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cda:	f003 031c 	and.w	r3, r3, #28
 8003cde:	2208      	movs	r2, #8
 8003ce0:	409a      	lsls	r2, r3
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d02a      	beq.n	8003d40 <HAL_DMA_IRQHandler+0x156>
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	f003 0308 	and.w	r3, r3, #8
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d025      	beq.n	8003d40 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f022 020e 	bic.w	r2, r2, #14
 8003d02:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d08:	f003 021c 	and.w	r2, r3, #28
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d10:	2101      	movs	r1, #1
 8003d12:	fa01 f202 	lsl.w	r2, r1, r2
 8003d16:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2201      	movs	r2, #1
 8003d22:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d004      	beq.n	8003d40 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003d3e:	bf00      	nop
 8003d40:	bf00      	nop
}
 8003d42:	3710      	adds	r7, #16
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)( DMA_HandleTypeDef * _hdma))
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b087      	sub	sp, #28
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	460b      	mov	r3, r1
 8003d52:	607a      	str	r2, [r7, #4]
 8003d54:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8003d56:	2300      	movs	r3, #0
 8003d58:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d101      	bne.n	8003d68 <HAL_DMA_RegisterCallback+0x20>
 8003d64:	2302      	movs	r3, #2
 8003d66:	e031      	b.n	8003dcc <HAL_DMA_RegisterCallback+0x84>
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d120      	bne.n	8003dbe <HAL_DMA_RegisterCallback+0x76>
  {
    switch (CallbackID)
 8003d7c:	7afb      	ldrb	r3, [r7, #11]
 8003d7e:	2b03      	cmp	r3, #3
 8003d80:	d81a      	bhi.n	8003db8 <HAL_DMA_RegisterCallback+0x70>
 8003d82:	a201      	add	r2, pc, #4	; (adr r2, 8003d88 <HAL_DMA_RegisterCallback+0x40>)
 8003d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d88:	08003d99 	.word	0x08003d99
 8003d8c:	08003da1 	.word	0x08003da1
 8003d90:	08003da9 	.word	0x08003da9
 8003d94:	08003db1 	.word	0x08003db1
    {
     case  HAL_DMA_XFER_CPLT_CB_ID:
           hdma->XferCpltCallback = pCallback;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	62da      	str	r2, [r3, #44]	; 0x2c
           break;
 8003d9e:	e010      	b.n	8003dc2 <HAL_DMA_RegisterCallback+0x7a>

     case  HAL_DMA_XFER_HALFCPLT_CB_ID:
           hdma->XferHalfCpltCallback = pCallback;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	631a      	str	r2, [r3, #48]	; 0x30
           break;
 8003da6:	e00c      	b.n	8003dc2 <HAL_DMA_RegisterCallback+0x7a>

     case  HAL_DMA_XFER_ERROR_CB_ID:
           hdma->XferErrorCallback = pCallback;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	635a      	str	r2, [r3, #52]	; 0x34
           break;
 8003dae:	e008      	b.n	8003dc2 <HAL_DMA_RegisterCallback+0x7a>

     case  HAL_DMA_XFER_ABORT_CB_ID:
           hdma->XferAbortCallback = pCallback;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	639a      	str	r2, [r3, #56]	; 0x38
           break;
 8003db6:	e004      	b.n	8003dc2 <HAL_DMA_RegisterCallback+0x7a>

     default:
           status = HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	75fb      	strb	r3, [r7, #23]
           break;
 8003dbc:	e001      	b.n	8003dc2 <HAL_DMA_RegisterCallback+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8003dca:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	371c      	adds	r7, #28
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b085      	sub	sp, #20
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	60b9      	str	r1, [r7, #8]
 8003de2:	607a      	str	r2, [r7, #4]
 8003de4:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dea:	f003 021c 	and.w	r2, r3, #28
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df2:	2101      	movs	r1, #1
 8003df4:	fa01 f202 	lsl.w	r2, r1, r2
 8003df8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	683a      	ldr	r2, [r7, #0]
 8003e00:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	2b10      	cmp	r3, #16
 8003e08:	d108      	bne.n	8003e1c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68ba      	ldr	r2, [r7, #8]
 8003e18:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003e1a:	e007      	b.n	8003e2c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	68ba      	ldr	r2, [r7, #8]
 8003e22:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	60da      	str	r2, [r3, #12]
}
 8003e2c:	bf00      	nop
 8003e2e:	3714      	adds	r7, #20
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b087      	sub	sp, #28
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e42:	2300      	movs	r3, #0
 8003e44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e46:	e154      	b.n	80040f2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	2101      	movs	r1, #1
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	fa01 f303 	lsl.w	r3, r1, r3
 8003e54:	4013      	ands	r3, r2
 8003e56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	f000 8146 	beq.w	80040ec <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f003 0303 	and.w	r3, r3, #3
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d005      	beq.n	8003e78 <HAL_GPIO_Init+0x40>
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	f003 0303 	and.w	r3, r3, #3
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d130      	bne.n	8003eda <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	005b      	lsls	r3, r3, #1
 8003e82:	2203      	movs	r2, #3
 8003e84:	fa02 f303 	lsl.w	r3, r2, r3
 8003e88:	43db      	mvns	r3, r3
 8003e8a:	693a      	ldr	r2, [r7, #16]
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	68da      	ldr	r2, [r3, #12]
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	005b      	lsls	r3, r3, #1
 8003e98:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9c:	693a      	ldr	r2, [r7, #16]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003eae:	2201      	movs	r2, #1
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb6:	43db      	mvns	r3, r3
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	4013      	ands	r3, r2
 8003ebc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	091b      	lsrs	r3, r3, #4
 8003ec4:	f003 0201 	and.w	r2, r3, #1
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ece:	693a      	ldr	r2, [r7, #16]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	693a      	ldr	r2, [r7, #16]
 8003ed8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f003 0303 	and.w	r3, r3, #3
 8003ee2:	2b03      	cmp	r3, #3
 8003ee4:	d017      	beq.n	8003f16 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	005b      	lsls	r3, r3, #1
 8003ef0:	2203      	movs	r2, #3
 8003ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef6:	43db      	mvns	r3, r3
 8003ef8:	693a      	ldr	r2, [r7, #16]
 8003efa:	4013      	ands	r3, r2
 8003efc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	689a      	ldr	r2, [r3, #8]
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	005b      	lsls	r3, r3, #1
 8003f06:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0a:	693a      	ldr	r2, [r7, #16]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	693a      	ldr	r2, [r7, #16]
 8003f14:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	f003 0303 	and.w	r3, r3, #3
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d123      	bne.n	8003f6a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	08da      	lsrs	r2, r3, #3
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	3208      	adds	r2, #8
 8003f2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	f003 0307 	and.w	r3, r3, #7
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	220f      	movs	r2, #15
 8003f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3e:	43db      	mvns	r3, r3
 8003f40:	693a      	ldr	r2, [r7, #16]
 8003f42:	4013      	ands	r3, r2
 8003f44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	691a      	ldr	r2, [r3, #16]
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	f003 0307 	and.w	r3, r3, #7
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	fa02 f303 	lsl.w	r3, r2, r3
 8003f56:	693a      	ldr	r2, [r7, #16]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	08da      	lsrs	r2, r3, #3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	3208      	adds	r2, #8
 8003f64:	6939      	ldr	r1, [r7, #16]
 8003f66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	005b      	lsls	r3, r3, #1
 8003f74:	2203      	movs	r2, #3
 8003f76:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7a:	43db      	mvns	r3, r3
 8003f7c:	693a      	ldr	r2, [r7, #16]
 8003f7e:	4013      	ands	r3, r2
 8003f80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	f003 0203 	and.w	r2, r3, #3
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	005b      	lsls	r3, r3, #1
 8003f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f92:	693a      	ldr	r2, [r7, #16]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	693a      	ldr	r2, [r7, #16]
 8003f9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	f000 80a0 	beq.w	80040ec <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fac:	4b58      	ldr	r3, [pc, #352]	; (8004110 <HAL_GPIO_Init+0x2d8>)
 8003fae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fb0:	4a57      	ldr	r2, [pc, #348]	; (8004110 <HAL_GPIO_Init+0x2d8>)
 8003fb2:	f043 0301 	orr.w	r3, r3, #1
 8003fb6:	6613      	str	r3, [r2, #96]	; 0x60
 8003fb8:	4b55      	ldr	r3, [pc, #340]	; (8004110 <HAL_GPIO_Init+0x2d8>)
 8003fba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fbc:	f003 0301 	and.w	r3, r3, #1
 8003fc0:	60bb      	str	r3, [r7, #8]
 8003fc2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003fc4:	4a53      	ldr	r2, [pc, #332]	; (8004114 <HAL_GPIO_Init+0x2dc>)
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	089b      	lsrs	r3, r3, #2
 8003fca:	3302      	adds	r3, #2
 8003fcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fd0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	f003 0303 	and.w	r3, r3, #3
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	220f      	movs	r2, #15
 8003fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe0:	43db      	mvns	r3, r3
 8003fe2:	693a      	ldr	r2, [r7, #16]
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003fee:	d019      	beq.n	8004024 <HAL_GPIO_Init+0x1ec>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4a49      	ldr	r2, [pc, #292]	; (8004118 <HAL_GPIO_Init+0x2e0>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d013      	beq.n	8004020 <HAL_GPIO_Init+0x1e8>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a48      	ldr	r2, [pc, #288]	; (800411c <HAL_GPIO_Init+0x2e4>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d00d      	beq.n	800401c <HAL_GPIO_Init+0x1e4>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a47      	ldr	r2, [pc, #284]	; (8004120 <HAL_GPIO_Init+0x2e8>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d007      	beq.n	8004018 <HAL_GPIO_Init+0x1e0>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a46      	ldr	r2, [pc, #280]	; (8004124 <HAL_GPIO_Init+0x2ec>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d101      	bne.n	8004014 <HAL_GPIO_Init+0x1dc>
 8004010:	2304      	movs	r3, #4
 8004012:	e008      	b.n	8004026 <HAL_GPIO_Init+0x1ee>
 8004014:	2307      	movs	r3, #7
 8004016:	e006      	b.n	8004026 <HAL_GPIO_Init+0x1ee>
 8004018:	2303      	movs	r3, #3
 800401a:	e004      	b.n	8004026 <HAL_GPIO_Init+0x1ee>
 800401c:	2302      	movs	r3, #2
 800401e:	e002      	b.n	8004026 <HAL_GPIO_Init+0x1ee>
 8004020:	2301      	movs	r3, #1
 8004022:	e000      	b.n	8004026 <HAL_GPIO_Init+0x1ee>
 8004024:	2300      	movs	r3, #0
 8004026:	697a      	ldr	r2, [r7, #20]
 8004028:	f002 0203 	and.w	r2, r2, #3
 800402c:	0092      	lsls	r2, r2, #2
 800402e:	4093      	lsls	r3, r2
 8004030:	693a      	ldr	r2, [r7, #16]
 8004032:	4313      	orrs	r3, r2
 8004034:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004036:	4937      	ldr	r1, [pc, #220]	; (8004114 <HAL_GPIO_Init+0x2dc>)
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	089b      	lsrs	r3, r3, #2
 800403c:	3302      	adds	r3, #2
 800403e:	693a      	ldr	r2, [r7, #16]
 8004040:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004044:	4b38      	ldr	r3, [pc, #224]	; (8004128 <HAL_GPIO_Init+0x2f0>)
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	43db      	mvns	r3, r3
 800404e:	693a      	ldr	r2, [r7, #16]
 8004050:	4013      	ands	r3, r2
 8004052:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d003      	beq.n	8004068 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8004060:	693a      	ldr	r2, [r7, #16]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	4313      	orrs	r3, r2
 8004066:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004068:	4a2f      	ldr	r2, [pc, #188]	; (8004128 <HAL_GPIO_Init+0x2f0>)
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800406e:	4b2e      	ldr	r3, [pc, #184]	; (8004128 <HAL_GPIO_Init+0x2f0>)
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	43db      	mvns	r3, r3
 8004078:	693a      	ldr	r2, [r7, #16]
 800407a:	4013      	ands	r3, r2
 800407c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d003      	beq.n	8004092 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800408a:	693a      	ldr	r2, [r7, #16]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	4313      	orrs	r3, r2
 8004090:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004092:	4a25      	ldr	r2, [pc, #148]	; (8004128 <HAL_GPIO_Init+0x2f0>)
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004098:	4b23      	ldr	r3, [pc, #140]	; (8004128 <HAL_GPIO_Init+0x2f0>)
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	43db      	mvns	r3, r3
 80040a2:	693a      	ldr	r2, [r7, #16]
 80040a4:	4013      	ands	r3, r2
 80040a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d003      	beq.n	80040bc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80040b4:	693a      	ldr	r2, [r7, #16]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80040bc:	4a1a      	ldr	r2, [pc, #104]	; (8004128 <HAL_GPIO_Init+0x2f0>)
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80040c2:	4b19      	ldr	r3, [pc, #100]	; (8004128 <HAL_GPIO_Init+0x2f0>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	43db      	mvns	r3, r3
 80040cc:	693a      	ldr	r2, [r7, #16]
 80040ce:	4013      	ands	r3, r2
 80040d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d003      	beq.n	80040e6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80040de:	693a      	ldr	r2, [r7, #16]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80040e6:	4a10      	ldr	r2, [pc, #64]	; (8004128 <HAL_GPIO_Init+0x2f0>)
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	3301      	adds	r3, #1
 80040f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	fa22 f303 	lsr.w	r3, r2, r3
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	f47f aea3 	bne.w	8003e48 <HAL_GPIO_Init+0x10>
  }
}
 8004102:	bf00      	nop
 8004104:	bf00      	nop
 8004106:	371c      	adds	r7, #28
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr
 8004110:	40021000 	.word	0x40021000
 8004114:	40010000 	.word	0x40010000
 8004118:	48000400 	.word	0x48000400
 800411c:	48000800 	.word	0x48000800
 8004120:	48000c00 	.word	0x48000c00
 8004124:	48001000 	.word	0x48001000
 8004128:	40010400 	.word	0x40010400

0800412c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	460b      	mov	r3, r1
 8004136:	807b      	strh	r3, [r7, #2]
 8004138:	4613      	mov	r3, r2
 800413a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800413c:	787b      	ldrb	r3, [r7, #1]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d003      	beq.n	800414a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004142:	887a      	ldrh	r2, [r7, #2]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004148:	e002      	b.n	8004150 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800414a:	887a      	ldrh	r2, [r7, #2]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004150:	bf00      	nop
 8004152:	370c      	adds	r7, #12
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0
 8004162:	4603      	mov	r3, r0
 8004164:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004166:	4b08      	ldr	r3, [pc, #32]	; (8004188 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004168:	695a      	ldr	r2, [r3, #20]
 800416a:	88fb      	ldrh	r3, [r7, #6]
 800416c:	4013      	ands	r3, r2
 800416e:	2b00      	cmp	r3, #0
 8004170:	d006      	beq.n	8004180 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004172:	4a05      	ldr	r2, [pc, #20]	; (8004188 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004174:	88fb      	ldrh	r3, [r7, #6]
 8004176:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004178:	88fb      	ldrh	r3, [r7, #6]
 800417a:	4618      	mov	r0, r3
 800417c:	f000 f806 	bl	800418c <HAL_GPIO_EXTI_Callback>
  }
}
 8004180:	bf00      	nop
 8004182:	3708      	adds	r7, #8
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}
 8004188:	40010400 	.word	0x40010400

0800418c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	4603      	mov	r3, r0
 8004194:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004196:	bf00      	nop
 8004198:	370c      	adds	r7, #12
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
	...

080041a4 <HAL_PWR_ConfigPVD>:
  *         more details about the voltage thresholds corresponding to each
  *         detection level.
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 80041ac:	4b2b      	ldr	r3, [pc, #172]	; (800425c <HAL_PWR_ConfigPVD+0xb8>)
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	f023 020e 	bic.w	r2, r3, #14
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4928      	ldr	r1, [pc, #160]	; (800425c <HAL_PWR_ConfigPVD+0xb8>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	604b      	str	r3, [r1, #4]

  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 80041be:	4b28      	ldr	r3, [pc, #160]	; (8004260 <HAL_PWR_ConfigPVD+0xbc>)
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	4a27      	ldr	r2, [pc, #156]	; (8004260 <HAL_PWR_ConfigPVD+0xbc>)
 80041c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041c8:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 80041ca:	4b25      	ldr	r3, [pc, #148]	; (8004260 <HAL_PWR_ConfigPVD+0xbc>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a24      	ldr	r2, [pc, #144]	; (8004260 <HAL_PWR_ConfigPVD+0xbc>)
 80041d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041d4:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 80041d6:	4b22      	ldr	r3, [pc, #136]	; (8004260 <HAL_PWR_ConfigPVD+0xbc>)
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	4a21      	ldr	r2, [pc, #132]	; (8004260 <HAL_PWR_ConfigPVD+0xbc>)
 80041dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041e0:	60d3      	str	r3, [r2, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 80041e2:	4b1f      	ldr	r3, [pc, #124]	; (8004260 <HAL_PWR_ConfigPVD+0xbc>)
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	4a1e      	ldr	r2, [pc, #120]	; (8004260 <HAL_PWR_ConfigPVD+0xbc>)
 80041e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041ec:	6093      	str	r3, [r2, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d005      	beq.n	8004206 <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 80041fa:	4b19      	ldr	r3, [pc, #100]	; (8004260 <HAL_PWR_ConfigPVD+0xbc>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a18      	ldr	r2, [pc, #96]	; (8004260 <HAL_PWR_ConfigPVD+0xbc>)
 8004200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004204:	6013      	str	r3, [r2, #0]
  }

  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d005      	beq.n	800421e <HAL_PWR_ConfigPVD+0x7a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 8004212:	4b13      	ldr	r3, [pc, #76]	; (8004260 <HAL_PWR_ConfigPVD+0xbc>)
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	4a12      	ldr	r2, [pc, #72]	; (8004260 <HAL_PWR_ConfigPVD+0xbc>)
 8004218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800421c:	6053      	str	r3, [r2, #4]
  }

  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	f003 0301 	and.w	r3, r3, #1
 8004226:	2b00      	cmp	r3, #0
 8004228:	d005      	beq.n	8004236 <HAL_PWR_ConfigPVD+0x92>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 800422a:	4b0d      	ldr	r3, [pc, #52]	; (8004260 <HAL_PWR_ConfigPVD+0xbc>)
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	4a0c      	ldr	r2, [pc, #48]	; (8004260 <HAL_PWR_ConfigPVD+0xbc>)
 8004230:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004234:	6093      	str	r3, [r2, #8]
  }

  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	f003 0302 	and.w	r3, r3, #2
 800423e:	2b00      	cmp	r3, #0
 8004240:	d005      	beq.n	800424e <HAL_PWR_ConfigPVD+0xaa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8004242:	4b07      	ldr	r3, [pc, #28]	; (8004260 <HAL_PWR_ConfigPVD+0xbc>)
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	4a06      	ldr	r2, [pc, #24]	; (8004260 <HAL_PWR_ConfigPVD+0xbc>)
 8004248:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800424c:	60d3      	str	r3, [r2, #12]
  }

  return HAL_OK;
 800424e:	2300      	movs	r3, #0
}
 8004250:	4618      	mov	r0, r3
 8004252:	370c      	adds	r7, #12
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr
 800425c:	40007000 	.word	0x40007000
 8004260:	40010400 	.word	0x40010400

08004264 <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Power Voltage Detector (PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 8004264:	b480      	push	{r7}
 8004266:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 8004268:	4b05      	ldr	r3, [pc, #20]	; (8004280 <HAL_PWR_EnablePVD+0x1c>)
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	4a04      	ldr	r2, [pc, #16]	; (8004280 <HAL_PWR_EnablePVD+0x1c>)
 800426e:	f043 0301 	orr.w	r3, r3, #1
 8004272:	6053      	str	r3, [r2, #4]
}
 8004274:	bf00      	nop
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr
 800427e:	bf00      	nop
 8004280:	40007000 	.word	0x40007000

08004284 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004284:	b480      	push	{r7}
 8004286:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004288:	4b04      	ldr	r3, [pc, #16]	; (800429c <HAL_PWREx_GetVoltageRange+0x18>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004290:	4618      	mov	r0, r3
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr
 800429a:	bf00      	nop
 800429c:	40007000 	.word	0x40007000

080042a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b085      	sub	sp, #20
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042ae:	d130      	bne.n	8004312 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80042b0:	4b23      	ldr	r3, [pc, #140]	; (8004340 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80042b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042bc:	d038      	beq.n	8004330 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80042be:	4b20      	ldr	r3, [pc, #128]	; (8004340 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80042c6:	4a1e      	ldr	r2, [pc, #120]	; (8004340 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042cc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80042ce:	4b1d      	ldr	r3, [pc, #116]	; (8004344 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2232      	movs	r2, #50	; 0x32
 80042d4:	fb02 f303 	mul.w	r3, r2, r3
 80042d8:	4a1b      	ldr	r2, [pc, #108]	; (8004348 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80042da:	fba2 2303 	umull	r2, r3, r2, r3
 80042de:	0c9b      	lsrs	r3, r3, #18
 80042e0:	3301      	adds	r3, #1
 80042e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042e4:	e002      	b.n	80042ec <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	3b01      	subs	r3, #1
 80042ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042ec:	4b14      	ldr	r3, [pc, #80]	; (8004340 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042ee:	695b      	ldr	r3, [r3, #20]
 80042f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042f8:	d102      	bne.n	8004300 <HAL_PWREx_ControlVoltageScaling+0x60>
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d1f2      	bne.n	80042e6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004300:	4b0f      	ldr	r3, [pc, #60]	; (8004340 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004302:	695b      	ldr	r3, [r3, #20]
 8004304:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004308:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800430c:	d110      	bne.n	8004330 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	e00f      	b.n	8004332 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004312:	4b0b      	ldr	r3, [pc, #44]	; (8004340 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800431a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800431e:	d007      	beq.n	8004330 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004320:	4b07      	ldr	r3, [pc, #28]	; (8004340 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004328:	4a05      	ldr	r2, [pc, #20]	; (8004340 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800432a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800432e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3714      	adds	r7, #20
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr
 800433e:	bf00      	nop
 8004340:	40007000 	.word	0x40007000
 8004344:	200000a0 	.word	0x200000a0
 8004348:	431bde83 	.word	0x431bde83

0800434c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b088      	sub	sp, #32
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d102      	bne.n	8004360 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	f000 bc02 	b.w	8004b64 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004360:	4b96      	ldr	r3, [pc, #600]	; (80045bc <HAL_RCC_OscConfig+0x270>)
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f003 030c 	and.w	r3, r3, #12
 8004368:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800436a:	4b94      	ldr	r3, [pc, #592]	; (80045bc <HAL_RCC_OscConfig+0x270>)
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	f003 0303 	and.w	r3, r3, #3
 8004372:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0310 	and.w	r3, r3, #16
 800437c:	2b00      	cmp	r3, #0
 800437e:	f000 80e4 	beq.w	800454a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d007      	beq.n	8004398 <HAL_RCC_OscConfig+0x4c>
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	2b0c      	cmp	r3, #12
 800438c:	f040 808b 	bne.w	80044a6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	2b01      	cmp	r3, #1
 8004394:	f040 8087 	bne.w	80044a6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004398:	4b88      	ldr	r3, [pc, #544]	; (80045bc <HAL_RCC_OscConfig+0x270>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0302 	and.w	r3, r3, #2
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d005      	beq.n	80043b0 <HAL_RCC_OscConfig+0x64>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	699b      	ldr	r3, [r3, #24]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d101      	bne.n	80043b0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e3d9      	b.n	8004b64 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6a1a      	ldr	r2, [r3, #32]
 80043b4:	4b81      	ldr	r3, [pc, #516]	; (80045bc <HAL_RCC_OscConfig+0x270>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0308 	and.w	r3, r3, #8
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d004      	beq.n	80043ca <HAL_RCC_OscConfig+0x7e>
 80043c0:	4b7e      	ldr	r3, [pc, #504]	; (80045bc <HAL_RCC_OscConfig+0x270>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043c8:	e005      	b.n	80043d6 <HAL_RCC_OscConfig+0x8a>
 80043ca:	4b7c      	ldr	r3, [pc, #496]	; (80045bc <HAL_RCC_OscConfig+0x270>)
 80043cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043d0:	091b      	lsrs	r3, r3, #4
 80043d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d223      	bcs.n	8004422 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a1b      	ldr	r3, [r3, #32]
 80043de:	4618      	mov	r0, r3
 80043e0:	f000 fd8c 	bl	8004efc <RCC_SetFlashLatencyFromMSIRange>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d001      	beq.n	80043ee <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e3ba      	b.n	8004b64 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043ee:	4b73      	ldr	r3, [pc, #460]	; (80045bc <HAL_RCC_OscConfig+0x270>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a72      	ldr	r2, [pc, #456]	; (80045bc <HAL_RCC_OscConfig+0x270>)
 80043f4:	f043 0308 	orr.w	r3, r3, #8
 80043f8:	6013      	str	r3, [r2, #0]
 80043fa:	4b70      	ldr	r3, [pc, #448]	; (80045bc <HAL_RCC_OscConfig+0x270>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a1b      	ldr	r3, [r3, #32]
 8004406:	496d      	ldr	r1, [pc, #436]	; (80045bc <HAL_RCC_OscConfig+0x270>)
 8004408:	4313      	orrs	r3, r2
 800440a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800440c:	4b6b      	ldr	r3, [pc, #428]	; (80045bc <HAL_RCC_OscConfig+0x270>)
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	69db      	ldr	r3, [r3, #28]
 8004418:	021b      	lsls	r3, r3, #8
 800441a:	4968      	ldr	r1, [pc, #416]	; (80045bc <HAL_RCC_OscConfig+0x270>)
 800441c:	4313      	orrs	r3, r2
 800441e:	604b      	str	r3, [r1, #4]
 8004420:	e025      	b.n	800446e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004422:	4b66      	ldr	r3, [pc, #408]	; (80045bc <HAL_RCC_OscConfig+0x270>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a65      	ldr	r2, [pc, #404]	; (80045bc <HAL_RCC_OscConfig+0x270>)
 8004428:	f043 0308 	orr.w	r3, r3, #8
 800442c:	6013      	str	r3, [r2, #0]
 800442e:	4b63      	ldr	r3, [pc, #396]	; (80045bc <HAL_RCC_OscConfig+0x270>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a1b      	ldr	r3, [r3, #32]
 800443a:	4960      	ldr	r1, [pc, #384]	; (80045bc <HAL_RCC_OscConfig+0x270>)
 800443c:	4313      	orrs	r3, r2
 800443e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004440:	4b5e      	ldr	r3, [pc, #376]	; (80045bc <HAL_RCC_OscConfig+0x270>)
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	69db      	ldr	r3, [r3, #28]
 800444c:	021b      	lsls	r3, r3, #8
 800444e:	495b      	ldr	r1, [pc, #364]	; (80045bc <HAL_RCC_OscConfig+0x270>)
 8004450:	4313      	orrs	r3, r2
 8004452:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d109      	bne.n	800446e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a1b      	ldr	r3, [r3, #32]
 800445e:	4618      	mov	r0, r3
 8004460:	f000 fd4c 	bl	8004efc <RCC_SetFlashLatencyFromMSIRange>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d001      	beq.n	800446e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e37a      	b.n	8004b64 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800446e:	f000 fc81 	bl	8004d74 <HAL_RCC_GetSysClockFreq>
 8004472:	4602      	mov	r2, r0
 8004474:	4b51      	ldr	r3, [pc, #324]	; (80045bc <HAL_RCC_OscConfig+0x270>)
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	091b      	lsrs	r3, r3, #4
 800447a:	f003 030f 	and.w	r3, r3, #15
 800447e:	4950      	ldr	r1, [pc, #320]	; (80045c0 <HAL_RCC_OscConfig+0x274>)
 8004480:	5ccb      	ldrb	r3, [r1, r3]
 8004482:	f003 031f 	and.w	r3, r3, #31
 8004486:	fa22 f303 	lsr.w	r3, r2, r3
 800448a:	4a4e      	ldr	r2, [pc, #312]	; (80045c4 <HAL_RCC_OscConfig+0x278>)
 800448c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800448e:	4b4e      	ldr	r3, [pc, #312]	; (80045c8 <HAL_RCC_OscConfig+0x27c>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4618      	mov	r0, r3
 8004494:	f7ff f868 	bl	8003568 <HAL_InitTick>
 8004498:	4603      	mov	r3, r0
 800449a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800449c:	7bfb      	ldrb	r3, [r7, #15]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d052      	beq.n	8004548 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80044a2:	7bfb      	ldrb	r3, [r7, #15]
 80044a4:	e35e      	b.n	8004b64 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	699b      	ldr	r3, [r3, #24]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d032      	beq.n	8004514 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80044ae:	4b43      	ldr	r3, [pc, #268]	; (80045bc <HAL_RCC_OscConfig+0x270>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a42      	ldr	r2, [pc, #264]	; (80045bc <HAL_RCC_OscConfig+0x270>)
 80044b4:	f043 0301 	orr.w	r3, r3, #1
 80044b8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80044ba:	f7ff f8a5 	bl	8003608 <HAL_GetTick>
 80044be:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044c0:	e008      	b.n	80044d4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044c2:	f7ff f8a1 	bl	8003608 <HAL_GetTick>
 80044c6:	4602      	mov	r2, r0
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d901      	bls.n	80044d4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e347      	b.n	8004b64 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044d4:	4b39      	ldr	r3, [pc, #228]	; (80045bc <HAL_RCC_OscConfig+0x270>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0302 	and.w	r3, r3, #2
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d0f0      	beq.n	80044c2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044e0:	4b36      	ldr	r3, [pc, #216]	; (80045bc <HAL_RCC_OscConfig+0x270>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a35      	ldr	r2, [pc, #212]	; (80045bc <HAL_RCC_OscConfig+0x270>)
 80044e6:	f043 0308 	orr.w	r3, r3, #8
 80044ea:	6013      	str	r3, [r2, #0]
 80044ec:	4b33      	ldr	r3, [pc, #204]	; (80045bc <HAL_RCC_OscConfig+0x270>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6a1b      	ldr	r3, [r3, #32]
 80044f8:	4930      	ldr	r1, [pc, #192]	; (80045bc <HAL_RCC_OscConfig+0x270>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044fe:	4b2f      	ldr	r3, [pc, #188]	; (80045bc <HAL_RCC_OscConfig+0x270>)
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	69db      	ldr	r3, [r3, #28]
 800450a:	021b      	lsls	r3, r3, #8
 800450c:	492b      	ldr	r1, [pc, #172]	; (80045bc <HAL_RCC_OscConfig+0x270>)
 800450e:	4313      	orrs	r3, r2
 8004510:	604b      	str	r3, [r1, #4]
 8004512:	e01a      	b.n	800454a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004514:	4b29      	ldr	r3, [pc, #164]	; (80045bc <HAL_RCC_OscConfig+0x270>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a28      	ldr	r2, [pc, #160]	; (80045bc <HAL_RCC_OscConfig+0x270>)
 800451a:	f023 0301 	bic.w	r3, r3, #1
 800451e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004520:	f7ff f872 	bl	8003608 <HAL_GetTick>
 8004524:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004526:	e008      	b.n	800453a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004528:	f7ff f86e 	bl	8003608 <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	2b02      	cmp	r3, #2
 8004534:	d901      	bls.n	800453a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e314      	b.n	8004b64 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800453a:	4b20      	ldr	r3, [pc, #128]	; (80045bc <HAL_RCC_OscConfig+0x270>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0302 	and.w	r3, r3, #2
 8004542:	2b00      	cmp	r3, #0
 8004544:	d1f0      	bne.n	8004528 <HAL_RCC_OscConfig+0x1dc>
 8004546:	e000      	b.n	800454a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004548:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0301 	and.w	r3, r3, #1
 8004552:	2b00      	cmp	r3, #0
 8004554:	d073      	beq.n	800463e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	2b08      	cmp	r3, #8
 800455a:	d005      	beq.n	8004568 <HAL_RCC_OscConfig+0x21c>
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	2b0c      	cmp	r3, #12
 8004560:	d10e      	bne.n	8004580 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	2b03      	cmp	r3, #3
 8004566:	d10b      	bne.n	8004580 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004568:	4b14      	ldr	r3, [pc, #80]	; (80045bc <HAL_RCC_OscConfig+0x270>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d063      	beq.n	800463c <HAL_RCC_OscConfig+0x2f0>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d15f      	bne.n	800463c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e2f1      	b.n	8004b64 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004588:	d106      	bne.n	8004598 <HAL_RCC_OscConfig+0x24c>
 800458a:	4b0c      	ldr	r3, [pc, #48]	; (80045bc <HAL_RCC_OscConfig+0x270>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a0b      	ldr	r2, [pc, #44]	; (80045bc <HAL_RCC_OscConfig+0x270>)
 8004590:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004594:	6013      	str	r3, [r2, #0]
 8004596:	e025      	b.n	80045e4 <HAL_RCC_OscConfig+0x298>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045a0:	d114      	bne.n	80045cc <HAL_RCC_OscConfig+0x280>
 80045a2:	4b06      	ldr	r3, [pc, #24]	; (80045bc <HAL_RCC_OscConfig+0x270>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a05      	ldr	r2, [pc, #20]	; (80045bc <HAL_RCC_OscConfig+0x270>)
 80045a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045ac:	6013      	str	r3, [r2, #0]
 80045ae:	4b03      	ldr	r3, [pc, #12]	; (80045bc <HAL_RCC_OscConfig+0x270>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a02      	ldr	r2, [pc, #8]	; (80045bc <HAL_RCC_OscConfig+0x270>)
 80045b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045b8:	6013      	str	r3, [r2, #0]
 80045ba:	e013      	b.n	80045e4 <HAL_RCC_OscConfig+0x298>
 80045bc:	40021000 	.word	0x40021000
 80045c0:	0800999c 	.word	0x0800999c
 80045c4:	200000a0 	.word	0x200000a0
 80045c8:	20000010 	.word	0x20000010
 80045cc:	4ba0      	ldr	r3, [pc, #640]	; (8004850 <HAL_RCC_OscConfig+0x504>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a9f      	ldr	r2, [pc, #636]	; (8004850 <HAL_RCC_OscConfig+0x504>)
 80045d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045d6:	6013      	str	r3, [r2, #0]
 80045d8:	4b9d      	ldr	r3, [pc, #628]	; (8004850 <HAL_RCC_OscConfig+0x504>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a9c      	ldr	r2, [pc, #624]	; (8004850 <HAL_RCC_OscConfig+0x504>)
 80045de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d013      	beq.n	8004614 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ec:	f7ff f80c 	bl	8003608 <HAL_GetTick>
 80045f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045f2:	e008      	b.n	8004606 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045f4:	f7ff f808 	bl	8003608 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	2b64      	cmp	r3, #100	; 0x64
 8004600:	d901      	bls.n	8004606 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e2ae      	b.n	8004b64 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004606:	4b92      	ldr	r3, [pc, #584]	; (8004850 <HAL_RCC_OscConfig+0x504>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d0f0      	beq.n	80045f4 <HAL_RCC_OscConfig+0x2a8>
 8004612:	e014      	b.n	800463e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004614:	f7fe fff8 	bl	8003608 <HAL_GetTick>
 8004618:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800461a:	e008      	b.n	800462e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800461c:	f7fe fff4 	bl	8003608 <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	2b64      	cmp	r3, #100	; 0x64
 8004628:	d901      	bls.n	800462e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e29a      	b.n	8004b64 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800462e:	4b88      	ldr	r3, [pc, #544]	; (8004850 <HAL_RCC_OscConfig+0x504>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d1f0      	bne.n	800461c <HAL_RCC_OscConfig+0x2d0>
 800463a:	e000      	b.n	800463e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800463c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b00      	cmp	r3, #0
 8004648:	d060      	beq.n	800470c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800464a:	69bb      	ldr	r3, [r7, #24]
 800464c:	2b04      	cmp	r3, #4
 800464e:	d005      	beq.n	800465c <HAL_RCC_OscConfig+0x310>
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	2b0c      	cmp	r3, #12
 8004654:	d119      	bne.n	800468a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	2b02      	cmp	r3, #2
 800465a:	d116      	bne.n	800468a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800465c:	4b7c      	ldr	r3, [pc, #496]	; (8004850 <HAL_RCC_OscConfig+0x504>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004664:	2b00      	cmp	r3, #0
 8004666:	d005      	beq.n	8004674 <HAL_RCC_OscConfig+0x328>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d101      	bne.n	8004674 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e277      	b.n	8004b64 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004674:	4b76      	ldr	r3, [pc, #472]	; (8004850 <HAL_RCC_OscConfig+0x504>)
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	691b      	ldr	r3, [r3, #16]
 8004680:	061b      	lsls	r3, r3, #24
 8004682:	4973      	ldr	r1, [pc, #460]	; (8004850 <HAL_RCC_OscConfig+0x504>)
 8004684:	4313      	orrs	r3, r2
 8004686:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004688:	e040      	b.n	800470c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d023      	beq.n	80046da <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004692:	4b6f      	ldr	r3, [pc, #444]	; (8004850 <HAL_RCC_OscConfig+0x504>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a6e      	ldr	r2, [pc, #440]	; (8004850 <HAL_RCC_OscConfig+0x504>)
 8004698:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800469c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800469e:	f7fe ffb3 	bl	8003608 <HAL_GetTick>
 80046a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046a4:	e008      	b.n	80046b8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046a6:	f7fe ffaf 	bl	8003608 <HAL_GetTick>
 80046aa:	4602      	mov	r2, r0
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	d901      	bls.n	80046b8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	e255      	b.n	8004b64 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046b8:	4b65      	ldr	r3, [pc, #404]	; (8004850 <HAL_RCC_OscConfig+0x504>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d0f0      	beq.n	80046a6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046c4:	4b62      	ldr	r3, [pc, #392]	; (8004850 <HAL_RCC_OscConfig+0x504>)
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	691b      	ldr	r3, [r3, #16]
 80046d0:	061b      	lsls	r3, r3, #24
 80046d2:	495f      	ldr	r1, [pc, #380]	; (8004850 <HAL_RCC_OscConfig+0x504>)
 80046d4:	4313      	orrs	r3, r2
 80046d6:	604b      	str	r3, [r1, #4]
 80046d8:	e018      	b.n	800470c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046da:	4b5d      	ldr	r3, [pc, #372]	; (8004850 <HAL_RCC_OscConfig+0x504>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a5c      	ldr	r2, [pc, #368]	; (8004850 <HAL_RCC_OscConfig+0x504>)
 80046e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e6:	f7fe ff8f 	bl	8003608 <HAL_GetTick>
 80046ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046ec:	e008      	b.n	8004700 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046ee:	f7fe ff8b 	bl	8003608 <HAL_GetTick>
 80046f2:	4602      	mov	r2, r0
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	1ad3      	subs	r3, r2, r3
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d901      	bls.n	8004700 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80046fc:	2303      	movs	r3, #3
 80046fe:	e231      	b.n	8004b64 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004700:	4b53      	ldr	r3, [pc, #332]	; (8004850 <HAL_RCC_OscConfig+0x504>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004708:	2b00      	cmp	r3, #0
 800470a:	d1f0      	bne.n	80046ee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0308 	and.w	r3, r3, #8
 8004714:	2b00      	cmp	r3, #0
 8004716:	d03c      	beq.n	8004792 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	695b      	ldr	r3, [r3, #20]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d01c      	beq.n	800475a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004720:	4b4b      	ldr	r3, [pc, #300]	; (8004850 <HAL_RCC_OscConfig+0x504>)
 8004722:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004726:	4a4a      	ldr	r2, [pc, #296]	; (8004850 <HAL_RCC_OscConfig+0x504>)
 8004728:	f043 0301 	orr.w	r3, r3, #1
 800472c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004730:	f7fe ff6a 	bl	8003608 <HAL_GetTick>
 8004734:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004736:	e008      	b.n	800474a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004738:	f7fe ff66 	bl	8003608 <HAL_GetTick>
 800473c:	4602      	mov	r2, r0
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	2b02      	cmp	r3, #2
 8004744:	d901      	bls.n	800474a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e20c      	b.n	8004b64 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800474a:	4b41      	ldr	r3, [pc, #260]	; (8004850 <HAL_RCC_OscConfig+0x504>)
 800474c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004750:	f003 0302 	and.w	r3, r3, #2
 8004754:	2b00      	cmp	r3, #0
 8004756:	d0ef      	beq.n	8004738 <HAL_RCC_OscConfig+0x3ec>
 8004758:	e01b      	b.n	8004792 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800475a:	4b3d      	ldr	r3, [pc, #244]	; (8004850 <HAL_RCC_OscConfig+0x504>)
 800475c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004760:	4a3b      	ldr	r2, [pc, #236]	; (8004850 <HAL_RCC_OscConfig+0x504>)
 8004762:	f023 0301 	bic.w	r3, r3, #1
 8004766:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800476a:	f7fe ff4d 	bl	8003608 <HAL_GetTick>
 800476e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004770:	e008      	b.n	8004784 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004772:	f7fe ff49 	bl	8003608 <HAL_GetTick>
 8004776:	4602      	mov	r2, r0
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	1ad3      	subs	r3, r2, r3
 800477c:	2b02      	cmp	r3, #2
 800477e:	d901      	bls.n	8004784 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004780:	2303      	movs	r3, #3
 8004782:	e1ef      	b.n	8004b64 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004784:	4b32      	ldr	r3, [pc, #200]	; (8004850 <HAL_RCC_OscConfig+0x504>)
 8004786:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800478a:	f003 0302 	and.w	r3, r3, #2
 800478e:	2b00      	cmp	r3, #0
 8004790:	d1ef      	bne.n	8004772 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 0304 	and.w	r3, r3, #4
 800479a:	2b00      	cmp	r3, #0
 800479c:	f000 80a6 	beq.w	80048ec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047a0:	2300      	movs	r3, #0
 80047a2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80047a4:	4b2a      	ldr	r3, [pc, #168]	; (8004850 <HAL_RCC_OscConfig+0x504>)
 80047a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d10d      	bne.n	80047cc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047b0:	4b27      	ldr	r3, [pc, #156]	; (8004850 <HAL_RCC_OscConfig+0x504>)
 80047b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047b4:	4a26      	ldr	r2, [pc, #152]	; (8004850 <HAL_RCC_OscConfig+0x504>)
 80047b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047ba:	6593      	str	r3, [r2, #88]	; 0x58
 80047bc:	4b24      	ldr	r3, [pc, #144]	; (8004850 <HAL_RCC_OscConfig+0x504>)
 80047be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047c4:	60bb      	str	r3, [r7, #8]
 80047c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047c8:	2301      	movs	r3, #1
 80047ca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047cc:	4b21      	ldr	r3, [pc, #132]	; (8004854 <HAL_RCC_OscConfig+0x508>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d118      	bne.n	800480a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047d8:	4b1e      	ldr	r3, [pc, #120]	; (8004854 <HAL_RCC_OscConfig+0x508>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a1d      	ldr	r2, [pc, #116]	; (8004854 <HAL_RCC_OscConfig+0x508>)
 80047de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047e4:	f7fe ff10 	bl	8003608 <HAL_GetTick>
 80047e8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047ea:	e008      	b.n	80047fe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047ec:	f7fe ff0c 	bl	8003608 <HAL_GetTick>
 80047f0:	4602      	mov	r2, r0
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	2b02      	cmp	r3, #2
 80047f8:	d901      	bls.n	80047fe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e1b2      	b.n	8004b64 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047fe:	4b15      	ldr	r3, [pc, #84]	; (8004854 <HAL_RCC_OscConfig+0x508>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004806:	2b00      	cmp	r3, #0
 8004808:	d0f0      	beq.n	80047ec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	2b01      	cmp	r3, #1
 8004810:	d108      	bne.n	8004824 <HAL_RCC_OscConfig+0x4d8>
 8004812:	4b0f      	ldr	r3, [pc, #60]	; (8004850 <HAL_RCC_OscConfig+0x504>)
 8004814:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004818:	4a0d      	ldr	r2, [pc, #52]	; (8004850 <HAL_RCC_OscConfig+0x504>)
 800481a:	f043 0301 	orr.w	r3, r3, #1
 800481e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004822:	e029      	b.n	8004878 <HAL_RCC_OscConfig+0x52c>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	2b05      	cmp	r3, #5
 800482a:	d115      	bne.n	8004858 <HAL_RCC_OscConfig+0x50c>
 800482c:	4b08      	ldr	r3, [pc, #32]	; (8004850 <HAL_RCC_OscConfig+0x504>)
 800482e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004832:	4a07      	ldr	r2, [pc, #28]	; (8004850 <HAL_RCC_OscConfig+0x504>)
 8004834:	f043 0304 	orr.w	r3, r3, #4
 8004838:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800483c:	4b04      	ldr	r3, [pc, #16]	; (8004850 <HAL_RCC_OscConfig+0x504>)
 800483e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004842:	4a03      	ldr	r2, [pc, #12]	; (8004850 <HAL_RCC_OscConfig+0x504>)
 8004844:	f043 0301 	orr.w	r3, r3, #1
 8004848:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800484c:	e014      	b.n	8004878 <HAL_RCC_OscConfig+0x52c>
 800484e:	bf00      	nop
 8004850:	40021000 	.word	0x40021000
 8004854:	40007000 	.word	0x40007000
 8004858:	4b9a      	ldr	r3, [pc, #616]	; (8004ac4 <HAL_RCC_OscConfig+0x778>)
 800485a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800485e:	4a99      	ldr	r2, [pc, #612]	; (8004ac4 <HAL_RCC_OscConfig+0x778>)
 8004860:	f023 0301 	bic.w	r3, r3, #1
 8004864:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004868:	4b96      	ldr	r3, [pc, #600]	; (8004ac4 <HAL_RCC_OscConfig+0x778>)
 800486a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800486e:	4a95      	ldr	r2, [pc, #596]	; (8004ac4 <HAL_RCC_OscConfig+0x778>)
 8004870:	f023 0304 	bic.w	r3, r3, #4
 8004874:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d016      	beq.n	80048ae <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004880:	f7fe fec2 	bl	8003608 <HAL_GetTick>
 8004884:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004886:	e00a      	b.n	800489e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004888:	f7fe febe 	bl	8003608 <HAL_GetTick>
 800488c:	4602      	mov	r2, r0
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	f241 3288 	movw	r2, #5000	; 0x1388
 8004896:	4293      	cmp	r3, r2
 8004898:	d901      	bls.n	800489e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800489a:	2303      	movs	r3, #3
 800489c:	e162      	b.n	8004b64 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800489e:	4b89      	ldr	r3, [pc, #548]	; (8004ac4 <HAL_RCC_OscConfig+0x778>)
 80048a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048a4:	f003 0302 	and.w	r3, r3, #2
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d0ed      	beq.n	8004888 <HAL_RCC_OscConfig+0x53c>
 80048ac:	e015      	b.n	80048da <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048ae:	f7fe feab 	bl	8003608 <HAL_GetTick>
 80048b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048b4:	e00a      	b.n	80048cc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048b6:	f7fe fea7 	bl	8003608 <HAL_GetTick>
 80048ba:	4602      	mov	r2, r0
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d901      	bls.n	80048cc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e14b      	b.n	8004b64 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048cc:	4b7d      	ldr	r3, [pc, #500]	; (8004ac4 <HAL_RCC_OscConfig+0x778>)
 80048ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048d2:	f003 0302 	and.w	r3, r3, #2
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1ed      	bne.n	80048b6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048da:	7ffb      	ldrb	r3, [r7, #31]
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d105      	bne.n	80048ec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048e0:	4b78      	ldr	r3, [pc, #480]	; (8004ac4 <HAL_RCC_OscConfig+0x778>)
 80048e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048e4:	4a77      	ldr	r2, [pc, #476]	; (8004ac4 <HAL_RCC_OscConfig+0x778>)
 80048e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048ea:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0320 	and.w	r3, r3, #32
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d03c      	beq.n	8004972 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d01c      	beq.n	800493a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004900:	4b70      	ldr	r3, [pc, #448]	; (8004ac4 <HAL_RCC_OscConfig+0x778>)
 8004902:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004906:	4a6f      	ldr	r2, [pc, #444]	; (8004ac4 <HAL_RCC_OscConfig+0x778>)
 8004908:	f043 0301 	orr.w	r3, r3, #1
 800490c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004910:	f7fe fe7a 	bl	8003608 <HAL_GetTick>
 8004914:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004916:	e008      	b.n	800492a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004918:	f7fe fe76 	bl	8003608 <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	2b02      	cmp	r3, #2
 8004924:	d901      	bls.n	800492a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e11c      	b.n	8004b64 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800492a:	4b66      	ldr	r3, [pc, #408]	; (8004ac4 <HAL_RCC_OscConfig+0x778>)
 800492c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004930:	f003 0302 	and.w	r3, r3, #2
 8004934:	2b00      	cmp	r3, #0
 8004936:	d0ef      	beq.n	8004918 <HAL_RCC_OscConfig+0x5cc>
 8004938:	e01b      	b.n	8004972 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800493a:	4b62      	ldr	r3, [pc, #392]	; (8004ac4 <HAL_RCC_OscConfig+0x778>)
 800493c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004940:	4a60      	ldr	r2, [pc, #384]	; (8004ac4 <HAL_RCC_OscConfig+0x778>)
 8004942:	f023 0301 	bic.w	r3, r3, #1
 8004946:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800494a:	f7fe fe5d 	bl	8003608 <HAL_GetTick>
 800494e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004950:	e008      	b.n	8004964 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004952:	f7fe fe59 	bl	8003608 <HAL_GetTick>
 8004956:	4602      	mov	r2, r0
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	2b02      	cmp	r3, #2
 800495e:	d901      	bls.n	8004964 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004960:	2303      	movs	r3, #3
 8004962:	e0ff      	b.n	8004b64 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004964:	4b57      	ldr	r3, [pc, #348]	; (8004ac4 <HAL_RCC_OscConfig+0x778>)
 8004966:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800496a:	f003 0302 	and.w	r3, r3, #2
 800496e:	2b00      	cmp	r3, #0
 8004970:	d1ef      	bne.n	8004952 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004976:	2b00      	cmp	r3, #0
 8004978:	f000 80f3 	beq.w	8004b62 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004980:	2b02      	cmp	r3, #2
 8004982:	f040 80c9 	bne.w	8004b18 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004986:	4b4f      	ldr	r3, [pc, #316]	; (8004ac4 <HAL_RCC_OscConfig+0x778>)
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	f003 0203 	and.w	r2, r3, #3
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004996:	429a      	cmp	r2, r3
 8004998:	d12c      	bne.n	80049f4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a4:	3b01      	subs	r3, #1
 80049a6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d123      	bne.n	80049f4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049b6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d11b      	bne.n	80049f4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d113      	bne.n	80049f4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049d6:	085b      	lsrs	r3, r3, #1
 80049d8:	3b01      	subs	r3, #1
 80049da:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80049dc:	429a      	cmp	r2, r3
 80049de:	d109      	bne.n	80049f4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ea:	085b      	lsrs	r3, r3, #1
 80049ec:	3b01      	subs	r3, #1
 80049ee:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d06b      	beq.n	8004acc <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80049f4:	69bb      	ldr	r3, [r7, #24]
 80049f6:	2b0c      	cmp	r3, #12
 80049f8:	d062      	beq.n	8004ac0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80049fa:	4b32      	ldr	r3, [pc, #200]	; (8004ac4 <HAL_RCC_OscConfig+0x778>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d001      	beq.n	8004a0a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e0ac      	b.n	8004b64 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004a0a:	4b2e      	ldr	r3, [pc, #184]	; (8004ac4 <HAL_RCC_OscConfig+0x778>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a2d      	ldr	r2, [pc, #180]	; (8004ac4 <HAL_RCC_OscConfig+0x778>)
 8004a10:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a14:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a16:	f7fe fdf7 	bl	8003608 <HAL_GetTick>
 8004a1a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a1c:	e008      	b.n	8004a30 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a1e:	f7fe fdf3 	bl	8003608 <HAL_GetTick>
 8004a22:	4602      	mov	r2, r0
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	d901      	bls.n	8004a30 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	e099      	b.n	8004b64 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a30:	4b24      	ldr	r3, [pc, #144]	; (8004ac4 <HAL_RCC_OscConfig+0x778>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d1f0      	bne.n	8004a1e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a3c:	4b21      	ldr	r3, [pc, #132]	; (8004ac4 <HAL_RCC_OscConfig+0x778>)
 8004a3e:	68da      	ldr	r2, [r3, #12]
 8004a40:	4b21      	ldr	r3, [pc, #132]	; (8004ac8 <HAL_RCC_OscConfig+0x77c>)
 8004a42:	4013      	ands	r3, r2
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004a4c:	3a01      	subs	r2, #1
 8004a4e:	0112      	lsls	r2, r2, #4
 8004a50:	4311      	orrs	r1, r2
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004a56:	0212      	lsls	r2, r2, #8
 8004a58:	4311      	orrs	r1, r2
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004a5e:	0852      	lsrs	r2, r2, #1
 8004a60:	3a01      	subs	r2, #1
 8004a62:	0552      	lsls	r2, r2, #21
 8004a64:	4311      	orrs	r1, r2
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004a6a:	0852      	lsrs	r2, r2, #1
 8004a6c:	3a01      	subs	r2, #1
 8004a6e:	0652      	lsls	r2, r2, #25
 8004a70:	4311      	orrs	r1, r2
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a76:	06d2      	lsls	r2, r2, #27
 8004a78:	430a      	orrs	r2, r1
 8004a7a:	4912      	ldr	r1, [pc, #72]	; (8004ac4 <HAL_RCC_OscConfig+0x778>)
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004a80:	4b10      	ldr	r3, [pc, #64]	; (8004ac4 <HAL_RCC_OscConfig+0x778>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a0f      	ldr	r2, [pc, #60]	; (8004ac4 <HAL_RCC_OscConfig+0x778>)
 8004a86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a8a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a8c:	4b0d      	ldr	r3, [pc, #52]	; (8004ac4 <HAL_RCC_OscConfig+0x778>)
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	4a0c      	ldr	r2, [pc, #48]	; (8004ac4 <HAL_RCC_OscConfig+0x778>)
 8004a92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a96:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a98:	f7fe fdb6 	bl	8003608 <HAL_GetTick>
 8004a9c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a9e:	e008      	b.n	8004ab2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aa0:	f7fe fdb2 	bl	8003608 <HAL_GetTick>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	2b02      	cmp	r3, #2
 8004aac:	d901      	bls.n	8004ab2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e058      	b.n	8004b64 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ab2:	4b04      	ldr	r3, [pc, #16]	; (8004ac4 <HAL_RCC_OscConfig+0x778>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d0f0      	beq.n	8004aa0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004abe:	e050      	b.n	8004b62 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e04f      	b.n	8004b64 <HAL_RCC_OscConfig+0x818>
 8004ac4:	40021000 	.word	0x40021000
 8004ac8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004acc:	4b27      	ldr	r3, [pc, #156]	; (8004b6c <HAL_RCC_OscConfig+0x820>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d144      	bne.n	8004b62 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004ad8:	4b24      	ldr	r3, [pc, #144]	; (8004b6c <HAL_RCC_OscConfig+0x820>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a23      	ldr	r2, [pc, #140]	; (8004b6c <HAL_RCC_OscConfig+0x820>)
 8004ade:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ae2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ae4:	4b21      	ldr	r3, [pc, #132]	; (8004b6c <HAL_RCC_OscConfig+0x820>)
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	4a20      	ldr	r2, [pc, #128]	; (8004b6c <HAL_RCC_OscConfig+0x820>)
 8004aea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004aee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004af0:	f7fe fd8a 	bl	8003608 <HAL_GetTick>
 8004af4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004af6:	e008      	b.n	8004b0a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004af8:	f7fe fd86 	bl	8003608 <HAL_GetTick>
 8004afc:	4602      	mov	r2, r0
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	2b02      	cmp	r3, #2
 8004b04:	d901      	bls.n	8004b0a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	e02c      	b.n	8004b64 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b0a:	4b18      	ldr	r3, [pc, #96]	; (8004b6c <HAL_RCC_OscConfig+0x820>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d0f0      	beq.n	8004af8 <HAL_RCC_OscConfig+0x7ac>
 8004b16:	e024      	b.n	8004b62 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	2b0c      	cmp	r3, #12
 8004b1c:	d01f      	beq.n	8004b5e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b1e:	4b13      	ldr	r3, [pc, #76]	; (8004b6c <HAL_RCC_OscConfig+0x820>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a12      	ldr	r2, [pc, #72]	; (8004b6c <HAL_RCC_OscConfig+0x820>)
 8004b24:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b2a:	f7fe fd6d 	bl	8003608 <HAL_GetTick>
 8004b2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b30:	e008      	b.n	8004b44 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b32:	f7fe fd69 	bl	8003608 <HAL_GetTick>
 8004b36:	4602      	mov	r2, r0
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	d901      	bls.n	8004b44 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	e00f      	b.n	8004b64 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b44:	4b09      	ldr	r3, [pc, #36]	; (8004b6c <HAL_RCC_OscConfig+0x820>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d1f0      	bne.n	8004b32 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004b50:	4b06      	ldr	r3, [pc, #24]	; (8004b6c <HAL_RCC_OscConfig+0x820>)
 8004b52:	68da      	ldr	r2, [r3, #12]
 8004b54:	4905      	ldr	r1, [pc, #20]	; (8004b6c <HAL_RCC_OscConfig+0x820>)
 8004b56:	4b06      	ldr	r3, [pc, #24]	; (8004b70 <HAL_RCC_OscConfig+0x824>)
 8004b58:	4013      	ands	r3, r2
 8004b5a:	60cb      	str	r3, [r1, #12]
 8004b5c:	e001      	b.n	8004b62 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e000      	b.n	8004b64 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8004b62:	2300      	movs	r3, #0
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3720      	adds	r7, #32
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	40021000 	.word	0x40021000
 8004b70:	feeefffc 	.word	0xfeeefffc

08004b74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d101      	bne.n	8004b88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e0e7      	b.n	8004d58 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b88:	4b75      	ldr	r3, [pc, #468]	; (8004d60 <HAL_RCC_ClockConfig+0x1ec>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 0307 	and.w	r3, r3, #7
 8004b90:	683a      	ldr	r2, [r7, #0]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d910      	bls.n	8004bb8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b96:	4b72      	ldr	r3, [pc, #456]	; (8004d60 <HAL_RCC_ClockConfig+0x1ec>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f023 0207 	bic.w	r2, r3, #7
 8004b9e:	4970      	ldr	r1, [pc, #448]	; (8004d60 <HAL_RCC_ClockConfig+0x1ec>)
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ba6:	4b6e      	ldr	r3, [pc, #440]	; (8004d60 <HAL_RCC_ClockConfig+0x1ec>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0307 	and.w	r3, r3, #7
 8004bae:	683a      	ldr	r2, [r7, #0]
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d001      	beq.n	8004bb8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e0cf      	b.n	8004d58 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 0302 	and.w	r3, r3, #2
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d010      	beq.n	8004be6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	689a      	ldr	r2, [r3, #8]
 8004bc8:	4b66      	ldr	r3, [pc, #408]	; (8004d64 <HAL_RCC_ClockConfig+0x1f0>)
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d908      	bls.n	8004be6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bd4:	4b63      	ldr	r3, [pc, #396]	; (8004d64 <HAL_RCC_ClockConfig+0x1f0>)
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	4960      	ldr	r1, [pc, #384]	; (8004d64 <HAL_RCC_ClockConfig+0x1f0>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0301 	and.w	r3, r3, #1
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d04c      	beq.n	8004c8c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	2b03      	cmp	r3, #3
 8004bf8:	d107      	bne.n	8004c0a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bfa:	4b5a      	ldr	r3, [pc, #360]	; (8004d64 <HAL_RCC_ClockConfig+0x1f0>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d121      	bne.n	8004c4a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e0a6      	b.n	8004d58 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	d107      	bne.n	8004c22 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c12:	4b54      	ldr	r3, [pc, #336]	; (8004d64 <HAL_RCC_ClockConfig+0x1f0>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d115      	bne.n	8004c4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e09a      	b.n	8004d58 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d107      	bne.n	8004c3a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c2a:	4b4e      	ldr	r3, [pc, #312]	; (8004d64 <HAL_RCC_ClockConfig+0x1f0>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0302 	and.w	r3, r3, #2
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d109      	bne.n	8004c4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e08e      	b.n	8004d58 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c3a:	4b4a      	ldr	r3, [pc, #296]	; (8004d64 <HAL_RCC_ClockConfig+0x1f0>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d101      	bne.n	8004c4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e086      	b.n	8004d58 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c4a:	4b46      	ldr	r3, [pc, #280]	; (8004d64 <HAL_RCC_ClockConfig+0x1f0>)
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	f023 0203 	bic.w	r2, r3, #3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	4943      	ldr	r1, [pc, #268]	; (8004d64 <HAL_RCC_ClockConfig+0x1f0>)
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c5c:	f7fe fcd4 	bl	8003608 <HAL_GetTick>
 8004c60:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c62:	e00a      	b.n	8004c7a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c64:	f7fe fcd0 	bl	8003608 <HAL_GetTick>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d901      	bls.n	8004c7a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	e06e      	b.n	8004d58 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c7a:	4b3a      	ldr	r3, [pc, #232]	; (8004d64 <HAL_RCC_ClockConfig+0x1f0>)
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	f003 020c 	and.w	r2, r3, #12
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d1eb      	bne.n	8004c64 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 0302 	and.w	r3, r3, #2
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d010      	beq.n	8004cba <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	689a      	ldr	r2, [r3, #8]
 8004c9c:	4b31      	ldr	r3, [pc, #196]	; (8004d64 <HAL_RCC_ClockConfig+0x1f0>)
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d208      	bcs.n	8004cba <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ca8:	4b2e      	ldr	r3, [pc, #184]	; (8004d64 <HAL_RCC_ClockConfig+0x1f0>)
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	492b      	ldr	r1, [pc, #172]	; (8004d64 <HAL_RCC_ClockConfig+0x1f0>)
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004cba:	4b29      	ldr	r3, [pc, #164]	; (8004d60 <HAL_RCC_ClockConfig+0x1ec>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 0307 	and.w	r3, r3, #7
 8004cc2:	683a      	ldr	r2, [r7, #0]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d210      	bcs.n	8004cea <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cc8:	4b25      	ldr	r3, [pc, #148]	; (8004d60 <HAL_RCC_ClockConfig+0x1ec>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f023 0207 	bic.w	r2, r3, #7
 8004cd0:	4923      	ldr	r1, [pc, #140]	; (8004d60 <HAL_RCC_ClockConfig+0x1ec>)
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cd8:	4b21      	ldr	r3, [pc, #132]	; (8004d60 <HAL_RCC_ClockConfig+0x1ec>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0307 	and.w	r3, r3, #7
 8004ce0:	683a      	ldr	r2, [r7, #0]
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d001      	beq.n	8004cea <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e036      	b.n	8004d58 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 0304 	and.w	r3, r3, #4
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d008      	beq.n	8004d08 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cf6:	4b1b      	ldr	r3, [pc, #108]	; (8004d64 <HAL_RCC_ClockConfig+0x1f0>)
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	4918      	ldr	r1, [pc, #96]	; (8004d64 <HAL_RCC_ClockConfig+0x1f0>)
 8004d04:	4313      	orrs	r3, r2
 8004d06:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 0308 	and.w	r3, r3, #8
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d009      	beq.n	8004d28 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d14:	4b13      	ldr	r3, [pc, #76]	; (8004d64 <HAL_RCC_ClockConfig+0x1f0>)
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	691b      	ldr	r3, [r3, #16]
 8004d20:	00db      	lsls	r3, r3, #3
 8004d22:	4910      	ldr	r1, [pc, #64]	; (8004d64 <HAL_RCC_ClockConfig+0x1f0>)
 8004d24:	4313      	orrs	r3, r2
 8004d26:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004d28:	f000 f824 	bl	8004d74 <HAL_RCC_GetSysClockFreq>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	4b0d      	ldr	r3, [pc, #52]	; (8004d64 <HAL_RCC_ClockConfig+0x1f0>)
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	091b      	lsrs	r3, r3, #4
 8004d34:	f003 030f 	and.w	r3, r3, #15
 8004d38:	490b      	ldr	r1, [pc, #44]	; (8004d68 <HAL_RCC_ClockConfig+0x1f4>)
 8004d3a:	5ccb      	ldrb	r3, [r1, r3]
 8004d3c:	f003 031f 	and.w	r3, r3, #31
 8004d40:	fa22 f303 	lsr.w	r3, r2, r3
 8004d44:	4a09      	ldr	r2, [pc, #36]	; (8004d6c <HAL_RCC_ClockConfig+0x1f8>)
 8004d46:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004d48:	4b09      	ldr	r3, [pc, #36]	; (8004d70 <HAL_RCC_ClockConfig+0x1fc>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f7fe fc0b 	bl	8003568 <HAL_InitTick>
 8004d52:	4603      	mov	r3, r0
 8004d54:	72fb      	strb	r3, [r7, #11]

  return status;
 8004d56:	7afb      	ldrb	r3, [r7, #11]
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3710      	adds	r7, #16
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	40022000 	.word	0x40022000
 8004d64:	40021000 	.word	0x40021000
 8004d68:	0800999c 	.word	0x0800999c
 8004d6c:	200000a0 	.word	0x200000a0
 8004d70:	20000010 	.word	0x20000010

08004d74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b089      	sub	sp, #36	; 0x24
 8004d78:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	61fb      	str	r3, [r7, #28]
 8004d7e:	2300      	movs	r3, #0
 8004d80:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d82:	4b3e      	ldr	r3, [pc, #248]	; (8004e7c <HAL_RCC_GetSysClockFreq+0x108>)
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	f003 030c 	and.w	r3, r3, #12
 8004d8a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d8c:	4b3b      	ldr	r3, [pc, #236]	; (8004e7c <HAL_RCC_GetSysClockFreq+0x108>)
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	f003 0303 	and.w	r3, r3, #3
 8004d94:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d005      	beq.n	8004da8 <HAL_RCC_GetSysClockFreq+0x34>
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	2b0c      	cmp	r3, #12
 8004da0:	d121      	bne.n	8004de6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d11e      	bne.n	8004de6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004da8:	4b34      	ldr	r3, [pc, #208]	; (8004e7c <HAL_RCC_GetSysClockFreq+0x108>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 0308 	and.w	r3, r3, #8
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d107      	bne.n	8004dc4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004db4:	4b31      	ldr	r3, [pc, #196]	; (8004e7c <HAL_RCC_GetSysClockFreq+0x108>)
 8004db6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dba:	0a1b      	lsrs	r3, r3, #8
 8004dbc:	f003 030f 	and.w	r3, r3, #15
 8004dc0:	61fb      	str	r3, [r7, #28]
 8004dc2:	e005      	b.n	8004dd0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004dc4:	4b2d      	ldr	r3, [pc, #180]	; (8004e7c <HAL_RCC_GetSysClockFreq+0x108>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	091b      	lsrs	r3, r3, #4
 8004dca:	f003 030f 	and.w	r3, r3, #15
 8004dce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004dd0:	4a2b      	ldr	r2, [pc, #172]	; (8004e80 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dd8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d10d      	bne.n	8004dfc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004de4:	e00a      	b.n	8004dfc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	2b04      	cmp	r3, #4
 8004dea:	d102      	bne.n	8004df2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004dec:	4b25      	ldr	r3, [pc, #148]	; (8004e84 <HAL_RCC_GetSysClockFreq+0x110>)
 8004dee:	61bb      	str	r3, [r7, #24]
 8004df0:	e004      	b.n	8004dfc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	2b08      	cmp	r3, #8
 8004df6:	d101      	bne.n	8004dfc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004df8:	4b23      	ldr	r3, [pc, #140]	; (8004e88 <HAL_RCC_GetSysClockFreq+0x114>)
 8004dfa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	2b0c      	cmp	r3, #12
 8004e00:	d134      	bne.n	8004e6c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004e02:	4b1e      	ldr	r3, [pc, #120]	; (8004e7c <HAL_RCC_GetSysClockFreq+0x108>)
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	f003 0303 	and.w	r3, r3, #3
 8004e0a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	d003      	beq.n	8004e1a <HAL_RCC_GetSysClockFreq+0xa6>
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	2b03      	cmp	r3, #3
 8004e16:	d003      	beq.n	8004e20 <HAL_RCC_GetSysClockFreq+0xac>
 8004e18:	e005      	b.n	8004e26 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004e1a:	4b1a      	ldr	r3, [pc, #104]	; (8004e84 <HAL_RCC_GetSysClockFreq+0x110>)
 8004e1c:	617b      	str	r3, [r7, #20]
      break;
 8004e1e:	e005      	b.n	8004e2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004e20:	4b19      	ldr	r3, [pc, #100]	; (8004e88 <HAL_RCC_GetSysClockFreq+0x114>)
 8004e22:	617b      	str	r3, [r7, #20]
      break;
 8004e24:	e002      	b.n	8004e2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	617b      	str	r3, [r7, #20]
      break;
 8004e2a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e2c:	4b13      	ldr	r3, [pc, #76]	; (8004e7c <HAL_RCC_GetSysClockFreq+0x108>)
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	091b      	lsrs	r3, r3, #4
 8004e32:	f003 0307 	and.w	r3, r3, #7
 8004e36:	3301      	adds	r3, #1
 8004e38:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004e3a:	4b10      	ldr	r3, [pc, #64]	; (8004e7c <HAL_RCC_GetSysClockFreq+0x108>)
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	0a1b      	lsrs	r3, r3, #8
 8004e40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e44:	697a      	ldr	r2, [r7, #20]
 8004e46:	fb03 f202 	mul.w	r2, r3, r2
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e50:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e52:	4b0a      	ldr	r3, [pc, #40]	; (8004e7c <HAL_RCC_GetSysClockFreq+0x108>)
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	0e5b      	lsrs	r3, r3, #25
 8004e58:	f003 0303 	and.w	r3, r3, #3
 8004e5c:	3301      	adds	r3, #1
 8004e5e:	005b      	lsls	r3, r3, #1
 8004e60:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004e62:	697a      	ldr	r2, [r7, #20]
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e6a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004e6c:	69bb      	ldr	r3, [r7, #24]
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3724      	adds	r7, #36	; 0x24
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr
 8004e7a:	bf00      	nop
 8004e7c:	40021000 	.word	0x40021000
 8004e80:	080099b4 	.word	0x080099b4
 8004e84:	00f42400 	.word	0x00f42400
 8004e88:	02dc6c00 	.word	0x02dc6c00

08004e8c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e90:	4b03      	ldr	r3, [pc, #12]	; (8004ea0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e92:	681b      	ldr	r3, [r3, #0]
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr
 8004e9e:	bf00      	nop
 8004ea0:	200000a0 	.word	0x200000a0

08004ea4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004ea8:	f7ff fff0 	bl	8004e8c <HAL_RCC_GetHCLKFreq>
 8004eac:	4602      	mov	r2, r0
 8004eae:	4b06      	ldr	r3, [pc, #24]	; (8004ec8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	0a1b      	lsrs	r3, r3, #8
 8004eb4:	f003 0307 	and.w	r3, r3, #7
 8004eb8:	4904      	ldr	r1, [pc, #16]	; (8004ecc <HAL_RCC_GetPCLK1Freq+0x28>)
 8004eba:	5ccb      	ldrb	r3, [r1, r3]
 8004ebc:	f003 031f 	and.w	r3, r3, #31
 8004ec0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	40021000 	.word	0x40021000
 8004ecc:	080099ac 	.word	0x080099ac

08004ed0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004ed4:	f7ff ffda 	bl	8004e8c <HAL_RCC_GetHCLKFreq>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	4b06      	ldr	r3, [pc, #24]	; (8004ef4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	0adb      	lsrs	r3, r3, #11
 8004ee0:	f003 0307 	and.w	r3, r3, #7
 8004ee4:	4904      	ldr	r1, [pc, #16]	; (8004ef8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004ee6:	5ccb      	ldrb	r3, [r1, r3]
 8004ee8:	f003 031f 	and.w	r3, r3, #31
 8004eec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	40021000 	.word	0x40021000
 8004ef8:	080099ac 	.word	0x080099ac

08004efc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b086      	sub	sp, #24
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004f04:	2300      	movs	r3, #0
 8004f06:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004f08:	4b2a      	ldr	r3, [pc, #168]	; (8004fb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d003      	beq.n	8004f1c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004f14:	f7ff f9b6 	bl	8004284 <HAL_PWREx_GetVoltageRange>
 8004f18:	6178      	str	r0, [r7, #20]
 8004f1a:	e014      	b.n	8004f46 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f1c:	4b25      	ldr	r3, [pc, #148]	; (8004fb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f20:	4a24      	ldr	r2, [pc, #144]	; (8004fb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f26:	6593      	str	r3, [r2, #88]	; 0x58
 8004f28:	4b22      	ldr	r3, [pc, #136]	; (8004fb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f30:	60fb      	str	r3, [r7, #12]
 8004f32:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004f34:	f7ff f9a6 	bl	8004284 <HAL_PWREx_GetVoltageRange>
 8004f38:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004f3a:	4b1e      	ldr	r3, [pc, #120]	; (8004fb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f3e:	4a1d      	ldr	r2, [pc, #116]	; (8004fb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f44:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f4c:	d10b      	bne.n	8004f66 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2b80      	cmp	r3, #128	; 0x80
 8004f52:	d919      	bls.n	8004f88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2ba0      	cmp	r3, #160	; 0xa0
 8004f58:	d902      	bls.n	8004f60 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f5a:	2302      	movs	r3, #2
 8004f5c:	613b      	str	r3, [r7, #16]
 8004f5e:	e013      	b.n	8004f88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f60:	2301      	movs	r3, #1
 8004f62:	613b      	str	r3, [r7, #16]
 8004f64:	e010      	b.n	8004f88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2b80      	cmp	r3, #128	; 0x80
 8004f6a:	d902      	bls.n	8004f72 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	613b      	str	r3, [r7, #16]
 8004f70:	e00a      	b.n	8004f88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2b80      	cmp	r3, #128	; 0x80
 8004f76:	d102      	bne.n	8004f7e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f78:	2302      	movs	r3, #2
 8004f7a:	613b      	str	r3, [r7, #16]
 8004f7c:	e004      	b.n	8004f88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2b70      	cmp	r3, #112	; 0x70
 8004f82:	d101      	bne.n	8004f88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f84:	2301      	movs	r3, #1
 8004f86:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004f88:	4b0b      	ldr	r3, [pc, #44]	; (8004fb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f023 0207 	bic.w	r2, r3, #7
 8004f90:	4909      	ldr	r1, [pc, #36]	; (8004fb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004f98:	4b07      	ldr	r3, [pc, #28]	; (8004fb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 0307 	and.w	r3, r3, #7
 8004fa0:	693a      	ldr	r2, [r7, #16]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d001      	beq.n	8004faa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e000      	b.n	8004fac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004faa:	2300      	movs	r3, #0
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3718      	adds	r7, #24
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	40021000 	.word	0x40021000
 8004fb8:	40022000 	.word	0x40022000

08004fbc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b086      	sub	sp, #24
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004fc8:	2300      	movs	r3, #0
 8004fca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d031      	beq.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fdc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004fe0:	d01a      	beq.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004fe2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004fe6:	d814      	bhi.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d009      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004fec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004ff0:	d10f      	bne.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004ff2:	4b5d      	ldr	r3, [pc, #372]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	4a5c      	ldr	r2, [pc, #368]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ffc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ffe:	e00c      	b.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	3304      	adds	r3, #4
 8005004:	2100      	movs	r1, #0
 8005006:	4618      	mov	r0, r3
 8005008:	f000 f9f0 	bl	80053ec <RCCEx_PLLSAI1_Config>
 800500c:	4603      	mov	r3, r0
 800500e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005010:	e003      	b.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	74fb      	strb	r3, [r7, #19]
      break;
 8005016:	e000      	b.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8005018:	bf00      	nop
    }

    if(ret == HAL_OK)
 800501a:	7cfb      	ldrb	r3, [r7, #19]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d10b      	bne.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005020:	4b51      	ldr	r3, [pc, #324]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005026:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800502e:	494e      	ldr	r1, [pc, #312]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005030:	4313      	orrs	r3, r2
 8005032:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005036:	e001      	b.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005038:	7cfb      	ldrb	r3, [r7, #19]
 800503a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005044:	2b00      	cmp	r3, #0
 8005046:	f000 809e 	beq.w	8005186 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800504a:	2300      	movs	r3, #0
 800504c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800504e:	4b46      	ldr	r3, [pc, #280]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005056:	2b00      	cmp	r3, #0
 8005058:	d101      	bne.n	800505e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800505a:	2301      	movs	r3, #1
 800505c:	e000      	b.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800505e:	2300      	movs	r3, #0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d00d      	beq.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005064:	4b40      	ldr	r3, [pc, #256]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005068:	4a3f      	ldr	r2, [pc, #252]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800506a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800506e:	6593      	str	r3, [r2, #88]	; 0x58
 8005070:	4b3d      	ldr	r3, [pc, #244]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005074:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005078:	60bb      	str	r3, [r7, #8]
 800507a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800507c:	2301      	movs	r3, #1
 800507e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005080:	4b3a      	ldr	r3, [pc, #232]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a39      	ldr	r2, [pc, #228]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005086:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800508a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800508c:	f7fe fabc 	bl	8003608 <HAL_GetTick>
 8005090:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005092:	e009      	b.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005094:	f7fe fab8 	bl	8003608 <HAL_GetTick>
 8005098:	4602      	mov	r2, r0
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	2b02      	cmp	r3, #2
 80050a0:	d902      	bls.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80050a2:	2303      	movs	r3, #3
 80050a4:	74fb      	strb	r3, [r7, #19]
        break;
 80050a6:	e005      	b.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80050a8:	4b30      	ldr	r3, [pc, #192]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d0ef      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80050b4:	7cfb      	ldrb	r3, [r7, #19]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d15a      	bne.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80050ba:	4b2b      	ldr	r3, [pc, #172]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80050bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050c4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d01e      	beq.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050d0:	697a      	ldr	r2, [r7, #20]
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d019      	beq.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80050d6:	4b24      	ldr	r3, [pc, #144]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80050d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050e0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80050e2:	4b21      	ldr	r3, [pc, #132]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80050e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050e8:	4a1f      	ldr	r2, [pc, #124]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80050ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80050f2:	4b1d      	ldr	r3, [pc, #116]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80050f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050f8:	4a1b      	ldr	r2, [pc, #108]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80050fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005102:	4a19      	ldr	r2, [pc, #100]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	f003 0301 	and.w	r3, r3, #1
 8005110:	2b00      	cmp	r3, #0
 8005112:	d016      	beq.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005114:	f7fe fa78 	bl	8003608 <HAL_GetTick>
 8005118:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800511a:	e00b      	b.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800511c:	f7fe fa74 	bl	8003608 <HAL_GetTick>
 8005120:	4602      	mov	r2, r0
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	f241 3288 	movw	r2, #5000	; 0x1388
 800512a:	4293      	cmp	r3, r2
 800512c:	d902      	bls.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	74fb      	strb	r3, [r7, #19]
            break;
 8005132:	e006      	b.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005134:	4b0c      	ldr	r3, [pc, #48]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800513a:	f003 0302 	and.w	r3, r3, #2
 800513e:	2b00      	cmp	r3, #0
 8005140:	d0ec      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8005142:	7cfb      	ldrb	r3, [r7, #19]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d10b      	bne.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005148:	4b07      	ldr	r3, [pc, #28]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800514a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800514e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005156:	4904      	ldr	r1, [pc, #16]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005158:	4313      	orrs	r3, r2
 800515a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800515e:	e009      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005160:	7cfb      	ldrb	r3, [r7, #19]
 8005162:	74bb      	strb	r3, [r7, #18]
 8005164:	e006      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8005166:	bf00      	nop
 8005168:	40021000 	.word	0x40021000
 800516c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005170:	7cfb      	ldrb	r3, [r7, #19]
 8005172:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005174:	7c7b      	ldrb	r3, [r7, #17]
 8005176:	2b01      	cmp	r3, #1
 8005178:	d105      	bne.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800517a:	4b9b      	ldr	r3, [pc, #620]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800517c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800517e:	4a9a      	ldr	r2, [pc, #616]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005180:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005184:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 0301 	and.w	r3, r3, #1
 800518e:	2b00      	cmp	r3, #0
 8005190:	d00a      	beq.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005192:	4b95      	ldr	r3, [pc, #596]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005194:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005198:	f023 0203 	bic.w	r2, r3, #3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6a1b      	ldr	r3, [r3, #32]
 80051a0:	4991      	ldr	r1, [pc, #580]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80051a2:	4313      	orrs	r3, r2
 80051a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 0302 	and.w	r3, r3, #2
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d00a      	beq.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80051b4:	4b8c      	ldr	r3, [pc, #560]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80051b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ba:	f023 020c 	bic.w	r2, r3, #12
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c2:	4989      	ldr	r1, [pc, #548]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80051c4:	4313      	orrs	r3, r2
 80051c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 0304 	and.w	r3, r3, #4
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d00a      	beq.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80051d6:	4b84      	ldr	r3, [pc, #528]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80051d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051dc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e4:	4980      	ldr	r1, [pc, #512]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80051e6:	4313      	orrs	r3, r2
 80051e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 0320 	and.w	r3, r3, #32
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d00a      	beq.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80051f8:	4b7b      	ldr	r3, [pc, #492]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80051fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051fe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005206:	4978      	ldr	r1, [pc, #480]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005208:	4313      	orrs	r3, r2
 800520a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00a      	beq.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800521a:	4b73      	ldr	r3, [pc, #460]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800521c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005220:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005228:	496f      	ldr	r1, [pc, #444]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800522a:	4313      	orrs	r3, r2
 800522c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005238:	2b00      	cmp	r3, #0
 800523a:	d00a      	beq.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800523c:	4b6a      	ldr	r3, [pc, #424]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800523e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005242:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524a:	4967      	ldr	r1, [pc, #412]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800524c:	4313      	orrs	r3, r2
 800524e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800525a:	2b00      	cmp	r3, #0
 800525c:	d00a      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800525e:	4b62      	ldr	r3, [pc, #392]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005260:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005264:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800526c:	495e      	ldr	r1, [pc, #376]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800526e:	4313      	orrs	r3, r2
 8005270:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800527c:	2b00      	cmp	r3, #0
 800527e:	d00a      	beq.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005280:	4b59      	ldr	r3, [pc, #356]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005286:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800528e:	4956      	ldr	r1, [pc, #344]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005290:	4313      	orrs	r3, r2
 8005292:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d00a      	beq.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80052a2:	4b51      	ldr	r3, [pc, #324]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80052a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b0:	494d      	ldr	r1, [pc, #308]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80052b2:	4313      	orrs	r3, r2
 80052b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d028      	beq.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80052c4:	4b48      	ldr	r3, [pc, #288]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80052c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052d2:	4945      	ldr	r1, [pc, #276]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80052d4:	4313      	orrs	r3, r2
 80052d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052e2:	d106      	bne.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052e4:	4b40      	ldr	r3, [pc, #256]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	4a3f      	ldr	r2, [pc, #252]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80052ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052ee:	60d3      	str	r3, [r2, #12]
 80052f0:	e011      	b.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052fa:	d10c      	bne.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	3304      	adds	r3, #4
 8005300:	2101      	movs	r1, #1
 8005302:	4618      	mov	r0, r3
 8005304:	f000 f872 	bl	80053ec <RCCEx_PLLSAI1_Config>
 8005308:	4603      	mov	r3, r0
 800530a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800530c:	7cfb      	ldrb	r3, [r7, #19]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d001      	beq.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 8005312:	7cfb      	ldrb	r3, [r7, #19]
 8005314:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800531e:	2b00      	cmp	r3, #0
 8005320:	d028      	beq.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005322:	4b31      	ldr	r3, [pc, #196]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005328:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005330:	492d      	ldr	r1, [pc, #180]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005332:	4313      	orrs	r3, r2
 8005334:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800533c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005340:	d106      	bne.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005342:	4b29      	ldr	r3, [pc, #164]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	4a28      	ldr	r2, [pc, #160]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005348:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800534c:	60d3      	str	r3, [r2, #12]
 800534e:	e011      	b.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005354:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005358:	d10c      	bne.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	3304      	adds	r3, #4
 800535e:	2101      	movs	r1, #1
 8005360:	4618      	mov	r0, r3
 8005362:	f000 f843 	bl	80053ec <RCCEx_PLLSAI1_Config>
 8005366:	4603      	mov	r3, r0
 8005368:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800536a:	7cfb      	ldrb	r3, [r7, #19]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d001      	beq.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8005370:	7cfb      	ldrb	r3, [r7, #19]
 8005372:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800537c:	2b00      	cmp	r3, #0
 800537e:	d01c      	beq.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005380:	4b19      	ldr	r3, [pc, #100]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005386:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800538e:	4916      	ldr	r1, [pc, #88]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005390:	4313      	orrs	r3, r2
 8005392:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800539a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800539e:	d10c      	bne.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	3304      	adds	r3, #4
 80053a4:	2102      	movs	r1, #2
 80053a6:	4618      	mov	r0, r3
 80053a8:	f000 f820 	bl	80053ec <RCCEx_PLLSAI1_Config>
 80053ac:	4603      	mov	r3, r0
 80053ae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053b0:	7cfb      	ldrb	r3, [r7, #19]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d001      	beq.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 80053b6:	7cfb      	ldrb	r3, [r7, #19]
 80053b8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00a      	beq.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80053c6:	4b08      	ldr	r3, [pc, #32]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80053c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053cc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053d4:	4904      	ldr	r1, [pc, #16]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80053d6:	4313      	orrs	r3, r2
 80053d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80053dc:	7cbb      	ldrb	r3, [r7, #18]
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3718      	adds	r7, #24
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	40021000 	.word	0x40021000

080053ec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b084      	sub	sp, #16
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80053f6:	2300      	movs	r3, #0
 80053f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80053fa:	4b74      	ldr	r3, [pc, #464]	; (80055cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80053fc:	68db      	ldr	r3, [r3, #12]
 80053fe:	f003 0303 	and.w	r3, r3, #3
 8005402:	2b00      	cmp	r3, #0
 8005404:	d018      	beq.n	8005438 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005406:	4b71      	ldr	r3, [pc, #452]	; (80055cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	f003 0203 	and.w	r2, r3, #3
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	429a      	cmp	r2, r3
 8005414:	d10d      	bne.n	8005432 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
       ||
 800541a:	2b00      	cmp	r3, #0
 800541c:	d009      	beq.n	8005432 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800541e:	4b6b      	ldr	r3, [pc, #428]	; (80055cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	091b      	lsrs	r3, r3, #4
 8005424:	f003 0307 	and.w	r3, r3, #7
 8005428:	1c5a      	adds	r2, r3, #1
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	685b      	ldr	r3, [r3, #4]
       ||
 800542e:	429a      	cmp	r2, r3
 8005430:	d047      	beq.n	80054c2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	73fb      	strb	r3, [r7, #15]
 8005436:	e044      	b.n	80054c2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2b03      	cmp	r3, #3
 800543e:	d018      	beq.n	8005472 <RCCEx_PLLSAI1_Config+0x86>
 8005440:	2b03      	cmp	r3, #3
 8005442:	d825      	bhi.n	8005490 <RCCEx_PLLSAI1_Config+0xa4>
 8005444:	2b01      	cmp	r3, #1
 8005446:	d002      	beq.n	800544e <RCCEx_PLLSAI1_Config+0x62>
 8005448:	2b02      	cmp	r3, #2
 800544a:	d009      	beq.n	8005460 <RCCEx_PLLSAI1_Config+0x74>
 800544c:	e020      	b.n	8005490 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800544e:	4b5f      	ldr	r3, [pc, #380]	; (80055cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 0302 	and.w	r3, r3, #2
 8005456:	2b00      	cmp	r3, #0
 8005458:	d11d      	bne.n	8005496 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800545e:	e01a      	b.n	8005496 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005460:	4b5a      	ldr	r3, [pc, #360]	; (80055cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005468:	2b00      	cmp	r3, #0
 800546a:	d116      	bne.n	800549a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005470:	e013      	b.n	800549a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005472:	4b56      	ldr	r3, [pc, #344]	; (80055cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800547a:	2b00      	cmp	r3, #0
 800547c:	d10f      	bne.n	800549e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800547e:	4b53      	ldr	r3, [pc, #332]	; (80055cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005486:	2b00      	cmp	r3, #0
 8005488:	d109      	bne.n	800549e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800548e:	e006      	b.n	800549e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	73fb      	strb	r3, [r7, #15]
      break;
 8005494:	e004      	b.n	80054a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005496:	bf00      	nop
 8005498:	e002      	b.n	80054a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800549a:	bf00      	nop
 800549c:	e000      	b.n	80054a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800549e:	bf00      	nop
    }

    if(status == HAL_OK)
 80054a0:	7bfb      	ldrb	r3, [r7, #15]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d10d      	bne.n	80054c2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80054a6:	4b49      	ldr	r3, [pc, #292]	; (80055cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80054a8:	68db      	ldr	r3, [r3, #12]
 80054aa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6819      	ldr	r1, [r3, #0]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	3b01      	subs	r3, #1
 80054b8:	011b      	lsls	r3, r3, #4
 80054ba:	430b      	orrs	r3, r1
 80054bc:	4943      	ldr	r1, [pc, #268]	; (80055cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80054be:	4313      	orrs	r3, r2
 80054c0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80054c2:	7bfb      	ldrb	r3, [r7, #15]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d17c      	bne.n	80055c2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80054c8:	4b40      	ldr	r3, [pc, #256]	; (80055cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a3f      	ldr	r2, [pc, #252]	; (80055cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80054ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80054d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054d4:	f7fe f898 	bl	8003608 <HAL_GetTick>
 80054d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80054da:	e009      	b.n	80054f0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80054dc:	f7fe f894 	bl	8003608 <HAL_GetTick>
 80054e0:	4602      	mov	r2, r0
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	1ad3      	subs	r3, r2, r3
 80054e6:	2b02      	cmp	r3, #2
 80054e8:	d902      	bls.n	80054f0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80054ea:	2303      	movs	r3, #3
 80054ec:	73fb      	strb	r3, [r7, #15]
        break;
 80054ee:	e005      	b.n	80054fc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80054f0:	4b36      	ldr	r3, [pc, #216]	; (80055cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d1ef      	bne.n	80054dc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80054fc:	7bfb      	ldrb	r3, [r7, #15]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d15f      	bne.n	80055c2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d110      	bne.n	800552a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005508:	4b30      	ldr	r3, [pc, #192]	; (80055cc <RCCEx_PLLSAI1_Config+0x1e0>)
 800550a:	691b      	ldr	r3, [r3, #16]
 800550c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005510:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	6892      	ldr	r2, [r2, #8]
 8005518:	0211      	lsls	r1, r2, #8
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	68d2      	ldr	r2, [r2, #12]
 800551e:	06d2      	lsls	r2, r2, #27
 8005520:	430a      	orrs	r2, r1
 8005522:	492a      	ldr	r1, [pc, #168]	; (80055cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005524:	4313      	orrs	r3, r2
 8005526:	610b      	str	r3, [r1, #16]
 8005528:	e027      	b.n	800557a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	2b01      	cmp	r3, #1
 800552e:	d112      	bne.n	8005556 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005530:	4b26      	ldr	r3, [pc, #152]	; (80055cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005532:	691b      	ldr	r3, [r3, #16]
 8005534:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005538:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	6892      	ldr	r2, [r2, #8]
 8005540:	0211      	lsls	r1, r2, #8
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	6912      	ldr	r2, [r2, #16]
 8005546:	0852      	lsrs	r2, r2, #1
 8005548:	3a01      	subs	r2, #1
 800554a:	0552      	lsls	r2, r2, #21
 800554c:	430a      	orrs	r2, r1
 800554e:	491f      	ldr	r1, [pc, #124]	; (80055cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005550:	4313      	orrs	r3, r2
 8005552:	610b      	str	r3, [r1, #16]
 8005554:	e011      	b.n	800557a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005556:	4b1d      	ldr	r3, [pc, #116]	; (80055cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005558:	691b      	ldr	r3, [r3, #16]
 800555a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800555e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	6892      	ldr	r2, [r2, #8]
 8005566:	0211      	lsls	r1, r2, #8
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	6952      	ldr	r2, [r2, #20]
 800556c:	0852      	lsrs	r2, r2, #1
 800556e:	3a01      	subs	r2, #1
 8005570:	0652      	lsls	r2, r2, #25
 8005572:	430a      	orrs	r2, r1
 8005574:	4915      	ldr	r1, [pc, #84]	; (80055cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005576:	4313      	orrs	r3, r2
 8005578:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800557a:	4b14      	ldr	r3, [pc, #80]	; (80055cc <RCCEx_PLLSAI1_Config+0x1e0>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a13      	ldr	r2, [pc, #76]	; (80055cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005580:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005584:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005586:	f7fe f83f 	bl	8003608 <HAL_GetTick>
 800558a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800558c:	e009      	b.n	80055a2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800558e:	f7fe f83b 	bl	8003608 <HAL_GetTick>
 8005592:	4602      	mov	r2, r0
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	1ad3      	subs	r3, r2, r3
 8005598:	2b02      	cmp	r3, #2
 800559a:	d902      	bls.n	80055a2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800559c:	2303      	movs	r3, #3
 800559e:	73fb      	strb	r3, [r7, #15]
          break;
 80055a0:	e005      	b.n	80055ae <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80055a2:	4b0a      	ldr	r3, [pc, #40]	; (80055cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d0ef      	beq.n	800558e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80055ae:	7bfb      	ldrb	r3, [r7, #15]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d106      	bne.n	80055c2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80055b4:	4b05      	ldr	r3, [pc, #20]	; (80055cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80055b6:	691a      	ldr	r2, [r3, #16]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	699b      	ldr	r3, [r3, #24]
 80055bc:	4903      	ldr	r1, [pc, #12]	; (80055cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80055be:	4313      	orrs	r3, r2
 80055c0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80055c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3710      	adds	r7, #16
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	40021000 	.word	0x40021000

080055d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b082      	sub	sp, #8
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d101      	bne.n	80055e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e049      	b.n	8005676 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d106      	bne.n	80055fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f002 fcee 	bl	8007fd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2202      	movs	r2, #2
 8005600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	3304      	adds	r3, #4
 800560c:	4619      	mov	r1, r3
 800560e:	4610      	mov	r0, r2
 8005610:	f000 fe2e 	bl	8006270 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005674:	2300      	movs	r3, #0
}
 8005676:	4618      	mov	r0, r3
 8005678:	3708      	adds	r7, #8
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}

0800567e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800567e:	b580      	push	{r7, lr}
 8005680:	b082      	sub	sp, #8
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d101      	bne.n	8005690 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	e049      	b.n	8005724 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005696:	b2db      	uxtb	r3, r3
 8005698:	2b00      	cmp	r3, #0
 800569a:	d106      	bne.n	80056aa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f002 fd91 	bl	80081cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2202      	movs	r2, #2
 80056ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	3304      	adds	r3, #4
 80056ba:	4619      	mov	r1, r3
 80056bc:	4610      	mov	r0, r2
 80056be:	f000 fdd7 	bl	8006270 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2201      	movs	r2, #1
 80056c6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2201      	movs	r2, #1
 80056ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2201      	movs	r2, #1
 80056d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2201      	movs	r2, #1
 80056de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2201      	movs	r2, #1
 80056e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2201      	movs	r2, #1
 80056ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2201      	movs	r2, #1
 80056f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2201      	movs	r2, #1
 80056fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2201      	movs	r2, #1
 8005706:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2201      	movs	r2, #1
 800570e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2201      	movs	r2, #1
 8005716:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2201      	movs	r2, #1
 800571e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005722:	2300      	movs	r3, #0
}
 8005724:	4618      	mov	r0, r3
 8005726:	3708      	adds	r7, #8
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}

0800572c <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b086      	sub	sp, #24
 8005730:	af00      	add	r7, sp, #0
 8005732:	60f8      	str	r0, [r7, #12]
 8005734:	60b9      	str	r1, [r7, #8]
 8005736:	607a      	str	r2, [r7, #4]
 8005738:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800573a:	2300      	movs	r3, #0
 800573c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d109      	bne.n	8005758 <HAL_TIM_PWM_Start_DMA+0x2c>
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800574a:	b2db      	uxtb	r3, r3
 800574c:	2b02      	cmp	r3, #2
 800574e:	bf0c      	ite	eq
 8005750:	2301      	moveq	r3, #1
 8005752:	2300      	movne	r3, #0
 8005754:	b2db      	uxtb	r3, r3
 8005756:	e03c      	b.n	80057d2 <HAL_TIM_PWM_Start_DMA+0xa6>
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	2b04      	cmp	r3, #4
 800575c:	d109      	bne.n	8005772 <HAL_TIM_PWM_Start_DMA+0x46>
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005764:	b2db      	uxtb	r3, r3
 8005766:	2b02      	cmp	r3, #2
 8005768:	bf0c      	ite	eq
 800576a:	2301      	moveq	r3, #1
 800576c:	2300      	movne	r3, #0
 800576e:	b2db      	uxtb	r3, r3
 8005770:	e02f      	b.n	80057d2 <HAL_TIM_PWM_Start_DMA+0xa6>
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	2b08      	cmp	r3, #8
 8005776:	d109      	bne.n	800578c <HAL_TIM_PWM_Start_DMA+0x60>
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800577e:	b2db      	uxtb	r3, r3
 8005780:	2b02      	cmp	r3, #2
 8005782:	bf0c      	ite	eq
 8005784:	2301      	moveq	r3, #1
 8005786:	2300      	movne	r3, #0
 8005788:	b2db      	uxtb	r3, r3
 800578a:	e022      	b.n	80057d2 <HAL_TIM_PWM_Start_DMA+0xa6>
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	2b0c      	cmp	r3, #12
 8005790:	d109      	bne.n	80057a6 <HAL_TIM_PWM_Start_DMA+0x7a>
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005798:	b2db      	uxtb	r3, r3
 800579a:	2b02      	cmp	r3, #2
 800579c:	bf0c      	ite	eq
 800579e:	2301      	moveq	r3, #1
 80057a0:	2300      	movne	r3, #0
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	e015      	b.n	80057d2 <HAL_TIM_PWM_Start_DMA+0xa6>
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	2b10      	cmp	r3, #16
 80057aa:	d109      	bne.n	80057c0 <HAL_TIM_PWM_Start_DMA+0x94>
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	bf0c      	ite	eq
 80057b8:	2301      	moveq	r3, #1
 80057ba:	2300      	movne	r3, #0
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	e008      	b.n	80057d2 <HAL_TIM_PWM_Start_DMA+0xa6>
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	2b02      	cmp	r3, #2
 80057ca:	bf0c      	ite	eq
 80057cc:	2301      	moveq	r3, #1
 80057ce:	2300      	movne	r3, #0
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d001      	beq.n	80057da <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 80057d6:	2302      	movs	r3, #2
 80057d8:	e18d      	b.n	8005af6 <HAL_TIM_PWM_Start_DMA+0x3ca>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d109      	bne.n	80057f4 <HAL_TIM_PWM_Start_DMA+0xc8>
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	bf0c      	ite	eq
 80057ec:	2301      	moveq	r3, #1
 80057ee:	2300      	movne	r3, #0
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	e03c      	b.n	800586e <HAL_TIM_PWM_Start_DMA+0x142>
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	2b04      	cmp	r3, #4
 80057f8:	d109      	bne.n	800580e <HAL_TIM_PWM_Start_DMA+0xe2>
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005800:	b2db      	uxtb	r3, r3
 8005802:	2b01      	cmp	r3, #1
 8005804:	bf0c      	ite	eq
 8005806:	2301      	moveq	r3, #1
 8005808:	2300      	movne	r3, #0
 800580a:	b2db      	uxtb	r3, r3
 800580c:	e02f      	b.n	800586e <HAL_TIM_PWM_Start_DMA+0x142>
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	2b08      	cmp	r3, #8
 8005812:	d109      	bne.n	8005828 <HAL_TIM_PWM_Start_DMA+0xfc>
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800581a:	b2db      	uxtb	r3, r3
 800581c:	2b01      	cmp	r3, #1
 800581e:	bf0c      	ite	eq
 8005820:	2301      	moveq	r3, #1
 8005822:	2300      	movne	r3, #0
 8005824:	b2db      	uxtb	r3, r3
 8005826:	e022      	b.n	800586e <HAL_TIM_PWM_Start_DMA+0x142>
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	2b0c      	cmp	r3, #12
 800582c:	d109      	bne.n	8005842 <HAL_TIM_PWM_Start_DMA+0x116>
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005834:	b2db      	uxtb	r3, r3
 8005836:	2b01      	cmp	r3, #1
 8005838:	bf0c      	ite	eq
 800583a:	2301      	moveq	r3, #1
 800583c:	2300      	movne	r3, #0
 800583e:	b2db      	uxtb	r3, r3
 8005840:	e015      	b.n	800586e <HAL_TIM_PWM_Start_DMA+0x142>
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	2b10      	cmp	r3, #16
 8005846:	d109      	bne.n	800585c <HAL_TIM_PWM_Start_DMA+0x130>
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800584e:	b2db      	uxtb	r3, r3
 8005850:	2b01      	cmp	r3, #1
 8005852:	bf0c      	ite	eq
 8005854:	2301      	moveq	r3, #1
 8005856:	2300      	movne	r3, #0
 8005858:	b2db      	uxtb	r3, r3
 800585a:	e008      	b.n	800586e <HAL_TIM_PWM_Start_DMA+0x142>
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005862:	b2db      	uxtb	r3, r3
 8005864:	2b01      	cmp	r3, #1
 8005866:	bf0c      	ite	eq
 8005868:	2301      	moveq	r3, #1
 800586a:	2300      	movne	r3, #0
 800586c:	b2db      	uxtb	r3, r3
 800586e:	2b00      	cmp	r3, #0
 8005870:	d034      	beq.n	80058dc <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d002      	beq.n	800587e <HAL_TIM_PWM_Start_DMA+0x152>
 8005878:	887b      	ldrh	r3, [r7, #2]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d101      	bne.n	8005882 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e139      	b.n	8005af6 <HAL_TIM_PWM_Start_DMA+0x3ca>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d104      	bne.n	8005892 <HAL_TIM_PWM_Start_DMA+0x166>
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2202      	movs	r2, #2
 800588c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005890:	e026      	b.n	80058e0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	2b04      	cmp	r3, #4
 8005896:	d104      	bne.n	80058a2 <HAL_TIM_PWM_Start_DMA+0x176>
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2202      	movs	r2, #2
 800589c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058a0:	e01e      	b.n	80058e0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	2b08      	cmp	r3, #8
 80058a6:	d104      	bne.n	80058b2 <HAL_TIM_PWM_Start_DMA+0x186>
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2202      	movs	r2, #2
 80058ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058b0:	e016      	b.n	80058e0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	2b0c      	cmp	r3, #12
 80058b6:	d104      	bne.n	80058c2 <HAL_TIM_PWM_Start_DMA+0x196>
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2202      	movs	r2, #2
 80058bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80058c0:	e00e      	b.n	80058e0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	2b10      	cmp	r3, #16
 80058c6:	d104      	bne.n	80058d2 <HAL_TIM_PWM_Start_DMA+0x1a6>
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2202      	movs	r2, #2
 80058cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058d0:	e006      	b.n	80058e0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2202      	movs	r2, #2
 80058d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80058da:	e001      	b.n	80058e0 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	e10a      	b.n	8005af6 <HAL_TIM_PWM_Start_DMA+0x3ca>
  }

  switch (Channel)
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	2b0c      	cmp	r3, #12
 80058e4:	f200 80ae 	bhi.w	8005a44 <HAL_TIM_PWM_Start_DMA+0x318>
 80058e8:	a201      	add	r2, pc, #4	; (adr r2, 80058f0 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 80058ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ee:	bf00      	nop
 80058f0:	08005925 	.word	0x08005925
 80058f4:	08005a45 	.word	0x08005a45
 80058f8:	08005a45 	.word	0x08005a45
 80058fc:	08005a45 	.word	0x08005a45
 8005900:	0800596d 	.word	0x0800596d
 8005904:	08005a45 	.word	0x08005a45
 8005908:	08005a45 	.word	0x08005a45
 800590c:	08005a45 	.word	0x08005a45
 8005910:	080059b5 	.word	0x080059b5
 8005914:	08005a45 	.word	0x08005a45
 8005918:	08005a45 	.word	0x08005a45
 800591c:	08005a45 	.word	0x08005a45
 8005920:	080059fd 	.word	0x080059fd
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005928:	4a75      	ldr	r2, [pc, #468]	; (8005b00 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 800592a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005930:	4a74      	ldr	r2, [pc, #464]	; (8005b04 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8005932:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005938:	4a73      	ldr	r2, [pc, #460]	; (8005b08 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 800593a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005940:	6879      	ldr	r1, [r7, #4]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	3334      	adds	r3, #52	; 0x34
 8005948:	461a      	mov	r2, r3
 800594a:	887b      	ldrh	r3, [r7, #2]
 800594c:	f7fe f8ac 	bl	8003aa8 <HAL_DMA_Start_IT>
 8005950:	4603      	mov	r3, r0
 8005952:	2b00      	cmp	r3, #0
 8005954:	d001      	beq.n	800595a <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	e0cd      	b.n	8005af6 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	68da      	ldr	r2, [r3, #12]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005968:	60da      	str	r2, [r3, #12]
      break;
 800596a:	e06e      	b.n	8005a4a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005970:	4a63      	ldr	r2, [pc, #396]	; (8005b00 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8005972:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005978:	4a62      	ldr	r2, [pc, #392]	; (8005b04 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 800597a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005980:	4a61      	ldr	r2, [pc, #388]	; (8005b08 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8005982:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005988:	6879      	ldr	r1, [r7, #4]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	3338      	adds	r3, #56	; 0x38
 8005990:	461a      	mov	r2, r3
 8005992:	887b      	ldrh	r3, [r7, #2]
 8005994:	f7fe f888 	bl	8003aa8 <HAL_DMA_Start_IT>
 8005998:	4603      	mov	r3, r0
 800599a:	2b00      	cmp	r3, #0
 800599c:	d001      	beq.n	80059a2 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e0a9      	b.n	8005af6 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	68da      	ldr	r2, [r3, #12]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80059b0:	60da      	str	r2, [r3, #12]
      break;
 80059b2:	e04a      	b.n	8005a4a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b8:	4a51      	ldr	r2, [pc, #324]	; (8005b00 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 80059ba:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c0:	4a50      	ldr	r2, [pc, #320]	; (8005b04 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 80059c2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c8:	4a4f      	ldr	r2, [pc, #316]	; (8005b08 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 80059ca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80059d0:	6879      	ldr	r1, [r7, #4]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	333c      	adds	r3, #60	; 0x3c
 80059d8:	461a      	mov	r2, r3
 80059da:	887b      	ldrh	r3, [r7, #2]
 80059dc:	f7fe f864 	bl	8003aa8 <HAL_DMA_Start_IT>
 80059e0:	4603      	mov	r3, r0
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d001      	beq.n	80059ea <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e085      	b.n	8005af6 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	68da      	ldr	r2, [r3, #12]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059f8:	60da      	str	r2, [r3, #12]
      break;
 80059fa:	e026      	b.n	8005a4a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a00:	4a3f      	ldr	r2, [pc, #252]	; (8005b00 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8005a02:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a08:	4a3e      	ldr	r2, [pc, #248]	; (8005b04 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8005a0a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a10:	4a3d      	ldr	r2, [pc, #244]	; (8005b08 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8005a12:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005a18:	6879      	ldr	r1, [r7, #4]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	3340      	adds	r3, #64	; 0x40
 8005a20:	461a      	mov	r2, r3
 8005a22:	887b      	ldrh	r3, [r7, #2]
 8005a24:	f7fe f840 	bl	8003aa8 <HAL_DMA_Start_IT>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d001      	beq.n	8005a32 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e061      	b.n	8005af6 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	68da      	ldr	r2, [r3, #12]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005a40:	60da      	str	r2, [r3, #12]
      break;
 8005a42:	e002      	b.n	8005a4a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	75fb      	strb	r3, [r7, #23]
      break;
 8005a48:	bf00      	nop
  }

  if (status == HAL_OK)
 8005a4a:	7dfb      	ldrb	r3, [r7, #23]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d151      	bne.n	8005af4 <HAL_TIM_PWM_Start_DMA+0x3c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	2201      	movs	r2, #1
 8005a56:	68b9      	ldr	r1, [r7, #8]
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f000 ff85 	bl	8006968 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a2a      	ldr	r2, [pc, #168]	; (8005b0c <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d009      	beq.n	8005a7c <HAL_TIM_PWM_Start_DMA+0x350>
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a28      	ldr	r2, [pc, #160]	; (8005b10 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d004      	beq.n	8005a7c <HAL_TIM_PWM_Start_DMA+0x350>
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a27      	ldr	r2, [pc, #156]	; (8005b14 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d101      	bne.n	8005a80 <HAL_TIM_PWM_Start_DMA+0x354>
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e000      	b.n	8005a82 <HAL_TIM_PWM_Start_DMA+0x356>
 8005a80:	2300      	movs	r3, #0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d007      	beq.n	8005a96 <HAL_TIM_PWM_Start_DMA+0x36a>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a94:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a1c      	ldr	r2, [pc, #112]	; (8005b0c <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d009      	beq.n	8005ab4 <HAL_TIM_PWM_Start_DMA+0x388>
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aa8:	d004      	beq.n	8005ab4 <HAL_TIM_PWM_Start_DMA+0x388>
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a18      	ldr	r2, [pc, #96]	; (8005b10 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d115      	bne.n	8005ae0 <HAL_TIM_PWM_Start_DMA+0x3b4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	689a      	ldr	r2, [r3, #8]
 8005aba:	4b17      	ldr	r3, [pc, #92]	; (8005b18 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8005abc:	4013      	ands	r3, r2
 8005abe:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	2b06      	cmp	r3, #6
 8005ac4:	d015      	beq.n	8005af2 <HAL_TIM_PWM_Start_DMA+0x3c6>
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005acc:	d011      	beq.n	8005af2 <HAL_TIM_PWM_Start_DMA+0x3c6>
      {
        __HAL_TIM_ENABLE(htim);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f042 0201 	orr.w	r2, r2, #1
 8005adc:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ade:	e008      	b.n	8005af2 <HAL_TIM_PWM_Start_DMA+0x3c6>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f042 0201 	orr.w	r2, r2, #1
 8005aee:	601a      	str	r2, [r3, #0]
 8005af0:	e000      	b.n	8005af4 <HAL_TIM_PWM_Start_DMA+0x3c8>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005af2:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8005af4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3718      	adds	r7, #24
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	08006161 	.word	0x08006161
 8005b04:	08006209 	.word	0x08006209
 8005b08:	080060cf 	.word	0x080060cf
 8005b0c:	40012c00 	.word	0x40012c00
 8005b10:	40014000 	.word	0x40014000
 8005b14:	40014400 	.word	0x40014400
 8005b18:	00010007 	.word	0x00010007

08005b1c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b084      	sub	sp, #16
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b26:	2300      	movs	r3, #0
 8005b28:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	2b0c      	cmp	r3, #12
 8005b2e:	d855      	bhi.n	8005bdc <HAL_TIM_PWM_Stop_DMA+0xc0>
 8005b30:	a201      	add	r2, pc, #4	; (adr r2, 8005b38 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8005b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b36:	bf00      	nop
 8005b38:	08005b6d 	.word	0x08005b6d
 8005b3c:	08005bdd 	.word	0x08005bdd
 8005b40:	08005bdd 	.word	0x08005bdd
 8005b44:	08005bdd 	.word	0x08005bdd
 8005b48:	08005b89 	.word	0x08005b89
 8005b4c:	08005bdd 	.word	0x08005bdd
 8005b50:	08005bdd 	.word	0x08005bdd
 8005b54:	08005bdd 	.word	0x08005bdd
 8005b58:	08005ba5 	.word	0x08005ba5
 8005b5c:	08005bdd 	.word	0x08005bdd
 8005b60:	08005bdd 	.word	0x08005bdd
 8005b64:	08005bdd 	.word	0x08005bdd
 8005b68:	08005bc1 	.word	0x08005bc1
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	68da      	ldr	r2, [r3, #12]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005b7a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b80:	4618      	mov	r0, r3
 8005b82:	f7fd fff1 	bl	8003b68 <HAL_DMA_Abort_IT>
      break;
 8005b86:	e02c      	b.n	8005be2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	68da      	ldr	r2, [r3, #12]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b96:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f7fd ffe3 	bl	8003b68 <HAL_DMA_Abort_IT>
      break;
 8005ba2:	e01e      	b.n	8005be2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	68da      	ldr	r2, [r3, #12]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005bb2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f7fd ffd5 	bl	8003b68 <HAL_DMA_Abort_IT>
      break;
 8005bbe:	e010      	b.n	8005be2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	68da      	ldr	r2, [r3, #12]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005bce:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f7fd ffc7 	bl	8003b68 <HAL_DMA_Abort_IT>
      break;
 8005bda:	e002      	b.n	8005be2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	73fb      	strb	r3, [r7, #15]
      break;
 8005be0:	bf00      	nop
  }

  if (status == HAL_OK)
 8005be2:	7bfb      	ldrb	r3, [r7, #15]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d176      	bne.n	8005cd6 <HAL_TIM_PWM_Stop_DMA+0x1ba>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	2200      	movs	r2, #0
 8005bee:	6839      	ldr	r1, [r7, #0]
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f000 feb9 	bl	8006968 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a39      	ldr	r2, [pc, #228]	; (8005ce0 <HAL_TIM_PWM_Stop_DMA+0x1c4>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d009      	beq.n	8005c14 <HAL_TIM_PWM_Stop_DMA+0xf8>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a37      	ldr	r2, [pc, #220]	; (8005ce4 <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d004      	beq.n	8005c14 <HAL_TIM_PWM_Stop_DMA+0xf8>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a36      	ldr	r2, [pc, #216]	; (8005ce8 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d101      	bne.n	8005c18 <HAL_TIM_PWM_Stop_DMA+0xfc>
 8005c14:	2301      	movs	r3, #1
 8005c16:	e000      	b.n	8005c1a <HAL_TIM_PWM_Stop_DMA+0xfe>
 8005c18:	2300      	movs	r3, #0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d017      	beq.n	8005c4e <HAL_TIM_PWM_Stop_DMA+0x132>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	6a1a      	ldr	r2, [r3, #32]
 8005c24:	f241 1311 	movw	r3, #4369	; 0x1111
 8005c28:	4013      	ands	r3, r2
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d10f      	bne.n	8005c4e <HAL_TIM_PWM_Stop_DMA+0x132>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	6a1a      	ldr	r2, [r3, #32]
 8005c34:	f240 4344 	movw	r3, #1092	; 0x444
 8005c38:	4013      	ands	r3, r2
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d107      	bne.n	8005c4e <HAL_TIM_PWM_Stop_DMA+0x132>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005c4c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	6a1a      	ldr	r2, [r3, #32]
 8005c54:	f241 1311 	movw	r3, #4369	; 0x1111
 8005c58:	4013      	ands	r3, r2
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d10f      	bne.n	8005c7e <HAL_TIM_PWM_Stop_DMA+0x162>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	6a1a      	ldr	r2, [r3, #32]
 8005c64:	f240 4344 	movw	r3, #1092	; 0x444
 8005c68:	4013      	ands	r3, r2
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d107      	bne.n	8005c7e <HAL_TIM_PWM_Stop_DMA+0x162>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f022 0201 	bic.w	r2, r2, #1
 8005c7c:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d104      	bne.n	8005c8e <HAL_TIM_PWM_Stop_DMA+0x172>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c8c:	e023      	b.n	8005cd6 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	2b04      	cmp	r3, #4
 8005c92:	d104      	bne.n	8005c9e <HAL_TIM_PWM_Stop_DMA+0x182>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c9c:	e01b      	b.n	8005cd6 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	2b08      	cmp	r3, #8
 8005ca2:	d104      	bne.n	8005cae <HAL_TIM_PWM_Stop_DMA+0x192>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cac:	e013      	b.n	8005cd6 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	2b0c      	cmp	r3, #12
 8005cb2:	d104      	bne.n	8005cbe <HAL_TIM_PWM_Stop_DMA+0x1a2>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005cbc:	e00b      	b.n	8005cd6 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	2b10      	cmp	r3, #16
 8005cc2:	d104      	bne.n	8005cce <HAL_TIM_PWM_Stop_DMA+0x1b2>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ccc:	e003      	b.n	8005cd6 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8005cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3710      	adds	r7, #16
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}
 8005ce0:	40012c00 	.word	0x40012c00
 8005ce4:	40014000 	.word	0x40014000
 8005ce8:	40014400 	.word	0x40014400

08005cec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b086      	sub	sp, #24
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	60f8      	str	r0, [r7, #12]
 8005cf4:	60b9      	str	r1, [r7, #8]
 8005cf6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d101      	bne.n	8005d0a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005d06:	2302      	movs	r3, #2
 8005d08:	e0ff      	b.n	8005f0a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2b14      	cmp	r3, #20
 8005d16:	f200 80f0 	bhi.w	8005efa <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005d1a:	a201      	add	r2, pc, #4	; (adr r2, 8005d20 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d20:	08005d75 	.word	0x08005d75
 8005d24:	08005efb 	.word	0x08005efb
 8005d28:	08005efb 	.word	0x08005efb
 8005d2c:	08005efb 	.word	0x08005efb
 8005d30:	08005db5 	.word	0x08005db5
 8005d34:	08005efb 	.word	0x08005efb
 8005d38:	08005efb 	.word	0x08005efb
 8005d3c:	08005efb 	.word	0x08005efb
 8005d40:	08005df7 	.word	0x08005df7
 8005d44:	08005efb 	.word	0x08005efb
 8005d48:	08005efb 	.word	0x08005efb
 8005d4c:	08005efb 	.word	0x08005efb
 8005d50:	08005e37 	.word	0x08005e37
 8005d54:	08005efb 	.word	0x08005efb
 8005d58:	08005efb 	.word	0x08005efb
 8005d5c:	08005efb 	.word	0x08005efb
 8005d60:	08005e79 	.word	0x08005e79
 8005d64:	08005efb 	.word	0x08005efb
 8005d68:	08005efb 	.word	0x08005efb
 8005d6c:	08005efb 	.word	0x08005efb
 8005d70:	08005eb9 	.word	0x08005eb9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	68b9      	ldr	r1, [r7, #8]
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f000 fadc 	bl	8006338 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	699a      	ldr	r2, [r3, #24]
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f042 0208 	orr.w	r2, r2, #8
 8005d8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	699a      	ldr	r2, [r3, #24]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f022 0204 	bic.w	r2, r2, #4
 8005d9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	6999      	ldr	r1, [r3, #24]
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	691a      	ldr	r2, [r3, #16]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	430a      	orrs	r2, r1
 8005db0:	619a      	str	r2, [r3, #24]
      break;
 8005db2:	e0a5      	b.n	8005f00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	68b9      	ldr	r1, [r7, #8]
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f000 fb38 	bl	8006430 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	699a      	ldr	r2, [r3, #24]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005dce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	699a      	ldr	r2, [r3, #24]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	6999      	ldr	r1, [r3, #24]
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	021a      	lsls	r2, r3, #8
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	430a      	orrs	r2, r1
 8005df2:	619a      	str	r2, [r3, #24]
      break;
 8005df4:	e084      	b.n	8005f00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	68b9      	ldr	r1, [r7, #8]
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f000 fb91 	bl	8006524 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	69da      	ldr	r2, [r3, #28]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f042 0208 	orr.w	r2, r2, #8
 8005e10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	69da      	ldr	r2, [r3, #28]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f022 0204 	bic.w	r2, r2, #4
 8005e20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	69d9      	ldr	r1, [r3, #28]
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	691a      	ldr	r2, [r3, #16]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	430a      	orrs	r2, r1
 8005e32:	61da      	str	r2, [r3, #28]
      break;
 8005e34:	e064      	b.n	8005f00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	68b9      	ldr	r1, [r7, #8]
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f000 fbe9 	bl	8006614 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	69da      	ldr	r2, [r3, #28]
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	69da      	ldr	r2, [r3, #28]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	69d9      	ldr	r1, [r3, #28]
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	691b      	ldr	r3, [r3, #16]
 8005e6c:	021a      	lsls	r2, r3, #8
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	430a      	orrs	r2, r1
 8005e74:	61da      	str	r2, [r3, #28]
      break;
 8005e76:	e043      	b.n	8005f00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	68b9      	ldr	r1, [r7, #8]
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f000 fc26 	bl	80066d0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f042 0208 	orr.w	r2, r2, #8
 8005e92:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f022 0204 	bic.w	r2, r2, #4
 8005ea2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	691a      	ldr	r2, [r3, #16]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	430a      	orrs	r2, r1
 8005eb4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005eb6:	e023      	b.n	8005f00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68b9      	ldr	r1, [r7, #8]
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f000 fc5e 	bl	8006780 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ed2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ee2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	691b      	ldr	r3, [r3, #16]
 8005eee:	021a      	lsls	r2, r3, #8
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	430a      	orrs	r2, r1
 8005ef6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005ef8:	e002      	b.n	8005f00 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	75fb      	strb	r3, [r7, #23]
      break;
 8005efe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2200      	movs	r2, #0
 8005f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f08:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3718      	adds	r7, #24
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop

08005f14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b084      	sub	sp, #16
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d101      	bne.n	8005f30 <HAL_TIM_ConfigClockSource+0x1c>
 8005f2c:	2302      	movs	r3, #2
 8005f2e:	e0b6      	b.n	800609e <HAL_TIM_ConfigClockSource+0x18a>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2202      	movs	r2, #2
 8005f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f4e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005f52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f5a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	68ba      	ldr	r2, [r7, #8]
 8005f62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f6c:	d03e      	beq.n	8005fec <HAL_TIM_ConfigClockSource+0xd8>
 8005f6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f72:	f200 8087 	bhi.w	8006084 <HAL_TIM_ConfigClockSource+0x170>
 8005f76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f7a:	f000 8086 	beq.w	800608a <HAL_TIM_ConfigClockSource+0x176>
 8005f7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f82:	d87f      	bhi.n	8006084 <HAL_TIM_ConfigClockSource+0x170>
 8005f84:	2b70      	cmp	r3, #112	; 0x70
 8005f86:	d01a      	beq.n	8005fbe <HAL_TIM_ConfigClockSource+0xaa>
 8005f88:	2b70      	cmp	r3, #112	; 0x70
 8005f8a:	d87b      	bhi.n	8006084 <HAL_TIM_ConfigClockSource+0x170>
 8005f8c:	2b60      	cmp	r3, #96	; 0x60
 8005f8e:	d050      	beq.n	8006032 <HAL_TIM_ConfigClockSource+0x11e>
 8005f90:	2b60      	cmp	r3, #96	; 0x60
 8005f92:	d877      	bhi.n	8006084 <HAL_TIM_ConfigClockSource+0x170>
 8005f94:	2b50      	cmp	r3, #80	; 0x50
 8005f96:	d03c      	beq.n	8006012 <HAL_TIM_ConfigClockSource+0xfe>
 8005f98:	2b50      	cmp	r3, #80	; 0x50
 8005f9a:	d873      	bhi.n	8006084 <HAL_TIM_ConfigClockSource+0x170>
 8005f9c:	2b40      	cmp	r3, #64	; 0x40
 8005f9e:	d058      	beq.n	8006052 <HAL_TIM_ConfigClockSource+0x13e>
 8005fa0:	2b40      	cmp	r3, #64	; 0x40
 8005fa2:	d86f      	bhi.n	8006084 <HAL_TIM_ConfigClockSource+0x170>
 8005fa4:	2b30      	cmp	r3, #48	; 0x30
 8005fa6:	d064      	beq.n	8006072 <HAL_TIM_ConfigClockSource+0x15e>
 8005fa8:	2b30      	cmp	r3, #48	; 0x30
 8005faa:	d86b      	bhi.n	8006084 <HAL_TIM_ConfigClockSource+0x170>
 8005fac:	2b20      	cmp	r3, #32
 8005fae:	d060      	beq.n	8006072 <HAL_TIM_ConfigClockSource+0x15e>
 8005fb0:	2b20      	cmp	r3, #32
 8005fb2:	d867      	bhi.n	8006084 <HAL_TIM_ConfigClockSource+0x170>
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d05c      	beq.n	8006072 <HAL_TIM_ConfigClockSource+0x15e>
 8005fb8:	2b10      	cmp	r3, #16
 8005fba:	d05a      	beq.n	8006072 <HAL_TIM_ConfigClockSource+0x15e>
 8005fbc:	e062      	b.n	8006084 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6818      	ldr	r0, [r3, #0]
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	6899      	ldr	r1, [r3, #8]
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	685a      	ldr	r2, [r3, #4]
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	68db      	ldr	r3, [r3, #12]
 8005fce:	f000 fcab 	bl	8006928 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005fe0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	68ba      	ldr	r2, [r7, #8]
 8005fe8:	609a      	str	r2, [r3, #8]
      break;
 8005fea:	e04f      	b.n	800608c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6818      	ldr	r0, [r3, #0]
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	6899      	ldr	r1, [r3, #8]
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	685a      	ldr	r2, [r3, #4]
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	68db      	ldr	r3, [r3, #12]
 8005ffc:	f000 fc94 	bl	8006928 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	689a      	ldr	r2, [r3, #8]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800600e:	609a      	str	r2, [r3, #8]
      break;
 8006010:	e03c      	b.n	800608c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6818      	ldr	r0, [r3, #0]
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	6859      	ldr	r1, [r3, #4]
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	68db      	ldr	r3, [r3, #12]
 800601e:	461a      	mov	r2, r3
 8006020:	f000 fc08 	bl	8006834 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	2150      	movs	r1, #80	; 0x50
 800602a:	4618      	mov	r0, r3
 800602c:	f000 fc61 	bl	80068f2 <TIM_ITRx_SetConfig>
      break;
 8006030:	e02c      	b.n	800608c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6818      	ldr	r0, [r3, #0]
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	6859      	ldr	r1, [r3, #4]
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	68db      	ldr	r3, [r3, #12]
 800603e:	461a      	mov	r2, r3
 8006040:	f000 fc27 	bl	8006892 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	2160      	movs	r1, #96	; 0x60
 800604a:	4618      	mov	r0, r3
 800604c:	f000 fc51 	bl	80068f2 <TIM_ITRx_SetConfig>
      break;
 8006050:	e01c      	b.n	800608c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6818      	ldr	r0, [r3, #0]
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	6859      	ldr	r1, [r3, #4]
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	68db      	ldr	r3, [r3, #12]
 800605e:	461a      	mov	r2, r3
 8006060:	f000 fbe8 	bl	8006834 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	2140      	movs	r1, #64	; 0x40
 800606a:	4618      	mov	r0, r3
 800606c:	f000 fc41 	bl	80068f2 <TIM_ITRx_SetConfig>
      break;
 8006070:	e00c      	b.n	800608c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4619      	mov	r1, r3
 800607c:	4610      	mov	r0, r2
 800607e:	f000 fc38 	bl	80068f2 <TIM_ITRx_SetConfig>
      break;
 8006082:	e003      	b.n	800608c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006084:	2301      	movs	r3, #1
 8006086:	73fb      	strb	r3, [r7, #15]
      break;
 8006088:	e000      	b.n	800608c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800608a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800609c:	7bfb      	ldrb	r3, [r7, #15]
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3710      	adds	r7, #16
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}

080060a6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80060a6:	b480      	push	{r7}
 80060a8:	b083      	sub	sp, #12
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80060ae:	bf00      	nop
 80060b0:	370c      	adds	r7, #12
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr

080060ba <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80060ba:	b480      	push	{r7}
 80060bc:	b083      	sub	sp, #12
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80060c2:	bf00      	nop
 80060c4:	370c      	adds	r7, #12
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr

080060ce <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80060ce:	b580      	push	{r7, lr}
 80060d0:	b084      	sub	sp, #16
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060da:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d107      	bne.n	80060f6 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2201      	movs	r2, #1
 80060ea:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2201      	movs	r2, #1
 80060f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060f4:	e02a      	b.n	800614c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d107      	bne.n	8006110 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2202      	movs	r2, #2
 8006104:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2201      	movs	r2, #1
 800610a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800610e:	e01d      	b.n	800614c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006114:	687a      	ldr	r2, [r7, #4]
 8006116:	429a      	cmp	r2, r3
 8006118:	d107      	bne.n	800612a <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2204      	movs	r2, #4
 800611e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006128:	e010      	b.n	800614c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	429a      	cmp	r2, r3
 8006132:	d107      	bne.n	8006144 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2208      	movs	r2, #8
 8006138:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2201      	movs	r2, #1
 800613e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006142:	e003      	b.n	800614c <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2201      	movs	r2, #1
 8006148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800614c:	68f8      	ldr	r0, [r7, #12]
 800614e:	f7ff ffb4 	bl	80060ba <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2200      	movs	r2, #0
 8006156:	771a      	strb	r2, [r3, #28]
}
 8006158:	bf00      	nop
 800615a:	3710      	adds	r7, #16
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b084      	sub	sp, #16
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800616c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	429a      	cmp	r2, r3
 8006176:	d10b      	bne.n	8006190 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2201      	movs	r2, #1
 800617c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	69db      	ldr	r3, [r3, #28]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d136      	bne.n	80061f4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2201      	movs	r2, #1
 800618a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800618e:	e031      	b.n	80061f4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	429a      	cmp	r2, r3
 8006198:	d10b      	bne.n	80061b2 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2202      	movs	r2, #2
 800619e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	69db      	ldr	r3, [r3, #28]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d125      	bne.n	80061f4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061b0:	e020      	b.n	80061f4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d10b      	bne.n	80061d4 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2204      	movs	r2, #4
 80061c0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	69db      	ldr	r3, [r3, #28]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d114      	bne.n	80061f4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2201      	movs	r2, #1
 80061ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061d2:	e00f      	b.n	80061f4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	429a      	cmp	r2, r3
 80061dc:	d10a      	bne.n	80061f4 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2208      	movs	r2, #8
 80061e2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	69db      	ldr	r3, [r3, #28]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d103      	bne.n	80061f4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2201      	movs	r2, #1
 80061f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061f4:	68f8      	ldr	r0, [r7, #12]
 80061f6:	f002 f965 	bl	80084c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2200      	movs	r2, #0
 80061fe:	771a      	strb	r2, [r3, #28]
  //g_tim_pwm_transfer_cmplt = true;

}
 8006200:	bf00      	nop
 8006202:	3710      	adds	r7, #16
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}

08006208 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006214:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621a:	687a      	ldr	r2, [r7, #4]
 800621c:	429a      	cmp	r2, r3
 800621e:	d103      	bne.n	8006228 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2201      	movs	r2, #1
 8006224:	771a      	strb	r2, [r3, #28]
 8006226:	e019      	b.n	800625c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	429a      	cmp	r2, r3
 8006230:	d103      	bne.n	800623a <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2202      	movs	r2, #2
 8006236:	771a      	strb	r2, [r3, #28]
 8006238:	e010      	b.n	800625c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	429a      	cmp	r2, r3
 8006242:	d103      	bne.n	800624c <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2204      	movs	r2, #4
 8006248:	771a      	strb	r2, [r3, #28]
 800624a:	e007      	b.n	800625c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	429a      	cmp	r2, r3
 8006254:	d102      	bne.n	800625c <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2208      	movs	r2, #8
 800625a:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800625c:	68f8      	ldr	r0, [r7, #12]
 800625e:	f7ff ff22 	bl	80060a6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2200      	movs	r2, #0
 8006266:	771a      	strb	r2, [r3, #28]
}
 8006268:	bf00      	nop
 800626a:	3710      	adds	r7, #16
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}

08006270 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006270:	b480      	push	{r7}
 8006272:	b085      	sub	sp, #20
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	4a2a      	ldr	r2, [pc, #168]	; (800632c <TIM_Base_SetConfig+0xbc>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d003      	beq.n	8006290 <TIM_Base_SetConfig+0x20>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800628e:	d108      	bne.n	80062a2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006296:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	68fa      	ldr	r2, [r7, #12]
 800629e:	4313      	orrs	r3, r2
 80062a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	4a21      	ldr	r2, [pc, #132]	; (800632c <TIM_Base_SetConfig+0xbc>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d00b      	beq.n	80062c2 <TIM_Base_SetConfig+0x52>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062b0:	d007      	beq.n	80062c2 <TIM_Base_SetConfig+0x52>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	4a1e      	ldr	r2, [pc, #120]	; (8006330 <TIM_Base_SetConfig+0xc0>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d003      	beq.n	80062c2 <TIM_Base_SetConfig+0x52>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	4a1d      	ldr	r2, [pc, #116]	; (8006334 <TIM_Base_SetConfig+0xc4>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d108      	bne.n	80062d4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	68db      	ldr	r3, [r3, #12]
 80062ce:	68fa      	ldr	r2, [r7, #12]
 80062d0:	4313      	orrs	r3, r2
 80062d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	695b      	ldr	r3, [r3, #20]
 80062de:	4313      	orrs	r3, r2
 80062e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	68fa      	ldr	r2, [r7, #12]
 80062e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	689a      	ldr	r2, [r3, #8]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	4a0c      	ldr	r2, [pc, #48]	; (800632c <TIM_Base_SetConfig+0xbc>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d007      	beq.n	8006310 <TIM_Base_SetConfig+0xa0>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	4a0b      	ldr	r2, [pc, #44]	; (8006330 <TIM_Base_SetConfig+0xc0>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d003      	beq.n	8006310 <TIM_Base_SetConfig+0xa0>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	4a0a      	ldr	r2, [pc, #40]	; (8006334 <TIM_Base_SetConfig+0xc4>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d103      	bne.n	8006318 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	691a      	ldr	r2, [r3, #16]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2201      	movs	r2, #1
 800631c:	615a      	str	r2, [r3, #20]
}
 800631e:	bf00      	nop
 8006320:	3714      	adds	r7, #20
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr
 800632a:	bf00      	nop
 800632c:	40012c00 	.word	0x40012c00
 8006330:	40014000 	.word	0x40014000
 8006334:	40014400 	.word	0x40014400

08006338 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006338:	b480      	push	{r7}
 800633a:	b087      	sub	sp, #28
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6a1b      	ldr	r3, [r3, #32]
 8006346:	f023 0201 	bic.w	r2, r3, #1
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6a1b      	ldr	r3, [r3, #32]
 8006352:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	699b      	ldr	r3, [r3, #24]
 800635e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006366:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800636a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f023 0303 	bic.w	r3, r3, #3
 8006372:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	68fa      	ldr	r2, [r7, #12]
 800637a:	4313      	orrs	r3, r2
 800637c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	f023 0302 	bic.w	r3, r3, #2
 8006384:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	697a      	ldr	r2, [r7, #20]
 800638c:	4313      	orrs	r3, r2
 800638e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	4a24      	ldr	r2, [pc, #144]	; (8006424 <TIM_OC1_SetConfig+0xec>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d007      	beq.n	80063a8 <TIM_OC1_SetConfig+0x70>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	4a23      	ldr	r2, [pc, #140]	; (8006428 <TIM_OC1_SetConfig+0xf0>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d003      	beq.n	80063a8 <TIM_OC1_SetConfig+0x70>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	4a22      	ldr	r2, [pc, #136]	; (800642c <TIM_OC1_SetConfig+0xf4>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d10c      	bne.n	80063c2 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	f023 0308 	bic.w	r3, r3, #8
 80063ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	697a      	ldr	r2, [r7, #20]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	f023 0304 	bic.w	r3, r3, #4
 80063c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	4a17      	ldr	r2, [pc, #92]	; (8006424 <TIM_OC1_SetConfig+0xec>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d007      	beq.n	80063da <TIM_OC1_SetConfig+0xa2>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4a16      	ldr	r2, [pc, #88]	; (8006428 <TIM_OC1_SetConfig+0xf0>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d003      	beq.n	80063da <TIM_OC1_SetConfig+0xa2>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	4a15      	ldr	r2, [pc, #84]	; (800642c <TIM_OC1_SetConfig+0xf4>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d111      	bne.n	80063fe <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80063e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	695b      	ldr	r3, [r3, #20]
 80063ee:	693a      	ldr	r2, [r7, #16]
 80063f0:	4313      	orrs	r3, r2
 80063f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	699b      	ldr	r3, [r3, #24]
 80063f8:	693a      	ldr	r2, [r7, #16]
 80063fa:	4313      	orrs	r3, r2
 80063fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	693a      	ldr	r2, [r7, #16]
 8006402:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	68fa      	ldr	r2, [r7, #12]
 8006408:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	685a      	ldr	r2, [r3, #4]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	697a      	ldr	r2, [r7, #20]
 8006416:	621a      	str	r2, [r3, #32]
}
 8006418:	bf00      	nop
 800641a:	371c      	adds	r7, #28
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr
 8006424:	40012c00 	.word	0x40012c00
 8006428:	40014000 	.word	0x40014000
 800642c:	40014400 	.word	0x40014400

08006430 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006430:	b480      	push	{r7}
 8006432:	b087      	sub	sp, #28
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6a1b      	ldr	r3, [r3, #32]
 800643e:	f023 0210 	bic.w	r2, r3, #16
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6a1b      	ldr	r3, [r3, #32]
 800644a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	699b      	ldr	r3, [r3, #24]
 8006456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800645e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006462:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800646a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	021b      	lsls	r3, r3, #8
 8006472:	68fa      	ldr	r2, [r7, #12]
 8006474:	4313      	orrs	r3, r2
 8006476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	f023 0320 	bic.w	r3, r3, #32
 800647e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	011b      	lsls	r3, r3, #4
 8006486:	697a      	ldr	r2, [r7, #20]
 8006488:	4313      	orrs	r3, r2
 800648a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	4a22      	ldr	r2, [pc, #136]	; (8006518 <TIM_OC2_SetConfig+0xe8>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d10d      	bne.n	80064b0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800649a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	011b      	lsls	r3, r3, #4
 80064a2:	697a      	ldr	r2, [r7, #20]
 80064a4:	4313      	orrs	r3, r2
 80064a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	4a19      	ldr	r2, [pc, #100]	; (8006518 <TIM_OC2_SetConfig+0xe8>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d007      	beq.n	80064c8 <TIM_OC2_SetConfig+0x98>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	4a18      	ldr	r2, [pc, #96]	; (800651c <TIM_OC2_SetConfig+0xec>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d003      	beq.n	80064c8 <TIM_OC2_SetConfig+0x98>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	4a17      	ldr	r2, [pc, #92]	; (8006520 <TIM_OC2_SetConfig+0xf0>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d113      	bne.n	80064f0 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80064ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80064d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	695b      	ldr	r3, [r3, #20]
 80064dc:	009b      	lsls	r3, r3, #2
 80064de:	693a      	ldr	r2, [r7, #16]
 80064e0:	4313      	orrs	r3, r2
 80064e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	699b      	ldr	r3, [r3, #24]
 80064e8:	009b      	lsls	r3, r3, #2
 80064ea:	693a      	ldr	r2, [r7, #16]
 80064ec:	4313      	orrs	r3, r2
 80064ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	693a      	ldr	r2, [r7, #16]
 80064f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	68fa      	ldr	r2, [r7, #12]
 80064fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	685a      	ldr	r2, [r3, #4]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	697a      	ldr	r2, [r7, #20]
 8006508:	621a      	str	r2, [r3, #32]
}
 800650a:	bf00      	nop
 800650c:	371c      	adds	r7, #28
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr
 8006516:	bf00      	nop
 8006518:	40012c00 	.word	0x40012c00
 800651c:	40014000 	.word	0x40014000
 8006520:	40014400 	.word	0x40014400

08006524 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006524:	b480      	push	{r7}
 8006526:	b087      	sub	sp, #28
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6a1b      	ldr	r3, [r3, #32]
 8006532:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6a1b      	ldr	r3, [r3, #32]
 800653e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	69db      	ldr	r3, [r3, #28]
 800654a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006556:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f023 0303 	bic.w	r3, r3, #3
 800655e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	68fa      	ldr	r2, [r7, #12]
 8006566:	4313      	orrs	r3, r2
 8006568:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006570:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	021b      	lsls	r3, r3, #8
 8006578:	697a      	ldr	r2, [r7, #20]
 800657a:	4313      	orrs	r3, r2
 800657c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4a21      	ldr	r2, [pc, #132]	; (8006608 <TIM_OC3_SetConfig+0xe4>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d10d      	bne.n	80065a2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800658c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	68db      	ldr	r3, [r3, #12]
 8006592:	021b      	lsls	r3, r3, #8
 8006594:	697a      	ldr	r2, [r7, #20]
 8006596:	4313      	orrs	r3, r2
 8006598:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	4a18      	ldr	r2, [pc, #96]	; (8006608 <TIM_OC3_SetConfig+0xe4>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d007      	beq.n	80065ba <TIM_OC3_SetConfig+0x96>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	4a17      	ldr	r2, [pc, #92]	; (800660c <TIM_OC3_SetConfig+0xe8>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d003      	beq.n	80065ba <TIM_OC3_SetConfig+0x96>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4a16      	ldr	r2, [pc, #88]	; (8006610 <TIM_OC3_SetConfig+0xec>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d113      	bne.n	80065e2 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80065c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	695b      	ldr	r3, [r3, #20]
 80065ce:	011b      	lsls	r3, r3, #4
 80065d0:	693a      	ldr	r2, [r7, #16]
 80065d2:	4313      	orrs	r3, r2
 80065d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	699b      	ldr	r3, [r3, #24]
 80065da:	011b      	lsls	r3, r3, #4
 80065dc:	693a      	ldr	r2, [r7, #16]
 80065de:	4313      	orrs	r3, r2
 80065e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	693a      	ldr	r2, [r7, #16]
 80065e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	68fa      	ldr	r2, [r7, #12]
 80065ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	685a      	ldr	r2, [r3, #4]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	697a      	ldr	r2, [r7, #20]
 80065fa:	621a      	str	r2, [r3, #32]
}
 80065fc:	bf00      	nop
 80065fe:	371c      	adds	r7, #28
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr
 8006608:	40012c00 	.word	0x40012c00
 800660c:	40014000 	.word	0x40014000
 8006610:	40014400 	.word	0x40014400

08006614 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006614:	b480      	push	{r7}
 8006616:	b087      	sub	sp, #28
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6a1b      	ldr	r3, [r3, #32]
 8006622:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6a1b      	ldr	r3, [r3, #32]
 800662e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	69db      	ldr	r3, [r3, #28]
 800663a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006642:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006646:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800664e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	021b      	lsls	r3, r3, #8
 8006656:	68fa      	ldr	r2, [r7, #12]
 8006658:	4313      	orrs	r3, r2
 800665a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006662:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	031b      	lsls	r3, r3, #12
 800666a:	693a      	ldr	r2, [r7, #16]
 800666c:	4313      	orrs	r3, r2
 800666e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	4a14      	ldr	r2, [pc, #80]	; (80066c4 <TIM_OC4_SetConfig+0xb0>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d007      	beq.n	8006688 <TIM_OC4_SetConfig+0x74>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	4a13      	ldr	r2, [pc, #76]	; (80066c8 <TIM_OC4_SetConfig+0xb4>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d003      	beq.n	8006688 <TIM_OC4_SetConfig+0x74>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	4a12      	ldr	r2, [pc, #72]	; (80066cc <TIM_OC4_SetConfig+0xb8>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d109      	bne.n	800669c <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800668e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	695b      	ldr	r3, [r3, #20]
 8006694:	019b      	lsls	r3, r3, #6
 8006696:	697a      	ldr	r2, [r7, #20]
 8006698:	4313      	orrs	r3, r2
 800669a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	697a      	ldr	r2, [r7, #20]
 80066a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	68fa      	ldr	r2, [r7, #12]
 80066a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	685a      	ldr	r2, [r3, #4]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	693a      	ldr	r2, [r7, #16]
 80066b4:	621a      	str	r2, [r3, #32]
}
 80066b6:	bf00      	nop
 80066b8:	371c      	adds	r7, #28
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr
 80066c2:	bf00      	nop
 80066c4:	40012c00 	.word	0x40012c00
 80066c8:	40014000 	.word	0x40014000
 80066cc:	40014400 	.word	0x40014400

080066d0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b087      	sub	sp, #28
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6a1b      	ldr	r3, [r3, #32]
 80066de:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6a1b      	ldr	r3, [r3, #32]
 80066ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006702:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	68fa      	ldr	r2, [r7, #12]
 800670a:	4313      	orrs	r3, r2
 800670c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006714:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	041b      	lsls	r3, r3, #16
 800671c:	693a      	ldr	r2, [r7, #16]
 800671e:	4313      	orrs	r3, r2
 8006720:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	4a13      	ldr	r2, [pc, #76]	; (8006774 <TIM_OC5_SetConfig+0xa4>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d007      	beq.n	800673a <TIM_OC5_SetConfig+0x6a>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	4a12      	ldr	r2, [pc, #72]	; (8006778 <TIM_OC5_SetConfig+0xa8>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d003      	beq.n	800673a <TIM_OC5_SetConfig+0x6a>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	4a11      	ldr	r2, [pc, #68]	; (800677c <TIM_OC5_SetConfig+0xac>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d109      	bne.n	800674e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006740:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	695b      	ldr	r3, [r3, #20]
 8006746:	021b      	lsls	r3, r3, #8
 8006748:	697a      	ldr	r2, [r7, #20]
 800674a:	4313      	orrs	r3, r2
 800674c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	697a      	ldr	r2, [r7, #20]
 8006752:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	68fa      	ldr	r2, [r7, #12]
 8006758:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	685a      	ldr	r2, [r3, #4]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	693a      	ldr	r2, [r7, #16]
 8006766:	621a      	str	r2, [r3, #32]
}
 8006768:	bf00      	nop
 800676a:	371c      	adds	r7, #28
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr
 8006774:	40012c00 	.word	0x40012c00
 8006778:	40014000 	.word	0x40014000
 800677c:	40014400 	.word	0x40014400

08006780 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006780:	b480      	push	{r7}
 8006782:	b087      	sub	sp, #28
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
 8006788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6a1b      	ldr	r3, [r3, #32]
 800678e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6a1b      	ldr	r3, [r3, #32]
 800679a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80067ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	021b      	lsls	r3, r3, #8
 80067ba:	68fa      	ldr	r2, [r7, #12]
 80067bc:	4313      	orrs	r3, r2
 80067be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80067c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	051b      	lsls	r3, r3, #20
 80067ce:	693a      	ldr	r2, [r7, #16]
 80067d0:	4313      	orrs	r3, r2
 80067d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	4a14      	ldr	r2, [pc, #80]	; (8006828 <TIM_OC6_SetConfig+0xa8>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d007      	beq.n	80067ec <TIM_OC6_SetConfig+0x6c>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	4a13      	ldr	r2, [pc, #76]	; (800682c <TIM_OC6_SetConfig+0xac>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d003      	beq.n	80067ec <TIM_OC6_SetConfig+0x6c>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	4a12      	ldr	r2, [pc, #72]	; (8006830 <TIM_OC6_SetConfig+0xb0>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d109      	bne.n	8006800 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80067f2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	695b      	ldr	r3, [r3, #20]
 80067f8:	029b      	lsls	r3, r3, #10
 80067fa:	697a      	ldr	r2, [r7, #20]
 80067fc:	4313      	orrs	r3, r2
 80067fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	697a      	ldr	r2, [r7, #20]
 8006804:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	68fa      	ldr	r2, [r7, #12]
 800680a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	685a      	ldr	r2, [r3, #4]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	693a      	ldr	r2, [r7, #16]
 8006818:	621a      	str	r2, [r3, #32]
}
 800681a:	bf00      	nop
 800681c:	371c      	adds	r7, #28
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr
 8006826:	bf00      	nop
 8006828:	40012c00 	.word	0x40012c00
 800682c:	40014000 	.word	0x40014000
 8006830:	40014400 	.word	0x40014400

08006834 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006834:	b480      	push	{r7}
 8006836:	b087      	sub	sp, #28
 8006838:	af00      	add	r7, sp, #0
 800683a:	60f8      	str	r0, [r7, #12]
 800683c:	60b9      	str	r1, [r7, #8]
 800683e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	6a1b      	ldr	r3, [r3, #32]
 8006844:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	6a1b      	ldr	r3, [r3, #32]
 800684a:	f023 0201 	bic.w	r2, r3, #1
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	699b      	ldr	r3, [r3, #24]
 8006856:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800685e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	011b      	lsls	r3, r3, #4
 8006864:	693a      	ldr	r2, [r7, #16]
 8006866:	4313      	orrs	r3, r2
 8006868:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	f023 030a 	bic.w	r3, r3, #10
 8006870:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006872:	697a      	ldr	r2, [r7, #20]
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	4313      	orrs	r3, r2
 8006878:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	693a      	ldr	r2, [r7, #16]
 800687e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	697a      	ldr	r2, [r7, #20]
 8006884:	621a      	str	r2, [r3, #32]
}
 8006886:	bf00      	nop
 8006888:	371c      	adds	r7, #28
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr

08006892 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006892:	b480      	push	{r7}
 8006894:	b087      	sub	sp, #28
 8006896:	af00      	add	r7, sp, #0
 8006898:	60f8      	str	r0, [r7, #12]
 800689a:	60b9      	str	r1, [r7, #8]
 800689c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	6a1b      	ldr	r3, [r3, #32]
 80068a2:	f023 0210 	bic.w	r2, r3, #16
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	699b      	ldr	r3, [r3, #24]
 80068ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	6a1b      	ldr	r3, [r3, #32]
 80068b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80068bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	031b      	lsls	r3, r3, #12
 80068c2:	697a      	ldr	r2, [r7, #20]
 80068c4:	4313      	orrs	r3, r2
 80068c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80068ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	011b      	lsls	r3, r3, #4
 80068d4:	693a      	ldr	r2, [r7, #16]
 80068d6:	4313      	orrs	r3, r2
 80068d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	697a      	ldr	r2, [r7, #20]
 80068de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	693a      	ldr	r2, [r7, #16]
 80068e4:	621a      	str	r2, [r3, #32]
}
 80068e6:	bf00      	nop
 80068e8:	371c      	adds	r7, #28
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr

080068f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80068f2:	b480      	push	{r7}
 80068f4:	b085      	sub	sp, #20
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	6078      	str	r0, [r7, #4]
 80068fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006908:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800690a:	683a      	ldr	r2, [r7, #0]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	4313      	orrs	r3, r2
 8006910:	f043 0307 	orr.w	r3, r3, #7
 8006914:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	68fa      	ldr	r2, [r7, #12]
 800691a:	609a      	str	r2, [r3, #8]
}
 800691c:	bf00      	nop
 800691e:	3714      	adds	r7, #20
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr

08006928 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006928:	b480      	push	{r7}
 800692a:	b087      	sub	sp, #28
 800692c:	af00      	add	r7, sp, #0
 800692e:	60f8      	str	r0, [r7, #12]
 8006930:	60b9      	str	r1, [r7, #8]
 8006932:	607a      	str	r2, [r7, #4]
 8006934:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006942:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	021a      	lsls	r2, r3, #8
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	431a      	orrs	r2, r3
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	4313      	orrs	r3, r2
 8006950:	697a      	ldr	r2, [r7, #20]
 8006952:	4313      	orrs	r3, r2
 8006954:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	697a      	ldr	r2, [r7, #20]
 800695a:	609a      	str	r2, [r3, #8]
}
 800695c:	bf00      	nop
 800695e:	371c      	adds	r7, #28
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr

08006968 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006968:	b480      	push	{r7}
 800696a:	b087      	sub	sp, #28
 800696c:	af00      	add	r7, sp, #0
 800696e:	60f8      	str	r0, [r7, #12]
 8006970:	60b9      	str	r1, [r7, #8]
 8006972:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	f003 031f 	and.w	r3, r3, #31
 800697a:	2201      	movs	r2, #1
 800697c:	fa02 f303 	lsl.w	r3, r2, r3
 8006980:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	6a1a      	ldr	r2, [r3, #32]
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	43db      	mvns	r3, r3
 800698a:	401a      	ands	r2, r3
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6a1a      	ldr	r2, [r3, #32]
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	f003 031f 	and.w	r3, r3, #31
 800699a:	6879      	ldr	r1, [r7, #4]
 800699c:	fa01 f303 	lsl.w	r3, r1, r3
 80069a0:	431a      	orrs	r2, r3
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	621a      	str	r2, [r3, #32]
}
 80069a6:	bf00      	nop
 80069a8:	371c      	adds	r7, #28
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr
	...

080069b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b085      	sub	sp, #20
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d101      	bne.n	80069cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80069c8:	2302      	movs	r3, #2
 80069ca:	e04f      	b.n	8006a6c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2201      	movs	r2, #1
 80069d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2202      	movs	r2, #2
 80069d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a21      	ldr	r2, [pc, #132]	; (8006a78 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d108      	bne.n	8006a08 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80069fc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	68fa      	ldr	r2, [r7, #12]
 8006a04:	4313      	orrs	r3, r2
 8006a06:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	68fa      	ldr	r2, [r7, #12]
 8006a16:	4313      	orrs	r3, r2
 8006a18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	68fa      	ldr	r2, [r7, #12]
 8006a20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a14      	ldr	r2, [pc, #80]	; (8006a78 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d009      	beq.n	8006a40 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a34:	d004      	beq.n	8006a40 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a10      	ldr	r2, [pc, #64]	; (8006a7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d10c      	bne.n	8006a5a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a46:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	68ba      	ldr	r2, [r7, #8]
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	68ba      	ldr	r2, [r7, #8]
 8006a58:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2200      	movs	r2, #0
 8006a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a6a:	2300      	movs	r3, #0
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3714      	adds	r7, #20
 8006a70:	46bd      	mov	sp, r7
 8006a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a76:	4770      	bx	lr
 8006a78:	40012c00 	.word	0x40012c00
 8006a7c:	40014000 	.word	0x40014000

08006a80 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b085      	sub	sp, #20
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d101      	bne.n	8006a9c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006a98:	2302      	movs	r3, #2
 8006a9a:	e060      	b.n	8006b5e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	68db      	ldr	r3, [r3, #12]
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	4313      	orrs	r3, r2
 8006abe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	4313      	orrs	r3, r2
 8006acc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	691b      	ldr	r3, [r3, #16]
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	695b      	ldr	r3, [r3, #20]
 8006af4:	4313      	orrs	r3, r2
 8006af6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b02:	4313      	orrs	r3, r2
 8006b04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	699b      	ldr	r3, [r3, #24]
 8006b10:	041b      	lsls	r3, r3, #16
 8006b12:	4313      	orrs	r3, r2
 8006b14:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a14      	ldr	r2, [pc, #80]	; (8006b6c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d115      	bne.n	8006b4c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b2a:	051b      	lsls	r3, r3, #20
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	69db      	ldr	r3, [r3, #28]
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	6a1b      	ldr	r3, [r3, #32]
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	68fa      	ldr	r2, [r7, #12]
 8006b52:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2200      	movs	r2, #0
 8006b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b5c:	2300      	movs	r3, #0
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3714      	adds	r7, #20
 8006b62:	46bd      	mov	sp, r7
 8006b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b68:	4770      	bx	lr
 8006b6a:	bf00      	nop
 8006b6c:	40012c00 	.word	0x40012c00

08006b70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b082      	sub	sp, #8
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d101      	bne.n	8006b82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e040      	b.n	8006c04 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d106      	bne.n	8006b98 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f001 f816 	bl	8007bc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2224      	movs	r2, #36	; 0x24
 8006b9c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f022 0201 	bic.w	r2, r2, #1
 8006bac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f000 f870 	bl	8006c94 <UART_SetConfig>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	2b01      	cmp	r3, #1
 8006bb8:	d101      	bne.n	8006bbe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e022      	b.n	8006c04 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d002      	beq.n	8006bcc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f000 fabe 	bl	8007148 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	685a      	ldr	r2, [r3, #4]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006bda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	689a      	ldr	r2, [r3, #8]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006bea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	681a      	ldr	r2, [r3, #0]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f042 0201 	orr.w	r2, r2, #1
 8006bfa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f000 fb45 	bl	800728c <UART_CheckIdleState>
 8006c02:	4603      	mov	r3, r0
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3708      	adds	r7, #8
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}

08006c0c <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b082      	sub	sp, #8
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d101      	bne.n	8006c1e <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	e02b      	b.n	8006c76 <HAL_UART_DeInit+0x6a>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2224      	movs	r2, #36	; 0x24
 8006c22:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f022 0201 	bic.w	r2, r2, #1
 8006c32:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	2200      	movs	r2, #0
 8006c42:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f000 f816 	bl	8006c7e <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2200      	movs	r2, #0
 8006c56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->gState = HAL_UART_STATE_RESET;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2200      	movs	r2, #0
 8006c64:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006c74:	2300      	movs	r3, #0
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3708      	adds	r7, #8
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}

08006c7e <HAL_UART_MspDeInit>:
  * @brief DeInitialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
 8006c7e:	b480      	push	{r7}
 8006c80:	b083      	sub	sp, #12
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspDeInit can be implemented in the user file
   */
}
 8006c86:	bf00      	nop
 8006c88:	370c      	adds	r7, #12
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr
	...

08006c94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c98:	b08a      	sub	sp, #40	; 0x28
 8006c9a:	af00      	add	r7, sp, #0
 8006c9c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	689a      	ldr	r2, [r3, #8]
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	691b      	ldr	r3, [r3, #16]
 8006cac:	431a      	orrs	r2, r3
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	695b      	ldr	r3, [r3, #20]
 8006cb2:	431a      	orrs	r2, r3
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	69db      	ldr	r3, [r3, #28]
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	4b9e      	ldr	r3, [pc, #632]	; (8006f3c <UART_SetConfig+0x2a8>)
 8006cc4:	4013      	ands	r3, r2
 8006cc6:	68fa      	ldr	r2, [r7, #12]
 8006cc8:	6812      	ldr	r2, [r2, #0]
 8006cca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006ccc:	430b      	orrs	r3, r1
 8006cce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	68da      	ldr	r2, [r3, #12]
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	430a      	orrs	r2, r1
 8006ce4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	699b      	ldr	r3, [r3, #24]
 8006cea:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a93      	ldr	r2, [pc, #588]	; (8006f40 <UART_SetConfig+0x2ac>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d004      	beq.n	8006d00 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	6a1b      	ldr	r3, [r3, #32]
 8006cfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d10:	430a      	orrs	r2, r1
 8006d12:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a8a      	ldr	r2, [pc, #552]	; (8006f44 <UART_SetConfig+0x2b0>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d126      	bne.n	8006d6c <UART_SetConfig+0xd8>
 8006d1e:	4b8a      	ldr	r3, [pc, #552]	; (8006f48 <UART_SetConfig+0x2b4>)
 8006d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d24:	f003 0303 	and.w	r3, r3, #3
 8006d28:	2b03      	cmp	r3, #3
 8006d2a:	d81b      	bhi.n	8006d64 <UART_SetConfig+0xd0>
 8006d2c:	a201      	add	r2, pc, #4	; (adr r2, 8006d34 <UART_SetConfig+0xa0>)
 8006d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d32:	bf00      	nop
 8006d34:	08006d45 	.word	0x08006d45
 8006d38:	08006d55 	.word	0x08006d55
 8006d3c:	08006d4d 	.word	0x08006d4d
 8006d40:	08006d5d 	.word	0x08006d5d
 8006d44:	2301      	movs	r3, #1
 8006d46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d4a:	e0ab      	b.n	8006ea4 <UART_SetConfig+0x210>
 8006d4c:	2302      	movs	r3, #2
 8006d4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d52:	e0a7      	b.n	8006ea4 <UART_SetConfig+0x210>
 8006d54:	2304      	movs	r3, #4
 8006d56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d5a:	e0a3      	b.n	8006ea4 <UART_SetConfig+0x210>
 8006d5c:	2308      	movs	r3, #8
 8006d5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d62:	e09f      	b.n	8006ea4 <UART_SetConfig+0x210>
 8006d64:	2310      	movs	r3, #16
 8006d66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d6a:	e09b      	b.n	8006ea4 <UART_SetConfig+0x210>
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a76      	ldr	r2, [pc, #472]	; (8006f4c <UART_SetConfig+0x2b8>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d138      	bne.n	8006de8 <UART_SetConfig+0x154>
 8006d76:	4b74      	ldr	r3, [pc, #464]	; (8006f48 <UART_SetConfig+0x2b4>)
 8006d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d7c:	f003 030c 	and.w	r3, r3, #12
 8006d80:	2b0c      	cmp	r3, #12
 8006d82:	d82d      	bhi.n	8006de0 <UART_SetConfig+0x14c>
 8006d84:	a201      	add	r2, pc, #4	; (adr r2, 8006d8c <UART_SetConfig+0xf8>)
 8006d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d8a:	bf00      	nop
 8006d8c:	08006dc1 	.word	0x08006dc1
 8006d90:	08006de1 	.word	0x08006de1
 8006d94:	08006de1 	.word	0x08006de1
 8006d98:	08006de1 	.word	0x08006de1
 8006d9c:	08006dd1 	.word	0x08006dd1
 8006da0:	08006de1 	.word	0x08006de1
 8006da4:	08006de1 	.word	0x08006de1
 8006da8:	08006de1 	.word	0x08006de1
 8006dac:	08006dc9 	.word	0x08006dc9
 8006db0:	08006de1 	.word	0x08006de1
 8006db4:	08006de1 	.word	0x08006de1
 8006db8:	08006de1 	.word	0x08006de1
 8006dbc:	08006dd9 	.word	0x08006dd9
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006dc6:	e06d      	b.n	8006ea4 <UART_SetConfig+0x210>
 8006dc8:	2302      	movs	r3, #2
 8006dca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006dce:	e069      	b.n	8006ea4 <UART_SetConfig+0x210>
 8006dd0:	2304      	movs	r3, #4
 8006dd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006dd6:	e065      	b.n	8006ea4 <UART_SetConfig+0x210>
 8006dd8:	2308      	movs	r3, #8
 8006dda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006dde:	e061      	b.n	8006ea4 <UART_SetConfig+0x210>
 8006de0:	2310      	movs	r3, #16
 8006de2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006de6:	e05d      	b.n	8006ea4 <UART_SetConfig+0x210>
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a58      	ldr	r2, [pc, #352]	; (8006f50 <UART_SetConfig+0x2bc>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d125      	bne.n	8006e3e <UART_SetConfig+0x1aa>
 8006df2:	4b55      	ldr	r3, [pc, #340]	; (8006f48 <UART_SetConfig+0x2b4>)
 8006df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006df8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006dfc:	2b30      	cmp	r3, #48	; 0x30
 8006dfe:	d016      	beq.n	8006e2e <UART_SetConfig+0x19a>
 8006e00:	2b30      	cmp	r3, #48	; 0x30
 8006e02:	d818      	bhi.n	8006e36 <UART_SetConfig+0x1a2>
 8006e04:	2b20      	cmp	r3, #32
 8006e06:	d00a      	beq.n	8006e1e <UART_SetConfig+0x18a>
 8006e08:	2b20      	cmp	r3, #32
 8006e0a:	d814      	bhi.n	8006e36 <UART_SetConfig+0x1a2>
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d002      	beq.n	8006e16 <UART_SetConfig+0x182>
 8006e10:	2b10      	cmp	r3, #16
 8006e12:	d008      	beq.n	8006e26 <UART_SetConfig+0x192>
 8006e14:	e00f      	b.n	8006e36 <UART_SetConfig+0x1a2>
 8006e16:	2300      	movs	r3, #0
 8006e18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e1c:	e042      	b.n	8006ea4 <UART_SetConfig+0x210>
 8006e1e:	2302      	movs	r3, #2
 8006e20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e24:	e03e      	b.n	8006ea4 <UART_SetConfig+0x210>
 8006e26:	2304      	movs	r3, #4
 8006e28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e2c:	e03a      	b.n	8006ea4 <UART_SetConfig+0x210>
 8006e2e:	2308      	movs	r3, #8
 8006e30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e34:	e036      	b.n	8006ea4 <UART_SetConfig+0x210>
 8006e36:	2310      	movs	r3, #16
 8006e38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e3c:	e032      	b.n	8006ea4 <UART_SetConfig+0x210>
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a3f      	ldr	r2, [pc, #252]	; (8006f40 <UART_SetConfig+0x2ac>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d12a      	bne.n	8006e9e <UART_SetConfig+0x20a>
 8006e48:	4b3f      	ldr	r3, [pc, #252]	; (8006f48 <UART_SetConfig+0x2b4>)
 8006e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e4e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006e52:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e56:	d01a      	beq.n	8006e8e <UART_SetConfig+0x1fa>
 8006e58:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e5c:	d81b      	bhi.n	8006e96 <UART_SetConfig+0x202>
 8006e5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e62:	d00c      	beq.n	8006e7e <UART_SetConfig+0x1ea>
 8006e64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e68:	d815      	bhi.n	8006e96 <UART_SetConfig+0x202>
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d003      	beq.n	8006e76 <UART_SetConfig+0x1e2>
 8006e6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e72:	d008      	beq.n	8006e86 <UART_SetConfig+0x1f2>
 8006e74:	e00f      	b.n	8006e96 <UART_SetConfig+0x202>
 8006e76:	2300      	movs	r3, #0
 8006e78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e7c:	e012      	b.n	8006ea4 <UART_SetConfig+0x210>
 8006e7e:	2302      	movs	r3, #2
 8006e80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e84:	e00e      	b.n	8006ea4 <UART_SetConfig+0x210>
 8006e86:	2304      	movs	r3, #4
 8006e88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e8c:	e00a      	b.n	8006ea4 <UART_SetConfig+0x210>
 8006e8e:	2308      	movs	r3, #8
 8006e90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e94:	e006      	b.n	8006ea4 <UART_SetConfig+0x210>
 8006e96:	2310      	movs	r3, #16
 8006e98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e9c:	e002      	b.n	8006ea4 <UART_SetConfig+0x210>
 8006e9e:	2310      	movs	r3, #16
 8006ea0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a25      	ldr	r2, [pc, #148]	; (8006f40 <UART_SetConfig+0x2ac>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	f040 808a 	bne.w	8006fc4 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006eb0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006eb4:	2b08      	cmp	r3, #8
 8006eb6:	d824      	bhi.n	8006f02 <UART_SetConfig+0x26e>
 8006eb8:	a201      	add	r2, pc, #4	; (adr r2, 8006ec0 <UART_SetConfig+0x22c>)
 8006eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ebe:	bf00      	nop
 8006ec0:	08006ee5 	.word	0x08006ee5
 8006ec4:	08006f03 	.word	0x08006f03
 8006ec8:	08006eed 	.word	0x08006eed
 8006ecc:	08006f03 	.word	0x08006f03
 8006ed0:	08006ef3 	.word	0x08006ef3
 8006ed4:	08006f03 	.word	0x08006f03
 8006ed8:	08006f03 	.word	0x08006f03
 8006edc:	08006f03 	.word	0x08006f03
 8006ee0:	08006efb 	.word	0x08006efb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ee4:	f7fd ffde 	bl	8004ea4 <HAL_RCC_GetPCLK1Freq>
 8006ee8:	61f8      	str	r0, [r7, #28]
        break;
 8006eea:	e010      	b.n	8006f0e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006eec:	4b19      	ldr	r3, [pc, #100]	; (8006f54 <UART_SetConfig+0x2c0>)
 8006eee:	61fb      	str	r3, [r7, #28]
        break;
 8006ef0:	e00d      	b.n	8006f0e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ef2:	f7fd ff3f 	bl	8004d74 <HAL_RCC_GetSysClockFreq>
 8006ef6:	61f8      	str	r0, [r7, #28]
        break;
 8006ef8:	e009      	b.n	8006f0e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006efa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006efe:	61fb      	str	r3, [r7, #28]
        break;
 8006f00:	e005      	b.n	8006f0e <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8006f02:	2300      	movs	r3, #0
 8006f04:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006f06:	2301      	movs	r3, #1
 8006f08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006f0c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006f0e:	69fb      	ldr	r3, [r7, #28]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	f000 8109 	beq.w	8007128 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	685a      	ldr	r2, [r3, #4]
 8006f1a:	4613      	mov	r3, r2
 8006f1c:	005b      	lsls	r3, r3, #1
 8006f1e:	4413      	add	r3, r2
 8006f20:	69fa      	ldr	r2, [r7, #28]
 8006f22:	429a      	cmp	r2, r3
 8006f24:	d305      	bcc.n	8006f32 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006f2c:	69fa      	ldr	r2, [r7, #28]
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d912      	bls.n	8006f58 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8006f32:	2301      	movs	r3, #1
 8006f34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006f38:	e0f6      	b.n	8007128 <UART_SetConfig+0x494>
 8006f3a:	bf00      	nop
 8006f3c:	efff69f3 	.word	0xefff69f3
 8006f40:	40008000 	.word	0x40008000
 8006f44:	40013800 	.word	0x40013800
 8006f48:	40021000 	.word	0x40021000
 8006f4c:	40004400 	.word	0x40004400
 8006f50:	40004800 	.word	0x40004800
 8006f54:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006f58:	69fb      	ldr	r3, [r7, #28]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	461c      	mov	r4, r3
 8006f5e:	4615      	mov	r5, r2
 8006f60:	f04f 0200 	mov.w	r2, #0
 8006f64:	f04f 0300 	mov.w	r3, #0
 8006f68:	022b      	lsls	r3, r5, #8
 8006f6a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006f6e:	0222      	lsls	r2, r4, #8
 8006f70:	68f9      	ldr	r1, [r7, #12]
 8006f72:	6849      	ldr	r1, [r1, #4]
 8006f74:	0849      	lsrs	r1, r1, #1
 8006f76:	2000      	movs	r0, #0
 8006f78:	4688      	mov	r8, r1
 8006f7a:	4681      	mov	r9, r0
 8006f7c:	eb12 0a08 	adds.w	sl, r2, r8
 8006f80:	eb43 0b09 	adc.w	fp, r3, r9
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	603b      	str	r3, [r7, #0]
 8006f8c:	607a      	str	r2, [r7, #4]
 8006f8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f92:	4650      	mov	r0, sl
 8006f94:	4659      	mov	r1, fp
 8006f96:	f7f9 f96b 	bl	8000270 <__aeabi_uldivmod>
 8006f9a:	4602      	mov	r2, r0
 8006f9c:	460b      	mov	r3, r1
 8006f9e:	4613      	mov	r3, r2
 8006fa0:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006fa2:	69bb      	ldr	r3, [r7, #24]
 8006fa4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fa8:	d308      	bcc.n	8006fbc <UART_SetConfig+0x328>
 8006faa:	69bb      	ldr	r3, [r7, #24]
 8006fac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fb0:	d204      	bcs.n	8006fbc <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	69ba      	ldr	r2, [r7, #24]
 8006fb8:	60da      	str	r2, [r3, #12]
 8006fba:	e0b5      	b.n	8007128 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006fc2:	e0b1      	b.n	8007128 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	69db      	ldr	r3, [r3, #28]
 8006fc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fcc:	d15d      	bne.n	800708a <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8006fce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006fd2:	2b08      	cmp	r3, #8
 8006fd4:	d827      	bhi.n	8007026 <UART_SetConfig+0x392>
 8006fd6:	a201      	add	r2, pc, #4	; (adr r2, 8006fdc <UART_SetConfig+0x348>)
 8006fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fdc:	08007001 	.word	0x08007001
 8006fe0:	08007009 	.word	0x08007009
 8006fe4:	08007011 	.word	0x08007011
 8006fe8:	08007027 	.word	0x08007027
 8006fec:	08007017 	.word	0x08007017
 8006ff0:	08007027 	.word	0x08007027
 8006ff4:	08007027 	.word	0x08007027
 8006ff8:	08007027 	.word	0x08007027
 8006ffc:	0800701f 	.word	0x0800701f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007000:	f7fd ff50 	bl	8004ea4 <HAL_RCC_GetPCLK1Freq>
 8007004:	61f8      	str	r0, [r7, #28]
        break;
 8007006:	e014      	b.n	8007032 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007008:	f7fd ff62 	bl	8004ed0 <HAL_RCC_GetPCLK2Freq>
 800700c:	61f8      	str	r0, [r7, #28]
        break;
 800700e:	e010      	b.n	8007032 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007010:	4b4c      	ldr	r3, [pc, #304]	; (8007144 <UART_SetConfig+0x4b0>)
 8007012:	61fb      	str	r3, [r7, #28]
        break;
 8007014:	e00d      	b.n	8007032 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007016:	f7fd fead 	bl	8004d74 <HAL_RCC_GetSysClockFreq>
 800701a:	61f8      	str	r0, [r7, #28]
        break;
 800701c:	e009      	b.n	8007032 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800701e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007022:	61fb      	str	r3, [r7, #28]
        break;
 8007024:	e005      	b.n	8007032 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8007026:	2300      	movs	r3, #0
 8007028:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800702a:	2301      	movs	r3, #1
 800702c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007030:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007032:	69fb      	ldr	r3, [r7, #28]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d077      	beq.n	8007128 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007038:	69fb      	ldr	r3, [r7, #28]
 800703a:	005a      	lsls	r2, r3, #1
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	085b      	lsrs	r3, r3, #1
 8007042:	441a      	add	r2, r3
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	fbb2 f3f3 	udiv	r3, r2, r3
 800704c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800704e:	69bb      	ldr	r3, [r7, #24]
 8007050:	2b0f      	cmp	r3, #15
 8007052:	d916      	bls.n	8007082 <UART_SetConfig+0x3ee>
 8007054:	69bb      	ldr	r3, [r7, #24]
 8007056:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800705a:	d212      	bcs.n	8007082 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800705c:	69bb      	ldr	r3, [r7, #24]
 800705e:	b29b      	uxth	r3, r3
 8007060:	f023 030f 	bic.w	r3, r3, #15
 8007064:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007066:	69bb      	ldr	r3, [r7, #24]
 8007068:	085b      	lsrs	r3, r3, #1
 800706a:	b29b      	uxth	r3, r3
 800706c:	f003 0307 	and.w	r3, r3, #7
 8007070:	b29a      	uxth	r2, r3
 8007072:	8afb      	ldrh	r3, [r7, #22]
 8007074:	4313      	orrs	r3, r2
 8007076:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	8afa      	ldrh	r2, [r7, #22]
 800707e:	60da      	str	r2, [r3, #12]
 8007080:	e052      	b.n	8007128 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8007082:	2301      	movs	r3, #1
 8007084:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007088:	e04e      	b.n	8007128 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 800708a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800708e:	2b08      	cmp	r3, #8
 8007090:	d827      	bhi.n	80070e2 <UART_SetConfig+0x44e>
 8007092:	a201      	add	r2, pc, #4	; (adr r2, 8007098 <UART_SetConfig+0x404>)
 8007094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007098:	080070bd 	.word	0x080070bd
 800709c:	080070c5 	.word	0x080070c5
 80070a0:	080070cd 	.word	0x080070cd
 80070a4:	080070e3 	.word	0x080070e3
 80070a8:	080070d3 	.word	0x080070d3
 80070ac:	080070e3 	.word	0x080070e3
 80070b0:	080070e3 	.word	0x080070e3
 80070b4:	080070e3 	.word	0x080070e3
 80070b8:	080070db 	.word	0x080070db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070bc:	f7fd fef2 	bl	8004ea4 <HAL_RCC_GetPCLK1Freq>
 80070c0:	61f8      	str	r0, [r7, #28]
        break;
 80070c2:	e014      	b.n	80070ee <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80070c4:	f7fd ff04 	bl	8004ed0 <HAL_RCC_GetPCLK2Freq>
 80070c8:	61f8      	str	r0, [r7, #28]
        break;
 80070ca:	e010      	b.n	80070ee <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070cc:	4b1d      	ldr	r3, [pc, #116]	; (8007144 <UART_SetConfig+0x4b0>)
 80070ce:	61fb      	str	r3, [r7, #28]
        break;
 80070d0:	e00d      	b.n	80070ee <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070d2:	f7fd fe4f 	bl	8004d74 <HAL_RCC_GetSysClockFreq>
 80070d6:	61f8      	str	r0, [r7, #28]
        break;
 80070d8:	e009      	b.n	80070ee <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070de:	61fb      	str	r3, [r7, #28]
        break;
 80070e0:	e005      	b.n	80070ee <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 80070e2:	2300      	movs	r3, #0
 80070e4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80070e6:	2301      	movs	r3, #1
 80070e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80070ec:	bf00      	nop
    }

    if (pclk != 0U)
 80070ee:	69fb      	ldr	r3, [r7, #28]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d019      	beq.n	8007128 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	085a      	lsrs	r2, r3, #1
 80070fa:	69fb      	ldr	r3, [r7, #28]
 80070fc:	441a      	add	r2, r3
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	fbb2 f3f3 	udiv	r3, r2, r3
 8007106:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007108:	69bb      	ldr	r3, [r7, #24]
 800710a:	2b0f      	cmp	r3, #15
 800710c:	d909      	bls.n	8007122 <UART_SetConfig+0x48e>
 800710e:	69bb      	ldr	r3, [r7, #24]
 8007110:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007114:	d205      	bcs.n	8007122 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007116:	69bb      	ldr	r3, [r7, #24]
 8007118:	b29a      	uxth	r2, r3
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	60da      	str	r2, [r3, #12]
 8007120:	e002      	b.n	8007128 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8007122:	2301      	movs	r3, #1
 8007124:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2200      	movs	r2, #0
 800712c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2200      	movs	r2, #0
 8007132:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007134:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007138:	4618      	mov	r0, r3
 800713a:	3728      	adds	r7, #40	; 0x28
 800713c:	46bd      	mov	sp, r7
 800713e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007142:	bf00      	nop
 8007144:	00f42400 	.word	0x00f42400

08007148 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007148:	b480      	push	{r7}
 800714a:	b083      	sub	sp, #12
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007154:	f003 0301 	and.w	r3, r3, #1
 8007158:	2b00      	cmp	r3, #0
 800715a:	d00a      	beq.n	8007172 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	430a      	orrs	r2, r1
 8007170:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007176:	f003 0302 	and.w	r3, r3, #2
 800717a:	2b00      	cmp	r3, #0
 800717c:	d00a      	beq.n	8007194 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	430a      	orrs	r2, r1
 8007192:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007198:	f003 0304 	and.w	r3, r3, #4
 800719c:	2b00      	cmp	r3, #0
 800719e:	d00a      	beq.n	80071b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	430a      	orrs	r2, r1
 80071b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ba:	f003 0308 	and.w	r3, r3, #8
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d00a      	beq.n	80071d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	430a      	orrs	r2, r1
 80071d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071dc:	f003 0310 	and.w	r3, r3, #16
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d00a      	beq.n	80071fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	689b      	ldr	r3, [r3, #8]
 80071ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	430a      	orrs	r2, r1
 80071f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071fe:	f003 0320 	and.w	r3, r3, #32
 8007202:	2b00      	cmp	r3, #0
 8007204:	d00a      	beq.n	800721c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	689b      	ldr	r3, [r3, #8]
 800720c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	430a      	orrs	r2, r1
 800721a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007224:	2b00      	cmp	r3, #0
 8007226:	d01a      	beq.n	800725e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	430a      	orrs	r2, r1
 800723c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007242:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007246:	d10a      	bne.n	800725e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	430a      	orrs	r2, r1
 800725c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007266:	2b00      	cmp	r3, #0
 8007268:	d00a      	beq.n	8007280 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	685b      	ldr	r3, [r3, #4]
 8007270:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	430a      	orrs	r2, r1
 800727e:	605a      	str	r2, [r3, #4]
  }
}
 8007280:	bf00      	nop
 8007282:	370c      	adds	r7, #12
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr

0800728c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b086      	sub	sp, #24
 8007290:	af02      	add	r7, sp, #8
 8007292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2200      	movs	r2, #0
 8007298:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800729c:	f7fc f9b4 	bl	8003608 <HAL_GetTick>
 80072a0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f003 0308 	and.w	r3, r3, #8
 80072ac:	2b08      	cmp	r3, #8
 80072ae:	d10e      	bne.n	80072ce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80072b4:	9300      	str	r3, [sp, #0]
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2200      	movs	r2, #0
 80072ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f000 f82d 	bl	800731e <UART_WaitOnFlagUntilTimeout>
 80072c4:	4603      	mov	r3, r0
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d001      	beq.n	80072ce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072ca:	2303      	movs	r3, #3
 80072cc:	e023      	b.n	8007316 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f003 0304 	and.w	r3, r3, #4
 80072d8:	2b04      	cmp	r3, #4
 80072da:	d10e      	bne.n	80072fa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80072e0:	9300      	str	r3, [sp, #0]
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2200      	movs	r2, #0
 80072e6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f000 f817 	bl	800731e <UART_WaitOnFlagUntilTimeout>
 80072f0:	4603      	mov	r3, r0
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d001      	beq.n	80072fa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072f6:	2303      	movs	r3, #3
 80072f8:	e00d      	b.n	8007316 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2220      	movs	r2, #32
 80072fe:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2220      	movs	r2, #32
 8007304:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2200      	movs	r2, #0
 800730a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2200      	movs	r2, #0
 8007310:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007314:	2300      	movs	r3, #0
}
 8007316:	4618      	mov	r0, r3
 8007318:	3710      	adds	r7, #16
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}

0800731e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800731e:	b580      	push	{r7, lr}
 8007320:	b09c      	sub	sp, #112	; 0x70
 8007322:	af00      	add	r7, sp, #0
 8007324:	60f8      	str	r0, [r7, #12]
 8007326:	60b9      	str	r1, [r7, #8]
 8007328:	603b      	str	r3, [r7, #0]
 800732a:	4613      	mov	r3, r2
 800732c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800732e:	e0a5      	b.n	800747c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007330:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007332:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007336:	f000 80a1 	beq.w	800747c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800733a:	f7fc f965 	bl	8003608 <HAL_GetTick>
 800733e:	4602      	mov	r2, r0
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	1ad3      	subs	r3, r2, r3
 8007344:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007346:	429a      	cmp	r2, r3
 8007348:	d302      	bcc.n	8007350 <UART_WaitOnFlagUntilTimeout+0x32>
 800734a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800734c:	2b00      	cmp	r3, #0
 800734e:	d13e      	bne.n	80073ce <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007356:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007358:	e853 3f00 	ldrex	r3, [r3]
 800735c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800735e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007360:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007364:	667b      	str	r3, [r7, #100]	; 0x64
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	461a      	mov	r2, r3
 800736c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800736e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007370:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007372:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007374:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007376:	e841 2300 	strex	r3, r2, [r1]
 800737a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800737c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800737e:	2b00      	cmp	r3, #0
 8007380:	d1e6      	bne.n	8007350 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	3308      	adds	r3, #8
 8007388:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800738a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800738c:	e853 3f00 	ldrex	r3, [r3]
 8007390:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007394:	f023 0301 	bic.w	r3, r3, #1
 8007398:	663b      	str	r3, [r7, #96]	; 0x60
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	3308      	adds	r3, #8
 80073a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80073a2:	64ba      	str	r2, [r7, #72]	; 0x48
 80073a4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80073a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80073aa:	e841 2300 	strex	r3, r2, [r1]
 80073ae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80073b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d1e5      	bne.n	8007382 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2220      	movs	r2, #32
 80073ba:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2220      	movs	r2, #32
 80073c0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	2200      	movs	r2, #0
 80073c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80073ca:	2303      	movs	r3, #3
 80073cc:	e067      	b.n	800749e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f003 0304 	and.w	r3, r3, #4
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d04f      	beq.n	800747c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	69db      	ldr	r3, [r3, #28]
 80073e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073ea:	d147      	bne.n	800747c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80073f4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073fe:	e853 3f00 	ldrex	r3, [r3]
 8007402:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007406:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800740a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	461a      	mov	r2, r3
 8007412:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007414:	637b      	str	r3, [r7, #52]	; 0x34
 8007416:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007418:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800741a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800741c:	e841 2300 	strex	r3, r2, [r1]
 8007420:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007424:	2b00      	cmp	r3, #0
 8007426:	d1e6      	bne.n	80073f6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	3308      	adds	r3, #8
 800742e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	e853 3f00 	ldrex	r3, [r3]
 8007436:	613b      	str	r3, [r7, #16]
   return(result);
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	f023 0301 	bic.w	r3, r3, #1
 800743e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	3308      	adds	r3, #8
 8007446:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007448:	623a      	str	r2, [r7, #32]
 800744a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800744c:	69f9      	ldr	r1, [r7, #28]
 800744e:	6a3a      	ldr	r2, [r7, #32]
 8007450:	e841 2300 	strex	r3, r2, [r1]
 8007454:	61bb      	str	r3, [r7, #24]
   return(result);
 8007456:	69bb      	ldr	r3, [r7, #24]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d1e5      	bne.n	8007428 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2220      	movs	r2, #32
 8007460:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2220      	movs	r2, #32
 8007466:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2220      	movs	r2, #32
 800746c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2200      	movs	r2, #0
 8007474:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007478:	2303      	movs	r3, #3
 800747a:	e010      	b.n	800749e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	69da      	ldr	r2, [r3, #28]
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	4013      	ands	r3, r2
 8007486:	68ba      	ldr	r2, [r7, #8]
 8007488:	429a      	cmp	r2, r3
 800748a:	bf0c      	ite	eq
 800748c:	2301      	moveq	r3, #1
 800748e:	2300      	movne	r3, #0
 8007490:	b2db      	uxtb	r3, r3
 8007492:	461a      	mov	r2, r3
 8007494:	79fb      	ldrb	r3, [r7, #7]
 8007496:	429a      	cmp	r2, r3
 8007498:	f43f af4a 	beq.w	8007330 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800749c:	2300      	movs	r3, #0
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3770      	adds	r7, #112	; 0x70
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}

080074a6 <HAL_USART_Receive>:
  * @param Size Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Receive(USART_HandleTypeDef *husart, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 80074a6:	b580      	push	{r7, lr}
 80074a8:	b08a      	sub	sp, #40	; 0x28
 80074aa:	af02      	add	r7, sp, #8
 80074ac:	60f8      	str	r0, [r7, #12]
 80074ae:	60b9      	str	r1, [r7, #8]
 80074b0:	603b      	str	r3, [r7, #0]
 80074b2:	4613      	mov	r3, r2
 80074b4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *prxdata8bits;
  uint16_t *prxdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80074bc:	b2db      	uxtb	r3, r3
 80074be:	2b01      	cmp	r3, #1
 80074c0:	f040 80c1 	bne.w	8007646 <HAL_USART_Receive+0x1a0>
  {
    if ((pRxData == NULL) || (Size == 0U))
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d002      	beq.n	80074d0 <HAL_USART_Receive+0x2a>
 80074ca:	88fb      	ldrh	r3, [r7, #6]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d101      	bne.n	80074d4 <HAL_USART_Receive+0x2e>
    {
      return  HAL_ERROR;
 80074d0:	2301      	movs	r3, #1
 80074d2:	e0b9      	b.n	8007648 <HAL_USART_Receive+0x1a2>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80074da:	2b01      	cmp	r3, #1
 80074dc:	d101      	bne.n	80074e2 <HAL_USART_Receive+0x3c>
 80074de:	2302      	movs	r3, #2
 80074e0:	e0b2      	b.n	8007648 <HAL_USART_Receive+0x1a2>
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2201      	movs	r2, #1
 80074e6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2200      	movs	r2, #0
 80074ee:	64da      	str	r2, [r3, #76]	; 0x4c
    husart->State = HAL_USART_STATE_BUSY_RX;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2222      	movs	r2, #34	; 0x22
 80074f4:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80074f8:	f7fc f886 	bl	8003608 <HAL_GetTick>
 80074fc:	6178      	str	r0, [r7, #20]

    husart->RxXferSize = Size;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	88fa      	ldrh	r2, [r7, #6]
 8007502:	861a      	strh	r2, [r3, #48]	; 0x30
    husart->RxXferCount = Size;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	88fa      	ldrh	r2, [r7, #6]
 8007508:	865a      	strh	r2, [r3, #50]	; 0x32

    /* Computation of USART mask to apply to RDR register */
    USART_MASK_COMPUTATION(husart);
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007512:	d10c      	bne.n	800752e <HAL_USART_Receive+0x88>
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	691b      	ldr	r3, [r3, #16]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d104      	bne.n	8007526 <HAL_USART_Receive+0x80>
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007522:	869a      	strh	r2, [r3, #52]	; 0x34
 8007524:	e027      	b.n	8007576 <HAL_USART_Receive+0xd0>
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	22ff      	movs	r2, #255	; 0xff
 800752a:	869a      	strh	r2, [r3, #52]	; 0x34
 800752c:	e023      	b.n	8007576 <HAL_USART_Receive+0xd0>
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	689b      	ldr	r3, [r3, #8]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d10b      	bne.n	800754e <HAL_USART_Receive+0xa8>
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	691b      	ldr	r3, [r3, #16]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d103      	bne.n	8007546 <HAL_USART_Receive+0xa0>
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	22ff      	movs	r2, #255	; 0xff
 8007542:	869a      	strh	r2, [r3, #52]	; 0x34
 8007544:	e017      	b.n	8007576 <HAL_USART_Receive+0xd0>
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	227f      	movs	r2, #127	; 0x7f
 800754a:	869a      	strh	r2, [r3, #52]	; 0x34
 800754c:	e013      	b.n	8007576 <HAL_USART_Receive+0xd0>
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	689b      	ldr	r3, [r3, #8]
 8007552:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007556:	d10b      	bne.n	8007570 <HAL_USART_Receive+0xca>
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	691b      	ldr	r3, [r3, #16]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d103      	bne.n	8007568 <HAL_USART_Receive+0xc2>
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	227f      	movs	r2, #127	; 0x7f
 8007564:	869a      	strh	r2, [r3, #52]	; 0x34
 8007566:	e006      	b.n	8007576 <HAL_USART_Receive+0xd0>
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	223f      	movs	r2, #63	; 0x3f
 800756c:	869a      	strh	r2, [r3, #52]	; 0x34
 800756e:	e002      	b.n	8007576 <HAL_USART_Receive+0xd0>
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2200      	movs	r2, #0
 8007574:	869a      	strh	r2, [r3, #52]	; 0x34
    uhMask = husart->Mask;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800757a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	689b      	ldr	r3, [r3, #8]
 8007580:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007584:	d108      	bne.n	8007598 <HAL_USART_Receive+0xf2>
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	691b      	ldr	r3, [r3, #16]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d104      	bne.n	8007598 <HAL_USART_Receive+0xf2>
    {
      prxdata8bits  = NULL;
 800758e:	2300      	movs	r3, #0
 8007590:	61fb      	str	r3, [r7, #28]
      prxdata16bits = (uint16_t *) pRxData;
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	61bb      	str	r3, [r7, #24]
 8007596:	e003      	b.n	80075a0 <HAL_USART_Receive+0xfa>
    }
    else
    {
      prxdata8bits  = pRxData;
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	61fb      	str	r3, [r7, #28]
      prxdata16bits = NULL;
 800759c:	2300      	movs	r3, #0
 800759e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (husart->RxXferCount > 0U)
 80075a0:	e042      	b.n	8007628 <HAL_USART_Receive+0x182>
      {
        /* Wait until TXE flag is set to send dummy byte in order to generate the
        * clock for the slave to send data.
        * Whatever the frame length (7, 8 or 9-bit long), the same dummy value
        * can be written for all the cases. */
        if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	9300      	str	r3, [sp, #0]
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	2200      	movs	r2, #0
 80075aa:	2180      	movs	r1, #128	; 0x80
 80075ac:	68f8      	ldr	r0, [r7, #12]
 80075ae:	f000 f84f 	bl	8007650 <USART_WaitOnFlagUntilTimeout>
 80075b2:	4603      	mov	r3, r0
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d001      	beq.n	80075bc <HAL_USART_Receive+0x116>
        {
          return HAL_TIMEOUT;
 80075b8:	2303      	movs	r3, #3
 80075ba:	e045      	b.n	8007648 <HAL_USART_Receive+0x1a2>
        }
        husart->Instance->TDR = (USART_DUMMY_DATA & (uint16_t)0x0FF);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	22ff      	movs	r2, #255	; 0xff
 80075c2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait for RXNE Flag */
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	9300      	str	r3, [sp, #0]
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	2200      	movs	r2, #0
 80075cc:	2120      	movs	r1, #32
 80075ce:	68f8      	ldr	r0, [r7, #12]
 80075d0:	f000 f83e 	bl	8007650 <USART_WaitOnFlagUntilTimeout>
 80075d4:	4603      	mov	r3, r0
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d001      	beq.n	80075de <HAL_USART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 80075da:	2303      	movs	r3, #3
 80075dc:	e034      	b.n	8007648 <HAL_USART_Receive+0x1a2>
      }

      if (prxdata8bits == NULL)
 80075de:	69fb      	ldr	r3, [r7, #28]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d10c      	bne.n	80075fe <HAL_USART_Receive+0x158>
      {
        *prxdata16bits = (uint16_t)(husart->Instance->RDR & uhMask);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80075ea:	b29a      	uxth	r2, r3
 80075ec:	8a7b      	ldrh	r3, [r7, #18]
 80075ee:	4013      	ands	r3, r2
 80075f0:	b29a      	uxth	r2, r3
 80075f2:	69bb      	ldr	r3, [r7, #24]
 80075f4:	801a      	strh	r2, [r3, #0]
        prxdata16bits++;
 80075f6:	69bb      	ldr	r3, [r7, #24]
 80075f8:	3302      	adds	r3, #2
 80075fa:	61bb      	str	r3, [r7, #24]
 80075fc:	e00d      	b.n	800761a <HAL_USART_Receive+0x174>
      }
      else
      {
        *prxdata8bits = (uint8_t)(husart->Instance->RDR & (uint8_t)(uhMask & 0xFFU));
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007604:	b29b      	uxth	r3, r3
 8007606:	b2da      	uxtb	r2, r3
 8007608:	8a7b      	ldrh	r3, [r7, #18]
 800760a:	b2db      	uxtb	r3, r3
 800760c:	4013      	ands	r3, r2
 800760e:	b2da      	uxtb	r2, r3
 8007610:	69fb      	ldr	r3, [r7, #28]
 8007612:	701a      	strb	r2, [r3, #0]
        prxdata8bits++;
 8007614:	69fb      	ldr	r3, [r7, #28]
 8007616:	3301      	adds	r3, #1
 8007618:	61fb      	str	r3, [r7, #28]
      }

      husart->RxXferCount--;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800761e:	b29b      	uxth	r3, r3
 8007620:	3b01      	subs	r3, #1
 8007622:	b29a      	uxth	r2, r3
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	865a      	strh	r2, [r3, #50]	; 0x32
    while (husart->RxXferCount > 0U)
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800762c:	b29b      	uxth	r3, r3
 800762e:	2b00      	cmp	r3, #0
 8007630:	d1b7      	bne.n	80075a2 <HAL_USART_Receive+0xfc>
      __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
    }
#endif /* USART_CR2_SLVEN */

    /* At end of Rx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2201      	movs	r2, #1
 8007636:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2200      	movs	r2, #0
 800763e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    return HAL_OK;
 8007642:	2300      	movs	r3, #0
 8007644:	e000      	b.n	8007648 <HAL_USART_Receive+0x1a2>
  }
  else
  {
    return HAL_BUSY;
 8007646:	2302      	movs	r3, #2
  }
}
 8007648:	4618      	mov	r0, r3
 800764a:	3720      	adds	r7, #32
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}

08007650 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b084      	sub	sp, #16
 8007654:	af00      	add	r7, sp, #0
 8007656:	60f8      	str	r0, [r7, #12]
 8007658:	60b9      	str	r1, [r7, #8]
 800765a:	603b      	str	r3, [r7, #0]
 800765c:	4613      	mov	r3, r2
 800765e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8007660:	e018      	b.n	8007694 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007662:	69bb      	ldr	r3, [r7, #24]
 8007664:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007668:	d014      	beq.n	8007694 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800766a:	f7fb ffcd 	bl	8003608 <HAL_GetTick>
 800766e:	4602      	mov	r2, r0
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	1ad3      	subs	r3, r2, r3
 8007674:	69ba      	ldr	r2, [r7, #24]
 8007676:	429a      	cmp	r2, r3
 8007678:	d302      	bcc.n	8007680 <USART_WaitOnFlagUntilTimeout+0x30>
 800767a:	69bb      	ldr	r3, [r7, #24]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d109      	bne.n	8007694 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2201      	movs	r2, #1
 8007684:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2200      	movs	r2, #0
 800768c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

        return HAL_TIMEOUT;
 8007690:	2303      	movs	r3, #3
 8007692:	e00f      	b.n	80076b4 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	69da      	ldr	r2, [r3, #28]
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	4013      	ands	r3, r2
 800769e:	68ba      	ldr	r2, [r7, #8]
 80076a0:	429a      	cmp	r2, r3
 80076a2:	bf0c      	ite	eq
 80076a4:	2301      	moveq	r3, #1
 80076a6:	2300      	movne	r3, #0
 80076a8:	b2db      	uxtb	r3, r3
 80076aa:	461a      	mov	r2, r3
 80076ac:	79fb      	ldrb	r3, [r7, #7]
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d0d7      	beq.n	8007662 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80076b2:	2300      	movs	r3, #0
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3710      	adds	r7, #16
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}

080076bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
static void SystemClock_Config(void)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b096      	sub	sp, #88	; 0x58
 80076c0:	af00      	add	r7, sp, #0

    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80076c2:	f107 0314 	add.w	r3, r7, #20
 80076c6:	2244      	movs	r2, #68	; 0x44
 80076c8:	2100      	movs	r1, #0
 80076ca:	4618      	mov	r0, r3
 80076cc:	f001 f8a0 	bl	8008810 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80076d0:	463b      	mov	r3, r7
 80076d2:	2200      	movs	r2, #0
 80076d4:	601a      	str	r2, [r3, #0]
 80076d6:	605a      	str	r2, [r3, #4]
 80076d8:	609a      	str	r2, [r3, #8]
 80076da:	60da      	str	r2, [r3, #12]
 80076dc:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
    */
    if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80076de:	f44f 7000 	mov.w	r0, #512	; 0x200
 80076e2:	f7fc fddd 	bl	80042a0 <HAL_PWREx_ControlVoltageScaling>
 80076e6:	4603      	mov	r3, r0
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d001      	beq.n	80076f0 <SystemClock_Config+0x34>
    {
      Error_Handler();
 80076ec:	f000 fa42 	bl	8007b74 <Error_Handler>
    }

    /** Initializes the RCC Oscillators according to the specified parameters
    * in the RCC_OscInitTypeDef structure.
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80076f0:	2310      	movs	r3, #16
 80076f2:	617b      	str	r3, [r7, #20]
    RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80076f4:	2301      	movs	r3, #1
 80076f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    RCC_OscInitStruct.MSICalibrationValue = 0;
 80076f8:	2300      	movs	r3, #0
 80076fa:	633b      	str	r3, [r7, #48]	; 0x30
    RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80076fc:	2360      	movs	r3, #96	; 0x60
 80076fe:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8007700:	2300      	movs	r3, #0
 8007702:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007704:	f107 0314 	add.w	r3, r7, #20
 8007708:	4618      	mov	r0, r3
 800770a:	f7fc fe1f 	bl	800434c <HAL_RCC_OscConfig>
 800770e:	4603      	mov	r3, r0
 8007710:	2b00      	cmp	r3, #0
 8007712:	d001      	beq.n	8007718 <SystemClock_Config+0x5c>
    {
      Error_Handler();
 8007714:	f000 fa2e 	bl	8007b74 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
    */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007718:	230f      	movs	r3, #15
 800771a:	603b      	str	r3, [r7, #0]
                                |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800771c:	2300      	movs	r3, #0
 800771e:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007720:	2300      	movs	r3, #0
 8007722:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007724:	2300      	movs	r3, #0
 8007726:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007728:	2300      	movs	r3, #0
 800772a:	613b      	str	r3, [r7, #16]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800772c:	463b      	mov	r3, r7
 800772e:	2100      	movs	r1, #0
 8007730:	4618      	mov	r0, r3
 8007732:	f7fd fa1f 	bl	8004b74 <HAL_RCC_ClockConfig>
 8007736:	4603      	mov	r3, r0
 8007738:	2b00      	cmp	r3, #0
 800773a:	d001      	beq.n	8007740 <SystemClock_Config+0x84>
    {
      Error_Handler();
 800773c:	f000 fa1a 	bl	8007b74 <Error_Handler>
//    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
//    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) Error_Handler();
//
//
//    if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK) Error_Handler();
}
 8007740:	bf00      	nop
 8007742:	3758      	adds	r7, #88	; 0x58
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}

08007748 <board_init_common_timer_init>:


static void board_init_common_timer_init(timer_e timer)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b0a0      	sub	sp, #128	; 0x80
 800774c:	af00      	add	r7, sp, #0
 800774e:	4603      	mov	r3, r0
 8007750:	71fb      	strb	r3, [r7, #7]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007752:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007756:	2200      	movs	r2, #0
 8007758:	601a      	str	r2, [r3, #0]
 800775a:	605a      	str	r2, [r3, #4]
 800775c:	609a      	str	r2, [r3, #8]
 800775e:	60da      	str	r2, [r3, #12]
 8007760:	611a      	str	r2, [r3, #16]
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007762:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007766:	2200      	movs	r2, #0
 8007768:	601a      	str	r2, [r3, #0]
 800776a:	605a      	str	r2, [r3, #4]
 800776c:	609a      	str	r2, [r3, #8]
 800776e:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007770:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007774:	2200      	movs	r2, #0
 8007776:	601a      	str	r2, [r3, #0]
 8007778:	605a      	str	r2, [r3, #4]
 800777a:	609a      	str	r2, [r3, #8]
    TIM_OC_InitTypeDef sConfigOC = {0};
 800777c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007780:	2200      	movs	r2, #0
 8007782:	601a      	str	r2, [r3, #0]
 8007784:	605a      	str	r2, [r3, #4]
 8007786:	609a      	str	r2, [r3, #8]
 8007788:	60da      	str	r2, [r3, #12]
 800778a:	611a      	str	r2, [r3, #16]
 800778c:	615a      	str	r2, [r3, #20]
 800778e:	619a      	str	r2, [r3, #24]
    TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8007790:	f107 0308 	add.w	r3, r7, #8
 8007794:	222c      	movs	r2, #44	; 0x2c
 8007796:	2100      	movs	r1, #0
 8007798:	4618      	mov	r0, r3
 800779a:	f001 f839 	bl	8008810 <memset>
    switch (timer)
 800779e:	79fb      	ldrb	r3, [r7, #7]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	f040 80b8 	bne.w	8007916 <board_init_common_timer_init+0x1ce>
    {
        case TIMER_1:
            g_tim1_handle.Instance = TIM1;
 80077a6:	4b5e      	ldr	r3, [pc, #376]	; (8007920 <board_init_common_timer_init+0x1d8>)
 80077a8:	4a5e      	ldr	r2, [pc, #376]	; (8007924 <board_init_common_timer_init+0x1dc>)
 80077aa:	601a      	str	r2, [r3, #0]
            g_tim1_handle.Init.Prescaler = 0;
 80077ac:	4b5c      	ldr	r3, [pc, #368]	; (8007920 <board_init_common_timer_init+0x1d8>)
 80077ae:	2200      	movs	r2, #0
 80077b0:	605a      	str	r2, [r3, #4]
            g_tim1_handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 80077b2:	4b5b      	ldr	r3, [pc, #364]	; (8007920 <board_init_common_timer_init+0x1d8>)
 80077b4:	2200      	movs	r2, #0
 80077b6:	609a      	str	r2, [r3, #8]
            g_tim1_handle.Init.Period = 60-1;
 80077b8:	4b59      	ldr	r3, [pc, #356]	; (8007920 <board_init_common_timer_init+0x1d8>)
 80077ba:	223b      	movs	r2, #59	; 0x3b
 80077bc:	60da      	str	r2, [r3, #12]
            g_tim1_handle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80077be:	4b58      	ldr	r3, [pc, #352]	; (8007920 <board_init_common_timer_init+0x1d8>)
 80077c0:	2200      	movs	r2, #0
 80077c2:	611a      	str	r2, [r3, #16]
            g_tim1_handle.Init.RepetitionCounter = 0;
 80077c4:	4b56      	ldr	r3, [pc, #344]	; (8007920 <board_init_common_timer_init+0x1d8>)
 80077c6:	2200      	movs	r2, #0
 80077c8:	615a      	str	r2, [r3, #20]
            g_tim1_handle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80077ca:	4b55      	ldr	r3, [pc, #340]	; (8007920 <board_init_common_timer_init+0x1d8>)
 80077cc:	2200      	movs	r2, #0
 80077ce:	619a      	str	r2, [r3, #24]
            if (HAL_TIM_Base_Init(&g_tim1_handle) != HAL_OK) Error_Handler();
 80077d0:	4853      	ldr	r0, [pc, #332]	; (8007920 <board_init_common_timer_init+0x1d8>)
 80077d2:	f7fd fefd 	bl	80055d0 <HAL_TIM_Base_Init>
 80077d6:	4603      	mov	r3, r0
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d001      	beq.n	80077e0 <board_init_common_timer_init+0x98>
 80077dc:	f000 f9ca 	bl	8007b74 <Error_Handler>
            sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80077e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80077e4:	65fb      	str	r3, [r7, #92]	; 0x5c
            if (HAL_TIM_ConfigClockSource(&g_tim1_handle, &sClockSourceConfig) != HAL_OK) Error_Handler();
 80077e6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80077ea:	4619      	mov	r1, r3
 80077ec:	484c      	ldr	r0, [pc, #304]	; (8007920 <board_init_common_timer_init+0x1d8>)
 80077ee:	f7fe fb91 	bl	8005f14 <HAL_TIM_ConfigClockSource>
 80077f2:	4603      	mov	r3, r0
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d001      	beq.n	80077fc <board_init_common_timer_init+0xb4>
 80077f8:	f000 f9bc 	bl	8007b74 <Error_Handler>
            if (HAL_TIM_PWM_Init(&g_tim1_handle) != HAL_OK) Error_Handler();
 80077fc:	4848      	ldr	r0, [pc, #288]	; (8007920 <board_init_common_timer_init+0x1d8>)
 80077fe:	f7fd ff3e 	bl	800567e <HAL_TIM_PWM_Init>
 8007802:	4603      	mov	r3, r0
 8007804:	2b00      	cmp	r3, #0
 8007806:	d001      	beq.n	800780c <board_init_common_timer_init+0xc4>
 8007808:	f000 f9b4 	bl	8007b74 <Error_Handler>
            sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800780c:	2300      	movs	r3, #0
 800780e:	653b      	str	r3, [r7, #80]	; 0x50
            sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8007810:	2300      	movs	r3, #0
 8007812:	657b      	str	r3, [r7, #84]	; 0x54
            sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007814:	2300      	movs	r3, #0
 8007816:	65bb      	str	r3, [r7, #88]	; 0x58
            if (HAL_TIMEx_MasterConfigSynchronization(&g_tim1_handle, &sMasterConfig) != HAL_OK) Error_Handler();
 8007818:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800781c:	4619      	mov	r1, r3
 800781e:	4840      	ldr	r0, [pc, #256]	; (8007920 <board_init_common_timer_init+0x1d8>)
 8007820:	f7ff f8c8 	bl	80069b4 <HAL_TIMEx_MasterConfigSynchronization>
 8007824:	4603      	mov	r3, r0
 8007826:	2b00      	cmp	r3, #0
 8007828:	d001      	beq.n	800782e <board_init_common_timer_init+0xe6>
 800782a:	f000 f9a3 	bl	8007b74 <Error_Handler>
            sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800782e:	2360      	movs	r3, #96	; 0x60
 8007830:	637b      	str	r3, [r7, #52]	; 0x34
            sConfigOC.Pulse = 0;
 8007832:	2300      	movs	r3, #0
 8007834:	63bb      	str	r3, [r7, #56]	; 0x38
            sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007836:	2300      	movs	r3, #0
 8007838:	63fb      	str	r3, [r7, #60]	; 0x3c
            sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800783a:	2300      	movs	r3, #0
 800783c:	643b      	str	r3, [r7, #64]	; 0x40
            sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800783e:	2300      	movs	r3, #0
 8007840:	647b      	str	r3, [r7, #68]	; 0x44
            sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8007842:	2300      	movs	r3, #0
 8007844:	64bb      	str	r3, [r7, #72]	; 0x48
            sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8007846:	2300      	movs	r3, #0
 8007848:	64fb      	str	r3, [r7, #76]	; 0x4c
            if (HAL_TIM_PWM_ConfigChannel(&g_tim1_handle, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) Error_Handler();
 800784a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800784e:	2200      	movs	r2, #0
 8007850:	4619      	mov	r1, r3
 8007852:	4833      	ldr	r0, [pc, #204]	; (8007920 <board_init_common_timer_init+0x1d8>)
 8007854:	f7fe fa4a 	bl	8005cec <HAL_TIM_PWM_ConfigChannel>
 8007858:	4603      	mov	r3, r0
 800785a:	2b00      	cmp	r3, #0
 800785c:	d001      	beq.n	8007862 <board_init_common_timer_init+0x11a>
 800785e:	f000 f989 	bl	8007b74 <Error_Handler>
            if (HAL_TIM_PWM_ConfigChannel(&g_tim1_handle, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) Error_Handler();
 8007862:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007866:	2204      	movs	r2, #4
 8007868:	4619      	mov	r1, r3
 800786a:	482d      	ldr	r0, [pc, #180]	; (8007920 <board_init_common_timer_init+0x1d8>)
 800786c:	f7fe fa3e 	bl	8005cec <HAL_TIM_PWM_ConfigChannel>
 8007870:	4603      	mov	r3, r0
 8007872:	2b00      	cmp	r3, #0
 8007874:	d001      	beq.n	800787a <board_init_common_timer_init+0x132>
 8007876:	f000 f97d 	bl	8007b74 <Error_Handler>
            if (HAL_TIM_PWM_ConfigChannel(&g_tim1_handle, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) Error_Handler();
 800787a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800787e:	2208      	movs	r2, #8
 8007880:	4619      	mov	r1, r3
 8007882:	4827      	ldr	r0, [pc, #156]	; (8007920 <board_init_common_timer_init+0x1d8>)
 8007884:	f7fe fa32 	bl	8005cec <HAL_TIM_PWM_ConfigChannel>
 8007888:	4603      	mov	r3, r0
 800788a:	2b00      	cmp	r3, #0
 800788c:	d001      	beq.n	8007892 <board_init_common_timer_init+0x14a>
 800788e:	f000 f971 	bl	8007b74 <Error_Handler>
            sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8007892:	2300      	movs	r3, #0
 8007894:	60bb      	str	r3, [r7, #8]
            sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8007896:	2300      	movs	r3, #0
 8007898:	60fb      	str	r3, [r7, #12]
            sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800789a:	2300      	movs	r3, #0
 800789c:	613b      	str	r3, [r7, #16]
            sBreakDeadTimeConfig.DeadTime = 0;
 800789e:	2300      	movs	r3, #0
 80078a0:	617b      	str	r3, [r7, #20]
            sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80078a2:	2300      	movs	r3, #0
 80078a4:	61bb      	str	r3, [r7, #24]
            sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80078a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80078aa:	61fb      	str	r3, [r7, #28]
            sBreakDeadTimeConfig.BreakFilter = 0;
 80078ac:	2300      	movs	r3, #0
 80078ae:	623b      	str	r3, [r7, #32]
            sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80078b0:	2300      	movs	r3, #0
 80078b2:	627b      	str	r3, [r7, #36]	; 0x24
            sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80078b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80078b8:	62bb      	str	r3, [r7, #40]	; 0x28
            sBreakDeadTimeConfig.Break2Filter = 0;
 80078ba:	2300      	movs	r3, #0
 80078bc:	62fb      	str	r3, [r7, #44]	; 0x2c
            sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80078be:	2300      	movs	r3, #0
 80078c0:	633b      	str	r3, [r7, #48]	; 0x30
            if (HAL_TIMEx_ConfigBreakDeadTime(&g_tim1_handle, &sBreakDeadTimeConfig) != HAL_OK) Error_Handler();
 80078c2:	f107 0308 	add.w	r3, r7, #8
 80078c6:	4619      	mov	r1, r3
 80078c8:	4815      	ldr	r0, [pc, #84]	; (8007920 <board_init_common_timer_init+0x1d8>)
 80078ca:	f7ff f8d9 	bl	8006a80 <HAL_TIMEx_ConfigBreakDeadTime>
 80078ce:	4603      	mov	r3, r0
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d001      	beq.n	80078d8 <board_init_common_timer_init+0x190>
 80078d4:	f000 f94e 	bl	8007b74 <Error_Handler>
            HAL_TIM_PWM_Stop_DMA(&g_tim1_handle, TIM_CHANNEL_1);
 80078d8:	2100      	movs	r1, #0
 80078da:	4811      	ldr	r0, [pc, #68]	; (8007920 <board_init_common_timer_init+0x1d8>)
 80078dc:	f7fe f91e 	bl	8005b1c <HAL_TIM_PWM_Stop_DMA>
            HAL_TIM_PWM_Stop_DMA(&g_tim1_handle, TIM_CHANNEL_2);
 80078e0:	2104      	movs	r1, #4
 80078e2:	480f      	ldr	r0, [pc, #60]	; (8007920 <board_init_common_timer_init+0x1d8>)
 80078e4:	f7fe f91a 	bl	8005b1c <HAL_TIM_PWM_Stop_DMA>
            HAL_TIM_PWM_Stop_DMA(&g_tim1_handle, TIM_CHANNEL_3);
 80078e8:	2108      	movs	r1, #8
 80078ea:	480d      	ldr	r0, [pc, #52]	; (8007920 <board_init_common_timer_init+0x1d8>)
 80078ec:	f7fe f916 	bl	8005b1c <HAL_TIM_PWM_Stop_DMA>
            GPIO_InitStruct.Pin = PIN_TIM1_CH1|PIN_TIM1_CH2|PIN_TIM1_CH3;
 80078f0:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80078f4:	66fb      	str	r3, [r7, #108]	; 0x6c
            GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078f6:	2302      	movs	r3, #2
 80078f8:	673b      	str	r3, [r7, #112]	; 0x70
            GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078fa:	2300      	movs	r3, #0
 80078fc:	677b      	str	r3, [r7, #116]	; 0x74
            GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80078fe:	2300      	movs	r3, #0
 8007900:	67bb      	str	r3, [r7, #120]	; 0x78
            GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8007902:	2301      	movs	r3, #1
 8007904:	67fb      	str	r3, [r7, #124]	; 0x7c
            HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007906:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800790a:	4619      	mov	r1, r3
 800790c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007910:	f7fc fa92 	bl	8003e38 <HAL_GPIO_Init>
        break;
 8007914:	e000      	b.n	8007918 <board_init_common_timer_init+0x1d0>
//            GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//            GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
//            HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
//        break;
        default:
        break;
 8007916:	bf00      	nop
    }
}
 8007918:	bf00      	nop
 800791a:	3780      	adds	r7, #128	; 0x80
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}
 8007920:	2000233c 	.word	0x2000233c
 8007924:	40012c00 	.word	0x40012c00

08007928 <board_init_common_nvic_setup_interrupts>:


static void board_init_common_nvic_setup_interrupts(void)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	af00      	add	r7, sp, #0
    HAL_NVIC_SetPriority(EXTI0_IRQn, 24, 0);
 800792c:	2200      	movs	r2, #0
 800792e:	2118      	movs	r1, #24
 8007930:	2006      	movs	r0, #6
 8007932:	f7fb ffbc 	bl	80038ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8007936:	2006      	movs	r0, #6
 8007938:	f7fb ffd5 	bl	80038e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI2_IRQn, 24, 0);
 800793c:	2200      	movs	r2, #0
 800793e:	2118      	movs	r1, #24
 8007940:	2008      	movs	r0, #8
 8007942:	f7fb ffb4 	bl	80038ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8007946:	2008      	movs	r0, #8
 8007948:	f7fb ffcd 	bl	80038e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI9_5_IRQn , 24, 0);
 800794c:	2200      	movs	r2, #0
 800794e:	2118      	movs	r1, #24
 8007950:	2017      	movs	r0, #23
 8007952:	f7fb ffac 	bl	80038ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8007956:	2017      	movs	r0, #23
 8007958:	f7fb ffc5 	bl	80038e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 24, 0);
 800795c:	2200      	movs	r2, #0
 800795e:	2118      	movs	r1, #24
 8007960:	2028      	movs	r0, #40	; 0x28
 8007962:	f7fb ffa4 	bl	80038ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8007966:	2028      	movs	r0, #40	; 0x28
 8007968:	f7fb ffbd 	bl	80038e6 <HAL_NVIC_EnableIRQ>

    __HAL_GPIO_EXTI_CLEAR_IT(EXTI0_IRQn);
 800796c:	4b1a      	ldr	r3, [pc, #104]	; (80079d8 <board_init_common_nvic_setup_interrupts+0xb0>)
 800796e:	2206      	movs	r2, #6
 8007970:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI9_5_IRQn);
 8007972:	4b19      	ldr	r3, [pc, #100]	; (80079d8 <board_init_common_nvic_setup_interrupts+0xb0>)
 8007974:	2217      	movs	r2, #23
 8007976:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI15_10_IRQn);
 8007978:	4b17      	ldr	r3, [pc, #92]	; (80079d8 <board_init_common_nvic_setup_interrupts+0xb0>)
 800797a:	2228      	movs	r2, #40	; 0x28
 800797c:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI2_IRQn);
 800797e:	4b16      	ldr	r3, [pc, #88]	; (80079d8 <board_init_common_nvic_setup_interrupts+0xb0>)
 8007980:	2208      	movs	r2, #8
 8007982:	615a      	str	r2, [r3, #20]
//    HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 20, 0);
//    HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
//    HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 20, 0);
//    HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);

    HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8007984:	2200      	movs	r2, #0
 8007986:	2100      	movs	r1, #0
 8007988:	200c      	movs	r0, #12
 800798a:	f7fb ff90 	bl	80038ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800798e:	200c      	movs	r0, #12
 8007990:	f7fb ffa9 	bl	80038e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8007994:	2200      	movs	r2, #0
 8007996:	2100      	movs	r1, #0
 8007998:	200d      	movs	r0, #13
 800799a:	f7fb ff88 	bl	80038ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800799e:	200d      	movs	r0, #13
 80079a0:	f7fb ffa1 	bl	80038e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80079a4:	2200      	movs	r2, #0
 80079a6:	2100      	movs	r1, #0
 80079a8:	200f      	movs	r0, #15
 80079aa:	f7fb ff80 	bl	80038ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80079ae:	200f      	movs	r0, #15
 80079b0:	f7fb ff99 	bl	80038e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80079b4:	2200      	movs	r2, #0
 80079b6:	2100      	movs	r1, #0
 80079b8:	2010      	movs	r0, #16
 80079ba:	f7fb ff78 	bl	80038ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80079be:	2010      	movs	r0, #16
 80079c0:	f7fb ff91 	bl	80038e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80079c4:	2200      	movs	r2, #0
 80079c6:	2100      	movs	r1, #0
 80079c8:	2011      	movs	r0, #17
 80079ca:	f7fb ff70 	bl	80038ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80079ce:	2011      	movs	r0, #17
 80079d0:	f7fb ff89 	bl	80038e6 <HAL_NVIC_EnableIRQ>
}
 80079d4:	bf00      	nop
 80079d6:	bd80      	pop	{r7, pc}
 80079d8:	40010400 	.word	0x40010400

080079dc <board_init_common_board_init>:

uint8_t new_buf[10] = {0};
void board_init_common_board_init(void)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b08c      	sub	sp, #48	; 0x30
 80079e0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80079e2:	f107 0318 	add.w	r3, r7, #24
 80079e6:	2200      	movs	r2, #0
 80079e8:	601a      	str	r2, [r3, #0]
 80079ea:	605a      	str	r2, [r3, #4]
 80079ec:	609a      	str	r2, [r3, #8]
 80079ee:	60da      	str	r2, [r3, #12]
 80079f0:	611a      	str	r2, [r3, #16]

    srand(time(0));
 80079f2:	2000      	movs	r0, #0
 80079f4:	f001 f832 	bl	8008a5c <time>
 80079f8:	4602      	mov	r2, r0
 80079fa:	460b      	mov	r3, r1
 80079fc:	4613      	mov	r3, r2
 80079fe:	4618      	mov	r0, r3
 8007a00:	f000 ffee 	bl	80089e0 <srand>
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007a04:	4b4d      	ldr	r3, [pc, #308]	; (8007b3c <board_init_common_board_init+0x160>)
 8007a06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a08:	4a4c      	ldr	r2, [pc, #304]	; (8007b3c <board_init_common_board_init+0x160>)
 8007a0a:	f043 0301 	orr.w	r3, r3, #1
 8007a0e:	6613      	str	r3, [r2, #96]	; 0x60
 8007a10:	4b4a      	ldr	r3, [pc, #296]	; (8007b3c <board_init_common_board_init+0x160>)
 8007a12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a14:	f003 0301 	and.w	r3, r3, #1
 8007a18:	617b      	str	r3, [r7, #20]
 8007a1a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_PWR_CLK_ENABLE();
 8007a1c:	4b47      	ldr	r3, [pc, #284]	; (8007b3c <board_init_common_board_init+0x160>)
 8007a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a20:	4a46      	ldr	r2, [pc, #280]	; (8007b3c <board_init_common_board_init+0x160>)
 8007a22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a26:	6593      	str	r3, [r2, #88]	; 0x58
 8007a28:	4b44      	ldr	r3, [pc, #272]	; (8007b3c <board_init_common_board_init+0x160>)
 8007a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a30:	613b      	str	r3, [r7, #16]
 8007a32:	693b      	ldr	r3, [r7, #16]

    HAL_Init();
 8007a34:	f7fb fd80 	bl	8003538 <HAL_Init>

    SystemClock_Config();
 8007a38:	f7ff fe40 	bl	80076bc <SystemClock_Config>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007a3c:	4b3f      	ldr	r3, [pc, #252]	; (8007b3c <board_init_common_board_init+0x160>)
 8007a3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a40:	4a3e      	ldr	r2, [pc, #248]	; (8007b3c <board_init_common_board_init+0x160>)
 8007a42:	f043 0301 	orr.w	r3, r3, #1
 8007a46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007a48:	4b3c      	ldr	r3, [pc, #240]	; (8007b3c <board_init_common_board_init+0x160>)
 8007a4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a4c:	f003 0301 	and.w	r3, r3, #1
 8007a50:	60fb      	str	r3, [r7, #12]
 8007a52:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007a54:	4b39      	ldr	r3, [pc, #228]	; (8007b3c <board_init_common_board_init+0x160>)
 8007a56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a58:	4a38      	ldr	r2, [pc, #224]	; (8007b3c <board_init_common_board_init+0x160>)
 8007a5a:	f043 0302 	orr.w	r3, r3, #2
 8007a5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007a60:	4b36      	ldr	r3, [pc, #216]	; (8007b3c <board_init_common_board_init+0x160>)
 8007a62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a64:	f003 0302 	and.w	r3, r3, #2
 8007a68:	60bb      	str	r3, [r7, #8]
 8007a6a:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007a6c:	4b33      	ldr	r3, [pc, #204]	; (8007b3c <board_init_common_board_init+0x160>)
 8007a6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a70:	4a32      	ldr	r2, [pc, #200]	; (8007b3c <board_init_common_board_init+0x160>)
 8007a72:	f043 0304 	orr.w	r3, r3, #4
 8007a76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007a78:	4b30      	ldr	r3, [pc, #192]	; (8007b3c <board_init_common_board_init+0x160>)
 8007a7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a7c:	f003 0304 	and.w	r3, r3, #4
 8007a80:	607b      	str	r3, [r7, #4]
 8007a82:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8007a84:	4b2d      	ldr	r3, [pc, #180]	; (8007b3c <board_init_common_board_init+0x160>)
 8007a86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a88:	4a2c      	ldr	r2, [pc, #176]	; (8007b3c <board_init_common_board_init+0x160>)
 8007a8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007a90:	4b2a      	ldr	r3, [pc, #168]	; (8007b3c <board_init_common_board_init+0x160>)
 8007a92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a98:	603b      	str	r3, [r7, #0]
 8007a9a:	683b      	ldr	r3, [r7, #0]
//    GPIO_InitStruct.Pin = PIN_LVL_EN;
//    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
//    GPIO_InitStruct.Pull = GPIO_NOPULL;
//    HAL_GPIO_Init(PIN_PORT_B, &GPIO_InitStruct);

    board_init_specific();
 8007a9c:	f000 f942 	bl	8007d24 <board_init_specific>
    serial_com_init_usart();
 8007aa0:	f000 f86e 	bl	8007b80 <serial_com_init_usart>

    for (uint8_t iii = 0; iii < NUM_TIMERS; iii++) board_init_common_timer_init(iii);
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007aaa:	e009      	b.n	8007ac0 <board_init_common_board_init+0xe4>
 8007aac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f7ff fe49 	bl	8007748 <board_init_common_timer_init>
 8007ab6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007aba:	3301      	adds	r3, #1
 8007abc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007ac0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007ac4:	2b02      	cmp	r3, #2
 8007ac6:	d9f1      	bls.n	8007aac <board_init_common_board_init+0xd0>

    ws2812b_init();
 8007ac8:	f7f8 fe5c 	bl	8000784 <ws2812b_init>

    color_led_init();
 8007acc:	f7f8 fd52 	bl	8000574 <color_led_init>
    //animate_led_init(); // not yet defined..
    HAL_GPIO_WritePin(PIN_PORT_C, PIN_LVL_DIR, GPIO_PIN_SET);
 8007ad0:	2201      	movs	r2, #1
 8007ad2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007ad6:	481a      	ldr	r0, [pc, #104]	; (8007b40 <board_init_common_board_init+0x164>)
 8007ad8:	f7fc fb28 	bl	800412c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PIN_PORT_C, PIN_LVL_EN, GPIO_PIN_RESET);
 8007adc:	2200      	movs	r2, #0
 8007ade:	2180      	movs	r1, #128	; 0x80
 8007ae0:	4817      	ldr	r0, [pc, #92]	; (8007b40 <board_init_common_board_init+0x164>)
 8007ae2:	f7fc fb23 	bl	800412c <HAL_GPIO_WritePin>

    // setup the wakeups as only interrupts without the WKUP enabled yet... TODO
    GPIO_InitStruct.Pin = PIN_WKUP_1|PIN_WKUP_4;
 8007ae6:	2305      	movs	r3, #5
 8007ae8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8007aea:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8007aee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007af0:	2300      	movs	r3, #0
 8007af2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(PIN_PORT_A, &GPIO_InitStruct);
 8007af4:	f107 0318 	add.w	r3, r7, #24
 8007af8:	4619      	mov	r1, r3
 8007afa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007afe:	f7fc f99b 	bl	8003e38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PIN_WKUP_2|PIN_WKUP_3;
 8007b02:	f242 0320 	movw	r3, #8224	; 0x2020
 8007b06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8007b08:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8007b0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 8007b12:	f107 0318 	add.w	r3, r7, #24
 8007b16:	4619      	mov	r1, r3
 8007b18:	4809      	ldr	r0, [pc, #36]	; (8007b40 <board_init_common_board_init+0x164>)
 8007b1a:	f7fc f98d 	bl	8003e38 <HAL_GPIO_Init>

    board_init_common_nvic_setup_interrupts();
 8007b1e:	f7ff ff03 	bl	8007928 <board_init_common_nvic_setup_interrupts>
    //board_init_common_rtc_init();

    //HAL_GPIO_WritePin(GPIOC, PIN_LED_OUT_1|PIN_LED_OUT_2, GPIO_PIN_RESET);
    HAL_GPIO_WritePin(GPIOC, PIN_LVL_EN, GPIO_PIN_SET);
 8007b22:	2201      	movs	r2, #1
 8007b24:	2180      	movs	r1, #128	; 0x80
 8007b26:	4806      	ldr	r0, [pc, #24]	; (8007b40 <board_init_common_board_init+0x164>)
 8007b28:	f7fc fb00 	bl	800412c <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8007b2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007b30:	f7fb fd76 	bl	8003620 <HAL_Delay>

}
 8007b34:	bf00      	nop
 8007b36:	3730      	adds	r7, #48	; 0x30
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}
 8007b3c:	40021000 	.word	0x40021000
 8007b40:	48000800 	.word	0x48000800

08007b44 <board_init_red_led_on>:
    HAL_TIM_PWM_Stop_DMA(&g_tim15_handle, TIM_CHANNEL_1);
}


void board_init_red_led_on(void)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(PIN_PORT_C, RED_LED, GPIO_PIN_SET);
 8007b48:	2201      	movs	r2, #1
 8007b4a:	2104      	movs	r1, #4
 8007b4c:	4802      	ldr	r0, [pc, #8]	; (8007b58 <board_init_red_led_on+0x14>)
 8007b4e:	f7fc faed 	bl	800412c <HAL_GPIO_WritePin>
}
 8007b52:	bf00      	nop
 8007b54:	bd80      	pop	{r7, pc}
 8007b56:	bf00      	nop
 8007b58:	48000800 	.word	0x48000800

08007b5c <board_init_red_led_off>:


void board_init_red_led_off(void)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(PIN_PORT_C, RED_LED, GPIO_PIN_RESET);
 8007b60:	2200      	movs	r2, #0
 8007b62:	2104      	movs	r1, #4
 8007b64:	4802      	ldr	r0, [pc, #8]	; (8007b70 <board_init_red_led_off+0x14>)
 8007b66:	f7fc fae1 	bl	800412c <HAL_GPIO_WritePin>
}
 8007b6a:	bf00      	nop
 8007b6c:	bd80      	pop	{r7, pc}
 8007b6e:	bf00      	nop
 8007b70:	48000800 	.word	0x48000800

08007b74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007b74:	b480      	push	{r7}
 8007b76:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8007b78:	b672      	cpsid	i
}
 8007b7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007b7c:	e7fe      	b.n	8007b7c <Error_Handler+0x8>
	...

08007b80 <serial_com_init_usart>:
    }
}


void serial_com_init_usart(void)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b082      	sub	sp, #8
 8007b84:	af00      	add	r7, sp, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 8007b86:	4b0d      	ldr	r3, [pc, #52]	; (8007bbc <serial_com_init_usart+0x3c>)
 8007b88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b8a:	4a0c      	ldr	r2, [pc, #48]	; (8007bbc <serial_com_init_usart+0x3c>)
 8007b8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007b90:	6613      	str	r3, [r2, #96]	; 0x60
 8007b92:	4b0a      	ldr	r3, [pc, #40]	; (8007bbc <serial_com_init_usart+0x3c>)
 8007b94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b9a:	607b      	str	r3, [r7, #4]
 8007b9c:	687b      	ldr	r3, [r7, #4]
    if(HAL_UART_DeInit(&gh_host_usart) != HAL_OK)
 8007b9e:	4808      	ldr	r0, [pc, #32]	; (8007bc0 <serial_com_init_usart+0x40>)
 8007ba0:	f7ff f834 	bl	8006c0c <HAL_UART_DeInit>
    {
        //Error_Handler();
    }
    if(HAL_UART_Init(&gh_host_usart) != HAL_OK)
 8007ba4:	4806      	ldr	r0, [pc, #24]	; (8007bc0 <serial_com_init_usart+0x40>)
 8007ba6:	f7fe ffe3 	bl	8006b70 <HAL_UART_Init>
 8007baa:	4603      	mov	r3, r0
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d000      	beq.n	8007bb2 <serial_com_init_usart+0x32>
    {
        while(1);
 8007bb0:	e7fe      	b.n	8007bb0 <serial_com_init_usart+0x30>
        //Error_Handler();
    }
}
 8007bb2:	bf00      	nop
 8007bb4:	3708      	adds	r7, #8
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}
 8007bba:	bf00      	nop
 8007bbc:	40021000 	.word	0x40021000
 8007bc0:	20000018 	.word	0x20000018

08007bc4 <HAL_UART_MspInit>:

//USART_HandleTypeDef gh_host_usart;
//SPI_HandleTypeDef   gh_disp_spi;

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b0a0      	sub	sp, #128	; 0x80
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007bcc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	601a      	str	r2, [r3, #0]
 8007bd4:	605a      	str	r2, [r3, #4]
 8007bd6:	609a      	str	r2, [r3, #8]
 8007bd8:	60da      	str	r2, [r3, #12]
 8007bda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007bdc:	f107 0310 	add.w	r3, r7, #16
 8007be0:	225c      	movs	r2, #92	; 0x5c
 8007be2:	2100      	movs	r1, #0
 8007be4:	4618      	mov	r0, r3
 8007be6:	f000 fe13 	bl	8008810 <memset>
  if(huart->Instance==USART1)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4a22      	ldr	r2, [pc, #136]	; (8007c78 <HAL_UART_MspInit+0xb4>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d13d      	bne.n	8007c70 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007bfc:	f107 0310 	add.w	r3, r7, #16
 8007c00:	4618      	mov	r0, r3
 8007c02:	f7fd f9db 	bl	8004fbc <HAL_RCCEx_PeriphCLKConfig>
 8007c06:	4603      	mov	r3, r0
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d001      	beq.n	8007c10 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8007c0c:	f7ff ffb2 	bl	8007b74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007c10:	4b1a      	ldr	r3, [pc, #104]	; (8007c7c <HAL_UART_MspInit+0xb8>)
 8007c12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c14:	4a19      	ldr	r2, [pc, #100]	; (8007c7c <HAL_UART_MspInit+0xb8>)
 8007c16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007c1a:	6613      	str	r3, [r2, #96]	; 0x60
 8007c1c:	4b17      	ldr	r3, [pc, #92]	; (8007c7c <HAL_UART_MspInit+0xb8>)
 8007c1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c24:	60fb      	str	r3, [r7, #12]
 8007c26:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007c28:	4b14      	ldr	r3, [pc, #80]	; (8007c7c <HAL_UART_MspInit+0xb8>)
 8007c2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c2c:	4a13      	ldr	r2, [pc, #76]	; (8007c7c <HAL_UART_MspInit+0xb8>)
 8007c2e:	f043 0302 	orr.w	r3, r3, #2
 8007c32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007c34:	4b11      	ldr	r3, [pc, #68]	; (8007c7c <HAL_UART_MspInit+0xb8>)
 8007c36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c38:	f003 0302 	and.w	r3, r3, #2
 8007c3c:	60bb      	str	r3, [r7, #8]
 8007c3e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = PIN_XR_RX | PIN_XR_TX;
 8007c40:	23c0      	movs	r3, #192	; 0xc0
 8007c42:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c44:	2302      	movs	r3, #2
 8007c46:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007c4c:	2303      	movs	r3, #3
 8007c4e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007c50:	2307      	movs	r3, #7
 8007c52:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007c54:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007c58:	4619      	mov	r1, r3
 8007c5a:	4809      	ldr	r0, [pc, #36]	; (8007c80 <HAL_UART_MspInit+0xbc>)
 8007c5c:	f7fc f8ec 	bl	8003e38 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 1);
 8007c60:	2201      	movs	r2, #1
 8007c62:	2100      	movs	r1, #0
 8007c64:	2025      	movs	r0, #37	; 0x25
 8007c66:	f7fb fe22 	bl	80038ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8007c6a:	2025      	movs	r0, #37	; 0x25
 8007c6c:	f7fb fe3b 	bl	80038e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8007c70:	bf00      	nop
 8007c72:	3780      	adds	r7, #128	; 0x80
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}
 8007c78:	40013800 	.word	0x40013800
 8007c7c:	40021000 	.word	0x40021000
 8007c80:	48000400 	.word	0x48000400

08007c84 <board_init_usart_setup>:

static void board_init_usart_setup(void)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b086      	sub	sp, #24
 8007c88:	af00      	add	r7, sp, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 8007c8a:	4b14      	ldr	r3, [pc, #80]	; (8007cdc <board_init_usart_setup+0x58>)
 8007c8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c8e:	4a13      	ldr	r2, [pc, #76]	; (8007cdc <board_init_usart_setup+0x58>)
 8007c90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007c94:	6613      	str	r3, [r2, #96]	; 0x60
 8007c96:	4b11      	ldr	r3, [pc, #68]	; (8007cdc <board_init_usart_setup+0x58>)
 8007c98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c9e:	603b      	str	r3, [r7, #0]
 8007ca0:	683b      	ldr	r3, [r7, #0]
    GPIO_InitTypeDef  GPIO_InitStruct;

    GPIO_InitStruct.Pin       = PIN_XR_TX; // L431 transmit pin
 8007ca2:	2380      	movs	r3, #128	; 0x80
 8007ca4:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8007ca6:	2302      	movs	r3, #2
 8007ca8:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8007caa:	2300      	movs	r3, #0
 8007cac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 8007cae:	2302      	movs	r3, #2
 8007cb0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007cb2:	2307      	movs	r3, #7
 8007cb4:	617b      	str	r3, [r7, #20]

    HAL_GPIO_Init(PIN_PORT_B, &GPIO_InitStruct);
 8007cb6:	1d3b      	adds	r3, r7, #4
 8007cb8:	4619      	mov	r1, r3
 8007cba:	4809      	ldr	r0, [pc, #36]	; (8007ce0 <board_init_usart_setup+0x5c>)
 8007cbc:	f7fc f8bc 	bl	8003e38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PIN_XR_RX;
 8007cc0:	2340      	movs	r3, #64	; 0x40
 8007cc2:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007cc4:	2307      	movs	r3, #7
 8007cc6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(PIN_PORT_B, &GPIO_InitStruct);
 8007cc8:	1d3b      	adds	r3, r7, #4
 8007cca:	4619      	mov	r1, r3
 8007ccc:	4804      	ldr	r0, [pc, #16]	; (8007ce0 <board_init_usart_setup+0x5c>)
 8007cce:	f7fc f8b3 	bl	8003e38 <HAL_GPIO_Init>

}
 8007cd2:	bf00      	nop
 8007cd4:	3718      	adds	r7, #24
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}
 8007cda:	bf00      	nop
 8007cdc:	40021000 	.word	0x40021000
 8007ce0:	48000400 	.word	0x48000400

08007ce4 <board_init_spi_setup>:


static void board_init_spi_setup(void)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b086      	sub	sp, #24
 8007ce8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef  GPIO_InitStruct;

    GPIO_InitStruct.Pin         = PIN_SPI1_SCK | PIN_SPI1_CIPO | PIN_SPI1_COPI;
 8007cea:	f641 0302 	movw	r3, #6146	; 0x1802
 8007cee:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode        = GPIO_MODE_AF_PP;
 8007cf0:	2302      	movs	r3, #2
 8007cf2:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull        = GPIO_PULLDOWN;
 8007cf4:	2302      	movs	r3, #2
 8007cf6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed       = GPIO_SPEED_FREQ_VERY_HIGH;
 8007cf8:	2303      	movs	r3, #3
 8007cfa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Alternate   = GPIO_AF5_SPI1;
 8007cfc:	2305      	movs	r3, #5
 8007cfe:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(PIN_PORT_A, &GPIO_InitStruct);
 8007d00:	1d3b      	adds	r3, r7, #4
 8007d02:	4619      	mov	r1, r3
 8007d04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007d08:	f7fc f896 	bl	8003e38 <HAL_GPIO_Init>
}
 8007d0c:	bf00      	nop
 8007d0e:	3718      	adds	r7, #24
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}

08007d14 <board_init_peripheral_setup>:


static void board_init_peripheral_setup(void)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	af00      	add	r7, sp, #0
    board_init_usart_setup();
 8007d18:	f7ff ffb4 	bl	8007c84 <board_init_usart_setup>
    board_init_spi_setup();
 8007d1c:	f7ff ffe2 	bl	8007ce4 <board_init_spi_setup>
}
 8007d20:	bf00      	nop
 8007d22:	bd80      	pop	{r7, pc}

08007d24 <board_init_specific>:

void board_init_specific(void)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b09e      	sub	sp, #120	; 0x78
 8007d28:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d2a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007d2e:	2200      	movs	r2, #0
 8007d30:	601a      	str	r2, [r3, #0]
 8007d32:	605a      	str	r2, [r3, #4]
 8007d34:	609a      	str	r2, [r3, #8]
 8007d36:	60da      	str	r2, [r3, #12]
 8007d38:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007d3a:	f107 0308 	add.w	r3, r7, #8
 8007d3e:	225c      	movs	r2, #92	; 0x5c
 8007d40:	2100      	movs	r1, #0
 8007d42:	4618      	mov	r0, r3
 8007d44:	f000 fd64 	bl	8008810 <memset>

    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8007d48:	2301      	movs	r3, #1
 8007d4a:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007d50:	f107 0308 	add.w	r3, r7, #8
 8007d54:	4618      	mov	r0, r3
 8007d56:	f7fd f931 	bl	8004fbc <HAL_RCCEx_PeriphCLKConfig>
    {
      //Error_Handler();
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007d5a:	4b31      	ldr	r3, [pc, #196]	; (8007e20 <board_init_specific+0xfc>)
 8007d5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d5e:	4a30      	ldr	r2, [pc, #192]	; (8007e20 <board_init_specific+0xfc>)
 8007d60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007d64:	6613      	str	r3, [r2, #96]	; 0x60
 8007d66:	4b2e      	ldr	r3, [pc, #184]	; (8007e20 <board_init_specific+0xfc>)
 8007d68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d6e:	607b      	str	r3, [r7, #4]
 8007d70:	687b      	ldr	r3, [r7, #4]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007d72:	4b2b      	ldr	r3, [pc, #172]	; (8007e20 <board_init_specific+0xfc>)
 8007d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d76:	4a2a      	ldr	r2, [pc, #168]	; (8007e20 <board_init_specific+0xfc>)
 8007d78:	f043 0302 	orr.w	r3, r3, #2
 8007d7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007d7e:	4b28      	ldr	r3, [pc, #160]	; (8007e20 <board_init_specific+0xfc>)
 8007d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d82:	f003 0302 	and.w	r3, r3, #2
 8007d86:	603b      	str	r3, [r7, #0]
 8007d88:	683b      	ldr	r3, [r7, #0]
    GPIO_InitStruct.Pin = PIN_DISP_BACKLIGHT|PIN_DISP_DC|PIN_DISP_RST;
 8007d8a:	23e0      	movs	r3, #224	; 0xe0
 8007d8c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d92:	2300      	movs	r3, #0
 8007d94:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(PIN_PORT_A, &GPIO_InitStruct);
 8007d96:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007d9a:	4619      	mov	r1, r3
 8007d9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007da0:	f7fc f84a 	bl	8003e38 <HAL_GPIO_Init>

    // spi setup (port A)
    // PIN_SPI1_SCK, PIN_SPI1_CIPO, PIN_SPI1_COPI
    // PIN_SPI1_NSS

    GPIO_InitStruct.Pin = PIN_INT_LVL_EN;
 8007da4:	2301      	movs	r3, #1
 8007da6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007da8:	2301      	movs	r3, #1
 8007daa:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007dac:	2300      	movs	r3, #0
 8007dae:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(PIN_PORT_B, &GPIO_InitStruct);
 8007db0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007db4:	4619      	mov	r1, r3
 8007db6:	481b      	ldr	r0, [pc, #108]	; (8007e24 <board_init_specific+0x100>)
 8007db8:	f7fc f83e 	bl	8003e38 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, PIN_INT_LVL_EN, GPIO_PIN_SET);
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	2101      	movs	r1, #1
 8007dc0:	4818      	ldr	r0, [pc, #96]	; (8007e24 <board_init_specific+0x100>)
 8007dc2:	f7fc f9b3 	bl	800412c <HAL_GPIO_WritePin>
    // setup XR_RX and XR_TX

    GPIO_InitStruct.Pin = PIN_XR_GPIO | PIN_VBUS_PRESENT;
 8007dc6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8007dca:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(PIN_PORT_B, &GPIO_InitStruct);
 8007dd4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007dd8:	4619      	mov	r1, r3
 8007dda:	4812      	ldr	r0, [pc, #72]	; (8007e24 <board_init_specific+0x100>)
 8007ddc:	f7fc f82c 	bl	8003e38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PIN_LVL_DIR;
 8007de0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007de4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007de6:	2301      	movs	r3, #1
 8007de8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007dea:	2300      	movs	r3, #0
 8007dec:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 8007dee:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007df2:	4619      	mov	r1, r3
 8007df4:	480c      	ldr	r0, [pc, #48]	; (8007e28 <board_init_specific+0x104>)
 8007df6:	f7fc f81f 	bl	8003e38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PIN_LVL_EN;
 8007dfa:	2380      	movs	r3, #128	; 0x80
 8007dfc:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e02:	2300      	movs	r3, #0
 8007e04:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 8007e06:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007e0a:	4619      	mov	r1, r3
 8007e0c:	4806      	ldr	r0, [pc, #24]	; (8007e28 <board_init_specific+0x104>)
 8007e0e:	f7fc f813 	bl	8003e38 <HAL_GPIO_Init>

    board_init_peripheral_setup();
 8007e12:	f7ff ff7f 	bl	8007d14 <board_init_peripheral_setup>
}
 8007e16:	bf00      	nop
 8007e18:	3778      	adds	r7, #120	; 0x78
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
 8007e1e:	bf00      	nop
 8007e20:	40021000 	.word	0x40021000
 8007e24:	48000400 	.word	0x48000400
 8007e28:	48000800 	.word	0x48000800

08007e2c <flash_info_block_init>:
#pragma pack(0)

flash_info_block_t  g_flash_info_block;

void flash_info_block_init(void)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	af00      	add	r7, sp, #0
    g_flash_info_block.flash_info_data.uuid.data[0] = HAL_GetUIDw0();
 8007e30:	f7fb fc1a 	bl	8003668 <HAL_GetUIDw0>
 8007e34:	4603      	mov	r3, r0
 8007e36:	4a12      	ldr	r2, [pc, #72]	; (8007e80 <flash_info_block_init+0x54>)
 8007e38:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    g_flash_info_block.flash_info_data.uuid.data[1] = HAL_GetUIDw1();
 8007e3c:	f7fb fc20 	bl	8003680 <HAL_GetUIDw1>
 8007e40:	4603      	mov	r3, r0
 8007e42:	4a0f      	ldr	r2, [pc, #60]	; (8007e80 <flash_info_block_init+0x54>)
 8007e44:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    g_flash_info_block.flash_info_data.uuid.data[2] = HAL_GetUIDw2();
 8007e48:	f7fb fc26 	bl	8003698 <HAL_GetUIDw2>
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	4a0c      	ldr	r2, [pc, #48]	; (8007e80 <flash_info_block_init+0x54>)
 8007e50:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

    g_flash_info_block.flash_info_data.strip_info.num_strips = 1;
 8007e54:	4b0a      	ldr	r3, [pc, #40]	; (8007e80 <flash_info_block_init+0x54>)
 8007e56:	2201      	movs	r2, #1
 8007e58:	701a      	strb	r2, [r3, #0]

    g_flash_info_block.flash_info_data.image_info.active_image = FLASH_INFO_IMAGE_SLOT_1;
 8007e5a:	4b09      	ldr	r3, [pc, #36]	; (8007e80 <flash_info_block_init+0x54>)
 8007e5c:	2201      	movs	r2, #1
 8007e5e:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
    //g_flash_info_block.image_data.active_image_fw_version = ;
    g_flash_info_block.flash_info_data.image_info.mini_main_image = FLASH_INFO_MINI_MAIN_SLOT;
 8007e62:	4b07      	ldr	r3, [pc, #28]	; (8007e80 <flash_info_block_init+0x54>)
 8007e64:	2200      	movs	r2, #0
 8007e66:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
//    g_flash_info_block.image_data.mini_main_image_fw_version = ;
    g_flash_info_block.flash_info_data.image_info.select_image = FLASH_INFO_IMAGE_SLOT_1;
 8007e6a:	4b05      	ldr	r3, [pc, #20]	; (8007e80 <flash_info_block_init+0x54>)
 8007e6c:	2201      	movs	r2, #1
 8007e6e:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
    g_flash_info_block.flash_info_data.image_info.valid_image = UINT8_MAX;
 8007e72:	4b03      	ldr	r3, [pc, #12]	; (8007e80 <flash_info_block_init+0x54>)
 8007e74:	22ff      	movs	r2, #255	; 0xff
 8007e76:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
    // need to write to flash!
}
 8007e7a:	bf00      	nop
 8007e7c:	bd80      	pop	{r7, pc}
 8007e7e:	bf00      	nop
 8007e80:	20002388 	.word	0x20002388

08007e84 <flash_info_init>:
}


uint32_t temp = 0;
void flash_info_init(void)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	af00      	add	r7, sp, #0
    temp = sizeof(flash_info_data_t);
 8007e88:	4b0d      	ldr	r3, [pc, #52]	; (8007ec0 <flash_info_init+0x3c>)
 8007e8a:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8007e8e:	601a      	str	r2, [r3, #0]
    flash_info_block_init();
 8007e90:	f7ff ffcc 	bl	8007e2c <flash_info_block_init>
    //flash_access_read_flash_info_sector(g_flash_info_block.flat_data_uint32);
    if ((UINT32_MAX == g_flash_info_block.flash_info_data.uuid.data[0]) &&
 8007e94:	4b0b      	ldr	r3, [pc, #44]	; (8007ec4 <flash_info_init+0x40>)
 8007e96:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007e9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e9e:	d10d      	bne.n	8007ebc <flash_info_init+0x38>
                    (UINT32_MAX == g_flash_info_block.flash_info_data.uuid.data[1]) &&
 8007ea0:	4b08      	ldr	r3, [pc, #32]	; (8007ec4 <flash_info_init+0x40>)
 8007ea2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    if ((UINT32_MAX == g_flash_info_block.flash_info_data.uuid.data[0]) &&
 8007ea6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007eaa:	d107      	bne.n	8007ebc <flash_info_init+0x38>
                    (UINT32_MAX == g_flash_info_block.flash_info_data.uuid.data[2]))
 8007eac:	4b05      	ldr	r3, [pc, #20]	; (8007ec4 <flash_info_init+0x40>)
 8007eae:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
                    (UINT32_MAX == g_flash_info_block.flash_info_data.uuid.data[1]) &&
 8007eb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007eb6:	d101      	bne.n	8007ebc <flash_info_init+0x38>
    {
        flash_info_block_init();
 8007eb8:	f7ff ffb8 	bl	8007e2c <flash_info_block_init>
    }
}
 8007ebc:	bf00      	nop
 8007ebe:	bd80      	pop	{r7, pc}
 8007ec0:	20002b88 	.word	0x20002b88
 8007ec4:	20002388 	.word	0x20002388

08007ec8 <main>:
#include "task_create.h"
#include "flash_info.h"
#include "serial_com.h"

int main(void)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	af00      	add	r7, sp, #0
    board_init_common_board_init();
 8007ecc:	f7ff fd86 	bl	80079dc <board_init_common_board_init>
    flash_info_init();
 8007ed0:	f7ff ffd8 	bl	8007e84 <flash_info_init>
    //serial_com_init_usart();

    task_create();
 8007ed4:	f000 f80a 	bl	8007eec <task_create>
	semaphore_create();
 8007ed8:	f7f8 fbe8 	bl	80006ac <semaphore_create>
    reset_ws2812b();
 8007edc:	f7f8 fc38 	bl	8000750 <reset_ws2812b>
	osKernelStart();
 8007ee0:	f7f8 fd32 	bl	8000948 <osKernelStart>
 8007ee4:	2300      	movs	r3, #0
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	bd80      	pop	{r7, pc}
	...

08007eec <task_create>:
	.priority = (osPriority_t) osPriorityNormal,
};


void task_create(void)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	af00      	add	r7, sp, #0
    osKernelInitialize();
 8007ef0:	f7f8 fd06 	bl	8000900 <osKernelInitialize>
    //g_led_ctrl_handle = osThreadNew(task_led_ctrl_strip_one, NULL, &g_task_led_ctrl_attributes);
	//g_button_press_handle = osThreadNew(task_button_press, NULL, &g_task_button_press_attributes);
    //g_dma_transfer_handle = osThreadNew(task_dma_transfer, NULL, &g_task_dma_transfer_attributes);
    //g_led_strip_1_ctrl_handle = osThreadNew(task_led_ctrl_strip_one, NULL, &g_task_strip_1_led_ctrl_attributes);
    g_led_strip_2_ctrl_handle = osThreadNew(task_led_ctrl_strip_two, NULL, &g_task_strip_2_led_ctrl_attributes);
 8007ef4:	4a06      	ldr	r2, [pc, #24]	; (8007f10 <task_create+0x24>)
 8007ef6:	2100      	movs	r1, #0
 8007ef8:	4806      	ldr	r0, [pc, #24]	; (8007f14 <task_create+0x28>)
 8007efa:	f7f8 fd4b 	bl	8000994 <osThreadNew>
 8007efe:	4603      	mov	r3, r0
 8007f00:	4a05      	ldr	r2, [pc, #20]	; (8007f18 <task_create+0x2c>)
 8007f02:	6013      	str	r3, [r2, #0]
#if defined(ENABLE_STRIP_3)
    g_led_strip_3_ctrl_handle = osThreadNew(task_led_ctrl_strip_three, NULL, &g_task_strip_3_led_ctrl_attributes);
#endif
    g_tasks_running = true; // technically will be running after task scheduler started
 8007f04:	4b05      	ldr	r3, [pc, #20]	; (8007f1c <task_create+0x30>)
 8007f06:	2201      	movs	r2, #1
 8007f08:	701a      	strb	r2, [r3, #0]
}
 8007f0a:	bf00      	nop
 8007f0c:	bd80      	pop	{r7, pc}
 8007f0e:	bf00      	nop
 8007f10:	08009978 	.word	0x08009978
 8007f14:	08000711 	.word	0x08000711
 8007f18:	20002b8c 	.word	0x20002b8c
 8007f1c:	200033f0 	.word	0x200033f0

08007f20 <HAL_Set_DMA_Callbacks>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);


// Function below added by SRW
static void HAL_Set_DMA_Callbacks(void)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	af00      	add	r7, sp, #0
    HAL_DMA_RegisterCallback(&hdma_tim1_ch1, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 8007f24:	4a0d      	ldr	r2, [pc, #52]	; (8007f5c <HAL_Set_DMA_Callbacks+0x3c>)
 8007f26:	2100      	movs	r1, #0
 8007f28:	480d      	ldr	r0, [pc, #52]	; (8007f60 <HAL_Set_DMA_Callbacks+0x40>)
 8007f2a:	f7fb ff0d 	bl	8003d48 <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&hdma_tim1_ch2, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 8007f2e:	4a0b      	ldr	r2, [pc, #44]	; (8007f5c <HAL_Set_DMA_Callbacks+0x3c>)
 8007f30:	2100      	movs	r1, #0
 8007f32:	480c      	ldr	r0, [pc, #48]	; (8007f64 <HAL_Set_DMA_Callbacks+0x44>)
 8007f34:	f7fb ff08 	bl	8003d48 <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&hdma_tim1_ch3, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 8007f38:	4a08      	ldr	r2, [pc, #32]	; (8007f5c <HAL_Set_DMA_Callbacks+0x3c>)
 8007f3a:	2100      	movs	r1, #0
 8007f3c:	480a      	ldr	r0, [pc, #40]	; (8007f68 <HAL_Set_DMA_Callbacks+0x48>)
 8007f3e:	f7fb ff03 	bl	8003d48 <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&hdma_tim15_ch1_up_trig_com, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 8007f42:	4a06      	ldr	r2, [pc, #24]	; (8007f5c <HAL_Set_DMA_Callbacks+0x3c>)
 8007f44:	2100      	movs	r1, #0
 8007f46:	4809      	ldr	r0, [pc, #36]	; (8007f6c <HAL_Set_DMA_Callbacks+0x4c>)
 8007f48:	f7fb fefe 	bl	8003d48 <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&hdma_tim16_ch1_up, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 8007f4c:	4a03      	ldr	r2, [pc, #12]	; (8007f5c <HAL_Set_DMA_Callbacks+0x3c>)
 8007f4e:	2100      	movs	r1, #0
 8007f50:	4807      	ldr	r0, [pc, #28]	; (8007f70 <HAL_Set_DMA_Callbacks+0x50>)
 8007f52:	f7fb fef9 	bl	8003d48 <HAL_DMA_RegisterCallback>
}
 8007f56:	bf00      	nop
 8007f58:	bd80      	pop	{r7, pc}
 8007f5a:	bf00      	nop
 8007f5c:	080084b9 	.word	0x080084b9
 8007f60:	200021d4 	.word	0x200021d4
 8007f64:	2000221c 	.word	0x2000221c
 8007f68:	20002264 	.word	0x20002264
 8007f6c:	200022ac 	.word	0x200022ac
 8007f70:	200022f4 	.word	0x200022f4

08007f74 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b084      	sub	sp, #16
 8007f78:	af00      	add	r7, sp, #0
  PWR_PVDTypeDef sConfigPVD = {0};
 8007f7a:	f107 0308 	add.w	r3, r7, #8
 8007f7e:	2200      	movs	r2, #0
 8007f80:	601a      	str	r2, [r3, #0]
 8007f82:	605a      	str	r2, [r3, #4]

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007f84:	4b13      	ldr	r3, [pc, #76]	; (8007fd4 <HAL_MspInit+0x60>)
 8007f86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f88:	4a12      	ldr	r2, [pc, #72]	; (8007fd4 <HAL_MspInit+0x60>)
 8007f8a:	f043 0301 	orr.w	r3, r3, #1
 8007f8e:	6613      	str	r3, [r2, #96]	; 0x60
 8007f90:	4b10      	ldr	r3, [pc, #64]	; (8007fd4 <HAL_MspInit+0x60>)
 8007f92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f94:	f003 0301 	and.w	r3, r3, #1
 8007f98:	607b      	str	r3, [r7, #4]
 8007f9a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007f9c:	4b0d      	ldr	r3, [pc, #52]	; (8007fd4 <HAL_MspInit+0x60>)
 8007f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fa0:	4a0c      	ldr	r2, [pc, #48]	; (8007fd4 <HAL_MspInit+0x60>)
 8007fa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007fa6:	6593      	str	r3, [r2, #88]	; 0x58
 8007fa8:	4b0a      	ldr	r3, [pc, #40]	; (8007fd4 <HAL_MspInit+0x60>)
 8007faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007fb0:	603b      	str	r3, [r7, #0]
 8007fb2:	683b      	ldr	r3, [r7, #0]

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	60bb      	str	r3, [r7, #8]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 8007fb8:	2300      	movs	r3, #0
 8007fba:	60fb      	str	r3, [r7, #12]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8007fbc:	f107 0308 	add.w	r3, r7, #8
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f7fc f8ef 	bl	80041a4 <HAL_PWR_ConfigPVD>
  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 8007fc6:	f7fc f94d 	bl	8004264 <HAL_PWR_EnablePVD>
}
 8007fca:	bf00      	nop
 8007fcc:	3710      	adds	r7, #16
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}
 8007fd2:	bf00      	nop
 8007fd4:	40021000 	.word	0x40021000

08007fd8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b084      	sub	sp, #16
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a6e      	ldr	r2, [pc, #440]	; (80081a0 <HAL_TIM_Base_MspInit+0x1c8>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	f040 8091 	bne.w	800810e <HAL_TIM_Base_MspInit+0x136>
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007fec:	4b6d      	ldr	r3, [pc, #436]	; (80081a4 <HAL_TIM_Base_MspInit+0x1cc>)
 8007fee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ff0:	4a6c      	ldr	r2, [pc, #432]	; (80081a4 <HAL_TIM_Base_MspInit+0x1cc>)
 8007ff2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007ff6:	6613      	str	r3, [r2, #96]	; 0x60
 8007ff8:	4b6a      	ldr	r3, [pc, #424]	; (80081a4 <HAL_TIM_Base_MspInit+0x1cc>)
 8007ffa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ffc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008000:	60fb      	str	r3, [r7, #12]
 8008002:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8008004:	4b68      	ldr	r3, [pc, #416]	; (80081a8 <HAL_TIM_Base_MspInit+0x1d0>)
 8008006:	4a69      	ldr	r2, [pc, #420]	; (80081ac <HAL_TIM_Base_MspInit+0x1d4>)
 8008008:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_7;
 800800a:	4b67      	ldr	r3, [pc, #412]	; (80081a8 <HAL_TIM_Base_MspInit+0x1d0>)
 800800c:	2207      	movs	r2, #7
 800800e:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008010:	4b65      	ldr	r3, [pc, #404]	; (80081a8 <HAL_TIM_Base_MspInit+0x1d0>)
 8008012:	2210      	movs	r2, #16
 8008014:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8008016:	4b64      	ldr	r3, [pc, #400]	; (80081a8 <HAL_TIM_Base_MspInit+0x1d0>)
 8008018:	2200      	movs	r2, #0
 800801a:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800801c:	4b62      	ldr	r3, [pc, #392]	; (80081a8 <HAL_TIM_Base_MspInit+0x1d0>)
 800801e:	2280      	movs	r2, #128	; 0x80
 8008020:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8008022:	4b61      	ldr	r3, [pc, #388]	; (80081a8 <HAL_TIM_Base_MspInit+0x1d0>)
 8008024:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008028:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800802a:	4b5f      	ldr	r3, [pc, #380]	; (80081a8 <HAL_TIM_Base_MspInit+0x1d0>)
 800802c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008030:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8008032:	4b5d      	ldr	r3, [pc, #372]	; (80081a8 <HAL_TIM_Base_MspInit+0x1d0>)
 8008034:	2200      	movs	r2, #0
 8008036:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8008038:	4b5b      	ldr	r3, [pc, #364]	; (80081a8 <HAL_TIM_Base_MspInit+0x1d0>)
 800803a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800803e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8008040:	4859      	ldr	r0, [pc, #356]	; (80081a8 <HAL_TIM_Base_MspInit+0x1d0>)
 8008042:	f7fb fc79 	bl	8003938 <HAL_DMA_Init>
 8008046:	4603      	mov	r3, r0
 8008048:	2b00      	cmp	r3, #0
 800804a:	d001      	beq.n	8008050 <HAL_TIM_Base_MspInit+0x78>
    {
      Error_Handler();
 800804c:	f7ff fd92 	bl	8007b74 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	4a55      	ldr	r2, [pc, #340]	; (80081a8 <HAL_TIM_Base_MspInit+0x1d0>)
 8008054:	625a      	str	r2, [r3, #36]	; 0x24
 8008056:	4a54      	ldr	r2, [pc, #336]	; (80081a8 <HAL_TIM_Base_MspInit+0x1d0>)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA1_Channel3;
 800805c:	4b54      	ldr	r3, [pc, #336]	; (80081b0 <HAL_TIM_Base_MspInit+0x1d8>)
 800805e:	4a55      	ldr	r2, [pc, #340]	; (80081b4 <HAL_TIM_Base_MspInit+0x1dc>)
 8008060:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Request = DMA_REQUEST_7;
 8008062:	4b53      	ldr	r3, [pc, #332]	; (80081b0 <HAL_TIM_Base_MspInit+0x1d8>)
 8008064:	2207      	movs	r2, #7
 8008066:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008068:	4b51      	ldr	r3, [pc, #324]	; (80081b0 <HAL_TIM_Base_MspInit+0x1d8>)
 800806a:	2210      	movs	r2, #16
 800806c:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800806e:	4b50      	ldr	r3, [pc, #320]	; (80081b0 <HAL_TIM_Base_MspInit+0x1d8>)
 8008070:	2200      	movs	r2, #0
 8008072:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8008074:	4b4e      	ldr	r3, [pc, #312]	; (80081b0 <HAL_TIM_Base_MspInit+0x1d8>)
 8008076:	2280      	movs	r2, #128	; 0x80
 8008078:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800807a:	4b4d      	ldr	r3, [pc, #308]	; (80081b0 <HAL_TIM_Base_MspInit+0x1d8>)
 800807c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008080:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8008082:	4b4b      	ldr	r3, [pc, #300]	; (80081b0 <HAL_TIM_Base_MspInit+0x1d8>)
 8008084:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008088:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Mode = DMA_NORMAL;
 800808a:	4b49      	ldr	r3, [pc, #292]	; (80081b0 <HAL_TIM_Base_MspInit+0x1d8>)
 800808c:	2200      	movs	r2, #0
 800808e:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8008090:	4b47      	ldr	r3, [pc, #284]	; (80081b0 <HAL_TIM_Base_MspInit+0x1d8>)
 8008092:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8008096:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 8008098:	4845      	ldr	r0, [pc, #276]	; (80081b0 <HAL_TIM_Base_MspInit+0x1d8>)
 800809a:	f7fb fc4d 	bl	8003938 <HAL_DMA_Init>
 800809e:	4603      	mov	r3, r0
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d001      	beq.n	80080a8 <HAL_TIM_Base_MspInit+0xd0>
    {
      Error_Handler();
 80080a4:	f7ff fd66 	bl	8007b74 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	4a41      	ldr	r2, [pc, #260]	; (80081b0 <HAL_TIM_Base_MspInit+0x1d8>)
 80080ac:	629a      	str	r2, [r3, #40]	; 0x28
 80080ae:	4a40      	ldr	r2, [pc, #256]	; (80081b0 <HAL_TIM_Base_MspInit+0x1d8>)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM1_CH3 Init */
    hdma_tim1_ch3.Instance = DMA1_Channel7;
 80080b4:	4b40      	ldr	r3, [pc, #256]	; (80081b8 <HAL_TIM_Base_MspInit+0x1e0>)
 80080b6:	4a41      	ldr	r2, [pc, #260]	; (80081bc <HAL_TIM_Base_MspInit+0x1e4>)
 80080b8:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch3.Init.Request = DMA_REQUEST_7;
 80080ba:	4b3f      	ldr	r3, [pc, #252]	; (80081b8 <HAL_TIM_Base_MspInit+0x1e0>)
 80080bc:	2207      	movs	r2, #7
 80080be:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80080c0:	4b3d      	ldr	r3, [pc, #244]	; (80081b8 <HAL_TIM_Base_MspInit+0x1e0>)
 80080c2:	2210      	movs	r2, #16
 80080c4:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80080c6:	4b3c      	ldr	r3, [pc, #240]	; (80081b8 <HAL_TIM_Base_MspInit+0x1e0>)
 80080c8:	2200      	movs	r2, #0
 80080ca:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80080cc:	4b3a      	ldr	r3, [pc, #232]	; (80081b8 <HAL_TIM_Base_MspInit+0x1e0>)
 80080ce:	2280      	movs	r2, #128	; 0x80
 80080d0:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80080d2:	4b39      	ldr	r3, [pc, #228]	; (80081b8 <HAL_TIM_Base_MspInit+0x1e0>)
 80080d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80080d8:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80080da:	4b37      	ldr	r3, [pc, #220]	; (80081b8 <HAL_TIM_Base_MspInit+0x1e0>)
 80080dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80080e0:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch3.Init.Mode = DMA_NORMAL;
 80080e2:	4b35      	ldr	r3, [pc, #212]	; (80081b8 <HAL_TIM_Base_MspInit+0x1e0>)
 80080e4:	2200      	movs	r2, #0
 80080e6:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80080e8:	4b33      	ldr	r3, [pc, #204]	; (80081b8 <HAL_TIM_Base_MspInit+0x1e0>)
 80080ea:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80080ee:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch3) != HAL_OK)
 80080f0:	4831      	ldr	r0, [pc, #196]	; (80081b8 <HAL_TIM_Base_MspInit+0x1e0>)
 80080f2:	f7fb fc21 	bl	8003938 <HAL_DMA_Init>
 80080f6:	4603      	mov	r3, r0
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d001      	beq.n	8008100 <HAL_TIM_Base_MspInit+0x128>
    {
      Error_Handler();
 80080fc:	f7ff fd3a 	bl	8007b74 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	4a2d      	ldr	r2, [pc, #180]	; (80081b8 <HAL_TIM_Base_MspInit+0x1e0>)
 8008104:	62da      	str	r2, [r3, #44]	; 0x2c
 8008106:	4a2c      	ldr	r2, [pc, #176]	; (80081b8 <HAL_TIM_Base_MspInit+0x1e0>)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6293      	str	r3, [r2, #40]	; 0x28
 800810c:	e041      	b.n	8008192 <HAL_TIM_Base_MspInit+0x1ba>
  }
  else if(htim_base->Instance==TIM16)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4a2b      	ldr	r2, [pc, #172]	; (80081c0 <HAL_TIM_Base_MspInit+0x1e8>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d13c      	bne.n	8008192 <HAL_TIM_Base_MspInit+0x1ba>
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8008118:	4b22      	ldr	r3, [pc, #136]	; (80081a4 <HAL_TIM_Base_MspInit+0x1cc>)
 800811a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800811c:	4a21      	ldr	r2, [pc, #132]	; (80081a4 <HAL_TIM_Base_MspInit+0x1cc>)
 800811e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008122:	6613      	str	r3, [r2, #96]	; 0x60
 8008124:	4b1f      	ldr	r3, [pc, #124]	; (80081a4 <HAL_TIM_Base_MspInit+0x1cc>)
 8008126:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800812c:	60bb      	str	r3, [r7, #8]
 800812e:	68bb      	ldr	r3, [r7, #8]

    /* TIM16 DMA Init */
    /* TIM16_CH1_UP Init */
    hdma_tim16_ch1_up.Instance = DMA1_Channel6;
 8008130:	4b24      	ldr	r3, [pc, #144]	; (80081c4 <HAL_TIM_Base_MspInit+0x1ec>)
 8008132:	4a25      	ldr	r2, [pc, #148]	; (80081c8 <HAL_TIM_Base_MspInit+0x1f0>)
 8008134:	601a      	str	r2, [r3, #0]
    hdma_tim16_ch1_up.Init.Request = DMA_REQUEST_4;
 8008136:	4b23      	ldr	r3, [pc, #140]	; (80081c4 <HAL_TIM_Base_MspInit+0x1ec>)
 8008138:	2204      	movs	r2, #4
 800813a:	605a      	str	r2, [r3, #4]
    hdma_tim16_ch1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800813c:	4b21      	ldr	r3, [pc, #132]	; (80081c4 <HAL_TIM_Base_MspInit+0x1ec>)
 800813e:	2210      	movs	r2, #16
 8008140:	609a      	str	r2, [r3, #8]
    hdma_tim16_ch1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8008142:	4b20      	ldr	r3, [pc, #128]	; (80081c4 <HAL_TIM_Base_MspInit+0x1ec>)
 8008144:	2200      	movs	r2, #0
 8008146:	60da      	str	r2, [r3, #12]
    hdma_tim16_ch1_up.Init.MemInc = DMA_MINC_ENABLE;
 8008148:	4b1e      	ldr	r3, [pc, #120]	; (80081c4 <HAL_TIM_Base_MspInit+0x1ec>)
 800814a:	2280      	movs	r2, #128	; 0x80
 800814c:	611a      	str	r2, [r3, #16]
    hdma_tim16_ch1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800814e:	4b1d      	ldr	r3, [pc, #116]	; (80081c4 <HAL_TIM_Base_MspInit+0x1ec>)
 8008150:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008154:	615a      	str	r2, [r3, #20]
    hdma_tim16_ch1_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8008156:	4b1b      	ldr	r3, [pc, #108]	; (80081c4 <HAL_TIM_Base_MspInit+0x1ec>)
 8008158:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800815c:	619a      	str	r2, [r3, #24]
    hdma_tim16_ch1_up.Init.Mode = DMA_NORMAL;
 800815e:	4b19      	ldr	r3, [pc, #100]	; (80081c4 <HAL_TIM_Base_MspInit+0x1ec>)
 8008160:	2200      	movs	r2, #0
 8008162:	61da      	str	r2, [r3, #28]
    hdma_tim16_ch1_up.Init.Priority = DMA_PRIORITY_LOW;
 8008164:	4b17      	ldr	r3, [pc, #92]	; (80081c4 <HAL_TIM_Base_MspInit+0x1ec>)
 8008166:	2200      	movs	r2, #0
 8008168:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim16_ch1_up) != HAL_OK)
 800816a:	4816      	ldr	r0, [pc, #88]	; (80081c4 <HAL_TIM_Base_MspInit+0x1ec>)
 800816c:	f7fb fbe4 	bl	8003938 <HAL_DMA_Init>
 8008170:	4603      	mov	r3, r0
 8008172:	2b00      	cmp	r3, #0
 8008174:	d001      	beq.n	800817a <HAL_TIM_Base_MspInit+0x1a2>
    {
      Error_Handler();
 8008176:	f7ff fcfd 	bl	8007b74 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim16_ch1_up);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	4a11      	ldr	r2, [pc, #68]	; (80081c4 <HAL_TIM_Base_MspInit+0x1ec>)
 800817e:	625a      	str	r2, [r3, #36]	; 0x24
 8008180:	4a10      	ldr	r2, [pc, #64]	; (80081c4 <HAL_TIM_Base_MspInit+0x1ec>)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim16_ch1_up);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	4a0e      	ldr	r2, [pc, #56]	; (80081c4 <HAL_TIM_Base_MspInit+0x1ec>)
 800818a:	621a      	str	r2, [r3, #32]
 800818c:	4a0d      	ldr	r2, [pc, #52]	; (80081c4 <HAL_TIM_Base_MspInit+0x1ec>)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6293      	str	r3, [r2, #40]	; 0x28
  }
  HAL_Set_DMA_Callbacks();
 8008192:	f7ff fec5 	bl	8007f20 <HAL_Set_DMA_Callbacks>
}
 8008196:	bf00      	nop
 8008198:	3710      	adds	r7, #16
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}
 800819e:	bf00      	nop
 80081a0:	40012c00 	.word	0x40012c00
 80081a4:	40021000 	.word	0x40021000
 80081a8:	200021d4 	.word	0x200021d4
 80081ac:	4002001c 	.word	0x4002001c
 80081b0:	2000221c 	.word	0x2000221c
 80081b4:	40020030 	.word	0x40020030
 80081b8:	20002264 	.word	0x20002264
 80081bc:	40020080 	.word	0x40020080
 80081c0:	40014400 	.word	0x40014400
 80081c4:	200022f4 	.word	0x200022f4
 80081c8:	4002006c 	.word	0x4002006c

080081cc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b084      	sub	sp, #16
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM15)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4a28      	ldr	r2, [pc, #160]	; (800827c <HAL_TIM_PWM_MspInit+0xb0>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d149      	bne.n	8008272 <HAL_TIM_PWM_MspInit+0xa6>
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 80081de:	4b28      	ldr	r3, [pc, #160]	; (8008280 <HAL_TIM_PWM_MspInit+0xb4>)
 80081e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081e2:	4a27      	ldr	r2, [pc, #156]	; (8008280 <HAL_TIM_PWM_MspInit+0xb4>)
 80081e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80081e8:	6613      	str	r3, [r2, #96]	; 0x60
 80081ea:	4b25      	ldr	r3, [pc, #148]	; (8008280 <HAL_TIM_PWM_MspInit+0xb4>)
 80081ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80081f2:	60fb      	str	r3, [r7, #12]
 80081f4:	68fb      	ldr	r3, [r7, #12]

    /* TIM15 DMA Init */
    /* TIM15_CH1_UP_TRIG_COM Init */
    hdma_tim15_ch1_up_trig_com.Instance = DMA1_Channel5;
 80081f6:	4b23      	ldr	r3, [pc, #140]	; (8008284 <HAL_TIM_PWM_MspInit+0xb8>)
 80081f8:	4a23      	ldr	r2, [pc, #140]	; (8008288 <HAL_TIM_PWM_MspInit+0xbc>)
 80081fa:	601a      	str	r2, [r3, #0]
    hdma_tim15_ch1_up_trig_com.Init.Request = DMA_REQUEST_7;
 80081fc:	4b21      	ldr	r3, [pc, #132]	; (8008284 <HAL_TIM_PWM_MspInit+0xb8>)
 80081fe:	2207      	movs	r2, #7
 8008200:	605a      	str	r2, [r3, #4]
    hdma_tim15_ch1_up_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008202:	4b20      	ldr	r3, [pc, #128]	; (8008284 <HAL_TIM_PWM_MspInit+0xb8>)
 8008204:	2210      	movs	r2, #16
 8008206:	609a      	str	r2, [r3, #8]
    hdma_tim15_ch1_up_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 8008208:	4b1e      	ldr	r3, [pc, #120]	; (8008284 <HAL_TIM_PWM_MspInit+0xb8>)
 800820a:	2200      	movs	r2, #0
 800820c:	60da      	str	r2, [r3, #12]
    hdma_tim15_ch1_up_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 800820e:	4b1d      	ldr	r3, [pc, #116]	; (8008284 <HAL_TIM_PWM_MspInit+0xb8>)
 8008210:	2280      	movs	r2, #128	; 0x80
 8008212:	611a      	str	r2, [r3, #16]
    hdma_tim15_ch1_up_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8008214:	4b1b      	ldr	r3, [pc, #108]	; (8008284 <HAL_TIM_PWM_MspInit+0xb8>)
 8008216:	f44f 7280 	mov.w	r2, #256	; 0x100
 800821a:	615a      	str	r2, [r3, #20]
    hdma_tim15_ch1_up_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800821c:	4b19      	ldr	r3, [pc, #100]	; (8008284 <HAL_TIM_PWM_MspInit+0xb8>)
 800821e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008222:	619a      	str	r2, [r3, #24]
    hdma_tim15_ch1_up_trig_com.Init.Mode = DMA_NORMAL;
 8008224:	4b17      	ldr	r3, [pc, #92]	; (8008284 <HAL_TIM_PWM_MspInit+0xb8>)
 8008226:	2200      	movs	r2, #0
 8008228:	61da      	str	r2, [r3, #28]
    hdma_tim15_ch1_up_trig_com.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800822a:	4b16      	ldr	r3, [pc, #88]	; (8008284 <HAL_TIM_PWM_MspInit+0xb8>)
 800822c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8008230:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim15_ch1_up_trig_com) != HAL_OK)
 8008232:	4814      	ldr	r0, [pc, #80]	; (8008284 <HAL_TIM_PWM_MspInit+0xb8>)
 8008234:	f7fb fb80 	bl	8003938 <HAL_DMA_Init>
 8008238:	4603      	mov	r3, r0
 800823a:	2b00      	cmp	r3, #0
 800823c:	d001      	beq.n	8008242 <HAL_TIM_PWM_MspInit+0x76>
    {
      Error_Handler();
 800823e:	f7ff fc99 	bl	8007b74 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim15_ch1_up_trig_com);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	4a0f      	ldr	r2, [pc, #60]	; (8008284 <HAL_TIM_PWM_MspInit+0xb8>)
 8008246:	625a      	str	r2, [r3, #36]	; 0x24
 8008248:	4a0e      	ldr	r2, [pc, #56]	; (8008284 <HAL_TIM_PWM_MspInit+0xb8>)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_UPDATE],hdma_tim15_ch1_up_trig_com);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	4a0c      	ldr	r2, [pc, #48]	; (8008284 <HAL_TIM_PWM_MspInit+0xb8>)
 8008252:	621a      	str	r2, [r3, #32]
 8008254:	4a0b      	ldr	r2, [pc, #44]	; (8008284 <HAL_TIM_PWM_MspInit+0xb8>)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim15_ch1_up_trig_com);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	4a09      	ldr	r2, [pc, #36]	; (8008284 <HAL_TIM_PWM_MspInit+0xb8>)
 800825e:	639a      	str	r2, [r3, #56]	; 0x38
 8008260:	4a08      	ldr	r2, [pc, #32]	; (8008284 <HAL_TIM_PWM_MspInit+0xb8>)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim15_ch1_up_trig_com);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	4a06      	ldr	r2, [pc, #24]	; (8008284 <HAL_TIM_PWM_MspInit+0xb8>)
 800826a:	635a      	str	r2, [r3, #52]	; 0x34
 800826c:	4a05      	ldr	r2, [pc, #20]	; (8008284 <HAL_TIM_PWM_MspInit+0xb8>)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 8008272:	bf00      	nop
 8008274:	3710      	adds	r7, #16
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}
 800827a:	bf00      	nop
 800827c:	40014000 	.word	0x40014000
 8008280:	40021000 	.word	0x40021000
 8008284:	200022ac 	.word	0x200022ac
 8008288:	40020058 	.word	0x40020058

0800828c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b082      	sub	sp, #8
 8008290:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 1; iii++)
 8008292:	2300      	movs	r3, #0
 8008294:	71fb      	strb	r3, [r7, #7]
 8008296:	e009      	b.n	80082ac <NMI_Handler+0x20>
        {
            board_init_red_led_on();
 8008298:	f7ff fc54 	bl	8007b44 <board_init_red_led_on>
            HAL_Delay(100);
 800829c:	2064      	movs	r0, #100	; 0x64
 800829e:	f7fb f9bf 	bl	8003620 <HAL_Delay>
            board_init_red_led_off();
 80082a2:	f7ff fc5b 	bl	8007b5c <board_init_red_led_off>
        for (uint8_t iii = 0; iii < 1; iii++)
 80082a6:	79fb      	ldrb	r3, [r7, #7]
 80082a8:	3301      	adds	r3, #1
 80082aa:	71fb      	strb	r3, [r7, #7]
 80082ac:	79fb      	ldrb	r3, [r7, #7]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d0f2      	beq.n	8008298 <NMI_Handler+0xc>
        }
        HAL_Delay(3000);
 80082b2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80082b6:	f7fb f9b3 	bl	8003620 <HAL_Delay>
        for (uint8_t iii = 0; iii < 1; iii++)
 80082ba:	e7ea      	b.n	8008292 <NMI_Handler+0x6>

080082bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b082      	sub	sp, #8
 80082c0:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 2; iii++)
 80082c2:	2300      	movs	r3, #0
 80082c4:	71fb      	strb	r3, [r7, #7]
 80082c6:	e009      	b.n	80082dc <HardFault_Handler+0x20>
        {
            board_init_red_led_on();
 80082c8:	f7ff fc3c 	bl	8007b44 <board_init_red_led_on>
            HAL_Delay(100);
 80082cc:	2064      	movs	r0, #100	; 0x64
 80082ce:	f7fb f9a7 	bl	8003620 <HAL_Delay>
            board_init_red_led_off();
 80082d2:	f7ff fc43 	bl	8007b5c <board_init_red_led_off>
        for (uint8_t iii = 0; iii < 2; iii++)
 80082d6:	79fb      	ldrb	r3, [r7, #7]
 80082d8:	3301      	adds	r3, #1
 80082da:	71fb      	strb	r3, [r7, #7]
 80082dc:	79fb      	ldrb	r3, [r7, #7]
 80082de:	2b01      	cmp	r3, #1
 80082e0:	d9f2      	bls.n	80082c8 <HardFault_Handler+0xc>
        }
        HAL_Delay(3000);
 80082e2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80082e6:	f7fb f99b 	bl	8003620 <HAL_Delay>
        for (uint8_t iii = 0; iii < 2; iii++)
 80082ea:	e7ea      	b.n	80082c2 <HardFault_Handler+0x6>

080082ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b082      	sub	sp, #8
 80082f0:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 3; iii++)
 80082f2:	2300      	movs	r3, #0
 80082f4:	71fb      	strb	r3, [r7, #7]
 80082f6:	e009      	b.n	800830c <MemManage_Handler+0x20>
        {
            board_init_red_led_on();
 80082f8:	f7ff fc24 	bl	8007b44 <board_init_red_led_on>
            HAL_Delay(100);
 80082fc:	2064      	movs	r0, #100	; 0x64
 80082fe:	f7fb f98f 	bl	8003620 <HAL_Delay>
            board_init_red_led_off();
 8008302:	f7ff fc2b 	bl	8007b5c <board_init_red_led_off>
        for (uint8_t iii = 0; iii < 3; iii++)
 8008306:	79fb      	ldrb	r3, [r7, #7]
 8008308:	3301      	adds	r3, #1
 800830a:	71fb      	strb	r3, [r7, #7]
 800830c:	79fb      	ldrb	r3, [r7, #7]
 800830e:	2b02      	cmp	r3, #2
 8008310:	d9f2      	bls.n	80082f8 <MemManage_Handler+0xc>
        }
        HAL_Delay(3000);
 8008312:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8008316:	f7fb f983 	bl	8003620 <HAL_Delay>
        for (uint8_t iii = 0; iii < 3; iii++)
 800831a:	e7ea      	b.n	80082f2 <MemManage_Handler+0x6>

0800831c <BusFault_Handler>:
}
/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b082      	sub	sp, #8
 8008320:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 4; iii++)
 8008322:	2300      	movs	r3, #0
 8008324:	71fb      	strb	r3, [r7, #7]
 8008326:	e009      	b.n	800833c <BusFault_Handler+0x20>
        {
            board_init_red_led_on();
 8008328:	f7ff fc0c 	bl	8007b44 <board_init_red_led_on>
            HAL_Delay(100);
 800832c:	2064      	movs	r0, #100	; 0x64
 800832e:	f7fb f977 	bl	8003620 <HAL_Delay>
            board_init_red_led_off();
 8008332:	f7ff fc13 	bl	8007b5c <board_init_red_led_off>
        for (uint8_t iii = 0; iii < 4; iii++)
 8008336:	79fb      	ldrb	r3, [r7, #7]
 8008338:	3301      	adds	r3, #1
 800833a:	71fb      	strb	r3, [r7, #7]
 800833c:	79fb      	ldrb	r3, [r7, #7]
 800833e:	2b03      	cmp	r3, #3
 8008340:	d9f2      	bls.n	8008328 <BusFault_Handler+0xc>
        }
        HAL_Delay(3000);
 8008342:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8008346:	f7fb f96b 	bl	8003620 <HAL_Delay>
        for (uint8_t iii = 0; iii < 4; iii++)
 800834a:	e7ea      	b.n	8008322 <BusFault_Handler+0x6>

0800834c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b082      	sub	sp, #8
 8008350:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 5; iii++)
 8008352:	2300      	movs	r3, #0
 8008354:	71fb      	strb	r3, [r7, #7]
 8008356:	e009      	b.n	800836c <UsageFault_Handler+0x20>
        {
            board_init_red_led_on();
 8008358:	f7ff fbf4 	bl	8007b44 <board_init_red_led_on>
            HAL_Delay(100);
 800835c:	2064      	movs	r0, #100	; 0x64
 800835e:	f7fb f95f 	bl	8003620 <HAL_Delay>
            board_init_red_led_off();
 8008362:	f7ff fbfb 	bl	8007b5c <board_init_red_led_off>
        for (uint8_t iii = 0; iii < 5; iii++)
 8008366:	79fb      	ldrb	r3, [r7, #7]
 8008368:	3301      	adds	r3, #1
 800836a:	71fb      	strb	r3, [r7, #7]
 800836c:	79fb      	ldrb	r3, [r7, #7]
 800836e:	2b04      	cmp	r3, #4
 8008370:	d9f2      	bls.n	8008358 <UsageFault_Handler+0xc>
        }
        HAL_Delay(3000);
 8008372:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8008376:	f7fb f953 	bl	8003620 <HAL_Delay>
        for (uint8_t iii = 0; iii < 5; iii++)
 800837a:	e7ea      	b.n	8008352 <UsageFault_Handler+0x6>

0800837c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800837c:	b480      	push	{r7}
 800837e:	af00      	add	r7, sp, #0
}
 8008380:	bf00      	nop
 8008382:	46bd      	mov	sp, r7
 8008384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008388:	4770      	bx	lr

0800838a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800838a:	b580      	push	{r7, lr}
 800838c:	af00      	add	r7, sp, #0
  HAL_IncTick();
 800838e:	f7fb f927 	bl	80035e0 <HAL_IncTick>
}
 8008392:	bf00      	nop
 8008394:	bd80      	pop	{r7, pc}
	...

08008398 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b084      	sub	sp, #16
 800839c:	af02      	add	r7, sp, #8
    BaseType_t xHigherPriorityTaskWoken;

    // A button is speed
    HAL_GPIO_EXTI_IRQHandler(PIN_WKUP_1);
 800839e:	2001      	movs	r0, #1
 80083a0:	f7fb fedc 	bl	800415c <HAL_GPIO_EXTI_IRQHandler>
    g_button_press_timestamp[PUSH_BUTTON_A][TIMESTAMP_PREVIOUS] = g_button_press_timestamp[PUSH_BUTTON_A][TIMESTAMP_CURRENT];
 80083a4:	4b0c      	ldr	r3, [pc, #48]	; (80083d8 <EXTI0_IRQHandler+0x40>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	4a0b      	ldr	r2, [pc, #44]	; (80083d8 <EXTI0_IRQHandler+0x40>)
 80083aa:	6053      	str	r3, [r2, #4]
    g_button_press_timestamp[PUSH_BUTTON_A][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 80083ac:	f7f9 fc6c 	bl	8001c88 <xTaskGetTickCountFromISR>
 80083b0:	4603      	mov	r3, r0
 80083b2:	4a09      	ldr	r2, [pc, #36]	; (80083d8 <EXTI0_IRQHandler+0x40>)
 80083b4:	6013      	str	r3, [r2, #0]
    HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 80083b6:	2006      	movs	r0, #6
 80083b8:	f7fb faa3 	bl	8003902 <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, PUSH_BUTTON_A, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 80083bc:	4b07      	ldr	r3, [pc, #28]	; (80083dc <EXTI0_IRQHandler+0x44>)
 80083be:	6818      	ldr	r0, [r3, #0]
 80083c0:	1d3b      	adds	r3, r7, #4
 80083c2:	9300      	str	r3, [sp, #0]
 80083c4:	2300      	movs	r3, #0
 80083c6:	2203      	movs	r2, #3
 80083c8:	2100      	movs	r1, #0
 80083ca:	f7fa f821 	bl	8002410 <xTaskGenericNotifyFromISR>
}
 80083ce:	bf00      	nop
 80083d0:	3708      	adds	r7, #8
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}
 80083d6:	bf00      	nop
 80083d8:	20000220 	.word	0x20000220
 80083dc:	20002b90 	.word	0x20002b90

080083e0 <EXTI2_IRQHandler>:
uint32_t g_dbg_b_interrupt_count = 0;
/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b084      	sub	sp, #16
 80083e4:	af02      	add	r7, sp, #8
    BaseType_t xHigherPriorityTaskWoken;
    // B button is state
    HAL_GPIO_EXTI_IRQHandler(PIN_WKUP_4);
 80083e6:	2004      	movs	r0, #4
 80083e8:	f7fb feb8 	bl	800415c <HAL_GPIO_EXTI_IRQHandler>
    g_button_press_timestamp[PUSH_BUTTON_D][TIMESTAMP_PREVIOUS] = g_button_press_timestamp[PUSH_BUTTON_B][TIMESTAMP_CURRENT];
 80083ec:	4b0c      	ldr	r3, [pc, #48]	; (8008420 <EXTI2_IRQHandler+0x40>)
 80083ee:	689b      	ldr	r3, [r3, #8]
 80083f0:	4a0b      	ldr	r2, [pc, #44]	; (8008420 <EXTI2_IRQHandler+0x40>)
 80083f2:	61d3      	str	r3, [r2, #28]
    g_button_press_timestamp[PUSH_BUTTON_D][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 80083f4:	f7f9 fc48 	bl	8001c88 <xTaskGetTickCountFromISR>
 80083f8:	4603      	mov	r3, r0
 80083fa:	4a09      	ldr	r2, [pc, #36]	; (8008420 <EXTI2_IRQHandler+0x40>)
 80083fc:	6193      	str	r3, [r2, #24]
    HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 80083fe:	2008      	movs	r0, #8
 8008400:	f7fb fa7f 	bl	8003902 <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, PUSH_BUTTON_D, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 8008404:	4b07      	ldr	r3, [pc, #28]	; (8008424 <EXTI2_IRQHandler+0x44>)
 8008406:	6818      	ldr	r0, [r3, #0]
 8008408:	1d3b      	adds	r3, r7, #4
 800840a:	9300      	str	r3, [sp, #0]
 800840c:	2300      	movs	r3, #0
 800840e:	2203      	movs	r2, #3
 8008410:	2103      	movs	r1, #3
 8008412:	f7f9 fffd 	bl	8002410 <xTaskGenericNotifyFromISR>
}
 8008416:	bf00      	nop
 8008418:	3708      	adds	r7, #8
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}
 800841e:	bf00      	nop
 8008420:	20000220 	.word	0x20000220
 8008424:	20002b90 	.word	0x20002b90

08008428 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b084      	sub	sp, #16
 800842c:	af02      	add	r7, sp, #8
    BaseType_t xHigherPriorityTaskWoken;
    // C button is color
    HAL_GPIO_EXTI_IRQHandler(PIN_WKUP_2);
 800842e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8008432:	f7fb fe93 	bl	800415c <HAL_GPIO_EXTI_IRQHandler>
    g_button_press_timestamp[PUSH_BUTTON_C][TIMESTAMP_PREVIOUS] = g_button_press_timestamp[PUSH_BUTTON_C][TIMESTAMP_CURRENT];
 8008436:	4b0c      	ldr	r3, [pc, #48]	; (8008468 <EXTI15_10_IRQHandler+0x40>)
 8008438:	691b      	ldr	r3, [r3, #16]
 800843a:	4a0b      	ldr	r2, [pc, #44]	; (8008468 <EXTI15_10_IRQHandler+0x40>)
 800843c:	6153      	str	r3, [r2, #20]
    g_button_press_timestamp[PUSH_BUTTON_C][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 800843e:	f7f9 fc23 	bl	8001c88 <xTaskGetTickCountFromISR>
 8008442:	4603      	mov	r3, r0
 8008444:	4a08      	ldr	r2, [pc, #32]	; (8008468 <EXTI15_10_IRQHandler+0x40>)
 8008446:	6113      	str	r3, [r2, #16]
    HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8008448:	2017      	movs	r0, #23
 800844a:	f7fb fa5a 	bl	8003902 <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, PUSH_BUTTON_C, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 800844e:	4b07      	ldr	r3, [pc, #28]	; (800846c <EXTI15_10_IRQHandler+0x44>)
 8008450:	6818      	ldr	r0, [r3, #0]
 8008452:	1d3b      	adds	r3, r7, #4
 8008454:	9300      	str	r3, [sp, #0]
 8008456:	2300      	movs	r3, #0
 8008458:	2203      	movs	r2, #3
 800845a:	2102      	movs	r1, #2
 800845c:	f7f9 ffd8 	bl	8002410 <xTaskGenericNotifyFromISR>
}
 8008460:	bf00      	nop
 8008462:	3708      	adds	r7, #8
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}
 8008468:	20000220 	.word	0x20000220
 800846c:	20002b90 	.word	0x20002b90

08008470 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b084      	sub	sp, #16
 8008474:	af02      	add	r7, sp, #8
    BaseType_t xHigherPriorityTaskWoken;
    // D button is pause
    HAL_GPIO_EXTI_IRQHandler(PIN_WKUP_3);
 8008476:	2020      	movs	r0, #32
 8008478:	f7fb fe70 	bl	800415c <HAL_GPIO_EXTI_IRQHandler>
    g_button_press_timestamp[PUSH_BUTTON_B][TIMESTAMP_PREVIOUS] = g_button_press_timestamp[PUSH_BUTTON_D][TIMESTAMP_CURRENT];
 800847c:	4b0c      	ldr	r3, [pc, #48]	; (80084b0 <EXTI9_5_IRQHandler+0x40>)
 800847e:	699b      	ldr	r3, [r3, #24]
 8008480:	4a0b      	ldr	r2, [pc, #44]	; (80084b0 <EXTI9_5_IRQHandler+0x40>)
 8008482:	60d3      	str	r3, [r2, #12]
    g_button_press_timestamp[PUSH_BUTTON_B][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 8008484:	f7f9 fc00 	bl	8001c88 <xTaskGetTickCountFromISR>
 8008488:	4603      	mov	r3, r0
 800848a:	4a09      	ldr	r2, [pc, #36]	; (80084b0 <EXTI9_5_IRQHandler+0x40>)
 800848c:	6093      	str	r3, [r2, #8]
    HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800848e:	2028      	movs	r0, #40	; 0x28
 8008490:	f7fb fa37 	bl	8003902 <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, PUSH_BUTTON_B, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 8008494:	4b07      	ldr	r3, [pc, #28]	; (80084b4 <EXTI9_5_IRQHandler+0x44>)
 8008496:	6818      	ldr	r0, [r3, #0]
 8008498:	1d3b      	adds	r3, r7, #4
 800849a:	9300      	str	r3, [sp, #0]
 800849c:	2300      	movs	r3, #0
 800849e:	2203      	movs	r2, #3
 80084a0:	2101      	movs	r1, #1
 80084a2:	f7f9 ffb5 	bl	8002410 <xTaskGenericNotifyFromISR>
}
 80084a6:	bf00      	nop
 80084a8:	3708      	adds	r7, #8
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}
 80084ae:	bf00      	nop
 80084b0:	20000220 	.word	0x20000220
 80084b4:	20002b90 	.word	0x20002b90

080084b8 <HAL_DMA_CMPLT_CALLBACK>:


void HAL_DMA_CMPLT_CALLBACK(DMA_HandleTypeDef *hdma)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b083      	sub	sp, #12
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
    while(1);
 80084c0:	e7fe      	b.n	80084c0 <HAL_DMA_CMPLT_CALLBACK+0x8>
	...

080084c4 <HAL_TIM_PWM_PulseFinishedCallback>:
bool gb_dma_cmplt_strip_1 = true;
bool gb_dma_cmplt_strip_2 = true;
bool gb_dma_cmplt_strip_3 = true;

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b082      	sub	sp, #8
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
    switch (htim->Channel)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	7f1b      	ldrb	r3, [r3, #28]
 80084d0:	2b04      	cmp	r3, #4
 80084d2:	d016      	beq.n	8008502 <HAL_TIM_PWM_PulseFinishedCallback+0x3e>
 80084d4:	2b04      	cmp	r3, #4
 80084d6:	dc1c      	bgt.n	8008512 <HAL_TIM_PWM_PulseFinishedCallback+0x4e>
 80084d8:	2b01      	cmp	r3, #1
 80084da:	d002      	beq.n	80084e2 <HAL_TIM_PWM_PulseFinishedCallback+0x1e>
 80084dc:	2b02      	cmp	r3, #2
 80084de:	d008      	beq.n	80084f2 <HAL_TIM_PWM_PulseFinishedCallback+0x2e>
        case HAL_TIM_ACTIVE_CHANNEL_3:
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_3);
            gb_dma_cmplt_strip_3 = true;
        break;
        default:
        break;
 80084e0:	e017      	b.n	8008512 <HAL_TIM_PWM_PulseFinishedCallback+0x4e>
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
 80084e2:	2100      	movs	r1, #0
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f7fd fb19 	bl	8005b1c <HAL_TIM_PWM_Stop_DMA>
            gb_dma_cmplt_strip_1 = true;
 80084ea:	4b0c      	ldr	r3, [pc, #48]	; (800851c <HAL_TIM_PWM_PulseFinishedCallback+0x58>)
 80084ec:	2201      	movs	r2, #1
 80084ee:	701a      	strb	r2, [r3, #0]
        break;
 80084f0:	e010      	b.n	8008514 <HAL_TIM_PWM_PulseFinishedCallback+0x50>
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_2);
 80084f2:	2104      	movs	r1, #4
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f7fd fb11 	bl	8005b1c <HAL_TIM_PWM_Stop_DMA>
            gb_dma_cmplt_strip_2 = true;
 80084fa:	4b09      	ldr	r3, [pc, #36]	; (8008520 <HAL_TIM_PWM_PulseFinishedCallback+0x5c>)
 80084fc:	2201      	movs	r2, #1
 80084fe:	701a      	strb	r2, [r3, #0]
        break;
 8008500:	e008      	b.n	8008514 <HAL_TIM_PWM_PulseFinishedCallback+0x50>
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_3);
 8008502:	2108      	movs	r1, #8
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f7fd fb09 	bl	8005b1c <HAL_TIM_PWM_Stop_DMA>
            gb_dma_cmplt_strip_3 = true;
 800850a:	4b06      	ldr	r3, [pc, #24]	; (8008524 <HAL_TIM_PWM_PulseFinishedCallback+0x60>)
 800850c:	2201      	movs	r2, #1
 800850e:	701a      	strb	r2, [r3, #0]
        break;
 8008510:	e000      	b.n	8008514 <HAL_TIM_PWM_PulseFinishedCallback+0x50>
        break;
 8008512:	bf00      	nop
    }
}
 8008514:	bf00      	nop
 8008516:	3708      	adds	r7, #8
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}
 800851c:	2000009c 	.word	0x2000009c
 8008520:	2000009d 	.word	0x2000009d
 8008524:	2000009e 	.word	0x2000009e

08008528 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 800852c:	4802      	ldr	r0, [pc, #8]	; (8008538 <DMA1_Channel2_IRQHandler+0x10>)
 800852e:	f7fb fb5c 	bl	8003bea <HAL_DMA_IRQHandler>
}
 8008532:	bf00      	nop
 8008534:	bd80      	pop	{r7, pc}
 8008536:	bf00      	nop
 8008538:	200021d4 	.word	0x200021d4

0800853c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 8008540:	4802      	ldr	r0, [pc, #8]	; (800854c <DMA1_Channel3_IRQHandler+0x10>)
 8008542:	f7fb fb52 	bl	8003bea <HAL_DMA_IRQHandler>
}
 8008546:	bf00      	nop
 8008548:	bd80      	pop	{r7, pc}
 800854a:	bf00      	nop
 800854c:	2000221c 	.word	0x2000221c

08008550 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim15_ch1_up_trig_com);
 8008554:	4802      	ldr	r0, [pc, #8]	; (8008560 <DMA1_Channel5_IRQHandler+0x10>)
 8008556:	f7fb fb48 	bl	8003bea <HAL_DMA_IRQHandler>
}
 800855a:	bf00      	nop
 800855c:	bd80      	pop	{r7, pc}
 800855e:	bf00      	nop
 8008560:	200022ac 	.word	0x200022ac

08008564 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim16_ch1_up);
 8008568:	4802      	ldr	r0, [pc, #8]	; (8008574 <DMA1_Channel6_IRQHandler+0x10>)
 800856a:	f7fb fb3e 	bl	8003bea <HAL_DMA_IRQHandler>
}
 800856e:	bf00      	nop
 8008570:	bd80      	pop	{r7, pc}
 8008572:	bf00      	nop
 8008574:	200022f4 	.word	0x200022f4

08008578 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim1_ch3);
 800857c:	4802      	ldr	r0, [pc, #8]	; (8008588 <DMA1_Channel7_IRQHandler+0x10>)
 800857e:	f7fb fb34 	bl	8003bea <HAL_DMA_IRQHandler>
}
 8008582:	bf00      	nop
 8008584:	bd80      	pop	{r7, pc}
 8008586:	bf00      	nop
 8008588:	20002264 	.word	0x20002264

0800858c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800858c:	b480      	push	{r7}
 800858e:	af00      	add	r7, sp, #0
	return 1;
 8008590:	2301      	movs	r3, #1
}
 8008592:	4618      	mov	r0, r3
 8008594:	46bd      	mov	sp, r7
 8008596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859a:	4770      	bx	lr

0800859c <_kill>:

int _kill(int pid, int sig)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b082      	sub	sp, #8
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
 80085a4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80085a6:	f000 f8f3 	bl	8008790 <__errno>
 80085aa:	4603      	mov	r3, r0
 80085ac:	2216      	movs	r2, #22
 80085ae:	601a      	str	r2, [r3, #0]
	return -1;
 80085b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3708      	adds	r7, #8
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}

080085bc <_exit>:

void _exit (int status)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b082      	sub	sp, #8
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80085c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f7ff ffe7 	bl	800859c <_kill>
	while (1) {}		/* Make sure we hang here */
 80085ce:	e7fe      	b.n	80085ce <_exit+0x12>

080085d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b086      	sub	sp, #24
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	60f8      	str	r0, [r7, #12]
 80085d8:	60b9      	str	r1, [r7, #8]
 80085da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80085dc:	2300      	movs	r3, #0
 80085de:	617b      	str	r3, [r7, #20]
 80085e0:	e00a      	b.n	80085f8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80085e2:	f3af 8000 	nop.w
 80085e6:	4601      	mov	r1, r0
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	1c5a      	adds	r2, r3, #1
 80085ec:	60ba      	str	r2, [r7, #8]
 80085ee:	b2ca      	uxtb	r2, r1
 80085f0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	3301      	adds	r3, #1
 80085f6:	617b      	str	r3, [r7, #20]
 80085f8:	697a      	ldr	r2, [r7, #20]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	429a      	cmp	r2, r3
 80085fe:	dbf0      	blt.n	80085e2 <_read+0x12>
	}

return len;
 8008600:	687b      	ldr	r3, [r7, #4]
}
 8008602:	4618      	mov	r0, r3
 8008604:	3718      	adds	r7, #24
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}

0800860a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800860a:	b580      	push	{r7, lr}
 800860c:	b086      	sub	sp, #24
 800860e:	af00      	add	r7, sp, #0
 8008610:	60f8      	str	r0, [r7, #12]
 8008612:	60b9      	str	r1, [r7, #8]
 8008614:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008616:	2300      	movs	r3, #0
 8008618:	617b      	str	r3, [r7, #20]
 800861a:	e009      	b.n	8008630 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	1c5a      	adds	r2, r3, #1
 8008620:	60ba      	str	r2, [r7, #8]
 8008622:	781b      	ldrb	r3, [r3, #0]
 8008624:	4618      	mov	r0, r3
 8008626:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	3301      	adds	r3, #1
 800862e:	617b      	str	r3, [r7, #20]
 8008630:	697a      	ldr	r2, [r7, #20]
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	429a      	cmp	r2, r3
 8008636:	dbf1      	blt.n	800861c <_write+0x12>
	}
	return len;
 8008638:	687b      	ldr	r3, [r7, #4]
}
 800863a:	4618      	mov	r0, r3
 800863c:	3718      	adds	r7, #24
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}

08008642 <_close>:

int _close(int file)
{
 8008642:	b480      	push	{r7}
 8008644:	b083      	sub	sp, #12
 8008646:	af00      	add	r7, sp, #0
 8008648:	6078      	str	r0, [r7, #4]
	return -1;
 800864a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800864e:	4618      	mov	r0, r3
 8008650:	370c      	adds	r7, #12
 8008652:	46bd      	mov	sp, r7
 8008654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008658:	4770      	bx	lr

0800865a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800865a:	b480      	push	{r7}
 800865c:	b083      	sub	sp, #12
 800865e:	af00      	add	r7, sp, #0
 8008660:	6078      	str	r0, [r7, #4]
 8008662:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800866a:	605a      	str	r2, [r3, #4]
	return 0;
 800866c:	2300      	movs	r3, #0
}
 800866e:	4618      	mov	r0, r3
 8008670:	370c      	adds	r7, #12
 8008672:	46bd      	mov	sp, r7
 8008674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008678:	4770      	bx	lr

0800867a <_isatty>:

int _isatty(int file)
{
 800867a:	b480      	push	{r7}
 800867c:	b083      	sub	sp, #12
 800867e:	af00      	add	r7, sp, #0
 8008680:	6078      	str	r0, [r7, #4]
	return 1;
 8008682:	2301      	movs	r3, #1
}
 8008684:	4618      	mov	r0, r3
 8008686:	370c      	adds	r7, #12
 8008688:	46bd      	mov	sp, r7
 800868a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868e:	4770      	bx	lr

08008690 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008690:	b480      	push	{r7}
 8008692:	b085      	sub	sp, #20
 8008694:	af00      	add	r7, sp, #0
 8008696:	60f8      	str	r0, [r7, #12]
 8008698:	60b9      	str	r1, [r7, #8]
 800869a:	607a      	str	r2, [r7, #4]
	return 0;
 800869c:	2300      	movs	r3, #0
}
 800869e:	4618      	mov	r0, r3
 80086a0:	3714      	adds	r7, #20
 80086a2:	46bd      	mov	sp, r7
 80086a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a8:	4770      	bx	lr
	...

080086ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b086      	sub	sp, #24
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80086b4:	4a14      	ldr	r2, [pc, #80]	; (8008708 <_sbrk+0x5c>)
 80086b6:	4b15      	ldr	r3, [pc, #84]	; (800870c <_sbrk+0x60>)
 80086b8:	1ad3      	subs	r3, r2, r3
 80086ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80086c0:	4b13      	ldr	r3, [pc, #76]	; (8008710 <_sbrk+0x64>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d102      	bne.n	80086ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80086c8:	4b11      	ldr	r3, [pc, #68]	; (8008710 <_sbrk+0x64>)
 80086ca:	4a12      	ldr	r2, [pc, #72]	; (8008714 <_sbrk+0x68>)
 80086cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80086ce:	4b10      	ldr	r3, [pc, #64]	; (8008710 <_sbrk+0x64>)
 80086d0:	681a      	ldr	r2, [r3, #0]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	4413      	add	r3, r2
 80086d6:	693a      	ldr	r2, [r7, #16]
 80086d8:	429a      	cmp	r2, r3
 80086da:	d207      	bcs.n	80086ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80086dc:	f000 f858 	bl	8008790 <__errno>
 80086e0:	4603      	mov	r3, r0
 80086e2:	220c      	movs	r2, #12
 80086e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80086e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80086ea:	e009      	b.n	8008700 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80086ec:	4b08      	ldr	r3, [pc, #32]	; (8008710 <_sbrk+0x64>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80086f2:	4b07      	ldr	r3, [pc, #28]	; (8008710 <_sbrk+0x64>)
 80086f4:	681a      	ldr	r2, [r3, #0]
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	4413      	add	r3, r2
 80086fa:	4a05      	ldr	r2, [pc, #20]	; (8008710 <_sbrk+0x64>)
 80086fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80086fe:	68fb      	ldr	r3, [r7, #12]
}
 8008700:	4618      	mov	r0, r3
 8008702:	3718      	adds	r7, #24
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}
 8008708:	20010000 	.word	0x20010000
 800870c:	00000400 	.word	0x00000400
 8008710:	200033f4 	.word	0x200033f4
 8008714:	20003408 	.word	0x20003408

08008718 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8008718:	b480      	push	{r7}
 800871a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800871c:	4b06      	ldr	r3, [pc, #24]	; (8008738 <SystemInit+0x20>)
 800871e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008722:	4a05      	ldr	r2, [pc, #20]	; (8008738 <SystemInit+0x20>)
 8008724:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008728:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800872c:	bf00      	nop
 800872e:	46bd      	mov	sp, r7
 8008730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008734:	4770      	bx	lr
 8008736:	bf00      	nop
 8008738:	e000ed00 	.word	0xe000ed00

0800873c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800873c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008774 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8008740:	f7ff ffea 	bl	8008718 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008744:	480c      	ldr	r0, [pc, #48]	; (8008778 <LoopForever+0x6>)
  ldr r1, =_edata
 8008746:	490d      	ldr	r1, [pc, #52]	; (800877c <LoopForever+0xa>)
  ldr r2, =_sidata
 8008748:	4a0d      	ldr	r2, [pc, #52]	; (8008780 <LoopForever+0xe>)
  movs r3, #0
 800874a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800874c:	e002      	b.n	8008754 <LoopCopyDataInit>

0800874e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800874e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008750:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008752:	3304      	adds	r3, #4

08008754 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008754:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008756:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008758:	d3f9      	bcc.n	800874e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800875a:	4a0a      	ldr	r2, [pc, #40]	; (8008784 <LoopForever+0x12>)
  ldr r4, =_ebss
 800875c:	4c0a      	ldr	r4, [pc, #40]	; (8008788 <LoopForever+0x16>)
  movs r3, #0
 800875e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008760:	e001      	b.n	8008766 <LoopFillZerobss>

08008762 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008762:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008764:	3204      	adds	r2, #4

08008766 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008766:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008768:	d3fb      	bcc.n	8008762 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800876a:	f000 f817 	bl	800879c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800876e:	f7ff fbab 	bl	8007ec8 <main>

08008772 <LoopForever>:

LoopForever:
    b LoopForever
 8008772:	e7fe      	b.n	8008772 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8008774:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8008778:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800877c:	20000108 	.word	0x20000108
  ldr r2, =_sidata
 8008780:	08009b3c 	.word	0x08009b3c
  ldr r2, =_sbss
 8008784:	20000108 	.word	0x20000108
  ldr r4, =_ebss
 8008788:	20003408 	.word	0x20003408

0800878c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800878c:	e7fe      	b.n	800878c <ADC1_IRQHandler>
	...

08008790 <__errno>:
 8008790:	4b01      	ldr	r3, [pc, #4]	; (8008798 <__errno+0x8>)
 8008792:	6818      	ldr	r0, [r3, #0]
 8008794:	4770      	bx	lr
 8008796:	bf00      	nop
 8008798:	200000a4 	.word	0x200000a4

0800879c <__libc_init_array>:
 800879c:	b570      	push	{r4, r5, r6, lr}
 800879e:	4d0d      	ldr	r5, [pc, #52]	; (80087d4 <__libc_init_array+0x38>)
 80087a0:	4c0d      	ldr	r4, [pc, #52]	; (80087d8 <__libc_init_array+0x3c>)
 80087a2:	1b64      	subs	r4, r4, r5
 80087a4:	10a4      	asrs	r4, r4, #2
 80087a6:	2600      	movs	r6, #0
 80087a8:	42a6      	cmp	r6, r4
 80087aa:	d109      	bne.n	80087c0 <__libc_init_array+0x24>
 80087ac:	4d0b      	ldr	r5, [pc, #44]	; (80087dc <__libc_init_array+0x40>)
 80087ae:	4c0c      	ldr	r4, [pc, #48]	; (80087e0 <__libc_init_array+0x44>)
 80087b0:	f001 f88a 	bl	80098c8 <_init>
 80087b4:	1b64      	subs	r4, r4, r5
 80087b6:	10a4      	asrs	r4, r4, #2
 80087b8:	2600      	movs	r6, #0
 80087ba:	42a6      	cmp	r6, r4
 80087bc:	d105      	bne.n	80087ca <__libc_init_array+0x2e>
 80087be:	bd70      	pop	{r4, r5, r6, pc}
 80087c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80087c4:	4798      	blx	r3
 80087c6:	3601      	adds	r6, #1
 80087c8:	e7ee      	b.n	80087a8 <__libc_init_array+0xc>
 80087ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80087ce:	4798      	blx	r3
 80087d0:	3601      	adds	r6, #1
 80087d2:	e7f2      	b.n	80087ba <__libc_init_array+0x1e>
 80087d4:	08009b34 	.word	0x08009b34
 80087d8:	08009b34 	.word	0x08009b34
 80087dc:	08009b34 	.word	0x08009b34
 80087e0:	08009b38 	.word	0x08009b38

080087e4 <malloc>:
 80087e4:	4b02      	ldr	r3, [pc, #8]	; (80087f0 <malloc+0xc>)
 80087e6:	4601      	mov	r1, r0
 80087e8:	6818      	ldr	r0, [r3, #0]
 80087ea:	f000 b885 	b.w	80088f8 <_malloc_r>
 80087ee:	bf00      	nop
 80087f0:	200000a4 	.word	0x200000a4

080087f4 <memcpy>:
 80087f4:	440a      	add	r2, r1
 80087f6:	4291      	cmp	r1, r2
 80087f8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80087fc:	d100      	bne.n	8008800 <memcpy+0xc>
 80087fe:	4770      	bx	lr
 8008800:	b510      	push	{r4, lr}
 8008802:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008806:	f803 4f01 	strb.w	r4, [r3, #1]!
 800880a:	4291      	cmp	r1, r2
 800880c:	d1f9      	bne.n	8008802 <memcpy+0xe>
 800880e:	bd10      	pop	{r4, pc}

08008810 <memset>:
 8008810:	4402      	add	r2, r0
 8008812:	4603      	mov	r3, r0
 8008814:	4293      	cmp	r3, r2
 8008816:	d100      	bne.n	800881a <memset+0xa>
 8008818:	4770      	bx	lr
 800881a:	f803 1b01 	strb.w	r1, [r3], #1
 800881e:	e7f9      	b.n	8008814 <memset+0x4>

08008820 <_free_r>:
 8008820:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008822:	2900      	cmp	r1, #0
 8008824:	d044      	beq.n	80088b0 <_free_r+0x90>
 8008826:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800882a:	9001      	str	r0, [sp, #4]
 800882c:	2b00      	cmp	r3, #0
 800882e:	f1a1 0404 	sub.w	r4, r1, #4
 8008832:	bfb8      	it	lt
 8008834:	18e4      	addlt	r4, r4, r3
 8008836:	f000 f96d 	bl	8008b14 <__malloc_lock>
 800883a:	4a1e      	ldr	r2, [pc, #120]	; (80088b4 <_free_r+0x94>)
 800883c:	9801      	ldr	r0, [sp, #4]
 800883e:	6813      	ldr	r3, [r2, #0]
 8008840:	b933      	cbnz	r3, 8008850 <_free_r+0x30>
 8008842:	6063      	str	r3, [r4, #4]
 8008844:	6014      	str	r4, [r2, #0]
 8008846:	b003      	add	sp, #12
 8008848:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800884c:	f000 b968 	b.w	8008b20 <__malloc_unlock>
 8008850:	42a3      	cmp	r3, r4
 8008852:	d908      	bls.n	8008866 <_free_r+0x46>
 8008854:	6825      	ldr	r5, [r4, #0]
 8008856:	1961      	adds	r1, r4, r5
 8008858:	428b      	cmp	r3, r1
 800885a:	bf01      	itttt	eq
 800885c:	6819      	ldreq	r1, [r3, #0]
 800885e:	685b      	ldreq	r3, [r3, #4]
 8008860:	1949      	addeq	r1, r1, r5
 8008862:	6021      	streq	r1, [r4, #0]
 8008864:	e7ed      	b.n	8008842 <_free_r+0x22>
 8008866:	461a      	mov	r2, r3
 8008868:	685b      	ldr	r3, [r3, #4]
 800886a:	b10b      	cbz	r3, 8008870 <_free_r+0x50>
 800886c:	42a3      	cmp	r3, r4
 800886e:	d9fa      	bls.n	8008866 <_free_r+0x46>
 8008870:	6811      	ldr	r1, [r2, #0]
 8008872:	1855      	adds	r5, r2, r1
 8008874:	42a5      	cmp	r5, r4
 8008876:	d10b      	bne.n	8008890 <_free_r+0x70>
 8008878:	6824      	ldr	r4, [r4, #0]
 800887a:	4421      	add	r1, r4
 800887c:	1854      	adds	r4, r2, r1
 800887e:	42a3      	cmp	r3, r4
 8008880:	6011      	str	r1, [r2, #0]
 8008882:	d1e0      	bne.n	8008846 <_free_r+0x26>
 8008884:	681c      	ldr	r4, [r3, #0]
 8008886:	685b      	ldr	r3, [r3, #4]
 8008888:	6053      	str	r3, [r2, #4]
 800888a:	4421      	add	r1, r4
 800888c:	6011      	str	r1, [r2, #0]
 800888e:	e7da      	b.n	8008846 <_free_r+0x26>
 8008890:	d902      	bls.n	8008898 <_free_r+0x78>
 8008892:	230c      	movs	r3, #12
 8008894:	6003      	str	r3, [r0, #0]
 8008896:	e7d6      	b.n	8008846 <_free_r+0x26>
 8008898:	6825      	ldr	r5, [r4, #0]
 800889a:	1961      	adds	r1, r4, r5
 800889c:	428b      	cmp	r3, r1
 800889e:	bf04      	itt	eq
 80088a0:	6819      	ldreq	r1, [r3, #0]
 80088a2:	685b      	ldreq	r3, [r3, #4]
 80088a4:	6063      	str	r3, [r4, #4]
 80088a6:	bf04      	itt	eq
 80088a8:	1949      	addeq	r1, r1, r5
 80088aa:	6021      	streq	r1, [r4, #0]
 80088ac:	6054      	str	r4, [r2, #4]
 80088ae:	e7ca      	b.n	8008846 <_free_r+0x26>
 80088b0:	b003      	add	sp, #12
 80088b2:	bd30      	pop	{r4, r5, pc}
 80088b4:	200033f8 	.word	0x200033f8

080088b8 <sbrk_aligned>:
 80088b8:	b570      	push	{r4, r5, r6, lr}
 80088ba:	4e0e      	ldr	r6, [pc, #56]	; (80088f4 <sbrk_aligned+0x3c>)
 80088bc:	460c      	mov	r4, r1
 80088be:	6831      	ldr	r1, [r6, #0]
 80088c0:	4605      	mov	r5, r0
 80088c2:	b911      	cbnz	r1, 80088ca <sbrk_aligned+0x12>
 80088c4:	f000 f8ba 	bl	8008a3c <_sbrk_r>
 80088c8:	6030      	str	r0, [r6, #0]
 80088ca:	4621      	mov	r1, r4
 80088cc:	4628      	mov	r0, r5
 80088ce:	f000 f8b5 	bl	8008a3c <_sbrk_r>
 80088d2:	1c43      	adds	r3, r0, #1
 80088d4:	d00a      	beq.n	80088ec <sbrk_aligned+0x34>
 80088d6:	1cc4      	adds	r4, r0, #3
 80088d8:	f024 0403 	bic.w	r4, r4, #3
 80088dc:	42a0      	cmp	r0, r4
 80088de:	d007      	beq.n	80088f0 <sbrk_aligned+0x38>
 80088e0:	1a21      	subs	r1, r4, r0
 80088e2:	4628      	mov	r0, r5
 80088e4:	f000 f8aa 	bl	8008a3c <_sbrk_r>
 80088e8:	3001      	adds	r0, #1
 80088ea:	d101      	bne.n	80088f0 <sbrk_aligned+0x38>
 80088ec:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80088f0:	4620      	mov	r0, r4
 80088f2:	bd70      	pop	{r4, r5, r6, pc}
 80088f4:	200033fc 	.word	0x200033fc

080088f8 <_malloc_r>:
 80088f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088fc:	1ccd      	adds	r5, r1, #3
 80088fe:	f025 0503 	bic.w	r5, r5, #3
 8008902:	3508      	adds	r5, #8
 8008904:	2d0c      	cmp	r5, #12
 8008906:	bf38      	it	cc
 8008908:	250c      	movcc	r5, #12
 800890a:	2d00      	cmp	r5, #0
 800890c:	4607      	mov	r7, r0
 800890e:	db01      	blt.n	8008914 <_malloc_r+0x1c>
 8008910:	42a9      	cmp	r1, r5
 8008912:	d905      	bls.n	8008920 <_malloc_r+0x28>
 8008914:	230c      	movs	r3, #12
 8008916:	603b      	str	r3, [r7, #0]
 8008918:	2600      	movs	r6, #0
 800891a:	4630      	mov	r0, r6
 800891c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008920:	4e2e      	ldr	r6, [pc, #184]	; (80089dc <_malloc_r+0xe4>)
 8008922:	f000 f8f7 	bl	8008b14 <__malloc_lock>
 8008926:	6833      	ldr	r3, [r6, #0]
 8008928:	461c      	mov	r4, r3
 800892a:	bb34      	cbnz	r4, 800897a <_malloc_r+0x82>
 800892c:	4629      	mov	r1, r5
 800892e:	4638      	mov	r0, r7
 8008930:	f7ff ffc2 	bl	80088b8 <sbrk_aligned>
 8008934:	1c43      	adds	r3, r0, #1
 8008936:	4604      	mov	r4, r0
 8008938:	d14d      	bne.n	80089d6 <_malloc_r+0xde>
 800893a:	6834      	ldr	r4, [r6, #0]
 800893c:	4626      	mov	r6, r4
 800893e:	2e00      	cmp	r6, #0
 8008940:	d140      	bne.n	80089c4 <_malloc_r+0xcc>
 8008942:	6823      	ldr	r3, [r4, #0]
 8008944:	4631      	mov	r1, r6
 8008946:	4638      	mov	r0, r7
 8008948:	eb04 0803 	add.w	r8, r4, r3
 800894c:	f000 f876 	bl	8008a3c <_sbrk_r>
 8008950:	4580      	cmp	r8, r0
 8008952:	d13a      	bne.n	80089ca <_malloc_r+0xd2>
 8008954:	6821      	ldr	r1, [r4, #0]
 8008956:	3503      	adds	r5, #3
 8008958:	1a6d      	subs	r5, r5, r1
 800895a:	f025 0503 	bic.w	r5, r5, #3
 800895e:	3508      	adds	r5, #8
 8008960:	2d0c      	cmp	r5, #12
 8008962:	bf38      	it	cc
 8008964:	250c      	movcc	r5, #12
 8008966:	4629      	mov	r1, r5
 8008968:	4638      	mov	r0, r7
 800896a:	f7ff ffa5 	bl	80088b8 <sbrk_aligned>
 800896e:	3001      	adds	r0, #1
 8008970:	d02b      	beq.n	80089ca <_malloc_r+0xd2>
 8008972:	6823      	ldr	r3, [r4, #0]
 8008974:	442b      	add	r3, r5
 8008976:	6023      	str	r3, [r4, #0]
 8008978:	e00e      	b.n	8008998 <_malloc_r+0xa0>
 800897a:	6822      	ldr	r2, [r4, #0]
 800897c:	1b52      	subs	r2, r2, r5
 800897e:	d41e      	bmi.n	80089be <_malloc_r+0xc6>
 8008980:	2a0b      	cmp	r2, #11
 8008982:	d916      	bls.n	80089b2 <_malloc_r+0xba>
 8008984:	1961      	adds	r1, r4, r5
 8008986:	42a3      	cmp	r3, r4
 8008988:	6025      	str	r5, [r4, #0]
 800898a:	bf18      	it	ne
 800898c:	6059      	strne	r1, [r3, #4]
 800898e:	6863      	ldr	r3, [r4, #4]
 8008990:	bf08      	it	eq
 8008992:	6031      	streq	r1, [r6, #0]
 8008994:	5162      	str	r2, [r4, r5]
 8008996:	604b      	str	r3, [r1, #4]
 8008998:	4638      	mov	r0, r7
 800899a:	f104 060b 	add.w	r6, r4, #11
 800899e:	f000 f8bf 	bl	8008b20 <__malloc_unlock>
 80089a2:	f026 0607 	bic.w	r6, r6, #7
 80089a6:	1d23      	adds	r3, r4, #4
 80089a8:	1af2      	subs	r2, r6, r3
 80089aa:	d0b6      	beq.n	800891a <_malloc_r+0x22>
 80089ac:	1b9b      	subs	r3, r3, r6
 80089ae:	50a3      	str	r3, [r4, r2]
 80089b0:	e7b3      	b.n	800891a <_malloc_r+0x22>
 80089b2:	6862      	ldr	r2, [r4, #4]
 80089b4:	42a3      	cmp	r3, r4
 80089b6:	bf0c      	ite	eq
 80089b8:	6032      	streq	r2, [r6, #0]
 80089ba:	605a      	strne	r2, [r3, #4]
 80089bc:	e7ec      	b.n	8008998 <_malloc_r+0xa0>
 80089be:	4623      	mov	r3, r4
 80089c0:	6864      	ldr	r4, [r4, #4]
 80089c2:	e7b2      	b.n	800892a <_malloc_r+0x32>
 80089c4:	4634      	mov	r4, r6
 80089c6:	6876      	ldr	r6, [r6, #4]
 80089c8:	e7b9      	b.n	800893e <_malloc_r+0x46>
 80089ca:	230c      	movs	r3, #12
 80089cc:	603b      	str	r3, [r7, #0]
 80089ce:	4638      	mov	r0, r7
 80089d0:	f000 f8a6 	bl	8008b20 <__malloc_unlock>
 80089d4:	e7a1      	b.n	800891a <_malloc_r+0x22>
 80089d6:	6025      	str	r5, [r4, #0]
 80089d8:	e7de      	b.n	8008998 <_malloc_r+0xa0>
 80089da:	bf00      	nop
 80089dc:	200033f8 	.word	0x200033f8

080089e0 <srand>:
 80089e0:	b538      	push	{r3, r4, r5, lr}
 80089e2:	4b10      	ldr	r3, [pc, #64]	; (8008a24 <srand+0x44>)
 80089e4:	681d      	ldr	r5, [r3, #0]
 80089e6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80089e8:	4604      	mov	r4, r0
 80089ea:	b9b3      	cbnz	r3, 8008a1a <srand+0x3a>
 80089ec:	2018      	movs	r0, #24
 80089ee:	f7ff fef9 	bl	80087e4 <malloc>
 80089f2:	4602      	mov	r2, r0
 80089f4:	63a8      	str	r0, [r5, #56]	; 0x38
 80089f6:	b920      	cbnz	r0, 8008a02 <srand+0x22>
 80089f8:	4b0b      	ldr	r3, [pc, #44]	; (8008a28 <srand+0x48>)
 80089fa:	480c      	ldr	r0, [pc, #48]	; (8008a2c <srand+0x4c>)
 80089fc:	2142      	movs	r1, #66	; 0x42
 80089fe:	f000 f847 	bl	8008a90 <__assert_func>
 8008a02:	490b      	ldr	r1, [pc, #44]	; (8008a30 <srand+0x50>)
 8008a04:	4b0b      	ldr	r3, [pc, #44]	; (8008a34 <srand+0x54>)
 8008a06:	e9c0 1300 	strd	r1, r3, [r0]
 8008a0a:	4b0b      	ldr	r3, [pc, #44]	; (8008a38 <srand+0x58>)
 8008a0c:	6083      	str	r3, [r0, #8]
 8008a0e:	230b      	movs	r3, #11
 8008a10:	8183      	strh	r3, [r0, #12]
 8008a12:	2100      	movs	r1, #0
 8008a14:	2001      	movs	r0, #1
 8008a16:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8008a1a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	611c      	str	r4, [r3, #16]
 8008a20:	615a      	str	r2, [r3, #20]
 8008a22:	bd38      	pop	{r3, r4, r5, pc}
 8008a24:	200000a4 	.word	0x200000a4
 8008a28:	080099e8 	.word	0x080099e8
 8008a2c:	080099ff 	.word	0x080099ff
 8008a30:	abcd330e 	.word	0xabcd330e
 8008a34:	e66d1234 	.word	0xe66d1234
 8008a38:	0005deec 	.word	0x0005deec

08008a3c <_sbrk_r>:
 8008a3c:	b538      	push	{r3, r4, r5, lr}
 8008a3e:	4d06      	ldr	r5, [pc, #24]	; (8008a58 <_sbrk_r+0x1c>)
 8008a40:	2300      	movs	r3, #0
 8008a42:	4604      	mov	r4, r0
 8008a44:	4608      	mov	r0, r1
 8008a46:	602b      	str	r3, [r5, #0]
 8008a48:	f7ff fe30 	bl	80086ac <_sbrk>
 8008a4c:	1c43      	adds	r3, r0, #1
 8008a4e:	d102      	bne.n	8008a56 <_sbrk_r+0x1a>
 8008a50:	682b      	ldr	r3, [r5, #0]
 8008a52:	b103      	cbz	r3, 8008a56 <_sbrk_r+0x1a>
 8008a54:	6023      	str	r3, [r4, #0]
 8008a56:	bd38      	pop	{r3, r4, r5, pc}
 8008a58:	20003400 	.word	0x20003400

08008a5c <time>:
 8008a5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008a5e:	4b0b      	ldr	r3, [pc, #44]	; (8008a8c <time+0x30>)
 8008a60:	2200      	movs	r2, #0
 8008a62:	4669      	mov	r1, sp
 8008a64:	4604      	mov	r4, r0
 8008a66:	6818      	ldr	r0, [r3, #0]
 8008a68:	f000 f842 	bl	8008af0 <_gettimeofday_r>
 8008a6c:	2800      	cmp	r0, #0
 8008a6e:	bfbe      	ittt	lt
 8008a70:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
 8008a74:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008a78:	e9cd 2300 	strdlt	r2, r3, [sp]
 8008a7c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008a80:	b10c      	cbz	r4, 8008a86 <time+0x2a>
 8008a82:	e9c4 0100 	strd	r0, r1, [r4]
 8008a86:	b004      	add	sp, #16
 8008a88:	bd10      	pop	{r4, pc}
 8008a8a:	bf00      	nop
 8008a8c:	200000a4 	.word	0x200000a4

08008a90 <__assert_func>:
 8008a90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008a92:	4614      	mov	r4, r2
 8008a94:	461a      	mov	r2, r3
 8008a96:	4b09      	ldr	r3, [pc, #36]	; (8008abc <__assert_func+0x2c>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	4605      	mov	r5, r0
 8008a9c:	68d8      	ldr	r0, [r3, #12]
 8008a9e:	b14c      	cbz	r4, 8008ab4 <__assert_func+0x24>
 8008aa0:	4b07      	ldr	r3, [pc, #28]	; (8008ac0 <__assert_func+0x30>)
 8008aa2:	9100      	str	r1, [sp, #0]
 8008aa4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008aa8:	4906      	ldr	r1, [pc, #24]	; (8008ac4 <__assert_func+0x34>)
 8008aaa:	462b      	mov	r3, r5
 8008aac:	f000 f80e 	bl	8008acc <fiprintf>
 8008ab0:	f000 fbea 	bl	8009288 <abort>
 8008ab4:	4b04      	ldr	r3, [pc, #16]	; (8008ac8 <__assert_func+0x38>)
 8008ab6:	461c      	mov	r4, r3
 8008ab8:	e7f3      	b.n	8008aa2 <__assert_func+0x12>
 8008aba:	bf00      	nop
 8008abc:	200000a4 	.word	0x200000a4
 8008ac0:	08009a5a 	.word	0x08009a5a
 8008ac4:	08009a67 	.word	0x08009a67
 8008ac8:	08009a95 	.word	0x08009a95

08008acc <fiprintf>:
 8008acc:	b40e      	push	{r1, r2, r3}
 8008ace:	b503      	push	{r0, r1, lr}
 8008ad0:	4601      	mov	r1, r0
 8008ad2:	ab03      	add	r3, sp, #12
 8008ad4:	4805      	ldr	r0, [pc, #20]	; (8008aec <fiprintf+0x20>)
 8008ad6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ada:	6800      	ldr	r0, [r0, #0]
 8008adc:	9301      	str	r3, [sp, #4]
 8008ade:	f000 f84f 	bl	8008b80 <_vfiprintf_r>
 8008ae2:	b002      	add	sp, #8
 8008ae4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ae8:	b003      	add	sp, #12
 8008aea:	4770      	bx	lr
 8008aec:	200000a4 	.word	0x200000a4

08008af0 <_gettimeofday_r>:
 8008af0:	b538      	push	{r3, r4, r5, lr}
 8008af2:	4d07      	ldr	r5, [pc, #28]	; (8008b10 <_gettimeofday_r+0x20>)
 8008af4:	2300      	movs	r3, #0
 8008af6:	4604      	mov	r4, r0
 8008af8:	4608      	mov	r0, r1
 8008afa:	4611      	mov	r1, r2
 8008afc:	602b      	str	r3, [r5, #0]
 8008afe:	f000 fedb 	bl	80098b8 <_gettimeofday>
 8008b02:	1c43      	adds	r3, r0, #1
 8008b04:	d102      	bne.n	8008b0c <_gettimeofday_r+0x1c>
 8008b06:	682b      	ldr	r3, [r5, #0]
 8008b08:	b103      	cbz	r3, 8008b0c <_gettimeofday_r+0x1c>
 8008b0a:	6023      	str	r3, [r4, #0]
 8008b0c:	bd38      	pop	{r3, r4, r5, pc}
 8008b0e:	bf00      	nop
 8008b10:	20003400 	.word	0x20003400

08008b14 <__malloc_lock>:
 8008b14:	4801      	ldr	r0, [pc, #4]	; (8008b1c <__malloc_lock+0x8>)
 8008b16:	f000 bd77 	b.w	8009608 <__retarget_lock_acquire_recursive>
 8008b1a:	bf00      	nop
 8008b1c:	20003404 	.word	0x20003404

08008b20 <__malloc_unlock>:
 8008b20:	4801      	ldr	r0, [pc, #4]	; (8008b28 <__malloc_unlock+0x8>)
 8008b22:	f000 bd72 	b.w	800960a <__retarget_lock_release_recursive>
 8008b26:	bf00      	nop
 8008b28:	20003404 	.word	0x20003404

08008b2c <__sfputc_r>:
 8008b2c:	6893      	ldr	r3, [r2, #8]
 8008b2e:	3b01      	subs	r3, #1
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	b410      	push	{r4}
 8008b34:	6093      	str	r3, [r2, #8]
 8008b36:	da08      	bge.n	8008b4a <__sfputc_r+0x1e>
 8008b38:	6994      	ldr	r4, [r2, #24]
 8008b3a:	42a3      	cmp	r3, r4
 8008b3c:	db01      	blt.n	8008b42 <__sfputc_r+0x16>
 8008b3e:	290a      	cmp	r1, #10
 8008b40:	d103      	bne.n	8008b4a <__sfputc_r+0x1e>
 8008b42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b46:	f000 badf 	b.w	8009108 <__swbuf_r>
 8008b4a:	6813      	ldr	r3, [r2, #0]
 8008b4c:	1c58      	adds	r0, r3, #1
 8008b4e:	6010      	str	r0, [r2, #0]
 8008b50:	7019      	strb	r1, [r3, #0]
 8008b52:	4608      	mov	r0, r1
 8008b54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b58:	4770      	bx	lr

08008b5a <__sfputs_r>:
 8008b5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b5c:	4606      	mov	r6, r0
 8008b5e:	460f      	mov	r7, r1
 8008b60:	4614      	mov	r4, r2
 8008b62:	18d5      	adds	r5, r2, r3
 8008b64:	42ac      	cmp	r4, r5
 8008b66:	d101      	bne.n	8008b6c <__sfputs_r+0x12>
 8008b68:	2000      	movs	r0, #0
 8008b6a:	e007      	b.n	8008b7c <__sfputs_r+0x22>
 8008b6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b70:	463a      	mov	r2, r7
 8008b72:	4630      	mov	r0, r6
 8008b74:	f7ff ffda 	bl	8008b2c <__sfputc_r>
 8008b78:	1c43      	adds	r3, r0, #1
 8008b7a:	d1f3      	bne.n	8008b64 <__sfputs_r+0xa>
 8008b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008b80 <_vfiprintf_r>:
 8008b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b84:	460d      	mov	r5, r1
 8008b86:	b09d      	sub	sp, #116	; 0x74
 8008b88:	4614      	mov	r4, r2
 8008b8a:	4698      	mov	r8, r3
 8008b8c:	4606      	mov	r6, r0
 8008b8e:	b118      	cbz	r0, 8008b98 <_vfiprintf_r+0x18>
 8008b90:	6983      	ldr	r3, [r0, #24]
 8008b92:	b90b      	cbnz	r3, 8008b98 <_vfiprintf_r+0x18>
 8008b94:	f000 fc9a 	bl	80094cc <__sinit>
 8008b98:	4b89      	ldr	r3, [pc, #548]	; (8008dc0 <_vfiprintf_r+0x240>)
 8008b9a:	429d      	cmp	r5, r3
 8008b9c:	d11b      	bne.n	8008bd6 <_vfiprintf_r+0x56>
 8008b9e:	6875      	ldr	r5, [r6, #4]
 8008ba0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ba2:	07d9      	lsls	r1, r3, #31
 8008ba4:	d405      	bmi.n	8008bb2 <_vfiprintf_r+0x32>
 8008ba6:	89ab      	ldrh	r3, [r5, #12]
 8008ba8:	059a      	lsls	r2, r3, #22
 8008baa:	d402      	bmi.n	8008bb2 <_vfiprintf_r+0x32>
 8008bac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008bae:	f000 fd2b 	bl	8009608 <__retarget_lock_acquire_recursive>
 8008bb2:	89ab      	ldrh	r3, [r5, #12]
 8008bb4:	071b      	lsls	r3, r3, #28
 8008bb6:	d501      	bpl.n	8008bbc <_vfiprintf_r+0x3c>
 8008bb8:	692b      	ldr	r3, [r5, #16]
 8008bba:	b9eb      	cbnz	r3, 8008bf8 <_vfiprintf_r+0x78>
 8008bbc:	4629      	mov	r1, r5
 8008bbe:	4630      	mov	r0, r6
 8008bc0:	f000 faf4 	bl	80091ac <__swsetup_r>
 8008bc4:	b1c0      	cbz	r0, 8008bf8 <_vfiprintf_r+0x78>
 8008bc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008bc8:	07dc      	lsls	r4, r3, #31
 8008bca:	d50e      	bpl.n	8008bea <_vfiprintf_r+0x6a>
 8008bcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008bd0:	b01d      	add	sp, #116	; 0x74
 8008bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bd6:	4b7b      	ldr	r3, [pc, #492]	; (8008dc4 <_vfiprintf_r+0x244>)
 8008bd8:	429d      	cmp	r5, r3
 8008bda:	d101      	bne.n	8008be0 <_vfiprintf_r+0x60>
 8008bdc:	68b5      	ldr	r5, [r6, #8]
 8008bde:	e7df      	b.n	8008ba0 <_vfiprintf_r+0x20>
 8008be0:	4b79      	ldr	r3, [pc, #484]	; (8008dc8 <_vfiprintf_r+0x248>)
 8008be2:	429d      	cmp	r5, r3
 8008be4:	bf08      	it	eq
 8008be6:	68f5      	ldreq	r5, [r6, #12]
 8008be8:	e7da      	b.n	8008ba0 <_vfiprintf_r+0x20>
 8008bea:	89ab      	ldrh	r3, [r5, #12]
 8008bec:	0598      	lsls	r0, r3, #22
 8008bee:	d4ed      	bmi.n	8008bcc <_vfiprintf_r+0x4c>
 8008bf0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008bf2:	f000 fd0a 	bl	800960a <__retarget_lock_release_recursive>
 8008bf6:	e7e9      	b.n	8008bcc <_vfiprintf_r+0x4c>
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	9309      	str	r3, [sp, #36]	; 0x24
 8008bfc:	2320      	movs	r3, #32
 8008bfe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c02:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c06:	2330      	movs	r3, #48	; 0x30
 8008c08:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008dcc <_vfiprintf_r+0x24c>
 8008c0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c10:	f04f 0901 	mov.w	r9, #1
 8008c14:	4623      	mov	r3, r4
 8008c16:	469a      	mov	sl, r3
 8008c18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c1c:	b10a      	cbz	r2, 8008c22 <_vfiprintf_r+0xa2>
 8008c1e:	2a25      	cmp	r2, #37	; 0x25
 8008c20:	d1f9      	bne.n	8008c16 <_vfiprintf_r+0x96>
 8008c22:	ebba 0b04 	subs.w	fp, sl, r4
 8008c26:	d00b      	beq.n	8008c40 <_vfiprintf_r+0xc0>
 8008c28:	465b      	mov	r3, fp
 8008c2a:	4622      	mov	r2, r4
 8008c2c:	4629      	mov	r1, r5
 8008c2e:	4630      	mov	r0, r6
 8008c30:	f7ff ff93 	bl	8008b5a <__sfputs_r>
 8008c34:	3001      	adds	r0, #1
 8008c36:	f000 80aa 	beq.w	8008d8e <_vfiprintf_r+0x20e>
 8008c3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c3c:	445a      	add	r2, fp
 8008c3e:	9209      	str	r2, [sp, #36]	; 0x24
 8008c40:	f89a 3000 	ldrb.w	r3, [sl]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	f000 80a2 	beq.w	8008d8e <_vfiprintf_r+0x20e>
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008c50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c54:	f10a 0a01 	add.w	sl, sl, #1
 8008c58:	9304      	str	r3, [sp, #16]
 8008c5a:	9307      	str	r3, [sp, #28]
 8008c5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c60:	931a      	str	r3, [sp, #104]	; 0x68
 8008c62:	4654      	mov	r4, sl
 8008c64:	2205      	movs	r2, #5
 8008c66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c6a:	4858      	ldr	r0, [pc, #352]	; (8008dcc <_vfiprintf_r+0x24c>)
 8008c6c:	f7f7 fab0 	bl	80001d0 <memchr>
 8008c70:	9a04      	ldr	r2, [sp, #16]
 8008c72:	b9d8      	cbnz	r0, 8008cac <_vfiprintf_r+0x12c>
 8008c74:	06d1      	lsls	r1, r2, #27
 8008c76:	bf44      	itt	mi
 8008c78:	2320      	movmi	r3, #32
 8008c7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c7e:	0713      	lsls	r3, r2, #28
 8008c80:	bf44      	itt	mi
 8008c82:	232b      	movmi	r3, #43	; 0x2b
 8008c84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c88:	f89a 3000 	ldrb.w	r3, [sl]
 8008c8c:	2b2a      	cmp	r3, #42	; 0x2a
 8008c8e:	d015      	beq.n	8008cbc <_vfiprintf_r+0x13c>
 8008c90:	9a07      	ldr	r2, [sp, #28]
 8008c92:	4654      	mov	r4, sl
 8008c94:	2000      	movs	r0, #0
 8008c96:	f04f 0c0a 	mov.w	ip, #10
 8008c9a:	4621      	mov	r1, r4
 8008c9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ca0:	3b30      	subs	r3, #48	; 0x30
 8008ca2:	2b09      	cmp	r3, #9
 8008ca4:	d94e      	bls.n	8008d44 <_vfiprintf_r+0x1c4>
 8008ca6:	b1b0      	cbz	r0, 8008cd6 <_vfiprintf_r+0x156>
 8008ca8:	9207      	str	r2, [sp, #28]
 8008caa:	e014      	b.n	8008cd6 <_vfiprintf_r+0x156>
 8008cac:	eba0 0308 	sub.w	r3, r0, r8
 8008cb0:	fa09 f303 	lsl.w	r3, r9, r3
 8008cb4:	4313      	orrs	r3, r2
 8008cb6:	9304      	str	r3, [sp, #16]
 8008cb8:	46a2      	mov	sl, r4
 8008cba:	e7d2      	b.n	8008c62 <_vfiprintf_r+0xe2>
 8008cbc:	9b03      	ldr	r3, [sp, #12]
 8008cbe:	1d19      	adds	r1, r3, #4
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	9103      	str	r1, [sp, #12]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	bfbb      	ittet	lt
 8008cc8:	425b      	neglt	r3, r3
 8008cca:	f042 0202 	orrlt.w	r2, r2, #2
 8008cce:	9307      	strge	r3, [sp, #28]
 8008cd0:	9307      	strlt	r3, [sp, #28]
 8008cd2:	bfb8      	it	lt
 8008cd4:	9204      	strlt	r2, [sp, #16]
 8008cd6:	7823      	ldrb	r3, [r4, #0]
 8008cd8:	2b2e      	cmp	r3, #46	; 0x2e
 8008cda:	d10c      	bne.n	8008cf6 <_vfiprintf_r+0x176>
 8008cdc:	7863      	ldrb	r3, [r4, #1]
 8008cde:	2b2a      	cmp	r3, #42	; 0x2a
 8008ce0:	d135      	bne.n	8008d4e <_vfiprintf_r+0x1ce>
 8008ce2:	9b03      	ldr	r3, [sp, #12]
 8008ce4:	1d1a      	adds	r2, r3, #4
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	9203      	str	r2, [sp, #12]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	bfb8      	it	lt
 8008cee:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008cf2:	3402      	adds	r4, #2
 8008cf4:	9305      	str	r3, [sp, #20]
 8008cf6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008ddc <_vfiprintf_r+0x25c>
 8008cfa:	7821      	ldrb	r1, [r4, #0]
 8008cfc:	2203      	movs	r2, #3
 8008cfe:	4650      	mov	r0, sl
 8008d00:	f7f7 fa66 	bl	80001d0 <memchr>
 8008d04:	b140      	cbz	r0, 8008d18 <_vfiprintf_r+0x198>
 8008d06:	2340      	movs	r3, #64	; 0x40
 8008d08:	eba0 000a 	sub.w	r0, r0, sl
 8008d0c:	fa03 f000 	lsl.w	r0, r3, r0
 8008d10:	9b04      	ldr	r3, [sp, #16]
 8008d12:	4303      	orrs	r3, r0
 8008d14:	3401      	adds	r4, #1
 8008d16:	9304      	str	r3, [sp, #16]
 8008d18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d1c:	482c      	ldr	r0, [pc, #176]	; (8008dd0 <_vfiprintf_r+0x250>)
 8008d1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d22:	2206      	movs	r2, #6
 8008d24:	f7f7 fa54 	bl	80001d0 <memchr>
 8008d28:	2800      	cmp	r0, #0
 8008d2a:	d03f      	beq.n	8008dac <_vfiprintf_r+0x22c>
 8008d2c:	4b29      	ldr	r3, [pc, #164]	; (8008dd4 <_vfiprintf_r+0x254>)
 8008d2e:	bb1b      	cbnz	r3, 8008d78 <_vfiprintf_r+0x1f8>
 8008d30:	9b03      	ldr	r3, [sp, #12]
 8008d32:	3307      	adds	r3, #7
 8008d34:	f023 0307 	bic.w	r3, r3, #7
 8008d38:	3308      	adds	r3, #8
 8008d3a:	9303      	str	r3, [sp, #12]
 8008d3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d3e:	443b      	add	r3, r7
 8008d40:	9309      	str	r3, [sp, #36]	; 0x24
 8008d42:	e767      	b.n	8008c14 <_vfiprintf_r+0x94>
 8008d44:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d48:	460c      	mov	r4, r1
 8008d4a:	2001      	movs	r0, #1
 8008d4c:	e7a5      	b.n	8008c9a <_vfiprintf_r+0x11a>
 8008d4e:	2300      	movs	r3, #0
 8008d50:	3401      	adds	r4, #1
 8008d52:	9305      	str	r3, [sp, #20]
 8008d54:	4619      	mov	r1, r3
 8008d56:	f04f 0c0a 	mov.w	ip, #10
 8008d5a:	4620      	mov	r0, r4
 8008d5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d60:	3a30      	subs	r2, #48	; 0x30
 8008d62:	2a09      	cmp	r2, #9
 8008d64:	d903      	bls.n	8008d6e <_vfiprintf_r+0x1ee>
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d0c5      	beq.n	8008cf6 <_vfiprintf_r+0x176>
 8008d6a:	9105      	str	r1, [sp, #20]
 8008d6c:	e7c3      	b.n	8008cf6 <_vfiprintf_r+0x176>
 8008d6e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d72:	4604      	mov	r4, r0
 8008d74:	2301      	movs	r3, #1
 8008d76:	e7f0      	b.n	8008d5a <_vfiprintf_r+0x1da>
 8008d78:	ab03      	add	r3, sp, #12
 8008d7a:	9300      	str	r3, [sp, #0]
 8008d7c:	462a      	mov	r2, r5
 8008d7e:	4b16      	ldr	r3, [pc, #88]	; (8008dd8 <_vfiprintf_r+0x258>)
 8008d80:	a904      	add	r1, sp, #16
 8008d82:	4630      	mov	r0, r6
 8008d84:	f3af 8000 	nop.w
 8008d88:	4607      	mov	r7, r0
 8008d8a:	1c78      	adds	r0, r7, #1
 8008d8c:	d1d6      	bne.n	8008d3c <_vfiprintf_r+0x1bc>
 8008d8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d90:	07d9      	lsls	r1, r3, #31
 8008d92:	d405      	bmi.n	8008da0 <_vfiprintf_r+0x220>
 8008d94:	89ab      	ldrh	r3, [r5, #12]
 8008d96:	059a      	lsls	r2, r3, #22
 8008d98:	d402      	bmi.n	8008da0 <_vfiprintf_r+0x220>
 8008d9a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d9c:	f000 fc35 	bl	800960a <__retarget_lock_release_recursive>
 8008da0:	89ab      	ldrh	r3, [r5, #12]
 8008da2:	065b      	lsls	r3, r3, #25
 8008da4:	f53f af12 	bmi.w	8008bcc <_vfiprintf_r+0x4c>
 8008da8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008daa:	e711      	b.n	8008bd0 <_vfiprintf_r+0x50>
 8008dac:	ab03      	add	r3, sp, #12
 8008dae:	9300      	str	r3, [sp, #0]
 8008db0:	462a      	mov	r2, r5
 8008db2:	4b09      	ldr	r3, [pc, #36]	; (8008dd8 <_vfiprintf_r+0x258>)
 8008db4:	a904      	add	r1, sp, #16
 8008db6:	4630      	mov	r0, r6
 8008db8:	f000 f880 	bl	8008ebc <_printf_i>
 8008dbc:	e7e4      	b.n	8008d88 <_vfiprintf_r+0x208>
 8008dbe:	bf00      	nop
 8008dc0:	08009aec 	.word	0x08009aec
 8008dc4:	08009b0c 	.word	0x08009b0c
 8008dc8:	08009acc 	.word	0x08009acc
 8008dcc:	08009a96 	.word	0x08009a96
 8008dd0:	08009aa0 	.word	0x08009aa0
 8008dd4:	00000000 	.word	0x00000000
 8008dd8:	08008b5b 	.word	0x08008b5b
 8008ddc:	08009a9c 	.word	0x08009a9c

08008de0 <_printf_common>:
 8008de0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008de4:	4616      	mov	r6, r2
 8008de6:	4699      	mov	r9, r3
 8008de8:	688a      	ldr	r2, [r1, #8]
 8008dea:	690b      	ldr	r3, [r1, #16]
 8008dec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008df0:	4293      	cmp	r3, r2
 8008df2:	bfb8      	it	lt
 8008df4:	4613      	movlt	r3, r2
 8008df6:	6033      	str	r3, [r6, #0]
 8008df8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008dfc:	4607      	mov	r7, r0
 8008dfe:	460c      	mov	r4, r1
 8008e00:	b10a      	cbz	r2, 8008e06 <_printf_common+0x26>
 8008e02:	3301      	adds	r3, #1
 8008e04:	6033      	str	r3, [r6, #0]
 8008e06:	6823      	ldr	r3, [r4, #0]
 8008e08:	0699      	lsls	r1, r3, #26
 8008e0a:	bf42      	ittt	mi
 8008e0c:	6833      	ldrmi	r3, [r6, #0]
 8008e0e:	3302      	addmi	r3, #2
 8008e10:	6033      	strmi	r3, [r6, #0]
 8008e12:	6825      	ldr	r5, [r4, #0]
 8008e14:	f015 0506 	ands.w	r5, r5, #6
 8008e18:	d106      	bne.n	8008e28 <_printf_common+0x48>
 8008e1a:	f104 0a19 	add.w	sl, r4, #25
 8008e1e:	68e3      	ldr	r3, [r4, #12]
 8008e20:	6832      	ldr	r2, [r6, #0]
 8008e22:	1a9b      	subs	r3, r3, r2
 8008e24:	42ab      	cmp	r3, r5
 8008e26:	dc26      	bgt.n	8008e76 <_printf_common+0x96>
 8008e28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008e2c:	1e13      	subs	r3, r2, #0
 8008e2e:	6822      	ldr	r2, [r4, #0]
 8008e30:	bf18      	it	ne
 8008e32:	2301      	movne	r3, #1
 8008e34:	0692      	lsls	r2, r2, #26
 8008e36:	d42b      	bmi.n	8008e90 <_printf_common+0xb0>
 8008e38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008e3c:	4649      	mov	r1, r9
 8008e3e:	4638      	mov	r0, r7
 8008e40:	47c0      	blx	r8
 8008e42:	3001      	adds	r0, #1
 8008e44:	d01e      	beq.n	8008e84 <_printf_common+0xa4>
 8008e46:	6823      	ldr	r3, [r4, #0]
 8008e48:	68e5      	ldr	r5, [r4, #12]
 8008e4a:	6832      	ldr	r2, [r6, #0]
 8008e4c:	f003 0306 	and.w	r3, r3, #6
 8008e50:	2b04      	cmp	r3, #4
 8008e52:	bf08      	it	eq
 8008e54:	1aad      	subeq	r5, r5, r2
 8008e56:	68a3      	ldr	r3, [r4, #8]
 8008e58:	6922      	ldr	r2, [r4, #16]
 8008e5a:	bf0c      	ite	eq
 8008e5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e60:	2500      	movne	r5, #0
 8008e62:	4293      	cmp	r3, r2
 8008e64:	bfc4      	itt	gt
 8008e66:	1a9b      	subgt	r3, r3, r2
 8008e68:	18ed      	addgt	r5, r5, r3
 8008e6a:	2600      	movs	r6, #0
 8008e6c:	341a      	adds	r4, #26
 8008e6e:	42b5      	cmp	r5, r6
 8008e70:	d11a      	bne.n	8008ea8 <_printf_common+0xc8>
 8008e72:	2000      	movs	r0, #0
 8008e74:	e008      	b.n	8008e88 <_printf_common+0xa8>
 8008e76:	2301      	movs	r3, #1
 8008e78:	4652      	mov	r2, sl
 8008e7a:	4649      	mov	r1, r9
 8008e7c:	4638      	mov	r0, r7
 8008e7e:	47c0      	blx	r8
 8008e80:	3001      	adds	r0, #1
 8008e82:	d103      	bne.n	8008e8c <_printf_common+0xac>
 8008e84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e8c:	3501      	adds	r5, #1
 8008e8e:	e7c6      	b.n	8008e1e <_printf_common+0x3e>
 8008e90:	18e1      	adds	r1, r4, r3
 8008e92:	1c5a      	adds	r2, r3, #1
 8008e94:	2030      	movs	r0, #48	; 0x30
 8008e96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008e9a:	4422      	add	r2, r4
 8008e9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008ea0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008ea4:	3302      	adds	r3, #2
 8008ea6:	e7c7      	b.n	8008e38 <_printf_common+0x58>
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	4622      	mov	r2, r4
 8008eac:	4649      	mov	r1, r9
 8008eae:	4638      	mov	r0, r7
 8008eb0:	47c0      	blx	r8
 8008eb2:	3001      	adds	r0, #1
 8008eb4:	d0e6      	beq.n	8008e84 <_printf_common+0xa4>
 8008eb6:	3601      	adds	r6, #1
 8008eb8:	e7d9      	b.n	8008e6e <_printf_common+0x8e>
	...

08008ebc <_printf_i>:
 8008ebc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ec0:	7e0f      	ldrb	r7, [r1, #24]
 8008ec2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008ec4:	2f78      	cmp	r7, #120	; 0x78
 8008ec6:	4691      	mov	r9, r2
 8008ec8:	4680      	mov	r8, r0
 8008eca:	460c      	mov	r4, r1
 8008ecc:	469a      	mov	sl, r3
 8008ece:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008ed2:	d807      	bhi.n	8008ee4 <_printf_i+0x28>
 8008ed4:	2f62      	cmp	r7, #98	; 0x62
 8008ed6:	d80a      	bhi.n	8008eee <_printf_i+0x32>
 8008ed8:	2f00      	cmp	r7, #0
 8008eda:	f000 80d8 	beq.w	800908e <_printf_i+0x1d2>
 8008ede:	2f58      	cmp	r7, #88	; 0x58
 8008ee0:	f000 80a3 	beq.w	800902a <_printf_i+0x16e>
 8008ee4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ee8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008eec:	e03a      	b.n	8008f64 <_printf_i+0xa8>
 8008eee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008ef2:	2b15      	cmp	r3, #21
 8008ef4:	d8f6      	bhi.n	8008ee4 <_printf_i+0x28>
 8008ef6:	a101      	add	r1, pc, #4	; (adr r1, 8008efc <_printf_i+0x40>)
 8008ef8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008efc:	08008f55 	.word	0x08008f55
 8008f00:	08008f69 	.word	0x08008f69
 8008f04:	08008ee5 	.word	0x08008ee5
 8008f08:	08008ee5 	.word	0x08008ee5
 8008f0c:	08008ee5 	.word	0x08008ee5
 8008f10:	08008ee5 	.word	0x08008ee5
 8008f14:	08008f69 	.word	0x08008f69
 8008f18:	08008ee5 	.word	0x08008ee5
 8008f1c:	08008ee5 	.word	0x08008ee5
 8008f20:	08008ee5 	.word	0x08008ee5
 8008f24:	08008ee5 	.word	0x08008ee5
 8008f28:	08009075 	.word	0x08009075
 8008f2c:	08008f99 	.word	0x08008f99
 8008f30:	08009057 	.word	0x08009057
 8008f34:	08008ee5 	.word	0x08008ee5
 8008f38:	08008ee5 	.word	0x08008ee5
 8008f3c:	08009097 	.word	0x08009097
 8008f40:	08008ee5 	.word	0x08008ee5
 8008f44:	08008f99 	.word	0x08008f99
 8008f48:	08008ee5 	.word	0x08008ee5
 8008f4c:	08008ee5 	.word	0x08008ee5
 8008f50:	0800905f 	.word	0x0800905f
 8008f54:	682b      	ldr	r3, [r5, #0]
 8008f56:	1d1a      	adds	r2, r3, #4
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	602a      	str	r2, [r5, #0]
 8008f5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008f64:	2301      	movs	r3, #1
 8008f66:	e0a3      	b.n	80090b0 <_printf_i+0x1f4>
 8008f68:	6820      	ldr	r0, [r4, #0]
 8008f6a:	6829      	ldr	r1, [r5, #0]
 8008f6c:	0606      	lsls	r6, r0, #24
 8008f6e:	f101 0304 	add.w	r3, r1, #4
 8008f72:	d50a      	bpl.n	8008f8a <_printf_i+0xce>
 8008f74:	680e      	ldr	r6, [r1, #0]
 8008f76:	602b      	str	r3, [r5, #0]
 8008f78:	2e00      	cmp	r6, #0
 8008f7a:	da03      	bge.n	8008f84 <_printf_i+0xc8>
 8008f7c:	232d      	movs	r3, #45	; 0x2d
 8008f7e:	4276      	negs	r6, r6
 8008f80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f84:	485e      	ldr	r0, [pc, #376]	; (8009100 <_printf_i+0x244>)
 8008f86:	230a      	movs	r3, #10
 8008f88:	e019      	b.n	8008fbe <_printf_i+0x102>
 8008f8a:	680e      	ldr	r6, [r1, #0]
 8008f8c:	602b      	str	r3, [r5, #0]
 8008f8e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008f92:	bf18      	it	ne
 8008f94:	b236      	sxthne	r6, r6
 8008f96:	e7ef      	b.n	8008f78 <_printf_i+0xbc>
 8008f98:	682b      	ldr	r3, [r5, #0]
 8008f9a:	6820      	ldr	r0, [r4, #0]
 8008f9c:	1d19      	adds	r1, r3, #4
 8008f9e:	6029      	str	r1, [r5, #0]
 8008fa0:	0601      	lsls	r1, r0, #24
 8008fa2:	d501      	bpl.n	8008fa8 <_printf_i+0xec>
 8008fa4:	681e      	ldr	r6, [r3, #0]
 8008fa6:	e002      	b.n	8008fae <_printf_i+0xf2>
 8008fa8:	0646      	lsls	r6, r0, #25
 8008faa:	d5fb      	bpl.n	8008fa4 <_printf_i+0xe8>
 8008fac:	881e      	ldrh	r6, [r3, #0]
 8008fae:	4854      	ldr	r0, [pc, #336]	; (8009100 <_printf_i+0x244>)
 8008fb0:	2f6f      	cmp	r7, #111	; 0x6f
 8008fb2:	bf0c      	ite	eq
 8008fb4:	2308      	moveq	r3, #8
 8008fb6:	230a      	movne	r3, #10
 8008fb8:	2100      	movs	r1, #0
 8008fba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008fbe:	6865      	ldr	r5, [r4, #4]
 8008fc0:	60a5      	str	r5, [r4, #8]
 8008fc2:	2d00      	cmp	r5, #0
 8008fc4:	bfa2      	ittt	ge
 8008fc6:	6821      	ldrge	r1, [r4, #0]
 8008fc8:	f021 0104 	bicge.w	r1, r1, #4
 8008fcc:	6021      	strge	r1, [r4, #0]
 8008fce:	b90e      	cbnz	r6, 8008fd4 <_printf_i+0x118>
 8008fd0:	2d00      	cmp	r5, #0
 8008fd2:	d04d      	beq.n	8009070 <_printf_i+0x1b4>
 8008fd4:	4615      	mov	r5, r2
 8008fd6:	fbb6 f1f3 	udiv	r1, r6, r3
 8008fda:	fb03 6711 	mls	r7, r3, r1, r6
 8008fde:	5dc7      	ldrb	r7, [r0, r7]
 8008fe0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008fe4:	4637      	mov	r7, r6
 8008fe6:	42bb      	cmp	r3, r7
 8008fe8:	460e      	mov	r6, r1
 8008fea:	d9f4      	bls.n	8008fd6 <_printf_i+0x11a>
 8008fec:	2b08      	cmp	r3, #8
 8008fee:	d10b      	bne.n	8009008 <_printf_i+0x14c>
 8008ff0:	6823      	ldr	r3, [r4, #0]
 8008ff2:	07de      	lsls	r6, r3, #31
 8008ff4:	d508      	bpl.n	8009008 <_printf_i+0x14c>
 8008ff6:	6923      	ldr	r3, [r4, #16]
 8008ff8:	6861      	ldr	r1, [r4, #4]
 8008ffa:	4299      	cmp	r1, r3
 8008ffc:	bfde      	ittt	le
 8008ffe:	2330      	movle	r3, #48	; 0x30
 8009000:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009004:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009008:	1b52      	subs	r2, r2, r5
 800900a:	6122      	str	r2, [r4, #16]
 800900c:	f8cd a000 	str.w	sl, [sp]
 8009010:	464b      	mov	r3, r9
 8009012:	aa03      	add	r2, sp, #12
 8009014:	4621      	mov	r1, r4
 8009016:	4640      	mov	r0, r8
 8009018:	f7ff fee2 	bl	8008de0 <_printf_common>
 800901c:	3001      	adds	r0, #1
 800901e:	d14c      	bne.n	80090ba <_printf_i+0x1fe>
 8009020:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009024:	b004      	add	sp, #16
 8009026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800902a:	4835      	ldr	r0, [pc, #212]	; (8009100 <_printf_i+0x244>)
 800902c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009030:	6829      	ldr	r1, [r5, #0]
 8009032:	6823      	ldr	r3, [r4, #0]
 8009034:	f851 6b04 	ldr.w	r6, [r1], #4
 8009038:	6029      	str	r1, [r5, #0]
 800903a:	061d      	lsls	r5, r3, #24
 800903c:	d514      	bpl.n	8009068 <_printf_i+0x1ac>
 800903e:	07df      	lsls	r7, r3, #31
 8009040:	bf44      	itt	mi
 8009042:	f043 0320 	orrmi.w	r3, r3, #32
 8009046:	6023      	strmi	r3, [r4, #0]
 8009048:	b91e      	cbnz	r6, 8009052 <_printf_i+0x196>
 800904a:	6823      	ldr	r3, [r4, #0]
 800904c:	f023 0320 	bic.w	r3, r3, #32
 8009050:	6023      	str	r3, [r4, #0]
 8009052:	2310      	movs	r3, #16
 8009054:	e7b0      	b.n	8008fb8 <_printf_i+0xfc>
 8009056:	6823      	ldr	r3, [r4, #0]
 8009058:	f043 0320 	orr.w	r3, r3, #32
 800905c:	6023      	str	r3, [r4, #0]
 800905e:	2378      	movs	r3, #120	; 0x78
 8009060:	4828      	ldr	r0, [pc, #160]	; (8009104 <_printf_i+0x248>)
 8009062:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009066:	e7e3      	b.n	8009030 <_printf_i+0x174>
 8009068:	0659      	lsls	r1, r3, #25
 800906a:	bf48      	it	mi
 800906c:	b2b6      	uxthmi	r6, r6
 800906e:	e7e6      	b.n	800903e <_printf_i+0x182>
 8009070:	4615      	mov	r5, r2
 8009072:	e7bb      	b.n	8008fec <_printf_i+0x130>
 8009074:	682b      	ldr	r3, [r5, #0]
 8009076:	6826      	ldr	r6, [r4, #0]
 8009078:	6961      	ldr	r1, [r4, #20]
 800907a:	1d18      	adds	r0, r3, #4
 800907c:	6028      	str	r0, [r5, #0]
 800907e:	0635      	lsls	r5, r6, #24
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	d501      	bpl.n	8009088 <_printf_i+0x1cc>
 8009084:	6019      	str	r1, [r3, #0]
 8009086:	e002      	b.n	800908e <_printf_i+0x1d2>
 8009088:	0670      	lsls	r0, r6, #25
 800908a:	d5fb      	bpl.n	8009084 <_printf_i+0x1c8>
 800908c:	8019      	strh	r1, [r3, #0]
 800908e:	2300      	movs	r3, #0
 8009090:	6123      	str	r3, [r4, #16]
 8009092:	4615      	mov	r5, r2
 8009094:	e7ba      	b.n	800900c <_printf_i+0x150>
 8009096:	682b      	ldr	r3, [r5, #0]
 8009098:	1d1a      	adds	r2, r3, #4
 800909a:	602a      	str	r2, [r5, #0]
 800909c:	681d      	ldr	r5, [r3, #0]
 800909e:	6862      	ldr	r2, [r4, #4]
 80090a0:	2100      	movs	r1, #0
 80090a2:	4628      	mov	r0, r5
 80090a4:	f7f7 f894 	bl	80001d0 <memchr>
 80090a8:	b108      	cbz	r0, 80090ae <_printf_i+0x1f2>
 80090aa:	1b40      	subs	r0, r0, r5
 80090ac:	6060      	str	r0, [r4, #4]
 80090ae:	6863      	ldr	r3, [r4, #4]
 80090b0:	6123      	str	r3, [r4, #16]
 80090b2:	2300      	movs	r3, #0
 80090b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090b8:	e7a8      	b.n	800900c <_printf_i+0x150>
 80090ba:	6923      	ldr	r3, [r4, #16]
 80090bc:	462a      	mov	r2, r5
 80090be:	4649      	mov	r1, r9
 80090c0:	4640      	mov	r0, r8
 80090c2:	47d0      	blx	sl
 80090c4:	3001      	adds	r0, #1
 80090c6:	d0ab      	beq.n	8009020 <_printf_i+0x164>
 80090c8:	6823      	ldr	r3, [r4, #0]
 80090ca:	079b      	lsls	r3, r3, #30
 80090cc:	d413      	bmi.n	80090f6 <_printf_i+0x23a>
 80090ce:	68e0      	ldr	r0, [r4, #12]
 80090d0:	9b03      	ldr	r3, [sp, #12]
 80090d2:	4298      	cmp	r0, r3
 80090d4:	bfb8      	it	lt
 80090d6:	4618      	movlt	r0, r3
 80090d8:	e7a4      	b.n	8009024 <_printf_i+0x168>
 80090da:	2301      	movs	r3, #1
 80090dc:	4632      	mov	r2, r6
 80090de:	4649      	mov	r1, r9
 80090e0:	4640      	mov	r0, r8
 80090e2:	47d0      	blx	sl
 80090e4:	3001      	adds	r0, #1
 80090e6:	d09b      	beq.n	8009020 <_printf_i+0x164>
 80090e8:	3501      	adds	r5, #1
 80090ea:	68e3      	ldr	r3, [r4, #12]
 80090ec:	9903      	ldr	r1, [sp, #12]
 80090ee:	1a5b      	subs	r3, r3, r1
 80090f0:	42ab      	cmp	r3, r5
 80090f2:	dcf2      	bgt.n	80090da <_printf_i+0x21e>
 80090f4:	e7eb      	b.n	80090ce <_printf_i+0x212>
 80090f6:	2500      	movs	r5, #0
 80090f8:	f104 0619 	add.w	r6, r4, #25
 80090fc:	e7f5      	b.n	80090ea <_printf_i+0x22e>
 80090fe:	bf00      	nop
 8009100:	08009aa7 	.word	0x08009aa7
 8009104:	08009ab8 	.word	0x08009ab8

08009108 <__swbuf_r>:
 8009108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800910a:	460e      	mov	r6, r1
 800910c:	4614      	mov	r4, r2
 800910e:	4605      	mov	r5, r0
 8009110:	b118      	cbz	r0, 800911a <__swbuf_r+0x12>
 8009112:	6983      	ldr	r3, [r0, #24]
 8009114:	b90b      	cbnz	r3, 800911a <__swbuf_r+0x12>
 8009116:	f000 f9d9 	bl	80094cc <__sinit>
 800911a:	4b21      	ldr	r3, [pc, #132]	; (80091a0 <__swbuf_r+0x98>)
 800911c:	429c      	cmp	r4, r3
 800911e:	d12b      	bne.n	8009178 <__swbuf_r+0x70>
 8009120:	686c      	ldr	r4, [r5, #4]
 8009122:	69a3      	ldr	r3, [r4, #24]
 8009124:	60a3      	str	r3, [r4, #8]
 8009126:	89a3      	ldrh	r3, [r4, #12]
 8009128:	071a      	lsls	r2, r3, #28
 800912a:	d52f      	bpl.n	800918c <__swbuf_r+0x84>
 800912c:	6923      	ldr	r3, [r4, #16]
 800912e:	b36b      	cbz	r3, 800918c <__swbuf_r+0x84>
 8009130:	6923      	ldr	r3, [r4, #16]
 8009132:	6820      	ldr	r0, [r4, #0]
 8009134:	1ac0      	subs	r0, r0, r3
 8009136:	6963      	ldr	r3, [r4, #20]
 8009138:	b2f6      	uxtb	r6, r6
 800913a:	4283      	cmp	r3, r0
 800913c:	4637      	mov	r7, r6
 800913e:	dc04      	bgt.n	800914a <__swbuf_r+0x42>
 8009140:	4621      	mov	r1, r4
 8009142:	4628      	mov	r0, r5
 8009144:	f000 f92e 	bl	80093a4 <_fflush_r>
 8009148:	bb30      	cbnz	r0, 8009198 <__swbuf_r+0x90>
 800914a:	68a3      	ldr	r3, [r4, #8]
 800914c:	3b01      	subs	r3, #1
 800914e:	60a3      	str	r3, [r4, #8]
 8009150:	6823      	ldr	r3, [r4, #0]
 8009152:	1c5a      	adds	r2, r3, #1
 8009154:	6022      	str	r2, [r4, #0]
 8009156:	701e      	strb	r6, [r3, #0]
 8009158:	6963      	ldr	r3, [r4, #20]
 800915a:	3001      	adds	r0, #1
 800915c:	4283      	cmp	r3, r0
 800915e:	d004      	beq.n	800916a <__swbuf_r+0x62>
 8009160:	89a3      	ldrh	r3, [r4, #12]
 8009162:	07db      	lsls	r3, r3, #31
 8009164:	d506      	bpl.n	8009174 <__swbuf_r+0x6c>
 8009166:	2e0a      	cmp	r6, #10
 8009168:	d104      	bne.n	8009174 <__swbuf_r+0x6c>
 800916a:	4621      	mov	r1, r4
 800916c:	4628      	mov	r0, r5
 800916e:	f000 f919 	bl	80093a4 <_fflush_r>
 8009172:	b988      	cbnz	r0, 8009198 <__swbuf_r+0x90>
 8009174:	4638      	mov	r0, r7
 8009176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009178:	4b0a      	ldr	r3, [pc, #40]	; (80091a4 <__swbuf_r+0x9c>)
 800917a:	429c      	cmp	r4, r3
 800917c:	d101      	bne.n	8009182 <__swbuf_r+0x7a>
 800917e:	68ac      	ldr	r4, [r5, #8]
 8009180:	e7cf      	b.n	8009122 <__swbuf_r+0x1a>
 8009182:	4b09      	ldr	r3, [pc, #36]	; (80091a8 <__swbuf_r+0xa0>)
 8009184:	429c      	cmp	r4, r3
 8009186:	bf08      	it	eq
 8009188:	68ec      	ldreq	r4, [r5, #12]
 800918a:	e7ca      	b.n	8009122 <__swbuf_r+0x1a>
 800918c:	4621      	mov	r1, r4
 800918e:	4628      	mov	r0, r5
 8009190:	f000 f80c 	bl	80091ac <__swsetup_r>
 8009194:	2800      	cmp	r0, #0
 8009196:	d0cb      	beq.n	8009130 <__swbuf_r+0x28>
 8009198:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800919c:	e7ea      	b.n	8009174 <__swbuf_r+0x6c>
 800919e:	bf00      	nop
 80091a0:	08009aec 	.word	0x08009aec
 80091a4:	08009b0c 	.word	0x08009b0c
 80091a8:	08009acc 	.word	0x08009acc

080091ac <__swsetup_r>:
 80091ac:	4b32      	ldr	r3, [pc, #200]	; (8009278 <__swsetup_r+0xcc>)
 80091ae:	b570      	push	{r4, r5, r6, lr}
 80091b0:	681d      	ldr	r5, [r3, #0]
 80091b2:	4606      	mov	r6, r0
 80091b4:	460c      	mov	r4, r1
 80091b6:	b125      	cbz	r5, 80091c2 <__swsetup_r+0x16>
 80091b8:	69ab      	ldr	r3, [r5, #24]
 80091ba:	b913      	cbnz	r3, 80091c2 <__swsetup_r+0x16>
 80091bc:	4628      	mov	r0, r5
 80091be:	f000 f985 	bl	80094cc <__sinit>
 80091c2:	4b2e      	ldr	r3, [pc, #184]	; (800927c <__swsetup_r+0xd0>)
 80091c4:	429c      	cmp	r4, r3
 80091c6:	d10f      	bne.n	80091e8 <__swsetup_r+0x3c>
 80091c8:	686c      	ldr	r4, [r5, #4]
 80091ca:	89a3      	ldrh	r3, [r4, #12]
 80091cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80091d0:	0719      	lsls	r1, r3, #28
 80091d2:	d42c      	bmi.n	800922e <__swsetup_r+0x82>
 80091d4:	06dd      	lsls	r5, r3, #27
 80091d6:	d411      	bmi.n	80091fc <__swsetup_r+0x50>
 80091d8:	2309      	movs	r3, #9
 80091da:	6033      	str	r3, [r6, #0]
 80091dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80091e0:	81a3      	strh	r3, [r4, #12]
 80091e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80091e6:	e03e      	b.n	8009266 <__swsetup_r+0xba>
 80091e8:	4b25      	ldr	r3, [pc, #148]	; (8009280 <__swsetup_r+0xd4>)
 80091ea:	429c      	cmp	r4, r3
 80091ec:	d101      	bne.n	80091f2 <__swsetup_r+0x46>
 80091ee:	68ac      	ldr	r4, [r5, #8]
 80091f0:	e7eb      	b.n	80091ca <__swsetup_r+0x1e>
 80091f2:	4b24      	ldr	r3, [pc, #144]	; (8009284 <__swsetup_r+0xd8>)
 80091f4:	429c      	cmp	r4, r3
 80091f6:	bf08      	it	eq
 80091f8:	68ec      	ldreq	r4, [r5, #12]
 80091fa:	e7e6      	b.n	80091ca <__swsetup_r+0x1e>
 80091fc:	0758      	lsls	r0, r3, #29
 80091fe:	d512      	bpl.n	8009226 <__swsetup_r+0x7a>
 8009200:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009202:	b141      	cbz	r1, 8009216 <__swsetup_r+0x6a>
 8009204:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009208:	4299      	cmp	r1, r3
 800920a:	d002      	beq.n	8009212 <__swsetup_r+0x66>
 800920c:	4630      	mov	r0, r6
 800920e:	f7ff fb07 	bl	8008820 <_free_r>
 8009212:	2300      	movs	r3, #0
 8009214:	6363      	str	r3, [r4, #52]	; 0x34
 8009216:	89a3      	ldrh	r3, [r4, #12]
 8009218:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800921c:	81a3      	strh	r3, [r4, #12]
 800921e:	2300      	movs	r3, #0
 8009220:	6063      	str	r3, [r4, #4]
 8009222:	6923      	ldr	r3, [r4, #16]
 8009224:	6023      	str	r3, [r4, #0]
 8009226:	89a3      	ldrh	r3, [r4, #12]
 8009228:	f043 0308 	orr.w	r3, r3, #8
 800922c:	81a3      	strh	r3, [r4, #12]
 800922e:	6923      	ldr	r3, [r4, #16]
 8009230:	b94b      	cbnz	r3, 8009246 <__swsetup_r+0x9a>
 8009232:	89a3      	ldrh	r3, [r4, #12]
 8009234:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009238:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800923c:	d003      	beq.n	8009246 <__swsetup_r+0x9a>
 800923e:	4621      	mov	r1, r4
 8009240:	4630      	mov	r0, r6
 8009242:	f000 fa09 	bl	8009658 <__smakebuf_r>
 8009246:	89a0      	ldrh	r0, [r4, #12]
 8009248:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800924c:	f010 0301 	ands.w	r3, r0, #1
 8009250:	d00a      	beq.n	8009268 <__swsetup_r+0xbc>
 8009252:	2300      	movs	r3, #0
 8009254:	60a3      	str	r3, [r4, #8]
 8009256:	6963      	ldr	r3, [r4, #20]
 8009258:	425b      	negs	r3, r3
 800925a:	61a3      	str	r3, [r4, #24]
 800925c:	6923      	ldr	r3, [r4, #16]
 800925e:	b943      	cbnz	r3, 8009272 <__swsetup_r+0xc6>
 8009260:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009264:	d1ba      	bne.n	80091dc <__swsetup_r+0x30>
 8009266:	bd70      	pop	{r4, r5, r6, pc}
 8009268:	0781      	lsls	r1, r0, #30
 800926a:	bf58      	it	pl
 800926c:	6963      	ldrpl	r3, [r4, #20]
 800926e:	60a3      	str	r3, [r4, #8]
 8009270:	e7f4      	b.n	800925c <__swsetup_r+0xb0>
 8009272:	2000      	movs	r0, #0
 8009274:	e7f7      	b.n	8009266 <__swsetup_r+0xba>
 8009276:	bf00      	nop
 8009278:	200000a4 	.word	0x200000a4
 800927c:	08009aec 	.word	0x08009aec
 8009280:	08009b0c 	.word	0x08009b0c
 8009284:	08009acc 	.word	0x08009acc

08009288 <abort>:
 8009288:	b508      	push	{r3, lr}
 800928a:	2006      	movs	r0, #6
 800928c:	f000 fa4c 	bl	8009728 <raise>
 8009290:	2001      	movs	r0, #1
 8009292:	f7ff f993 	bl	80085bc <_exit>
	...

08009298 <__sflush_r>:
 8009298:	898a      	ldrh	r2, [r1, #12]
 800929a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800929e:	4605      	mov	r5, r0
 80092a0:	0710      	lsls	r0, r2, #28
 80092a2:	460c      	mov	r4, r1
 80092a4:	d458      	bmi.n	8009358 <__sflush_r+0xc0>
 80092a6:	684b      	ldr	r3, [r1, #4]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	dc05      	bgt.n	80092b8 <__sflush_r+0x20>
 80092ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	dc02      	bgt.n	80092b8 <__sflush_r+0x20>
 80092b2:	2000      	movs	r0, #0
 80092b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80092ba:	2e00      	cmp	r6, #0
 80092bc:	d0f9      	beq.n	80092b2 <__sflush_r+0x1a>
 80092be:	2300      	movs	r3, #0
 80092c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80092c4:	682f      	ldr	r7, [r5, #0]
 80092c6:	602b      	str	r3, [r5, #0]
 80092c8:	d032      	beq.n	8009330 <__sflush_r+0x98>
 80092ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80092cc:	89a3      	ldrh	r3, [r4, #12]
 80092ce:	075a      	lsls	r2, r3, #29
 80092d0:	d505      	bpl.n	80092de <__sflush_r+0x46>
 80092d2:	6863      	ldr	r3, [r4, #4]
 80092d4:	1ac0      	subs	r0, r0, r3
 80092d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80092d8:	b10b      	cbz	r3, 80092de <__sflush_r+0x46>
 80092da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80092dc:	1ac0      	subs	r0, r0, r3
 80092de:	2300      	movs	r3, #0
 80092e0:	4602      	mov	r2, r0
 80092e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80092e4:	6a21      	ldr	r1, [r4, #32]
 80092e6:	4628      	mov	r0, r5
 80092e8:	47b0      	blx	r6
 80092ea:	1c43      	adds	r3, r0, #1
 80092ec:	89a3      	ldrh	r3, [r4, #12]
 80092ee:	d106      	bne.n	80092fe <__sflush_r+0x66>
 80092f0:	6829      	ldr	r1, [r5, #0]
 80092f2:	291d      	cmp	r1, #29
 80092f4:	d82c      	bhi.n	8009350 <__sflush_r+0xb8>
 80092f6:	4a2a      	ldr	r2, [pc, #168]	; (80093a0 <__sflush_r+0x108>)
 80092f8:	40ca      	lsrs	r2, r1
 80092fa:	07d6      	lsls	r6, r2, #31
 80092fc:	d528      	bpl.n	8009350 <__sflush_r+0xb8>
 80092fe:	2200      	movs	r2, #0
 8009300:	6062      	str	r2, [r4, #4]
 8009302:	04d9      	lsls	r1, r3, #19
 8009304:	6922      	ldr	r2, [r4, #16]
 8009306:	6022      	str	r2, [r4, #0]
 8009308:	d504      	bpl.n	8009314 <__sflush_r+0x7c>
 800930a:	1c42      	adds	r2, r0, #1
 800930c:	d101      	bne.n	8009312 <__sflush_r+0x7a>
 800930e:	682b      	ldr	r3, [r5, #0]
 8009310:	b903      	cbnz	r3, 8009314 <__sflush_r+0x7c>
 8009312:	6560      	str	r0, [r4, #84]	; 0x54
 8009314:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009316:	602f      	str	r7, [r5, #0]
 8009318:	2900      	cmp	r1, #0
 800931a:	d0ca      	beq.n	80092b2 <__sflush_r+0x1a>
 800931c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009320:	4299      	cmp	r1, r3
 8009322:	d002      	beq.n	800932a <__sflush_r+0x92>
 8009324:	4628      	mov	r0, r5
 8009326:	f7ff fa7b 	bl	8008820 <_free_r>
 800932a:	2000      	movs	r0, #0
 800932c:	6360      	str	r0, [r4, #52]	; 0x34
 800932e:	e7c1      	b.n	80092b4 <__sflush_r+0x1c>
 8009330:	6a21      	ldr	r1, [r4, #32]
 8009332:	2301      	movs	r3, #1
 8009334:	4628      	mov	r0, r5
 8009336:	47b0      	blx	r6
 8009338:	1c41      	adds	r1, r0, #1
 800933a:	d1c7      	bne.n	80092cc <__sflush_r+0x34>
 800933c:	682b      	ldr	r3, [r5, #0]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d0c4      	beq.n	80092cc <__sflush_r+0x34>
 8009342:	2b1d      	cmp	r3, #29
 8009344:	d001      	beq.n	800934a <__sflush_r+0xb2>
 8009346:	2b16      	cmp	r3, #22
 8009348:	d101      	bne.n	800934e <__sflush_r+0xb6>
 800934a:	602f      	str	r7, [r5, #0]
 800934c:	e7b1      	b.n	80092b2 <__sflush_r+0x1a>
 800934e:	89a3      	ldrh	r3, [r4, #12]
 8009350:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009354:	81a3      	strh	r3, [r4, #12]
 8009356:	e7ad      	b.n	80092b4 <__sflush_r+0x1c>
 8009358:	690f      	ldr	r7, [r1, #16]
 800935a:	2f00      	cmp	r7, #0
 800935c:	d0a9      	beq.n	80092b2 <__sflush_r+0x1a>
 800935e:	0793      	lsls	r3, r2, #30
 8009360:	680e      	ldr	r6, [r1, #0]
 8009362:	bf08      	it	eq
 8009364:	694b      	ldreq	r3, [r1, #20]
 8009366:	600f      	str	r7, [r1, #0]
 8009368:	bf18      	it	ne
 800936a:	2300      	movne	r3, #0
 800936c:	eba6 0807 	sub.w	r8, r6, r7
 8009370:	608b      	str	r3, [r1, #8]
 8009372:	f1b8 0f00 	cmp.w	r8, #0
 8009376:	dd9c      	ble.n	80092b2 <__sflush_r+0x1a>
 8009378:	6a21      	ldr	r1, [r4, #32]
 800937a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800937c:	4643      	mov	r3, r8
 800937e:	463a      	mov	r2, r7
 8009380:	4628      	mov	r0, r5
 8009382:	47b0      	blx	r6
 8009384:	2800      	cmp	r0, #0
 8009386:	dc06      	bgt.n	8009396 <__sflush_r+0xfe>
 8009388:	89a3      	ldrh	r3, [r4, #12]
 800938a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800938e:	81a3      	strh	r3, [r4, #12]
 8009390:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009394:	e78e      	b.n	80092b4 <__sflush_r+0x1c>
 8009396:	4407      	add	r7, r0
 8009398:	eba8 0800 	sub.w	r8, r8, r0
 800939c:	e7e9      	b.n	8009372 <__sflush_r+0xda>
 800939e:	bf00      	nop
 80093a0:	20400001 	.word	0x20400001

080093a4 <_fflush_r>:
 80093a4:	b538      	push	{r3, r4, r5, lr}
 80093a6:	690b      	ldr	r3, [r1, #16]
 80093a8:	4605      	mov	r5, r0
 80093aa:	460c      	mov	r4, r1
 80093ac:	b913      	cbnz	r3, 80093b4 <_fflush_r+0x10>
 80093ae:	2500      	movs	r5, #0
 80093b0:	4628      	mov	r0, r5
 80093b2:	bd38      	pop	{r3, r4, r5, pc}
 80093b4:	b118      	cbz	r0, 80093be <_fflush_r+0x1a>
 80093b6:	6983      	ldr	r3, [r0, #24]
 80093b8:	b90b      	cbnz	r3, 80093be <_fflush_r+0x1a>
 80093ba:	f000 f887 	bl	80094cc <__sinit>
 80093be:	4b14      	ldr	r3, [pc, #80]	; (8009410 <_fflush_r+0x6c>)
 80093c0:	429c      	cmp	r4, r3
 80093c2:	d11b      	bne.n	80093fc <_fflush_r+0x58>
 80093c4:	686c      	ldr	r4, [r5, #4]
 80093c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d0ef      	beq.n	80093ae <_fflush_r+0xa>
 80093ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80093d0:	07d0      	lsls	r0, r2, #31
 80093d2:	d404      	bmi.n	80093de <_fflush_r+0x3a>
 80093d4:	0599      	lsls	r1, r3, #22
 80093d6:	d402      	bmi.n	80093de <_fflush_r+0x3a>
 80093d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80093da:	f000 f915 	bl	8009608 <__retarget_lock_acquire_recursive>
 80093de:	4628      	mov	r0, r5
 80093e0:	4621      	mov	r1, r4
 80093e2:	f7ff ff59 	bl	8009298 <__sflush_r>
 80093e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80093e8:	07da      	lsls	r2, r3, #31
 80093ea:	4605      	mov	r5, r0
 80093ec:	d4e0      	bmi.n	80093b0 <_fflush_r+0xc>
 80093ee:	89a3      	ldrh	r3, [r4, #12]
 80093f0:	059b      	lsls	r3, r3, #22
 80093f2:	d4dd      	bmi.n	80093b0 <_fflush_r+0xc>
 80093f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80093f6:	f000 f908 	bl	800960a <__retarget_lock_release_recursive>
 80093fa:	e7d9      	b.n	80093b0 <_fflush_r+0xc>
 80093fc:	4b05      	ldr	r3, [pc, #20]	; (8009414 <_fflush_r+0x70>)
 80093fe:	429c      	cmp	r4, r3
 8009400:	d101      	bne.n	8009406 <_fflush_r+0x62>
 8009402:	68ac      	ldr	r4, [r5, #8]
 8009404:	e7df      	b.n	80093c6 <_fflush_r+0x22>
 8009406:	4b04      	ldr	r3, [pc, #16]	; (8009418 <_fflush_r+0x74>)
 8009408:	429c      	cmp	r4, r3
 800940a:	bf08      	it	eq
 800940c:	68ec      	ldreq	r4, [r5, #12]
 800940e:	e7da      	b.n	80093c6 <_fflush_r+0x22>
 8009410:	08009aec 	.word	0x08009aec
 8009414:	08009b0c 	.word	0x08009b0c
 8009418:	08009acc 	.word	0x08009acc

0800941c <std>:
 800941c:	2300      	movs	r3, #0
 800941e:	b510      	push	{r4, lr}
 8009420:	4604      	mov	r4, r0
 8009422:	e9c0 3300 	strd	r3, r3, [r0]
 8009426:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800942a:	6083      	str	r3, [r0, #8]
 800942c:	8181      	strh	r1, [r0, #12]
 800942e:	6643      	str	r3, [r0, #100]	; 0x64
 8009430:	81c2      	strh	r2, [r0, #14]
 8009432:	6183      	str	r3, [r0, #24]
 8009434:	4619      	mov	r1, r3
 8009436:	2208      	movs	r2, #8
 8009438:	305c      	adds	r0, #92	; 0x5c
 800943a:	f7ff f9e9 	bl	8008810 <memset>
 800943e:	4b05      	ldr	r3, [pc, #20]	; (8009454 <std+0x38>)
 8009440:	6263      	str	r3, [r4, #36]	; 0x24
 8009442:	4b05      	ldr	r3, [pc, #20]	; (8009458 <std+0x3c>)
 8009444:	62a3      	str	r3, [r4, #40]	; 0x28
 8009446:	4b05      	ldr	r3, [pc, #20]	; (800945c <std+0x40>)
 8009448:	62e3      	str	r3, [r4, #44]	; 0x2c
 800944a:	4b05      	ldr	r3, [pc, #20]	; (8009460 <std+0x44>)
 800944c:	6224      	str	r4, [r4, #32]
 800944e:	6323      	str	r3, [r4, #48]	; 0x30
 8009450:	bd10      	pop	{r4, pc}
 8009452:	bf00      	nop
 8009454:	08009761 	.word	0x08009761
 8009458:	08009783 	.word	0x08009783
 800945c:	080097bb 	.word	0x080097bb
 8009460:	080097df 	.word	0x080097df

08009464 <_cleanup_r>:
 8009464:	4901      	ldr	r1, [pc, #4]	; (800946c <_cleanup_r+0x8>)
 8009466:	f000 b8af 	b.w	80095c8 <_fwalk_reent>
 800946a:	bf00      	nop
 800946c:	080093a5 	.word	0x080093a5

08009470 <__sfmoreglue>:
 8009470:	b570      	push	{r4, r5, r6, lr}
 8009472:	2268      	movs	r2, #104	; 0x68
 8009474:	1e4d      	subs	r5, r1, #1
 8009476:	4355      	muls	r5, r2
 8009478:	460e      	mov	r6, r1
 800947a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800947e:	f7ff fa3b 	bl	80088f8 <_malloc_r>
 8009482:	4604      	mov	r4, r0
 8009484:	b140      	cbz	r0, 8009498 <__sfmoreglue+0x28>
 8009486:	2100      	movs	r1, #0
 8009488:	e9c0 1600 	strd	r1, r6, [r0]
 800948c:	300c      	adds	r0, #12
 800948e:	60a0      	str	r0, [r4, #8]
 8009490:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009494:	f7ff f9bc 	bl	8008810 <memset>
 8009498:	4620      	mov	r0, r4
 800949a:	bd70      	pop	{r4, r5, r6, pc}

0800949c <__sfp_lock_acquire>:
 800949c:	4801      	ldr	r0, [pc, #4]	; (80094a4 <__sfp_lock_acquire+0x8>)
 800949e:	f000 b8b3 	b.w	8009608 <__retarget_lock_acquire_recursive>
 80094a2:	bf00      	nop
 80094a4:	20003405 	.word	0x20003405

080094a8 <__sfp_lock_release>:
 80094a8:	4801      	ldr	r0, [pc, #4]	; (80094b0 <__sfp_lock_release+0x8>)
 80094aa:	f000 b8ae 	b.w	800960a <__retarget_lock_release_recursive>
 80094ae:	bf00      	nop
 80094b0:	20003405 	.word	0x20003405

080094b4 <__sinit_lock_acquire>:
 80094b4:	4801      	ldr	r0, [pc, #4]	; (80094bc <__sinit_lock_acquire+0x8>)
 80094b6:	f000 b8a7 	b.w	8009608 <__retarget_lock_acquire_recursive>
 80094ba:	bf00      	nop
 80094bc:	20003406 	.word	0x20003406

080094c0 <__sinit_lock_release>:
 80094c0:	4801      	ldr	r0, [pc, #4]	; (80094c8 <__sinit_lock_release+0x8>)
 80094c2:	f000 b8a2 	b.w	800960a <__retarget_lock_release_recursive>
 80094c6:	bf00      	nop
 80094c8:	20003406 	.word	0x20003406

080094cc <__sinit>:
 80094cc:	b510      	push	{r4, lr}
 80094ce:	4604      	mov	r4, r0
 80094d0:	f7ff fff0 	bl	80094b4 <__sinit_lock_acquire>
 80094d4:	69a3      	ldr	r3, [r4, #24]
 80094d6:	b11b      	cbz	r3, 80094e0 <__sinit+0x14>
 80094d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094dc:	f7ff bff0 	b.w	80094c0 <__sinit_lock_release>
 80094e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80094e4:	6523      	str	r3, [r4, #80]	; 0x50
 80094e6:	4b13      	ldr	r3, [pc, #76]	; (8009534 <__sinit+0x68>)
 80094e8:	4a13      	ldr	r2, [pc, #76]	; (8009538 <__sinit+0x6c>)
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80094ee:	42a3      	cmp	r3, r4
 80094f0:	bf04      	itt	eq
 80094f2:	2301      	moveq	r3, #1
 80094f4:	61a3      	streq	r3, [r4, #24]
 80094f6:	4620      	mov	r0, r4
 80094f8:	f000 f820 	bl	800953c <__sfp>
 80094fc:	6060      	str	r0, [r4, #4]
 80094fe:	4620      	mov	r0, r4
 8009500:	f000 f81c 	bl	800953c <__sfp>
 8009504:	60a0      	str	r0, [r4, #8]
 8009506:	4620      	mov	r0, r4
 8009508:	f000 f818 	bl	800953c <__sfp>
 800950c:	2200      	movs	r2, #0
 800950e:	60e0      	str	r0, [r4, #12]
 8009510:	2104      	movs	r1, #4
 8009512:	6860      	ldr	r0, [r4, #4]
 8009514:	f7ff ff82 	bl	800941c <std>
 8009518:	68a0      	ldr	r0, [r4, #8]
 800951a:	2201      	movs	r2, #1
 800951c:	2109      	movs	r1, #9
 800951e:	f7ff ff7d 	bl	800941c <std>
 8009522:	68e0      	ldr	r0, [r4, #12]
 8009524:	2202      	movs	r2, #2
 8009526:	2112      	movs	r1, #18
 8009528:	f7ff ff78 	bl	800941c <std>
 800952c:	2301      	movs	r3, #1
 800952e:	61a3      	str	r3, [r4, #24]
 8009530:	e7d2      	b.n	80094d8 <__sinit+0xc>
 8009532:	bf00      	nop
 8009534:	080099e4 	.word	0x080099e4
 8009538:	08009465 	.word	0x08009465

0800953c <__sfp>:
 800953c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800953e:	4607      	mov	r7, r0
 8009540:	f7ff ffac 	bl	800949c <__sfp_lock_acquire>
 8009544:	4b1e      	ldr	r3, [pc, #120]	; (80095c0 <__sfp+0x84>)
 8009546:	681e      	ldr	r6, [r3, #0]
 8009548:	69b3      	ldr	r3, [r6, #24]
 800954a:	b913      	cbnz	r3, 8009552 <__sfp+0x16>
 800954c:	4630      	mov	r0, r6
 800954e:	f7ff ffbd 	bl	80094cc <__sinit>
 8009552:	3648      	adds	r6, #72	; 0x48
 8009554:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009558:	3b01      	subs	r3, #1
 800955a:	d503      	bpl.n	8009564 <__sfp+0x28>
 800955c:	6833      	ldr	r3, [r6, #0]
 800955e:	b30b      	cbz	r3, 80095a4 <__sfp+0x68>
 8009560:	6836      	ldr	r6, [r6, #0]
 8009562:	e7f7      	b.n	8009554 <__sfp+0x18>
 8009564:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009568:	b9d5      	cbnz	r5, 80095a0 <__sfp+0x64>
 800956a:	4b16      	ldr	r3, [pc, #88]	; (80095c4 <__sfp+0x88>)
 800956c:	60e3      	str	r3, [r4, #12]
 800956e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009572:	6665      	str	r5, [r4, #100]	; 0x64
 8009574:	f000 f847 	bl	8009606 <__retarget_lock_init_recursive>
 8009578:	f7ff ff96 	bl	80094a8 <__sfp_lock_release>
 800957c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009580:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009584:	6025      	str	r5, [r4, #0]
 8009586:	61a5      	str	r5, [r4, #24]
 8009588:	2208      	movs	r2, #8
 800958a:	4629      	mov	r1, r5
 800958c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009590:	f7ff f93e 	bl	8008810 <memset>
 8009594:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009598:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800959c:	4620      	mov	r0, r4
 800959e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095a0:	3468      	adds	r4, #104	; 0x68
 80095a2:	e7d9      	b.n	8009558 <__sfp+0x1c>
 80095a4:	2104      	movs	r1, #4
 80095a6:	4638      	mov	r0, r7
 80095a8:	f7ff ff62 	bl	8009470 <__sfmoreglue>
 80095ac:	4604      	mov	r4, r0
 80095ae:	6030      	str	r0, [r6, #0]
 80095b0:	2800      	cmp	r0, #0
 80095b2:	d1d5      	bne.n	8009560 <__sfp+0x24>
 80095b4:	f7ff ff78 	bl	80094a8 <__sfp_lock_release>
 80095b8:	230c      	movs	r3, #12
 80095ba:	603b      	str	r3, [r7, #0]
 80095bc:	e7ee      	b.n	800959c <__sfp+0x60>
 80095be:	bf00      	nop
 80095c0:	080099e4 	.word	0x080099e4
 80095c4:	ffff0001 	.word	0xffff0001

080095c8 <_fwalk_reent>:
 80095c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095cc:	4606      	mov	r6, r0
 80095ce:	4688      	mov	r8, r1
 80095d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80095d4:	2700      	movs	r7, #0
 80095d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80095da:	f1b9 0901 	subs.w	r9, r9, #1
 80095de:	d505      	bpl.n	80095ec <_fwalk_reent+0x24>
 80095e0:	6824      	ldr	r4, [r4, #0]
 80095e2:	2c00      	cmp	r4, #0
 80095e4:	d1f7      	bne.n	80095d6 <_fwalk_reent+0xe>
 80095e6:	4638      	mov	r0, r7
 80095e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095ec:	89ab      	ldrh	r3, [r5, #12]
 80095ee:	2b01      	cmp	r3, #1
 80095f0:	d907      	bls.n	8009602 <_fwalk_reent+0x3a>
 80095f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80095f6:	3301      	adds	r3, #1
 80095f8:	d003      	beq.n	8009602 <_fwalk_reent+0x3a>
 80095fa:	4629      	mov	r1, r5
 80095fc:	4630      	mov	r0, r6
 80095fe:	47c0      	blx	r8
 8009600:	4307      	orrs	r7, r0
 8009602:	3568      	adds	r5, #104	; 0x68
 8009604:	e7e9      	b.n	80095da <_fwalk_reent+0x12>

08009606 <__retarget_lock_init_recursive>:
 8009606:	4770      	bx	lr

08009608 <__retarget_lock_acquire_recursive>:
 8009608:	4770      	bx	lr

0800960a <__retarget_lock_release_recursive>:
 800960a:	4770      	bx	lr

0800960c <__swhatbuf_r>:
 800960c:	b570      	push	{r4, r5, r6, lr}
 800960e:	460e      	mov	r6, r1
 8009610:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009614:	2900      	cmp	r1, #0
 8009616:	b096      	sub	sp, #88	; 0x58
 8009618:	4614      	mov	r4, r2
 800961a:	461d      	mov	r5, r3
 800961c:	da08      	bge.n	8009630 <__swhatbuf_r+0x24>
 800961e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009622:	2200      	movs	r2, #0
 8009624:	602a      	str	r2, [r5, #0]
 8009626:	061a      	lsls	r2, r3, #24
 8009628:	d410      	bmi.n	800964c <__swhatbuf_r+0x40>
 800962a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800962e:	e00e      	b.n	800964e <__swhatbuf_r+0x42>
 8009630:	466a      	mov	r2, sp
 8009632:	f000 f8fb 	bl	800982c <_fstat_r>
 8009636:	2800      	cmp	r0, #0
 8009638:	dbf1      	blt.n	800961e <__swhatbuf_r+0x12>
 800963a:	9a01      	ldr	r2, [sp, #4]
 800963c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009640:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009644:	425a      	negs	r2, r3
 8009646:	415a      	adcs	r2, r3
 8009648:	602a      	str	r2, [r5, #0]
 800964a:	e7ee      	b.n	800962a <__swhatbuf_r+0x1e>
 800964c:	2340      	movs	r3, #64	; 0x40
 800964e:	2000      	movs	r0, #0
 8009650:	6023      	str	r3, [r4, #0]
 8009652:	b016      	add	sp, #88	; 0x58
 8009654:	bd70      	pop	{r4, r5, r6, pc}
	...

08009658 <__smakebuf_r>:
 8009658:	898b      	ldrh	r3, [r1, #12]
 800965a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800965c:	079d      	lsls	r5, r3, #30
 800965e:	4606      	mov	r6, r0
 8009660:	460c      	mov	r4, r1
 8009662:	d507      	bpl.n	8009674 <__smakebuf_r+0x1c>
 8009664:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009668:	6023      	str	r3, [r4, #0]
 800966a:	6123      	str	r3, [r4, #16]
 800966c:	2301      	movs	r3, #1
 800966e:	6163      	str	r3, [r4, #20]
 8009670:	b002      	add	sp, #8
 8009672:	bd70      	pop	{r4, r5, r6, pc}
 8009674:	ab01      	add	r3, sp, #4
 8009676:	466a      	mov	r2, sp
 8009678:	f7ff ffc8 	bl	800960c <__swhatbuf_r>
 800967c:	9900      	ldr	r1, [sp, #0]
 800967e:	4605      	mov	r5, r0
 8009680:	4630      	mov	r0, r6
 8009682:	f7ff f939 	bl	80088f8 <_malloc_r>
 8009686:	b948      	cbnz	r0, 800969c <__smakebuf_r+0x44>
 8009688:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800968c:	059a      	lsls	r2, r3, #22
 800968e:	d4ef      	bmi.n	8009670 <__smakebuf_r+0x18>
 8009690:	f023 0303 	bic.w	r3, r3, #3
 8009694:	f043 0302 	orr.w	r3, r3, #2
 8009698:	81a3      	strh	r3, [r4, #12]
 800969a:	e7e3      	b.n	8009664 <__smakebuf_r+0xc>
 800969c:	4b0d      	ldr	r3, [pc, #52]	; (80096d4 <__smakebuf_r+0x7c>)
 800969e:	62b3      	str	r3, [r6, #40]	; 0x28
 80096a0:	89a3      	ldrh	r3, [r4, #12]
 80096a2:	6020      	str	r0, [r4, #0]
 80096a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096a8:	81a3      	strh	r3, [r4, #12]
 80096aa:	9b00      	ldr	r3, [sp, #0]
 80096ac:	6163      	str	r3, [r4, #20]
 80096ae:	9b01      	ldr	r3, [sp, #4]
 80096b0:	6120      	str	r0, [r4, #16]
 80096b2:	b15b      	cbz	r3, 80096cc <__smakebuf_r+0x74>
 80096b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80096b8:	4630      	mov	r0, r6
 80096ba:	f000 f8c9 	bl	8009850 <_isatty_r>
 80096be:	b128      	cbz	r0, 80096cc <__smakebuf_r+0x74>
 80096c0:	89a3      	ldrh	r3, [r4, #12]
 80096c2:	f023 0303 	bic.w	r3, r3, #3
 80096c6:	f043 0301 	orr.w	r3, r3, #1
 80096ca:	81a3      	strh	r3, [r4, #12]
 80096cc:	89a0      	ldrh	r0, [r4, #12]
 80096ce:	4305      	orrs	r5, r0
 80096d0:	81a5      	strh	r5, [r4, #12]
 80096d2:	e7cd      	b.n	8009670 <__smakebuf_r+0x18>
 80096d4:	08009465 	.word	0x08009465

080096d8 <_raise_r>:
 80096d8:	291f      	cmp	r1, #31
 80096da:	b538      	push	{r3, r4, r5, lr}
 80096dc:	4604      	mov	r4, r0
 80096de:	460d      	mov	r5, r1
 80096e0:	d904      	bls.n	80096ec <_raise_r+0x14>
 80096e2:	2316      	movs	r3, #22
 80096e4:	6003      	str	r3, [r0, #0]
 80096e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80096ea:	bd38      	pop	{r3, r4, r5, pc}
 80096ec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80096ee:	b112      	cbz	r2, 80096f6 <_raise_r+0x1e>
 80096f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80096f4:	b94b      	cbnz	r3, 800970a <_raise_r+0x32>
 80096f6:	4620      	mov	r0, r4
 80096f8:	f000 f830 	bl	800975c <_getpid_r>
 80096fc:	462a      	mov	r2, r5
 80096fe:	4601      	mov	r1, r0
 8009700:	4620      	mov	r0, r4
 8009702:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009706:	f000 b817 	b.w	8009738 <_kill_r>
 800970a:	2b01      	cmp	r3, #1
 800970c:	d00a      	beq.n	8009724 <_raise_r+0x4c>
 800970e:	1c59      	adds	r1, r3, #1
 8009710:	d103      	bne.n	800971a <_raise_r+0x42>
 8009712:	2316      	movs	r3, #22
 8009714:	6003      	str	r3, [r0, #0]
 8009716:	2001      	movs	r0, #1
 8009718:	e7e7      	b.n	80096ea <_raise_r+0x12>
 800971a:	2400      	movs	r4, #0
 800971c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009720:	4628      	mov	r0, r5
 8009722:	4798      	blx	r3
 8009724:	2000      	movs	r0, #0
 8009726:	e7e0      	b.n	80096ea <_raise_r+0x12>

08009728 <raise>:
 8009728:	4b02      	ldr	r3, [pc, #8]	; (8009734 <raise+0xc>)
 800972a:	4601      	mov	r1, r0
 800972c:	6818      	ldr	r0, [r3, #0]
 800972e:	f7ff bfd3 	b.w	80096d8 <_raise_r>
 8009732:	bf00      	nop
 8009734:	200000a4 	.word	0x200000a4

08009738 <_kill_r>:
 8009738:	b538      	push	{r3, r4, r5, lr}
 800973a:	4d07      	ldr	r5, [pc, #28]	; (8009758 <_kill_r+0x20>)
 800973c:	2300      	movs	r3, #0
 800973e:	4604      	mov	r4, r0
 8009740:	4608      	mov	r0, r1
 8009742:	4611      	mov	r1, r2
 8009744:	602b      	str	r3, [r5, #0]
 8009746:	f7fe ff29 	bl	800859c <_kill>
 800974a:	1c43      	adds	r3, r0, #1
 800974c:	d102      	bne.n	8009754 <_kill_r+0x1c>
 800974e:	682b      	ldr	r3, [r5, #0]
 8009750:	b103      	cbz	r3, 8009754 <_kill_r+0x1c>
 8009752:	6023      	str	r3, [r4, #0]
 8009754:	bd38      	pop	{r3, r4, r5, pc}
 8009756:	bf00      	nop
 8009758:	20003400 	.word	0x20003400

0800975c <_getpid_r>:
 800975c:	f7fe bf16 	b.w	800858c <_getpid>

08009760 <__sread>:
 8009760:	b510      	push	{r4, lr}
 8009762:	460c      	mov	r4, r1
 8009764:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009768:	f000 f894 	bl	8009894 <_read_r>
 800976c:	2800      	cmp	r0, #0
 800976e:	bfab      	itete	ge
 8009770:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009772:	89a3      	ldrhlt	r3, [r4, #12]
 8009774:	181b      	addge	r3, r3, r0
 8009776:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800977a:	bfac      	ite	ge
 800977c:	6563      	strge	r3, [r4, #84]	; 0x54
 800977e:	81a3      	strhlt	r3, [r4, #12]
 8009780:	bd10      	pop	{r4, pc}

08009782 <__swrite>:
 8009782:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009786:	461f      	mov	r7, r3
 8009788:	898b      	ldrh	r3, [r1, #12]
 800978a:	05db      	lsls	r3, r3, #23
 800978c:	4605      	mov	r5, r0
 800978e:	460c      	mov	r4, r1
 8009790:	4616      	mov	r6, r2
 8009792:	d505      	bpl.n	80097a0 <__swrite+0x1e>
 8009794:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009798:	2302      	movs	r3, #2
 800979a:	2200      	movs	r2, #0
 800979c:	f000 f868 	bl	8009870 <_lseek_r>
 80097a0:	89a3      	ldrh	r3, [r4, #12]
 80097a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80097a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80097aa:	81a3      	strh	r3, [r4, #12]
 80097ac:	4632      	mov	r2, r6
 80097ae:	463b      	mov	r3, r7
 80097b0:	4628      	mov	r0, r5
 80097b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80097b6:	f000 b817 	b.w	80097e8 <_write_r>

080097ba <__sseek>:
 80097ba:	b510      	push	{r4, lr}
 80097bc:	460c      	mov	r4, r1
 80097be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097c2:	f000 f855 	bl	8009870 <_lseek_r>
 80097c6:	1c43      	adds	r3, r0, #1
 80097c8:	89a3      	ldrh	r3, [r4, #12]
 80097ca:	bf15      	itete	ne
 80097cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80097ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80097d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80097d6:	81a3      	strheq	r3, [r4, #12]
 80097d8:	bf18      	it	ne
 80097da:	81a3      	strhne	r3, [r4, #12]
 80097dc:	bd10      	pop	{r4, pc}

080097de <__sclose>:
 80097de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097e2:	f000 b813 	b.w	800980c <_close_r>
	...

080097e8 <_write_r>:
 80097e8:	b538      	push	{r3, r4, r5, lr}
 80097ea:	4d07      	ldr	r5, [pc, #28]	; (8009808 <_write_r+0x20>)
 80097ec:	4604      	mov	r4, r0
 80097ee:	4608      	mov	r0, r1
 80097f0:	4611      	mov	r1, r2
 80097f2:	2200      	movs	r2, #0
 80097f4:	602a      	str	r2, [r5, #0]
 80097f6:	461a      	mov	r2, r3
 80097f8:	f7fe ff07 	bl	800860a <_write>
 80097fc:	1c43      	adds	r3, r0, #1
 80097fe:	d102      	bne.n	8009806 <_write_r+0x1e>
 8009800:	682b      	ldr	r3, [r5, #0]
 8009802:	b103      	cbz	r3, 8009806 <_write_r+0x1e>
 8009804:	6023      	str	r3, [r4, #0]
 8009806:	bd38      	pop	{r3, r4, r5, pc}
 8009808:	20003400 	.word	0x20003400

0800980c <_close_r>:
 800980c:	b538      	push	{r3, r4, r5, lr}
 800980e:	4d06      	ldr	r5, [pc, #24]	; (8009828 <_close_r+0x1c>)
 8009810:	2300      	movs	r3, #0
 8009812:	4604      	mov	r4, r0
 8009814:	4608      	mov	r0, r1
 8009816:	602b      	str	r3, [r5, #0]
 8009818:	f7fe ff13 	bl	8008642 <_close>
 800981c:	1c43      	adds	r3, r0, #1
 800981e:	d102      	bne.n	8009826 <_close_r+0x1a>
 8009820:	682b      	ldr	r3, [r5, #0]
 8009822:	b103      	cbz	r3, 8009826 <_close_r+0x1a>
 8009824:	6023      	str	r3, [r4, #0]
 8009826:	bd38      	pop	{r3, r4, r5, pc}
 8009828:	20003400 	.word	0x20003400

0800982c <_fstat_r>:
 800982c:	b538      	push	{r3, r4, r5, lr}
 800982e:	4d07      	ldr	r5, [pc, #28]	; (800984c <_fstat_r+0x20>)
 8009830:	2300      	movs	r3, #0
 8009832:	4604      	mov	r4, r0
 8009834:	4608      	mov	r0, r1
 8009836:	4611      	mov	r1, r2
 8009838:	602b      	str	r3, [r5, #0]
 800983a:	f7fe ff0e 	bl	800865a <_fstat>
 800983e:	1c43      	adds	r3, r0, #1
 8009840:	d102      	bne.n	8009848 <_fstat_r+0x1c>
 8009842:	682b      	ldr	r3, [r5, #0]
 8009844:	b103      	cbz	r3, 8009848 <_fstat_r+0x1c>
 8009846:	6023      	str	r3, [r4, #0]
 8009848:	bd38      	pop	{r3, r4, r5, pc}
 800984a:	bf00      	nop
 800984c:	20003400 	.word	0x20003400

08009850 <_isatty_r>:
 8009850:	b538      	push	{r3, r4, r5, lr}
 8009852:	4d06      	ldr	r5, [pc, #24]	; (800986c <_isatty_r+0x1c>)
 8009854:	2300      	movs	r3, #0
 8009856:	4604      	mov	r4, r0
 8009858:	4608      	mov	r0, r1
 800985a:	602b      	str	r3, [r5, #0]
 800985c:	f7fe ff0d 	bl	800867a <_isatty>
 8009860:	1c43      	adds	r3, r0, #1
 8009862:	d102      	bne.n	800986a <_isatty_r+0x1a>
 8009864:	682b      	ldr	r3, [r5, #0]
 8009866:	b103      	cbz	r3, 800986a <_isatty_r+0x1a>
 8009868:	6023      	str	r3, [r4, #0]
 800986a:	bd38      	pop	{r3, r4, r5, pc}
 800986c:	20003400 	.word	0x20003400

08009870 <_lseek_r>:
 8009870:	b538      	push	{r3, r4, r5, lr}
 8009872:	4d07      	ldr	r5, [pc, #28]	; (8009890 <_lseek_r+0x20>)
 8009874:	4604      	mov	r4, r0
 8009876:	4608      	mov	r0, r1
 8009878:	4611      	mov	r1, r2
 800987a:	2200      	movs	r2, #0
 800987c:	602a      	str	r2, [r5, #0]
 800987e:	461a      	mov	r2, r3
 8009880:	f7fe ff06 	bl	8008690 <_lseek>
 8009884:	1c43      	adds	r3, r0, #1
 8009886:	d102      	bne.n	800988e <_lseek_r+0x1e>
 8009888:	682b      	ldr	r3, [r5, #0]
 800988a:	b103      	cbz	r3, 800988e <_lseek_r+0x1e>
 800988c:	6023      	str	r3, [r4, #0]
 800988e:	bd38      	pop	{r3, r4, r5, pc}
 8009890:	20003400 	.word	0x20003400

08009894 <_read_r>:
 8009894:	b538      	push	{r3, r4, r5, lr}
 8009896:	4d07      	ldr	r5, [pc, #28]	; (80098b4 <_read_r+0x20>)
 8009898:	4604      	mov	r4, r0
 800989a:	4608      	mov	r0, r1
 800989c:	4611      	mov	r1, r2
 800989e:	2200      	movs	r2, #0
 80098a0:	602a      	str	r2, [r5, #0]
 80098a2:	461a      	mov	r2, r3
 80098a4:	f7fe fe94 	bl	80085d0 <_read>
 80098a8:	1c43      	adds	r3, r0, #1
 80098aa:	d102      	bne.n	80098b2 <_read_r+0x1e>
 80098ac:	682b      	ldr	r3, [r5, #0]
 80098ae:	b103      	cbz	r3, 80098b2 <_read_r+0x1e>
 80098b0:	6023      	str	r3, [r4, #0]
 80098b2:	bd38      	pop	{r3, r4, r5, pc}
 80098b4:	20003400 	.word	0x20003400

080098b8 <_gettimeofday>:
 80098b8:	4b02      	ldr	r3, [pc, #8]	; (80098c4 <_gettimeofday+0xc>)
 80098ba:	2258      	movs	r2, #88	; 0x58
 80098bc:	601a      	str	r2, [r3, #0]
 80098be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80098c2:	4770      	bx	lr
 80098c4:	20003400 	.word	0x20003400

080098c8 <_init>:
 80098c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098ca:	bf00      	nop
 80098cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098ce:	bc08      	pop	{r3}
 80098d0:	469e      	mov	lr, r3
 80098d2:	4770      	bx	lr

080098d4 <_fini>:
 80098d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098d6:	bf00      	nop
 80098d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098da:	bc08      	pop	{r3}
 80098dc:	469e      	mov	lr, r3
 80098de:	4770      	bx	lr
