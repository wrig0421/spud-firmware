
small_led_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071e8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08007378  08007378  00017378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074a0  080074a0  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  080074a0  080074a0  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080074a0  080074a0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074a0  080074a0  000174a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080074a4  080074a4  000174a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080074a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002b40  20000078  08007520  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002bb8  08007520  00022bb8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000215fb  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000410d  00000000  00000000  000416a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018a8  00000000  00000000  000457b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016f0  00000000  00000000  00047058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000254b1  00000000  00000000  00048748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e4bd  00000000  00000000  0006dbf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd191  00000000  00000000  0008c0b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00169247  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a14  00000000  00000000  0016929c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007360 	.word	0x08007360

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08007360 	.word	0x08007360

080001d0 <delay>:

}


static void delay(uint32_t time)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b082      	sub	sp, #8
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
	osDelay(time);
 80001d8:	6878      	ldr	r0, [r7, #4]
 80001da:	f000 fbff 	bl	80009dc <osDelay>
}
 80001de:	bf00      	nop
 80001e0:	3708      	adds	r7, #8
 80001e2:	46bd      	mov	sp, r7
 80001e4:	bd80      	pop	{r7, pc}

080001e6 <animate_led_show_strip>:
	return g_led_state;
}


void animate_led_show_strip(const strip_mask_t strip_mask)
{
 80001e6:	b580      	push	{r7, lr}
 80001e8:	b082      	sub	sp, #8
 80001ea:	af00      	add	r7, sp, #0
 80001ec:	4603      	mov	r3, r0
 80001ee:	80fb      	strh	r3, [r7, #6]
	ws2812b_show(strip_mask);
 80001f0:	88fb      	ldrh	r3, [r7, #6]
 80001f2:	4618      	mov	r0, r3
 80001f4:	f000 fab0 	bl	8000758 <ws2812b_show>
}
 80001f8:	bf00      	nop
 80001fa:	3708      	adds	r7, #8
 80001fc:	46bd      	mov	sp, r7
 80001fe:	bd80      	pop	{r7, pc}

08000200 <animate_led_only_spell_word>:
	}
}


void animate_led_only_spell_word(strip_mask_t strip_mask, color_hex_code_e color, uint16_t speed_delay)
{
 8000200:	b590      	push	{r4, r7, lr}
 8000202:	b089      	sub	sp, #36	; 0x24
 8000204:	af02      	add	r7, sp, #8
 8000206:	4603      	mov	r3, r0
 8000208:	6039      	str	r1, [r7, #0]
 800020a:	80fb      	strh	r3, [r7, #6]
 800020c:	4613      	mov	r3, r2
 800020e:	80bb      	strh	r3, [r7, #4]
	uint16_t strip_size = ws2812_led_get_max_strip_size(strip_mask);
 8000210:	88fb      	ldrh	r3, [r7, #6]
 8000212:	4618      	mov	r0, r3
 8000214:	f000 f8e6 	bl	80003e4 <ws2812_led_get_max_strip_size>
 8000218:	4603      	mov	r3, r0
 800021a:	827b      	strh	r3, [r7, #18]
	uint8_t red, green, blue; 
	red = ((color & 0xFF0000) >> 16);
 800021c:	683b      	ldr	r3, [r7, #0]
 800021e:	0c1b      	lsrs	r3, r3, #16
 8000220:	747b      	strb	r3, [r7, #17]
	green = ((color & 0x00FF00) >> 8);
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	0a1b      	lsrs	r3, r3, #8
 8000226:	743b      	strb	r3, [r7, #16]
	blue = (color & 0x0000FF);
 8000228:	683b      	ldr	r3, [r7, #0]
 800022a:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < strip_size; i++)
 800022c:	2300      	movs	r3, #0
 800022e:	617b      	str	r3, [r7, #20]
 8000230:	e014      	b.n	800025c <animate_led_only_spell_word+0x5c>
        {
        	animate_led_set_all_pixels((strip_mask_t)STRIP_BIT_ALL_SET, 0, 0, 0);
			return;
        }
        */
		animate_led_set_pixel(strip_mask, i, red, green, blue);
 8000232:	697b      	ldr	r3, [r7, #20]
 8000234:	b299      	uxth	r1, r3
 8000236:	7c3c      	ldrb	r4, [r7, #16]
 8000238:	7c7a      	ldrb	r2, [r7, #17]
 800023a:	88f8      	ldrh	r0, [r7, #6]
 800023c:	7bfb      	ldrb	r3, [r7, #15]
 800023e:	9300      	str	r3, [sp, #0]
 8000240:	4623      	mov	r3, r4
 8000242:	f000 f814 	bl	800026e <animate_led_set_pixel>
		animate_led_show_strip(strip_mask);
 8000246:	88fb      	ldrh	r3, [r7, #6]
 8000248:	4618      	mov	r0, r3
 800024a:	f7ff ffcc 	bl	80001e6 <animate_led_show_strip>
        delay(speed_delay);
 800024e:	88bb      	ldrh	r3, [r7, #4]
 8000250:	4618      	mov	r0, r3
 8000252:	f7ff ffbd 	bl	80001d0 <delay>
	for (int i = 0; i < strip_size; i++)
 8000256:	697b      	ldr	r3, [r7, #20]
 8000258:	3301      	adds	r3, #1
 800025a:	617b      	str	r3, [r7, #20]
 800025c:	8a7b      	ldrh	r3, [r7, #18]
 800025e:	697a      	ldr	r2, [r7, #20]
 8000260:	429a      	cmp	r2, r3
 8000262:	dbe6      	blt.n	8000232 <animate_led_only_spell_word+0x32>
	}
}
 8000264:	bf00      	nop
 8000266:	bf00      	nop
 8000268:	371c      	adds	r7, #28
 800026a:	46bd      	mov	sp, r7
 800026c:	bd90      	pop	{r4, r7, pc}

0800026e <animate_led_set_pixel>:
	}
}


void animate_led_set_pixel(strip_mask_t strip_mask, uint16_t pixel, uint8_t red, uint8_t green, uint8_t blue)
{
 800026e:	b590      	push	{r4, r7, lr}
 8000270:	b087      	sub	sp, #28
 8000272:	af02      	add	r7, sp, #8
 8000274:	4604      	mov	r4, r0
 8000276:	4608      	mov	r0, r1
 8000278:	4611      	mov	r1, r2
 800027a:	461a      	mov	r2, r3
 800027c:	4623      	mov	r3, r4
 800027e:	80fb      	strh	r3, [r7, #6]
 8000280:	4603      	mov	r3, r0
 8000282:	80bb      	strh	r3, [r7, #4]
 8000284:	460b      	mov	r3, r1
 8000286:	70fb      	strb	r3, [r7, #3]
 8000288:	4613      	mov	r3, r2
 800028a:	70bb      	strb	r3, [r7, #2]
	uint8_t adj_red = red / COLOR_LED_MAX_BRIGHTNESS_DIVISOR;
 800028c:	78fb      	ldrb	r3, [r7, #3]
 800028e:	737b      	strb	r3, [r7, #13]
	uint8_t adj_green = green / COLOR_LED_MAX_BRIGHTNESS_DIVISOR;
 8000290:	78bb      	ldrb	r3, [r7, #2]
 8000292:	733b      	strb	r3, [r7, #12]
	uint8_t adj_blue = blue / COLOR_LED_MAX_BRIGHTNESS_DIVISOR;
 8000294:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000298:	72fb      	strb	r3, [r7, #11]
	if (STRIP_BIT_ALL_SET == strip_mask)
 800029a:	88fb      	ldrh	r3, [r7, #6]
 800029c:	2b01      	cmp	r3, #1
 800029e:	d11b      	bne.n	80002d8 <animate_led_set_pixel+0x6a>
	{
		for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 80002a0:	2301      	movs	r3, #1
 80002a2:	73fb      	strb	r3, [r7, #15]
 80002a4:	e014      	b.n	80002d0 <animate_led_set_pixel+0x62>
		{
			//offset = animate_led_get_strip_offset(strip_bit);
			if (ws2812_pixel_is_in_strip_range(strip_bit, pixel)) ws2812b_set_led(strip_bit, pixel, adj_red, adj_green, adj_blue);
 80002a6:	88ba      	ldrh	r2, [r7, #4]
 80002a8:	7bfb      	ldrb	r3, [r7, #15]
 80002aa:	4611      	mov	r1, r2
 80002ac:	4618      	mov	r0, r3
 80002ae:	f000 f8bb 	bl	8000428 <ws2812_pixel_is_in_strip_range>
 80002b2:	4603      	mov	r3, r0
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d008      	beq.n	80002ca <animate_led_set_pixel+0x5c>
 80002b8:	7b3c      	ldrb	r4, [r7, #12]
 80002ba:	7b7a      	ldrb	r2, [r7, #13]
 80002bc:	88b9      	ldrh	r1, [r7, #4]
 80002be:	7bf8      	ldrb	r0, [r7, #15]
 80002c0:	7afb      	ldrb	r3, [r7, #11]
 80002c2:	9300      	str	r3, [sp, #0]
 80002c4:	4623      	mov	r3, r4
 80002c6:	f000 f8c9 	bl	800045c <ws2812b_set_led>
		for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 80002ca:	7bfb      	ldrb	r3, [r7, #15]
 80002cc:	3301      	adds	r3, #1
 80002ce:	73fb      	strb	r3, [r7, #15]
 80002d0:	7bfb      	ldrb	r3, [r7, #15]
 80002d2:	2b01      	cmp	r3, #1
 80002d4:	d9e7      	bls.n	80002a6 <animate_led_set_pixel+0x38>
				if (ws2812_pixel_is_in_strip_range(strip_bit, pixel)) ws2812b_set_led(strip_bit, pixel, adj_red, adj_green, adj_blue);
			}
		}
	}
	//animate_led_show_strip();
}
 80002d6:	e01f      	b.n	8000318 <animate_led_set_pixel+0xaa>
		for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 80002d8:	2301      	movs	r3, #1
 80002da:	73bb      	strb	r3, [r7, #14]
 80002dc:	e019      	b.n	8000312 <animate_led_set_pixel+0xa4>
			if (strip_mask & strip_bit)
 80002de:	88fa      	ldrh	r2, [r7, #6]
 80002e0:	7bbb      	ldrb	r3, [r7, #14]
 80002e2:	4013      	ands	r3, r2
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d011      	beq.n	800030c <animate_led_set_pixel+0x9e>
				if (ws2812_pixel_is_in_strip_range(strip_bit, pixel)) ws2812b_set_led(strip_bit, pixel, adj_red, adj_green, adj_blue);
 80002e8:	88ba      	ldrh	r2, [r7, #4]
 80002ea:	7bbb      	ldrb	r3, [r7, #14]
 80002ec:	4611      	mov	r1, r2
 80002ee:	4618      	mov	r0, r3
 80002f0:	f000 f89a 	bl	8000428 <ws2812_pixel_is_in_strip_range>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d008      	beq.n	800030c <animate_led_set_pixel+0x9e>
 80002fa:	7b3c      	ldrb	r4, [r7, #12]
 80002fc:	7b7a      	ldrb	r2, [r7, #13]
 80002fe:	88b9      	ldrh	r1, [r7, #4]
 8000300:	7bb8      	ldrb	r0, [r7, #14]
 8000302:	7afb      	ldrb	r3, [r7, #11]
 8000304:	9300      	str	r3, [sp, #0]
 8000306:	4623      	mov	r3, r4
 8000308:	f000 f8a8 	bl	800045c <ws2812b_set_led>
		for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 800030c:	7bbb      	ldrb	r3, [r7, #14]
 800030e:	3301      	adds	r3, #1
 8000310:	73bb      	strb	r3, [r7, #14]
 8000312:	7bbb      	ldrb	r3, [r7, #14]
 8000314:	2b01      	cmp	r3, #1
 8000316:	d9e2      	bls.n	80002de <animate_led_set_pixel+0x70>
}
 8000318:	bf00      	nop
 800031a:	3714      	adds	r7, #20
 800031c:	46bd      	mov	sp, r7
 800031e:	bd90      	pop	{r4, r7, pc}

08000320 <task_animate_led>:
    animate_led_show_strip(strip_mask);
}


void task_animate_led(void *argument)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b084      	sub	sp, #16
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
	color_hex_code_e color = COLOR_HEX_RED;
 8000328:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 800032c:	60fb      	str	r3, [r7, #12]
	while (1)
	{
		animate_led_only_spell_word(STRIP_BIT_1, color, 0);
 800032e:	2200      	movs	r2, #0
 8000330:	68f9      	ldr	r1, [r7, #12]
 8000332:	2001      	movs	r0, #1
 8000334:	f7ff ff64 	bl	8000200 <animate_led_only_spell_word>
		ws2812b_show(1);
 8000338:	2001      	movs	r0, #1
 800033a:	f000 fa0d 	bl	8000758 <ws2812b_show>
		color = COLOR_HEX_RED;
 800033e:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8000342:	60fb      	str	r3, [r7, #12]
		animate_led_only_spell_word(STRIP_BIT_1, color, 0);
 8000344:	2200      	movs	r2, #0
 8000346:	68f9      	ldr	r1, [r7, #12]
 8000348:	2001      	movs	r0, #1
 800034a:	f7ff ff59 	bl	8000200 <animate_led_only_spell_word>
		ws2812b_show(1);
 800034e:	2001      	movs	r0, #1
 8000350:	f000 fa02 	bl	8000758 <ws2812b_show>
		color = COLOR_HEX_YELLOW;
 8000354:	4b03      	ldr	r3, [pc, #12]	; (8000364 <task_animate_led+0x44>)
 8000356:	60fb      	str	r3, [r7, #12]
		osDelay(1000);
 8000358:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800035c:	f000 fb3e 	bl	80009dc <osDelay>
		animate_led_only_spell_word(STRIP_BIT_1, color, 0);
 8000360:	e7e5      	b.n	800032e <task_animate_led+0xe>
 8000362:	bf00      	nop
 8000364:	00ffff00 	.word	0x00ffff00

08000368 <ws2812_convert_strip_num_to_strip_bit>:
extern TIM_HandleTypeDef htim1;
extern TIM_HandleTypeDef htim2;
extern volatile int datasentflag;

static strip_bit_e ws2812_convert_strip_num_to_strip_bit(strip_num_e strip_num)
{
 8000368:	b480      	push	{r7}
 800036a:	b083      	sub	sp, #12
 800036c:	af00      	add	r7, sp, #0
 800036e:	4603      	mov	r3, r0
 8000370:	71fb      	strb	r3, [r7, #7]
	return (strip_bit_e)(strip_num + 1);
 8000372:	79fb      	ldrb	r3, [r7, #7]
 8000374:	3301      	adds	r3, #1
 8000376:	b2db      	uxtb	r3, r3
}
 8000378:	4618      	mov	r0, r3
 800037a:	370c      	adds	r7, #12
 800037c:	46bd      	mov	sp, r7
 800037e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000382:	4770      	bx	lr

08000384 <ws2812_convert_strip_bit_to_strip_num>:


static strip_num_e ws2812_convert_strip_bit_to_strip_num(strip_bit_e strip_bit)
{
 8000384:	b480      	push	{r7}
 8000386:	b083      	sub	sp, #12
 8000388:	af00      	add	r7, sp, #0
 800038a:	4603      	mov	r3, r0
 800038c:	71fb      	strb	r3, [r7, #7]
	return (strip_num_e)(strip_bit - 1);
 800038e:	79fb      	ldrb	r3, [r7, #7]
 8000390:	3b01      	subs	r3, #1
 8000392:	b2db      	uxtb	r3, r3
}
 8000394:	4618      	mov	r0, r3
 8000396:	370c      	adds	r7, #12
 8000398:	46bd      	mov	sp, r7
 800039a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039e:	4770      	bx	lr

080003a0 <ws2812_get_strip_size>:

uint16_t ws2812_get_strip_size(const strip_bit_e strip_bit)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b084      	sub	sp, #16
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	4603      	mov	r3, r0
 80003a8:	71fb      	strb	r3, [r7, #7]
	uint16_t strip_size = 0;
 80003aa:	2300      	movs	r3, #0
 80003ac:	81fb      	strh	r3, [r7, #14]
	if (STRIP_BIT_ALL_SET == strip_bit) strip_size = g_max_strip_length;
 80003ae:	79fb      	ldrb	r3, [r7, #7]
 80003b0:	2b01      	cmp	r3, #1
 80003b2:	d103      	bne.n	80003bc <ws2812_get_strip_size+0x1c>
 80003b4:	4b09      	ldr	r3, [pc, #36]	; (80003dc <ws2812_get_strip_size+0x3c>)
 80003b6:	881b      	ldrh	r3, [r3, #0]
 80003b8:	81fb      	strh	r3, [r7, #14]
 80003ba:	e009      	b.n	80003d0 <ws2812_get_strip_size+0x30>
	else strip_size = strip_length[ws2812_convert_strip_num_to_strip_bit(strip_bit)];
 80003bc:	79fb      	ldrb	r3, [r7, #7]
 80003be:	4618      	mov	r0, r3
 80003c0:	f7ff ffd2 	bl	8000368 <ws2812_convert_strip_num_to_strip_bit>
 80003c4:	4603      	mov	r3, r0
 80003c6:	461a      	mov	r2, r3
 80003c8:	4b05      	ldr	r3, [pc, #20]	; (80003e0 <ws2812_get_strip_size+0x40>)
 80003ca:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80003ce:	81fb      	strh	r3, [r7, #14]
	return strip_size;
 80003d0:	89fb      	ldrh	r3, [r7, #14]
}
 80003d2:	4618      	mov	r0, r3
 80003d4:	3710      	adds	r7, #16
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	20000098 	.word	0x20000098
 80003e0:	20000000 	.word	0x20000000

080003e4 <ws2812_led_get_max_strip_size>:
	return strip_size;
}


uint16_t ws2812_led_get_max_strip_size(const strip_mask_t strip_mask)
{
 80003e4:	b480      	push	{r7}
 80003e6:	b085      	sub	sp, #20
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	4603      	mov	r3, r0
 80003ec:	80fb      	strh	r3, [r7, #6]
	uint16_t strip_size = 0;
 80003ee:	2300      	movs	r3, #0
 80003f0:	81fb      	strh	r3, [r7, #14]
	if (STRIP_BIT_ALL_SET == strip_mask) strip_size = g_max_strip_length;
 80003f2:	88fb      	ldrh	r3, [r7, #6]
 80003f4:	2b01      	cmp	r3, #1
 80003f6:	d103      	bne.n	8000400 <ws2812_led_get_max_strip_size+0x1c>
 80003f8:	4b0a      	ldr	r3, [pc, #40]	; (8000424 <ws2812_led_get_max_strip_size+0x40>)
 80003fa:	881b      	ldrh	r3, [r3, #0]
 80003fc:	81fb      	strh	r3, [r7, #14]
 80003fe:	e00a      	b.n	8000416 <ws2812_led_get_max_strip_size+0x32>
	else
	{
#if defined(STRIP_1_LENGTH)
		if ((STRIP_BIT_1 & strip_mask) && (strip_size < STRIP_1_LENGTH)) strip_size = STRIP_1_LENGTH;
 8000400:	88fb      	ldrh	r3, [r7, #6]
 8000402:	f003 0301 	and.w	r3, r3, #1
 8000406:	b29b      	uxth	r3, r3
 8000408:	2b00      	cmp	r3, #0
 800040a:	d004      	beq.n	8000416 <ws2812_led_get_max_strip_size+0x32>
 800040c:	89fb      	ldrh	r3, [r7, #14]
 800040e:	2b06      	cmp	r3, #6
 8000410:	d801      	bhi.n	8000416 <ws2812_led_get_max_strip_size+0x32>
 8000412:	2307      	movs	r3, #7
 8000414:	81fb      	strh	r3, [r7, #14]
#endif
#if defined(STRIP_9_LENGTH)
		if ((STRIP_BIT_9 & strip_mask) && (strip_size < STRIP_9_LENGTH)) strip_size = STRIP_9_LENGTH;
#endif
	}
	return strip_size;
 8000416:	89fb      	ldrh	r3, [r7, #14]
}
 8000418:	4618      	mov	r0, r3
 800041a:	3714      	adds	r7, #20
 800041c:	46bd      	mov	sp, r7
 800041e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000422:	4770      	bx	lr
 8000424:	20000098 	.word	0x20000098

08000428 <ws2812_pixel_is_in_strip_range>:


bool ws2812_pixel_is_in_strip_range(strip_bit_e strip_bit, uint16_t pixel)
{
 8000428:	b480      	push	{r7}
 800042a:	b085      	sub	sp, #20
 800042c:	af00      	add	r7, sp, #0
 800042e:	4603      	mov	r3, r0
 8000430:	460a      	mov	r2, r1
 8000432:	71fb      	strb	r3, [r7, #7]
 8000434:	4613      	mov	r3, r2
 8000436:	80bb      	strh	r3, [r7, #4]
	bool return_val = false;
 8000438:	2300      	movs	r3, #0
 800043a:	73fb      	strb	r3, [r7, #15]
#if defined(STRIP_1_LENGTH)
	if ((STRIP_BIT_1 == strip_bit) && (pixel < STRIP_1_LENGTH)) return_val = true;
 800043c:	79fb      	ldrb	r3, [r7, #7]
 800043e:	2b01      	cmp	r3, #1
 8000440:	d104      	bne.n	800044c <ws2812_pixel_is_in_strip_range+0x24>
 8000442:	88bb      	ldrh	r3, [r7, #4]
 8000444:	2b06      	cmp	r3, #6
 8000446:	d801      	bhi.n	800044c <ws2812_pixel_is_in_strip_range+0x24>
 8000448:	2301      	movs	r3, #1
 800044a:	73fb      	strb	r3, [r7, #15]
	else if ((STRIP_BIT_8 == strip_bit) && (pixel < STRIP_8_LENGTH)) return_val = true;
#endif
#if defined(STRIP_9_LENGTH)
	else if ((STRIP_BIT_9 == strip_bit) && (pixel < STRIP_9_LENGTH)) return_val = true;
#endif
	return return_val;
 800044c:	7bfb      	ldrb	r3, [r7, #15]
}
 800044e:	4618      	mov	r0, r3
 8000450:	3714      	adds	r7, #20
 8000452:	46bd      	mov	sp, r7
 8000454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000458:	4770      	bx	lr
	...

0800045c <ws2812b_set_led>:


void ws2812b_set_led(const strip_bit_e strip_bit, uint16_t led_num, color_t red, color_t green, color_t blue)
{
 800045c:	b590      	push	{r4, r7, lr}
 800045e:	b085      	sub	sp, #20
 8000460:	af00      	add	r7, sp, #0
 8000462:	4604      	mov	r4, r0
 8000464:	4608      	mov	r0, r1
 8000466:	4611      	mov	r1, r2
 8000468:	461a      	mov	r2, r3
 800046a:	4623      	mov	r3, r4
 800046c:	71fb      	strb	r3, [r7, #7]
 800046e:	4603      	mov	r3, r0
 8000470:	80bb      	strh	r3, [r7, #4]
 8000472:	460b      	mov	r3, r1
 8000474:	71bb      	strb	r3, [r7, #6]
 8000476:	4613      	mov	r3, r2
 8000478:	70fb      	strb	r3, [r7, #3]
	strip_num_e strip_num = ws2812_convert_strip_bit_to_strip_num(strip_bit);
 800047a:	79fb      	ldrb	r3, [r7, #7]
 800047c:	4618      	mov	r0, r3
 800047e:	f7ff ff81 	bl	8000384 <ws2812_convert_strip_bit_to_strip_num>
 8000482:	4603      	mov	r3, r0
 8000484:	73fb      	strb	r3, [r7, #15]
	(gp_ws28128b_strip[strip_num] + led_num)->red = red;
 8000486:	7bfb      	ldrb	r3, [r7, #15]
 8000488:	4a12      	ldr	r2, [pc, #72]	; (80004d4 <ws2812b_set_led+0x78>)
 800048a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800048e:	88ba      	ldrh	r2, [r7, #4]
 8000490:	4613      	mov	r3, r2
 8000492:	005b      	lsls	r3, r3, #1
 8000494:	4413      	add	r3, r2
 8000496:	440b      	add	r3, r1
 8000498:	79ba      	ldrb	r2, [r7, #6]
 800049a:	701a      	strb	r2, [r3, #0]
	(gp_ws28128b_strip[strip_num] + led_num)->green = green;
 800049c:	7bfb      	ldrb	r3, [r7, #15]
 800049e:	4a0d      	ldr	r2, [pc, #52]	; (80004d4 <ws2812b_set_led+0x78>)
 80004a0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80004a4:	88ba      	ldrh	r2, [r7, #4]
 80004a6:	4613      	mov	r3, r2
 80004a8:	005b      	lsls	r3, r3, #1
 80004aa:	4413      	add	r3, r2
 80004ac:	440b      	add	r3, r1
 80004ae:	78fa      	ldrb	r2, [r7, #3]
 80004b0:	705a      	strb	r2, [r3, #1]
	(gp_ws28128b_strip[strip_num] + led_num)->blue = blue;
 80004b2:	7bfb      	ldrb	r3, [r7, #15]
 80004b4:	4a07      	ldr	r2, [pc, #28]	; (80004d4 <ws2812b_set_led+0x78>)
 80004b6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80004ba:	88ba      	ldrh	r2, [r7, #4]
 80004bc:	4613      	mov	r3, r2
 80004be:	005b      	lsls	r3, r3, #1
 80004c0:	4413      	add	r3, r2
 80004c2:	440b      	add	r3, r1
 80004c4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80004c8:	709a      	strb	r2, [r3, #2]
}
 80004ca:	bf00      	nop
 80004cc:	3714      	adds	r7, #20
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd90      	pop	{r4, r7, pc}
 80004d2:	bf00      	nop
 80004d4:	20001994 	.word	0x20001994

080004d8 <ws2812b_fill_pwm_buffer>:


void ws2812b_fill_pwm_buffer(const strip_bit_e strip_bit)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b086      	sub	sp, #24
 80004dc:	af00      	add	r7, sp, #0
 80004de:	4603      	mov	r3, r0
 80004e0:	71fb      	strb	r3, [r7, #7]
	// fill the pwm data here  
	uint16_t strip_size = ws2812_get_strip_size(strip_bit);
 80004e2:	79fb      	ldrb	r3, [r7, #7]
 80004e4:	4618      	mov	r0, r3
 80004e6:	f7ff ff5b 	bl	80003a0 <ws2812_get_strip_size>
 80004ea:	4603      	mov	r3, r0
 80004ec:	823b      	strh	r3, [r7, #16]
	uint32_t color = 0;
 80004ee:	2300      	movs	r3, #0
 80004f0:	60fb      	str	r3, [r7, #12]
	strip_num_e strip_num = ws2812_convert_strip_bit_to_strip_num(strip_bit);
 80004f2:	79fb      	ldrb	r3, [r7, #7]
 80004f4:	4618      	mov	r0, r3
 80004f6:	f7ff ff45 	bl	8000384 <ws2812_convert_strip_bit_to_strip_num>
 80004fa:	4603      	mov	r3, r0
 80004fc:	72fb      	strb	r3, [r7, #11]
	if (g_pwm_data_ping) gp_pwm_data_fill = gp_pwm_data_ping;
 80004fe:	4b53      	ldr	r3, [pc, #332]	; (800064c <ws2812b_fill_pwm_buffer+0x174>)
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	2b00      	cmp	r3, #0
 8000504:	d004      	beq.n	8000510 <ws2812b_fill_pwm_buffer+0x38>
 8000506:	4b52      	ldr	r3, [pc, #328]	; (8000650 <ws2812b_fill_pwm_buffer+0x178>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	4a52      	ldr	r2, [pc, #328]	; (8000654 <ws2812b_fill_pwm_buffer+0x17c>)
 800050c:	6013      	str	r3, [r2, #0]
 800050e:	e003      	b.n	8000518 <ws2812b_fill_pwm_buffer+0x40>
	else gp_pwm_data_fill = gp_pwm_data_pong;
 8000510:	4b51      	ldr	r3, [pc, #324]	; (8000658 <ws2812b_fill_pwm_buffer+0x180>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4a4f      	ldr	r2, [pc, #316]	; (8000654 <ws2812b_fill_pwm_buffer+0x17c>)
 8000516:	6013      	str	r3, [r2, #0]
	for (uint16_t iii = 0; iii < strip_size; iii++)
 8000518:	2300      	movs	r3, #0
 800051a:	82fb      	strh	r3, [r7, #22]
 800051c:	e04a      	b.n	80005b4 <ws2812b_fill_pwm_buffer+0xdc>
	{
		color = (((gp_ws28128b_strip[strip_num] + iii)->green) << 16) | (((gp_ws28128b_strip[strip_num] + iii)->red) << 8) | (((gp_ws28128b_strip[strip_num] + iii)->blue));
 800051e:	7afb      	ldrb	r3, [r7, #11]
 8000520:	4a4e      	ldr	r2, [pc, #312]	; (800065c <ws2812b_fill_pwm_buffer+0x184>)
 8000522:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000526:	8afa      	ldrh	r2, [r7, #22]
 8000528:	4613      	mov	r3, r2
 800052a:	005b      	lsls	r3, r3, #1
 800052c:	4413      	add	r3, r2
 800052e:	440b      	add	r3, r1
 8000530:	785b      	ldrb	r3, [r3, #1]
 8000532:	0419      	lsls	r1, r3, #16
 8000534:	7afb      	ldrb	r3, [r7, #11]
 8000536:	4a49      	ldr	r2, [pc, #292]	; (800065c <ws2812b_fill_pwm_buffer+0x184>)
 8000538:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800053c:	8afa      	ldrh	r2, [r7, #22]
 800053e:	4613      	mov	r3, r2
 8000540:	005b      	lsls	r3, r3, #1
 8000542:	4413      	add	r3, r2
 8000544:	4403      	add	r3, r0
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	021b      	lsls	r3, r3, #8
 800054a:	4319      	orrs	r1, r3
 800054c:	7afb      	ldrb	r3, [r7, #11]
 800054e:	4a43      	ldr	r2, [pc, #268]	; (800065c <ws2812b_fill_pwm_buffer+0x184>)
 8000550:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000554:	8afa      	ldrh	r2, [r7, #22]
 8000556:	4613      	mov	r3, r2
 8000558:	005b      	lsls	r3, r3, #1
 800055a:	4413      	add	r3, r2
 800055c:	4403      	add	r3, r0
 800055e:	789b      	ldrb	r3, [r3, #2]
 8000560:	430b      	orrs	r3, r1
 8000562:	60fb      	str	r3, [r7, #12]
		for (uint8_t yyy = 0; yyy < BITS_PER_BYTE * sizeof(ws2812b_led_t); yyy++)
 8000564:	2300      	movs	r3, #0
 8000566:	757b      	strb	r3, [r7, #21]
 8000568:	e01e      	b.n	80005a8 <ws2812b_fill_pwm_buffer+0xd0>
		{
			gp_pwm_data_fill[(iii * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + yyy] = (color & (1 << (23 - yyy))) ? (uint16_t)(WS2812B_BIT_SET_CYCLES + 1) : (uint16_t)WS2812B_BIT_RESET_CYCLES;
 800056a:	7d7b      	ldrb	r3, [r7, #21]
 800056c:	f1c3 0317 	rsb	r3, r3, #23
 8000570:	2201      	movs	r2, #1
 8000572:	fa02 f303 	lsl.w	r3, r2, r3
 8000576:	461a      	mov	r2, r3
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	4013      	ands	r3, r2
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <ws2812b_fill_pwm_buffer+0xac>
 8000580:	2028      	movs	r0, #40	; 0x28
 8000582:	e000      	b.n	8000586 <ws2812b_fill_pwm_buffer+0xae>
 8000584:	2014      	movs	r0, #20
 8000586:	4b33      	ldr	r3, [pc, #204]	; (8000654 <ws2812b_fill_pwm_buffer+0x17c>)
 8000588:	6819      	ldr	r1, [r3, #0]
 800058a:	8afa      	ldrh	r2, [r7, #22]
 800058c:	4613      	mov	r3, r2
 800058e:	005b      	lsls	r3, r3, #1
 8000590:	4413      	add	r3, r2
 8000592:	00db      	lsls	r3, r3, #3
 8000594:	461a      	mov	r2, r3
 8000596:	7d7b      	ldrb	r3, [r7, #21]
 8000598:	4413      	add	r3, r2
 800059a:	005b      	lsls	r3, r3, #1
 800059c:	440b      	add	r3, r1
 800059e:	4602      	mov	r2, r0
 80005a0:	801a      	strh	r2, [r3, #0]
		for (uint8_t yyy = 0; yyy < BITS_PER_BYTE * sizeof(ws2812b_led_t); yyy++)
 80005a2:	7d7b      	ldrb	r3, [r7, #21]
 80005a4:	3301      	adds	r3, #1
 80005a6:	757b      	strb	r3, [r7, #21]
 80005a8:	7d7b      	ldrb	r3, [r7, #21]
 80005aa:	2b17      	cmp	r3, #23
 80005ac:	d9dd      	bls.n	800056a <ws2812b_fill_pwm_buffer+0x92>
	for (uint16_t iii = 0; iii < strip_size; iii++)
 80005ae:	8afb      	ldrh	r3, [r7, #22]
 80005b0:	3301      	adds	r3, #1
 80005b2:	82fb      	strh	r3, [r7, #22]
 80005b4:	8afa      	ldrh	r2, [r7, #22]
 80005b6:	8a3b      	ldrh	r3, [r7, #16]
 80005b8:	429a      	cmp	r2, r3
 80005ba:	d3b0      	bcc.n	800051e <ws2812b_fill_pwm_buffer+0x46>
		}
	}
	for (uint16_t iii = 0; iii < WS2812B_RESET_TIME_CYCLES; iii++)
 80005bc:	2300      	movs	r3, #0
 80005be:	827b      	strh	r3, [r7, #18]
 80005c0:	e010      	b.n	80005e4 <ws2812b_fill_pwm_buffer+0x10c>
	{
		gp_pwm_data_fill[(strip_size * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + iii] = 0;
 80005c2:	4b24      	ldr	r3, [pc, #144]	; (8000654 <ws2812b_fill_pwm_buffer+0x17c>)
 80005c4:	6819      	ldr	r1, [r3, #0]
 80005c6:	8a3a      	ldrh	r2, [r7, #16]
 80005c8:	4613      	mov	r3, r2
 80005ca:	005b      	lsls	r3, r3, #1
 80005cc:	4413      	add	r3, r2
 80005ce:	00db      	lsls	r3, r3, #3
 80005d0:	461a      	mov	r2, r3
 80005d2:	8a7b      	ldrh	r3, [r7, #18]
 80005d4:	4413      	add	r3, r2
 80005d6:	005b      	lsls	r3, r3, #1
 80005d8:	440b      	add	r3, r1
 80005da:	2200      	movs	r2, #0
 80005dc:	801a      	strh	r2, [r3, #0]
	for (uint16_t iii = 0; iii < WS2812B_RESET_TIME_CYCLES; iii++)
 80005de:	8a7b      	ldrh	r3, [r7, #18]
 80005e0:	3301      	adds	r3, #1
 80005e2:	827b      	strh	r3, [r7, #18]
 80005e4:	8a7b      	ldrh	r3, [r7, #18]
 80005e6:	ee07 3a90 	vmov	s15, r3
 80005ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005ee:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8000660 <ws2812b_fill_pwm_buffer+0x188>
 80005f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005fa:	d4e2      	bmi.n	80005c2 <ws2812b_fill_pwm_buffer+0xea>
	}
	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)gp_pwm_data_fill, (strip_size * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + WS2812B_RESET_TIME_CYCLES);
 80005fc:	4b15      	ldr	r3, [pc, #84]	; (8000654 <ws2812b_fill_pwm_buffer+0x17c>)
 80005fe:	6819      	ldr	r1, [r3, #0]
 8000600:	8a3a      	ldrh	r2, [r7, #16]
 8000602:	4613      	mov	r3, r2
 8000604:	005b      	lsls	r3, r3, #1
 8000606:	4413      	add	r3, r2
 8000608:	00db      	lsls	r3, r3, #3
 800060a:	ee07 3a90 	vmov	s15, r3
 800060e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000612:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8000660 <ws2812b_fill_pwm_buffer+0x188>
 8000616:	ee77 7a87 	vadd.f32	s15, s15, s14
 800061a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800061e:	ee17 3a90 	vmov	r3, s15
 8000622:	b29b      	uxth	r3, r3
 8000624:	460a      	mov	r2, r1
 8000626:	2100      	movs	r1, #0
 8000628:	480e      	ldr	r0, [pc, #56]	; (8000664 <ws2812b_fill_pwm_buffer+0x18c>)
 800062a:	f004 ff41 	bl	80054b0 <HAL_TIM_PWM_Start_DMA>
	datasentflag = 0;
 800062e:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <ws2812b_fill_pwm_buffer+0x190>)
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
	while (!datasentflag);//{HAL_Delay(1);};
 8000634:	bf00      	nop
 8000636:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <ws2812b_fill_pwm_buffer+0x190>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d0fb      	beq.n	8000636 <ws2812b_fill_pwm_buffer+0x15e>
	datasentflag = 0;
 800063e:	4b0a      	ldr	r3, [pc, #40]	; (8000668 <ws2812b_fill_pwm_buffer+0x190>)
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
}
 8000644:	bf00      	nop
 8000646:	3718      	adds	r7, #24
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	2000009a 	.word	0x2000009a
 8000650:	20001978 	.word	0x20001978
 8000654:	2000199c 	.word	0x2000199c
 8000658:	20001998 	.word	0x20001998
 800065c:	20001994 	.word	0x20001994
 8000660:	451c0000 	.word	0x451c0000
 8000664:	20001a50 	.word	0x20001a50
 8000668:	20001968 	.word	0x20001968

0800066c <ws2812b_init>:
	// call TIM PWM DMA to reset.
}


void ws2812b_init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
#if defined(STRIP_1_LENGTH)
	gp_ws28128b_strip[STRIP_NUM_1] = g_strip_1;
 8000672:	4b31      	ldr	r3, [pc, #196]	; (8000738 <ws2812b_init+0xcc>)
 8000674:	4a31      	ldr	r2, [pc, #196]	; (800073c <ws2812b_init+0xd0>)
 8000676:	601a      	str	r2, [r3, #0]
#endif
#if defined(STRIP_4_LENGTH)
	gp_ws28128b_strip[STRIP_NUM_4] = g_strip_4;
#endif

	uint8_t num_strips = NUM_STRIPS;
 8000678:	2301      	movs	r3, #1
 800067a:	70fb      	strb	r3, [r7, #3]
	for (int iii = 0; iii < NUM_STRIPS; iii++)
 800067c:	2300      	movs	r3, #0
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	e00f      	b.n	80006a2 <ws2812b_init+0x36>
	{
		g_all_strip_mask |= 1 << iii;
 8000682:	2201      	movs	r2, #1
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	fa02 f303 	lsl.w	r3, r2, r3
 800068a:	b21a      	sxth	r2, r3
 800068c:	4b2c      	ldr	r3, [pc, #176]	; (8000740 <ws2812b_init+0xd4>)
 800068e:	881b      	ldrh	r3, [r3, #0]
 8000690:	b21b      	sxth	r3, r3
 8000692:	4313      	orrs	r3, r2
 8000694:	b21b      	sxth	r3, r3
 8000696:	b29a      	uxth	r2, r3
 8000698:	4b29      	ldr	r3, [pc, #164]	; (8000740 <ws2812b_init+0xd4>)
 800069a:	801a      	strh	r2, [r3, #0]
	for (int iii = 0; iii < NUM_STRIPS; iii++)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	3301      	adds	r3, #1
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	ddec      	ble.n	8000682 <ws2812b_init+0x16>
	}
	
	switch (num_strips)
 80006a8:	78fb      	ldrb	r3, [r7, #3]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d10d      	bne.n	80006ca <ws2812b_init+0x5e>
		case 2:
			g_num_leds += STRIP_2_LENGTH;
			if (STRIP_2_LENGTH > g_max_strip_length) g_max_strip_length = STRIP_2_LENGTH;
#endif
		case 1:
			g_num_leds += STRIP_1_LENGTH;
 80006ae:	4b25      	ldr	r3, [pc, #148]	; (8000744 <ws2812b_init+0xd8>)
 80006b0:	881b      	ldrh	r3, [r3, #0]
 80006b2:	3307      	adds	r3, #7
 80006b4:	b29a      	uxth	r2, r3
 80006b6:	4b23      	ldr	r3, [pc, #140]	; (8000744 <ws2812b_init+0xd8>)
 80006b8:	801a      	strh	r2, [r3, #0]
			if (STRIP_1_LENGTH > g_max_strip_length) g_max_strip_length = STRIP_1_LENGTH;
 80006ba:	4b23      	ldr	r3, [pc, #140]	; (8000748 <ws2812b_init+0xdc>)
 80006bc:	881b      	ldrh	r3, [r3, #0]
 80006be:	2b06      	cmp	r3, #6
 80006c0:	d802      	bhi.n	80006c8 <ws2812b_init+0x5c>
 80006c2:	4b21      	ldr	r3, [pc, #132]	; (8000748 <ws2812b_init+0xdc>)
 80006c4:	2207      	movs	r2, #7
 80006c6:	801a      	strh	r2, [r3, #0]
		break;
 80006c8:	bf00      	nop
	}
	gp_pwm_data_ping = malloc((sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_max_strip_length) + WS2812B_RESET_TIME_CYCLES);
 80006ca:	4b1f      	ldr	r3, [pc, #124]	; (8000748 <ws2812b_init+0xdc>)
 80006cc:	881b      	ldrh	r3, [r3, #0]
 80006ce:	461a      	mov	r2, r3
 80006d0:	4613      	mov	r3, r2
 80006d2:	005b      	lsls	r3, r3, #1
 80006d4:	4413      	add	r3, r2
 80006d6:	00db      	lsls	r3, r3, #3
 80006d8:	ee07 3a90 	vmov	s15, r3
 80006dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80006e0:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800074c <ws2812b_init+0xe0>
 80006e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80006e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	f006 fda0 	bl	8007234 <malloc>
 80006f4:	4603      	mov	r3, r0
 80006f6:	461a      	mov	r2, r3
 80006f8:	4b15      	ldr	r3, [pc, #84]	; (8000750 <ws2812b_init+0xe4>)
 80006fa:	601a      	str	r2, [r3, #0]
	gp_pwm_data_pong = malloc((sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_max_strip_length) + WS2812B_RESET_TIME_CYCLES);
 80006fc:	4b12      	ldr	r3, [pc, #72]	; (8000748 <ws2812b_init+0xdc>)
 80006fe:	881b      	ldrh	r3, [r3, #0]
 8000700:	461a      	mov	r2, r3
 8000702:	4613      	mov	r3, r2
 8000704:	005b      	lsls	r3, r3, #1
 8000706:	4413      	add	r3, r2
 8000708:	00db      	lsls	r3, r3, #3
 800070a:	ee07 3a90 	vmov	s15, r3
 800070e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000712:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800074c <ws2812b_init+0xe0>
 8000716:	ee77 7a87 	vadd.f32	s15, s15, s14
 800071a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800071e:	ee17 0a90 	vmov	r0, s15
 8000722:	f006 fd87 	bl	8007234 <malloc>
 8000726:	4603      	mov	r3, r0
 8000728:	461a      	mov	r2, r3
 800072a:	4b0a      	ldr	r3, [pc, #40]	; (8000754 <ws2812b_init+0xe8>)
 800072c:	601a      	str	r2, [r3, #0]
}
 800072e:	bf00      	nop
 8000730:	3708      	adds	r7, #8
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	20001994 	.word	0x20001994
 800073c:	2000197c 	.word	0x2000197c
 8000740:	20000096 	.word	0x20000096
 8000744:	20000094 	.word	0x20000094
 8000748:	20000098 	.word	0x20000098
 800074c:	451c0000 	.word	0x451c0000
 8000750:	20001978 	.word	0x20001978
 8000754:	20001998 	.word	0x20001998

08000758 <ws2812b_show>:

void ws2812b_show(const strip_mask_t strip_mask)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	80fb      	strh	r3, [r7, #6]
	for (uint8_t iii = 0; iii < STRIP_BIT_NUM_STRIPS; iii++)
 8000762:	2300      	movs	r3, #0
 8000764:	73fb      	strb	r3, [r7, #15]
 8000766:	e010      	b.n	800078a <ws2812b_show+0x32>
	{
		if ((1 << iii) & strip_mask)
 8000768:	88fa      	ldrh	r2, [r7, #6]
 800076a:	7bfb      	ldrb	r3, [r7, #15]
 800076c:	fa42 f303 	asr.w	r3, r2, r3
 8000770:	f003 0301 	and.w	r3, r3, #1
 8000774:	2b00      	cmp	r3, #0
 8000776:	d005      	beq.n	8000784 <ws2812b_show+0x2c>
		{
			ws2812b_fill_pwm_buffer(iii + 1); // iii = strip num!
 8000778:	7bfb      	ldrb	r3, [r7, #15]
 800077a:	3301      	adds	r3, #1
 800077c:	b2db      	uxtb	r3, r3
 800077e:	4618      	mov	r0, r3
 8000780:	f7ff feaa 	bl	80004d8 <ws2812b_fill_pwm_buffer>
	for (uint8_t iii = 0; iii < STRIP_BIT_NUM_STRIPS; iii++)
 8000784:	7bfb      	ldrb	r3, [r7, #15]
 8000786:	3301      	adds	r3, #1
 8000788:	73fb      	strb	r3, [r7, #15]
 800078a:	7bfb      	ldrb	r3, [r7, #15]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d0eb      	beq.n	8000768 <ws2812b_show+0x10>
			// get the data in pwm form.. 
		} // show it
	}
}
 8000790:	bf00      	nop
 8000792:	bf00      	nop
 8000794:	3710      	adds	r7, #16
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
	...

0800079c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	6039      	str	r1, [r7, #0]
 80007a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	db0a      	blt.n	80007c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	b2da      	uxtb	r2, r3
 80007b4:	490c      	ldr	r1, [pc, #48]	; (80007e8 <__NVIC_SetPriority+0x4c>)
 80007b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ba:	0112      	lsls	r2, r2, #4
 80007bc:	b2d2      	uxtb	r2, r2
 80007be:	440b      	add	r3, r1
 80007c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007c4:	e00a      	b.n	80007dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	b2da      	uxtb	r2, r3
 80007ca:	4908      	ldr	r1, [pc, #32]	; (80007ec <__NVIC_SetPriority+0x50>)
 80007cc:	79fb      	ldrb	r3, [r7, #7]
 80007ce:	f003 030f 	and.w	r3, r3, #15
 80007d2:	3b04      	subs	r3, #4
 80007d4:	0112      	lsls	r2, r2, #4
 80007d6:	b2d2      	uxtb	r2, r2
 80007d8:	440b      	add	r3, r1
 80007da:	761a      	strb	r2, [r3, #24]
}
 80007dc:	bf00      	nop
 80007de:	370c      	adds	r7, #12
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr
 80007e8:	e000e100 	.word	0xe000e100
 80007ec:	e000ed00 	.word	0xe000ed00

080007f0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80007f4:	4b05      	ldr	r3, [pc, #20]	; (800080c <SysTick_Handler+0x1c>)
 80007f6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80007f8:	f001 fcfe 	bl	80021f8 <xTaskGetSchedulerState>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b01      	cmp	r3, #1
 8000800:	d001      	beq.n	8000806 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8000802:	f002 fae9 	bl	8002dd8 <xPortSysTickHandler>
  }
}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	e000e010 	.word	0xe000e010

08000810 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8000814:	2100      	movs	r1, #0
 8000816:	f06f 0004 	mvn.w	r0, #4
 800081a:	f7ff ffbf 	bl	800079c <__NVIC_SetPriority>
#endif
}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
	...

08000824 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800082a:	f3ef 8305 	mrs	r3, IPSR
 800082e:	603b      	str	r3, [r7, #0]
  return(result);
 8000830:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8000832:	2b00      	cmp	r3, #0
 8000834:	d003      	beq.n	800083e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8000836:	f06f 0305 	mvn.w	r3, #5
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	e00c      	b.n	8000858 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800083e:	4b0a      	ldr	r3, [pc, #40]	; (8000868 <osKernelInitialize+0x44>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d105      	bne.n	8000852 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8000846:	4b08      	ldr	r3, [pc, #32]	; (8000868 <osKernelInitialize+0x44>)
 8000848:	2201      	movs	r2, #1
 800084a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800084c:	2300      	movs	r3, #0
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	e002      	b.n	8000858 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8000852:	f04f 33ff 	mov.w	r3, #4294967295
 8000856:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8000858:	687b      	ldr	r3, [r7, #4]
}
 800085a:	4618      	mov	r0, r3
 800085c:	370c      	adds	r7, #12
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	2000009c 	.word	0x2000009c

0800086c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8000872:	f3ef 8305 	mrs	r3, IPSR
 8000876:	603b      	str	r3, [r7, #0]
  return(result);
 8000878:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800087a:	2b00      	cmp	r3, #0
 800087c:	d003      	beq.n	8000886 <osKernelStart+0x1a>
    stat = osErrorISR;
 800087e:	f06f 0305 	mvn.w	r3, #5
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	e010      	b.n	80008a8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8000886:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <osKernelStart+0x48>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	2b01      	cmp	r3, #1
 800088c:	d109      	bne.n	80008a2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800088e:	f7ff ffbf 	bl	8000810 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8000892:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <osKernelStart+0x48>)
 8000894:	2202      	movs	r2, #2
 8000896:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8000898:	f001 f866 	bl	8001968 <vTaskStartScheduler>
      stat = osOK;
 800089c:	2300      	movs	r3, #0
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	e002      	b.n	80008a8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80008a2:	f04f 33ff 	mov.w	r3, #4294967295
 80008a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80008a8:	687b      	ldr	r3, [r7, #4]
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	2000009c 	.word	0x2000009c

080008b8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08e      	sub	sp, #56	; 0x38
 80008bc:	af04      	add	r7, sp, #16
 80008be:	60f8      	str	r0, [r7, #12]
 80008c0:	60b9      	str	r1, [r7, #8]
 80008c2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80008c8:	f3ef 8305 	mrs	r3, IPSR
 80008cc:	617b      	str	r3, [r7, #20]
  return(result);
 80008ce:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d17e      	bne.n	80009d2 <osThreadNew+0x11a>
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d07b      	beq.n	80009d2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80008da:	2380      	movs	r3, #128	; 0x80
 80008dc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80008de:	2318      	movs	r3, #24
 80008e0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80008e6:	f04f 33ff 	mov.w	r3, #4294967295
 80008ea:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d045      	beq.n	800097e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d002      	beq.n	8000900 <osThreadNew+0x48>
        name = attr->name;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	699b      	ldr	r3, [r3, #24]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d002      	beq.n	800090e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	699b      	ldr	r3, [r3, #24]
 800090c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800090e:	69fb      	ldr	r3, [r7, #28]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d008      	beq.n	8000926 <osThreadNew+0x6e>
 8000914:	69fb      	ldr	r3, [r7, #28]
 8000916:	2b38      	cmp	r3, #56	; 0x38
 8000918:	d805      	bhi.n	8000926 <osThreadNew+0x6e>
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	685b      	ldr	r3, [r3, #4]
 800091e:	f003 0301 	and.w	r3, r3, #1
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <osThreadNew+0x72>
        return (NULL);
 8000926:	2300      	movs	r3, #0
 8000928:	e054      	b.n	80009d4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	695b      	ldr	r3, [r3, #20]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d003      	beq.n	800093a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	695b      	ldr	r3, [r3, #20]
 8000936:	089b      	lsrs	r3, r3, #2
 8000938:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	689b      	ldr	r3, [r3, #8]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d00e      	beq.n	8000960 <osThreadNew+0xa8>
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	68db      	ldr	r3, [r3, #12]
 8000946:	2b5b      	cmp	r3, #91	; 0x5b
 8000948:	d90a      	bls.n	8000960 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800094e:	2b00      	cmp	r3, #0
 8000950:	d006      	beq.n	8000960 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	695b      	ldr	r3, [r3, #20]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d002      	beq.n	8000960 <osThreadNew+0xa8>
        mem = 1;
 800095a:	2301      	movs	r3, #1
 800095c:	61bb      	str	r3, [r7, #24]
 800095e:	e010      	b.n	8000982 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	689b      	ldr	r3, [r3, #8]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d10c      	bne.n	8000982 <osThreadNew+0xca>
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	68db      	ldr	r3, [r3, #12]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d108      	bne.n	8000982 <osThreadNew+0xca>
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	691b      	ldr	r3, [r3, #16]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d104      	bne.n	8000982 <osThreadNew+0xca>
          mem = 0;
 8000978:	2300      	movs	r3, #0
 800097a:	61bb      	str	r3, [r7, #24]
 800097c:	e001      	b.n	8000982 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800097e:	2300      	movs	r3, #0
 8000980:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8000982:	69bb      	ldr	r3, [r7, #24]
 8000984:	2b01      	cmp	r3, #1
 8000986:	d110      	bne.n	80009aa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800098c:	687a      	ldr	r2, [r7, #4]
 800098e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8000990:	9202      	str	r2, [sp, #8]
 8000992:	9301      	str	r3, [sp, #4]
 8000994:	69fb      	ldr	r3, [r7, #28]
 8000996:	9300      	str	r3, [sp, #0]
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	6a3a      	ldr	r2, [r7, #32]
 800099c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800099e:	68f8      	ldr	r0, [r7, #12]
 80009a0:	f000 fe0c 	bl	80015bc <xTaskCreateStatic>
 80009a4:	4603      	mov	r3, r0
 80009a6:	613b      	str	r3, [r7, #16]
 80009a8:	e013      	b.n	80009d2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80009aa:	69bb      	ldr	r3, [r7, #24]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d110      	bne.n	80009d2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80009b0:	6a3b      	ldr	r3, [r7, #32]
 80009b2:	b29a      	uxth	r2, r3
 80009b4:	f107 0310 	add.w	r3, r7, #16
 80009b8:	9301      	str	r3, [sp, #4]
 80009ba:	69fb      	ldr	r3, [r7, #28]
 80009bc:	9300      	str	r3, [sp, #0]
 80009be:	68bb      	ldr	r3, [r7, #8]
 80009c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80009c2:	68f8      	ldr	r0, [r7, #12]
 80009c4:	f000 fe57 	bl	8001676 <xTaskCreate>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	d001      	beq.n	80009d2 <osThreadNew+0x11a>
            hTask = NULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80009d2:	693b      	ldr	r3, [r7, #16]
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	3728      	adds	r7, #40	; 0x28
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}

080009dc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80009e4:	f3ef 8305 	mrs	r3, IPSR
 80009e8:	60bb      	str	r3, [r7, #8]
  return(result);
 80009ea:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d003      	beq.n	80009f8 <osDelay+0x1c>
    stat = osErrorISR;
 80009f0:	f06f 0305 	mvn.w	r3, #5
 80009f4:	60fb      	str	r3, [r7, #12]
 80009f6:	e007      	b.n	8000a08 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80009f8:	2300      	movs	r3, #0
 80009fa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d002      	beq.n	8000a08 <osDelay+0x2c>
      vTaskDelay(ticks);
 8000a02:	6878      	ldr	r0, [r7, #4]
 8000a04:	f000 ff7c 	bl	8001900 <vTaskDelay>
    }
  }

  return (stat);
 8000a08:	68fb      	ldr	r3, [r7, #12]
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3710      	adds	r7, #16
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
	...

08000a14 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8000a14:	b480      	push	{r7}
 8000a16:	b085      	sub	sp, #20
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	60f8      	str	r0, [r7, #12]
 8000a1c:	60b9      	str	r1, [r7, #8]
 8000a1e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	4a07      	ldr	r2, [pc, #28]	; (8000a40 <vApplicationGetIdleTaskMemory+0x2c>)
 8000a24:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8000a26:	68bb      	ldr	r3, [r7, #8]
 8000a28:	4a06      	ldr	r2, [pc, #24]	; (8000a44 <vApplicationGetIdleTaskMemory+0x30>)
 8000a2a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	2280      	movs	r2, #128	; 0x80
 8000a30:	601a      	str	r2, [r3, #0]
}
 8000a32:	bf00      	nop
 8000a34:	3714      	adds	r7, #20
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	200000a0 	.word	0x200000a0
 8000a44:	200000fc 	.word	0x200000fc

08000a48 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8000a48:	b480      	push	{r7}
 8000a4a:	b085      	sub	sp, #20
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	60f8      	str	r0, [r7, #12]
 8000a50:	60b9      	str	r1, [r7, #8]
 8000a52:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	4a07      	ldr	r2, [pc, #28]	; (8000a74 <vApplicationGetTimerTaskMemory+0x2c>)
 8000a58:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8000a5a:	68bb      	ldr	r3, [r7, #8]
 8000a5c:	4a06      	ldr	r2, [pc, #24]	; (8000a78 <vApplicationGetTimerTaskMemory+0x30>)
 8000a5e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a66:	601a      	str	r2, [r3, #0]
}
 8000a68:	bf00      	nop
 8000a6a:	3714      	adds	r7, #20
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr
 8000a74:	200002fc 	.word	0x200002fc
 8000a78:	20000358 	.word	0x20000358

08000a7c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	f103 0208 	add.w	r2, r3, #8
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	f04f 32ff 	mov.w	r2, #4294967295
 8000a94:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	f103 0208 	add.w	r2, r3, #8
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	f103 0208 	add.w	r2, r3, #8
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000ab0:	bf00      	nop
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000aca:	bf00      	nop
 8000acc:	370c      	adds	r7, #12
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr

08000ad6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	b085      	sub	sp, #20
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	6078      	str	r0, [r7, #4]
 8000ade:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	68fa      	ldr	r2, [r7, #12]
 8000aea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	689a      	ldr	r2, [r3, #8]
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	689b      	ldr	r3, [r3, #8]
 8000af8:	683a      	ldr	r2, [r7, #0]
 8000afa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	683a      	ldr	r2, [r7, #0]
 8000b00:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	687a      	ldr	r2, [r7, #4]
 8000b06:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	1c5a      	adds	r2, r3, #1
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	601a      	str	r2, [r3, #0]
}
 8000b12:	bf00      	nop
 8000b14:	3714      	adds	r7, #20
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr

08000b1e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000b1e:	b480      	push	{r7}
 8000b20:	b085      	sub	sp, #20
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	6078      	str	r0, [r7, #4]
 8000b26:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000b2e:	68bb      	ldr	r3, [r7, #8]
 8000b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b34:	d103      	bne.n	8000b3e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	691b      	ldr	r3, [r3, #16]
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	e00c      	b.n	8000b58 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	3308      	adds	r3, #8
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	e002      	b.n	8000b4c <vListInsert+0x2e>
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	68ba      	ldr	r2, [r7, #8]
 8000b54:	429a      	cmp	r2, r3
 8000b56:	d2f6      	bcs.n	8000b46 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	685a      	ldr	r2, [r3, #4]
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	683a      	ldr	r2, [r7, #0]
 8000b66:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	68fa      	ldr	r2, [r7, #12]
 8000b6c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	683a      	ldr	r2, [r7, #0]
 8000b72:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	687a      	ldr	r2, [r7, #4]
 8000b78:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	1c5a      	adds	r2, r3, #1
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	601a      	str	r2, [r3, #0]
}
 8000b84:	bf00      	nop
 8000b86:	3714      	adds	r7, #20
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	691b      	ldr	r3, [r3, #16]
 8000b9c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	687a      	ldr	r2, [r7, #4]
 8000ba4:	6892      	ldr	r2, [r2, #8]
 8000ba6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	689b      	ldr	r3, [r3, #8]
 8000bac:	687a      	ldr	r2, [r7, #4]
 8000bae:	6852      	ldr	r2, [r2, #4]
 8000bb0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	687a      	ldr	r2, [r7, #4]
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	d103      	bne.n	8000bc4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	689a      	ldr	r2, [r3, #8]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	1e5a      	subs	r2, r3, #1
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	681b      	ldr	r3, [r3, #0]
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	3714      	adds	r7, #20
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d10a      	bne.n	8000c0e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bfc:	f383 8811 	msr	BASEPRI, r3
 8000c00:	f3bf 8f6f 	isb	sy
 8000c04:	f3bf 8f4f 	dsb	sy
 8000c08:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000c0a:	bf00      	nop
 8000c0c:	e7fe      	b.n	8000c0c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8000c0e:	f002 f851 	bl	8002cb4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c1a:	68f9      	ldr	r1, [r7, #12]
 8000c1c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000c1e:	fb01 f303 	mul.w	r3, r1, r3
 8000c22:	441a      	add	r2, r3
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c3e:	3b01      	subs	r3, #1
 8000c40:	68f9      	ldr	r1, [r7, #12]
 8000c42:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000c44:	fb01 f303 	mul.w	r3, r1, r3
 8000c48:	441a      	add	r2, r3
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	22ff      	movs	r2, #255	; 0xff
 8000c52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	22ff      	movs	r2, #255	; 0xff
 8000c5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d114      	bne.n	8000c8e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	691b      	ldr	r3, [r3, #16]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d01a      	beq.n	8000ca2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	3310      	adds	r3, #16
 8000c70:	4618      	mov	r0, r3
 8000c72:	f001 f903 	bl	8001e7c <xTaskRemoveFromEventList>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d012      	beq.n	8000ca2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <xQueueGenericReset+0xcc>)
 8000c7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	f3bf 8f4f 	dsb	sy
 8000c88:	f3bf 8f6f 	isb	sy
 8000c8c:	e009      	b.n	8000ca2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	3310      	adds	r3, #16
 8000c92:	4618      	mov	r0, r3
 8000c94:	f7ff fef2 	bl	8000a7c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	3324      	adds	r3, #36	; 0x24
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff feed 	bl	8000a7c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8000ca2:	f002 f837 	bl	8002d14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8000ca6:	2301      	movs	r3, #1
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3710      	adds	r7, #16
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	e000ed04 	.word	0xe000ed04

08000cb4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08e      	sub	sp, #56	; 0x38
 8000cb8:	af02      	add	r7, sp, #8
 8000cba:	60f8      	str	r0, [r7, #12]
 8000cbc:	60b9      	str	r1, [r7, #8]
 8000cbe:	607a      	str	r2, [r7, #4]
 8000cc0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d10a      	bne.n	8000cde <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8000cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ccc:	f383 8811 	msr	BASEPRI, r3
 8000cd0:	f3bf 8f6f 	isb	sy
 8000cd4:	f3bf 8f4f 	dsb	sy
 8000cd8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8000cda:	bf00      	nop
 8000cdc:	e7fe      	b.n	8000cdc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d10a      	bne.n	8000cfa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8000ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ce8:	f383 8811 	msr	BASEPRI, r3
 8000cec:	f3bf 8f6f 	isb	sy
 8000cf0:	f3bf 8f4f 	dsb	sy
 8000cf4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8000cf6:	bf00      	nop
 8000cf8:	e7fe      	b.n	8000cf8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d002      	beq.n	8000d06 <xQueueGenericCreateStatic+0x52>
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <xQueueGenericCreateStatic+0x56>
 8000d06:	2301      	movs	r3, #1
 8000d08:	e000      	b.n	8000d0c <xQueueGenericCreateStatic+0x58>
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d10a      	bne.n	8000d26 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8000d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d14:	f383 8811 	msr	BASEPRI, r3
 8000d18:	f3bf 8f6f 	isb	sy
 8000d1c:	f3bf 8f4f 	dsb	sy
 8000d20:	623b      	str	r3, [r7, #32]
}
 8000d22:	bf00      	nop
 8000d24:	e7fe      	b.n	8000d24 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d102      	bne.n	8000d32 <xQueueGenericCreateStatic+0x7e>
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d101      	bne.n	8000d36 <xQueueGenericCreateStatic+0x82>
 8000d32:	2301      	movs	r3, #1
 8000d34:	e000      	b.n	8000d38 <xQueueGenericCreateStatic+0x84>
 8000d36:	2300      	movs	r3, #0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d10a      	bne.n	8000d52 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8000d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d40:	f383 8811 	msr	BASEPRI, r3
 8000d44:	f3bf 8f6f 	isb	sy
 8000d48:	f3bf 8f4f 	dsb	sy
 8000d4c:	61fb      	str	r3, [r7, #28]
}
 8000d4e:	bf00      	nop
 8000d50:	e7fe      	b.n	8000d50 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8000d52:	2350      	movs	r3, #80	; 0x50
 8000d54:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	2b50      	cmp	r3, #80	; 0x50
 8000d5a:	d00a      	beq.n	8000d72 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8000d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d60:	f383 8811 	msr	BASEPRI, r3
 8000d64:	f3bf 8f6f 	isb	sy
 8000d68:	f3bf 8f4f 	dsb	sy
 8000d6c:	61bb      	str	r3, [r7, #24]
}
 8000d6e:	bf00      	nop
 8000d70:	e7fe      	b.n	8000d70 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8000d72:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8000d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d00d      	beq.n	8000d9a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8000d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d80:	2201      	movs	r2, #1
 8000d82:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000d86:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8000d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d8c:	9300      	str	r3, [sp, #0]
 8000d8e:	4613      	mov	r3, r2
 8000d90:	687a      	ldr	r2, [r7, #4]
 8000d92:	68b9      	ldr	r1, [r7, #8]
 8000d94:	68f8      	ldr	r0, [r7, #12]
 8000d96:	f000 f805 	bl	8000da4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8000d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	3730      	adds	r7, #48	; 0x30
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	60f8      	str	r0, [r7, #12]
 8000dac:	60b9      	str	r1, [r7, #8]
 8000dae:	607a      	str	r2, [r7, #4]
 8000db0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8000db2:	68bb      	ldr	r3, [r7, #8]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d103      	bne.n	8000dc0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000db8:	69bb      	ldr	r3, [r7, #24]
 8000dba:	69ba      	ldr	r2, [r7, #24]
 8000dbc:	601a      	str	r2, [r3, #0]
 8000dbe:	e002      	b.n	8000dc6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000dc0:	69bb      	ldr	r3, [r7, #24]
 8000dc2:	687a      	ldr	r2, [r7, #4]
 8000dc4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8000dc6:	69bb      	ldr	r3, [r7, #24]
 8000dc8:	68fa      	ldr	r2, [r7, #12]
 8000dca:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8000dcc:	69bb      	ldr	r3, [r7, #24]
 8000dce:	68ba      	ldr	r2, [r7, #8]
 8000dd0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	69b8      	ldr	r0, [r7, #24]
 8000dd6:	f7ff ff05 	bl	8000be4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8000dda:	69bb      	ldr	r3, [r7, #24]
 8000ddc:	78fa      	ldrb	r2, [r7, #3]
 8000dde:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8000de2:	bf00      	nop
 8000de4:	3710      	adds	r7, #16
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
	...

08000dec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b08e      	sub	sp, #56	; 0x38
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]
 8000df8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8000e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d10a      	bne.n	8000e1e <xQueueGenericSend+0x32>
	__asm volatile
 8000e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e0c:	f383 8811 	msr	BASEPRI, r3
 8000e10:	f3bf 8f6f 	isb	sy
 8000e14:	f3bf 8f4f 	dsb	sy
 8000e18:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8000e1a:	bf00      	nop
 8000e1c:	e7fe      	b.n	8000e1c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000e1e:	68bb      	ldr	r3, [r7, #8]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d103      	bne.n	8000e2c <xQueueGenericSend+0x40>
 8000e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d101      	bne.n	8000e30 <xQueueGenericSend+0x44>
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	e000      	b.n	8000e32 <xQueueGenericSend+0x46>
 8000e30:	2300      	movs	r3, #0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d10a      	bne.n	8000e4c <xQueueGenericSend+0x60>
	__asm volatile
 8000e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e3a:	f383 8811 	msr	BASEPRI, r3
 8000e3e:	f3bf 8f6f 	isb	sy
 8000e42:	f3bf 8f4f 	dsb	sy
 8000e46:	627b      	str	r3, [r7, #36]	; 0x24
}
 8000e48:	bf00      	nop
 8000e4a:	e7fe      	b.n	8000e4a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	2b02      	cmp	r3, #2
 8000e50:	d103      	bne.n	8000e5a <xQueueGenericSend+0x6e>
 8000e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d101      	bne.n	8000e5e <xQueueGenericSend+0x72>
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e000      	b.n	8000e60 <xQueueGenericSend+0x74>
 8000e5e:	2300      	movs	r3, #0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d10a      	bne.n	8000e7a <xQueueGenericSend+0x8e>
	__asm volatile
 8000e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e68:	f383 8811 	msr	BASEPRI, r3
 8000e6c:	f3bf 8f6f 	isb	sy
 8000e70:	f3bf 8f4f 	dsb	sy
 8000e74:	623b      	str	r3, [r7, #32]
}
 8000e76:	bf00      	nop
 8000e78:	e7fe      	b.n	8000e78 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000e7a:	f001 f9bd 	bl	80021f8 <xTaskGetSchedulerState>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d102      	bne.n	8000e8a <xQueueGenericSend+0x9e>
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d101      	bne.n	8000e8e <xQueueGenericSend+0xa2>
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e000      	b.n	8000e90 <xQueueGenericSend+0xa4>
 8000e8e:	2300      	movs	r3, #0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d10a      	bne.n	8000eaa <xQueueGenericSend+0xbe>
	__asm volatile
 8000e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e98:	f383 8811 	msr	BASEPRI, r3
 8000e9c:	f3bf 8f6f 	isb	sy
 8000ea0:	f3bf 8f4f 	dsb	sy
 8000ea4:	61fb      	str	r3, [r7, #28]
}
 8000ea6:	bf00      	nop
 8000ea8:	e7fe      	b.n	8000ea8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000eaa:	f001 ff03 	bl	8002cb4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000eb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000eb6:	429a      	cmp	r2, r3
 8000eb8:	d302      	bcc.n	8000ec0 <xQueueGenericSend+0xd4>
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	2b02      	cmp	r3, #2
 8000ebe:	d129      	bne.n	8000f14 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000ec0:	683a      	ldr	r2, [r7, #0]
 8000ec2:	68b9      	ldr	r1, [r7, #8]
 8000ec4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000ec6:	f000 fa0b 	bl	80012e0 <prvCopyDataToQueue>
 8000eca:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d010      	beq.n	8000ef6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ed6:	3324      	adds	r3, #36	; 0x24
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f000 ffcf 	bl	8001e7c <xTaskRemoveFromEventList>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d013      	beq.n	8000f0c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8000ee4:	4b3f      	ldr	r3, [pc, #252]	; (8000fe4 <xQueueGenericSend+0x1f8>)
 8000ee6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	f3bf 8f4f 	dsb	sy
 8000ef0:	f3bf 8f6f 	isb	sy
 8000ef4:	e00a      	b.n	8000f0c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8000ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d007      	beq.n	8000f0c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8000efc:	4b39      	ldr	r3, [pc, #228]	; (8000fe4 <xQueueGenericSend+0x1f8>)
 8000efe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	f3bf 8f4f 	dsb	sy
 8000f08:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8000f0c:	f001 ff02 	bl	8002d14 <vPortExitCritical>
				return pdPASS;
 8000f10:	2301      	movs	r3, #1
 8000f12:	e063      	b.n	8000fdc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d103      	bne.n	8000f22 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000f1a:	f001 fefb 	bl	8002d14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	e05c      	b.n	8000fdc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d106      	bne.n	8000f36 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8000f28:	f107 0314 	add.w	r3, r7, #20
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f001 f809 	bl	8001f44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000f32:	2301      	movs	r3, #1
 8000f34:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000f36:	f001 feed 	bl	8002d14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000f3a:	f000 fd7b 	bl	8001a34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000f3e:	f001 feb9 	bl	8002cb4 <vPortEnterCritical>
 8000f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000f48:	b25b      	sxtb	r3, r3
 8000f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f4e:	d103      	bne.n	8000f58 <xQueueGenericSend+0x16c>
 8000f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f52:	2200      	movs	r2, #0
 8000f54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000f5e:	b25b      	sxtb	r3, r3
 8000f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f64:	d103      	bne.n	8000f6e <xQueueGenericSend+0x182>
 8000f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000f6e:	f001 fed1 	bl	8002d14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000f72:	1d3a      	adds	r2, r7, #4
 8000f74:	f107 0314 	add.w	r3, r7, #20
 8000f78:	4611      	mov	r1, r2
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f000 fff8 	bl	8001f70 <xTaskCheckForTimeOut>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d124      	bne.n	8000fd0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000f86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f88:	f000 faa2 	bl	80014d0 <prvIsQueueFull>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d018      	beq.n	8000fc4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f94:	3310      	adds	r3, #16
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	4611      	mov	r1, r2
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 ff1e 	bl	8001ddc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8000fa0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000fa2:	f000 fa2d 	bl	8001400 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8000fa6:	f000 fd53 	bl	8001a50 <xTaskResumeAll>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	f47f af7c 	bne.w	8000eaa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8000fb2:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <xQueueGenericSend+0x1f8>)
 8000fb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	f3bf 8f4f 	dsb	sy
 8000fbe:	f3bf 8f6f 	isb	sy
 8000fc2:	e772      	b.n	8000eaa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8000fc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000fc6:	f000 fa1b 	bl	8001400 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000fca:	f000 fd41 	bl	8001a50 <xTaskResumeAll>
 8000fce:	e76c      	b.n	8000eaa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8000fd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000fd2:	f000 fa15 	bl	8001400 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000fd6:	f000 fd3b 	bl	8001a50 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8000fda:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3738      	adds	r7, #56	; 0x38
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	e000ed04 	.word	0xe000ed04

08000fe8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b090      	sub	sp, #64	; 0x40
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	60f8      	str	r0, [r7, #12]
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	607a      	str	r2, [r7, #4]
 8000ff4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8000ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d10a      	bne.n	8001016 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8001000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001004:	f383 8811 	msr	BASEPRI, r3
 8001008:	f3bf 8f6f 	isb	sy
 800100c:	f3bf 8f4f 	dsb	sy
 8001010:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001012:	bf00      	nop
 8001014:	e7fe      	b.n	8001014 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d103      	bne.n	8001024 <xQueueGenericSendFromISR+0x3c>
 800101c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800101e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001020:	2b00      	cmp	r3, #0
 8001022:	d101      	bne.n	8001028 <xQueueGenericSendFromISR+0x40>
 8001024:	2301      	movs	r3, #1
 8001026:	e000      	b.n	800102a <xQueueGenericSendFromISR+0x42>
 8001028:	2300      	movs	r3, #0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d10a      	bne.n	8001044 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800102e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001032:	f383 8811 	msr	BASEPRI, r3
 8001036:	f3bf 8f6f 	isb	sy
 800103a:	f3bf 8f4f 	dsb	sy
 800103e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001040:	bf00      	nop
 8001042:	e7fe      	b.n	8001042 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	2b02      	cmp	r3, #2
 8001048:	d103      	bne.n	8001052 <xQueueGenericSendFromISR+0x6a>
 800104a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800104c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800104e:	2b01      	cmp	r3, #1
 8001050:	d101      	bne.n	8001056 <xQueueGenericSendFromISR+0x6e>
 8001052:	2301      	movs	r3, #1
 8001054:	e000      	b.n	8001058 <xQueueGenericSendFromISR+0x70>
 8001056:	2300      	movs	r3, #0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d10a      	bne.n	8001072 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800105c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001060:	f383 8811 	msr	BASEPRI, r3
 8001064:	f3bf 8f6f 	isb	sy
 8001068:	f3bf 8f4f 	dsb	sy
 800106c:	623b      	str	r3, [r7, #32]
}
 800106e:	bf00      	nop
 8001070:	e7fe      	b.n	8001070 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001072:	f001 ff01 	bl	8002e78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001076:	f3ef 8211 	mrs	r2, BASEPRI
 800107a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800107e:	f383 8811 	msr	BASEPRI, r3
 8001082:	f3bf 8f6f 	isb	sy
 8001086:	f3bf 8f4f 	dsb	sy
 800108a:	61fa      	str	r2, [r7, #28]
 800108c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800108e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001090:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001094:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800109a:	429a      	cmp	r2, r3
 800109c:	d302      	bcc.n	80010a4 <xQueueGenericSendFromISR+0xbc>
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	d12f      	bne.n	8001104 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80010a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80010aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80010ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010b2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80010b4:	683a      	ldr	r2, [r7, #0]
 80010b6:	68b9      	ldr	r1, [r7, #8]
 80010b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80010ba:	f000 f911 	bl	80012e0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80010be:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80010c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010c6:	d112      	bne.n	80010ee <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80010c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d016      	beq.n	80010fe <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80010d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010d2:	3324      	adds	r3, #36	; 0x24
 80010d4:	4618      	mov	r0, r3
 80010d6:	f000 fed1 	bl	8001e7c <xTaskRemoveFromEventList>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d00e      	beq.n	80010fe <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d00b      	beq.n	80010fe <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2201      	movs	r2, #1
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	e007      	b.n	80010fe <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80010ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80010f2:	3301      	adds	r3, #1
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	b25a      	sxtb	r2, r3
 80010f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80010fe:	2301      	movs	r3, #1
 8001100:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8001102:	e001      	b.n	8001108 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8001104:	2300      	movs	r3, #0
 8001106:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800110a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8001112:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8001116:	4618      	mov	r0, r3
 8001118:	3740      	adds	r7, #64	; 0x40
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
	...

08001120 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b08c      	sub	sp, #48	; 0x30
 8001124:	af00      	add	r7, sp, #0
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	60b9      	str	r1, [r7, #8]
 800112a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800112c:	2300      	movs	r3, #0
 800112e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8001134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001136:	2b00      	cmp	r3, #0
 8001138:	d10a      	bne.n	8001150 <xQueueReceive+0x30>
	__asm volatile
 800113a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800113e:	f383 8811 	msr	BASEPRI, r3
 8001142:	f3bf 8f6f 	isb	sy
 8001146:	f3bf 8f4f 	dsb	sy
 800114a:	623b      	str	r3, [r7, #32]
}
 800114c:	bf00      	nop
 800114e:	e7fe      	b.n	800114e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d103      	bne.n	800115e <xQueueReceive+0x3e>
 8001156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115a:	2b00      	cmp	r3, #0
 800115c:	d101      	bne.n	8001162 <xQueueReceive+0x42>
 800115e:	2301      	movs	r3, #1
 8001160:	e000      	b.n	8001164 <xQueueReceive+0x44>
 8001162:	2300      	movs	r3, #0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d10a      	bne.n	800117e <xQueueReceive+0x5e>
	__asm volatile
 8001168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800116c:	f383 8811 	msr	BASEPRI, r3
 8001170:	f3bf 8f6f 	isb	sy
 8001174:	f3bf 8f4f 	dsb	sy
 8001178:	61fb      	str	r3, [r7, #28]
}
 800117a:	bf00      	nop
 800117c:	e7fe      	b.n	800117c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800117e:	f001 f83b 	bl	80021f8 <xTaskGetSchedulerState>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d102      	bne.n	800118e <xQueueReceive+0x6e>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d101      	bne.n	8001192 <xQueueReceive+0x72>
 800118e:	2301      	movs	r3, #1
 8001190:	e000      	b.n	8001194 <xQueueReceive+0x74>
 8001192:	2300      	movs	r3, #0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d10a      	bne.n	80011ae <xQueueReceive+0x8e>
	__asm volatile
 8001198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800119c:	f383 8811 	msr	BASEPRI, r3
 80011a0:	f3bf 8f6f 	isb	sy
 80011a4:	f3bf 8f4f 	dsb	sy
 80011a8:	61bb      	str	r3, [r7, #24]
}
 80011aa:	bf00      	nop
 80011ac:	e7fe      	b.n	80011ac <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80011ae:	f001 fd81 	bl	8002cb4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80011b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011b6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80011b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d01f      	beq.n	80011fe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80011be:	68b9      	ldr	r1, [r7, #8]
 80011c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80011c2:	f000 f8f7 	bl	80013b4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80011c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c8:	1e5a      	subs	r2, r3, #1
 80011ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011cc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80011ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011d0:	691b      	ldr	r3, [r3, #16]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d00f      	beq.n	80011f6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80011d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011d8:	3310      	adds	r3, #16
 80011da:	4618      	mov	r0, r3
 80011dc:	f000 fe4e 	bl	8001e7c <xTaskRemoveFromEventList>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d007      	beq.n	80011f6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80011e6:	4b3d      	ldr	r3, [pc, #244]	; (80012dc <xQueueReceive+0x1bc>)
 80011e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	f3bf 8f4f 	dsb	sy
 80011f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80011f6:	f001 fd8d 	bl	8002d14 <vPortExitCritical>
				return pdPASS;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e069      	b.n	80012d2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d103      	bne.n	800120c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001204:	f001 fd86 	bl	8002d14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8001208:	2300      	movs	r3, #0
 800120a:	e062      	b.n	80012d2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800120c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800120e:	2b00      	cmp	r3, #0
 8001210:	d106      	bne.n	8001220 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001212:	f107 0310 	add.w	r3, r7, #16
 8001216:	4618      	mov	r0, r3
 8001218:	f000 fe94 	bl	8001f44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800121c:	2301      	movs	r3, #1
 800121e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001220:	f001 fd78 	bl	8002d14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001224:	f000 fc06 	bl	8001a34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001228:	f001 fd44 	bl	8002cb4 <vPortEnterCritical>
 800122c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800122e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001232:	b25b      	sxtb	r3, r3
 8001234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001238:	d103      	bne.n	8001242 <xQueueReceive+0x122>
 800123a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800123c:	2200      	movs	r2, #0
 800123e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001244:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001248:	b25b      	sxtb	r3, r3
 800124a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800124e:	d103      	bne.n	8001258 <xQueueReceive+0x138>
 8001250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001252:	2200      	movs	r2, #0
 8001254:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001258:	f001 fd5c 	bl	8002d14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800125c:	1d3a      	adds	r2, r7, #4
 800125e:	f107 0310 	add.w	r3, r7, #16
 8001262:	4611      	mov	r1, r2
 8001264:	4618      	mov	r0, r3
 8001266:	f000 fe83 	bl	8001f70 <xTaskCheckForTimeOut>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d123      	bne.n	80012b8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001270:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001272:	f000 f917 	bl	80014a4 <prvIsQueueEmpty>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d017      	beq.n	80012ac <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800127c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800127e:	3324      	adds	r3, #36	; 0x24
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	4611      	mov	r1, r2
 8001284:	4618      	mov	r0, r3
 8001286:	f000 fda9 	bl	8001ddc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800128a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800128c:	f000 f8b8 	bl	8001400 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001290:	f000 fbde 	bl	8001a50 <xTaskResumeAll>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d189      	bne.n	80011ae <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800129a:	4b10      	ldr	r3, [pc, #64]	; (80012dc <xQueueReceive+0x1bc>)
 800129c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	f3bf 8f4f 	dsb	sy
 80012a6:	f3bf 8f6f 	isb	sy
 80012aa:	e780      	b.n	80011ae <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80012ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80012ae:	f000 f8a7 	bl	8001400 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80012b2:	f000 fbcd 	bl	8001a50 <xTaskResumeAll>
 80012b6:	e77a      	b.n	80011ae <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80012b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80012ba:	f000 f8a1 	bl	8001400 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80012be:	f000 fbc7 	bl	8001a50 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80012c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80012c4:	f000 f8ee 	bl	80014a4 <prvIsQueueEmpty>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	f43f af6f 	beq.w	80011ae <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80012d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3730      	adds	r7, #48	; 0x30
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	e000ed04 	.word	0xe000ed04

080012e0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80012ec:	2300      	movs	r3, #0
 80012ee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012f4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d10d      	bne.n	800131a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d14d      	bne.n	80013a2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	4618      	mov	r0, r3
 800130c:	f000 ff92 	bl	8002234 <xTaskPriorityDisinherit>
 8001310:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	2200      	movs	r2, #0
 8001316:	609a      	str	r2, [r3, #8]
 8001318:	e043      	b.n	80013a2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d119      	bne.n	8001354 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	6858      	ldr	r0, [r3, #4]
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001328:	461a      	mov	r2, r3
 800132a:	68b9      	ldr	r1, [r7, #8]
 800132c:	f005 ff8a 	bl	8007244 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	685a      	ldr	r2, [r3, #4]
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001338:	441a      	add	r2, r3
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	685a      	ldr	r2, [r3, #4]
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	429a      	cmp	r2, r3
 8001348:	d32b      	bcc.n	80013a2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	e026      	b.n	80013a2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	68d8      	ldr	r0, [r3, #12]
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135c:	461a      	mov	r2, r3
 800135e:	68b9      	ldr	r1, [r7, #8]
 8001360:	f005 ff70 	bl	8007244 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	68da      	ldr	r2, [r3, #12]
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136c:	425b      	negs	r3, r3
 800136e:	441a      	add	r2, r3
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	68da      	ldr	r2, [r3, #12]
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	429a      	cmp	r2, r3
 800137e:	d207      	bcs.n	8001390 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	689a      	ldr	r2, [r3, #8]
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001388:	425b      	negs	r3, r3
 800138a:	441a      	add	r2, r3
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2b02      	cmp	r3, #2
 8001394:	d105      	bne.n	80013a2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d002      	beq.n	80013a2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	3b01      	subs	r3, #1
 80013a0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	1c5a      	adds	r2, r3, #1
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80013aa:	697b      	ldr	r3, [r7, #20]
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3718      	adds	r7, #24
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d018      	beq.n	80013f8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	68da      	ldr	r2, [r3, #12]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ce:	441a      	add	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	68da      	ldr	r2, [r3, #12]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	429a      	cmp	r2, r3
 80013de:	d303      	bcc.n	80013e8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	68d9      	ldr	r1, [r3, #12]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f0:	461a      	mov	r2, r3
 80013f2:	6838      	ldr	r0, [r7, #0]
 80013f4:	f005 ff26 	bl	8007244 <memcpy>
	}
}
 80013f8:	bf00      	nop
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}

08001400 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8001408:	f001 fc54 	bl	8002cb4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001412:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001414:	e011      	b.n	800143a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800141a:	2b00      	cmp	r3, #0
 800141c:	d012      	beq.n	8001444 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	3324      	adds	r3, #36	; 0x24
 8001422:	4618      	mov	r0, r3
 8001424:	f000 fd2a 	bl	8001e7c <xTaskRemoveFromEventList>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800142e:	f000 fe01 	bl	8002034 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8001432:	7bfb      	ldrb	r3, [r7, #15]
 8001434:	3b01      	subs	r3, #1
 8001436:	b2db      	uxtb	r3, r3
 8001438:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800143a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800143e:	2b00      	cmp	r3, #0
 8001440:	dce9      	bgt.n	8001416 <prvUnlockQueue+0x16>
 8001442:	e000      	b.n	8001446 <prvUnlockQueue+0x46>
					break;
 8001444:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	22ff      	movs	r2, #255	; 0xff
 800144a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800144e:	f001 fc61 	bl	8002d14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8001452:	f001 fc2f 	bl	8002cb4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800145c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800145e:	e011      	b.n	8001484 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	691b      	ldr	r3, [r3, #16]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d012      	beq.n	800148e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	3310      	adds	r3, #16
 800146c:	4618      	mov	r0, r3
 800146e:	f000 fd05 	bl	8001e7c <xTaskRemoveFromEventList>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8001478:	f000 fddc 	bl	8002034 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800147c:	7bbb      	ldrb	r3, [r7, #14]
 800147e:	3b01      	subs	r3, #1
 8001480:	b2db      	uxtb	r3, r3
 8001482:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001484:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001488:	2b00      	cmp	r3, #0
 800148a:	dce9      	bgt.n	8001460 <prvUnlockQueue+0x60>
 800148c:	e000      	b.n	8001490 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800148e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	22ff      	movs	r2, #255	; 0xff
 8001494:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8001498:	f001 fc3c 	bl	8002d14 <vPortExitCritical>
}
 800149c:	bf00      	nop
 800149e:	3710      	adds	r7, #16
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80014ac:	f001 fc02 	bl	8002cb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d102      	bne.n	80014be <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80014b8:	2301      	movs	r3, #1
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	e001      	b.n	80014c2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80014be:	2300      	movs	r3, #0
 80014c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80014c2:	f001 fc27 	bl	8002d14 <vPortExitCritical>

	return xReturn;
 80014c6:	68fb      	ldr	r3, [r7, #12]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3710      	adds	r7, #16
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80014d8:	f001 fbec 	bl	8002cb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d102      	bne.n	80014ee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80014e8:	2301      	movs	r3, #1
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	e001      	b.n	80014f2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80014ee:	2300      	movs	r3, #0
 80014f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80014f2:	f001 fc0f 	bl	8002d14 <vPortExitCritical>

	return xReturn;
 80014f6:	68fb      	ldr	r3, [r7, #12]
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3710      	adds	r7, #16
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8001500:	b480      	push	{r7}
 8001502:	b085      	sub	sp, #20
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800150a:	2300      	movs	r3, #0
 800150c:	60fb      	str	r3, [r7, #12]
 800150e:	e014      	b.n	800153a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8001510:	4a0f      	ldr	r2, [pc, #60]	; (8001550 <vQueueAddToRegistry+0x50>)
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d10b      	bne.n	8001534 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800151c:	490c      	ldr	r1, [pc, #48]	; (8001550 <vQueueAddToRegistry+0x50>)
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	683a      	ldr	r2, [r7, #0]
 8001522:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8001526:	4a0a      	ldr	r2, [pc, #40]	; (8001550 <vQueueAddToRegistry+0x50>)
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	00db      	lsls	r3, r3, #3
 800152c:	4413      	add	r3, r2
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8001532:	e006      	b.n	8001542 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	3301      	adds	r3, #1
 8001538:	60fb      	str	r3, [r7, #12]
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	2b07      	cmp	r3, #7
 800153e:	d9e7      	bls.n	8001510 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8001540:	bf00      	nop
 8001542:	bf00      	nop
 8001544:	3714      	adds	r7, #20
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	200019a0 	.word	0x200019a0

08001554 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8001564:	f001 fba6 	bl	8002cb4 <vPortEnterCritical>
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800156e:	b25b      	sxtb	r3, r3
 8001570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001574:	d103      	bne.n	800157e <vQueueWaitForMessageRestricted+0x2a>
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	2200      	movs	r2, #0
 800157a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001584:	b25b      	sxtb	r3, r3
 8001586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800158a:	d103      	bne.n	8001594 <vQueueWaitForMessageRestricted+0x40>
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	2200      	movs	r2, #0
 8001590:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001594:	f001 fbbe 	bl	8002d14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800159c:	2b00      	cmp	r3, #0
 800159e:	d106      	bne.n	80015ae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	3324      	adds	r3, #36	; 0x24
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	68b9      	ldr	r1, [r7, #8]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f000 fc3b 	bl	8001e24 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80015ae:	6978      	ldr	r0, [r7, #20]
 80015b0:	f7ff ff26 	bl	8001400 <prvUnlockQueue>
	}
 80015b4:	bf00      	nop
 80015b6:	3718      	adds	r7, #24
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b08e      	sub	sp, #56	; 0x38
 80015c0:	af04      	add	r7, sp, #16
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	607a      	str	r2, [r7, #4]
 80015c8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80015ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d10a      	bne.n	80015e6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80015d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015d4:	f383 8811 	msr	BASEPRI, r3
 80015d8:	f3bf 8f6f 	isb	sy
 80015dc:	f3bf 8f4f 	dsb	sy
 80015e0:	623b      	str	r3, [r7, #32]
}
 80015e2:	bf00      	nop
 80015e4:	e7fe      	b.n	80015e4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80015e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d10a      	bne.n	8001602 <xTaskCreateStatic+0x46>
	__asm volatile
 80015ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015f0:	f383 8811 	msr	BASEPRI, r3
 80015f4:	f3bf 8f6f 	isb	sy
 80015f8:	f3bf 8f4f 	dsb	sy
 80015fc:	61fb      	str	r3, [r7, #28]
}
 80015fe:	bf00      	nop
 8001600:	e7fe      	b.n	8001600 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8001602:	235c      	movs	r3, #92	; 0x5c
 8001604:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	2b5c      	cmp	r3, #92	; 0x5c
 800160a:	d00a      	beq.n	8001622 <xTaskCreateStatic+0x66>
	__asm volatile
 800160c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001610:	f383 8811 	msr	BASEPRI, r3
 8001614:	f3bf 8f6f 	isb	sy
 8001618:	f3bf 8f4f 	dsb	sy
 800161c:	61bb      	str	r3, [r7, #24]
}
 800161e:	bf00      	nop
 8001620:	e7fe      	b.n	8001620 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8001622:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8001624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001626:	2b00      	cmp	r3, #0
 8001628:	d01e      	beq.n	8001668 <xTaskCreateStatic+0xac>
 800162a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800162c:	2b00      	cmp	r3, #0
 800162e:	d01b      	beq.n	8001668 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001632:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001636:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001638:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800163a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163c:	2202      	movs	r2, #2
 800163e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001642:	2300      	movs	r3, #0
 8001644:	9303      	str	r3, [sp, #12]
 8001646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001648:	9302      	str	r3, [sp, #8]
 800164a:	f107 0314 	add.w	r3, r7, #20
 800164e:	9301      	str	r3, [sp, #4]
 8001650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001652:	9300      	str	r3, [sp, #0]
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	68b9      	ldr	r1, [r7, #8]
 800165a:	68f8      	ldr	r0, [r7, #12]
 800165c:	f000 f850 	bl	8001700 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001660:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001662:	f000 f8dd 	bl	8001820 <prvAddNewTaskToReadyList>
 8001666:	e001      	b.n	800166c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8001668:	2300      	movs	r3, #0
 800166a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800166c:	697b      	ldr	r3, [r7, #20]
	}
 800166e:	4618      	mov	r0, r3
 8001670:	3728      	adds	r7, #40	; 0x28
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001676:	b580      	push	{r7, lr}
 8001678:	b08c      	sub	sp, #48	; 0x30
 800167a:	af04      	add	r7, sp, #16
 800167c:	60f8      	str	r0, [r7, #12]
 800167e:	60b9      	str	r1, [r7, #8]
 8001680:	603b      	str	r3, [r7, #0]
 8001682:	4613      	mov	r3, r2
 8001684:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001686:	88fb      	ldrh	r3, [r7, #6]
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	4618      	mov	r0, r3
 800168c:	f001 fc34 	bl	8002ef8 <pvPortMalloc>
 8001690:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d00e      	beq.n	80016b6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001698:	205c      	movs	r0, #92	; 0x5c
 800169a:	f001 fc2d 	bl	8002ef8 <pvPortMalloc>
 800169e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d003      	beq.n	80016ae <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	697a      	ldr	r2, [r7, #20]
 80016aa:	631a      	str	r2, [r3, #48]	; 0x30
 80016ac:	e005      	b.n	80016ba <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80016ae:	6978      	ldr	r0, [r7, #20]
 80016b0:	f001 fcee 	bl	8003090 <vPortFree>
 80016b4:	e001      	b.n	80016ba <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80016b6:	2300      	movs	r3, #0
 80016b8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d017      	beq.n	80016f0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	2200      	movs	r2, #0
 80016c4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80016c8:	88fa      	ldrh	r2, [r7, #6]
 80016ca:	2300      	movs	r3, #0
 80016cc:	9303      	str	r3, [sp, #12]
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	9302      	str	r3, [sp, #8]
 80016d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016d4:	9301      	str	r3, [sp, #4]
 80016d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016d8:	9300      	str	r3, [sp, #0]
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	68b9      	ldr	r1, [r7, #8]
 80016de:	68f8      	ldr	r0, [r7, #12]
 80016e0:	f000 f80e 	bl	8001700 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80016e4:	69f8      	ldr	r0, [r7, #28]
 80016e6:	f000 f89b 	bl	8001820 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80016ea:	2301      	movs	r3, #1
 80016ec:	61bb      	str	r3, [r7, #24]
 80016ee:	e002      	b.n	80016f6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80016f0:	f04f 33ff 	mov.w	r3, #4294967295
 80016f4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80016f6:	69bb      	ldr	r3, [r7, #24]
	}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3720      	adds	r7, #32
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}

08001700 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b088      	sub	sp, #32
 8001704:	af00      	add	r7, sp, #0
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	60b9      	str	r1, [r7, #8]
 800170a:	607a      	str	r2, [r7, #4]
 800170c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800170e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001710:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	461a      	mov	r2, r3
 8001718:	21a5      	movs	r1, #165	; 0xa5
 800171a:	f005 fda1 	bl	8007260 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800171e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001720:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001728:	3b01      	subs	r3, #1
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	4413      	add	r3, r2
 800172e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	f023 0307 	bic.w	r3, r3, #7
 8001736:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	f003 0307 	and.w	r3, r3, #7
 800173e:	2b00      	cmp	r3, #0
 8001740:	d00a      	beq.n	8001758 <prvInitialiseNewTask+0x58>
	__asm volatile
 8001742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001746:	f383 8811 	msr	BASEPRI, r3
 800174a:	f3bf 8f6f 	isb	sy
 800174e:	f3bf 8f4f 	dsb	sy
 8001752:	617b      	str	r3, [r7, #20]
}
 8001754:	bf00      	nop
 8001756:	e7fe      	b.n	8001756 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d01f      	beq.n	800179e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800175e:	2300      	movs	r3, #0
 8001760:	61fb      	str	r3, [r7, #28]
 8001762:	e012      	b.n	800178a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001764:	68ba      	ldr	r2, [r7, #8]
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	4413      	add	r3, r2
 800176a:	7819      	ldrb	r1, [r3, #0]
 800176c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	4413      	add	r3, r2
 8001772:	3334      	adds	r3, #52	; 0x34
 8001774:	460a      	mov	r2, r1
 8001776:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8001778:	68ba      	ldr	r2, [r7, #8]
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	4413      	add	r3, r2
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d006      	beq.n	8001792 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	3301      	adds	r3, #1
 8001788:	61fb      	str	r3, [r7, #28]
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	2b0f      	cmp	r3, #15
 800178e:	d9e9      	bls.n	8001764 <prvInitialiseNewTask+0x64>
 8001790:	e000      	b.n	8001794 <prvInitialiseNewTask+0x94>
			{
				break;
 8001792:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001796:	2200      	movs	r2, #0
 8001798:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800179c:	e003      	b.n	80017a6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800179e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017a0:	2200      	movs	r2, #0
 80017a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80017a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017a8:	2b37      	cmp	r3, #55	; 0x37
 80017aa:	d901      	bls.n	80017b0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80017ac:	2337      	movs	r3, #55	; 0x37
 80017ae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80017b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80017b4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80017b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80017ba:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80017bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017be:	2200      	movs	r2, #0
 80017c0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80017c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017c4:	3304      	adds	r3, #4
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff f978 	bl	8000abc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80017cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017ce:	3318      	adds	r3, #24
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff f973 	bl	8000abc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80017d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80017da:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80017dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017de:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80017e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017e4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80017e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80017ea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80017ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017ee:	2200      	movs	r2, #0
 80017f0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80017f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017f4:	2200      	movs	r2, #0
 80017f6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80017fa:	683a      	ldr	r2, [r7, #0]
 80017fc:	68f9      	ldr	r1, [r7, #12]
 80017fe:	69b8      	ldr	r0, [r7, #24]
 8001800:	f001 f928 	bl	8002a54 <pxPortInitialiseStack>
 8001804:	4602      	mov	r2, r0
 8001806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001808:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800180a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800180c:	2b00      	cmp	r3, #0
 800180e:	d002      	beq.n	8001816 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001812:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001814:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001816:	bf00      	nop
 8001818:	3720      	adds	r7, #32
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
	...

08001820 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001828:	f001 fa44 	bl	8002cb4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800182c:	4b2d      	ldr	r3, [pc, #180]	; (80018e4 <prvAddNewTaskToReadyList+0xc4>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	3301      	adds	r3, #1
 8001832:	4a2c      	ldr	r2, [pc, #176]	; (80018e4 <prvAddNewTaskToReadyList+0xc4>)
 8001834:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001836:	4b2c      	ldr	r3, [pc, #176]	; (80018e8 <prvAddNewTaskToReadyList+0xc8>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d109      	bne.n	8001852 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800183e:	4a2a      	ldr	r2, [pc, #168]	; (80018e8 <prvAddNewTaskToReadyList+0xc8>)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001844:	4b27      	ldr	r3, [pc, #156]	; (80018e4 <prvAddNewTaskToReadyList+0xc4>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d110      	bne.n	800186e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800184c:	f000 fc16 	bl	800207c <prvInitialiseTaskLists>
 8001850:	e00d      	b.n	800186e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001852:	4b26      	ldr	r3, [pc, #152]	; (80018ec <prvAddNewTaskToReadyList+0xcc>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d109      	bne.n	800186e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800185a:	4b23      	ldr	r3, [pc, #140]	; (80018e8 <prvAddNewTaskToReadyList+0xc8>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001864:	429a      	cmp	r2, r3
 8001866:	d802      	bhi.n	800186e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001868:	4a1f      	ldr	r2, [pc, #124]	; (80018e8 <prvAddNewTaskToReadyList+0xc8>)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800186e:	4b20      	ldr	r3, [pc, #128]	; (80018f0 <prvAddNewTaskToReadyList+0xd0>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	3301      	adds	r3, #1
 8001874:	4a1e      	ldr	r2, [pc, #120]	; (80018f0 <prvAddNewTaskToReadyList+0xd0>)
 8001876:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001878:	4b1d      	ldr	r3, [pc, #116]	; (80018f0 <prvAddNewTaskToReadyList+0xd0>)
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001884:	4b1b      	ldr	r3, [pc, #108]	; (80018f4 <prvAddNewTaskToReadyList+0xd4>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	429a      	cmp	r2, r3
 800188a:	d903      	bls.n	8001894 <prvAddNewTaskToReadyList+0x74>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001890:	4a18      	ldr	r2, [pc, #96]	; (80018f4 <prvAddNewTaskToReadyList+0xd4>)
 8001892:	6013      	str	r3, [r2, #0]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001898:	4613      	mov	r3, r2
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	4413      	add	r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	4a15      	ldr	r2, [pc, #84]	; (80018f8 <prvAddNewTaskToReadyList+0xd8>)
 80018a2:	441a      	add	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	3304      	adds	r3, #4
 80018a8:	4619      	mov	r1, r3
 80018aa:	4610      	mov	r0, r2
 80018ac:	f7ff f913 	bl	8000ad6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80018b0:	f001 fa30 	bl	8002d14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80018b4:	4b0d      	ldr	r3, [pc, #52]	; (80018ec <prvAddNewTaskToReadyList+0xcc>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d00e      	beq.n	80018da <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80018bc:	4b0a      	ldr	r3, [pc, #40]	; (80018e8 <prvAddNewTaskToReadyList+0xc8>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d207      	bcs.n	80018da <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80018ca:	4b0c      	ldr	r3, [pc, #48]	; (80018fc <prvAddNewTaskToReadyList+0xdc>)
 80018cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80018d0:	601a      	str	r2, [r3, #0]
 80018d2:	f3bf 8f4f 	dsb	sy
 80018d6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80018da:	bf00      	nop
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	20000c2c 	.word	0x20000c2c
 80018e8:	20000758 	.word	0x20000758
 80018ec:	20000c38 	.word	0x20000c38
 80018f0:	20000c48 	.word	0x20000c48
 80018f4:	20000c34 	.word	0x20000c34
 80018f8:	2000075c 	.word	0x2000075c
 80018fc:	e000ed04 	.word	0xe000ed04

08001900 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001908:	2300      	movs	r3, #0
 800190a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d017      	beq.n	8001942 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8001912:	4b13      	ldr	r3, [pc, #76]	; (8001960 <vTaskDelay+0x60>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d00a      	beq.n	8001930 <vTaskDelay+0x30>
	__asm volatile
 800191a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800191e:	f383 8811 	msr	BASEPRI, r3
 8001922:	f3bf 8f6f 	isb	sy
 8001926:	f3bf 8f4f 	dsb	sy
 800192a:	60bb      	str	r3, [r7, #8]
}
 800192c:	bf00      	nop
 800192e:	e7fe      	b.n	800192e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8001930:	f000 f880 	bl	8001a34 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001934:	2100      	movs	r1, #0
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f000 fcea 	bl	8002310 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800193c:	f000 f888 	bl	8001a50 <xTaskResumeAll>
 8001940:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d107      	bne.n	8001958 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8001948:	4b06      	ldr	r3, [pc, #24]	; (8001964 <vTaskDelay+0x64>)
 800194a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	f3bf 8f4f 	dsb	sy
 8001954:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001958:	bf00      	nop
 800195a:	3710      	adds	r7, #16
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	20000c54 	.word	0x20000c54
 8001964:	e000ed04 	.word	0xe000ed04

08001968 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b08a      	sub	sp, #40	; 0x28
 800196c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800196e:	2300      	movs	r3, #0
 8001970:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8001972:	2300      	movs	r3, #0
 8001974:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8001976:	463a      	mov	r2, r7
 8001978:	1d39      	adds	r1, r7, #4
 800197a:	f107 0308 	add.w	r3, r7, #8
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff f848 	bl	8000a14 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8001984:	6839      	ldr	r1, [r7, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	68ba      	ldr	r2, [r7, #8]
 800198a:	9202      	str	r2, [sp, #8]
 800198c:	9301      	str	r3, [sp, #4]
 800198e:	2300      	movs	r3, #0
 8001990:	9300      	str	r3, [sp, #0]
 8001992:	2300      	movs	r3, #0
 8001994:	460a      	mov	r2, r1
 8001996:	4921      	ldr	r1, [pc, #132]	; (8001a1c <vTaskStartScheduler+0xb4>)
 8001998:	4821      	ldr	r0, [pc, #132]	; (8001a20 <vTaskStartScheduler+0xb8>)
 800199a:	f7ff fe0f 	bl	80015bc <xTaskCreateStatic>
 800199e:	4603      	mov	r3, r0
 80019a0:	4a20      	ldr	r2, [pc, #128]	; (8001a24 <vTaskStartScheduler+0xbc>)
 80019a2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80019a4:	4b1f      	ldr	r3, [pc, #124]	; (8001a24 <vTaskStartScheduler+0xbc>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d002      	beq.n	80019b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80019ac:	2301      	movs	r3, #1
 80019ae:	617b      	str	r3, [r7, #20]
 80019b0:	e001      	b.n	80019b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80019b2:	2300      	movs	r3, #0
 80019b4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d102      	bne.n	80019c2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80019bc:	f000 fcfc 	bl	80023b8 <xTimerCreateTimerTask>
 80019c0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d116      	bne.n	80019f6 <vTaskStartScheduler+0x8e>
	__asm volatile
 80019c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019cc:	f383 8811 	msr	BASEPRI, r3
 80019d0:	f3bf 8f6f 	isb	sy
 80019d4:	f3bf 8f4f 	dsb	sy
 80019d8:	613b      	str	r3, [r7, #16]
}
 80019da:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80019dc:	4b12      	ldr	r3, [pc, #72]	; (8001a28 <vTaskStartScheduler+0xc0>)
 80019de:	f04f 32ff 	mov.w	r2, #4294967295
 80019e2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80019e4:	4b11      	ldr	r3, [pc, #68]	; (8001a2c <vTaskStartScheduler+0xc4>)
 80019e6:	2201      	movs	r2, #1
 80019e8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80019ea:	4b11      	ldr	r3, [pc, #68]	; (8001a30 <vTaskStartScheduler+0xc8>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80019f0:	f001 f8be 	bl	8002b70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80019f4:	e00e      	b.n	8001a14 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019fc:	d10a      	bne.n	8001a14 <vTaskStartScheduler+0xac>
	__asm volatile
 80019fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a02:	f383 8811 	msr	BASEPRI, r3
 8001a06:	f3bf 8f6f 	isb	sy
 8001a0a:	f3bf 8f4f 	dsb	sy
 8001a0e:	60fb      	str	r3, [r7, #12]
}
 8001a10:	bf00      	nop
 8001a12:	e7fe      	b.n	8001a12 <vTaskStartScheduler+0xaa>
}
 8001a14:	bf00      	nop
 8001a16:	3718      	adds	r7, #24
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	08007378 	.word	0x08007378
 8001a20:	0800204d 	.word	0x0800204d
 8001a24:	20000c50 	.word	0x20000c50
 8001a28:	20000c4c 	.word	0x20000c4c
 8001a2c:	20000c38 	.word	0x20000c38
 8001a30:	20000c30 	.word	0x20000c30

08001a34 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8001a38:	4b04      	ldr	r3, [pc, #16]	; (8001a4c <vTaskSuspendAll+0x18>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	4a03      	ldr	r2, [pc, #12]	; (8001a4c <vTaskSuspendAll+0x18>)
 8001a40:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8001a42:	bf00      	nop
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr
 8001a4c:	20000c54 	.word	0x20000c54

08001a50 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001a56:	2300      	movs	r3, #0
 8001a58:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001a5e:	4b42      	ldr	r3, [pc, #264]	; (8001b68 <xTaskResumeAll+0x118>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d10a      	bne.n	8001a7c <xTaskResumeAll+0x2c>
	__asm volatile
 8001a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a6a:	f383 8811 	msr	BASEPRI, r3
 8001a6e:	f3bf 8f6f 	isb	sy
 8001a72:	f3bf 8f4f 	dsb	sy
 8001a76:	603b      	str	r3, [r7, #0]
}
 8001a78:	bf00      	nop
 8001a7a:	e7fe      	b.n	8001a7a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001a7c:	f001 f91a 	bl	8002cb4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001a80:	4b39      	ldr	r3, [pc, #228]	; (8001b68 <xTaskResumeAll+0x118>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	3b01      	subs	r3, #1
 8001a86:	4a38      	ldr	r2, [pc, #224]	; (8001b68 <xTaskResumeAll+0x118>)
 8001a88:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001a8a:	4b37      	ldr	r3, [pc, #220]	; (8001b68 <xTaskResumeAll+0x118>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d162      	bne.n	8001b58 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001a92:	4b36      	ldr	r3, [pc, #216]	; (8001b6c <xTaskResumeAll+0x11c>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d05e      	beq.n	8001b58 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001a9a:	e02f      	b.n	8001afc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001a9c:	4b34      	ldr	r3, [pc, #208]	; (8001b70 <xTaskResumeAll+0x120>)
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	3318      	adds	r3, #24
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff f871 	bl	8000b90 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	3304      	adds	r3, #4
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7ff f86c 	bl	8000b90 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001abc:	4b2d      	ldr	r3, [pc, #180]	; (8001b74 <xTaskResumeAll+0x124>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d903      	bls.n	8001acc <xTaskResumeAll+0x7c>
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac8:	4a2a      	ldr	r2, [pc, #168]	; (8001b74 <xTaskResumeAll+0x124>)
 8001aca:	6013      	str	r3, [r2, #0]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	4413      	add	r3, r2
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	4a27      	ldr	r2, [pc, #156]	; (8001b78 <xTaskResumeAll+0x128>)
 8001ada:	441a      	add	r2, r3
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	3304      	adds	r3, #4
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4610      	mov	r0, r2
 8001ae4:	f7fe fff7 	bl	8000ad6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001aec:	4b23      	ldr	r3, [pc, #140]	; (8001b7c <xTaskResumeAll+0x12c>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d302      	bcc.n	8001afc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8001af6:	4b22      	ldr	r3, [pc, #136]	; (8001b80 <xTaskResumeAll+0x130>)
 8001af8:	2201      	movs	r2, #1
 8001afa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001afc:	4b1c      	ldr	r3, [pc, #112]	; (8001b70 <xTaskResumeAll+0x120>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d1cb      	bne.n	8001a9c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001b0a:	f000 fb55 	bl	80021b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001b0e:	4b1d      	ldr	r3, [pc, #116]	; (8001b84 <xTaskResumeAll+0x134>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d010      	beq.n	8001b3c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001b1a:	f000 f847 	bl	8001bac <xTaskIncrementTick>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d002      	beq.n	8001b2a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8001b24:	4b16      	ldr	r3, [pc, #88]	; (8001b80 <xTaskResumeAll+0x130>)
 8001b26:	2201      	movs	r2, #1
 8001b28:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	3b01      	subs	r3, #1
 8001b2e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d1f1      	bne.n	8001b1a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8001b36:	4b13      	ldr	r3, [pc, #76]	; (8001b84 <xTaskResumeAll+0x134>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001b3c:	4b10      	ldr	r3, [pc, #64]	; (8001b80 <xTaskResumeAll+0x130>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d009      	beq.n	8001b58 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001b44:	2301      	movs	r3, #1
 8001b46:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001b48:	4b0f      	ldr	r3, [pc, #60]	; (8001b88 <xTaskResumeAll+0x138>)
 8001b4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	f3bf 8f4f 	dsb	sy
 8001b54:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001b58:	f001 f8dc 	bl	8002d14 <vPortExitCritical>

	return xAlreadyYielded;
 8001b5c:	68bb      	ldr	r3, [r7, #8]
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	20000c54 	.word	0x20000c54
 8001b6c:	20000c2c 	.word	0x20000c2c
 8001b70:	20000bec 	.word	0x20000bec
 8001b74:	20000c34 	.word	0x20000c34
 8001b78:	2000075c 	.word	0x2000075c
 8001b7c:	20000758 	.word	0x20000758
 8001b80:	20000c40 	.word	0x20000c40
 8001b84:	20000c3c 	.word	0x20000c3c
 8001b88:	e000ed04 	.word	0xe000ed04

08001b8c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8001b92:	4b05      	ldr	r3, [pc, #20]	; (8001ba8 <xTaskGetTickCount+0x1c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8001b98:	687b      	ldr	r3, [r7, #4]
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	20000c30 	.word	0x20000c30

08001bac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001bb6:	4b4f      	ldr	r3, [pc, #316]	; (8001cf4 <xTaskIncrementTick+0x148>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	f040 808f 	bne.w	8001cde <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001bc0:	4b4d      	ldr	r3, [pc, #308]	; (8001cf8 <xTaskIncrementTick+0x14c>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001bc8:	4a4b      	ldr	r2, [pc, #300]	; (8001cf8 <xTaskIncrementTick+0x14c>)
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d120      	bne.n	8001c16 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8001bd4:	4b49      	ldr	r3, [pc, #292]	; (8001cfc <xTaskIncrementTick+0x150>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d00a      	beq.n	8001bf4 <xTaskIncrementTick+0x48>
	__asm volatile
 8001bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001be2:	f383 8811 	msr	BASEPRI, r3
 8001be6:	f3bf 8f6f 	isb	sy
 8001bea:	f3bf 8f4f 	dsb	sy
 8001bee:	603b      	str	r3, [r7, #0]
}
 8001bf0:	bf00      	nop
 8001bf2:	e7fe      	b.n	8001bf2 <xTaskIncrementTick+0x46>
 8001bf4:	4b41      	ldr	r3, [pc, #260]	; (8001cfc <xTaskIncrementTick+0x150>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	60fb      	str	r3, [r7, #12]
 8001bfa:	4b41      	ldr	r3, [pc, #260]	; (8001d00 <xTaskIncrementTick+0x154>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a3f      	ldr	r2, [pc, #252]	; (8001cfc <xTaskIncrementTick+0x150>)
 8001c00:	6013      	str	r3, [r2, #0]
 8001c02:	4a3f      	ldr	r2, [pc, #252]	; (8001d00 <xTaskIncrementTick+0x154>)
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	6013      	str	r3, [r2, #0]
 8001c08:	4b3e      	ldr	r3, [pc, #248]	; (8001d04 <xTaskIncrementTick+0x158>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	4a3d      	ldr	r2, [pc, #244]	; (8001d04 <xTaskIncrementTick+0x158>)
 8001c10:	6013      	str	r3, [r2, #0]
 8001c12:	f000 fad1 	bl	80021b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001c16:	4b3c      	ldr	r3, [pc, #240]	; (8001d08 <xTaskIncrementTick+0x15c>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d349      	bcc.n	8001cb4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001c20:	4b36      	ldr	r3, [pc, #216]	; (8001cfc <xTaskIncrementTick+0x150>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d104      	bne.n	8001c34 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001c2a:	4b37      	ldr	r3, [pc, #220]	; (8001d08 <xTaskIncrementTick+0x15c>)
 8001c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c30:	601a      	str	r2, [r3, #0]
					break;
 8001c32:	e03f      	b.n	8001cb4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001c34:	4b31      	ldr	r3, [pc, #196]	; (8001cfc <xTaskIncrementTick+0x150>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001c44:	693a      	ldr	r2, [r7, #16]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d203      	bcs.n	8001c54 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001c4c:	4a2e      	ldr	r2, [pc, #184]	; (8001d08 <xTaskIncrementTick+0x15c>)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001c52:	e02f      	b.n	8001cb4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	3304      	adds	r3, #4
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7fe ff99 	bl	8000b90 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d004      	beq.n	8001c70 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	3318      	adds	r3, #24
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7fe ff90 	bl	8000b90 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c74:	4b25      	ldr	r3, [pc, #148]	; (8001d0c <xTaskIncrementTick+0x160>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d903      	bls.n	8001c84 <xTaskIncrementTick+0xd8>
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c80:	4a22      	ldr	r2, [pc, #136]	; (8001d0c <xTaskIncrementTick+0x160>)
 8001c82:	6013      	str	r3, [r2, #0]
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c88:	4613      	mov	r3, r2
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	4413      	add	r3, r2
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	4a1f      	ldr	r2, [pc, #124]	; (8001d10 <xTaskIncrementTick+0x164>)
 8001c92:	441a      	add	r2, r3
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	3304      	adds	r3, #4
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4610      	mov	r0, r2
 8001c9c:	f7fe ff1b 	bl	8000ad6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ca4:	4b1b      	ldr	r3, [pc, #108]	; (8001d14 <xTaskIncrementTick+0x168>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d3b8      	bcc.n	8001c20 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001cb2:	e7b5      	b.n	8001c20 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001cb4:	4b17      	ldr	r3, [pc, #92]	; (8001d14 <xTaskIncrementTick+0x168>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cba:	4915      	ldr	r1, [pc, #84]	; (8001d10 <xTaskIncrementTick+0x164>)
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	4413      	add	r3, r2
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	440b      	add	r3, r1
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d901      	bls.n	8001cd0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8001cd0:	4b11      	ldr	r3, [pc, #68]	; (8001d18 <xTaskIncrementTick+0x16c>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d007      	beq.n	8001ce8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	617b      	str	r3, [r7, #20]
 8001cdc:	e004      	b.n	8001ce8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8001cde:	4b0f      	ldr	r3, [pc, #60]	; (8001d1c <xTaskIncrementTick+0x170>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	4a0d      	ldr	r2, [pc, #52]	; (8001d1c <xTaskIncrementTick+0x170>)
 8001ce6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8001ce8:	697b      	ldr	r3, [r7, #20]
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3718      	adds	r7, #24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	20000c54 	.word	0x20000c54
 8001cf8:	20000c30 	.word	0x20000c30
 8001cfc:	20000be4 	.word	0x20000be4
 8001d00:	20000be8 	.word	0x20000be8
 8001d04:	20000c44 	.word	0x20000c44
 8001d08:	20000c4c 	.word	0x20000c4c
 8001d0c:	20000c34 	.word	0x20000c34
 8001d10:	2000075c 	.word	0x2000075c
 8001d14:	20000758 	.word	0x20000758
 8001d18:	20000c40 	.word	0x20000c40
 8001d1c:	20000c3c 	.word	0x20000c3c

08001d20 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001d26:	4b28      	ldr	r3, [pc, #160]	; (8001dc8 <vTaskSwitchContext+0xa8>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d003      	beq.n	8001d36 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001d2e:	4b27      	ldr	r3, [pc, #156]	; (8001dcc <vTaskSwitchContext+0xac>)
 8001d30:	2201      	movs	r2, #1
 8001d32:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001d34:	e041      	b.n	8001dba <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8001d36:	4b25      	ldr	r3, [pc, #148]	; (8001dcc <vTaskSwitchContext+0xac>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001d3c:	4b24      	ldr	r3, [pc, #144]	; (8001dd0 <vTaskSwitchContext+0xb0>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	60fb      	str	r3, [r7, #12]
 8001d42:	e010      	b.n	8001d66 <vTaskSwitchContext+0x46>
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d10a      	bne.n	8001d60 <vTaskSwitchContext+0x40>
	__asm volatile
 8001d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d4e:	f383 8811 	msr	BASEPRI, r3
 8001d52:	f3bf 8f6f 	isb	sy
 8001d56:	f3bf 8f4f 	dsb	sy
 8001d5a:	607b      	str	r3, [r7, #4]
}
 8001d5c:	bf00      	nop
 8001d5e:	e7fe      	b.n	8001d5e <vTaskSwitchContext+0x3e>
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	3b01      	subs	r3, #1
 8001d64:	60fb      	str	r3, [r7, #12]
 8001d66:	491b      	ldr	r1, [pc, #108]	; (8001dd4 <vTaskSwitchContext+0xb4>)
 8001d68:	68fa      	ldr	r2, [r7, #12]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	4413      	add	r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	440b      	add	r3, r1
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d0e4      	beq.n	8001d44 <vTaskSwitchContext+0x24>
 8001d7a:	68fa      	ldr	r2, [r7, #12]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	4413      	add	r3, r2
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	4a13      	ldr	r2, [pc, #76]	; (8001dd4 <vTaskSwitchContext+0xb4>)
 8001d86:	4413      	add	r3, r2
 8001d88:	60bb      	str	r3, [r7, #8]
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	685a      	ldr	r2, [r3, #4]
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	605a      	str	r2, [r3, #4]
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	685a      	ldr	r2, [r3, #4]
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	3308      	adds	r3, #8
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d104      	bne.n	8001daa <vTaskSwitchContext+0x8a>
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	685a      	ldr	r2, [r3, #4]
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	605a      	str	r2, [r3, #4]
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	4a09      	ldr	r2, [pc, #36]	; (8001dd8 <vTaskSwitchContext+0xb8>)
 8001db2:	6013      	str	r3, [r2, #0]
 8001db4:	4a06      	ldr	r2, [pc, #24]	; (8001dd0 <vTaskSwitchContext+0xb0>)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	6013      	str	r3, [r2, #0]
}
 8001dba:	bf00      	nop
 8001dbc:	3714      	adds	r7, #20
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	20000c54 	.word	0x20000c54
 8001dcc:	20000c40 	.word	0x20000c40
 8001dd0:	20000c34 	.word	0x20000c34
 8001dd4:	2000075c 	.word	0x2000075c
 8001dd8:	20000758 	.word	0x20000758

08001ddc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d10a      	bne.n	8001e02 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8001dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001df0:	f383 8811 	msr	BASEPRI, r3
 8001df4:	f3bf 8f6f 	isb	sy
 8001df8:	f3bf 8f4f 	dsb	sy
 8001dfc:	60fb      	str	r3, [r7, #12]
}
 8001dfe:	bf00      	nop
 8001e00:	e7fe      	b.n	8001e00 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001e02:	4b07      	ldr	r3, [pc, #28]	; (8001e20 <vTaskPlaceOnEventList+0x44>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	3318      	adds	r3, #24
 8001e08:	4619      	mov	r1, r3
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f7fe fe87 	bl	8000b1e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001e10:	2101      	movs	r1, #1
 8001e12:	6838      	ldr	r0, [r7, #0]
 8001e14:	f000 fa7c 	bl	8002310 <prvAddCurrentTaskToDelayedList>
}
 8001e18:	bf00      	nop
 8001e1a:	3710      	adds	r7, #16
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	20000758 	.word	0x20000758

08001e24 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d10a      	bne.n	8001e4c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8001e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e3a:	f383 8811 	msr	BASEPRI, r3
 8001e3e:	f3bf 8f6f 	isb	sy
 8001e42:	f3bf 8f4f 	dsb	sy
 8001e46:	617b      	str	r3, [r7, #20]
}
 8001e48:	bf00      	nop
 8001e4a:	e7fe      	b.n	8001e4a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001e4c:	4b0a      	ldr	r3, [pc, #40]	; (8001e78 <vTaskPlaceOnEventListRestricted+0x54>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	3318      	adds	r3, #24
 8001e52:	4619      	mov	r1, r3
 8001e54:	68f8      	ldr	r0, [r7, #12]
 8001e56:	f7fe fe3e 	bl	8000ad6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d002      	beq.n	8001e66 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8001e60:	f04f 33ff 	mov.w	r3, #4294967295
 8001e64:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001e66:	6879      	ldr	r1, [r7, #4]
 8001e68:	68b8      	ldr	r0, [r7, #8]
 8001e6a:	f000 fa51 	bl	8002310 <prvAddCurrentTaskToDelayedList>
	}
 8001e6e:	bf00      	nop
 8001e70:	3718      	adds	r7, #24
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	20000758 	.word	0x20000758

08001e7c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b086      	sub	sp, #24
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d10a      	bne.n	8001ea8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8001e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e96:	f383 8811 	msr	BASEPRI, r3
 8001e9a:	f3bf 8f6f 	isb	sy
 8001e9e:	f3bf 8f4f 	dsb	sy
 8001ea2:	60fb      	str	r3, [r7, #12]
}
 8001ea4:	bf00      	nop
 8001ea6:	e7fe      	b.n	8001ea6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	3318      	adds	r3, #24
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7fe fe6f 	bl	8000b90 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001eb2:	4b1e      	ldr	r3, [pc, #120]	; (8001f2c <xTaskRemoveFromEventList+0xb0>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d11d      	bne.n	8001ef6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	3304      	adds	r3, #4
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7fe fe66 	bl	8000b90 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ec8:	4b19      	ldr	r3, [pc, #100]	; (8001f30 <xTaskRemoveFromEventList+0xb4>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d903      	bls.n	8001ed8 <xTaskRemoveFromEventList+0x5c>
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed4:	4a16      	ldr	r2, [pc, #88]	; (8001f30 <xTaskRemoveFromEventList+0xb4>)
 8001ed6:	6013      	str	r3, [r2, #0]
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001edc:	4613      	mov	r3, r2
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	4413      	add	r3, r2
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	4a13      	ldr	r2, [pc, #76]	; (8001f34 <xTaskRemoveFromEventList+0xb8>)
 8001ee6:	441a      	add	r2, r3
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	3304      	adds	r3, #4
 8001eec:	4619      	mov	r1, r3
 8001eee:	4610      	mov	r0, r2
 8001ef0:	f7fe fdf1 	bl	8000ad6 <vListInsertEnd>
 8001ef4:	e005      	b.n	8001f02 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	3318      	adds	r3, #24
 8001efa:	4619      	mov	r1, r3
 8001efc:	480e      	ldr	r0, [pc, #56]	; (8001f38 <xTaskRemoveFromEventList+0xbc>)
 8001efe:	f7fe fdea 	bl	8000ad6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f06:	4b0d      	ldr	r3, [pc, #52]	; (8001f3c <xTaskRemoveFromEventList+0xc0>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d905      	bls.n	8001f1c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8001f10:	2301      	movs	r3, #1
 8001f12:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8001f14:	4b0a      	ldr	r3, [pc, #40]	; (8001f40 <xTaskRemoveFromEventList+0xc4>)
 8001f16:	2201      	movs	r2, #1
 8001f18:	601a      	str	r2, [r3, #0]
 8001f1a:	e001      	b.n	8001f20 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8001f20:	697b      	ldr	r3, [r7, #20]
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3718      	adds	r7, #24
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	20000c54 	.word	0x20000c54
 8001f30:	20000c34 	.word	0x20000c34
 8001f34:	2000075c 	.word	0x2000075c
 8001f38:	20000bec 	.word	0x20000bec
 8001f3c:	20000758 	.word	0x20000758
 8001f40:	20000c40 	.word	0x20000c40

08001f44 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001f4c:	4b06      	ldr	r3, [pc, #24]	; (8001f68 <vTaskInternalSetTimeOutState+0x24>)
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8001f54:	4b05      	ldr	r3, [pc, #20]	; (8001f6c <vTaskInternalSetTimeOutState+0x28>)
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	605a      	str	r2, [r3, #4]
}
 8001f5c:	bf00      	nop
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	20000c44 	.word	0x20000c44
 8001f6c:	20000c30 	.word	0x20000c30

08001f70 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b088      	sub	sp, #32
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d10a      	bne.n	8001f96 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8001f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f84:	f383 8811 	msr	BASEPRI, r3
 8001f88:	f3bf 8f6f 	isb	sy
 8001f8c:	f3bf 8f4f 	dsb	sy
 8001f90:	613b      	str	r3, [r7, #16]
}
 8001f92:	bf00      	nop
 8001f94:	e7fe      	b.n	8001f94 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d10a      	bne.n	8001fb2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8001f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fa0:	f383 8811 	msr	BASEPRI, r3
 8001fa4:	f3bf 8f6f 	isb	sy
 8001fa8:	f3bf 8f4f 	dsb	sy
 8001fac:	60fb      	str	r3, [r7, #12]
}
 8001fae:	bf00      	nop
 8001fb0:	e7fe      	b.n	8001fb0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8001fb2:	f000 fe7f 	bl	8002cb4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8001fb6:	4b1d      	ldr	r3, [pc, #116]	; (800202c <xTaskCheckForTimeOut+0xbc>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fce:	d102      	bne.n	8001fd6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	61fb      	str	r3, [r7, #28]
 8001fd4:	e023      	b.n	800201e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	4b15      	ldr	r3, [pc, #84]	; (8002030 <xTaskCheckForTimeOut+0xc0>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d007      	beq.n	8001ff2 <xTaskCheckForTimeOut+0x82>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d302      	bcc.n	8001ff2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8001fec:	2301      	movs	r3, #1
 8001fee:	61fb      	str	r3, [r7, #28]
 8001ff0:	e015      	b.n	800201e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	697a      	ldr	r2, [r7, #20]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d20b      	bcs.n	8002014 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	1ad2      	subs	r2, r2, r3
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f7ff ff9b 	bl	8001f44 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800200e:	2300      	movs	r3, #0
 8002010:	61fb      	str	r3, [r7, #28]
 8002012:	e004      	b.n	800201e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	2200      	movs	r2, #0
 8002018:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800201a:	2301      	movs	r3, #1
 800201c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800201e:	f000 fe79 	bl	8002d14 <vPortExitCritical>

	return xReturn;
 8002022:	69fb      	ldr	r3, [r7, #28]
}
 8002024:	4618      	mov	r0, r3
 8002026:	3720      	adds	r7, #32
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	20000c30 	.word	0x20000c30
 8002030:	20000c44 	.word	0x20000c44

08002034 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002038:	4b03      	ldr	r3, [pc, #12]	; (8002048 <vTaskMissedYield+0x14>)
 800203a:	2201      	movs	r2, #1
 800203c:	601a      	str	r2, [r3, #0]
}
 800203e:	bf00      	nop
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr
 8002048:	20000c40 	.word	0x20000c40

0800204c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002054:	f000 f852 	bl	80020fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002058:	4b06      	ldr	r3, [pc, #24]	; (8002074 <prvIdleTask+0x28>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2b01      	cmp	r3, #1
 800205e:	d9f9      	bls.n	8002054 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002060:	4b05      	ldr	r3, [pc, #20]	; (8002078 <prvIdleTask+0x2c>)
 8002062:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	f3bf 8f4f 	dsb	sy
 800206c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002070:	e7f0      	b.n	8002054 <prvIdleTask+0x8>
 8002072:	bf00      	nop
 8002074:	2000075c 	.word	0x2000075c
 8002078:	e000ed04 	.word	0xe000ed04

0800207c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002082:	2300      	movs	r3, #0
 8002084:	607b      	str	r3, [r7, #4]
 8002086:	e00c      	b.n	80020a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	4613      	mov	r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	4413      	add	r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	4a12      	ldr	r2, [pc, #72]	; (80020dc <prvInitialiseTaskLists+0x60>)
 8002094:	4413      	add	r3, r2
 8002096:	4618      	mov	r0, r3
 8002098:	f7fe fcf0 	bl	8000a7c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	3301      	adds	r3, #1
 80020a0:	607b      	str	r3, [r7, #4]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2b37      	cmp	r3, #55	; 0x37
 80020a6:	d9ef      	bls.n	8002088 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80020a8:	480d      	ldr	r0, [pc, #52]	; (80020e0 <prvInitialiseTaskLists+0x64>)
 80020aa:	f7fe fce7 	bl	8000a7c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80020ae:	480d      	ldr	r0, [pc, #52]	; (80020e4 <prvInitialiseTaskLists+0x68>)
 80020b0:	f7fe fce4 	bl	8000a7c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80020b4:	480c      	ldr	r0, [pc, #48]	; (80020e8 <prvInitialiseTaskLists+0x6c>)
 80020b6:	f7fe fce1 	bl	8000a7c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80020ba:	480c      	ldr	r0, [pc, #48]	; (80020ec <prvInitialiseTaskLists+0x70>)
 80020bc:	f7fe fcde 	bl	8000a7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80020c0:	480b      	ldr	r0, [pc, #44]	; (80020f0 <prvInitialiseTaskLists+0x74>)
 80020c2:	f7fe fcdb 	bl	8000a7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80020c6:	4b0b      	ldr	r3, [pc, #44]	; (80020f4 <prvInitialiseTaskLists+0x78>)
 80020c8:	4a05      	ldr	r2, [pc, #20]	; (80020e0 <prvInitialiseTaskLists+0x64>)
 80020ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80020cc:	4b0a      	ldr	r3, [pc, #40]	; (80020f8 <prvInitialiseTaskLists+0x7c>)
 80020ce:	4a05      	ldr	r2, [pc, #20]	; (80020e4 <prvInitialiseTaskLists+0x68>)
 80020d0:	601a      	str	r2, [r3, #0]
}
 80020d2:	bf00      	nop
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	2000075c 	.word	0x2000075c
 80020e0:	20000bbc 	.word	0x20000bbc
 80020e4:	20000bd0 	.word	0x20000bd0
 80020e8:	20000bec 	.word	0x20000bec
 80020ec:	20000c00 	.word	0x20000c00
 80020f0:	20000c18 	.word	0x20000c18
 80020f4:	20000be4 	.word	0x20000be4
 80020f8:	20000be8 	.word	0x20000be8

080020fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002102:	e019      	b.n	8002138 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002104:	f000 fdd6 	bl	8002cb4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002108:	4b10      	ldr	r3, [pc, #64]	; (800214c <prvCheckTasksWaitingTermination+0x50>)
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	3304      	adds	r3, #4
 8002114:	4618      	mov	r0, r3
 8002116:	f7fe fd3b 	bl	8000b90 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800211a:	4b0d      	ldr	r3, [pc, #52]	; (8002150 <prvCheckTasksWaitingTermination+0x54>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	3b01      	subs	r3, #1
 8002120:	4a0b      	ldr	r2, [pc, #44]	; (8002150 <prvCheckTasksWaitingTermination+0x54>)
 8002122:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002124:	4b0b      	ldr	r3, [pc, #44]	; (8002154 <prvCheckTasksWaitingTermination+0x58>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	3b01      	subs	r3, #1
 800212a:	4a0a      	ldr	r2, [pc, #40]	; (8002154 <prvCheckTasksWaitingTermination+0x58>)
 800212c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800212e:	f000 fdf1 	bl	8002d14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f000 f810 	bl	8002158 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002138:	4b06      	ldr	r3, [pc, #24]	; (8002154 <prvCheckTasksWaitingTermination+0x58>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d1e1      	bne.n	8002104 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002140:	bf00      	nop
 8002142:	bf00      	nop
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	20000c00 	.word	0x20000c00
 8002150:	20000c2c 	.word	0x20000c2c
 8002154:	20000c14 	.word	0x20000c14

08002158 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8002166:	2b00      	cmp	r3, #0
 8002168:	d108      	bne.n	800217c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216e:	4618      	mov	r0, r3
 8002170:	f000 ff8e 	bl	8003090 <vPortFree>
				vPortFree( pxTCB );
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f000 ff8b 	bl	8003090 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800217a:	e018      	b.n	80021ae <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8002182:	2b01      	cmp	r3, #1
 8002184:	d103      	bne.n	800218e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 ff82 	bl	8003090 <vPortFree>
	}
 800218c:	e00f      	b.n	80021ae <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8002194:	2b02      	cmp	r3, #2
 8002196:	d00a      	beq.n	80021ae <prvDeleteTCB+0x56>
	__asm volatile
 8002198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800219c:	f383 8811 	msr	BASEPRI, r3
 80021a0:	f3bf 8f6f 	isb	sy
 80021a4:	f3bf 8f4f 	dsb	sy
 80021a8:	60fb      	str	r3, [r7, #12]
}
 80021aa:	bf00      	nop
 80021ac:	e7fe      	b.n	80021ac <prvDeleteTCB+0x54>
	}
 80021ae:	bf00      	nop
 80021b0:	3710      	adds	r7, #16
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
	...

080021b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80021be:	4b0c      	ldr	r3, [pc, #48]	; (80021f0 <prvResetNextTaskUnblockTime+0x38>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d104      	bne.n	80021d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80021c8:	4b0a      	ldr	r3, [pc, #40]	; (80021f4 <prvResetNextTaskUnblockTime+0x3c>)
 80021ca:	f04f 32ff 	mov.w	r2, #4294967295
 80021ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80021d0:	e008      	b.n	80021e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80021d2:	4b07      	ldr	r3, [pc, #28]	; (80021f0 <prvResetNextTaskUnblockTime+0x38>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	4a04      	ldr	r2, [pc, #16]	; (80021f4 <prvResetNextTaskUnblockTime+0x3c>)
 80021e2:	6013      	str	r3, [r2, #0]
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr
 80021f0:	20000be4 	.word	0x20000be4
 80021f4:	20000c4c 	.word	0x20000c4c

080021f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80021fe:	4b0b      	ldr	r3, [pc, #44]	; (800222c <xTaskGetSchedulerState+0x34>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d102      	bne.n	800220c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002206:	2301      	movs	r3, #1
 8002208:	607b      	str	r3, [r7, #4]
 800220a:	e008      	b.n	800221e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800220c:	4b08      	ldr	r3, [pc, #32]	; (8002230 <xTaskGetSchedulerState+0x38>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d102      	bne.n	800221a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002214:	2302      	movs	r3, #2
 8002216:	607b      	str	r3, [r7, #4]
 8002218:	e001      	b.n	800221e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800221a:	2300      	movs	r3, #0
 800221c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800221e:	687b      	ldr	r3, [r7, #4]
	}
 8002220:	4618      	mov	r0, r3
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr
 800222c:	20000c38 	.word	0x20000c38
 8002230:	20000c54 	.word	0x20000c54

08002234 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002234:	b580      	push	{r7, lr}
 8002236:	b086      	sub	sp, #24
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8002240:	2300      	movs	r3, #0
 8002242:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d056      	beq.n	80022f8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800224a:	4b2e      	ldr	r3, [pc, #184]	; (8002304 <xTaskPriorityDisinherit+0xd0>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	693a      	ldr	r2, [r7, #16]
 8002250:	429a      	cmp	r2, r3
 8002252:	d00a      	beq.n	800226a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8002254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002258:	f383 8811 	msr	BASEPRI, r3
 800225c:	f3bf 8f6f 	isb	sy
 8002260:	f3bf 8f4f 	dsb	sy
 8002264:	60fb      	str	r3, [r7, #12]
}
 8002266:	bf00      	nop
 8002268:	e7fe      	b.n	8002268 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800226e:	2b00      	cmp	r3, #0
 8002270:	d10a      	bne.n	8002288 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8002272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002276:	f383 8811 	msr	BASEPRI, r3
 800227a:	f3bf 8f6f 	isb	sy
 800227e:	f3bf 8f4f 	dsb	sy
 8002282:	60bb      	str	r3, [r7, #8]
}
 8002284:	bf00      	nop
 8002286:	e7fe      	b.n	8002286 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800228c:	1e5a      	subs	r2, r3, #1
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800229a:	429a      	cmp	r2, r3
 800229c:	d02c      	beq.n	80022f8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d128      	bne.n	80022f8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	3304      	adds	r3, #4
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7fe fc70 	bl	8000b90 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022bc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022c8:	4b0f      	ldr	r3, [pc, #60]	; (8002308 <xTaskPriorityDisinherit+0xd4>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d903      	bls.n	80022d8 <xTaskPriorityDisinherit+0xa4>
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d4:	4a0c      	ldr	r2, [pc, #48]	; (8002308 <xTaskPriorityDisinherit+0xd4>)
 80022d6:	6013      	str	r3, [r2, #0]
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022dc:	4613      	mov	r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	4413      	add	r3, r2
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	4a09      	ldr	r2, [pc, #36]	; (800230c <xTaskPriorityDisinherit+0xd8>)
 80022e6:	441a      	add	r2, r3
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	3304      	adds	r3, #4
 80022ec:	4619      	mov	r1, r3
 80022ee:	4610      	mov	r0, r2
 80022f0:	f7fe fbf1 	bl	8000ad6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80022f4:	2301      	movs	r3, #1
 80022f6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80022f8:	697b      	ldr	r3, [r7, #20]
	}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3718      	adds	r7, #24
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	20000758 	.word	0x20000758
 8002308:	20000c34 	.word	0x20000c34
 800230c:	2000075c 	.word	0x2000075c

08002310 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800231a:	4b21      	ldr	r3, [pc, #132]	; (80023a0 <prvAddCurrentTaskToDelayedList+0x90>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002320:	4b20      	ldr	r3, [pc, #128]	; (80023a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	3304      	adds	r3, #4
 8002326:	4618      	mov	r0, r3
 8002328:	f7fe fc32 	bl	8000b90 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002332:	d10a      	bne.n	800234a <prvAddCurrentTaskToDelayedList+0x3a>
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d007      	beq.n	800234a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800233a:	4b1a      	ldr	r3, [pc, #104]	; (80023a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	3304      	adds	r3, #4
 8002340:	4619      	mov	r1, r3
 8002342:	4819      	ldr	r0, [pc, #100]	; (80023a8 <prvAddCurrentTaskToDelayedList+0x98>)
 8002344:	f7fe fbc7 	bl	8000ad6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002348:	e026      	b.n	8002398 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800234a:	68fa      	ldr	r2, [r7, #12]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	4413      	add	r3, r2
 8002350:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002352:	4b14      	ldr	r3, [pc, #80]	; (80023a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68ba      	ldr	r2, [r7, #8]
 8002358:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800235a:	68ba      	ldr	r2, [r7, #8]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	429a      	cmp	r2, r3
 8002360:	d209      	bcs.n	8002376 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002362:	4b12      	ldr	r3, [pc, #72]	; (80023ac <prvAddCurrentTaskToDelayedList+0x9c>)
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	4b0f      	ldr	r3, [pc, #60]	; (80023a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	3304      	adds	r3, #4
 800236c:	4619      	mov	r1, r3
 800236e:	4610      	mov	r0, r2
 8002370:	f7fe fbd5 	bl	8000b1e <vListInsert>
}
 8002374:	e010      	b.n	8002398 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002376:	4b0e      	ldr	r3, [pc, #56]	; (80023b0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	4b0a      	ldr	r3, [pc, #40]	; (80023a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	3304      	adds	r3, #4
 8002380:	4619      	mov	r1, r3
 8002382:	4610      	mov	r0, r2
 8002384:	f7fe fbcb 	bl	8000b1e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002388:	4b0a      	ldr	r3, [pc, #40]	; (80023b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	68ba      	ldr	r2, [r7, #8]
 800238e:	429a      	cmp	r2, r3
 8002390:	d202      	bcs.n	8002398 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8002392:	4a08      	ldr	r2, [pc, #32]	; (80023b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	6013      	str	r3, [r2, #0]
}
 8002398:	bf00      	nop
 800239a:	3710      	adds	r7, #16
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	20000c30 	.word	0x20000c30
 80023a4:	20000758 	.word	0x20000758
 80023a8:	20000c18 	.word	0x20000c18
 80023ac:	20000be8 	.word	0x20000be8
 80023b0:	20000be4 	.word	0x20000be4
 80023b4:	20000c4c 	.word	0x20000c4c

080023b8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b08a      	sub	sp, #40	; 0x28
 80023bc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80023be:	2300      	movs	r3, #0
 80023c0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80023c2:	f000 fb07 	bl	80029d4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80023c6:	4b1c      	ldr	r3, [pc, #112]	; (8002438 <xTimerCreateTimerTask+0x80>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d021      	beq.n	8002412 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80023ce:	2300      	movs	r3, #0
 80023d0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80023d2:	2300      	movs	r3, #0
 80023d4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80023d6:	1d3a      	adds	r2, r7, #4
 80023d8:	f107 0108 	add.w	r1, r7, #8
 80023dc:	f107 030c 	add.w	r3, r7, #12
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7fe fb31 	bl	8000a48 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80023e6:	6879      	ldr	r1, [r7, #4]
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	68fa      	ldr	r2, [r7, #12]
 80023ec:	9202      	str	r2, [sp, #8]
 80023ee:	9301      	str	r3, [sp, #4]
 80023f0:	2302      	movs	r3, #2
 80023f2:	9300      	str	r3, [sp, #0]
 80023f4:	2300      	movs	r3, #0
 80023f6:	460a      	mov	r2, r1
 80023f8:	4910      	ldr	r1, [pc, #64]	; (800243c <xTimerCreateTimerTask+0x84>)
 80023fa:	4811      	ldr	r0, [pc, #68]	; (8002440 <xTimerCreateTimerTask+0x88>)
 80023fc:	f7ff f8de 	bl	80015bc <xTaskCreateStatic>
 8002400:	4603      	mov	r3, r0
 8002402:	4a10      	ldr	r2, [pc, #64]	; (8002444 <xTimerCreateTimerTask+0x8c>)
 8002404:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8002406:	4b0f      	ldr	r3, [pc, #60]	; (8002444 <xTimerCreateTimerTask+0x8c>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800240e:	2301      	movs	r3, #1
 8002410:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d10a      	bne.n	800242e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8002418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800241c:	f383 8811 	msr	BASEPRI, r3
 8002420:	f3bf 8f6f 	isb	sy
 8002424:	f3bf 8f4f 	dsb	sy
 8002428:	613b      	str	r3, [r7, #16]
}
 800242a:	bf00      	nop
 800242c:	e7fe      	b.n	800242c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800242e:	697b      	ldr	r3, [r7, #20]
}
 8002430:	4618      	mov	r0, r3
 8002432:	3718      	adds	r7, #24
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	20000c88 	.word	0x20000c88
 800243c:	08007380 	.word	0x08007380
 8002440:	0800257d 	.word	0x0800257d
 8002444:	20000c8c 	.word	0x20000c8c

08002448 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b08a      	sub	sp, #40	; 0x28
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
 8002454:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8002456:	2300      	movs	r3, #0
 8002458:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d10a      	bne.n	8002476 <xTimerGenericCommand+0x2e>
	__asm volatile
 8002460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002464:	f383 8811 	msr	BASEPRI, r3
 8002468:	f3bf 8f6f 	isb	sy
 800246c:	f3bf 8f4f 	dsb	sy
 8002470:	623b      	str	r3, [r7, #32]
}
 8002472:	bf00      	nop
 8002474:	e7fe      	b.n	8002474 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8002476:	4b1a      	ldr	r3, [pc, #104]	; (80024e0 <xTimerGenericCommand+0x98>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d02a      	beq.n	80024d4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	2b05      	cmp	r3, #5
 800248e:	dc18      	bgt.n	80024c2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002490:	f7ff feb2 	bl	80021f8 <xTaskGetSchedulerState>
 8002494:	4603      	mov	r3, r0
 8002496:	2b02      	cmp	r3, #2
 8002498:	d109      	bne.n	80024ae <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800249a:	4b11      	ldr	r3, [pc, #68]	; (80024e0 <xTimerGenericCommand+0x98>)
 800249c:	6818      	ldr	r0, [r3, #0]
 800249e:	f107 0110 	add.w	r1, r7, #16
 80024a2:	2300      	movs	r3, #0
 80024a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024a6:	f7fe fca1 	bl	8000dec <xQueueGenericSend>
 80024aa:	6278      	str	r0, [r7, #36]	; 0x24
 80024ac:	e012      	b.n	80024d4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80024ae:	4b0c      	ldr	r3, [pc, #48]	; (80024e0 <xTimerGenericCommand+0x98>)
 80024b0:	6818      	ldr	r0, [r3, #0]
 80024b2:	f107 0110 	add.w	r1, r7, #16
 80024b6:	2300      	movs	r3, #0
 80024b8:	2200      	movs	r2, #0
 80024ba:	f7fe fc97 	bl	8000dec <xQueueGenericSend>
 80024be:	6278      	str	r0, [r7, #36]	; 0x24
 80024c0:	e008      	b.n	80024d4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80024c2:	4b07      	ldr	r3, [pc, #28]	; (80024e0 <xTimerGenericCommand+0x98>)
 80024c4:	6818      	ldr	r0, [r3, #0]
 80024c6:	f107 0110 	add.w	r1, r7, #16
 80024ca:	2300      	movs	r3, #0
 80024cc:	683a      	ldr	r2, [r7, #0]
 80024ce:	f7fe fd8b 	bl	8000fe8 <xQueueGenericSendFromISR>
 80024d2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80024d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3728      	adds	r7, #40	; 0x28
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	20000c88 	.word	0x20000c88

080024e4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b088      	sub	sp, #32
 80024e8:	af02      	add	r7, sp, #8
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80024ee:	4b22      	ldr	r3, [pc, #136]	; (8002578 <prvProcessExpiredTimer+0x94>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	3304      	adds	r3, #4
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7fe fb47 	bl	8000b90 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002508:	f003 0304 	and.w	r3, r3, #4
 800250c:	2b00      	cmp	r3, #0
 800250e:	d022      	beq.n	8002556 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	699a      	ldr	r2, [r3, #24]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	18d1      	adds	r1, r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	683a      	ldr	r2, [r7, #0]
 800251c:	6978      	ldr	r0, [r7, #20]
 800251e:	f000 f8d1 	bl	80026c4 <prvInsertTimerInActiveList>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d01f      	beq.n	8002568 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002528:	2300      	movs	r3, #0
 800252a:	9300      	str	r3, [sp, #0]
 800252c:	2300      	movs	r3, #0
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	2100      	movs	r1, #0
 8002532:	6978      	ldr	r0, [r7, #20]
 8002534:	f7ff ff88 	bl	8002448 <xTimerGenericCommand>
 8002538:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d113      	bne.n	8002568 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8002540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002544:	f383 8811 	msr	BASEPRI, r3
 8002548:	f3bf 8f6f 	isb	sy
 800254c:	f3bf 8f4f 	dsb	sy
 8002550:	60fb      	str	r3, [r7, #12]
}
 8002552:	bf00      	nop
 8002554:	e7fe      	b.n	8002554 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800255c:	f023 0301 	bic.w	r3, r3, #1
 8002560:	b2da      	uxtb	r2, r3
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	6a1b      	ldr	r3, [r3, #32]
 800256c:	6978      	ldr	r0, [r7, #20]
 800256e:	4798      	blx	r3
}
 8002570:	bf00      	nop
 8002572:	3718      	adds	r7, #24
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	20000c80 	.word	0x20000c80

0800257c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002584:	f107 0308 	add.w	r3, r7, #8
 8002588:	4618      	mov	r0, r3
 800258a:	f000 f857 	bl	800263c <prvGetNextExpireTime>
 800258e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	4619      	mov	r1, r3
 8002594:	68f8      	ldr	r0, [r7, #12]
 8002596:	f000 f803 	bl	80025a0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800259a:	f000 f8d5 	bl	8002748 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800259e:	e7f1      	b.n	8002584 <prvTimerTask+0x8>

080025a0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80025aa:	f7ff fa43 	bl	8001a34 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80025ae:	f107 0308 	add.w	r3, r7, #8
 80025b2:	4618      	mov	r0, r3
 80025b4:	f000 f866 	bl	8002684 <prvSampleTimeNow>
 80025b8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d130      	bne.n	8002622 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d10a      	bne.n	80025dc <prvProcessTimerOrBlockTask+0x3c>
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d806      	bhi.n	80025dc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80025ce:	f7ff fa3f 	bl	8001a50 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80025d2:	68f9      	ldr	r1, [r7, #12]
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f7ff ff85 	bl	80024e4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80025da:	e024      	b.n	8002626 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d008      	beq.n	80025f4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80025e2:	4b13      	ldr	r3, [pc, #76]	; (8002630 <prvProcessTimerOrBlockTask+0x90>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d101      	bne.n	80025f0 <prvProcessTimerOrBlockTask+0x50>
 80025ec:	2301      	movs	r3, #1
 80025ee:	e000      	b.n	80025f2 <prvProcessTimerOrBlockTask+0x52>
 80025f0:	2300      	movs	r3, #0
 80025f2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80025f4:	4b0f      	ldr	r3, [pc, #60]	; (8002634 <prvProcessTimerOrBlockTask+0x94>)
 80025f6:	6818      	ldr	r0, [r3, #0]
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	683a      	ldr	r2, [r7, #0]
 8002600:	4619      	mov	r1, r3
 8002602:	f7fe ffa7 	bl	8001554 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8002606:	f7ff fa23 	bl	8001a50 <xTaskResumeAll>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d10a      	bne.n	8002626 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8002610:	4b09      	ldr	r3, [pc, #36]	; (8002638 <prvProcessTimerOrBlockTask+0x98>)
 8002612:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002616:	601a      	str	r2, [r3, #0]
 8002618:	f3bf 8f4f 	dsb	sy
 800261c:	f3bf 8f6f 	isb	sy
}
 8002620:	e001      	b.n	8002626 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8002622:	f7ff fa15 	bl	8001a50 <xTaskResumeAll>
}
 8002626:	bf00      	nop
 8002628:	3710      	adds	r7, #16
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	20000c84 	.word	0x20000c84
 8002634:	20000c88 	.word	0x20000c88
 8002638:	e000ed04 	.word	0xe000ed04

0800263c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800263c:	b480      	push	{r7}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002644:	4b0e      	ldr	r3, [pc, #56]	; (8002680 <prvGetNextExpireTime+0x44>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <prvGetNextExpireTime+0x16>
 800264e:	2201      	movs	r2, #1
 8002650:	e000      	b.n	8002654 <prvGetNextExpireTime+0x18>
 8002652:	2200      	movs	r2, #0
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d105      	bne.n	800266c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002660:	4b07      	ldr	r3, [pc, #28]	; (8002680 <prvGetNextExpireTime+0x44>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	60fb      	str	r3, [r7, #12]
 800266a:	e001      	b.n	8002670 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800266c:	2300      	movs	r3, #0
 800266e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8002670:	68fb      	ldr	r3, [r7, #12]
}
 8002672:	4618      	mov	r0, r3
 8002674:	3714      	adds	r7, #20
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	20000c80 	.word	0x20000c80

08002684 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800268c:	f7ff fa7e 	bl	8001b8c <xTaskGetTickCount>
 8002690:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8002692:	4b0b      	ldr	r3, [pc, #44]	; (80026c0 <prvSampleTimeNow+0x3c>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68fa      	ldr	r2, [r7, #12]
 8002698:	429a      	cmp	r2, r3
 800269a:	d205      	bcs.n	80026a8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800269c:	f000 f936 	bl	800290c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	601a      	str	r2, [r3, #0]
 80026a6:	e002      	b.n	80026ae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80026ae:	4a04      	ldr	r2, [pc, #16]	; (80026c0 <prvSampleTimeNow+0x3c>)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80026b4:	68fb      	ldr	r3, [r7, #12]
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3710      	adds	r7, #16
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	20000c90 	.word	0x20000c90

080026c4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b086      	sub	sp, #24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	607a      	str	r2, [r7, #4]
 80026d0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80026d2:	2300      	movs	r3, #0
 80026d4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	68ba      	ldr	r2, [r7, #8]
 80026da:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80026e2:	68ba      	ldr	r2, [r7, #8]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d812      	bhi.n	8002710 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	1ad2      	subs	r2, r2, r3
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d302      	bcc.n	80026fe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80026f8:	2301      	movs	r3, #1
 80026fa:	617b      	str	r3, [r7, #20]
 80026fc:	e01b      	b.n	8002736 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80026fe:	4b10      	ldr	r3, [pc, #64]	; (8002740 <prvInsertTimerInActiveList+0x7c>)
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	3304      	adds	r3, #4
 8002706:	4619      	mov	r1, r3
 8002708:	4610      	mov	r0, r2
 800270a:	f7fe fa08 	bl	8000b1e <vListInsert>
 800270e:	e012      	b.n	8002736 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	429a      	cmp	r2, r3
 8002716:	d206      	bcs.n	8002726 <prvInsertTimerInActiveList+0x62>
 8002718:	68ba      	ldr	r2, [r7, #8]
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	429a      	cmp	r2, r3
 800271e:	d302      	bcc.n	8002726 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8002720:	2301      	movs	r3, #1
 8002722:	617b      	str	r3, [r7, #20]
 8002724:	e007      	b.n	8002736 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002726:	4b07      	ldr	r3, [pc, #28]	; (8002744 <prvInsertTimerInActiveList+0x80>)
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	3304      	adds	r3, #4
 800272e:	4619      	mov	r1, r3
 8002730:	4610      	mov	r0, r2
 8002732:	f7fe f9f4 	bl	8000b1e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8002736:	697b      	ldr	r3, [r7, #20]
}
 8002738:	4618      	mov	r0, r3
 800273a:	3718      	adds	r7, #24
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	20000c84 	.word	0x20000c84
 8002744:	20000c80 	.word	0x20000c80

08002748 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b08e      	sub	sp, #56	; 0x38
 800274c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800274e:	e0ca      	b.n	80028e6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2b00      	cmp	r3, #0
 8002754:	da18      	bge.n	8002788 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8002756:	1d3b      	adds	r3, r7, #4
 8002758:	3304      	adds	r3, #4
 800275a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800275c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800275e:	2b00      	cmp	r3, #0
 8002760:	d10a      	bne.n	8002778 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8002762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002766:	f383 8811 	msr	BASEPRI, r3
 800276a:	f3bf 8f6f 	isb	sy
 800276e:	f3bf 8f4f 	dsb	sy
 8002772:	61fb      	str	r3, [r7, #28]
}
 8002774:	bf00      	nop
 8002776:	e7fe      	b.n	8002776 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8002778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800277e:	6850      	ldr	r0, [r2, #4]
 8002780:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002782:	6892      	ldr	r2, [r2, #8]
 8002784:	4611      	mov	r1, r2
 8002786:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2b00      	cmp	r3, #0
 800278c:	f2c0 80aa 	blt.w	80028e4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002796:	695b      	ldr	r3, [r3, #20]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d004      	beq.n	80027a6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800279c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800279e:	3304      	adds	r3, #4
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7fe f9f5 	bl	8000b90 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80027a6:	463b      	mov	r3, r7
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7ff ff6b 	bl	8002684 <prvSampleTimeNow>
 80027ae:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2b09      	cmp	r3, #9
 80027b4:	f200 8097 	bhi.w	80028e6 <prvProcessReceivedCommands+0x19e>
 80027b8:	a201      	add	r2, pc, #4	; (adr r2, 80027c0 <prvProcessReceivedCommands+0x78>)
 80027ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027be:	bf00      	nop
 80027c0:	080027e9 	.word	0x080027e9
 80027c4:	080027e9 	.word	0x080027e9
 80027c8:	080027e9 	.word	0x080027e9
 80027cc:	0800285d 	.word	0x0800285d
 80027d0:	08002871 	.word	0x08002871
 80027d4:	080028bb 	.word	0x080028bb
 80027d8:	080027e9 	.word	0x080027e9
 80027dc:	080027e9 	.word	0x080027e9
 80027e0:	0800285d 	.word	0x0800285d
 80027e4:	08002871 	.word	0x08002871
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80027e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80027ee:	f043 0301 	orr.w	r3, r3, #1
 80027f2:	b2da      	uxtb	r2, r3
 80027f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80027fa:	68ba      	ldr	r2, [r7, #8]
 80027fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	18d1      	adds	r1, r2, r3
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002806:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002808:	f7ff ff5c 	bl	80026c4 <prvInsertTimerInActiveList>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d069      	beq.n	80028e6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002814:	6a1b      	ldr	r3, [r3, #32]
 8002816:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002818:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800281a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800281c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002820:	f003 0304 	and.w	r3, r3, #4
 8002824:	2b00      	cmp	r3, #0
 8002826:	d05e      	beq.n	80028e6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002828:	68ba      	ldr	r2, [r7, #8]
 800282a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	441a      	add	r2, r3
 8002830:	2300      	movs	r3, #0
 8002832:	9300      	str	r3, [sp, #0]
 8002834:	2300      	movs	r3, #0
 8002836:	2100      	movs	r1, #0
 8002838:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800283a:	f7ff fe05 	bl	8002448 <xTimerGenericCommand>
 800283e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8002840:	6a3b      	ldr	r3, [r7, #32]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d14f      	bne.n	80028e6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8002846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800284a:	f383 8811 	msr	BASEPRI, r3
 800284e:	f3bf 8f6f 	isb	sy
 8002852:	f3bf 8f4f 	dsb	sy
 8002856:	61bb      	str	r3, [r7, #24]
}
 8002858:	bf00      	nop
 800285a:	e7fe      	b.n	800285a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800285c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800285e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002862:	f023 0301 	bic.w	r3, r3, #1
 8002866:	b2da      	uxtb	r2, r3
 8002868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800286a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800286e:	e03a      	b.n	80028e6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002872:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002876:	f043 0301 	orr.w	r3, r3, #1
 800287a:	b2da      	uxtb	r2, r3
 800287c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800287e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002882:	68ba      	ldr	r2, [r7, #8]
 8002884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002886:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800288a:	699b      	ldr	r3, [r3, #24]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d10a      	bne.n	80028a6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8002890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002894:	f383 8811 	msr	BASEPRI, r3
 8002898:	f3bf 8f6f 	isb	sy
 800289c:	f3bf 8f4f 	dsb	sy
 80028a0:	617b      	str	r3, [r7, #20]
}
 80028a2:	bf00      	nop
 80028a4:	e7fe      	b.n	80028a4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80028a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a8:	699a      	ldr	r2, [r3, #24]
 80028aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ac:	18d1      	adds	r1, r2, r3
 80028ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028b4:	f7ff ff06 	bl	80026c4 <prvInsertTimerInActiveList>
					break;
 80028b8:	e015      	b.n	80028e6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80028ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80028c0:	f003 0302 	and.w	r3, r3, #2
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d103      	bne.n	80028d0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80028c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028ca:	f000 fbe1 	bl	8003090 <vPortFree>
 80028ce:	e00a      	b.n	80028e6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80028d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80028d6:	f023 0301 	bic.w	r3, r3, #1
 80028da:	b2da      	uxtb	r2, r3
 80028dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80028e2:	e000      	b.n	80028e6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80028e4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80028e6:	4b08      	ldr	r3, [pc, #32]	; (8002908 <prvProcessReceivedCommands+0x1c0>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	1d39      	adds	r1, r7, #4
 80028ec:	2200      	movs	r2, #0
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7fe fc16 	bl	8001120 <xQueueReceive>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	f47f af2a 	bne.w	8002750 <prvProcessReceivedCommands+0x8>
	}
}
 80028fc:	bf00      	nop
 80028fe:	bf00      	nop
 8002900:	3730      	adds	r7, #48	; 0x30
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	20000c88 	.word	0x20000c88

0800290c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b088      	sub	sp, #32
 8002910:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002912:	e048      	b.n	80029a6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002914:	4b2d      	ldr	r3, [pc, #180]	; (80029cc <prvSwitchTimerLists+0xc0>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800291e:	4b2b      	ldr	r3, [pc, #172]	; (80029cc <prvSwitchTimerLists+0xc0>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	3304      	adds	r3, #4
 800292c:	4618      	mov	r0, r3
 800292e:	f7fe f92f 	bl	8000b90 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6a1b      	ldr	r3, [r3, #32]
 8002936:	68f8      	ldr	r0, [r7, #12]
 8002938:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002940:	f003 0304 	and.w	r3, r3, #4
 8002944:	2b00      	cmp	r3, #0
 8002946:	d02e      	beq.n	80029a6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	699b      	ldr	r3, [r3, #24]
 800294c:	693a      	ldr	r2, [r7, #16]
 800294e:	4413      	add	r3, r2
 8002950:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8002952:	68ba      	ldr	r2, [r7, #8]
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	429a      	cmp	r2, r3
 8002958:	d90e      	bls.n	8002978 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	68ba      	ldr	r2, [r7, #8]
 800295e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002966:	4b19      	ldr	r3, [pc, #100]	; (80029cc <prvSwitchTimerLists+0xc0>)
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	3304      	adds	r3, #4
 800296e:	4619      	mov	r1, r3
 8002970:	4610      	mov	r0, r2
 8002972:	f7fe f8d4 	bl	8000b1e <vListInsert>
 8002976:	e016      	b.n	80029a6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002978:	2300      	movs	r3, #0
 800297a:	9300      	str	r3, [sp, #0]
 800297c:	2300      	movs	r3, #0
 800297e:	693a      	ldr	r2, [r7, #16]
 8002980:	2100      	movs	r1, #0
 8002982:	68f8      	ldr	r0, [r7, #12]
 8002984:	f7ff fd60 	bl	8002448 <xTimerGenericCommand>
 8002988:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d10a      	bne.n	80029a6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8002990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002994:	f383 8811 	msr	BASEPRI, r3
 8002998:	f3bf 8f6f 	isb	sy
 800299c:	f3bf 8f4f 	dsb	sy
 80029a0:	603b      	str	r3, [r7, #0]
}
 80029a2:	bf00      	nop
 80029a4:	e7fe      	b.n	80029a4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80029a6:	4b09      	ldr	r3, [pc, #36]	; (80029cc <prvSwitchTimerLists+0xc0>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d1b1      	bne.n	8002914 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80029b0:	4b06      	ldr	r3, [pc, #24]	; (80029cc <prvSwitchTimerLists+0xc0>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80029b6:	4b06      	ldr	r3, [pc, #24]	; (80029d0 <prvSwitchTimerLists+0xc4>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a04      	ldr	r2, [pc, #16]	; (80029cc <prvSwitchTimerLists+0xc0>)
 80029bc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80029be:	4a04      	ldr	r2, [pc, #16]	; (80029d0 <prvSwitchTimerLists+0xc4>)
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	6013      	str	r3, [r2, #0]
}
 80029c4:	bf00      	nop
 80029c6:	3718      	adds	r7, #24
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	20000c80 	.word	0x20000c80
 80029d0:	20000c84 	.word	0x20000c84

080029d4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80029da:	f000 f96b 	bl	8002cb4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80029de:	4b15      	ldr	r3, [pc, #84]	; (8002a34 <prvCheckForValidListAndQueue+0x60>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d120      	bne.n	8002a28 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80029e6:	4814      	ldr	r0, [pc, #80]	; (8002a38 <prvCheckForValidListAndQueue+0x64>)
 80029e8:	f7fe f848 	bl	8000a7c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80029ec:	4813      	ldr	r0, [pc, #76]	; (8002a3c <prvCheckForValidListAndQueue+0x68>)
 80029ee:	f7fe f845 	bl	8000a7c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80029f2:	4b13      	ldr	r3, [pc, #76]	; (8002a40 <prvCheckForValidListAndQueue+0x6c>)
 80029f4:	4a10      	ldr	r2, [pc, #64]	; (8002a38 <prvCheckForValidListAndQueue+0x64>)
 80029f6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80029f8:	4b12      	ldr	r3, [pc, #72]	; (8002a44 <prvCheckForValidListAndQueue+0x70>)
 80029fa:	4a10      	ldr	r2, [pc, #64]	; (8002a3c <prvCheckForValidListAndQueue+0x68>)
 80029fc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80029fe:	2300      	movs	r3, #0
 8002a00:	9300      	str	r3, [sp, #0]
 8002a02:	4b11      	ldr	r3, [pc, #68]	; (8002a48 <prvCheckForValidListAndQueue+0x74>)
 8002a04:	4a11      	ldr	r2, [pc, #68]	; (8002a4c <prvCheckForValidListAndQueue+0x78>)
 8002a06:	2110      	movs	r1, #16
 8002a08:	200a      	movs	r0, #10
 8002a0a:	f7fe f953 	bl	8000cb4 <xQueueGenericCreateStatic>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	4a08      	ldr	r2, [pc, #32]	; (8002a34 <prvCheckForValidListAndQueue+0x60>)
 8002a12:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8002a14:	4b07      	ldr	r3, [pc, #28]	; (8002a34 <prvCheckForValidListAndQueue+0x60>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d005      	beq.n	8002a28 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002a1c:	4b05      	ldr	r3, [pc, #20]	; (8002a34 <prvCheckForValidListAndQueue+0x60>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	490b      	ldr	r1, [pc, #44]	; (8002a50 <prvCheckForValidListAndQueue+0x7c>)
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7fe fd6c 	bl	8001500 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002a28:	f000 f974 	bl	8002d14 <vPortExitCritical>
}
 8002a2c:	bf00      	nop
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	20000c88 	.word	0x20000c88
 8002a38:	20000c58 	.word	0x20000c58
 8002a3c:	20000c6c 	.word	0x20000c6c
 8002a40:	20000c80 	.word	0x20000c80
 8002a44:	20000c84 	.word	0x20000c84
 8002a48:	20000d34 	.word	0x20000d34
 8002a4c:	20000c94 	.word	0x20000c94
 8002a50:	08007388 	.word	0x08007388

08002a54 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002a54:	b480      	push	{r7}
 8002a56:	b085      	sub	sp, #20
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	3b04      	subs	r3, #4
 8002a64:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002a6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	3b04      	subs	r3, #4
 8002a72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	f023 0201 	bic.w	r2, r3, #1
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	3b04      	subs	r3, #4
 8002a82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002a84:	4a0c      	ldr	r2, [pc, #48]	; (8002ab8 <pxPortInitialiseStack+0x64>)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	3b14      	subs	r3, #20
 8002a8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	3b04      	subs	r3, #4
 8002a9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f06f 0202 	mvn.w	r2, #2
 8002aa2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	3b20      	subs	r3, #32
 8002aa8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3714      	adds	r7, #20
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr
 8002ab8:	08002abd 	.word	0x08002abd

08002abc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002abc:	b480      	push	{r7}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002ac6:	4b12      	ldr	r3, [pc, #72]	; (8002b10 <prvTaskExitError+0x54>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ace:	d00a      	beq.n	8002ae6 <prvTaskExitError+0x2a>
	__asm volatile
 8002ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ad4:	f383 8811 	msr	BASEPRI, r3
 8002ad8:	f3bf 8f6f 	isb	sy
 8002adc:	f3bf 8f4f 	dsb	sy
 8002ae0:	60fb      	str	r3, [r7, #12]
}
 8002ae2:	bf00      	nop
 8002ae4:	e7fe      	b.n	8002ae4 <prvTaskExitError+0x28>
	__asm volatile
 8002ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aea:	f383 8811 	msr	BASEPRI, r3
 8002aee:	f3bf 8f6f 	isb	sy
 8002af2:	f3bf 8f4f 	dsb	sy
 8002af6:	60bb      	str	r3, [r7, #8]
}
 8002af8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002afa:	bf00      	nop
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d0fc      	beq.n	8002afc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002b02:	bf00      	nop
 8002b04:	bf00      	nop
 8002b06:	3714      	adds	r7, #20
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr
 8002b10:	20000004 	.word	0x20000004
	...

08002b20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002b20:	4b07      	ldr	r3, [pc, #28]	; (8002b40 <pxCurrentTCBConst2>)
 8002b22:	6819      	ldr	r1, [r3, #0]
 8002b24:	6808      	ldr	r0, [r1, #0]
 8002b26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b2a:	f380 8809 	msr	PSP, r0
 8002b2e:	f3bf 8f6f 	isb	sy
 8002b32:	f04f 0000 	mov.w	r0, #0
 8002b36:	f380 8811 	msr	BASEPRI, r0
 8002b3a:	4770      	bx	lr
 8002b3c:	f3af 8000 	nop.w

08002b40 <pxCurrentTCBConst2>:
 8002b40:	20000758 	.word	0x20000758
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002b44:	bf00      	nop
 8002b46:	bf00      	nop

08002b48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002b48:	4808      	ldr	r0, [pc, #32]	; (8002b6c <prvPortStartFirstTask+0x24>)
 8002b4a:	6800      	ldr	r0, [r0, #0]
 8002b4c:	6800      	ldr	r0, [r0, #0]
 8002b4e:	f380 8808 	msr	MSP, r0
 8002b52:	f04f 0000 	mov.w	r0, #0
 8002b56:	f380 8814 	msr	CONTROL, r0
 8002b5a:	b662      	cpsie	i
 8002b5c:	b661      	cpsie	f
 8002b5e:	f3bf 8f4f 	dsb	sy
 8002b62:	f3bf 8f6f 	isb	sy
 8002b66:	df00      	svc	0
 8002b68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002b6a:	bf00      	nop
 8002b6c:	e000ed08 	.word	0xe000ed08

08002b70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b086      	sub	sp, #24
 8002b74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002b76:	4b46      	ldr	r3, [pc, #280]	; (8002c90 <xPortStartScheduler+0x120>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a46      	ldr	r2, [pc, #280]	; (8002c94 <xPortStartScheduler+0x124>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d10a      	bne.n	8002b96 <xPortStartScheduler+0x26>
	__asm volatile
 8002b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b84:	f383 8811 	msr	BASEPRI, r3
 8002b88:	f3bf 8f6f 	isb	sy
 8002b8c:	f3bf 8f4f 	dsb	sy
 8002b90:	613b      	str	r3, [r7, #16]
}
 8002b92:	bf00      	nop
 8002b94:	e7fe      	b.n	8002b94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002b96:	4b3e      	ldr	r3, [pc, #248]	; (8002c90 <xPortStartScheduler+0x120>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a3f      	ldr	r2, [pc, #252]	; (8002c98 <xPortStartScheduler+0x128>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d10a      	bne.n	8002bb6 <xPortStartScheduler+0x46>
	__asm volatile
 8002ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ba4:	f383 8811 	msr	BASEPRI, r3
 8002ba8:	f3bf 8f6f 	isb	sy
 8002bac:	f3bf 8f4f 	dsb	sy
 8002bb0:	60fb      	str	r3, [r7, #12]
}
 8002bb2:	bf00      	nop
 8002bb4:	e7fe      	b.n	8002bb4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002bb6:	4b39      	ldr	r3, [pc, #228]	; (8002c9c <xPortStartScheduler+0x12c>)
 8002bb8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	22ff      	movs	r2, #255	; 0xff
 8002bc6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002bd0:	78fb      	ldrb	r3, [r7, #3]
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002bd8:	b2da      	uxtb	r2, r3
 8002bda:	4b31      	ldr	r3, [pc, #196]	; (8002ca0 <xPortStartScheduler+0x130>)
 8002bdc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002bde:	4b31      	ldr	r3, [pc, #196]	; (8002ca4 <xPortStartScheduler+0x134>)
 8002be0:	2207      	movs	r2, #7
 8002be2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002be4:	e009      	b.n	8002bfa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8002be6:	4b2f      	ldr	r3, [pc, #188]	; (8002ca4 <xPortStartScheduler+0x134>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	3b01      	subs	r3, #1
 8002bec:	4a2d      	ldr	r2, [pc, #180]	; (8002ca4 <xPortStartScheduler+0x134>)
 8002bee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002bf0:	78fb      	ldrb	r3, [r7, #3]
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002bfa:	78fb      	ldrb	r3, [r7, #3]
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c02:	2b80      	cmp	r3, #128	; 0x80
 8002c04:	d0ef      	beq.n	8002be6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002c06:	4b27      	ldr	r3, [pc, #156]	; (8002ca4 <xPortStartScheduler+0x134>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f1c3 0307 	rsb	r3, r3, #7
 8002c0e:	2b04      	cmp	r3, #4
 8002c10:	d00a      	beq.n	8002c28 <xPortStartScheduler+0xb8>
	__asm volatile
 8002c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c16:	f383 8811 	msr	BASEPRI, r3
 8002c1a:	f3bf 8f6f 	isb	sy
 8002c1e:	f3bf 8f4f 	dsb	sy
 8002c22:	60bb      	str	r3, [r7, #8]
}
 8002c24:	bf00      	nop
 8002c26:	e7fe      	b.n	8002c26 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002c28:	4b1e      	ldr	r3, [pc, #120]	; (8002ca4 <xPortStartScheduler+0x134>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	021b      	lsls	r3, r3, #8
 8002c2e:	4a1d      	ldr	r2, [pc, #116]	; (8002ca4 <xPortStartScheduler+0x134>)
 8002c30:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002c32:	4b1c      	ldr	r3, [pc, #112]	; (8002ca4 <xPortStartScheduler+0x134>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002c3a:	4a1a      	ldr	r2, [pc, #104]	; (8002ca4 <xPortStartScheduler+0x134>)
 8002c3c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	b2da      	uxtb	r2, r3
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002c46:	4b18      	ldr	r3, [pc, #96]	; (8002ca8 <xPortStartScheduler+0x138>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a17      	ldr	r2, [pc, #92]	; (8002ca8 <xPortStartScheduler+0x138>)
 8002c4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002c52:	4b15      	ldr	r3, [pc, #84]	; (8002ca8 <xPortStartScheduler+0x138>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a14      	ldr	r2, [pc, #80]	; (8002ca8 <xPortStartScheduler+0x138>)
 8002c58:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002c5c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002c5e:	f000 f8dd 	bl	8002e1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002c62:	4b12      	ldr	r3, [pc, #72]	; (8002cac <xPortStartScheduler+0x13c>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8002c68:	f000 f8fc 	bl	8002e64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002c6c:	4b10      	ldr	r3, [pc, #64]	; (8002cb0 <xPortStartScheduler+0x140>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a0f      	ldr	r2, [pc, #60]	; (8002cb0 <xPortStartScheduler+0x140>)
 8002c72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002c76:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002c78:	f7ff ff66 	bl	8002b48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002c7c:	f7ff f850 	bl	8001d20 <vTaskSwitchContext>
	prvTaskExitError();
 8002c80:	f7ff ff1c 	bl	8002abc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3718      	adds	r7, #24
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	e000ed00 	.word	0xe000ed00
 8002c94:	410fc271 	.word	0x410fc271
 8002c98:	410fc270 	.word	0x410fc270
 8002c9c:	e000e400 	.word	0xe000e400
 8002ca0:	20000d84 	.word	0x20000d84
 8002ca4:	20000d88 	.word	0x20000d88
 8002ca8:	e000ed20 	.word	0xe000ed20
 8002cac:	20000004 	.word	0x20000004
 8002cb0:	e000ef34 	.word	0xe000ef34

08002cb4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
	__asm volatile
 8002cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cbe:	f383 8811 	msr	BASEPRI, r3
 8002cc2:	f3bf 8f6f 	isb	sy
 8002cc6:	f3bf 8f4f 	dsb	sy
 8002cca:	607b      	str	r3, [r7, #4]
}
 8002ccc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002cce:	4b0f      	ldr	r3, [pc, #60]	; (8002d0c <vPortEnterCritical+0x58>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	4a0d      	ldr	r2, [pc, #52]	; (8002d0c <vPortEnterCritical+0x58>)
 8002cd6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002cd8:	4b0c      	ldr	r3, [pc, #48]	; (8002d0c <vPortEnterCritical+0x58>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d10f      	bne.n	8002d00 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002ce0:	4b0b      	ldr	r3, [pc, #44]	; (8002d10 <vPortEnterCritical+0x5c>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00a      	beq.n	8002d00 <vPortEnterCritical+0x4c>
	__asm volatile
 8002cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cee:	f383 8811 	msr	BASEPRI, r3
 8002cf2:	f3bf 8f6f 	isb	sy
 8002cf6:	f3bf 8f4f 	dsb	sy
 8002cfa:	603b      	str	r3, [r7, #0]
}
 8002cfc:	bf00      	nop
 8002cfe:	e7fe      	b.n	8002cfe <vPortEnterCritical+0x4a>
	}
}
 8002d00:	bf00      	nop
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr
 8002d0c:	20000004 	.word	0x20000004
 8002d10:	e000ed04 	.word	0xe000ed04

08002d14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002d1a:	4b12      	ldr	r3, [pc, #72]	; (8002d64 <vPortExitCritical+0x50>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d10a      	bne.n	8002d38 <vPortExitCritical+0x24>
	__asm volatile
 8002d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d26:	f383 8811 	msr	BASEPRI, r3
 8002d2a:	f3bf 8f6f 	isb	sy
 8002d2e:	f3bf 8f4f 	dsb	sy
 8002d32:	607b      	str	r3, [r7, #4]
}
 8002d34:	bf00      	nop
 8002d36:	e7fe      	b.n	8002d36 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8002d38:	4b0a      	ldr	r3, [pc, #40]	; (8002d64 <vPortExitCritical+0x50>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	3b01      	subs	r3, #1
 8002d3e:	4a09      	ldr	r2, [pc, #36]	; (8002d64 <vPortExitCritical+0x50>)
 8002d40:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002d42:	4b08      	ldr	r3, [pc, #32]	; (8002d64 <vPortExitCritical+0x50>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d105      	bne.n	8002d56 <vPortExitCritical+0x42>
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	f383 8811 	msr	BASEPRI, r3
}
 8002d54:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8002d56:	bf00      	nop
 8002d58:	370c      	adds	r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	20000004 	.word	0x20000004
	...

08002d70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002d70:	f3ef 8009 	mrs	r0, PSP
 8002d74:	f3bf 8f6f 	isb	sy
 8002d78:	4b15      	ldr	r3, [pc, #84]	; (8002dd0 <pxCurrentTCBConst>)
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	f01e 0f10 	tst.w	lr, #16
 8002d80:	bf08      	it	eq
 8002d82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002d86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d8a:	6010      	str	r0, [r2, #0]
 8002d8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002d90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002d94:	f380 8811 	msr	BASEPRI, r0
 8002d98:	f3bf 8f4f 	dsb	sy
 8002d9c:	f3bf 8f6f 	isb	sy
 8002da0:	f7fe ffbe 	bl	8001d20 <vTaskSwitchContext>
 8002da4:	f04f 0000 	mov.w	r0, #0
 8002da8:	f380 8811 	msr	BASEPRI, r0
 8002dac:	bc09      	pop	{r0, r3}
 8002dae:	6819      	ldr	r1, [r3, #0]
 8002db0:	6808      	ldr	r0, [r1, #0]
 8002db2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002db6:	f01e 0f10 	tst.w	lr, #16
 8002dba:	bf08      	it	eq
 8002dbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002dc0:	f380 8809 	msr	PSP, r0
 8002dc4:	f3bf 8f6f 	isb	sy
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	f3af 8000 	nop.w

08002dd0 <pxCurrentTCBConst>:
 8002dd0:	20000758 	.word	0x20000758
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002dd4:	bf00      	nop
 8002dd6:	bf00      	nop

08002dd8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
	__asm volatile
 8002dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002de2:	f383 8811 	msr	BASEPRI, r3
 8002de6:	f3bf 8f6f 	isb	sy
 8002dea:	f3bf 8f4f 	dsb	sy
 8002dee:	607b      	str	r3, [r7, #4]
}
 8002df0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002df2:	f7fe fedb 	bl	8001bac <xTaskIncrementTick>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d003      	beq.n	8002e04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002dfc:	4b06      	ldr	r3, [pc, #24]	; (8002e18 <xPortSysTickHandler+0x40>)
 8002dfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e02:	601a      	str	r2, [r3, #0]
 8002e04:	2300      	movs	r3, #0
 8002e06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	f383 8811 	msr	BASEPRI, r3
}
 8002e0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8002e10:	bf00      	nop
 8002e12:	3708      	adds	r7, #8
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	e000ed04 	.word	0xe000ed04

08002e1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002e20:	4b0b      	ldr	r3, [pc, #44]	; (8002e50 <vPortSetupTimerInterrupt+0x34>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002e26:	4b0b      	ldr	r3, [pc, #44]	; (8002e54 <vPortSetupTimerInterrupt+0x38>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002e2c:	4b0a      	ldr	r3, [pc, #40]	; (8002e58 <vPortSetupTimerInterrupt+0x3c>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a0a      	ldr	r2, [pc, #40]	; (8002e5c <vPortSetupTimerInterrupt+0x40>)
 8002e32:	fba2 2303 	umull	r2, r3, r2, r3
 8002e36:	099b      	lsrs	r3, r3, #6
 8002e38:	4a09      	ldr	r2, [pc, #36]	; (8002e60 <vPortSetupTimerInterrupt+0x44>)
 8002e3a:	3b01      	subs	r3, #1
 8002e3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002e3e:	4b04      	ldr	r3, [pc, #16]	; (8002e50 <vPortSetupTimerInterrupt+0x34>)
 8002e40:	2207      	movs	r2, #7
 8002e42:	601a      	str	r2, [r3, #0]
}
 8002e44:	bf00      	nop
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	e000e010 	.word	0xe000e010
 8002e54:	e000e018 	.word	0xe000e018
 8002e58:	20000010 	.word	0x20000010
 8002e5c:	10624dd3 	.word	0x10624dd3
 8002e60:	e000e014 	.word	0xe000e014

08002e64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002e64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002e74 <vPortEnableVFP+0x10>
 8002e68:	6801      	ldr	r1, [r0, #0]
 8002e6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002e6e:	6001      	str	r1, [r0, #0]
 8002e70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8002e72:	bf00      	nop
 8002e74:	e000ed88 	.word	0xe000ed88

08002e78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8002e78:	b480      	push	{r7}
 8002e7a:	b085      	sub	sp, #20
 8002e7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8002e7e:	f3ef 8305 	mrs	r3, IPSR
 8002e82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2b0f      	cmp	r3, #15
 8002e88:	d914      	bls.n	8002eb4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002e8a:	4a17      	ldr	r2, [pc, #92]	; (8002ee8 <vPortValidateInterruptPriority+0x70>)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	4413      	add	r3, r2
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002e94:	4b15      	ldr	r3, [pc, #84]	; (8002eec <vPortValidateInterruptPriority+0x74>)
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	7afa      	ldrb	r2, [r7, #11]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d20a      	bcs.n	8002eb4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8002e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ea2:	f383 8811 	msr	BASEPRI, r3
 8002ea6:	f3bf 8f6f 	isb	sy
 8002eaa:	f3bf 8f4f 	dsb	sy
 8002eae:	607b      	str	r3, [r7, #4]
}
 8002eb0:	bf00      	nop
 8002eb2:	e7fe      	b.n	8002eb2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002eb4:	4b0e      	ldr	r3, [pc, #56]	; (8002ef0 <vPortValidateInterruptPriority+0x78>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002ebc:	4b0d      	ldr	r3, [pc, #52]	; (8002ef4 <vPortValidateInterruptPriority+0x7c>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d90a      	bls.n	8002eda <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8002ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ec8:	f383 8811 	msr	BASEPRI, r3
 8002ecc:	f3bf 8f6f 	isb	sy
 8002ed0:	f3bf 8f4f 	dsb	sy
 8002ed4:	603b      	str	r3, [r7, #0]
}
 8002ed6:	bf00      	nop
 8002ed8:	e7fe      	b.n	8002ed8 <vPortValidateInterruptPriority+0x60>
	}
 8002eda:	bf00      	nop
 8002edc:	3714      	adds	r7, #20
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	e000e3f0 	.word	0xe000e3f0
 8002eec:	20000d84 	.word	0x20000d84
 8002ef0:	e000ed0c 	.word	0xe000ed0c
 8002ef4:	20000d88 	.word	0x20000d88

08002ef8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b08a      	sub	sp, #40	; 0x28
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002f00:	2300      	movs	r3, #0
 8002f02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002f04:	f7fe fd96 	bl	8001a34 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002f08:	4b5b      	ldr	r3, [pc, #364]	; (8003078 <pvPortMalloc+0x180>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d101      	bne.n	8002f14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002f10:	f000 f920 	bl	8003154 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002f14:	4b59      	ldr	r3, [pc, #356]	; (800307c <pvPortMalloc+0x184>)
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	f040 8093 	bne.w	8003048 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d01d      	beq.n	8002f64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8002f28:	2208      	movs	r2, #8
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f003 0307 	and.w	r3, r3, #7
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d014      	beq.n	8002f64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f023 0307 	bic.w	r3, r3, #7
 8002f40:	3308      	adds	r3, #8
 8002f42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f003 0307 	and.w	r3, r3, #7
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d00a      	beq.n	8002f64 <pvPortMalloc+0x6c>
	__asm volatile
 8002f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f52:	f383 8811 	msr	BASEPRI, r3
 8002f56:	f3bf 8f6f 	isb	sy
 8002f5a:	f3bf 8f4f 	dsb	sy
 8002f5e:	617b      	str	r3, [r7, #20]
}
 8002f60:	bf00      	nop
 8002f62:	e7fe      	b.n	8002f62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d06e      	beq.n	8003048 <pvPortMalloc+0x150>
 8002f6a:	4b45      	ldr	r3, [pc, #276]	; (8003080 <pvPortMalloc+0x188>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d869      	bhi.n	8003048 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002f74:	4b43      	ldr	r3, [pc, #268]	; (8003084 <pvPortMalloc+0x18c>)
 8002f76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002f78:	4b42      	ldr	r3, [pc, #264]	; (8003084 <pvPortMalloc+0x18c>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002f7e:	e004      	b.n	8002f8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8002f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d903      	bls.n	8002f9c <pvPortMalloc+0xa4>
 8002f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d1f1      	bne.n	8002f80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002f9c:	4b36      	ldr	r3, [pc, #216]	; (8003078 <pvPortMalloc+0x180>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d050      	beq.n	8003048 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002fa6:	6a3b      	ldr	r3, [r7, #32]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2208      	movs	r2, #8
 8002fac:	4413      	add	r3, r2
 8002fae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	6a3b      	ldr	r3, [r7, #32]
 8002fb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fba:	685a      	ldr	r2, [r3, #4]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	1ad2      	subs	r2, r2, r3
 8002fc0:	2308      	movs	r3, #8
 8002fc2:	005b      	lsls	r3, r3, #1
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d91f      	bls.n	8003008 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002fc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4413      	add	r3, r2
 8002fce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	f003 0307 	and.w	r3, r3, #7
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d00a      	beq.n	8002ff0 <pvPortMalloc+0xf8>
	__asm volatile
 8002fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fde:	f383 8811 	msr	BASEPRI, r3
 8002fe2:	f3bf 8f6f 	isb	sy
 8002fe6:	f3bf 8f4f 	dsb	sy
 8002fea:	613b      	str	r3, [r7, #16]
}
 8002fec:	bf00      	nop
 8002fee:	e7fe      	b.n	8002fee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff2:	685a      	ldr	r2, [r3, #4]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	1ad2      	subs	r2, r2, r3
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003002:	69b8      	ldr	r0, [r7, #24]
 8003004:	f000 f908 	bl	8003218 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003008:	4b1d      	ldr	r3, [pc, #116]	; (8003080 <pvPortMalloc+0x188>)
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	4a1b      	ldr	r2, [pc, #108]	; (8003080 <pvPortMalloc+0x188>)
 8003014:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003016:	4b1a      	ldr	r3, [pc, #104]	; (8003080 <pvPortMalloc+0x188>)
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	4b1b      	ldr	r3, [pc, #108]	; (8003088 <pvPortMalloc+0x190>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	429a      	cmp	r2, r3
 8003020:	d203      	bcs.n	800302a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003022:	4b17      	ldr	r3, [pc, #92]	; (8003080 <pvPortMalloc+0x188>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a18      	ldr	r2, [pc, #96]	; (8003088 <pvPortMalloc+0x190>)
 8003028:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800302a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302c:	685a      	ldr	r2, [r3, #4]
 800302e:	4b13      	ldr	r3, [pc, #76]	; (800307c <pvPortMalloc+0x184>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	431a      	orrs	r2, r3
 8003034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003036:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303a:	2200      	movs	r2, #0
 800303c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800303e:	4b13      	ldr	r3, [pc, #76]	; (800308c <pvPortMalloc+0x194>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	3301      	adds	r3, #1
 8003044:	4a11      	ldr	r2, [pc, #68]	; (800308c <pvPortMalloc+0x194>)
 8003046:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003048:	f7fe fd02 	bl	8001a50 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	f003 0307 	and.w	r3, r3, #7
 8003052:	2b00      	cmp	r3, #0
 8003054:	d00a      	beq.n	800306c <pvPortMalloc+0x174>
	__asm volatile
 8003056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800305a:	f383 8811 	msr	BASEPRI, r3
 800305e:	f3bf 8f6f 	isb	sy
 8003062:	f3bf 8f4f 	dsb	sy
 8003066:	60fb      	str	r3, [r7, #12]
}
 8003068:	bf00      	nop
 800306a:	e7fe      	b.n	800306a <pvPortMalloc+0x172>
	return pvReturn;
 800306c:	69fb      	ldr	r3, [r7, #28]
}
 800306e:	4618      	mov	r0, r3
 8003070:	3728      	adds	r7, #40	; 0x28
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	2000194c 	.word	0x2000194c
 800307c:	20001960 	.word	0x20001960
 8003080:	20001950 	.word	0x20001950
 8003084:	20001944 	.word	0x20001944
 8003088:	20001954 	.word	0x20001954
 800308c:	20001958 	.word	0x20001958

08003090 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b086      	sub	sp, #24
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d04d      	beq.n	800313e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80030a2:	2308      	movs	r3, #8
 80030a4:	425b      	negs	r3, r3
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	4413      	add	r3, r2
 80030aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	685a      	ldr	r2, [r3, #4]
 80030b4:	4b24      	ldr	r3, [pc, #144]	; (8003148 <vPortFree+0xb8>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4013      	ands	r3, r2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d10a      	bne.n	80030d4 <vPortFree+0x44>
	__asm volatile
 80030be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030c2:	f383 8811 	msr	BASEPRI, r3
 80030c6:	f3bf 8f6f 	isb	sy
 80030ca:	f3bf 8f4f 	dsb	sy
 80030ce:	60fb      	str	r3, [r7, #12]
}
 80030d0:	bf00      	nop
 80030d2:	e7fe      	b.n	80030d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d00a      	beq.n	80030f2 <vPortFree+0x62>
	__asm volatile
 80030dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e0:	f383 8811 	msr	BASEPRI, r3
 80030e4:	f3bf 8f6f 	isb	sy
 80030e8:	f3bf 8f4f 	dsb	sy
 80030ec:	60bb      	str	r3, [r7, #8]
}
 80030ee:	bf00      	nop
 80030f0:	e7fe      	b.n	80030f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	685a      	ldr	r2, [r3, #4]
 80030f6:	4b14      	ldr	r3, [pc, #80]	; (8003148 <vPortFree+0xb8>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4013      	ands	r3, r2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d01e      	beq.n	800313e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d11a      	bne.n	800313e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	685a      	ldr	r2, [r3, #4]
 800310c:	4b0e      	ldr	r3, [pc, #56]	; (8003148 <vPortFree+0xb8>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	43db      	mvns	r3, r3
 8003112:	401a      	ands	r2, r3
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003118:	f7fe fc8c 	bl	8001a34 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	685a      	ldr	r2, [r3, #4]
 8003120:	4b0a      	ldr	r3, [pc, #40]	; (800314c <vPortFree+0xbc>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4413      	add	r3, r2
 8003126:	4a09      	ldr	r2, [pc, #36]	; (800314c <vPortFree+0xbc>)
 8003128:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800312a:	6938      	ldr	r0, [r7, #16]
 800312c:	f000 f874 	bl	8003218 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003130:	4b07      	ldr	r3, [pc, #28]	; (8003150 <vPortFree+0xc0>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	3301      	adds	r3, #1
 8003136:	4a06      	ldr	r2, [pc, #24]	; (8003150 <vPortFree+0xc0>)
 8003138:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800313a:	f7fe fc89 	bl	8001a50 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800313e:	bf00      	nop
 8003140:	3718      	adds	r7, #24
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	20001960 	.word	0x20001960
 800314c:	20001950 	.word	0x20001950
 8003150:	2000195c 	.word	0x2000195c

08003154 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003154:	b480      	push	{r7}
 8003156:	b085      	sub	sp, #20
 8003158:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800315a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800315e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003160:	4b27      	ldr	r3, [pc, #156]	; (8003200 <prvHeapInit+0xac>)
 8003162:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f003 0307 	and.w	r3, r3, #7
 800316a:	2b00      	cmp	r3, #0
 800316c:	d00c      	beq.n	8003188 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	3307      	adds	r3, #7
 8003172:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f023 0307 	bic.w	r3, r3, #7
 800317a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800317c:	68ba      	ldr	r2, [r7, #8]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	4a1f      	ldr	r2, [pc, #124]	; (8003200 <prvHeapInit+0xac>)
 8003184:	4413      	add	r3, r2
 8003186:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800318c:	4a1d      	ldr	r2, [pc, #116]	; (8003204 <prvHeapInit+0xb0>)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003192:	4b1c      	ldr	r3, [pc, #112]	; (8003204 <prvHeapInit+0xb0>)
 8003194:	2200      	movs	r2, #0
 8003196:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	68ba      	ldr	r2, [r7, #8]
 800319c:	4413      	add	r3, r2
 800319e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80031a0:	2208      	movs	r2, #8
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	1a9b      	subs	r3, r3, r2
 80031a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f023 0307 	bic.w	r3, r3, #7
 80031ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	4a15      	ldr	r2, [pc, #84]	; (8003208 <prvHeapInit+0xb4>)
 80031b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80031b6:	4b14      	ldr	r3, [pc, #80]	; (8003208 <prvHeapInit+0xb4>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2200      	movs	r2, #0
 80031bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80031be:	4b12      	ldr	r3, [pc, #72]	; (8003208 <prvHeapInit+0xb4>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2200      	movs	r2, #0
 80031c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	68fa      	ldr	r2, [r7, #12]
 80031ce:	1ad2      	subs	r2, r2, r3
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80031d4:	4b0c      	ldr	r3, [pc, #48]	; (8003208 <prvHeapInit+0xb4>)
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	4a0a      	ldr	r2, [pc, #40]	; (800320c <prvHeapInit+0xb8>)
 80031e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	4a09      	ldr	r2, [pc, #36]	; (8003210 <prvHeapInit+0xbc>)
 80031ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80031ec:	4b09      	ldr	r3, [pc, #36]	; (8003214 <prvHeapInit+0xc0>)
 80031ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80031f2:	601a      	str	r2, [r3, #0]
}
 80031f4:	bf00      	nop
 80031f6:	3714      	adds	r7, #20
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr
 8003200:	20000d8c 	.word	0x20000d8c
 8003204:	20001944 	.word	0x20001944
 8003208:	2000194c 	.word	0x2000194c
 800320c:	20001954 	.word	0x20001954
 8003210:	20001950 	.word	0x20001950
 8003214:	20001960 	.word	0x20001960

08003218 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003218:	b480      	push	{r7}
 800321a:	b085      	sub	sp, #20
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003220:	4b28      	ldr	r3, [pc, #160]	; (80032c4 <prvInsertBlockIntoFreeList+0xac>)
 8003222:	60fb      	str	r3, [r7, #12]
 8003224:	e002      	b.n	800322c <prvInsertBlockIntoFreeList+0x14>
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	60fb      	str	r3, [r7, #12]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	429a      	cmp	r2, r3
 8003234:	d8f7      	bhi.n	8003226 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	68ba      	ldr	r2, [r7, #8]
 8003240:	4413      	add	r3, r2
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	429a      	cmp	r2, r3
 8003246:	d108      	bne.n	800325a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	685a      	ldr	r2, [r3, #4]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	441a      	add	r2, r3
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	68ba      	ldr	r2, [r7, #8]
 8003264:	441a      	add	r2, r3
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	429a      	cmp	r2, r3
 800326c:	d118      	bne.n	80032a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	4b15      	ldr	r3, [pc, #84]	; (80032c8 <prvInsertBlockIntoFreeList+0xb0>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	429a      	cmp	r2, r3
 8003278:	d00d      	beq.n	8003296 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685a      	ldr	r2, [r3, #4]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	441a      	add	r2, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	601a      	str	r2, [r3, #0]
 8003294:	e008      	b.n	80032a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003296:	4b0c      	ldr	r3, [pc, #48]	; (80032c8 <prvInsertBlockIntoFreeList+0xb0>)
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	601a      	str	r2, [r3, #0]
 800329e:	e003      	b.n	80032a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80032a8:	68fa      	ldr	r2, [r7, #12]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d002      	beq.n	80032b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80032b6:	bf00      	nop
 80032b8:	3714      	adds	r7, #20
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	20001944 	.word	0x20001944
 80032c8:	2000194c 	.word	0x2000194c

080032cc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80032d2:	2300      	movs	r3, #0
 80032d4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032d6:	2003      	movs	r0, #3
 80032d8:	f000 f928 	bl	800352c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80032dc:	2000      	movs	r0, #0
 80032de:	f000 f80d 	bl	80032fc <HAL_InitTick>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d002      	beq.n	80032ee <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	71fb      	strb	r3, [r7, #7]
 80032ec:	e001      	b.n	80032f2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80032ee:	f003 fddb 	bl	8006ea8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80032f2:	79fb      	ldrb	r3, [r7, #7]
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3708      	adds	r7, #8
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003304:	2300      	movs	r3, #0
 8003306:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003308:	4b17      	ldr	r3, [pc, #92]	; (8003368 <HAL_InitTick+0x6c>)
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d023      	beq.n	8003358 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003310:	4b16      	ldr	r3, [pc, #88]	; (800336c <HAL_InitTick+0x70>)
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	4b14      	ldr	r3, [pc, #80]	; (8003368 <HAL_InitTick+0x6c>)
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	4619      	mov	r1, r3
 800331a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800331e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003322:	fbb2 f3f3 	udiv	r3, r2, r3
 8003326:	4618      	mov	r0, r3
 8003328:	f000 f935 	bl	8003596 <HAL_SYSTICK_Config>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d10f      	bne.n	8003352 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2b0f      	cmp	r3, #15
 8003336:	d809      	bhi.n	800334c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003338:	2200      	movs	r2, #0
 800333a:	6879      	ldr	r1, [r7, #4]
 800333c:	f04f 30ff 	mov.w	r0, #4294967295
 8003340:	f000 f8ff 	bl	8003542 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003344:	4a0a      	ldr	r2, [pc, #40]	; (8003370 <HAL_InitTick+0x74>)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6013      	str	r3, [r2, #0]
 800334a:	e007      	b.n	800335c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	73fb      	strb	r3, [r7, #15]
 8003350:	e004      	b.n	800335c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	73fb      	strb	r3, [r7, #15]
 8003356:	e001      	b.n	800335c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800335c:	7bfb      	ldrb	r3, [r7, #15]
}
 800335e:	4618      	mov	r0, r3
 8003360:	3710      	adds	r7, #16
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	2000000c 	.word	0x2000000c
 800336c:	20000010 	.word	0x20000010
 8003370:	20000008 	.word	0x20000008

08003374 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003374:	b480      	push	{r7}
 8003376:	af00      	add	r7, sp, #0
  return uwTick;
 8003378:	4b03      	ldr	r3, [pc, #12]	; (8003388 <HAL_GetTick+0x14>)
 800337a:	681b      	ldr	r3, [r3, #0]
}
 800337c:	4618      	mov	r0, r3
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	200019e0 	.word	0x200019e0

0800338c <__NVIC_SetPriorityGrouping>:
{
 800338c:	b480      	push	{r7}
 800338e:	b085      	sub	sp, #20
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f003 0307 	and.w	r3, r3, #7
 800339a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800339c:	4b0c      	ldr	r3, [pc, #48]	; (80033d0 <__NVIC_SetPriorityGrouping+0x44>)
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033a2:	68ba      	ldr	r2, [r7, #8]
 80033a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033a8:	4013      	ands	r3, r2
 80033aa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033be:	4a04      	ldr	r2, [pc, #16]	; (80033d0 <__NVIC_SetPriorityGrouping+0x44>)
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	60d3      	str	r3, [r2, #12]
}
 80033c4:	bf00      	nop
 80033c6:	3714      	adds	r7, #20
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr
 80033d0:	e000ed00 	.word	0xe000ed00

080033d4 <__NVIC_GetPriorityGrouping>:
{
 80033d4:	b480      	push	{r7}
 80033d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033d8:	4b04      	ldr	r3, [pc, #16]	; (80033ec <__NVIC_GetPriorityGrouping+0x18>)
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	0a1b      	lsrs	r3, r3, #8
 80033de:	f003 0307 	and.w	r3, r3, #7
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr
 80033ec:	e000ed00 	.word	0xe000ed00

080033f0 <__NVIC_EnableIRQ>:
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	4603      	mov	r3, r0
 80033f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	db0b      	blt.n	800341a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003402:	79fb      	ldrb	r3, [r7, #7]
 8003404:	f003 021f 	and.w	r2, r3, #31
 8003408:	4907      	ldr	r1, [pc, #28]	; (8003428 <__NVIC_EnableIRQ+0x38>)
 800340a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800340e:	095b      	lsrs	r3, r3, #5
 8003410:	2001      	movs	r0, #1
 8003412:	fa00 f202 	lsl.w	r2, r0, r2
 8003416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800341a:	bf00      	nop
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	e000e100 	.word	0xe000e100

0800342c <__NVIC_SetPriority>:
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	4603      	mov	r3, r0
 8003434:	6039      	str	r1, [r7, #0]
 8003436:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800343c:	2b00      	cmp	r3, #0
 800343e:	db0a      	blt.n	8003456 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	b2da      	uxtb	r2, r3
 8003444:	490c      	ldr	r1, [pc, #48]	; (8003478 <__NVIC_SetPriority+0x4c>)
 8003446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800344a:	0112      	lsls	r2, r2, #4
 800344c:	b2d2      	uxtb	r2, r2
 800344e:	440b      	add	r3, r1
 8003450:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003454:	e00a      	b.n	800346c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	b2da      	uxtb	r2, r3
 800345a:	4908      	ldr	r1, [pc, #32]	; (800347c <__NVIC_SetPriority+0x50>)
 800345c:	79fb      	ldrb	r3, [r7, #7]
 800345e:	f003 030f 	and.w	r3, r3, #15
 8003462:	3b04      	subs	r3, #4
 8003464:	0112      	lsls	r2, r2, #4
 8003466:	b2d2      	uxtb	r2, r2
 8003468:	440b      	add	r3, r1
 800346a:	761a      	strb	r2, [r3, #24]
}
 800346c:	bf00      	nop
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr
 8003478:	e000e100 	.word	0xe000e100
 800347c:	e000ed00 	.word	0xe000ed00

08003480 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003480:	b480      	push	{r7}
 8003482:	b089      	sub	sp, #36	; 0x24
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f003 0307 	and.w	r3, r3, #7
 8003492:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	f1c3 0307 	rsb	r3, r3, #7
 800349a:	2b04      	cmp	r3, #4
 800349c:	bf28      	it	cs
 800349e:	2304      	movcs	r3, #4
 80034a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	3304      	adds	r3, #4
 80034a6:	2b06      	cmp	r3, #6
 80034a8:	d902      	bls.n	80034b0 <NVIC_EncodePriority+0x30>
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	3b03      	subs	r3, #3
 80034ae:	e000      	b.n	80034b2 <NVIC_EncodePriority+0x32>
 80034b0:	2300      	movs	r3, #0
 80034b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034b4:	f04f 32ff 	mov.w	r2, #4294967295
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	fa02 f303 	lsl.w	r3, r2, r3
 80034be:	43da      	mvns	r2, r3
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	401a      	ands	r2, r3
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034c8:	f04f 31ff 	mov.w	r1, #4294967295
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	fa01 f303 	lsl.w	r3, r1, r3
 80034d2:	43d9      	mvns	r1, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034d8:	4313      	orrs	r3, r2
         );
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3724      	adds	r7, #36	; 0x24
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
	...

080034e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	3b01      	subs	r3, #1
 80034f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034f8:	d301      	bcc.n	80034fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034fa:	2301      	movs	r3, #1
 80034fc:	e00f      	b.n	800351e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034fe:	4a0a      	ldr	r2, [pc, #40]	; (8003528 <SysTick_Config+0x40>)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	3b01      	subs	r3, #1
 8003504:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003506:	210f      	movs	r1, #15
 8003508:	f04f 30ff 	mov.w	r0, #4294967295
 800350c:	f7ff ff8e 	bl	800342c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003510:	4b05      	ldr	r3, [pc, #20]	; (8003528 <SysTick_Config+0x40>)
 8003512:	2200      	movs	r2, #0
 8003514:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003516:	4b04      	ldr	r3, [pc, #16]	; (8003528 <SysTick_Config+0x40>)
 8003518:	2207      	movs	r2, #7
 800351a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3708      	adds	r7, #8
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	e000e010 	.word	0xe000e010

0800352c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f7ff ff29 	bl	800338c <__NVIC_SetPriorityGrouping>
}
 800353a:	bf00      	nop
 800353c:	3708      	adds	r7, #8
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}

08003542 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003542:	b580      	push	{r7, lr}
 8003544:	b086      	sub	sp, #24
 8003546:	af00      	add	r7, sp, #0
 8003548:	4603      	mov	r3, r0
 800354a:	60b9      	str	r1, [r7, #8]
 800354c:	607a      	str	r2, [r7, #4]
 800354e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003550:	2300      	movs	r3, #0
 8003552:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003554:	f7ff ff3e 	bl	80033d4 <__NVIC_GetPriorityGrouping>
 8003558:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	68b9      	ldr	r1, [r7, #8]
 800355e:	6978      	ldr	r0, [r7, #20]
 8003560:	f7ff ff8e 	bl	8003480 <NVIC_EncodePriority>
 8003564:	4602      	mov	r2, r0
 8003566:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800356a:	4611      	mov	r1, r2
 800356c:	4618      	mov	r0, r3
 800356e:	f7ff ff5d 	bl	800342c <__NVIC_SetPriority>
}
 8003572:	bf00      	nop
 8003574:	3718      	adds	r7, #24
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800357a:	b580      	push	{r7, lr}
 800357c:	b082      	sub	sp, #8
 800357e:	af00      	add	r7, sp, #0
 8003580:	4603      	mov	r3, r0
 8003582:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003588:	4618      	mov	r0, r3
 800358a:	f7ff ff31 	bl	80033f0 <__NVIC_EnableIRQ>
}
 800358e:	bf00      	nop
 8003590:	3708      	adds	r7, #8
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003596:	b580      	push	{r7, lr}
 8003598:	b082      	sub	sp, #8
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f7ff ffa2 	bl	80034e8 <SysTick_Config>
 80035a4:	4603      	mov	r3, r0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3708      	adds	r7, #8
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
	...

080035b0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b085      	sub	sp, #20
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d101      	bne.n	80035c2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e098      	b.n	80036f4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	461a      	mov	r2, r3
 80035c8:	4b4d      	ldr	r3, [pc, #308]	; (8003700 <HAL_DMA_Init+0x150>)
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d80f      	bhi.n	80035ee <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	461a      	mov	r2, r3
 80035d4:	4b4b      	ldr	r3, [pc, #300]	; (8003704 <HAL_DMA_Init+0x154>)
 80035d6:	4413      	add	r3, r2
 80035d8:	4a4b      	ldr	r2, [pc, #300]	; (8003708 <HAL_DMA_Init+0x158>)
 80035da:	fba2 2303 	umull	r2, r3, r2, r3
 80035de:	091b      	lsrs	r3, r3, #4
 80035e0:	009a      	lsls	r2, r3, #2
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a48      	ldr	r2, [pc, #288]	; (800370c <HAL_DMA_Init+0x15c>)
 80035ea:	641a      	str	r2, [r3, #64]	; 0x40
 80035ec:	e00e      	b.n	800360c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	461a      	mov	r2, r3
 80035f4:	4b46      	ldr	r3, [pc, #280]	; (8003710 <HAL_DMA_Init+0x160>)
 80035f6:	4413      	add	r3, r2
 80035f8:	4a43      	ldr	r2, [pc, #268]	; (8003708 <HAL_DMA_Init+0x158>)
 80035fa:	fba2 2303 	umull	r2, r3, r2, r3
 80035fe:	091b      	lsrs	r3, r3, #4
 8003600:	009a      	lsls	r2, r3, #2
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a42      	ldr	r2, [pc, #264]	; (8003714 <HAL_DMA_Init+0x164>)
 800360a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2202      	movs	r2, #2
 8003610:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003626:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003630:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800363c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003648:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a1b      	ldr	r3, [r3, #32]
 800364e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003650:	68fa      	ldr	r2, [r7, #12]
 8003652:	4313      	orrs	r3, r2
 8003654:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	68fa      	ldr	r2, [r7, #12]
 800365c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003666:	d039      	beq.n	80036dc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366c:	4a27      	ldr	r2, [pc, #156]	; (800370c <HAL_DMA_Init+0x15c>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d11a      	bne.n	80036a8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003672:	4b29      	ldr	r3, [pc, #164]	; (8003718 <HAL_DMA_Init+0x168>)
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800367a:	f003 031c 	and.w	r3, r3, #28
 800367e:	210f      	movs	r1, #15
 8003680:	fa01 f303 	lsl.w	r3, r1, r3
 8003684:	43db      	mvns	r3, r3
 8003686:	4924      	ldr	r1, [pc, #144]	; (8003718 <HAL_DMA_Init+0x168>)
 8003688:	4013      	ands	r3, r2
 800368a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800368c:	4b22      	ldr	r3, [pc, #136]	; (8003718 <HAL_DMA_Init+0x168>)
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6859      	ldr	r1, [r3, #4]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003698:	f003 031c 	and.w	r3, r3, #28
 800369c:	fa01 f303 	lsl.w	r3, r1, r3
 80036a0:	491d      	ldr	r1, [pc, #116]	; (8003718 <HAL_DMA_Init+0x168>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	600b      	str	r3, [r1, #0]
 80036a6:	e019      	b.n	80036dc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80036a8:	4b1c      	ldr	r3, [pc, #112]	; (800371c <HAL_DMA_Init+0x16c>)
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b0:	f003 031c 	and.w	r3, r3, #28
 80036b4:	210f      	movs	r1, #15
 80036b6:	fa01 f303 	lsl.w	r3, r1, r3
 80036ba:	43db      	mvns	r3, r3
 80036bc:	4917      	ldr	r1, [pc, #92]	; (800371c <HAL_DMA_Init+0x16c>)
 80036be:	4013      	ands	r3, r2
 80036c0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80036c2:	4b16      	ldr	r3, [pc, #88]	; (800371c <HAL_DMA_Init+0x16c>)
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6859      	ldr	r1, [r3, #4]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ce:	f003 031c 	and.w	r3, r3, #28
 80036d2:	fa01 f303 	lsl.w	r3, r1, r3
 80036d6:	4911      	ldr	r1, [pc, #68]	; (800371c <HAL_DMA_Init+0x16c>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2201      	movs	r2, #1
 80036e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80036f2:	2300      	movs	r3, #0
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3714      	adds	r7, #20
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr
 8003700:	40020407 	.word	0x40020407
 8003704:	bffdfff8 	.word	0xbffdfff8
 8003708:	cccccccd 	.word	0xcccccccd
 800370c:	40020000 	.word	0x40020000
 8003710:	bffdfbf8 	.word	0xbffdfbf8
 8003714:	40020400 	.word	0x40020400
 8003718:	400200a8 	.word	0x400200a8
 800371c:	400204a8 	.word	0x400204a8

08003720 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b086      	sub	sp, #24
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	607a      	str	r2, [r7, #4]
 800372c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800372e:	2300      	movs	r3, #0
 8003730:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003738:	2b01      	cmp	r3, #1
 800373a:	d101      	bne.n	8003740 <HAL_DMA_Start_IT+0x20>
 800373c:	2302      	movs	r3, #2
 800373e:	e04b      	b.n	80037d8 <HAL_DMA_Start_IT+0xb8>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800374e:	b2db      	uxtb	r3, r3
 8003750:	2b01      	cmp	r3, #1
 8003752:	d13a      	bne.n	80037ca <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2202      	movs	r2, #2
 8003758:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2200      	movs	r2, #0
 8003760:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f022 0201 	bic.w	r2, r2, #1
 8003770:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	68b9      	ldr	r1, [r7, #8]
 8003778:	68f8      	ldr	r0, [r7, #12]
 800377a:	f000 f921 	bl	80039c0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003782:	2b00      	cmp	r3, #0
 8003784:	d008      	beq.n	8003798 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f042 020e 	orr.w	r2, r2, #14
 8003794:	601a      	str	r2, [r3, #0]
 8003796:	e00f      	b.n	80037b8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f022 0204 	bic.w	r2, r2, #4
 80037a6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f042 020a 	orr.w	r2, r2, #10
 80037b6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f042 0201 	orr.w	r2, r2, #1
 80037c6:	601a      	str	r2, [r3, #0]
 80037c8:	e005      	b.n	80037d6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80037d2:	2302      	movs	r3, #2
 80037d4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80037d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3718      	adds	r7, #24
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037e8:	2300      	movs	r3, #0
 80037ea:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d005      	beq.n	8003804 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2204      	movs	r2, #4
 80037fc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	73fb      	strb	r3, [r7, #15]
 8003802:	e029      	b.n	8003858 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f022 020e 	bic.w	r2, r2, #14
 8003812:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f022 0201 	bic.w	r2, r2, #1
 8003822:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003828:	f003 021c 	and.w	r2, r3, #28
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003830:	2101      	movs	r1, #1
 8003832:	fa01 f202 	lsl.w	r2, r1, r2
 8003836:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800384c:	2b00      	cmp	r3, #0
 800384e:	d003      	beq.n	8003858 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	4798      	blx	r3
    }
  }
  return status;
 8003858:	7bfb      	ldrb	r3, [r7, #15]
}
 800385a:	4618      	mov	r0, r3
 800385c:	3710      	adds	r7, #16
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}

08003862 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003862:	b580      	push	{r7, lr}
 8003864:	b084      	sub	sp, #16
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800387e:	f003 031c 	and.w	r3, r3, #28
 8003882:	2204      	movs	r2, #4
 8003884:	409a      	lsls	r2, r3
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	4013      	ands	r3, r2
 800388a:	2b00      	cmp	r3, #0
 800388c:	d026      	beq.n	80038dc <HAL_DMA_IRQHandler+0x7a>
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	f003 0304 	and.w	r3, r3, #4
 8003894:	2b00      	cmp	r3, #0
 8003896:	d021      	beq.n	80038dc <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0320 	and.w	r3, r3, #32
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d107      	bne.n	80038b6 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f022 0204 	bic.w	r2, r2, #4
 80038b4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ba:	f003 021c 	and.w	r2, r3, #28
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c2:	2104      	movs	r1, #4
 80038c4:	fa01 f202 	lsl.w	r2, r1, r2
 80038c8:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d071      	beq.n	80039b6 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80038da:	e06c      	b.n	80039b6 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e0:	f003 031c 	and.w	r3, r3, #28
 80038e4:	2202      	movs	r2, #2
 80038e6:	409a      	lsls	r2, r3
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	4013      	ands	r3, r2
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d02e      	beq.n	800394e <HAL_DMA_IRQHandler+0xec>
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	f003 0302 	and.w	r3, r3, #2
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d029      	beq.n	800394e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0320 	and.w	r3, r3, #32
 8003904:	2b00      	cmp	r3, #0
 8003906:	d10b      	bne.n	8003920 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f022 020a 	bic.w	r2, r2, #10
 8003916:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003924:	f003 021c 	and.w	r2, r3, #28
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392c:	2102      	movs	r1, #2
 800392e:	fa01 f202 	lsl.w	r2, r1, r2
 8003932:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003940:	2b00      	cmp	r3, #0
 8003942:	d038      	beq.n	80039b6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800394c:	e033      	b.n	80039b6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003952:	f003 031c 	and.w	r3, r3, #28
 8003956:	2208      	movs	r2, #8
 8003958:	409a      	lsls	r2, r3
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	4013      	ands	r3, r2
 800395e:	2b00      	cmp	r3, #0
 8003960:	d02a      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x156>
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	f003 0308 	and.w	r3, r3, #8
 8003968:	2b00      	cmp	r3, #0
 800396a:	d025      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f022 020e 	bic.w	r2, r2, #14
 800397a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003980:	f003 021c 	and.w	r2, r3, #28
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003988:	2101      	movs	r1, #1
 800398a:	fa01 f202 	lsl.w	r2, r1, r2
 800398e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2201      	movs	r2, #1
 800399a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d004      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80039b6:	bf00      	nop
 80039b8:	bf00      	nop
}
 80039ba:	3710      	adds	r7, #16
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b085      	sub	sp, #20
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	607a      	str	r2, [r7, #4]
 80039cc:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d2:	f003 021c 	and.w	r2, r3, #28
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039da:	2101      	movs	r1, #1
 80039dc:	fa01 f202 	lsl.w	r2, r1, r2
 80039e0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	683a      	ldr	r2, [r7, #0]
 80039e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	2b10      	cmp	r3, #16
 80039f0:	d108      	bne.n	8003a04 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	68ba      	ldr	r2, [r7, #8]
 8003a00:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003a02:	e007      	b.n	8003a14 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	68ba      	ldr	r2, [r7, #8]
 8003a0a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	60da      	str	r2, [r3, #12]
}
 8003a14:	bf00      	nop
 8003a16:	3714      	adds	r7, #20
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b087      	sub	sp, #28
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a2e:	e154      	b.n	8003cda <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	2101      	movs	r1, #1
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	fa01 f303 	lsl.w	r3, r1, r3
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	f000 8146 	beq.w	8003cd4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f003 0303 	and.w	r3, r3, #3
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d005      	beq.n	8003a60 <HAL_GPIO_Init+0x40>
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f003 0303 	and.w	r3, r3, #3
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d130      	bne.n	8003ac2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	005b      	lsls	r3, r3, #1
 8003a6a:	2203      	movs	r2, #3
 8003a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a70:	43db      	mvns	r3, r3
 8003a72:	693a      	ldr	r2, [r7, #16]
 8003a74:	4013      	ands	r3, r2
 8003a76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	68da      	ldr	r2, [r3, #12]
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	005b      	lsls	r3, r3, #1
 8003a80:	fa02 f303 	lsl.w	r3, r2, r3
 8003a84:	693a      	ldr	r2, [r7, #16]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	693a      	ldr	r2, [r7, #16]
 8003a8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a96:	2201      	movs	r2, #1
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9e:	43db      	mvns	r3, r3
 8003aa0:	693a      	ldr	r2, [r7, #16]
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	091b      	lsrs	r3, r3, #4
 8003aac:	f003 0201 	and.w	r2, r3, #1
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab6:	693a      	ldr	r2, [r7, #16]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	693a      	ldr	r2, [r7, #16]
 8003ac0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f003 0303 	and.w	r3, r3, #3
 8003aca:	2b03      	cmp	r3, #3
 8003acc:	d017      	beq.n	8003afe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	005b      	lsls	r3, r3, #1
 8003ad8:	2203      	movs	r2, #3
 8003ada:	fa02 f303 	lsl.w	r3, r2, r3
 8003ade:	43db      	mvns	r3, r3
 8003ae0:	693a      	ldr	r2, [r7, #16]
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	689a      	ldr	r2, [r3, #8]
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	005b      	lsls	r3, r3, #1
 8003aee:	fa02 f303 	lsl.w	r3, r2, r3
 8003af2:	693a      	ldr	r2, [r7, #16]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	693a      	ldr	r2, [r7, #16]
 8003afc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f003 0303 	and.w	r3, r3, #3
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d123      	bne.n	8003b52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	08da      	lsrs	r2, r3, #3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	3208      	adds	r2, #8
 8003b12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	f003 0307 	and.w	r3, r3, #7
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	220f      	movs	r2, #15
 8003b22:	fa02 f303 	lsl.w	r3, r2, r3
 8003b26:	43db      	mvns	r3, r3
 8003b28:	693a      	ldr	r2, [r7, #16]
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	691a      	ldr	r2, [r3, #16]
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	f003 0307 	and.w	r3, r3, #7
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3e:	693a      	ldr	r2, [r7, #16]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	08da      	lsrs	r2, r3, #3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	3208      	adds	r2, #8
 8003b4c:	6939      	ldr	r1, [r7, #16]
 8003b4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	005b      	lsls	r3, r3, #1
 8003b5c:	2203      	movs	r2, #3
 8003b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b62:	43db      	mvns	r3, r3
 8003b64:	693a      	ldr	r2, [r7, #16]
 8003b66:	4013      	ands	r3, r2
 8003b68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f003 0203 	and.w	r2, r3, #3
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	005b      	lsls	r3, r3, #1
 8003b76:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7a:	693a      	ldr	r2, [r7, #16]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	693a      	ldr	r2, [r7, #16]
 8003b84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	f000 80a0 	beq.w	8003cd4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b94:	4b58      	ldr	r3, [pc, #352]	; (8003cf8 <HAL_GPIO_Init+0x2d8>)
 8003b96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b98:	4a57      	ldr	r2, [pc, #348]	; (8003cf8 <HAL_GPIO_Init+0x2d8>)
 8003b9a:	f043 0301 	orr.w	r3, r3, #1
 8003b9e:	6613      	str	r3, [r2, #96]	; 0x60
 8003ba0:	4b55      	ldr	r3, [pc, #340]	; (8003cf8 <HAL_GPIO_Init+0x2d8>)
 8003ba2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ba4:	f003 0301 	and.w	r3, r3, #1
 8003ba8:	60bb      	str	r3, [r7, #8]
 8003baa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003bac:	4a53      	ldr	r2, [pc, #332]	; (8003cfc <HAL_GPIO_Init+0x2dc>)
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	089b      	lsrs	r3, r3, #2
 8003bb2:	3302      	adds	r3, #2
 8003bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bb8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	f003 0303 	and.w	r3, r3, #3
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	220f      	movs	r2, #15
 8003bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc8:	43db      	mvns	r3, r3
 8003bca:	693a      	ldr	r2, [r7, #16]
 8003bcc:	4013      	ands	r3, r2
 8003bce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003bd6:	d019      	beq.n	8003c0c <HAL_GPIO_Init+0x1ec>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a49      	ldr	r2, [pc, #292]	; (8003d00 <HAL_GPIO_Init+0x2e0>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d013      	beq.n	8003c08 <HAL_GPIO_Init+0x1e8>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a48      	ldr	r2, [pc, #288]	; (8003d04 <HAL_GPIO_Init+0x2e4>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d00d      	beq.n	8003c04 <HAL_GPIO_Init+0x1e4>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4a47      	ldr	r2, [pc, #284]	; (8003d08 <HAL_GPIO_Init+0x2e8>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d007      	beq.n	8003c00 <HAL_GPIO_Init+0x1e0>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a46      	ldr	r2, [pc, #280]	; (8003d0c <HAL_GPIO_Init+0x2ec>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d101      	bne.n	8003bfc <HAL_GPIO_Init+0x1dc>
 8003bf8:	2304      	movs	r3, #4
 8003bfa:	e008      	b.n	8003c0e <HAL_GPIO_Init+0x1ee>
 8003bfc:	2307      	movs	r3, #7
 8003bfe:	e006      	b.n	8003c0e <HAL_GPIO_Init+0x1ee>
 8003c00:	2303      	movs	r3, #3
 8003c02:	e004      	b.n	8003c0e <HAL_GPIO_Init+0x1ee>
 8003c04:	2302      	movs	r3, #2
 8003c06:	e002      	b.n	8003c0e <HAL_GPIO_Init+0x1ee>
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e000      	b.n	8003c0e <HAL_GPIO_Init+0x1ee>
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	697a      	ldr	r2, [r7, #20]
 8003c10:	f002 0203 	and.w	r2, r2, #3
 8003c14:	0092      	lsls	r2, r2, #2
 8003c16:	4093      	lsls	r3, r2
 8003c18:	693a      	ldr	r2, [r7, #16]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003c1e:	4937      	ldr	r1, [pc, #220]	; (8003cfc <HAL_GPIO_Init+0x2dc>)
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	089b      	lsrs	r3, r3, #2
 8003c24:	3302      	adds	r3, #2
 8003c26:	693a      	ldr	r2, [r7, #16]
 8003c28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c2c:	4b38      	ldr	r3, [pc, #224]	; (8003d10 <HAL_GPIO_Init+0x2f0>)
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	43db      	mvns	r3, r3
 8003c36:	693a      	ldr	r2, [r7, #16]
 8003c38:	4013      	ands	r3, r2
 8003c3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d003      	beq.n	8003c50 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003c48:	693a      	ldr	r2, [r7, #16]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003c50:	4a2f      	ldr	r2, [pc, #188]	; (8003d10 <HAL_GPIO_Init+0x2f0>)
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003c56:	4b2e      	ldr	r3, [pc, #184]	; (8003d10 <HAL_GPIO_Init+0x2f0>)
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	43db      	mvns	r3, r3
 8003c60:	693a      	ldr	r2, [r7, #16]
 8003c62:	4013      	ands	r3, r2
 8003c64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d003      	beq.n	8003c7a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003c72:	693a      	ldr	r2, [r7, #16]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c7a:	4a25      	ldr	r2, [pc, #148]	; (8003d10 <HAL_GPIO_Init+0x2f0>)
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003c80:	4b23      	ldr	r3, [pc, #140]	; (8003d10 <HAL_GPIO_Init+0x2f0>)
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	43db      	mvns	r3, r3
 8003c8a:	693a      	ldr	r2, [r7, #16]
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d003      	beq.n	8003ca4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003c9c:	693a      	ldr	r2, [r7, #16]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003ca4:	4a1a      	ldr	r2, [pc, #104]	; (8003d10 <HAL_GPIO_Init+0x2f0>)
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003caa:	4b19      	ldr	r3, [pc, #100]	; (8003d10 <HAL_GPIO_Init+0x2f0>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	43db      	mvns	r3, r3
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d003      	beq.n	8003cce <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003cc6:	693a      	ldr	r2, [r7, #16]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003cce:	4a10      	ldr	r2, [pc, #64]	; (8003d10 <HAL_GPIO_Init+0x2f0>)
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	f47f aea3 	bne.w	8003a30 <HAL_GPIO_Init+0x10>
  }
}
 8003cea:	bf00      	nop
 8003cec:	bf00      	nop
 8003cee:	371c      	adds	r7, #28
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr
 8003cf8:	40021000 	.word	0x40021000
 8003cfc:	40010000 	.word	0x40010000
 8003d00:	48000400 	.word	0x48000400
 8003d04:	48000800 	.word	0x48000800
 8003d08:	48000c00 	.word	0x48000c00
 8003d0c:	48001000 	.word	0x48001000
 8003d10:	40010400 	.word	0x40010400

08003d14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	807b      	strh	r3, [r7, #2]
 8003d20:	4613      	mov	r3, r2
 8003d22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d24:	787b      	ldrb	r3, [r7, #1]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d003      	beq.n	8003d32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d2a:	887a      	ldrh	r2, [r7, #2]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003d30:	e002      	b.n	8003d38 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003d32:	887a      	ldrh	r2, [r7, #2]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003d38:	bf00      	nop
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003d44:	b480      	push	{r7}
 8003d46:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d48:	4b05      	ldr	r3, [pc, #20]	; (8003d60 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a04      	ldr	r2, [pc, #16]	; (8003d60 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003d4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d52:	6013      	str	r3, [r2, #0]
}
 8003d54:	bf00      	nop
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
 8003d5e:	bf00      	nop
 8003d60:	40007000 	.word	0x40007000

08003d64 <HAL_PWR_ConfigPVD>:
  *         more details about the voltage thresholds corresponding to each
  *         detection level.
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 8003d6c:	4b2b      	ldr	r3, [pc, #172]	; (8003e1c <HAL_PWR_ConfigPVD+0xb8>)
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f023 020e 	bic.w	r2, r3, #14
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4928      	ldr	r1, [pc, #160]	; (8003e1c <HAL_PWR_ConfigPVD+0xb8>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	604b      	str	r3, [r1, #4]

  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 8003d7e:	4b28      	ldr	r3, [pc, #160]	; (8003e20 <HAL_PWR_ConfigPVD+0xbc>)
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	4a27      	ldr	r2, [pc, #156]	; (8003e20 <HAL_PWR_ConfigPVD+0xbc>)
 8003d84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d88:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 8003d8a:	4b25      	ldr	r3, [pc, #148]	; (8003e20 <HAL_PWR_ConfigPVD+0xbc>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a24      	ldr	r2, [pc, #144]	; (8003e20 <HAL_PWR_ConfigPVD+0xbc>)
 8003d90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d94:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 8003d96:	4b22      	ldr	r3, [pc, #136]	; (8003e20 <HAL_PWR_ConfigPVD+0xbc>)
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	4a21      	ldr	r2, [pc, #132]	; (8003e20 <HAL_PWR_ConfigPVD+0xbc>)
 8003d9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003da0:	60d3      	str	r3, [r2, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8003da2:	4b1f      	ldr	r3, [pc, #124]	; (8003e20 <HAL_PWR_ConfigPVD+0xbc>)
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	4a1e      	ldr	r2, [pc, #120]	; (8003e20 <HAL_PWR_ConfigPVD+0xbc>)
 8003da8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dac:	6093      	str	r3, [r2, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d005      	beq.n	8003dc6 <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8003dba:	4b19      	ldr	r3, [pc, #100]	; (8003e20 <HAL_PWR_ConfigPVD+0xbc>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a18      	ldr	r2, [pc, #96]	; (8003e20 <HAL_PWR_ConfigPVD+0xbc>)
 8003dc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dc4:	6013      	str	r3, [r2, #0]
  }

  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d005      	beq.n	8003dde <HAL_PWR_ConfigPVD+0x7a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 8003dd2:	4b13      	ldr	r3, [pc, #76]	; (8003e20 <HAL_PWR_ConfigPVD+0xbc>)
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	4a12      	ldr	r2, [pc, #72]	; (8003e20 <HAL_PWR_ConfigPVD+0xbc>)
 8003dd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ddc:	6053      	str	r3, [r2, #4]
  }

  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	f003 0301 	and.w	r3, r3, #1
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d005      	beq.n	8003df6 <HAL_PWR_ConfigPVD+0x92>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8003dea:	4b0d      	ldr	r3, [pc, #52]	; (8003e20 <HAL_PWR_ConfigPVD+0xbc>)
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	4a0c      	ldr	r2, [pc, #48]	; (8003e20 <HAL_PWR_ConfigPVD+0xbc>)
 8003df0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003df4:	6093      	str	r3, [r2, #8]
  }

  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	f003 0302 	and.w	r3, r3, #2
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d005      	beq.n	8003e0e <HAL_PWR_ConfigPVD+0xaa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8003e02:	4b07      	ldr	r3, [pc, #28]	; (8003e20 <HAL_PWR_ConfigPVD+0xbc>)
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	4a06      	ldr	r2, [pc, #24]	; (8003e20 <HAL_PWR_ConfigPVD+0xbc>)
 8003e08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e0c:	60d3      	str	r3, [r2, #12]
  }

  return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	370c      	adds	r7, #12
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr
 8003e1c:	40007000 	.word	0x40007000
 8003e20:	40010400 	.word	0x40010400

08003e24 <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Power Voltage Detector (PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 8003e24:	b480      	push	{r7}
 8003e26:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 8003e28:	4b05      	ldr	r3, [pc, #20]	; (8003e40 <HAL_PWR_EnablePVD+0x1c>)
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	4a04      	ldr	r2, [pc, #16]	; (8003e40 <HAL_PWR_EnablePVD+0x1c>)
 8003e2e:	f043 0301 	orr.w	r3, r3, #1
 8003e32:	6053      	str	r3, [r2, #4]
}
 8003e34:	bf00      	nop
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	40007000 	.word	0x40007000

08003e44 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003e44:	b480      	push	{r7}
 8003e46:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003e48:	4b04      	ldr	r3, [pc, #16]	; (8003e5c <HAL_PWREx_GetVoltageRange+0x18>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr
 8003e5a:	bf00      	nop
 8003e5c:	40007000 	.word	0x40007000

08003e60 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b085      	sub	sp, #20
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e6e:	d130      	bne.n	8003ed2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e70:	4b23      	ldr	r3, [pc, #140]	; (8003f00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e7c:	d038      	beq.n	8003ef0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e7e:	4b20      	ldr	r3, [pc, #128]	; (8003f00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e86:	4a1e      	ldr	r2, [pc, #120]	; (8003f00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e88:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e8c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003e8e:	4b1d      	ldr	r3, [pc, #116]	; (8003f04 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	2232      	movs	r2, #50	; 0x32
 8003e94:	fb02 f303 	mul.w	r3, r2, r3
 8003e98:	4a1b      	ldr	r2, [pc, #108]	; (8003f08 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e9e:	0c9b      	lsrs	r3, r3, #18
 8003ea0:	3301      	adds	r3, #1
 8003ea2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ea4:	e002      	b.n	8003eac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003eac:	4b14      	ldr	r3, [pc, #80]	; (8003f00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003eae:	695b      	ldr	r3, [r3, #20]
 8003eb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eb8:	d102      	bne.n	8003ec0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d1f2      	bne.n	8003ea6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003ec0:	4b0f      	ldr	r3, [pc, #60]	; (8003f00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ec2:	695b      	ldr	r3, [r3, #20]
 8003ec4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ec8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ecc:	d110      	bne.n	8003ef0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e00f      	b.n	8003ef2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003ed2:	4b0b      	ldr	r3, [pc, #44]	; (8003f00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003eda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ede:	d007      	beq.n	8003ef0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003ee0:	4b07      	ldr	r3, [pc, #28]	; (8003f00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ee8:	4a05      	ldr	r2, [pc, #20]	; (8003f00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003eea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003eee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3714      	adds	r7, #20
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop
 8003f00:	40007000 	.word	0x40007000
 8003f04:	20000010 	.word	0x20000010
 8003f08:	431bde83 	.word	0x431bde83

08003f0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b088      	sub	sp, #32
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d101      	bne.n	8003f1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e3fe      	b.n	800471c <HAL_RCC_OscConfig+0x810>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f1e:	4ba1      	ldr	r3, [pc, #644]	; (80041a4 <HAL_RCC_OscConfig+0x298>)
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	f003 030c 	and.w	r3, r3, #12
 8003f26:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f28:	4b9e      	ldr	r3, [pc, #632]	; (80041a4 <HAL_RCC_OscConfig+0x298>)
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	f003 0303 	and.w	r3, r3, #3
 8003f30:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0310 	and.w	r3, r3, #16
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	f000 80e4 	beq.w	8004108 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d007      	beq.n	8003f56 <HAL_RCC_OscConfig+0x4a>
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	2b0c      	cmp	r3, #12
 8003f4a:	f040 808b 	bne.w	8004064 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	f040 8087 	bne.w	8004064 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003f56:	4b93      	ldr	r3, [pc, #588]	; (80041a4 <HAL_RCC_OscConfig+0x298>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0302 	and.w	r3, r3, #2
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d005      	beq.n	8003f6e <HAL_RCC_OscConfig+0x62>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	699b      	ldr	r3, [r3, #24]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d101      	bne.n	8003f6e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e3d6      	b.n	800471c <HAL_RCC_OscConfig+0x810>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a1a      	ldr	r2, [r3, #32]
 8003f72:	4b8c      	ldr	r3, [pc, #560]	; (80041a4 <HAL_RCC_OscConfig+0x298>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0308 	and.w	r3, r3, #8
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d004      	beq.n	8003f88 <HAL_RCC_OscConfig+0x7c>
 8003f7e:	4b89      	ldr	r3, [pc, #548]	; (80041a4 <HAL_RCC_OscConfig+0x298>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f86:	e005      	b.n	8003f94 <HAL_RCC_OscConfig+0x88>
 8003f88:	4b86      	ldr	r3, [pc, #536]	; (80041a4 <HAL_RCC_OscConfig+0x298>)
 8003f8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f8e:	091b      	lsrs	r3, r3, #4
 8003f90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d223      	bcs.n	8003fe0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6a1b      	ldr	r3, [r3, #32]
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f000 fd53 	bl	8004a48 <RCC_SetFlashLatencyFromMSIRange>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d001      	beq.n	8003fac <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e3b7      	b.n	800471c <HAL_RCC_OscConfig+0x810>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003fac:	4b7d      	ldr	r3, [pc, #500]	; (80041a4 <HAL_RCC_OscConfig+0x298>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a7c      	ldr	r2, [pc, #496]	; (80041a4 <HAL_RCC_OscConfig+0x298>)
 8003fb2:	f043 0308 	orr.w	r3, r3, #8
 8003fb6:	6013      	str	r3, [r2, #0]
 8003fb8:	4b7a      	ldr	r3, [pc, #488]	; (80041a4 <HAL_RCC_OscConfig+0x298>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a1b      	ldr	r3, [r3, #32]
 8003fc4:	4977      	ldr	r1, [pc, #476]	; (80041a4 <HAL_RCC_OscConfig+0x298>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003fca:	4b76      	ldr	r3, [pc, #472]	; (80041a4 <HAL_RCC_OscConfig+0x298>)
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	69db      	ldr	r3, [r3, #28]
 8003fd6:	021b      	lsls	r3, r3, #8
 8003fd8:	4972      	ldr	r1, [pc, #456]	; (80041a4 <HAL_RCC_OscConfig+0x298>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	604b      	str	r3, [r1, #4]
 8003fde:	e025      	b.n	800402c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003fe0:	4b70      	ldr	r3, [pc, #448]	; (80041a4 <HAL_RCC_OscConfig+0x298>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a6f      	ldr	r2, [pc, #444]	; (80041a4 <HAL_RCC_OscConfig+0x298>)
 8003fe6:	f043 0308 	orr.w	r3, r3, #8
 8003fea:	6013      	str	r3, [r2, #0]
 8003fec:	4b6d      	ldr	r3, [pc, #436]	; (80041a4 <HAL_RCC_OscConfig+0x298>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a1b      	ldr	r3, [r3, #32]
 8003ff8:	496a      	ldr	r1, [pc, #424]	; (80041a4 <HAL_RCC_OscConfig+0x298>)
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ffe:	4b69      	ldr	r3, [pc, #420]	; (80041a4 <HAL_RCC_OscConfig+0x298>)
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	69db      	ldr	r3, [r3, #28]
 800400a:	021b      	lsls	r3, r3, #8
 800400c:	4965      	ldr	r1, [pc, #404]	; (80041a4 <HAL_RCC_OscConfig+0x298>)
 800400e:	4313      	orrs	r3, r2
 8004010:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d109      	bne.n	800402c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a1b      	ldr	r3, [r3, #32]
 800401c:	4618      	mov	r0, r3
 800401e:	f000 fd13 	bl	8004a48 <RCC_SetFlashLatencyFromMSIRange>
 8004022:	4603      	mov	r3, r0
 8004024:	2b00      	cmp	r3, #0
 8004026:	d001      	beq.n	800402c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e377      	b.n	800471c <HAL_RCC_OscConfig+0x810>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800402c:	f000 fc80 	bl	8004930 <HAL_RCC_GetSysClockFreq>
 8004030:	4602      	mov	r2, r0
 8004032:	4b5c      	ldr	r3, [pc, #368]	; (80041a4 <HAL_RCC_OscConfig+0x298>)
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	091b      	lsrs	r3, r3, #4
 8004038:	f003 030f 	and.w	r3, r3, #15
 800403c:	495a      	ldr	r1, [pc, #360]	; (80041a8 <HAL_RCC_OscConfig+0x29c>)
 800403e:	5ccb      	ldrb	r3, [r1, r3]
 8004040:	f003 031f 	and.w	r3, r3, #31
 8004044:	fa22 f303 	lsr.w	r3, r2, r3
 8004048:	4a58      	ldr	r2, [pc, #352]	; (80041ac <HAL_RCC_OscConfig+0x2a0>)
 800404a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800404c:	4b58      	ldr	r3, [pc, #352]	; (80041b0 <HAL_RCC_OscConfig+0x2a4>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4618      	mov	r0, r3
 8004052:	f7ff f953 	bl	80032fc <HAL_InitTick>
 8004056:	4603      	mov	r3, r0
 8004058:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800405a:	7bfb      	ldrb	r3, [r7, #15]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d052      	beq.n	8004106 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004060:	7bfb      	ldrb	r3, [r7, #15]
 8004062:	e35b      	b.n	800471c <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	699b      	ldr	r3, [r3, #24]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d032      	beq.n	80040d2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800406c:	4b4d      	ldr	r3, [pc, #308]	; (80041a4 <HAL_RCC_OscConfig+0x298>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a4c      	ldr	r2, [pc, #304]	; (80041a4 <HAL_RCC_OscConfig+0x298>)
 8004072:	f043 0301 	orr.w	r3, r3, #1
 8004076:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004078:	f7ff f97c 	bl	8003374 <HAL_GetTick>
 800407c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800407e:	e008      	b.n	8004092 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004080:	f7ff f978 	bl	8003374 <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	2b02      	cmp	r3, #2
 800408c:	d901      	bls.n	8004092 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e344      	b.n	800471c <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004092:	4b44      	ldr	r3, [pc, #272]	; (80041a4 <HAL_RCC_OscConfig+0x298>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0302 	and.w	r3, r3, #2
 800409a:	2b00      	cmp	r3, #0
 800409c:	d0f0      	beq.n	8004080 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800409e:	4b41      	ldr	r3, [pc, #260]	; (80041a4 <HAL_RCC_OscConfig+0x298>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a40      	ldr	r2, [pc, #256]	; (80041a4 <HAL_RCC_OscConfig+0x298>)
 80040a4:	f043 0308 	orr.w	r3, r3, #8
 80040a8:	6013      	str	r3, [r2, #0]
 80040aa:	4b3e      	ldr	r3, [pc, #248]	; (80041a4 <HAL_RCC_OscConfig+0x298>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a1b      	ldr	r3, [r3, #32]
 80040b6:	493b      	ldr	r1, [pc, #236]	; (80041a4 <HAL_RCC_OscConfig+0x298>)
 80040b8:	4313      	orrs	r3, r2
 80040ba:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80040bc:	4b39      	ldr	r3, [pc, #228]	; (80041a4 <HAL_RCC_OscConfig+0x298>)
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	69db      	ldr	r3, [r3, #28]
 80040c8:	021b      	lsls	r3, r3, #8
 80040ca:	4936      	ldr	r1, [pc, #216]	; (80041a4 <HAL_RCC_OscConfig+0x298>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	604b      	str	r3, [r1, #4]
 80040d0:	e01a      	b.n	8004108 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80040d2:	4b34      	ldr	r3, [pc, #208]	; (80041a4 <HAL_RCC_OscConfig+0x298>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a33      	ldr	r2, [pc, #204]	; (80041a4 <HAL_RCC_OscConfig+0x298>)
 80040d8:	f023 0301 	bic.w	r3, r3, #1
 80040dc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80040de:	f7ff f949 	bl	8003374 <HAL_GetTick>
 80040e2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80040e4:	e008      	b.n	80040f8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80040e6:	f7ff f945 	bl	8003374 <HAL_GetTick>
 80040ea:	4602      	mov	r2, r0
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d901      	bls.n	80040f8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80040f4:	2303      	movs	r3, #3
 80040f6:	e311      	b.n	800471c <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80040f8:	4b2a      	ldr	r3, [pc, #168]	; (80041a4 <HAL_RCC_OscConfig+0x298>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0302 	and.w	r3, r3, #2
 8004100:	2b00      	cmp	r3, #0
 8004102:	d1f0      	bne.n	80040e6 <HAL_RCC_OscConfig+0x1da>
 8004104:	e000      	b.n	8004108 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004106:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0301 	and.w	r3, r3, #1
 8004110:	2b00      	cmp	r3, #0
 8004112:	d074      	beq.n	80041fe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	2b08      	cmp	r3, #8
 8004118:	d005      	beq.n	8004126 <HAL_RCC_OscConfig+0x21a>
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	2b0c      	cmp	r3, #12
 800411e:	d10e      	bne.n	800413e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	2b03      	cmp	r3, #3
 8004124:	d10b      	bne.n	800413e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004126:	4b1f      	ldr	r3, [pc, #124]	; (80041a4 <HAL_RCC_OscConfig+0x298>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d064      	beq.n	80041fc <HAL_RCC_OscConfig+0x2f0>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d160      	bne.n	80041fc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e2ee      	b.n	800471c <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004146:	d106      	bne.n	8004156 <HAL_RCC_OscConfig+0x24a>
 8004148:	4b16      	ldr	r3, [pc, #88]	; (80041a4 <HAL_RCC_OscConfig+0x298>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a15      	ldr	r2, [pc, #84]	; (80041a4 <HAL_RCC_OscConfig+0x298>)
 800414e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004152:	6013      	str	r3, [r2, #0]
 8004154:	e01d      	b.n	8004192 <HAL_RCC_OscConfig+0x286>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800415e:	d10c      	bne.n	800417a <HAL_RCC_OscConfig+0x26e>
 8004160:	4b10      	ldr	r3, [pc, #64]	; (80041a4 <HAL_RCC_OscConfig+0x298>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a0f      	ldr	r2, [pc, #60]	; (80041a4 <HAL_RCC_OscConfig+0x298>)
 8004166:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800416a:	6013      	str	r3, [r2, #0]
 800416c:	4b0d      	ldr	r3, [pc, #52]	; (80041a4 <HAL_RCC_OscConfig+0x298>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a0c      	ldr	r2, [pc, #48]	; (80041a4 <HAL_RCC_OscConfig+0x298>)
 8004172:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004176:	6013      	str	r3, [r2, #0]
 8004178:	e00b      	b.n	8004192 <HAL_RCC_OscConfig+0x286>
 800417a:	4b0a      	ldr	r3, [pc, #40]	; (80041a4 <HAL_RCC_OscConfig+0x298>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a09      	ldr	r2, [pc, #36]	; (80041a4 <HAL_RCC_OscConfig+0x298>)
 8004180:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004184:	6013      	str	r3, [r2, #0]
 8004186:	4b07      	ldr	r3, [pc, #28]	; (80041a4 <HAL_RCC_OscConfig+0x298>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a06      	ldr	r2, [pc, #24]	; (80041a4 <HAL_RCC_OscConfig+0x298>)
 800418c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004190:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d01c      	beq.n	80041d4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800419a:	f7ff f8eb 	bl	8003374 <HAL_GetTick>
 800419e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041a0:	e011      	b.n	80041c6 <HAL_RCC_OscConfig+0x2ba>
 80041a2:	bf00      	nop
 80041a4:	40021000 	.word	0x40021000
 80041a8:	08007400 	.word	0x08007400
 80041ac:	20000010 	.word	0x20000010
 80041b0:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041b4:	f7ff f8de 	bl	8003374 <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	2b64      	cmp	r3, #100	; 0x64
 80041c0:	d901      	bls.n	80041c6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e2aa      	b.n	800471c <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041c6:	4baf      	ldr	r3, [pc, #700]	; (8004484 <HAL_RCC_OscConfig+0x578>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d0f0      	beq.n	80041b4 <HAL_RCC_OscConfig+0x2a8>
 80041d2:	e014      	b.n	80041fe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041d4:	f7ff f8ce 	bl	8003374 <HAL_GetTick>
 80041d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80041da:	e008      	b.n	80041ee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041dc:	f7ff f8ca 	bl	8003374 <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	2b64      	cmp	r3, #100	; 0x64
 80041e8:	d901      	bls.n	80041ee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e296      	b.n	800471c <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80041ee:	4ba5      	ldr	r3, [pc, #660]	; (8004484 <HAL_RCC_OscConfig+0x578>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d1f0      	bne.n	80041dc <HAL_RCC_OscConfig+0x2d0>
 80041fa:	e000      	b.n	80041fe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 0302 	and.w	r3, r3, #2
 8004206:	2b00      	cmp	r3, #0
 8004208:	d060      	beq.n	80042cc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	2b04      	cmp	r3, #4
 800420e:	d005      	beq.n	800421c <HAL_RCC_OscConfig+0x310>
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	2b0c      	cmp	r3, #12
 8004214:	d119      	bne.n	800424a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	2b02      	cmp	r3, #2
 800421a:	d116      	bne.n	800424a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800421c:	4b99      	ldr	r3, [pc, #612]	; (8004484 <HAL_RCC_OscConfig+0x578>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004224:	2b00      	cmp	r3, #0
 8004226:	d005      	beq.n	8004234 <HAL_RCC_OscConfig+0x328>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d101      	bne.n	8004234 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e273      	b.n	800471c <HAL_RCC_OscConfig+0x810>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004234:	4b93      	ldr	r3, [pc, #588]	; (8004484 <HAL_RCC_OscConfig+0x578>)
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	691b      	ldr	r3, [r3, #16]
 8004240:	061b      	lsls	r3, r3, #24
 8004242:	4990      	ldr	r1, [pc, #576]	; (8004484 <HAL_RCC_OscConfig+0x578>)
 8004244:	4313      	orrs	r3, r2
 8004246:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004248:	e040      	b.n	80042cc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d023      	beq.n	800429a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004252:	4b8c      	ldr	r3, [pc, #560]	; (8004484 <HAL_RCC_OscConfig+0x578>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a8b      	ldr	r2, [pc, #556]	; (8004484 <HAL_RCC_OscConfig+0x578>)
 8004258:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800425c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800425e:	f7ff f889 	bl	8003374 <HAL_GetTick>
 8004262:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004264:	e008      	b.n	8004278 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004266:	f7ff f885 	bl	8003374 <HAL_GetTick>
 800426a:	4602      	mov	r2, r0
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	2b02      	cmp	r3, #2
 8004272:	d901      	bls.n	8004278 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e251      	b.n	800471c <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004278:	4b82      	ldr	r3, [pc, #520]	; (8004484 <HAL_RCC_OscConfig+0x578>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004280:	2b00      	cmp	r3, #0
 8004282:	d0f0      	beq.n	8004266 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004284:	4b7f      	ldr	r3, [pc, #508]	; (8004484 <HAL_RCC_OscConfig+0x578>)
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	691b      	ldr	r3, [r3, #16]
 8004290:	061b      	lsls	r3, r3, #24
 8004292:	497c      	ldr	r1, [pc, #496]	; (8004484 <HAL_RCC_OscConfig+0x578>)
 8004294:	4313      	orrs	r3, r2
 8004296:	604b      	str	r3, [r1, #4]
 8004298:	e018      	b.n	80042cc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800429a:	4b7a      	ldr	r3, [pc, #488]	; (8004484 <HAL_RCC_OscConfig+0x578>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a79      	ldr	r2, [pc, #484]	; (8004484 <HAL_RCC_OscConfig+0x578>)
 80042a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a6:	f7ff f865 	bl	8003374 <HAL_GetTick>
 80042aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80042ac:	e008      	b.n	80042c0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042ae:	f7ff f861 	bl	8003374 <HAL_GetTick>
 80042b2:	4602      	mov	r2, r0
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d901      	bls.n	80042c0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	e22d      	b.n	800471c <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80042c0:	4b70      	ldr	r3, [pc, #448]	; (8004484 <HAL_RCC_OscConfig+0x578>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d1f0      	bne.n	80042ae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0308 	and.w	r3, r3, #8
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d03c      	beq.n	8004352 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	695b      	ldr	r3, [r3, #20]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d01c      	beq.n	800431a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042e0:	4b68      	ldr	r3, [pc, #416]	; (8004484 <HAL_RCC_OscConfig+0x578>)
 80042e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042e6:	4a67      	ldr	r2, [pc, #412]	; (8004484 <HAL_RCC_OscConfig+0x578>)
 80042e8:	f043 0301 	orr.w	r3, r3, #1
 80042ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042f0:	f7ff f840 	bl	8003374 <HAL_GetTick>
 80042f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042f6:	e008      	b.n	800430a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042f8:	f7ff f83c 	bl	8003374 <HAL_GetTick>
 80042fc:	4602      	mov	r2, r0
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	2b02      	cmp	r3, #2
 8004304:	d901      	bls.n	800430a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e208      	b.n	800471c <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800430a:	4b5e      	ldr	r3, [pc, #376]	; (8004484 <HAL_RCC_OscConfig+0x578>)
 800430c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004310:	f003 0302 	and.w	r3, r3, #2
 8004314:	2b00      	cmp	r3, #0
 8004316:	d0ef      	beq.n	80042f8 <HAL_RCC_OscConfig+0x3ec>
 8004318:	e01b      	b.n	8004352 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800431a:	4b5a      	ldr	r3, [pc, #360]	; (8004484 <HAL_RCC_OscConfig+0x578>)
 800431c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004320:	4a58      	ldr	r2, [pc, #352]	; (8004484 <HAL_RCC_OscConfig+0x578>)
 8004322:	f023 0301 	bic.w	r3, r3, #1
 8004326:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800432a:	f7ff f823 	bl	8003374 <HAL_GetTick>
 800432e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004330:	e008      	b.n	8004344 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004332:	f7ff f81f 	bl	8003374 <HAL_GetTick>
 8004336:	4602      	mov	r2, r0
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	2b02      	cmp	r3, #2
 800433e:	d901      	bls.n	8004344 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004340:	2303      	movs	r3, #3
 8004342:	e1eb      	b.n	800471c <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004344:	4b4f      	ldr	r3, [pc, #316]	; (8004484 <HAL_RCC_OscConfig+0x578>)
 8004346:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800434a:	f003 0302 	and.w	r3, r3, #2
 800434e:	2b00      	cmp	r3, #0
 8004350:	d1ef      	bne.n	8004332 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0304 	and.w	r3, r3, #4
 800435a:	2b00      	cmp	r3, #0
 800435c:	f000 80a6 	beq.w	80044ac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004360:	2300      	movs	r3, #0
 8004362:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004364:	4b47      	ldr	r3, [pc, #284]	; (8004484 <HAL_RCC_OscConfig+0x578>)
 8004366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004368:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d10d      	bne.n	800438c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004370:	4b44      	ldr	r3, [pc, #272]	; (8004484 <HAL_RCC_OscConfig+0x578>)
 8004372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004374:	4a43      	ldr	r2, [pc, #268]	; (8004484 <HAL_RCC_OscConfig+0x578>)
 8004376:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800437a:	6593      	str	r3, [r2, #88]	; 0x58
 800437c:	4b41      	ldr	r3, [pc, #260]	; (8004484 <HAL_RCC_OscConfig+0x578>)
 800437e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004380:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004384:	60bb      	str	r3, [r7, #8]
 8004386:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004388:	2301      	movs	r3, #1
 800438a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800438c:	4b3e      	ldr	r3, [pc, #248]	; (8004488 <HAL_RCC_OscConfig+0x57c>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004394:	2b00      	cmp	r3, #0
 8004396:	d118      	bne.n	80043ca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004398:	4b3b      	ldr	r3, [pc, #236]	; (8004488 <HAL_RCC_OscConfig+0x57c>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a3a      	ldr	r2, [pc, #232]	; (8004488 <HAL_RCC_OscConfig+0x57c>)
 800439e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043a4:	f7fe ffe6 	bl	8003374 <HAL_GetTick>
 80043a8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043aa:	e008      	b.n	80043be <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043ac:	f7fe ffe2 	bl	8003374 <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d901      	bls.n	80043be <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e1ae      	b.n	800471c <HAL_RCC_OscConfig+0x810>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043be:	4b32      	ldr	r3, [pc, #200]	; (8004488 <HAL_RCC_OscConfig+0x57c>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d0f0      	beq.n	80043ac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d108      	bne.n	80043e4 <HAL_RCC_OscConfig+0x4d8>
 80043d2:	4b2c      	ldr	r3, [pc, #176]	; (8004484 <HAL_RCC_OscConfig+0x578>)
 80043d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043d8:	4a2a      	ldr	r2, [pc, #168]	; (8004484 <HAL_RCC_OscConfig+0x578>)
 80043da:	f043 0301 	orr.w	r3, r3, #1
 80043de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043e2:	e024      	b.n	800442e <HAL_RCC_OscConfig+0x522>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	2b05      	cmp	r3, #5
 80043ea:	d110      	bne.n	800440e <HAL_RCC_OscConfig+0x502>
 80043ec:	4b25      	ldr	r3, [pc, #148]	; (8004484 <HAL_RCC_OscConfig+0x578>)
 80043ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043f2:	4a24      	ldr	r2, [pc, #144]	; (8004484 <HAL_RCC_OscConfig+0x578>)
 80043f4:	f043 0304 	orr.w	r3, r3, #4
 80043f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043fc:	4b21      	ldr	r3, [pc, #132]	; (8004484 <HAL_RCC_OscConfig+0x578>)
 80043fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004402:	4a20      	ldr	r2, [pc, #128]	; (8004484 <HAL_RCC_OscConfig+0x578>)
 8004404:	f043 0301 	orr.w	r3, r3, #1
 8004408:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800440c:	e00f      	b.n	800442e <HAL_RCC_OscConfig+0x522>
 800440e:	4b1d      	ldr	r3, [pc, #116]	; (8004484 <HAL_RCC_OscConfig+0x578>)
 8004410:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004414:	4a1b      	ldr	r2, [pc, #108]	; (8004484 <HAL_RCC_OscConfig+0x578>)
 8004416:	f023 0301 	bic.w	r3, r3, #1
 800441a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800441e:	4b19      	ldr	r3, [pc, #100]	; (8004484 <HAL_RCC_OscConfig+0x578>)
 8004420:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004424:	4a17      	ldr	r2, [pc, #92]	; (8004484 <HAL_RCC_OscConfig+0x578>)
 8004426:	f023 0304 	bic.w	r3, r3, #4
 800442a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d016      	beq.n	8004464 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004436:	f7fe ff9d 	bl	8003374 <HAL_GetTick>
 800443a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800443c:	e00a      	b.n	8004454 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800443e:	f7fe ff99 	bl	8003374 <HAL_GetTick>
 8004442:	4602      	mov	r2, r0
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	f241 3288 	movw	r2, #5000	; 0x1388
 800444c:	4293      	cmp	r3, r2
 800444e:	d901      	bls.n	8004454 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e163      	b.n	800471c <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004454:	4b0b      	ldr	r3, [pc, #44]	; (8004484 <HAL_RCC_OscConfig+0x578>)
 8004456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800445a:	f003 0302 	and.w	r3, r3, #2
 800445e:	2b00      	cmp	r3, #0
 8004460:	d0ed      	beq.n	800443e <HAL_RCC_OscConfig+0x532>
 8004462:	e01a      	b.n	800449a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004464:	f7fe ff86 	bl	8003374 <HAL_GetTick>
 8004468:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800446a:	e00f      	b.n	800448c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800446c:	f7fe ff82 	bl	8003374 <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	f241 3288 	movw	r2, #5000	; 0x1388
 800447a:	4293      	cmp	r3, r2
 800447c:	d906      	bls.n	800448c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e14c      	b.n	800471c <HAL_RCC_OscConfig+0x810>
 8004482:	bf00      	nop
 8004484:	40021000 	.word	0x40021000
 8004488:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800448c:	4ba5      	ldr	r3, [pc, #660]	; (8004724 <HAL_RCC_OscConfig+0x818>)
 800448e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004492:	f003 0302 	and.w	r3, r3, #2
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1e8      	bne.n	800446c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800449a:	7ffb      	ldrb	r3, [r7, #31]
 800449c:	2b01      	cmp	r3, #1
 800449e:	d105      	bne.n	80044ac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044a0:	4ba0      	ldr	r3, [pc, #640]	; (8004724 <HAL_RCC_OscConfig+0x818>)
 80044a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044a4:	4a9f      	ldr	r2, [pc, #636]	; (8004724 <HAL_RCC_OscConfig+0x818>)
 80044a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044aa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0320 	and.w	r3, r3, #32
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d03c      	beq.n	8004532 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d01c      	beq.n	80044fa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80044c0:	4b98      	ldr	r3, [pc, #608]	; (8004724 <HAL_RCC_OscConfig+0x818>)
 80044c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044c6:	4a97      	ldr	r2, [pc, #604]	; (8004724 <HAL_RCC_OscConfig+0x818>)
 80044c8:	f043 0301 	orr.w	r3, r3, #1
 80044cc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044d0:	f7fe ff50 	bl	8003374 <HAL_GetTick>
 80044d4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80044d6:	e008      	b.n	80044ea <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044d8:	f7fe ff4c 	bl	8003374 <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e118      	b.n	800471c <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80044ea:	4b8e      	ldr	r3, [pc, #568]	; (8004724 <HAL_RCC_OscConfig+0x818>)
 80044ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044f0:	f003 0302 	and.w	r3, r3, #2
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d0ef      	beq.n	80044d8 <HAL_RCC_OscConfig+0x5cc>
 80044f8:	e01b      	b.n	8004532 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80044fa:	4b8a      	ldr	r3, [pc, #552]	; (8004724 <HAL_RCC_OscConfig+0x818>)
 80044fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004500:	4a88      	ldr	r2, [pc, #544]	; (8004724 <HAL_RCC_OscConfig+0x818>)
 8004502:	f023 0301 	bic.w	r3, r3, #1
 8004506:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800450a:	f7fe ff33 	bl	8003374 <HAL_GetTick>
 800450e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004510:	e008      	b.n	8004524 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004512:	f7fe ff2f 	bl	8003374 <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	2b02      	cmp	r3, #2
 800451e:	d901      	bls.n	8004524 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004520:	2303      	movs	r3, #3
 8004522:	e0fb      	b.n	800471c <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004524:	4b7f      	ldr	r3, [pc, #508]	; (8004724 <HAL_RCC_OscConfig+0x818>)
 8004526:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800452a:	f003 0302 	and.w	r3, r3, #2
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1ef      	bne.n	8004512 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004536:	2b00      	cmp	r3, #0
 8004538:	f000 80ef 	beq.w	800471a <HAL_RCC_OscConfig+0x80e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004540:	2b02      	cmp	r3, #2
 8004542:	f040 80c5 	bne.w	80046d0 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004546:	4b77      	ldr	r3, [pc, #476]	; (8004724 <HAL_RCC_OscConfig+0x818>)
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	f003 0203 	and.w	r2, r3, #3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004556:	429a      	cmp	r2, r3
 8004558:	d12c      	bne.n	80045b4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004564:	3b01      	subs	r3, #1
 8004566:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004568:	429a      	cmp	r2, r3
 800456a:	d123      	bne.n	80045b4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004576:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004578:	429a      	cmp	r2, r3
 800457a:	d11b      	bne.n	80045b4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004586:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004588:	429a      	cmp	r2, r3
 800458a:	d113      	bne.n	80045b4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004596:	085b      	lsrs	r3, r3, #1
 8004598:	3b01      	subs	r3, #1
 800459a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800459c:	429a      	cmp	r2, r3
 800459e:	d109      	bne.n	80045b4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045aa:	085b      	lsrs	r3, r3, #1
 80045ac:	3b01      	subs	r3, #1
 80045ae:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d067      	beq.n	8004684 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	2b0c      	cmp	r3, #12
 80045b8:	d062      	beq.n	8004680 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80045ba:	4b5a      	ldr	r3, [pc, #360]	; (8004724 <HAL_RCC_OscConfig+0x818>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d001      	beq.n	80045ca <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e0a8      	b.n	800471c <HAL_RCC_OscConfig+0x810>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80045ca:	4b56      	ldr	r3, [pc, #344]	; (8004724 <HAL_RCC_OscConfig+0x818>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a55      	ldr	r2, [pc, #340]	; (8004724 <HAL_RCC_OscConfig+0x818>)
 80045d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045d4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80045d6:	f7fe fecd 	bl	8003374 <HAL_GetTick>
 80045da:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045dc:	e008      	b.n	80045f0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045de:	f7fe fec9 	bl	8003374 <HAL_GetTick>
 80045e2:	4602      	mov	r2, r0
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	d901      	bls.n	80045f0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80045ec:	2303      	movs	r3, #3
 80045ee:	e095      	b.n	800471c <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045f0:	4b4c      	ldr	r3, [pc, #304]	; (8004724 <HAL_RCC_OscConfig+0x818>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d1f0      	bne.n	80045de <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045fc:	4b49      	ldr	r3, [pc, #292]	; (8004724 <HAL_RCC_OscConfig+0x818>)
 80045fe:	68da      	ldr	r2, [r3, #12]
 8004600:	4b49      	ldr	r3, [pc, #292]	; (8004728 <HAL_RCC_OscConfig+0x81c>)
 8004602:	4013      	ands	r3, r2
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800460c:	3a01      	subs	r2, #1
 800460e:	0112      	lsls	r2, r2, #4
 8004610:	4311      	orrs	r1, r2
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004616:	0212      	lsls	r2, r2, #8
 8004618:	4311      	orrs	r1, r2
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800461e:	0852      	lsrs	r2, r2, #1
 8004620:	3a01      	subs	r2, #1
 8004622:	0552      	lsls	r2, r2, #21
 8004624:	4311      	orrs	r1, r2
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800462a:	0852      	lsrs	r2, r2, #1
 800462c:	3a01      	subs	r2, #1
 800462e:	0652      	lsls	r2, r2, #25
 8004630:	4311      	orrs	r1, r2
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004636:	06d2      	lsls	r2, r2, #27
 8004638:	430a      	orrs	r2, r1
 800463a:	493a      	ldr	r1, [pc, #232]	; (8004724 <HAL_RCC_OscConfig+0x818>)
 800463c:	4313      	orrs	r3, r2
 800463e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004640:	4b38      	ldr	r3, [pc, #224]	; (8004724 <HAL_RCC_OscConfig+0x818>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a37      	ldr	r2, [pc, #220]	; (8004724 <HAL_RCC_OscConfig+0x818>)
 8004646:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800464a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800464c:	4b35      	ldr	r3, [pc, #212]	; (8004724 <HAL_RCC_OscConfig+0x818>)
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	4a34      	ldr	r2, [pc, #208]	; (8004724 <HAL_RCC_OscConfig+0x818>)
 8004652:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004656:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004658:	f7fe fe8c 	bl	8003374 <HAL_GetTick>
 800465c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800465e:	e008      	b.n	8004672 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004660:	f7fe fe88 	bl	8003374 <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	2b02      	cmp	r3, #2
 800466c:	d901      	bls.n	8004672 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e054      	b.n	800471c <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004672:	4b2c      	ldr	r3, [pc, #176]	; (8004724 <HAL_RCC_OscConfig+0x818>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d0f0      	beq.n	8004660 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800467e:	e04c      	b.n	800471a <HAL_RCC_OscConfig+0x80e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e04b      	b.n	800471c <HAL_RCC_OscConfig+0x810>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004684:	4b27      	ldr	r3, [pc, #156]	; (8004724 <HAL_RCC_OscConfig+0x818>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800468c:	2b00      	cmp	r3, #0
 800468e:	d144      	bne.n	800471a <HAL_RCC_OscConfig+0x80e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004690:	4b24      	ldr	r3, [pc, #144]	; (8004724 <HAL_RCC_OscConfig+0x818>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a23      	ldr	r2, [pc, #140]	; (8004724 <HAL_RCC_OscConfig+0x818>)
 8004696:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800469a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800469c:	4b21      	ldr	r3, [pc, #132]	; (8004724 <HAL_RCC_OscConfig+0x818>)
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	4a20      	ldr	r2, [pc, #128]	; (8004724 <HAL_RCC_OscConfig+0x818>)
 80046a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046a6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80046a8:	f7fe fe64 	bl	8003374 <HAL_GetTick>
 80046ac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046ae:	e008      	b.n	80046c2 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046b0:	f7fe fe60 	bl	8003374 <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	2b02      	cmp	r3, #2
 80046bc:	d901      	bls.n	80046c2 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e02c      	b.n	800471c <HAL_RCC_OscConfig+0x810>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046c2:	4b18      	ldr	r3, [pc, #96]	; (8004724 <HAL_RCC_OscConfig+0x818>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d0f0      	beq.n	80046b0 <HAL_RCC_OscConfig+0x7a4>
 80046ce:	e024      	b.n	800471a <HAL_RCC_OscConfig+0x80e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	2b0c      	cmp	r3, #12
 80046d4:	d01f      	beq.n	8004716 <HAL_RCC_OscConfig+0x80a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046d6:	4b13      	ldr	r3, [pc, #76]	; (8004724 <HAL_RCC_OscConfig+0x818>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a12      	ldr	r2, [pc, #72]	; (8004724 <HAL_RCC_OscConfig+0x818>)
 80046dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e2:	f7fe fe47 	bl	8003374 <HAL_GetTick>
 80046e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046e8:	e008      	b.n	80046fc <HAL_RCC_OscConfig+0x7f0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046ea:	f7fe fe43 	bl	8003374 <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	2b02      	cmp	r3, #2
 80046f6:	d901      	bls.n	80046fc <HAL_RCC_OscConfig+0x7f0>
          {
            return HAL_TIMEOUT;
 80046f8:	2303      	movs	r3, #3
 80046fa:	e00f      	b.n	800471c <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046fc:	4b09      	ldr	r3, [pc, #36]	; (8004724 <HAL_RCC_OscConfig+0x818>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d1f0      	bne.n	80046ea <HAL_RCC_OscConfig+0x7de>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004708:	4b06      	ldr	r3, [pc, #24]	; (8004724 <HAL_RCC_OscConfig+0x818>)
 800470a:	68da      	ldr	r2, [r3, #12]
 800470c:	4905      	ldr	r1, [pc, #20]	; (8004724 <HAL_RCC_OscConfig+0x818>)
 800470e:	4b07      	ldr	r3, [pc, #28]	; (800472c <HAL_RCC_OscConfig+0x820>)
 8004710:	4013      	ands	r3, r2
 8004712:	60cb      	str	r3, [r1, #12]
 8004714:	e001      	b.n	800471a <HAL_RCC_OscConfig+0x80e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e000      	b.n	800471c <HAL_RCC_OscConfig+0x810>
      }
    }
  }
  return HAL_OK;
 800471a:	2300      	movs	r3, #0
}
 800471c:	4618      	mov	r0, r3
 800471e:	3720      	adds	r7, #32
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}
 8004724:	40021000 	.word	0x40021000
 8004728:	019d808c 	.word	0x019d808c
 800472c:	feeefffc 	.word	0xfeeefffc

08004730 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d101      	bne.n	8004744 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e0e7      	b.n	8004914 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004744:	4b75      	ldr	r3, [pc, #468]	; (800491c <HAL_RCC_ClockConfig+0x1ec>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0307 	and.w	r3, r3, #7
 800474c:	683a      	ldr	r2, [r7, #0]
 800474e:	429a      	cmp	r2, r3
 8004750:	d910      	bls.n	8004774 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004752:	4b72      	ldr	r3, [pc, #456]	; (800491c <HAL_RCC_ClockConfig+0x1ec>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f023 0207 	bic.w	r2, r3, #7
 800475a:	4970      	ldr	r1, [pc, #448]	; (800491c <HAL_RCC_ClockConfig+0x1ec>)
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	4313      	orrs	r3, r2
 8004760:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004762:	4b6e      	ldr	r3, [pc, #440]	; (800491c <HAL_RCC_ClockConfig+0x1ec>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0307 	and.w	r3, r3, #7
 800476a:	683a      	ldr	r2, [r7, #0]
 800476c:	429a      	cmp	r2, r3
 800476e:	d001      	beq.n	8004774 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e0cf      	b.n	8004914 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0302 	and.w	r3, r3, #2
 800477c:	2b00      	cmp	r3, #0
 800477e:	d010      	beq.n	80047a2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	689a      	ldr	r2, [r3, #8]
 8004784:	4b66      	ldr	r3, [pc, #408]	; (8004920 <HAL_RCC_ClockConfig+0x1f0>)
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800478c:	429a      	cmp	r2, r3
 800478e:	d908      	bls.n	80047a2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004790:	4b63      	ldr	r3, [pc, #396]	; (8004920 <HAL_RCC_ClockConfig+0x1f0>)
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	4960      	ldr	r1, [pc, #384]	; (8004920 <HAL_RCC_ClockConfig+0x1f0>)
 800479e:	4313      	orrs	r3, r2
 80047a0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0301 	and.w	r3, r3, #1
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d04c      	beq.n	8004848 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	2b03      	cmp	r3, #3
 80047b4:	d107      	bne.n	80047c6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047b6:	4b5a      	ldr	r3, [pc, #360]	; (8004920 <HAL_RCC_ClockConfig+0x1f0>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d121      	bne.n	8004806 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e0a6      	b.n	8004914 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	d107      	bne.n	80047de <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047ce:	4b54      	ldr	r3, [pc, #336]	; (8004920 <HAL_RCC_ClockConfig+0x1f0>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d115      	bne.n	8004806 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e09a      	b.n	8004914 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d107      	bne.n	80047f6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80047e6:	4b4e      	ldr	r3, [pc, #312]	; (8004920 <HAL_RCC_ClockConfig+0x1f0>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0302 	and.w	r3, r3, #2
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d109      	bne.n	8004806 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e08e      	b.n	8004914 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047f6:	4b4a      	ldr	r3, [pc, #296]	; (8004920 <HAL_RCC_ClockConfig+0x1f0>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d101      	bne.n	8004806 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e086      	b.n	8004914 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004806:	4b46      	ldr	r3, [pc, #280]	; (8004920 <HAL_RCC_ClockConfig+0x1f0>)
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	f023 0203 	bic.w	r2, r3, #3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	4943      	ldr	r1, [pc, #268]	; (8004920 <HAL_RCC_ClockConfig+0x1f0>)
 8004814:	4313      	orrs	r3, r2
 8004816:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004818:	f7fe fdac 	bl	8003374 <HAL_GetTick>
 800481c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800481e:	e00a      	b.n	8004836 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004820:	f7fe fda8 	bl	8003374 <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	f241 3288 	movw	r2, #5000	; 0x1388
 800482e:	4293      	cmp	r3, r2
 8004830:	d901      	bls.n	8004836 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	e06e      	b.n	8004914 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004836:	4b3a      	ldr	r3, [pc, #232]	; (8004920 <HAL_RCC_ClockConfig+0x1f0>)
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	f003 020c 	and.w	r2, r3, #12
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	429a      	cmp	r2, r3
 8004846:	d1eb      	bne.n	8004820 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0302 	and.w	r3, r3, #2
 8004850:	2b00      	cmp	r3, #0
 8004852:	d010      	beq.n	8004876 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	689a      	ldr	r2, [r3, #8]
 8004858:	4b31      	ldr	r3, [pc, #196]	; (8004920 <HAL_RCC_ClockConfig+0x1f0>)
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004860:	429a      	cmp	r2, r3
 8004862:	d208      	bcs.n	8004876 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004864:	4b2e      	ldr	r3, [pc, #184]	; (8004920 <HAL_RCC_ClockConfig+0x1f0>)
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	492b      	ldr	r1, [pc, #172]	; (8004920 <HAL_RCC_ClockConfig+0x1f0>)
 8004872:	4313      	orrs	r3, r2
 8004874:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004876:	4b29      	ldr	r3, [pc, #164]	; (800491c <HAL_RCC_ClockConfig+0x1ec>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0307 	and.w	r3, r3, #7
 800487e:	683a      	ldr	r2, [r7, #0]
 8004880:	429a      	cmp	r2, r3
 8004882:	d210      	bcs.n	80048a6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004884:	4b25      	ldr	r3, [pc, #148]	; (800491c <HAL_RCC_ClockConfig+0x1ec>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f023 0207 	bic.w	r2, r3, #7
 800488c:	4923      	ldr	r1, [pc, #140]	; (800491c <HAL_RCC_ClockConfig+0x1ec>)
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	4313      	orrs	r3, r2
 8004892:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004894:	4b21      	ldr	r3, [pc, #132]	; (800491c <HAL_RCC_ClockConfig+0x1ec>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0307 	and.w	r3, r3, #7
 800489c:	683a      	ldr	r2, [r7, #0]
 800489e:	429a      	cmp	r2, r3
 80048a0:	d001      	beq.n	80048a6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e036      	b.n	8004914 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0304 	and.w	r3, r3, #4
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d008      	beq.n	80048c4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048b2:	4b1b      	ldr	r3, [pc, #108]	; (8004920 <HAL_RCC_ClockConfig+0x1f0>)
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	4918      	ldr	r1, [pc, #96]	; (8004920 <HAL_RCC_ClockConfig+0x1f0>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0308 	and.w	r3, r3, #8
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d009      	beq.n	80048e4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048d0:	4b13      	ldr	r3, [pc, #76]	; (8004920 <HAL_RCC_ClockConfig+0x1f0>)
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	691b      	ldr	r3, [r3, #16]
 80048dc:	00db      	lsls	r3, r3, #3
 80048de:	4910      	ldr	r1, [pc, #64]	; (8004920 <HAL_RCC_ClockConfig+0x1f0>)
 80048e0:	4313      	orrs	r3, r2
 80048e2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80048e4:	f000 f824 	bl	8004930 <HAL_RCC_GetSysClockFreq>
 80048e8:	4602      	mov	r2, r0
 80048ea:	4b0d      	ldr	r3, [pc, #52]	; (8004920 <HAL_RCC_ClockConfig+0x1f0>)
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	091b      	lsrs	r3, r3, #4
 80048f0:	f003 030f 	and.w	r3, r3, #15
 80048f4:	490b      	ldr	r1, [pc, #44]	; (8004924 <HAL_RCC_ClockConfig+0x1f4>)
 80048f6:	5ccb      	ldrb	r3, [r1, r3]
 80048f8:	f003 031f 	and.w	r3, r3, #31
 80048fc:	fa22 f303 	lsr.w	r3, r2, r3
 8004900:	4a09      	ldr	r2, [pc, #36]	; (8004928 <HAL_RCC_ClockConfig+0x1f8>)
 8004902:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004904:	4b09      	ldr	r3, [pc, #36]	; (800492c <HAL_RCC_ClockConfig+0x1fc>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4618      	mov	r0, r3
 800490a:	f7fe fcf7 	bl	80032fc <HAL_InitTick>
 800490e:	4603      	mov	r3, r0
 8004910:	72fb      	strb	r3, [r7, #11]

  return status;
 8004912:	7afb      	ldrb	r3, [r7, #11]
}
 8004914:	4618      	mov	r0, r3
 8004916:	3710      	adds	r7, #16
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}
 800491c:	40022000 	.word	0x40022000
 8004920:	40021000 	.word	0x40021000
 8004924:	08007400 	.word	0x08007400
 8004928:	20000010 	.word	0x20000010
 800492c:	20000008 	.word	0x20000008

08004930 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004930:	b480      	push	{r7}
 8004932:	b089      	sub	sp, #36	; 0x24
 8004934:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004936:	2300      	movs	r3, #0
 8004938:	61fb      	str	r3, [r7, #28]
 800493a:	2300      	movs	r3, #0
 800493c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800493e:	4b3e      	ldr	r3, [pc, #248]	; (8004a38 <HAL_RCC_GetSysClockFreq+0x108>)
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	f003 030c 	and.w	r3, r3, #12
 8004946:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004948:	4b3b      	ldr	r3, [pc, #236]	; (8004a38 <HAL_RCC_GetSysClockFreq+0x108>)
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	f003 0303 	and.w	r3, r3, #3
 8004950:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d005      	beq.n	8004964 <HAL_RCC_GetSysClockFreq+0x34>
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	2b0c      	cmp	r3, #12
 800495c:	d121      	bne.n	80049a2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2b01      	cmp	r3, #1
 8004962:	d11e      	bne.n	80049a2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004964:	4b34      	ldr	r3, [pc, #208]	; (8004a38 <HAL_RCC_GetSysClockFreq+0x108>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0308 	and.w	r3, r3, #8
 800496c:	2b00      	cmp	r3, #0
 800496e:	d107      	bne.n	8004980 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004970:	4b31      	ldr	r3, [pc, #196]	; (8004a38 <HAL_RCC_GetSysClockFreq+0x108>)
 8004972:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004976:	0a1b      	lsrs	r3, r3, #8
 8004978:	f003 030f 	and.w	r3, r3, #15
 800497c:	61fb      	str	r3, [r7, #28]
 800497e:	e005      	b.n	800498c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004980:	4b2d      	ldr	r3, [pc, #180]	; (8004a38 <HAL_RCC_GetSysClockFreq+0x108>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	091b      	lsrs	r3, r3, #4
 8004986:	f003 030f 	and.w	r3, r3, #15
 800498a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800498c:	4a2b      	ldr	r2, [pc, #172]	; (8004a3c <HAL_RCC_GetSysClockFreq+0x10c>)
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004994:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d10d      	bne.n	80049b8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80049a0:	e00a      	b.n	80049b8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	2b04      	cmp	r3, #4
 80049a6:	d102      	bne.n	80049ae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80049a8:	4b25      	ldr	r3, [pc, #148]	; (8004a40 <HAL_RCC_GetSysClockFreq+0x110>)
 80049aa:	61bb      	str	r3, [r7, #24]
 80049ac:	e004      	b.n	80049b8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	2b08      	cmp	r3, #8
 80049b2:	d101      	bne.n	80049b8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80049b4:	4b23      	ldr	r3, [pc, #140]	; (8004a44 <HAL_RCC_GetSysClockFreq+0x114>)
 80049b6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	2b0c      	cmp	r3, #12
 80049bc:	d134      	bne.n	8004a28 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80049be:	4b1e      	ldr	r3, [pc, #120]	; (8004a38 <HAL_RCC_GetSysClockFreq+0x108>)
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	f003 0303 	and.w	r3, r3, #3
 80049c6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	2b02      	cmp	r3, #2
 80049cc:	d003      	beq.n	80049d6 <HAL_RCC_GetSysClockFreq+0xa6>
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	2b03      	cmp	r3, #3
 80049d2:	d003      	beq.n	80049dc <HAL_RCC_GetSysClockFreq+0xac>
 80049d4:	e005      	b.n	80049e2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80049d6:	4b1a      	ldr	r3, [pc, #104]	; (8004a40 <HAL_RCC_GetSysClockFreq+0x110>)
 80049d8:	617b      	str	r3, [r7, #20]
      break;
 80049da:	e005      	b.n	80049e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80049dc:	4b19      	ldr	r3, [pc, #100]	; (8004a44 <HAL_RCC_GetSysClockFreq+0x114>)
 80049de:	617b      	str	r3, [r7, #20]
      break;
 80049e0:	e002      	b.n	80049e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	617b      	str	r3, [r7, #20]
      break;
 80049e6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80049e8:	4b13      	ldr	r3, [pc, #76]	; (8004a38 <HAL_RCC_GetSysClockFreq+0x108>)
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	091b      	lsrs	r3, r3, #4
 80049ee:	f003 0307 	and.w	r3, r3, #7
 80049f2:	3301      	adds	r3, #1
 80049f4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80049f6:	4b10      	ldr	r3, [pc, #64]	; (8004a38 <HAL_RCC_GetSysClockFreq+0x108>)
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	0a1b      	lsrs	r3, r3, #8
 80049fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a00:	697a      	ldr	r2, [r7, #20]
 8004a02:	fb02 f203 	mul.w	r2, r2, r3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a0c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004a0e:	4b0a      	ldr	r3, [pc, #40]	; (8004a38 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	0e5b      	lsrs	r3, r3, #25
 8004a14:	f003 0303 	and.w	r3, r3, #3
 8004a18:	3301      	adds	r3, #1
 8004a1a:	005b      	lsls	r3, r3, #1
 8004a1c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004a1e:	697a      	ldr	r2, [r7, #20]
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a26:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004a28:	69bb      	ldr	r3, [r7, #24]
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3724      	adds	r7, #36	; 0x24
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr
 8004a36:	bf00      	nop
 8004a38:	40021000 	.word	0x40021000
 8004a3c:	08007410 	.word	0x08007410
 8004a40:	00f42400 	.word	0x00f42400
 8004a44:	02dc6c00 	.word	0x02dc6c00

08004a48 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b086      	sub	sp, #24
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004a50:	2300      	movs	r3, #0
 8004a52:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004a54:	4b2a      	ldr	r3, [pc, #168]	; (8004b00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d003      	beq.n	8004a68 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004a60:	f7ff f9f0 	bl	8003e44 <HAL_PWREx_GetVoltageRange>
 8004a64:	6178      	str	r0, [r7, #20]
 8004a66:	e014      	b.n	8004a92 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a68:	4b25      	ldr	r3, [pc, #148]	; (8004b00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a6c:	4a24      	ldr	r2, [pc, #144]	; (8004b00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a72:	6593      	str	r3, [r2, #88]	; 0x58
 8004a74:	4b22      	ldr	r3, [pc, #136]	; (8004b00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a7c:	60fb      	str	r3, [r7, #12]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004a80:	f7ff f9e0 	bl	8003e44 <HAL_PWREx_GetVoltageRange>
 8004a84:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004a86:	4b1e      	ldr	r3, [pc, #120]	; (8004b00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a8a:	4a1d      	ldr	r2, [pc, #116]	; (8004b00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a90:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a98:	d10b      	bne.n	8004ab2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2b80      	cmp	r3, #128	; 0x80
 8004a9e:	d919      	bls.n	8004ad4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2ba0      	cmp	r3, #160	; 0xa0
 8004aa4:	d902      	bls.n	8004aac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004aa6:	2302      	movs	r3, #2
 8004aa8:	613b      	str	r3, [r7, #16]
 8004aaa:	e013      	b.n	8004ad4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004aac:	2301      	movs	r3, #1
 8004aae:	613b      	str	r3, [r7, #16]
 8004ab0:	e010      	b.n	8004ad4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2b80      	cmp	r3, #128	; 0x80
 8004ab6:	d902      	bls.n	8004abe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004ab8:	2303      	movs	r3, #3
 8004aba:	613b      	str	r3, [r7, #16]
 8004abc:	e00a      	b.n	8004ad4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2b80      	cmp	r3, #128	; 0x80
 8004ac2:	d102      	bne.n	8004aca <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004ac4:	2302      	movs	r3, #2
 8004ac6:	613b      	str	r3, [r7, #16]
 8004ac8:	e004      	b.n	8004ad4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2b70      	cmp	r3, #112	; 0x70
 8004ace:	d101      	bne.n	8004ad4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004ad4:	4b0b      	ldr	r3, [pc, #44]	; (8004b04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f023 0207 	bic.w	r2, r3, #7
 8004adc:	4909      	ldr	r1, [pc, #36]	; (8004b04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004ae4:	4b07      	ldr	r3, [pc, #28]	; (8004b04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0307 	and.w	r3, r3, #7
 8004aec:	693a      	ldr	r2, [r7, #16]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d001      	beq.n	8004af6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e000      	b.n	8004af8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004af6:	2300      	movs	r3, #0
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3718      	adds	r7, #24
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	40021000 	.word	0x40021000
 8004b04:	40022000 	.word	0x40022000

08004b08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b086      	sub	sp, #24
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004b10:	2300      	movs	r3, #0
 8004b12:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004b14:	2300      	movs	r3, #0
 8004b16:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d031      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b28:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004b2c:	d01a      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004b2e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004b32:	d814      	bhi.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d009      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004b38:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b3c:	d10f      	bne.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004b3e:	4b5d      	ldr	r3, [pc, #372]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	4a5c      	ldr	r2, [pc, #368]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b48:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004b4a:	e00c      	b.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	3304      	adds	r3, #4
 8004b50:	2100      	movs	r1, #0
 8004b52:	4618      	mov	r0, r3
 8004b54:	f000 f9f0 	bl	8004f38 <RCCEx_PLLSAI1_Config>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004b5c:	e003      	b.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	74fb      	strb	r3, [r7, #19]
      break;
 8004b62:	e000      	b.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004b64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b66:	7cfb      	ldrb	r3, [r7, #19]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d10b      	bne.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b6c:	4b51      	ldr	r3, [pc, #324]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b72:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b7a:	494e      	ldr	r1, [pc, #312]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004b82:	e001      	b.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b84:	7cfb      	ldrb	r3, [r7, #19]
 8004b86:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	f000 809e 	beq.w	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b96:	2300      	movs	r3, #0
 8004b98:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004b9a:	4b46      	ldr	r3, [pc, #280]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d101      	bne.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e000      	b.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004baa:	2300      	movs	r3, #0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d00d      	beq.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bb0:	4b40      	ldr	r3, [pc, #256]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bb4:	4a3f      	ldr	r2, [pc, #252]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004bb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bba:	6593      	str	r3, [r2, #88]	; 0x58
 8004bbc:	4b3d      	ldr	r3, [pc, #244]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bc4:	60bb      	str	r3, [r7, #8]
 8004bc6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004bcc:	4b3a      	ldr	r3, [pc, #232]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a39      	ldr	r2, [pc, #228]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004bd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bd6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004bd8:	f7fe fbcc 	bl	8003374 <HAL_GetTick>
 8004bdc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004bde:	e009      	b.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004be0:	f7fe fbc8 	bl	8003374 <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d902      	bls.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	74fb      	strb	r3, [r7, #19]
        break;
 8004bf2:	e005      	b.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004bf4:	4b30      	ldr	r3, [pc, #192]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d0ef      	beq.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004c00:	7cfb      	ldrb	r3, [r7, #19]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d15a      	bne.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004c06:	4b2b      	ldr	r3, [pc, #172]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c10:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d01e      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c1c:	697a      	ldr	r2, [r7, #20]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d019      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004c22:	4b24      	ldr	r3, [pc, #144]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c2c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c2e:	4b21      	ldr	r3, [pc, #132]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c34:	4a1f      	ldr	r2, [pc, #124]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c3e:	4b1d      	ldr	r3, [pc, #116]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c44:	4a1b      	ldr	r2, [pc, #108]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004c4e:	4a19      	ldr	r2, [pc, #100]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	f003 0301 	and.w	r3, r3, #1
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d016      	beq.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c60:	f7fe fb88 	bl	8003374 <HAL_GetTick>
 8004c64:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c66:	e00b      	b.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c68:	f7fe fb84 	bl	8003374 <HAL_GetTick>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d902      	bls.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	74fb      	strb	r3, [r7, #19]
            break;
 8004c7e:	e006      	b.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c80:	4b0c      	ldr	r3, [pc, #48]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c86:	f003 0302 	and.w	r3, r3, #2
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d0ec      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004c8e:	7cfb      	ldrb	r3, [r7, #19]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d10b      	bne.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c94:	4b07      	ldr	r3, [pc, #28]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c9a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ca2:	4904      	ldr	r1, [pc, #16]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004caa:	e009      	b.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004cac:	7cfb      	ldrb	r3, [r7, #19]
 8004cae:	74bb      	strb	r3, [r7, #18]
 8004cb0:	e006      	b.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004cb2:	bf00      	nop
 8004cb4:	40021000 	.word	0x40021000
 8004cb8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cbc:	7cfb      	ldrb	r3, [r7, #19]
 8004cbe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004cc0:	7c7b      	ldrb	r3, [r7, #17]
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d105      	bne.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cc6:	4b9b      	ldr	r3, [pc, #620]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cca:	4a9a      	ldr	r2, [pc, #616]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004ccc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cd0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 0301 	and.w	r3, r3, #1
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d00a      	beq.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004cde:	4b95      	ldr	r3, [pc, #596]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce4:	f023 0203 	bic.w	r2, r3, #3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a1b      	ldr	r3, [r3, #32]
 8004cec:	4991      	ldr	r1, [pc, #580]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0302 	and.w	r3, r3, #2
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d00a      	beq.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d00:	4b8c      	ldr	r3, [pc, #560]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d06:	f023 020c 	bic.w	r2, r3, #12
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0e:	4989      	ldr	r1, [pc, #548]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004d10:	4313      	orrs	r3, r2
 8004d12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0304 	and.w	r3, r3, #4
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d00a      	beq.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d22:	4b84      	ldr	r3, [pc, #528]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d28:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d30:	4980      	ldr	r1, [pc, #512]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004d32:	4313      	orrs	r3, r2
 8004d34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 0320 	and.w	r3, r3, #32
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d00a      	beq.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d44:	4b7b      	ldr	r3, [pc, #492]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d4a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d52:	4978      	ldr	r1, [pc, #480]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004d54:	4313      	orrs	r3, r2
 8004d56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d00a      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d66:	4b73      	ldr	r3, [pc, #460]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004d68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d6c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d74:	496f      	ldr	r1, [pc, #444]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004d76:	4313      	orrs	r3, r2
 8004d78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d00a      	beq.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d88:	4b6a      	ldr	r3, [pc, #424]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d8e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d96:	4967      	ldr	r1, [pc, #412]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d00a      	beq.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004daa:	4b62      	ldr	r3, [pc, #392]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004db0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db8:	495e      	ldr	r1, [pc, #376]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d00a      	beq.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004dcc:	4b59      	ldr	r3, [pc, #356]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dd2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dda:	4956      	ldr	r1, [pc, #344]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d00a      	beq.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004dee:	4b51      	ldr	r3, [pc, #324]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004df4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dfc:	494d      	ldr	r1, [pc, #308]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d028      	beq.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004e10:	4b48      	ldr	r3, [pc, #288]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e16:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e1e:	4945      	ldr	r1, [pc, #276]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004e20:	4313      	orrs	r3, r2
 8004e22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e2e:	d106      	bne.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e30:	4b40      	ldr	r3, [pc, #256]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	4a3f      	ldr	r2, [pc, #252]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004e36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e3a:	60d3      	str	r3, [r2, #12]
 8004e3c:	e011      	b.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e42:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e46:	d10c      	bne.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	3304      	adds	r3, #4
 8004e4c:	2101      	movs	r1, #1
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f000 f872 	bl	8004f38 <RCCEx_PLLSAI1_Config>
 8004e54:	4603      	mov	r3, r0
 8004e56:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e58:	7cfb      	ldrb	r3, [r7, #19]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d001      	beq.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 8004e5e:	7cfb      	ldrb	r3, [r7, #19]
 8004e60:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d028      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e6e:	4b31      	ldr	r3, [pc, #196]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e74:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e7c:	492d      	ldr	r1, [pc, #180]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e8c:	d106      	bne.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e8e:	4b29      	ldr	r3, [pc, #164]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	4a28      	ldr	r2, [pc, #160]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004e94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e98:	60d3      	str	r3, [r2, #12]
 8004e9a:	e011      	b.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ea0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ea4:	d10c      	bne.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	3304      	adds	r3, #4
 8004eaa:	2101      	movs	r1, #1
 8004eac:	4618      	mov	r0, r3
 8004eae:	f000 f843 	bl	8004f38 <RCCEx_PLLSAI1_Config>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004eb6:	7cfb      	ldrb	r3, [r7, #19]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d001      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8004ebc:	7cfb      	ldrb	r3, [r7, #19]
 8004ebe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d01c      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ecc:	4b19      	ldr	r3, [pc, #100]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ed2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eda:	4916      	ldr	r1, [pc, #88]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004edc:	4313      	orrs	r3, r2
 8004ede:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ee6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004eea:	d10c      	bne.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	3304      	adds	r3, #4
 8004ef0:	2102      	movs	r1, #2
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f000 f820 	bl	8004f38 <RCCEx_PLLSAI1_Config>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004efc:	7cfb      	ldrb	r3, [r7, #19]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d001      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8004f02:	7cfb      	ldrb	r3, [r7, #19]
 8004f04:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d00a      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004f12:	4b08      	ldr	r3, [pc, #32]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f18:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f20:	4904      	ldr	r1, [pc, #16]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004f22:	4313      	orrs	r3, r2
 8004f24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004f28:	7cbb      	ldrb	r3, [r7, #18]
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3718      	adds	r7, #24
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop
 8004f34:	40021000 	.word	0x40021000

08004f38 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f42:	2300      	movs	r3, #0
 8004f44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004f46:	4b74      	ldr	r3, [pc, #464]	; (8005118 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	f003 0303 	and.w	r3, r3, #3
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d018      	beq.n	8004f84 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004f52:	4b71      	ldr	r3, [pc, #452]	; (8005118 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	f003 0203 	and.w	r2, r3, #3
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d10d      	bne.n	8004f7e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
       ||
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d009      	beq.n	8004f7e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004f6a:	4b6b      	ldr	r3, [pc, #428]	; (8005118 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	091b      	lsrs	r3, r3, #4
 8004f70:	f003 0307 	and.w	r3, r3, #7
 8004f74:	1c5a      	adds	r2, r3, #1
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	685b      	ldr	r3, [r3, #4]
       ||
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d047      	beq.n	800500e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	73fb      	strb	r3, [r7, #15]
 8004f82:	e044      	b.n	800500e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2b03      	cmp	r3, #3
 8004f8a:	d018      	beq.n	8004fbe <RCCEx_PLLSAI1_Config+0x86>
 8004f8c:	2b03      	cmp	r3, #3
 8004f8e:	d825      	bhi.n	8004fdc <RCCEx_PLLSAI1_Config+0xa4>
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d002      	beq.n	8004f9a <RCCEx_PLLSAI1_Config+0x62>
 8004f94:	2b02      	cmp	r3, #2
 8004f96:	d009      	beq.n	8004fac <RCCEx_PLLSAI1_Config+0x74>
 8004f98:	e020      	b.n	8004fdc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004f9a:	4b5f      	ldr	r3, [pc, #380]	; (8005118 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 0302 	and.w	r3, r3, #2
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d11d      	bne.n	8004fe2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004faa:	e01a      	b.n	8004fe2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004fac:	4b5a      	ldr	r3, [pc, #360]	; (8005118 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d116      	bne.n	8004fe6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fbc:	e013      	b.n	8004fe6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004fbe:	4b56      	ldr	r3, [pc, #344]	; (8005118 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d10f      	bne.n	8004fea <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004fca:	4b53      	ldr	r3, [pc, #332]	; (8005118 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d109      	bne.n	8004fea <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004fda:	e006      	b.n	8004fea <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	73fb      	strb	r3, [r7, #15]
      break;
 8004fe0:	e004      	b.n	8004fec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004fe2:	bf00      	nop
 8004fe4:	e002      	b.n	8004fec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004fe6:	bf00      	nop
 8004fe8:	e000      	b.n	8004fec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004fea:	bf00      	nop
    }

    if(status == HAL_OK)
 8004fec:	7bfb      	ldrb	r3, [r7, #15]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d10d      	bne.n	800500e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004ff2:	4b49      	ldr	r3, [pc, #292]	; (8005118 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6819      	ldr	r1, [r3, #0]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	3b01      	subs	r3, #1
 8005004:	011b      	lsls	r3, r3, #4
 8005006:	430b      	orrs	r3, r1
 8005008:	4943      	ldr	r1, [pc, #268]	; (8005118 <RCCEx_PLLSAI1_Config+0x1e0>)
 800500a:	4313      	orrs	r3, r2
 800500c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800500e:	7bfb      	ldrb	r3, [r7, #15]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d17c      	bne.n	800510e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005014:	4b40      	ldr	r3, [pc, #256]	; (8005118 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a3f      	ldr	r2, [pc, #252]	; (8005118 <RCCEx_PLLSAI1_Config+0x1e0>)
 800501a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800501e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005020:	f7fe f9a8 	bl	8003374 <HAL_GetTick>
 8005024:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005026:	e009      	b.n	800503c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005028:	f7fe f9a4 	bl	8003374 <HAL_GetTick>
 800502c:	4602      	mov	r2, r0
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	2b02      	cmp	r3, #2
 8005034:	d902      	bls.n	800503c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005036:	2303      	movs	r3, #3
 8005038:	73fb      	strb	r3, [r7, #15]
        break;
 800503a:	e005      	b.n	8005048 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800503c:	4b36      	ldr	r3, [pc, #216]	; (8005118 <RCCEx_PLLSAI1_Config+0x1e0>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005044:	2b00      	cmp	r3, #0
 8005046:	d1ef      	bne.n	8005028 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005048:	7bfb      	ldrb	r3, [r7, #15]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d15f      	bne.n	800510e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d110      	bne.n	8005076 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005054:	4b30      	ldr	r3, [pc, #192]	; (8005118 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005056:	691b      	ldr	r3, [r3, #16]
 8005058:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800505c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	6892      	ldr	r2, [r2, #8]
 8005064:	0211      	lsls	r1, r2, #8
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	68d2      	ldr	r2, [r2, #12]
 800506a:	06d2      	lsls	r2, r2, #27
 800506c:	430a      	orrs	r2, r1
 800506e:	492a      	ldr	r1, [pc, #168]	; (8005118 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005070:	4313      	orrs	r3, r2
 8005072:	610b      	str	r3, [r1, #16]
 8005074:	e027      	b.n	80050c6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	2b01      	cmp	r3, #1
 800507a:	d112      	bne.n	80050a2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800507c:	4b26      	ldr	r3, [pc, #152]	; (8005118 <RCCEx_PLLSAI1_Config+0x1e0>)
 800507e:	691b      	ldr	r3, [r3, #16]
 8005080:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005084:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	6892      	ldr	r2, [r2, #8]
 800508c:	0211      	lsls	r1, r2, #8
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	6912      	ldr	r2, [r2, #16]
 8005092:	0852      	lsrs	r2, r2, #1
 8005094:	3a01      	subs	r2, #1
 8005096:	0552      	lsls	r2, r2, #21
 8005098:	430a      	orrs	r2, r1
 800509a:	491f      	ldr	r1, [pc, #124]	; (8005118 <RCCEx_PLLSAI1_Config+0x1e0>)
 800509c:	4313      	orrs	r3, r2
 800509e:	610b      	str	r3, [r1, #16]
 80050a0:	e011      	b.n	80050c6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80050a2:	4b1d      	ldr	r3, [pc, #116]	; (8005118 <RCCEx_PLLSAI1_Config+0x1e0>)
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80050aa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	6892      	ldr	r2, [r2, #8]
 80050b2:	0211      	lsls	r1, r2, #8
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	6952      	ldr	r2, [r2, #20]
 80050b8:	0852      	lsrs	r2, r2, #1
 80050ba:	3a01      	subs	r2, #1
 80050bc:	0652      	lsls	r2, r2, #25
 80050be:	430a      	orrs	r2, r1
 80050c0:	4915      	ldr	r1, [pc, #84]	; (8005118 <RCCEx_PLLSAI1_Config+0x1e0>)
 80050c2:	4313      	orrs	r3, r2
 80050c4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80050c6:	4b14      	ldr	r3, [pc, #80]	; (8005118 <RCCEx_PLLSAI1_Config+0x1e0>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a13      	ldr	r2, [pc, #76]	; (8005118 <RCCEx_PLLSAI1_Config+0x1e0>)
 80050cc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80050d0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050d2:	f7fe f94f 	bl	8003374 <HAL_GetTick>
 80050d6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80050d8:	e009      	b.n	80050ee <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80050da:	f7fe f94b 	bl	8003374 <HAL_GetTick>
 80050de:	4602      	mov	r2, r0
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	1ad3      	subs	r3, r2, r3
 80050e4:	2b02      	cmp	r3, #2
 80050e6:	d902      	bls.n	80050ee <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80050e8:	2303      	movs	r3, #3
 80050ea:	73fb      	strb	r3, [r7, #15]
          break;
 80050ec:	e005      	b.n	80050fa <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80050ee:	4b0a      	ldr	r3, [pc, #40]	; (8005118 <RCCEx_PLLSAI1_Config+0x1e0>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d0ef      	beq.n	80050da <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80050fa:	7bfb      	ldrb	r3, [r7, #15]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d106      	bne.n	800510e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005100:	4b05      	ldr	r3, [pc, #20]	; (8005118 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005102:	691a      	ldr	r2, [r3, #16]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	699b      	ldr	r3, [r3, #24]
 8005108:	4903      	ldr	r1, [pc, #12]	; (8005118 <RCCEx_PLLSAI1_Config+0x1e0>)
 800510a:	4313      	orrs	r3, r2
 800510c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800510e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005110:	4618      	mov	r0, r3
 8005112:	3710      	adds	r7, #16
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}
 8005118:	40021000 	.word	0x40021000

0800511c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d06c      	beq.n	8005208 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005134:	b2db      	uxtb	r3, r3
 8005136:	2b00      	cmp	r3, #0
 8005138:	d106      	bne.n	8005148 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f001 fee2 	bl	8006f0c <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2202      	movs	r2, #2
 800514c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	22ca      	movs	r2, #202	; 0xca
 8005156:	625a      	str	r2, [r3, #36]	; 0x24
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2253      	movs	r2, #83	; 0x53
 800515e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f000 f87c 	bl	800525e <RTC_EnterInitMode>
 8005166:	4603      	mov	r3, r0
 8005168:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800516a:	7bfb      	ldrb	r3, [r7, #15]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d14b      	bne.n	8005208 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	6812      	ldr	r2, [r2, #0]
 800517a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800517e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005182:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	6899      	ldr	r1, [r3, #8]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	685a      	ldr	r2, [r3, #4]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	431a      	orrs	r2, r3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	699b      	ldr	r3, [r3, #24]
 8005198:	431a      	orrs	r2, r3
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	430a      	orrs	r2, r1
 80051a0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	68d2      	ldr	r2, [r2, #12]
 80051aa:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	6919      	ldr	r1, [r3, #16]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	041a      	lsls	r2, r3, #16
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	430a      	orrs	r2, r1
 80051be:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f000 f87f 	bl	80052c4 <RTC_ExitInitMode>
 80051c6:	4603      	mov	r3, r0
 80051c8:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80051ca:	7bfb      	ldrb	r3, [r7, #15]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d11b      	bne.n	8005208 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f022 0203 	bic.w	r2, r2, #3
 80051de:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	69da      	ldr	r2, [r3, #28]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	695b      	ldr	r3, [r3, #20]
 80051ee:	431a      	orrs	r2, r3
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	430a      	orrs	r2, r1
 80051f6:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	22ff      	movs	r2, #255	; 0xff
 80051fe:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8005208:	7bfb      	ldrb	r3, [r7, #15]
}
 800520a:	4618      	mov	r0, r3
 800520c:	3710      	adds	r7, #16
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}

08005212 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005212:	b580      	push	{r7, lr}
 8005214:	b084      	sub	sp, #16
 8005216:	af00      	add	r7, sp, #0
 8005218:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	68da      	ldr	r2, [r3, #12]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005228:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800522a:	f7fe f8a3 	bl	8003374 <HAL_GetTick>
 800522e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005230:	e009      	b.n	8005246 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005232:	f7fe f89f 	bl	8003374 <HAL_GetTick>
 8005236:	4602      	mov	r2, r0
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	1ad3      	subs	r3, r2, r3
 800523c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005240:	d901      	bls.n	8005246 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8005242:	2303      	movs	r3, #3
 8005244:	e007      	b.n	8005256 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	f003 0320 	and.w	r3, r3, #32
 8005250:	2b00      	cmp	r3, #0
 8005252:	d0ee      	beq.n	8005232 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8005254:	2300      	movs	r3, #0
}
 8005256:	4618      	mov	r0, r3
 8005258:	3710      	adds	r7, #16
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}

0800525e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800525e:	b580      	push	{r7, lr}
 8005260:	b084      	sub	sp, #16
 8005262:	af00      	add	r7, sp, #0
 8005264:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005266:	2300      	movs	r3, #0
 8005268:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005274:	2b00      	cmp	r3, #0
 8005276:	d120      	bne.n	80052ba <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f04f 32ff 	mov.w	r2, #4294967295
 8005280:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005282:	f7fe f877 	bl	8003374 <HAL_GetTick>
 8005286:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005288:	e00d      	b.n	80052a6 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800528a:	f7fe f873 	bl	8003374 <HAL_GetTick>
 800528e:	4602      	mov	r2, r0
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	1ad3      	subs	r3, r2, r3
 8005294:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005298:	d905      	bls.n	80052a6 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2203      	movs	r2, #3
 80052a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d102      	bne.n	80052ba <RTC_EnterInitMode+0x5c>
 80052b4:	7bfb      	ldrb	r3, [r7, #15]
 80052b6:	2b03      	cmp	r3, #3
 80052b8:	d1e7      	bne.n	800528a <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80052ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3710      	adds	r7, #16
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052cc:	2300      	movs	r3, #0
 80052ce:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80052d0:	4b1a      	ldr	r3, [pc, #104]	; (800533c <RTC_ExitInitMode+0x78>)
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	4a19      	ldr	r2, [pc, #100]	; (800533c <RTC_ExitInitMode+0x78>)
 80052d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052da:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80052dc:	4b17      	ldr	r3, [pc, #92]	; (800533c <RTC_ExitInitMode+0x78>)
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	f003 0320 	and.w	r3, r3, #32
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d10c      	bne.n	8005302 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f7ff ff92 	bl	8005212 <HAL_RTC_WaitForSynchro>
 80052ee:	4603      	mov	r3, r0
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d01e      	beq.n	8005332 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2203      	movs	r2, #3
 80052f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80052fc:	2303      	movs	r3, #3
 80052fe:	73fb      	strb	r3, [r7, #15]
 8005300:	e017      	b.n	8005332 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005302:	4b0e      	ldr	r3, [pc, #56]	; (800533c <RTC_ExitInitMode+0x78>)
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	4a0d      	ldr	r2, [pc, #52]	; (800533c <RTC_ExitInitMode+0x78>)
 8005308:	f023 0320 	bic.w	r3, r3, #32
 800530c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f7ff ff7f 	bl	8005212 <HAL_RTC_WaitForSynchro>
 8005314:	4603      	mov	r3, r0
 8005316:	2b00      	cmp	r3, #0
 8005318:	d005      	beq.n	8005326 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2203      	movs	r2, #3
 800531e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8005322:	2303      	movs	r3, #3
 8005324:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005326:	4b05      	ldr	r3, [pc, #20]	; (800533c <RTC_ExitInitMode+0x78>)
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	4a04      	ldr	r2, [pc, #16]	; (800533c <RTC_ExitInitMode+0x78>)
 800532c:	f043 0320 	orr.w	r3, r3, #32
 8005330:	6093      	str	r3, [r2, #8]
  }

  return status;
 8005332:	7bfb      	ldrb	r3, [r7, #15]
}
 8005334:	4618      	mov	r0, r3
 8005336:	3710      	adds	r7, #16
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}
 800533c:	40002800 	.word	0x40002800

08005340 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b082      	sub	sp, #8
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d101      	bne.n	8005352 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e049      	b.n	80053e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005358:	b2db      	uxtb	r3, r3
 800535a:	2b00      	cmp	r3, #0
 800535c:	d106      	bne.n	800536c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f001 fdec 	bl	8006f44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2202      	movs	r2, #2
 8005370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	3304      	adds	r3, #4
 800537c:	4619      	mov	r1, r3
 800537e:	4610      	mov	r0, r2
 8005380:	f000 fe38 	bl	8005ff4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053e4:	2300      	movs	r3, #0
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3708      	adds	r7, #8
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}

080053ee <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80053ee:	b580      	push	{r7, lr}
 80053f0:	b082      	sub	sp, #8
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d101      	bne.n	8005400 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	e049      	b.n	8005494 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005406:	b2db      	uxtb	r3, r3
 8005408:	2b00      	cmp	r3, #0
 800540a:	d106      	bne.n	800541a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f000 f841 	bl	800549c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2202      	movs	r2, #2
 800541e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	3304      	adds	r3, #4
 800542a:	4619      	mov	r1, r3
 800542c:	4610      	mov	r0, r2
 800542e:	f000 fde1 	bl	8005ff4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2201      	movs	r2, #1
 8005436:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2201      	movs	r2, #1
 800543e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2201      	movs	r2, #1
 8005446:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2201      	movs	r2, #1
 800544e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2201      	movs	r2, #1
 8005456:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2201      	movs	r2, #1
 800545e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2201      	movs	r2, #1
 8005466:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2201      	movs	r2, #1
 800546e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2201      	movs	r2, #1
 8005476:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2201      	movs	r2, #1
 800547e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2201      	movs	r2, #1
 8005486:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2201      	movs	r2, #1
 800548e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005492:	2300      	movs	r3, #0
}
 8005494:	4618      	mov	r0, r3
 8005496:	3708      	adds	r7, #8
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}

0800549c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80054a4:	bf00      	nop
 80054a6:	370c      	adds	r7, #12
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b086      	sub	sp, #24
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	607a      	str	r2, [r7, #4]
 80054bc:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80054be:	2300      	movs	r3, #0
 80054c0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d109      	bne.n	80054dc <HAL_TIM_PWM_Start_DMA+0x2c>
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	2b02      	cmp	r3, #2
 80054d2:	bf0c      	ite	eq
 80054d4:	2301      	moveq	r3, #1
 80054d6:	2300      	movne	r3, #0
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	e03c      	b.n	8005556 <HAL_TIM_PWM_Start_DMA+0xa6>
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	2b04      	cmp	r3, #4
 80054e0:	d109      	bne.n	80054f6 <HAL_TIM_PWM_Start_DMA+0x46>
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	2b02      	cmp	r3, #2
 80054ec:	bf0c      	ite	eq
 80054ee:	2301      	moveq	r3, #1
 80054f0:	2300      	movne	r3, #0
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	e02f      	b.n	8005556 <HAL_TIM_PWM_Start_DMA+0xa6>
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	2b08      	cmp	r3, #8
 80054fa:	d109      	bne.n	8005510 <HAL_TIM_PWM_Start_DMA+0x60>
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005502:	b2db      	uxtb	r3, r3
 8005504:	2b02      	cmp	r3, #2
 8005506:	bf0c      	ite	eq
 8005508:	2301      	moveq	r3, #1
 800550a:	2300      	movne	r3, #0
 800550c:	b2db      	uxtb	r3, r3
 800550e:	e022      	b.n	8005556 <HAL_TIM_PWM_Start_DMA+0xa6>
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	2b0c      	cmp	r3, #12
 8005514:	d109      	bne.n	800552a <HAL_TIM_PWM_Start_DMA+0x7a>
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800551c:	b2db      	uxtb	r3, r3
 800551e:	2b02      	cmp	r3, #2
 8005520:	bf0c      	ite	eq
 8005522:	2301      	moveq	r3, #1
 8005524:	2300      	movne	r3, #0
 8005526:	b2db      	uxtb	r3, r3
 8005528:	e015      	b.n	8005556 <HAL_TIM_PWM_Start_DMA+0xa6>
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	2b10      	cmp	r3, #16
 800552e:	d109      	bne.n	8005544 <HAL_TIM_PWM_Start_DMA+0x94>
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005536:	b2db      	uxtb	r3, r3
 8005538:	2b02      	cmp	r3, #2
 800553a:	bf0c      	ite	eq
 800553c:	2301      	moveq	r3, #1
 800553e:	2300      	movne	r3, #0
 8005540:	b2db      	uxtb	r3, r3
 8005542:	e008      	b.n	8005556 <HAL_TIM_PWM_Start_DMA+0xa6>
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800554a:	b2db      	uxtb	r3, r3
 800554c:	2b02      	cmp	r3, #2
 800554e:	bf0c      	ite	eq
 8005550:	2301      	moveq	r3, #1
 8005552:	2300      	movne	r3, #0
 8005554:	b2db      	uxtb	r3, r3
 8005556:	2b00      	cmp	r3, #0
 8005558:	d001      	beq.n	800555e <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800555a:	2302      	movs	r3, #2
 800555c:	e18d      	b.n	800587a <HAL_TIM_PWM_Start_DMA+0x3ca>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d109      	bne.n	8005578 <HAL_TIM_PWM_Start_DMA+0xc8>
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800556a:	b2db      	uxtb	r3, r3
 800556c:	2b01      	cmp	r3, #1
 800556e:	bf0c      	ite	eq
 8005570:	2301      	moveq	r3, #1
 8005572:	2300      	movne	r3, #0
 8005574:	b2db      	uxtb	r3, r3
 8005576:	e03c      	b.n	80055f2 <HAL_TIM_PWM_Start_DMA+0x142>
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	2b04      	cmp	r3, #4
 800557c:	d109      	bne.n	8005592 <HAL_TIM_PWM_Start_DMA+0xe2>
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005584:	b2db      	uxtb	r3, r3
 8005586:	2b01      	cmp	r3, #1
 8005588:	bf0c      	ite	eq
 800558a:	2301      	moveq	r3, #1
 800558c:	2300      	movne	r3, #0
 800558e:	b2db      	uxtb	r3, r3
 8005590:	e02f      	b.n	80055f2 <HAL_TIM_PWM_Start_DMA+0x142>
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	2b08      	cmp	r3, #8
 8005596:	d109      	bne.n	80055ac <HAL_TIM_PWM_Start_DMA+0xfc>
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	bf0c      	ite	eq
 80055a4:	2301      	moveq	r3, #1
 80055a6:	2300      	movne	r3, #0
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	e022      	b.n	80055f2 <HAL_TIM_PWM_Start_DMA+0x142>
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	2b0c      	cmp	r3, #12
 80055b0:	d109      	bne.n	80055c6 <HAL_TIM_PWM_Start_DMA+0x116>
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	bf0c      	ite	eq
 80055be:	2301      	moveq	r3, #1
 80055c0:	2300      	movne	r3, #0
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	e015      	b.n	80055f2 <HAL_TIM_PWM_Start_DMA+0x142>
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	2b10      	cmp	r3, #16
 80055ca:	d109      	bne.n	80055e0 <HAL_TIM_PWM_Start_DMA+0x130>
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	bf0c      	ite	eq
 80055d8:	2301      	moveq	r3, #1
 80055da:	2300      	movne	r3, #0
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	e008      	b.n	80055f2 <HAL_TIM_PWM_Start_DMA+0x142>
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	bf0c      	ite	eq
 80055ec:	2301      	moveq	r3, #1
 80055ee:	2300      	movne	r3, #0
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d034      	beq.n	8005660 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d002      	beq.n	8005602 <HAL_TIM_PWM_Start_DMA+0x152>
 80055fc:	887b      	ldrh	r3, [r7, #2]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d101      	bne.n	8005606 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e139      	b.n	800587a <HAL_TIM_PWM_Start_DMA+0x3ca>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d104      	bne.n	8005616 <HAL_TIM_PWM_Start_DMA+0x166>
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2202      	movs	r2, #2
 8005610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005614:	e026      	b.n	8005664 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	2b04      	cmp	r3, #4
 800561a:	d104      	bne.n	8005626 <HAL_TIM_PWM_Start_DMA+0x176>
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2202      	movs	r2, #2
 8005620:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005624:	e01e      	b.n	8005664 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	2b08      	cmp	r3, #8
 800562a:	d104      	bne.n	8005636 <HAL_TIM_PWM_Start_DMA+0x186>
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2202      	movs	r2, #2
 8005630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005634:	e016      	b.n	8005664 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	2b0c      	cmp	r3, #12
 800563a:	d104      	bne.n	8005646 <HAL_TIM_PWM_Start_DMA+0x196>
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2202      	movs	r2, #2
 8005640:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005644:	e00e      	b.n	8005664 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	2b10      	cmp	r3, #16
 800564a:	d104      	bne.n	8005656 <HAL_TIM_PWM_Start_DMA+0x1a6>
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2202      	movs	r2, #2
 8005650:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005654:	e006      	b.n	8005664 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2202      	movs	r2, #2
 800565a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800565e:	e001      	b.n	8005664 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	e10a      	b.n	800587a <HAL_TIM_PWM_Start_DMA+0x3ca>
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	2b0c      	cmp	r3, #12
 8005668:	f200 80ae 	bhi.w	80057c8 <HAL_TIM_PWM_Start_DMA+0x318>
 800566c:	a201      	add	r2, pc, #4	; (adr r2, 8005674 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800566e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005672:	bf00      	nop
 8005674:	080056a9 	.word	0x080056a9
 8005678:	080057c9 	.word	0x080057c9
 800567c:	080057c9 	.word	0x080057c9
 8005680:	080057c9 	.word	0x080057c9
 8005684:	080056f1 	.word	0x080056f1
 8005688:	080057c9 	.word	0x080057c9
 800568c:	080057c9 	.word	0x080057c9
 8005690:	080057c9 	.word	0x080057c9
 8005694:	08005739 	.word	0x08005739
 8005698:	080057c9 	.word	0x080057c9
 800569c:	080057c9 	.word	0x080057c9
 80056a0:	080057c9 	.word	0x080057c9
 80056a4:	08005781 	.word	0x08005781
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ac:	4a75      	ldr	r2, [pc, #468]	; (8005884 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 80056ae:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b4:	4a74      	ldr	r2, [pc, #464]	; (8005888 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 80056b6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056bc:	4a73      	ldr	r2, [pc, #460]	; (800588c <HAL_TIM_PWM_Start_DMA+0x3dc>)
 80056be:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80056c4:	6879      	ldr	r1, [r7, #4]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	3334      	adds	r3, #52	; 0x34
 80056cc:	461a      	mov	r2, r3
 80056ce:	887b      	ldrh	r3, [r7, #2]
 80056d0:	f7fe f826 	bl	8003720 <HAL_DMA_Start_IT>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d001      	beq.n	80056de <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	e0cd      	b.n	800587a <HAL_TIM_PWM_Start_DMA+0x3ca>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68da      	ldr	r2, [r3, #12]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056ec:	60da      	str	r2, [r3, #12]
      break;
 80056ee:	e06e      	b.n	80057ce <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f4:	4a63      	ldr	r2, [pc, #396]	; (8005884 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 80056f6:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056fc:	4a62      	ldr	r2, [pc, #392]	; (8005888 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 80056fe:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005704:	4a61      	ldr	r2, [pc, #388]	; (800588c <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8005706:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800570c:	6879      	ldr	r1, [r7, #4]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	3338      	adds	r3, #56	; 0x38
 8005714:	461a      	mov	r2, r3
 8005716:	887b      	ldrh	r3, [r7, #2]
 8005718:	f7fe f802 	bl	8003720 <HAL_DMA_Start_IT>
 800571c:	4603      	mov	r3, r0
 800571e:	2b00      	cmp	r3, #0
 8005720:	d001      	beq.n	8005726 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	e0a9      	b.n	800587a <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68da      	ldr	r2, [r3, #12]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005734:	60da      	str	r2, [r3, #12]
      break;
 8005736:	e04a      	b.n	80057ce <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800573c:	4a51      	ldr	r2, [pc, #324]	; (8005884 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 800573e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005744:	4a50      	ldr	r2, [pc, #320]	; (8005888 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8005746:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800574c:	4a4f      	ldr	r2, [pc, #316]	; (800588c <HAL_TIM_PWM_Start_DMA+0x3dc>)
 800574e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005754:	6879      	ldr	r1, [r7, #4]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	333c      	adds	r3, #60	; 0x3c
 800575c:	461a      	mov	r2, r3
 800575e:	887b      	ldrh	r3, [r7, #2]
 8005760:	f7fd ffde 	bl	8003720 <HAL_DMA_Start_IT>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d001      	beq.n	800576e <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	e085      	b.n	800587a <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	68da      	ldr	r2, [r3, #12]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800577c:	60da      	str	r2, [r3, #12]
      break;
 800577e:	e026      	b.n	80057ce <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005784:	4a3f      	ldr	r2, [pc, #252]	; (8005884 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8005786:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800578c:	4a3e      	ldr	r2, [pc, #248]	; (8005888 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 800578e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005794:	4a3d      	ldr	r2, [pc, #244]	; (800588c <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8005796:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800579c:	6879      	ldr	r1, [r7, #4]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	3340      	adds	r3, #64	; 0x40
 80057a4:	461a      	mov	r2, r3
 80057a6:	887b      	ldrh	r3, [r7, #2]
 80057a8:	f7fd ffba 	bl	8003720 <HAL_DMA_Start_IT>
 80057ac:	4603      	mov	r3, r0
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d001      	beq.n	80057b6 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e061      	b.n	800587a <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68da      	ldr	r2, [r3, #12]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80057c4:	60da      	str	r2, [r3, #12]
      break;
 80057c6:	e002      	b.n	80057ce <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	75fb      	strb	r3, [r7, #23]
      break;
 80057cc:	bf00      	nop
  }

  if (status == HAL_OK)
 80057ce:	7dfb      	ldrb	r3, [r7, #23]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d151      	bne.n	8005878 <HAL_TIM_PWM_Start_DMA+0x3c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	2201      	movs	r2, #1
 80057da:	68b9      	ldr	r1, [r7, #8]
 80057dc:	4618      	mov	r0, r3
 80057de:	f000 ff85 	bl	80066ec <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a2a      	ldr	r2, [pc, #168]	; (8005890 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d009      	beq.n	8005800 <HAL_TIM_PWM_Start_DMA+0x350>
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a28      	ldr	r2, [pc, #160]	; (8005894 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d004      	beq.n	8005800 <HAL_TIM_PWM_Start_DMA+0x350>
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a27      	ldr	r2, [pc, #156]	; (8005898 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d101      	bne.n	8005804 <HAL_TIM_PWM_Start_DMA+0x354>
 8005800:	2301      	movs	r3, #1
 8005802:	e000      	b.n	8005806 <HAL_TIM_PWM_Start_DMA+0x356>
 8005804:	2300      	movs	r3, #0
 8005806:	2b00      	cmp	r3, #0
 8005808:	d007      	beq.n	800581a <HAL_TIM_PWM_Start_DMA+0x36a>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005818:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a1c      	ldr	r2, [pc, #112]	; (8005890 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d009      	beq.n	8005838 <HAL_TIM_PWM_Start_DMA+0x388>
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800582c:	d004      	beq.n	8005838 <HAL_TIM_PWM_Start_DMA+0x388>
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a18      	ldr	r2, [pc, #96]	; (8005894 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d115      	bne.n	8005864 <HAL_TIM_PWM_Start_DMA+0x3b4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	689a      	ldr	r2, [r3, #8]
 800583e:	4b17      	ldr	r3, [pc, #92]	; (800589c <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8005840:	4013      	ands	r3, r2
 8005842:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	2b06      	cmp	r3, #6
 8005848:	d015      	beq.n	8005876 <HAL_TIM_PWM_Start_DMA+0x3c6>
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005850:	d011      	beq.n	8005876 <HAL_TIM_PWM_Start_DMA+0x3c6>
      {
        __HAL_TIM_ENABLE(htim);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f042 0201 	orr.w	r2, r2, #1
 8005860:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005862:	e008      	b.n	8005876 <HAL_TIM_PWM_Start_DMA+0x3c6>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f042 0201 	orr.w	r2, r2, #1
 8005872:	601a      	str	r2, [r3, #0]
 8005874:	e000      	b.n	8005878 <HAL_TIM_PWM_Start_DMA+0x3c8>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005876:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8005878:	7dfb      	ldrb	r3, [r7, #23]
}
 800587a:	4618      	mov	r0, r3
 800587c:	3718      	adds	r7, #24
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
 8005882:	bf00      	nop
 8005884:	08005ee5 	.word	0x08005ee5
 8005888:	08005f8d 	.word	0x08005f8d
 800588c:	08005e53 	.word	0x08005e53
 8005890:	40012c00 	.word	0x40012c00
 8005894:	40014000 	.word	0x40014000
 8005898:	40014400 	.word	0x40014400
 800589c:	00010007 	.word	0x00010007

080058a0 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b084      	sub	sp, #16
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058aa:	2300      	movs	r3, #0
 80058ac:	73fb      	strb	r3, [r7, #15]
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	2b0c      	cmp	r3, #12
 80058b2:	d855      	bhi.n	8005960 <HAL_TIM_PWM_Stop_DMA+0xc0>
 80058b4:	a201      	add	r2, pc, #4	; (adr r2, 80058bc <HAL_TIM_PWM_Stop_DMA+0x1c>)
 80058b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ba:	bf00      	nop
 80058bc:	080058f1 	.word	0x080058f1
 80058c0:	08005961 	.word	0x08005961
 80058c4:	08005961 	.word	0x08005961
 80058c8:	08005961 	.word	0x08005961
 80058cc:	0800590d 	.word	0x0800590d
 80058d0:	08005961 	.word	0x08005961
 80058d4:	08005961 	.word	0x08005961
 80058d8:	08005961 	.word	0x08005961
 80058dc:	08005929 	.word	0x08005929
 80058e0:	08005961 	.word	0x08005961
 80058e4:	08005961 	.word	0x08005961
 80058e8:	08005961 	.word	0x08005961
 80058ec:	08005945 	.word	0x08005945
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	68da      	ldr	r2, [r3, #12]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80058fe:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005904:	4618      	mov	r0, r3
 8005906:	f7fd ff6b 	bl	80037e0 <HAL_DMA_Abort_IT>
      break;
 800590a:	e02c      	b.n	8005966 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	68da      	ldr	r2, [r3, #12]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800591a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005920:	4618      	mov	r0, r3
 8005922:	f7fd ff5d 	bl	80037e0 <HAL_DMA_Abort_IT>
      break;
 8005926:	e01e      	b.n	8005966 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	68da      	ldr	r2, [r3, #12]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005936:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800593c:	4618      	mov	r0, r3
 800593e:	f7fd ff4f 	bl	80037e0 <HAL_DMA_Abort_IT>
      break;
 8005942:	e010      	b.n	8005966 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	68da      	ldr	r2, [r3, #12]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005952:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005958:	4618      	mov	r0, r3
 800595a:	f7fd ff41 	bl	80037e0 <HAL_DMA_Abort_IT>
      break;
 800595e:	e002      	b.n	8005966 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	73fb      	strb	r3, [r7, #15]
      break;
 8005964:	bf00      	nop
  }

  if (status == HAL_OK)
 8005966:	7bfb      	ldrb	r3, [r7, #15]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d176      	bne.n	8005a5a <HAL_TIM_PWM_Stop_DMA+0x1ba>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	2200      	movs	r2, #0
 8005972:	6839      	ldr	r1, [r7, #0]
 8005974:	4618      	mov	r0, r3
 8005976:	f000 feb9 	bl	80066ec <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a39      	ldr	r2, [pc, #228]	; (8005a64 <HAL_TIM_PWM_Stop_DMA+0x1c4>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d009      	beq.n	8005998 <HAL_TIM_PWM_Stop_DMA+0xf8>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a37      	ldr	r2, [pc, #220]	; (8005a68 <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d004      	beq.n	8005998 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a36      	ldr	r2, [pc, #216]	; (8005a6c <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d101      	bne.n	800599c <HAL_TIM_PWM_Stop_DMA+0xfc>
 8005998:	2301      	movs	r3, #1
 800599a:	e000      	b.n	800599e <HAL_TIM_PWM_Stop_DMA+0xfe>
 800599c:	2300      	movs	r3, #0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d017      	beq.n	80059d2 <HAL_TIM_PWM_Stop_DMA+0x132>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	6a1a      	ldr	r2, [r3, #32]
 80059a8:	f241 1311 	movw	r3, #4369	; 0x1111
 80059ac:	4013      	ands	r3, r2
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d10f      	bne.n	80059d2 <HAL_TIM_PWM_Stop_DMA+0x132>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	6a1a      	ldr	r2, [r3, #32]
 80059b8:	f240 4344 	movw	r3, #1092	; 0x444
 80059bc:	4013      	ands	r3, r2
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d107      	bne.n	80059d2 <HAL_TIM_PWM_Stop_DMA+0x132>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80059d0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	6a1a      	ldr	r2, [r3, #32]
 80059d8:	f241 1311 	movw	r3, #4369	; 0x1111
 80059dc:	4013      	ands	r3, r2
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d10f      	bne.n	8005a02 <HAL_TIM_PWM_Stop_DMA+0x162>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	6a1a      	ldr	r2, [r3, #32]
 80059e8:	f240 4344 	movw	r3, #1092	; 0x444
 80059ec:	4013      	ands	r3, r2
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d107      	bne.n	8005a02 <HAL_TIM_PWM_Stop_DMA+0x162>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f022 0201 	bic.w	r2, r2, #1
 8005a00:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d104      	bne.n	8005a12 <HAL_TIM_PWM_Stop_DMA+0x172>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a10:	e023      	b.n	8005a5a <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	2b04      	cmp	r3, #4
 8005a16:	d104      	bne.n	8005a22 <HAL_TIM_PWM_Stop_DMA+0x182>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a20:	e01b      	b.n	8005a5a <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	2b08      	cmp	r3, #8
 8005a26:	d104      	bne.n	8005a32 <HAL_TIM_PWM_Stop_DMA+0x192>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a30:	e013      	b.n	8005a5a <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	2b0c      	cmp	r3, #12
 8005a36:	d104      	bne.n	8005a42 <HAL_TIM_PWM_Stop_DMA+0x1a2>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a40:	e00b      	b.n	8005a5a <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	2b10      	cmp	r3, #16
 8005a46:	d104      	bne.n	8005a52 <HAL_TIM_PWM_Stop_DMA+0x1b2>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a50:	e003      	b.n	8005a5a <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2201      	movs	r2, #1
 8005a56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8005a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3710      	adds	r7, #16
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}
 8005a64:	40012c00 	.word	0x40012c00
 8005a68:	40014000 	.word	0x40014000
 8005a6c:	40014400 	.word	0x40014400

08005a70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b086      	sub	sp, #24
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	60f8      	str	r0, [r7, #12]
 8005a78:	60b9      	str	r1, [r7, #8]
 8005a7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d101      	bne.n	8005a8e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005a8a:	2302      	movs	r3, #2
 8005a8c:	e0ff      	b.n	8005c8e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2201      	movs	r2, #1
 8005a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2b14      	cmp	r3, #20
 8005a9a:	f200 80f0 	bhi.w	8005c7e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005a9e:	a201      	add	r2, pc, #4	; (adr r2, 8005aa4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa4:	08005af9 	.word	0x08005af9
 8005aa8:	08005c7f 	.word	0x08005c7f
 8005aac:	08005c7f 	.word	0x08005c7f
 8005ab0:	08005c7f 	.word	0x08005c7f
 8005ab4:	08005b39 	.word	0x08005b39
 8005ab8:	08005c7f 	.word	0x08005c7f
 8005abc:	08005c7f 	.word	0x08005c7f
 8005ac0:	08005c7f 	.word	0x08005c7f
 8005ac4:	08005b7b 	.word	0x08005b7b
 8005ac8:	08005c7f 	.word	0x08005c7f
 8005acc:	08005c7f 	.word	0x08005c7f
 8005ad0:	08005c7f 	.word	0x08005c7f
 8005ad4:	08005bbb 	.word	0x08005bbb
 8005ad8:	08005c7f 	.word	0x08005c7f
 8005adc:	08005c7f 	.word	0x08005c7f
 8005ae0:	08005c7f 	.word	0x08005c7f
 8005ae4:	08005bfd 	.word	0x08005bfd
 8005ae8:	08005c7f 	.word	0x08005c7f
 8005aec:	08005c7f 	.word	0x08005c7f
 8005af0:	08005c7f 	.word	0x08005c7f
 8005af4:	08005c3d 	.word	0x08005c3d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	68b9      	ldr	r1, [r7, #8]
 8005afe:	4618      	mov	r0, r3
 8005b00:	f000 fadc 	bl	80060bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	699a      	ldr	r2, [r3, #24]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f042 0208 	orr.w	r2, r2, #8
 8005b12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	699a      	ldr	r2, [r3, #24]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f022 0204 	bic.w	r2, r2, #4
 8005b22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	6999      	ldr	r1, [r3, #24]
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	691a      	ldr	r2, [r3, #16]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	430a      	orrs	r2, r1
 8005b34:	619a      	str	r2, [r3, #24]
      break;
 8005b36:	e0a5      	b.n	8005c84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	68b9      	ldr	r1, [r7, #8]
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f000 fb38 	bl	80061b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	699a      	ldr	r2, [r3, #24]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	699a      	ldr	r2, [r3, #24]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	6999      	ldr	r1, [r3, #24]
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	691b      	ldr	r3, [r3, #16]
 8005b6e:	021a      	lsls	r2, r3, #8
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	430a      	orrs	r2, r1
 8005b76:	619a      	str	r2, [r3, #24]
      break;
 8005b78:	e084      	b.n	8005c84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	68b9      	ldr	r1, [r7, #8]
 8005b80:	4618      	mov	r0, r3
 8005b82:	f000 fb91 	bl	80062a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	69da      	ldr	r2, [r3, #28]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f042 0208 	orr.w	r2, r2, #8
 8005b94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	69da      	ldr	r2, [r3, #28]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f022 0204 	bic.w	r2, r2, #4
 8005ba4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	69d9      	ldr	r1, [r3, #28]
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	691a      	ldr	r2, [r3, #16]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	430a      	orrs	r2, r1
 8005bb6:	61da      	str	r2, [r3, #28]
      break;
 8005bb8:	e064      	b.n	8005c84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	68b9      	ldr	r1, [r7, #8]
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f000 fbe9 	bl	8006398 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	69da      	ldr	r2, [r3, #28]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	69da      	ldr	r2, [r3, #28]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005be4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	69d9      	ldr	r1, [r3, #28]
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	691b      	ldr	r3, [r3, #16]
 8005bf0:	021a      	lsls	r2, r3, #8
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	430a      	orrs	r2, r1
 8005bf8:	61da      	str	r2, [r3, #28]
      break;
 8005bfa:	e043      	b.n	8005c84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	68b9      	ldr	r1, [r7, #8]
 8005c02:	4618      	mov	r0, r3
 8005c04:	f000 fc26 	bl	8006454 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f042 0208 	orr.w	r2, r2, #8
 8005c16:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f022 0204 	bic.w	r2, r2, #4
 8005c26:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	691a      	ldr	r2, [r3, #16]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	430a      	orrs	r2, r1
 8005c38:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005c3a:	e023      	b.n	8005c84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	68b9      	ldr	r1, [r7, #8]
 8005c42:	4618      	mov	r0, r3
 8005c44:	f000 fc5e 	bl	8006504 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c56:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c66:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	691b      	ldr	r3, [r3, #16]
 8005c72:	021a      	lsls	r2, r3, #8
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	430a      	orrs	r2, r1
 8005c7a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005c7c:	e002      	b.n	8005c84 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	75fb      	strb	r3, [r7, #23]
      break;
 8005c82:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2200      	movs	r2, #0
 8005c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3718      	adds	r7, #24
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop

08005c98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b084      	sub	sp, #16
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d101      	bne.n	8005cb4 <HAL_TIM_ConfigClockSource+0x1c>
 8005cb0:	2302      	movs	r3, #2
 8005cb2:	e0b6      	b.n	8005e22 <HAL_TIM_ConfigClockSource+0x18a>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2202      	movs	r2, #2
 8005cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cd2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005cd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005cde:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	68ba      	ldr	r2, [r7, #8]
 8005ce6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cf0:	d03e      	beq.n	8005d70 <HAL_TIM_ConfigClockSource+0xd8>
 8005cf2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cf6:	f200 8087 	bhi.w	8005e08 <HAL_TIM_ConfigClockSource+0x170>
 8005cfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cfe:	f000 8086 	beq.w	8005e0e <HAL_TIM_ConfigClockSource+0x176>
 8005d02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d06:	d87f      	bhi.n	8005e08 <HAL_TIM_ConfigClockSource+0x170>
 8005d08:	2b70      	cmp	r3, #112	; 0x70
 8005d0a:	d01a      	beq.n	8005d42 <HAL_TIM_ConfigClockSource+0xaa>
 8005d0c:	2b70      	cmp	r3, #112	; 0x70
 8005d0e:	d87b      	bhi.n	8005e08 <HAL_TIM_ConfigClockSource+0x170>
 8005d10:	2b60      	cmp	r3, #96	; 0x60
 8005d12:	d050      	beq.n	8005db6 <HAL_TIM_ConfigClockSource+0x11e>
 8005d14:	2b60      	cmp	r3, #96	; 0x60
 8005d16:	d877      	bhi.n	8005e08 <HAL_TIM_ConfigClockSource+0x170>
 8005d18:	2b50      	cmp	r3, #80	; 0x50
 8005d1a:	d03c      	beq.n	8005d96 <HAL_TIM_ConfigClockSource+0xfe>
 8005d1c:	2b50      	cmp	r3, #80	; 0x50
 8005d1e:	d873      	bhi.n	8005e08 <HAL_TIM_ConfigClockSource+0x170>
 8005d20:	2b40      	cmp	r3, #64	; 0x40
 8005d22:	d058      	beq.n	8005dd6 <HAL_TIM_ConfigClockSource+0x13e>
 8005d24:	2b40      	cmp	r3, #64	; 0x40
 8005d26:	d86f      	bhi.n	8005e08 <HAL_TIM_ConfigClockSource+0x170>
 8005d28:	2b30      	cmp	r3, #48	; 0x30
 8005d2a:	d064      	beq.n	8005df6 <HAL_TIM_ConfigClockSource+0x15e>
 8005d2c:	2b30      	cmp	r3, #48	; 0x30
 8005d2e:	d86b      	bhi.n	8005e08 <HAL_TIM_ConfigClockSource+0x170>
 8005d30:	2b20      	cmp	r3, #32
 8005d32:	d060      	beq.n	8005df6 <HAL_TIM_ConfigClockSource+0x15e>
 8005d34:	2b20      	cmp	r3, #32
 8005d36:	d867      	bhi.n	8005e08 <HAL_TIM_ConfigClockSource+0x170>
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d05c      	beq.n	8005df6 <HAL_TIM_ConfigClockSource+0x15e>
 8005d3c:	2b10      	cmp	r3, #16
 8005d3e:	d05a      	beq.n	8005df6 <HAL_TIM_ConfigClockSource+0x15e>
 8005d40:	e062      	b.n	8005e08 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6818      	ldr	r0, [r3, #0]
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	6899      	ldr	r1, [r3, #8]
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	685a      	ldr	r2, [r3, #4]
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	f000 fcab 	bl	80066ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005d64:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	68ba      	ldr	r2, [r7, #8]
 8005d6c:	609a      	str	r2, [r3, #8]
      break;
 8005d6e:	e04f      	b.n	8005e10 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6818      	ldr	r0, [r3, #0]
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	6899      	ldr	r1, [r3, #8]
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	685a      	ldr	r2, [r3, #4]
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	f000 fc94 	bl	80066ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	689a      	ldr	r2, [r3, #8]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d92:	609a      	str	r2, [r3, #8]
      break;
 8005d94:	e03c      	b.n	8005e10 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6818      	ldr	r0, [r3, #0]
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	6859      	ldr	r1, [r3, #4]
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	68db      	ldr	r3, [r3, #12]
 8005da2:	461a      	mov	r2, r3
 8005da4:	f000 fc08 	bl	80065b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	2150      	movs	r1, #80	; 0x50
 8005dae:	4618      	mov	r0, r3
 8005db0:	f000 fc61 	bl	8006676 <TIM_ITRx_SetConfig>
      break;
 8005db4:	e02c      	b.n	8005e10 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6818      	ldr	r0, [r3, #0]
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	6859      	ldr	r1, [r3, #4]
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	68db      	ldr	r3, [r3, #12]
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	f000 fc27 	bl	8006616 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	2160      	movs	r1, #96	; 0x60
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f000 fc51 	bl	8006676 <TIM_ITRx_SetConfig>
      break;
 8005dd4:	e01c      	b.n	8005e10 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6818      	ldr	r0, [r3, #0]
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	6859      	ldr	r1, [r3, #4]
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	68db      	ldr	r3, [r3, #12]
 8005de2:	461a      	mov	r2, r3
 8005de4:	f000 fbe8 	bl	80065b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	2140      	movs	r1, #64	; 0x40
 8005dee:	4618      	mov	r0, r3
 8005df0:	f000 fc41 	bl	8006676 <TIM_ITRx_SetConfig>
      break;
 8005df4:	e00c      	b.n	8005e10 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4619      	mov	r1, r3
 8005e00:	4610      	mov	r0, r2
 8005e02:	f000 fc38 	bl	8006676 <TIM_ITRx_SetConfig>
      break;
 8005e06:	e003      	b.n	8005e10 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	73fb      	strb	r3, [r7, #15]
      break;
 8005e0c:	e000      	b.n	8005e10 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005e0e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3710      	adds	r7, #16
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}

08005e2a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005e2a:	b480      	push	{r7}
 8005e2c:	b083      	sub	sp, #12
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8005e32:	bf00      	nop
 8005e34:	370c      	adds	r7, #12
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr

08005e3e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005e3e:	b480      	push	{r7}
 8005e40:	b083      	sub	sp, #12
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005e46:	bf00      	nop
 8005e48:	370c      	adds	r7, #12
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr

08005e52 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8005e52:	b580      	push	{r7, lr}
 8005e54:	b084      	sub	sp, #16
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e5e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e64:	687a      	ldr	r2, [r7, #4]
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d107      	bne.n	8005e7a <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2201      	movs	r2, #1
 8005e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e78:	e02a      	b.n	8005ed0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d107      	bne.n	8005e94 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2202      	movs	r2, #2
 8005e88:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e92:	e01d      	b.n	8005ed0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d107      	bne.n	8005eae <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2204      	movs	r2, #4
 8005ea2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005eac:	e010      	b.n	8005ed0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d107      	bne.n	8005ec8 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2208      	movs	r2, #8
 8005ebc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ec6:	e003      	b.n	8005ed0 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005ed0:	68f8      	ldr	r0, [r7, #12]
 8005ed2:	f7ff ffb4 	bl	8005e3e <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	771a      	strb	r2, [r3, #28]
}
 8005edc:	bf00      	nop
 8005ede:	3710      	adds	r7, #16
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}

08005ee4 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b084      	sub	sp, #16
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ef0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef6:	687a      	ldr	r2, [r7, #4]
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d10b      	bne.n	8005f14 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2201      	movs	r2, #1
 8005f00:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	69db      	ldr	r3, [r3, #28]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d136      	bne.n	8005f78 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f12:	e031      	b.n	8005f78 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d10b      	bne.n	8005f36 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2202      	movs	r2, #2
 8005f22:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	69db      	ldr	r3, [r3, #28]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d125      	bne.n	8005f78 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f34:	e020      	b.n	8005f78 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d10b      	bne.n	8005f58 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2204      	movs	r2, #4
 8005f44:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	69db      	ldr	r3, [r3, #28]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d114      	bne.n	8005f78 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2201      	movs	r2, #1
 8005f52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f56:	e00f      	b.n	8005f78 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d10a      	bne.n	8005f78 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2208      	movs	r2, #8
 8005f66:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	69db      	ldr	r3, [r3, #28]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d103      	bne.n	8005f78 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f78:	68f8      	ldr	r0, [r7, #12]
 8005f7a:	f000 fcbb 	bl	80068f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2200      	movs	r2, #0
 8005f82:	771a      	strb	r2, [r3, #28]
}
 8005f84:	bf00      	nop
 8005f86:	3710      	adds	r7, #16
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b084      	sub	sp, #16
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f98:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d103      	bne.n	8005fac <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	771a      	strb	r2, [r3, #28]
 8005faa:	e019      	b.n	8005fe0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fb0:	687a      	ldr	r2, [r7, #4]
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	d103      	bne.n	8005fbe <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2202      	movs	r2, #2
 8005fba:	771a      	strb	r2, [r3, #28]
 8005fbc:	e010      	b.n	8005fe0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d103      	bne.n	8005fd0 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2204      	movs	r2, #4
 8005fcc:	771a      	strb	r2, [r3, #28]
 8005fce:	e007      	b.n	8005fe0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d102      	bne.n	8005fe0 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2208      	movs	r2, #8
 8005fde:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8005fe0:	68f8      	ldr	r0, [r7, #12]
 8005fe2:	f7ff ff22 	bl	8005e2a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	771a      	strb	r2, [r3, #28]
}
 8005fec:	bf00      	nop
 8005fee:	3710      	adds	r7, #16
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}

08005ff4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b085      	sub	sp, #20
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	4a2a      	ldr	r2, [pc, #168]	; (80060b0 <TIM_Base_SetConfig+0xbc>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d003      	beq.n	8006014 <TIM_Base_SetConfig+0x20>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006012:	d108      	bne.n	8006026 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800601a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	68fa      	ldr	r2, [r7, #12]
 8006022:	4313      	orrs	r3, r2
 8006024:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4a21      	ldr	r2, [pc, #132]	; (80060b0 <TIM_Base_SetConfig+0xbc>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d00b      	beq.n	8006046 <TIM_Base_SetConfig+0x52>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006034:	d007      	beq.n	8006046 <TIM_Base_SetConfig+0x52>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	4a1e      	ldr	r2, [pc, #120]	; (80060b4 <TIM_Base_SetConfig+0xc0>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d003      	beq.n	8006046 <TIM_Base_SetConfig+0x52>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a1d      	ldr	r2, [pc, #116]	; (80060b8 <TIM_Base_SetConfig+0xc4>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d108      	bne.n	8006058 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800604c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	68db      	ldr	r3, [r3, #12]
 8006052:	68fa      	ldr	r2, [r7, #12]
 8006054:	4313      	orrs	r3, r2
 8006056:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	695b      	ldr	r3, [r3, #20]
 8006062:	4313      	orrs	r3, r2
 8006064:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	68fa      	ldr	r2, [r7, #12]
 800606a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	689a      	ldr	r2, [r3, #8]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	4a0c      	ldr	r2, [pc, #48]	; (80060b0 <TIM_Base_SetConfig+0xbc>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d007      	beq.n	8006094 <TIM_Base_SetConfig+0xa0>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	4a0b      	ldr	r2, [pc, #44]	; (80060b4 <TIM_Base_SetConfig+0xc0>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d003      	beq.n	8006094 <TIM_Base_SetConfig+0xa0>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	4a0a      	ldr	r2, [pc, #40]	; (80060b8 <TIM_Base_SetConfig+0xc4>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d103      	bne.n	800609c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	691a      	ldr	r2, [r3, #16]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2201      	movs	r2, #1
 80060a0:	615a      	str	r2, [r3, #20]
}
 80060a2:	bf00      	nop
 80060a4:	3714      	adds	r7, #20
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr
 80060ae:	bf00      	nop
 80060b0:	40012c00 	.word	0x40012c00
 80060b4:	40014000 	.word	0x40014000
 80060b8:	40014400 	.word	0x40014400

080060bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060bc:	b480      	push	{r7}
 80060be:	b087      	sub	sp, #28
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6a1b      	ldr	r3, [r3, #32]
 80060ca:	f023 0201 	bic.w	r2, r3, #1
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6a1b      	ldr	r3, [r3, #32]
 80060d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	699b      	ldr	r3, [r3, #24]
 80060e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f023 0303 	bic.w	r3, r3, #3
 80060f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	68fa      	ldr	r2, [r7, #12]
 80060fe:	4313      	orrs	r3, r2
 8006100:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	f023 0302 	bic.w	r3, r3, #2
 8006108:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	697a      	ldr	r2, [r7, #20]
 8006110:	4313      	orrs	r3, r2
 8006112:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	4a24      	ldr	r2, [pc, #144]	; (80061a8 <TIM_OC1_SetConfig+0xec>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d007      	beq.n	800612c <TIM_OC1_SetConfig+0x70>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	4a23      	ldr	r2, [pc, #140]	; (80061ac <TIM_OC1_SetConfig+0xf0>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d003      	beq.n	800612c <TIM_OC1_SetConfig+0x70>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	4a22      	ldr	r2, [pc, #136]	; (80061b0 <TIM_OC1_SetConfig+0xf4>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d10c      	bne.n	8006146 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	f023 0308 	bic.w	r3, r3, #8
 8006132:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	697a      	ldr	r2, [r7, #20]
 800613a:	4313      	orrs	r3, r2
 800613c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	f023 0304 	bic.w	r3, r3, #4
 8006144:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	4a17      	ldr	r2, [pc, #92]	; (80061a8 <TIM_OC1_SetConfig+0xec>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d007      	beq.n	800615e <TIM_OC1_SetConfig+0xa2>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	4a16      	ldr	r2, [pc, #88]	; (80061ac <TIM_OC1_SetConfig+0xf0>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d003      	beq.n	800615e <TIM_OC1_SetConfig+0xa2>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	4a15      	ldr	r2, [pc, #84]	; (80061b0 <TIM_OC1_SetConfig+0xf4>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d111      	bne.n	8006182 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006164:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800616c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	695b      	ldr	r3, [r3, #20]
 8006172:	693a      	ldr	r2, [r7, #16]
 8006174:	4313      	orrs	r3, r2
 8006176:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	699b      	ldr	r3, [r3, #24]
 800617c:	693a      	ldr	r2, [r7, #16]
 800617e:	4313      	orrs	r3, r2
 8006180:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	693a      	ldr	r2, [r7, #16]
 8006186:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	68fa      	ldr	r2, [r7, #12]
 800618c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	685a      	ldr	r2, [r3, #4]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	697a      	ldr	r2, [r7, #20]
 800619a:	621a      	str	r2, [r3, #32]
}
 800619c:	bf00      	nop
 800619e:	371c      	adds	r7, #28
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr
 80061a8:	40012c00 	.word	0x40012c00
 80061ac:	40014000 	.word	0x40014000
 80061b0:	40014400 	.word	0x40014400

080061b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b087      	sub	sp, #28
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6a1b      	ldr	r3, [r3, #32]
 80061c2:	f023 0210 	bic.w	r2, r3, #16
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6a1b      	ldr	r3, [r3, #32]
 80061ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	699b      	ldr	r3, [r3, #24]
 80061da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80061e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	021b      	lsls	r3, r3, #8
 80061f6:	68fa      	ldr	r2, [r7, #12]
 80061f8:	4313      	orrs	r3, r2
 80061fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	f023 0320 	bic.w	r3, r3, #32
 8006202:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	011b      	lsls	r3, r3, #4
 800620a:	697a      	ldr	r2, [r7, #20]
 800620c:	4313      	orrs	r3, r2
 800620e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	4a22      	ldr	r2, [pc, #136]	; (800629c <TIM_OC2_SetConfig+0xe8>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d10d      	bne.n	8006234 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800621e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	68db      	ldr	r3, [r3, #12]
 8006224:	011b      	lsls	r3, r3, #4
 8006226:	697a      	ldr	r2, [r7, #20]
 8006228:	4313      	orrs	r3, r2
 800622a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006232:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	4a19      	ldr	r2, [pc, #100]	; (800629c <TIM_OC2_SetConfig+0xe8>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d007      	beq.n	800624c <TIM_OC2_SetConfig+0x98>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	4a18      	ldr	r2, [pc, #96]	; (80062a0 <TIM_OC2_SetConfig+0xec>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d003      	beq.n	800624c <TIM_OC2_SetConfig+0x98>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	4a17      	ldr	r2, [pc, #92]	; (80062a4 <TIM_OC2_SetConfig+0xf0>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d113      	bne.n	8006274 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006252:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800625a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	695b      	ldr	r3, [r3, #20]
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	693a      	ldr	r2, [r7, #16]
 8006264:	4313      	orrs	r3, r2
 8006266:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	699b      	ldr	r3, [r3, #24]
 800626c:	009b      	lsls	r3, r3, #2
 800626e:	693a      	ldr	r2, [r7, #16]
 8006270:	4313      	orrs	r3, r2
 8006272:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	693a      	ldr	r2, [r7, #16]
 8006278:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	68fa      	ldr	r2, [r7, #12]
 800627e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	685a      	ldr	r2, [r3, #4]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	697a      	ldr	r2, [r7, #20]
 800628c:	621a      	str	r2, [r3, #32]
}
 800628e:	bf00      	nop
 8006290:	371c      	adds	r7, #28
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr
 800629a:	bf00      	nop
 800629c:	40012c00 	.word	0x40012c00
 80062a0:	40014000 	.word	0x40014000
 80062a4:	40014400 	.word	0x40014400

080062a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b087      	sub	sp, #28
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6a1b      	ldr	r3, [r3, #32]
 80062b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6a1b      	ldr	r3, [r3, #32]
 80062c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	69db      	ldr	r3, [r3, #28]
 80062ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f023 0303 	bic.w	r3, r3, #3
 80062e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	68fa      	ldr	r2, [r7, #12]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80062f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	021b      	lsls	r3, r3, #8
 80062fc:	697a      	ldr	r2, [r7, #20]
 80062fe:	4313      	orrs	r3, r2
 8006300:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	4a21      	ldr	r2, [pc, #132]	; (800638c <TIM_OC3_SetConfig+0xe4>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d10d      	bne.n	8006326 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006310:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	68db      	ldr	r3, [r3, #12]
 8006316:	021b      	lsls	r3, r3, #8
 8006318:	697a      	ldr	r2, [r7, #20]
 800631a:	4313      	orrs	r3, r2
 800631c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006324:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	4a18      	ldr	r2, [pc, #96]	; (800638c <TIM_OC3_SetConfig+0xe4>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d007      	beq.n	800633e <TIM_OC3_SetConfig+0x96>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	4a17      	ldr	r2, [pc, #92]	; (8006390 <TIM_OC3_SetConfig+0xe8>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d003      	beq.n	800633e <TIM_OC3_SetConfig+0x96>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	4a16      	ldr	r2, [pc, #88]	; (8006394 <TIM_OC3_SetConfig+0xec>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d113      	bne.n	8006366 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006344:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800634c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	695b      	ldr	r3, [r3, #20]
 8006352:	011b      	lsls	r3, r3, #4
 8006354:	693a      	ldr	r2, [r7, #16]
 8006356:	4313      	orrs	r3, r2
 8006358:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	699b      	ldr	r3, [r3, #24]
 800635e:	011b      	lsls	r3, r3, #4
 8006360:	693a      	ldr	r2, [r7, #16]
 8006362:	4313      	orrs	r3, r2
 8006364:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	693a      	ldr	r2, [r7, #16]
 800636a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	68fa      	ldr	r2, [r7, #12]
 8006370:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	685a      	ldr	r2, [r3, #4]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	697a      	ldr	r2, [r7, #20]
 800637e:	621a      	str	r2, [r3, #32]
}
 8006380:	bf00      	nop
 8006382:	371c      	adds	r7, #28
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr
 800638c:	40012c00 	.word	0x40012c00
 8006390:	40014000 	.word	0x40014000
 8006394:	40014400 	.word	0x40014400

08006398 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006398:	b480      	push	{r7}
 800639a:	b087      	sub	sp, #28
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6a1b      	ldr	r3, [r3, #32]
 80063a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6a1b      	ldr	r3, [r3, #32]
 80063b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	69db      	ldr	r3, [r3, #28]
 80063be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80063c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	021b      	lsls	r3, r3, #8
 80063da:	68fa      	ldr	r2, [r7, #12]
 80063dc:	4313      	orrs	r3, r2
 80063de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80063e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	031b      	lsls	r3, r3, #12
 80063ee:	693a      	ldr	r2, [r7, #16]
 80063f0:	4313      	orrs	r3, r2
 80063f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	4a14      	ldr	r2, [pc, #80]	; (8006448 <TIM_OC4_SetConfig+0xb0>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d007      	beq.n	800640c <TIM_OC4_SetConfig+0x74>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	4a13      	ldr	r2, [pc, #76]	; (800644c <TIM_OC4_SetConfig+0xb4>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d003      	beq.n	800640c <TIM_OC4_SetConfig+0x74>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	4a12      	ldr	r2, [pc, #72]	; (8006450 <TIM_OC4_SetConfig+0xb8>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d109      	bne.n	8006420 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006412:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	695b      	ldr	r3, [r3, #20]
 8006418:	019b      	lsls	r3, r3, #6
 800641a:	697a      	ldr	r2, [r7, #20]
 800641c:	4313      	orrs	r3, r2
 800641e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	697a      	ldr	r2, [r7, #20]
 8006424:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	68fa      	ldr	r2, [r7, #12]
 800642a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	685a      	ldr	r2, [r3, #4]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	693a      	ldr	r2, [r7, #16]
 8006438:	621a      	str	r2, [r3, #32]
}
 800643a:	bf00      	nop
 800643c:	371c      	adds	r7, #28
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr
 8006446:	bf00      	nop
 8006448:	40012c00 	.word	0x40012c00
 800644c:	40014000 	.word	0x40014000
 8006450:	40014400 	.word	0x40014400

08006454 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006454:	b480      	push	{r7}
 8006456:	b087      	sub	sp, #28
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6a1b      	ldr	r3, [r3, #32]
 8006462:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6a1b      	ldr	r3, [r3, #32]
 800646e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800647a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006486:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	68fa      	ldr	r2, [r7, #12]
 800648e:	4313      	orrs	r3, r2
 8006490:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006498:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	041b      	lsls	r3, r3, #16
 80064a0:	693a      	ldr	r2, [r7, #16]
 80064a2:	4313      	orrs	r3, r2
 80064a4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	4a13      	ldr	r2, [pc, #76]	; (80064f8 <TIM_OC5_SetConfig+0xa4>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d007      	beq.n	80064be <TIM_OC5_SetConfig+0x6a>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	4a12      	ldr	r2, [pc, #72]	; (80064fc <TIM_OC5_SetConfig+0xa8>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d003      	beq.n	80064be <TIM_OC5_SetConfig+0x6a>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	4a11      	ldr	r2, [pc, #68]	; (8006500 <TIM_OC5_SetConfig+0xac>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d109      	bne.n	80064d2 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064c4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	695b      	ldr	r3, [r3, #20]
 80064ca:	021b      	lsls	r3, r3, #8
 80064cc:	697a      	ldr	r2, [r7, #20]
 80064ce:	4313      	orrs	r3, r2
 80064d0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	697a      	ldr	r2, [r7, #20]
 80064d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	68fa      	ldr	r2, [r7, #12]
 80064dc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	685a      	ldr	r2, [r3, #4]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	693a      	ldr	r2, [r7, #16]
 80064ea:	621a      	str	r2, [r3, #32]
}
 80064ec:	bf00      	nop
 80064ee:	371c      	adds	r7, #28
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr
 80064f8:	40012c00 	.word	0x40012c00
 80064fc:	40014000 	.word	0x40014000
 8006500:	40014400 	.word	0x40014400

08006504 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006504:	b480      	push	{r7}
 8006506:	b087      	sub	sp, #28
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6a1b      	ldr	r3, [r3, #32]
 8006512:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6a1b      	ldr	r3, [r3, #32]
 800651e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800652a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006532:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006536:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	021b      	lsls	r3, r3, #8
 800653e:	68fa      	ldr	r2, [r7, #12]
 8006540:	4313      	orrs	r3, r2
 8006542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800654a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	051b      	lsls	r3, r3, #20
 8006552:	693a      	ldr	r2, [r7, #16]
 8006554:	4313      	orrs	r3, r2
 8006556:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	4a14      	ldr	r2, [pc, #80]	; (80065ac <TIM_OC6_SetConfig+0xa8>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d007      	beq.n	8006570 <TIM_OC6_SetConfig+0x6c>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	4a13      	ldr	r2, [pc, #76]	; (80065b0 <TIM_OC6_SetConfig+0xac>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d003      	beq.n	8006570 <TIM_OC6_SetConfig+0x6c>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	4a12      	ldr	r2, [pc, #72]	; (80065b4 <TIM_OC6_SetConfig+0xb0>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d109      	bne.n	8006584 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006576:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	695b      	ldr	r3, [r3, #20]
 800657c:	029b      	lsls	r3, r3, #10
 800657e:	697a      	ldr	r2, [r7, #20]
 8006580:	4313      	orrs	r3, r2
 8006582:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	697a      	ldr	r2, [r7, #20]
 8006588:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	68fa      	ldr	r2, [r7, #12]
 800658e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	685a      	ldr	r2, [r3, #4]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	693a      	ldr	r2, [r7, #16]
 800659c:	621a      	str	r2, [r3, #32]
}
 800659e:	bf00      	nop
 80065a0:	371c      	adds	r7, #28
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr
 80065aa:	bf00      	nop
 80065ac:	40012c00 	.word	0x40012c00
 80065b0:	40014000 	.word	0x40014000
 80065b4:	40014400 	.word	0x40014400

080065b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b087      	sub	sp, #28
 80065bc:	af00      	add	r7, sp, #0
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	60b9      	str	r1, [r7, #8]
 80065c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	6a1b      	ldr	r3, [r3, #32]
 80065c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	6a1b      	ldr	r3, [r3, #32]
 80065ce:	f023 0201 	bic.w	r2, r3, #1
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	699b      	ldr	r3, [r3, #24]
 80065da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	011b      	lsls	r3, r3, #4
 80065e8:	693a      	ldr	r2, [r7, #16]
 80065ea:	4313      	orrs	r3, r2
 80065ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	f023 030a 	bic.w	r3, r3, #10
 80065f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80065f6:	697a      	ldr	r2, [r7, #20]
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	693a      	ldr	r2, [r7, #16]
 8006602:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	697a      	ldr	r2, [r7, #20]
 8006608:	621a      	str	r2, [r3, #32]
}
 800660a:	bf00      	nop
 800660c:	371c      	adds	r7, #28
 800660e:	46bd      	mov	sp, r7
 8006610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006614:	4770      	bx	lr

08006616 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006616:	b480      	push	{r7}
 8006618:	b087      	sub	sp, #28
 800661a:	af00      	add	r7, sp, #0
 800661c:	60f8      	str	r0, [r7, #12]
 800661e:	60b9      	str	r1, [r7, #8]
 8006620:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	6a1b      	ldr	r3, [r3, #32]
 8006626:	f023 0210 	bic.w	r2, r3, #16
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	699b      	ldr	r3, [r3, #24]
 8006632:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	6a1b      	ldr	r3, [r3, #32]
 8006638:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006640:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	031b      	lsls	r3, r3, #12
 8006646:	697a      	ldr	r2, [r7, #20]
 8006648:	4313      	orrs	r3, r2
 800664a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006652:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	011b      	lsls	r3, r3, #4
 8006658:	693a      	ldr	r2, [r7, #16]
 800665a:	4313      	orrs	r3, r2
 800665c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	697a      	ldr	r2, [r7, #20]
 8006662:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	693a      	ldr	r2, [r7, #16]
 8006668:	621a      	str	r2, [r3, #32]
}
 800666a:	bf00      	nop
 800666c:	371c      	adds	r7, #28
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr

08006676 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006676:	b480      	push	{r7}
 8006678:	b085      	sub	sp, #20
 800667a:	af00      	add	r7, sp, #0
 800667c:	6078      	str	r0, [r7, #4]
 800667e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800668c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800668e:	683a      	ldr	r2, [r7, #0]
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	4313      	orrs	r3, r2
 8006694:	f043 0307 	orr.w	r3, r3, #7
 8006698:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	68fa      	ldr	r2, [r7, #12]
 800669e:	609a      	str	r2, [r3, #8]
}
 80066a0:	bf00      	nop
 80066a2:	3714      	adds	r7, #20
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr

080066ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b087      	sub	sp, #28
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	60f8      	str	r0, [r7, #12]
 80066b4:	60b9      	str	r1, [r7, #8]
 80066b6:	607a      	str	r2, [r7, #4]
 80066b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	021a      	lsls	r2, r3, #8
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	431a      	orrs	r2, r3
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	4313      	orrs	r3, r2
 80066d4:	697a      	ldr	r2, [r7, #20]
 80066d6:	4313      	orrs	r3, r2
 80066d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	697a      	ldr	r2, [r7, #20]
 80066de:	609a      	str	r2, [r3, #8]
}
 80066e0:	bf00      	nop
 80066e2:	371c      	adds	r7, #28
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b087      	sub	sp, #28
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	60f8      	str	r0, [r7, #12]
 80066f4:	60b9      	str	r1, [r7, #8]
 80066f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	f003 031f 	and.w	r3, r3, #31
 80066fe:	2201      	movs	r2, #1
 8006700:	fa02 f303 	lsl.w	r3, r2, r3
 8006704:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	6a1a      	ldr	r2, [r3, #32]
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	43db      	mvns	r3, r3
 800670e:	401a      	ands	r2, r3
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	6a1a      	ldr	r2, [r3, #32]
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	f003 031f 	and.w	r3, r3, #31
 800671e:	6879      	ldr	r1, [r7, #4]
 8006720:	fa01 f303 	lsl.w	r3, r1, r3
 8006724:	431a      	orrs	r2, r3
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	621a      	str	r2, [r3, #32]
}
 800672a:	bf00      	nop
 800672c:	371c      	adds	r7, #28
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr
	...

08006738 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006738:	b480      	push	{r7}
 800673a:	b085      	sub	sp, #20
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006748:	2b01      	cmp	r3, #1
 800674a:	d101      	bne.n	8006750 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800674c:	2302      	movs	r3, #2
 800674e:	e04f      	b.n	80067f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2202      	movs	r2, #2
 800675c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a21      	ldr	r2, [pc, #132]	; (80067fc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d108      	bne.n	800678c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006780:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	68fa      	ldr	r2, [r7, #12]
 8006788:	4313      	orrs	r3, r2
 800678a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006792:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	68fa      	ldr	r2, [r7, #12]
 800679a:	4313      	orrs	r3, r2
 800679c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	68fa      	ldr	r2, [r7, #12]
 80067a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a14      	ldr	r2, [pc, #80]	; (80067fc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d009      	beq.n	80067c4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067b8:	d004      	beq.n	80067c4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a10      	ldr	r2, [pc, #64]	; (8006800 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d10c      	bne.n	80067de <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	689b      	ldr	r3, [r3, #8]
 80067d0:	68ba      	ldr	r2, [r7, #8]
 80067d2:	4313      	orrs	r3, r2
 80067d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	68ba      	ldr	r2, [r7, #8]
 80067dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2201      	movs	r2, #1
 80067e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2200      	movs	r2, #0
 80067ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067ee:	2300      	movs	r3, #0
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3714      	adds	r7, #20
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr
 80067fc:	40012c00 	.word	0x40012c00
 8006800:	40014000 	.word	0x40014000

08006804 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006804:	b480      	push	{r7}
 8006806:	b085      	sub	sp, #20
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800680e:	2300      	movs	r3, #0
 8006810:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006818:	2b01      	cmp	r3, #1
 800681a:	d101      	bne.n	8006820 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800681c:	2302      	movs	r3, #2
 800681e:	e060      	b.n	80068e2 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2201      	movs	r2, #1
 8006824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	68db      	ldr	r3, [r3, #12]
 8006832:	4313      	orrs	r3, r2
 8006834:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	4313      	orrs	r3, r2
 8006842:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	4313      	orrs	r3, r2
 8006850:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4313      	orrs	r3, r2
 800685e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	691b      	ldr	r3, [r3, #16]
 800686a:	4313      	orrs	r3, r2
 800686c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	695b      	ldr	r3, [r3, #20]
 8006878:	4313      	orrs	r3, r2
 800687a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006886:	4313      	orrs	r3, r2
 8006888:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	699b      	ldr	r3, [r3, #24]
 8006894:	041b      	lsls	r3, r3, #16
 8006896:	4313      	orrs	r3, r2
 8006898:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a14      	ldr	r2, [pc, #80]	; (80068f0 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d115      	bne.n	80068d0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ae:	051b      	lsls	r3, r3, #20
 80068b0:	4313      	orrs	r3, r2
 80068b2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	69db      	ldr	r3, [r3, #28]
 80068be:	4313      	orrs	r3, r2
 80068c0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	6a1b      	ldr	r3, [r3, #32]
 80068cc:	4313      	orrs	r3, r2
 80068ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	68fa      	ldr	r2, [r7, #12]
 80068d6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2200      	movs	r2, #0
 80068dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068e0:	2300      	movs	r3, #0
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3714      	adds	r7, #20
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr
 80068ee:	bf00      	nop
 80068f0:	40012c00 	.word	0x40012c00

080068f4 <HAL_TIM_PWM_PulseFinishedCallback>:
static void MX_TIM2_Init(void);
static void MX_TIM1_Init(void);


void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b082      	sub	sp, #8
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 80068fc:	2100      	movs	r1, #0
 80068fe:	4808      	ldr	r0, [pc, #32]	; (8006920 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>)
 8006900:	f7fe ffce 	bl	80058a0 <HAL_TIM_PWM_Stop_DMA>
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8006904:	2100      	movs	r1, #0
 8006906:	4806      	ldr	r0, [pc, #24]	; (8006920 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>)
 8006908:	f7fe ffca 	bl	80058a0 <HAL_TIM_PWM_Stop_DMA>

	datasentflag=1;
 800690c:	4b05      	ldr	r3, [pc, #20]	; (8006924 <HAL_TIM_PWM_PulseFinishedCallback+0x30>)
 800690e:	2201      	movs	r2, #1
 8006910:	601a      	str	r2, [r3, #0]
	g_dma_done_flag = true;
 8006912:	4b05      	ldr	r3, [pc, #20]	; (8006928 <HAL_TIM_PWM_PulseFinishedCallback+0x34>)
 8006914:	2201      	movs	r2, #1
 8006916:	701a      	strb	r2, [r3, #0]
    //HAL_GPIO_WritePin(GPIOB, LEVEL_SHIFTER_EN_Pin, GPIO_PIN_RESET);

}
 8006918:	bf00      	nop
 800691a:	3708      	adds	r7, #8
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}
 8006920:	20001a50 	.word	0x20001a50
 8006924:	20001968 	.word	0x20001968
 8006928:	20001964 	.word	0x20001964

0800692c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b084      	sub	sp, #16
 8006930:	af02      	add	r7, sp, #8
	color_hex_code_e color = COLOR_HEX_RED;
 8006932:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8006936:	607b      	str	r3, [r7, #4]
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8006938:	f7fc fcc8 	bl	80032cc <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 800693c:	f000 f84c 	bl	80069d8 <SystemClock_Config>
	ws2812b_init();
 8006940:	f7f9 fe94 	bl	800066c <ws2812b_init>
	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8006944:	f000 f9f0 	bl	8006d28 <MX_GPIO_Init>
	MX_DMA_Init();
 8006948:	f000 f9d0 	bl	8006cec <MX_DMA_Init>
	MX_RTC_Init();
 800694c:	f000 f8ae 	bl	8006aac <MX_RTC_Init>
	MX_TIM2_Init();
 8006950:	f000 f980 	bl	8006c54 <MX_TIM2_Init>
	MX_TIM1_Init();
 8006954:	f000 f8d2 	bl	8006afc <MX_TIM1_Init>
	HAL_GPIO_WritePin(GPIOB, LEVEL_SHIFTER_EN_Pin, GPIO_PIN_SET);
 8006958:	2201      	movs	r2, #1
 800695a:	2101      	movs	r1, #1
 800695c:	481b      	ldr	r0, [pc, #108]	; (80069cc <main+0xa0>)
 800695e:	f7fd f9d9 	bl	8003d14 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8006962:	2100      	movs	r1, #0
 8006964:	481a      	ldr	r0, [pc, #104]	; (80069d0 <main+0xa4>)
 8006966:	f7fe ff9b 	bl	80058a0 <HAL_TIM_PWM_Stop_DMA>

	osKernelInitialize();
 800696a:	f7f9 ff5b 	bl	8000824 <osKernelInitialize>
	task_create();
 800696e:	f000 fa71 	bl	8006e54 <task_create>
	osKernelStart();
 8006972:	f7f9 ff7b 	bl	800086c <osKernelStart>

	for(int i = 0; i < STRIP_1_LENGTH; i++)
 8006976:	2300      	movs	r3, #0
 8006978:	603b      	str	r3, [r7, #0]
 800697a:	e00b      	b.n	8006994 <main+0x68>
	{
		ws2812b_set_led(1, i, 0, 0, 0);
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	b299      	uxth	r1, r3
 8006980:	2300      	movs	r3, #0
 8006982:	9300      	str	r3, [sp, #0]
 8006984:	2300      	movs	r3, #0
 8006986:	2200      	movs	r2, #0
 8006988:	2001      	movs	r0, #1
 800698a:	f7f9 fd67 	bl	800045c <ws2812b_set_led>
	for(int i = 0; i < STRIP_1_LENGTH; i++)
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	3301      	adds	r3, #1
 8006992:	603b      	str	r3, [r7, #0]
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	2b06      	cmp	r3, #6
 8006998:	ddf0      	ble.n	800697c <main+0x50>
	}
	ws2812b_show(1);
 800699a:	2001      	movs	r0, #1
 800699c:	f7f9 fedc 	bl	8000758 <ws2812b_show>
	while (1)
	{
        animate_led_only_spell_word(STRIP_BIT_1, color, 0);
 80069a0:	2200      	movs	r2, #0
 80069a2:	6879      	ldr	r1, [r7, #4]
 80069a4:	2001      	movs	r0, #1
 80069a6:	f7f9 fc2b 	bl	8000200 <animate_led_only_spell_word>
        ws2812b_show(1);
 80069aa:	2001      	movs	r0, #1
 80069ac:	f7f9 fed4 	bl	8000758 <ws2812b_show>
        //HAL_Delay(1000);
        color = COLOR_HEX_RED;
 80069b0:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 80069b4:	607b      	str	r3, [r7, #4]
        animate_led_only_spell_word(STRIP_BIT_1, color, 0);
 80069b6:	2200      	movs	r2, #0
 80069b8:	6879      	ldr	r1, [r7, #4]
 80069ba:	2001      	movs	r0, #1
 80069bc:	f7f9 fc20 	bl	8000200 <animate_led_only_spell_word>
		ws2812b_show(1);
 80069c0:	2001      	movs	r0, #1
 80069c2:	f7f9 fec9 	bl	8000758 <ws2812b_show>
		//HAL_Delay(1000);
        color = COLOR_HEX_YELLOW;
 80069c6:	4b03      	ldr	r3, [pc, #12]	; (80069d4 <main+0xa8>)
 80069c8:	607b      	str	r3, [r7, #4]
        animate_led_only_spell_word(STRIP_BIT_1, color, 0);
 80069ca:	e7e9      	b.n	80069a0 <main+0x74>
 80069cc:	48000400 	.word	0x48000400
 80069d0:	20001a50 	.word	0x20001a50
 80069d4:	00ffff00 	.word	0x00ffff00

080069d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b0ae      	sub	sp, #184	; 0xb8
 80069dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80069de:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80069e2:	2244      	movs	r2, #68	; 0x44
 80069e4:	2100      	movs	r1, #0
 80069e6:	4618      	mov	r0, r3
 80069e8:	f000 fc3a 	bl	8007260 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80069ec:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80069f0:	2200      	movs	r2, #0
 80069f2:	601a      	str	r2, [r3, #0]
 80069f4:	605a      	str	r2, [r3, #4]
 80069f6:	609a      	str	r2, [r3, #8]
 80069f8:	60da      	str	r2, [r3, #12]
 80069fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80069fc:	1d3b      	adds	r3, r7, #4
 80069fe:	225c      	movs	r2, #92	; 0x5c
 8006a00:	2100      	movs	r1, #0
 8006a02:	4618      	mov	r0, r3
 8006a04:	f000 fc2c 	bl	8007260 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8006a08:	f7fd f99c 	bl	8003d44 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8006a0c:	4b26      	ldr	r3, [pc, #152]	; (8006aa8 <SystemClock_Config+0xd0>)
 8006a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a12:	4a25      	ldr	r2, [pc, #148]	; (8006aa8 <SystemClock_Config+0xd0>)
 8006a14:	f023 0318 	bic.w	r3, r3, #24
 8006a18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8006a1c:	2305      	movs	r3, #5
 8006a1e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006a20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006a24:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8006a26:	2301      	movs	r3, #1
 8006a28:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006a30:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006a34:	4618      	mov	r0, r3
 8006a36:	f7fd fa69 	bl	8003f0c <HAL_RCC_OscConfig>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d001      	beq.n	8006a44 <SystemClock_Config+0x6c>
  {
      Error_Handler();
 8006a40:	f000 fa02 	bl	8006e48 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006a44:	230f      	movs	r3, #15
 8006a46:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8006a48:	2302      	movs	r3, #2
 8006a4a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006a50:	2300      	movs	r3, #0
 8006a52:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006a54:	2300      	movs	r3, #0
 8006a56:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006a58:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8006a5c:	2102      	movs	r1, #2
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f7fd fe66 	bl	8004730 <HAL_RCC_ClockConfig>
 8006a64:	4603      	mov	r3, r0
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d001      	beq.n	8006a6e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8006a6a:	f000 f9ed 	bl	8006e48 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8006a6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006a72:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8006a74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006a78:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006a7a:	1d3b      	adds	r3, r7, #4
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f7fe f843 	bl	8004b08 <HAL_RCCEx_PeriphCLKConfig>
 8006a82:	4603      	mov	r3, r0
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d001      	beq.n	8006a8c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8006a88:	f000 f9de 	bl	8006e48 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8006a8c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006a90:	f7fd f9e6 	bl	8003e60 <HAL_PWREx_ControlVoltageScaling>
 8006a94:	4603      	mov	r3, r0
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d001      	beq.n	8006a9e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8006a9a:	f000 f9d5 	bl	8006e48 <Error_Handler>
  }
}
 8006a9e:	bf00      	nop
 8006aa0:	37b8      	adds	r7, #184	; 0xb8
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}
 8006aa6:	bf00      	nop
 8006aa8:	40021000 	.word	0x40021000

08006aac <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8006ab0:	4b10      	ldr	r3, [pc, #64]	; (8006af4 <MX_RTC_Init+0x48>)
 8006ab2:	4a11      	ldr	r2, [pc, #68]	; (8006af8 <MX_RTC_Init+0x4c>)
 8006ab4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8006ab6:	4b0f      	ldr	r3, [pc, #60]	; (8006af4 <MX_RTC_Init+0x48>)
 8006ab8:	2200      	movs	r2, #0
 8006aba:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8006abc:	4b0d      	ldr	r3, [pc, #52]	; (8006af4 <MX_RTC_Init+0x48>)
 8006abe:	227f      	movs	r2, #127	; 0x7f
 8006ac0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8006ac2:	4b0c      	ldr	r3, [pc, #48]	; (8006af4 <MX_RTC_Init+0x48>)
 8006ac4:	22ff      	movs	r2, #255	; 0xff
 8006ac6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8006ac8:	4b0a      	ldr	r3, [pc, #40]	; (8006af4 <MX_RTC_Init+0x48>)
 8006aca:	2200      	movs	r2, #0
 8006acc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8006ace:	4b09      	ldr	r3, [pc, #36]	; (8006af4 <MX_RTC_Init+0x48>)
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8006ad4:	4b07      	ldr	r3, [pc, #28]	; (8006af4 <MX_RTC_Init+0x48>)
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8006ada:	4b06      	ldr	r3, [pc, #24]	; (8006af4 <MX_RTC_Init+0x48>)
 8006adc:	2200      	movs	r2, #0
 8006ade:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8006ae0:	4804      	ldr	r0, [pc, #16]	; (8006af4 <MX_RTC_Init+0x48>)
 8006ae2:	f7fe fb1b 	bl	800511c <HAL_RTC_Init>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d001      	beq.n	8006af0 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8006aec:	f000 f9ac 	bl	8006e48 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8006af0:	bf00      	nop
 8006af2:	bd80      	pop	{r7, pc}
 8006af4:	20001a2c 	.word	0x20001a2c
 8006af8:	40002800 	.word	0x40002800

08006afc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b09a      	sub	sp, #104	; 0x68
 8006b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006b02:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006b06:	2200      	movs	r2, #0
 8006b08:	601a      	str	r2, [r3, #0]
 8006b0a:	605a      	str	r2, [r3, #4]
 8006b0c:	609a      	str	r2, [r3, #8]
 8006b0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006b10:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006b14:	2200      	movs	r2, #0
 8006b16:	601a      	str	r2, [r3, #0]
 8006b18:	605a      	str	r2, [r3, #4]
 8006b1a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006b1c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006b20:	2200      	movs	r2, #0
 8006b22:	601a      	str	r2, [r3, #0]
 8006b24:	605a      	str	r2, [r3, #4]
 8006b26:	609a      	str	r2, [r3, #8]
 8006b28:	60da      	str	r2, [r3, #12]
 8006b2a:	611a      	str	r2, [r3, #16]
 8006b2c:	615a      	str	r2, [r3, #20]
 8006b2e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8006b30:	1d3b      	adds	r3, r7, #4
 8006b32:	222c      	movs	r2, #44	; 0x2c
 8006b34:	2100      	movs	r1, #0
 8006b36:	4618      	mov	r0, r3
 8006b38:	f000 fb92 	bl	8007260 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8006b3c:	4b43      	ldr	r3, [pc, #268]	; (8006c4c <MX_TIM1_Init+0x150>)
 8006b3e:	4a44      	ldr	r2, [pc, #272]	; (8006c50 <MX_TIM1_Init+0x154>)
 8006b40:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8006b42:	4b42      	ldr	r3, [pc, #264]	; (8006c4c <MX_TIM1_Init+0x150>)
 8006b44:	2200      	movs	r2, #0
 8006b46:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006b48:	4b40      	ldr	r3, [pc, #256]	; (8006c4c <MX_TIM1_Init+0x150>)
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60-1;
 8006b4e:	4b3f      	ldr	r3, [pc, #252]	; (8006c4c <MX_TIM1_Init+0x150>)
 8006b50:	223b      	movs	r2, #59	; 0x3b
 8006b52:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006b54:	4b3d      	ldr	r3, [pc, #244]	; (8006c4c <MX_TIM1_Init+0x150>)
 8006b56:	2200      	movs	r2, #0
 8006b58:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8006b5a:	4b3c      	ldr	r3, [pc, #240]	; (8006c4c <MX_TIM1_Init+0x150>)
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006b60:	4b3a      	ldr	r3, [pc, #232]	; (8006c4c <MX_TIM1_Init+0x150>)
 8006b62:	2200      	movs	r2, #0
 8006b64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8006b66:	4839      	ldr	r0, [pc, #228]	; (8006c4c <MX_TIM1_Init+0x150>)
 8006b68:	f7fe fbea 	bl	8005340 <HAL_TIM_Base_Init>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d001      	beq.n	8006b76 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8006b72:	f000 f969 	bl	8006e48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006b76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b7a:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8006b7c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006b80:	4619      	mov	r1, r3
 8006b82:	4832      	ldr	r0, [pc, #200]	; (8006c4c <MX_TIM1_Init+0x150>)
 8006b84:	f7ff f888 	bl	8005c98 <HAL_TIM_ConfigClockSource>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d001      	beq.n	8006b92 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8006b8e:	f000 f95b 	bl	8006e48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8006b92:	482e      	ldr	r0, [pc, #184]	; (8006c4c <MX_TIM1_Init+0x150>)
 8006b94:	f7fe fc2b 	bl	80053ee <HAL_TIM_PWM_Init>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d001      	beq.n	8006ba2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8006b9e:	f000 f953 	bl	8006e48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006baa:	2300      	movs	r3, #0
 8006bac:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8006bae:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	4825      	ldr	r0, [pc, #148]	; (8006c4c <MX_TIM1_Init+0x150>)
 8006bb6:	f7ff fdbf 	bl	8006738 <HAL_TIMEx_MasterConfigSynchronization>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d001      	beq.n	8006bc4 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8006bc0:	f000 f942 	bl	8006e48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006bc4:	2360      	movs	r3, #96	; 0x60
 8006bc6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006be0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006be4:	2200      	movs	r2, #0
 8006be6:	4619      	mov	r1, r3
 8006be8:	4818      	ldr	r0, [pc, #96]	; (8006c4c <MX_TIM1_Init+0x150>)
 8006bea:	f7fe ff41 	bl	8005a70 <HAL_TIM_PWM_ConfigChannel>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d001      	beq.n	8006bf8 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8006bf4:	f000 f928 	bl	8006e48 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8006c00:	2300      	movs	r3, #0
 8006c02:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8006c04:	2300      	movs	r3, #0
 8006c06:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8006c0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006c10:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8006c12:	2300      	movs	r3, #0
 8006c14:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8006c16:	2300      	movs	r3, #0
 8006c18:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8006c1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006c1e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8006c20:	2300      	movs	r3, #0
 8006c22:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006c24:	2300      	movs	r3, #0
 8006c26:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8006c28:	1d3b      	adds	r3, r7, #4
 8006c2a:	4619      	mov	r1, r3
 8006c2c:	4807      	ldr	r0, [pc, #28]	; (8006c4c <MX_TIM1_Init+0x150>)
 8006c2e:	f7ff fde9 	bl	8006804 <HAL_TIMEx_ConfigBreakDeadTime>
 8006c32:	4603      	mov	r3, r0
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d001      	beq.n	8006c3c <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8006c38:	f000 f906 	bl	8006e48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8006c3c:	4803      	ldr	r0, [pc, #12]	; (8006c4c <MX_TIM1_Init+0x150>)
 8006c3e:	f000 fa05 	bl	800704c <HAL_TIM_MspPostInit>

}
 8006c42:	bf00      	nop
 8006c44:	3768      	adds	r7, #104	; 0x68
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}
 8006c4a:	bf00      	nop
 8006c4c:	20001a50 	.word	0x20001a50
 8006c50:	40012c00 	.word	0x40012c00

08006c54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b088      	sub	sp, #32
 8006c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006c5a:	f107 0310 	add.w	r3, r7, #16
 8006c5e:	2200      	movs	r2, #0
 8006c60:	601a      	str	r2, [r3, #0]
 8006c62:	605a      	str	r2, [r3, #4]
 8006c64:	609a      	str	r2, [r3, #8]
 8006c66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006c68:	1d3b      	adds	r3, r7, #4
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	601a      	str	r2, [r3, #0]
 8006c6e:	605a      	str	r2, [r3, #4]
 8006c70:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8006c72:	4b1d      	ldr	r3, [pc, #116]	; (8006ce8 <MX_TIM2_Init+0x94>)
 8006c74:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006c78:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8006c7a:	4b1b      	ldr	r3, [pc, #108]	; (8006ce8 <MX_TIM2_Init+0x94>)
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006c80:	4b19      	ldr	r3, [pc, #100]	; (8006ce8 <MX_TIM2_Init+0x94>)
 8006c82:	2200      	movs	r2, #0
 8006c84:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 54+27;
 8006c86:	4b18      	ldr	r3, [pc, #96]	; (8006ce8 <MX_TIM2_Init+0x94>)
 8006c88:	2251      	movs	r2, #81	; 0x51
 8006c8a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006c8c:	4b16      	ldr	r3, [pc, #88]	; (8006ce8 <MX_TIM2_Init+0x94>)
 8006c8e:	2200      	movs	r2, #0
 8006c90:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006c92:	4b15      	ldr	r3, [pc, #84]	; (8006ce8 <MX_TIM2_Init+0x94>)
 8006c94:	2200      	movs	r2, #0
 8006c96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8006c98:	4813      	ldr	r0, [pc, #76]	; (8006ce8 <MX_TIM2_Init+0x94>)
 8006c9a:	f7fe fb51 	bl	8005340 <HAL_TIM_Base_Init>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d001      	beq.n	8006ca8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8006ca4:	f000 f8d0 	bl	8006e48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006ca8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006cac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006cae:	f107 0310 	add.w	r3, r7, #16
 8006cb2:	4619      	mov	r1, r3
 8006cb4:	480c      	ldr	r0, [pc, #48]	; (8006ce8 <MX_TIM2_Init+0x94>)
 8006cb6:	f7fe ffef 	bl	8005c98 <HAL_TIM_ConfigClockSource>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d001      	beq.n	8006cc4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8006cc0:	f000 f8c2 	bl	8006e48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006ccc:	1d3b      	adds	r3, r7, #4
 8006cce:	4619      	mov	r1, r3
 8006cd0:	4805      	ldr	r0, [pc, #20]	; (8006ce8 <MX_TIM2_Init+0x94>)
 8006cd2:	f7ff fd31 	bl	8006738 <HAL_TIMEx_MasterConfigSynchronization>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d001      	beq.n	8006ce0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8006cdc:	f000 f8b4 	bl	8006e48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8006ce0:	bf00      	nop
 8006ce2:	3720      	adds	r7, #32
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}
 8006ce8:	20001a9c 	.word	0x20001a9c

08006cec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b082      	sub	sp, #8
 8006cf0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006cf2:	4b0c      	ldr	r3, [pc, #48]	; (8006d24 <MX_DMA_Init+0x38>)
 8006cf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cf6:	4a0b      	ldr	r2, [pc, #44]	; (8006d24 <MX_DMA_Init+0x38>)
 8006cf8:	f043 0301 	orr.w	r3, r3, #1
 8006cfc:	6493      	str	r3, [r2, #72]	; 0x48
 8006cfe:	4b09      	ldr	r3, [pc, #36]	; (8006d24 <MX_DMA_Init+0x38>)
 8006d00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d02:	f003 0301 	and.w	r3, r3, #1
 8006d06:	607b      	str	r3, [r7, #4]
 8006d08:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	2100      	movs	r1, #0
 8006d0e:	200c      	movs	r0, #12
 8006d10:	f7fc fc17 	bl	8003542 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8006d14:	200c      	movs	r0, #12
 8006d16:	f7fc fc30 	bl	800357a <HAL_NVIC_EnableIRQ>

}
 8006d1a:	bf00      	nop
 8006d1c:	3708      	adds	r7, #8
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}
 8006d22:	bf00      	nop
 8006d24:	40021000 	.word	0x40021000

08006d28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b08a      	sub	sp, #40	; 0x28
 8006d2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d2e:	f107 0314 	add.w	r3, r7, #20
 8006d32:	2200      	movs	r2, #0
 8006d34:	601a      	str	r2, [r3, #0]
 8006d36:	605a      	str	r2, [r3, #4]
 8006d38:	609a      	str	r2, [r3, #8]
 8006d3a:	60da      	str	r2, [r3, #12]
 8006d3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006d3e:	4b3f      	ldr	r3, [pc, #252]	; (8006e3c <MX_GPIO_Init+0x114>)
 8006d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d42:	4a3e      	ldr	r2, [pc, #248]	; (8006e3c <MX_GPIO_Init+0x114>)
 8006d44:	f043 0304 	orr.w	r3, r3, #4
 8006d48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006d4a:	4b3c      	ldr	r3, [pc, #240]	; (8006e3c <MX_GPIO_Init+0x114>)
 8006d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d4e:	f003 0304 	and.w	r3, r3, #4
 8006d52:	613b      	str	r3, [r7, #16]
 8006d54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006d56:	4b39      	ldr	r3, [pc, #228]	; (8006e3c <MX_GPIO_Init+0x114>)
 8006d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d5a:	4a38      	ldr	r2, [pc, #224]	; (8006e3c <MX_GPIO_Init+0x114>)
 8006d5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006d62:	4b36      	ldr	r3, [pc, #216]	; (8006e3c <MX_GPIO_Init+0x114>)
 8006d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d6a:	60fb      	str	r3, [r7, #12]
 8006d6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d6e:	4b33      	ldr	r3, [pc, #204]	; (8006e3c <MX_GPIO_Init+0x114>)
 8006d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d72:	4a32      	ldr	r2, [pc, #200]	; (8006e3c <MX_GPIO_Init+0x114>)
 8006d74:	f043 0301 	orr.w	r3, r3, #1
 8006d78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006d7a:	4b30      	ldr	r3, [pc, #192]	; (8006e3c <MX_GPIO_Init+0x114>)
 8006d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d7e:	f003 0301 	and.w	r3, r3, #1
 8006d82:	60bb      	str	r3, [r7, #8]
 8006d84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006d86:	4b2d      	ldr	r3, [pc, #180]	; (8006e3c <MX_GPIO_Init+0x114>)
 8006d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d8a:	4a2c      	ldr	r2, [pc, #176]	; (8006e3c <MX_GPIO_Init+0x114>)
 8006d8c:	f043 0302 	orr.w	r3, r3, #2
 8006d90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006d92:	4b2a      	ldr	r3, [pc, #168]	; (8006e3c <MX_GPIO_Init+0x114>)
 8006d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d96:	f003 0302 	and.w	r3, r3, #2
 8006d9a:	607b      	str	r3, [r7, #4]
 8006d9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_2_Pin|GPIO_3_Pin|LED_OUT_1_Pin|LED_OUT_2_Pin, GPIO_PIN_RESET);
 8006d9e:	2200      	movs	r2, #0
 8006da0:	210f      	movs	r1, #15
 8006da2:	4827      	ldr	r0, [pc, #156]	; (8006e40 <MX_GPIO_Init+0x118>)
 8006da4:	f7fc ffb6 	bl	8003d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEVEL_SHIFTER_EN_Pin|GPIO_0_Pin, GPIO_PIN_RESET);
 8006da8:	2200      	movs	r2, #0
 8006daa:	f240 1101 	movw	r1, #257	; 0x101
 8006dae:	4825      	ldr	r0, [pc, #148]	; (8006e44 <MX_GPIO_Init+0x11c>)
 8006db0:	f7fc ffb0 	bl	8003d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPIO_2_Pin GPIO_3_Pin LED_OUT_1_Pin LED_OUT_2_Pin */
  GPIO_InitStruct.Pin = GPIO_2_Pin|GPIO_3_Pin|LED_OUT_1_Pin|LED_OUT_2_Pin;
 8006db4:	230f      	movs	r3, #15
 8006db6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006db8:	2301      	movs	r3, #1
 8006dba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006dc4:	f107 0314 	add.w	r3, r7, #20
 8006dc8:	4619      	mov	r1, r3
 8006dca:	481d      	ldr	r0, [pc, #116]	; (8006e40 <MX_GPIO_Init+0x118>)
 8006dcc:	f7fc fe28 	bl	8003a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : TIM15_CH1_Pin */
  GPIO_InitStruct.Pin = TIM15_CH1_Pin;
 8006dd0:	2308      	movs	r3, #8
 8006dd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006dd4:	2302      	movs	r3, #2
 8006dd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8006de0:	230e      	movs	r3, #14
 8006de2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TIM15_CH1_GPIO_Port, &GPIO_InitStruct);
 8006de4:	f107 0314 	add.w	r3, r7, #20
 8006de8:	4619      	mov	r1, r3
 8006dea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006dee:	f7fc fe17 	bl	8003a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : TIM16_CH1_Pin */
  GPIO_InitStruct.Pin = TIM16_CH1_Pin;
 8006df2:	2340      	movs	r3, #64	; 0x40
 8006df4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006df6:	2302      	movs	r3, #2
 8006df8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 8006e02:	230e      	movs	r3, #14
 8006e04:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TIM16_CH1_GPIO_Port, &GPIO_InitStruct);
 8006e06:	f107 0314 	add.w	r3, r7, #20
 8006e0a:	4619      	mov	r1, r3
 8006e0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006e10:	f7fc fe06 	bl	8003a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEVEL_SHIFTER_EN_Pin GPIO_0_Pin */
  GPIO_InitStruct.Pin = LEVEL_SHIFTER_EN_Pin|GPIO_0_Pin;
 8006e14:	f240 1301 	movw	r3, #257	; 0x101
 8006e18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e22:	2300      	movs	r3, #0
 8006e24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e26:	f107 0314 	add.w	r3, r7, #20
 8006e2a:	4619      	mov	r1, r3
 8006e2c:	4805      	ldr	r0, [pc, #20]	; (8006e44 <MX_GPIO_Init+0x11c>)
 8006e2e:	f7fc fdf7 	bl	8003a20 <HAL_GPIO_Init>

}
 8006e32:	bf00      	nop
 8006e34:	3728      	adds	r7, #40	; 0x28
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}
 8006e3a:	bf00      	nop
 8006e3c:	40021000 	.word	0x40021000
 8006e40:	48000800 	.word	0x48000800
 8006e44:	48000400 	.word	0x48000400

08006e48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8006e4c:	b672      	cpsid	i
}
 8006e4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006e50:	e7fe      	b.n	8006e50 <Error_Handler+0x8>
	...

08006e54 <task_create>:
	.priority = (osPriority_t) osPriorityNormal,
};


void task_create(void)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	af00      	add	r7, sp, #0
	g_dma_transfer_handle = osThreadNew(task_dma_transfer, NULL, &g_task_dma_transfer_attributes);
 8006e58:	4a08      	ldr	r2, [pc, #32]	; (8006e7c <task_create+0x28>)
 8006e5a:	2100      	movs	r1, #0
 8006e5c:	4808      	ldr	r0, [pc, #32]	; (8006e80 <task_create+0x2c>)
 8006e5e:	f7f9 fd2b 	bl	80008b8 <osThreadNew>
 8006e62:	4603      	mov	r3, r0
 8006e64:	4a07      	ldr	r2, [pc, #28]	; (8006e84 <task_create+0x30>)
 8006e66:	6013      	str	r3, [r2, #0]
	g_animate_led_handle = osThreadNew(task_animate_led, NULL, &g_task_animate_led_attributes);
 8006e68:	4a07      	ldr	r2, [pc, #28]	; (8006e88 <task_create+0x34>)
 8006e6a:	2100      	movs	r1, #0
 8006e6c:	4807      	ldr	r0, [pc, #28]	; (8006e8c <task_create+0x38>)
 8006e6e:	f7f9 fd23 	bl	80008b8 <osThreadNew>
 8006e72:	4603      	mov	r3, r0
 8006e74:	4a06      	ldr	r2, [pc, #24]	; (8006e90 <task_create+0x3c>)
 8006e76:	6013      	str	r3, [r2, #0]
}
 8006e78:	bf00      	nop
 8006e7a:	bd80      	pop	{r7, pc}
 8006e7c:	080073b8 	.word	0x080073b8
 8006e80:	08006e95 	.word	0x08006e95
 8006e84:	20002ba0 	.word	0x20002ba0
 8006e88:	080073dc 	.word	0x080073dc
 8006e8c:	08000321 	.word	0x08000321
 8006e90:	20002ba4 	.word	0x20002ba4

08006e94 <task_dma_transfer>:
#include "cmsis_os.h"
#include "FreeRTOS.h"
#include "task_dma_transfer.h"

void task_dma_transfer(void *argument)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b082      	sub	sp, #8
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
	while (1)
	{
		osDelay(1000);
 8006e9c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006ea0:	f7f9 fd9c 	bl	80009dc <osDelay>
 8006ea4:	e7fa      	b.n	8006e9c <task_dma_transfer+0x8>
	...

08006ea8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 8006eae:	f107 0308 	add.w	r3, r7, #8
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	601a      	str	r2, [r3, #0]
 8006eb6:	605a      	str	r2, [r3, #4]

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006eb8:	4b13      	ldr	r3, [pc, #76]	; (8006f08 <HAL_MspInit+0x60>)
 8006eba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ebc:	4a12      	ldr	r2, [pc, #72]	; (8006f08 <HAL_MspInit+0x60>)
 8006ebe:	f043 0301 	orr.w	r3, r3, #1
 8006ec2:	6613      	str	r3, [r2, #96]	; 0x60
 8006ec4:	4b10      	ldr	r3, [pc, #64]	; (8006f08 <HAL_MspInit+0x60>)
 8006ec6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ec8:	f003 0301 	and.w	r3, r3, #1
 8006ecc:	607b      	str	r3, [r7, #4]
 8006ece:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006ed0:	4b0d      	ldr	r3, [pc, #52]	; (8006f08 <HAL_MspInit+0x60>)
 8006ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ed4:	4a0c      	ldr	r2, [pc, #48]	; (8006f08 <HAL_MspInit+0x60>)
 8006ed6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006eda:	6593      	str	r3, [r2, #88]	; 0x58
 8006edc:	4b0a      	ldr	r3, [pc, #40]	; (8006f08 <HAL_MspInit+0x60>)
 8006ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ee0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ee4:	603b      	str	r3, [r7, #0]
 8006ee6:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	60bb      	str	r3, [r7, #8]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 8006eec:	2300      	movs	r3, #0
 8006eee:	60fb      	str	r3, [r7, #12]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8006ef0:	f107 0308 	add.w	r3, r7, #8
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f7fc ff35 	bl	8003d64 <HAL_PWR_ConfigPVD>
  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 8006efa:	f7fc ff93 	bl	8003e24 <HAL_PWR_EnablePVD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006efe:	bf00      	nop
 8006f00:	3710      	adds	r7, #16
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
 8006f06:	bf00      	nop
 8006f08:	40021000 	.word	0x40021000

08006f0c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b083      	sub	sp, #12
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a08      	ldr	r2, [pc, #32]	; (8006f3c <HAL_RTC_MspInit+0x30>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d107      	bne.n	8006f2e <HAL_RTC_MspInit+0x22>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8006f1e:	4b08      	ldr	r3, [pc, #32]	; (8006f40 <HAL_RTC_MspInit+0x34>)
 8006f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f24:	4a06      	ldr	r2, [pc, #24]	; (8006f40 <HAL_RTC_MspInit+0x34>)
 8006f26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8006f2e:	bf00      	nop
 8006f30:	370c      	adds	r7, #12
 8006f32:	46bd      	mov	sp, r7
 8006f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f38:	4770      	bx	lr
 8006f3a:	bf00      	nop
 8006f3c:	40002800 	.word	0x40002800
 8006f40:	40021000 	.word	0x40021000

08006f44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b08a      	sub	sp, #40	; 0x28
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f4c:	f107 0314 	add.w	r3, r7, #20
 8006f50:	2200      	movs	r2, #0
 8006f52:	601a      	str	r2, [r3, #0]
 8006f54:	605a      	str	r2, [r3, #4]
 8006f56:	609a      	str	r2, [r3, #8]
 8006f58:	60da      	str	r2, [r3, #12]
 8006f5a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a36      	ldr	r2, [pc, #216]	; (800703c <HAL_TIM_Base_MspInit+0xf8>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d138      	bne.n	8006fd8 <HAL_TIM_Base_MspInit+0x94>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006f66:	4b36      	ldr	r3, [pc, #216]	; (8007040 <HAL_TIM_Base_MspInit+0xfc>)
 8006f68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f6a:	4a35      	ldr	r2, [pc, #212]	; (8007040 <HAL_TIM_Base_MspInit+0xfc>)
 8006f6c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006f70:	6613      	str	r3, [r2, #96]	; 0x60
 8006f72:	4b33      	ldr	r3, [pc, #204]	; (8007040 <HAL_TIM_Base_MspInit+0xfc>)
 8006f74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f7a:	613b      	str	r3, [r7, #16]
 8006f7c:	693b      	ldr	r3, [r7, #16]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8006f7e:	4b31      	ldr	r3, [pc, #196]	; (8007044 <HAL_TIM_Base_MspInit+0x100>)
 8006f80:	4a31      	ldr	r2, [pc, #196]	; (8007048 <HAL_TIM_Base_MspInit+0x104>)
 8006f82:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_7;
 8006f84:	4b2f      	ldr	r3, [pc, #188]	; (8007044 <HAL_TIM_Base_MspInit+0x100>)
 8006f86:	2207      	movs	r2, #7
 8006f88:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006f8a:	4b2e      	ldr	r3, [pc, #184]	; (8007044 <HAL_TIM_Base_MspInit+0x100>)
 8006f8c:	2210      	movs	r2, #16
 8006f8e:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006f90:	4b2c      	ldr	r3, [pc, #176]	; (8007044 <HAL_TIM_Base_MspInit+0x100>)
 8006f92:	2200      	movs	r2, #0
 8006f94:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8006f96:	4b2b      	ldr	r3, [pc, #172]	; (8007044 <HAL_TIM_Base_MspInit+0x100>)
 8006f98:	2280      	movs	r2, #128	; 0x80
 8006f9a:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006f9c:	4b29      	ldr	r3, [pc, #164]	; (8007044 <HAL_TIM_Base_MspInit+0x100>)
 8006f9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006fa2:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006fa4:	4b27      	ldr	r3, [pc, #156]	; (8007044 <HAL_TIM_Base_MspInit+0x100>)
 8006fa6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006faa:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8006fac:	4b25      	ldr	r3, [pc, #148]	; (8007044 <HAL_TIM_Base_MspInit+0x100>)
 8006fae:	2200      	movs	r2, #0
 8006fb0:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006fb2:	4b24      	ldr	r3, [pc, #144]	; (8007044 <HAL_TIM_Base_MspInit+0x100>)
 8006fb4:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8006fb8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8006fba:	4822      	ldr	r0, [pc, #136]	; (8007044 <HAL_TIM_Base_MspInit+0x100>)
 8006fbc:	f7fc faf8 	bl	80035b0 <HAL_DMA_Init>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d001      	beq.n	8006fca <HAL_TIM_Base_MspInit+0x86>
    {
      Error_Handler();
 8006fc6:	f7ff ff3f 	bl	8006e48 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	4a1d      	ldr	r2, [pc, #116]	; (8007044 <HAL_TIM_Base_MspInit+0x100>)
 8006fce:	625a      	str	r2, [r3, #36]	; 0x24
 8006fd0:	4a1c      	ldr	r2, [pc, #112]	; (8007044 <HAL_TIM_Base_MspInit+0x100>)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8006fd6:	e02d      	b.n	8007034 <HAL_TIM_Base_MspInit+0xf0>
  else if(htim_base->Instance==TIM2)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fe0:	d128      	bne.n	8007034 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006fe2:	4b17      	ldr	r3, [pc, #92]	; (8007040 <HAL_TIM_Base_MspInit+0xfc>)
 8006fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fe6:	4a16      	ldr	r2, [pc, #88]	; (8007040 <HAL_TIM_Base_MspInit+0xfc>)
 8006fe8:	f043 0301 	orr.w	r3, r3, #1
 8006fec:	6593      	str	r3, [r2, #88]	; 0x58
 8006fee:	4b14      	ldr	r3, [pc, #80]	; (8007040 <HAL_TIM_Base_MspInit+0xfc>)
 8006ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ff2:	f003 0301 	and.w	r3, r3, #1
 8006ff6:	60fb      	str	r3, [r7, #12]
 8006ff8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ffa:	4b11      	ldr	r3, [pc, #68]	; (8007040 <HAL_TIM_Base_MspInit+0xfc>)
 8006ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ffe:	4a10      	ldr	r2, [pc, #64]	; (8007040 <HAL_TIM_Base_MspInit+0xfc>)
 8007000:	f043 0301 	orr.w	r3, r3, #1
 8007004:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007006:	4b0e      	ldr	r3, [pc, #56]	; (8007040 <HAL_TIM_Base_MspInit+0xfc>)
 8007008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800700a:	f003 0301 	and.w	r3, r3, #1
 800700e:	60bb      	str	r3, [r7, #8]
 8007010:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM2_CH2_Pin;
 8007012:	2302      	movs	r3, #2
 8007014:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007016:	2302      	movs	r3, #2
 8007018:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800701a:	2300      	movs	r3, #0
 800701c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800701e:	2300      	movs	r3, #0
 8007020:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8007022:	2301      	movs	r3, #1
 8007024:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM2_CH2_GPIO_Port, &GPIO_InitStruct);
 8007026:	f107 0314 	add.w	r3, r7, #20
 800702a:	4619      	mov	r1, r3
 800702c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007030:	f7fc fcf6 	bl	8003a20 <HAL_GPIO_Init>
}
 8007034:	bf00      	nop
 8007036:	3728      	adds	r7, #40	; 0x28
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}
 800703c:	40012c00 	.word	0x40012c00
 8007040:	40021000 	.word	0x40021000
 8007044:	200019e4 	.word	0x200019e4
 8007048:	4002001c 	.word	0x4002001c

0800704c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b088      	sub	sp, #32
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007054:	f107 030c 	add.w	r3, r7, #12
 8007058:	2200      	movs	r2, #0
 800705a:	601a      	str	r2, [r3, #0]
 800705c:	605a      	str	r2, [r3, #4]
 800705e:	609a      	str	r2, [r3, #8]
 8007060:	60da      	str	r2, [r3, #12]
 8007062:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a12      	ldr	r2, [pc, #72]	; (80070b4 <HAL_TIM_MspPostInit+0x68>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d11d      	bne.n	80070aa <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800706e:	4b12      	ldr	r3, [pc, #72]	; (80070b8 <HAL_TIM_MspPostInit+0x6c>)
 8007070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007072:	4a11      	ldr	r2, [pc, #68]	; (80070b8 <HAL_TIM_MspPostInit+0x6c>)
 8007074:	f043 0301 	orr.w	r3, r3, #1
 8007078:	64d3      	str	r3, [r2, #76]	; 0x4c
 800707a:	4b0f      	ldr	r3, [pc, #60]	; (80070b8 <HAL_TIM_MspPostInit+0x6c>)
 800707c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800707e:	f003 0301 	and.w	r3, r3, #1
 8007082:	60bb      	str	r3, [r7, #8]
 8007084:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = TIM1_CH1_Pin;
 8007086:	f44f 7380 	mov.w	r3, #256	; 0x100
 800708a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800708c:	2302      	movs	r3, #2
 800708e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007090:	2300      	movs	r3, #0
 8007092:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007094:	2300      	movs	r3, #0
 8007096:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8007098:	2301      	movs	r3, #1
 800709a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TIM1_CH1_GPIO_Port, &GPIO_InitStruct);
 800709c:	f107 030c 	add.w	r3, r7, #12
 80070a0:	4619      	mov	r1, r3
 80070a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80070a6:	f7fc fcbb 	bl	8003a20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80070aa:	bf00      	nop
 80070ac:	3720      	adds	r7, #32
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}
 80070b2:	bf00      	nop
 80070b4:	40012c00 	.word	0x40012c00
 80070b8:	40021000 	.word	0x40021000

080070bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80070bc:	b480      	push	{r7}
 80070be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80070c0:	e7fe      	b.n	80070c0 <NMI_Handler+0x4>

080070c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80070c2:	b480      	push	{r7}
 80070c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80070c6:	e7fe      	b.n	80070c6 <HardFault_Handler+0x4>

080070c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80070c8:	b480      	push	{r7}
 80070ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80070cc:	e7fe      	b.n	80070cc <MemManage_Handler+0x4>

080070ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80070ce:	b480      	push	{r7}
 80070d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80070d2:	e7fe      	b.n	80070d2 <BusFault_Handler+0x4>

080070d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80070d4:	b480      	push	{r7}
 80070d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80070d8:	e7fe      	b.n	80070d8 <UsageFault_Handler+0x4>

080070da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80070da:	b480      	push	{r7}
 80070dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80070de:	bf00      	nop
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr

080070e8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80070ec:	4802      	ldr	r0, [pc, #8]	; (80070f8 <DMA1_Channel2_IRQHandler+0x10>)
 80070ee:	f7fc fbb8 	bl	8003862 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80070f2:	bf00      	nop
 80070f4:	bd80      	pop	{r7, pc}
 80070f6:	bf00      	nop
 80070f8:	200019e4 	.word	0x200019e4

080070fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b086      	sub	sp, #24
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007104:	4a14      	ldr	r2, [pc, #80]	; (8007158 <_sbrk+0x5c>)
 8007106:	4b15      	ldr	r3, [pc, #84]	; (800715c <_sbrk+0x60>)
 8007108:	1ad3      	subs	r3, r2, r3
 800710a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007110:	4b13      	ldr	r3, [pc, #76]	; (8007160 <_sbrk+0x64>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d102      	bne.n	800711e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007118:	4b11      	ldr	r3, [pc, #68]	; (8007160 <_sbrk+0x64>)
 800711a:	4a12      	ldr	r2, [pc, #72]	; (8007164 <_sbrk+0x68>)
 800711c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800711e:	4b10      	ldr	r3, [pc, #64]	; (8007160 <_sbrk+0x64>)
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	4413      	add	r3, r2
 8007126:	693a      	ldr	r2, [r7, #16]
 8007128:	429a      	cmp	r2, r3
 800712a:	d207      	bcs.n	800713c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800712c:	f000 f858 	bl	80071e0 <__errno>
 8007130:	4603      	mov	r3, r0
 8007132:	220c      	movs	r2, #12
 8007134:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007136:	f04f 33ff 	mov.w	r3, #4294967295
 800713a:	e009      	b.n	8007150 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800713c:	4b08      	ldr	r3, [pc, #32]	; (8007160 <_sbrk+0x64>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007142:	4b07      	ldr	r3, [pc, #28]	; (8007160 <_sbrk+0x64>)
 8007144:	681a      	ldr	r2, [r3, #0]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	4413      	add	r3, r2
 800714a:	4a05      	ldr	r2, [pc, #20]	; (8007160 <_sbrk+0x64>)
 800714c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800714e:	68fb      	ldr	r3, [r7, #12]
}
 8007150:	4618      	mov	r0, r3
 8007152:	3718      	adds	r7, #24
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}
 8007158:	20010000 	.word	0x20010000
 800715c:	00000400 	.word	0x00000400
 8007160:	2000196c 	.word	0x2000196c
 8007164:	20002bb8 	.word	0x20002bb8

08007168 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8007168:	b480      	push	{r7}
 800716a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800716c:	4b06      	ldr	r3, [pc, #24]	; (8007188 <SystemInit+0x20>)
 800716e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007172:	4a05      	ldr	r2, [pc, #20]	; (8007188 <SystemInit+0x20>)
 8007174:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007178:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800717c:	bf00      	nop
 800717e:	46bd      	mov	sp, r7
 8007180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007184:	4770      	bx	lr
 8007186:	bf00      	nop
 8007188:	e000ed00 	.word	0xe000ed00

0800718c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800718c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80071c4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8007190:	f7ff ffea 	bl	8007168 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007194:	480c      	ldr	r0, [pc, #48]	; (80071c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8007196:	490d      	ldr	r1, [pc, #52]	; (80071cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8007198:	4a0d      	ldr	r2, [pc, #52]	; (80071d0 <LoopForever+0xe>)
  movs r3, #0
 800719a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800719c:	e002      	b.n	80071a4 <LoopCopyDataInit>

0800719e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800719e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80071a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80071a2:	3304      	adds	r3, #4

080071a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80071a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80071a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80071a8:	d3f9      	bcc.n	800719e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80071aa:	4a0a      	ldr	r2, [pc, #40]	; (80071d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80071ac:	4c0a      	ldr	r4, [pc, #40]	; (80071d8 <LoopForever+0x16>)
  movs r3, #0
 80071ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80071b0:	e001      	b.n	80071b6 <LoopFillZerobss>

080071b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80071b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80071b4:	3204      	adds	r2, #4

080071b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80071b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80071b8:	d3fb      	bcc.n	80071b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80071ba:	f000 f817 	bl	80071ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80071be:	f7ff fbb5 	bl	800692c <main>

080071c2 <LoopForever>:

LoopForever:
    b LoopForever
 80071c2:	e7fe      	b.n	80071c2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80071c4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80071c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80071cc:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80071d0:	080074a8 	.word	0x080074a8
  ldr r2, =_sbss
 80071d4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80071d8:	20002bb8 	.word	0x20002bb8

080071dc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80071dc:	e7fe      	b.n	80071dc <ADC1_IRQHandler>
	...

080071e0 <__errno>:
 80071e0:	4b01      	ldr	r3, [pc, #4]	; (80071e8 <__errno+0x8>)
 80071e2:	6818      	ldr	r0, [r3, #0]
 80071e4:	4770      	bx	lr
 80071e6:	bf00      	nop
 80071e8:	20000014 	.word	0x20000014

080071ec <__libc_init_array>:
 80071ec:	b570      	push	{r4, r5, r6, lr}
 80071ee:	4d0d      	ldr	r5, [pc, #52]	; (8007224 <__libc_init_array+0x38>)
 80071f0:	4c0d      	ldr	r4, [pc, #52]	; (8007228 <__libc_init_array+0x3c>)
 80071f2:	1b64      	subs	r4, r4, r5
 80071f4:	10a4      	asrs	r4, r4, #2
 80071f6:	2600      	movs	r6, #0
 80071f8:	42a6      	cmp	r6, r4
 80071fa:	d109      	bne.n	8007210 <__libc_init_array+0x24>
 80071fc:	4d0b      	ldr	r5, [pc, #44]	; (800722c <__libc_init_array+0x40>)
 80071fe:	4c0c      	ldr	r4, [pc, #48]	; (8007230 <__libc_init_array+0x44>)
 8007200:	f000 f8ae 	bl	8007360 <_init>
 8007204:	1b64      	subs	r4, r4, r5
 8007206:	10a4      	asrs	r4, r4, #2
 8007208:	2600      	movs	r6, #0
 800720a:	42a6      	cmp	r6, r4
 800720c:	d105      	bne.n	800721a <__libc_init_array+0x2e>
 800720e:	bd70      	pop	{r4, r5, r6, pc}
 8007210:	f855 3b04 	ldr.w	r3, [r5], #4
 8007214:	4798      	blx	r3
 8007216:	3601      	adds	r6, #1
 8007218:	e7ee      	b.n	80071f8 <__libc_init_array+0xc>
 800721a:	f855 3b04 	ldr.w	r3, [r5], #4
 800721e:	4798      	blx	r3
 8007220:	3601      	adds	r6, #1
 8007222:	e7f2      	b.n	800720a <__libc_init_array+0x1e>
 8007224:	080074a0 	.word	0x080074a0
 8007228:	080074a0 	.word	0x080074a0
 800722c:	080074a0 	.word	0x080074a0
 8007230:	080074a4 	.word	0x080074a4

08007234 <malloc>:
 8007234:	4b02      	ldr	r3, [pc, #8]	; (8007240 <malloc+0xc>)
 8007236:	4601      	mov	r1, r0
 8007238:	6818      	ldr	r0, [r3, #0]
 800723a:	f000 b819 	b.w	8007270 <_malloc_r>
 800723e:	bf00      	nop
 8007240:	20000014 	.word	0x20000014

08007244 <memcpy>:
 8007244:	440a      	add	r2, r1
 8007246:	4291      	cmp	r1, r2
 8007248:	f100 33ff 	add.w	r3, r0, #4294967295
 800724c:	d100      	bne.n	8007250 <memcpy+0xc>
 800724e:	4770      	bx	lr
 8007250:	b510      	push	{r4, lr}
 8007252:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007256:	f803 4f01 	strb.w	r4, [r3, #1]!
 800725a:	4291      	cmp	r1, r2
 800725c:	d1f9      	bne.n	8007252 <memcpy+0xe>
 800725e:	bd10      	pop	{r4, pc}

08007260 <memset>:
 8007260:	4402      	add	r2, r0
 8007262:	4603      	mov	r3, r0
 8007264:	4293      	cmp	r3, r2
 8007266:	d100      	bne.n	800726a <memset+0xa>
 8007268:	4770      	bx	lr
 800726a:	f803 1b01 	strb.w	r1, [r3], #1
 800726e:	e7f9      	b.n	8007264 <memset+0x4>

08007270 <_malloc_r>:
 8007270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007272:	1ccd      	adds	r5, r1, #3
 8007274:	f025 0503 	bic.w	r5, r5, #3
 8007278:	3508      	adds	r5, #8
 800727a:	2d0c      	cmp	r5, #12
 800727c:	bf38      	it	cc
 800727e:	250c      	movcc	r5, #12
 8007280:	2d00      	cmp	r5, #0
 8007282:	4606      	mov	r6, r0
 8007284:	db01      	blt.n	800728a <_malloc_r+0x1a>
 8007286:	42a9      	cmp	r1, r5
 8007288:	d903      	bls.n	8007292 <_malloc_r+0x22>
 800728a:	230c      	movs	r3, #12
 800728c:	6033      	str	r3, [r6, #0]
 800728e:	2000      	movs	r0, #0
 8007290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007292:	f000 f857 	bl	8007344 <__malloc_lock>
 8007296:	4921      	ldr	r1, [pc, #132]	; (800731c <_malloc_r+0xac>)
 8007298:	680a      	ldr	r2, [r1, #0]
 800729a:	4614      	mov	r4, r2
 800729c:	b99c      	cbnz	r4, 80072c6 <_malloc_r+0x56>
 800729e:	4f20      	ldr	r7, [pc, #128]	; (8007320 <_malloc_r+0xb0>)
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	b923      	cbnz	r3, 80072ae <_malloc_r+0x3e>
 80072a4:	4621      	mov	r1, r4
 80072a6:	4630      	mov	r0, r6
 80072a8:	f000 f83c 	bl	8007324 <_sbrk_r>
 80072ac:	6038      	str	r0, [r7, #0]
 80072ae:	4629      	mov	r1, r5
 80072b0:	4630      	mov	r0, r6
 80072b2:	f000 f837 	bl	8007324 <_sbrk_r>
 80072b6:	1c43      	adds	r3, r0, #1
 80072b8:	d123      	bne.n	8007302 <_malloc_r+0x92>
 80072ba:	230c      	movs	r3, #12
 80072bc:	6033      	str	r3, [r6, #0]
 80072be:	4630      	mov	r0, r6
 80072c0:	f000 f846 	bl	8007350 <__malloc_unlock>
 80072c4:	e7e3      	b.n	800728e <_malloc_r+0x1e>
 80072c6:	6823      	ldr	r3, [r4, #0]
 80072c8:	1b5b      	subs	r3, r3, r5
 80072ca:	d417      	bmi.n	80072fc <_malloc_r+0x8c>
 80072cc:	2b0b      	cmp	r3, #11
 80072ce:	d903      	bls.n	80072d8 <_malloc_r+0x68>
 80072d0:	6023      	str	r3, [r4, #0]
 80072d2:	441c      	add	r4, r3
 80072d4:	6025      	str	r5, [r4, #0]
 80072d6:	e004      	b.n	80072e2 <_malloc_r+0x72>
 80072d8:	6863      	ldr	r3, [r4, #4]
 80072da:	42a2      	cmp	r2, r4
 80072dc:	bf0c      	ite	eq
 80072de:	600b      	streq	r3, [r1, #0]
 80072e0:	6053      	strne	r3, [r2, #4]
 80072e2:	4630      	mov	r0, r6
 80072e4:	f000 f834 	bl	8007350 <__malloc_unlock>
 80072e8:	f104 000b 	add.w	r0, r4, #11
 80072ec:	1d23      	adds	r3, r4, #4
 80072ee:	f020 0007 	bic.w	r0, r0, #7
 80072f2:	1ac2      	subs	r2, r0, r3
 80072f4:	d0cc      	beq.n	8007290 <_malloc_r+0x20>
 80072f6:	1a1b      	subs	r3, r3, r0
 80072f8:	50a3      	str	r3, [r4, r2]
 80072fa:	e7c9      	b.n	8007290 <_malloc_r+0x20>
 80072fc:	4622      	mov	r2, r4
 80072fe:	6864      	ldr	r4, [r4, #4]
 8007300:	e7cc      	b.n	800729c <_malloc_r+0x2c>
 8007302:	1cc4      	adds	r4, r0, #3
 8007304:	f024 0403 	bic.w	r4, r4, #3
 8007308:	42a0      	cmp	r0, r4
 800730a:	d0e3      	beq.n	80072d4 <_malloc_r+0x64>
 800730c:	1a21      	subs	r1, r4, r0
 800730e:	4630      	mov	r0, r6
 8007310:	f000 f808 	bl	8007324 <_sbrk_r>
 8007314:	3001      	adds	r0, #1
 8007316:	d1dd      	bne.n	80072d4 <_malloc_r+0x64>
 8007318:	e7cf      	b.n	80072ba <_malloc_r+0x4a>
 800731a:	bf00      	nop
 800731c:	20001970 	.word	0x20001970
 8007320:	20001974 	.word	0x20001974

08007324 <_sbrk_r>:
 8007324:	b538      	push	{r3, r4, r5, lr}
 8007326:	4d06      	ldr	r5, [pc, #24]	; (8007340 <_sbrk_r+0x1c>)
 8007328:	2300      	movs	r3, #0
 800732a:	4604      	mov	r4, r0
 800732c:	4608      	mov	r0, r1
 800732e:	602b      	str	r3, [r5, #0]
 8007330:	f7ff fee4 	bl	80070fc <_sbrk>
 8007334:	1c43      	adds	r3, r0, #1
 8007336:	d102      	bne.n	800733e <_sbrk_r+0x1a>
 8007338:	682b      	ldr	r3, [r5, #0]
 800733a:	b103      	cbz	r3, 800733e <_sbrk_r+0x1a>
 800733c:	6023      	str	r3, [r4, #0]
 800733e:	bd38      	pop	{r3, r4, r5, pc}
 8007340:	20002ba8 	.word	0x20002ba8

08007344 <__malloc_lock>:
 8007344:	4801      	ldr	r0, [pc, #4]	; (800734c <__malloc_lock+0x8>)
 8007346:	f000 b809 	b.w	800735c <__retarget_lock_acquire_recursive>
 800734a:	bf00      	nop
 800734c:	20002bb0 	.word	0x20002bb0

08007350 <__malloc_unlock>:
 8007350:	4801      	ldr	r0, [pc, #4]	; (8007358 <__malloc_unlock+0x8>)
 8007352:	f000 b804 	b.w	800735e <__retarget_lock_release_recursive>
 8007356:	bf00      	nop
 8007358:	20002bb0 	.word	0x20002bb0

0800735c <__retarget_lock_acquire_recursive>:
 800735c:	4770      	bx	lr

0800735e <__retarget_lock_release_recursive>:
 800735e:	4770      	bx	lr

08007360 <_init>:
 8007360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007362:	bf00      	nop
 8007364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007366:	bc08      	pop	{r3}
 8007368:	469e      	mov	lr, r3
 800736a:	4770      	bx	lr

0800736c <_fini>:
 800736c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800736e:	bf00      	nop
 8007370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007372:	bc08      	pop	{r3}
 8007374:	469e      	mov	lr, r3
 8007376:	4770      	bx	lr
