
small_led_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009dc8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08009f58  08009f58  00019f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a148  0800a148  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  0800a148  0800a148  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a148  0800a148  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a148  0800a148  0001a148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a14c  0800a14c  0001a14c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800a150  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002fac  20000080  0800a1d0  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000302c  0800a1d0  0002302c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024b26  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004845  00000000  00000000  00044bd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a38  00000000  00000000  00049420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001850  00000000  00000000  0004ae58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002650d  00000000  00000000  0004c6a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001feaa  00000000  00000000  00072bb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df897  00000000  00000000  00092a5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001722f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000077b0  00000000  00000000  0017234c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  00179afc  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  00179b20  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009f40 	.word	0x08009f40

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08009f40 	.word	0x08009f40

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2f>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a14:	bf24      	itt	cs
 8000a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a1e:	d90d      	bls.n	8000a3c <__aeabi_d2f+0x30>
 8000a20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a34:	bf08      	it	eq
 8000a36:	f020 0001 	biceq.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a40:	d121      	bne.n	8000a86 <__aeabi_d2f+0x7a>
 8000a42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a46:	bfbc      	itt	lt
 8000a48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	4770      	bxlt	lr
 8000a4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a56:	f1c2 0218 	rsb	r2, r2, #24
 8000a5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a62:	fa20 f002 	lsr.w	r0, r0, r2
 8000a66:	bf18      	it	ne
 8000a68:	f040 0001 	orrne.w	r0, r0, #1
 8000a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a78:	ea40 000c 	orr.w	r0, r0, ip
 8000a7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a84:	e7cc      	b.n	8000a20 <__aeabi_d2f+0x14>
 8000a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a8a:	d107      	bne.n	8000a9c <__aeabi_d2f+0x90>
 8000a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a90:	bf1e      	ittt	ne
 8000a92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a9a:	4770      	bxne	lr
 8000a9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <delay>:
    return 0; // TODO FIX THIS!
}


static void delay(uint32_t time)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
	osDelay(time);
 8000ab4:	6878      	ldr	r0, [r7, #4]
 8000ab6:	f001 fa93 	bl	8001fe0 <osDelay>
}
 8000aba:	bf00      	nop
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
	...

08000ac4 <animate_led_interrupt_flag>:
	g_interrupt_flag[src] = true;
}


bool animate_led_interrupt_flag(isr_e src)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b085      	sub	sp, #20
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4603      	mov	r3, r0
 8000acc:	71fb      	strb	r3, [r7, #7]
	bool return_val = g_interrupt_flag[src];
 8000ace:	79fb      	ldrb	r3, [r7, #7]
 8000ad0:	4a08      	ldr	r2, [pc, #32]	; (8000af4 <animate_led_interrupt_flag+0x30>)
 8000ad2:	5cd3      	ldrb	r3, [r2, r3]
 8000ad4:	73fb      	strb	r3, [r7, #15]
	if (return_val) g_interrupt_flag[src] = false; // auto clear
 8000ad6:	7bfb      	ldrb	r3, [r7, #15]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d003      	beq.n	8000ae4 <animate_led_interrupt_flag+0x20>
 8000adc:	79fb      	ldrb	r3, [r7, #7]
 8000ade:	4a05      	ldr	r2, [pc, #20]	; (8000af4 <animate_led_interrupt_flag+0x30>)
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	54d1      	strb	r1, [r2, r3]
	return return_val;
 8000ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3714      	adds	r7, #20
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	2000009c 	.word	0x2000009c

08000af8 <animate_led_interrupt_flag_speed>:


bool animate_led_interrupt_flag_speed(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
	return (animate_led_interrupt_flag(ISR_SPEED));
 8000afc:	2000      	movs	r0, #0
 8000afe:	f7ff ffe1 	bl	8000ac4 <animate_led_interrupt_flag>
 8000b02:	4603      	mov	r3, r0
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	bd80      	pop	{r7, pc}

08000b08 <animate_led_interrupt_flag_state>:


bool animate_led_interrupt_flag_state(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
	return (animate_led_interrupt_flag(ISR_STATE));
 8000b0c:	2001      	movs	r0, #1
 8000b0e:	f7ff ffd9 	bl	8000ac4 <animate_led_interrupt_flag>
 8000b12:	4603      	mov	r3, r0
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <animate_led_interrupt_flag_color>:


bool animate_led_interrupt_flag_color(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
	return (animate_led_interrupt_flag(ISR_COLOR));
 8000b1c:	2002      	movs	r0, #2
 8000b1e:	f7ff ffd1 	bl	8000ac4 <animate_led_interrupt_flag>
 8000b22:	4603      	mov	r3, r0
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <animate_led_speed_factor>:


float animate_led_speed_factor(void);
float animate_led_speed_factor(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
	float speed_factor = 0.0;
 8000b2e:	f04f 0300 	mov.w	r3, #0
 8000b32:	607b      	str	r3, [r7, #4]
	switch(g_led_speed)
 8000b34:	4b1a      	ldr	r3, [pc, #104]	; (8000ba0 <animate_led_speed_factor+0x78>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	2b05      	cmp	r3, #5
 8000b3a:	d825      	bhi.n	8000b88 <animate_led_speed_factor+0x60>
 8000b3c:	a201      	add	r2, pc, #4	; (adr r2, 8000b44 <animate_led_speed_factor+0x1c>)
 8000b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b42:	bf00      	nop
 8000b44:	08000b5d 	.word	0x08000b5d
 8000b48:	08000b63 	.word	0x08000b63
 8000b4c:	08000b69 	.word	0x08000b69
 8000b50:	08000b71 	.word	0x08000b71
 8000b54:	08000b79 	.word	0x08000b79
 8000b58:	08000b81 	.word	0x08000b81
	{
		
		case LED_SPEED_10X:
			speed_factor = 10;
 8000b5c:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <animate_led_speed_factor+0x7c>)
 8000b5e:	607b      	str	r3, [r7, #4]
		break;
 8000b60:	e013      	b.n	8000b8a <animate_led_speed_factor+0x62>
		case LED_SPEED_5X:
			speed_factor = 5;
 8000b62:	4b11      	ldr	r3, [pc, #68]	; (8000ba8 <animate_led_speed_factor+0x80>)
 8000b64:	607b      	str	r3, [r7, #4]
		break;
 8000b66:	e010      	b.n	8000b8a <animate_led_speed_factor+0x62>
		case LED_SPEED_2X:
			speed_factor = 2;
 8000b68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b6c:	607b      	str	r3, [r7, #4]
		break;
 8000b6e:	e00c      	b.n	8000b8a <animate_led_speed_factor+0x62>
		case LED_SPEED_1X:	
			speed_factor = 1;
 8000b70:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000b74:	607b      	str	r3, [r7, #4]
		break;
 8000b76:	e008      	b.n	8000b8a <animate_led_speed_factor+0x62>
		case LED_SPEED_0P5X:
			speed_factor = 0.5;
 8000b78:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8000b7c:	607b      	str	r3, [r7, #4]
		break;
 8000b7e:	e004      	b.n	8000b8a <animate_led_speed_factor+0x62>
		case LED_SPEED_0P25X:
			speed_factor = 0.25;
 8000b80:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 8000b84:	607b      	str	r3, [r7, #4]
		break;
 8000b86:	e000      	b.n	8000b8a <animate_led_speed_factor+0x62>
		default:
		break;
 8000b88:	bf00      	nop
		case LED_SPEED_0P1X:
			speed_factor = 0.1;
		break;
		*/
	}
	return speed_factor;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	ee07 3a90 	vmov	s15, r3
}
 8000b90:	eeb0 0a67 	vmov.f32	s0, s15
 8000b94:	370c      	adds	r7, #12
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	20000000 	.word	0x20000000
 8000ba4:	41200000 	.word	0x41200000
 8000ba8:	40a00000 	.word	0x40a00000

08000bac <animate_led_delay_in_animations>:
	return ((float)g_delay_between_animations_ms / animate_led_speed_factor());
}


float animate_led_delay_in_animations(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	ed2d 8b02 	vpush	{d8}
 8000bb2:	af00      	add	r7, sp, #0
	return ((float)g_delay_in_animation_ms / animate_led_speed_factor());
 8000bb4:	4b09      	ldr	r3, [pc, #36]	; (8000bdc <animate_led_delay_in_animations+0x30>)
 8000bb6:	881b      	ldrh	r3, [r3, #0]
 8000bb8:	ee07 3a90 	vmov	s15, r3
 8000bbc:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8000bc0:	f7ff ffb2 	bl	8000b28 <animate_led_speed_factor>
 8000bc4:	eef0 7a40 	vmov.f32	s15, s0
 8000bc8:	ee88 7a27 	vdiv.f32	s14, s16, s15
 8000bcc:	eef0 7a47 	vmov.f32	s15, s14
}
 8000bd0:	eeb0 0a67 	vmov.f32	s0, s15
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	ecbd 8b02 	vpop	{d8}
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	20000002 	.word	0x20000002

08000be0 <animate_led_check_interrupts>:
//	buf[led].blue = blue;
//}


static bool animate_led_check_interrupts(uint16_t *speed_delay, uint8_t *red, uint8_t *green, uint8_t *blue)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b086      	sub	sp, #24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	60f8      	str	r0, [r7, #12]
 8000be8:	60b9      	str	r1, [r7, #8]
 8000bea:	607a      	str	r2, [r7, #4]
 8000bec:	603b      	str	r3, [r7, #0]
	bool return_val = false;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	75fb      	strb	r3, [r7, #23]
	if(animate_led_interrupt_flag_speed())
 8000bf2:	f7ff ff81 	bl	8000af8 <animate_led_interrupt_flag_speed>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d00b      	beq.n	8000c14 <animate_led_check_interrupts+0x34>
	{
		*speed_delay = animate_led_delay_in_animations();
 8000bfc:	f7ff ffd6 	bl	8000bac <animate_led_delay_in_animations>
 8000c00:	eef0 7a40 	vmov.f32	s15, s0
 8000c04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c08:	ee17 3a90 	vmov	r3, s15
 8000c0c:	b29a      	uxth	r2, r3
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	801a      	strh	r2, [r3, #0]
 8000c12:	e01e      	b.n	8000c52 <animate_led_check_interrupts+0x72>
	}
	else if(animate_led_interrupt_flag_color())
 8000c14:	f7ff ff80 	bl	8000b18 <animate_led_interrupt_flag_color>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d012      	beq.n	8000c44 <animate_led_check_interrupts+0x64>
	{
		*red = color_led_cur_color_red_hex();
 8000c1e:	f000 fe49 	bl	80018b4 <color_led_cur_color_red_hex>
 8000c22:	4603      	mov	r3, r0
 8000c24:	461a      	mov	r2, r3
 8000c26:	68bb      	ldr	r3, [r7, #8]
 8000c28:	701a      	strb	r2, [r3, #0]
		*green = color_led_cur_color_green_hex();
 8000c2a:	f000 fe59 	bl	80018e0 <color_led_cur_color_green_hex>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	461a      	mov	r2, r3
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	701a      	strb	r2, [r3, #0]
		*blue = color_led_cur_color_blue_hex();
 8000c36:	f000 fe69 	bl	800190c <color_led_cur_color_blue_hex>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	701a      	strb	r2, [r3, #0]
 8000c42:	e006      	b.n	8000c52 <animate_led_check_interrupts+0x72>
	}
	else if (animate_led_interrupt_flag_state())
 8000c44:	f7ff ff60 	bl	8000b08 <animate_led_interrupt_flag_state>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <animate_led_check_interrupts+0x72>
	{
		return_val = true;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	75fb      	strb	r3, [r7, #23]
	}
	return return_val;
 8000c52:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3718      	adds	r7, #24
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <animate_led_show_strip>:
	return g_led_state;
}


void animate_led_show_strip(const strip_mask_t strip_mask)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	80fb      	strh	r3, [r7, #6]
	ws2812b_show(strip_mask);
 8000c66:	88fb      	ldrh	r3, [r7, #6]
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f001 f877 	bl	8001d5c <ws2812b_show>
}
 8000c6e:	bf00      	nop
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <animate_led_solid_custom_color>:
	}
}


void animate_led_solid_custom_color(const strip_mask_t strip_mask, color_hex_code_e color)
{
 8000c76:	b580      	push	{r7, lr}
 8000c78:	b084      	sub	sp, #16
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	6039      	str	r1, [r7, #0]
 8000c80:	80fb      	strh	r3, [r7, #6]
	uint8_t red, green, blue; 
	red = ((color & 0xFF0000) >> 16);
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	0c1b      	lsrs	r3, r3, #16
 8000c86:	73fb      	strb	r3, [r7, #15]
	green = ((color & 0x00FF00) >> 8);
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	0a1b      	lsrs	r3, r3, #8
 8000c8c:	73bb      	strb	r3, [r7, #14]
	blue = (color & 0x0000FF);
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	737b      	strb	r3, [r7, #13]
	animate_led_set_all_pixels(strip_mask, red, green, blue);
 8000c92:	7b7b      	ldrb	r3, [r7, #13]
 8000c94:	7bba      	ldrb	r2, [r7, #14]
 8000c96:	7bf9      	ldrb	r1, [r7, #15]
 8000c98:	88f8      	ldrh	r0, [r7, #6]
 8000c9a:	f000 fc75 	bl	8001588 <animate_led_set_all_pixels>
}
 8000c9e:	bf00      	nop
 8000ca0:	3710      	adds	r7, #16
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <animate_led_turn_all_pixels_off>:


void animate_led_turn_all_pixels_off(void)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	af00      	add	r7, sp, #0
	animate_led_set_all_pixels((strip_mask_t)STRIP_BIT_ALL_SET, 0, 0, 0);
 8000caa:	2300      	movs	r3, #0
 8000cac:	2200      	movs	r2, #0
 8000cae:	2100      	movs	r1, #0
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	f000 fc69 	bl	8001588 <animate_led_set_all_pixels>
}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <animate_led_only_spell_word>:
	}
}


void animate_led_only_spell_word(strip_mask_t strip_mask, color_hex_code_e color, uint16_t speed_delay)
{
 8000cba:	b590      	push	{r4, r7, lr}
 8000cbc:	b089      	sub	sp, #36	; 0x24
 8000cbe:	af02      	add	r7, sp, #8
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	6039      	str	r1, [r7, #0]
 8000cc4:	80fb      	strh	r3, [r7, #6]
 8000cc6:	4613      	mov	r3, r2
 8000cc8:	80bb      	strh	r3, [r7, #4]
	uint16_t strip_size = ws2812_led_get_max_strip_size(strip_mask);
 8000cca:	88fb      	ldrh	r3, [r7, #6]
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f000 feb9 	bl	8001a44 <ws2812_led_get_max_strip_size>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	827b      	strh	r3, [r7, #18]
	uint8_t red, green, blue; 
	red = ((color & 0xFF0000) >> 16);
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	0c1b      	lsrs	r3, r3, #16
 8000cda:	747b      	strb	r3, [r7, #17]
	green = ((color & 0x00FF00) >> 8);
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	0a1b      	lsrs	r3, r3, #8
 8000ce0:	743b      	strb	r3, [r7, #16]
	blue = (color & 0x0000FF);
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < strip_size; i++)
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	617b      	str	r3, [r7, #20]
 8000cea:	e014      	b.n	8000d16 <animate_led_only_spell_word+0x5c>
        {
        	animate_led_set_all_pixels((strip_mask_t)STRIP_BIT_ALL_SET, 0, 0, 0);
			return;
        }
        */
		animate_led_set_pixel(strip_mask, i, red, green, blue);
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	b299      	uxth	r1, r3
 8000cf0:	7c3c      	ldrb	r4, [r7, #16]
 8000cf2:	7c7a      	ldrb	r2, [r7, #17]
 8000cf4:	88f8      	ldrh	r0, [r7, #6]
 8000cf6:	7bfb      	ldrb	r3, [r7, #15]
 8000cf8:	9300      	str	r3, [sp, #0]
 8000cfa:	4623      	mov	r3, r4
 8000cfc:	f000 fbe8 	bl	80014d0 <animate_led_set_pixel>
		animate_led_show_strip(strip_mask);
 8000d00:	88fb      	ldrh	r3, [r7, #6]
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff ffaa 	bl	8000c5c <animate_led_show_strip>
        delay(speed_delay);
 8000d08:	88bb      	ldrh	r3, [r7, #4]
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff fece 	bl	8000aac <delay>
	for (int i = 0; i < strip_size; i++)
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	3301      	adds	r3, #1
 8000d14:	617b      	str	r3, [r7, #20]
 8000d16:	8a7b      	ldrh	r3, [r7, #18]
 8000d18:	697a      	ldr	r2, [r7, #20]
 8000d1a:	429a      	cmp	r2, r3
 8000d1c:	dbe6      	blt.n	8000cec <animate_led_only_spell_word+0x32>
	}
}
 8000d1e:	bf00      	nop
 8000d20:	bf00      	nop
 8000d22:	371c      	adds	r7, #28
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd90      	pop	{r4, r7, pc}

08000d28 <animate_led_fade_in_fade_out>:
    }
}


void animate_led_fade_in_fade_out(strip_mask_t strip_mask, color_hex_code_e color)
{
 8000d28:	b5b0      	push	{r4, r5, r7, lr}
 8000d2a:	b08c      	sub	sp, #48	; 0x30
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	60b9      	str	r1, [r7, #8]
 8000d32:	81fb      	strh	r3, [r7, #14]
	uint16_t dummy_speed;
    float r, g, b;
    uint8_t red, green, blue; 
	red = ((color & 0xFF0000) >> 16);
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	0c1b      	lsrs	r3, r3, #16
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	767b      	strb	r3, [r7, #25]
	green = ((color & 0x00FF00) >> 8);
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	0a1b      	lsrs	r3, r3, #8
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	763b      	strb	r3, [r7, #24]
	blue = (color & 0x0000FF);
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	75fb      	strb	r3, [r7, #23]
    for (int i = 0; i < 256; i++)
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d4e:	e08b      	b.n	8000e68 <animate_led_fade_in_fade_out+0x140>
    {
		if (animate_led_check_interrupts(&dummy_speed, &red, &green, &blue))
 8000d50:	f107 0317 	add.w	r3, r7, #23
 8000d54:	f107 0218 	add.w	r2, r7, #24
 8000d58:	f107 0119 	add.w	r1, r7, #25
 8000d5c:	f107 001a 	add.w	r0, r7, #26
 8000d60:	f7ff ff3e 	bl	8000be0 <animate_led_check_interrupts>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d006      	beq.n	8000d78 <animate_led_fade_in_fade_out+0x50>
        {
        	animate_led_set_all_pixels((strip_mask_t)STRIP_BIT_ALL_SET, 0, 0, 0);
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2100      	movs	r1, #0
 8000d70:	2001      	movs	r0, #1
 8000d72:	f000 fc09 	bl	8001588 <animate_led_set_all_pixels>
			return;
 8000d76:	e10e      	b.n	8000f96 <animate_led_fade_in_fade_out+0x26e>
        }
        r = (i / 256.0) * red;
 8000d78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000d7a:	f7ff fbcb 	bl	8000514 <__aeabi_i2d>
 8000d7e:	f04f 0200 	mov.w	r2, #0
 8000d82:	4b86      	ldr	r3, [pc, #536]	; (8000f9c <animate_led_fade_in_fade_out+0x274>)
 8000d84:	f7ff fd5a 	bl	800083c <__aeabi_ddiv>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	460b      	mov	r3, r1
 8000d8c:	4614      	mov	r4, r2
 8000d8e:	461d      	mov	r5, r3
 8000d90:	7e7b      	ldrb	r3, [r7, #25]
 8000d92:	4618      	mov	r0, r3
 8000d94:	f7ff fbbe 	bl	8000514 <__aeabi_i2d>
 8000d98:	4602      	mov	r2, r0
 8000d9a:	460b      	mov	r3, r1
 8000d9c:	4620      	mov	r0, r4
 8000d9e:	4629      	mov	r1, r5
 8000da0:	f7ff fc22 	bl	80005e8 <__aeabi_dmul>
 8000da4:	4602      	mov	r2, r0
 8000da6:	460b      	mov	r3, r1
 8000da8:	4610      	mov	r0, r2
 8000daa:	4619      	mov	r1, r3
 8000dac:	f7ff fe2e 	bl	8000a0c <__aeabi_d2f>
 8000db0:	4603      	mov	r3, r0
 8000db2:	627b      	str	r3, [r7, #36]	; 0x24
        g = (i / 256.0) * green;
 8000db4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000db6:	f7ff fbad 	bl	8000514 <__aeabi_i2d>
 8000dba:	f04f 0200 	mov.w	r2, #0
 8000dbe:	4b77      	ldr	r3, [pc, #476]	; (8000f9c <animate_led_fade_in_fade_out+0x274>)
 8000dc0:	f7ff fd3c 	bl	800083c <__aeabi_ddiv>
 8000dc4:	4602      	mov	r2, r0
 8000dc6:	460b      	mov	r3, r1
 8000dc8:	4614      	mov	r4, r2
 8000dca:	461d      	mov	r5, r3
 8000dcc:	7e3b      	ldrb	r3, [r7, #24]
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff fba0 	bl	8000514 <__aeabi_i2d>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	460b      	mov	r3, r1
 8000dd8:	4620      	mov	r0, r4
 8000dda:	4629      	mov	r1, r5
 8000ddc:	f7ff fc04 	bl	80005e8 <__aeabi_dmul>
 8000de0:	4602      	mov	r2, r0
 8000de2:	460b      	mov	r3, r1
 8000de4:	4610      	mov	r0, r2
 8000de6:	4619      	mov	r1, r3
 8000de8:	f7ff fe10 	bl	8000a0c <__aeabi_d2f>
 8000dec:	4603      	mov	r3, r0
 8000dee:	623b      	str	r3, [r7, #32]
        b = (i / 256.0) * blue;
 8000df0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000df2:	f7ff fb8f 	bl	8000514 <__aeabi_i2d>
 8000df6:	f04f 0200 	mov.w	r2, #0
 8000dfa:	4b68      	ldr	r3, [pc, #416]	; (8000f9c <animate_led_fade_in_fade_out+0x274>)
 8000dfc:	f7ff fd1e 	bl	800083c <__aeabi_ddiv>
 8000e00:	4602      	mov	r2, r0
 8000e02:	460b      	mov	r3, r1
 8000e04:	4614      	mov	r4, r2
 8000e06:	461d      	mov	r5, r3
 8000e08:	7dfb      	ldrb	r3, [r7, #23]
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f7ff fb82 	bl	8000514 <__aeabi_i2d>
 8000e10:	4602      	mov	r2, r0
 8000e12:	460b      	mov	r3, r1
 8000e14:	4620      	mov	r0, r4
 8000e16:	4629      	mov	r1, r5
 8000e18:	f7ff fbe6 	bl	80005e8 <__aeabi_dmul>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	460b      	mov	r3, r1
 8000e20:	4610      	mov	r0, r2
 8000e22:	4619      	mov	r1, r3
 8000e24:	f7ff fdf2 	bl	8000a0c <__aeabi_d2f>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	61fb      	str	r3, [r7, #28]
        animate_led_set_all_pixels(strip_mask, r, g, b);
 8000e2c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000e30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e34:	edc7 7a01 	vstr	s15, [r7, #4]
 8000e38:	793b      	ldrb	r3, [r7, #4]
 8000e3a:	b2d9      	uxtb	r1, r3
 8000e3c:	edd7 7a08 	vldr	s15, [r7, #32]
 8000e40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e44:	edc7 7a01 	vstr	s15, [r7, #4]
 8000e48:	793b      	ldrb	r3, [r7, #4]
 8000e4a:	b2da      	uxtb	r2, r3
 8000e4c:	edd7 7a07 	vldr	s15, [r7, #28]
 8000e50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e54:	edc7 7a01 	vstr	s15, [r7, #4]
 8000e58:	793b      	ldrb	r3, [r7, #4]
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	89f8      	ldrh	r0, [r7, #14]
 8000e5e:	f000 fb93 	bl	8001588 <animate_led_set_all_pixels>
    for (int i = 0; i < 256; i++)
 8000e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e64:	3301      	adds	r3, #1
 8000e66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e6a:	2bff      	cmp	r3, #255	; 0xff
 8000e6c:	f77f af70 	ble.w	8000d50 <animate_led_fade_in_fade_out+0x28>
    }
    for (int i = 255; i >= 0; i = i-2)
 8000e70:	23ff      	movs	r3, #255	; 0xff
 8000e72:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e74:	e08b      	b.n	8000f8e <animate_led_fade_in_fade_out+0x266>
    {
		if (animate_led_check_interrupts(&dummy_speed, &red, &green, &blue))
 8000e76:	f107 0317 	add.w	r3, r7, #23
 8000e7a:	f107 0218 	add.w	r2, r7, #24
 8000e7e:	f107 0119 	add.w	r1, r7, #25
 8000e82:	f107 001a 	add.w	r0, r7, #26
 8000e86:	f7ff feab 	bl	8000be0 <animate_led_check_interrupts>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d006      	beq.n	8000e9e <animate_led_fade_in_fade_out+0x176>
        {
        	animate_led_set_all_pixels((strip_mask_t)STRIP_BIT_ALL_SET, 0, 0, 0);
 8000e90:	2300      	movs	r3, #0
 8000e92:	2200      	movs	r2, #0
 8000e94:	2100      	movs	r1, #0
 8000e96:	2001      	movs	r0, #1
 8000e98:	f000 fb76 	bl	8001588 <animate_led_set_all_pixels>
			return;
 8000e9c:	e07b      	b.n	8000f96 <animate_led_fade_in_fade_out+0x26e>
        }
        r = (i / 256.0) * red;
 8000e9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000ea0:	f7ff fb38 	bl	8000514 <__aeabi_i2d>
 8000ea4:	f04f 0200 	mov.w	r2, #0
 8000ea8:	4b3c      	ldr	r3, [pc, #240]	; (8000f9c <animate_led_fade_in_fade_out+0x274>)
 8000eaa:	f7ff fcc7 	bl	800083c <__aeabi_ddiv>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	4614      	mov	r4, r2
 8000eb4:	461d      	mov	r5, r3
 8000eb6:	7e7b      	ldrb	r3, [r7, #25]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff fb2b 	bl	8000514 <__aeabi_i2d>
 8000ebe:	4602      	mov	r2, r0
 8000ec0:	460b      	mov	r3, r1
 8000ec2:	4620      	mov	r0, r4
 8000ec4:	4629      	mov	r1, r5
 8000ec6:	f7ff fb8f 	bl	80005e8 <__aeabi_dmul>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	460b      	mov	r3, r1
 8000ece:	4610      	mov	r0, r2
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	f7ff fd9b 	bl	8000a0c <__aeabi_d2f>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	627b      	str	r3, [r7, #36]	; 0x24
        g = (i / 256.0) * green;
 8000eda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000edc:	f7ff fb1a 	bl	8000514 <__aeabi_i2d>
 8000ee0:	f04f 0200 	mov.w	r2, #0
 8000ee4:	4b2d      	ldr	r3, [pc, #180]	; (8000f9c <animate_led_fade_in_fade_out+0x274>)
 8000ee6:	f7ff fca9 	bl	800083c <__aeabi_ddiv>
 8000eea:	4602      	mov	r2, r0
 8000eec:	460b      	mov	r3, r1
 8000eee:	4614      	mov	r4, r2
 8000ef0:	461d      	mov	r5, r3
 8000ef2:	7e3b      	ldrb	r3, [r7, #24]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff fb0d 	bl	8000514 <__aeabi_i2d>
 8000efa:	4602      	mov	r2, r0
 8000efc:	460b      	mov	r3, r1
 8000efe:	4620      	mov	r0, r4
 8000f00:	4629      	mov	r1, r5
 8000f02:	f7ff fb71 	bl	80005e8 <__aeabi_dmul>
 8000f06:	4602      	mov	r2, r0
 8000f08:	460b      	mov	r3, r1
 8000f0a:	4610      	mov	r0, r2
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	f7ff fd7d 	bl	8000a0c <__aeabi_d2f>
 8000f12:	4603      	mov	r3, r0
 8000f14:	623b      	str	r3, [r7, #32]
        b = (i / 256.0) * blue;
 8000f16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000f18:	f7ff fafc 	bl	8000514 <__aeabi_i2d>
 8000f1c:	f04f 0200 	mov.w	r2, #0
 8000f20:	4b1e      	ldr	r3, [pc, #120]	; (8000f9c <animate_led_fade_in_fade_out+0x274>)
 8000f22:	f7ff fc8b 	bl	800083c <__aeabi_ddiv>
 8000f26:	4602      	mov	r2, r0
 8000f28:	460b      	mov	r3, r1
 8000f2a:	4614      	mov	r4, r2
 8000f2c:	461d      	mov	r5, r3
 8000f2e:	7dfb      	ldrb	r3, [r7, #23]
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff faef 	bl	8000514 <__aeabi_i2d>
 8000f36:	4602      	mov	r2, r0
 8000f38:	460b      	mov	r3, r1
 8000f3a:	4620      	mov	r0, r4
 8000f3c:	4629      	mov	r1, r5
 8000f3e:	f7ff fb53 	bl	80005e8 <__aeabi_dmul>
 8000f42:	4602      	mov	r2, r0
 8000f44:	460b      	mov	r3, r1
 8000f46:	4610      	mov	r0, r2
 8000f48:	4619      	mov	r1, r3
 8000f4a:	f7ff fd5f 	bl	8000a0c <__aeabi_d2f>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	61fb      	str	r3, [r7, #28]
        animate_led_set_all_pixels(strip_mask, r, g, b);
 8000f52:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000f56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f5a:	edc7 7a01 	vstr	s15, [r7, #4]
 8000f5e:	793b      	ldrb	r3, [r7, #4]
 8000f60:	b2d9      	uxtb	r1, r3
 8000f62:	edd7 7a08 	vldr	s15, [r7, #32]
 8000f66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f6a:	edc7 7a01 	vstr	s15, [r7, #4]
 8000f6e:	793b      	ldrb	r3, [r7, #4]
 8000f70:	b2da      	uxtb	r2, r3
 8000f72:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f7a:	edc7 7a01 	vstr	s15, [r7, #4]
 8000f7e:	793b      	ldrb	r3, [r7, #4]
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	89f8      	ldrh	r0, [r7, #14]
 8000f84:	f000 fb00 	bl	8001588 <animate_led_set_all_pixels>
    for (int i = 255; i >= 0; i = i-2)
 8000f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f8a:	3b02      	subs	r3, #2
 8000f8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	f6bf af70 	bge.w	8000e76 <animate_led_fade_in_fade_out+0x14e>
    }
}
 8000f96:	3730      	adds	r7, #48	; 0x30
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bdb0      	pop	{r4, r5, r7, pc}
 8000f9c:	40700000 	.word	0x40700000

08000fa0 <animate_led_twinkle>:
	delay(speed_delay);
}


void animate_led_twinkle(strip_mask_t strip_mask, color_hex_code_e color, uint16_t count, uint16_t speed_delay, bool only_one)
{
 8000fa0:	b590      	push	{r4, r7, lr}
 8000fa2:	b08b      	sub	sp, #44	; 0x2c
 8000fa4:	af02      	add	r7, sp, #8
 8000fa6:	60b9      	str	r1, [r7, #8]
 8000fa8:	4611      	mov	r1, r2
 8000faa:	461a      	mov	r2, r3
 8000fac:	4603      	mov	r3, r0
 8000fae:	81fb      	strh	r3, [r7, #14]
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	81bb      	strh	r3, [r7, #12]
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	80fb      	strh	r3, [r7, #6]
	uint16_t strip_size = ws2812_led_get_max_strip_size(strip_mask);
 8000fb8:	89fb      	ldrh	r3, [r7, #14]
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f000 fd42 	bl	8001a44 <ws2812_led_get_max_strip_size>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	837b      	strh	r3, [r7, #26]
	uint8_t red, green, blue; 
	red = ((color & 0xFF0000) >> 16);
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	0c1b      	lsrs	r3, r3, #16
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	767b      	strb	r3, [r7, #25]
	green = ((color & 0x00FF00) >> 8);
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	0a1b      	lsrs	r3, r3, #8
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	763b      	strb	r3, [r7, #24]
	blue = (color & 0x0000FF);
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	75fb      	strb	r3, [r7, #23]
    //animate_led_set_all_pixels(ALL_STRIPS, 0, 0, 0);
    for (int i = 0; i < count; i++)
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61fb      	str	r3, [r7, #28]
 8000fde:	e036      	b.n	800104e <animate_led_twinkle+0xae>
    {
		if (animate_led_check_interrupts(&speed_delay, &red, &green, &blue))
 8000fe0:	f107 0317 	add.w	r3, r7, #23
 8000fe4:	f107 0218 	add.w	r2, r7, #24
 8000fe8:	f107 0119 	add.w	r1, r7, #25
 8000fec:	1db8      	adds	r0, r7, #6
 8000fee:	f7ff fdf7 	bl	8000be0 <animate_led_check_interrupts>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d006      	beq.n	8001006 <animate_led_twinkle+0x66>
        {
        	animate_led_set_all_pixels((strip_mask_t)STRIP_BIT_ALL_SET, 0, 0, 0);
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	2001      	movs	r0, #1
 8001000:	f000 fac2 	bl	8001588 <animate_led_set_all_pixels>
 8001004:	e02b      	b.n	800105e <animate_led_twinkle+0xbe>
			return;
        }
        animate_led_set_pixel(strip_mask, random_num(0, strip_size), red, green, blue);
 8001006:	8b7b      	ldrh	r3, [r7, #26]
 8001008:	4619      	mov	r1, r3
 800100a:	2000      	movs	r0, #0
 800100c:	f007 fafa 	bl	8008604 <random_num>
 8001010:	4603      	mov	r3, r0
 8001012:	b299      	uxth	r1, r3
 8001014:	7e7a      	ldrb	r2, [r7, #25]
 8001016:	7e3c      	ldrb	r4, [r7, #24]
 8001018:	7dfb      	ldrb	r3, [r7, #23]
 800101a:	89f8      	ldrh	r0, [r7, #14]
 800101c:	9300      	str	r3, [sp, #0]
 800101e:	4623      	mov	r3, r4
 8001020:	f000 fa56 	bl	80014d0 <animate_led_set_pixel>
        animate_led_show_strip(strip_mask);
 8001024:	89fb      	ldrh	r3, [r7, #14]
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff fe18 	bl	8000c5c <animate_led_show_strip>
        delay(speed_delay);
 800102c:	88fb      	ldrh	r3, [r7, #6]
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff fd3c 	bl	8000aac <delay>
        if (only_one) animate_led_set_all_pixels(strip_mask, 0, 0, 0);
 8001034:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001038:	2b00      	cmp	r3, #0
 800103a:	d005      	beq.n	8001048 <animate_led_twinkle+0xa8>
 800103c:	89f8      	ldrh	r0, [r7, #14]
 800103e:	2300      	movs	r3, #0
 8001040:	2200      	movs	r2, #0
 8001042:	2100      	movs	r1, #0
 8001044:	f000 faa0 	bl	8001588 <animate_led_set_all_pixels>
    for (int i = 0; i < count; i++)
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	3301      	adds	r3, #1
 800104c:	61fb      	str	r3, [r7, #28]
 800104e:	89bb      	ldrh	r3, [r7, #12]
 8001050:	69fa      	ldr	r2, [r7, #28]
 8001052:	429a      	cmp	r2, r3
 8001054:	dbc4      	blt.n	8000fe0 <animate_led_twinkle+0x40>
    }
    delay(speed_delay);
 8001056:	88fb      	ldrh	r3, [r7, #6]
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff fd27 	bl	8000aac <delay>
}
 800105e:	3724      	adds	r7, #36	; 0x24
 8001060:	46bd      	mov	sp, r7
 8001062:	bd90      	pop	{r4, r7, pc}

08001064 <animate_led_sparkle_only_random_color>:
    delay(speed_delay);
}


void animate_led_sparkle_only_random_color(strip_mask_t strip_mask, bool fill, uint16_t speed_delay)
{
 8001064:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001066:	b089      	sub	sp, #36	; 0x24
 8001068:	af02      	add	r7, sp, #8
 800106a:	4603      	mov	r3, r0
 800106c:	80fb      	strh	r3, [r7, #6]
 800106e:	460b      	mov	r3, r1
 8001070:	717b      	strb	r3, [r7, #5]
 8001072:	4613      	mov	r3, r2
 8001074:	807b      	strh	r3, [r7, #2]
	float percent_to_fill = 0.7;
 8001076:	4b32      	ldr	r3, [pc, #200]	; (8001140 <animate_led_sparkle_only_random_color+0xdc>)
 8001078:	613b      	str	r3, [r7, #16]
	uint16_t strip_size = ws2812_led_get_max_strip_size(strip_mask);
 800107a:	88fb      	ldrh	r3, [r7, #6]
 800107c:	4618      	mov	r0, r3
 800107e:	f000 fce1 	bl	8001a44 <ws2812_led_get_max_strip_size>
 8001082:	4603      	mov	r3, r0
 8001084:	81fb      	strh	r3, [r7, #14]
	uint16_t num_active_leds = ws2812_get_num_active_animation_leds(strip_mask);
 8001086:	88fb      	ldrh	r3, [r7, #6]
 8001088:	4618      	mov	r0, r3
 800108a:	f000 fcbb 	bl	8001a04 <ws2812_get_num_active_animation_leds>
 800108e:	4603      	mov	r3, r0
 8001090:	81bb      	strh	r3, [r7, #12]
	for (uint16_t iii = 0; iii < (percent_to_fill * (float)num_active_leds); iii++)
 8001092:	2300      	movs	r3, #0
 8001094:	82fb      	strh	r3, [r7, #22]
 8001096:	e03b      	b.n	8001110 <animate_led_sparkle_only_random_color+0xac>
	{
		int pix = random_num(0, strip_size);
 8001098:	89fb      	ldrh	r3, [r7, #14]
 800109a:	4619      	mov	r1, r3
 800109c:	2000      	movs	r0, #0
 800109e:	f007 fab1 	bl	8008604 <random_num>
 80010a2:	4603      	mov	r3, r0
 80010a4:	60bb      	str	r3, [r7, #8]
		animate_led_set_pixel(strip_mask, pix, random_num(0, 255), random_num(0, 255), random_num(0, 255));
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	b29c      	uxth	r4, r3
 80010aa:	21ff      	movs	r1, #255	; 0xff
 80010ac:	2000      	movs	r0, #0
 80010ae:	f007 faa9 	bl	8008604 <random_num>
 80010b2:	4603      	mov	r3, r0
 80010b4:	b2dd      	uxtb	r5, r3
 80010b6:	21ff      	movs	r1, #255	; 0xff
 80010b8:	2000      	movs	r0, #0
 80010ba:	f007 faa3 	bl	8008604 <random_num>
 80010be:	4603      	mov	r3, r0
 80010c0:	b2de      	uxtb	r6, r3
 80010c2:	21ff      	movs	r1, #255	; 0xff
 80010c4:	2000      	movs	r0, #0
 80010c6:	f007 fa9d 	bl	8008604 <random_num>
 80010ca:	4603      	mov	r3, r0
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	88f8      	ldrh	r0, [r7, #6]
 80010d0:	9300      	str	r3, [sp, #0]
 80010d2:	4633      	mov	r3, r6
 80010d4:	462a      	mov	r2, r5
 80010d6:	4621      	mov	r1, r4
 80010d8:	f000 f9fa 	bl	80014d0 <animate_led_set_pixel>
		animate_led_show_strip(strip_mask);
 80010dc:	88fb      	ldrh	r3, [r7, #6]
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff fdbc 	bl	8000c5c <animate_led_show_strip>
		delay(speed_delay);
 80010e4:	887b      	ldrh	r3, [r7, #2]
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff fce0 	bl	8000aac <delay>
		if (!fill) animate_led_set_pixel(strip_mask, pix, 0, 0, 0);
 80010ec:	797b      	ldrb	r3, [r7, #5]
 80010ee:	f083 0301 	eor.w	r3, r3, #1
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d008      	beq.n	800110a <animate_led_sparkle_only_random_color+0xa6>
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	b299      	uxth	r1, r3
 80010fc:	88f8      	ldrh	r0, [r7, #6]
 80010fe:	2300      	movs	r3, #0
 8001100:	9300      	str	r3, [sp, #0]
 8001102:	2300      	movs	r3, #0
 8001104:	2200      	movs	r2, #0
 8001106:	f000 f9e3 	bl	80014d0 <animate_led_set_pixel>
	for (uint16_t iii = 0; iii < (percent_to_fill * (float)num_active_leds); iii++)
 800110a:	8afb      	ldrh	r3, [r7, #22]
 800110c:	3301      	adds	r3, #1
 800110e:	82fb      	strh	r3, [r7, #22]
 8001110:	8afb      	ldrh	r3, [r7, #22]
 8001112:	ee07 3a90 	vmov	s15, r3
 8001116:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800111a:	89bb      	ldrh	r3, [r7, #12]
 800111c:	ee07 3a90 	vmov	s15, r3
 8001120:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001124:	edd7 7a04 	vldr	s15, [r7, #16]
 8001128:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800112c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001134:	d4b0      	bmi.n	8001098 <animate_led_sparkle_only_random_color+0x34>
	}
}
 8001136:	bf00      	nop
 8001138:	bf00      	nop
 800113a:	371c      	adds	r7, #28
 800113c:	46bd      	mov	sp, r7
 800113e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001140:	3f333333 	.word	0x3f333333

08001144 <animate_led_rainbow_cycle>:
    }
}


void animate_led_rainbow_cycle(strip_mask_t strip_mask, uint16_t speed_delay)
{
 8001144:	b590      	push	{r4, r7, lr}
 8001146:	b089      	sub	sp, #36	; 0x24
 8001148:	af02      	add	r7, sp, #8
 800114a:	4603      	mov	r3, r0
 800114c:	460a      	mov	r2, r1
 800114e:	80fb      	strh	r3, [r7, #6]
 8001150:	4613      	mov	r3, r2
 8001152:	80bb      	strh	r3, [r7, #4]
	uint8_t dummy_red, dummy_green, dummy_blue;
	uint16_t strip_size = ws2812_led_get_max_strip_size(strip_mask);
 8001154:	88fb      	ldrh	r3, [r7, #6]
 8001156:	4618      	mov	r0, r3
 8001158:	f000 fc74 	bl	8001a44 <ws2812_led_get_max_strip_size>
 800115c:	4603      	mov	r3, r0
 800115e:	827b      	strh	r3, [r7, #18]
    uint8_t *c;
    uint16_t i, j;
    //for (j = 0; j < 256 * 5; j++)
    for (j = 0; j < 256 * 5; j++)
 8001160:	2300      	movs	r3, #0
 8001162:	82bb      	strh	r3, [r7, #20]
 8001164:	e043      	b.n	80011ee <animate_led_rainbow_cycle+0xaa>
    {
		if (animate_led_check_interrupts(&speed_delay, &dummy_red, &dummy_green, &dummy_blue))
 8001166:	f107 0309 	add.w	r3, r7, #9
 800116a:	f107 020a 	add.w	r2, r7, #10
 800116e:	f107 010b 	add.w	r1, r7, #11
 8001172:	1d38      	adds	r0, r7, #4
 8001174:	f7ff fd34 	bl	8000be0 <animate_led_check_interrupts>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d006      	beq.n	800118c <animate_led_rainbow_cycle+0x48>
        {
        	animate_led_set_all_pixels((strip_mask_t)STRIP_BIT_ALL_SET, 0, 0, 0);
 800117e:	2300      	movs	r3, #0
 8001180:	2200      	movs	r2, #0
 8001182:	2100      	movs	r1, #0
 8001184:	2001      	movs	r0, #1
 8001186:	f000 f9ff 	bl	8001588 <animate_led_set_all_pixels>
 800118a:	e034      	b.n	80011f6 <animate_led_rainbow_cycle+0xb2>
			return;
        }
        for (i = 0; i < strip_size; i++)
 800118c:	2300      	movs	r3, #0
 800118e:	82fb      	strh	r3, [r7, #22]
 8001190:	e01e      	b.n	80011d0 <animate_led_rainbow_cycle+0x8c>
        {
            c = animate_led_wheel(((i * 256 / strip_size) + j) & 255);
 8001192:	8afb      	ldrh	r3, [r7, #22]
 8001194:	021a      	lsls	r2, r3, #8
 8001196:	8a7b      	ldrh	r3, [r7, #18]
 8001198:	fb92 f3f3 	sdiv	r3, r2, r3
 800119c:	b2da      	uxtb	r2, r3
 800119e:	8abb      	ldrh	r3, [r7, #20]
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	4413      	add	r3, r2
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	4618      	mov	r0, r3
 80011a8:	f000 f828 	bl	80011fc <animate_led_wheel>
 80011ac:	60f8      	str	r0, [r7, #12]
            animate_led_set_pixel(strip_mask, i, *c, *(c + 1), *(c + 2));
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	781a      	ldrb	r2, [r3, #0]
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	3301      	adds	r3, #1
 80011b6:	781c      	ldrb	r4, [r3, #0]
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	3302      	adds	r3, #2
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	8af9      	ldrh	r1, [r7, #22]
 80011c0:	88f8      	ldrh	r0, [r7, #6]
 80011c2:	9300      	str	r3, [sp, #0]
 80011c4:	4623      	mov	r3, r4
 80011c6:	f000 f983 	bl	80014d0 <animate_led_set_pixel>
        for (i = 0; i < strip_size; i++)
 80011ca:	8afb      	ldrh	r3, [r7, #22]
 80011cc:	3301      	adds	r3, #1
 80011ce:	82fb      	strh	r3, [r7, #22]
 80011d0:	8afa      	ldrh	r2, [r7, #22]
 80011d2:	8a7b      	ldrh	r3, [r7, #18]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d3dc      	bcc.n	8001192 <animate_led_rainbow_cycle+0x4e>
        }
        animate_led_show_strip(strip_mask);
 80011d8:	88fb      	ldrh	r3, [r7, #6]
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff fd3e 	bl	8000c5c <animate_led_show_strip>
        delay(speed_delay);
 80011e0:	88bb      	ldrh	r3, [r7, #4]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff fc62 	bl	8000aac <delay>
    for (j = 0; j < 256 * 5; j++)
 80011e8:	8abb      	ldrh	r3, [r7, #20]
 80011ea:	3301      	adds	r3, #1
 80011ec:	82bb      	strh	r3, [r7, #20]
 80011ee:	8abb      	ldrh	r3, [r7, #20]
 80011f0:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80011f4:	d3b7      	bcc.n	8001166 <animate_led_rainbow_cycle+0x22>
    }
}
 80011f6:	371c      	adds	r7, #28
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd90      	pop	{r4, r7, pc}

080011fc <animate_led_wheel>:


uint8_t* animate_led_wheel(uint8_t wheel_pos)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	71fb      	strb	r3, [r7, #7]
    static uint8_t c[3];
    if (wheel_pos < 85)
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	2b54      	cmp	r3, #84	; 0x54
 800120a:	d813      	bhi.n	8001234 <animate_led_wheel+0x38>
    {
        c[0] = wheel_pos * 3;
 800120c:	79fb      	ldrb	r3, [r7, #7]
 800120e:	461a      	mov	r2, r3
 8001210:	0052      	lsls	r2, r2, #1
 8001212:	4413      	add	r3, r2
 8001214:	b2da      	uxtb	r2, r3
 8001216:	4b23      	ldr	r3, [pc, #140]	; (80012a4 <animate_led_wheel+0xa8>)
 8001218:	701a      	strb	r2, [r3, #0]
        c[1] = 255 - wheel_pos * 3; 
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	461a      	mov	r2, r3
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	b2db      	uxtb	r3, r3
 8001224:	3b01      	subs	r3, #1
 8001226:	b2da      	uxtb	r2, r3
 8001228:	4b1e      	ldr	r3, [pc, #120]	; (80012a4 <animate_led_wheel+0xa8>)
 800122a:	705a      	strb	r2, [r3, #1]
        c[2] = 0;
 800122c:	4b1d      	ldr	r3, [pc, #116]	; (80012a4 <animate_led_wheel+0xa8>)
 800122e:	2200      	movs	r2, #0
 8001230:	709a      	strb	r2, [r3, #2]
 8001232:	e02f      	b.n	8001294 <animate_led_wheel+0x98>
    }
    else if(wheel_pos < 170)
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	2ba9      	cmp	r3, #169	; 0xa9
 8001238:	d816      	bhi.n	8001268 <animate_led_wheel+0x6c>
    {
        wheel_pos -= 85;
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	3b55      	subs	r3, #85	; 0x55
 800123e:	71fb      	strb	r3, [r7, #7]
        c[0] = 255 - wheel_pos * 3;
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	461a      	mov	r2, r3
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	b2db      	uxtb	r3, r3
 800124a:	3b01      	subs	r3, #1
 800124c:	b2da      	uxtb	r2, r3
 800124e:	4b15      	ldr	r3, [pc, #84]	; (80012a4 <animate_led_wheel+0xa8>)
 8001250:	701a      	strb	r2, [r3, #0]
        c[1] = 0;
 8001252:	4b14      	ldr	r3, [pc, #80]	; (80012a4 <animate_led_wheel+0xa8>)
 8001254:	2200      	movs	r2, #0
 8001256:	705a      	strb	r2, [r3, #1]
        c[2] = wheel_pos * 3;
 8001258:	79fb      	ldrb	r3, [r7, #7]
 800125a:	461a      	mov	r2, r3
 800125c:	0052      	lsls	r2, r2, #1
 800125e:	4413      	add	r3, r2
 8001260:	b2da      	uxtb	r2, r3
 8001262:	4b10      	ldr	r3, [pc, #64]	; (80012a4 <animate_led_wheel+0xa8>)
 8001264:	709a      	strb	r2, [r3, #2]
 8001266:	e015      	b.n	8001294 <animate_led_wheel+0x98>
    }
    else
    {
        wheel_pos -= 170;
 8001268:	79fb      	ldrb	r3, [r7, #7]
 800126a:	3356      	adds	r3, #86	; 0x56
 800126c:	71fb      	strb	r3, [r7, #7]
        c[0] = 0;
 800126e:	4b0d      	ldr	r3, [pc, #52]	; (80012a4 <animate_led_wheel+0xa8>)
 8001270:	2200      	movs	r2, #0
 8001272:	701a      	strb	r2, [r3, #0]
        c[1] = wheel_pos * 3; 
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	461a      	mov	r2, r3
 8001278:	0052      	lsls	r2, r2, #1
 800127a:	4413      	add	r3, r2
 800127c:	b2da      	uxtb	r2, r3
 800127e:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <animate_led_wheel+0xa8>)
 8001280:	705a      	strb	r2, [r3, #1]
        c[2] = 255 - wheel_pos * 3;
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	461a      	mov	r2, r3
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	b2db      	uxtb	r3, r3
 800128c:	3b01      	subs	r3, #1
 800128e:	b2da      	uxtb	r2, r3
 8001290:	4b04      	ldr	r3, [pc, #16]	; (80012a4 <animate_led_wheel+0xa8>)
 8001292:	709a      	strb	r2, [r3, #2]
    }
    return c;
 8001294:	4b03      	ldr	r3, [pc, #12]	; (80012a4 <animate_led_wheel+0xa8>)
}
 8001296:	4618      	mov	r0, r3
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	200000a4 	.word	0x200000a4

080012a8 <animate_led_theater_chase>:
    }
}


void animate_led_theater_chase(strip_mask_t strip_mask, color_hex_code_e color, uint16_t speed_delay)
{
 80012a8:	b590      	push	{r4, r7, lr}
 80012aa:	b08b      	sub	sp, #44	; 0x2c
 80012ac:	af02      	add	r7, sp, #8
 80012ae:	4603      	mov	r3, r0
 80012b0:	6039      	str	r1, [r7, #0]
 80012b2:	80fb      	strh	r3, [r7, #6]
 80012b4:	4613      	mov	r3, r2
 80012b6:	80bb      	strh	r3, [r7, #4]
	uint16_t strip_size = ws2812_led_get_max_strip_size(strip_mask);
 80012b8:	88fb      	ldrh	r3, [r7, #6]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f000 fbc2 	bl	8001a44 <ws2812_led_get_max_strip_size>
 80012c0:	4603      	mov	r3, r0
 80012c2:	81fb      	strh	r3, [r7, #14]
	uint8_t red, green, blue; 
	red = ((color & 0xFF0000) >> 16);
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	0c1b      	lsrs	r3, r3, #16
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	737b      	strb	r3, [r7, #13]
	green = ((color & 0x00FF00) >> 8);
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	0a1b      	lsrs	r3, r3, #8
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	733b      	strb	r3, [r7, #12]
	blue = (color & 0x0000FF);
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	72fb      	strb	r3, [r7, #11]
    for (int j = 0; j < 10; j++)
 80012da:	2300      	movs	r3, #0
 80012dc:	61fb      	str	r3, [r7, #28]
 80012de:	e068      	b.n	80013b2 <animate_led_theater_chase+0x10a>
    {
        for (int q = 0; q < 3; q++)
 80012e0:	2300      	movs	r3, #0
 80012e2:	61bb      	str	r3, [r7, #24]
 80012e4:	e05f      	b.n	80013a6 <animate_led_theater_chase+0xfe>
        {
        	if (animate_led_check_interrupts(&speed_delay, &red, &green, &blue))
 80012e6:	f107 030b 	add.w	r3, r7, #11
 80012ea:	f107 020c 	add.w	r2, r7, #12
 80012ee:	f107 010d 	add.w	r1, r7, #13
 80012f2:	1d38      	adds	r0, r7, #4
 80012f4:	f7ff fc74 	bl	8000be0 <animate_led_check_interrupts>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d006      	beq.n	800130c <animate_led_theater_chase+0x64>
        	{
        		animate_led_set_all_pixels((strip_mask_t)STRIP_BIT_ALL_SET, 0, 0, 0);
 80012fe:	2300      	movs	r3, #0
 8001300:	2200      	movs	r2, #0
 8001302:	2100      	movs	r1, #0
 8001304:	2001      	movs	r0, #1
 8001306:	f000 f93f 	bl	8001588 <animate_led_set_all_pixels>
        		return;
 800130a:	e055      	b.n	80013b8 <animate_led_theater_chase+0x110>
        	}
            for (int i = 0; i < strip_size; i += 3) animate_led_set_pixel(strip_mask, i + q, red, green, blue); // turn every third pixel on
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]
 8001310:	e010      	b.n	8001334 <animate_led_theater_chase+0x8c>
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	b29a      	uxth	r2, r3
 8001316:	69bb      	ldr	r3, [r7, #24]
 8001318:	b29b      	uxth	r3, r3
 800131a:	4413      	add	r3, r2
 800131c:	b299      	uxth	r1, r3
 800131e:	7b7a      	ldrb	r2, [r7, #13]
 8001320:	7b3c      	ldrb	r4, [r7, #12]
 8001322:	7afb      	ldrb	r3, [r7, #11]
 8001324:	88f8      	ldrh	r0, [r7, #6]
 8001326:	9300      	str	r3, [sp, #0]
 8001328:	4623      	mov	r3, r4
 800132a:	f000 f8d1 	bl	80014d0 <animate_led_set_pixel>
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	3303      	adds	r3, #3
 8001332:	617b      	str	r3, [r7, #20]
 8001334:	89fb      	ldrh	r3, [r7, #14]
 8001336:	697a      	ldr	r2, [r7, #20]
 8001338:	429a      	cmp	r2, r3
 800133a:	dbea      	blt.n	8001312 <animate_led_theater_chase+0x6a>
            animate_led_show_strip(strip_mask);
 800133c:	88fb      	ldrh	r3, [r7, #6]
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff fc8c 	bl	8000c5c <animate_led_show_strip>
			if (animate_led_check_interrupts(&speed_delay, &red, &green, &blue))
 8001344:	f107 030b 	add.w	r3, r7, #11
 8001348:	f107 020c 	add.w	r2, r7, #12
 800134c:	f107 010d 	add.w	r1, r7, #13
 8001350:	1d38      	adds	r0, r7, #4
 8001352:	f7ff fc45 	bl	8000be0 <animate_led_check_interrupts>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d006      	beq.n	800136a <animate_led_theater_chase+0xc2>
			{
        		animate_led_set_all_pixels((strip_mask_t)STRIP_BIT_ALL_SET, 0, 0, 0);
 800135c:	2300      	movs	r3, #0
 800135e:	2200      	movs	r2, #0
 8001360:	2100      	movs	r1, #0
 8001362:	2001      	movs	r0, #1
 8001364:	f000 f910 	bl	8001588 <animate_led_set_all_pixels>
				return;
 8001368:	e026      	b.n	80013b8 <animate_led_theater_chase+0x110>
			}
            delay(speed_delay);
 800136a:	88bb      	ldrh	r3, [r7, #4]
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff fb9d 	bl	8000aac <delay>
            for (int i = 0; i < strip_size; i += 3) animate_led_set_pixel(strip_mask, i + q, 0, 0, 0); // turn everty third pixel off
 8001372:	2300      	movs	r3, #0
 8001374:	613b      	str	r3, [r7, #16]
 8001376:	e00f      	b.n	8001398 <animate_led_theater_chase+0xf0>
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	b29a      	uxth	r2, r3
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	b29b      	uxth	r3, r3
 8001380:	4413      	add	r3, r2
 8001382:	b299      	uxth	r1, r3
 8001384:	88f8      	ldrh	r0, [r7, #6]
 8001386:	2300      	movs	r3, #0
 8001388:	9300      	str	r3, [sp, #0]
 800138a:	2300      	movs	r3, #0
 800138c:	2200      	movs	r2, #0
 800138e:	f000 f89f 	bl	80014d0 <animate_led_set_pixel>
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	3303      	adds	r3, #3
 8001396:	613b      	str	r3, [r7, #16]
 8001398:	89fb      	ldrh	r3, [r7, #14]
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	429a      	cmp	r2, r3
 800139e:	dbeb      	blt.n	8001378 <animate_led_theater_chase+0xd0>
        for (int q = 0; q < 3; q++)
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	3301      	adds	r3, #1
 80013a4:	61bb      	str	r3, [r7, #24]
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	dd9c      	ble.n	80012e6 <animate_led_theater_chase+0x3e>
    for (int j = 0; j < 10; j++)
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	3301      	adds	r3, #1
 80013b0:	61fb      	str	r3, [r7, #28]
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	2b09      	cmp	r3, #9
 80013b6:	dd93      	ble.n	80012e0 <animate_led_theater_chase+0x38>
        }
    }
}
 80013b8:	3724      	adds	r7, #36	; 0x24
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd90      	pop	{r4, r7, pc}
	...

080013c0 <animate_led_theater_chase_rainbow>:


void animate_led_theater_chase_rainbow(strip_mask_t strip_mask, uint16_t speed_delay)
{
 80013c0:	b590      	push	{r4, r7, lr}
 80013c2:	b08d      	sub	sp, #52	; 0x34
 80013c4:	af02      	add	r7, sp, #8
 80013c6:	4603      	mov	r3, r0
 80013c8:	460a      	mov	r2, r1
 80013ca:	80fb      	strh	r3, [r7, #6]
 80013cc:	4613      	mov	r3, r2
 80013ce:	80bb      	strh	r3, [r7, #4]
	uint8_t dummy_red, dummy_green, dummy_blue;
	uint16_t strip_size = ws2812_led_get_max_strip_size(strip_mask);
 80013d0:	88fb      	ldrh	r3, [r7, #6]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f000 fb36 	bl	8001a44 <ws2812_led_get_max_strip_size>
 80013d8:	4603      	mov	r3, r0
 80013da:	82fb      	strh	r3, [r7, #22]
    uint8_t *c;
    for (int j = 0; j < 256; j++) // cycel all 256 colors in the animate_led_wheel
 80013dc:	2300      	movs	r3, #0
 80013de:	627b      	str	r3, [r7, #36]	; 0x24
 80013e0:	e06d      	b.n	80014be <animate_led_theater_chase_rainbow+0xfe>
    {
        for (int q = 0; q < 3; q++)
 80013e2:	2300      	movs	r3, #0
 80013e4:	623b      	str	r3, [r7, #32]
 80013e6:	e064      	b.n	80014b2 <animate_led_theater_chase_rainbow+0xf2>
        {
			if (animate_led_check_interrupts(&speed_delay, &dummy_red, &dummy_green, &dummy_blue))
 80013e8:	f107 030d 	add.w	r3, r7, #13
 80013ec:	f107 020e 	add.w	r2, r7, #14
 80013f0:	f107 010f 	add.w	r1, r7, #15
 80013f4:	1d38      	adds	r0, r7, #4
 80013f6:	f7ff fbf3 	bl	8000be0 <animate_led_check_interrupts>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d006      	beq.n	800140e <animate_led_theater_chase_rainbow+0x4e>
			{
				animate_led_set_all_pixels((strip_mask_t)STRIP_BIT_ALL_SET, 0, 0, 0);
 8001400:	2300      	movs	r3, #0
 8001402:	2200      	movs	r2, #0
 8001404:	2100      	movs	r1, #0
 8001406:	2001      	movs	r0, #1
 8001408:	f000 f8be 	bl	8001588 <animate_led_set_all_pixels>
 800140c:	e05a      	b.n	80014c4 <animate_led_theater_chase_rainbow+0x104>
				return;
			}
            for (int i = 0; i < strip_size; i = i + 3)
 800140e:	2300      	movs	r3, #0
 8001410:	61fb      	str	r3, [r7, #28]
 8001412:	e028      	b.n	8001466 <animate_led_theater_chase_rainbow+0xa6>
            {
                c = animate_led_wheel((i + j) % 255);
 8001414:	69fa      	ldr	r2, [r7, #28]
 8001416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001418:	441a      	add	r2, r3
 800141a:	4b2c      	ldr	r3, [pc, #176]	; (80014cc <animate_led_theater_chase_rainbow+0x10c>)
 800141c:	fb83 1302 	smull	r1, r3, r3, r2
 8001420:	4413      	add	r3, r2
 8001422:	11d9      	asrs	r1, r3, #7
 8001424:	17d3      	asrs	r3, r2, #31
 8001426:	1ac9      	subs	r1, r1, r3
 8001428:	460b      	mov	r3, r1
 800142a:	021b      	lsls	r3, r3, #8
 800142c:	1a5b      	subs	r3, r3, r1
 800142e:	1ad1      	subs	r1, r2, r3
 8001430:	b2cb      	uxtb	r3, r1
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff fee2 	bl	80011fc <animate_led_wheel>
 8001438:	6138      	str	r0, [r7, #16]
                animate_led_set_pixel(strip_mask, i + q, *c, *(c + 1), *(c + 2)); // turn every third pixel on
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	b29a      	uxth	r2, r3
 800143e:	6a3b      	ldr	r3, [r7, #32]
 8001440:	b29b      	uxth	r3, r3
 8001442:	4413      	add	r3, r2
 8001444:	b299      	uxth	r1, r3
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	781a      	ldrb	r2, [r3, #0]
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	3301      	adds	r3, #1
 800144e:	781c      	ldrb	r4, [r3, #0]
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	3302      	adds	r3, #2
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	88f8      	ldrh	r0, [r7, #6]
 8001458:	9300      	str	r3, [sp, #0]
 800145a:	4623      	mov	r3, r4
 800145c:	f000 f838 	bl	80014d0 <animate_led_set_pixel>
            for (int i = 0; i < strip_size; i = i + 3)
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	3303      	adds	r3, #3
 8001464:	61fb      	str	r3, [r7, #28]
 8001466:	8afb      	ldrh	r3, [r7, #22]
 8001468:	69fa      	ldr	r2, [r7, #28]
 800146a:	429a      	cmp	r2, r3
 800146c:	dbd2      	blt.n	8001414 <animate_led_theater_chase_rainbow+0x54>
            }
            animate_led_show_strip(strip_mask);
 800146e:	88fb      	ldrh	r3, [r7, #6]
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff fbf3 	bl	8000c5c <animate_led_show_strip>
            delay(speed_delay);
 8001476:	88bb      	ldrh	r3, [r7, #4]
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff fb17 	bl	8000aac <delay>
            for (int i = 0; i < strip_size; i = i + 3) animate_led_set_pixel(strip_mask, i + q, 0, 0, 0); // turn every third pixel off
 800147e:	2300      	movs	r3, #0
 8001480:	61bb      	str	r3, [r7, #24]
 8001482:	e00f      	b.n	80014a4 <animate_led_theater_chase_rainbow+0xe4>
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	b29a      	uxth	r2, r3
 8001488:	6a3b      	ldr	r3, [r7, #32]
 800148a:	b29b      	uxth	r3, r3
 800148c:	4413      	add	r3, r2
 800148e:	b299      	uxth	r1, r3
 8001490:	88f8      	ldrh	r0, [r7, #6]
 8001492:	2300      	movs	r3, #0
 8001494:	9300      	str	r3, [sp, #0]
 8001496:	2300      	movs	r3, #0
 8001498:	2200      	movs	r2, #0
 800149a:	f000 f819 	bl	80014d0 <animate_led_set_pixel>
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	3303      	adds	r3, #3
 80014a2:	61bb      	str	r3, [r7, #24]
 80014a4:	8afb      	ldrh	r3, [r7, #22]
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	dbeb      	blt.n	8001484 <animate_led_theater_chase_rainbow+0xc4>
        for (int q = 0; q < 3; q++)
 80014ac:	6a3b      	ldr	r3, [r7, #32]
 80014ae:	3301      	adds	r3, #1
 80014b0:	623b      	str	r3, [r7, #32]
 80014b2:	6a3b      	ldr	r3, [r7, #32]
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	dd97      	ble.n	80013e8 <animate_led_theater_chase_rainbow+0x28>
    for (int j = 0; j < 256; j++) // cycel all 256 colors in the animate_led_wheel
 80014b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ba:	3301      	adds	r3, #1
 80014bc:	627b      	str	r3, [r7, #36]	; 0x24
 80014be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c0:	2bff      	cmp	r3, #255	; 0xff
 80014c2:	dd8e      	ble.n	80013e2 <animate_led_theater_chase_rainbow+0x22>
        }
    }
}
 80014c4:	372c      	adds	r7, #44	; 0x2c
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd90      	pop	{r4, r7, pc}
 80014ca:	bf00      	nop
 80014cc:	80808081 	.word	0x80808081

080014d0 <animate_led_set_pixel>:
	}
}


void animate_led_set_pixel(strip_mask_t strip_mask, uint16_t pixel, uint8_t red, uint8_t green, uint8_t blue)
{
 80014d0:	b590      	push	{r4, r7, lr}
 80014d2:	b087      	sub	sp, #28
 80014d4:	af02      	add	r7, sp, #8
 80014d6:	4604      	mov	r4, r0
 80014d8:	4608      	mov	r0, r1
 80014da:	4611      	mov	r1, r2
 80014dc:	461a      	mov	r2, r3
 80014de:	4623      	mov	r3, r4
 80014e0:	80fb      	strh	r3, [r7, #6]
 80014e2:	4603      	mov	r3, r0
 80014e4:	80bb      	strh	r3, [r7, #4]
 80014e6:	460b      	mov	r3, r1
 80014e8:	70fb      	strb	r3, [r7, #3]
 80014ea:	4613      	mov	r3, r2
 80014ec:	70bb      	strb	r3, [r7, #2]
	uint8_t adj_red = red / COLOR_LED_MAX_BRIGHTNESS_DIVISOR;
 80014ee:	78fb      	ldrb	r3, [r7, #3]
 80014f0:	089b      	lsrs	r3, r3, #2
 80014f2:	737b      	strb	r3, [r7, #13]
	uint8_t adj_green = green / COLOR_LED_MAX_BRIGHTNESS_DIVISOR;
 80014f4:	78bb      	ldrb	r3, [r7, #2]
 80014f6:	089b      	lsrs	r3, r3, #2
 80014f8:	733b      	strb	r3, [r7, #12]
	uint8_t adj_blue = blue / COLOR_LED_MAX_BRIGHTNESS_DIVISOR;
 80014fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80014fe:	089b      	lsrs	r3, r3, #2
 8001500:	72fb      	strb	r3, [r7, #11]
	if (STRIP_BIT_ALL_SET == strip_mask)
 8001502:	88fb      	ldrh	r3, [r7, #6]
 8001504:	2b01      	cmp	r3, #1
 8001506:	d11b      	bne.n	8001540 <animate_led_set_pixel+0x70>
	{
		for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8001508:	2301      	movs	r3, #1
 800150a:	73fb      	strb	r3, [r7, #15]
 800150c:	e014      	b.n	8001538 <animate_led_set_pixel+0x68>
		{
			//offset = animate_led_get_strip_offset(strip_bit);
			if (ws2812_pixel_is_in_strip_range(strip_bit, pixel)) ws2812b_set_led(strip_bit, pixel, adj_red, adj_green, adj_blue);
 800150e:	88ba      	ldrh	r2, [r7, #4]
 8001510:	7bfb      	ldrb	r3, [r7, #15]
 8001512:	4611      	mov	r1, r2
 8001514:	4618      	mov	r0, r3
 8001516:	f000 fab7 	bl	8001a88 <ws2812_pixel_is_in_strip_range>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d008      	beq.n	8001532 <animate_led_set_pixel+0x62>
 8001520:	7b3c      	ldrb	r4, [r7, #12]
 8001522:	7b7a      	ldrb	r2, [r7, #13]
 8001524:	88b9      	ldrh	r1, [r7, #4]
 8001526:	7bf8      	ldrb	r0, [r7, #15]
 8001528:	7afb      	ldrb	r3, [r7, #11]
 800152a:	9300      	str	r3, [sp, #0]
 800152c:	4623      	mov	r3, r4
 800152e:	f000 fac5 	bl	8001abc <ws2812b_set_led>
		for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8001532:	7bfb      	ldrb	r3, [r7, #15]
 8001534:	3301      	adds	r3, #1
 8001536:	73fb      	strb	r3, [r7, #15]
 8001538:	7bfb      	ldrb	r3, [r7, #15]
 800153a:	2b01      	cmp	r3, #1
 800153c:	d9e7      	bls.n	800150e <animate_led_set_pixel+0x3e>
				if (ws2812_pixel_is_in_strip_range(strip_bit, pixel)) ws2812b_set_led(strip_bit, pixel, adj_red, adj_green, adj_blue);
			}
		}
	}
	//animate_led_show_strip();
}
 800153e:	e01f      	b.n	8001580 <animate_led_set_pixel+0xb0>
		for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8001540:	2301      	movs	r3, #1
 8001542:	73bb      	strb	r3, [r7, #14]
 8001544:	e019      	b.n	800157a <animate_led_set_pixel+0xaa>
			if (strip_mask & strip_bit)
 8001546:	88fa      	ldrh	r2, [r7, #6]
 8001548:	7bbb      	ldrb	r3, [r7, #14]
 800154a:	4013      	ands	r3, r2
 800154c:	2b00      	cmp	r3, #0
 800154e:	d011      	beq.n	8001574 <animate_led_set_pixel+0xa4>
				if (ws2812_pixel_is_in_strip_range(strip_bit, pixel)) ws2812b_set_led(strip_bit, pixel, adj_red, adj_green, adj_blue);
 8001550:	88ba      	ldrh	r2, [r7, #4]
 8001552:	7bbb      	ldrb	r3, [r7, #14]
 8001554:	4611      	mov	r1, r2
 8001556:	4618      	mov	r0, r3
 8001558:	f000 fa96 	bl	8001a88 <ws2812_pixel_is_in_strip_range>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d008      	beq.n	8001574 <animate_led_set_pixel+0xa4>
 8001562:	7b3c      	ldrb	r4, [r7, #12]
 8001564:	7b7a      	ldrb	r2, [r7, #13]
 8001566:	88b9      	ldrh	r1, [r7, #4]
 8001568:	7bb8      	ldrb	r0, [r7, #14]
 800156a:	7afb      	ldrb	r3, [r7, #11]
 800156c:	9300      	str	r3, [sp, #0]
 800156e:	4623      	mov	r3, r4
 8001570:	f000 faa4 	bl	8001abc <ws2812b_set_led>
		for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8001574:	7bbb      	ldrb	r3, [r7, #14]
 8001576:	3301      	adds	r3, #1
 8001578:	73bb      	strb	r3, [r7, #14]
 800157a:	7bbb      	ldrb	r3, [r7, #14]
 800157c:	2b01      	cmp	r3, #1
 800157e:	d9e2      	bls.n	8001546 <animate_led_set_pixel+0x76>
}
 8001580:	bf00      	nop
 8001582:	3714      	adds	r7, #20
 8001584:	46bd      	mov	sp, r7
 8001586:	bd90      	pop	{r4, r7, pc}

08001588 <animate_led_set_all_pixels>:


void animate_led_set_all_pixels(strip_mask_t strip_mask, uint8_t red, uint8_t green, uint8_t blue)
{		
 8001588:	b590      	push	{r4, r7, lr}
 800158a:	b089      	sub	sp, #36	; 0x24
 800158c:	af02      	add	r7, sp, #8
 800158e:	4604      	mov	r4, r0
 8001590:	4608      	mov	r0, r1
 8001592:	4611      	mov	r1, r2
 8001594:	461a      	mov	r2, r3
 8001596:	4623      	mov	r3, r4
 8001598:	80fb      	strh	r3, [r7, #6]
 800159a:	4603      	mov	r3, r0
 800159c:	717b      	strb	r3, [r7, #5]
 800159e:	460b      	mov	r3, r1
 80015a0:	713b      	strb	r3, [r7, #4]
 80015a2:	4613      	mov	r3, r2
 80015a4:	70fb      	strb	r3, [r7, #3]
	uint16_t strip_size = 0;
 80015a6:	2300      	movs	r3, #0
 80015a8:	81fb      	strh	r3, [r7, #14]
	uint8_t adj_red = red / COLOR_LED_MAX_BRIGHTNESS_DIVISOR;
 80015aa:	797b      	ldrb	r3, [r7, #5]
 80015ac:	089b      	lsrs	r3, r3, #2
 80015ae:	737b      	strb	r3, [r7, #13]
	uint8_t adj_green = green / COLOR_LED_MAX_BRIGHTNESS_DIVISOR;
 80015b0:	793b      	ldrb	r3, [r7, #4]
 80015b2:	089b      	lsrs	r3, r3, #2
 80015b4:	733b      	strb	r3, [r7, #12]
	uint8_t adj_blue = blue / COLOR_LED_MAX_BRIGHTNESS_DIVISOR;
 80015b6:	78fb      	ldrb	r3, [r7, #3]
 80015b8:	089b      	lsrs	r3, r3, #2
 80015ba:	72fb      	strb	r3, [r7, #11]
	if (strip_mask == g_all_strip_mask)
 80015bc:	4b28      	ldr	r3, [pc, #160]	; (8001660 <animate_led_set_all_pixels+0xd8>)
 80015be:	881b      	ldrh	r3, [r3, #0]
 80015c0:	88fa      	ldrh	r2, [r7, #6]
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d11c      	bne.n	8001600 <animate_led_set_all_pixels+0x78>
	{
		for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 80015c6:	2301      	movs	r3, #1
 80015c8:	75fb      	strb	r3, [r7, #23]
 80015ca:	e015      	b.n	80015f8 <animate_led_set_all_pixels+0x70>
		{
			//offset = animate_led_get_strip_offset(strip_bit);
			for (uint16_t iii = 0; iii < strip_size; iii++) ws2812b_set_led(strip_bit, iii, adj_red, adj_green, adj_blue);
 80015cc:	2300      	movs	r3, #0
 80015ce:	82bb      	strh	r3, [r7, #20]
 80015d0:	e00b      	b.n	80015ea <animate_led_set_all_pixels+0x62>
 80015d2:	7b3c      	ldrb	r4, [r7, #12]
 80015d4:	7b7a      	ldrb	r2, [r7, #13]
 80015d6:	8ab9      	ldrh	r1, [r7, #20]
 80015d8:	7df8      	ldrb	r0, [r7, #23]
 80015da:	7afb      	ldrb	r3, [r7, #11]
 80015dc:	9300      	str	r3, [sp, #0]
 80015de:	4623      	mov	r3, r4
 80015e0:	f000 fa6c 	bl	8001abc <ws2812b_set_led>
 80015e4:	8abb      	ldrh	r3, [r7, #20]
 80015e6:	3301      	adds	r3, #1
 80015e8:	82bb      	strh	r3, [r7, #20]
 80015ea:	8aba      	ldrh	r2, [r7, #20]
 80015ec:	89fb      	ldrh	r3, [r7, #14]
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d3ef      	bcc.n	80015d2 <animate_led_set_all_pixels+0x4a>
		for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 80015f2:	7dfb      	ldrb	r3, [r7, #23]
 80015f4:	3301      	adds	r3, #1
 80015f6:	75fb      	strb	r3, [r7, #23]
 80015f8:	7dfb      	ldrb	r3, [r7, #23]
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d9e6      	bls.n	80015cc <animate_led_set_all_pixels+0x44>
 80015fe:	e026      	b.n	800164e <animate_led_set_all_pixels+0xc6>
		}
	}
	else
	{
		for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8001600:	2301      	movs	r3, #1
 8001602:	74fb      	strb	r3, [r7, #19]
 8001604:	e020      	b.n	8001648 <animate_led_set_all_pixels+0xc0>
		{
			if (strip_mask & strip_bit)
 8001606:	88fa      	ldrh	r2, [r7, #6]
 8001608:	7cfb      	ldrb	r3, [r7, #19]
 800160a:	4013      	ands	r3, r2
 800160c:	2b00      	cmp	r3, #0
 800160e:	d018      	beq.n	8001642 <animate_led_set_all_pixels+0xba>
			{
				//offset = animate_led_get_strip_offset(strip_bit);
				strip_size = ws2812_get_strip_size(strip_bit);
 8001610:	7cfb      	ldrb	r3, [r7, #19]
 8001612:	4618      	mov	r0, r3
 8001614:	f000 f9d4 	bl	80019c0 <ws2812_get_strip_size>
 8001618:	4603      	mov	r3, r0
 800161a:	81fb      	strh	r3, [r7, #14]
				for (uint16_t yyy = 0; yyy < strip_size; yyy++) ws2812b_set_led(strip_bit, yyy, adj_red, adj_green, adj_blue);
 800161c:	2300      	movs	r3, #0
 800161e:	823b      	strh	r3, [r7, #16]
 8001620:	e00b      	b.n	800163a <animate_led_set_all_pixels+0xb2>
 8001622:	7b3c      	ldrb	r4, [r7, #12]
 8001624:	7b7a      	ldrb	r2, [r7, #13]
 8001626:	8a39      	ldrh	r1, [r7, #16]
 8001628:	7cf8      	ldrb	r0, [r7, #19]
 800162a:	7afb      	ldrb	r3, [r7, #11]
 800162c:	9300      	str	r3, [sp, #0]
 800162e:	4623      	mov	r3, r4
 8001630:	f000 fa44 	bl	8001abc <ws2812b_set_led>
 8001634:	8a3b      	ldrh	r3, [r7, #16]
 8001636:	3301      	adds	r3, #1
 8001638:	823b      	strh	r3, [r7, #16]
 800163a:	8a3a      	ldrh	r2, [r7, #16]
 800163c:	89fb      	ldrh	r3, [r7, #14]
 800163e:	429a      	cmp	r2, r3
 8001640:	d3ef      	bcc.n	8001622 <animate_led_set_all_pixels+0x9a>
		for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8001642:	7cfb      	ldrb	r3, [r7, #19]
 8001644:	3301      	adds	r3, #1
 8001646:	74fb      	strb	r3, [r7, #19]
 8001648:	7cfb      	ldrb	r3, [r7, #19]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d9db      	bls.n	8001606 <animate_led_set_all_pixels+0x7e>
			}
		}
	}
    animate_led_show_strip(strip_mask);
 800164e:	88fb      	ldrh	r3, [r7, #6]
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff fb03 	bl	8000c5c <animate_led_show_strip>
}
 8001656:	bf00      	nop
 8001658:	371c      	adds	r7, #28
 800165a:	46bd      	mov	sp, r7
 800165c:	bd90      	pop	{r4, r7, pc}
 800165e:	bf00      	nop
 8001660:	200000aa 	.word	0x200000aa

08001664 <handle_count_color_delay>:
bool g_master_led_state_change_flag = false;
uint32_t g_random_color_array[NUM_STRIPS];

#define TEST_MODE
static void handle_count_color_delay(const animation_loop_iterations_e max_iterations, const animation_delay_ms_e animation_delay_ms)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	4603      	mov	r3, r0
 800166c:	460a      	mov	r2, r1
 800166e:	71fb      	strb	r3, [r7, #7]
 8001670:	4613      	mov	r3, r2
 8001672:	80bb      	strh	r3, [r7, #4]
    if (ANIMATION_DELAY_MS_0 != animation_delay_ms) delay(animation_delay_ms);
 8001674:	88bb      	ldrh	r3, [r7, #4]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d003      	beq.n	8001682 <handle_count_color_delay+0x1e>
 800167a:	88bb      	ldrh	r3, [r7, #4]
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff fa15 	bl	8000aac <delay>
    g_animation_iterations++;
 8001682:	4b11      	ldr	r3, [pc, #68]	; (80016c8 <handle_count_color_delay+0x64>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	3301      	adds	r3, #1
 8001688:	b2da      	uxtb	r2, r3
 800168a:	4b0f      	ldr	r3, [pc, #60]	; (80016c8 <handle_count_color_delay+0x64>)
 800168c:	701a      	strb	r2, [r3, #0]
    if (MASTER_LED_STATE_DEMO == g_master_led_state)
 800168e:	4b0f      	ldr	r3, [pc, #60]	; (80016cc <handle_count_color_delay+0x68>)
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d114      	bne.n	80016c0 <handle_count_color_delay+0x5c>
    {
        if (max_iterations == g_animation_iterations)
 8001696:	4b0c      	ldr	r3, [pc, #48]	; (80016c8 <handle_count_color_delay+0x64>)
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	79fa      	ldrb	r2, [r7, #7]
 800169c:	429a      	cmp	r2, r3
 800169e:	d10f      	bne.n	80016c0 <handle_count_color_delay+0x5c>
        {
#if defined(TEST_MODE)
            g_loop_led_state = (led_state_e) (g_loop_led_state + 1);
 80016a0:	4b0b      	ldr	r3, [pc, #44]	; (80016d0 <handle_count_color_delay+0x6c>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	3301      	adds	r3, #1
 80016a6:	b2da      	uxtb	r2, r3
 80016a8:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <handle_count_color_delay+0x6c>)
 80016aa:	701a      	strb	r2, [r3, #0]
            if (NUM_LED_STATES == g_loop_led_state) g_loop_led_state = LED_STATE_FIRST;
 80016ac:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <handle_count_color_delay+0x6c>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	2b0a      	cmp	r3, #10
 80016b2:	d102      	bne.n	80016ba <handle_count_color_delay+0x56>
 80016b4:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <handle_count_color_delay+0x6c>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	701a      	strb	r2, [r3, #0]
#else
            g_loop_led_state = animate_led_state_randomize(g_loop_led_state);
#endif
            g_animation_iterations = 0;
 80016ba:	4b03      	ldr	r3, [pc, #12]	; (80016c8 <handle_count_color_delay+0x64>)
 80016bc:	2200      	movs	r2, #0
 80016be:	701a      	strb	r2, [r3, #0]
        }
    }
}
 80016c0:	bf00      	nop
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	200000a1 	.word	0x200000a1
 80016cc:	200000a0 	.word	0x200000a0
 80016d0:	20000004 	.word	0x20000004

080016d4 <task_animate_led>:



void task_animate_led(void *argument)
{
 80016d4:	b590      	push	{r4, r7, lr}
 80016d6:	b087      	sub	sp, #28
 80016d8:	af02      	add	r7, sp, #8
 80016da:	6078      	str	r0, [r7, #4]
	color_hex_code_e color = COLOR_HEX_MAROON;
 80016dc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80016e0:	60fb      	str	r3, [r7, #12]
	board_init_stop_timer();
 80016e2:	f006 fc69 	bl	8007fb8 <board_init_stop_timer>
    animate_led_solid_custom_color((uint16_t)STRIP_BIT_ALL_SET, COLOR_HEX_BLACK);
 80016e6:	2100      	movs	r1, #0
 80016e8:	2001      	movs	r0, #1
 80016ea:	f7ff fac4 	bl	8000c76 <animate_led_solid_custom_color>
    osDelay(1000);
 80016ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016f2:	f000 fc75 	bl	8001fe0 <osDelay>
	while (1)
	{
	    switch(g_loop_led_state)
 80016f6:	4b60      	ldr	r3, [pc, #384]	; (8001878 <task_animate_led+0x1a4>)
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	2b09      	cmp	r3, #9
 80016fc:	f200 80b9 	bhi.w	8001872 <task_animate_led+0x19e>
 8001700:	a201      	add	r2, pc, #4	; (adr r2, 8001708 <task_animate_led+0x34>)
 8001702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001706:	bf00      	nop
 8001708:	08001731 	.word	0x08001731
 800170c:	08001747 	.word	0x08001747
 8001710:	08001761 	.word	0x08001761
 8001714:	08001785 	.word	0x08001785
 8001718:	080017a5 	.word	0x080017a5
 800171c:	080017b7 	.word	0x080017b7
 8001720:	080017e3 	.word	0x080017e3
 8001724:	0800180d 	.word	0x0800180d
 8001728:	08001825 	.word	0x08001825
 800172c:	08001859 	.word	0x08001859
	        {
	            case LED_STATE_WHITE_COLOR:
	                animate_led_solid_custom_color((uint16_t)STRIP_BIT_ALL_SET, COLOR_HEX_WHITE);
 8001730:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8001734:	2001      	movs	r0, #1
 8001736:	f7ff fa9e 	bl	8000c76 <animate_led_solid_custom_color>
	                handle_count_color_delay(ANIMATION_LOOP_ITERATIONS_1, ANIMATION_DELAY_MS_5000);
 800173a:	f241 3188 	movw	r1, #5000	; 0x1388
 800173e:	2001      	movs	r0, #1
 8001740:	f7ff ff90 	bl	8001664 <handle_count_color_delay>
	            break;
 8001744:	e096      	b.n	8001874 <task_animate_led+0x1a0>
	            case LED_STATE_SOLID_COLOR:
	                color = COLOR_HEX_MAROON;
 8001746:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800174a:	60fb      	str	r3, [r7, #12]
	                animate_led_solid_custom_color((uint16_t)STRIP_BIT_ALL_SET, (color_hex_code_e)color);
 800174c:	68f9      	ldr	r1, [r7, #12]
 800174e:	2001      	movs	r0, #1
 8001750:	f7ff fa91 	bl	8000c76 <animate_led_solid_custom_color>
	                handle_count_color_delay(ANIMATION_LOOP_ITERATIONS_5, ANIMATION_DELAY_MS_5000);
 8001754:	f241 3188 	movw	r1, #5000	; 0x1388
 8001758:	2005      	movs	r0, #5
 800175a:	f7ff ff83 	bl	8001664 <handle_count_color_delay>
	            break;
 800175e:	e089      	b.n	8001874 <task_animate_led+0x1a0>
	            case LED_STATE_SPARKLE_NO_FILL:
	                // SRW OK!!!
	                // need to force all colors off before transitioning to this state
	                animate_led_turn_all_pixels_off();
 8001760:	f7ff faa1 	bl	8000ca6 <animate_led_turn_all_pixels_off>
	                animate_led_sparkle_only_random_color(STRIP_BIT_ALL_SET, false, random_num(20,80));//random(0, 50));
 8001764:	2150      	movs	r1, #80	; 0x50
 8001766:	2014      	movs	r0, #20
 8001768:	f006 ff4c 	bl	8008604 <random_num>
 800176c:	4603      	mov	r3, r0
 800176e:	b29b      	uxth	r3, r3
 8001770:	461a      	mov	r2, r3
 8001772:	2100      	movs	r1, #0
 8001774:	2001      	movs	r0, #1
 8001776:	f7ff fc75 	bl	8001064 <animate_led_sparkle_only_random_color>
	                handle_count_color_delay(ANIMATION_LOOP_ITERATIONS_5, ANIMATION_DELAY_MS_0);
 800177a:	2100      	movs	r1, #0
 800177c:	2005      	movs	r0, #5
 800177e:	f7ff ff71 	bl	8001664 <handle_count_color_delay>
	            break;
 8001782:	e077      	b.n	8001874 <task_animate_led+0x1a0>
	            case LED_STATE_SPARKLE_FILL:
	                // SRW ok!!!
	                animate_led_sparkle_only_random_color(STRIP_BIT_ALL_SET, true, random_num(20,80));
 8001784:	2150      	movs	r1, #80	; 0x50
 8001786:	2014      	movs	r0, #20
 8001788:	f006 ff3c 	bl	8008604 <random_num>
 800178c:	4603      	mov	r3, r0
 800178e:	b29b      	uxth	r3, r3
 8001790:	461a      	mov	r2, r3
 8001792:	2101      	movs	r1, #1
 8001794:	2001      	movs	r0, #1
 8001796:	f7ff fc65 	bl	8001064 <animate_led_sparkle_only_random_color>
	                handle_count_color_delay(ANIMATION_LOOP_ITERATIONS_10, ANIMATION_DELAY_MS_0);
 800179a:	2100      	movs	r1, #0
 800179c:	200a      	movs	r0, #10
 800179e:	f7ff ff61 	bl	8001664 <handle_count_color_delay>
	            break;
 80017a2:	e067      	b.n	8001874 <task_animate_led+0x1a0>
	            case LED_STATE_RAINBOW_CYCLE:
	                // SRW OK!!!
	                animate_led_rainbow_cycle(STRIP_BIT_ALL_SET, 0);
 80017a4:	2100      	movs	r1, #0
 80017a6:	2001      	movs	r0, #1
 80017a8:	f7ff fccc 	bl	8001144 <animate_led_rainbow_cycle>
	                handle_count_color_delay(ANIMATION_LOOP_ITERATIONS_5, ANIMATION_DELAY_MS_0);
 80017ac:	2100      	movs	r1, #0
 80017ae:	2005      	movs	r0, #5
 80017b0:	f7ff ff58 	bl	8001664 <handle_count_color_delay>
	            break;
 80017b4:	e05e      	b.n	8001874 <task_animate_led+0x1a0>
	            case LED_STATE_THEATER_CHASE:
	                // SRW ok !!!
	                animate_led_theater_chase(STRIP_BIT_ALL_SET, color_led_get_random_color(), animate_led_delay_in_animations());
 80017b6:	f000 f861 	bl	800187c <color_led_get_random_color>
 80017ba:	4604      	mov	r4, r0
 80017bc:	f7ff f9f6 	bl	8000bac <animate_led_delay_in_animations>
 80017c0:	eef0 7a40 	vmov.f32	s15, s0
 80017c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017c8:	ee17 3a90 	vmov	r3, s15
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	461a      	mov	r2, r3
 80017d0:	4621      	mov	r1, r4
 80017d2:	2001      	movs	r0, #1
 80017d4:	f7ff fd68 	bl	80012a8 <animate_led_theater_chase>
	                handle_count_color_delay(ANIMATION_LOOP_ITERATIONS_10, ANIMATION_DELAY_MS_0);
 80017d8:	2100      	movs	r1, #0
 80017da:	200a      	movs	r0, #10
 80017dc:	f7ff ff42 	bl	8001664 <handle_count_color_delay>
	            break;
 80017e0:	e048      	b.n	8001874 <task_animate_led+0x1a0>
	            case LED_STATE_THEATER_CHASE_RAINBOW:
	                // SRW ok!!!!
	                animate_led_theater_chase_rainbow(STRIP_BIT_ALL_SET, animate_led_delay_in_animations());
 80017e2:	f7ff f9e3 	bl	8000bac <animate_led_delay_in_animations>
 80017e6:	eef0 7a40 	vmov.f32	s15, s0
 80017ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017ee:	ee17 3a90 	vmov	r3, s15
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	4619      	mov	r1, r3
 80017f6:	2001      	movs	r0, #1
 80017f8:	f7ff fde2 	bl	80013c0 <animate_led_theater_chase_rainbow>
	                g_loop_led_state = LED_STATE_TWINKLE;
 80017fc:	4b1e      	ldr	r3, [pc, #120]	; (8001878 <task_animate_led+0x1a4>)
 80017fe:	2208      	movs	r2, #8
 8001800:	701a      	strb	r2, [r3, #0]
	                handle_count_color_delay(ANIMATION_LOOP_ITERATIONS_2, ANIMATION_DELAY_MS_0);
 8001802:	2100      	movs	r1, #0
 8001804:	2002      	movs	r0, #2
 8001806:	f7ff ff2d 	bl	8001664 <handle_count_color_delay>
	            break;
 800180a:	e033      	b.n	8001874 <task_animate_led+0x1a0>
	            case LED_STATE_FADE_IN_AND_OUT:
	                // SRW ok!!!
	                animate_led_fade_in_fade_out((uint16_t)STRIP_BIT_ALL_SET, color_led_get_random_color());
 800180c:	f000 f836 	bl	800187c <color_led_get_random_color>
 8001810:	4603      	mov	r3, r0
 8001812:	4619      	mov	r1, r3
 8001814:	2001      	movs	r0, #1
 8001816:	f7ff fa87 	bl	8000d28 <animate_led_fade_in_fade_out>
	                handle_count_color_delay(ANIMATION_LOOP_ITERATIONS_10, ANIMATION_DELAY_MS_0);
 800181a:	2100      	movs	r1, #0
 800181c:	200a      	movs	r0, #10
 800181e:	f7ff ff21 	bl	8001664 <handle_count_color_delay>
	            break;
 8001822:	e027      	b.n	8001874 <task_animate_led+0x1a0>
	            case LED_STATE_TWINKLE:
	                // SRW ok!!!
	                animate_led_turn_all_pixels_off();
 8001824:	f7ff fa3f 	bl	8000ca6 <animate_led_turn_all_pixels_off>
	                animate_led_twinkle(STRIP_BIT_ALL_SET, color_led_get_random_color(), (uint32_t)((float)NUM_LEDS * (float)0.8), animate_led_delay_in_animations(), false);
 8001828:	f000 f828 	bl	800187c <color_led_get_random_color>
 800182c:	4604      	mov	r4, r0
 800182e:	f7ff f9bd 	bl	8000bac <animate_led_delay_in_animations>
 8001832:	eef0 7a40 	vmov.f32	s15, s0
 8001836:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800183a:	ee17 3a90 	vmov	r3, s15
 800183e:	b29b      	uxth	r3, r3
 8001840:	2200      	movs	r2, #0
 8001842:	9200      	str	r2, [sp, #0]
 8001844:	22a8      	movs	r2, #168	; 0xa8
 8001846:	4621      	mov	r1, r4
 8001848:	2001      	movs	r0, #1
 800184a:	f7ff fba9 	bl	8000fa0 <animate_led_twinkle>
	                handle_count_color_delay(ANIMATION_LOOP_ITERATIONS_5, ANIMATION_DELAY_MS_0);
 800184e:	2100      	movs	r1, #0
 8001850:	2005      	movs	r0, #5
 8001852:	f7ff ff07 	bl	8001664 <handle_count_color_delay>
	            break;
 8001856:	e00d      	b.n	8001874 <task_animate_led+0x1a0>
	            case LED_STATE_SPELL:
	                // SRW ok!!!
	                animate_led_only_spell_word(STRIP_BIT_ALL_SET, color_led_get_random_color(), 30);
 8001858:	f000 f810 	bl	800187c <color_led_get_random_color>
 800185c:	4603      	mov	r3, r0
 800185e:	221e      	movs	r2, #30
 8001860:	4619      	mov	r1, r3
 8001862:	2001      	movs	r0, #1
 8001864:	f7ff fa29 	bl	8000cba <animate_led_only_spell_word>
	                handle_count_color_delay(ANIMATION_LOOP_ITERATIONS_100, ANIMATION_DELAY_MS_0);
 8001868:	2100      	movs	r1, #0
 800186a:	2064      	movs	r0, #100	; 0x64
 800186c:	f7ff fefa 	bl	8001664 <handle_count_color_delay>
	            break;
 8001870:	e000      	b.n	8001874 <task_animate_led+0x1a0>
	            default:
	            break;
 8001872:	bf00      	nop
	    switch(g_loop_led_state)
 8001874:	e73f      	b.n	80016f6 <task_animate_led+0x22>
 8001876:	bf00      	nop
 8001878:	20000004 	.word	0x20000004

0800187c <color_led_get_random_color>:
    g_color_hex_codes[COLORS_NAVY] = COLOR_HEX_NAVY;
}


uint32_t color_led_get_random_color(void)
{
 800187c:	b590      	push	{r4, r7, lr}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
	uint32_t random_color = (random_num(0, 255) << 16) | (random_num(0, 255) << 8) | (random_num(0, 255));
 8001882:	21ff      	movs	r1, #255	; 0xff
 8001884:	2000      	movs	r0, #0
 8001886:	f006 febd 	bl	8008604 <random_num>
 800188a:	4603      	mov	r3, r0
 800188c:	041c      	lsls	r4, r3, #16
 800188e:	21ff      	movs	r1, #255	; 0xff
 8001890:	2000      	movs	r0, #0
 8001892:	f006 feb7 	bl	8008604 <random_num>
 8001896:	4603      	mov	r3, r0
 8001898:	021b      	lsls	r3, r3, #8
 800189a:	431c      	orrs	r4, r3
 800189c:	21ff      	movs	r1, #255	; 0xff
 800189e:	2000      	movs	r0, #0
 80018a0:	f006 feb0 	bl	8008604 <random_num>
 80018a4:	4603      	mov	r3, r0
 80018a6:	4323      	orrs	r3, r4
 80018a8:	607b      	str	r3, [r7, #4]
	return random_color;
 80018aa:	687b      	ldr	r3, [r7, #4]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd90      	pop	{r4, r7, pc}

080018b4 <color_led_cur_color_red_hex>:
	return g_color_hex_codes[g_led_color];
}


uint8_t color_led_cur_color_red_hex(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
	return (((g_color_hex_codes[g_led_color] & 0xFF0000) >> 16) / COLOR_LED_MAX_BRIGHTNESS_DIVISOR);
 80018b8:	4b07      	ldr	r3, [pc, #28]	; (80018d8 <color_led_cur_color_red_hex+0x24>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	461a      	mov	r2, r3
 80018be:	4b07      	ldr	r3, [pc, #28]	; (80018dc <color_led_cur_color_red_hex+0x28>)
 80018c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018c4:	0c1b      	lsrs	r3, r3, #16
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	089b      	lsrs	r3, r3, #2
 80018ca:	b2db      	uxtb	r3, r3
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	200000a7 	.word	0x200000a7
 80018dc:	200019f8 	.word	0x200019f8

080018e0 <color_led_cur_color_green_hex>:


uint8_t color_led_cur_color_green_hex(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
	return (((g_color_hex_codes[g_led_color] & 0x00FF00) >> 8) / COLOR_LED_MAX_BRIGHTNESS_DIVISOR);
 80018e4:	4b07      	ldr	r3, [pc, #28]	; (8001904 <color_led_cur_color_green_hex+0x24>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	461a      	mov	r2, r3
 80018ea:	4b07      	ldr	r3, [pc, #28]	; (8001908 <color_led_cur_color_green_hex+0x28>)
 80018ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018f0:	0a1b      	lsrs	r3, r3, #8
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	089b      	lsrs	r3, r3, #2
 80018f6:	b2db      	uxtb	r3, r3
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	200000a7 	.word	0x200000a7
 8001908:	200019f8 	.word	0x200019f8

0800190c <color_led_cur_color_blue_hex>:


uint8_t color_led_cur_color_blue_hex(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
	return ((g_color_hex_codes[g_led_color] & 0x0000FF) / COLOR_LED_MAX_BRIGHTNESS_DIVISOR);
 8001910:	4b06      	ldr	r3, [pc, #24]	; (800192c <color_led_cur_color_blue_hex+0x20>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	461a      	mov	r2, r3
 8001916:	4b06      	ldr	r3, [pc, #24]	; (8001930 <color_led_cur_color_blue_hex+0x24>)
 8001918:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800191c:	b2db      	uxtb	r3, r3
 800191e:	089b      	lsrs	r3, r3, #2
 8001920:	b2db      	uxtb	r3, r3
}
 8001922:	4618      	mov	r0, r3
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr
 800192c:	200000a7 	.word	0x200000a7
 8001930:	200019f8 	.word	0x200019f8

08001934 <reset_ws2812b>:

extern volatile int datasentflag;

uint16_t pwm_reset[50] = {0};
void reset_ws2812b(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwm_reset, 50);
 8001938:	2332      	movs	r3, #50	; 0x32
 800193a:	4a0f      	ldr	r2, [pc, #60]	; (8001978 <reset_ws2812b+0x44>)
 800193c:	2100      	movs	r1, #0
 800193e:	480f      	ldr	r0, [pc, #60]	; (800197c <reset_ws2812b+0x48>)
 8001940:	f005 f8d0 	bl	8006ae4 <HAL_TIM_PWM_Start_DMA>
    HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_2, (uint32_t *)pwm_reset, 50);
 8001944:	2332      	movs	r3, #50	; 0x32
 8001946:	4a0c      	ldr	r2, [pc, #48]	; (8001978 <reset_ws2812b+0x44>)
 8001948:	2104      	movs	r1, #4
 800194a:	480c      	ldr	r0, [pc, #48]	; (800197c <reset_ws2812b+0x48>)
 800194c:	f005 f8ca 	bl	8006ae4 <HAL_TIM_PWM_Start_DMA>
    HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_3, (uint32_t *)pwm_reset, 50);
 8001950:	2332      	movs	r3, #50	; 0x32
 8001952:	4a09      	ldr	r2, [pc, #36]	; (8001978 <reset_ws2812b+0x44>)
 8001954:	2108      	movs	r1, #8
 8001956:	4809      	ldr	r0, [pc, #36]	; (800197c <reset_ws2812b+0x48>)
 8001958:	f005 f8c4 	bl	8006ae4 <HAL_TIM_PWM_Start_DMA>
    HAL_TIM_PWM_Start_DMA(&htim15, TIM_CHANNEL_1, (uint32_t *)pwm_reset, 50);
 800195c:	2332      	movs	r3, #50	; 0x32
 800195e:	4a06      	ldr	r2, [pc, #24]	; (8001978 <reset_ws2812b+0x44>)
 8001960:	2100      	movs	r1, #0
 8001962:	4807      	ldr	r0, [pc, #28]	; (8001980 <reset_ws2812b+0x4c>)
 8001964:	f005 f8be 	bl	8006ae4 <HAL_TIM_PWM_Start_DMA>
    HAL_TIM_PWM_Start_DMA(&htim16, TIM_CHANNEL_1, (uint32_t *)pwm_reset, 50);
 8001968:	2332      	movs	r3, #50	; 0x32
 800196a:	4a03      	ldr	r2, [pc, #12]	; (8001978 <reset_ws2812b+0x44>)
 800196c:	2100      	movs	r1, #0
 800196e:	4805      	ldr	r0, [pc, #20]	; (8001984 <reset_ws2812b+0x50>)
 8001970:	f005 f8b8 	bl	8006ae4 <HAL_TIM_PWM_Start_DMA>
}
 8001974:	bf00      	nop
 8001976:	bd80      	pop	{r7, pc}
 8001978:	200000b0 	.word	0x200000b0
 800197c:	20001e7c 	.word	0x20001e7c
 8001980:	20001d7c 	.word	0x20001d7c
 8001984:	20001ec8 	.word	0x20001ec8

08001988 <ws2812_convert_strip_num_to_strip_bit>:

static strip_bit_e ws2812_convert_strip_num_to_strip_bit(strip_num_e strip_num)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	4603      	mov	r3, r0
 8001990:	71fb      	strb	r3, [r7, #7]
	return (strip_bit_e)(strip_num + 1);
 8001992:	79fb      	ldrb	r3, [r7, #7]
 8001994:	3301      	adds	r3, #1
 8001996:	b2db      	uxtb	r3, r3
}
 8001998:	4618      	mov	r0, r3
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <ws2812_convert_strip_bit_to_strip_num>:


static strip_num_e ws2812_convert_strip_bit_to_strip_num(strip_bit_e strip_bit)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	4603      	mov	r3, r0
 80019ac:	71fb      	strb	r3, [r7, #7]
	return (strip_num_e)(strip_bit - 1);
 80019ae:	79fb      	ldrb	r3, [r7, #7]
 80019b0:	3b01      	subs	r3, #1
 80019b2:	b2db      	uxtb	r3, r3
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <ws2812_get_strip_size>:

uint16_t ws2812_get_strip_size(const strip_bit_e strip_bit)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	4603      	mov	r3, r0
 80019c8:	71fb      	strb	r3, [r7, #7]
	uint16_t strip_size = 0;
 80019ca:	2300      	movs	r3, #0
 80019cc:	81fb      	strh	r3, [r7, #14]
	if (STRIP_BIT_ALL_SET == strip_bit) strip_size = g_max_strip_length;
 80019ce:	79fb      	ldrb	r3, [r7, #7]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d103      	bne.n	80019dc <ws2812_get_strip_size+0x1c>
 80019d4:	4b09      	ldr	r3, [pc, #36]	; (80019fc <ws2812_get_strip_size+0x3c>)
 80019d6:	881b      	ldrh	r3, [r3, #0]
 80019d8:	81fb      	strh	r3, [r7, #14]
 80019da:	e009      	b.n	80019f0 <ws2812_get_strip_size+0x30>
	else strip_size = strip_length[ws2812_convert_strip_num_to_strip_bit(strip_bit)];
 80019dc:	79fb      	ldrb	r3, [r7, #7]
 80019de:	4618      	mov	r0, r3
 80019e0:	f7ff ffd2 	bl	8001988 <ws2812_convert_strip_num_to_strip_bit>
 80019e4:	4603      	mov	r3, r0
 80019e6:	461a      	mov	r2, r3
 80019e8:	4b05      	ldr	r3, [pc, #20]	; (8001a00 <ws2812_get_strip_size+0x40>)
 80019ea:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80019ee:	81fb      	strh	r3, [r7, #14]
	return strip_size;
 80019f0:	89fb      	ldrh	r3, [r7, #14]
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3710      	adds	r7, #16
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	200000ac 	.word	0x200000ac
 8001a00:	20000008 	.word	0x20000008

08001a04 <ws2812_get_num_active_animation_leds>:
	return STRIP_BIT_NO_MORE_SET;  // if this is returned
}


uint16_t ws2812_get_num_active_animation_leds(const strip_mask_t strip_mask)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	80fb      	strh	r3, [r7, #6]
	uint16_t strip_size = 0;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	81fb      	strh	r3, [r7, #14]
	if (STRIP_BIT_ALL_SET == strip_mask) strip_size = g_num_leds;
 8001a12:	88fb      	ldrh	r3, [r7, #6]
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d103      	bne.n	8001a20 <ws2812_get_num_active_animation_leds+0x1c>
 8001a18:	4b09      	ldr	r3, [pc, #36]	; (8001a40 <ws2812_get_num_active_animation_leds+0x3c>)
 8001a1a:	881b      	ldrh	r3, [r3, #0]
 8001a1c:	81fb      	strh	r3, [r7, #14]
 8001a1e:	e008      	b.n	8001a32 <ws2812_get_num_active_animation_leds+0x2e>
	else
	{
#if defined(STRIP_1_LENGTH)
		if (STRIP_BIT_1 & strip_mask) strip_size += STRIP_1_LENGTH;
 8001a20:	88fb      	ldrh	r3, [r7, #6]
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d002      	beq.n	8001a32 <ws2812_get_num_active_animation_leds+0x2e>
 8001a2c:	89fb      	ldrh	r3, [r7, #14]
 8001a2e:	33d2      	adds	r3, #210	; 0xd2
 8001a30:	81fb      	strh	r3, [r7, #14]
#endif
#if defined(STRIP_9_LENGTH)
		if (STRIP_BIT_9 & strip_mask) strip_size += STRIP_9_LENGTH;
#endif
	}
	return strip_size;
 8001a32:	89fb      	ldrh	r3, [r7, #14]
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3714      	adds	r7, #20
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr
 8001a40:	200000a8 	.word	0x200000a8

08001a44 <ws2812_led_get_max_strip_size>:


uint16_t ws2812_led_get_max_strip_size(const strip_mask_t strip_mask)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	80fb      	strh	r3, [r7, #6]
	uint16_t strip_size = 0;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	81fb      	strh	r3, [r7, #14]
	if (STRIP_BIT_ALL_SET == strip_mask) strip_size = g_max_strip_length;
 8001a52:	88fb      	ldrh	r3, [r7, #6]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d103      	bne.n	8001a60 <ws2812_led_get_max_strip_size+0x1c>
 8001a58:	4b0a      	ldr	r3, [pc, #40]	; (8001a84 <ws2812_led_get_max_strip_size+0x40>)
 8001a5a:	881b      	ldrh	r3, [r3, #0]
 8001a5c:	81fb      	strh	r3, [r7, #14]
 8001a5e:	e00a      	b.n	8001a76 <ws2812_led_get_max_strip_size+0x32>
	else
	{
#if defined(STRIP_1_LENGTH)
		if ((STRIP_BIT_1 & strip_mask) && (strip_size < STRIP_1_LENGTH)) strip_size = STRIP_1_LENGTH;
 8001a60:	88fb      	ldrh	r3, [r7, #6]
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d004      	beq.n	8001a76 <ws2812_led_get_max_strip_size+0x32>
 8001a6c:	89fb      	ldrh	r3, [r7, #14]
 8001a6e:	2bd1      	cmp	r3, #209	; 0xd1
 8001a70:	d801      	bhi.n	8001a76 <ws2812_led_get_max_strip_size+0x32>
 8001a72:	23d2      	movs	r3, #210	; 0xd2
 8001a74:	81fb      	strh	r3, [r7, #14]
#endif
#if defined(STRIP_9_LENGTH)
		if ((STRIP_BIT_9 & strip_mask) && (strip_size < STRIP_9_LENGTH)) strip_size = STRIP_9_LENGTH;
#endif
	}
	return strip_size;
 8001a76:	89fb      	ldrh	r3, [r7, #14]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3714      	adds	r7, #20
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	200000ac 	.word	0x200000ac

08001a88 <ws2812_pixel_is_in_strip_range>:


bool ws2812_pixel_is_in_strip_range(strip_bit_e strip_bit, uint16_t pixel)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	4603      	mov	r3, r0
 8001a90:	460a      	mov	r2, r1
 8001a92:	71fb      	strb	r3, [r7, #7]
 8001a94:	4613      	mov	r3, r2
 8001a96:	80bb      	strh	r3, [r7, #4]
	bool return_val = false;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	73fb      	strb	r3, [r7, #15]
#if defined(STRIP_1_LENGTH)
	if ((STRIP_BIT_1 == strip_bit) && (pixel < STRIP_1_LENGTH)) return_val = true;
 8001a9c:	79fb      	ldrb	r3, [r7, #7]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d104      	bne.n	8001aac <ws2812_pixel_is_in_strip_range+0x24>
 8001aa2:	88bb      	ldrh	r3, [r7, #4]
 8001aa4:	2bd1      	cmp	r3, #209	; 0xd1
 8001aa6:	d801      	bhi.n	8001aac <ws2812_pixel_is_in_strip_range+0x24>
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	73fb      	strb	r3, [r7, #15]
	else if ((STRIP_BIT_8 == strip_bit) && (pixel < STRIP_8_LENGTH)) return_val = true;
#endif
#if defined(STRIP_9_LENGTH)
	else if ((STRIP_BIT_9 == strip_bit) && (pixel < STRIP_9_LENGTH)) return_val = true;
#endif
	return return_val;
 8001aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3714      	adds	r7, #20
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
	...

08001abc <ws2812b_set_led>:


void ws2812b_set_led(const strip_bit_e strip_bit, uint16_t led_num, color_t red, color_t green, color_t blue)
{
 8001abc:	b590      	push	{r4, r7, lr}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4604      	mov	r4, r0
 8001ac4:	4608      	mov	r0, r1
 8001ac6:	4611      	mov	r1, r2
 8001ac8:	461a      	mov	r2, r3
 8001aca:	4623      	mov	r3, r4
 8001acc:	71fb      	strb	r3, [r7, #7]
 8001ace:	4603      	mov	r3, r0
 8001ad0:	80bb      	strh	r3, [r7, #4]
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	71bb      	strb	r3, [r7, #6]
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	70fb      	strb	r3, [r7, #3]
	strip_num_e strip_num = ws2812_convert_strip_bit_to_strip_num(strip_bit);
 8001ada:	79fb      	ldrb	r3, [r7, #7]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff ff61 	bl	80019a4 <ws2812_convert_strip_bit_to_strip_num>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	73fb      	strb	r3, [r7, #15]
	(gp_ws28128b_strip[strip_num] + led_num)->red = red;
 8001ae6:	7bfb      	ldrb	r3, [r7, #15]
 8001ae8:	4a12      	ldr	r2, [pc, #72]	; (8001b34 <ws2812b_set_led+0x78>)
 8001aea:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001aee:	88ba      	ldrh	r2, [r7, #4]
 8001af0:	4613      	mov	r3, r2
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	4413      	add	r3, r2
 8001af6:	440b      	add	r3, r1
 8001af8:	79ba      	ldrb	r2, [r7, #6]
 8001afa:	701a      	strb	r2, [r3, #0]
	(gp_ws28128b_strip[strip_num] + led_num)->green = green;
 8001afc:	7bfb      	ldrb	r3, [r7, #15]
 8001afe:	4a0d      	ldr	r2, [pc, #52]	; (8001b34 <ws2812b_set_led+0x78>)
 8001b00:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001b04:	88ba      	ldrh	r2, [r7, #4]
 8001b06:	4613      	mov	r3, r2
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	4413      	add	r3, r2
 8001b0c:	440b      	add	r3, r1
 8001b0e:	78fa      	ldrb	r2, [r7, #3]
 8001b10:	705a      	strb	r2, [r3, #1]
	(gp_ws28128b_strip[strip_num] + led_num)->blue = blue;
 8001b12:	7bfb      	ldrb	r3, [r7, #15]
 8001b14:	4a07      	ldr	r2, [pc, #28]	; (8001b34 <ws2812b_set_led+0x78>)
 8001b16:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001b1a:	88ba      	ldrh	r2, [r7, #4]
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	4413      	add	r3, r2
 8001b22:	440b      	add	r3, r1
 8001b24:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001b28:	709a      	strb	r2, [r3, #2]
}
 8001b2a:	bf00      	nop
 8001b2c:	3714      	adds	r7, #20
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd90      	pop	{r4, r7, pc}
 8001b32:	bf00      	nop
 8001b34:	20001c9c 	.word	0x20001c9c

08001b38 <ws2812b_fill_pwm_buffer>:


void ws2812b_fill_pwm_buffer(const strip_bit_e strip_bit)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b086      	sub	sp, #24
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	71fb      	strb	r3, [r7, #7]
	// fill the pwm data here  
	uint16_t strip_size = ws2812_get_strip_size(strip_bit);
 8001b42:	79fb      	ldrb	r3, [r7, #7]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff ff3b 	bl	80019c0 <ws2812_get_strip_size>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	823b      	strh	r3, [r7, #16]
	uint32_t color = 0;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60fb      	str	r3, [r7, #12]
	strip_num_e strip_num = ws2812_convert_strip_bit_to_strip_num(strip_bit);
 8001b52:	79fb      	ldrb	r3, [r7, #7]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff ff25 	bl	80019a4 <ws2812_convert_strip_bit_to_strip_num>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	72fb      	strb	r3, [r7, #11]
//	if (g_pwm_data_ping) gp_pwm_data_fill = gp_pwm_data_ping;
//	else gp_pwm_data_fill = gp_pwm_data_pong;
	for (uint16_t iii = 0; iii < strip_size; iii++)
 8001b5e:	2300      	movs	r3, #0
 8001b60:	82fb      	strh	r3, [r7, #22]
 8001b62:	e04a      	b.n	8001bfa <ws2812b_fill_pwm_buffer+0xc2>
	{
		color = (((gp_ws28128b_strip[strip_num] + iii)->green) << 16) | (((gp_ws28128b_strip[strip_num] + iii)->red) << 8) | (((gp_ws28128b_strip[strip_num] + iii)->blue));
 8001b64:	7afb      	ldrb	r3, [r7, #11]
 8001b66:	4a4b      	ldr	r2, [pc, #300]	; (8001c94 <ws2812b_fill_pwm_buffer+0x15c>)
 8001b68:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001b6c:	8afa      	ldrh	r2, [r7, #22]
 8001b6e:	4613      	mov	r3, r2
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	4413      	add	r3, r2
 8001b74:	440b      	add	r3, r1
 8001b76:	785b      	ldrb	r3, [r3, #1]
 8001b78:	0419      	lsls	r1, r3, #16
 8001b7a:	7afb      	ldrb	r3, [r7, #11]
 8001b7c:	4a45      	ldr	r2, [pc, #276]	; (8001c94 <ws2812b_fill_pwm_buffer+0x15c>)
 8001b7e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001b82:	8afa      	ldrh	r2, [r7, #22]
 8001b84:	4613      	mov	r3, r2
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	4413      	add	r3, r2
 8001b8a:	4403      	add	r3, r0
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	021b      	lsls	r3, r3, #8
 8001b90:	4319      	orrs	r1, r3
 8001b92:	7afb      	ldrb	r3, [r7, #11]
 8001b94:	4a3f      	ldr	r2, [pc, #252]	; (8001c94 <ws2812b_fill_pwm_buffer+0x15c>)
 8001b96:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001b9a:	8afa      	ldrh	r2, [r7, #22]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	4413      	add	r3, r2
 8001ba2:	4403      	add	r3, r0
 8001ba4:	789b      	ldrb	r3, [r3, #2]
 8001ba6:	430b      	orrs	r3, r1
 8001ba8:	60fb      	str	r3, [r7, #12]
		for (uint8_t yyy = 0; yyy < BITS_PER_BYTE * sizeof(ws2812b_led_t); yyy++)
 8001baa:	2300      	movs	r3, #0
 8001bac:	757b      	strb	r3, [r7, #21]
 8001bae:	e01e      	b.n	8001bee <ws2812b_fill_pwm_buffer+0xb6>
		{
			gp_pwm_data_fill[(iii * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + yyy] = (color & (1 << (23 - yyy))) ? (uint16_t)(WS2812B_BIT_SET_CYCLES + 1) : (uint16_t)WS2812B_BIT_RESET_CYCLES;
 8001bb0:	7d7b      	ldrb	r3, [r7, #21]
 8001bb2:	f1c3 0317 	rsb	r3, r3, #23
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <ws2812b_fill_pwm_buffer+0x92>
 8001bc6:	2028      	movs	r0, #40	; 0x28
 8001bc8:	e000      	b.n	8001bcc <ws2812b_fill_pwm_buffer+0x94>
 8001bca:	2014      	movs	r0, #20
 8001bcc:	4b32      	ldr	r3, [pc, #200]	; (8001c98 <ws2812b_fill_pwm_buffer+0x160>)
 8001bce:	6819      	ldr	r1, [r3, #0]
 8001bd0:	8afa      	ldrh	r2, [r7, #22]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	4413      	add	r3, r2
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	461a      	mov	r2, r3
 8001bdc:	7d7b      	ldrb	r3, [r7, #21]
 8001bde:	4413      	add	r3, r2
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	440b      	add	r3, r1
 8001be4:	4602      	mov	r2, r0
 8001be6:	801a      	strh	r2, [r3, #0]
		for (uint8_t yyy = 0; yyy < BITS_PER_BYTE * sizeof(ws2812b_led_t); yyy++)
 8001be8:	7d7b      	ldrb	r3, [r7, #21]
 8001bea:	3301      	adds	r3, #1
 8001bec:	757b      	strb	r3, [r7, #21]
 8001bee:	7d7b      	ldrb	r3, [r7, #21]
 8001bf0:	2b17      	cmp	r3, #23
 8001bf2:	d9dd      	bls.n	8001bb0 <ws2812b_fill_pwm_buffer+0x78>
	for (uint16_t iii = 0; iii < strip_size; iii++)
 8001bf4:	8afb      	ldrh	r3, [r7, #22]
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	82fb      	strh	r3, [r7, #22]
 8001bfa:	8afa      	ldrh	r2, [r7, #22]
 8001bfc:	8a3b      	ldrh	r3, [r7, #16]
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d3b0      	bcc.n	8001b64 <ws2812b_fill_pwm_buffer+0x2c>
		}
	}
	for (uint16_t iii = 0; iii < WS2812B_RESET_TIME_CYCLES; iii++)
 8001c02:	2300      	movs	r3, #0
 8001c04:	827b      	strh	r3, [r7, #18]
 8001c06:	e010      	b.n	8001c2a <ws2812b_fill_pwm_buffer+0xf2>
	{
		gp_pwm_data_fill[(strip_size * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + iii] = 0;
 8001c08:	4b23      	ldr	r3, [pc, #140]	; (8001c98 <ws2812b_fill_pwm_buffer+0x160>)
 8001c0a:	6819      	ldr	r1, [r3, #0]
 8001c0c:	8a3a      	ldrh	r2, [r7, #16]
 8001c0e:	4613      	mov	r3, r2
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	4413      	add	r3, r2
 8001c14:	00db      	lsls	r3, r3, #3
 8001c16:	461a      	mov	r2, r3
 8001c18:	8a7b      	ldrh	r3, [r7, #18]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	440b      	add	r3, r1
 8001c20:	2200      	movs	r2, #0
 8001c22:	801a      	strh	r2, [r3, #0]
	for (uint16_t iii = 0; iii < WS2812B_RESET_TIME_CYCLES; iii++)
 8001c24:	8a7b      	ldrh	r3, [r7, #18]
 8001c26:	3301      	adds	r3, #1
 8001c28:	827b      	strh	r3, [r7, #18]
 8001c2a:	8a7b      	ldrh	r3, [r7, #18]
 8001c2c:	ee07 3a90 	vmov	s15, r3
 8001c30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c34:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001c9c <ws2812b_fill_pwm_buffer+0x164>
 8001c38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c40:	d4e2      	bmi.n	8001c08 <ws2812b_fill_pwm_buffer+0xd0>
//	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_2, (uint32_t *)gp_pwm_data_fill, (strip_size * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + WS2812B_RESET_TIME_CYCLES);
//	datasentflag = 0;
//	while (!datasentflag);//{HAL_Delay(1);};
//    datasentflag = 0;

	HAL_TIM_PWM_Start_DMA(&htim15, TIM_CHANNEL_1, (uint32_t *)gp_pwm_data_fill, (strip_size * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + WS2812B_RESET_TIME_CYCLES);
 8001c42:	4b15      	ldr	r3, [pc, #84]	; (8001c98 <ws2812b_fill_pwm_buffer+0x160>)
 8001c44:	6819      	ldr	r1, [r3, #0]
 8001c46:	8a3a      	ldrh	r2, [r7, #16]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	005b      	lsls	r3, r3, #1
 8001c4c:	4413      	add	r3, r2
 8001c4e:	00db      	lsls	r3, r3, #3
 8001c50:	ee07 3a90 	vmov	s15, r3
 8001c54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c58:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001c9c <ws2812b_fill_pwm_buffer+0x164>
 8001c5c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c64:	ee17 3a90 	vmov	r3, s15
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	460a      	mov	r2, r1
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	480c      	ldr	r0, [pc, #48]	; (8001ca0 <ws2812b_fill_pwm_buffer+0x168>)
 8001c70:	f004 ff38 	bl	8006ae4 <HAL_TIM_PWM_Start_DMA>
	datasentflag = 0;
 8001c74:	4b0b      	ldr	r3, [pc, #44]	; (8001ca4 <ws2812b_fill_pwm_buffer+0x16c>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	601a      	str	r2, [r3, #0]
	while (!datasentflag);//{HAL_Delay(1);};
 8001c7a:	bf00      	nop
 8001c7c:	4b09      	ldr	r3, [pc, #36]	; (8001ca4 <ws2812b_fill_pwm_buffer+0x16c>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d0fb      	beq.n	8001c7c <ws2812b_fill_pwm_buffer+0x144>
	datasentflag = 0;
 8001c84:	4b07      	ldr	r3, [pc, #28]	; (8001ca4 <ws2812b_fill_pwm_buffer+0x16c>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]

//	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_3, (uint32_t *)gp_pwm_data_fill, (strip_size * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + WS2812B_RESET_TIME_CYCLES);
//	datasentflag = 0;
//	while (!datasentflag);//{HAL_Delay(1);};
//	datasentflag = 0;
}
 8001c8a:	bf00      	nop
 8001c8c:	3718      	adds	r7, #24
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20001c9c 	.word	0x20001c9c
 8001c98:	20001ca4 	.word	0x20001ca4
 8001c9c:	453b8000 	.word	0x453b8000
 8001ca0:	20001d7c 	.word	0x20001d7c
 8001ca4:	200019dc 	.word	0x200019dc

08001ca8 <ws2812b_init>:
	// call TIM PWM DMA to reset.
}


void ws2812b_init(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
#if defined(STRIP_1_LENGTH)
	gp_ws28128b_strip[STRIP_NUM_1] = g_strip_1;
 8001cae:	4b24      	ldr	r3, [pc, #144]	; (8001d40 <ws2812b_init+0x98>)
 8001cb0:	4a24      	ldr	r2, [pc, #144]	; (8001d44 <ws2812b_init+0x9c>)
 8001cb2:	601a      	str	r2, [r3, #0]
#endif
#if defined(STRIP_4_LENGTH)
	gp_ws28128b_strip[STRIP_NUM_4] = g_strip_4;
#endif

	uint8_t num_strips = NUM_STRIPS;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	70fb      	strb	r3, [r7, #3]
	for (int iii = 0; iii < NUM_STRIPS; iii++)
 8001cb8:	2300      	movs	r3, #0
 8001cba:	607b      	str	r3, [r7, #4]
 8001cbc:	e00f      	b.n	8001cde <ws2812b_init+0x36>
	{
		g_all_strip_mask |= 1 << iii;
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	b21a      	sxth	r2, r3
 8001cc8:	4b1f      	ldr	r3, [pc, #124]	; (8001d48 <ws2812b_init+0xa0>)
 8001cca:	881b      	ldrh	r3, [r3, #0]
 8001ccc:	b21b      	sxth	r3, r3
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	b21b      	sxth	r3, r3
 8001cd2:	b29a      	uxth	r2, r3
 8001cd4:	4b1c      	ldr	r3, [pc, #112]	; (8001d48 <ws2812b_init+0xa0>)
 8001cd6:	801a      	strh	r2, [r3, #0]
	for (int iii = 0; iii < NUM_STRIPS; iii++)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	3301      	adds	r3, #1
 8001cdc:	607b      	str	r3, [r7, #4]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	ddec      	ble.n	8001cbe <ws2812b_init+0x16>
	}
	
	switch (num_strips)
 8001ce4:	78fb      	ldrb	r3, [r7, #3]
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d10d      	bne.n	8001d06 <ws2812b_init+0x5e>
		case 2:
			g_num_leds += STRIP_2_LENGTH;
			if (STRIP_2_LENGTH > g_max_strip_length) g_max_strip_length = STRIP_2_LENGTH;
#endif
		case 1:
			g_num_leds += STRIP_1_LENGTH;
 8001cea:	4b18      	ldr	r3, [pc, #96]	; (8001d4c <ws2812b_init+0xa4>)
 8001cec:	881b      	ldrh	r3, [r3, #0]
 8001cee:	33d2      	adds	r3, #210	; 0xd2
 8001cf0:	b29a      	uxth	r2, r3
 8001cf2:	4b16      	ldr	r3, [pc, #88]	; (8001d4c <ws2812b_init+0xa4>)
 8001cf4:	801a      	strh	r2, [r3, #0]
			if (STRIP_1_LENGTH > g_max_strip_length) g_max_strip_length = STRIP_1_LENGTH;
 8001cf6:	4b16      	ldr	r3, [pc, #88]	; (8001d50 <ws2812b_init+0xa8>)
 8001cf8:	881b      	ldrh	r3, [r3, #0]
 8001cfa:	2bd1      	cmp	r3, #209	; 0xd1
 8001cfc:	d802      	bhi.n	8001d04 <ws2812b_init+0x5c>
 8001cfe:	4b14      	ldr	r3, [pc, #80]	; (8001d50 <ws2812b_init+0xa8>)
 8001d00:	22d2      	movs	r2, #210	; 0xd2
 8001d02:	801a      	strh	r2, [r3, #0]
		break;
 8001d04:	bf00      	nop
	}
	gp_pwm_data_fill = malloc((sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_max_strip_length) + WS2812B_RESET_TIME_CYCLES);
 8001d06:	4b12      	ldr	r3, [pc, #72]	; (8001d50 <ws2812b_init+0xa8>)
 8001d08:	881b      	ldrh	r3, [r3, #0]
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	4413      	add	r3, r2
 8001d12:	00db      	lsls	r3, r3, #3
 8001d14:	ee07 3a90 	vmov	s15, r3
 8001d18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d1c:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001d54 <ws2812b_init+0xac>
 8001d20:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001d24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d28:	ee17 0a90 	vmov	r0, s15
 8001d2c:	f007 f88e 	bl	8008e4c <malloc>
 8001d30:	4603      	mov	r3, r0
 8001d32:	461a      	mov	r2, r3
 8001d34:	4b08      	ldr	r3, [pc, #32]	; (8001d58 <ws2812b_init+0xb0>)
 8001d36:	601a      	str	r2, [r3, #0]
//	gp_pwm_data_ping = malloc((sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_max_strip_length) + WS2812B_RESET_TIME_CYCLES);
//	gp_pwm_data_pong = malloc((sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_max_strip_length) + WS2812B_RESET_TIME_CYCLES);
}
 8001d38:	bf00      	nop
 8001d3a:	3708      	adds	r7, #8
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	20001c9c 	.word	0x20001c9c
 8001d44:	20001a24 	.word	0x20001a24
 8001d48:	200000aa 	.word	0x200000aa
 8001d4c:	200000a8 	.word	0x200000a8
 8001d50:	200000ac 	.word	0x200000ac
 8001d54:	453b8000 	.word	0x453b8000
 8001d58:	20001ca4 	.word	0x20001ca4

08001d5c <ws2812b_show>:

void ws2812b_show(const strip_mask_t strip_mask)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	4603      	mov	r3, r0
 8001d64:	80fb      	strh	r3, [r7, #6]
	for (uint8_t iii = 0; iii < STRIP_BIT_NUM_STRIPS; iii++)
 8001d66:	2300      	movs	r3, #0
 8001d68:	73fb      	strb	r3, [r7, #15]
 8001d6a:	e010      	b.n	8001d8e <ws2812b_show+0x32>
	{
		if ((1 << iii) & strip_mask)
 8001d6c:	88fa      	ldrh	r2, [r7, #6]
 8001d6e:	7bfb      	ldrb	r3, [r7, #15]
 8001d70:	fa42 f303 	asr.w	r3, r2, r3
 8001d74:	f003 0301 	and.w	r3, r3, #1
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d005      	beq.n	8001d88 <ws2812b_show+0x2c>
		{
			ws2812b_fill_pwm_buffer(iii + 1); // iii = strip num!
 8001d7c:	7bfb      	ldrb	r3, [r7, #15]
 8001d7e:	3301      	adds	r3, #1
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7ff fed8 	bl	8001b38 <ws2812b_fill_pwm_buffer>
	for (uint8_t iii = 0; iii < STRIP_BIT_NUM_STRIPS; iii++)
 8001d88:	7bfb      	ldrb	r3, [r7, #15]
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	73fb      	strb	r3, [r7, #15]
 8001d8e:	7bfb      	ldrb	r3, [r7, #15]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d0eb      	beq.n	8001d6c <ws2812b_show+0x10>
			// get the data in pwm form.. 
		} // show it
	}
}
 8001d94:	bf00      	nop
 8001d96:	bf00      	nop
 8001d98:	3710      	adds	r7, #16
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
	...

08001da0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	4603      	mov	r3, r0
 8001da8:	6039      	str	r1, [r7, #0]
 8001daa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	db0a      	blt.n	8001dca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	b2da      	uxtb	r2, r3
 8001db8:	490c      	ldr	r1, [pc, #48]	; (8001dec <__NVIC_SetPriority+0x4c>)
 8001dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dbe:	0112      	lsls	r2, r2, #4
 8001dc0:	b2d2      	uxtb	r2, r2
 8001dc2:	440b      	add	r3, r1
 8001dc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dc8:	e00a      	b.n	8001de0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	b2da      	uxtb	r2, r3
 8001dce:	4908      	ldr	r1, [pc, #32]	; (8001df0 <__NVIC_SetPriority+0x50>)
 8001dd0:	79fb      	ldrb	r3, [r7, #7]
 8001dd2:	f003 030f 	and.w	r3, r3, #15
 8001dd6:	3b04      	subs	r3, #4
 8001dd8:	0112      	lsls	r2, r2, #4
 8001dda:	b2d2      	uxtb	r2, r2
 8001ddc:	440b      	add	r3, r1
 8001dde:	761a      	strb	r2, [r3, #24]
}
 8001de0:	bf00      	nop
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr
 8001dec:	e000e100 	.word	0xe000e100
 8001df0:	e000ed00 	.word	0xe000ed00

08001df4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8001df8:	4b05      	ldr	r3, [pc, #20]	; (8001e10 <SysTick_Handler+0x1c>)
 8001dfa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8001dfc:	f001 fcfe 	bl	80037fc <xTaskGetSchedulerState>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d001      	beq.n	8001e0a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8001e06:	f002 fae7 	bl	80043d8 <xPortSysTickHandler>
  }
}
 8001e0a:	bf00      	nop
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	e000e010 	.word	0xe000e010

08001e14 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001e18:	2100      	movs	r1, #0
 8001e1a:	f06f 0004 	mvn.w	r0, #4
 8001e1e:	f7ff ffbf 	bl	8001da0 <__NVIC_SetPriority>
#endif
}
 8001e22:	bf00      	nop
 8001e24:	bd80      	pop	{r7, pc}
	...

08001e28 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001e2e:	f3ef 8305 	mrs	r3, IPSR
 8001e32:	603b      	str	r3, [r7, #0]
  return(result);
 8001e34:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d003      	beq.n	8001e42 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8001e3a:	f06f 0305 	mvn.w	r3, #5
 8001e3e:	607b      	str	r3, [r7, #4]
 8001e40:	e00c      	b.n	8001e5c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001e42:	4b0a      	ldr	r3, [pc, #40]	; (8001e6c <osKernelInitialize+0x44>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d105      	bne.n	8001e56 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001e4a:	4b08      	ldr	r3, [pc, #32]	; (8001e6c <osKernelInitialize+0x44>)
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001e50:	2300      	movs	r3, #0
 8001e52:	607b      	str	r3, [r7, #4]
 8001e54:	e002      	b.n	8001e5c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8001e56:	f04f 33ff 	mov.w	r3, #4294967295
 8001e5a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001e5c:	687b      	ldr	r3, [r7, #4]
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	20000114 	.word	0x20000114

08001e70 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001e76:	f3ef 8305 	mrs	r3, IPSR
 8001e7a:	603b      	str	r3, [r7, #0]
  return(result);
 8001e7c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d003      	beq.n	8001e8a <osKernelStart+0x1a>
    stat = osErrorISR;
 8001e82:	f06f 0305 	mvn.w	r3, #5
 8001e86:	607b      	str	r3, [r7, #4]
 8001e88:	e010      	b.n	8001eac <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001e8a:	4b0b      	ldr	r3, [pc, #44]	; (8001eb8 <osKernelStart+0x48>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d109      	bne.n	8001ea6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001e92:	f7ff ffbf 	bl	8001e14 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001e96:	4b08      	ldr	r3, [pc, #32]	; (8001eb8 <osKernelStart+0x48>)
 8001e98:	2202      	movs	r2, #2
 8001e9a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001e9c:	f001 f866 	bl	8002f6c <vTaskStartScheduler>
      stat = osOK;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	607b      	str	r3, [r7, #4]
 8001ea4:	e002      	b.n	8001eac <osKernelStart+0x3c>
    } else {
      stat = osError;
 8001ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eaa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001eac:	687b      	ldr	r3, [r7, #4]
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	20000114 	.word	0x20000114

08001ebc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b08e      	sub	sp, #56	; 0x38
 8001ec0:	af04      	add	r7, sp, #16
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001ecc:	f3ef 8305 	mrs	r3, IPSR
 8001ed0:	617b      	str	r3, [r7, #20]
  return(result);
 8001ed2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d17e      	bne.n	8001fd6 <osThreadNew+0x11a>
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d07b      	beq.n	8001fd6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8001ede:	2380      	movs	r3, #128	; 0x80
 8001ee0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8001ee2:	2318      	movs	r3, #24
 8001ee4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8001eea:	f04f 33ff 	mov.w	r3, #4294967295
 8001eee:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d045      	beq.n	8001f82 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d002      	beq.n	8001f04 <osThreadNew+0x48>
        name = attr->name;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	699b      	ldr	r3, [r3, #24]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d002      	beq.n	8001f12 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d008      	beq.n	8001f2a <osThreadNew+0x6e>
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	2b38      	cmp	r3, #56	; 0x38
 8001f1c:	d805      	bhi.n	8001f2a <osThreadNew+0x6e>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <osThreadNew+0x72>
        return (NULL);
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	e054      	b.n	8001fd8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	695b      	ldr	r3, [r3, #20]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d003      	beq.n	8001f3e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	695b      	ldr	r3, [r3, #20]
 8001f3a:	089b      	lsrs	r3, r3, #2
 8001f3c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d00e      	beq.n	8001f64 <osThreadNew+0xa8>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	2b5b      	cmp	r3, #91	; 0x5b
 8001f4c:	d90a      	bls.n	8001f64 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d006      	beq.n	8001f64 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	695b      	ldr	r3, [r3, #20]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d002      	beq.n	8001f64 <osThreadNew+0xa8>
        mem = 1;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	61bb      	str	r3, [r7, #24]
 8001f62:	e010      	b.n	8001f86 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d10c      	bne.n	8001f86 <osThreadNew+0xca>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d108      	bne.n	8001f86 <osThreadNew+0xca>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	691b      	ldr	r3, [r3, #16]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d104      	bne.n	8001f86 <osThreadNew+0xca>
          mem = 0;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	61bb      	str	r3, [r7, #24]
 8001f80:	e001      	b.n	8001f86 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8001f82:	2300      	movs	r3, #0
 8001f84:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d110      	bne.n	8001fae <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001f94:	9202      	str	r2, [sp, #8]
 8001f96:	9301      	str	r3, [sp, #4]
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	9300      	str	r3, [sp, #0]
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	6a3a      	ldr	r2, [r7, #32]
 8001fa0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001fa2:	68f8      	ldr	r0, [r7, #12]
 8001fa4:	f000 fe0c 	bl	8002bc0 <xTaskCreateStatic>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	613b      	str	r3, [r7, #16]
 8001fac:	e013      	b.n	8001fd6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d110      	bne.n	8001fd6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001fb4:	6a3b      	ldr	r3, [r7, #32]
 8001fb6:	b29a      	uxth	r2, r3
 8001fb8:	f107 0310 	add.w	r3, r7, #16
 8001fbc:	9301      	str	r3, [sp, #4]
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	9300      	str	r3, [sp, #0]
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001fc6:	68f8      	ldr	r0, [r7, #12]
 8001fc8:	f000 fe57 	bl	8002c7a <xTaskCreate>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d001      	beq.n	8001fd6 <osThreadNew+0x11a>
            hTask = NULL;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001fd6:	693b      	ldr	r3, [r7, #16]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3728      	adds	r7, #40	; 0x28
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001fe8:	f3ef 8305 	mrs	r3, IPSR
 8001fec:	60bb      	str	r3, [r7, #8]
  return(result);
 8001fee:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d003      	beq.n	8001ffc <osDelay+0x1c>
    stat = osErrorISR;
 8001ff4:	f06f 0305 	mvn.w	r3, #5
 8001ff8:	60fb      	str	r3, [r7, #12]
 8001ffa:	e007      	b.n	800200c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d002      	beq.n	800200c <osDelay+0x2c>
      vTaskDelay(ticks);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f000 ff7c 	bl	8002f04 <vTaskDelay>
    }
  }

  return (stat);
 800200c:	68fb      	ldr	r3, [r7, #12]
}
 800200e:	4618      	mov	r0, r3
 8002010:	3710      	adds	r7, #16
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
	...

08002018 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002018:	b480      	push	{r7}
 800201a:	b085      	sub	sp, #20
 800201c:	af00      	add	r7, sp, #0
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	60b9      	str	r1, [r7, #8]
 8002022:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	4a07      	ldr	r2, [pc, #28]	; (8002044 <vApplicationGetIdleTaskMemory+0x2c>)
 8002028:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	4a06      	ldr	r2, [pc, #24]	; (8002048 <vApplicationGetIdleTaskMemory+0x30>)
 800202e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2280      	movs	r2, #128	; 0x80
 8002034:	601a      	str	r2, [r3, #0]
}
 8002036:	bf00      	nop
 8002038:	3714      	adds	r7, #20
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	20000118 	.word	0x20000118
 8002048:	20000174 	.word	0x20000174

0800204c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	4a07      	ldr	r2, [pc, #28]	; (8002078 <vApplicationGetTimerTaskMemory+0x2c>)
 800205c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	4a06      	ldr	r2, [pc, #24]	; (800207c <vApplicationGetTimerTaskMemory+0x30>)
 8002062:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f44f 7280 	mov.w	r2, #256	; 0x100
 800206a:	601a      	str	r2, [r3, #0]
}
 800206c:	bf00      	nop
 800206e:	3714      	adds	r7, #20
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr
 8002078:	20000374 	.word	0x20000374
 800207c:	200003d0 	.word	0x200003d0

08002080 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f103 0208 	add.w	r2, r3, #8
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f04f 32ff 	mov.w	r2, #4294967295
 8002098:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f103 0208 	add.w	r2, r3, #8
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f103 0208 	add.w	r2, r3, #8
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80020b4:	bf00      	nop
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80020ce:	bf00      	nop
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80020da:	b480      	push	{r7}
 80020dc:	b085      	sub	sp, #20
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
 80020e2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	68fa      	ldr	r2, [r7, #12]
 80020ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	689a      	ldr	r2, [r3, #8]
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	683a      	ldr	r2, [r7, #0]
 80020fe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	683a      	ldr	r2, [r7, #0]
 8002104:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	1c5a      	adds	r2, r3, #1
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	601a      	str	r2, [r3, #0]
}
 8002116:	bf00      	nop
 8002118:	3714      	adds	r7, #20
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr

08002122 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002122:	b480      	push	{r7}
 8002124:	b085      	sub	sp, #20
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
 800212a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002138:	d103      	bne.n	8002142 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	e00c      	b.n	800215c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	3308      	adds	r3, #8
 8002146:	60fb      	str	r3, [r7, #12]
 8002148:	e002      	b.n	8002150 <vListInsert+0x2e>
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	68ba      	ldr	r2, [r7, #8]
 8002158:	429a      	cmp	r2, r3
 800215a:	d2f6      	bcs.n	800214a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	685a      	ldr	r2, [r3, #4]
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	683a      	ldr	r2, [r7, #0]
 800216a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	68fa      	ldr	r2, [r7, #12]
 8002170:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	1c5a      	adds	r2, r3, #1
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	601a      	str	r2, [r3, #0]
}
 8002188:	bf00      	nop
 800218a:	3714      	adds	r7, #20
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	691b      	ldr	r3, [r3, #16]
 80021a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	6892      	ldr	r2, [r2, #8]
 80021aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	6852      	ldr	r2, [r2, #4]
 80021b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d103      	bne.n	80021c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689a      	ldr	r2, [r3, #8]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	1e5a      	subs	r2, r3, #1
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3714      	adds	r7, #20
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d10a      	bne.n	8002212 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80021fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002200:	f383 8811 	msr	BASEPRI, r3
 8002204:	f3bf 8f6f 	isb	sy
 8002208:	f3bf 8f4f 	dsb	sy
 800220c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800220e:	bf00      	nop
 8002210:	e7fe      	b.n	8002210 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002212:	f002 f84f 	bl	80042b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800221e:	68f9      	ldr	r1, [r7, #12]
 8002220:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002222:	fb01 f303 	mul.w	r3, r1, r3
 8002226:	441a      	add	r2, r3
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2200      	movs	r2, #0
 8002230:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002242:	3b01      	subs	r3, #1
 8002244:	68f9      	ldr	r1, [r7, #12]
 8002246:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002248:	fb01 f303 	mul.w	r3, r1, r3
 800224c:	441a      	add	r2, r3
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	22ff      	movs	r2, #255	; 0xff
 8002256:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	22ff      	movs	r2, #255	; 0xff
 800225e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d114      	bne.n	8002292 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	691b      	ldr	r3, [r3, #16]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d01a      	beq.n	80022a6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	3310      	adds	r3, #16
 8002274:	4618      	mov	r0, r3
 8002276:	f001 f903 	bl	8003480 <xTaskRemoveFromEventList>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d012      	beq.n	80022a6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002280:	4b0c      	ldr	r3, [pc, #48]	; (80022b4 <xQueueGenericReset+0xcc>)
 8002282:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002286:	601a      	str	r2, [r3, #0]
 8002288:	f3bf 8f4f 	dsb	sy
 800228c:	f3bf 8f6f 	isb	sy
 8002290:	e009      	b.n	80022a6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	3310      	adds	r3, #16
 8002296:	4618      	mov	r0, r3
 8002298:	f7ff fef2 	bl	8002080 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	3324      	adds	r3, #36	; 0x24
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff feed 	bl	8002080 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80022a6:	f002 f835 	bl	8004314 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80022aa:	2301      	movs	r3, #1
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3710      	adds	r7, #16
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	e000ed04 	.word	0xe000ed04

080022b8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b08e      	sub	sp, #56	; 0x38
 80022bc:	af02      	add	r7, sp, #8
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	607a      	str	r2, [r7, #4]
 80022c4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d10a      	bne.n	80022e2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80022cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022d0:	f383 8811 	msr	BASEPRI, r3
 80022d4:	f3bf 8f6f 	isb	sy
 80022d8:	f3bf 8f4f 	dsb	sy
 80022dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80022de:	bf00      	nop
 80022e0:	e7fe      	b.n	80022e0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d10a      	bne.n	80022fe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80022e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022ec:	f383 8811 	msr	BASEPRI, r3
 80022f0:	f3bf 8f6f 	isb	sy
 80022f4:	f3bf 8f4f 	dsb	sy
 80022f8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80022fa:	bf00      	nop
 80022fc:	e7fe      	b.n	80022fc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d002      	beq.n	800230a <xQueueGenericCreateStatic+0x52>
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <xQueueGenericCreateStatic+0x56>
 800230a:	2301      	movs	r3, #1
 800230c:	e000      	b.n	8002310 <xQueueGenericCreateStatic+0x58>
 800230e:	2300      	movs	r3, #0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d10a      	bne.n	800232a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002318:	f383 8811 	msr	BASEPRI, r3
 800231c:	f3bf 8f6f 	isb	sy
 8002320:	f3bf 8f4f 	dsb	sy
 8002324:	623b      	str	r3, [r7, #32]
}
 8002326:	bf00      	nop
 8002328:	e7fe      	b.n	8002328 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d102      	bne.n	8002336 <xQueueGenericCreateStatic+0x7e>
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d101      	bne.n	800233a <xQueueGenericCreateStatic+0x82>
 8002336:	2301      	movs	r3, #1
 8002338:	e000      	b.n	800233c <xQueueGenericCreateStatic+0x84>
 800233a:	2300      	movs	r3, #0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d10a      	bne.n	8002356 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002344:	f383 8811 	msr	BASEPRI, r3
 8002348:	f3bf 8f6f 	isb	sy
 800234c:	f3bf 8f4f 	dsb	sy
 8002350:	61fb      	str	r3, [r7, #28]
}
 8002352:	bf00      	nop
 8002354:	e7fe      	b.n	8002354 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002356:	2350      	movs	r3, #80	; 0x50
 8002358:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	2b50      	cmp	r3, #80	; 0x50
 800235e:	d00a      	beq.n	8002376 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002364:	f383 8811 	msr	BASEPRI, r3
 8002368:	f3bf 8f6f 	isb	sy
 800236c:	f3bf 8f4f 	dsb	sy
 8002370:	61bb      	str	r3, [r7, #24]
}
 8002372:	bf00      	nop
 8002374:	e7fe      	b.n	8002374 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002376:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800237c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800237e:	2b00      	cmp	r3, #0
 8002380:	d00d      	beq.n	800239e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002384:	2201      	movs	r2, #1
 8002386:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800238a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800238e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002390:	9300      	str	r3, [sp, #0]
 8002392:	4613      	mov	r3, r2
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	68b9      	ldr	r1, [r7, #8]
 8002398:	68f8      	ldr	r0, [r7, #12]
 800239a:	f000 f805 	bl	80023a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800239e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3730      	adds	r7, #48	; 0x30
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	607a      	str	r2, [r7, #4]
 80023b4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d103      	bne.n	80023c4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	601a      	str	r2, [r3, #0]
 80023c2:	e002      	b.n	80023ca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	68fa      	ldr	r2, [r7, #12]
 80023ce:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	68ba      	ldr	r2, [r7, #8]
 80023d4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80023d6:	2101      	movs	r1, #1
 80023d8:	69b8      	ldr	r0, [r7, #24]
 80023da:	f7ff ff05 	bl	80021e8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	78fa      	ldrb	r2, [r7, #3]
 80023e2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80023e6:	bf00      	nop
 80023e8:	3710      	adds	r7, #16
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
	...

080023f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b08e      	sub	sp, #56	; 0x38
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
 80023fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80023fe:	2300      	movs	r3, #0
 8002400:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002408:	2b00      	cmp	r3, #0
 800240a:	d10a      	bne.n	8002422 <xQueueGenericSend+0x32>
	__asm volatile
 800240c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002410:	f383 8811 	msr	BASEPRI, r3
 8002414:	f3bf 8f6f 	isb	sy
 8002418:	f3bf 8f4f 	dsb	sy
 800241c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800241e:	bf00      	nop
 8002420:	e7fe      	b.n	8002420 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d103      	bne.n	8002430 <xQueueGenericSend+0x40>
 8002428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800242a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242c:	2b00      	cmp	r3, #0
 800242e:	d101      	bne.n	8002434 <xQueueGenericSend+0x44>
 8002430:	2301      	movs	r3, #1
 8002432:	e000      	b.n	8002436 <xQueueGenericSend+0x46>
 8002434:	2300      	movs	r3, #0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d10a      	bne.n	8002450 <xQueueGenericSend+0x60>
	__asm volatile
 800243a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800243e:	f383 8811 	msr	BASEPRI, r3
 8002442:	f3bf 8f6f 	isb	sy
 8002446:	f3bf 8f4f 	dsb	sy
 800244a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800244c:	bf00      	nop
 800244e:	e7fe      	b.n	800244e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	2b02      	cmp	r3, #2
 8002454:	d103      	bne.n	800245e <xQueueGenericSend+0x6e>
 8002456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800245a:	2b01      	cmp	r3, #1
 800245c:	d101      	bne.n	8002462 <xQueueGenericSend+0x72>
 800245e:	2301      	movs	r3, #1
 8002460:	e000      	b.n	8002464 <xQueueGenericSend+0x74>
 8002462:	2300      	movs	r3, #0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d10a      	bne.n	800247e <xQueueGenericSend+0x8e>
	__asm volatile
 8002468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800246c:	f383 8811 	msr	BASEPRI, r3
 8002470:	f3bf 8f6f 	isb	sy
 8002474:	f3bf 8f4f 	dsb	sy
 8002478:	623b      	str	r3, [r7, #32]
}
 800247a:	bf00      	nop
 800247c:	e7fe      	b.n	800247c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800247e:	f001 f9bd 	bl	80037fc <xTaskGetSchedulerState>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d102      	bne.n	800248e <xQueueGenericSend+0x9e>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d101      	bne.n	8002492 <xQueueGenericSend+0xa2>
 800248e:	2301      	movs	r3, #1
 8002490:	e000      	b.n	8002494 <xQueueGenericSend+0xa4>
 8002492:	2300      	movs	r3, #0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d10a      	bne.n	80024ae <xQueueGenericSend+0xbe>
	__asm volatile
 8002498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800249c:	f383 8811 	msr	BASEPRI, r3
 80024a0:	f3bf 8f6f 	isb	sy
 80024a4:	f3bf 8f4f 	dsb	sy
 80024a8:	61fb      	str	r3, [r7, #28]
}
 80024aa:	bf00      	nop
 80024ac:	e7fe      	b.n	80024ac <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80024ae:	f001 ff01 	bl	80042b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80024b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d302      	bcc.n	80024c4 <xQueueGenericSend+0xd4>
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d129      	bne.n	8002518 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80024c4:	683a      	ldr	r2, [r7, #0]
 80024c6:	68b9      	ldr	r1, [r7, #8]
 80024c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80024ca:	f000 fa0b 	bl	80028e4 <prvCopyDataToQueue>
 80024ce:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80024d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d010      	beq.n	80024fa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80024d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024da:	3324      	adds	r3, #36	; 0x24
 80024dc:	4618      	mov	r0, r3
 80024de:	f000 ffcf 	bl	8003480 <xTaskRemoveFromEventList>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d013      	beq.n	8002510 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80024e8:	4b3f      	ldr	r3, [pc, #252]	; (80025e8 <xQueueGenericSend+0x1f8>)
 80024ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	f3bf 8f4f 	dsb	sy
 80024f4:	f3bf 8f6f 	isb	sy
 80024f8:	e00a      	b.n	8002510 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80024fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d007      	beq.n	8002510 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002500:	4b39      	ldr	r3, [pc, #228]	; (80025e8 <xQueueGenericSend+0x1f8>)
 8002502:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002506:	601a      	str	r2, [r3, #0]
 8002508:	f3bf 8f4f 	dsb	sy
 800250c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002510:	f001 ff00 	bl	8004314 <vPortExitCritical>
				return pdPASS;
 8002514:	2301      	movs	r3, #1
 8002516:	e063      	b.n	80025e0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d103      	bne.n	8002526 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800251e:	f001 fef9 	bl	8004314 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002522:	2300      	movs	r3, #0
 8002524:	e05c      	b.n	80025e0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002528:	2b00      	cmp	r3, #0
 800252a:	d106      	bne.n	800253a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800252c:	f107 0314 	add.w	r3, r7, #20
 8002530:	4618      	mov	r0, r3
 8002532:	f001 f809 	bl	8003548 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002536:	2301      	movs	r3, #1
 8002538:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800253a:	f001 feeb 	bl	8004314 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800253e:	f000 fd7b 	bl	8003038 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002542:	f001 feb7 	bl	80042b4 <vPortEnterCritical>
 8002546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002548:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800254c:	b25b      	sxtb	r3, r3
 800254e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002552:	d103      	bne.n	800255c <xQueueGenericSend+0x16c>
 8002554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002556:	2200      	movs	r2, #0
 8002558:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800255c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800255e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002562:	b25b      	sxtb	r3, r3
 8002564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002568:	d103      	bne.n	8002572 <xQueueGenericSend+0x182>
 800256a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800256c:	2200      	movs	r2, #0
 800256e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002572:	f001 fecf 	bl	8004314 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002576:	1d3a      	adds	r2, r7, #4
 8002578:	f107 0314 	add.w	r3, r7, #20
 800257c:	4611      	mov	r1, r2
 800257e:	4618      	mov	r0, r3
 8002580:	f000 fff8 	bl	8003574 <xTaskCheckForTimeOut>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d124      	bne.n	80025d4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800258a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800258c:	f000 faa2 	bl	8002ad4 <prvIsQueueFull>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d018      	beq.n	80025c8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002598:	3310      	adds	r3, #16
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	4611      	mov	r1, r2
 800259e:	4618      	mov	r0, r3
 80025a0:	f000 ff1e 	bl	80033e0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80025a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025a6:	f000 fa2d 	bl	8002a04 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80025aa:	f000 fd53 	bl	8003054 <xTaskResumeAll>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	f47f af7c 	bne.w	80024ae <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80025b6:	4b0c      	ldr	r3, [pc, #48]	; (80025e8 <xQueueGenericSend+0x1f8>)
 80025b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025bc:	601a      	str	r2, [r3, #0]
 80025be:	f3bf 8f4f 	dsb	sy
 80025c2:	f3bf 8f6f 	isb	sy
 80025c6:	e772      	b.n	80024ae <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80025c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025ca:	f000 fa1b 	bl	8002a04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80025ce:	f000 fd41 	bl	8003054 <xTaskResumeAll>
 80025d2:	e76c      	b.n	80024ae <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80025d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025d6:	f000 fa15 	bl	8002a04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80025da:	f000 fd3b 	bl	8003054 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80025de:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3738      	adds	r7, #56	; 0x38
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	e000ed04 	.word	0xe000ed04

080025ec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b090      	sub	sp, #64	; 0x40
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	607a      	str	r2, [r7, #4]
 80025f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80025fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002600:	2b00      	cmp	r3, #0
 8002602:	d10a      	bne.n	800261a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002608:	f383 8811 	msr	BASEPRI, r3
 800260c:	f3bf 8f6f 	isb	sy
 8002610:	f3bf 8f4f 	dsb	sy
 8002614:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002616:	bf00      	nop
 8002618:	e7fe      	b.n	8002618 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d103      	bne.n	8002628 <xQueueGenericSendFromISR+0x3c>
 8002620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002624:	2b00      	cmp	r3, #0
 8002626:	d101      	bne.n	800262c <xQueueGenericSendFromISR+0x40>
 8002628:	2301      	movs	r3, #1
 800262a:	e000      	b.n	800262e <xQueueGenericSendFromISR+0x42>
 800262c:	2300      	movs	r3, #0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d10a      	bne.n	8002648 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002636:	f383 8811 	msr	BASEPRI, r3
 800263a:	f3bf 8f6f 	isb	sy
 800263e:	f3bf 8f4f 	dsb	sy
 8002642:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002644:	bf00      	nop
 8002646:	e7fe      	b.n	8002646 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	2b02      	cmp	r3, #2
 800264c:	d103      	bne.n	8002656 <xQueueGenericSendFromISR+0x6a>
 800264e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002652:	2b01      	cmp	r3, #1
 8002654:	d101      	bne.n	800265a <xQueueGenericSendFromISR+0x6e>
 8002656:	2301      	movs	r3, #1
 8002658:	e000      	b.n	800265c <xQueueGenericSendFromISR+0x70>
 800265a:	2300      	movs	r3, #0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d10a      	bne.n	8002676 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002664:	f383 8811 	msr	BASEPRI, r3
 8002668:	f3bf 8f6f 	isb	sy
 800266c:	f3bf 8f4f 	dsb	sy
 8002670:	623b      	str	r3, [r7, #32]
}
 8002672:	bf00      	nop
 8002674:	e7fe      	b.n	8002674 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002676:	f001 feff 	bl	8004478 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800267a:	f3ef 8211 	mrs	r2, BASEPRI
 800267e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002682:	f383 8811 	msr	BASEPRI, r3
 8002686:	f3bf 8f6f 	isb	sy
 800268a:	f3bf 8f4f 	dsb	sy
 800268e:	61fa      	str	r2, [r7, #28]
 8002690:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002692:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002694:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002698:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800269a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800269c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800269e:	429a      	cmp	r2, r3
 80026a0:	d302      	bcc.n	80026a8 <xQueueGenericSendFromISR+0xbc>
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d12f      	bne.n	8002708 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80026a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80026ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80026b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80026b8:	683a      	ldr	r2, [r7, #0]
 80026ba:	68b9      	ldr	r1, [r7, #8]
 80026bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80026be:	f000 f911 	bl	80028e4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80026c2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80026c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ca:	d112      	bne.n	80026f2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80026cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d016      	beq.n	8002702 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80026d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026d6:	3324      	adds	r3, #36	; 0x24
 80026d8:	4618      	mov	r0, r3
 80026da:	f000 fed1 	bl	8003480 <xTaskRemoveFromEventList>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d00e      	beq.n	8002702 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d00b      	beq.n	8002702 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2201      	movs	r2, #1
 80026ee:	601a      	str	r2, [r3, #0]
 80026f0:	e007      	b.n	8002702 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80026f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80026f6:	3301      	adds	r3, #1
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	b25a      	sxtb	r2, r3
 80026fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002702:	2301      	movs	r3, #1
 8002704:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002706:	e001      	b.n	800270c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002708:	2300      	movs	r3, #0
 800270a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800270c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800270e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002716:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002718:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800271a:	4618      	mov	r0, r3
 800271c:	3740      	adds	r7, #64	; 0x40
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
	...

08002724 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b08c      	sub	sp, #48	; 0x30
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002730:	2300      	movs	r3, #0
 8002732:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800273a:	2b00      	cmp	r3, #0
 800273c:	d10a      	bne.n	8002754 <xQueueReceive+0x30>
	__asm volatile
 800273e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002742:	f383 8811 	msr	BASEPRI, r3
 8002746:	f3bf 8f6f 	isb	sy
 800274a:	f3bf 8f4f 	dsb	sy
 800274e:	623b      	str	r3, [r7, #32]
}
 8002750:	bf00      	nop
 8002752:	e7fe      	b.n	8002752 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d103      	bne.n	8002762 <xQueueReceive+0x3e>
 800275a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800275c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275e:	2b00      	cmp	r3, #0
 8002760:	d101      	bne.n	8002766 <xQueueReceive+0x42>
 8002762:	2301      	movs	r3, #1
 8002764:	e000      	b.n	8002768 <xQueueReceive+0x44>
 8002766:	2300      	movs	r3, #0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d10a      	bne.n	8002782 <xQueueReceive+0x5e>
	__asm volatile
 800276c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002770:	f383 8811 	msr	BASEPRI, r3
 8002774:	f3bf 8f6f 	isb	sy
 8002778:	f3bf 8f4f 	dsb	sy
 800277c:	61fb      	str	r3, [r7, #28]
}
 800277e:	bf00      	nop
 8002780:	e7fe      	b.n	8002780 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002782:	f001 f83b 	bl	80037fc <xTaskGetSchedulerState>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d102      	bne.n	8002792 <xQueueReceive+0x6e>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d101      	bne.n	8002796 <xQueueReceive+0x72>
 8002792:	2301      	movs	r3, #1
 8002794:	e000      	b.n	8002798 <xQueueReceive+0x74>
 8002796:	2300      	movs	r3, #0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d10a      	bne.n	80027b2 <xQueueReceive+0x8e>
	__asm volatile
 800279c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027a0:	f383 8811 	msr	BASEPRI, r3
 80027a4:	f3bf 8f6f 	isb	sy
 80027a8:	f3bf 8f4f 	dsb	sy
 80027ac:	61bb      	str	r3, [r7, #24]
}
 80027ae:	bf00      	nop
 80027b0:	e7fe      	b.n	80027b0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80027b2:	f001 fd7f 	bl	80042b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80027b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ba:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80027bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d01f      	beq.n	8002802 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80027c2:	68b9      	ldr	r1, [r7, #8]
 80027c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80027c6:	f000 f8f7 	bl	80029b8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80027ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027cc:	1e5a      	subs	r2, r3, #1
 80027ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027d0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80027d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d00f      	beq.n	80027fa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027dc:	3310      	adds	r3, #16
 80027de:	4618      	mov	r0, r3
 80027e0:	f000 fe4e 	bl	8003480 <xTaskRemoveFromEventList>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d007      	beq.n	80027fa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80027ea:	4b3d      	ldr	r3, [pc, #244]	; (80028e0 <xQueueReceive+0x1bc>)
 80027ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027f0:	601a      	str	r2, [r3, #0]
 80027f2:	f3bf 8f4f 	dsb	sy
 80027f6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80027fa:	f001 fd8b 	bl	8004314 <vPortExitCritical>
				return pdPASS;
 80027fe:	2301      	movs	r3, #1
 8002800:	e069      	b.n	80028d6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d103      	bne.n	8002810 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002808:	f001 fd84 	bl	8004314 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800280c:	2300      	movs	r3, #0
 800280e:	e062      	b.n	80028d6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002812:	2b00      	cmp	r3, #0
 8002814:	d106      	bne.n	8002824 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002816:	f107 0310 	add.w	r3, r7, #16
 800281a:	4618      	mov	r0, r3
 800281c:	f000 fe94 	bl	8003548 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002820:	2301      	movs	r3, #1
 8002822:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002824:	f001 fd76 	bl	8004314 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002828:	f000 fc06 	bl	8003038 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800282c:	f001 fd42 	bl	80042b4 <vPortEnterCritical>
 8002830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002832:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002836:	b25b      	sxtb	r3, r3
 8002838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800283c:	d103      	bne.n	8002846 <xQueueReceive+0x122>
 800283e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002840:	2200      	movs	r2, #0
 8002842:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002848:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800284c:	b25b      	sxtb	r3, r3
 800284e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002852:	d103      	bne.n	800285c <xQueueReceive+0x138>
 8002854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002856:	2200      	movs	r2, #0
 8002858:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800285c:	f001 fd5a 	bl	8004314 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002860:	1d3a      	adds	r2, r7, #4
 8002862:	f107 0310 	add.w	r3, r7, #16
 8002866:	4611      	mov	r1, r2
 8002868:	4618      	mov	r0, r3
 800286a:	f000 fe83 	bl	8003574 <xTaskCheckForTimeOut>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d123      	bne.n	80028bc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002874:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002876:	f000 f917 	bl	8002aa8 <prvIsQueueEmpty>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d017      	beq.n	80028b0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002882:	3324      	adds	r3, #36	; 0x24
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	4611      	mov	r1, r2
 8002888:	4618      	mov	r0, r3
 800288a:	f000 fda9 	bl	80033e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800288e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002890:	f000 f8b8 	bl	8002a04 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002894:	f000 fbde 	bl	8003054 <xTaskResumeAll>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d189      	bne.n	80027b2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800289e:	4b10      	ldr	r3, [pc, #64]	; (80028e0 <xQueueReceive+0x1bc>)
 80028a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028a4:	601a      	str	r2, [r3, #0]
 80028a6:	f3bf 8f4f 	dsb	sy
 80028aa:	f3bf 8f6f 	isb	sy
 80028ae:	e780      	b.n	80027b2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80028b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028b2:	f000 f8a7 	bl	8002a04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80028b6:	f000 fbcd 	bl	8003054 <xTaskResumeAll>
 80028ba:	e77a      	b.n	80027b2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80028bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028be:	f000 f8a1 	bl	8002a04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80028c2:	f000 fbc7 	bl	8003054 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80028c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028c8:	f000 f8ee 	bl	8002aa8 <prvIsQueueEmpty>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f43f af6f 	beq.w	80027b2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80028d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3730      	adds	r7, #48	; 0x30
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	e000ed04 	.word	0xe000ed04

080028e4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b086      	sub	sp, #24
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80028f0:	2300      	movs	r3, #0
 80028f2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d10d      	bne.n	800291e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d14d      	bne.n	80029a6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	4618      	mov	r0, r3
 8002910:	f000 ff92 	bl	8003838 <xTaskPriorityDisinherit>
 8002914:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2200      	movs	r2, #0
 800291a:	609a      	str	r2, [r3, #8]
 800291c:	e043      	b.n	80029a6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d119      	bne.n	8002958 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6858      	ldr	r0, [r3, #4]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292c:	461a      	mov	r2, r3
 800292e:	68b9      	ldr	r1, [r7, #8]
 8002930:	f006 fa94 	bl	8008e5c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	685a      	ldr	r2, [r3, #4]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293c:	441a      	add	r2, r3
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	685a      	ldr	r2, [r3, #4]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	429a      	cmp	r2, r3
 800294c:	d32b      	bcc.n	80029a6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	605a      	str	r2, [r3, #4]
 8002956:	e026      	b.n	80029a6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	68d8      	ldr	r0, [r3, #12]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002960:	461a      	mov	r2, r3
 8002962:	68b9      	ldr	r1, [r7, #8]
 8002964:	f006 fa7a 	bl	8008e5c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	68da      	ldr	r2, [r3, #12]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002970:	425b      	negs	r3, r3
 8002972:	441a      	add	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	68da      	ldr	r2, [r3, #12]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	429a      	cmp	r2, r3
 8002982:	d207      	bcs.n	8002994 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	689a      	ldr	r2, [r3, #8]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298c:	425b      	negs	r3, r3
 800298e:	441a      	add	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2b02      	cmp	r3, #2
 8002998:	d105      	bne.n	80029a6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d002      	beq.n	80029a6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	3b01      	subs	r3, #1
 80029a4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	1c5a      	adds	r2, r3, #1
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80029ae:	697b      	ldr	r3, [r7, #20]
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3718      	adds	r7, #24
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d018      	beq.n	80029fc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	68da      	ldr	r2, [r3, #12]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d2:	441a      	add	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	68da      	ldr	r2, [r3, #12]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d303      	bcc.n	80029ec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	68d9      	ldr	r1, [r3, #12]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f4:	461a      	mov	r2, r3
 80029f6:	6838      	ldr	r0, [r7, #0]
 80029f8:	f006 fa30 	bl	8008e5c <memcpy>
	}
}
 80029fc:	bf00      	nop
 80029fe:	3708      	adds	r7, #8
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002a0c:	f001 fc52 	bl	80042b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a16:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a18:	e011      	b.n	8002a3e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d012      	beq.n	8002a48 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	3324      	adds	r3, #36	; 0x24
 8002a26:	4618      	mov	r0, r3
 8002a28:	f000 fd2a 	bl	8003480 <xTaskRemoveFromEventList>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002a32:	f000 fe01 	bl	8003638 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002a36:	7bfb      	ldrb	r3, [r7, #15]
 8002a38:	3b01      	subs	r3, #1
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	dce9      	bgt.n	8002a1a <prvUnlockQueue+0x16>
 8002a46:	e000      	b.n	8002a4a <prvUnlockQueue+0x46>
					break;
 8002a48:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	22ff      	movs	r2, #255	; 0xff
 8002a4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002a52:	f001 fc5f 	bl	8004314 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002a56:	f001 fc2d 	bl	80042b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a60:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002a62:	e011      	b.n	8002a88 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	691b      	ldr	r3, [r3, #16]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d012      	beq.n	8002a92 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	3310      	adds	r3, #16
 8002a70:	4618      	mov	r0, r3
 8002a72:	f000 fd05 	bl	8003480 <xTaskRemoveFromEventList>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d001      	beq.n	8002a80 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002a7c:	f000 fddc 	bl	8003638 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002a80:	7bbb      	ldrb	r3, [r7, #14]
 8002a82:	3b01      	subs	r3, #1
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002a88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	dce9      	bgt.n	8002a64 <prvUnlockQueue+0x60>
 8002a90:	e000      	b.n	8002a94 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002a92:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	22ff      	movs	r2, #255	; 0xff
 8002a98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002a9c:	f001 fc3a 	bl	8004314 <vPortExitCritical>
}
 8002aa0:	bf00      	nop
 8002aa2:	3710      	adds	r7, #16
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002ab0:	f001 fc00 	bl	80042b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d102      	bne.n	8002ac2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002abc:	2301      	movs	r3, #1
 8002abe:	60fb      	str	r3, [r7, #12]
 8002ac0:	e001      	b.n	8002ac6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002ac6:	f001 fc25 	bl	8004314 <vPortExitCritical>

	return xReturn;
 8002aca:	68fb      	ldr	r3, [r7, #12]
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3710      	adds	r7, #16
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002adc:	f001 fbea 	bl	80042b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d102      	bne.n	8002af2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002aec:	2301      	movs	r3, #1
 8002aee:	60fb      	str	r3, [r7, #12]
 8002af0:	e001      	b.n	8002af6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002af2:	2300      	movs	r3, #0
 8002af4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002af6:	f001 fc0d 	bl	8004314 <vPortExitCritical>

	return xReturn;
 8002afa:	68fb      	ldr	r3, [r7, #12]
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3710      	adds	r7, #16
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002b0e:	2300      	movs	r3, #0
 8002b10:	60fb      	str	r3, [r7, #12]
 8002b12:	e014      	b.n	8002b3e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002b14:	4a0f      	ldr	r2, [pc, #60]	; (8002b54 <vQueueAddToRegistry+0x50>)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d10b      	bne.n	8002b38 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002b20:	490c      	ldr	r1, [pc, #48]	; (8002b54 <vQueueAddToRegistry+0x50>)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	683a      	ldr	r2, [r7, #0]
 8002b26:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002b2a:	4a0a      	ldr	r2, [pc, #40]	; (8002b54 <vQueueAddToRegistry+0x50>)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	4413      	add	r3, r2
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002b36:	e006      	b.n	8002b46 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	60fb      	str	r3, [r7, #12]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2b07      	cmp	r3, #7
 8002b42:	d9e7      	bls.n	8002b14 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002b44:	bf00      	nop
 8002b46:	bf00      	nop
 8002b48:	3714      	adds	r7, #20
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	20001ca8 	.word	0x20001ca8

08002b58 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b086      	sub	sp, #24
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002b68:	f001 fba4 	bl	80042b4 <vPortEnterCritical>
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b72:	b25b      	sxtb	r3, r3
 8002b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b78:	d103      	bne.n	8002b82 <vQueueWaitForMessageRestricted+0x2a>
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b88:	b25b      	sxtb	r3, r3
 8002b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b8e:	d103      	bne.n	8002b98 <vQueueWaitForMessageRestricted+0x40>
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b98:	f001 fbbc 	bl	8004314 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d106      	bne.n	8002bb2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	3324      	adds	r3, #36	; 0x24
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	68b9      	ldr	r1, [r7, #8]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f000 fc3b 	bl	8003428 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002bb2:	6978      	ldr	r0, [r7, #20]
 8002bb4:	f7ff ff26 	bl	8002a04 <prvUnlockQueue>
	}
 8002bb8:	bf00      	nop
 8002bba:	3718      	adds	r7, #24
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b08e      	sub	sp, #56	; 0x38
 8002bc4:	af04      	add	r7, sp, #16
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	60b9      	str	r1, [r7, #8]
 8002bca:	607a      	str	r2, [r7, #4]
 8002bcc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d10a      	bne.n	8002bea <xTaskCreateStatic+0x2a>
	__asm volatile
 8002bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bd8:	f383 8811 	msr	BASEPRI, r3
 8002bdc:	f3bf 8f6f 	isb	sy
 8002be0:	f3bf 8f4f 	dsb	sy
 8002be4:	623b      	str	r3, [r7, #32]
}
 8002be6:	bf00      	nop
 8002be8:	e7fe      	b.n	8002be8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d10a      	bne.n	8002c06 <xTaskCreateStatic+0x46>
	__asm volatile
 8002bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bf4:	f383 8811 	msr	BASEPRI, r3
 8002bf8:	f3bf 8f6f 	isb	sy
 8002bfc:	f3bf 8f4f 	dsb	sy
 8002c00:	61fb      	str	r3, [r7, #28]
}
 8002c02:	bf00      	nop
 8002c04:	e7fe      	b.n	8002c04 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002c06:	235c      	movs	r3, #92	; 0x5c
 8002c08:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	2b5c      	cmp	r3, #92	; 0x5c
 8002c0e:	d00a      	beq.n	8002c26 <xTaskCreateStatic+0x66>
	__asm volatile
 8002c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c14:	f383 8811 	msr	BASEPRI, r3
 8002c18:	f3bf 8f6f 	isb	sy
 8002c1c:	f3bf 8f4f 	dsb	sy
 8002c20:	61bb      	str	r3, [r7, #24]
}
 8002c22:	bf00      	nop
 8002c24:	e7fe      	b.n	8002c24 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002c26:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d01e      	beq.n	8002c6c <xTaskCreateStatic+0xac>
 8002c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d01b      	beq.n	8002c6c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c36:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c3c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c40:	2202      	movs	r2, #2
 8002c42:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002c46:	2300      	movs	r3, #0
 8002c48:	9303      	str	r3, [sp, #12]
 8002c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4c:	9302      	str	r3, [sp, #8]
 8002c4e:	f107 0314 	add.w	r3, r7, #20
 8002c52:	9301      	str	r3, [sp, #4]
 8002c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c56:	9300      	str	r3, [sp, #0]
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	68b9      	ldr	r1, [r7, #8]
 8002c5e:	68f8      	ldr	r0, [r7, #12]
 8002c60:	f000 f850 	bl	8002d04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002c64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c66:	f000 f8dd 	bl	8002e24 <prvAddNewTaskToReadyList>
 8002c6a:	e001      	b.n	8002c70 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002c70:	697b      	ldr	r3, [r7, #20]
	}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3728      	adds	r7, #40	; 0x28
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}

08002c7a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002c7a:	b580      	push	{r7, lr}
 8002c7c:	b08c      	sub	sp, #48	; 0x30
 8002c7e:	af04      	add	r7, sp, #16
 8002c80:	60f8      	str	r0, [r7, #12]
 8002c82:	60b9      	str	r1, [r7, #8]
 8002c84:	603b      	str	r3, [r7, #0]
 8002c86:	4613      	mov	r3, r2
 8002c88:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002c8a:	88fb      	ldrh	r3, [r7, #6]
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f001 fc32 	bl	80044f8 <pvPortMalloc>
 8002c94:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d00e      	beq.n	8002cba <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002c9c:	205c      	movs	r0, #92	; 0x5c
 8002c9e:	f001 fc2b 	bl	80044f8 <pvPortMalloc>
 8002ca2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d003      	beq.n	8002cb2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	697a      	ldr	r2, [r7, #20]
 8002cae:	631a      	str	r2, [r3, #48]	; 0x30
 8002cb0:	e005      	b.n	8002cbe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002cb2:	6978      	ldr	r0, [r7, #20]
 8002cb4:	f001 fcec 	bl	8004690 <vPortFree>
 8002cb8:	e001      	b.n	8002cbe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d017      	beq.n	8002cf4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002ccc:	88fa      	ldrh	r2, [r7, #6]
 8002cce:	2300      	movs	r3, #0
 8002cd0:	9303      	str	r3, [sp, #12]
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	9302      	str	r3, [sp, #8]
 8002cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cd8:	9301      	str	r3, [sp, #4]
 8002cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cdc:	9300      	str	r3, [sp, #0]
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	68b9      	ldr	r1, [r7, #8]
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	f000 f80e 	bl	8002d04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002ce8:	69f8      	ldr	r0, [r7, #28]
 8002cea:	f000 f89b 	bl	8002e24 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	61bb      	str	r3, [r7, #24]
 8002cf2:	e002      	b.n	8002cfa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8002cf8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002cfa:	69bb      	ldr	r3, [r7, #24]
	}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3720      	adds	r7, #32
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b088      	sub	sp, #32
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	607a      	str	r2, [r7, #4]
 8002d10:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d14:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	21a5      	movs	r1, #165	; 0xa5
 8002d1e:	f006 f8ab 	bl	8008e78 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002d2c:	3b01      	subs	r3, #1
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	4413      	add	r3, r2
 8002d32:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	f023 0307 	bic.w	r3, r3, #7
 8002d3a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	f003 0307 	and.w	r3, r3, #7
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d00a      	beq.n	8002d5c <prvInitialiseNewTask+0x58>
	__asm volatile
 8002d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d4a:	f383 8811 	msr	BASEPRI, r3
 8002d4e:	f3bf 8f6f 	isb	sy
 8002d52:	f3bf 8f4f 	dsb	sy
 8002d56:	617b      	str	r3, [r7, #20]
}
 8002d58:	bf00      	nop
 8002d5a:	e7fe      	b.n	8002d5a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d01f      	beq.n	8002da2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d62:	2300      	movs	r3, #0
 8002d64:	61fb      	str	r3, [r7, #28]
 8002d66:	e012      	b.n	8002d8e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002d68:	68ba      	ldr	r2, [r7, #8]
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	7819      	ldrb	r1, [r3, #0]
 8002d70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	4413      	add	r3, r2
 8002d76:	3334      	adds	r3, #52	; 0x34
 8002d78:	460a      	mov	r2, r1
 8002d7a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002d7c:	68ba      	ldr	r2, [r7, #8]
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	4413      	add	r3, r2
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d006      	beq.n	8002d96 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	61fb      	str	r3, [r7, #28]
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	2b0f      	cmp	r3, #15
 8002d92:	d9e9      	bls.n	8002d68 <prvInitialiseNewTask+0x64>
 8002d94:	e000      	b.n	8002d98 <prvInitialiseNewTask+0x94>
			{
				break;
 8002d96:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002da0:	e003      	b.n	8002daa <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dac:	2b37      	cmp	r3, #55	; 0x37
 8002dae:	d901      	bls.n	8002db4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002db0:	2337      	movs	r3, #55	; 0x37
 8002db2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002db8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002dbe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc8:	3304      	adds	r3, #4
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7ff f978 	bl	80020c0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd2:	3318      	adds	r3, #24
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7ff f973 	bl	80020c0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ddc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dde:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df2:	2200      	movs	r2, #0
 8002df4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002dfe:	683a      	ldr	r2, [r7, #0]
 8002e00:	68f9      	ldr	r1, [r7, #12]
 8002e02:	69b8      	ldr	r0, [r7, #24]
 8002e04:	f001 f928 	bl	8004058 <pxPortInitialiseStack>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e0c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d002      	beq.n	8002e1a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e18:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002e1a:	bf00      	nop
 8002e1c:	3720      	adds	r7, #32
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
	...

08002e24 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002e2c:	f001 fa42 	bl	80042b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002e30:	4b2d      	ldr	r3, [pc, #180]	; (8002ee8 <prvAddNewTaskToReadyList+0xc4>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	3301      	adds	r3, #1
 8002e36:	4a2c      	ldr	r2, [pc, #176]	; (8002ee8 <prvAddNewTaskToReadyList+0xc4>)
 8002e38:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002e3a:	4b2c      	ldr	r3, [pc, #176]	; (8002eec <prvAddNewTaskToReadyList+0xc8>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d109      	bne.n	8002e56 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002e42:	4a2a      	ldr	r2, [pc, #168]	; (8002eec <prvAddNewTaskToReadyList+0xc8>)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002e48:	4b27      	ldr	r3, [pc, #156]	; (8002ee8 <prvAddNewTaskToReadyList+0xc4>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d110      	bne.n	8002e72 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002e50:	f000 fc16 	bl	8003680 <prvInitialiseTaskLists>
 8002e54:	e00d      	b.n	8002e72 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002e56:	4b26      	ldr	r3, [pc, #152]	; (8002ef0 <prvAddNewTaskToReadyList+0xcc>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d109      	bne.n	8002e72 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002e5e:	4b23      	ldr	r3, [pc, #140]	; (8002eec <prvAddNewTaskToReadyList+0xc8>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d802      	bhi.n	8002e72 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002e6c:	4a1f      	ldr	r2, [pc, #124]	; (8002eec <prvAddNewTaskToReadyList+0xc8>)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002e72:	4b20      	ldr	r3, [pc, #128]	; (8002ef4 <prvAddNewTaskToReadyList+0xd0>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	3301      	adds	r3, #1
 8002e78:	4a1e      	ldr	r2, [pc, #120]	; (8002ef4 <prvAddNewTaskToReadyList+0xd0>)
 8002e7a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002e7c:	4b1d      	ldr	r3, [pc, #116]	; (8002ef4 <prvAddNewTaskToReadyList+0xd0>)
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e88:	4b1b      	ldr	r3, [pc, #108]	; (8002ef8 <prvAddNewTaskToReadyList+0xd4>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d903      	bls.n	8002e98 <prvAddNewTaskToReadyList+0x74>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e94:	4a18      	ldr	r2, [pc, #96]	; (8002ef8 <prvAddNewTaskToReadyList+0xd4>)
 8002e96:	6013      	str	r3, [r2, #0]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	4413      	add	r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	4a15      	ldr	r2, [pc, #84]	; (8002efc <prvAddNewTaskToReadyList+0xd8>)
 8002ea6:	441a      	add	r2, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	3304      	adds	r3, #4
 8002eac:	4619      	mov	r1, r3
 8002eae:	4610      	mov	r0, r2
 8002eb0:	f7ff f913 	bl	80020da <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002eb4:	f001 fa2e 	bl	8004314 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002eb8:	4b0d      	ldr	r3, [pc, #52]	; (8002ef0 <prvAddNewTaskToReadyList+0xcc>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d00e      	beq.n	8002ede <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002ec0:	4b0a      	ldr	r3, [pc, #40]	; (8002eec <prvAddNewTaskToReadyList+0xc8>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d207      	bcs.n	8002ede <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002ece:	4b0c      	ldr	r3, [pc, #48]	; (8002f00 <prvAddNewTaskToReadyList+0xdc>)
 8002ed0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ed4:	601a      	str	r2, [r3, #0]
 8002ed6:	f3bf 8f4f 	dsb	sy
 8002eda:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002ede:	bf00      	nop
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	20000ca4 	.word	0x20000ca4
 8002eec:	200007d0 	.word	0x200007d0
 8002ef0:	20000cb0 	.word	0x20000cb0
 8002ef4:	20000cc0 	.word	0x20000cc0
 8002ef8:	20000cac 	.word	0x20000cac
 8002efc:	200007d4 	.word	0x200007d4
 8002f00:	e000ed04 	.word	0xe000ed04

08002f04 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d017      	beq.n	8002f46 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002f16:	4b13      	ldr	r3, [pc, #76]	; (8002f64 <vTaskDelay+0x60>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00a      	beq.n	8002f34 <vTaskDelay+0x30>
	__asm volatile
 8002f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f22:	f383 8811 	msr	BASEPRI, r3
 8002f26:	f3bf 8f6f 	isb	sy
 8002f2a:	f3bf 8f4f 	dsb	sy
 8002f2e:	60bb      	str	r3, [r7, #8]
}
 8002f30:	bf00      	nop
 8002f32:	e7fe      	b.n	8002f32 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002f34:	f000 f880 	bl	8003038 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002f38:	2100      	movs	r1, #0
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f000 fcea 	bl	8003914 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002f40:	f000 f888 	bl	8003054 <xTaskResumeAll>
 8002f44:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d107      	bne.n	8002f5c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002f4c:	4b06      	ldr	r3, [pc, #24]	; (8002f68 <vTaskDelay+0x64>)
 8002f4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f52:	601a      	str	r2, [r3, #0]
 8002f54:	f3bf 8f4f 	dsb	sy
 8002f58:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002f5c:	bf00      	nop
 8002f5e:	3710      	adds	r7, #16
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	20000ccc 	.word	0x20000ccc
 8002f68:	e000ed04 	.word	0xe000ed04

08002f6c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b08a      	sub	sp, #40	; 0x28
 8002f70:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002f72:	2300      	movs	r3, #0
 8002f74:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002f76:	2300      	movs	r3, #0
 8002f78:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002f7a:	463a      	mov	r2, r7
 8002f7c:	1d39      	adds	r1, r7, #4
 8002f7e:	f107 0308 	add.w	r3, r7, #8
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7ff f848 	bl	8002018 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002f88:	6839      	ldr	r1, [r7, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	68ba      	ldr	r2, [r7, #8]
 8002f8e:	9202      	str	r2, [sp, #8]
 8002f90:	9301      	str	r3, [sp, #4]
 8002f92:	2300      	movs	r3, #0
 8002f94:	9300      	str	r3, [sp, #0]
 8002f96:	2300      	movs	r3, #0
 8002f98:	460a      	mov	r2, r1
 8002f9a:	4921      	ldr	r1, [pc, #132]	; (8003020 <vTaskStartScheduler+0xb4>)
 8002f9c:	4821      	ldr	r0, [pc, #132]	; (8003024 <vTaskStartScheduler+0xb8>)
 8002f9e:	f7ff fe0f 	bl	8002bc0 <xTaskCreateStatic>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	4a20      	ldr	r2, [pc, #128]	; (8003028 <vTaskStartScheduler+0xbc>)
 8002fa6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002fa8:	4b1f      	ldr	r3, [pc, #124]	; (8003028 <vTaskStartScheduler+0xbc>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d002      	beq.n	8002fb6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	617b      	str	r3, [r7, #20]
 8002fb4:	e001      	b.n	8002fba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d102      	bne.n	8002fc6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002fc0:	f000 fcfc 	bl	80039bc <xTimerCreateTimerTask>
 8002fc4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d116      	bne.n	8002ffa <vTaskStartScheduler+0x8e>
	__asm volatile
 8002fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fd0:	f383 8811 	msr	BASEPRI, r3
 8002fd4:	f3bf 8f6f 	isb	sy
 8002fd8:	f3bf 8f4f 	dsb	sy
 8002fdc:	613b      	str	r3, [r7, #16]
}
 8002fde:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002fe0:	4b12      	ldr	r3, [pc, #72]	; (800302c <vTaskStartScheduler+0xc0>)
 8002fe2:	f04f 32ff 	mov.w	r2, #4294967295
 8002fe6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002fe8:	4b11      	ldr	r3, [pc, #68]	; (8003030 <vTaskStartScheduler+0xc4>)
 8002fea:	2201      	movs	r2, #1
 8002fec:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002fee:	4b11      	ldr	r3, [pc, #68]	; (8003034 <vTaskStartScheduler+0xc8>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002ff4:	f001 f8bc 	bl	8004170 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002ff8:	e00e      	b.n	8003018 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003000:	d10a      	bne.n	8003018 <vTaskStartScheduler+0xac>
	__asm volatile
 8003002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003006:	f383 8811 	msr	BASEPRI, r3
 800300a:	f3bf 8f6f 	isb	sy
 800300e:	f3bf 8f4f 	dsb	sy
 8003012:	60fb      	str	r3, [r7, #12]
}
 8003014:	bf00      	nop
 8003016:	e7fe      	b.n	8003016 <vTaskStartScheduler+0xaa>
}
 8003018:	bf00      	nop
 800301a:	3718      	adds	r7, #24
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}
 8003020:	08009f58 	.word	0x08009f58
 8003024:	08003651 	.word	0x08003651
 8003028:	20000cc8 	.word	0x20000cc8
 800302c:	20000cc4 	.word	0x20000cc4
 8003030:	20000cb0 	.word	0x20000cb0
 8003034:	20000ca8 	.word	0x20000ca8

08003038 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800303c:	4b04      	ldr	r3, [pc, #16]	; (8003050 <vTaskSuspendAll+0x18>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	3301      	adds	r3, #1
 8003042:	4a03      	ldr	r2, [pc, #12]	; (8003050 <vTaskSuspendAll+0x18>)
 8003044:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003046:	bf00      	nop
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr
 8003050:	20000ccc 	.word	0x20000ccc

08003054 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800305a:	2300      	movs	r3, #0
 800305c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800305e:	2300      	movs	r3, #0
 8003060:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003062:	4b42      	ldr	r3, [pc, #264]	; (800316c <xTaskResumeAll+0x118>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d10a      	bne.n	8003080 <xTaskResumeAll+0x2c>
	__asm volatile
 800306a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800306e:	f383 8811 	msr	BASEPRI, r3
 8003072:	f3bf 8f6f 	isb	sy
 8003076:	f3bf 8f4f 	dsb	sy
 800307a:	603b      	str	r3, [r7, #0]
}
 800307c:	bf00      	nop
 800307e:	e7fe      	b.n	800307e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003080:	f001 f918 	bl	80042b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003084:	4b39      	ldr	r3, [pc, #228]	; (800316c <xTaskResumeAll+0x118>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	3b01      	subs	r3, #1
 800308a:	4a38      	ldr	r2, [pc, #224]	; (800316c <xTaskResumeAll+0x118>)
 800308c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800308e:	4b37      	ldr	r3, [pc, #220]	; (800316c <xTaskResumeAll+0x118>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d162      	bne.n	800315c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003096:	4b36      	ldr	r3, [pc, #216]	; (8003170 <xTaskResumeAll+0x11c>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d05e      	beq.n	800315c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800309e:	e02f      	b.n	8003100 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030a0:	4b34      	ldr	r3, [pc, #208]	; (8003174 <xTaskResumeAll+0x120>)
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	3318      	adds	r3, #24
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7ff f871 	bl	8002194 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	3304      	adds	r3, #4
 80030b6:	4618      	mov	r0, r3
 80030b8:	f7ff f86c 	bl	8002194 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030c0:	4b2d      	ldr	r3, [pc, #180]	; (8003178 <xTaskResumeAll+0x124>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d903      	bls.n	80030d0 <xTaskResumeAll+0x7c>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030cc:	4a2a      	ldr	r2, [pc, #168]	; (8003178 <xTaskResumeAll+0x124>)
 80030ce:	6013      	str	r3, [r2, #0]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030d4:	4613      	mov	r3, r2
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	4413      	add	r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	4a27      	ldr	r2, [pc, #156]	; (800317c <xTaskResumeAll+0x128>)
 80030de:	441a      	add	r2, r3
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	3304      	adds	r3, #4
 80030e4:	4619      	mov	r1, r3
 80030e6:	4610      	mov	r0, r2
 80030e8:	f7fe fff7 	bl	80020da <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030f0:	4b23      	ldr	r3, [pc, #140]	; (8003180 <xTaskResumeAll+0x12c>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d302      	bcc.n	8003100 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80030fa:	4b22      	ldr	r3, [pc, #136]	; (8003184 <xTaskResumeAll+0x130>)
 80030fc:	2201      	movs	r2, #1
 80030fe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003100:	4b1c      	ldr	r3, [pc, #112]	; (8003174 <xTaskResumeAll+0x120>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d1cb      	bne.n	80030a0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800310e:	f000 fb55 	bl	80037bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003112:	4b1d      	ldr	r3, [pc, #116]	; (8003188 <xTaskResumeAll+0x134>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d010      	beq.n	8003140 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800311e:	f000 f847 	bl	80031b0 <xTaskIncrementTick>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d002      	beq.n	800312e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003128:	4b16      	ldr	r3, [pc, #88]	; (8003184 <xTaskResumeAll+0x130>)
 800312a:	2201      	movs	r2, #1
 800312c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	3b01      	subs	r3, #1
 8003132:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1f1      	bne.n	800311e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800313a:	4b13      	ldr	r3, [pc, #76]	; (8003188 <xTaskResumeAll+0x134>)
 800313c:	2200      	movs	r2, #0
 800313e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003140:	4b10      	ldr	r3, [pc, #64]	; (8003184 <xTaskResumeAll+0x130>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d009      	beq.n	800315c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003148:	2301      	movs	r3, #1
 800314a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800314c:	4b0f      	ldr	r3, [pc, #60]	; (800318c <xTaskResumeAll+0x138>)
 800314e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003152:	601a      	str	r2, [r3, #0]
 8003154:	f3bf 8f4f 	dsb	sy
 8003158:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800315c:	f001 f8da 	bl	8004314 <vPortExitCritical>

	return xAlreadyYielded;
 8003160:	68bb      	ldr	r3, [r7, #8]
}
 8003162:	4618      	mov	r0, r3
 8003164:	3710      	adds	r7, #16
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	20000ccc 	.word	0x20000ccc
 8003170:	20000ca4 	.word	0x20000ca4
 8003174:	20000c64 	.word	0x20000c64
 8003178:	20000cac 	.word	0x20000cac
 800317c:	200007d4 	.word	0x200007d4
 8003180:	200007d0 	.word	0x200007d0
 8003184:	20000cb8 	.word	0x20000cb8
 8003188:	20000cb4 	.word	0x20000cb4
 800318c:	e000ed04 	.word	0xe000ed04

08003190 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003196:	4b05      	ldr	r3, [pc, #20]	; (80031ac <xTaskGetTickCount+0x1c>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800319c:	687b      	ldr	r3, [r7, #4]
}
 800319e:	4618      	mov	r0, r3
 80031a0:	370c      	adds	r7, #12
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
 80031aa:	bf00      	nop
 80031ac:	20000ca8 	.word	0x20000ca8

080031b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b086      	sub	sp, #24
 80031b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80031b6:	2300      	movs	r3, #0
 80031b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031ba:	4b4f      	ldr	r3, [pc, #316]	; (80032f8 <xTaskIncrementTick+0x148>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	f040 808f 	bne.w	80032e2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80031c4:	4b4d      	ldr	r3, [pc, #308]	; (80032fc <xTaskIncrementTick+0x14c>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	3301      	adds	r3, #1
 80031ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80031cc:	4a4b      	ldr	r2, [pc, #300]	; (80032fc <xTaskIncrementTick+0x14c>)
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d120      	bne.n	800321a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80031d8:	4b49      	ldr	r3, [pc, #292]	; (8003300 <xTaskIncrementTick+0x150>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00a      	beq.n	80031f8 <xTaskIncrementTick+0x48>
	__asm volatile
 80031e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031e6:	f383 8811 	msr	BASEPRI, r3
 80031ea:	f3bf 8f6f 	isb	sy
 80031ee:	f3bf 8f4f 	dsb	sy
 80031f2:	603b      	str	r3, [r7, #0]
}
 80031f4:	bf00      	nop
 80031f6:	e7fe      	b.n	80031f6 <xTaskIncrementTick+0x46>
 80031f8:	4b41      	ldr	r3, [pc, #260]	; (8003300 <xTaskIncrementTick+0x150>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	60fb      	str	r3, [r7, #12]
 80031fe:	4b41      	ldr	r3, [pc, #260]	; (8003304 <xTaskIncrementTick+0x154>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a3f      	ldr	r2, [pc, #252]	; (8003300 <xTaskIncrementTick+0x150>)
 8003204:	6013      	str	r3, [r2, #0]
 8003206:	4a3f      	ldr	r2, [pc, #252]	; (8003304 <xTaskIncrementTick+0x154>)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6013      	str	r3, [r2, #0]
 800320c:	4b3e      	ldr	r3, [pc, #248]	; (8003308 <xTaskIncrementTick+0x158>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	3301      	adds	r3, #1
 8003212:	4a3d      	ldr	r2, [pc, #244]	; (8003308 <xTaskIncrementTick+0x158>)
 8003214:	6013      	str	r3, [r2, #0]
 8003216:	f000 fad1 	bl	80037bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800321a:	4b3c      	ldr	r3, [pc, #240]	; (800330c <xTaskIncrementTick+0x15c>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	693a      	ldr	r2, [r7, #16]
 8003220:	429a      	cmp	r2, r3
 8003222:	d349      	bcc.n	80032b8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003224:	4b36      	ldr	r3, [pc, #216]	; (8003300 <xTaskIncrementTick+0x150>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d104      	bne.n	8003238 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800322e:	4b37      	ldr	r3, [pc, #220]	; (800330c <xTaskIncrementTick+0x15c>)
 8003230:	f04f 32ff 	mov.w	r2, #4294967295
 8003234:	601a      	str	r2, [r3, #0]
					break;
 8003236:	e03f      	b.n	80032b8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003238:	4b31      	ldr	r3, [pc, #196]	; (8003300 <xTaskIncrementTick+0x150>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003248:	693a      	ldr	r2, [r7, #16]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	429a      	cmp	r2, r3
 800324e:	d203      	bcs.n	8003258 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003250:	4a2e      	ldr	r2, [pc, #184]	; (800330c <xTaskIncrementTick+0x15c>)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003256:	e02f      	b.n	80032b8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	3304      	adds	r3, #4
 800325c:	4618      	mov	r0, r3
 800325e:	f7fe ff99 	bl	8002194 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003266:	2b00      	cmp	r3, #0
 8003268:	d004      	beq.n	8003274 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	3318      	adds	r3, #24
 800326e:	4618      	mov	r0, r3
 8003270:	f7fe ff90 	bl	8002194 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003278:	4b25      	ldr	r3, [pc, #148]	; (8003310 <xTaskIncrementTick+0x160>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	429a      	cmp	r2, r3
 800327e:	d903      	bls.n	8003288 <xTaskIncrementTick+0xd8>
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003284:	4a22      	ldr	r2, [pc, #136]	; (8003310 <xTaskIncrementTick+0x160>)
 8003286:	6013      	str	r3, [r2, #0]
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800328c:	4613      	mov	r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	4413      	add	r3, r2
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	4a1f      	ldr	r2, [pc, #124]	; (8003314 <xTaskIncrementTick+0x164>)
 8003296:	441a      	add	r2, r3
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	3304      	adds	r3, #4
 800329c:	4619      	mov	r1, r3
 800329e:	4610      	mov	r0, r2
 80032a0:	f7fe ff1b 	bl	80020da <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032a8:	4b1b      	ldr	r3, [pc, #108]	; (8003318 <xTaskIncrementTick+0x168>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d3b8      	bcc.n	8003224 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80032b2:	2301      	movs	r3, #1
 80032b4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032b6:	e7b5      	b.n	8003224 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80032b8:	4b17      	ldr	r3, [pc, #92]	; (8003318 <xTaskIncrementTick+0x168>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032be:	4915      	ldr	r1, [pc, #84]	; (8003314 <xTaskIncrementTick+0x164>)
 80032c0:	4613      	mov	r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	4413      	add	r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	440b      	add	r3, r1
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d901      	bls.n	80032d4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80032d0:	2301      	movs	r3, #1
 80032d2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80032d4:	4b11      	ldr	r3, [pc, #68]	; (800331c <xTaskIncrementTick+0x16c>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d007      	beq.n	80032ec <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80032dc:	2301      	movs	r3, #1
 80032de:	617b      	str	r3, [r7, #20]
 80032e0:	e004      	b.n	80032ec <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80032e2:	4b0f      	ldr	r3, [pc, #60]	; (8003320 <xTaskIncrementTick+0x170>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	3301      	adds	r3, #1
 80032e8:	4a0d      	ldr	r2, [pc, #52]	; (8003320 <xTaskIncrementTick+0x170>)
 80032ea:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80032ec:	697b      	ldr	r3, [r7, #20]
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3718      	adds	r7, #24
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	20000ccc 	.word	0x20000ccc
 80032fc:	20000ca8 	.word	0x20000ca8
 8003300:	20000c5c 	.word	0x20000c5c
 8003304:	20000c60 	.word	0x20000c60
 8003308:	20000cbc 	.word	0x20000cbc
 800330c:	20000cc4 	.word	0x20000cc4
 8003310:	20000cac 	.word	0x20000cac
 8003314:	200007d4 	.word	0x200007d4
 8003318:	200007d0 	.word	0x200007d0
 800331c:	20000cb8 	.word	0x20000cb8
 8003320:	20000cb4 	.word	0x20000cb4

08003324 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003324:	b480      	push	{r7}
 8003326:	b085      	sub	sp, #20
 8003328:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800332a:	4b28      	ldr	r3, [pc, #160]	; (80033cc <vTaskSwitchContext+0xa8>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d003      	beq.n	800333a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003332:	4b27      	ldr	r3, [pc, #156]	; (80033d0 <vTaskSwitchContext+0xac>)
 8003334:	2201      	movs	r2, #1
 8003336:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003338:	e041      	b.n	80033be <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800333a:	4b25      	ldr	r3, [pc, #148]	; (80033d0 <vTaskSwitchContext+0xac>)
 800333c:	2200      	movs	r2, #0
 800333e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003340:	4b24      	ldr	r3, [pc, #144]	; (80033d4 <vTaskSwitchContext+0xb0>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	60fb      	str	r3, [r7, #12]
 8003346:	e010      	b.n	800336a <vTaskSwitchContext+0x46>
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d10a      	bne.n	8003364 <vTaskSwitchContext+0x40>
	__asm volatile
 800334e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003352:	f383 8811 	msr	BASEPRI, r3
 8003356:	f3bf 8f6f 	isb	sy
 800335a:	f3bf 8f4f 	dsb	sy
 800335e:	607b      	str	r3, [r7, #4]
}
 8003360:	bf00      	nop
 8003362:	e7fe      	b.n	8003362 <vTaskSwitchContext+0x3e>
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	3b01      	subs	r3, #1
 8003368:	60fb      	str	r3, [r7, #12]
 800336a:	491b      	ldr	r1, [pc, #108]	; (80033d8 <vTaskSwitchContext+0xb4>)
 800336c:	68fa      	ldr	r2, [r7, #12]
 800336e:	4613      	mov	r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	4413      	add	r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	440b      	add	r3, r1
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d0e4      	beq.n	8003348 <vTaskSwitchContext+0x24>
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	4613      	mov	r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	4413      	add	r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	4a13      	ldr	r2, [pc, #76]	; (80033d8 <vTaskSwitchContext+0xb4>)
 800338a:	4413      	add	r3, r2
 800338c:	60bb      	str	r3, [r7, #8]
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	685a      	ldr	r2, [r3, #4]
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	605a      	str	r2, [r3, #4]
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	685a      	ldr	r2, [r3, #4]
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	3308      	adds	r3, #8
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d104      	bne.n	80033ae <vTaskSwitchContext+0x8a>
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	685a      	ldr	r2, [r3, #4]
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	605a      	str	r2, [r3, #4]
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	4a09      	ldr	r2, [pc, #36]	; (80033dc <vTaskSwitchContext+0xb8>)
 80033b6:	6013      	str	r3, [r2, #0]
 80033b8:	4a06      	ldr	r2, [pc, #24]	; (80033d4 <vTaskSwitchContext+0xb0>)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6013      	str	r3, [r2, #0]
}
 80033be:	bf00      	nop
 80033c0:	3714      	adds	r7, #20
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	20000ccc 	.word	0x20000ccc
 80033d0:	20000cb8 	.word	0x20000cb8
 80033d4:	20000cac 	.word	0x20000cac
 80033d8:	200007d4 	.word	0x200007d4
 80033dc:	200007d0 	.word	0x200007d0

080033e0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d10a      	bne.n	8003406 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80033f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033f4:	f383 8811 	msr	BASEPRI, r3
 80033f8:	f3bf 8f6f 	isb	sy
 80033fc:	f3bf 8f4f 	dsb	sy
 8003400:	60fb      	str	r3, [r7, #12]
}
 8003402:	bf00      	nop
 8003404:	e7fe      	b.n	8003404 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003406:	4b07      	ldr	r3, [pc, #28]	; (8003424 <vTaskPlaceOnEventList+0x44>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	3318      	adds	r3, #24
 800340c:	4619      	mov	r1, r3
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f7fe fe87 	bl	8002122 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003414:	2101      	movs	r1, #1
 8003416:	6838      	ldr	r0, [r7, #0]
 8003418:	f000 fa7c 	bl	8003914 <prvAddCurrentTaskToDelayedList>
}
 800341c:	bf00      	nop
 800341e:	3710      	adds	r7, #16
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	200007d0 	.word	0x200007d0

08003428 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003428:	b580      	push	{r7, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d10a      	bne.n	8003450 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800343a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800343e:	f383 8811 	msr	BASEPRI, r3
 8003442:	f3bf 8f6f 	isb	sy
 8003446:	f3bf 8f4f 	dsb	sy
 800344a:	617b      	str	r3, [r7, #20]
}
 800344c:	bf00      	nop
 800344e:	e7fe      	b.n	800344e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003450:	4b0a      	ldr	r3, [pc, #40]	; (800347c <vTaskPlaceOnEventListRestricted+0x54>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	3318      	adds	r3, #24
 8003456:	4619      	mov	r1, r3
 8003458:	68f8      	ldr	r0, [r7, #12]
 800345a:	f7fe fe3e 	bl	80020da <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d002      	beq.n	800346a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003464:	f04f 33ff 	mov.w	r3, #4294967295
 8003468:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800346a:	6879      	ldr	r1, [r7, #4]
 800346c:	68b8      	ldr	r0, [r7, #8]
 800346e:	f000 fa51 	bl	8003914 <prvAddCurrentTaskToDelayedList>
	}
 8003472:	bf00      	nop
 8003474:	3718      	adds	r7, #24
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	200007d0 	.word	0x200007d0

08003480 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b086      	sub	sp, #24
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d10a      	bne.n	80034ac <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800349a:	f383 8811 	msr	BASEPRI, r3
 800349e:	f3bf 8f6f 	isb	sy
 80034a2:	f3bf 8f4f 	dsb	sy
 80034a6:	60fb      	str	r3, [r7, #12]
}
 80034a8:	bf00      	nop
 80034aa:	e7fe      	b.n	80034aa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	3318      	adds	r3, #24
 80034b0:	4618      	mov	r0, r3
 80034b2:	f7fe fe6f 	bl	8002194 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034b6:	4b1e      	ldr	r3, [pc, #120]	; (8003530 <xTaskRemoveFromEventList+0xb0>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d11d      	bne.n	80034fa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	3304      	adds	r3, #4
 80034c2:	4618      	mov	r0, r3
 80034c4:	f7fe fe66 	bl	8002194 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034cc:	4b19      	ldr	r3, [pc, #100]	; (8003534 <xTaskRemoveFromEventList+0xb4>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d903      	bls.n	80034dc <xTaskRemoveFromEventList+0x5c>
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d8:	4a16      	ldr	r2, [pc, #88]	; (8003534 <xTaskRemoveFromEventList+0xb4>)
 80034da:	6013      	str	r3, [r2, #0]
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034e0:	4613      	mov	r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	4413      	add	r3, r2
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	4a13      	ldr	r2, [pc, #76]	; (8003538 <xTaskRemoveFromEventList+0xb8>)
 80034ea:	441a      	add	r2, r3
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	3304      	adds	r3, #4
 80034f0:	4619      	mov	r1, r3
 80034f2:	4610      	mov	r0, r2
 80034f4:	f7fe fdf1 	bl	80020da <vListInsertEnd>
 80034f8:	e005      	b.n	8003506 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	3318      	adds	r3, #24
 80034fe:	4619      	mov	r1, r3
 8003500:	480e      	ldr	r0, [pc, #56]	; (800353c <xTaskRemoveFromEventList+0xbc>)
 8003502:	f7fe fdea 	bl	80020da <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800350a:	4b0d      	ldr	r3, [pc, #52]	; (8003540 <xTaskRemoveFromEventList+0xc0>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003510:	429a      	cmp	r2, r3
 8003512:	d905      	bls.n	8003520 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003514:	2301      	movs	r3, #1
 8003516:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003518:	4b0a      	ldr	r3, [pc, #40]	; (8003544 <xTaskRemoveFromEventList+0xc4>)
 800351a:	2201      	movs	r2, #1
 800351c:	601a      	str	r2, [r3, #0]
 800351e:	e001      	b.n	8003524 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003520:	2300      	movs	r3, #0
 8003522:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003524:	697b      	ldr	r3, [r7, #20]
}
 8003526:	4618      	mov	r0, r3
 8003528:	3718      	adds	r7, #24
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	20000ccc 	.word	0x20000ccc
 8003534:	20000cac 	.word	0x20000cac
 8003538:	200007d4 	.word	0x200007d4
 800353c:	20000c64 	.word	0x20000c64
 8003540:	200007d0 	.word	0x200007d0
 8003544:	20000cb8 	.word	0x20000cb8

08003548 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003550:	4b06      	ldr	r3, [pc, #24]	; (800356c <vTaskInternalSetTimeOutState+0x24>)
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003558:	4b05      	ldr	r3, [pc, #20]	; (8003570 <vTaskInternalSetTimeOutState+0x28>)
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	605a      	str	r2, [r3, #4]
}
 8003560:	bf00      	nop
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr
 800356c:	20000cbc 	.word	0x20000cbc
 8003570:	20000ca8 	.word	0x20000ca8

08003574 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b088      	sub	sp, #32
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d10a      	bne.n	800359a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003588:	f383 8811 	msr	BASEPRI, r3
 800358c:	f3bf 8f6f 	isb	sy
 8003590:	f3bf 8f4f 	dsb	sy
 8003594:	613b      	str	r3, [r7, #16]
}
 8003596:	bf00      	nop
 8003598:	e7fe      	b.n	8003598 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d10a      	bne.n	80035b6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80035a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a4:	f383 8811 	msr	BASEPRI, r3
 80035a8:	f3bf 8f6f 	isb	sy
 80035ac:	f3bf 8f4f 	dsb	sy
 80035b0:	60fb      	str	r3, [r7, #12]
}
 80035b2:	bf00      	nop
 80035b4:	e7fe      	b.n	80035b4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80035b6:	f000 fe7d 	bl	80042b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80035ba:	4b1d      	ldr	r3, [pc, #116]	; (8003630 <xTaskCheckForTimeOut+0xbc>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	69ba      	ldr	r2, [r7, #24]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d2:	d102      	bne.n	80035da <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80035d4:	2300      	movs	r3, #0
 80035d6:	61fb      	str	r3, [r7, #28]
 80035d8:	e023      	b.n	8003622 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	4b15      	ldr	r3, [pc, #84]	; (8003634 <xTaskCheckForTimeOut+0xc0>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d007      	beq.n	80035f6 <xTaskCheckForTimeOut+0x82>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	69ba      	ldr	r2, [r7, #24]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d302      	bcc.n	80035f6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80035f0:	2301      	movs	r3, #1
 80035f2:	61fb      	str	r3, [r7, #28]
 80035f4:	e015      	b.n	8003622 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	697a      	ldr	r2, [r7, #20]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d20b      	bcs.n	8003618 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	1ad2      	subs	r2, r2, r3
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f7ff ff9b 	bl	8003548 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003612:	2300      	movs	r3, #0
 8003614:	61fb      	str	r3, [r7, #28]
 8003616:	e004      	b.n	8003622 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	2200      	movs	r2, #0
 800361c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800361e:	2301      	movs	r3, #1
 8003620:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003622:	f000 fe77 	bl	8004314 <vPortExitCritical>

	return xReturn;
 8003626:	69fb      	ldr	r3, [r7, #28]
}
 8003628:	4618      	mov	r0, r3
 800362a:	3720      	adds	r7, #32
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}
 8003630:	20000ca8 	.word	0x20000ca8
 8003634:	20000cbc 	.word	0x20000cbc

08003638 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003638:	b480      	push	{r7}
 800363a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800363c:	4b03      	ldr	r3, [pc, #12]	; (800364c <vTaskMissedYield+0x14>)
 800363e:	2201      	movs	r2, #1
 8003640:	601a      	str	r2, [r3, #0]
}
 8003642:	bf00      	nop
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr
 800364c:	20000cb8 	.word	0x20000cb8

08003650 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003658:	f000 f852 	bl	8003700 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800365c:	4b06      	ldr	r3, [pc, #24]	; (8003678 <prvIdleTask+0x28>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2b01      	cmp	r3, #1
 8003662:	d9f9      	bls.n	8003658 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003664:	4b05      	ldr	r3, [pc, #20]	; (800367c <prvIdleTask+0x2c>)
 8003666:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800366a:	601a      	str	r2, [r3, #0]
 800366c:	f3bf 8f4f 	dsb	sy
 8003670:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003674:	e7f0      	b.n	8003658 <prvIdleTask+0x8>
 8003676:	bf00      	nop
 8003678:	200007d4 	.word	0x200007d4
 800367c:	e000ed04 	.word	0xe000ed04

08003680 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003686:	2300      	movs	r3, #0
 8003688:	607b      	str	r3, [r7, #4]
 800368a:	e00c      	b.n	80036a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	4613      	mov	r3, r2
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	4413      	add	r3, r2
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	4a12      	ldr	r2, [pc, #72]	; (80036e0 <prvInitialiseTaskLists+0x60>)
 8003698:	4413      	add	r3, r2
 800369a:	4618      	mov	r0, r3
 800369c:	f7fe fcf0 	bl	8002080 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	3301      	adds	r3, #1
 80036a4:	607b      	str	r3, [r7, #4]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2b37      	cmp	r3, #55	; 0x37
 80036aa:	d9ef      	bls.n	800368c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80036ac:	480d      	ldr	r0, [pc, #52]	; (80036e4 <prvInitialiseTaskLists+0x64>)
 80036ae:	f7fe fce7 	bl	8002080 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80036b2:	480d      	ldr	r0, [pc, #52]	; (80036e8 <prvInitialiseTaskLists+0x68>)
 80036b4:	f7fe fce4 	bl	8002080 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80036b8:	480c      	ldr	r0, [pc, #48]	; (80036ec <prvInitialiseTaskLists+0x6c>)
 80036ba:	f7fe fce1 	bl	8002080 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80036be:	480c      	ldr	r0, [pc, #48]	; (80036f0 <prvInitialiseTaskLists+0x70>)
 80036c0:	f7fe fcde 	bl	8002080 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80036c4:	480b      	ldr	r0, [pc, #44]	; (80036f4 <prvInitialiseTaskLists+0x74>)
 80036c6:	f7fe fcdb 	bl	8002080 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80036ca:	4b0b      	ldr	r3, [pc, #44]	; (80036f8 <prvInitialiseTaskLists+0x78>)
 80036cc:	4a05      	ldr	r2, [pc, #20]	; (80036e4 <prvInitialiseTaskLists+0x64>)
 80036ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80036d0:	4b0a      	ldr	r3, [pc, #40]	; (80036fc <prvInitialiseTaskLists+0x7c>)
 80036d2:	4a05      	ldr	r2, [pc, #20]	; (80036e8 <prvInitialiseTaskLists+0x68>)
 80036d4:	601a      	str	r2, [r3, #0]
}
 80036d6:	bf00      	nop
 80036d8:	3708      	adds	r7, #8
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	200007d4 	.word	0x200007d4
 80036e4:	20000c34 	.word	0x20000c34
 80036e8:	20000c48 	.word	0x20000c48
 80036ec:	20000c64 	.word	0x20000c64
 80036f0:	20000c78 	.word	0x20000c78
 80036f4:	20000c90 	.word	0x20000c90
 80036f8:	20000c5c 	.word	0x20000c5c
 80036fc:	20000c60 	.word	0x20000c60

08003700 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003706:	e019      	b.n	800373c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003708:	f000 fdd4 	bl	80042b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800370c:	4b10      	ldr	r3, [pc, #64]	; (8003750 <prvCheckTasksWaitingTermination+0x50>)
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	3304      	adds	r3, #4
 8003718:	4618      	mov	r0, r3
 800371a:	f7fe fd3b 	bl	8002194 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800371e:	4b0d      	ldr	r3, [pc, #52]	; (8003754 <prvCheckTasksWaitingTermination+0x54>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	3b01      	subs	r3, #1
 8003724:	4a0b      	ldr	r2, [pc, #44]	; (8003754 <prvCheckTasksWaitingTermination+0x54>)
 8003726:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003728:	4b0b      	ldr	r3, [pc, #44]	; (8003758 <prvCheckTasksWaitingTermination+0x58>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	3b01      	subs	r3, #1
 800372e:	4a0a      	ldr	r2, [pc, #40]	; (8003758 <prvCheckTasksWaitingTermination+0x58>)
 8003730:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003732:	f000 fdef 	bl	8004314 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 f810 	bl	800375c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800373c:	4b06      	ldr	r3, [pc, #24]	; (8003758 <prvCheckTasksWaitingTermination+0x58>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d1e1      	bne.n	8003708 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003744:	bf00      	nop
 8003746:	bf00      	nop
 8003748:	3708      	adds	r7, #8
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	20000c78 	.word	0x20000c78
 8003754:	20000ca4 	.word	0x20000ca4
 8003758:	20000c8c 	.word	0x20000c8c

0800375c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800376a:	2b00      	cmp	r3, #0
 800376c:	d108      	bne.n	8003780 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003772:	4618      	mov	r0, r3
 8003774:	f000 ff8c 	bl	8004690 <vPortFree>
				vPortFree( pxTCB );
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f000 ff89 	bl	8004690 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800377e:	e018      	b.n	80037b2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003786:	2b01      	cmp	r3, #1
 8003788:	d103      	bne.n	8003792 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 ff80 	bl	8004690 <vPortFree>
	}
 8003790:	e00f      	b.n	80037b2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003798:	2b02      	cmp	r3, #2
 800379a:	d00a      	beq.n	80037b2 <prvDeleteTCB+0x56>
	__asm volatile
 800379c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a0:	f383 8811 	msr	BASEPRI, r3
 80037a4:	f3bf 8f6f 	isb	sy
 80037a8:	f3bf 8f4f 	dsb	sy
 80037ac:	60fb      	str	r3, [r7, #12]
}
 80037ae:	bf00      	nop
 80037b0:	e7fe      	b.n	80037b0 <prvDeleteTCB+0x54>
	}
 80037b2:	bf00      	nop
 80037b4:	3710      	adds	r7, #16
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
	...

080037bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037c2:	4b0c      	ldr	r3, [pc, #48]	; (80037f4 <prvResetNextTaskUnblockTime+0x38>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d104      	bne.n	80037d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80037cc:	4b0a      	ldr	r3, [pc, #40]	; (80037f8 <prvResetNextTaskUnblockTime+0x3c>)
 80037ce:	f04f 32ff 	mov.w	r2, #4294967295
 80037d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80037d4:	e008      	b.n	80037e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037d6:	4b07      	ldr	r3, [pc, #28]	; (80037f4 <prvResetNextTaskUnblockTime+0x38>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	4a04      	ldr	r2, [pc, #16]	; (80037f8 <prvResetNextTaskUnblockTime+0x3c>)
 80037e6:	6013      	str	r3, [r2, #0]
}
 80037e8:	bf00      	nop
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr
 80037f4:	20000c5c 	.word	0x20000c5c
 80037f8:	20000cc4 	.word	0x20000cc4

080037fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003802:	4b0b      	ldr	r3, [pc, #44]	; (8003830 <xTaskGetSchedulerState+0x34>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d102      	bne.n	8003810 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800380a:	2301      	movs	r3, #1
 800380c:	607b      	str	r3, [r7, #4]
 800380e:	e008      	b.n	8003822 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003810:	4b08      	ldr	r3, [pc, #32]	; (8003834 <xTaskGetSchedulerState+0x38>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d102      	bne.n	800381e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003818:	2302      	movs	r3, #2
 800381a:	607b      	str	r3, [r7, #4]
 800381c:	e001      	b.n	8003822 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800381e:	2300      	movs	r3, #0
 8003820:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003822:	687b      	ldr	r3, [r7, #4]
	}
 8003824:	4618      	mov	r0, r3
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr
 8003830:	20000cb0 	.word	0x20000cb0
 8003834:	20000ccc 	.word	0x20000ccc

08003838 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003838:	b580      	push	{r7, lr}
 800383a:	b086      	sub	sp, #24
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003844:	2300      	movs	r3, #0
 8003846:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d056      	beq.n	80038fc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800384e:	4b2e      	ldr	r3, [pc, #184]	; (8003908 <xTaskPriorityDisinherit+0xd0>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	693a      	ldr	r2, [r7, #16]
 8003854:	429a      	cmp	r2, r3
 8003856:	d00a      	beq.n	800386e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800385c:	f383 8811 	msr	BASEPRI, r3
 8003860:	f3bf 8f6f 	isb	sy
 8003864:	f3bf 8f4f 	dsb	sy
 8003868:	60fb      	str	r3, [r7, #12]
}
 800386a:	bf00      	nop
 800386c:	e7fe      	b.n	800386c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003872:	2b00      	cmp	r3, #0
 8003874:	d10a      	bne.n	800388c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800387a:	f383 8811 	msr	BASEPRI, r3
 800387e:	f3bf 8f6f 	isb	sy
 8003882:	f3bf 8f4f 	dsb	sy
 8003886:	60bb      	str	r3, [r7, #8]
}
 8003888:	bf00      	nop
 800388a:	e7fe      	b.n	800388a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003890:	1e5a      	subs	r2, r3, #1
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800389e:	429a      	cmp	r2, r3
 80038a0:	d02c      	beq.n	80038fc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d128      	bne.n	80038fc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	3304      	adds	r3, #4
 80038ae:	4618      	mov	r0, r3
 80038b0:	f7fe fc70 	bl	8002194 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038cc:	4b0f      	ldr	r3, [pc, #60]	; (800390c <xTaskPriorityDisinherit+0xd4>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d903      	bls.n	80038dc <xTaskPriorityDisinherit+0xa4>
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d8:	4a0c      	ldr	r2, [pc, #48]	; (800390c <xTaskPriorityDisinherit+0xd4>)
 80038da:	6013      	str	r3, [r2, #0]
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038e0:	4613      	mov	r3, r2
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	4413      	add	r3, r2
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	4a09      	ldr	r2, [pc, #36]	; (8003910 <xTaskPriorityDisinherit+0xd8>)
 80038ea:	441a      	add	r2, r3
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	3304      	adds	r3, #4
 80038f0:	4619      	mov	r1, r3
 80038f2:	4610      	mov	r0, r2
 80038f4:	f7fe fbf1 	bl	80020da <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80038f8:	2301      	movs	r3, #1
 80038fa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80038fc:	697b      	ldr	r3, [r7, #20]
	}
 80038fe:	4618      	mov	r0, r3
 8003900:	3718      	adds	r7, #24
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	200007d0 	.word	0x200007d0
 800390c:	20000cac 	.word	0x20000cac
 8003910:	200007d4 	.word	0x200007d4

08003914 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800391e:	4b21      	ldr	r3, [pc, #132]	; (80039a4 <prvAddCurrentTaskToDelayedList+0x90>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003924:	4b20      	ldr	r3, [pc, #128]	; (80039a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	3304      	adds	r3, #4
 800392a:	4618      	mov	r0, r3
 800392c:	f7fe fc32 	bl	8002194 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003936:	d10a      	bne.n	800394e <prvAddCurrentTaskToDelayedList+0x3a>
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d007      	beq.n	800394e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800393e:	4b1a      	ldr	r3, [pc, #104]	; (80039a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	3304      	adds	r3, #4
 8003944:	4619      	mov	r1, r3
 8003946:	4819      	ldr	r0, [pc, #100]	; (80039ac <prvAddCurrentTaskToDelayedList+0x98>)
 8003948:	f7fe fbc7 	bl	80020da <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800394c:	e026      	b.n	800399c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4413      	add	r3, r2
 8003954:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003956:	4b14      	ldr	r3, [pc, #80]	; (80039a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	68ba      	ldr	r2, [r7, #8]
 800395c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800395e:	68ba      	ldr	r2, [r7, #8]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	429a      	cmp	r2, r3
 8003964:	d209      	bcs.n	800397a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003966:	4b12      	ldr	r3, [pc, #72]	; (80039b0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	4b0f      	ldr	r3, [pc, #60]	; (80039a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	3304      	adds	r3, #4
 8003970:	4619      	mov	r1, r3
 8003972:	4610      	mov	r0, r2
 8003974:	f7fe fbd5 	bl	8002122 <vListInsert>
}
 8003978:	e010      	b.n	800399c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800397a:	4b0e      	ldr	r3, [pc, #56]	; (80039b4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	4b0a      	ldr	r3, [pc, #40]	; (80039a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	3304      	adds	r3, #4
 8003984:	4619      	mov	r1, r3
 8003986:	4610      	mov	r0, r2
 8003988:	f7fe fbcb 	bl	8002122 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800398c:	4b0a      	ldr	r3, [pc, #40]	; (80039b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68ba      	ldr	r2, [r7, #8]
 8003992:	429a      	cmp	r2, r3
 8003994:	d202      	bcs.n	800399c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003996:	4a08      	ldr	r2, [pc, #32]	; (80039b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	6013      	str	r3, [r2, #0]
}
 800399c:	bf00      	nop
 800399e:	3710      	adds	r7, #16
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	20000ca8 	.word	0x20000ca8
 80039a8:	200007d0 	.word	0x200007d0
 80039ac:	20000c90 	.word	0x20000c90
 80039b0:	20000c60 	.word	0x20000c60
 80039b4:	20000c5c 	.word	0x20000c5c
 80039b8:	20000cc4 	.word	0x20000cc4

080039bc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b08a      	sub	sp, #40	; 0x28
 80039c0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80039c2:	2300      	movs	r3, #0
 80039c4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80039c6:	f000 fb07 	bl	8003fd8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80039ca:	4b1c      	ldr	r3, [pc, #112]	; (8003a3c <xTimerCreateTimerTask+0x80>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d021      	beq.n	8003a16 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80039d2:	2300      	movs	r3, #0
 80039d4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80039d6:	2300      	movs	r3, #0
 80039d8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80039da:	1d3a      	adds	r2, r7, #4
 80039dc:	f107 0108 	add.w	r1, r7, #8
 80039e0:	f107 030c 	add.w	r3, r7, #12
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7fe fb31 	bl	800204c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80039ea:	6879      	ldr	r1, [r7, #4]
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	68fa      	ldr	r2, [r7, #12]
 80039f0:	9202      	str	r2, [sp, #8]
 80039f2:	9301      	str	r3, [sp, #4]
 80039f4:	2302      	movs	r3, #2
 80039f6:	9300      	str	r3, [sp, #0]
 80039f8:	2300      	movs	r3, #0
 80039fa:	460a      	mov	r2, r1
 80039fc:	4910      	ldr	r1, [pc, #64]	; (8003a40 <xTimerCreateTimerTask+0x84>)
 80039fe:	4811      	ldr	r0, [pc, #68]	; (8003a44 <xTimerCreateTimerTask+0x88>)
 8003a00:	f7ff f8de 	bl	8002bc0 <xTaskCreateStatic>
 8003a04:	4603      	mov	r3, r0
 8003a06:	4a10      	ldr	r2, [pc, #64]	; (8003a48 <xTimerCreateTimerTask+0x8c>)
 8003a08:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003a0a:	4b0f      	ldr	r3, [pc, #60]	; (8003a48 <xTimerCreateTimerTask+0x8c>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d001      	beq.n	8003a16 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003a12:	2301      	movs	r3, #1
 8003a14:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d10a      	bne.n	8003a32 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a20:	f383 8811 	msr	BASEPRI, r3
 8003a24:	f3bf 8f6f 	isb	sy
 8003a28:	f3bf 8f4f 	dsb	sy
 8003a2c:	613b      	str	r3, [r7, #16]
}
 8003a2e:	bf00      	nop
 8003a30:	e7fe      	b.n	8003a30 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003a32:	697b      	ldr	r3, [r7, #20]
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3718      	adds	r7, #24
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	20000d00 	.word	0x20000d00
 8003a40:	08009f60 	.word	0x08009f60
 8003a44:	08003b81 	.word	0x08003b81
 8003a48:	20000d04 	.word	0x20000d04

08003a4c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b08a      	sub	sp, #40	; 0x28
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	60b9      	str	r1, [r7, #8]
 8003a56:	607a      	str	r2, [r7, #4]
 8003a58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d10a      	bne.n	8003a7a <xTimerGenericCommand+0x2e>
	__asm volatile
 8003a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a68:	f383 8811 	msr	BASEPRI, r3
 8003a6c:	f3bf 8f6f 	isb	sy
 8003a70:	f3bf 8f4f 	dsb	sy
 8003a74:	623b      	str	r3, [r7, #32]
}
 8003a76:	bf00      	nop
 8003a78:	e7fe      	b.n	8003a78 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003a7a:	4b1a      	ldr	r3, [pc, #104]	; (8003ae4 <xTimerGenericCommand+0x98>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d02a      	beq.n	8003ad8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	2b05      	cmp	r3, #5
 8003a92:	dc18      	bgt.n	8003ac6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003a94:	f7ff feb2 	bl	80037fc <xTaskGetSchedulerState>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d109      	bne.n	8003ab2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003a9e:	4b11      	ldr	r3, [pc, #68]	; (8003ae4 <xTimerGenericCommand+0x98>)
 8003aa0:	6818      	ldr	r0, [r3, #0]
 8003aa2:	f107 0110 	add.w	r1, r7, #16
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003aaa:	f7fe fca1 	bl	80023f0 <xQueueGenericSend>
 8003aae:	6278      	str	r0, [r7, #36]	; 0x24
 8003ab0:	e012      	b.n	8003ad8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003ab2:	4b0c      	ldr	r3, [pc, #48]	; (8003ae4 <xTimerGenericCommand+0x98>)
 8003ab4:	6818      	ldr	r0, [r3, #0]
 8003ab6:	f107 0110 	add.w	r1, r7, #16
 8003aba:	2300      	movs	r3, #0
 8003abc:	2200      	movs	r2, #0
 8003abe:	f7fe fc97 	bl	80023f0 <xQueueGenericSend>
 8003ac2:	6278      	str	r0, [r7, #36]	; 0x24
 8003ac4:	e008      	b.n	8003ad8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003ac6:	4b07      	ldr	r3, [pc, #28]	; (8003ae4 <xTimerGenericCommand+0x98>)
 8003ac8:	6818      	ldr	r0, [r3, #0]
 8003aca:	f107 0110 	add.w	r1, r7, #16
 8003ace:	2300      	movs	r3, #0
 8003ad0:	683a      	ldr	r2, [r7, #0]
 8003ad2:	f7fe fd8b 	bl	80025ec <xQueueGenericSendFromISR>
 8003ad6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3728      	adds	r7, #40	; 0x28
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	20000d00 	.word	0x20000d00

08003ae8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b088      	sub	sp, #32
 8003aec:	af02      	add	r7, sp, #8
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003af2:	4b22      	ldr	r3, [pc, #136]	; (8003b7c <prvProcessExpiredTimer+0x94>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	3304      	adds	r3, #4
 8003b00:	4618      	mov	r0, r3
 8003b02:	f7fe fb47 	bl	8002194 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b0c:	f003 0304 	and.w	r3, r3, #4
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d022      	beq.n	8003b5a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	699a      	ldr	r2, [r3, #24]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	18d1      	adds	r1, r2, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	683a      	ldr	r2, [r7, #0]
 8003b20:	6978      	ldr	r0, [r7, #20]
 8003b22:	f000 f8d1 	bl	8003cc8 <prvInsertTimerInActiveList>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d01f      	beq.n	8003b6c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	9300      	str	r3, [sp, #0]
 8003b30:	2300      	movs	r3, #0
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	2100      	movs	r1, #0
 8003b36:	6978      	ldr	r0, [r7, #20]
 8003b38:	f7ff ff88 	bl	8003a4c <xTimerGenericCommand>
 8003b3c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d113      	bne.n	8003b6c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8003b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b48:	f383 8811 	msr	BASEPRI, r3
 8003b4c:	f3bf 8f6f 	isb	sy
 8003b50:	f3bf 8f4f 	dsb	sy
 8003b54:	60fb      	str	r3, [r7, #12]
}
 8003b56:	bf00      	nop
 8003b58:	e7fe      	b.n	8003b58 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b60:	f023 0301 	bic.w	r3, r3, #1
 8003b64:	b2da      	uxtb	r2, r3
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	6a1b      	ldr	r3, [r3, #32]
 8003b70:	6978      	ldr	r0, [r7, #20]
 8003b72:	4798      	blx	r3
}
 8003b74:	bf00      	nop
 8003b76:	3718      	adds	r7, #24
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	20000cf8 	.word	0x20000cf8

08003b80 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003b88:	f107 0308 	add.w	r3, r7, #8
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f000 f857 	bl	8003c40 <prvGetNextExpireTime>
 8003b92:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	4619      	mov	r1, r3
 8003b98:	68f8      	ldr	r0, [r7, #12]
 8003b9a:	f000 f803 	bl	8003ba4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003b9e:	f000 f8d5 	bl	8003d4c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003ba2:	e7f1      	b.n	8003b88 <prvTimerTask+0x8>

08003ba4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003bae:	f7ff fa43 	bl	8003038 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003bb2:	f107 0308 	add.w	r3, r7, #8
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f000 f866 	bl	8003c88 <prvSampleTimeNow>
 8003bbc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d130      	bne.n	8003c26 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d10a      	bne.n	8003be0 <prvProcessTimerOrBlockTask+0x3c>
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d806      	bhi.n	8003be0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003bd2:	f7ff fa3f 	bl	8003054 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003bd6:	68f9      	ldr	r1, [r7, #12]
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f7ff ff85 	bl	8003ae8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003bde:	e024      	b.n	8003c2a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d008      	beq.n	8003bf8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003be6:	4b13      	ldr	r3, [pc, #76]	; (8003c34 <prvProcessTimerOrBlockTask+0x90>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d101      	bne.n	8003bf4 <prvProcessTimerOrBlockTask+0x50>
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e000      	b.n	8003bf6 <prvProcessTimerOrBlockTask+0x52>
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003bf8:	4b0f      	ldr	r3, [pc, #60]	; (8003c38 <prvProcessTimerOrBlockTask+0x94>)
 8003bfa:	6818      	ldr	r0, [r3, #0]
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	683a      	ldr	r2, [r7, #0]
 8003c04:	4619      	mov	r1, r3
 8003c06:	f7fe ffa7 	bl	8002b58 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003c0a:	f7ff fa23 	bl	8003054 <xTaskResumeAll>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d10a      	bne.n	8003c2a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003c14:	4b09      	ldr	r3, [pc, #36]	; (8003c3c <prvProcessTimerOrBlockTask+0x98>)
 8003c16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c1a:	601a      	str	r2, [r3, #0]
 8003c1c:	f3bf 8f4f 	dsb	sy
 8003c20:	f3bf 8f6f 	isb	sy
}
 8003c24:	e001      	b.n	8003c2a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003c26:	f7ff fa15 	bl	8003054 <xTaskResumeAll>
}
 8003c2a:	bf00      	nop
 8003c2c:	3710      	adds	r7, #16
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	20000cfc 	.word	0x20000cfc
 8003c38:	20000d00 	.word	0x20000d00
 8003c3c:	e000ed04 	.word	0xe000ed04

08003c40 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003c40:	b480      	push	{r7}
 8003c42:	b085      	sub	sp, #20
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003c48:	4b0e      	ldr	r3, [pc, #56]	; (8003c84 <prvGetNextExpireTime+0x44>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d101      	bne.n	8003c56 <prvGetNextExpireTime+0x16>
 8003c52:	2201      	movs	r2, #1
 8003c54:	e000      	b.n	8003c58 <prvGetNextExpireTime+0x18>
 8003c56:	2200      	movs	r2, #0
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d105      	bne.n	8003c70 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003c64:	4b07      	ldr	r3, [pc, #28]	; (8003c84 <prvGetNextExpireTime+0x44>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	60fb      	str	r3, [r7, #12]
 8003c6e:	e001      	b.n	8003c74 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003c70:	2300      	movs	r3, #0
 8003c72:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003c74:	68fb      	ldr	r3, [r7, #12]
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3714      	adds	r7, #20
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	20000cf8 	.word	0x20000cf8

08003c88 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003c90:	f7ff fa7e 	bl	8003190 <xTaskGetTickCount>
 8003c94:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003c96:	4b0b      	ldr	r3, [pc, #44]	; (8003cc4 <prvSampleTimeNow+0x3c>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	68fa      	ldr	r2, [r7, #12]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d205      	bcs.n	8003cac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003ca0:	f000 f936 	bl	8003f10 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	601a      	str	r2, [r3, #0]
 8003caa:	e002      	b.n	8003cb2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003cb2:	4a04      	ldr	r2, [pc, #16]	; (8003cc4 <prvSampleTimeNow+0x3c>)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3710      	adds	r7, #16
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	20000d08 	.word	0x20000d08

08003cc8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b086      	sub	sp, #24
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	60b9      	str	r1, [r7, #8]
 8003cd2:	607a      	str	r2, [r7, #4]
 8003cd4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	68ba      	ldr	r2, [r7, #8]
 8003cde:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	68fa      	ldr	r2, [r7, #12]
 8003ce4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003ce6:	68ba      	ldr	r2, [r7, #8]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d812      	bhi.n	8003d14 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	1ad2      	subs	r2, r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	699b      	ldr	r3, [r3, #24]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d302      	bcc.n	8003d02 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	617b      	str	r3, [r7, #20]
 8003d00:	e01b      	b.n	8003d3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003d02:	4b10      	ldr	r3, [pc, #64]	; (8003d44 <prvInsertTimerInActiveList+0x7c>)
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	3304      	adds	r3, #4
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	4610      	mov	r0, r2
 8003d0e:	f7fe fa08 	bl	8002122 <vListInsert>
 8003d12:	e012      	b.n	8003d3a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d206      	bcs.n	8003d2a <prvInsertTimerInActiveList+0x62>
 8003d1c:	68ba      	ldr	r2, [r7, #8]
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d302      	bcc.n	8003d2a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003d24:	2301      	movs	r3, #1
 8003d26:	617b      	str	r3, [r7, #20]
 8003d28:	e007      	b.n	8003d3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003d2a:	4b07      	ldr	r3, [pc, #28]	; (8003d48 <prvInsertTimerInActiveList+0x80>)
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	3304      	adds	r3, #4
 8003d32:	4619      	mov	r1, r3
 8003d34:	4610      	mov	r0, r2
 8003d36:	f7fe f9f4 	bl	8002122 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003d3a:	697b      	ldr	r3, [r7, #20]
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3718      	adds	r7, #24
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	20000cfc 	.word	0x20000cfc
 8003d48:	20000cf8 	.word	0x20000cf8

08003d4c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b08e      	sub	sp, #56	; 0x38
 8003d50:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003d52:	e0ca      	b.n	8003eea <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	da18      	bge.n	8003d8c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003d5a:	1d3b      	adds	r3, r7, #4
 8003d5c:	3304      	adds	r3, #4
 8003d5e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d10a      	bne.n	8003d7c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8003d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d6a:	f383 8811 	msr	BASEPRI, r3
 8003d6e:	f3bf 8f6f 	isb	sy
 8003d72:	f3bf 8f4f 	dsb	sy
 8003d76:	61fb      	str	r3, [r7, #28]
}
 8003d78:	bf00      	nop
 8003d7a:	e7fe      	b.n	8003d7a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d82:	6850      	ldr	r0, [r2, #4]
 8003d84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d86:	6892      	ldr	r2, [r2, #8]
 8003d88:	4611      	mov	r1, r2
 8003d8a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	f2c0 80aa 	blt.w	8003ee8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d9a:	695b      	ldr	r3, [r3, #20]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d004      	beq.n	8003daa <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da2:	3304      	adds	r3, #4
 8003da4:	4618      	mov	r0, r3
 8003da6:	f7fe f9f5 	bl	8002194 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003daa:	463b      	mov	r3, r7
 8003dac:	4618      	mov	r0, r3
 8003dae:	f7ff ff6b 	bl	8003c88 <prvSampleTimeNow>
 8003db2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2b09      	cmp	r3, #9
 8003db8:	f200 8097 	bhi.w	8003eea <prvProcessReceivedCommands+0x19e>
 8003dbc:	a201      	add	r2, pc, #4	; (adr r2, 8003dc4 <prvProcessReceivedCommands+0x78>)
 8003dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dc2:	bf00      	nop
 8003dc4:	08003ded 	.word	0x08003ded
 8003dc8:	08003ded 	.word	0x08003ded
 8003dcc:	08003ded 	.word	0x08003ded
 8003dd0:	08003e61 	.word	0x08003e61
 8003dd4:	08003e75 	.word	0x08003e75
 8003dd8:	08003ebf 	.word	0x08003ebf
 8003ddc:	08003ded 	.word	0x08003ded
 8003de0:	08003ded 	.word	0x08003ded
 8003de4:	08003e61 	.word	0x08003e61
 8003de8:	08003e75 	.word	0x08003e75
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003df2:	f043 0301 	orr.w	r3, r3, #1
 8003df6:	b2da      	uxtb	r2, r3
 8003df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dfa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003dfe:	68ba      	ldr	r2, [r7, #8]
 8003e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e02:	699b      	ldr	r3, [r3, #24]
 8003e04:	18d1      	adds	r1, r2, r3
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e0c:	f7ff ff5c 	bl	8003cc8 <prvInsertTimerInActiveList>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d069      	beq.n	8003eea <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e18:	6a1b      	ldr	r3, [r3, #32]
 8003e1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e1c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e24:	f003 0304 	and.w	r3, r3, #4
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d05e      	beq.n	8003eea <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003e2c:	68ba      	ldr	r2, [r7, #8]
 8003e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e30:	699b      	ldr	r3, [r3, #24]
 8003e32:	441a      	add	r2, r3
 8003e34:	2300      	movs	r3, #0
 8003e36:	9300      	str	r3, [sp, #0]
 8003e38:	2300      	movs	r3, #0
 8003e3a:	2100      	movs	r1, #0
 8003e3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e3e:	f7ff fe05 	bl	8003a4c <xTimerGenericCommand>
 8003e42:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003e44:	6a3b      	ldr	r3, [r7, #32]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d14f      	bne.n	8003eea <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8003e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e4e:	f383 8811 	msr	BASEPRI, r3
 8003e52:	f3bf 8f6f 	isb	sy
 8003e56:	f3bf 8f4f 	dsb	sy
 8003e5a:	61bb      	str	r3, [r7, #24]
}
 8003e5c:	bf00      	nop
 8003e5e:	e7fe      	b.n	8003e5e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e66:	f023 0301 	bic.w	r3, r3, #1
 8003e6a:	b2da      	uxtb	r2, r3
 8003e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8003e72:	e03a      	b.n	8003eea <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e7a:	f043 0301 	orr.w	r3, r3, #1
 8003e7e:	b2da      	uxtb	r2, r3
 8003e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003e86:	68ba      	ldr	r2, [r7, #8]
 8003e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e8a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e8e:	699b      	ldr	r3, [r3, #24]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d10a      	bne.n	8003eaa <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8003e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e98:	f383 8811 	msr	BASEPRI, r3
 8003e9c:	f3bf 8f6f 	isb	sy
 8003ea0:	f3bf 8f4f 	dsb	sy
 8003ea4:	617b      	str	r3, [r7, #20]
}
 8003ea6:	bf00      	nop
 8003ea8:	e7fe      	b.n	8003ea8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eac:	699a      	ldr	r2, [r3, #24]
 8003eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb0:	18d1      	adds	r1, r2, r3
 8003eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003eb8:	f7ff ff06 	bl	8003cc8 <prvInsertTimerInActiveList>
					break;
 8003ebc:	e015      	b.n	8003eea <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ec4:	f003 0302 	and.w	r3, r3, #2
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d103      	bne.n	8003ed4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8003ecc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ece:	f000 fbdf 	bl	8004690 <vPortFree>
 8003ed2:	e00a      	b.n	8003eea <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003eda:	f023 0301 	bic.w	r3, r3, #1
 8003ede:	b2da      	uxtb	r2, r3
 8003ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003ee6:	e000      	b.n	8003eea <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8003ee8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003eea:	4b08      	ldr	r3, [pc, #32]	; (8003f0c <prvProcessReceivedCommands+0x1c0>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	1d39      	adds	r1, r7, #4
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f7fe fc16 	bl	8002724 <xQueueReceive>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	f47f af2a 	bne.w	8003d54 <prvProcessReceivedCommands+0x8>
	}
}
 8003f00:	bf00      	nop
 8003f02:	bf00      	nop
 8003f04:	3730      	adds	r7, #48	; 0x30
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	20000d00 	.word	0x20000d00

08003f10 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b088      	sub	sp, #32
 8003f14:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003f16:	e048      	b.n	8003faa <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f18:	4b2d      	ldr	r3, [pc, #180]	; (8003fd0 <prvSwitchTimerLists+0xc0>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f22:	4b2b      	ldr	r3, [pc, #172]	; (8003fd0 <prvSwitchTimerLists+0xc0>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	3304      	adds	r3, #4
 8003f30:	4618      	mov	r0, r3
 8003f32:	f7fe f92f 	bl	8002194 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6a1b      	ldr	r3, [r3, #32]
 8003f3a:	68f8      	ldr	r0, [r7, #12]
 8003f3c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f44:	f003 0304 	and.w	r3, r3, #4
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d02e      	beq.n	8003faa <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	699b      	ldr	r3, [r3, #24]
 8003f50:	693a      	ldr	r2, [r7, #16]
 8003f52:	4413      	add	r3, r2
 8003f54:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003f56:	68ba      	ldr	r2, [r7, #8]
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d90e      	bls.n	8003f7c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	68ba      	ldr	r2, [r7, #8]
 8003f62:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003f6a:	4b19      	ldr	r3, [pc, #100]	; (8003fd0 <prvSwitchTimerLists+0xc0>)
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	3304      	adds	r3, #4
 8003f72:	4619      	mov	r1, r3
 8003f74:	4610      	mov	r0, r2
 8003f76:	f7fe f8d4 	bl	8002122 <vListInsert>
 8003f7a:	e016      	b.n	8003faa <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	9300      	str	r3, [sp, #0]
 8003f80:	2300      	movs	r3, #0
 8003f82:	693a      	ldr	r2, [r7, #16]
 8003f84:	2100      	movs	r1, #0
 8003f86:	68f8      	ldr	r0, [r7, #12]
 8003f88:	f7ff fd60 	bl	8003a4c <xTimerGenericCommand>
 8003f8c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d10a      	bne.n	8003faa <prvSwitchTimerLists+0x9a>
	__asm volatile
 8003f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f98:	f383 8811 	msr	BASEPRI, r3
 8003f9c:	f3bf 8f6f 	isb	sy
 8003fa0:	f3bf 8f4f 	dsb	sy
 8003fa4:	603b      	str	r3, [r7, #0]
}
 8003fa6:	bf00      	nop
 8003fa8:	e7fe      	b.n	8003fa8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003faa:	4b09      	ldr	r3, [pc, #36]	; (8003fd0 <prvSwitchTimerLists+0xc0>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d1b1      	bne.n	8003f18 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003fb4:	4b06      	ldr	r3, [pc, #24]	; (8003fd0 <prvSwitchTimerLists+0xc0>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003fba:	4b06      	ldr	r3, [pc, #24]	; (8003fd4 <prvSwitchTimerLists+0xc4>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a04      	ldr	r2, [pc, #16]	; (8003fd0 <prvSwitchTimerLists+0xc0>)
 8003fc0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003fc2:	4a04      	ldr	r2, [pc, #16]	; (8003fd4 <prvSwitchTimerLists+0xc4>)
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	6013      	str	r3, [r2, #0]
}
 8003fc8:	bf00      	nop
 8003fca:	3718      	adds	r7, #24
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	20000cf8 	.word	0x20000cf8
 8003fd4:	20000cfc 	.word	0x20000cfc

08003fd8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003fde:	f000 f969 	bl	80042b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003fe2:	4b15      	ldr	r3, [pc, #84]	; (8004038 <prvCheckForValidListAndQueue+0x60>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d120      	bne.n	800402c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003fea:	4814      	ldr	r0, [pc, #80]	; (800403c <prvCheckForValidListAndQueue+0x64>)
 8003fec:	f7fe f848 	bl	8002080 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003ff0:	4813      	ldr	r0, [pc, #76]	; (8004040 <prvCheckForValidListAndQueue+0x68>)
 8003ff2:	f7fe f845 	bl	8002080 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003ff6:	4b13      	ldr	r3, [pc, #76]	; (8004044 <prvCheckForValidListAndQueue+0x6c>)
 8003ff8:	4a10      	ldr	r2, [pc, #64]	; (800403c <prvCheckForValidListAndQueue+0x64>)
 8003ffa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003ffc:	4b12      	ldr	r3, [pc, #72]	; (8004048 <prvCheckForValidListAndQueue+0x70>)
 8003ffe:	4a10      	ldr	r2, [pc, #64]	; (8004040 <prvCheckForValidListAndQueue+0x68>)
 8004000:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004002:	2300      	movs	r3, #0
 8004004:	9300      	str	r3, [sp, #0]
 8004006:	4b11      	ldr	r3, [pc, #68]	; (800404c <prvCheckForValidListAndQueue+0x74>)
 8004008:	4a11      	ldr	r2, [pc, #68]	; (8004050 <prvCheckForValidListAndQueue+0x78>)
 800400a:	2110      	movs	r1, #16
 800400c:	200a      	movs	r0, #10
 800400e:	f7fe f953 	bl	80022b8 <xQueueGenericCreateStatic>
 8004012:	4603      	mov	r3, r0
 8004014:	4a08      	ldr	r2, [pc, #32]	; (8004038 <prvCheckForValidListAndQueue+0x60>)
 8004016:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004018:	4b07      	ldr	r3, [pc, #28]	; (8004038 <prvCheckForValidListAndQueue+0x60>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d005      	beq.n	800402c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004020:	4b05      	ldr	r3, [pc, #20]	; (8004038 <prvCheckForValidListAndQueue+0x60>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	490b      	ldr	r1, [pc, #44]	; (8004054 <prvCheckForValidListAndQueue+0x7c>)
 8004026:	4618      	mov	r0, r3
 8004028:	f7fe fd6c 	bl	8002b04 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800402c:	f000 f972 	bl	8004314 <vPortExitCritical>
}
 8004030:	bf00      	nop
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	20000d00 	.word	0x20000d00
 800403c:	20000cd0 	.word	0x20000cd0
 8004040:	20000ce4 	.word	0x20000ce4
 8004044:	20000cf8 	.word	0x20000cf8
 8004048:	20000cfc 	.word	0x20000cfc
 800404c:	20000dac 	.word	0x20000dac
 8004050:	20000d0c 	.word	0x20000d0c
 8004054:	08009f68 	.word	0x08009f68

08004058 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004058:	b480      	push	{r7}
 800405a:	b085      	sub	sp, #20
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	3b04      	subs	r3, #4
 8004068:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004070:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	3b04      	subs	r3, #4
 8004076:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	f023 0201 	bic.w	r2, r3, #1
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	3b04      	subs	r3, #4
 8004086:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004088:	4a0c      	ldr	r2, [pc, #48]	; (80040bc <pxPortInitialiseStack+0x64>)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	3b14      	subs	r3, #20
 8004092:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	3b04      	subs	r3, #4
 800409e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f06f 0202 	mvn.w	r2, #2
 80040a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	3b20      	subs	r3, #32
 80040ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80040ae:	68fb      	ldr	r3, [r7, #12]
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3714      	adds	r7, #20
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr
 80040bc:	080040c1 	.word	0x080040c1

080040c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80040c0:	b480      	push	{r7}
 80040c2:	b085      	sub	sp, #20
 80040c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80040c6:	2300      	movs	r3, #0
 80040c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80040ca:	4b12      	ldr	r3, [pc, #72]	; (8004114 <prvTaskExitError+0x54>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040d2:	d00a      	beq.n	80040ea <prvTaskExitError+0x2a>
	__asm volatile
 80040d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d8:	f383 8811 	msr	BASEPRI, r3
 80040dc:	f3bf 8f6f 	isb	sy
 80040e0:	f3bf 8f4f 	dsb	sy
 80040e4:	60fb      	str	r3, [r7, #12]
}
 80040e6:	bf00      	nop
 80040e8:	e7fe      	b.n	80040e8 <prvTaskExitError+0x28>
	__asm volatile
 80040ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ee:	f383 8811 	msr	BASEPRI, r3
 80040f2:	f3bf 8f6f 	isb	sy
 80040f6:	f3bf 8f4f 	dsb	sy
 80040fa:	60bb      	str	r3, [r7, #8]
}
 80040fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80040fe:	bf00      	nop
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d0fc      	beq.n	8004100 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004106:	bf00      	nop
 8004108:	bf00      	nop
 800410a:	3714      	adds	r7, #20
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr
 8004114:	2000000c 	.word	0x2000000c
	...

08004120 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004120:	4b07      	ldr	r3, [pc, #28]	; (8004140 <pxCurrentTCBConst2>)
 8004122:	6819      	ldr	r1, [r3, #0]
 8004124:	6808      	ldr	r0, [r1, #0]
 8004126:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800412a:	f380 8809 	msr	PSP, r0
 800412e:	f3bf 8f6f 	isb	sy
 8004132:	f04f 0000 	mov.w	r0, #0
 8004136:	f380 8811 	msr	BASEPRI, r0
 800413a:	4770      	bx	lr
 800413c:	f3af 8000 	nop.w

08004140 <pxCurrentTCBConst2>:
 8004140:	200007d0 	.word	0x200007d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004144:	bf00      	nop
 8004146:	bf00      	nop

08004148 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004148:	4808      	ldr	r0, [pc, #32]	; (800416c <prvPortStartFirstTask+0x24>)
 800414a:	6800      	ldr	r0, [r0, #0]
 800414c:	6800      	ldr	r0, [r0, #0]
 800414e:	f380 8808 	msr	MSP, r0
 8004152:	f04f 0000 	mov.w	r0, #0
 8004156:	f380 8814 	msr	CONTROL, r0
 800415a:	b662      	cpsie	i
 800415c:	b661      	cpsie	f
 800415e:	f3bf 8f4f 	dsb	sy
 8004162:	f3bf 8f6f 	isb	sy
 8004166:	df00      	svc	0
 8004168:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800416a:	bf00      	nop
 800416c:	e000ed08 	.word	0xe000ed08

08004170 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b086      	sub	sp, #24
 8004174:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004176:	4b46      	ldr	r3, [pc, #280]	; (8004290 <xPortStartScheduler+0x120>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a46      	ldr	r2, [pc, #280]	; (8004294 <xPortStartScheduler+0x124>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d10a      	bne.n	8004196 <xPortStartScheduler+0x26>
	__asm volatile
 8004180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004184:	f383 8811 	msr	BASEPRI, r3
 8004188:	f3bf 8f6f 	isb	sy
 800418c:	f3bf 8f4f 	dsb	sy
 8004190:	613b      	str	r3, [r7, #16]
}
 8004192:	bf00      	nop
 8004194:	e7fe      	b.n	8004194 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004196:	4b3e      	ldr	r3, [pc, #248]	; (8004290 <xPortStartScheduler+0x120>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a3f      	ldr	r2, [pc, #252]	; (8004298 <xPortStartScheduler+0x128>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d10a      	bne.n	80041b6 <xPortStartScheduler+0x46>
	__asm volatile
 80041a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a4:	f383 8811 	msr	BASEPRI, r3
 80041a8:	f3bf 8f6f 	isb	sy
 80041ac:	f3bf 8f4f 	dsb	sy
 80041b0:	60fb      	str	r3, [r7, #12]
}
 80041b2:	bf00      	nop
 80041b4:	e7fe      	b.n	80041b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80041b6:	4b39      	ldr	r3, [pc, #228]	; (800429c <xPortStartScheduler+0x12c>)
 80041b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	22ff      	movs	r2, #255	; 0xff
 80041c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80041d0:	78fb      	ldrb	r3, [r7, #3]
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80041d8:	b2da      	uxtb	r2, r3
 80041da:	4b31      	ldr	r3, [pc, #196]	; (80042a0 <xPortStartScheduler+0x130>)
 80041dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80041de:	4b31      	ldr	r3, [pc, #196]	; (80042a4 <xPortStartScheduler+0x134>)
 80041e0:	2207      	movs	r2, #7
 80041e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80041e4:	e009      	b.n	80041fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80041e6:	4b2f      	ldr	r3, [pc, #188]	; (80042a4 <xPortStartScheduler+0x134>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	3b01      	subs	r3, #1
 80041ec:	4a2d      	ldr	r2, [pc, #180]	; (80042a4 <xPortStartScheduler+0x134>)
 80041ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80041f0:	78fb      	ldrb	r3, [r7, #3]
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	005b      	lsls	r3, r3, #1
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80041fa:	78fb      	ldrb	r3, [r7, #3]
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004202:	2b80      	cmp	r3, #128	; 0x80
 8004204:	d0ef      	beq.n	80041e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004206:	4b27      	ldr	r3, [pc, #156]	; (80042a4 <xPortStartScheduler+0x134>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f1c3 0307 	rsb	r3, r3, #7
 800420e:	2b04      	cmp	r3, #4
 8004210:	d00a      	beq.n	8004228 <xPortStartScheduler+0xb8>
	__asm volatile
 8004212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004216:	f383 8811 	msr	BASEPRI, r3
 800421a:	f3bf 8f6f 	isb	sy
 800421e:	f3bf 8f4f 	dsb	sy
 8004222:	60bb      	str	r3, [r7, #8]
}
 8004224:	bf00      	nop
 8004226:	e7fe      	b.n	8004226 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004228:	4b1e      	ldr	r3, [pc, #120]	; (80042a4 <xPortStartScheduler+0x134>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	021b      	lsls	r3, r3, #8
 800422e:	4a1d      	ldr	r2, [pc, #116]	; (80042a4 <xPortStartScheduler+0x134>)
 8004230:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004232:	4b1c      	ldr	r3, [pc, #112]	; (80042a4 <xPortStartScheduler+0x134>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800423a:	4a1a      	ldr	r2, [pc, #104]	; (80042a4 <xPortStartScheduler+0x134>)
 800423c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	b2da      	uxtb	r2, r3
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004246:	4b18      	ldr	r3, [pc, #96]	; (80042a8 <xPortStartScheduler+0x138>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a17      	ldr	r2, [pc, #92]	; (80042a8 <xPortStartScheduler+0x138>)
 800424c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004250:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004252:	4b15      	ldr	r3, [pc, #84]	; (80042a8 <xPortStartScheduler+0x138>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a14      	ldr	r2, [pc, #80]	; (80042a8 <xPortStartScheduler+0x138>)
 8004258:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800425c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800425e:	f000 f8dd 	bl	800441c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004262:	4b12      	ldr	r3, [pc, #72]	; (80042ac <xPortStartScheduler+0x13c>)
 8004264:	2200      	movs	r2, #0
 8004266:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004268:	f000 f8fc 	bl	8004464 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800426c:	4b10      	ldr	r3, [pc, #64]	; (80042b0 <xPortStartScheduler+0x140>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a0f      	ldr	r2, [pc, #60]	; (80042b0 <xPortStartScheduler+0x140>)
 8004272:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004276:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004278:	f7ff ff66 	bl	8004148 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800427c:	f7ff f852 	bl	8003324 <vTaskSwitchContext>
	prvTaskExitError();
 8004280:	f7ff ff1e 	bl	80040c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	3718      	adds	r7, #24
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	e000ed00 	.word	0xe000ed00
 8004294:	410fc271 	.word	0x410fc271
 8004298:	410fc270 	.word	0x410fc270
 800429c:	e000e400 	.word	0xe000e400
 80042a0:	20000dfc 	.word	0x20000dfc
 80042a4:	20000e00 	.word	0x20000e00
 80042a8:	e000ed20 	.word	0xe000ed20
 80042ac:	2000000c 	.word	0x2000000c
 80042b0:	e000ef34 	.word	0xe000ef34

080042b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
	__asm volatile
 80042ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042be:	f383 8811 	msr	BASEPRI, r3
 80042c2:	f3bf 8f6f 	isb	sy
 80042c6:	f3bf 8f4f 	dsb	sy
 80042ca:	607b      	str	r3, [r7, #4]
}
 80042cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80042ce:	4b0f      	ldr	r3, [pc, #60]	; (800430c <vPortEnterCritical+0x58>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	3301      	adds	r3, #1
 80042d4:	4a0d      	ldr	r2, [pc, #52]	; (800430c <vPortEnterCritical+0x58>)
 80042d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80042d8:	4b0c      	ldr	r3, [pc, #48]	; (800430c <vPortEnterCritical+0x58>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d10f      	bne.n	8004300 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80042e0:	4b0b      	ldr	r3, [pc, #44]	; (8004310 <vPortEnterCritical+0x5c>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00a      	beq.n	8004300 <vPortEnterCritical+0x4c>
	__asm volatile
 80042ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ee:	f383 8811 	msr	BASEPRI, r3
 80042f2:	f3bf 8f6f 	isb	sy
 80042f6:	f3bf 8f4f 	dsb	sy
 80042fa:	603b      	str	r3, [r7, #0]
}
 80042fc:	bf00      	nop
 80042fe:	e7fe      	b.n	80042fe <vPortEnterCritical+0x4a>
	}
}
 8004300:	bf00      	nop
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr
 800430c:	2000000c 	.word	0x2000000c
 8004310:	e000ed04 	.word	0xe000ed04

08004314 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800431a:	4b12      	ldr	r3, [pc, #72]	; (8004364 <vPortExitCritical+0x50>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d10a      	bne.n	8004338 <vPortExitCritical+0x24>
	__asm volatile
 8004322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004326:	f383 8811 	msr	BASEPRI, r3
 800432a:	f3bf 8f6f 	isb	sy
 800432e:	f3bf 8f4f 	dsb	sy
 8004332:	607b      	str	r3, [r7, #4]
}
 8004334:	bf00      	nop
 8004336:	e7fe      	b.n	8004336 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004338:	4b0a      	ldr	r3, [pc, #40]	; (8004364 <vPortExitCritical+0x50>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	3b01      	subs	r3, #1
 800433e:	4a09      	ldr	r2, [pc, #36]	; (8004364 <vPortExitCritical+0x50>)
 8004340:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004342:	4b08      	ldr	r3, [pc, #32]	; (8004364 <vPortExitCritical+0x50>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d105      	bne.n	8004356 <vPortExitCritical+0x42>
 800434a:	2300      	movs	r3, #0
 800434c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	f383 8811 	msr	BASEPRI, r3
}
 8004354:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004356:	bf00      	nop
 8004358:	370c      	adds	r7, #12
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
 8004362:	bf00      	nop
 8004364:	2000000c 	.word	0x2000000c
	...

08004370 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004370:	f3ef 8009 	mrs	r0, PSP
 8004374:	f3bf 8f6f 	isb	sy
 8004378:	4b15      	ldr	r3, [pc, #84]	; (80043d0 <pxCurrentTCBConst>)
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	f01e 0f10 	tst.w	lr, #16
 8004380:	bf08      	it	eq
 8004382:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004386:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800438a:	6010      	str	r0, [r2, #0]
 800438c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004390:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004394:	f380 8811 	msr	BASEPRI, r0
 8004398:	f3bf 8f4f 	dsb	sy
 800439c:	f3bf 8f6f 	isb	sy
 80043a0:	f7fe ffc0 	bl	8003324 <vTaskSwitchContext>
 80043a4:	f04f 0000 	mov.w	r0, #0
 80043a8:	f380 8811 	msr	BASEPRI, r0
 80043ac:	bc09      	pop	{r0, r3}
 80043ae:	6819      	ldr	r1, [r3, #0]
 80043b0:	6808      	ldr	r0, [r1, #0]
 80043b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043b6:	f01e 0f10 	tst.w	lr, #16
 80043ba:	bf08      	it	eq
 80043bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80043c0:	f380 8809 	msr	PSP, r0
 80043c4:	f3bf 8f6f 	isb	sy
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop
 80043cc:	f3af 8000 	nop.w

080043d0 <pxCurrentTCBConst>:
 80043d0:	200007d0 	.word	0x200007d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80043d4:	bf00      	nop
 80043d6:	bf00      	nop

080043d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b082      	sub	sp, #8
 80043dc:	af00      	add	r7, sp, #0
	__asm volatile
 80043de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e2:	f383 8811 	msr	BASEPRI, r3
 80043e6:	f3bf 8f6f 	isb	sy
 80043ea:	f3bf 8f4f 	dsb	sy
 80043ee:	607b      	str	r3, [r7, #4]
}
 80043f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80043f2:	f7fe fedd 	bl	80031b0 <xTaskIncrementTick>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d003      	beq.n	8004404 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80043fc:	4b06      	ldr	r3, [pc, #24]	; (8004418 <xPortSysTickHandler+0x40>)
 80043fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004402:	601a      	str	r2, [r3, #0]
 8004404:	2300      	movs	r3, #0
 8004406:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	f383 8811 	msr	BASEPRI, r3
}
 800440e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004410:	bf00      	nop
 8004412:	3708      	adds	r7, #8
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	e000ed04 	.word	0xe000ed04

0800441c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800441c:	b480      	push	{r7}
 800441e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004420:	4b0b      	ldr	r3, [pc, #44]	; (8004450 <vPortSetupTimerInterrupt+0x34>)
 8004422:	2200      	movs	r2, #0
 8004424:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004426:	4b0b      	ldr	r3, [pc, #44]	; (8004454 <vPortSetupTimerInterrupt+0x38>)
 8004428:	2200      	movs	r2, #0
 800442a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800442c:	4b0a      	ldr	r3, [pc, #40]	; (8004458 <vPortSetupTimerInterrupt+0x3c>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a0a      	ldr	r2, [pc, #40]	; (800445c <vPortSetupTimerInterrupt+0x40>)
 8004432:	fba2 2303 	umull	r2, r3, r2, r3
 8004436:	099b      	lsrs	r3, r3, #6
 8004438:	4a09      	ldr	r2, [pc, #36]	; (8004460 <vPortSetupTimerInterrupt+0x44>)
 800443a:	3b01      	subs	r3, #1
 800443c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800443e:	4b04      	ldr	r3, [pc, #16]	; (8004450 <vPortSetupTimerInterrupt+0x34>)
 8004440:	2207      	movs	r2, #7
 8004442:	601a      	str	r2, [r3, #0]
}
 8004444:	bf00      	nop
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	e000e010 	.word	0xe000e010
 8004454:	e000e018 	.word	0xe000e018
 8004458:	20000018 	.word	0x20000018
 800445c:	10624dd3 	.word	0x10624dd3
 8004460:	e000e014 	.word	0xe000e014

08004464 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004464:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004474 <vPortEnableVFP+0x10>
 8004468:	6801      	ldr	r1, [r0, #0]
 800446a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800446e:	6001      	str	r1, [r0, #0]
 8004470:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004472:	bf00      	nop
 8004474:	e000ed88 	.word	0xe000ed88

08004478 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004478:	b480      	push	{r7}
 800447a:	b085      	sub	sp, #20
 800447c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800447e:	f3ef 8305 	mrs	r3, IPSR
 8004482:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2b0f      	cmp	r3, #15
 8004488:	d914      	bls.n	80044b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800448a:	4a17      	ldr	r2, [pc, #92]	; (80044e8 <vPortValidateInterruptPriority+0x70>)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	4413      	add	r3, r2
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004494:	4b15      	ldr	r3, [pc, #84]	; (80044ec <vPortValidateInterruptPriority+0x74>)
 8004496:	781b      	ldrb	r3, [r3, #0]
 8004498:	7afa      	ldrb	r2, [r7, #11]
 800449a:	429a      	cmp	r2, r3
 800449c:	d20a      	bcs.n	80044b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800449e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a2:	f383 8811 	msr	BASEPRI, r3
 80044a6:	f3bf 8f6f 	isb	sy
 80044aa:	f3bf 8f4f 	dsb	sy
 80044ae:	607b      	str	r3, [r7, #4]
}
 80044b0:	bf00      	nop
 80044b2:	e7fe      	b.n	80044b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80044b4:	4b0e      	ldr	r3, [pc, #56]	; (80044f0 <vPortValidateInterruptPriority+0x78>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80044bc:	4b0d      	ldr	r3, [pc, #52]	; (80044f4 <vPortValidateInterruptPriority+0x7c>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d90a      	bls.n	80044da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80044c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c8:	f383 8811 	msr	BASEPRI, r3
 80044cc:	f3bf 8f6f 	isb	sy
 80044d0:	f3bf 8f4f 	dsb	sy
 80044d4:	603b      	str	r3, [r7, #0]
}
 80044d6:	bf00      	nop
 80044d8:	e7fe      	b.n	80044d8 <vPortValidateInterruptPriority+0x60>
	}
 80044da:	bf00      	nop
 80044dc:	3714      	adds	r7, #20
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr
 80044e6:	bf00      	nop
 80044e8:	e000e3f0 	.word	0xe000e3f0
 80044ec:	20000dfc 	.word	0x20000dfc
 80044f0:	e000ed0c 	.word	0xe000ed0c
 80044f4:	20000e00 	.word	0x20000e00

080044f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b08a      	sub	sp, #40	; 0x28
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004500:	2300      	movs	r3, #0
 8004502:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004504:	f7fe fd98 	bl	8003038 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004508:	4b5b      	ldr	r3, [pc, #364]	; (8004678 <pvPortMalloc+0x180>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d101      	bne.n	8004514 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004510:	f000 f920 	bl	8004754 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004514:	4b59      	ldr	r3, [pc, #356]	; (800467c <pvPortMalloc+0x184>)
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4013      	ands	r3, r2
 800451c:	2b00      	cmp	r3, #0
 800451e:	f040 8093 	bne.w	8004648 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d01d      	beq.n	8004564 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004528:	2208      	movs	r2, #8
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4413      	add	r3, r2
 800452e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f003 0307 	and.w	r3, r3, #7
 8004536:	2b00      	cmp	r3, #0
 8004538:	d014      	beq.n	8004564 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f023 0307 	bic.w	r3, r3, #7
 8004540:	3308      	adds	r3, #8
 8004542:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f003 0307 	and.w	r3, r3, #7
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00a      	beq.n	8004564 <pvPortMalloc+0x6c>
	__asm volatile
 800454e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004552:	f383 8811 	msr	BASEPRI, r3
 8004556:	f3bf 8f6f 	isb	sy
 800455a:	f3bf 8f4f 	dsb	sy
 800455e:	617b      	str	r3, [r7, #20]
}
 8004560:	bf00      	nop
 8004562:	e7fe      	b.n	8004562 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d06e      	beq.n	8004648 <pvPortMalloc+0x150>
 800456a:	4b45      	ldr	r3, [pc, #276]	; (8004680 <pvPortMalloc+0x188>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	429a      	cmp	r2, r3
 8004572:	d869      	bhi.n	8004648 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004574:	4b43      	ldr	r3, [pc, #268]	; (8004684 <pvPortMalloc+0x18c>)
 8004576:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004578:	4b42      	ldr	r3, [pc, #264]	; (8004684 <pvPortMalloc+0x18c>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800457e:	e004      	b.n	800458a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004582:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800458a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	429a      	cmp	r2, r3
 8004592:	d903      	bls.n	800459c <pvPortMalloc+0xa4>
 8004594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d1f1      	bne.n	8004580 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800459c:	4b36      	ldr	r3, [pc, #216]	; (8004678 <pvPortMalloc+0x180>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d050      	beq.n	8004648 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80045a6:	6a3b      	ldr	r3, [r7, #32]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2208      	movs	r2, #8
 80045ac:	4413      	add	r3, r2
 80045ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80045b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	6a3b      	ldr	r3, [r7, #32]
 80045b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80045b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ba:	685a      	ldr	r2, [r3, #4]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	1ad2      	subs	r2, r2, r3
 80045c0:	2308      	movs	r3, #8
 80045c2:	005b      	lsls	r3, r3, #1
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d91f      	bls.n	8004608 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80045c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4413      	add	r3, r2
 80045ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80045d0:	69bb      	ldr	r3, [r7, #24]
 80045d2:	f003 0307 	and.w	r3, r3, #7
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d00a      	beq.n	80045f0 <pvPortMalloc+0xf8>
	__asm volatile
 80045da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045de:	f383 8811 	msr	BASEPRI, r3
 80045e2:	f3bf 8f6f 	isb	sy
 80045e6:	f3bf 8f4f 	dsb	sy
 80045ea:	613b      	str	r3, [r7, #16]
}
 80045ec:	bf00      	nop
 80045ee:	e7fe      	b.n	80045ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80045f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f2:	685a      	ldr	r2, [r3, #4]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	1ad2      	subs	r2, r2, r3
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80045fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004602:	69b8      	ldr	r0, [r7, #24]
 8004604:	f000 f908 	bl	8004818 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004608:	4b1d      	ldr	r3, [pc, #116]	; (8004680 <pvPortMalloc+0x188>)
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	4a1b      	ldr	r2, [pc, #108]	; (8004680 <pvPortMalloc+0x188>)
 8004614:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004616:	4b1a      	ldr	r3, [pc, #104]	; (8004680 <pvPortMalloc+0x188>)
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	4b1b      	ldr	r3, [pc, #108]	; (8004688 <pvPortMalloc+0x190>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	429a      	cmp	r2, r3
 8004620:	d203      	bcs.n	800462a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004622:	4b17      	ldr	r3, [pc, #92]	; (8004680 <pvPortMalloc+0x188>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a18      	ldr	r2, [pc, #96]	; (8004688 <pvPortMalloc+0x190>)
 8004628:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800462a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462c:	685a      	ldr	r2, [r3, #4]
 800462e:	4b13      	ldr	r3, [pc, #76]	; (800467c <pvPortMalloc+0x184>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	431a      	orrs	r2, r3
 8004634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004636:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463a:	2200      	movs	r2, #0
 800463c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800463e:	4b13      	ldr	r3, [pc, #76]	; (800468c <pvPortMalloc+0x194>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	3301      	adds	r3, #1
 8004644:	4a11      	ldr	r2, [pc, #68]	; (800468c <pvPortMalloc+0x194>)
 8004646:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004648:	f7fe fd04 	bl	8003054 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	f003 0307 	and.w	r3, r3, #7
 8004652:	2b00      	cmp	r3, #0
 8004654:	d00a      	beq.n	800466c <pvPortMalloc+0x174>
	__asm volatile
 8004656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800465a:	f383 8811 	msr	BASEPRI, r3
 800465e:	f3bf 8f6f 	isb	sy
 8004662:	f3bf 8f4f 	dsb	sy
 8004666:	60fb      	str	r3, [r7, #12]
}
 8004668:	bf00      	nop
 800466a:	e7fe      	b.n	800466a <pvPortMalloc+0x172>
	return pvReturn;
 800466c:	69fb      	ldr	r3, [r7, #28]
}
 800466e:	4618      	mov	r0, r3
 8004670:	3728      	adds	r7, #40	; 0x28
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	200019c4 	.word	0x200019c4
 800467c:	200019d8 	.word	0x200019d8
 8004680:	200019c8 	.word	0x200019c8
 8004684:	200019bc 	.word	0x200019bc
 8004688:	200019cc 	.word	0x200019cc
 800468c:	200019d0 	.word	0x200019d0

08004690 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b086      	sub	sp, #24
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d04d      	beq.n	800473e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80046a2:	2308      	movs	r3, #8
 80046a4:	425b      	negs	r3, r3
 80046a6:	697a      	ldr	r2, [r7, #20]
 80046a8:	4413      	add	r3, r2
 80046aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	685a      	ldr	r2, [r3, #4]
 80046b4:	4b24      	ldr	r3, [pc, #144]	; (8004748 <vPortFree+0xb8>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4013      	ands	r3, r2
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d10a      	bne.n	80046d4 <vPortFree+0x44>
	__asm volatile
 80046be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c2:	f383 8811 	msr	BASEPRI, r3
 80046c6:	f3bf 8f6f 	isb	sy
 80046ca:	f3bf 8f4f 	dsb	sy
 80046ce:	60fb      	str	r3, [r7, #12]
}
 80046d0:	bf00      	nop
 80046d2:	e7fe      	b.n	80046d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00a      	beq.n	80046f2 <vPortFree+0x62>
	__asm volatile
 80046dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e0:	f383 8811 	msr	BASEPRI, r3
 80046e4:	f3bf 8f6f 	isb	sy
 80046e8:	f3bf 8f4f 	dsb	sy
 80046ec:	60bb      	str	r3, [r7, #8]
}
 80046ee:	bf00      	nop
 80046f0:	e7fe      	b.n	80046f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	685a      	ldr	r2, [r3, #4]
 80046f6:	4b14      	ldr	r3, [pc, #80]	; (8004748 <vPortFree+0xb8>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4013      	ands	r3, r2
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d01e      	beq.n	800473e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d11a      	bne.n	800473e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	685a      	ldr	r2, [r3, #4]
 800470c:	4b0e      	ldr	r3, [pc, #56]	; (8004748 <vPortFree+0xb8>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	43db      	mvns	r3, r3
 8004712:	401a      	ands	r2, r3
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004718:	f7fe fc8e 	bl	8003038 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	685a      	ldr	r2, [r3, #4]
 8004720:	4b0a      	ldr	r3, [pc, #40]	; (800474c <vPortFree+0xbc>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4413      	add	r3, r2
 8004726:	4a09      	ldr	r2, [pc, #36]	; (800474c <vPortFree+0xbc>)
 8004728:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800472a:	6938      	ldr	r0, [r7, #16]
 800472c:	f000 f874 	bl	8004818 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004730:	4b07      	ldr	r3, [pc, #28]	; (8004750 <vPortFree+0xc0>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	3301      	adds	r3, #1
 8004736:	4a06      	ldr	r2, [pc, #24]	; (8004750 <vPortFree+0xc0>)
 8004738:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800473a:	f7fe fc8b 	bl	8003054 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800473e:	bf00      	nop
 8004740:	3718      	adds	r7, #24
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	200019d8 	.word	0x200019d8
 800474c:	200019c8 	.word	0x200019c8
 8004750:	200019d4 	.word	0x200019d4

08004754 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004754:	b480      	push	{r7}
 8004756:	b085      	sub	sp, #20
 8004758:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800475a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800475e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004760:	4b27      	ldr	r3, [pc, #156]	; (8004800 <prvHeapInit+0xac>)
 8004762:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f003 0307 	and.w	r3, r3, #7
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00c      	beq.n	8004788 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	3307      	adds	r3, #7
 8004772:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f023 0307 	bic.w	r3, r3, #7
 800477a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800477c:	68ba      	ldr	r2, [r7, #8]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	4a1f      	ldr	r2, [pc, #124]	; (8004800 <prvHeapInit+0xac>)
 8004784:	4413      	add	r3, r2
 8004786:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800478c:	4a1d      	ldr	r2, [pc, #116]	; (8004804 <prvHeapInit+0xb0>)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004792:	4b1c      	ldr	r3, [pc, #112]	; (8004804 <prvHeapInit+0xb0>)
 8004794:	2200      	movs	r2, #0
 8004796:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	68ba      	ldr	r2, [r7, #8]
 800479c:	4413      	add	r3, r2
 800479e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80047a0:	2208      	movs	r2, #8
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	1a9b      	subs	r3, r3, r2
 80047a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f023 0307 	bic.w	r3, r3, #7
 80047ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	4a15      	ldr	r2, [pc, #84]	; (8004808 <prvHeapInit+0xb4>)
 80047b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80047b6:	4b14      	ldr	r3, [pc, #80]	; (8004808 <prvHeapInit+0xb4>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	2200      	movs	r2, #0
 80047bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80047be:	4b12      	ldr	r3, [pc, #72]	; (8004808 <prvHeapInit+0xb4>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2200      	movs	r2, #0
 80047c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	68fa      	ldr	r2, [r7, #12]
 80047ce:	1ad2      	subs	r2, r2, r3
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80047d4:	4b0c      	ldr	r3, [pc, #48]	; (8004808 <prvHeapInit+0xb4>)
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	4a0a      	ldr	r2, [pc, #40]	; (800480c <prvHeapInit+0xb8>)
 80047e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	4a09      	ldr	r2, [pc, #36]	; (8004810 <prvHeapInit+0xbc>)
 80047ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80047ec:	4b09      	ldr	r3, [pc, #36]	; (8004814 <prvHeapInit+0xc0>)
 80047ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80047f2:	601a      	str	r2, [r3, #0]
}
 80047f4:	bf00      	nop
 80047f6:	3714      	adds	r7, #20
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr
 8004800:	20000e04 	.word	0x20000e04
 8004804:	200019bc 	.word	0x200019bc
 8004808:	200019c4 	.word	0x200019c4
 800480c:	200019cc 	.word	0x200019cc
 8004810:	200019c8 	.word	0x200019c8
 8004814:	200019d8 	.word	0x200019d8

08004818 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004818:	b480      	push	{r7}
 800481a:	b085      	sub	sp, #20
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004820:	4b28      	ldr	r3, [pc, #160]	; (80048c4 <prvInsertBlockIntoFreeList+0xac>)
 8004822:	60fb      	str	r3, [r7, #12]
 8004824:	e002      	b.n	800482c <prvInsertBlockIntoFreeList+0x14>
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	60fb      	str	r3, [r7, #12]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	429a      	cmp	r2, r3
 8004834:	d8f7      	bhi.n	8004826 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	68ba      	ldr	r2, [r7, #8]
 8004840:	4413      	add	r3, r2
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	429a      	cmp	r2, r3
 8004846:	d108      	bne.n	800485a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	685a      	ldr	r2, [r3, #4]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	441a      	add	r2, r3
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	68ba      	ldr	r2, [r7, #8]
 8004864:	441a      	add	r2, r3
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	429a      	cmp	r2, r3
 800486c:	d118      	bne.n	80048a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	4b15      	ldr	r3, [pc, #84]	; (80048c8 <prvInsertBlockIntoFreeList+0xb0>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	429a      	cmp	r2, r3
 8004878:	d00d      	beq.n	8004896 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685a      	ldr	r2, [r3, #4]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	441a      	add	r2, r3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	601a      	str	r2, [r3, #0]
 8004894:	e008      	b.n	80048a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004896:	4b0c      	ldr	r3, [pc, #48]	; (80048c8 <prvInsertBlockIntoFreeList+0xb0>)
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	601a      	str	r2, [r3, #0]
 800489e:	e003      	b.n	80048a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80048a8:	68fa      	ldr	r2, [r7, #12]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d002      	beq.n	80048b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80048b6:	bf00      	nop
 80048b8:	3714      	adds	r7, #20
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	200019bc 	.word	0x200019bc
 80048c8:	200019c4 	.word	0x200019c4

080048cc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80048d2:	2300      	movs	r3, #0
 80048d4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80048d6:	2003      	movs	r0, #3
 80048d8:	f000 f928 	bl	8004b2c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80048dc:	2000      	movs	r0, #0
 80048de:	f000 f80d 	bl	80048fc <HAL_InitTick>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d002      	beq.n	80048ee <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	71fb      	strb	r3, [r7, #7]
 80048ec:	e001      	b.n	80048f2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80048ee:	f003 feb5 	bl	800865c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80048f2:	79fb      	ldrb	r3, [r7, #7]
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3708      	adds	r7, #8
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004904:	2300      	movs	r3, #0
 8004906:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8004908:	4b17      	ldr	r3, [pc, #92]	; (8004968 <HAL_InitTick+0x6c>)
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d023      	beq.n	8004958 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004910:	4b16      	ldr	r3, [pc, #88]	; (800496c <HAL_InitTick+0x70>)
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	4b14      	ldr	r3, [pc, #80]	; (8004968 <HAL_InitTick+0x6c>)
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	4619      	mov	r1, r3
 800491a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800491e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004922:	fbb2 f3f3 	udiv	r3, r2, r3
 8004926:	4618      	mov	r0, r3
 8004928:	f000 f935 	bl	8004b96 <HAL_SYSTICK_Config>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d10f      	bne.n	8004952 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2b0f      	cmp	r3, #15
 8004936:	d809      	bhi.n	800494c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004938:	2200      	movs	r2, #0
 800493a:	6879      	ldr	r1, [r7, #4]
 800493c:	f04f 30ff 	mov.w	r0, #4294967295
 8004940:	f000 f8ff 	bl	8004b42 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004944:	4a0a      	ldr	r2, [pc, #40]	; (8004970 <HAL_InitTick+0x74>)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6013      	str	r3, [r2, #0]
 800494a:	e007      	b.n	800495c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	73fb      	strb	r3, [r7, #15]
 8004950:	e004      	b.n	800495c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	73fb      	strb	r3, [r7, #15]
 8004956:	e001      	b.n	800495c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800495c:	7bfb      	ldrb	r3, [r7, #15]
}
 800495e:	4618      	mov	r0, r3
 8004960:	3710      	adds	r7, #16
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
 8004966:	bf00      	nop
 8004968:	20000014 	.word	0x20000014
 800496c:	20000018 	.word	0x20000018
 8004970:	20000010 	.word	0x20000010

08004974 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004974:	b480      	push	{r7}
 8004976:	af00      	add	r7, sp, #0
  return uwTick;
 8004978:	4b03      	ldr	r3, [pc, #12]	; (8004988 <HAL_GetTick+0x14>)
 800497a:	681b      	ldr	r3, [r3, #0]
}
 800497c:	4618      	mov	r0, r3
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop
 8004988:	20001ce8 	.word	0x20001ce8

0800498c <__NVIC_SetPriorityGrouping>:
{
 800498c:	b480      	push	{r7}
 800498e:	b085      	sub	sp, #20
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f003 0307 	and.w	r3, r3, #7
 800499a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800499c:	4b0c      	ldr	r3, [pc, #48]	; (80049d0 <__NVIC_SetPriorityGrouping+0x44>)
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80049a2:	68ba      	ldr	r2, [r7, #8]
 80049a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80049a8:	4013      	ands	r3, r2
 80049aa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80049b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80049b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80049be:	4a04      	ldr	r2, [pc, #16]	; (80049d0 <__NVIC_SetPriorityGrouping+0x44>)
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	60d3      	str	r3, [r2, #12]
}
 80049c4:	bf00      	nop
 80049c6:	3714      	adds	r7, #20
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr
 80049d0:	e000ed00 	.word	0xe000ed00

080049d4 <__NVIC_GetPriorityGrouping>:
{
 80049d4:	b480      	push	{r7}
 80049d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049d8:	4b04      	ldr	r3, [pc, #16]	; (80049ec <__NVIC_GetPriorityGrouping+0x18>)
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	0a1b      	lsrs	r3, r3, #8
 80049de:	f003 0307 	and.w	r3, r3, #7
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr
 80049ec:	e000ed00 	.word	0xe000ed00

080049f0 <__NVIC_EnableIRQ>:
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	4603      	mov	r3, r0
 80049f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	db0b      	blt.n	8004a1a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a02:	79fb      	ldrb	r3, [r7, #7]
 8004a04:	f003 021f 	and.w	r2, r3, #31
 8004a08:	4907      	ldr	r1, [pc, #28]	; (8004a28 <__NVIC_EnableIRQ+0x38>)
 8004a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a0e:	095b      	lsrs	r3, r3, #5
 8004a10:	2001      	movs	r0, #1
 8004a12:	fa00 f202 	lsl.w	r2, r0, r2
 8004a16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004a1a:	bf00      	nop
 8004a1c:	370c      	adds	r7, #12
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	e000e100 	.word	0xe000e100

08004a2c <__NVIC_SetPriority>:
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b083      	sub	sp, #12
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	4603      	mov	r3, r0
 8004a34:	6039      	str	r1, [r7, #0]
 8004a36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	db0a      	blt.n	8004a56 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	b2da      	uxtb	r2, r3
 8004a44:	490c      	ldr	r1, [pc, #48]	; (8004a78 <__NVIC_SetPriority+0x4c>)
 8004a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a4a:	0112      	lsls	r2, r2, #4
 8004a4c:	b2d2      	uxtb	r2, r2
 8004a4e:	440b      	add	r3, r1
 8004a50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004a54:	e00a      	b.n	8004a6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	b2da      	uxtb	r2, r3
 8004a5a:	4908      	ldr	r1, [pc, #32]	; (8004a7c <__NVIC_SetPriority+0x50>)
 8004a5c:	79fb      	ldrb	r3, [r7, #7]
 8004a5e:	f003 030f 	and.w	r3, r3, #15
 8004a62:	3b04      	subs	r3, #4
 8004a64:	0112      	lsls	r2, r2, #4
 8004a66:	b2d2      	uxtb	r2, r2
 8004a68:	440b      	add	r3, r1
 8004a6a:	761a      	strb	r2, [r3, #24]
}
 8004a6c:	bf00      	nop
 8004a6e:	370c      	adds	r7, #12
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr
 8004a78:	e000e100 	.word	0xe000e100
 8004a7c:	e000ed00 	.word	0xe000ed00

08004a80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b089      	sub	sp, #36	; 0x24
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	60b9      	str	r1, [r7, #8]
 8004a8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f003 0307 	and.w	r3, r3, #7
 8004a92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	f1c3 0307 	rsb	r3, r3, #7
 8004a9a:	2b04      	cmp	r3, #4
 8004a9c:	bf28      	it	cs
 8004a9e:	2304      	movcs	r3, #4
 8004aa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004aa2:	69fb      	ldr	r3, [r7, #28]
 8004aa4:	3304      	adds	r3, #4
 8004aa6:	2b06      	cmp	r3, #6
 8004aa8:	d902      	bls.n	8004ab0 <NVIC_EncodePriority+0x30>
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	3b03      	subs	r3, #3
 8004aae:	e000      	b.n	8004ab2 <NVIC_EncodePriority+0x32>
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ab8:	69bb      	ldr	r3, [r7, #24]
 8004aba:	fa02 f303 	lsl.w	r3, r2, r3
 8004abe:	43da      	mvns	r2, r3
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	401a      	ands	r2, r3
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ac8:	f04f 31ff 	mov.w	r1, #4294967295
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	fa01 f303 	lsl.w	r3, r1, r3
 8004ad2:	43d9      	mvns	r1, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ad8:	4313      	orrs	r3, r2
         );
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3724      	adds	r7, #36	; 0x24
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr
	...

08004ae8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	3b01      	subs	r3, #1
 8004af4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004af8:	d301      	bcc.n	8004afe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004afa:	2301      	movs	r3, #1
 8004afc:	e00f      	b.n	8004b1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004afe:	4a0a      	ldr	r2, [pc, #40]	; (8004b28 <SysTick_Config+0x40>)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	3b01      	subs	r3, #1
 8004b04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b06:	210f      	movs	r1, #15
 8004b08:	f04f 30ff 	mov.w	r0, #4294967295
 8004b0c:	f7ff ff8e 	bl	8004a2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b10:	4b05      	ldr	r3, [pc, #20]	; (8004b28 <SysTick_Config+0x40>)
 8004b12:	2200      	movs	r2, #0
 8004b14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b16:	4b04      	ldr	r3, [pc, #16]	; (8004b28 <SysTick_Config+0x40>)
 8004b18:	2207      	movs	r2, #7
 8004b1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3708      	adds	r7, #8
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	e000e010 	.word	0xe000e010

08004b2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b082      	sub	sp, #8
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f7ff ff29 	bl	800498c <__NVIC_SetPriorityGrouping>
}
 8004b3a:	bf00      	nop
 8004b3c:	3708      	adds	r7, #8
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}

08004b42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b42:	b580      	push	{r7, lr}
 8004b44:	b086      	sub	sp, #24
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	4603      	mov	r3, r0
 8004b4a:	60b9      	str	r1, [r7, #8]
 8004b4c:	607a      	str	r2, [r7, #4]
 8004b4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004b50:	2300      	movs	r3, #0
 8004b52:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004b54:	f7ff ff3e 	bl	80049d4 <__NVIC_GetPriorityGrouping>
 8004b58:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	68b9      	ldr	r1, [r7, #8]
 8004b5e:	6978      	ldr	r0, [r7, #20]
 8004b60:	f7ff ff8e 	bl	8004a80 <NVIC_EncodePriority>
 8004b64:	4602      	mov	r2, r0
 8004b66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b6a:	4611      	mov	r1, r2
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f7ff ff5d 	bl	8004a2c <__NVIC_SetPriority>
}
 8004b72:	bf00      	nop
 8004b74:	3718      	adds	r7, #24
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}

08004b7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b7a:	b580      	push	{r7, lr}
 8004b7c:	b082      	sub	sp, #8
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	4603      	mov	r3, r0
 8004b82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f7ff ff31 	bl	80049f0 <__NVIC_EnableIRQ>
}
 8004b8e:	bf00      	nop
 8004b90:	3708      	adds	r7, #8
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}

08004b96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b96:	b580      	push	{r7, lr}
 8004b98:	b082      	sub	sp, #8
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f7ff ffa2 	bl	8004ae8 <SysTick_Config>
 8004ba4:	4603      	mov	r3, r0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3708      	adds	r7, #8
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
	...

08004bb0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b085      	sub	sp, #20
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d101      	bne.n	8004bc2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e098      	b.n	8004cf4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	4b4d      	ldr	r3, [pc, #308]	; (8004d00 <HAL_DMA_Init+0x150>)
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d80f      	bhi.n	8004bee <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	4b4b      	ldr	r3, [pc, #300]	; (8004d04 <HAL_DMA_Init+0x154>)
 8004bd6:	4413      	add	r3, r2
 8004bd8:	4a4b      	ldr	r2, [pc, #300]	; (8004d08 <HAL_DMA_Init+0x158>)
 8004bda:	fba2 2303 	umull	r2, r3, r2, r3
 8004bde:	091b      	lsrs	r3, r3, #4
 8004be0:	009a      	lsls	r2, r3, #2
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a48      	ldr	r2, [pc, #288]	; (8004d0c <HAL_DMA_Init+0x15c>)
 8004bea:	641a      	str	r2, [r3, #64]	; 0x40
 8004bec:	e00e      	b.n	8004c0c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	4b46      	ldr	r3, [pc, #280]	; (8004d10 <HAL_DMA_Init+0x160>)
 8004bf6:	4413      	add	r3, r2
 8004bf8:	4a43      	ldr	r2, [pc, #268]	; (8004d08 <HAL_DMA_Init+0x158>)
 8004bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8004bfe:	091b      	lsrs	r3, r3, #4
 8004c00:	009a      	lsls	r2, r3, #2
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a42      	ldr	r2, [pc, #264]	; (8004d14 <HAL_DMA_Init+0x164>)
 8004c0a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2202      	movs	r2, #2
 8004c10:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004c22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c26:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004c30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	699b      	ldr	r3, [r3, #24]
 8004c42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a1b      	ldr	r3, [r3, #32]
 8004c4e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004c50:	68fa      	ldr	r2, [r7, #12]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	68fa      	ldr	r2, [r7, #12]
 8004c5c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c66:	d039      	beq.n	8004cdc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6c:	4a27      	ldr	r2, [pc, #156]	; (8004d0c <HAL_DMA_Init+0x15c>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d11a      	bne.n	8004ca8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004c72:	4b29      	ldr	r3, [pc, #164]	; (8004d18 <HAL_DMA_Init+0x168>)
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c7a:	f003 031c 	and.w	r3, r3, #28
 8004c7e:	210f      	movs	r1, #15
 8004c80:	fa01 f303 	lsl.w	r3, r1, r3
 8004c84:	43db      	mvns	r3, r3
 8004c86:	4924      	ldr	r1, [pc, #144]	; (8004d18 <HAL_DMA_Init+0x168>)
 8004c88:	4013      	ands	r3, r2
 8004c8a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004c8c:	4b22      	ldr	r3, [pc, #136]	; (8004d18 <HAL_DMA_Init+0x168>)
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6859      	ldr	r1, [r3, #4]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c98:	f003 031c 	and.w	r3, r3, #28
 8004c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8004ca0:	491d      	ldr	r1, [pc, #116]	; (8004d18 <HAL_DMA_Init+0x168>)
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	600b      	str	r3, [r1, #0]
 8004ca6:	e019      	b.n	8004cdc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004ca8:	4b1c      	ldr	r3, [pc, #112]	; (8004d1c <HAL_DMA_Init+0x16c>)
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cb0:	f003 031c 	and.w	r3, r3, #28
 8004cb4:	210f      	movs	r1, #15
 8004cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8004cba:	43db      	mvns	r3, r3
 8004cbc:	4917      	ldr	r1, [pc, #92]	; (8004d1c <HAL_DMA_Init+0x16c>)
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004cc2:	4b16      	ldr	r3, [pc, #88]	; (8004d1c <HAL_DMA_Init+0x16c>)
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6859      	ldr	r1, [r3, #4]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cce:	f003 031c 	and.w	r3, r3, #28
 8004cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8004cd6:	4911      	ldr	r1, [pc, #68]	; (8004d1c <HAL_DMA_Init+0x16c>)
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004cf2:	2300      	movs	r3, #0
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3714      	adds	r7, #20
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr
 8004d00:	40020407 	.word	0x40020407
 8004d04:	bffdfff8 	.word	0xbffdfff8
 8004d08:	cccccccd 	.word	0xcccccccd
 8004d0c:	40020000 	.word	0x40020000
 8004d10:	bffdfbf8 	.word	0xbffdfbf8
 8004d14:	40020400 	.word	0x40020400
 8004d18:	400200a8 	.word	0x400200a8
 8004d1c:	400204a8 	.word	0x400204a8

08004d20 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b086      	sub	sp, #24
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	607a      	str	r2, [r7, #4]
 8004d2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d101      	bne.n	8004d40 <HAL_DMA_Start_IT+0x20>
 8004d3c:	2302      	movs	r3, #2
 8004d3e:	e04b      	b.n	8004dd8 <HAL_DMA_Start_IT+0xb8>
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d13a      	bne.n	8004dca <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2202      	movs	r2, #2
 8004d58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f022 0201 	bic.w	r2, r2, #1
 8004d70:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	68b9      	ldr	r1, [r7, #8]
 8004d78:	68f8      	ldr	r0, [r7, #12]
 8004d7a:	f000 f921 	bl	8004fc0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d008      	beq.n	8004d98 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f042 020e 	orr.w	r2, r2, #14
 8004d94:	601a      	str	r2, [r3, #0]
 8004d96:	e00f      	b.n	8004db8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f022 0204 	bic.w	r2, r2, #4
 8004da6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f042 020a 	orr.w	r2, r2, #10
 8004db6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f042 0201 	orr.w	r2, r2, #1
 8004dc6:	601a      	str	r2, [r3, #0]
 8004dc8:	e005      	b.n	8004dd6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004dd2:	2302      	movs	r3, #2
 8004dd4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004dd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3718      	adds	r7, #24
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004de8:	2300      	movs	r3, #0
 8004dea:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	d005      	beq.n	8004e04 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2204      	movs	r2, #4
 8004dfc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	73fb      	strb	r3, [r7, #15]
 8004e02:	e029      	b.n	8004e58 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f022 020e 	bic.w	r2, r2, #14
 8004e12:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f022 0201 	bic.w	r2, r2, #1
 8004e22:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e28:	f003 021c 	and.w	r2, r3, #28
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e30:	2101      	movs	r1, #1
 8004e32:	fa01 f202 	lsl.w	r2, r1, r2
 8004e36:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d003      	beq.n	8004e58 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	4798      	blx	r3
    }
  }
  return status;
 8004e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3710      	adds	r7, #16
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}

08004e62 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004e62:	b580      	push	{r7, lr}
 8004e64:	b084      	sub	sp, #16
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e7e:	f003 031c 	and.w	r3, r3, #28
 8004e82:	2204      	movs	r2, #4
 8004e84:	409a      	lsls	r2, r3
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	4013      	ands	r3, r2
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d026      	beq.n	8004edc <HAL_DMA_IRQHandler+0x7a>
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	f003 0304 	and.w	r3, r3, #4
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d021      	beq.n	8004edc <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 0320 	and.w	r3, r3, #32
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d107      	bne.n	8004eb6 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f022 0204 	bic.w	r2, r2, #4
 8004eb4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eba:	f003 021c 	and.w	r2, r3, #28
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec2:	2104      	movs	r1, #4
 8004ec4:	fa01 f202 	lsl.w	r2, r1, r2
 8004ec8:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d071      	beq.n	8004fb6 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8004eda:	e06c      	b.n	8004fb6 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ee0:	f003 031c 	and.w	r3, r3, #28
 8004ee4:	2202      	movs	r2, #2
 8004ee6:	409a      	lsls	r2, r3
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	4013      	ands	r3, r2
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d02e      	beq.n	8004f4e <HAL_DMA_IRQHandler+0xec>
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	f003 0302 	and.w	r3, r3, #2
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d029      	beq.n	8004f4e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 0320 	and.w	r3, r3, #32
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d10b      	bne.n	8004f20 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f022 020a 	bic.w	r2, r2, #10
 8004f16:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f24:	f003 021c 	and.w	r2, r3, #28
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2c:	2102      	movs	r1, #2
 8004f2e:	fa01 f202 	lsl.w	r2, r1, r2
 8004f32:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d038      	beq.n	8004fb6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004f4c:	e033      	b.n	8004fb6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f52:	f003 031c 	and.w	r3, r3, #28
 8004f56:	2208      	movs	r2, #8
 8004f58:	409a      	lsls	r2, r3
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d02a      	beq.n	8004fb8 <HAL_DMA_IRQHandler+0x156>
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	f003 0308 	and.w	r3, r3, #8
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d025      	beq.n	8004fb8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f022 020e 	bic.w	r2, r2, #14
 8004f7a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f80:	f003 021c 	and.w	r2, r3, #28
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f88:	2101      	movs	r1, #1
 8004f8a:	fa01 f202 	lsl.w	r2, r1, r2
 8004f8e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2201      	movs	r2, #1
 8004f9a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d004      	beq.n	8004fb8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004fb6:	bf00      	nop
 8004fb8:	bf00      	nop
}
 8004fba:	3710      	adds	r7, #16
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}

08004fc0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b085      	sub	sp, #20
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	60f8      	str	r0, [r7, #12]
 8004fc8:	60b9      	str	r1, [r7, #8]
 8004fca:	607a      	str	r2, [r7, #4]
 8004fcc:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fd2:	f003 021c 	and.w	r2, r3, #28
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fda:	2101      	movs	r1, #1
 8004fdc:	fa01 f202 	lsl.w	r2, r1, r2
 8004fe0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	683a      	ldr	r2, [r7, #0]
 8004fe8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	2b10      	cmp	r3, #16
 8004ff0:	d108      	bne.n	8005004 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	68ba      	ldr	r2, [r7, #8]
 8005000:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005002:	e007      	b.n	8005014 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	68ba      	ldr	r2, [r7, #8]
 800500a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	60da      	str	r2, [r3, #12]
}
 8005014:	bf00      	nop
 8005016:	3714      	adds	r7, #20
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr

08005020 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005020:	b480      	push	{r7}
 8005022:	b087      	sub	sp, #28
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800502a:	2300      	movs	r3, #0
 800502c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800502e:	e154      	b.n	80052da <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	2101      	movs	r1, #1
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	fa01 f303 	lsl.w	r3, r1, r3
 800503c:	4013      	ands	r3, r2
 800503e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2b00      	cmp	r3, #0
 8005044:	f000 8146 	beq.w	80052d4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	f003 0303 	and.w	r3, r3, #3
 8005050:	2b01      	cmp	r3, #1
 8005052:	d005      	beq.n	8005060 <HAL_GPIO_Init+0x40>
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	f003 0303 	and.w	r3, r3, #3
 800505c:	2b02      	cmp	r3, #2
 800505e:	d130      	bne.n	80050c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	005b      	lsls	r3, r3, #1
 800506a:	2203      	movs	r2, #3
 800506c:	fa02 f303 	lsl.w	r3, r2, r3
 8005070:	43db      	mvns	r3, r3
 8005072:	693a      	ldr	r2, [r7, #16]
 8005074:	4013      	ands	r3, r2
 8005076:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	68da      	ldr	r2, [r3, #12]
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	005b      	lsls	r3, r3, #1
 8005080:	fa02 f303 	lsl.w	r3, r2, r3
 8005084:	693a      	ldr	r2, [r7, #16]
 8005086:	4313      	orrs	r3, r2
 8005088:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	693a      	ldr	r2, [r7, #16]
 800508e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005096:	2201      	movs	r2, #1
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	fa02 f303 	lsl.w	r3, r2, r3
 800509e:	43db      	mvns	r3, r3
 80050a0:	693a      	ldr	r2, [r7, #16]
 80050a2:	4013      	ands	r3, r2
 80050a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	091b      	lsrs	r3, r3, #4
 80050ac:	f003 0201 	and.w	r2, r3, #1
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	fa02 f303 	lsl.w	r3, r2, r3
 80050b6:	693a      	ldr	r2, [r7, #16]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	693a      	ldr	r2, [r7, #16]
 80050c0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	f003 0303 	and.w	r3, r3, #3
 80050ca:	2b03      	cmp	r3, #3
 80050cc:	d017      	beq.n	80050fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	005b      	lsls	r3, r3, #1
 80050d8:	2203      	movs	r2, #3
 80050da:	fa02 f303 	lsl.w	r3, r2, r3
 80050de:	43db      	mvns	r3, r3
 80050e0:	693a      	ldr	r2, [r7, #16]
 80050e2:	4013      	ands	r3, r2
 80050e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	689a      	ldr	r2, [r3, #8]
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	005b      	lsls	r3, r3, #1
 80050ee:	fa02 f303 	lsl.w	r3, r2, r3
 80050f2:	693a      	ldr	r2, [r7, #16]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	693a      	ldr	r2, [r7, #16]
 80050fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	f003 0303 	and.w	r3, r3, #3
 8005106:	2b02      	cmp	r3, #2
 8005108:	d123      	bne.n	8005152 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	08da      	lsrs	r2, r3, #3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	3208      	adds	r2, #8
 8005112:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005116:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	f003 0307 	and.w	r3, r3, #7
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	220f      	movs	r2, #15
 8005122:	fa02 f303 	lsl.w	r3, r2, r3
 8005126:	43db      	mvns	r3, r3
 8005128:	693a      	ldr	r2, [r7, #16]
 800512a:	4013      	ands	r3, r2
 800512c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	691a      	ldr	r2, [r3, #16]
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	f003 0307 	and.w	r3, r3, #7
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	fa02 f303 	lsl.w	r3, r2, r3
 800513e:	693a      	ldr	r2, [r7, #16]
 8005140:	4313      	orrs	r3, r2
 8005142:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	08da      	lsrs	r2, r3, #3
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	3208      	adds	r2, #8
 800514c:	6939      	ldr	r1, [r7, #16]
 800514e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	005b      	lsls	r3, r3, #1
 800515c:	2203      	movs	r2, #3
 800515e:	fa02 f303 	lsl.w	r3, r2, r3
 8005162:	43db      	mvns	r3, r3
 8005164:	693a      	ldr	r2, [r7, #16]
 8005166:	4013      	ands	r3, r2
 8005168:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	f003 0203 	and.w	r2, r3, #3
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	005b      	lsls	r3, r3, #1
 8005176:	fa02 f303 	lsl.w	r3, r2, r3
 800517a:	693a      	ldr	r2, [r7, #16]
 800517c:	4313      	orrs	r3, r2
 800517e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	693a      	ldr	r2, [r7, #16]
 8005184:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800518e:	2b00      	cmp	r3, #0
 8005190:	f000 80a0 	beq.w	80052d4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005194:	4b58      	ldr	r3, [pc, #352]	; (80052f8 <HAL_GPIO_Init+0x2d8>)
 8005196:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005198:	4a57      	ldr	r2, [pc, #348]	; (80052f8 <HAL_GPIO_Init+0x2d8>)
 800519a:	f043 0301 	orr.w	r3, r3, #1
 800519e:	6613      	str	r3, [r2, #96]	; 0x60
 80051a0:	4b55      	ldr	r3, [pc, #340]	; (80052f8 <HAL_GPIO_Init+0x2d8>)
 80051a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051a4:	f003 0301 	and.w	r3, r3, #1
 80051a8:	60bb      	str	r3, [r7, #8]
 80051aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80051ac:	4a53      	ldr	r2, [pc, #332]	; (80052fc <HAL_GPIO_Init+0x2dc>)
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	089b      	lsrs	r3, r3, #2
 80051b2:	3302      	adds	r3, #2
 80051b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	f003 0303 	and.w	r3, r3, #3
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	220f      	movs	r2, #15
 80051c4:	fa02 f303 	lsl.w	r3, r2, r3
 80051c8:	43db      	mvns	r3, r3
 80051ca:	693a      	ldr	r2, [r7, #16]
 80051cc:	4013      	ands	r3, r2
 80051ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80051d6:	d019      	beq.n	800520c <HAL_GPIO_Init+0x1ec>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	4a49      	ldr	r2, [pc, #292]	; (8005300 <HAL_GPIO_Init+0x2e0>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d013      	beq.n	8005208 <HAL_GPIO_Init+0x1e8>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	4a48      	ldr	r2, [pc, #288]	; (8005304 <HAL_GPIO_Init+0x2e4>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d00d      	beq.n	8005204 <HAL_GPIO_Init+0x1e4>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a47      	ldr	r2, [pc, #284]	; (8005308 <HAL_GPIO_Init+0x2e8>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d007      	beq.n	8005200 <HAL_GPIO_Init+0x1e0>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a46      	ldr	r2, [pc, #280]	; (800530c <HAL_GPIO_Init+0x2ec>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d101      	bne.n	80051fc <HAL_GPIO_Init+0x1dc>
 80051f8:	2304      	movs	r3, #4
 80051fa:	e008      	b.n	800520e <HAL_GPIO_Init+0x1ee>
 80051fc:	2307      	movs	r3, #7
 80051fe:	e006      	b.n	800520e <HAL_GPIO_Init+0x1ee>
 8005200:	2303      	movs	r3, #3
 8005202:	e004      	b.n	800520e <HAL_GPIO_Init+0x1ee>
 8005204:	2302      	movs	r3, #2
 8005206:	e002      	b.n	800520e <HAL_GPIO_Init+0x1ee>
 8005208:	2301      	movs	r3, #1
 800520a:	e000      	b.n	800520e <HAL_GPIO_Init+0x1ee>
 800520c:	2300      	movs	r3, #0
 800520e:	697a      	ldr	r2, [r7, #20]
 8005210:	f002 0203 	and.w	r2, r2, #3
 8005214:	0092      	lsls	r2, r2, #2
 8005216:	4093      	lsls	r3, r2
 8005218:	693a      	ldr	r2, [r7, #16]
 800521a:	4313      	orrs	r3, r2
 800521c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800521e:	4937      	ldr	r1, [pc, #220]	; (80052fc <HAL_GPIO_Init+0x2dc>)
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	089b      	lsrs	r3, r3, #2
 8005224:	3302      	adds	r3, #2
 8005226:	693a      	ldr	r2, [r7, #16]
 8005228:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800522c:	4b38      	ldr	r3, [pc, #224]	; (8005310 <HAL_GPIO_Init+0x2f0>)
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	43db      	mvns	r3, r3
 8005236:	693a      	ldr	r2, [r7, #16]
 8005238:	4013      	ands	r3, r2
 800523a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005244:	2b00      	cmp	r3, #0
 8005246:	d003      	beq.n	8005250 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8005248:	693a      	ldr	r2, [r7, #16]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	4313      	orrs	r3, r2
 800524e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005250:	4a2f      	ldr	r2, [pc, #188]	; (8005310 <HAL_GPIO_Init+0x2f0>)
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005256:	4b2e      	ldr	r3, [pc, #184]	; (8005310 <HAL_GPIO_Init+0x2f0>)
 8005258:	68db      	ldr	r3, [r3, #12]
 800525a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	43db      	mvns	r3, r3
 8005260:	693a      	ldr	r2, [r7, #16]
 8005262:	4013      	ands	r3, r2
 8005264:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d003      	beq.n	800527a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8005272:	693a      	ldr	r2, [r7, #16]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	4313      	orrs	r3, r2
 8005278:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800527a:	4a25      	ldr	r2, [pc, #148]	; (8005310 <HAL_GPIO_Init+0x2f0>)
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005280:	4b23      	ldr	r3, [pc, #140]	; (8005310 <HAL_GPIO_Init+0x2f0>)
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	43db      	mvns	r3, r3
 800528a:	693a      	ldr	r2, [r7, #16]
 800528c:	4013      	ands	r3, r2
 800528e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005298:	2b00      	cmp	r3, #0
 800529a:	d003      	beq.n	80052a4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800529c:	693a      	ldr	r2, [r7, #16]
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80052a4:	4a1a      	ldr	r2, [pc, #104]	; (8005310 <HAL_GPIO_Init+0x2f0>)
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80052aa:	4b19      	ldr	r3, [pc, #100]	; (8005310 <HAL_GPIO_Init+0x2f0>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	43db      	mvns	r3, r3
 80052b4:	693a      	ldr	r2, [r7, #16]
 80052b6:	4013      	ands	r3, r2
 80052b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d003      	beq.n	80052ce <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80052c6:	693a      	ldr	r2, [r7, #16]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80052ce:	4a10      	ldr	r2, [pc, #64]	; (8005310 <HAL_GPIO_Init+0x2f0>)
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	3301      	adds	r3, #1
 80052d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	fa22 f303 	lsr.w	r3, r2, r3
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	f47f aea3 	bne.w	8005030 <HAL_GPIO_Init+0x10>
  }
}
 80052ea:	bf00      	nop
 80052ec:	bf00      	nop
 80052ee:	371c      	adds	r7, #28
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr
 80052f8:	40021000 	.word	0x40021000
 80052fc:	40010000 	.word	0x40010000
 8005300:	48000400 	.word	0x48000400
 8005304:	48000800 	.word	0x48000800
 8005308:	48000c00 	.word	0x48000c00
 800530c:	48001000 	.word	0x48001000
 8005310:	40010400 	.word	0x40010400

08005314 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	460b      	mov	r3, r1
 800531e:	807b      	strh	r3, [r7, #2]
 8005320:	4613      	mov	r3, r2
 8005322:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005324:	787b      	ldrb	r3, [r7, #1]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d003      	beq.n	8005332 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800532a:	887a      	ldrh	r2, [r7, #2]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005330:	e002      	b.n	8005338 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005332:	887a      	ldrh	r2, [r7, #2]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005338:	bf00      	nop
 800533a:	370c      	adds	r7, #12
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b082      	sub	sp, #8
 8005348:	af00      	add	r7, sp, #0
 800534a:	4603      	mov	r3, r0
 800534c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800534e:	4b08      	ldr	r3, [pc, #32]	; (8005370 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005350:	695a      	ldr	r2, [r3, #20]
 8005352:	88fb      	ldrh	r3, [r7, #6]
 8005354:	4013      	ands	r3, r2
 8005356:	2b00      	cmp	r3, #0
 8005358:	d006      	beq.n	8005368 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800535a:	4a05      	ldr	r2, [pc, #20]	; (8005370 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800535c:	88fb      	ldrh	r3, [r7, #6]
 800535e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005360:	88fb      	ldrh	r3, [r7, #6]
 8005362:	4618      	mov	r0, r3
 8005364:	f000 f806 	bl	8005374 <HAL_GPIO_EXTI_Callback>
  }
}
 8005368:	bf00      	nop
 800536a:	3708      	adds	r7, #8
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}
 8005370:	40010400 	.word	0x40010400

08005374 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005374:	b480      	push	{r7}
 8005376:	b083      	sub	sp, #12
 8005378:	af00      	add	r7, sp, #0
 800537a:	4603      	mov	r3, r0
 800537c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800537e:	bf00      	nop
 8005380:	370c      	adds	r7, #12
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr
	...

0800538c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800538c:	b480      	push	{r7}
 800538e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005390:	4b05      	ldr	r3, [pc, #20]	; (80053a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a04      	ldr	r2, [pc, #16]	; (80053a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005396:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800539a:	6013      	str	r3, [r2, #0]
}
 800539c:	bf00      	nop
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr
 80053a6:	bf00      	nop
 80053a8:	40007000 	.word	0x40007000

080053ac <HAL_PWR_ConfigPVD>:
  *         more details about the voltage thresholds corresponding to each
  *         detection level.
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b083      	sub	sp, #12
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 80053b4:	4b2b      	ldr	r3, [pc, #172]	; (8005464 <HAL_PWR_ConfigPVD+0xb8>)
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	f023 020e 	bic.w	r2, r3, #14
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4928      	ldr	r1, [pc, #160]	; (8005464 <HAL_PWR_ConfigPVD+0xb8>)
 80053c2:	4313      	orrs	r3, r2
 80053c4:	604b      	str	r3, [r1, #4]

  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 80053c6:	4b28      	ldr	r3, [pc, #160]	; (8005468 <HAL_PWR_ConfigPVD+0xbc>)
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	4a27      	ldr	r2, [pc, #156]	; (8005468 <HAL_PWR_ConfigPVD+0xbc>)
 80053cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053d0:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 80053d2:	4b25      	ldr	r3, [pc, #148]	; (8005468 <HAL_PWR_ConfigPVD+0xbc>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a24      	ldr	r2, [pc, #144]	; (8005468 <HAL_PWR_ConfigPVD+0xbc>)
 80053d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053dc:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 80053de:	4b22      	ldr	r3, [pc, #136]	; (8005468 <HAL_PWR_ConfigPVD+0xbc>)
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	4a21      	ldr	r2, [pc, #132]	; (8005468 <HAL_PWR_ConfigPVD+0xbc>)
 80053e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053e8:	60d3      	str	r3, [r2, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 80053ea:	4b1f      	ldr	r3, [pc, #124]	; (8005468 <HAL_PWR_ConfigPVD+0xbc>)
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	4a1e      	ldr	r2, [pc, #120]	; (8005468 <HAL_PWR_ConfigPVD+0xbc>)
 80053f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053f4:	6093      	str	r3, [r2, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d005      	beq.n	800540e <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8005402:	4b19      	ldr	r3, [pc, #100]	; (8005468 <HAL_PWR_ConfigPVD+0xbc>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a18      	ldr	r2, [pc, #96]	; (8005468 <HAL_PWR_ConfigPVD+0xbc>)
 8005408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800540c:	6013      	str	r3, [r2, #0]
  }

  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005416:	2b00      	cmp	r3, #0
 8005418:	d005      	beq.n	8005426 <HAL_PWR_ConfigPVD+0x7a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 800541a:	4b13      	ldr	r3, [pc, #76]	; (8005468 <HAL_PWR_ConfigPVD+0xbc>)
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	4a12      	ldr	r2, [pc, #72]	; (8005468 <HAL_PWR_ConfigPVD+0xbc>)
 8005420:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005424:	6053      	str	r3, [r2, #4]
  }

  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	f003 0301 	and.w	r3, r3, #1
 800542e:	2b00      	cmp	r3, #0
 8005430:	d005      	beq.n	800543e <HAL_PWR_ConfigPVD+0x92>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8005432:	4b0d      	ldr	r3, [pc, #52]	; (8005468 <HAL_PWR_ConfigPVD+0xbc>)
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	4a0c      	ldr	r2, [pc, #48]	; (8005468 <HAL_PWR_ConfigPVD+0xbc>)
 8005438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800543c:	6093      	str	r3, [r2, #8]
  }

  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	f003 0302 	and.w	r3, r3, #2
 8005446:	2b00      	cmp	r3, #0
 8005448:	d005      	beq.n	8005456 <HAL_PWR_ConfigPVD+0xaa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 800544a:	4b07      	ldr	r3, [pc, #28]	; (8005468 <HAL_PWR_ConfigPVD+0xbc>)
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	4a06      	ldr	r2, [pc, #24]	; (8005468 <HAL_PWR_ConfigPVD+0xbc>)
 8005450:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005454:	60d3      	str	r3, [r2, #12]
  }

  return HAL_OK;
 8005456:	2300      	movs	r3, #0
}
 8005458:	4618      	mov	r0, r3
 800545a:	370c      	adds	r7, #12
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr
 8005464:	40007000 	.word	0x40007000
 8005468:	40010400 	.word	0x40010400

0800546c <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Power Voltage Detector (PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 800546c:	b480      	push	{r7}
 800546e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 8005470:	4b05      	ldr	r3, [pc, #20]	; (8005488 <HAL_PWR_EnablePVD+0x1c>)
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	4a04      	ldr	r2, [pc, #16]	; (8005488 <HAL_PWR_EnablePVD+0x1c>)
 8005476:	f043 0301 	orr.w	r3, r3, #1
 800547a:	6053      	str	r3, [r2, #4]
}
 800547c:	bf00      	nop
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr
 8005486:	bf00      	nop
 8005488:	40007000 	.word	0x40007000

0800548c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800548c:	b480      	push	{r7}
 800548e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005490:	4b04      	ldr	r3, [pc, #16]	; (80054a4 <HAL_PWREx_GetVoltageRange+0x18>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005498:	4618      	mov	r0, r3
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr
 80054a2:	bf00      	nop
 80054a4:	40007000 	.word	0x40007000

080054a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b085      	sub	sp, #20
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054b6:	d130      	bne.n	800551a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80054b8:	4b23      	ldr	r3, [pc, #140]	; (8005548 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80054c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054c4:	d038      	beq.n	8005538 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80054c6:	4b20      	ldr	r3, [pc, #128]	; (8005548 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80054ce:	4a1e      	ldr	r2, [pc, #120]	; (8005548 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80054d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80054d4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80054d6:	4b1d      	ldr	r3, [pc, #116]	; (800554c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	2232      	movs	r2, #50	; 0x32
 80054dc:	fb02 f303 	mul.w	r3, r2, r3
 80054e0:	4a1b      	ldr	r2, [pc, #108]	; (8005550 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80054e2:	fba2 2303 	umull	r2, r3, r2, r3
 80054e6:	0c9b      	lsrs	r3, r3, #18
 80054e8:	3301      	adds	r3, #1
 80054ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80054ec:	e002      	b.n	80054f4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	3b01      	subs	r3, #1
 80054f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80054f4:	4b14      	ldr	r3, [pc, #80]	; (8005548 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80054f6:	695b      	ldr	r3, [r3, #20]
 80054f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005500:	d102      	bne.n	8005508 <HAL_PWREx_ControlVoltageScaling+0x60>
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d1f2      	bne.n	80054ee <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005508:	4b0f      	ldr	r3, [pc, #60]	; (8005548 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800550a:	695b      	ldr	r3, [r3, #20]
 800550c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005510:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005514:	d110      	bne.n	8005538 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005516:	2303      	movs	r3, #3
 8005518:	e00f      	b.n	800553a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800551a:	4b0b      	ldr	r3, [pc, #44]	; (8005548 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005522:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005526:	d007      	beq.n	8005538 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005528:	4b07      	ldr	r3, [pc, #28]	; (8005548 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005530:	4a05      	ldr	r2, [pc, #20]	; (8005548 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005532:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005536:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005538:	2300      	movs	r3, #0
}
 800553a:	4618      	mov	r0, r3
 800553c:	3714      	adds	r7, #20
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr
 8005546:	bf00      	nop
 8005548:	40007000 	.word	0x40007000
 800554c:	20000018 	.word	0x20000018
 8005550:	431bde83 	.word	0x431bde83

08005554 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b088      	sub	sp, #32
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d101      	bne.n	8005566 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e3fe      	b.n	8005d64 <HAL_RCC_OscConfig+0x810>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005566:	4ba1      	ldr	r3, [pc, #644]	; (80057ec <HAL_RCC_OscConfig+0x298>)
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	f003 030c 	and.w	r3, r3, #12
 800556e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005570:	4b9e      	ldr	r3, [pc, #632]	; (80057ec <HAL_RCC_OscConfig+0x298>)
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	f003 0303 	and.w	r3, r3, #3
 8005578:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 0310 	and.w	r3, r3, #16
 8005582:	2b00      	cmp	r3, #0
 8005584:	f000 80e4 	beq.w	8005750 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005588:	69bb      	ldr	r3, [r7, #24]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d007      	beq.n	800559e <HAL_RCC_OscConfig+0x4a>
 800558e:	69bb      	ldr	r3, [r7, #24]
 8005590:	2b0c      	cmp	r3, #12
 8005592:	f040 808b 	bne.w	80056ac <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	2b01      	cmp	r3, #1
 800559a:	f040 8087 	bne.w	80056ac <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800559e:	4b93      	ldr	r3, [pc, #588]	; (80057ec <HAL_RCC_OscConfig+0x298>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 0302 	and.w	r3, r3, #2
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d005      	beq.n	80055b6 <HAL_RCC_OscConfig+0x62>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	699b      	ldr	r3, [r3, #24]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d101      	bne.n	80055b6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e3d6      	b.n	8005d64 <HAL_RCC_OscConfig+0x810>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6a1a      	ldr	r2, [r3, #32]
 80055ba:	4b8c      	ldr	r3, [pc, #560]	; (80057ec <HAL_RCC_OscConfig+0x298>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 0308 	and.w	r3, r3, #8
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d004      	beq.n	80055d0 <HAL_RCC_OscConfig+0x7c>
 80055c6:	4b89      	ldr	r3, [pc, #548]	; (80057ec <HAL_RCC_OscConfig+0x298>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055ce:	e005      	b.n	80055dc <HAL_RCC_OscConfig+0x88>
 80055d0:	4b86      	ldr	r3, [pc, #536]	; (80057ec <HAL_RCC_OscConfig+0x298>)
 80055d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055d6:	091b      	lsrs	r3, r3, #4
 80055d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055dc:	4293      	cmp	r3, r2
 80055de:	d223      	bcs.n	8005628 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6a1b      	ldr	r3, [r3, #32]
 80055e4:	4618      	mov	r0, r3
 80055e6:	f000 fd53 	bl	8006090 <RCC_SetFlashLatencyFromMSIRange>
 80055ea:	4603      	mov	r3, r0
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d001      	beq.n	80055f4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e3b7      	b.n	8005d64 <HAL_RCC_OscConfig+0x810>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80055f4:	4b7d      	ldr	r3, [pc, #500]	; (80057ec <HAL_RCC_OscConfig+0x298>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a7c      	ldr	r2, [pc, #496]	; (80057ec <HAL_RCC_OscConfig+0x298>)
 80055fa:	f043 0308 	orr.w	r3, r3, #8
 80055fe:	6013      	str	r3, [r2, #0]
 8005600:	4b7a      	ldr	r3, [pc, #488]	; (80057ec <HAL_RCC_OscConfig+0x298>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6a1b      	ldr	r3, [r3, #32]
 800560c:	4977      	ldr	r1, [pc, #476]	; (80057ec <HAL_RCC_OscConfig+0x298>)
 800560e:	4313      	orrs	r3, r2
 8005610:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005612:	4b76      	ldr	r3, [pc, #472]	; (80057ec <HAL_RCC_OscConfig+0x298>)
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	69db      	ldr	r3, [r3, #28]
 800561e:	021b      	lsls	r3, r3, #8
 8005620:	4972      	ldr	r1, [pc, #456]	; (80057ec <HAL_RCC_OscConfig+0x298>)
 8005622:	4313      	orrs	r3, r2
 8005624:	604b      	str	r3, [r1, #4]
 8005626:	e025      	b.n	8005674 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005628:	4b70      	ldr	r3, [pc, #448]	; (80057ec <HAL_RCC_OscConfig+0x298>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a6f      	ldr	r2, [pc, #444]	; (80057ec <HAL_RCC_OscConfig+0x298>)
 800562e:	f043 0308 	orr.w	r3, r3, #8
 8005632:	6013      	str	r3, [r2, #0]
 8005634:	4b6d      	ldr	r3, [pc, #436]	; (80057ec <HAL_RCC_OscConfig+0x298>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6a1b      	ldr	r3, [r3, #32]
 8005640:	496a      	ldr	r1, [pc, #424]	; (80057ec <HAL_RCC_OscConfig+0x298>)
 8005642:	4313      	orrs	r3, r2
 8005644:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005646:	4b69      	ldr	r3, [pc, #420]	; (80057ec <HAL_RCC_OscConfig+0x298>)
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	69db      	ldr	r3, [r3, #28]
 8005652:	021b      	lsls	r3, r3, #8
 8005654:	4965      	ldr	r1, [pc, #404]	; (80057ec <HAL_RCC_OscConfig+0x298>)
 8005656:	4313      	orrs	r3, r2
 8005658:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d109      	bne.n	8005674 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6a1b      	ldr	r3, [r3, #32]
 8005664:	4618      	mov	r0, r3
 8005666:	f000 fd13 	bl	8006090 <RCC_SetFlashLatencyFromMSIRange>
 800566a:	4603      	mov	r3, r0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d001      	beq.n	8005674 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	e377      	b.n	8005d64 <HAL_RCC_OscConfig+0x810>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005674:	f000 fc80 	bl	8005f78 <HAL_RCC_GetSysClockFreq>
 8005678:	4602      	mov	r2, r0
 800567a:	4b5c      	ldr	r3, [pc, #368]	; (80057ec <HAL_RCC_OscConfig+0x298>)
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	091b      	lsrs	r3, r3, #4
 8005680:	f003 030f 	and.w	r3, r3, #15
 8005684:	495a      	ldr	r1, [pc, #360]	; (80057f0 <HAL_RCC_OscConfig+0x29c>)
 8005686:	5ccb      	ldrb	r3, [r1, r3]
 8005688:	f003 031f 	and.w	r3, r3, #31
 800568c:	fa22 f303 	lsr.w	r3, r2, r3
 8005690:	4a58      	ldr	r2, [pc, #352]	; (80057f4 <HAL_RCC_OscConfig+0x2a0>)
 8005692:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005694:	4b58      	ldr	r3, [pc, #352]	; (80057f8 <HAL_RCC_OscConfig+0x2a4>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4618      	mov	r0, r3
 800569a:	f7ff f92f 	bl	80048fc <HAL_InitTick>
 800569e:	4603      	mov	r3, r0
 80056a0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80056a2:	7bfb      	ldrb	r3, [r7, #15]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d052      	beq.n	800574e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80056a8:	7bfb      	ldrb	r3, [r7, #15]
 80056aa:	e35b      	b.n	8005d64 <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	699b      	ldr	r3, [r3, #24]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d032      	beq.n	800571a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80056b4:	4b4d      	ldr	r3, [pc, #308]	; (80057ec <HAL_RCC_OscConfig+0x298>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a4c      	ldr	r2, [pc, #304]	; (80057ec <HAL_RCC_OscConfig+0x298>)
 80056ba:	f043 0301 	orr.w	r3, r3, #1
 80056be:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80056c0:	f7ff f958 	bl	8004974 <HAL_GetTick>
 80056c4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80056c6:	e008      	b.n	80056da <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80056c8:	f7ff f954 	bl	8004974 <HAL_GetTick>
 80056cc:	4602      	mov	r2, r0
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	2b02      	cmp	r3, #2
 80056d4:	d901      	bls.n	80056da <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80056d6:	2303      	movs	r3, #3
 80056d8:	e344      	b.n	8005d64 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80056da:	4b44      	ldr	r3, [pc, #272]	; (80057ec <HAL_RCC_OscConfig+0x298>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 0302 	and.w	r3, r3, #2
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d0f0      	beq.n	80056c8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80056e6:	4b41      	ldr	r3, [pc, #260]	; (80057ec <HAL_RCC_OscConfig+0x298>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a40      	ldr	r2, [pc, #256]	; (80057ec <HAL_RCC_OscConfig+0x298>)
 80056ec:	f043 0308 	orr.w	r3, r3, #8
 80056f0:	6013      	str	r3, [r2, #0]
 80056f2:	4b3e      	ldr	r3, [pc, #248]	; (80057ec <HAL_RCC_OscConfig+0x298>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6a1b      	ldr	r3, [r3, #32]
 80056fe:	493b      	ldr	r1, [pc, #236]	; (80057ec <HAL_RCC_OscConfig+0x298>)
 8005700:	4313      	orrs	r3, r2
 8005702:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005704:	4b39      	ldr	r3, [pc, #228]	; (80057ec <HAL_RCC_OscConfig+0x298>)
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	69db      	ldr	r3, [r3, #28]
 8005710:	021b      	lsls	r3, r3, #8
 8005712:	4936      	ldr	r1, [pc, #216]	; (80057ec <HAL_RCC_OscConfig+0x298>)
 8005714:	4313      	orrs	r3, r2
 8005716:	604b      	str	r3, [r1, #4]
 8005718:	e01a      	b.n	8005750 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800571a:	4b34      	ldr	r3, [pc, #208]	; (80057ec <HAL_RCC_OscConfig+0x298>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a33      	ldr	r2, [pc, #204]	; (80057ec <HAL_RCC_OscConfig+0x298>)
 8005720:	f023 0301 	bic.w	r3, r3, #1
 8005724:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005726:	f7ff f925 	bl	8004974 <HAL_GetTick>
 800572a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800572c:	e008      	b.n	8005740 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800572e:	f7ff f921 	bl	8004974 <HAL_GetTick>
 8005732:	4602      	mov	r2, r0
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	1ad3      	subs	r3, r2, r3
 8005738:	2b02      	cmp	r3, #2
 800573a:	d901      	bls.n	8005740 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800573c:	2303      	movs	r3, #3
 800573e:	e311      	b.n	8005d64 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005740:	4b2a      	ldr	r3, [pc, #168]	; (80057ec <HAL_RCC_OscConfig+0x298>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 0302 	and.w	r3, r3, #2
 8005748:	2b00      	cmp	r3, #0
 800574a:	d1f0      	bne.n	800572e <HAL_RCC_OscConfig+0x1da>
 800574c:	e000      	b.n	8005750 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800574e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 0301 	and.w	r3, r3, #1
 8005758:	2b00      	cmp	r3, #0
 800575a:	d074      	beq.n	8005846 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800575c:	69bb      	ldr	r3, [r7, #24]
 800575e:	2b08      	cmp	r3, #8
 8005760:	d005      	beq.n	800576e <HAL_RCC_OscConfig+0x21a>
 8005762:	69bb      	ldr	r3, [r7, #24]
 8005764:	2b0c      	cmp	r3, #12
 8005766:	d10e      	bne.n	8005786 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	2b03      	cmp	r3, #3
 800576c:	d10b      	bne.n	8005786 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800576e:	4b1f      	ldr	r3, [pc, #124]	; (80057ec <HAL_RCC_OscConfig+0x298>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005776:	2b00      	cmp	r3, #0
 8005778:	d064      	beq.n	8005844 <HAL_RCC_OscConfig+0x2f0>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d160      	bne.n	8005844 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e2ee      	b.n	8005d64 <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800578e:	d106      	bne.n	800579e <HAL_RCC_OscConfig+0x24a>
 8005790:	4b16      	ldr	r3, [pc, #88]	; (80057ec <HAL_RCC_OscConfig+0x298>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a15      	ldr	r2, [pc, #84]	; (80057ec <HAL_RCC_OscConfig+0x298>)
 8005796:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800579a:	6013      	str	r3, [r2, #0]
 800579c:	e01d      	b.n	80057da <HAL_RCC_OscConfig+0x286>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80057a6:	d10c      	bne.n	80057c2 <HAL_RCC_OscConfig+0x26e>
 80057a8:	4b10      	ldr	r3, [pc, #64]	; (80057ec <HAL_RCC_OscConfig+0x298>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a0f      	ldr	r2, [pc, #60]	; (80057ec <HAL_RCC_OscConfig+0x298>)
 80057ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80057b2:	6013      	str	r3, [r2, #0]
 80057b4:	4b0d      	ldr	r3, [pc, #52]	; (80057ec <HAL_RCC_OscConfig+0x298>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a0c      	ldr	r2, [pc, #48]	; (80057ec <HAL_RCC_OscConfig+0x298>)
 80057ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057be:	6013      	str	r3, [r2, #0]
 80057c0:	e00b      	b.n	80057da <HAL_RCC_OscConfig+0x286>
 80057c2:	4b0a      	ldr	r3, [pc, #40]	; (80057ec <HAL_RCC_OscConfig+0x298>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a09      	ldr	r2, [pc, #36]	; (80057ec <HAL_RCC_OscConfig+0x298>)
 80057c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057cc:	6013      	str	r3, [r2, #0]
 80057ce:	4b07      	ldr	r3, [pc, #28]	; (80057ec <HAL_RCC_OscConfig+0x298>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a06      	ldr	r2, [pc, #24]	; (80057ec <HAL_RCC_OscConfig+0x298>)
 80057d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057d8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d01c      	beq.n	800581c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057e2:	f7ff f8c7 	bl	8004974 <HAL_GetTick>
 80057e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80057e8:	e011      	b.n	800580e <HAL_RCC_OscConfig+0x2ba>
 80057ea:	bf00      	nop
 80057ec:	40021000 	.word	0x40021000
 80057f0:	08009fbc 	.word	0x08009fbc
 80057f4:	20000018 	.word	0x20000018
 80057f8:	20000010 	.word	0x20000010
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057fc:	f7ff f8ba 	bl	8004974 <HAL_GetTick>
 8005800:	4602      	mov	r2, r0
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	2b64      	cmp	r3, #100	; 0x64
 8005808:	d901      	bls.n	800580e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800580a:	2303      	movs	r3, #3
 800580c:	e2aa      	b.n	8005d64 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800580e:	4baf      	ldr	r3, [pc, #700]	; (8005acc <HAL_RCC_OscConfig+0x578>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005816:	2b00      	cmp	r3, #0
 8005818:	d0f0      	beq.n	80057fc <HAL_RCC_OscConfig+0x2a8>
 800581a:	e014      	b.n	8005846 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800581c:	f7ff f8aa 	bl	8004974 <HAL_GetTick>
 8005820:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005822:	e008      	b.n	8005836 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005824:	f7ff f8a6 	bl	8004974 <HAL_GetTick>
 8005828:	4602      	mov	r2, r0
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	1ad3      	subs	r3, r2, r3
 800582e:	2b64      	cmp	r3, #100	; 0x64
 8005830:	d901      	bls.n	8005836 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005832:	2303      	movs	r3, #3
 8005834:	e296      	b.n	8005d64 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005836:	4ba5      	ldr	r3, [pc, #660]	; (8005acc <HAL_RCC_OscConfig+0x578>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800583e:	2b00      	cmp	r3, #0
 8005840:	d1f0      	bne.n	8005824 <HAL_RCC_OscConfig+0x2d0>
 8005842:	e000      	b.n	8005846 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005844:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f003 0302 	and.w	r3, r3, #2
 800584e:	2b00      	cmp	r3, #0
 8005850:	d060      	beq.n	8005914 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005852:	69bb      	ldr	r3, [r7, #24]
 8005854:	2b04      	cmp	r3, #4
 8005856:	d005      	beq.n	8005864 <HAL_RCC_OscConfig+0x310>
 8005858:	69bb      	ldr	r3, [r7, #24]
 800585a:	2b0c      	cmp	r3, #12
 800585c:	d119      	bne.n	8005892 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	2b02      	cmp	r3, #2
 8005862:	d116      	bne.n	8005892 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005864:	4b99      	ldr	r3, [pc, #612]	; (8005acc <HAL_RCC_OscConfig+0x578>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800586c:	2b00      	cmp	r3, #0
 800586e:	d005      	beq.n	800587c <HAL_RCC_OscConfig+0x328>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d101      	bne.n	800587c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	e273      	b.n	8005d64 <HAL_RCC_OscConfig+0x810>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800587c:	4b93      	ldr	r3, [pc, #588]	; (8005acc <HAL_RCC_OscConfig+0x578>)
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	691b      	ldr	r3, [r3, #16]
 8005888:	061b      	lsls	r3, r3, #24
 800588a:	4990      	ldr	r1, [pc, #576]	; (8005acc <HAL_RCC_OscConfig+0x578>)
 800588c:	4313      	orrs	r3, r2
 800588e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005890:	e040      	b.n	8005914 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d023      	beq.n	80058e2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800589a:	4b8c      	ldr	r3, [pc, #560]	; (8005acc <HAL_RCC_OscConfig+0x578>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a8b      	ldr	r2, [pc, #556]	; (8005acc <HAL_RCC_OscConfig+0x578>)
 80058a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058a6:	f7ff f865 	bl	8004974 <HAL_GetTick>
 80058aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80058ac:	e008      	b.n	80058c0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058ae:	f7ff f861 	bl	8004974 <HAL_GetTick>
 80058b2:	4602      	mov	r2, r0
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	1ad3      	subs	r3, r2, r3
 80058b8:	2b02      	cmp	r3, #2
 80058ba:	d901      	bls.n	80058c0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80058bc:	2303      	movs	r3, #3
 80058be:	e251      	b.n	8005d64 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80058c0:	4b82      	ldr	r3, [pc, #520]	; (8005acc <HAL_RCC_OscConfig+0x578>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d0f0      	beq.n	80058ae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058cc:	4b7f      	ldr	r3, [pc, #508]	; (8005acc <HAL_RCC_OscConfig+0x578>)
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	691b      	ldr	r3, [r3, #16]
 80058d8:	061b      	lsls	r3, r3, #24
 80058da:	497c      	ldr	r1, [pc, #496]	; (8005acc <HAL_RCC_OscConfig+0x578>)
 80058dc:	4313      	orrs	r3, r2
 80058de:	604b      	str	r3, [r1, #4]
 80058e0:	e018      	b.n	8005914 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058e2:	4b7a      	ldr	r3, [pc, #488]	; (8005acc <HAL_RCC_OscConfig+0x578>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a79      	ldr	r2, [pc, #484]	; (8005acc <HAL_RCC_OscConfig+0x578>)
 80058e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058ee:	f7ff f841 	bl	8004974 <HAL_GetTick>
 80058f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80058f4:	e008      	b.n	8005908 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058f6:	f7ff f83d 	bl	8004974 <HAL_GetTick>
 80058fa:	4602      	mov	r2, r0
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	1ad3      	subs	r3, r2, r3
 8005900:	2b02      	cmp	r3, #2
 8005902:	d901      	bls.n	8005908 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005904:	2303      	movs	r3, #3
 8005906:	e22d      	b.n	8005d64 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005908:	4b70      	ldr	r3, [pc, #448]	; (8005acc <HAL_RCC_OscConfig+0x578>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005910:	2b00      	cmp	r3, #0
 8005912:	d1f0      	bne.n	80058f6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f003 0308 	and.w	r3, r3, #8
 800591c:	2b00      	cmp	r3, #0
 800591e:	d03c      	beq.n	800599a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	695b      	ldr	r3, [r3, #20]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d01c      	beq.n	8005962 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005928:	4b68      	ldr	r3, [pc, #416]	; (8005acc <HAL_RCC_OscConfig+0x578>)
 800592a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800592e:	4a67      	ldr	r2, [pc, #412]	; (8005acc <HAL_RCC_OscConfig+0x578>)
 8005930:	f043 0301 	orr.w	r3, r3, #1
 8005934:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005938:	f7ff f81c 	bl	8004974 <HAL_GetTick>
 800593c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800593e:	e008      	b.n	8005952 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005940:	f7ff f818 	bl	8004974 <HAL_GetTick>
 8005944:	4602      	mov	r2, r0
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	1ad3      	subs	r3, r2, r3
 800594a:	2b02      	cmp	r3, #2
 800594c:	d901      	bls.n	8005952 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800594e:	2303      	movs	r3, #3
 8005950:	e208      	b.n	8005d64 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005952:	4b5e      	ldr	r3, [pc, #376]	; (8005acc <HAL_RCC_OscConfig+0x578>)
 8005954:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005958:	f003 0302 	and.w	r3, r3, #2
 800595c:	2b00      	cmp	r3, #0
 800595e:	d0ef      	beq.n	8005940 <HAL_RCC_OscConfig+0x3ec>
 8005960:	e01b      	b.n	800599a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005962:	4b5a      	ldr	r3, [pc, #360]	; (8005acc <HAL_RCC_OscConfig+0x578>)
 8005964:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005968:	4a58      	ldr	r2, [pc, #352]	; (8005acc <HAL_RCC_OscConfig+0x578>)
 800596a:	f023 0301 	bic.w	r3, r3, #1
 800596e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005972:	f7fe ffff 	bl	8004974 <HAL_GetTick>
 8005976:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005978:	e008      	b.n	800598c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800597a:	f7fe fffb 	bl	8004974 <HAL_GetTick>
 800597e:	4602      	mov	r2, r0
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	1ad3      	subs	r3, r2, r3
 8005984:	2b02      	cmp	r3, #2
 8005986:	d901      	bls.n	800598c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005988:	2303      	movs	r3, #3
 800598a:	e1eb      	b.n	8005d64 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800598c:	4b4f      	ldr	r3, [pc, #316]	; (8005acc <HAL_RCC_OscConfig+0x578>)
 800598e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005992:	f003 0302 	and.w	r3, r3, #2
 8005996:	2b00      	cmp	r3, #0
 8005998:	d1ef      	bne.n	800597a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 0304 	and.w	r3, r3, #4
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	f000 80a6 	beq.w	8005af4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059a8:	2300      	movs	r3, #0
 80059aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80059ac:	4b47      	ldr	r3, [pc, #284]	; (8005acc <HAL_RCC_OscConfig+0x578>)
 80059ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d10d      	bne.n	80059d4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059b8:	4b44      	ldr	r3, [pc, #272]	; (8005acc <HAL_RCC_OscConfig+0x578>)
 80059ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059bc:	4a43      	ldr	r2, [pc, #268]	; (8005acc <HAL_RCC_OscConfig+0x578>)
 80059be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059c2:	6593      	str	r3, [r2, #88]	; 0x58
 80059c4:	4b41      	ldr	r3, [pc, #260]	; (8005acc <HAL_RCC_OscConfig+0x578>)
 80059c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059cc:	60bb      	str	r3, [r7, #8]
 80059ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059d0:	2301      	movs	r3, #1
 80059d2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80059d4:	4b3e      	ldr	r3, [pc, #248]	; (8005ad0 <HAL_RCC_OscConfig+0x57c>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d118      	bne.n	8005a12 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80059e0:	4b3b      	ldr	r3, [pc, #236]	; (8005ad0 <HAL_RCC_OscConfig+0x57c>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a3a      	ldr	r2, [pc, #232]	; (8005ad0 <HAL_RCC_OscConfig+0x57c>)
 80059e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80059ec:	f7fe ffc2 	bl	8004974 <HAL_GetTick>
 80059f0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80059f2:	e008      	b.n	8005a06 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059f4:	f7fe ffbe 	bl	8004974 <HAL_GetTick>
 80059f8:	4602      	mov	r2, r0
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	1ad3      	subs	r3, r2, r3
 80059fe:	2b02      	cmp	r3, #2
 8005a00:	d901      	bls.n	8005a06 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005a02:	2303      	movs	r3, #3
 8005a04:	e1ae      	b.n	8005d64 <HAL_RCC_OscConfig+0x810>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a06:	4b32      	ldr	r3, [pc, #200]	; (8005ad0 <HAL_RCC_OscConfig+0x57c>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d0f0      	beq.n	80059f4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d108      	bne.n	8005a2c <HAL_RCC_OscConfig+0x4d8>
 8005a1a:	4b2c      	ldr	r3, [pc, #176]	; (8005acc <HAL_RCC_OscConfig+0x578>)
 8005a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a20:	4a2a      	ldr	r2, [pc, #168]	; (8005acc <HAL_RCC_OscConfig+0x578>)
 8005a22:	f043 0301 	orr.w	r3, r3, #1
 8005a26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005a2a:	e024      	b.n	8005a76 <HAL_RCC_OscConfig+0x522>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	2b05      	cmp	r3, #5
 8005a32:	d110      	bne.n	8005a56 <HAL_RCC_OscConfig+0x502>
 8005a34:	4b25      	ldr	r3, [pc, #148]	; (8005acc <HAL_RCC_OscConfig+0x578>)
 8005a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a3a:	4a24      	ldr	r2, [pc, #144]	; (8005acc <HAL_RCC_OscConfig+0x578>)
 8005a3c:	f043 0304 	orr.w	r3, r3, #4
 8005a40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005a44:	4b21      	ldr	r3, [pc, #132]	; (8005acc <HAL_RCC_OscConfig+0x578>)
 8005a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a4a:	4a20      	ldr	r2, [pc, #128]	; (8005acc <HAL_RCC_OscConfig+0x578>)
 8005a4c:	f043 0301 	orr.w	r3, r3, #1
 8005a50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005a54:	e00f      	b.n	8005a76 <HAL_RCC_OscConfig+0x522>
 8005a56:	4b1d      	ldr	r3, [pc, #116]	; (8005acc <HAL_RCC_OscConfig+0x578>)
 8005a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a5c:	4a1b      	ldr	r2, [pc, #108]	; (8005acc <HAL_RCC_OscConfig+0x578>)
 8005a5e:	f023 0301 	bic.w	r3, r3, #1
 8005a62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005a66:	4b19      	ldr	r3, [pc, #100]	; (8005acc <HAL_RCC_OscConfig+0x578>)
 8005a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a6c:	4a17      	ldr	r2, [pc, #92]	; (8005acc <HAL_RCC_OscConfig+0x578>)
 8005a6e:	f023 0304 	bic.w	r3, r3, #4
 8005a72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d016      	beq.n	8005aac <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a7e:	f7fe ff79 	bl	8004974 <HAL_GetTick>
 8005a82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a84:	e00a      	b.n	8005a9c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a86:	f7fe ff75 	bl	8004974 <HAL_GetTick>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	1ad3      	subs	r3, r2, r3
 8005a90:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d901      	bls.n	8005a9c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8005a98:	2303      	movs	r3, #3
 8005a9a:	e163      	b.n	8005d64 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a9c:	4b0b      	ldr	r3, [pc, #44]	; (8005acc <HAL_RCC_OscConfig+0x578>)
 8005a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aa2:	f003 0302 	and.w	r3, r3, #2
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d0ed      	beq.n	8005a86 <HAL_RCC_OscConfig+0x532>
 8005aaa:	e01a      	b.n	8005ae2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aac:	f7fe ff62 	bl	8004974 <HAL_GetTick>
 8005ab0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005ab2:	e00f      	b.n	8005ad4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ab4:	f7fe ff5e 	bl	8004974 <HAL_GetTick>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	1ad3      	subs	r3, r2, r3
 8005abe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d906      	bls.n	8005ad4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005ac6:	2303      	movs	r3, #3
 8005ac8:	e14c      	b.n	8005d64 <HAL_RCC_OscConfig+0x810>
 8005aca:	bf00      	nop
 8005acc:	40021000 	.word	0x40021000
 8005ad0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005ad4:	4ba5      	ldr	r3, [pc, #660]	; (8005d6c <HAL_RCC_OscConfig+0x818>)
 8005ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ada:	f003 0302 	and.w	r3, r3, #2
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d1e8      	bne.n	8005ab4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ae2:	7ffb      	ldrb	r3, [r7, #31]
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d105      	bne.n	8005af4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ae8:	4ba0      	ldr	r3, [pc, #640]	; (8005d6c <HAL_RCC_OscConfig+0x818>)
 8005aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aec:	4a9f      	ldr	r2, [pc, #636]	; (8005d6c <HAL_RCC_OscConfig+0x818>)
 8005aee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005af2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f003 0320 	and.w	r3, r3, #32
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d03c      	beq.n	8005b7a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d01c      	beq.n	8005b42 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005b08:	4b98      	ldr	r3, [pc, #608]	; (8005d6c <HAL_RCC_OscConfig+0x818>)
 8005b0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005b0e:	4a97      	ldr	r2, [pc, #604]	; (8005d6c <HAL_RCC_OscConfig+0x818>)
 8005b10:	f043 0301 	orr.w	r3, r3, #1
 8005b14:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b18:	f7fe ff2c 	bl	8004974 <HAL_GetTick>
 8005b1c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005b1e:	e008      	b.n	8005b32 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005b20:	f7fe ff28 	bl	8004974 <HAL_GetTick>
 8005b24:	4602      	mov	r2, r0
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	1ad3      	subs	r3, r2, r3
 8005b2a:	2b02      	cmp	r3, #2
 8005b2c:	d901      	bls.n	8005b32 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005b2e:	2303      	movs	r3, #3
 8005b30:	e118      	b.n	8005d64 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005b32:	4b8e      	ldr	r3, [pc, #568]	; (8005d6c <HAL_RCC_OscConfig+0x818>)
 8005b34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005b38:	f003 0302 	and.w	r3, r3, #2
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d0ef      	beq.n	8005b20 <HAL_RCC_OscConfig+0x5cc>
 8005b40:	e01b      	b.n	8005b7a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005b42:	4b8a      	ldr	r3, [pc, #552]	; (8005d6c <HAL_RCC_OscConfig+0x818>)
 8005b44:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005b48:	4a88      	ldr	r2, [pc, #544]	; (8005d6c <HAL_RCC_OscConfig+0x818>)
 8005b4a:	f023 0301 	bic.w	r3, r3, #1
 8005b4e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b52:	f7fe ff0f 	bl	8004974 <HAL_GetTick>
 8005b56:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005b58:	e008      	b.n	8005b6c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005b5a:	f7fe ff0b 	bl	8004974 <HAL_GetTick>
 8005b5e:	4602      	mov	r2, r0
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	1ad3      	subs	r3, r2, r3
 8005b64:	2b02      	cmp	r3, #2
 8005b66:	d901      	bls.n	8005b6c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005b68:	2303      	movs	r3, #3
 8005b6a:	e0fb      	b.n	8005d64 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005b6c:	4b7f      	ldr	r3, [pc, #508]	; (8005d6c <HAL_RCC_OscConfig+0x818>)
 8005b6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005b72:	f003 0302 	and.w	r3, r3, #2
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d1ef      	bne.n	8005b5a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	f000 80ef 	beq.w	8005d62 <HAL_RCC_OscConfig+0x80e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b88:	2b02      	cmp	r3, #2
 8005b8a:	f040 80c5 	bne.w	8005d18 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005b8e:	4b77      	ldr	r3, [pc, #476]	; (8005d6c <HAL_RCC_OscConfig+0x818>)
 8005b90:	68db      	ldr	r3, [r3, #12]
 8005b92:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	f003 0203 	and.w	r2, r3, #3
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d12c      	bne.n	8005bfc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bac:	3b01      	subs	r3, #1
 8005bae:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d123      	bne.n	8005bfc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bbe:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d11b      	bne.n	8005bfc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bce:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d113      	bne.n	8005bfc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bde:	085b      	lsrs	r3, r3, #1
 8005be0:	3b01      	subs	r3, #1
 8005be2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d109      	bne.n	8005bfc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf2:	085b      	lsrs	r3, r3, #1
 8005bf4:	3b01      	subs	r3, #1
 8005bf6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d067      	beq.n	8005ccc <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005bfc:	69bb      	ldr	r3, [r7, #24]
 8005bfe:	2b0c      	cmp	r3, #12
 8005c00:	d062      	beq.n	8005cc8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005c02:	4b5a      	ldr	r3, [pc, #360]	; (8005d6c <HAL_RCC_OscConfig+0x818>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d001      	beq.n	8005c12 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e0a8      	b.n	8005d64 <HAL_RCC_OscConfig+0x810>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005c12:	4b56      	ldr	r3, [pc, #344]	; (8005d6c <HAL_RCC_OscConfig+0x818>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a55      	ldr	r2, [pc, #340]	; (8005d6c <HAL_RCC_OscConfig+0x818>)
 8005c18:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c1c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005c1e:	f7fe fea9 	bl	8004974 <HAL_GetTick>
 8005c22:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c24:	e008      	b.n	8005c38 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c26:	f7fe fea5 	bl	8004974 <HAL_GetTick>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	1ad3      	subs	r3, r2, r3
 8005c30:	2b02      	cmp	r3, #2
 8005c32:	d901      	bls.n	8005c38 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8005c34:	2303      	movs	r3, #3
 8005c36:	e095      	b.n	8005d64 <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c38:	4b4c      	ldr	r3, [pc, #304]	; (8005d6c <HAL_RCC_OscConfig+0x818>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d1f0      	bne.n	8005c26 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c44:	4b49      	ldr	r3, [pc, #292]	; (8005d6c <HAL_RCC_OscConfig+0x818>)
 8005c46:	68da      	ldr	r2, [r3, #12]
 8005c48:	4b49      	ldr	r3, [pc, #292]	; (8005d70 <HAL_RCC_OscConfig+0x81c>)
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005c54:	3a01      	subs	r2, #1
 8005c56:	0112      	lsls	r2, r2, #4
 8005c58:	4311      	orrs	r1, r2
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005c5e:	0212      	lsls	r2, r2, #8
 8005c60:	4311      	orrs	r1, r2
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005c66:	0852      	lsrs	r2, r2, #1
 8005c68:	3a01      	subs	r2, #1
 8005c6a:	0552      	lsls	r2, r2, #21
 8005c6c:	4311      	orrs	r1, r2
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005c72:	0852      	lsrs	r2, r2, #1
 8005c74:	3a01      	subs	r2, #1
 8005c76:	0652      	lsls	r2, r2, #25
 8005c78:	4311      	orrs	r1, r2
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005c7e:	06d2      	lsls	r2, r2, #27
 8005c80:	430a      	orrs	r2, r1
 8005c82:	493a      	ldr	r1, [pc, #232]	; (8005d6c <HAL_RCC_OscConfig+0x818>)
 8005c84:	4313      	orrs	r3, r2
 8005c86:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005c88:	4b38      	ldr	r3, [pc, #224]	; (8005d6c <HAL_RCC_OscConfig+0x818>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a37      	ldr	r2, [pc, #220]	; (8005d6c <HAL_RCC_OscConfig+0x818>)
 8005c8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c92:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005c94:	4b35      	ldr	r3, [pc, #212]	; (8005d6c <HAL_RCC_OscConfig+0x818>)
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	4a34      	ldr	r2, [pc, #208]	; (8005d6c <HAL_RCC_OscConfig+0x818>)
 8005c9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c9e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005ca0:	f7fe fe68 	bl	8004974 <HAL_GetTick>
 8005ca4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ca6:	e008      	b.n	8005cba <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ca8:	f7fe fe64 	bl	8004974 <HAL_GetTick>
 8005cac:	4602      	mov	r2, r0
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	1ad3      	subs	r3, r2, r3
 8005cb2:	2b02      	cmp	r3, #2
 8005cb4:	d901      	bls.n	8005cba <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8005cb6:	2303      	movs	r3, #3
 8005cb8:	e054      	b.n	8005d64 <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005cba:	4b2c      	ldr	r3, [pc, #176]	; (8005d6c <HAL_RCC_OscConfig+0x818>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d0f0      	beq.n	8005ca8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005cc6:	e04c      	b.n	8005d62 <HAL_RCC_OscConfig+0x80e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	e04b      	b.n	8005d64 <HAL_RCC_OscConfig+0x810>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ccc:	4b27      	ldr	r3, [pc, #156]	; (8005d6c <HAL_RCC_OscConfig+0x818>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d144      	bne.n	8005d62 <HAL_RCC_OscConfig+0x80e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005cd8:	4b24      	ldr	r3, [pc, #144]	; (8005d6c <HAL_RCC_OscConfig+0x818>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a23      	ldr	r2, [pc, #140]	; (8005d6c <HAL_RCC_OscConfig+0x818>)
 8005cde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ce2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005ce4:	4b21      	ldr	r3, [pc, #132]	; (8005d6c <HAL_RCC_OscConfig+0x818>)
 8005ce6:	68db      	ldr	r3, [r3, #12]
 8005ce8:	4a20      	ldr	r2, [pc, #128]	; (8005d6c <HAL_RCC_OscConfig+0x818>)
 8005cea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005cee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005cf0:	f7fe fe40 	bl	8004974 <HAL_GetTick>
 8005cf4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005cf6:	e008      	b.n	8005d0a <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cf8:	f7fe fe3c 	bl	8004974 <HAL_GetTick>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	1ad3      	subs	r3, r2, r3
 8005d02:	2b02      	cmp	r3, #2
 8005d04:	d901      	bls.n	8005d0a <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8005d06:	2303      	movs	r3, #3
 8005d08:	e02c      	b.n	8005d64 <HAL_RCC_OscConfig+0x810>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d0a:	4b18      	ldr	r3, [pc, #96]	; (8005d6c <HAL_RCC_OscConfig+0x818>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d0f0      	beq.n	8005cf8 <HAL_RCC_OscConfig+0x7a4>
 8005d16:	e024      	b.n	8005d62 <HAL_RCC_OscConfig+0x80e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005d18:	69bb      	ldr	r3, [r7, #24]
 8005d1a:	2b0c      	cmp	r3, #12
 8005d1c:	d01f      	beq.n	8005d5e <HAL_RCC_OscConfig+0x80a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d1e:	4b13      	ldr	r3, [pc, #76]	; (8005d6c <HAL_RCC_OscConfig+0x818>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a12      	ldr	r2, [pc, #72]	; (8005d6c <HAL_RCC_OscConfig+0x818>)
 8005d24:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d2a:	f7fe fe23 	bl	8004974 <HAL_GetTick>
 8005d2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d30:	e008      	b.n	8005d44 <HAL_RCC_OscConfig+0x7f0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d32:	f7fe fe1f 	bl	8004974 <HAL_GetTick>
 8005d36:	4602      	mov	r2, r0
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	1ad3      	subs	r3, r2, r3
 8005d3c:	2b02      	cmp	r3, #2
 8005d3e:	d901      	bls.n	8005d44 <HAL_RCC_OscConfig+0x7f0>
          {
            return HAL_TIMEOUT;
 8005d40:	2303      	movs	r3, #3
 8005d42:	e00f      	b.n	8005d64 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d44:	4b09      	ldr	r3, [pc, #36]	; (8005d6c <HAL_RCC_OscConfig+0x818>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d1f0      	bne.n	8005d32 <HAL_RCC_OscConfig+0x7de>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8005d50:	4b06      	ldr	r3, [pc, #24]	; (8005d6c <HAL_RCC_OscConfig+0x818>)
 8005d52:	68da      	ldr	r2, [r3, #12]
 8005d54:	4905      	ldr	r1, [pc, #20]	; (8005d6c <HAL_RCC_OscConfig+0x818>)
 8005d56:	4b07      	ldr	r3, [pc, #28]	; (8005d74 <HAL_RCC_OscConfig+0x820>)
 8005d58:	4013      	ands	r3, r2
 8005d5a:	60cb      	str	r3, [r1, #12]
 8005d5c:	e001      	b.n	8005d62 <HAL_RCC_OscConfig+0x80e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e000      	b.n	8005d64 <HAL_RCC_OscConfig+0x810>
      }
    }
  }
  return HAL_OK;
 8005d62:	2300      	movs	r3, #0
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3720      	adds	r7, #32
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}
 8005d6c:	40021000 	.word	0x40021000
 8005d70:	019d808c 	.word	0x019d808c
 8005d74:	feeefffc 	.word	0xfeeefffc

08005d78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b084      	sub	sp, #16
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d101      	bne.n	8005d8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e0e7      	b.n	8005f5c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d8c:	4b75      	ldr	r3, [pc, #468]	; (8005f64 <HAL_RCC_ClockConfig+0x1ec>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f003 0307 	and.w	r3, r3, #7
 8005d94:	683a      	ldr	r2, [r7, #0]
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d910      	bls.n	8005dbc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d9a:	4b72      	ldr	r3, [pc, #456]	; (8005f64 <HAL_RCC_ClockConfig+0x1ec>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f023 0207 	bic.w	r2, r3, #7
 8005da2:	4970      	ldr	r1, [pc, #448]	; (8005f64 <HAL_RCC_ClockConfig+0x1ec>)
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005daa:	4b6e      	ldr	r3, [pc, #440]	; (8005f64 <HAL_RCC_ClockConfig+0x1ec>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 0307 	and.w	r3, r3, #7
 8005db2:	683a      	ldr	r2, [r7, #0]
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d001      	beq.n	8005dbc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	e0cf      	b.n	8005f5c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f003 0302 	and.w	r3, r3, #2
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d010      	beq.n	8005dea <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	689a      	ldr	r2, [r3, #8]
 8005dcc:	4b66      	ldr	r3, [pc, #408]	; (8005f68 <HAL_RCC_ClockConfig+0x1f0>)
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d908      	bls.n	8005dea <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005dd8:	4b63      	ldr	r3, [pc, #396]	; (8005f68 <HAL_RCC_ClockConfig+0x1f0>)
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	4960      	ldr	r1, [pc, #384]	; (8005f68 <HAL_RCC_ClockConfig+0x1f0>)
 8005de6:	4313      	orrs	r3, r2
 8005de8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f003 0301 	and.w	r3, r3, #1
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d04c      	beq.n	8005e90 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	2b03      	cmp	r3, #3
 8005dfc:	d107      	bne.n	8005e0e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005dfe:	4b5a      	ldr	r3, [pc, #360]	; (8005f68 <HAL_RCC_ClockConfig+0x1f0>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d121      	bne.n	8005e4e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e0a6      	b.n	8005f5c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	2b02      	cmp	r3, #2
 8005e14:	d107      	bne.n	8005e26 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e16:	4b54      	ldr	r3, [pc, #336]	; (8005f68 <HAL_RCC_ClockConfig+0x1f0>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d115      	bne.n	8005e4e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	e09a      	b.n	8005f5c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d107      	bne.n	8005e3e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005e2e:	4b4e      	ldr	r3, [pc, #312]	; (8005f68 <HAL_RCC_ClockConfig+0x1f0>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f003 0302 	and.w	r3, r3, #2
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d109      	bne.n	8005e4e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e08e      	b.n	8005f5c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e3e:	4b4a      	ldr	r3, [pc, #296]	; (8005f68 <HAL_RCC_ClockConfig+0x1f0>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d101      	bne.n	8005e4e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e086      	b.n	8005f5c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005e4e:	4b46      	ldr	r3, [pc, #280]	; (8005f68 <HAL_RCC_ClockConfig+0x1f0>)
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	f023 0203 	bic.w	r2, r3, #3
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	4943      	ldr	r1, [pc, #268]	; (8005f68 <HAL_RCC_ClockConfig+0x1f0>)
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e60:	f7fe fd88 	bl	8004974 <HAL_GetTick>
 8005e64:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e66:	e00a      	b.n	8005e7e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e68:	f7fe fd84 	bl	8004974 <HAL_GetTick>
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	1ad3      	subs	r3, r2, r3
 8005e72:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d901      	bls.n	8005e7e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005e7a:	2303      	movs	r3, #3
 8005e7c:	e06e      	b.n	8005f5c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e7e:	4b3a      	ldr	r3, [pc, #232]	; (8005f68 <HAL_RCC_ClockConfig+0x1f0>)
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	f003 020c 	and.w	r2, r3, #12
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	009b      	lsls	r3, r3, #2
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d1eb      	bne.n	8005e68 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f003 0302 	and.w	r3, r3, #2
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d010      	beq.n	8005ebe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	689a      	ldr	r2, [r3, #8]
 8005ea0:	4b31      	ldr	r3, [pc, #196]	; (8005f68 <HAL_RCC_ClockConfig+0x1f0>)
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d208      	bcs.n	8005ebe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005eac:	4b2e      	ldr	r3, [pc, #184]	; (8005f68 <HAL_RCC_ClockConfig+0x1f0>)
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	492b      	ldr	r1, [pc, #172]	; (8005f68 <HAL_RCC_ClockConfig+0x1f0>)
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ebe:	4b29      	ldr	r3, [pc, #164]	; (8005f64 <HAL_RCC_ClockConfig+0x1ec>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f003 0307 	and.w	r3, r3, #7
 8005ec6:	683a      	ldr	r2, [r7, #0]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d210      	bcs.n	8005eee <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ecc:	4b25      	ldr	r3, [pc, #148]	; (8005f64 <HAL_RCC_ClockConfig+0x1ec>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f023 0207 	bic.w	r2, r3, #7
 8005ed4:	4923      	ldr	r1, [pc, #140]	; (8005f64 <HAL_RCC_ClockConfig+0x1ec>)
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005edc:	4b21      	ldr	r3, [pc, #132]	; (8005f64 <HAL_RCC_ClockConfig+0x1ec>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f003 0307 	and.w	r3, r3, #7
 8005ee4:	683a      	ldr	r2, [r7, #0]
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d001      	beq.n	8005eee <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	e036      	b.n	8005f5c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f003 0304 	and.w	r3, r3, #4
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d008      	beq.n	8005f0c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005efa:	4b1b      	ldr	r3, [pc, #108]	; (8005f68 <HAL_RCC_ClockConfig+0x1f0>)
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	4918      	ldr	r1, [pc, #96]	; (8005f68 <HAL_RCC_ClockConfig+0x1f0>)
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f003 0308 	and.w	r3, r3, #8
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d009      	beq.n	8005f2c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f18:	4b13      	ldr	r3, [pc, #76]	; (8005f68 <HAL_RCC_ClockConfig+0x1f0>)
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	691b      	ldr	r3, [r3, #16]
 8005f24:	00db      	lsls	r3, r3, #3
 8005f26:	4910      	ldr	r1, [pc, #64]	; (8005f68 <HAL_RCC_ClockConfig+0x1f0>)
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005f2c:	f000 f824 	bl	8005f78 <HAL_RCC_GetSysClockFreq>
 8005f30:	4602      	mov	r2, r0
 8005f32:	4b0d      	ldr	r3, [pc, #52]	; (8005f68 <HAL_RCC_ClockConfig+0x1f0>)
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	091b      	lsrs	r3, r3, #4
 8005f38:	f003 030f 	and.w	r3, r3, #15
 8005f3c:	490b      	ldr	r1, [pc, #44]	; (8005f6c <HAL_RCC_ClockConfig+0x1f4>)
 8005f3e:	5ccb      	ldrb	r3, [r1, r3]
 8005f40:	f003 031f 	and.w	r3, r3, #31
 8005f44:	fa22 f303 	lsr.w	r3, r2, r3
 8005f48:	4a09      	ldr	r2, [pc, #36]	; (8005f70 <HAL_RCC_ClockConfig+0x1f8>)
 8005f4a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005f4c:	4b09      	ldr	r3, [pc, #36]	; (8005f74 <HAL_RCC_ClockConfig+0x1fc>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4618      	mov	r0, r3
 8005f52:	f7fe fcd3 	bl	80048fc <HAL_InitTick>
 8005f56:	4603      	mov	r3, r0
 8005f58:	72fb      	strb	r3, [r7, #11]

  return status;
 8005f5a:	7afb      	ldrb	r3, [r7, #11]
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3710      	adds	r7, #16
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	40022000 	.word	0x40022000
 8005f68:	40021000 	.word	0x40021000
 8005f6c:	08009fbc 	.word	0x08009fbc
 8005f70:	20000018 	.word	0x20000018
 8005f74:	20000010 	.word	0x20000010

08005f78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b089      	sub	sp, #36	; 0x24
 8005f7c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	61fb      	str	r3, [r7, #28]
 8005f82:	2300      	movs	r3, #0
 8005f84:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f86:	4b3e      	ldr	r3, [pc, #248]	; (8006080 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	f003 030c 	and.w	r3, r3, #12
 8005f8e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005f90:	4b3b      	ldr	r3, [pc, #236]	; (8006080 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	f003 0303 	and.w	r3, r3, #3
 8005f98:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d005      	beq.n	8005fac <HAL_RCC_GetSysClockFreq+0x34>
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	2b0c      	cmp	r3, #12
 8005fa4:	d121      	bne.n	8005fea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d11e      	bne.n	8005fea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005fac:	4b34      	ldr	r3, [pc, #208]	; (8006080 <HAL_RCC_GetSysClockFreq+0x108>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f003 0308 	and.w	r3, r3, #8
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d107      	bne.n	8005fc8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005fb8:	4b31      	ldr	r3, [pc, #196]	; (8006080 <HAL_RCC_GetSysClockFreq+0x108>)
 8005fba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005fbe:	0a1b      	lsrs	r3, r3, #8
 8005fc0:	f003 030f 	and.w	r3, r3, #15
 8005fc4:	61fb      	str	r3, [r7, #28]
 8005fc6:	e005      	b.n	8005fd4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005fc8:	4b2d      	ldr	r3, [pc, #180]	; (8006080 <HAL_RCC_GetSysClockFreq+0x108>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	091b      	lsrs	r3, r3, #4
 8005fce:	f003 030f 	and.w	r3, r3, #15
 8005fd2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005fd4:	4a2b      	ldr	r2, [pc, #172]	; (8006084 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005fd6:	69fb      	ldr	r3, [r7, #28]
 8005fd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fdc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d10d      	bne.n	8006000 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005fe4:	69fb      	ldr	r3, [r7, #28]
 8005fe6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005fe8:	e00a      	b.n	8006000 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	2b04      	cmp	r3, #4
 8005fee:	d102      	bne.n	8005ff6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005ff0:	4b25      	ldr	r3, [pc, #148]	; (8006088 <HAL_RCC_GetSysClockFreq+0x110>)
 8005ff2:	61bb      	str	r3, [r7, #24]
 8005ff4:	e004      	b.n	8006000 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	2b08      	cmp	r3, #8
 8005ffa:	d101      	bne.n	8006000 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005ffc:	4b23      	ldr	r3, [pc, #140]	; (800608c <HAL_RCC_GetSysClockFreq+0x114>)
 8005ffe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	2b0c      	cmp	r3, #12
 8006004:	d134      	bne.n	8006070 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006006:	4b1e      	ldr	r3, [pc, #120]	; (8006080 <HAL_RCC_GetSysClockFreq+0x108>)
 8006008:	68db      	ldr	r3, [r3, #12]
 800600a:	f003 0303 	and.w	r3, r3, #3
 800600e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	2b02      	cmp	r3, #2
 8006014:	d003      	beq.n	800601e <HAL_RCC_GetSysClockFreq+0xa6>
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	2b03      	cmp	r3, #3
 800601a:	d003      	beq.n	8006024 <HAL_RCC_GetSysClockFreq+0xac>
 800601c:	e005      	b.n	800602a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800601e:	4b1a      	ldr	r3, [pc, #104]	; (8006088 <HAL_RCC_GetSysClockFreq+0x110>)
 8006020:	617b      	str	r3, [r7, #20]
      break;
 8006022:	e005      	b.n	8006030 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006024:	4b19      	ldr	r3, [pc, #100]	; (800608c <HAL_RCC_GetSysClockFreq+0x114>)
 8006026:	617b      	str	r3, [r7, #20]
      break;
 8006028:	e002      	b.n	8006030 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800602a:	69fb      	ldr	r3, [r7, #28]
 800602c:	617b      	str	r3, [r7, #20]
      break;
 800602e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006030:	4b13      	ldr	r3, [pc, #76]	; (8006080 <HAL_RCC_GetSysClockFreq+0x108>)
 8006032:	68db      	ldr	r3, [r3, #12]
 8006034:	091b      	lsrs	r3, r3, #4
 8006036:	f003 0307 	and.w	r3, r3, #7
 800603a:	3301      	adds	r3, #1
 800603c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800603e:	4b10      	ldr	r3, [pc, #64]	; (8006080 <HAL_RCC_GetSysClockFreq+0x108>)
 8006040:	68db      	ldr	r3, [r3, #12]
 8006042:	0a1b      	lsrs	r3, r3, #8
 8006044:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006048:	697a      	ldr	r2, [r7, #20]
 800604a:	fb02 f203 	mul.w	r2, r2, r3
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	fbb2 f3f3 	udiv	r3, r2, r3
 8006054:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006056:	4b0a      	ldr	r3, [pc, #40]	; (8006080 <HAL_RCC_GetSysClockFreq+0x108>)
 8006058:	68db      	ldr	r3, [r3, #12]
 800605a:	0e5b      	lsrs	r3, r3, #25
 800605c:	f003 0303 	and.w	r3, r3, #3
 8006060:	3301      	adds	r3, #1
 8006062:	005b      	lsls	r3, r3, #1
 8006064:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006066:	697a      	ldr	r2, [r7, #20]
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	fbb2 f3f3 	udiv	r3, r2, r3
 800606e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006070:	69bb      	ldr	r3, [r7, #24]
}
 8006072:	4618      	mov	r0, r3
 8006074:	3724      	adds	r7, #36	; 0x24
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr
 800607e:	bf00      	nop
 8006080:	40021000 	.word	0x40021000
 8006084:	08009fcc 	.word	0x08009fcc
 8006088:	00f42400 	.word	0x00f42400
 800608c:	02dc6c00 	.word	0x02dc6c00

08006090 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b086      	sub	sp, #24
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006098:	2300      	movs	r3, #0
 800609a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800609c:	4b2a      	ldr	r3, [pc, #168]	; (8006148 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800609e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d003      	beq.n	80060b0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80060a8:	f7ff f9f0 	bl	800548c <HAL_PWREx_GetVoltageRange>
 80060ac:	6178      	str	r0, [r7, #20]
 80060ae:	e014      	b.n	80060da <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80060b0:	4b25      	ldr	r3, [pc, #148]	; (8006148 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80060b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060b4:	4a24      	ldr	r2, [pc, #144]	; (8006148 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80060b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060ba:	6593      	str	r3, [r2, #88]	; 0x58
 80060bc:	4b22      	ldr	r3, [pc, #136]	; (8006148 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80060be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060c4:	60fb      	str	r3, [r7, #12]
 80060c6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80060c8:	f7ff f9e0 	bl	800548c <HAL_PWREx_GetVoltageRange>
 80060cc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80060ce:	4b1e      	ldr	r3, [pc, #120]	; (8006148 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80060d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060d2:	4a1d      	ldr	r2, [pc, #116]	; (8006148 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80060d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060d8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060e0:	d10b      	bne.n	80060fa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2b80      	cmp	r3, #128	; 0x80
 80060e6:	d919      	bls.n	800611c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2ba0      	cmp	r3, #160	; 0xa0
 80060ec:	d902      	bls.n	80060f4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80060ee:	2302      	movs	r3, #2
 80060f0:	613b      	str	r3, [r7, #16]
 80060f2:	e013      	b.n	800611c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80060f4:	2301      	movs	r3, #1
 80060f6:	613b      	str	r3, [r7, #16]
 80060f8:	e010      	b.n	800611c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2b80      	cmp	r3, #128	; 0x80
 80060fe:	d902      	bls.n	8006106 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006100:	2303      	movs	r3, #3
 8006102:	613b      	str	r3, [r7, #16]
 8006104:	e00a      	b.n	800611c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2b80      	cmp	r3, #128	; 0x80
 800610a:	d102      	bne.n	8006112 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800610c:	2302      	movs	r3, #2
 800610e:	613b      	str	r3, [r7, #16]
 8006110:	e004      	b.n	800611c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2b70      	cmp	r3, #112	; 0x70
 8006116:	d101      	bne.n	800611c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006118:	2301      	movs	r3, #1
 800611a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800611c:	4b0b      	ldr	r3, [pc, #44]	; (800614c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f023 0207 	bic.w	r2, r3, #7
 8006124:	4909      	ldr	r1, [pc, #36]	; (800614c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	4313      	orrs	r3, r2
 800612a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800612c:	4b07      	ldr	r3, [pc, #28]	; (800614c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f003 0307 	and.w	r3, r3, #7
 8006134:	693a      	ldr	r2, [r7, #16]
 8006136:	429a      	cmp	r2, r3
 8006138:	d001      	beq.n	800613e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	e000      	b.n	8006140 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800613e:	2300      	movs	r3, #0
}
 8006140:	4618      	mov	r0, r3
 8006142:	3718      	adds	r7, #24
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}
 8006148:	40021000 	.word	0x40021000
 800614c:	40022000 	.word	0x40022000

08006150 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b086      	sub	sp, #24
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006158:	2300      	movs	r3, #0
 800615a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800615c:	2300      	movs	r3, #0
 800615e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006168:	2b00      	cmp	r3, #0
 800616a:	d031      	beq.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006170:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006174:	d01a      	beq.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8006176:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800617a:	d814      	bhi.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800617c:	2b00      	cmp	r3, #0
 800617e:	d009      	beq.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006180:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006184:	d10f      	bne.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8006186:	4b5d      	ldr	r3, [pc, #372]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006188:	68db      	ldr	r3, [r3, #12]
 800618a:	4a5c      	ldr	r2, [pc, #368]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800618c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006190:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006192:	e00c      	b.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	3304      	adds	r3, #4
 8006198:	2100      	movs	r1, #0
 800619a:	4618      	mov	r0, r3
 800619c:	f000 f9f0 	bl	8006580 <RCCEx_PLLSAI1_Config>
 80061a0:	4603      	mov	r3, r0
 80061a2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80061a4:	e003      	b.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061a6:	2301      	movs	r3, #1
 80061a8:	74fb      	strb	r3, [r7, #19]
      break;
 80061aa:	e000      	b.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80061ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061ae:	7cfb      	ldrb	r3, [r7, #19]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d10b      	bne.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80061b4:	4b51      	ldr	r3, [pc, #324]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80061b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061ba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061c2:	494e      	ldr	r1, [pc, #312]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80061c4:	4313      	orrs	r3, r2
 80061c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80061ca:	e001      	b.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061cc:	7cfb      	ldrb	r3, [r7, #19]
 80061ce:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061d8:	2b00      	cmp	r3, #0
 80061da:	f000 809e 	beq.w	800631a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061de:	2300      	movs	r3, #0
 80061e0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80061e2:	4b46      	ldr	r3, [pc, #280]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80061e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d101      	bne.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80061ee:	2301      	movs	r3, #1
 80061f0:	e000      	b.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80061f2:	2300      	movs	r3, #0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d00d      	beq.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061f8:	4b40      	ldr	r3, [pc, #256]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80061fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061fc:	4a3f      	ldr	r2, [pc, #252]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80061fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006202:	6593      	str	r3, [r2, #88]	; 0x58
 8006204:	4b3d      	ldr	r3, [pc, #244]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006208:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800620c:	60bb      	str	r3, [r7, #8]
 800620e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006210:	2301      	movs	r3, #1
 8006212:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006214:	4b3a      	ldr	r3, [pc, #232]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a39      	ldr	r2, [pc, #228]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800621a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800621e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006220:	f7fe fba8 	bl	8004974 <HAL_GetTick>
 8006224:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006226:	e009      	b.n	800623c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006228:	f7fe fba4 	bl	8004974 <HAL_GetTick>
 800622c:	4602      	mov	r2, r0
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	1ad3      	subs	r3, r2, r3
 8006232:	2b02      	cmp	r3, #2
 8006234:	d902      	bls.n	800623c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8006236:	2303      	movs	r3, #3
 8006238:	74fb      	strb	r3, [r7, #19]
        break;
 800623a:	e005      	b.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800623c:	4b30      	ldr	r3, [pc, #192]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006244:	2b00      	cmp	r3, #0
 8006246:	d0ef      	beq.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8006248:	7cfb      	ldrb	r3, [r7, #19]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d15a      	bne.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800624e:	4b2b      	ldr	r3, [pc, #172]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006254:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006258:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d01e      	beq.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006264:	697a      	ldr	r2, [r7, #20]
 8006266:	429a      	cmp	r2, r3
 8006268:	d019      	beq.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800626a:	4b24      	ldr	r3, [pc, #144]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800626c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006270:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006274:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006276:	4b21      	ldr	r3, [pc, #132]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006278:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800627c:	4a1f      	ldr	r2, [pc, #124]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800627e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006282:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006286:	4b1d      	ldr	r3, [pc, #116]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006288:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800628c:	4a1b      	ldr	r2, [pc, #108]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800628e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006292:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006296:	4a19      	ldr	r2, [pc, #100]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	f003 0301 	and.w	r3, r3, #1
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d016      	beq.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062a8:	f7fe fb64 	bl	8004974 <HAL_GetTick>
 80062ac:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062ae:	e00b      	b.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062b0:	f7fe fb60 	bl	8004974 <HAL_GetTick>
 80062b4:	4602      	mov	r2, r0
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	1ad3      	subs	r3, r2, r3
 80062ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80062be:	4293      	cmp	r3, r2
 80062c0:	d902      	bls.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80062c2:	2303      	movs	r3, #3
 80062c4:	74fb      	strb	r3, [r7, #19]
            break;
 80062c6:	e006      	b.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062c8:	4b0c      	ldr	r3, [pc, #48]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80062ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062ce:	f003 0302 	and.w	r3, r3, #2
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d0ec      	beq.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80062d6:	7cfb      	ldrb	r3, [r7, #19]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d10b      	bne.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80062dc:	4b07      	ldr	r3, [pc, #28]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80062de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062ea:	4904      	ldr	r1, [pc, #16]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80062ec:	4313      	orrs	r3, r2
 80062ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80062f2:	e009      	b.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80062f4:	7cfb      	ldrb	r3, [r7, #19]
 80062f6:	74bb      	strb	r3, [r7, #18]
 80062f8:	e006      	b.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80062fa:	bf00      	nop
 80062fc:	40021000 	.word	0x40021000
 8006300:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006304:	7cfb      	ldrb	r3, [r7, #19]
 8006306:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006308:	7c7b      	ldrb	r3, [r7, #17]
 800630a:	2b01      	cmp	r3, #1
 800630c:	d105      	bne.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800630e:	4b9b      	ldr	r3, [pc, #620]	; (800657c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006312:	4a9a      	ldr	r2, [pc, #616]	; (800657c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006314:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006318:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f003 0301 	and.w	r3, r3, #1
 8006322:	2b00      	cmp	r3, #0
 8006324:	d00a      	beq.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006326:	4b95      	ldr	r3, [pc, #596]	; (800657c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800632c:	f023 0203 	bic.w	r2, r3, #3
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6a1b      	ldr	r3, [r3, #32]
 8006334:	4991      	ldr	r1, [pc, #580]	; (800657c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006336:	4313      	orrs	r3, r2
 8006338:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f003 0302 	and.w	r3, r3, #2
 8006344:	2b00      	cmp	r3, #0
 8006346:	d00a      	beq.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006348:	4b8c      	ldr	r3, [pc, #560]	; (800657c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800634a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800634e:	f023 020c 	bic.w	r2, r3, #12
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006356:	4989      	ldr	r1, [pc, #548]	; (800657c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006358:	4313      	orrs	r3, r2
 800635a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f003 0304 	and.w	r3, r3, #4
 8006366:	2b00      	cmp	r3, #0
 8006368:	d00a      	beq.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800636a:	4b84      	ldr	r3, [pc, #528]	; (800657c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800636c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006370:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006378:	4980      	ldr	r1, [pc, #512]	; (800657c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800637a:	4313      	orrs	r3, r2
 800637c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f003 0320 	and.w	r3, r3, #32
 8006388:	2b00      	cmp	r3, #0
 800638a:	d00a      	beq.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800638c:	4b7b      	ldr	r3, [pc, #492]	; (800657c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800638e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006392:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800639a:	4978      	ldr	r1, [pc, #480]	; (800657c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800639c:	4313      	orrs	r3, r2
 800639e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d00a      	beq.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80063ae:	4b73      	ldr	r3, [pc, #460]	; (800657c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80063b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063bc:	496f      	ldr	r1, [pc, #444]	; (800657c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80063be:	4313      	orrs	r3, r2
 80063c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d00a      	beq.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80063d0:	4b6a      	ldr	r3, [pc, #424]	; (800657c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80063d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063de:	4967      	ldr	r1, [pc, #412]	; (800657c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80063e0:	4313      	orrs	r3, r2
 80063e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d00a      	beq.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80063f2:	4b62      	ldr	r3, [pc, #392]	; (800657c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80063f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063f8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006400:	495e      	ldr	r1, [pc, #376]	; (800657c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006402:	4313      	orrs	r3, r2
 8006404:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006410:	2b00      	cmp	r3, #0
 8006412:	d00a      	beq.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006414:	4b59      	ldr	r3, [pc, #356]	; (800657c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800641a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006422:	4956      	ldr	r1, [pc, #344]	; (800657c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006424:	4313      	orrs	r3, r2
 8006426:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006432:	2b00      	cmp	r3, #0
 8006434:	d00a      	beq.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006436:	4b51      	ldr	r3, [pc, #324]	; (800657c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800643c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006444:	494d      	ldr	r1, [pc, #308]	; (800657c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006446:	4313      	orrs	r3, r2
 8006448:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006454:	2b00      	cmp	r3, #0
 8006456:	d028      	beq.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006458:	4b48      	ldr	r3, [pc, #288]	; (800657c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800645a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800645e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006466:	4945      	ldr	r1, [pc, #276]	; (800657c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006468:	4313      	orrs	r3, r2
 800646a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006472:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006476:	d106      	bne.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006478:	4b40      	ldr	r3, [pc, #256]	; (800657c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	4a3f      	ldr	r2, [pc, #252]	; (800657c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800647e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006482:	60d3      	str	r3, [r2, #12]
 8006484:	e011      	b.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800648a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800648e:	d10c      	bne.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	3304      	adds	r3, #4
 8006494:	2101      	movs	r1, #1
 8006496:	4618      	mov	r0, r3
 8006498:	f000 f872 	bl	8006580 <RCCEx_PLLSAI1_Config>
 800649c:	4603      	mov	r3, r0
 800649e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80064a0:	7cfb      	ldrb	r3, [r7, #19]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d001      	beq.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 80064a6:	7cfb      	ldrb	r3, [r7, #19]
 80064a8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d028      	beq.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80064b6:	4b31      	ldr	r3, [pc, #196]	; (800657c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80064b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064bc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064c4:	492d      	ldr	r1, [pc, #180]	; (800657c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80064c6:	4313      	orrs	r3, r2
 80064c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064d4:	d106      	bne.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80064d6:	4b29      	ldr	r3, [pc, #164]	; (800657c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80064d8:	68db      	ldr	r3, [r3, #12]
 80064da:	4a28      	ldr	r2, [pc, #160]	; (800657c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80064dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80064e0:	60d3      	str	r3, [r2, #12]
 80064e2:	e011      	b.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80064ec:	d10c      	bne.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	3304      	adds	r3, #4
 80064f2:	2101      	movs	r1, #1
 80064f4:	4618      	mov	r0, r3
 80064f6:	f000 f843 	bl	8006580 <RCCEx_PLLSAI1_Config>
 80064fa:	4603      	mov	r3, r0
 80064fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80064fe:	7cfb      	ldrb	r3, [r7, #19]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d001      	beq.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8006504:	7cfb      	ldrb	r3, [r7, #19]
 8006506:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006510:	2b00      	cmp	r3, #0
 8006512:	d01c      	beq.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006514:	4b19      	ldr	r3, [pc, #100]	; (800657c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800651a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006522:	4916      	ldr	r1, [pc, #88]	; (800657c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006524:	4313      	orrs	r3, r2
 8006526:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800652e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006532:	d10c      	bne.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	3304      	adds	r3, #4
 8006538:	2102      	movs	r1, #2
 800653a:	4618      	mov	r0, r3
 800653c:	f000 f820 	bl	8006580 <RCCEx_PLLSAI1_Config>
 8006540:	4603      	mov	r3, r0
 8006542:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006544:	7cfb      	ldrb	r3, [r7, #19]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d001      	beq.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 800654a:	7cfb      	ldrb	r3, [r7, #19]
 800654c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006556:	2b00      	cmp	r3, #0
 8006558:	d00a      	beq.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800655a:	4b08      	ldr	r3, [pc, #32]	; (800657c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800655c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006560:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006568:	4904      	ldr	r1, [pc, #16]	; (800657c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800656a:	4313      	orrs	r3, r2
 800656c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006570:	7cbb      	ldrb	r3, [r7, #18]
}
 8006572:	4618      	mov	r0, r3
 8006574:	3718      	adds	r7, #24
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}
 800657a:	bf00      	nop
 800657c:	40021000 	.word	0x40021000

08006580 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b084      	sub	sp, #16
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800658a:	2300      	movs	r3, #0
 800658c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800658e:	4b74      	ldr	r3, [pc, #464]	; (8006760 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006590:	68db      	ldr	r3, [r3, #12]
 8006592:	f003 0303 	and.w	r3, r3, #3
 8006596:	2b00      	cmp	r3, #0
 8006598:	d018      	beq.n	80065cc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800659a:	4b71      	ldr	r3, [pc, #452]	; (8006760 <RCCEx_PLLSAI1_Config+0x1e0>)
 800659c:	68db      	ldr	r3, [r3, #12]
 800659e:	f003 0203 	and.w	r2, r3, #3
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	429a      	cmp	r2, r3
 80065a8:	d10d      	bne.n	80065c6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
       ||
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d009      	beq.n	80065c6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80065b2:	4b6b      	ldr	r3, [pc, #428]	; (8006760 <RCCEx_PLLSAI1_Config+0x1e0>)
 80065b4:	68db      	ldr	r3, [r3, #12]
 80065b6:	091b      	lsrs	r3, r3, #4
 80065b8:	f003 0307 	and.w	r3, r3, #7
 80065bc:	1c5a      	adds	r2, r3, #1
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	685b      	ldr	r3, [r3, #4]
       ||
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d047      	beq.n	8006656 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80065c6:	2301      	movs	r3, #1
 80065c8:	73fb      	strb	r3, [r7, #15]
 80065ca:	e044      	b.n	8006656 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	2b03      	cmp	r3, #3
 80065d2:	d018      	beq.n	8006606 <RCCEx_PLLSAI1_Config+0x86>
 80065d4:	2b03      	cmp	r3, #3
 80065d6:	d825      	bhi.n	8006624 <RCCEx_PLLSAI1_Config+0xa4>
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d002      	beq.n	80065e2 <RCCEx_PLLSAI1_Config+0x62>
 80065dc:	2b02      	cmp	r3, #2
 80065de:	d009      	beq.n	80065f4 <RCCEx_PLLSAI1_Config+0x74>
 80065e0:	e020      	b.n	8006624 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80065e2:	4b5f      	ldr	r3, [pc, #380]	; (8006760 <RCCEx_PLLSAI1_Config+0x1e0>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f003 0302 	and.w	r3, r3, #2
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d11d      	bne.n	800662a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80065ee:	2301      	movs	r3, #1
 80065f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80065f2:	e01a      	b.n	800662a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80065f4:	4b5a      	ldr	r3, [pc, #360]	; (8006760 <RCCEx_PLLSAI1_Config+0x1e0>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d116      	bne.n	800662e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006600:	2301      	movs	r3, #1
 8006602:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006604:	e013      	b.n	800662e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006606:	4b56      	ldr	r3, [pc, #344]	; (8006760 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800660e:	2b00      	cmp	r3, #0
 8006610:	d10f      	bne.n	8006632 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006612:	4b53      	ldr	r3, [pc, #332]	; (8006760 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800661a:	2b00      	cmp	r3, #0
 800661c:	d109      	bne.n	8006632 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006622:	e006      	b.n	8006632 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006624:	2301      	movs	r3, #1
 8006626:	73fb      	strb	r3, [r7, #15]
      break;
 8006628:	e004      	b.n	8006634 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800662a:	bf00      	nop
 800662c:	e002      	b.n	8006634 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800662e:	bf00      	nop
 8006630:	e000      	b.n	8006634 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006632:	bf00      	nop
    }

    if(status == HAL_OK)
 8006634:	7bfb      	ldrb	r3, [r7, #15]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d10d      	bne.n	8006656 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800663a:	4b49      	ldr	r3, [pc, #292]	; (8006760 <RCCEx_PLLSAI1_Config+0x1e0>)
 800663c:	68db      	ldr	r3, [r3, #12]
 800663e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6819      	ldr	r1, [r3, #0]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	3b01      	subs	r3, #1
 800664c:	011b      	lsls	r3, r3, #4
 800664e:	430b      	orrs	r3, r1
 8006650:	4943      	ldr	r1, [pc, #268]	; (8006760 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006652:	4313      	orrs	r3, r2
 8006654:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006656:	7bfb      	ldrb	r3, [r7, #15]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d17c      	bne.n	8006756 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800665c:	4b40      	ldr	r3, [pc, #256]	; (8006760 <RCCEx_PLLSAI1_Config+0x1e0>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a3f      	ldr	r2, [pc, #252]	; (8006760 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006662:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006666:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006668:	f7fe f984 	bl	8004974 <HAL_GetTick>
 800666c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800666e:	e009      	b.n	8006684 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006670:	f7fe f980 	bl	8004974 <HAL_GetTick>
 8006674:	4602      	mov	r2, r0
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	1ad3      	subs	r3, r2, r3
 800667a:	2b02      	cmp	r3, #2
 800667c:	d902      	bls.n	8006684 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800667e:	2303      	movs	r3, #3
 8006680:	73fb      	strb	r3, [r7, #15]
        break;
 8006682:	e005      	b.n	8006690 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006684:	4b36      	ldr	r3, [pc, #216]	; (8006760 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800668c:	2b00      	cmp	r3, #0
 800668e:	d1ef      	bne.n	8006670 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006690:	7bfb      	ldrb	r3, [r7, #15]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d15f      	bne.n	8006756 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d110      	bne.n	80066be <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800669c:	4b30      	ldr	r3, [pc, #192]	; (8006760 <RCCEx_PLLSAI1_Config+0x1e0>)
 800669e:	691b      	ldr	r3, [r3, #16]
 80066a0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80066a4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	6892      	ldr	r2, [r2, #8]
 80066ac:	0211      	lsls	r1, r2, #8
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	68d2      	ldr	r2, [r2, #12]
 80066b2:	06d2      	lsls	r2, r2, #27
 80066b4:	430a      	orrs	r2, r1
 80066b6:	492a      	ldr	r1, [pc, #168]	; (8006760 <RCCEx_PLLSAI1_Config+0x1e0>)
 80066b8:	4313      	orrs	r3, r2
 80066ba:	610b      	str	r3, [r1, #16]
 80066bc:	e027      	b.n	800670e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d112      	bne.n	80066ea <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80066c4:	4b26      	ldr	r3, [pc, #152]	; (8006760 <RCCEx_PLLSAI1_Config+0x1e0>)
 80066c6:	691b      	ldr	r3, [r3, #16]
 80066c8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80066cc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	6892      	ldr	r2, [r2, #8]
 80066d4:	0211      	lsls	r1, r2, #8
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	6912      	ldr	r2, [r2, #16]
 80066da:	0852      	lsrs	r2, r2, #1
 80066dc:	3a01      	subs	r2, #1
 80066de:	0552      	lsls	r2, r2, #21
 80066e0:	430a      	orrs	r2, r1
 80066e2:	491f      	ldr	r1, [pc, #124]	; (8006760 <RCCEx_PLLSAI1_Config+0x1e0>)
 80066e4:	4313      	orrs	r3, r2
 80066e6:	610b      	str	r3, [r1, #16]
 80066e8:	e011      	b.n	800670e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80066ea:	4b1d      	ldr	r3, [pc, #116]	; (8006760 <RCCEx_PLLSAI1_Config+0x1e0>)
 80066ec:	691b      	ldr	r3, [r3, #16]
 80066ee:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80066f2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	6892      	ldr	r2, [r2, #8]
 80066fa:	0211      	lsls	r1, r2, #8
 80066fc:	687a      	ldr	r2, [r7, #4]
 80066fe:	6952      	ldr	r2, [r2, #20]
 8006700:	0852      	lsrs	r2, r2, #1
 8006702:	3a01      	subs	r2, #1
 8006704:	0652      	lsls	r2, r2, #25
 8006706:	430a      	orrs	r2, r1
 8006708:	4915      	ldr	r1, [pc, #84]	; (8006760 <RCCEx_PLLSAI1_Config+0x1e0>)
 800670a:	4313      	orrs	r3, r2
 800670c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800670e:	4b14      	ldr	r3, [pc, #80]	; (8006760 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a13      	ldr	r2, [pc, #76]	; (8006760 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006714:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006718:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800671a:	f7fe f92b 	bl	8004974 <HAL_GetTick>
 800671e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006720:	e009      	b.n	8006736 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006722:	f7fe f927 	bl	8004974 <HAL_GetTick>
 8006726:	4602      	mov	r2, r0
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	1ad3      	subs	r3, r2, r3
 800672c:	2b02      	cmp	r3, #2
 800672e:	d902      	bls.n	8006736 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8006730:	2303      	movs	r3, #3
 8006732:	73fb      	strb	r3, [r7, #15]
          break;
 8006734:	e005      	b.n	8006742 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006736:	4b0a      	ldr	r3, [pc, #40]	; (8006760 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800673e:	2b00      	cmp	r3, #0
 8006740:	d0ef      	beq.n	8006722 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8006742:	7bfb      	ldrb	r3, [r7, #15]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d106      	bne.n	8006756 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006748:	4b05      	ldr	r3, [pc, #20]	; (8006760 <RCCEx_PLLSAI1_Config+0x1e0>)
 800674a:	691a      	ldr	r2, [r3, #16]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	699b      	ldr	r3, [r3, #24]
 8006750:	4903      	ldr	r1, [pc, #12]	; (8006760 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006752:	4313      	orrs	r3, r2
 8006754:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006756:	7bfb      	ldrb	r3, [r7, #15]
}
 8006758:	4618      	mov	r0, r3
 800675a:	3710      	adds	r7, #16
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}
 8006760:	40021000 	.word	0x40021000

08006764 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b084      	sub	sp, #16
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800676c:	2301      	movs	r3, #1
 800676e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d06c      	beq.n	8006850 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800677c:	b2db      	uxtb	r3, r3
 800677e:	2b00      	cmp	r3, #0
 8006780:	d106      	bne.n	8006790 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f001 ff98 	bl	80086c0 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2202      	movs	r2, #2
 8006794:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	22ca      	movs	r2, #202	; 0xca
 800679e:	625a      	str	r2, [r3, #36]	; 0x24
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	2253      	movs	r2, #83	; 0x53
 80067a6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f000 f87c 	bl	80068a6 <RTC_EnterInitMode>
 80067ae:	4603      	mov	r3, r0
 80067b0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80067b2:	7bfb      	ldrb	r3, [r7, #15]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d14b      	bne.n	8006850 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	6812      	ldr	r2, [r2, #0]
 80067c2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80067c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067ca:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	6899      	ldr	r1, [r3, #8]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	685a      	ldr	r2, [r3, #4]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	691b      	ldr	r3, [r3, #16]
 80067da:	431a      	orrs	r2, r3
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	699b      	ldr	r3, [r3, #24]
 80067e0:	431a      	orrs	r2, r3
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	430a      	orrs	r2, r1
 80067e8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	687a      	ldr	r2, [r7, #4]
 80067f0:	68d2      	ldr	r2, [r2, #12]
 80067f2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	6919      	ldr	r1, [r3, #16]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	041a      	lsls	r2, r3, #16
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	430a      	orrs	r2, r1
 8006806:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f000 f87f 	bl	800690c <RTC_ExitInitMode>
 800680e:	4603      	mov	r3, r0
 8006810:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8006812:	7bfb      	ldrb	r3, [r7, #15]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d11b      	bne.n	8006850 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f022 0203 	bic.w	r2, r2, #3
 8006826:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	69da      	ldr	r2, [r3, #28]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	695b      	ldr	r3, [r3, #20]
 8006836:	431a      	orrs	r2, r3
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	430a      	orrs	r2, r1
 800683e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	22ff      	movs	r2, #255	; 0xff
 8006846:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2201      	movs	r2, #1
 800684c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8006850:	7bfb      	ldrb	r3, [r7, #15]
}
 8006852:	4618      	mov	r0, r3
 8006854:	3710      	adds	r7, #16
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}

0800685a <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800685a:	b580      	push	{r7, lr}
 800685c:	b084      	sub	sp, #16
 800685e:	af00      	add	r7, sp, #0
 8006860:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	68da      	ldr	r2, [r3, #12]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006870:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8006872:	f7fe f87f 	bl	8004974 <HAL_GetTick>
 8006876:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006878:	e009      	b.n	800688e <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800687a:	f7fe f87b 	bl	8004974 <HAL_GetTick>
 800687e:	4602      	mov	r2, r0
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	1ad3      	subs	r3, r2, r3
 8006884:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006888:	d901      	bls.n	800688e <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800688a:	2303      	movs	r3, #3
 800688c:	e007      	b.n	800689e <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	68db      	ldr	r3, [r3, #12]
 8006894:	f003 0320 	and.w	r3, r3, #32
 8006898:	2b00      	cmp	r3, #0
 800689a:	d0ee      	beq.n	800687a <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800689c:	2300      	movs	r3, #0
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3710      	adds	r7, #16
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}

080068a6 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80068a6:	b580      	push	{r7, lr}
 80068a8:	b084      	sub	sp, #16
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80068ae:	2300      	movs	r3, #0
 80068b0:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	68db      	ldr	r3, [r3, #12]
 80068b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d120      	bne.n	8006902 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f04f 32ff 	mov.w	r2, #4294967295
 80068c8:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80068ca:	f7fe f853 	bl	8004974 <HAL_GetTick>
 80068ce:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80068d0:	e00d      	b.n	80068ee <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80068d2:	f7fe f84f 	bl	8004974 <HAL_GetTick>
 80068d6:	4602      	mov	r2, r0
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	1ad3      	subs	r3, r2, r3
 80068dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80068e0:	d905      	bls.n	80068ee <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80068e2:	2303      	movs	r3, #3
 80068e4:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2203      	movs	r2, #3
 80068ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	68db      	ldr	r3, [r3, #12]
 80068f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d102      	bne.n	8006902 <RTC_EnterInitMode+0x5c>
 80068fc:	7bfb      	ldrb	r3, [r7, #15]
 80068fe:	2b03      	cmp	r3, #3
 8006900:	d1e7      	bne.n	80068d2 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8006902:	7bfb      	ldrb	r3, [r7, #15]
}
 8006904:	4618      	mov	r0, r3
 8006906:	3710      	adds	r7, #16
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}

0800690c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b084      	sub	sp, #16
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006914:	2300      	movs	r3, #0
 8006916:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8006918:	4b1a      	ldr	r3, [pc, #104]	; (8006984 <RTC_ExitInitMode+0x78>)
 800691a:	68db      	ldr	r3, [r3, #12]
 800691c:	4a19      	ldr	r2, [pc, #100]	; (8006984 <RTC_ExitInitMode+0x78>)
 800691e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006922:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006924:	4b17      	ldr	r3, [pc, #92]	; (8006984 <RTC_ExitInitMode+0x78>)
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	f003 0320 	and.w	r3, r3, #32
 800692c:	2b00      	cmp	r3, #0
 800692e:	d10c      	bne.n	800694a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f7ff ff92 	bl	800685a <HAL_RTC_WaitForSynchro>
 8006936:	4603      	mov	r3, r0
 8006938:	2b00      	cmp	r3, #0
 800693a:	d01e      	beq.n	800697a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2203      	movs	r2, #3
 8006940:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8006944:	2303      	movs	r3, #3
 8006946:	73fb      	strb	r3, [r7, #15]
 8006948:	e017      	b.n	800697a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800694a:	4b0e      	ldr	r3, [pc, #56]	; (8006984 <RTC_ExitInitMode+0x78>)
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	4a0d      	ldr	r2, [pc, #52]	; (8006984 <RTC_ExitInitMode+0x78>)
 8006950:	f023 0320 	bic.w	r3, r3, #32
 8006954:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f7ff ff7f 	bl	800685a <HAL_RTC_WaitForSynchro>
 800695c:	4603      	mov	r3, r0
 800695e:	2b00      	cmp	r3, #0
 8006960:	d005      	beq.n	800696e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2203      	movs	r2, #3
 8006966:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800696a:	2303      	movs	r3, #3
 800696c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800696e:	4b05      	ldr	r3, [pc, #20]	; (8006984 <RTC_ExitInitMode+0x78>)
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	4a04      	ldr	r2, [pc, #16]	; (8006984 <RTC_ExitInitMode+0x78>)
 8006974:	f043 0320 	orr.w	r3, r3, #32
 8006978:	6093      	str	r3, [r2, #8]
  }

  return status;
 800697a:	7bfb      	ldrb	r3, [r7, #15]
}
 800697c:	4618      	mov	r0, r3
 800697e:	3710      	adds	r7, #16
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}
 8006984:	40002800 	.word	0x40002800

08006988 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b082      	sub	sp, #8
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d101      	bne.n	800699a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006996:	2301      	movs	r3, #1
 8006998:	e049      	b.n	8006a2e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d106      	bne.n	80069b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2200      	movs	r2, #0
 80069aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f001 fea2 	bl	80086f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2202      	movs	r2, #2
 80069b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681a      	ldr	r2, [r3, #0]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	3304      	adds	r3, #4
 80069c4:	4619      	mov	r1, r3
 80069c6:	4610      	mov	r0, r2
 80069c8:	f000 fe2e 	bl	8007628 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2201      	movs	r2, #1
 80069d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2201      	movs	r2, #1
 80069d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2201      	movs	r2, #1
 80069e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2201      	movs	r2, #1
 80069e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2201      	movs	r2, #1
 80069f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2201      	movs	r2, #1
 80069f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2201      	movs	r2, #1
 8006a00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2201      	movs	r2, #1
 8006a08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2201      	movs	r2, #1
 8006a18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2201      	movs	r2, #1
 8006a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a2c:	2300      	movs	r3, #0
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3708      	adds	r7, #8
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}

08006a36 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006a36:	b580      	push	{r7, lr}
 8006a38:	b082      	sub	sp, #8
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d101      	bne.n	8006a48 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006a44:	2301      	movs	r3, #1
 8006a46:	e049      	b.n	8006adc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a4e:	b2db      	uxtb	r3, r3
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d106      	bne.n	8006a62 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f001 ff43 	bl	80088e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2202      	movs	r2, #2
 8006a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	3304      	adds	r3, #4
 8006a72:	4619      	mov	r1, r3
 8006a74:	4610      	mov	r0, r2
 8006a76:	f000 fdd7 	bl	8007628 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2201      	movs	r2, #1
 8006a86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2201      	movs	r2, #1
 8006a96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2201      	movs	r2, #1
 8006aae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2201      	movs	r2, #1
 8006ab6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2201      	movs	r2, #1
 8006abe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2201      	movs	r2, #1
 8006ace:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ada:	2300      	movs	r3, #0
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3708      	adds	r7, #8
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}

08006ae4 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b086      	sub	sp, #24
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	60f8      	str	r0, [r7, #12]
 8006aec:	60b9      	str	r1, [r7, #8]
 8006aee:	607a      	str	r2, [r7, #4]
 8006af0:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8006af2:	2300      	movs	r3, #0
 8006af4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d109      	bne.n	8006b10 <HAL_TIM_PWM_Start_DMA+0x2c>
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b02:	b2db      	uxtb	r3, r3
 8006b04:	2b02      	cmp	r3, #2
 8006b06:	bf0c      	ite	eq
 8006b08:	2301      	moveq	r3, #1
 8006b0a:	2300      	movne	r3, #0
 8006b0c:	b2db      	uxtb	r3, r3
 8006b0e:	e03c      	b.n	8006b8a <HAL_TIM_PWM_Start_DMA+0xa6>
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	2b04      	cmp	r3, #4
 8006b14:	d109      	bne.n	8006b2a <HAL_TIM_PWM_Start_DMA+0x46>
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006b1c:	b2db      	uxtb	r3, r3
 8006b1e:	2b02      	cmp	r3, #2
 8006b20:	bf0c      	ite	eq
 8006b22:	2301      	moveq	r3, #1
 8006b24:	2300      	movne	r3, #0
 8006b26:	b2db      	uxtb	r3, r3
 8006b28:	e02f      	b.n	8006b8a <HAL_TIM_PWM_Start_DMA+0xa6>
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	2b08      	cmp	r3, #8
 8006b2e:	d109      	bne.n	8006b44 <HAL_TIM_PWM_Start_DMA+0x60>
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b36:	b2db      	uxtb	r3, r3
 8006b38:	2b02      	cmp	r3, #2
 8006b3a:	bf0c      	ite	eq
 8006b3c:	2301      	moveq	r3, #1
 8006b3e:	2300      	movne	r3, #0
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	e022      	b.n	8006b8a <HAL_TIM_PWM_Start_DMA+0xa6>
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	2b0c      	cmp	r3, #12
 8006b48:	d109      	bne.n	8006b5e <HAL_TIM_PWM_Start_DMA+0x7a>
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	2b02      	cmp	r3, #2
 8006b54:	bf0c      	ite	eq
 8006b56:	2301      	moveq	r3, #1
 8006b58:	2300      	movne	r3, #0
 8006b5a:	b2db      	uxtb	r3, r3
 8006b5c:	e015      	b.n	8006b8a <HAL_TIM_PWM_Start_DMA+0xa6>
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	2b10      	cmp	r3, #16
 8006b62:	d109      	bne.n	8006b78 <HAL_TIM_PWM_Start_DMA+0x94>
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006b6a:	b2db      	uxtb	r3, r3
 8006b6c:	2b02      	cmp	r3, #2
 8006b6e:	bf0c      	ite	eq
 8006b70:	2301      	moveq	r3, #1
 8006b72:	2300      	movne	r3, #0
 8006b74:	b2db      	uxtb	r3, r3
 8006b76:	e008      	b.n	8006b8a <HAL_TIM_PWM_Start_DMA+0xa6>
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006b7e:	b2db      	uxtb	r3, r3
 8006b80:	2b02      	cmp	r3, #2
 8006b82:	bf0c      	ite	eq
 8006b84:	2301      	moveq	r3, #1
 8006b86:	2300      	movne	r3, #0
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d001      	beq.n	8006b92 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8006b8e:	2302      	movs	r3, #2
 8006b90:	e18d      	b.n	8006eae <HAL_TIM_PWM_Start_DMA+0x3ca>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d109      	bne.n	8006bac <HAL_TIM_PWM_Start_DMA+0xc8>
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b9e:	b2db      	uxtb	r3, r3
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	bf0c      	ite	eq
 8006ba4:	2301      	moveq	r3, #1
 8006ba6:	2300      	movne	r3, #0
 8006ba8:	b2db      	uxtb	r3, r3
 8006baa:	e03c      	b.n	8006c26 <HAL_TIM_PWM_Start_DMA+0x142>
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	2b04      	cmp	r3, #4
 8006bb0:	d109      	bne.n	8006bc6 <HAL_TIM_PWM_Start_DMA+0xe2>
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006bb8:	b2db      	uxtb	r3, r3
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	bf0c      	ite	eq
 8006bbe:	2301      	moveq	r3, #1
 8006bc0:	2300      	movne	r3, #0
 8006bc2:	b2db      	uxtb	r3, r3
 8006bc4:	e02f      	b.n	8006c26 <HAL_TIM_PWM_Start_DMA+0x142>
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	2b08      	cmp	r3, #8
 8006bca:	d109      	bne.n	8006be0 <HAL_TIM_PWM_Start_DMA+0xfc>
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006bd2:	b2db      	uxtb	r3, r3
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	bf0c      	ite	eq
 8006bd8:	2301      	moveq	r3, #1
 8006bda:	2300      	movne	r3, #0
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	e022      	b.n	8006c26 <HAL_TIM_PWM_Start_DMA+0x142>
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	2b0c      	cmp	r3, #12
 8006be4:	d109      	bne.n	8006bfa <HAL_TIM_PWM_Start_DMA+0x116>
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	bf0c      	ite	eq
 8006bf2:	2301      	moveq	r3, #1
 8006bf4:	2300      	movne	r3, #0
 8006bf6:	b2db      	uxtb	r3, r3
 8006bf8:	e015      	b.n	8006c26 <HAL_TIM_PWM_Start_DMA+0x142>
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	2b10      	cmp	r3, #16
 8006bfe:	d109      	bne.n	8006c14 <HAL_TIM_PWM_Start_DMA+0x130>
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006c06:	b2db      	uxtb	r3, r3
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	bf0c      	ite	eq
 8006c0c:	2301      	moveq	r3, #1
 8006c0e:	2300      	movne	r3, #0
 8006c10:	b2db      	uxtb	r3, r3
 8006c12:	e008      	b.n	8006c26 <HAL_TIM_PWM_Start_DMA+0x142>
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006c1a:	b2db      	uxtb	r3, r3
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	bf0c      	ite	eq
 8006c20:	2301      	moveq	r3, #1
 8006c22:	2300      	movne	r3, #0
 8006c24:	b2db      	uxtb	r3, r3
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d034      	beq.n	8006c94 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d002      	beq.n	8006c36 <HAL_TIM_PWM_Start_DMA+0x152>
 8006c30:	887b      	ldrh	r3, [r7, #2]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d101      	bne.n	8006c3a <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8006c36:	2301      	movs	r3, #1
 8006c38:	e139      	b.n	8006eae <HAL_TIM_PWM_Start_DMA+0x3ca>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d104      	bne.n	8006c4a <HAL_TIM_PWM_Start_DMA+0x166>
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2202      	movs	r2, #2
 8006c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c48:	e026      	b.n	8006c98 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	2b04      	cmp	r3, #4
 8006c4e:	d104      	bne.n	8006c5a <HAL_TIM_PWM_Start_DMA+0x176>
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2202      	movs	r2, #2
 8006c54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c58:	e01e      	b.n	8006c98 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	2b08      	cmp	r3, #8
 8006c5e:	d104      	bne.n	8006c6a <HAL_TIM_PWM_Start_DMA+0x186>
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2202      	movs	r2, #2
 8006c64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c68:	e016      	b.n	8006c98 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	2b0c      	cmp	r3, #12
 8006c6e:	d104      	bne.n	8006c7a <HAL_TIM_PWM_Start_DMA+0x196>
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2202      	movs	r2, #2
 8006c74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006c78:	e00e      	b.n	8006c98 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	2b10      	cmp	r3, #16
 8006c7e:	d104      	bne.n	8006c8a <HAL_TIM_PWM_Start_DMA+0x1a6>
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2202      	movs	r2, #2
 8006c84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c88:	e006      	b.n	8006c98 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2202      	movs	r2, #2
 8006c8e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c92:	e001      	b.n	8006c98 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8006c94:	2301      	movs	r3, #1
 8006c96:	e10a      	b.n	8006eae <HAL_TIM_PWM_Start_DMA+0x3ca>
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	2b0c      	cmp	r3, #12
 8006c9c:	f200 80ae 	bhi.w	8006dfc <HAL_TIM_PWM_Start_DMA+0x318>
 8006ca0:	a201      	add	r2, pc, #4	; (adr r2, 8006ca8 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8006ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ca6:	bf00      	nop
 8006ca8:	08006cdd 	.word	0x08006cdd
 8006cac:	08006dfd 	.word	0x08006dfd
 8006cb0:	08006dfd 	.word	0x08006dfd
 8006cb4:	08006dfd 	.word	0x08006dfd
 8006cb8:	08006d25 	.word	0x08006d25
 8006cbc:	08006dfd 	.word	0x08006dfd
 8006cc0:	08006dfd 	.word	0x08006dfd
 8006cc4:	08006dfd 	.word	0x08006dfd
 8006cc8:	08006d6d 	.word	0x08006d6d
 8006ccc:	08006dfd 	.word	0x08006dfd
 8006cd0:	08006dfd 	.word	0x08006dfd
 8006cd4:	08006dfd 	.word	0x08006dfd
 8006cd8:	08006db5 	.word	0x08006db5
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce0:	4a75      	ldr	r2, [pc, #468]	; (8006eb8 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8006ce2:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce8:	4a74      	ldr	r2, [pc, #464]	; (8006ebc <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8006cea:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf0:	4a73      	ldr	r2, [pc, #460]	; (8006ec0 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8006cf2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006cf8:	6879      	ldr	r1, [r7, #4]
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	3334      	adds	r3, #52	; 0x34
 8006d00:	461a      	mov	r2, r3
 8006d02:	887b      	ldrh	r3, [r7, #2]
 8006d04:	f7fe f80c 	bl	8004d20 <HAL_DMA_Start_IT>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d001      	beq.n	8006d12 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	e0cd      	b.n	8006eae <HAL_TIM_PWM_Start_DMA+0x3ca>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	68da      	ldr	r2, [r3, #12]
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d20:	60da      	str	r2, [r3, #12]
      break;
 8006d22:	e06e      	b.n	8006e02 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d28:	4a63      	ldr	r2, [pc, #396]	; (8006eb8 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8006d2a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d30:	4a62      	ldr	r2, [pc, #392]	; (8006ebc <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8006d32:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d38:	4a61      	ldr	r2, [pc, #388]	; (8006ec0 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8006d3a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8006d40:	6879      	ldr	r1, [r7, #4]
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	3338      	adds	r3, #56	; 0x38
 8006d48:	461a      	mov	r2, r3
 8006d4a:	887b      	ldrh	r3, [r7, #2]
 8006d4c:	f7fd ffe8 	bl	8004d20 <HAL_DMA_Start_IT>
 8006d50:	4603      	mov	r3, r0
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d001      	beq.n	8006d5a <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006d56:	2301      	movs	r3, #1
 8006d58:	e0a9      	b.n	8006eae <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	68da      	ldr	r2, [r3, #12]
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006d68:	60da      	str	r2, [r3, #12]
      break;
 8006d6a:	e04a      	b.n	8006e02 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d70:	4a51      	ldr	r2, [pc, #324]	; (8006eb8 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8006d72:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d78:	4a50      	ldr	r2, [pc, #320]	; (8006ebc <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8006d7a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d80:	4a4f      	ldr	r2, [pc, #316]	; (8006ec0 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8006d82:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006d88:	6879      	ldr	r1, [r7, #4]
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	333c      	adds	r3, #60	; 0x3c
 8006d90:	461a      	mov	r2, r3
 8006d92:	887b      	ldrh	r3, [r7, #2]
 8006d94:	f7fd ffc4 	bl	8004d20 <HAL_DMA_Start_IT>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d001      	beq.n	8006da2 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	e085      	b.n	8006eae <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	68da      	ldr	r2, [r3, #12]
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006db0:	60da      	str	r2, [r3, #12]
      break;
 8006db2:	e026      	b.n	8006e02 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006db8:	4a3f      	ldr	r2, [pc, #252]	; (8006eb8 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8006dba:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dc0:	4a3e      	ldr	r2, [pc, #248]	; (8006ebc <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8006dc2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dc8:	4a3d      	ldr	r2, [pc, #244]	; (8006ec0 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8006dca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006dd0:	6879      	ldr	r1, [r7, #4]
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	3340      	adds	r3, #64	; 0x40
 8006dd8:	461a      	mov	r2, r3
 8006dda:	887b      	ldrh	r3, [r7, #2]
 8006ddc:	f7fd ffa0 	bl	8004d20 <HAL_DMA_Start_IT>
 8006de0:	4603      	mov	r3, r0
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d001      	beq.n	8006dea <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006de6:	2301      	movs	r3, #1
 8006de8:	e061      	b.n	8006eae <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	68da      	ldr	r2, [r3, #12]
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006df8:	60da      	str	r2, [r3, #12]
      break;
 8006dfa:	e002      	b.n	8006e02 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	75fb      	strb	r3, [r7, #23]
      break;
 8006e00:	bf00      	nop
  }

  if (status == HAL_OK)
 8006e02:	7dfb      	ldrb	r3, [r7, #23]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d151      	bne.n	8006eac <HAL_TIM_PWM_Start_DMA+0x3c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	2201      	movs	r2, #1
 8006e0e:	68b9      	ldr	r1, [r7, #8]
 8006e10:	4618      	mov	r0, r3
 8006e12:	f000 ff85 	bl	8007d20 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a2a      	ldr	r2, [pc, #168]	; (8006ec4 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d009      	beq.n	8006e34 <HAL_TIM_PWM_Start_DMA+0x350>
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a28      	ldr	r2, [pc, #160]	; (8006ec8 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d004      	beq.n	8006e34 <HAL_TIM_PWM_Start_DMA+0x350>
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a27      	ldr	r2, [pc, #156]	; (8006ecc <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d101      	bne.n	8006e38 <HAL_TIM_PWM_Start_DMA+0x354>
 8006e34:	2301      	movs	r3, #1
 8006e36:	e000      	b.n	8006e3a <HAL_TIM_PWM_Start_DMA+0x356>
 8006e38:	2300      	movs	r3, #0
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d007      	beq.n	8006e4e <HAL_TIM_PWM_Start_DMA+0x36a>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006e4c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a1c      	ldr	r2, [pc, #112]	; (8006ec4 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d009      	beq.n	8006e6c <HAL_TIM_PWM_Start_DMA+0x388>
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e60:	d004      	beq.n	8006e6c <HAL_TIM_PWM_Start_DMA+0x388>
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a18      	ldr	r2, [pc, #96]	; (8006ec8 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d115      	bne.n	8006e98 <HAL_TIM_PWM_Start_DMA+0x3b4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	689a      	ldr	r2, [r3, #8]
 8006e72:	4b17      	ldr	r3, [pc, #92]	; (8006ed0 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8006e74:	4013      	ands	r3, r2
 8006e76:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	2b06      	cmp	r3, #6
 8006e7c:	d015      	beq.n	8006eaa <HAL_TIM_PWM_Start_DMA+0x3c6>
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e84:	d011      	beq.n	8006eaa <HAL_TIM_PWM_Start_DMA+0x3c6>
      {
        __HAL_TIM_ENABLE(htim);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	681a      	ldr	r2, [r3, #0]
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f042 0201 	orr.w	r2, r2, #1
 8006e94:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e96:	e008      	b.n	8006eaa <HAL_TIM_PWM_Start_DMA+0x3c6>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	681a      	ldr	r2, [r3, #0]
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f042 0201 	orr.w	r2, r2, #1
 8006ea6:	601a      	str	r2, [r3, #0]
 8006ea8:	e000      	b.n	8006eac <HAL_TIM_PWM_Start_DMA+0x3c8>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006eaa:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8006eac:	7dfb      	ldrb	r3, [r7, #23]
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3718      	adds	r7, #24
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}
 8006eb6:	bf00      	nop
 8006eb8:	08007519 	.word	0x08007519
 8006ebc:	080075c1 	.word	0x080075c1
 8006ec0:	08007487 	.word	0x08007487
 8006ec4:	40012c00 	.word	0x40012c00
 8006ec8:	40014000 	.word	0x40014000
 8006ecc:	40014400 	.word	0x40014400
 8006ed0:	00010007 	.word	0x00010007

08006ed4 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b084      	sub	sp, #16
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	73fb      	strb	r3, [r7, #15]
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	2b0c      	cmp	r3, #12
 8006ee6:	d855      	bhi.n	8006f94 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8006ee8:	a201      	add	r2, pc, #4	; (adr r2, 8006ef0 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8006eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eee:	bf00      	nop
 8006ef0:	08006f25 	.word	0x08006f25
 8006ef4:	08006f95 	.word	0x08006f95
 8006ef8:	08006f95 	.word	0x08006f95
 8006efc:	08006f95 	.word	0x08006f95
 8006f00:	08006f41 	.word	0x08006f41
 8006f04:	08006f95 	.word	0x08006f95
 8006f08:	08006f95 	.word	0x08006f95
 8006f0c:	08006f95 	.word	0x08006f95
 8006f10:	08006f5d 	.word	0x08006f5d
 8006f14:	08006f95 	.word	0x08006f95
 8006f18:	08006f95 	.word	0x08006f95
 8006f1c:	08006f95 	.word	0x08006f95
 8006f20:	08006f79 	.word	0x08006f79
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	68da      	ldr	r2, [r3, #12]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006f32:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f7fd ff51 	bl	8004de0 <HAL_DMA_Abort_IT>
      break;
 8006f3e:	e02c      	b.n	8006f9a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	68da      	ldr	r2, [r3, #12]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f4e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f54:	4618      	mov	r0, r3
 8006f56:	f7fd ff43 	bl	8004de0 <HAL_DMA_Abort_IT>
      break;
 8006f5a:	e01e      	b.n	8006f9a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	68da      	ldr	r2, [r3, #12]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f6a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f70:	4618      	mov	r0, r3
 8006f72:	f7fd ff35 	bl	8004de0 <HAL_DMA_Abort_IT>
      break;
 8006f76:	e010      	b.n	8006f9a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	68da      	ldr	r2, [r3, #12]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006f86:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f7fd ff27 	bl	8004de0 <HAL_DMA_Abort_IT>
      break;
 8006f92:	e002      	b.n	8006f9a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8006f94:	2301      	movs	r3, #1
 8006f96:	73fb      	strb	r3, [r7, #15]
      break;
 8006f98:	bf00      	nop
  }

  if (status == HAL_OK)
 8006f9a:	7bfb      	ldrb	r3, [r7, #15]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d176      	bne.n	800708e <HAL_TIM_PWM_Stop_DMA+0x1ba>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	6839      	ldr	r1, [r7, #0]
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f000 feb9 	bl	8007d20 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a39      	ldr	r2, [pc, #228]	; (8007098 <HAL_TIM_PWM_Stop_DMA+0x1c4>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d009      	beq.n	8006fcc <HAL_TIM_PWM_Stop_DMA+0xf8>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a37      	ldr	r2, [pc, #220]	; (800709c <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d004      	beq.n	8006fcc <HAL_TIM_PWM_Stop_DMA+0xf8>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a36      	ldr	r2, [pc, #216]	; (80070a0 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d101      	bne.n	8006fd0 <HAL_TIM_PWM_Stop_DMA+0xfc>
 8006fcc:	2301      	movs	r3, #1
 8006fce:	e000      	b.n	8006fd2 <HAL_TIM_PWM_Stop_DMA+0xfe>
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d017      	beq.n	8007006 <HAL_TIM_PWM_Stop_DMA+0x132>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	6a1a      	ldr	r2, [r3, #32]
 8006fdc:	f241 1311 	movw	r3, #4369	; 0x1111
 8006fe0:	4013      	ands	r3, r2
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d10f      	bne.n	8007006 <HAL_TIM_PWM_Stop_DMA+0x132>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	6a1a      	ldr	r2, [r3, #32]
 8006fec:	f240 4344 	movw	r3, #1092	; 0x444
 8006ff0:	4013      	ands	r3, r2
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d107      	bne.n	8007006 <HAL_TIM_PWM_Stop_DMA+0x132>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007004:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	6a1a      	ldr	r2, [r3, #32]
 800700c:	f241 1311 	movw	r3, #4369	; 0x1111
 8007010:	4013      	ands	r3, r2
 8007012:	2b00      	cmp	r3, #0
 8007014:	d10f      	bne.n	8007036 <HAL_TIM_PWM_Stop_DMA+0x162>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	6a1a      	ldr	r2, [r3, #32]
 800701c:	f240 4344 	movw	r3, #1092	; 0x444
 8007020:	4013      	ands	r3, r2
 8007022:	2b00      	cmp	r3, #0
 8007024:	d107      	bne.n	8007036 <HAL_TIM_PWM_Stop_DMA+0x162>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f022 0201 	bic.w	r2, r2, #1
 8007034:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d104      	bne.n	8007046 <HAL_TIM_PWM_Stop_DMA+0x172>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2201      	movs	r2, #1
 8007040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007044:	e023      	b.n	800708e <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	2b04      	cmp	r3, #4
 800704a:	d104      	bne.n	8007056 <HAL_TIM_PWM_Stop_DMA+0x182>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2201      	movs	r2, #1
 8007050:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007054:	e01b      	b.n	800708e <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	2b08      	cmp	r3, #8
 800705a:	d104      	bne.n	8007066 <HAL_TIM_PWM_Stop_DMA+0x192>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2201      	movs	r2, #1
 8007060:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007064:	e013      	b.n	800708e <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	2b0c      	cmp	r3, #12
 800706a:	d104      	bne.n	8007076 <HAL_TIM_PWM_Stop_DMA+0x1a2>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2201      	movs	r2, #1
 8007070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007074:	e00b      	b.n	800708e <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	2b10      	cmp	r3, #16
 800707a:	d104      	bne.n	8007086 <HAL_TIM_PWM_Stop_DMA+0x1b2>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2201      	movs	r2, #1
 8007080:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007084:	e003      	b.n	800708e <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2201      	movs	r2, #1
 800708a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800708e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007090:	4618      	mov	r0, r3
 8007092:	3710      	adds	r7, #16
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}
 8007098:	40012c00 	.word	0x40012c00
 800709c:	40014000 	.word	0x40014000
 80070a0:	40014400 	.word	0x40014400

080070a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b086      	sub	sp, #24
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	60f8      	str	r0, [r7, #12]
 80070ac:	60b9      	str	r1, [r7, #8]
 80070ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070b0:	2300      	movs	r3, #0
 80070b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070ba:	2b01      	cmp	r3, #1
 80070bc:	d101      	bne.n	80070c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80070be:	2302      	movs	r3, #2
 80070c0:	e0ff      	b.n	80072c2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2201      	movs	r2, #1
 80070c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2b14      	cmp	r3, #20
 80070ce:	f200 80f0 	bhi.w	80072b2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80070d2:	a201      	add	r2, pc, #4	; (adr r2, 80070d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80070d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070d8:	0800712d 	.word	0x0800712d
 80070dc:	080072b3 	.word	0x080072b3
 80070e0:	080072b3 	.word	0x080072b3
 80070e4:	080072b3 	.word	0x080072b3
 80070e8:	0800716d 	.word	0x0800716d
 80070ec:	080072b3 	.word	0x080072b3
 80070f0:	080072b3 	.word	0x080072b3
 80070f4:	080072b3 	.word	0x080072b3
 80070f8:	080071af 	.word	0x080071af
 80070fc:	080072b3 	.word	0x080072b3
 8007100:	080072b3 	.word	0x080072b3
 8007104:	080072b3 	.word	0x080072b3
 8007108:	080071ef 	.word	0x080071ef
 800710c:	080072b3 	.word	0x080072b3
 8007110:	080072b3 	.word	0x080072b3
 8007114:	080072b3 	.word	0x080072b3
 8007118:	08007231 	.word	0x08007231
 800711c:	080072b3 	.word	0x080072b3
 8007120:	080072b3 	.word	0x080072b3
 8007124:	080072b3 	.word	0x080072b3
 8007128:	08007271 	.word	0x08007271
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	68b9      	ldr	r1, [r7, #8]
 8007132:	4618      	mov	r0, r3
 8007134:	f000 fadc 	bl	80076f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	699a      	ldr	r2, [r3, #24]
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f042 0208 	orr.w	r2, r2, #8
 8007146:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	699a      	ldr	r2, [r3, #24]
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f022 0204 	bic.w	r2, r2, #4
 8007156:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	6999      	ldr	r1, [r3, #24]
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	691a      	ldr	r2, [r3, #16]
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	430a      	orrs	r2, r1
 8007168:	619a      	str	r2, [r3, #24]
      break;
 800716a:	e0a5      	b.n	80072b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	68b9      	ldr	r1, [r7, #8]
 8007172:	4618      	mov	r0, r3
 8007174:	f000 fb38 	bl	80077e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	699a      	ldr	r2, [r3, #24]
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007186:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	699a      	ldr	r2, [r3, #24]
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007196:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	6999      	ldr	r1, [r3, #24]
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	691b      	ldr	r3, [r3, #16]
 80071a2:	021a      	lsls	r2, r3, #8
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	430a      	orrs	r2, r1
 80071aa:	619a      	str	r2, [r3, #24]
      break;
 80071ac:	e084      	b.n	80072b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	68b9      	ldr	r1, [r7, #8]
 80071b4:	4618      	mov	r0, r3
 80071b6:	f000 fb91 	bl	80078dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	69da      	ldr	r2, [r3, #28]
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f042 0208 	orr.w	r2, r2, #8
 80071c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	69da      	ldr	r2, [r3, #28]
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f022 0204 	bic.w	r2, r2, #4
 80071d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	69d9      	ldr	r1, [r3, #28]
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	691a      	ldr	r2, [r3, #16]
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	430a      	orrs	r2, r1
 80071ea:	61da      	str	r2, [r3, #28]
      break;
 80071ec:	e064      	b.n	80072b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	68b9      	ldr	r1, [r7, #8]
 80071f4:	4618      	mov	r0, r3
 80071f6:	f000 fbe9 	bl	80079cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	69da      	ldr	r2, [r3, #28]
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007208:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	69da      	ldr	r2, [r3, #28]
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007218:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	69d9      	ldr	r1, [r3, #28]
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	691b      	ldr	r3, [r3, #16]
 8007224:	021a      	lsls	r2, r3, #8
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	430a      	orrs	r2, r1
 800722c:	61da      	str	r2, [r3, #28]
      break;
 800722e:	e043      	b.n	80072b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	68b9      	ldr	r1, [r7, #8]
 8007236:	4618      	mov	r0, r3
 8007238:	f000 fc26 	bl	8007a88 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f042 0208 	orr.w	r2, r2, #8
 800724a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f022 0204 	bic.w	r2, r2, #4
 800725a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	691a      	ldr	r2, [r3, #16]
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	430a      	orrs	r2, r1
 800726c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800726e:	e023      	b.n	80072b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	68b9      	ldr	r1, [r7, #8]
 8007276:	4618      	mov	r0, r3
 8007278:	f000 fc5e 	bl	8007b38 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800728a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800729a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	691b      	ldr	r3, [r3, #16]
 80072a6:	021a      	lsls	r2, r3, #8
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	430a      	orrs	r2, r1
 80072ae:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80072b0:	e002      	b.n	80072b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	75fb      	strb	r3, [r7, #23]
      break;
 80072b6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2200      	movs	r2, #0
 80072bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80072c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	3718      	adds	r7, #24
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}
 80072ca:	bf00      	nop

080072cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b084      	sub	sp, #16
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
 80072d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80072d6:	2300      	movs	r3, #0
 80072d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d101      	bne.n	80072e8 <HAL_TIM_ConfigClockSource+0x1c>
 80072e4:	2302      	movs	r3, #2
 80072e6:	e0b6      	b.n	8007456 <HAL_TIM_ConfigClockSource+0x18a>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2201      	movs	r2, #1
 80072ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2202      	movs	r2, #2
 80072f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007306:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800730a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007312:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	68ba      	ldr	r2, [r7, #8]
 800731a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007324:	d03e      	beq.n	80073a4 <HAL_TIM_ConfigClockSource+0xd8>
 8007326:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800732a:	f200 8087 	bhi.w	800743c <HAL_TIM_ConfigClockSource+0x170>
 800732e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007332:	f000 8086 	beq.w	8007442 <HAL_TIM_ConfigClockSource+0x176>
 8007336:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800733a:	d87f      	bhi.n	800743c <HAL_TIM_ConfigClockSource+0x170>
 800733c:	2b70      	cmp	r3, #112	; 0x70
 800733e:	d01a      	beq.n	8007376 <HAL_TIM_ConfigClockSource+0xaa>
 8007340:	2b70      	cmp	r3, #112	; 0x70
 8007342:	d87b      	bhi.n	800743c <HAL_TIM_ConfigClockSource+0x170>
 8007344:	2b60      	cmp	r3, #96	; 0x60
 8007346:	d050      	beq.n	80073ea <HAL_TIM_ConfigClockSource+0x11e>
 8007348:	2b60      	cmp	r3, #96	; 0x60
 800734a:	d877      	bhi.n	800743c <HAL_TIM_ConfigClockSource+0x170>
 800734c:	2b50      	cmp	r3, #80	; 0x50
 800734e:	d03c      	beq.n	80073ca <HAL_TIM_ConfigClockSource+0xfe>
 8007350:	2b50      	cmp	r3, #80	; 0x50
 8007352:	d873      	bhi.n	800743c <HAL_TIM_ConfigClockSource+0x170>
 8007354:	2b40      	cmp	r3, #64	; 0x40
 8007356:	d058      	beq.n	800740a <HAL_TIM_ConfigClockSource+0x13e>
 8007358:	2b40      	cmp	r3, #64	; 0x40
 800735a:	d86f      	bhi.n	800743c <HAL_TIM_ConfigClockSource+0x170>
 800735c:	2b30      	cmp	r3, #48	; 0x30
 800735e:	d064      	beq.n	800742a <HAL_TIM_ConfigClockSource+0x15e>
 8007360:	2b30      	cmp	r3, #48	; 0x30
 8007362:	d86b      	bhi.n	800743c <HAL_TIM_ConfigClockSource+0x170>
 8007364:	2b20      	cmp	r3, #32
 8007366:	d060      	beq.n	800742a <HAL_TIM_ConfigClockSource+0x15e>
 8007368:	2b20      	cmp	r3, #32
 800736a:	d867      	bhi.n	800743c <HAL_TIM_ConfigClockSource+0x170>
 800736c:	2b00      	cmp	r3, #0
 800736e:	d05c      	beq.n	800742a <HAL_TIM_ConfigClockSource+0x15e>
 8007370:	2b10      	cmp	r3, #16
 8007372:	d05a      	beq.n	800742a <HAL_TIM_ConfigClockSource+0x15e>
 8007374:	e062      	b.n	800743c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6818      	ldr	r0, [r3, #0]
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	6899      	ldr	r1, [r3, #8]
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	685a      	ldr	r2, [r3, #4]
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	68db      	ldr	r3, [r3, #12]
 8007386:	f000 fcab 	bl	8007ce0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	689b      	ldr	r3, [r3, #8]
 8007390:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007398:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	68ba      	ldr	r2, [r7, #8]
 80073a0:	609a      	str	r2, [r3, #8]
      break;
 80073a2:	e04f      	b.n	8007444 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6818      	ldr	r0, [r3, #0]
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	6899      	ldr	r1, [r3, #8]
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	685a      	ldr	r2, [r3, #4]
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	68db      	ldr	r3, [r3, #12]
 80073b4:	f000 fc94 	bl	8007ce0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	689a      	ldr	r2, [r3, #8]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80073c6:	609a      	str	r2, [r3, #8]
      break;
 80073c8:	e03c      	b.n	8007444 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6818      	ldr	r0, [r3, #0]
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	6859      	ldr	r1, [r3, #4]
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	68db      	ldr	r3, [r3, #12]
 80073d6:	461a      	mov	r2, r3
 80073d8:	f000 fc08 	bl	8007bec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	2150      	movs	r1, #80	; 0x50
 80073e2:	4618      	mov	r0, r3
 80073e4:	f000 fc61 	bl	8007caa <TIM_ITRx_SetConfig>
      break;
 80073e8:	e02c      	b.n	8007444 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6818      	ldr	r0, [r3, #0]
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	6859      	ldr	r1, [r3, #4]
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	68db      	ldr	r3, [r3, #12]
 80073f6:	461a      	mov	r2, r3
 80073f8:	f000 fc27 	bl	8007c4a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	2160      	movs	r1, #96	; 0x60
 8007402:	4618      	mov	r0, r3
 8007404:	f000 fc51 	bl	8007caa <TIM_ITRx_SetConfig>
      break;
 8007408:	e01c      	b.n	8007444 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6818      	ldr	r0, [r3, #0]
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	6859      	ldr	r1, [r3, #4]
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	68db      	ldr	r3, [r3, #12]
 8007416:	461a      	mov	r2, r3
 8007418:	f000 fbe8 	bl	8007bec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	2140      	movs	r1, #64	; 0x40
 8007422:	4618      	mov	r0, r3
 8007424:	f000 fc41 	bl	8007caa <TIM_ITRx_SetConfig>
      break;
 8007428:	e00c      	b.n	8007444 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681a      	ldr	r2, [r3, #0]
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4619      	mov	r1, r3
 8007434:	4610      	mov	r0, r2
 8007436:	f000 fc38 	bl	8007caa <TIM_ITRx_SetConfig>
      break;
 800743a:	e003      	b.n	8007444 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800743c:	2301      	movs	r3, #1
 800743e:	73fb      	strb	r3, [r7, #15]
      break;
 8007440:	e000      	b.n	8007444 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007442:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2201      	movs	r2, #1
 8007448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2200      	movs	r2, #0
 8007450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007454:	7bfb      	ldrb	r3, [r7, #15]
}
 8007456:	4618      	mov	r0, r3
 8007458:	3710      	adds	r7, #16
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}

0800745e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800745e:	b480      	push	{r7}
 8007460:	b083      	sub	sp, #12
 8007462:	af00      	add	r7, sp, #0
 8007464:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8007466:	bf00      	nop
 8007468:	370c      	adds	r7, #12
 800746a:	46bd      	mov	sp, r7
 800746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007470:	4770      	bx	lr

08007472 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8007472:	b480      	push	{r7}
 8007474:	b083      	sub	sp, #12
 8007476:	af00      	add	r7, sp, #0
 8007478:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800747a:	bf00      	nop
 800747c:	370c      	adds	r7, #12
 800747e:	46bd      	mov	sp, r7
 8007480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007484:	4770      	bx	lr

08007486 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8007486:	b580      	push	{r7, lr}
 8007488:	b084      	sub	sp, #16
 800748a:	af00      	add	r7, sp, #0
 800748c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007492:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007498:	687a      	ldr	r2, [r7, #4]
 800749a:	429a      	cmp	r2, r3
 800749c:	d107      	bne.n	80074ae <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2201      	movs	r2, #1
 80074a2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2201      	movs	r2, #1
 80074a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80074ac:	e02a      	b.n	8007504 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074b2:	687a      	ldr	r2, [r7, #4]
 80074b4:	429a      	cmp	r2, r3
 80074b6:	d107      	bne.n	80074c8 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2202      	movs	r2, #2
 80074bc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2201      	movs	r2, #1
 80074c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80074c6:	e01d      	b.n	8007504 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074cc:	687a      	ldr	r2, [r7, #4]
 80074ce:	429a      	cmp	r2, r3
 80074d0:	d107      	bne.n	80074e2 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2204      	movs	r2, #4
 80074d6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2201      	movs	r2, #1
 80074dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80074e0:	e010      	b.n	8007504 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	429a      	cmp	r2, r3
 80074ea:	d107      	bne.n	80074fc <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2208      	movs	r2, #8
 80074f0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2201      	movs	r2, #1
 80074f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80074fa:	e003      	b.n	8007504 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2201      	movs	r2, #1
 8007500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8007504:	68f8      	ldr	r0, [r7, #12]
 8007506:	f7ff ffb4 	bl	8007472 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	2200      	movs	r2, #0
 800750e:	771a      	strb	r2, [r3, #28]
}
 8007510:	bf00      	nop
 8007512:	3710      	adds	r7, #16
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}

08007518 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b084      	sub	sp, #16
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007524:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800752a:	687a      	ldr	r2, [r7, #4]
 800752c:	429a      	cmp	r2, r3
 800752e:	d10b      	bne.n	8007548 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2201      	movs	r2, #1
 8007534:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	69db      	ldr	r3, [r3, #28]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d136      	bne.n	80075ac <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2201      	movs	r2, #1
 8007542:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007546:	e031      	b.n	80075ac <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800754c:	687a      	ldr	r2, [r7, #4]
 800754e:	429a      	cmp	r2, r3
 8007550:	d10b      	bne.n	800756a <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	2202      	movs	r2, #2
 8007556:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	69db      	ldr	r3, [r3, #28]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d125      	bne.n	80075ac <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2201      	movs	r2, #1
 8007564:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007568:	e020      	b.n	80075ac <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800756e:	687a      	ldr	r2, [r7, #4]
 8007570:	429a      	cmp	r2, r3
 8007572:	d10b      	bne.n	800758c <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2204      	movs	r2, #4
 8007578:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	69db      	ldr	r3, [r3, #28]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d114      	bne.n	80075ac <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2201      	movs	r2, #1
 8007586:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800758a:	e00f      	b.n	80075ac <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	429a      	cmp	r2, r3
 8007594:	d10a      	bne.n	80075ac <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2208      	movs	r2, #8
 800759a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	69db      	ldr	r3, [r3, #28]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d103      	bne.n	80075ac <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2201      	movs	r2, #1
 80075a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075ac:	68f8      	ldr	r0, [r7, #12]
 80075ae:	f001 fabf 	bl	8008b30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2200      	movs	r2, #0
 80075b6:	771a      	strb	r2, [r3, #28]
}
 80075b8:	bf00      	nop
 80075ba:	3710      	adds	r7, #16
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}

080075c0 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b084      	sub	sp, #16
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075cc:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d2:	687a      	ldr	r2, [r7, #4]
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d103      	bne.n	80075e0 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2201      	movs	r2, #1
 80075dc:	771a      	strb	r2, [r3, #28]
 80075de:	e019      	b.n	8007614 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075e4:	687a      	ldr	r2, [r7, #4]
 80075e6:	429a      	cmp	r2, r3
 80075e8:	d103      	bne.n	80075f2 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2202      	movs	r2, #2
 80075ee:	771a      	strb	r2, [r3, #28]
 80075f0:	e010      	b.n	8007614 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075f6:	687a      	ldr	r2, [r7, #4]
 80075f8:	429a      	cmp	r2, r3
 80075fa:	d103      	bne.n	8007604 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2204      	movs	r2, #4
 8007600:	771a      	strb	r2, [r3, #28]
 8007602:	e007      	b.n	8007614 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007608:	687a      	ldr	r2, [r7, #4]
 800760a:	429a      	cmp	r2, r3
 800760c:	d102      	bne.n	8007614 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2208      	movs	r2, #8
 8007612:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8007614:	68f8      	ldr	r0, [r7, #12]
 8007616:	f7ff ff22 	bl	800745e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2200      	movs	r2, #0
 800761e:	771a      	strb	r2, [r3, #28]
}
 8007620:	bf00      	nop
 8007622:	3710      	adds	r7, #16
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}

08007628 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007628:	b480      	push	{r7}
 800762a:	b085      	sub	sp, #20
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	4a2a      	ldr	r2, [pc, #168]	; (80076e4 <TIM_Base_SetConfig+0xbc>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d003      	beq.n	8007648 <TIM_Base_SetConfig+0x20>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007646:	d108      	bne.n	800765a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800764e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	68fa      	ldr	r2, [r7, #12]
 8007656:	4313      	orrs	r3, r2
 8007658:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	4a21      	ldr	r2, [pc, #132]	; (80076e4 <TIM_Base_SetConfig+0xbc>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d00b      	beq.n	800767a <TIM_Base_SetConfig+0x52>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007668:	d007      	beq.n	800767a <TIM_Base_SetConfig+0x52>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	4a1e      	ldr	r2, [pc, #120]	; (80076e8 <TIM_Base_SetConfig+0xc0>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d003      	beq.n	800767a <TIM_Base_SetConfig+0x52>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	4a1d      	ldr	r2, [pc, #116]	; (80076ec <TIM_Base_SetConfig+0xc4>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d108      	bne.n	800768c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007680:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	68db      	ldr	r3, [r3, #12]
 8007686:	68fa      	ldr	r2, [r7, #12]
 8007688:	4313      	orrs	r3, r2
 800768a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	695b      	ldr	r3, [r3, #20]
 8007696:	4313      	orrs	r3, r2
 8007698:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	68fa      	ldr	r2, [r7, #12]
 800769e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	689a      	ldr	r2, [r3, #8]
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	681a      	ldr	r2, [r3, #0]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	4a0c      	ldr	r2, [pc, #48]	; (80076e4 <TIM_Base_SetConfig+0xbc>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d007      	beq.n	80076c8 <TIM_Base_SetConfig+0xa0>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	4a0b      	ldr	r2, [pc, #44]	; (80076e8 <TIM_Base_SetConfig+0xc0>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d003      	beq.n	80076c8 <TIM_Base_SetConfig+0xa0>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	4a0a      	ldr	r2, [pc, #40]	; (80076ec <TIM_Base_SetConfig+0xc4>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d103      	bne.n	80076d0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	691a      	ldr	r2, [r3, #16]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2201      	movs	r2, #1
 80076d4:	615a      	str	r2, [r3, #20]
}
 80076d6:	bf00      	nop
 80076d8:	3714      	adds	r7, #20
 80076da:	46bd      	mov	sp, r7
 80076dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e0:	4770      	bx	lr
 80076e2:	bf00      	nop
 80076e4:	40012c00 	.word	0x40012c00
 80076e8:	40014000 	.word	0x40014000
 80076ec:	40014400 	.word	0x40014400

080076f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b087      	sub	sp, #28
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6a1b      	ldr	r3, [r3, #32]
 80076fe:	f023 0201 	bic.w	r2, r3, #1
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6a1b      	ldr	r3, [r3, #32]
 800770a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	699b      	ldr	r3, [r3, #24]
 8007716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800771e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007722:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	f023 0303 	bic.w	r3, r3, #3
 800772a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	68fa      	ldr	r2, [r7, #12]
 8007732:	4313      	orrs	r3, r2
 8007734:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	f023 0302 	bic.w	r3, r3, #2
 800773c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	689b      	ldr	r3, [r3, #8]
 8007742:	697a      	ldr	r2, [r7, #20]
 8007744:	4313      	orrs	r3, r2
 8007746:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	4a24      	ldr	r2, [pc, #144]	; (80077dc <TIM_OC1_SetConfig+0xec>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d007      	beq.n	8007760 <TIM_OC1_SetConfig+0x70>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	4a23      	ldr	r2, [pc, #140]	; (80077e0 <TIM_OC1_SetConfig+0xf0>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d003      	beq.n	8007760 <TIM_OC1_SetConfig+0x70>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	4a22      	ldr	r2, [pc, #136]	; (80077e4 <TIM_OC1_SetConfig+0xf4>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d10c      	bne.n	800777a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	f023 0308 	bic.w	r3, r3, #8
 8007766:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	68db      	ldr	r3, [r3, #12]
 800776c:	697a      	ldr	r2, [r7, #20]
 800776e:	4313      	orrs	r3, r2
 8007770:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	f023 0304 	bic.w	r3, r3, #4
 8007778:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	4a17      	ldr	r2, [pc, #92]	; (80077dc <TIM_OC1_SetConfig+0xec>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d007      	beq.n	8007792 <TIM_OC1_SetConfig+0xa2>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	4a16      	ldr	r2, [pc, #88]	; (80077e0 <TIM_OC1_SetConfig+0xf0>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d003      	beq.n	8007792 <TIM_OC1_SetConfig+0xa2>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	4a15      	ldr	r2, [pc, #84]	; (80077e4 <TIM_OC1_SetConfig+0xf4>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d111      	bne.n	80077b6 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007798:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80077a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	695b      	ldr	r3, [r3, #20]
 80077a6:	693a      	ldr	r2, [r7, #16]
 80077a8:	4313      	orrs	r3, r2
 80077aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	699b      	ldr	r3, [r3, #24]
 80077b0:	693a      	ldr	r2, [r7, #16]
 80077b2:	4313      	orrs	r3, r2
 80077b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	693a      	ldr	r2, [r7, #16]
 80077ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	68fa      	ldr	r2, [r7, #12]
 80077c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	685a      	ldr	r2, [r3, #4]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	697a      	ldr	r2, [r7, #20]
 80077ce:	621a      	str	r2, [r3, #32]
}
 80077d0:	bf00      	nop
 80077d2:	371c      	adds	r7, #28
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr
 80077dc:	40012c00 	.word	0x40012c00
 80077e0:	40014000 	.word	0x40014000
 80077e4:	40014400 	.word	0x40014400

080077e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b087      	sub	sp, #28
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6a1b      	ldr	r3, [r3, #32]
 80077f6:	f023 0210 	bic.w	r2, r3, #16
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6a1b      	ldr	r3, [r3, #32]
 8007802:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	699b      	ldr	r3, [r3, #24]
 800780e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007816:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800781a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007822:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	021b      	lsls	r3, r3, #8
 800782a:	68fa      	ldr	r2, [r7, #12]
 800782c:	4313      	orrs	r3, r2
 800782e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007830:	697b      	ldr	r3, [r7, #20]
 8007832:	f023 0320 	bic.w	r3, r3, #32
 8007836:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	689b      	ldr	r3, [r3, #8]
 800783c:	011b      	lsls	r3, r3, #4
 800783e:	697a      	ldr	r2, [r7, #20]
 8007840:	4313      	orrs	r3, r2
 8007842:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	4a22      	ldr	r2, [pc, #136]	; (80078d0 <TIM_OC2_SetConfig+0xe8>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d10d      	bne.n	8007868 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007852:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	68db      	ldr	r3, [r3, #12]
 8007858:	011b      	lsls	r3, r3, #4
 800785a:	697a      	ldr	r2, [r7, #20]
 800785c:	4313      	orrs	r3, r2
 800785e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007866:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	4a19      	ldr	r2, [pc, #100]	; (80078d0 <TIM_OC2_SetConfig+0xe8>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d007      	beq.n	8007880 <TIM_OC2_SetConfig+0x98>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	4a18      	ldr	r2, [pc, #96]	; (80078d4 <TIM_OC2_SetConfig+0xec>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d003      	beq.n	8007880 <TIM_OC2_SetConfig+0x98>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	4a17      	ldr	r2, [pc, #92]	; (80078d8 <TIM_OC2_SetConfig+0xf0>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d113      	bne.n	80078a8 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007886:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800788e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	695b      	ldr	r3, [r3, #20]
 8007894:	009b      	lsls	r3, r3, #2
 8007896:	693a      	ldr	r2, [r7, #16]
 8007898:	4313      	orrs	r3, r2
 800789a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	699b      	ldr	r3, [r3, #24]
 80078a0:	009b      	lsls	r3, r3, #2
 80078a2:	693a      	ldr	r2, [r7, #16]
 80078a4:	4313      	orrs	r3, r2
 80078a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	693a      	ldr	r2, [r7, #16]
 80078ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	68fa      	ldr	r2, [r7, #12]
 80078b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	685a      	ldr	r2, [r3, #4]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	697a      	ldr	r2, [r7, #20]
 80078c0:	621a      	str	r2, [r3, #32]
}
 80078c2:	bf00      	nop
 80078c4:	371c      	adds	r7, #28
 80078c6:	46bd      	mov	sp, r7
 80078c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078cc:	4770      	bx	lr
 80078ce:	bf00      	nop
 80078d0:	40012c00 	.word	0x40012c00
 80078d4:	40014000 	.word	0x40014000
 80078d8:	40014400 	.word	0x40014400

080078dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80078dc:	b480      	push	{r7}
 80078de:	b087      	sub	sp, #28
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
 80078e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6a1b      	ldr	r3, [r3, #32]
 80078ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6a1b      	ldr	r3, [r3, #32]
 80078f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	685b      	ldr	r3, [r3, #4]
 80078fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	69db      	ldr	r3, [r3, #28]
 8007902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800790a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800790e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	f023 0303 	bic.w	r3, r3, #3
 8007916:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	68fa      	ldr	r2, [r7, #12]
 800791e:	4313      	orrs	r3, r2
 8007920:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007928:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	689b      	ldr	r3, [r3, #8]
 800792e:	021b      	lsls	r3, r3, #8
 8007930:	697a      	ldr	r2, [r7, #20]
 8007932:	4313      	orrs	r3, r2
 8007934:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	4a21      	ldr	r2, [pc, #132]	; (80079c0 <TIM_OC3_SetConfig+0xe4>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d10d      	bne.n	800795a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007944:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	68db      	ldr	r3, [r3, #12]
 800794a:	021b      	lsls	r3, r3, #8
 800794c:	697a      	ldr	r2, [r7, #20]
 800794e:	4313      	orrs	r3, r2
 8007950:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007958:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	4a18      	ldr	r2, [pc, #96]	; (80079c0 <TIM_OC3_SetConfig+0xe4>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d007      	beq.n	8007972 <TIM_OC3_SetConfig+0x96>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	4a17      	ldr	r2, [pc, #92]	; (80079c4 <TIM_OC3_SetConfig+0xe8>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d003      	beq.n	8007972 <TIM_OC3_SetConfig+0x96>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	4a16      	ldr	r2, [pc, #88]	; (80079c8 <TIM_OC3_SetConfig+0xec>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d113      	bne.n	800799a <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007978:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800797a:	693b      	ldr	r3, [r7, #16]
 800797c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007980:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	695b      	ldr	r3, [r3, #20]
 8007986:	011b      	lsls	r3, r3, #4
 8007988:	693a      	ldr	r2, [r7, #16]
 800798a:	4313      	orrs	r3, r2
 800798c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	699b      	ldr	r3, [r3, #24]
 8007992:	011b      	lsls	r3, r3, #4
 8007994:	693a      	ldr	r2, [r7, #16]
 8007996:	4313      	orrs	r3, r2
 8007998:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	693a      	ldr	r2, [r7, #16]
 800799e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	68fa      	ldr	r2, [r7, #12]
 80079a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	685a      	ldr	r2, [r3, #4]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	697a      	ldr	r2, [r7, #20]
 80079b2:	621a      	str	r2, [r3, #32]
}
 80079b4:	bf00      	nop
 80079b6:	371c      	adds	r7, #28
 80079b8:	46bd      	mov	sp, r7
 80079ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079be:	4770      	bx	lr
 80079c0:	40012c00 	.word	0x40012c00
 80079c4:	40014000 	.word	0x40014000
 80079c8:	40014400 	.word	0x40014400

080079cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b087      	sub	sp, #28
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
 80079d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6a1b      	ldr	r3, [r3, #32]
 80079da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6a1b      	ldr	r3, [r3, #32]
 80079e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	69db      	ldr	r3, [r3, #28]
 80079f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80079fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	021b      	lsls	r3, r3, #8
 8007a0e:	68fa      	ldr	r2, [r7, #12]
 8007a10:	4313      	orrs	r3, r2
 8007a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	689b      	ldr	r3, [r3, #8]
 8007a20:	031b      	lsls	r3, r3, #12
 8007a22:	693a      	ldr	r2, [r7, #16]
 8007a24:	4313      	orrs	r3, r2
 8007a26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	4a14      	ldr	r2, [pc, #80]	; (8007a7c <TIM_OC4_SetConfig+0xb0>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d007      	beq.n	8007a40 <TIM_OC4_SetConfig+0x74>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	4a13      	ldr	r2, [pc, #76]	; (8007a80 <TIM_OC4_SetConfig+0xb4>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d003      	beq.n	8007a40 <TIM_OC4_SetConfig+0x74>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	4a12      	ldr	r2, [pc, #72]	; (8007a84 <TIM_OC4_SetConfig+0xb8>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d109      	bne.n	8007a54 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	695b      	ldr	r3, [r3, #20]
 8007a4c:	019b      	lsls	r3, r3, #6
 8007a4e:	697a      	ldr	r2, [r7, #20]
 8007a50:	4313      	orrs	r3, r2
 8007a52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	697a      	ldr	r2, [r7, #20]
 8007a58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	68fa      	ldr	r2, [r7, #12]
 8007a5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	685a      	ldr	r2, [r3, #4]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	693a      	ldr	r2, [r7, #16]
 8007a6c:	621a      	str	r2, [r3, #32]
}
 8007a6e:	bf00      	nop
 8007a70:	371c      	adds	r7, #28
 8007a72:	46bd      	mov	sp, r7
 8007a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a78:	4770      	bx	lr
 8007a7a:	bf00      	nop
 8007a7c:	40012c00 	.word	0x40012c00
 8007a80:	40014000 	.word	0x40014000
 8007a84:	40014400 	.word	0x40014400

08007a88 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b087      	sub	sp, #28
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
 8007a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6a1b      	ldr	r3, [r3, #32]
 8007a96:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6a1b      	ldr	r3, [r3, #32]
 8007aa2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	685b      	ldr	r3, [r3, #4]
 8007aa8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007aba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	68fa      	ldr	r2, [r7, #12]
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007acc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	689b      	ldr	r3, [r3, #8]
 8007ad2:	041b      	lsls	r3, r3, #16
 8007ad4:	693a      	ldr	r2, [r7, #16]
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	4a13      	ldr	r2, [pc, #76]	; (8007b2c <TIM_OC5_SetConfig+0xa4>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d007      	beq.n	8007af2 <TIM_OC5_SetConfig+0x6a>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	4a12      	ldr	r2, [pc, #72]	; (8007b30 <TIM_OC5_SetConfig+0xa8>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d003      	beq.n	8007af2 <TIM_OC5_SetConfig+0x6a>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	4a11      	ldr	r2, [pc, #68]	; (8007b34 <TIM_OC5_SetConfig+0xac>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d109      	bne.n	8007b06 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007af8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	695b      	ldr	r3, [r3, #20]
 8007afe:	021b      	lsls	r3, r3, #8
 8007b00:	697a      	ldr	r2, [r7, #20]
 8007b02:	4313      	orrs	r3, r2
 8007b04:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	697a      	ldr	r2, [r7, #20]
 8007b0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	68fa      	ldr	r2, [r7, #12]
 8007b10:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	685a      	ldr	r2, [r3, #4]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	693a      	ldr	r2, [r7, #16]
 8007b1e:	621a      	str	r2, [r3, #32]
}
 8007b20:	bf00      	nop
 8007b22:	371c      	adds	r7, #28
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr
 8007b2c:	40012c00 	.word	0x40012c00
 8007b30:	40014000 	.word	0x40014000
 8007b34:	40014400 	.word	0x40014400

08007b38 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b087      	sub	sp, #28
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
 8007b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6a1b      	ldr	r3, [r3, #32]
 8007b46:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6a1b      	ldr	r3, [r3, #32]
 8007b52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	021b      	lsls	r3, r3, #8
 8007b72:	68fa      	ldr	r2, [r7, #12]
 8007b74:	4313      	orrs	r3, r2
 8007b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007b7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	689b      	ldr	r3, [r3, #8]
 8007b84:	051b      	lsls	r3, r3, #20
 8007b86:	693a      	ldr	r2, [r7, #16]
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	4a14      	ldr	r2, [pc, #80]	; (8007be0 <TIM_OC6_SetConfig+0xa8>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d007      	beq.n	8007ba4 <TIM_OC6_SetConfig+0x6c>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	4a13      	ldr	r2, [pc, #76]	; (8007be4 <TIM_OC6_SetConfig+0xac>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d003      	beq.n	8007ba4 <TIM_OC6_SetConfig+0x6c>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	4a12      	ldr	r2, [pc, #72]	; (8007be8 <TIM_OC6_SetConfig+0xb0>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d109      	bne.n	8007bb8 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007baa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	695b      	ldr	r3, [r3, #20]
 8007bb0:	029b      	lsls	r3, r3, #10
 8007bb2:	697a      	ldr	r2, [r7, #20]
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	697a      	ldr	r2, [r7, #20]
 8007bbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	68fa      	ldr	r2, [r7, #12]
 8007bc2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	685a      	ldr	r2, [r3, #4]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	693a      	ldr	r2, [r7, #16]
 8007bd0:	621a      	str	r2, [r3, #32]
}
 8007bd2:	bf00      	nop
 8007bd4:	371c      	adds	r7, #28
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bdc:	4770      	bx	lr
 8007bde:	bf00      	nop
 8007be0:	40012c00 	.word	0x40012c00
 8007be4:	40014000 	.word	0x40014000
 8007be8:	40014400 	.word	0x40014400

08007bec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b087      	sub	sp, #28
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	60f8      	str	r0, [r7, #12]
 8007bf4:	60b9      	str	r1, [r7, #8]
 8007bf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	6a1b      	ldr	r3, [r3, #32]
 8007bfc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	6a1b      	ldr	r3, [r3, #32]
 8007c02:	f023 0201 	bic.w	r2, r3, #1
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	699b      	ldr	r3, [r3, #24]
 8007c0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	011b      	lsls	r3, r3, #4
 8007c1c:	693a      	ldr	r2, [r7, #16]
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	f023 030a 	bic.w	r3, r3, #10
 8007c28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007c2a:	697a      	ldr	r2, [r7, #20]
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	693a      	ldr	r2, [r7, #16]
 8007c36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	697a      	ldr	r2, [r7, #20]
 8007c3c:	621a      	str	r2, [r3, #32]
}
 8007c3e:	bf00      	nop
 8007c40:	371c      	adds	r7, #28
 8007c42:	46bd      	mov	sp, r7
 8007c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c48:	4770      	bx	lr

08007c4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c4a:	b480      	push	{r7}
 8007c4c:	b087      	sub	sp, #28
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	60f8      	str	r0, [r7, #12]
 8007c52:	60b9      	str	r1, [r7, #8]
 8007c54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	6a1b      	ldr	r3, [r3, #32]
 8007c5a:	f023 0210 	bic.w	r2, r3, #16
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	699b      	ldr	r3, [r3, #24]
 8007c66:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	6a1b      	ldr	r3, [r3, #32]
 8007c6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007c74:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	031b      	lsls	r3, r3, #12
 8007c7a:	697a      	ldr	r2, [r7, #20]
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007c86:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	011b      	lsls	r3, r3, #4
 8007c8c:	693a      	ldr	r2, [r7, #16]
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	697a      	ldr	r2, [r7, #20]
 8007c96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	693a      	ldr	r2, [r7, #16]
 8007c9c:	621a      	str	r2, [r3, #32]
}
 8007c9e:	bf00      	nop
 8007ca0:	371c      	adds	r7, #28
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca8:	4770      	bx	lr

08007caa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007caa:	b480      	push	{r7}
 8007cac:	b085      	sub	sp, #20
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	6078      	str	r0, [r7, #4]
 8007cb2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	689b      	ldr	r3, [r3, #8]
 8007cb8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cc0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007cc2:	683a      	ldr	r2, [r7, #0]
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	f043 0307 	orr.w	r3, r3, #7
 8007ccc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	68fa      	ldr	r2, [r7, #12]
 8007cd2:	609a      	str	r2, [r3, #8]
}
 8007cd4:	bf00      	nop
 8007cd6:	3714      	adds	r7, #20
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cde:	4770      	bx	lr

08007ce0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b087      	sub	sp, #28
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	60f8      	str	r0, [r7, #12]
 8007ce8:	60b9      	str	r1, [r7, #8]
 8007cea:	607a      	str	r2, [r7, #4]
 8007cec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	689b      	ldr	r3, [r3, #8]
 8007cf2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007cfa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	021a      	lsls	r2, r3, #8
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	431a      	orrs	r2, r3
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	4313      	orrs	r3, r2
 8007d08:	697a      	ldr	r2, [r7, #20]
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	697a      	ldr	r2, [r7, #20]
 8007d12:	609a      	str	r2, [r3, #8]
}
 8007d14:	bf00      	nop
 8007d16:	371c      	adds	r7, #28
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr

08007d20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b087      	sub	sp, #28
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	60f8      	str	r0, [r7, #12]
 8007d28:	60b9      	str	r1, [r7, #8]
 8007d2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	f003 031f 	and.w	r3, r3, #31
 8007d32:	2201      	movs	r2, #1
 8007d34:	fa02 f303 	lsl.w	r3, r2, r3
 8007d38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	6a1a      	ldr	r2, [r3, #32]
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	43db      	mvns	r3, r3
 8007d42:	401a      	ands	r2, r3
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	6a1a      	ldr	r2, [r3, #32]
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	f003 031f 	and.w	r3, r3, #31
 8007d52:	6879      	ldr	r1, [r7, #4]
 8007d54:	fa01 f303 	lsl.w	r3, r1, r3
 8007d58:	431a      	orrs	r2, r3
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	621a      	str	r2, [r3, #32]
}
 8007d5e:	bf00      	nop
 8007d60:	371c      	adds	r7, #28
 8007d62:	46bd      	mov	sp, r7
 8007d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d68:	4770      	bx	lr
	...

08007d6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b085      	sub	sp, #20
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d101      	bne.n	8007d84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007d80:	2302      	movs	r3, #2
 8007d82:	e04f      	b.n	8007e24 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2201      	movs	r2, #1
 8007d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2202      	movs	r2, #2
 8007d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	685b      	ldr	r3, [r3, #4]
 8007d9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	689b      	ldr	r3, [r3, #8]
 8007da2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4a21      	ldr	r2, [pc, #132]	; (8007e30 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d108      	bne.n	8007dc0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007db4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	68fa      	ldr	r2, [r7, #12]
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dc6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	68fa      	ldr	r2, [r7, #12]
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	68fa      	ldr	r2, [r7, #12]
 8007dd8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4a14      	ldr	r2, [pc, #80]	; (8007e30 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d009      	beq.n	8007df8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dec:	d004      	beq.n	8007df8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4a10      	ldr	r2, [pc, #64]	; (8007e34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d10c      	bne.n	8007e12 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007dfe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	689b      	ldr	r3, [r3, #8]
 8007e04:	68ba      	ldr	r2, [r7, #8]
 8007e06:	4313      	orrs	r3, r2
 8007e08:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	68ba      	ldr	r2, [r7, #8]
 8007e10:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2201      	movs	r2, #1
 8007e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e22:	2300      	movs	r3, #0
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3714      	adds	r7, #20
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2e:	4770      	bx	lr
 8007e30:	40012c00 	.word	0x40012c00
 8007e34:	40014000 	.word	0x40014000

08007e38 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b085      	sub	sp, #20
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007e42:	2300      	movs	r3, #0
 8007e44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	d101      	bne.n	8007e54 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007e50:	2302      	movs	r3, #2
 8007e52:	e060      	b.n	8007f16 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2201      	movs	r2, #1
 8007e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	68db      	ldr	r3, [r3, #12]
 8007e66:	4313      	orrs	r3, r2
 8007e68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	689b      	ldr	r3, [r3, #8]
 8007e74:	4313      	orrs	r3, r2
 8007e76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	685b      	ldr	r3, [r3, #4]
 8007e82:	4313      	orrs	r3, r2
 8007e84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4313      	orrs	r3, r2
 8007e92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	691b      	ldr	r3, [r3, #16]
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	695b      	ldr	r3, [r3, #20]
 8007eac:	4313      	orrs	r3, r2
 8007eae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eba:	4313      	orrs	r3, r2
 8007ebc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	699b      	ldr	r3, [r3, #24]
 8007ec8:	041b      	lsls	r3, r3, #16
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	4a14      	ldr	r2, [pc, #80]	; (8007f24 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d115      	bne.n	8007f04 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee2:	051b      	lsls	r3, r3, #20
 8007ee4:	4313      	orrs	r3, r2
 8007ee6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	69db      	ldr	r3, [r3, #28]
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	6a1b      	ldr	r3, [r3, #32]
 8007f00:	4313      	orrs	r3, r2
 8007f02:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	68fa      	ldr	r2, [r7, #12]
 8007f0a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f14:	2300      	movs	r3, #0
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3714      	adds	r7, #20
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f20:	4770      	bx	lr
 8007f22:	bf00      	nop
 8007f24:	40012c00 	.word	0x40012c00

08007f28 <board_init>:
static void MX_TIM1_Init(void);
static void MX_TIM15_Init(void);
static void MX_TIM16_Init(void);

void board_init(void)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	af00      	add	r7, sp, #0
    srand(time(0));
 8007f2c:	2000      	movs	r0, #0
 8007f2e:	f001 f8d3 	bl	80090d8 <time>
 8007f32:	4602      	mov	r2, r0
 8007f34:	460b      	mov	r3, r1
 8007f36:	4613      	mov	r3, r2
 8007f38:	4618      	mov	r0, r3
 8007f3a:	f001 f84f 	bl	8008fdc <srand>
    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8007f3e:	f7fc fcc5 	bl	80048cc <HAL_Init>
    /* Configure the system clock */
    SystemClock_Config();
 8007f42:	f000 f851 	bl	8007fe8 <SystemClock_Config>
    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8007f46:	f000 fa8d 	bl	8008464 <MX_GPIO_Init>
    MX_DMA_Init();
 8007f4a:	f000 fa4d 	bl	80083e8 <MX_DMA_Init>
    MX_RTC_Init();
 8007f4e:	f000 f8b5 	bl	80080bc <MX_RTC_Init>
    MX_TIM1_Init();
 8007f52:	f000 f8db 	bl	800810c <MX_TIM1_Init>
    MX_TIM15_Init();
 8007f56:	f000 f99d 	bl	8008294 <MX_TIM15_Init>
    MX_TIM16_Init();
 8007f5a:	f000 fa1f 	bl	800839c <MX_TIM16_Init>

    //HAL_GPIO_WritePin(GPIOB, LEVEL_SHIFTER_EN_Pin, GPIO_PIN_SET);
    HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8007f5e:	2100      	movs	r1, #0
 8007f60:	4812      	ldr	r0, [pc, #72]	; (8007fac <board_init+0x84>)
 8007f62:	f7fe ffb7 	bl	8006ed4 <HAL_TIM_PWM_Stop_DMA>
    HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_2);
 8007f66:	2104      	movs	r1, #4
 8007f68:	4810      	ldr	r0, [pc, #64]	; (8007fac <board_init+0x84>)
 8007f6a:	f7fe ffb3 	bl	8006ed4 <HAL_TIM_PWM_Stop_DMA>
    HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_3);
 8007f6e:	2108      	movs	r1, #8
 8007f70:	480e      	ldr	r0, [pc, #56]	; (8007fac <board_init+0x84>)
 8007f72:	f7fe ffaf 	bl	8006ed4 <HAL_TIM_PWM_Stop_DMA>
    HAL_TIM_PWM_Stop_DMA(&htim15, TIM_CHANNEL_1);
 8007f76:	2100      	movs	r1, #0
 8007f78:	480d      	ldr	r0, [pc, #52]	; (8007fb0 <board_init+0x88>)
 8007f7a:	f7fe ffab 	bl	8006ed4 <HAL_TIM_PWM_Stop_DMA>

    ws2812b_init();
 8007f7e:	f7f9 fe93 	bl	8001ca8 <ws2812b_init>
    HAL_GPIO_WritePin(GPIOA, LVL_DIR_CTRL_Pin, GPIO_PIN_RESET);
 8007f82:	2200      	movs	r2, #0
 8007f84:	2140      	movs	r1, #64	; 0x40
 8007f86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007f8a:	f7fd f9c3 	bl	8005314 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, LVL_DIR_CTRL_Pin, GPIO_PIN_SET);
 8007f8e:	2201      	movs	r2, #1
 8007f90:	2140      	movs	r1, #64	; 0x40
 8007f92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007f96:	f7fd f9bd 	bl	8005314 <HAL_GPIO_WritePin>
    reset_ws2812b();
 8007f9a:	f7f9 fccb 	bl	8001934 <reset_ws2812b>


    HAL_GPIO_WritePin(GPIOC, LED_OUT_1_Pin|LED_OUT_2_Pin, GPIO_PIN_SET);
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	210c      	movs	r1, #12
 8007fa2:	4804      	ldr	r0, [pc, #16]	; (8007fb4 <board_init+0x8c>)
 8007fa4:	f7fd f9b6 	bl	8005314 <HAL_GPIO_WritePin>
//    HAL_GPIO_WritePin(GPIOC, LED_OUT_1_Pin|LED_OUT_2_Pin, GPIO_PIN_SET);


    //ws2812b_reset();

}
 8007fa8:	bf00      	nop
 8007faa:	bd80      	pop	{r7, pc}
 8007fac:	20001e7c 	.word	0x20001e7c
 8007fb0:	20001d7c 	.word	0x20001d7c
 8007fb4:	48000800 	.word	0x48000800

08007fb8 <board_init_stop_timer>:

void board_init_stop_timer(void)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8007fbc:	2100      	movs	r1, #0
 8007fbe:	4808      	ldr	r0, [pc, #32]	; (8007fe0 <board_init_stop_timer+0x28>)
 8007fc0:	f7fe ff88 	bl	8006ed4 <HAL_TIM_PWM_Stop_DMA>
    HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_2);
 8007fc4:	2104      	movs	r1, #4
 8007fc6:	4806      	ldr	r0, [pc, #24]	; (8007fe0 <board_init_stop_timer+0x28>)
 8007fc8:	f7fe ff84 	bl	8006ed4 <HAL_TIM_PWM_Stop_DMA>
    HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_3);
 8007fcc:	2108      	movs	r1, #8
 8007fce:	4804      	ldr	r0, [pc, #16]	; (8007fe0 <board_init_stop_timer+0x28>)
 8007fd0:	f7fe ff80 	bl	8006ed4 <HAL_TIM_PWM_Stop_DMA>
    HAL_TIM_PWM_Stop_DMA(&htim15, TIM_CHANNEL_1);
 8007fd4:	2100      	movs	r1, #0
 8007fd6:	4803      	ldr	r0, [pc, #12]	; (8007fe4 <board_init_stop_timer+0x2c>)
 8007fd8:	f7fe ff7c 	bl	8006ed4 <HAL_TIM_PWM_Stop_DMA>
}
 8007fdc:	bf00      	nop
 8007fde:	bd80      	pop	{r7, pc}
 8007fe0:	20001e7c 	.word	0x20001e7c
 8007fe4:	20001d7c 	.word	0x20001d7c

08007fe8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b0ae      	sub	sp, #184	; 0xb8
 8007fec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007fee:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007ff2:	2244      	movs	r2, #68	; 0x44
 8007ff4:	2100      	movs	r1, #0
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f000 ff3e 	bl	8008e78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007ffc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8008000:	2200      	movs	r2, #0
 8008002:	601a      	str	r2, [r3, #0]
 8008004:	605a      	str	r2, [r3, #4]
 8008006:	609a      	str	r2, [r3, #8]
 8008008:	60da      	str	r2, [r3, #12]
 800800a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800800c:	1d3b      	adds	r3, r7, #4
 800800e:	225c      	movs	r2, #92	; 0x5c
 8008010:	2100      	movs	r1, #0
 8008012:	4618      	mov	r0, r3
 8008014:	f000 ff30 	bl	8008e78 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8008018:	f7fd f9b8 	bl	800538c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800801c:	4b26      	ldr	r3, [pc, #152]	; (80080b8 <SystemClock_Config+0xd0>)
 800801e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008022:	4a25      	ldr	r2, [pc, #148]	; (80080b8 <SystemClock_Config+0xd0>)
 8008024:	f023 0318 	bic.w	r3, r3, #24
 8008028:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800802c:	2305      	movs	r3, #5
 800802e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008030:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008034:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8008036:	2301      	movs	r3, #1
 8008038:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800803a:	2300      	movs	r3, #0
 800803c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008040:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8008044:	4618      	mov	r0, r3
 8008046:	f7fd fa85 	bl	8005554 <HAL_RCC_OscConfig>
 800804a:	4603      	mov	r3, r0
 800804c:	2b00      	cmp	r3, #0
 800804e:	d001      	beq.n	8008054 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8008050:	f000 fac6 	bl	80085e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008054:	230f      	movs	r3, #15
 8008056:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8008058:	2302      	movs	r3, #2
 800805a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800805c:	2300      	movs	r3, #0
 800805e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8008060:	2300      	movs	r3, #0
 8008062:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008064:	2300      	movs	r3, #0
 8008066:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8008068:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800806c:	2102      	movs	r1, #2
 800806e:	4618      	mov	r0, r3
 8008070:	f7fd fe82 	bl	8005d78 <HAL_RCC_ClockConfig>
 8008074:	4603      	mov	r3, r0
 8008076:	2b00      	cmp	r3, #0
 8008078:	d001      	beq.n	800807e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800807a:	f000 fab1 	bl	80085e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800807e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008082:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8008084:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008088:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800808a:	1d3b      	adds	r3, r7, #4
 800808c:	4618      	mov	r0, r3
 800808e:	f7fe f85f 	bl	8006150 <HAL_RCCEx_PeriphCLKConfig>
 8008092:	4603      	mov	r3, r0
 8008094:	2b00      	cmp	r3, #0
 8008096:	d001      	beq.n	800809c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8008098:	f000 faa2 	bl	80085e0 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800809c:	f44f 7000 	mov.w	r0, #512	; 0x200
 80080a0:	f7fd fa02 	bl	80054a8 <HAL_PWREx_ControlVoltageScaling>
 80080a4:	4603      	mov	r3, r0
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d001      	beq.n	80080ae <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80080aa:	f000 fa99 	bl	80085e0 <Error_Handler>
  }
}
 80080ae:	bf00      	nop
 80080b0:	37b8      	adds	r7, #184	; 0xb8
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}
 80080b6:	bf00      	nop
 80080b8:	40021000 	.word	0x40021000

080080bc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80080c0:	4b10      	ldr	r3, [pc, #64]	; (8008104 <MX_RTC_Init+0x48>)
 80080c2:	4a11      	ldr	r2, [pc, #68]	; (8008108 <MX_RTC_Init+0x4c>)
 80080c4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80080c6:	4b0f      	ldr	r3, [pc, #60]	; (8008104 <MX_RTC_Init+0x48>)
 80080c8:	2200      	movs	r2, #0
 80080ca:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80080cc:	4b0d      	ldr	r3, [pc, #52]	; (8008104 <MX_RTC_Init+0x48>)
 80080ce:	227f      	movs	r2, #127	; 0x7f
 80080d0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80080d2:	4b0c      	ldr	r3, [pc, #48]	; (8008104 <MX_RTC_Init+0x48>)
 80080d4:	22ff      	movs	r2, #255	; 0xff
 80080d6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80080d8:	4b0a      	ldr	r3, [pc, #40]	; (8008104 <MX_RTC_Init+0x48>)
 80080da:	2200      	movs	r2, #0
 80080dc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80080de:	4b09      	ldr	r3, [pc, #36]	; (8008104 <MX_RTC_Init+0x48>)
 80080e0:	2200      	movs	r2, #0
 80080e2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80080e4:	4b07      	ldr	r3, [pc, #28]	; (8008104 <MX_RTC_Init+0x48>)
 80080e6:	2200      	movs	r2, #0
 80080e8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80080ea:	4b06      	ldr	r3, [pc, #24]	; (8008104 <MX_RTC_Init+0x48>)
 80080ec:	2200      	movs	r2, #0
 80080ee:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80080f0:	4804      	ldr	r0, [pc, #16]	; (8008104 <MX_RTC_Init+0x48>)
 80080f2:	f7fe fb37 	bl	8006764 <HAL_RTC_Init>
 80080f6:	4603      	mov	r3, r0
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d001      	beq.n	8008100 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80080fc:	f000 fa70 	bl	80085e0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8008100:	bf00      	nop
 8008102:	bd80      	pop	{r7, pc}
 8008104:	20001e10 	.word	0x20001e10
 8008108:	40002800 	.word	0x40002800

0800810c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b09a      	sub	sp, #104	; 0x68
 8008110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008112:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008116:	2200      	movs	r2, #0
 8008118:	601a      	str	r2, [r3, #0]
 800811a:	605a      	str	r2, [r3, #4]
 800811c:	609a      	str	r2, [r3, #8]
 800811e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008120:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008124:	2200      	movs	r2, #0
 8008126:	601a      	str	r2, [r3, #0]
 8008128:	605a      	str	r2, [r3, #4]
 800812a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800812c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008130:	2200      	movs	r2, #0
 8008132:	601a      	str	r2, [r3, #0]
 8008134:	605a      	str	r2, [r3, #4]
 8008136:	609a      	str	r2, [r3, #8]
 8008138:	60da      	str	r2, [r3, #12]
 800813a:	611a      	str	r2, [r3, #16]
 800813c:	615a      	str	r2, [r3, #20]
 800813e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8008140:	1d3b      	adds	r3, r7, #4
 8008142:	222c      	movs	r2, #44	; 0x2c
 8008144:	2100      	movs	r1, #0
 8008146:	4618      	mov	r0, r3
 8008148:	f000 fe96 	bl	8008e78 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800814c:	4b4f      	ldr	r3, [pc, #316]	; (800828c <MX_TIM1_Init+0x180>)
 800814e:	4a50      	ldr	r2, [pc, #320]	; (8008290 <MX_TIM1_Init+0x184>)
 8008150:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8008152:	4b4e      	ldr	r3, [pc, #312]	; (800828c <MX_TIM1_Init+0x180>)
 8008154:	2200      	movs	r2, #0
 8008156:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008158:	4b4c      	ldr	r3, [pc, #304]	; (800828c <MX_TIM1_Init+0x180>)
 800815a:	2200      	movs	r2, #0
 800815c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60-1;
 800815e:	4b4b      	ldr	r3, [pc, #300]	; (800828c <MX_TIM1_Init+0x180>)
 8008160:	223b      	movs	r2, #59	; 0x3b
 8008162:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008164:	4b49      	ldr	r3, [pc, #292]	; (800828c <MX_TIM1_Init+0x180>)
 8008166:	2200      	movs	r2, #0
 8008168:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800816a:	4b48      	ldr	r3, [pc, #288]	; (800828c <MX_TIM1_Init+0x180>)
 800816c:	2200      	movs	r2, #0
 800816e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008170:	4b46      	ldr	r3, [pc, #280]	; (800828c <MX_TIM1_Init+0x180>)
 8008172:	2200      	movs	r2, #0
 8008174:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8008176:	4845      	ldr	r0, [pc, #276]	; (800828c <MX_TIM1_Init+0x180>)
 8008178:	f7fe fc06 	bl	8006988 <HAL_TIM_Base_Init>
 800817c:	4603      	mov	r3, r0
 800817e:	2b00      	cmp	r3, #0
 8008180:	d001      	beq.n	8008186 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8008182:	f000 fa2d 	bl	80085e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008186:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800818a:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800818c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008190:	4619      	mov	r1, r3
 8008192:	483e      	ldr	r0, [pc, #248]	; (800828c <MX_TIM1_Init+0x180>)
 8008194:	f7ff f89a 	bl	80072cc <HAL_TIM_ConfigClockSource>
 8008198:	4603      	mov	r3, r0
 800819a:	2b00      	cmp	r3, #0
 800819c:	d001      	beq.n	80081a2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800819e:	f000 fa1f 	bl	80085e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80081a2:	483a      	ldr	r0, [pc, #232]	; (800828c <MX_TIM1_Init+0x180>)
 80081a4:	f7fe fc47 	bl	8006a36 <HAL_TIM_PWM_Init>
 80081a8:	4603      	mov	r3, r0
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d001      	beq.n	80081b2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80081ae:	f000 fa17 	bl	80085e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80081b2:	2300      	movs	r3, #0
 80081b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80081b6:	2300      	movs	r3, #0
 80081b8:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80081ba:	2300      	movs	r3, #0
 80081bc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80081be:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80081c2:	4619      	mov	r1, r3
 80081c4:	4831      	ldr	r0, [pc, #196]	; (800828c <MX_TIM1_Init+0x180>)
 80081c6:	f7ff fdd1 	bl	8007d6c <HAL_TIMEx_MasterConfigSynchronization>
 80081ca:	4603      	mov	r3, r0
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d001      	beq.n	80081d4 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80081d0:	f000 fa06 	bl	80085e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80081d4:	2360      	movs	r3, #96	; 0x60
 80081d6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80081d8:	2300      	movs	r3, #0
 80081da:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80081dc:	2300      	movs	r3, #0
 80081de:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80081e0:	2300      	movs	r3, #0
 80081e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80081e4:	2300      	movs	r3, #0
 80081e6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80081e8:	2300      	movs	r3, #0
 80081ea:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80081ec:	2300      	movs	r3, #0
 80081ee:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80081f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80081f4:	2200      	movs	r2, #0
 80081f6:	4619      	mov	r1, r3
 80081f8:	4824      	ldr	r0, [pc, #144]	; (800828c <MX_TIM1_Init+0x180>)
 80081fa:	f7fe ff53 	bl	80070a4 <HAL_TIM_PWM_ConfigChannel>
 80081fe:	4603      	mov	r3, r0
 8008200:	2b00      	cmp	r3, #0
 8008202:	d001      	beq.n	8008208 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8008204:	f000 f9ec 	bl	80085e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8008208:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800820c:	2204      	movs	r2, #4
 800820e:	4619      	mov	r1, r3
 8008210:	481e      	ldr	r0, [pc, #120]	; (800828c <MX_TIM1_Init+0x180>)
 8008212:	f7fe ff47 	bl	80070a4 <HAL_TIM_PWM_ConfigChannel>
 8008216:	4603      	mov	r3, r0
 8008218:	2b00      	cmp	r3, #0
 800821a:	d001      	beq.n	8008220 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 800821c:	f000 f9e0 	bl	80085e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8008220:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008224:	2208      	movs	r2, #8
 8008226:	4619      	mov	r1, r3
 8008228:	4818      	ldr	r0, [pc, #96]	; (800828c <MX_TIM1_Init+0x180>)
 800822a:	f7fe ff3b 	bl	80070a4 <HAL_TIM_PWM_ConfigChannel>
 800822e:	4603      	mov	r3, r0
 8008230:	2b00      	cmp	r3, #0
 8008232:	d001      	beq.n	8008238 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8008234:	f000 f9d4 	bl	80085e0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8008238:	2300      	movs	r3, #0
 800823a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800823c:	2300      	movs	r3, #0
 800823e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8008240:	2300      	movs	r3, #0
 8008242:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8008244:	2300      	movs	r3, #0
 8008246:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8008248:	2300      	movs	r3, #0
 800824a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800824c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008250:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8008252:	2300      	movs	r3, #0
 8008254:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8008256:	2300      	movs	r3, #0
 8008258:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800825a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800825e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8008260:	2300      	movs	r3, #0
 8008262:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8008264:	2300      	movs	r3, #0
 8008266:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8008268:	1d3b      	adds	r3, r7, #4
 800826a:	4619      	mov	r1, r3
 800826c:	4807      	ldr	r0, [pc, #28]	; (800828c <MX_TIM1_Init+0x180>)
 800826e:	f7ff fde3 	bl	8007e38 <HAL_TIMEx_ConfigBreakDeadTime>
 8008272:	4603      	mov	r3, r0
 8008274:	2b00      	cmp	r3, #0
 8008276:	d001      	beq.n	800827c <MX_TIM1_Init+0x170>
  {
    Error_Handler();
 8008278:	f000 f9b2 	bl	80085e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800827c:	4803      	ldr	r0, [pc, #12]	; (800828c <MX_TIM1_Init+0x180>)
 800827e:	f000 fb93 	bl	80089a8 <HAL_TIM_MspPostInit>

}
 8008282:	bf00      	nop
 8008284:	3768      	adds	r7, #104	; 0x68
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}
 800828a:	bf00      	nop
 800828c:	20001e7c 	.word	0x20001e7c
 8008290:	40012c00 	.word	0x40012c00

08008294 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b096      	sub	sp, #88	; 0x58
 8008298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800829a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800829e:	2200      	movs	r2, #0
 80082a0:	601a      	str	r2, [r3, #0]
 80082a2:	605a      	str	r2, [r3, #4]
 80082a4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80082a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80082aa:	2200      	movs	r2, #0
 80082ac:	601a      	str	r2, [r3, #0]
 80082ae:	605a      	str	r2, [r3, #4]
 80082b0:	609a      	str	r2, [r3, #8]
 80082b2:	60da      	str	r2, [r3, #12]
 80082b4:	611a      	str	r2, [r3, #16]
 80082b6:	615a      	str	r2, [r3, #20]
 80082b8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80082ba:	1d3b      	adds	r3, r7, #4
 80082bc:	222c      	movs	r2, #44	; 0x2c
 80082be:	2100      	movs	r1, #0
 80082c0:	4618      	mov	r0, r3
 80082c2:	f000 fdd9 	bl	8008e78 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80082c6:	4b33      	ldr	r3, [pc, #204]	; (8008394 <MX_TIM15_Init+0x100>)
 80082c8:	4a33      	ldr	r2, [pc, #204]	; (8008398 <MX_TIM15_Init+0x104>)
 80082ca:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80082cc:	4b31      	ldr	r3, [pc, #196]	; (8008394 <MX_TIM15_Init+0x100>)
 80082ce:	2200      	movs	r2, #0
 80082d0:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80082d2:	4b30      	ldr	r3, [pc, #192]	; (8008394 <MX_TIM15_Init+0x100>)
 80082d4:	2200      	movs	r2, #0
 80082d6:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 60-1;
 80082d8:	4b2e      	ldr	r3, [pc, #184]	; (8008394 <MX_TIM15_Init+0x100>)
 80082da:	223b      	movs	r2, #59	; 0x3b
 80082dc:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80082de:	4b2d      	ldr	r3, [pc, #180]	; (8008394 <MX_TIM15_Init+0x100>)
 80082e0:	2200      	movs	r2, #0
 80082e2:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80082e4:	4b2b      	ldr	r3, [pc, #172]	; (8008394 <MX_TIM15_Init+0x100>)
 80082e6:	2200      	movs	r2, #0
 80082e8:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80082ea:	4b2a      	ldr	r3, [pc, #168]	; (8008394 <MX_TIM15_Init+0x100>)
 80082ec:	2200      	movs	r2, #0
 80082ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80082f0:	4828      	ldr	r0, [pc, #160]	; (8008394 <MX_TIM15_Init+0x100>)
 80082f2:	f7fe fba0 	bl	8006a36 <HAL_TIM_PWM_Init>
 80082f6:	4603      	mov	r3, r0
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d001      	beq.n	8008300 <MX_TIM15_Init+0x6c>
  {
    Error_Handler();
 80082fc:	f000 f970 	bl	80085e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008300:	2300      	movs	r3, #0
 8008302:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008304:	2300      	movs	r3, #0
 8008306:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8008308:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800830c:	4619      	mov	r1, r3
 800830e:	4821      	ldr	r0, [pc, #132]	; (8008394 <MX_TIM15_Init+0x100>)
 8008310:	f7ff fd2c 	bl	8007d6c <HAL_TIMEx_MasterConfigSynchronization>
 8008314:	4603      	mov	r3, r0
 8008316:	2b00      	cmp	r3, #0
 8008318:	d001      	beq.n	800831e <MX_TIM15_Init+0x8a>
  {
    Error_Handler();
 800831a:	f000 f961 	bl	80085e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800831e:	2360      	movs	r3, #96	; 0x60
 8008320:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8008322:	2300      	movs	r3, #0
 8008324:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008326:	2300      	movs	r3, #0
 8008328:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800832a:	2300      	movs	r3, #0
 800832c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800832e:	2300      	movs	r3, #0
 8008330:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8008332:	2300      	movs	r3, #0
 8008334:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8008336:	2300      	movs	r3, #0
 8008338:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800833a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800833e:	2200      	movs	r2, #0
 8008340:	4619      	mov	r1, r3
 8008342:	4814      	ldr	r0, [pc, #80]	; (8008394 <MX_TIM15_Init+0x100>)
 8008344:	f7fe feae 	bl	80070a4 <HAL_TIM_PWM_ConfigChannel>
 8008348:	4603      	mov	r3, r0
 800834a:	2b00      	cmp	r3, #0
 800834c:	d001      	beq.n	8008352 <MX_TIM15_Init+0xbe>
  {
    Error_Handler();
 800834e:	f000 f947 	bl	80085e0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8008352:	2300      	movs	r3, #0
 8008354:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8008356:	2300      	movs	r3, #0
 8008358:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800835a:	2300      	movs	r3, #0
 800835c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800835e:	2300      	movs	r3, #0
 8008360:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8008362:	2300      	movs	r3, #0
 8008364:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8008366:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800836a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800836c:	2300      	movs	r3, #0
 800836e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8008370:	1d3b      	adds	r3, r7, #4
 8008372:	4619      	mov	r1, r3
 8008374:	4807      	ldr	r0, [pc, #28]	; (8008394 <MX_TIM15_Init+0x100>)
 8008376:	f7ff fd5f 	bl	8007e38 <HAL_TIMEx_ConfigBreakDeadTime>
 800837a:	4603      	mov	r3, r0
 800837c:	2b00      	cmp	r3, #0
 800837e:	d001      	beq.n	8008384 <MX_TIM15_Init+0xf0>
  {
    Error_Handler();
 8008380:	f000 f92e 	bl	80085e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8008384:	4803      	ldr	r0, [pc, #12]	; (8008394 <MX_TIM15_Init+0x100>)
 8008386:	f000 fb0f 	bl	80089a8 <HAL_TIM_MspPostInit>

}
 800838a:	bf00      	nop
 800838c:	3758      	adds	r7, #88	; 0x58
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}
 8008392:	bf00      	nop
 8008394:	20001d7c 	.word	0x20001d7c
 8008398:	40014000 	.word	0x40014000

0800839c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80083a0:	4b0f      	ldr	r3, [pc, #60]	; (80083e0 <MX_TIM16_Init+0x44>)
 80083a2:	4a10      	ldr	r2, [pc, #64]	; (80083e4 <MX_TIM16_Init+0x48>)
 80083a4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80083a6:	4b0e      	ldr	r3, [pc, #56]	; (80083e0 <MX_TIM16_Init+0x44>)
 80083a8:	2200      	movs	r2, #0
 80083aa:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80083ac:	4b0c      	ldr	r3, [pc, #48]	; (80083e0 <MX_TIM16_Init+0x44>)
 80083ae:	2200      	movs	r2, #0
 80083b0:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 60-1;
 80083b2:	4b0b      	ldr	r3, [pc, #44]	; (80083e0 <MX_TIM16_Init+0x44>)
 80083b4:	223b      	movs	r2, #59	; 0x3b
 80083b6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80083b8:	4b09      	ldr	r3, [pc, #36]	; (80083e0 <MX_TIM16_Init+0x44>)
 80083ba:	2200      	movs	r2, #0
 80083bc:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80083be:	4b08      	ldr	r3, [pc, #32]	; (80083e0 <MX_TIM16_Init+0x44>)
 80083c0:	2200      	movs	r2, #0
 80083c2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80083c4:	4b06      	ldr	r3, [pc, #24]	; (80083e0 <MX_TIM16_Init+0x44>)
 80083c6:	2200      	movs	r2, #0
 80083c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80083ca:	4805      	ldr	r0, [pc, #20]	; (80083e0 <MX_TIM16_Init+0x44>)
 80083cc:	f7fe fadc 	bl	8006988 <HAL_TIM_Base_Init>
 80083d0:	4603      	mov	r3, r0
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d001      	beq.n	80083da <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 80083d6:	f000 f903 	bl	80085e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80083da:	bf00      	nop
 80083dc:	bd80      	pop	{r7, pc}
 80083de:	bf00      	nop
 80083e0:	20001ec8 	.word	0x20001ec8
 80083e4:	40014400 	.word	0x40014400

080083e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b082      	sub	sp, #8
 80083ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80083ee:	4b1c      	ldr	r3, [pc, #112]	; (8008460 <MX_DMA_Init+0x78>)
 80083f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083f2:	4a1b      	ldr	r2, [pc, #108]	; (8008460 <MX_DMA_Init+0x78>)
 80083f4:	f043 0301 	orr.w	r3, r3, #1
 80083f8:	6493      	str	r3, [r2, #72]	; 0x48
 80083fa:	4b19      	ldr	r3, [pc, #100]	; (8008460 <MX_DMA_Init+0x78>)
 80083fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083fe:	f003 0301 	and.w	r3, r3, #1
 8008402:	607b      	str	r3, [r7, #4]
 8008404:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8008406:	2200      	movs	r2, #0
 8008408:	2100      	movs	r1, #0
 800840a:	200c      	movs	r0, #12
 800840c:	f7fc fb99 	bl	8004b42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8008410:	200c      	movs	r0, #12
 8008412:	f7fc fbb2 	bl	8004b7a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8008416:	2200      	movs	r2, #0
 8008418:	2100      	movs	r1, #0
 800841a:	200d      	movs	r0, #13
 800841c:	f7fc fb91 	bl	8004b42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8008420:	200d      	movs	r0, #13
 8008422:	f7fc fbaa 	bl	8004b7a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8008426:	2200      	movs	r2, #0
 8008428:	2100      	movs	r1, #0
 800842a:	200f      	movs	r0, #15
 800842c:	f7fc fb89 	bl	8004b42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8008430:	200f      	movs	r0, #15
 8008432:	f7fc fba2 	bl	8004b7a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8008436:	2200      	movs	r2, #0
 8008438:	2100      	movs	r1, #0
 800843a:	2010      	movs	r0, #16
 800843c:	f7fc fb81 	bl	8004b42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8008440:	2010      	movs	r0, #16
 8008442:	f7fc fb9a 	bl	8004b7a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8008446:	2200      	movs	r2, #0
 8008448:	2100      	movs	r1, #0
 800844a:	2011      	movs	r0, #17
 800844c:	f7fc fb79 	bl	8004b42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8008450:	2011      	movs	r0, #17
 8008452:	f7fc fb92 	bl	8004b7a <HAL_NVIC_EnableIRQ>

}
 8008456:	bf00      	nop
 8008458:	3708      	adds	r7, #8
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}
 800845e:	bf00      	nop
 8008460:	40021000 	.word	0x40021000

08008464 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b08a      	sub	sp, #40	; 0x28
 8008468:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800846a:	f107 0314 	add.w	r3, r7, #20
 800846e:	2200      	movs	r2, #0
 8008470:	601a      	str	r2, [r3, #0]
 8008472:	605a      	str	r2, [r3, #4]
 8008474:	609a      	str	r2, [r3, #8]
 8008476:	60da      	str	r2, [r3, #12]
 8008478:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800847a:	4b56      	ldr	r3, [pc, #344]	; (80085d4 <MX_GPIO_Init+0x170>)
 800847c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800847e:	4a55      	ldr	r2, [pc, #340]	; (80085d4 <MX_GPIO_Init+0x170>)
 8008480:	f043 0304 	orr.w	r3, r3, #4
 8008484:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008486:	4b53      	ldr	r3, [pc, #332]	; (80085d4 <MX_GPIO_Init+0x170>)
 8008488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800848a:	f003 0304 	and.w	r3, r3, #4
 800848e:	613b      	str	r3, [r7, #16]
 8008490:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8008492:	4b50      	ldr	r3, [pc, #320]	; (80085d4 <MX_GPIO_Init+0x170>)
 8008494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008496:	4a4f      	ldr	r2, [pc, #316]	; (80085d4 <MX_GPIO_Init+0x170>)
 8008498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800849c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800849e:	4b4d      	ldr	r3, [pc, #308]	; (80085d4 <MX_GPIO_Init+0x170>)
 80084a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084a6:	60fb      	str	r3, [r7, #12]
 80084a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80084aa:	4b4a      	ldr	r3, [pc, #296]	; (80085d4 <MX_GPIO_Init+0x170>)
 80084ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084ae:	4a49      	ldr	r2, [pc, #292]	; (80085d4 <MX_GPIO_Init+0x170>)
 80084b0:	f043 0301 	orr.w	r3, r3, #1
 80084b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80084b6:	4b47      	ldr	r3, [pc, #284]	; (80085d4 <MX_GPIO_Init+0x170>)
 80084b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084ba:	f003 0301 	and.w	r3, r3, #1
 80084be:	60bb      	str	r3, [r7, #8]
 80084c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80084c2:	4b44      	ldr	r3, [pc, #272]	; (80085d4 <MX_GPIO_Init+0x170>)
 80084c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084c6:	4a43      	ldr	r2, [pc, #268]	; (80085d4 <MX_GPIO_Init+0x170>)
 80084c8:	f043 0302 	orr.w	r3, r3, #2
 80084cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80084ce:	4b41      	ldr	r3, [pc, #260]	; (80085d4 <MX_GPIO_Init+0x170>)
 80084d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084d2:	f003 0302 	and.w	r3, r3, #2
 80084d6:	607b      	str	r3, [r7, #4]
 80084d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_2_Pin|GPIO_3_Pin|LED_OUT_1_Pin|LED_OUT_2_Pin, GPIO_PIN_RESET);
 80084da:	2200      	movs	r2, #0
 80084dc:	210f      	movs	r1, #15
 80084de:	483e      	ldr	r0, [pc, #248]	; (80085d8 <MX_GPIO_Init+0x174>)
 80084e0:	f7fc ff18 	bl	8005314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LVL_DIR_CTRL_GPIO_Port, LVL_DIR_CTRL_Pin, GPIO_PIN_RESET);
 80084e4:	2200      	movs	r2, #0
 80084e6:	2140      	movs	r1, #64	; 0x40
 80084e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80084ec:	f7fc ff12 	bl	8005314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_0_GPIO_Port, GPIO_0_Pin, GPIO_PIN_RESET);
 80084f0:	2200      	movs	r2, #0
 80084f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80084f6:	4839      	ldr	r0, [pc, #228]	; (80085dc <MX_GPIO_Init+0x178>)
 80084f8:	f7fc ff0c 	bl	8005314 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_5;
 80084fc:	f242 0320 	movw	r3, #8224	; 0x2020
 8008500:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8008502:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8008506:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008508:	2300      	movs	r3, #0
 800850a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800850c:	f107 0314 	add.w	r3, r7, #20
 8008510:	4619      	mov	r1, r3
 8008512:	4831      	ldr	r0, [pc, #196]	; (80085d8 <MX_GPIO_Init+0x174>)
 8008514:	f7fc fd84 	bl	8005020 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_2_Pin GPIO_3_Pin LED_OUT_1_Pin LED_OUT_2_Pin */
  GPIO_InitStruct.Pin = GPIO_2_Pin|GPIO_3_Pin|LED_OUT_1_Pin|LED_OUT_2_Pin;
 8008518:	230f      	movs	r3, #15
 800851a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800851c:	2301      	movs	r3, #1
 800851e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008520:	2300      	movs	r3, #0
 8008522:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008524:	2300      	movs	r3, #0
 8008526:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008528:	f107 0314 	add.w	r3, r7, #20
 800852c:	4619      	mov	r1, r3
 800852e:	482a      	ldr	r0, [pc, #168]	; (80085d8 <MX_GPIO_Init+0x174>)
 8008530:	f7fc fd76 	bl	8005020 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8008534:	2305      	movs	r3, #5
 8008536:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8008538:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800853c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800853e:	2300      	movs	r3, #0
 8008540:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008542:	f107 0314 	add.w	r3, r7, #20
 8008546:	4619      	mov	r1, r3
 8008548:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800854c:	f7fc fd68 	bl	8005020 <HAL_GPIO_Init>

  /*Configure GPIO pin : LVL_DIR_CTRL_Pin */
  GPIO_InitStruct.Pin = LVL_DIR_CTRL_Pin;
 8008550:	2340      	movs	r3, #64	; 0x40
 8008552:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008554:	2301      	movs	r3, #1
 8008556:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008558:	2300      	movs	r3, #0
 800855a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800855c:	2300      	movs	r3, #0
 800855e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LVL_DIR_CTRL_GPIO_Port, &GPIO_InitStruct);
 8008560:	f107 0314 	add.w	r3, r7, #20
 8008564:	4619      	mov	r1, r3
 8008566:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800856a:	f7fc fd59 	bl	8005020 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_0_Pin */
  GPIO_InitStruct.Pin = GPIO_0_Pin;
 800856e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008572:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008574:	2301      	movs	r3, #1
 8008576:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008578:	2300      	movs	r3, #0
 800857a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800857c:	2300      	movs	r3, #0
 800857e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIO_0_GPIO_Port, &GPIO_InitStruct);
 8008580:	f107 0314 	add.w	r3, r7, #20
 8008584:	4619      	mov	r1, r3
 8008586:	4815      	ldr	r0, [pc, #84]	; (80085dc <MX_GPIO_Init+0x178>)
 8008588:	f7fc fd4a 	bl	8005020 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800858c:	2200      	movs	r2, #0
 800858e:	2100      	movs	r1, #0
 8008590:	2006      	movs	r0, #6
 8008592:	f7fc fad6 	bl	8004b42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8008596:	2006      	movs	r0, #6
 8008598:	f7fc faef 	bl	8004b7a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800859c:	2200      	movs	r2, #0
 800859e:	2100      	movs	r1, #0
 80085a0:	2008      	movs	r0, #8
 80085a2:	f7fc face 	bl	8004b42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80085a6:	2008      	movs	r0, #8
 80085a8:	f7fc fae7 	bl	8004b7a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80085ac:	2200      	movs	r2, #0
 80085ae:	2100      	movs	r1, #0
 80085b0:	2017      	movs	r0, #23
 80085b2:	f7fc fac6 	bl	8004b42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80085b6:	2017      	movs	r0, #23
 80085b8:	f7fc fadf 	bl	8004b7a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80085bc:	2200      	movs	r2, #0
 80085be:	2100      	movs	r1, #0
 80085c0:	2028      	movs	r0, #40	; 0x28
 80085c2:	f7fc fabe 	bl	8004b42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80085c6:	2028      	movs	r0, #40	; 0x28
 80085c8:	f7fc fad7 	bl	8004b7a <HAL_NVIC_EnableIRQ>

}
 80085cc:	bf00      	nop
 80085ce:	3728      	adds	r7, #40	; 0x28
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}
 80085d4:	40021000 	.word	0x40021000
 80085d8:	48000800 	.word	0x48000800
 80085dc:	48000400 	.word	0x48000400

080085e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80085e0:	b480      	push	{r7}
 80085e2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80085e4:	b672      	cpsid	i
}
 80085e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80085e8:	e7fe      	b.n	80085e8 <Error_Handler+0x8>

080085ea <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80085ea:	b580      	push	{r7, lr}
 80085ec:	af00      	add	r7, sp, #0
    board_init();
 80085ee:	f7ff fc9b 	bl	8007f28 <board_init>
    reset_ws2812b();
 80085f2:	f7f9 f99f 	bl	8001934 <reset_ws2812b>
	task_create();
 80085f6:	f000 f81d 	bl	8008634 <task_create>
	osKernelStart();
 80085fa:	f7f9 fc39 	bl	8001e70 <osKernelStart>
 80085fe:	2300      	movs	r3, #0
}
 8008600:	4618      	mov	r0, r3
 8008602:	bd80      	pop	{r7, pc}

08008604 <random_num>:
#include <stdint.h>
#include <stdlib.h>
#include "numbers.h"

uint32_t random_num(uint32_t min, uint32_t max)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b082      	sub	sp, #8
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
 800860c:	6039      	str	r1, [r7, #0]
   return min + rand() % (max + 1 - min);
 800860e:	f000 fd13 	bl	8009038 <rand>
 8008612:	4603      	mov	r3, r0
 8008614:	461a      	mov	r2, r3
 8008616:	6839      	ldr	r1, [r7, #0]
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	1acb      	subs	r3, r1, r3
 800861c:	3301      	adds	r3, #1
 800861e:	fbb2 f1f3 	udiv	r1, r2, r3
 8008622:	fb03 f301 	mul.w	r3, r3, r1
 8008626:	1ad2      	subs	r2, r2, r3
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	4413      	add	r3, r2
}
 800862c:	4618      	mov	r0, r3
 800862e:	3708      	adds	r7, #8
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}

08008634 <task_create>:
	.priority = (osPriority_t) osPriorityNormal,
};


void task_create(void)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	af00      	add	r7, sp, #0
    osKernelInitialize();
 8008638:	f7f9 fbf6 	bl	8001e28 <osKernelInitialize>
	//g_dma_transfer_handle = osThreadNew(task_dma_transfer, NULL, &g_task_dma_transfer_attributes);
	g_animate_led_handle = osThreadNew(task_animate_led, NULL, &g_task_animate_led_attributes);
 800863c:	4a04      	ldr	r2, [pc, #16]	; (8008650 <task_create+0x1c>)
 800863e:	2100      	movs	r1, #0
 8008640:	4804      	ldr	r0, [pc, #16]	; (8008654 <task_create+0x20>)
 8008642:	f7f9 fc3b 	bl	8001ebc <osThreadNew>
 8008646:	4603      	mov	r3, r0
 8008648:	4a03      	ldr	r2, [pc, #12]	; (8008658 <task_create+0x24>)
 800864a:	6013      	str	r3, [r2, #0]
}
 800864c:	bf00      	nop
 800864e:	bd80      	pop	{r7, pc}
 8008650:	08009f98 	.word	0x08009f98
 8008654:	080016d5 	.word	0x080016d5
 8008658:	20003018 	.word	0x20003018

0800865c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b084      	sub	sp, #16
 8008660:	af00      	add	r7, sp, #0
  PWR_PVDTypeDef sConfigPVD = {0};
 8008662:	f107 0308 	add.w	r3, r7, #8
 8008666:	2200      	movs	r2, #0
 8008668:	601a      	str	r2, [r3, #0]
 800866a:	605a      	str	r2, [r3, #4]

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800866c:	4b13      	ldr	r3, [pc, #76]	; (80086bc <HAL_MspInit+0x60>)
 800866e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008670:	4a12      	ldr	r2, [pc, #72]	; (80086bc <HAL_MspInit+0x60>)
 8008672:	f043 0301 	orr.w	r3, r3, #1
 8008676:	6613      	str	r3, [r2, #96]	; 0x60
 8008678:	4b10      	ldr	r3, [pc, #64]	; (80086bc <HAL_MspInit+0x60>)
 800867a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800867c:	f003 0301 	and.w	r3, r3, #1
 8008680:	607b      	str	r3, [r7, #4]
 8008682:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008684:	4b0d      	ldr	r3, [pc, #52]	; (80086bc <HAL_MspInit+0x60>)
 8008686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008688:	4a0c      	ldr	r2, [pc, #48]	; (80086bc <HAL_MspInit+0x60>)
 800868a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800868e:	6593      	str	r3, [r2, #88]	; 0x58
 8008690:	4b0a      	ldr	r3, [pc, #40]	; (80086bc <HAL_MspInit+0x60>)
 8008692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008694:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008698:	603b      	str	r3, [r7, #0]
 800869a:	683b      	ldr	r3, [r7, #0]

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 800869c:	2300      	movs	r3, #0
 800869e:	60bb      	str	r3, [r7, #8]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 80086a0:	2300      	movs	r3, #0
 80086a2:	60fb      	str	r3, [r7, #12]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 80086a4:	f107 0308 	add.w	r3, r7, #8
 80086a8:	4618      	mov	r0, r3
 80086aa:	f7fc fe7f 	bl	80053ac <HAL_PWR_ConfigPVD>
  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 80086ae:	f7fc fedd 	bl	800546c <HAL_PWR_EnablePVD>
}
 80086b2:	bf00      	nop
 80086b4:	3710      	adds	r7, #16
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}
 80086ba:	bf00      	nop
 80086bc:	40021000 	.word	0x40021000

080086c0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b083      	sub	sp, #12
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a08      	ldr	r2, [pc, #32]	; (80086f0 <HAL_RTC_MspInit+0x30>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d107      	bne.n	80086e2 <HAL_RTC_MspInit+0x22>
  {
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80086d2:	4b08      	ldr	r3, [pc, #32]	; (80086f4 <HAL_RTC_MspInit+0x34>)
 80086d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086d8:	4a06      	ldr	r2, [pc, #24]	; (80086f4 <HAL_RTC_MspInit+0x34>)
 80086da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

}
 80086e2:	bf00      	nop
 80086e4:	370c      	adds	r7, #12
 80086e6:	46bd      	mov	sp, r7
 80086e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ec:	4770      	bx	lr
 80086ee:	bf00      	nop
 80086f0:	40002800 	.word	0x40002800
 80086f4:	40021000 	.word	0x40021000

080086f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b084      	sub	sp, #16
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4a6d      	ldr	r2, [pc, #436]	; (80088bc <HAL_TIM_Base_MspInit+0x1c4>)
 8008706:	4293      	cmp	r3, r2
 8008708:	f040 8091 	bne.w	800882e <HAL_TIM_Base_MspInit+0x136>
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800870c:	4b6c      	ldr	r3, [pc, #432]	; (80088c0 <HAL_TIM_Base_MspInit+0x1c8>)
 800870e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008710:	4a6b      	ldr	r2, [pc, #428]	; (80088c0 <HAL_TIM_Base_MspInit+0x1c8>)
 8008712:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008716:	6613      	str	r3, [r2, #96]	; 0x60
 8008718:	4b69      	ldr	r3, [pc, #420]	; (80088c0 <HAL_TIM_Base_MspInit+0x1c8>)
 800871a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800871c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008720:	60fb      	str	r3, [r7, #12]
 8008722:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8008724:	4b67      	ldr	r3, [pc, #412]	; (80088c4 <HAL_TIM_Base_MspInit+0x1cc>)
 8008726:	4a68      	ldr	r2, [pc, #416]	; (80088c8 <HAL_TIM_Base_MspInit+0x1d0>)
 8008728:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_7;
 800872a:	4b66      	ldr	r3, [pc, #408]	; (80088c4 <HAL_TIM_Base_MspInit+0x1cc>)
 800872c:	2207      	movs	r2, #7
 800872e:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008730:	4b64      	ldr	r3, [pc, #400]	; (80088c4 <HAL_TIM_Base_MspInit+0x1cc>)
 8008732:	2210      	movs	r2, #16
 8008734:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8008736:	4b63      	ldr	r3, [pc, #396]	; (80088c4 <HAL_TIM_Base_MspInit+0x1cc>)
 8008738:	2200      	movs	r2, #0
 800873a:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800873c:	4b61      	ldr	r3, [pc, #388]	; (80088c4 <HAL_TIM_Base_MspInit+0x1cc>)
 800873e:	2280      	movs	r2, #128	; 0x80
 8008740:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8008742:	4b60      	ldr	r3, [pc, #384]	; (80088c4 <HAL_TIM_Base_MspInit+0x1cc>)
 8008744:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008748:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800874a:	4b5e      	ldr	r3, [pc, #376]	; (80088c4 <HAL_TIM_Base_MspInit+0x1cc>)
 800874c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008750:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8008752:	4b5c      	ldr	r3, [pc, #368]	; (80088c4 <HAL_TIM_Base_MspInit+0x1cc>)
 8008754:	2200      	movs	r2, #0
 8008756:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8008758:	4b5a      	ldr	r3, [pc, #360]	; (80088c4 <HAL_TIM_Base_MspInit+0x1cc>)
 800875a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800875e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8008760:	4858      	ldr	r0, [pc, #352]	; (80088c4 <HAL_TIM_Base_MspInit+0x1cc>)
 8008762:	f7fc fa25 	bl	8004bb0 <HAL_DMA_Init>
 8008766:	4603      	mov	r3, r0
 8008768:	2b00      	cmp	r3, #0
 800876a:	d001      	beq.n	8008770 <HAL_TIM_Base_MspInit+0x78>
    {
      Error_Handler();
 800876c:	f7ff ff38 	bl	80085e0 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	4a54      	ldr	r2, [pc, #336]	; (80088c4 <HAL_TIM_Base_MspInit+0x1cc>)
 8008774:	625a      	str	r2, [r3, #36]	; 0x24
 8008776:	4a53      	ldr	r2, [pc, #332]	; (80088c4 <HAL_TIM_Base_MspInit+0x1cc>)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA1_Channel3;
 800877c:	4b53      	ldr	r3, [pc, #332]	; (80088cc <HAL_TIM_Base_MspInit+0x1d4>)
 800877e:	4a54      	ldr	r2, [pc, #336]	; (80088d0 <HAL_TIM_Base_MspInit+0x1d8>)
 8008780:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Request = DMA_REQUEST_7;
 8008782:	4b52      	ldr	r3, [pc, #328]	; (80088cc <HAL_TIM_Base_MspInit+0x1d4>)
 8008784:	2207      	movs	r2, #7
 8008786:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008788:	4b50      	ldr	r3, [pc, #320]	; (80088cc <HAL_TIM_Base_MspInit+0x1d4>)
 800878a:	2210      	movs	r2, #16
 800878c:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800878e:	4b4f      	ldr	r3, [pc, #316]	; (80088cc <HAL_TIM_Base_MspInit+0x1d4>)
 8008790:	2200      	movs	r2, #0
 8008792:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8008794:	4b4d      	ldr	r3, [pc, #308]	; (80088cc <HAL_TIM_Base_MspInit+0x1d4>)
 8008796:	2280      	movs	r2, #128	; 0x80
 8008798:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800879a:	4b4c      	ldr	r3, [pc, #304]	; (80088cc <HAL_TIM_Base_MspInit+0x1d4>)
 800879c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80087a0:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80087a2:	4b4a      	ldr	r3, [pc, #296]	; (80088cc <HAL_TIM_Base_MspInit+0x1d4>)
 80087a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80087a8:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Mode = DMA_NORMAL;
 80087aa:	4b48      	ldr	r3, [pc, #288]	; (80088cc <HAL_TIM_Base_MspInit+0x1d4>)
 80087ac:	2200      	movs	r2, #0
 80087ae:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80087b0:	4b46      	ldr	r3, [pc, #280]	; (80088cc <HAL_TIM_Base_MspInit+0x1d4>)
 80087b2:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80087b6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 80087b8:	4844      	ldr	r0, [pc, #272]	; (80088cc <HAL_TIM_Base_MspInit+0x1d4>)
 80087ba:	f7fc f9f9 	bl	8004bb0 <HAL_DMA_Init>
 80087be:	4603      	mov	r3, r0
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d001      	beq.n	80087c8 <HAL_TIM_Base_MspInit+0xd0>
    {
      Error_Handler();
 80087c4:	f7ff ff0c 	bl	80085e0 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	4a40      	ldr	r2, [pc, #256]	; (80088cc <HAL_TIM_Base_MspInit+0x1d4>)
 80087cc:	629a      	str	r2, [r3, #40]	; 0x28
 80087ce:	4a3f      	ldr	r2, [pc, #252]	; (80088cc <HAL_TIM_Base_MspInit+0x1d4>)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM1_CH3 Init */
    hdma_tim1_ch3.Instance = DMA1_Channel7;
 80087d4:	4b3f      	ldr	r3, [pc, #252]	; (80088d4 <HAL_TIM_Base_MspInit+0x1dc>)
 80087d6:	4a40      	ldr	r2, [pc, #256]	; (80088d8 <HAL_TIM_Base_MspInit+0x1e0>)
 80087d8:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch3.Init.Request = DMA_REQUEST_7;
 80087da:	4b3e      	ldr	r3, [pc, #248]	; (80088d4 <HAL_TIM_Base_MspInit+0x1dc>)
 80087dc:	2207      	movs	r2, #7
 80087de:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80087e0:	4b3c      	ldr	r3, [pc, #240]	; (80088d4 <HAL_TIM_Base_MspInit+0x1dc>)
 80087e2:	2210      	movs	r2, #16
 80087e4:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80087e6:	4b3b      	ldr	r3, [pc, #236]	; (80088d4 <HAL_TIM_Base_MspInit+0x1dc>)
 80087e8:	2200      	movs	r2, #0
 80087ea:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80087ec:	4b39      	ldr	r3, [pc, #228]	; (80088d4 <HAL_TIM_Base_MspInit+0x1dc>)
 80087ee:	2280      	movs	r2, #128	; 0x80
 80087f0:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80087f2:	4b38      	ldr	r3, [pc, #224]	; (80088d4 <HAL_TIM_Base_MspInit+0x1dc>)
 80087f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80087f8:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80087fa:	4b36      	ldr	r3, [pc, #216]	; (80088d4 <HAL_TIM_Base_MspInit+0x1dc>)
 80087fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008800:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch3.Init.Mode = DMA_NORMAL;
 8008802:	4b34      	ldr	r3, [pc, #208]	; (80088d4 <HAL_TIM_Base_MspInit+0x1dc>)
 8008804:	2200      	movs	r2, #0
 8008806:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8008808:	4b32      	ldr	r3, [pc, #200]	; (80088d4 <HAL_TIM_Base_MspInit+0x1dc>)
 800880a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800880e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch3) != HAL_OK)
 8008810:	4830      	ldr	r0, [pc, #192]	; (80088d4 <HAL_TIM_Base_MspInit+0x1dc>)
 8008812:	f7fc f9cd 	bl	8004bb0 <HAL_DMA_Init>
 8008816:	4603      	mov	r3, r0
 8008818:	2b00      	cmp	r3, #0
 800881a:	d001      	beq.n	8008820 <HAL_TIM_Base_MspInit+0x128>
    {
      Error_Handler();
 800881c:	f7ff fee0 	bl	80085e0 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	4a2c      	ldr	r2, [pc, #176]	; (80088d4 <HAL_TIM_Base_MspInit+0x1dc>)
 8008824:	62da      	str	r2, [r3, #44]	; 0x2c
 8008826:	4a2b      	ldr	r2, [pc, #172]	; (80088d4 <HAL_TIM_Base_MspInit+0x1dc>)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6293      	str	r3, [r2, #40]	; 0x28
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim16_ch1_up);
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim16_ch1_up);
  }

}
 800882c:	e041      	b.n	80088b2 <HAL_TIM_Base_MspInit+0x1ba>
  else if(htim_base->Instance==TIM16)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	4a2a      	ldr	r2, [pc, #168]	; (80088dc <HAL_TIM_Base_MspInit+0x1e4>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d13c      	bne.n	80088b2 <HAL_TIM_Base_MspInit+0x1ba>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8008838:	4b21      	ldr	r3, [pc, #132]	; (80088c0 <HAL_TIM_Base_MspInit+0x1c8>)
 800883a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800883c:	4a20      	ldr	r2, [pc, #128]	; (80088c0 <HAL_TIM_Base_MspInit+0x1c8>)
 800883e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008842:	6613      	str	r3, [r2, #96]	; 0x60
 8008844:	4b1e      	ldr	r3, [pc, #120]	; (80088c0 <HAL_TIM_Base_MspInit+0x1c8>)
 8008846:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008848:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800884c:	60bb      	str	r3, [r7, #8]
 800884e:	68bb      	ldr	r3, [r7, #8]
    hdma_tim16_ch1_up.Instance = DMA1_Channel6;
 8008850:	4b23      	ldr	r3, [pc, #140]	; (80088e0 <HAL_TIM_Base_MspInit+0x1e8>)
 8008852:	4a24      	ldr	r2, [pc, #144]	; (80088e4 <HAL_TIM_Base_MspInit+0x1ec>)
 8008854:	601a      	str	r2, [r3, #0]
    hdma_tim16_ch1_up.Init.Request = DMA_REQUEST_4;
 8008856:	4b22      	ldr	r3, [pc, #136]	; (80088e0 <HAL_TIM_Base_MspInit+0x1e8>)
 8008858:	2204      	movs	r2, #4
 800885a:	605a      	str	r2, [r3, #4]
    hdma_tim16_ch1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800885c:	4b20      	ldr	r3, [pc, #128]	; (80088e0 <HAL_TIM_Base_MspInit+0x1e8>)
 800885e:	2210      	movs	r2, #16
 8008860:	609a      	str	r2, [r3, #8]
    hdma_tim16_ch1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8008862:	4b1f      	ldr	r3, [pc, #124]	; (80088e0 <HAL_TIM_Base_MspInit+0x1e8>)
 8008864:	2200      	movs	r2, #0
 8008866:	60da      	str	r2, [r3, #12]
    hdma_tim16_ch1_up.Init.MemInc = DMA_MINC_ENABLE;
 8008868:	4b1d      	ldr	r3, [pc, #116]	; (80088e0 <HAL_TIM_Base_MspInit+0x1e8>)
 800886a:	2280      	movs	r2, #128	; 0x80
 800886c:	611a      	str	r2, [r3, #16]
    hdma_tim16_ch1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800886e:	4b1c      	ldr	r3, [pc, #112]	; (80088e0 <HAL_TIM_Base_MspInit+0x1e8>)
 8008870:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008874:	615a      	str	r2, [r3, #20]
    hdma_tim16_ch1_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8008876:	4b1a      	ldr	r3, [pc, #104]	; (80088e0 <HAL_TIM_Base_MspInit+0x1e8>)
 8008878:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800887c:	619a      	str	r2, [r3, #24]
    hdma_tim16_ch1_up.Init.Mode = DMA_NORMAL;
 800887e:	4b18      	ldr	r3, [pc, #96]	; (80088e0 <HAL_TIM_Base_MspInit+0x1e8>)
 8008880:	2200      	movs	r2, #0
 8008882:	61da      	str	r2, [r3, #28]
    hdma_tim16_ch1_up.Init.Priority = DMA_PRIORITY_LOW;
 8008884:	4b16      	ldr	r3, [pc, #88]	; (80088e0 <HAL_TIM_Base_MspInit+0x1e8>)
 8008886:	2200      	movs	r2, #0
 8008888:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim16_ch1_up) != HAL_OK)
 800888a:	4815      	ldr	r0, [pc, #84]	; (80088e0 <HAL_TIM_Base_MspInit+0x1e8>)
 800888c:	f7fc f990 	bl	8004bb0 <HAL_DMA_Init>
 8008890:	4603      	mov	r3, r0
 8008892:	2b00      	cmp	r3, #0
 8008894:	d001      	beq.n	800889a <HAL_TIM_Base_MspInit+0x1a2>
      Error_Handler();
 8008896:	f7ff fea3 	bl	80085e0 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim16_ch1_up);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	4a10      	ldr	r2, [pc, #64]	; (80088e0 <HAL_TIM_Base_MspInit+0x1e8>)
 800889e:	625a      	str	r2, [r3, #36]	; 0x24
 80088a0:	4a0f      	ldr	r2, [pc, #60]	; (80088e0 <HAL_TIM_Base_MspInit+0x1e8>)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim16_ch1_up);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	4a0d      	ldr	r2, [pc, #52]	; (80088e0 <HAL_TIM_Base_MspInit+0x1e8>)
 80088aa:	621a      	str	r2, [r3, #32]
 80088ac:	4a0c      	ldr	r2, [pc, #48]	; (80088e0 <HAL_TIM_Base_MspInit+0x1e8>)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6293      	str	r3, [r2, #40]	; 0x28
}
 80088b2:	bf00      	nop
 80088b4:	3710      	adds	r7, #16
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}
 80088ba:	bf00      	nop
 80088bc:	40012c00 	.word	0x40012c00
 80088c0:	40021000 	.word	0x40021000
 80088c4:	20001cec 	.word	0x20001cec
 80088c8:	4002001c 	.word	0x4002001c
 80088cc:	20001dc8 	.word	0x20001dc8
 80088d0:	40020030 	.word	0x40020030
 80088d4:	20001d34 	.word	0x20001d34
 80088d8:	40020080 	.word	0x40020080
 80088dc:	40014400 	.word	0x40014400
 80088e0:	20001f14 	.word	0x20001f14
 80088e4:	4002006c 	.word	0x4002006c

080088e8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b084      	sub	sp, #16
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM15)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4a28      	ldr	r2, [pc, #160]	; (8008998 <HAL_TIM_PWM_MspInit+0xb0>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d149      	bne.n	800898e <HAL_TIM_PWM_MspInit+0xa6>
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 80088fa:	4b28      	ldr	r3, [pc, #160]	; (800899c <HAL_TIM_PWM_MspInit+0xb4>)
 80088fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088fe:	4a27      	ldr	r2, [pc, #156]	; (800899c <HAL_TIM_PWM_MspInit+0xb4>)
 8008900:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008904:	6613      	str	r3, [r2, #96]	; 0x60
 8008906:	4b25      	ldr	r3, [pc, #148]	; (800899c <HAL_TIM_PWM_MspInit+0xb4>)
 8008908:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800890a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800890e:	60fb      	str	r3, [r7, #12]
 8008910:	68fb      	ldr	r3, [r7, #12]

    /* TIM15 DMA Init */
    /* TIM15_CH1_UP_TRIG_COM Init */
    hdma_tim15_ch1_up_trig_com.Instance = DMA1_Channel5;
 8008912:	4b23      	ldr	r3, [pc, #140]	; (80089a0 <HAL_TIM_PWM_MspInit+0xb8>)
 8008914:	4a23      	ldr	r2, [pc, #140]	; (80089a4 <HAL_TIM_PWM_MspInit+0xbc>)
 8008916:	601a      	str	r2, [r3, #0]
    hdma_tim15_ch1_up_trig_com.Init.Request = DMA_REQUEST_7;
 8008918:	4b21      	ldr	r3, [pc, #132]	; (80089a0 <HAL_TIM_PWM_MspInit+0xb8>)
 800891a:	2207      	movs	r2, #7
 800891c:	605a      	str	r2, [r3, #4]
    hdma_tim15_ch1_up_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800891e:	4b20      	ldr	r3, [pc, #128]	; (80089a0 <HAL_TIM_PWM_MspInit+0xb8>)
 8008920:	2210      	movs	r2, #16
 8008922:	609a      	str	r2, [r3, #8]
    hdma_tim15_ch1_up_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 8008924:	4b1e      	ldr	r3, [pc, #120]	; (80089a0 <HAL_TIM_PWM_MspInit+0xb8>)
 8008926:	2200      	movs	r2, #0
 8008928:	60da      	str	r2, [r3, #12]
    hdma_tim15_ch1_up_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 800892a:	4b1d      	ldr	r3, [pc, #116]	; (80089a0 <HAL_TIM_PWM_MspInit+0xb8>)
 800892c:	2280      	movs	r2, #128	; 0x80
 800892e:	611a      	str	r2, [r3, #16]
    hdma_tim15_ch1_up_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8008930:	4b1b      	ldr	r3, [pc, #108]	; (80089a0 <HAL_TIM_PWM_MspInit+0xb8>)
 8008932:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008936:	615a      	str	r2, [r3, #20]
    hdma_tim15_ch1_up_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8008938:	4b19      	ldr	r3, [pc, #100]	; (80089a0 <HAL_TIM_PWM_MspInit+0xb8>)
 800893a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800893e:	619a      	str	r2, [r3, #24]
    hdma_tim15_ch1_up_trig_com.Init.Mode = DMA_NORMAL;
 8008940:	4b17      	ldr	r3, [pc, #92]	; (80089a0 <HAL_TIM_PWM_MspInit+0xb8>)
 8008942:	2200      	movs	r2, #0
 8008944:	61da      	str	r2, [r3, #28]
    hdma_tim15_ch1_up_trig_com.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8008946:	4b16      	ldr	r3, [pc, #88]	; (80089a0 <HAL_TIM_PWM_MspInit+0xb8>)
 8008948:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800894c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim15_ch1_up_trig_com) != HAL_OK)
 800894e:	4814      	ldr	r0, [pc, #80]	; (80089a0 <HAL_TIM_PWM_MspInit+0xb8>)
 8008950:	f7fc f92e 	bl	8004bb0 <HAL_DMA_Init>
 8008954:	4603      	mov	r3, r0
 8008956:	2b00      	cmp	r3, #0
 8008958:	d001      	beq.n	800895e <HAL_TIM_PWM_MspInit+0x76>
    {
      Error_Handler();
 800895a:	f7ff fe41 	bl	80085e0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim15_ch1_up_trig_com);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	4a0f      	ldr	r2, [pc, #60]	; (80089a0 <HAL_TIM_PWM_MspInit+0xb8>)
 8008962:	625a      	str	r2, [r3, #36]	; 0x24
 8008964:	4a0e      	ldr	r2, [pc, #56]	; (80089a0 <HAL_TIM_PWM_MspInit+0xb8>)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_UPDATE],hdma_tim15_ch1_up_trig_com);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	4a0c      	ldr	r2, [pc, #48]	; (80089a0 <HAL_TIM_PWM_MspInit+0xb8>)
 800896e:	621a      	str	r2, [r3, #32]
 8008970:	4a0b      	ldr	r2, [pc, #44]	; (80089a0 <HAL_TIM_PWM_MspInit+0xb8>)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim15_ch1_up_trig_com);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	4a09      	ldr	r2, [pc, #36]	; (80089a0 <HAL_TIM_PWM_MspInit+0xb8>)
 800897a:	639a      	str	r2, [r3, #56]	; 0x38
 800897c:	4a08      	ldr	r2, [pc, #32]	; (80089a0 <HAL_TIM_PWM_MspInit+0xb8>)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim15_ch1_up_trig_com);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	4a06      	ldr	r2, [pc, #24]	; (80089a0 <HAL_TIM_PWM_MspInit+0xb8>)
 8008986:	635a      	str	r2, [r3, #52]	; 0x34
 8008988:	4a05      	ldr	r2, [pc, #20]	; (80089a0 <HAL_TIM_PWM_MspInit+0xb8>)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 800898e:	bf00      	nop
 8008990:	3710      	adds	r7, #16
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}
 8008996:	bf00      	nop
 8008998:	40014000 	.word	0x40014000
 800899c:	40021000 	.word	0x40021000
 80089a0:	20001e34 	.word	0x20001e34
 80089a4:	40020058 	.word	0x40020058

080089a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b08a      	sub	sp, #40	; 0x28
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80089b0:	f107 0314 	add.w	r3, r7, #20
 80089b4:	2200      	movs	r2, #0
 80089b6:	601a      	str	r2, [r3, #0]
 80089b8:	605a      	str	r2, [r3, #4]
 80089ba:	609a      	str	r2, [r3, #8]
 80089bc:	60da      	str	r2, [r3, #12]
 80089be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	4a23      	ldr	r2, [pc, #140]	; (8008a54 <HAL_TIM_MspPostInit+0xac>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d11e      	bne.n	8008a08 <HAL_TIM_MspPostInit+0x60>
  {
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80089ca:	4b23      	ldr	r3, [pc, #140]	; (8008a58 <HAL_TIM_MspPostInit+0xb0>)
 80089cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089ce:	4a22      	ldr	r2, [pc, #136]	; (8008a58 <HAL_TIM_MspPostInit+0xb0>)
 80089d0:	f043 0301 	orr.w	r3, r3, #1
 80089d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80089d6:	4b20      	ldr	r3, [pc, #128]	; (8008a58 <HAL_TIM_MspPostInit+0xb0>)
 80089d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089da:	f003 0301 	and.w	r3, r3, #1
 80089de:	613b      	str	r3, [r7, #16]
 80089e0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = TIM1_CH1_Pin|GPIO_PIN_9|GPIO_PIN_10;
 80089e2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80089e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80089e8:	2302      	movs	r3, #2
 80089ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089ec:	2300      	movs	r3, #0
 80089ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80089f0:	2300      	movs	r3, #0
 80089f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80089f4:	2301      	movs	r3, #1
 80089f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80089f8:	f107 0314 	add.w	r3, r7, #20
 80089fc:	4619      	mov	r1, r3
 80089fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008a02:	f7fc fb0d 	bl	8005020 <HAL_GPIO_Init>
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
  }

}
 8008a06:	e021      	b.n	8008a4c <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM15)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	4a13      	ldr	r2, [pc, #76]	; (8008a5c <HAL_TIM_MspPostInit+0xb4>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d11c      	bne.n	8008a4c <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008a12:	4b11      	ldr	r3, [pc, #68]	; (8008a58 <HAL_TIM_MspPostInit+0xb0>)
 8008a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a16:	4a10      	ldr	r2, [pc, #64]	; (8008a58 <HAL_TIM_MspPostInit+0xb0>)
 8008a18:	f043 0302 	orr.w	r3, r3, #2
 8008a1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008a1e:	4b0e      	ldr	r3, [pc, #56]	; (8008a58 <HAL_TIM_MspPostInit+0xb0>)
 8008a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a22:	f003 0302 	and.w	r3, r3, #2
 8008a26:	60fb      	str	r3, [r7, #12]
 8008a28:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8008a2a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008a2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a30:	2302      	movs	r3, #2
 8008a32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a34:	2300      	movs	r3, #0
 8008a36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008a38:	2300      	movs	r3, #0
 8008a3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8008a3c:	230e      	movs	r3, #14
 8008a3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008a40:	f107 0314 	add.w	r3, r7, #20
 8008a44:	4619      	mov	r1, r3
 8008a46:	4806      	ldr	r0, [pc, #24]	; (8008a60 <HAL_TIM_MspPostInit+0xb8>)
 8008a48:	f7fc faea 	bl	8005020 <HAL_GPIO_Init>
}
 8008a4c:	bf00      	nop
 8008a4e:	3728      	adds	r7, #40	; 0x28
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}
 8008a54:	40012c00 	.word	0x40012c00
 8008a58:	40021000 	.word	0x40021000
 8008a5c:	40014000 	.word	0x40014000
 8008a60:	48000400 	.word	0x48000400

08008a64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008a64:	b480      	push	{r7}
 8008a66:	af00      	add	r7, sp, #0
    while (1);
 8008a68:	e7fe      	b.n	8008a68 <NMI_Handler+0x4>

08008a6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008a6a:	b480      	push	{r7}
 8008a6c:	af00      	add	r7, sp, #0
    while (1);
 8008a6e:	e7fe      	b.n	8008a6e <HardFault_Handler+0x4>

08008a70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008a70:	b480      	push	{r7}
 8008a72:	af00      	add	r7, sp, #0
    while (1);
 8008a74:	e7fe      	b.n	8008a74 <MemManage_Handler+0x4>

08008a76 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008a76:	b480      	push	{r7}
 8008a78:	af00      	add	r7, sp, #0
    while (1);
 8008a7a:	e7fe      	b.n	8008a7a <BusFault_Handler+0x4>

08008a7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	af00      	add	r7, sp, #0
    while (1);
 8008a80:	e7fe      	b.n	8008a80 <UsageFault_Handler+0x4>

08008a82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008a82:	b480      	push	{r7}
 8008a84:	af00      	add	r7, sp, #0
}
 8008a86:	bf00      	nop
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8e:	4770      	bx	lr

08008a90 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	af00      	add	r7, sp, #0
    // B
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8008a94:	2004      	movs	r0, #4
 8008a96:	f7fc fc55 	bl	8005344 <HAL_GPIO_EXTI_IRQHandler>
    gb_a_flag = true;
 8008a9a:	4b05      	ldr	r3, [pc, #20]	; (8008ab0 <EXTI2_IRQHandler+0x20>)
 8008a9c:	2201      	movs	r2, #1
 8008a9e:	701a      	strb	r2, [r3, #0]

    g_int_count++;
 8008aa0:	4b04      	ldr	r3, [pc, #16]	; (8008ab4 <EXTI2_IRQHandler+0x24>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	3301      	adds	r3, #1
 8008aa6:	4a03      	ldr	r2, [pc, #12]	; (8008ab4 <EXTI2_IRQHandler+0x24>)
 8008aa8:	6013      	str	r3, [r2, #0]
}
 8008aaa:	bf00      	nop
 8008aac:	bd80      	pop	{r7, pc}
 8008aae:	bf00      	nop
 8008ab0:	200019e4 	.word	0x200019e4
 8008ab4:	200019e0 	.word	0x200019e0

08008ab8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	af00      	add	r7, sp, #0
    // D
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8008abc:	2020      	movs	r0, #32
 8008abe:	f7fc fc41 	bl	8005344 <HAL_GPIO_EXTI_IRQHandler>
    gb_b_flag = true;
 8008ac2:	4b05      	ldr	r3, [pc, #20]	; (8008ad8 <EXTI9_5_IRQHandler+0x20>)
 8008ac4:	2201      	movs	r2, #1
 8008ac6:	701a      	strb	r2, [r3, #0]

    g_int_count++;
 8008ac8:	4b04      	ldr	r3, [pc, #16]	; (8008adc <EXTI9_5_IRQHandler+0x24>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	3301      	adds	r3, #1
 8008ace:	4a03      	ldr	r2, [pc, #12]	; (8008adc <EXTI9_5_IRQHandler+0x24>)
 8008ad0:	6013      	str	r3, [r2, #0]
}
 8008ad2:	bf00      	nop
 8008ad4:	bd80      	pop	{r7, pc}
 8008ad6:	bf00      	nop
 8008ad8:	200019e5 	.word	0x200019e5
 8008adc:	200019e0 	.word	0x200019e0

08008ae0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	af00      	add	r7, sp, #0
    // C
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8008ae4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8008ae8:	f7fc fc2c 	bl	8005344 <HAL_GPIO_EXTI_IRQHandler>
    gb_c_flag = true;
 8008aec:	4b04      	ldr	r3, [pc, #16]	; (8008b00 <EXTI15_10_IRQHandler+0x20>)
 8008aee:	2201      	movs	r2, #1
 8008af0:	701a      	strb	r2, [r3, #0]
    g_int_count++;
 8008af2:	4b04      	ldr	r3, [pc, #16]	; (8008b04 <EXTI15_10_IRQHandler+0x24>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	3301      	adds	r3, #1
 8008af8:	4a02      	ldr	r2, [pc, #8]	; (8008b04 <EXTI15_10_IRQHandler+0x24>)
 8008afa:	6013      	str	r3, [r2, #0]
}
 8008afc:	bf00      	nop
 8008afe:	bd80      	pop	{r7, pc}
 8008b00:	200019e6 	.word	0x200019e6
 8008b04:	200019e0 	.word	0x200019e0

08008b08 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	af00      	add	r7, sp, #0
    // A
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8008b0c:	2001      	movs	r0, #1
 8008b0e:	f7fc fc19 	bl	8005344 <HAL_GPIO_EXTI_IRQHandler>
    gb_d_flag = true;
 8008b12:	4b05      	ldr	r3, [pc, #20]	; (8008b28 <EXTI0_IRQHandler+0x20>)
 8008b14:	2201      	movs	r2, #1
 8008b16:	701a      	strb	r2, [r3, #0]
    g_int_count++;
 8008b18:	4b04      	ldr	r3, [pc, #16]	; (8008b2c <EXTI0_IRQHandler+0x24>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	3301      	adds	r3, #1
 8008b1e:	4a03      	ldr	r2, [pc, #12]	; (8008b2c <EXTI0_IRQHandler+0x24>)
 8008b20:	6013      	str	r3, [r2, #0]
}
 8008b22:	bf00      	nop
 8008b24:	bd80      	pop	{r7, pc}
 8008b26:	bf00      	nop
 8008b28:	200019e7 	.word	0x200019e7
 8008b2c:	200019e0 	.word	0x200019e0

08008b30 <HAL_TIM_PWM_PulseFinishedCallback>:


void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b082      	sub	sp, #8
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
    static uint32_t count = 0;
    switch (htim->Channel)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	7f1b      	ldrb	r3, [r3, #28]
 8008b3c:	2b04      	cmp	r3, #4
 8008b3e:	d010      	beq.n	8008b62 <HAL_TIM_PWM_PulseFinishedCallback+0x32>
 8008b40:	2b04      	cmp	r3, #4
 8008b42:	dc13      	bgt.n	8008b6c <HAL_TIM_PWM_PulseFinishedCallback+0x3c>
 8008b44:	2b01      	cmp	r3, #1
 8008b46:	d002      	beq.n	8008b4e <HAL_TIM_PWM_PulseFinishedCallback+0x1e>
 8008b48:	2b02      	cmp	r3, #2
 8008b4a:	d005      	beq.n	8008b58 <HAL_TIM_PWM_PulseFinishedCallback+0x28>
        break;
        case HAL_TIM_ACTIVE_CHANNEL_3:
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_3);
        break;
        default:
        break;
 8008b4c:	e00e      	b.n	8008b6c <HAL_TIM_PWM_PulseFinishedCallback+0x3c>
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
 8008b4e:	2100      	movs	r1, #0
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f7fe f9bf 	bl	8006ed4 <HAL_TIM_PWM_Stop_DMA>
        break;
 8008b56:	e00a      	b.n	8008b6e <HAL_TIM_PWM_PulseFinishedCallback+0x3e>
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_2);
 8008b58:	2104      	movs	r1, #4
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f7fe f9ba 	bl	8006ed4 <HAL_TIM_PWM_Stop_DMA>
        break;
 8008b60:	e005      	b.n	8008b6e <HAL_TIM_PWM_PulseFinishedCallback+0x3e>
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_3);
 8008b62:	2108      	movs	r1, #8
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f7fe f9b5 	bl	8006ed4 <HAL_TIM_PWM_Stop_DMA>
        break;
 8008b6a:	e000      	b.n	8008b6e <HAL_TIM_PWM_PulseFinishedCallback+0x3e>
        break;
 8008b6c:	bf00      	nop
    }
    //datasentflag = 1;
    //g_dma_done_flag = true;
    count++;
 8008b6e:	4b06      	ldr	r3, [pc, #24]	; (8008b88 <HAL_TIM_PWM_PulseFinishedCallback+0x58>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	3301      	adds	r3, #1
 8008b74:	4a04      	ldr	r2, [pc, #16]	; (8008b88 <HAL_TIM_PWM_PulseFinishedCallback+0x58>)
 8008b76:	6013      	str	r3, [r2, #0]
    datasentflag=1;
 8008b78:	4b04      	ldr	r3, [pc, #16]	; (8008b8c <HAL_TIM_PWM_PulseFinishedCallback+0x5c>)
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	601a      	str	r2, [r3, #0]
//  if (0 == (count % 2))
//  {
//        datasentflag=1;
//        g_dma_done_flag = true;
//  }
}
 8008b7e:	bf00      	nop
 8008b80:	3708      	adds	r7, #8
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}
 8008b86:	bf00      	nop
 8008b88:	200019e8 	.word	0x200019e8
 8008b8c:	200019dc 	.word	0x200019dc

08008b90 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8008b94:	4802      	ldr	r0, [pc, #8]	; (8008ba0 <DMA1_Channel2_IRQHandler+0x10>)
 8008b96:	f7fc f964 	bl	8004e62 <HAL_DMA_IRQHandler>
}
 8008b9a:	bf00      	nop
 8008b9c:	bd80      	pop	{r7, pc}
 8008b9e:	bf00      	nop
 8008ba0:	20001cec 	.word	0x20001cec

08008ba4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 8008ba8:	4802      	ldr	r0, [pc, #8]	; (8008bb4 <DMA1_Channel3_IRQHandler+0x10>)
 8008baa:	f7fc f95a 	bl	8004e62 <HAL_DMA_IRQHandler>
}
 8008bae:	bf00      	nop
 8008bb0:	bd80      	pop	{r7, pc}
 8008bb2:	bf00      	nop
 8008bb4:	20001dc8 	.word	0x20001dc8

08008bb8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim15_ch1_up_trig_com);
 8008bbc:	4802      	ldr	r0, [pc, #8]	; (8008bc8 <DMA1_Channel5_IRQHandler+0x10>)
 8008bbe:	f7fc f950 	bl	8004e62 <HAL_DMA_IRQHandler>
}
 8008bc2:	bf00      	nop
 8008bc4:	bd80      	pop	{r7, pc}
 8008bc6:	bf00      	nop
 8008bc8:	20001e34 	.word	0x20001e34

08008bcc <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim16_ch1_up);
 8008bd0:	4802      	ldr	r0, [pc, #8]	; (8008bdc <DMA1_Channel6_IRQHandler+0x10>)
 8008bd2:	f7fc f946 	bl	8004e62 <HAL_DMA_IRQHandler>
}
 8008bd6:	bf00      	nop
 8008bd8:	bd80      	pop	{r7, pc}
 8008bda:	bf00      	nop
 8008bdc:	20001f14 	.word	0x20001f14

08008be0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim1_ch3);
 8008be4:	4802      	ldr	r0, [pc, #8]	; (8008bf0 <DMA1_Channel7_IRQHandler+0x10>)
 8008be6:	f7fc f93c 	bl	8004e62 <HAL_DMA_IRQHandler>
}
 8008bea:	bf00      	nop
 8008bec:	bd80      	pop	{r7, pc}
 8008bee:	bf00      	nop
 8008bf0:	20001d34 	.word	0x20001d34

08008bf4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	af00      	add	r7, sp, #0
	return 1;
 8008bf8:	2301      	movs	r3, #1
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c02:	4770      	bx	lr

08008c04 <_kill>:

int _kill(int pid, int sig)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b082      	sub	sp, #8
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8008c0e:	f000 f8f3 	bl	8008df8 <__errno>
 8008c12:	4603      	mov	r3, r0
 8008c14:	2216      	movs	r2, #22
 8008c16:	601a      	str	r2, [r3, #0]
	return -1;
 8008c18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	3708      	adds	r7, #8
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}

08008c24 <_exit>:

void _exit (int status)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b082      	sub	sp, #8
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8008c2c:	f04f 31ff 	mov.w	r1, #4294967295
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f7ff ffe7 	bl	8008c04 <_kill>
	while (1) {}		/* Make sure we hang here */
 8008c36:	e7fe      	b.n	8008c36 <_exit+0x12>

08008c38 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b086      	sub	sp, #24
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	60f8      	str	r0, [r7, #12]
 8008c40:	60b9      	str	r1, [r7, #8]
 8008c42:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008c44:	2300      	movs	r3, #0
 8008c46:	617b      	str	r3, [r7, #20]
 8008c48:	e00a      	b.n	8008c60 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8008c4a:	f3af 8000 	nop.w
 8008c4e:	4601      	mov	r1, r0
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	1c5a      	adds	r2, r3, #1
 8008c54:	60ba      	str	r2, [r7, #8]
 8008c56:	b2ca      	uxtb	r2, r1
 8008c58:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	3301      	adds	r3, #1
 8008c5e:	617b      	str	r3, [r7, #20]
 8008c60:	697a      	ldr	r2, [r7, #20]
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	429a      	cmp	r2, r3
 8008c66:	dbf0      	blt.n	8008c4a <_read+0x12>
	}

return len;
 8008c68:	687b      	ldr	r3, [r7, #4]
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3718      	adds	r7, #24
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}

08008c72 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008c72:	b580      	push	{r7, lr}
 8008c74:	b086      	sub	sp, #24
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	60f8      	str	r0, [r7, #12]
 8008c7a:	60b9      	str	r1, [r7, #8]
 8008c7c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008c7e:	2300      	movs	r3, #0
 8008c80:	617b      	str	r3, [r7, #20]
 8008c82:	e009      	b.n	8008c98 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	1c5a      	adds	r2, r3, #1
 8008c88:	60ba      	str	r2, [r7, #8]
 8008c8a:	781b      	ldrb	r3, [r3, #0]
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	3301      	adds	r3, #1
 8008c96:	617b      	str	r3, [r7, #20]
 8008c98:	697a      	ldr	r2, [r7, #20]
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	429a      	cmp	r2, r3
 8008c9e:	dbf1      	blt.n	8008c84 <_write+0x12>
	}
	return len;
 8008ca0:	687b      	ldr	r3, [r7, #4]
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	3718      	adds	r7, #24
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}

08008caa <_close>:

int _close(int file)
{
 8008caa:	b480      	push	{r7}
 8008cac:	b083      	sub	sp, #12
 8008cae:	af00      	add	r7, sp, #0
 8008cb0:	6078      	str	r0, [r7, #4]
	return -1;
 8008cb2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	370c      	adds	r7, #12
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc0:	4770      	bx	lr

08008cc2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008cc2:	b480      	push	{r7}
 8008cc4:	b083      	sub	sp, #12
 8008cc6:	af00      	add	r7, sp, #0
 8008cc8:	6078      	str	r0, [r7, #4]
 8008cca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008cd2:	605a      	str	r2, [r3, #4]
	return 0;
 8008cd4:	2300      	movs	r3, #0
}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	370c      	adds	r7, #12
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce0:	4770      	bx	lr

08008ce2 <_isatty>:

int _isatty(int file)
{
 8008ce2:	b480      	push	{r7}
 8008ce4:	b083      	sub	sp, #12
 8008ce6:	af00      	add	r7, sp, #0
 8008ce8:	6078      	str	r0, [r7, #4]
	return 1;
 8008cea:	2301      	movs	r3, #1
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	370c      	adds	r7, #12
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf6:	4770      	bx	lr

08008cf8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b085      	sub	sp, #20
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	60f8      	str	r0, [r7, #12]
 8008d00:	60b9      	str	r1, [r7, #8]
 8008d02:	607a      	str	r2, [r7, #4]
	return 0;
 8008d04:	2300      	movs	r3, #0
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	3714      	adds	r7, #20
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d10:	4770      	bx	lr
	...

08008d14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b086      	sub	sp, #24
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008d1c:	4a14      	ldr	r2, [pc, #80]	; (8008d70 <_sbrk+0x5c>)
 8008d1e:	4b15      	ldr	r3, [pc, #84]	; (8008d74 <_sbrk+0x60>)
 8008d20:	1ad3      	subs	r3, r2, r3
 8008d22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008d24:	697b      	ldr	r3, [r7, #20]
 8008d26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008d28:	4b13      	ldr	r3, [pc, #76]	; (8008d78 <_sbrk+0x64>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d102      	bne.n	8008d36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008d30:	4b11      	ldr	r3, [pc, #68]	; (8008d78 <_sbrk+0x64>)
 8008d32:	4a12      	ldr	r2, [pc, #72]	; (8008d7c <_sbrk+0x68>)
 8008d34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008d36:	4b10      	ldr	r3, [pc, #64]	; (8008d78 <_sbrk+0x64>)
 8008d38:	681a      	ldr	r2, [r3, #0]
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	4413      	add	r3, r2
 8008d3e:	693a      	ldr	r2, [r7, #16]
 8008d40:	429a      	cmp	r2, r3
 8008d42:	d207      	bcs.n	8008d54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008d44:	f000 f858 	bl	8008df8 <__errno>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	220c      	movs	r2, #12
 8008d4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8008d52:	e009      	b.n	8008d68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008d54:	4b08      	ldr	r3, [pc, #32]	; (8008d78 <_sbrk+0x64>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008d5a:	4b07      	ldr	r3, [pc, #28]	; (8008d78 <_sbrk+0x64>)
 8008d5c:	681a      	ldr	r2, [r3, #0]
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	4413      	add	r3, r2
 8008d62:	4a05      	ldr	r2, [pc, #20]	; (8008d78 <_sbrk+0x64>)
 8008d64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008d66:	68fb      	ldr	r3, [r7, #12]
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	3718      	adds	r7, #24
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}
 8008d70:	20010000 	.word	0x20010000
 8008d74:	00000400 	.word	0x00000400
 8008d78:	200019ec 	.word	0x200019ec
 8008d7c:	20003030 	.word	0x20003030

08008d80 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8008d80:	b480      	push	{r7}
 8008d82:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8008d84:	4b06      	ldr	r3, [pc, #24]	; (8008da0 <SystemInit+0x20>)
 8008d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d8a:	4a05      	ldr	r2, [pc, #20]	; (8008da0 <SystemInit+0x20>)
 8008d8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008d90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8008d94:	bf00      	nop
 8008d96:	46bd      	mov	sp, r7
 8008d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9c:	4770      	bx	lr
 8008d9e:	bf00      	nop
 8008da0:	e000ed00 	.word	0xe000ed00

08008da4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8008da4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008ddc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8008da8:	f7ff ffea 	bl	8008d80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008dac:	480c      	ldr	r0, [pc, #48]	; (8008de0 <LoopForever+0x6>)
  ldr r1, =_edata
 8008dae:	490d      	ldr	r1, [pc, #52]	; (8008de4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8008db0:	4a0d      	ldr	r2, [pc, #52]	; (8008de8 <LoopForever+0xe>)
  movs r3, #0
 8008db2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008db4:	e002      	b.n	8008dbc <LoopCopyDataInit>

08008db6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008db6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008db8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008dba:	3304      	adds	r3, #4

08008dbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008dbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008dbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008dc0:	d3f9      	bcc.n	8008db6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008dc2:	4a0a      	ldr	r2, [pc, #40]	; (8008dec <LoopForever+0x12>)
  ldr r4, =_ebss
 8008dc4:	4c0a      	ldr	r4, [pc, #40]	; (8008df0 <LoopForever+0x16>)
  movs r3, #0
 8008dc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008dc8:	e001      	b.n	8008dce <LoopFillZerobss>

08008dca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008dca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008dcc:	3204      	adds	r2, #4

08008dce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008dce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008dd0:	d3fb      	bcc.n	8008dca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8008dd2:	f000 f817 	bl	8008e04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8008dd6:	f7ff fc08 	bl	80085ea <main>

08008dda <LoopForever>:

LoopForever:
    b LoopForever
 8008dda:	e7fe      	b.n	8008dda <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8008ddc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8008de0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008de4:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8008de8:	0800a150 	.word	0x0800a150
  ldr r2, =_sbss
 8008dec:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8008df0:	2000302c 	.word	0x2000302c

08008df4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008df4:	e7fe      	b.n	8008df4 <ADC1_IRQHandler>
	...

08008df8 <__errno>:
 8008df8:	4b01      	ldr	r3, [pc, #4]	; (8008e00 <__errno+0x8>)
 8008dfa:	6818      	ldr	r0, [r3, #0]
 8008dfc:	4770      	bx	lr
 8008dfe:	bf00      	nop
 8008e00:	2000001c 	.word	0x2000001c

08008e04 <__libc_init_array>:
 8008e04:	b570      	push	{r4, r5, r6, lr}
 8008e06:	4d0d      	ldr	r5, [pc, #52]	; (8008e3c <__libc_init_array+0x38>)
 8008e08:	4c0d      	ldr	r4, [pc, #52]	; (8008e40 <__libc_init_array+0x3c>)
 8008e0a:	1b64      	subs	r4, r4, r5
 8008e0c:	10a4      	asrs	r4, r4, #2
 8008e0e:	2600      	movs	r6, #0
 8008e10:	42a6      	cmp	r6, r4
 8008e12:	d109      	bne.n	8008e28 <__libc_init_array+0x24>
 8008e14:	4d0b      	ldr	r5, [pc, #44]	; (8008e44 <__libc_init_array+0x40>)
 8008e16:	4c0c      	ldr	r4, [pc, #48]	; (8008e48 <__libc_init_array+0x44>)
 8008e18:	f001 f892 	bl	8009f40 <_init>
 8008e1c:	1b64      	subs	r4, r4, r5
 8008e1e:	10a4      	asrs	r4, r4, #2
 8008e20:	2600      	movs	r6, #0
 8008e22:	42a6      	cmp	r6, r4
 8008e24:	d105      	bne.n	8008e32 <__libc_init_array+0x2e>
 8008e26:	bd70      	pop	{r4, r5, r6, pc}
 8008e28:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e2c:	4798      	blx	r3
 8008e2e:	3601      	adds	r6, #1
 8008e30:	e7ee      	b.n	8008e10 <__libc_init_array+0xc>
 8008e32:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e36:	4798      	blx	r3
 8008e38:	3601      	adds	r6, #1
 8008e3a:	e7f2      	b.n	8008e22 <__libc_init_array+0x1e>
 8008e3c:	0800a148 	.word	0x0800a148
 8008e40:	0800a148 	.word	0x0800a148
 8008e44:	0800a148 	.word	0x0800a148
 8008e48:	0800a14c 	.word	0x0800a14c

08008e4c <malloc>:
 8008e4c:	4b02      	ldr	r3, [pc, #8]	; (8008e58 <malloc+0xc>)
 8008e4e:	4601      	mov	r1, r0
 8008e50:	6818      	ldr	r0, [r3, #0]
 8008e52:	f000 b869 	b.w	8008f28 <_malloc_r>
 8008e56:	bf00      	nop
 8008e58:	2000001c 	.word	0x2000001c

08008e5c <memcpy>:
 8008e5c:	440a      	add	r2, r1
 8008e5e:	4291      	cmp	r1, r2
 8008e60:	f100 33ff 	add.w	r3, r0, #4294967295
 8008e64:	d100      	bne.n	8008e68 <memcpy+0xc>
 8008e66:	4770      	bx	lr
 8008e68:	b510      	push	{r4, lr}
 8008e6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e72:	4291      	cmp	r1, r2
 8008e74:	d1f9      	bne.n	8008e6a <memcpy+0xe>
 8008e76:	bd10      	pop	{r4, pc}

08008e78 <memset>:
 8008e78:	4402      	add	r2, r0
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d100      	bne.n	8008e82 <memset+0xa>
 8008e80:	4770      	bx	lr
 8008e82:	f803 1b01 	strb.w	r1, [r3], #1
 8008e86:	e7f9      	b.n	8008e7c <memset+0x4>

08008e88 <_free_r>:
 8008e88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e8a:	2900      	cmp	r1, #0
 8008e8c:	d048      	beq.n	8008f20 <_free_r+0x98>
 8008e8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e92:	9001      	str	r0, [sp, #4]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	f1a1 0404 	sub.w	r4, r1, #4
 8008e9a:	bfb8      	it	lt
 8008e9c:	18e4      	addlt	r4, r4, r3
 8008e9e:	f000 f977 	bl	8009190 <__malloc_lock>
 8008ea2:	4a20      	ldr	r2, [pc, #128]	; (8008f24 <_free_r+0x9c>)
 8008ea4:	9801      	ldr	r0, [sp, #4]
 8008ea6:	6813      	ldr	r3, [r2, #0]
 8008ea8:	4615      	mov	r5, r2
 8008eaa:	b933      	cbnz	r3, 8008eba <_free_r+0x32>
 8008eac:	6063      	str	r3, [r4, #4]
 8008eae:	6014      	str	r4, [r2, #0]
 8008eb0:	b003      	add	sp, #12
 8008eb2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008eb6:	f000 b971 	b.w	800919c <__malloc_unlock>
 8008eba:	42a3      	cmp	r3, r4
 8008ebc:	d90b      	bls.n	8008ed6 <_free_r+0x4e>
 8008ebe:	6821      	ldr	r1, [r4, #0]
 8008ec0:	1862      	adds	r2, r4, r1
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	bf04      	itt	eq
 8008ec6:	681a      	ldreq	r2, [r3, #0]
 8008ec8:	685b      	ldreq	r3, [r3, #4]
 8008eca:	6063      	str	r3, [r4, #4]
 8008ecc:	bf04      	itt	eq
 8008ece:	1852      	addeq	r2, r2, r1
 8008ed0:	6022      	streq	r2, [r4, #0]
 8008ed2:	602c      	str	r4, [r5, #0]
 8008ed4:	e7ec      	b.n	8008eb0 <_free_r+0x28>
 8008ed6:	461a      	mov	r2, r3
 8008ed8:	685b      	ldr	r3, [r3, #4]
 8008eda:	b10b      	cbz	r3, 8008ee0 <_free_r+0x58>
 8008edc:	42a3      	cmp	r3, r4
 8008ede:	d9fa      	bls.n	8008ed6 <_free_r+0x4e>
 8008ee0:	6811      	ldr	r1, [r2, #0]
 8008ee2:	1855      	adds	r5, r2, r1
 8008ee4:	42a5      	cmp	r5, r4
 8008ee6:	d10b      	bne.n	8008f00 <_free_r+0x78>
 8008ee8:	6824      	ldr	r4, [r4, #0]
 8008eea:	4421      	add	r1, r4
 8008eec:	1854      	adds	r4, r2, r1
 8008eee:	42a3      	cmp	r3, r4
 8008ef0:	6011      	str	r1, [r2, #0]
 8008ef2:	d1dd      	bne.n	8008eb0 <_free_r+0x28>
 8008ef4:	681c      	ldr	r4, [r3, #0]
 8008ef6:	685b      	ldr	r3, [r3, #4]
 8008ef8:	6053      	str	r3, [r2, #4]
 8008efa:	4421      	add	r1, r4
 8008efc:	6011      	str	r1, [r2, #0]
 8008efe:	e7d7      	b.n	8008eb0 <_free_r+0x28>
 8008f00:	d902      	bls.n	8008f08 <_free_r+0x80>
 8008f02:	230c      	movs	r3, #12
 8008f04:	6003      	str	r3, [r0, #0]
 8008f06:	e7d3      	b.n	8008eb0 <_free_r+0x28>
 8008f08:	6825      	ldr	r5, [r4, #0]
 8008f0a:	1961      	adds	r1, r4, r5
 8008f0c:	428b      	cmp	r3, r1
 8008f0e:	bf04      	itt	eq
 8008f10:	6819      	ldreq	r1, [r3, #0]
 8008f12:	685b      	ldreq	r3, [r3, #4]
 8008f14:	6063      	str	r3, [r4, #4]
 8008f16:	bf04      	itt	eq
 8008f18:	1949      	addeq	r1, r1, r5
 8008f1a:	6021      	streq	r1, [r4, #0]
 8008f1c:	6054      	str	r4, [r2, #4]
 8008f1e:	e7c7      	b.n	8008eb0 <_free_r+0x28>
 8008f20:	b003      	add	sp, #12
 8008f22:	bd30      	pop	{r4, r5, pc}
 8008f24:	200019f0 	.word	0x200019f0

08008f28 <_malloc_r>:
 8008f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f2a:	1ccd      	adds	r5, r1, #3
 8008f2c:	f025 0503 	bic.w	r5, r5, #3
 8008f30:	3508      	adds	r5, #8
 8008f32:	2d0c      	cmp	r5, #12
 8008f34:	bf38      	it	cc
 8008f36:	250c      	movcc	r5, #12
 8008f38:	2d00      	cmp	r5, #0
 8008f3a:	4606      	mov	r6, r0
 8008f3c:	db01      	blt.n	8008f42 <_malloc_r+0x1a>
 8008f3e:	42a9      	cmp	r1, r5
 8008f40:	d903      	bls.n	8008f4a <_malloc_r+0x22>
 8008f42:	230c      	movs	r3, #12
 8008f44:	6033      	str	r3, [r6, #0]
 8008f46:	2000      	movs	r0, #0
 8008f48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f4a:	f000 f921 	bl	8009190 <__malloc_lock>
 8008f4e:	4921      	ldr	r1, [pc, #132]	; (8008fd4 <_malloc_r+0xac>)
 8008f50:	680a      	ldr	r2, [r1, #0]
 8008f52:	4614      	mov	r4, r2
 8008f54:	b99c      	cbnz	r4, 8008f7e <_malloc_r+0x56>
 8008f56:	4f20      	ldr	r7, [pc, #128]	; (8008fd8 <_malloc_r+0xb0>)
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	b923      	cbnz	r3, 8008f66 <_malloc_r+0x3e>
 8008f5c:	4621      	mov	r1, r4
 8008f5e:	4630      	mov	r0, r6
 8008f60:	f000 f8aa 	bl	80090b8 <_sbrk_r>
 8008f64:	6038      	str	r0, [r7, #0]
 8008f66:	4629      	mov	r1, r5
 8008f68:	4630      	mov	r0, r6
 8008f6a:	f000 f8a5 	bl	80090b8 <_sbrk_r>
 8008f6e:	1c43      	adds	r3, r0, #1
 8008f70:	d123      	bne.n	8008fba <_malloc_r+0x92>
 8008f72:	230c      	movs	r3, #12
 8008f74:	6033      	str	r3, [r6, #0]
 8008f76:	4630      	mov	r0, r6
 8008f78:	f000 f910 	bl	800919c <__malloc_unlock>
 8008f7c:	e7e3      	b.n	8008f46 <_malloc_r+0x1e>
 8008f7e:	6823      	ldr	r3, [r4, #0]
 8008f80:	1b5b      	subs	r3, r3, r5
 8008f82:	d417      	bmi.n	8008fb4 <_malloc_r+0x8c>
 8008f84:	2b0b      	cmp	r3, #11
 8008f86:	d903      	bls.n	8008f90 <_malloc_r+0x68>
 8008f88:	6023      	str	r3, [r4, #0]
 8008f8a:	441c      	add	r4, r3
 8008f8c:	6025      	str	r5, [r4, #0]
 8008f8e:	e004      	b.n	8008f9a <_malloc_r+0x72>
 8008f90:	6863      	ldr	r3, [r4, #4]
 8008f92:	42a2      	cmp	r2, r4
 8008f94:	bf0c      	ite	eq
 8008f96:	600b      	streq	r3, [r1, #0]
 8008f98:	6053      	strne	r3, [r2, #4]
 8008f9a:	4630      	mov	r0, r6
 8008f9c:	f000 f8fe 	bl	800919c <__malloc_unlock>
 8008fa0:	f104 000b 	add.w	r0, r4, #11
 8008fa4:	1d23      	adds	r3, r4, #4
 8008fa6:	f020 0007 	bic.w	r0, r0, #7
 8008faa:	1ac2      	subs	r2, r0, r3
 8008fac:	d0cc      	beq.n	8008f48 <_malloc_r+0x20>
 8008fae:	1a1b      	subs	r3, r3, r0
 8008fb0:	50a3      	str	r3, [r4, r2]
 8008fb2:	e7c9      	b.n	8008f48 <_malloc_r+0x20>
 8008fb4:	4622      	mov	r2, r4
 8008fb6:	6864      	ldr	r4, [r4, #4]
 8008fb8:	e7cc      	b.n	8008f54 <_malloc_r+0x2c>
 8008fba:	1cc4      	adds	r4, r0, #3
 8008fbc:	f024 0403 	bic.w	r4, r4, #3
 8008fc0:	42a0      	cmp	r0, r4
 8008fc2:	d0e3      	beq.n	8008f8c <_malloc_r+0x64>
 8008fc4:	1a21      	subs	r1, r4, r0
 8008fc6:	4630      	mov	r0, r6
 8008fc8:	f000 f876 	bl	80090b8 <_sbrk_r>
 8008fcc:	3001      	adds	r0, #1
 8008fce:	d1dd      	bne.n	8008f8c <_malloc_r+0x64>
 8008fd0:	e7cf      	b.n	8008f72 <_malloc_r+0x4a>
 8008fd2:	bf00      	nop
 8008fd4:	200019f0 	.word	0x200019f0
 8008fd8:	200019f4 	.word	0x200019f4

08008fdc <srand>:
 8008fdc:	b538      	push	{r3, r4, r5, lr}
 8008fde:	4b10      	ldr	r3, [pc, #64]	; (8009020 <srand+0x44>)
 8008fe0:	681d      	ldr	r5, [r3, #0]
 8008fe2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8008fe4:	4604      	mov	r4, r0
 8008fe6:	b9b3      	cbnz	r3, 8009016 <srand+0x3a>
 8008fe8:	2018      	movs	r0, #24
 8008fea:	f7ff ff2f 	bl	8008e4c <malloc>
 8008fee:	4602      	mov	r2, r0
 8008ff0:	63a8      	str	r0, [r5, #56]	; 0x38
 8008ff2:	b920      	cbnz	r0, 8008ffe <srand+0x22>
 8008ff4:	4b0b      	ldr	r3, [pc, #44]	; (8009024 <srand+0x48>)
 8008ff6:	480c      	ldr	r0, [pc, #48]	; (8009028 <srand+0x4c>)
 8008ff8:	2142      	movs	r1, #66	; 0x42
 8008ffa:	f000 f887 	bl	800910c <__assert_func>
 8008ffe:	490b      	ldr	r1, [pc, #44]	; (800902c <srand+0x50>)
 8009000:	4b0b      	ldr	r3, [pc, #44]	; (8009030 <srand+0x54>)
 8009002:	e9c0 1300 	strd	r1, r3, [r0]
 8009006:	4b0b      	ldr	r3, [pc, #44]	; (8009034 <srand+0x58>)
 8009008:	6083      	str	r3, [r0, #8]
 800900a:	230b      	movs	r3, #11
 800900c:	8183      	strh	r3, [r0, #12]
 800900e:	2100      	movs	r1, #0
 8009010:	2001      	movs	r0, #1
 8009012:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8009016:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8009018:	2200      	movs	r2, #0
 800901a:	611c      	str	r4, [r3, #16]
 800901c:	615a      	str	r2, [r3, #20]
 800901e:	bd38      	pop	{r3, r4, r5, pc}
 8009020:	2000001c 	.word	0x2000001c
 8009024:	0800a000 	.word	0x0800a000
 8009028:	0800a017 	.word	0x0800a017
 800902c:	abcd330e 	.word	0xabcd330e
 8009030:	e66d1234 	.word	0xe66d1234
 8009034:	0005deec 	.word	0x0005deec

08009038 <rand>:
 8009038:	4b17      	ldr	r3, [pc, #92]	; (8009098 <rand+0x60>)
 800903a:	b510      	push	{r4, lr}
 800903c:	681c      	ldr	r4, [r3, #0]
 800903e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009040:	b9b3      	cbnz	r3, 8009070 <rand+0x38>
 8009042:	2018      	movs	r0, #24
 8009044:	f7ff ff02 	bl	8008e4c <malloc>
 8009048:	63a0      	str	r0, [r4, #56]	; 0x38
 800904a:	b928      	cbnz	r0, 8009058 <rand+0x20>
 800904c:	4602      	mov	r2, r0
 800904e:	4b13      	ldr	r3, [pc, #76]	; (800909c <rand+0x64>)
 8009050:	4813      	ldr	r0, [pc, #76]	; (80090a0 <rand+0x68>)
 8009052:	214e      	movs	r1, #78	; 0x4e
 8009054:	f000 f85a 	bl	800910c <__assert_func>
 8009058:	4a12      	ldr	r2, [pc, #72]	; (80090a4 <rand+0x6c>)
 800905a:	4b13      	ldr	r3, [pc, #76]	; (80090a8 <rand+0x70>)
 800905c:	e9c0 2300 	strd	r2, r3, [r0]
 8009060:	4b12      	ldr	r3, [pc, #72]	; (80090ac <rand+0x74>)
 8009062:	6083      	str	r3, [r0, #8]
 8009064:	230b      	movs	r3, #11
 8009066:	8183      	strh	r3, [r0, #12]
 8009068:	2201      	movs	r2, #1
 800906a:	2300      	movs	r3, #0
 800906c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8009070:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009072:	480f      	ldr	r0, [pc, #60]	; (80090b0 <rand+0x78>)
 8009074:	690a      	ldr	r2, [r1, #16]
 8009076:	694b      	ldr	r3, [r1, #20]
 8009078:	4c0e      	ldr	r4, [pc, #56]	; (80090b4 <rand+0x7c>)
 800907a:	4350      	muls	r0, r2
 800907c:	fb04 0003 	mla	r0, r4, r3, r0
 8009080:	fba2 3404 	umull	r3, r4, r2, r4
 8009084:	1c5a      	adds	r2, r3, #1
 8009086:	4404      	add	r4, r0
 8009088:	f144 0000 	adc.w	r0, r4, #0
 800908c:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8009090:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8009094:	bd10      	pop	{r4, pc}
 8009096:	bf00      	nop
 8009098:	2000001c 	.word	0x2000001c
 800909c:	0800a000 	.word	0x0800a000
 80090a0:	0800a017 	.word	0x0800a017
 80090a4:	abcd330e 	.word	0xabcd330e
 80090a8:	e66d1234 	.word	0xe66d1234
 80090ac:	0005deec 	.word	0x0005deec
 80090b0:	5851f42d 	.word	0x5851f42d
 80090b4:	4c957f2d 	.word	0x4c957f2d

080090b8 <_sbrk_r>:
 80090b8:	b538      	push	{r3, r4, r5, lr}
 80090ba:	4d06      	ldr	r5, [pc, #24]	; (80090d4 <_sbrk_r+0x1c>)
 80090bc:	2300      	movs	r3, #0
 80090be:	4604      	mov	r4, r0
 80090c0:	4608      	mov	r0, r1
 80090c2:	602b      	str	r3, [r5, #0]
 80090c4:	f7ff fe26 	bl	8008d14 <_sbrk>
 80090c8:	1c43      	adds	r3, r0, #1
 80090ca:	d102      	bne.n	80090d2 <_sbrk_r+0x1a>
 80090cc:	682b      	ldr	r3, [r5, #0]
 80090ce:	b103      	cbz	r3, 80090d2 <_sbrk_r+0x1a>
 80090d0:	6023      	str	r3, [r4, #0]
 80090d2:	bd38      	pop	{r3, r4, r5, pc}
 80090d4:	2000301c 	.word	0x2000301c

080090d8 <time>:
 80090d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80090da:	4b0b      	ldr	r3, [pc, #44]	; (8009108 <time+0x30>)
 80090dc:	2200      	movs	r2, #0
 80090de:	4669      	mov	r1, sp
 80090e0:	4604      	mov	r4, r0
 80090e2:	6818      	ldr	r0, [r3, #0]
 80090e4:	f000 f842 	bl	800916c <_gettimeofday_r>
 80090e8:	2800      	cmp	r0, #0
 80090ea:	bfbe      	ittt	lt
 80090ec:	f04f 32ff 	movlt.w	r2, #4294967295
 80090f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80090f4:	e9cd 2300 	strdlt	r2, r3, [sp]
 80090f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80090fc:	b10c      	cbz	r4, 8009102 <time+0x2a>
 80090fe:	e9c4 0100 	strd	r0, r1, [r4]
 8009102:	b004      	add	sp, #16
 8009104:	bd10      	pop	{r4, pc}
 8009106:	bf00      	nop
 8009108:	2000001c 	.word	0x2000001c

0800910c <__assert_func>:
 800910c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800910e:	4614      	mov	r4, r2
 8009110:	461a      	mov	r2, r3
 8009112:	4b09      	ldr	r3, [pc, #36]	; (8009138 <__assert_func+0x2c>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	4605      	mov	r5, r0
 8009118:	68d8      	ldr	r0, [r3, #12]
 800911a:	b14c      	cbz	r4, 8009130 <__assert_func+0x24>
 800911c:	4b07      	ldr	r3, [pc, #28]	; (800913c <__assert_func+0x30>)
 800911e:	9100      	str	r1, [sp, #0]
 8009120:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009124:	4906      	ldr	r1, [pc, #24]	; (8009140 <__assert_func+0x34>)
 8009126:	462b      	mov	r3, r5
 8009128:	f000 f80e 	bl	8009148 <fiprintf>
 800912c:	f000 fbea 	bl	8009904 <abort>
 8009130:	4b04      	ldr	r3, [pc, #16]	; (8009144 <__assert_func+0x38>)
 8009132:	461c      	mov	r4, r3
 8009134:	e7f3      	b.n	800911e <__assert_func+0x12>
 8009136:	bf00      	nop
 8009138:	2000001c 	.word	0x2000001c
 800913c:	0800a076 	.word	0x0800a076
 8009140:	0800a083 	.word	0x0800a083
 8009144:	0800a0b1 	.word	0x0800a0b1

08009148 <fiprintf>:
 8009148:	b40e      	push	{r1, r2, r3}
 800914a:	b503      	push	{r0, r1, lr}
 800914c:	4601      	mov	r1, r0
 800914e:	ab03      	add	r3, sp, #12
 8009150:	4805      	ldr	r0, [pc, #20]	; (8009168 <fiprintf+0x20>)
 8009152:	f853 2b04 	ldr.w	r2, [r3], #4
 8009156:	6800      	ldr	r0, [r0, #0]
 8009158:	9301      	str	r3, [sp, #4]
 800915a:	f000 f84f 	bl	80091fc <_vfiprintf_r>
 800915e:	b002      	add	sp, #8
 8009160:	f85d eb04 	ldr.w	lr, [sp], #4
 8009164:	b003      	add	sp, #12
 8009166:	4770      	bx	lr
 8009168:	2000001c 	.word	0x2000001c

0800916c <_gettimeofday_r>:
 800916c:	b538      	push	{r3, r4, r5, lr}
 800916e:	4d07      	ldr	r5, [pc, #28]	; (800918c <_gettimeofday_r+0x20>)
 8009170:	2300      	movs	r3, #0
 8009172:	4604      	mov	r4, r0
 8009174:	4608      	mov	r0, r1
 8009176:	4611      	mov	r1, r2
 8009178:	602b      	str	r3, [r5, #0]
 800917a:	f000 fed9 	bl	8009f30 <_gettimeofday>
 800917e:	1c43      	adds	r3, r0, #1
 8009180:	d102      	bne.n	8009188 <_gettimeofday_r+0x1c>
 8009182:	682b      	ldr	r3, [r5, #0]
 8009184:	b103      	cbz	r3, 8009188 <_gettimeofday_r+0x1c>
 8009186:	6023      	str	r3, [r4, #0]
 8009188:	bd38      	pop	{r3, r4, r5, pc}
 800918a:	bf00      	nop
 800918c:	2000301c 	.word	0x2000301c

08009190 <__malloc_lock>:
 8009190:	4801      	ldr	r0, [pc, #4]	; (8009198 <__malloc_lock+0x8>)
 8009192:	f000 bd77 	b.w	8009c84 <__retarget_lock_acquire_recursive>
 8009196:	bf00      	nop
 8009198:	20003024 	.word	0x20003024

0800919c <__malloc_unlock>:
 800919c:	4801      	ldr	r0, [pc, #4]	; (80091a4 <__malloc_unlock+0x8>)
 800919e:	f000 bd72 	b.w	8009c86 <__retarget_lock_release_recursive>
 80091a2:	bf00      	nop
 80091a4:	20003024 	.word	0x20003024

080091a8 <__sfputc_r>:
 80091a8:	6893      	ldr	r3, [r2, #8]
 80091aa:	3b01      	subs	r3, #1
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	b410      	push	{r4}
 80091b0:	6093      	str	r3, [r2, #8]
 80091b2:	da08      	bge.n	80091c6 <__sfputc_r+0x1e>
 80091b4:	6994      	ldr	r4, [r2, #24]
 80091b6:	42a3      	cmp	r3, r4
 80091b8:	db01      	blt.n	80091be <__sfputc_r+0x16>
 80091ba:	290a      	cmp	r1, #10
 80091bc:	d103      	bne.n	80091c6 <__sfputc_r+0x1e>
 80091be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091c2:	f000 badf 	b.w	8009784 <__swbuf_r>
 80091c6:	6813      	ldr	r3, [r2, #0]
 80091c8:	1c58      	adds	r0, r3, #1
 80091ca:	6010      	str	r0, [r2, #0]
 80091cc:	7019      	strb	r1, [r3, #0]
 80091ce:	4608      	mov	r0, r1
 80091d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091d4:	4770      	bx	lr

080091d6 <__sfputs_r>:
 80091d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091d8:	4606      	mov	r6, r0
 80091da:	460f      	mov	r7, r1
 80091dc:	4614      	mov	r4, r2
 80091de:	18d5      	adds	r5, r2, r3
 80091e0:	42ac      	cmp	r4, r5
 80091e2:	d101      	bne.n	80091e8 <__sfputs_r+0x12>
 80091e4:	2000      	movs	r0, #0
 80091e6:	e007      	b.n	80091f8 <__sfputs_r+0x22>
 80091e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091ec:	463a      	mov	r2, r7
 80091ee:	4630      	mov	r0, r6
 80091f0:	f7ff ffda 	bl	80091a8 <__sfputc_r>
 80091f4:	1c43      	adds	r3, r0, #1
 80091f6:	d1f3      	bne.n	80091e0 <__sfputs_r+0xa>
 80091f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080091fc <_vfiprintf_r>:
 80091fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009200:	460d      	mov	r5, r1
 8009202:	b09d      	sub	sp, #116	; 0x74
 8009204:	4614      	mov	r4, r2
 8009206:	4698      	mov	r8, r3
 8009208:	4606      	mov	r6, r0
 800920a:	b118      	cbz	r0, 8009214 <_vfiprintf_r+0x18>
 800920c:	6983      	ldr	r3, [r0, #24]
 800920e:	b90b      	cbnz	r3, 8009214 <_vfiprintf_r+0x18>
 8009210:	f000 fc9a 	bl	8009b48 <__sinit>
 8009214:	4b89      	ldr	r3, [pc, #548]	; (800943c <_vfiprintf_r+0x240>)
 8009216:	429d      	cmp	r5, r3
 8009218:	d11b      	bne.n	8009252 <_vfiprintf_r+0x56>
 800921a:	6875      	ldr	r5, [r6, #4]
 800921c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800921e:	07d9      	lsls	r1, r3, #31
 8009220:	d405      	bmi.n	800922e <_vfiprintf_r+0x32>
 8009222:	89ab      	ldrh	r3, [r5, #12]
 8009224:	059a      	lsls	r2, r3, #22
 8009226:	d402      	bmi.n	800922e <_vfiprintf_r+0x32>
 8009228:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800922a:	f000 fd2b 	bl	8009c84 <__retarget_lock_acquire_recursive>
 800922e:	89ab      	ldrh	r3, [r5, #12]
 8009230:	071b      	lsls	r3, r3, #28
 8009232:	d501      	bpl.n	8009238 <_vfiprintf_r+0x3c>
 8009234:	692b      	ldr	r3, [r5, #16]
 8009236:	b9eb      	cbnz	r3, 8009274 <_vfiprintf_r+0x78>
 8009238:	4629      	mov	r1, r5
 800923a:	4630      	mov	r0, r6
 800923c:	f000 faf4 	bl	8009828 <__swsetup_r>
 8009240:	b1c0      	cbz	r0, 8009274 <_vfiprintf_r+0x78>
 8009242:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009244:	07dc      	lsls	r4, r3, #31
 8009246:	d50e      	bpl.n	8009266 <_vfiprintf_r+0x6a>
 8009248:	f04f 30ff 	mov.w	r0, #4294967295
 800924c:	b01d      	add	sp, #116	; 0x74
 800924e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009252:	4b7b      	ldr	r3, [pc, #492]	; (8009440 <_vfiprintf_r+0x244>)
 8009254:	429d      	cmp	r5, r3
 8009256:	d101      	bne.n	800925c <_vfiprintf_r+0x60>
 8009258:	68b5      	ldr	r5, [r6, #8]
 800925a:	e7df      	b.n	800921c <_vfiprintf_r+0x20>
 800925c:	4b79      	ldr	r3, [pc, #484]	; (8009444 <_vfiprintf_r+0x248>)
 800925e:	429d      	cmp	r5, r3
 8009260:	bf08      	it	eq
 8009262:	68f5      	ldreq	r5, [r6, #12]
 8009264:	e7da      	b.n	800921c <_vfiprintf_r+0x20>
 8009266:	89ab      	ldrh	r3, [r5, #12]
 8009268:	0598      	lsls	r0, r3, #22
 800926a:	d4ed      	bmi.n	8009248 <_vfiprintf_r+0x4c>
 800926c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800926e:	f000 fd0a 	bl	8009c86 <__retarget_lock_release_recursive>
 8009272:	e7e9      	b.n	8009248 <_vfiprintf_r+0x4c>
 8009274:	2300      	movs	r3, #0
 8009276:	9309      	str	r3, [sp, #36]	; 0x24
 8009278:	2320      	movs	r3, #32
 800927a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800927e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009282:	2330      	movs	r3, #48	; 0x30
 8009284:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009448 <_vfiprintf_r+0x24c>
 8009288:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800928c:	f04f 0901 	mov.w	r9, #1
 8009290:	4623      	mov	r3, r4
 8009292:	469a      	mov	sl, r3
 8009294:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009298:	b10a      	cbz	r2, 800929e <_vfiprintf_r+0xa2>
 800929a:	2a25      	cmp	r2, #37	; 0x25
 800929c:	d1f9      	bne.n	8009292 <_vfiprintf_r+0x96>
 800929e:	ebba 0b04 	subs.w	fp, sl, r4
 80092a2:	d00b      	beq.n	80092bc <_vfiprintf_r+0xc0>
 80092a4:	465b      	mov	r3, fp
 80092a6:	4622      	mov	r2, r4
 80092a8:	4629      	mov	r1, r5
 80092aa:	4630      	mov	r0, r6
 80092ac:	f7ff ff93 	bl	80091d6 <__sfputs_r>
 80092b0:	3001      	adds	r0, #1
 80092b2:	f000 80aa 	beq.w	800940a <_vfiprintf_r+0x20e>
 80092b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092b8:	445a      	add	r2, fp
 80092ba:	9209      	str	r2, [sp, #36]	; 0x24
 80092bc:	f89a 3000 	ldrb.w	r3, [sl]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	f000 80a2 	beq.w	800940a <_vfiprintf_r+0x20e>
 80092c6:	2300      	movs	r3, #0
 80092c8:	f04f 32ff 	mov.w	r2, #4294967295
 80092cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092d0:	f10a 0a01 	add.w	sl, sl, #1
 80092d4:	9304      	str	r3, [sp, #16]
 80092d6:	9307      	str	r3, [sp, #28]
 80092d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80092dc:	931a      	str	r3, [sp, #104]	; 0x68
 80092de:	4654      	mov	r4, sl
 80092e0:	2205      	movs	r2, #5
 80092e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092e6:	4858      	ldr	r0, [pc, #352]	; (8009448 <_vfiprintf_r+0x24c>)
 80092e8:	f7f6 ff72 	bl	80001d0 <memchr>
 80092ec:	9a04      	ldr	r2, [sp, #16]
 80092ee:	b9d8      	cbnz	r0, 8009328 <_vfiprintf_r+0x12c>
 80092f0:	06d1      	lsls	r1, r2, #27
 80092f2:	bf44      	itt	mi
 80092f4:	2320      	movmi	r3, #32
 80092f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092fa:	0713      	lsls	r3, r2, #28
 80092fc:	bf44      	itt	mi
 80092fe:	232b      	movmi	r3, #43	; 0x2b
 8009300:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009304:	f89a 3000 	ldrb.w	r3, [sl]
 8009308:	2b2a      	cmp	r3, #42	; 0x2a
 800930a:	d015      	beq.n	8009338 <_vfiprintf_r+0x13c>
 800930c:	9a07      	ldr	r2, [sp, #28]
 800930e:	4654      	mov	r4, sl
 8009310:	2000      	movs	r0, #0
 8009312:	f04f 0c0a 	mov.w	ip, #10
 8009316:	4621      	mov	r1, r4
 8009318:	f811 3b01 	ldrb.w	r3, [r1], #1
 800931c:	3b30      	subs	r3, #48	; 0x30
 800931e:	2b09      	cmp	r3, #9
 8009320:	d94e      	bls.n	80093c0 <_vfiprintf_r+0x1c4>
 8009322:	b1b0      	cbz	r0, 8009352 <_vfiprintf_r+0x156>
 8009324:	9207      	str	r2, [sp, #28]
 8009326:	e014      	b.n	8009352 <_vfiprintf_r+0x156>
 8009328:	eba0 0308 	sub.w	r3, r0, r8
 800932c:	fa09 f303 	lsl.w	r3, r9, r3
 8009330:	4313      	orrs	r3, r2
 8009332:	9304      	str	r3, [sp, #16]
 8009334:	46a2      	mov	sl, r4
 8009336:	e7d2      	b.n	80092de <_vfiprintf_r+0xe2>
 8009338:	9b03      	ldr	r3, [sp, #12]
 800933a:	1d19      	adds	r1, r3, #4
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	9103      	str	r1, [sp, #12]
 8009340:	2b00      	cmp	r3, #0
 8009342:	bfbb      	ittet	lt
 8009344:	425b      	neglt	r3, r3
 8009346:	f042 0202 	orrlt.w	r2, r2, #2
 800934a:	9307      	strge	r3, [sp, #28]
 800934c:	9307      	strlt	r3, [sp, #28]
 800934e:	bfb8      	it	lt
 8009350:	9204      	strlt	r2, [sp, #16]
 8009352:	7823      	ldrb	r3, [r4, #0]
 8009354:	2b2e      	cmp	r3, #46	; 0x2e
 8009356:	d10c      	bne.n	8009372 <_vfiprintf_r+0x176>
 8009358:	7863      	ldrb	r3, [r4, #1]
 800935a:	2b2a      	cmp	r3, #42	; 0x2a
 800935c:	d135      	bne.n	80093ca <_vfiprintf_r+0x1ce>
 800935e:	9b03      	ldr	r3, [sp, #12]
 8009360:	1d1a      	adds	r2, r3, #4
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	9203      	str	r2, [sp, #12]
 8009366:	2b00      	cmp	r3, #0
 8009368:	bfb8      	it	lt
 800936a:	f04f 33ff 	movlt.w	r3, #4294967295
 800936e:	3402      	adds	r4, #2
 8009370:	9305      	str	r3, [sp, #20]
 8009372:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009458 <_vfiprintf_r+0x25c>
 8009376:	7821      	ldrb	r1, [r4, #0]
 8009378:	2203      	movs	r2, #3
 800937a:	4650      	mov	r0, sl
 800937c:	f7f6 ff28 	bl	80001d0 <memchr>
 8009380:	b140      	cbz	r0, 8009394 <_vfiprintf_r+0x198>
 8009382:	2340      	movs	r3, #64	; 0x40
 8009384:	eba0 000a 	sub.w	r0, r0, sl
 8009388:	fa03 f000 	lsl.w	r0, r3, r0
 800938c:	9b04      	ldr	r3, [sp, #16]
 800938e:	4303      	orrs	r3, r0
 8009390:	3401      	adds	r4, #1
 8009392:	9304      	str	r3, [sp, #16]
 8009394:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009398:	482c      	ldr	r0, [pc, #176]	; (800944c <_vfiprintf_r+0x250>)
 800939a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800939e:	2206      	movs	r2, #6
 80093a0:	f7f6 ff16 	bl	80001d0 <memchr>
 80093a4:	2800      	cmp	r0, #0
 80093a6:	d03f      	beq.n	8009428 <_vfiprintf_r+0x22c>
 80093a8:	4b29      	ldr	r3, [pc, #164]	; (8009450 <_vfiprintf_r+0x254>)
 80093aa:	bb1b      	cbnz	r3, 80093f4 <_vfiprintf_r+0x1f8>
 80093ac:	9b03      	ldr	r3, [sp, #12]
 80093ae:	3307      	adds	r3, #7
 80093b0:	f023 0307 	bic.w	r3, r3, #7
 80093b4:	3308      	adds	r3, #8
 80093b6:	9303      	str	r3, [sp, #12]
 80093b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093ba:	443b      	add	r3, r7
 80093bc:	9309      	str	r3, [sp, #36]	; 0x24
 80093be:	e767      	b.n	8009290 <_vfiprintf_r+0x94>
 80093c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80093c4:	460c      	mov	r4, r1
 80093c6:	2001      	movs	r0, #1
 80093c8:	e7a5      	b.n	8009316 <_vfiprintf_r+0x11a>
 80093ca:	2300      	movs	r3, #0
 80093cc:	3401      	adds	r4, #1
 80093ce:	9305      	str	r3, [sp, #20]
 80093d0:	4619      	mov	r1, r3
 80093d2:	f04f 0c0a 	mov.w	ip, #10
 80093d6:	4620      	mov	r0, r4
 80093d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093dc:	3a30      	subs	r2, #48	; 0x30
 80093de:	2a09      	cmp	r2, #9
 80093e0:	d903      	bls.n	80093ea <_vfiprintf_r+0x1ee>
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d0c5      	beq.n	8009372 <_vfiprintf_r+0x176>
 80093e6:	9105      	str	r1, [sp, #20]
 80093e8:	e7c3      	b.n	8009372 <_vfiprintf_r+0x176>
 80093ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80093ee:	4604      	mov	r4, r0
 80093f0:	2301      	movs	r3, #1
 80093f2:	e7f0      	b.n	80093d6 <_vfiprintf_r+0x1da>
 80093f4:	ab03      	add	r3, sp, #12
 80093f6:	9300      	str	r3, [sp, #0]
 80093f8:	462a      	mov	r2, r5
 80093fa:	4b16      	ldr	r3, [pc, #88]	; (8009454 <_vfiprintf_r+0x258>)
 80093fc:	a904      	add	r1, sp, #16
 80093fe:	4630      	mov	r0, r6
 8009400:	f3af 8000 	nop.w
 8009404:	4607      	mov	r7, r0
 8009406:	1c78      	adds	r0, r7, #1
 8009408:	d1d6      	bne.n	80093b8 <_vfiprintf_r+0x1bc>
 800940a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800940c:	07d9      	lsls	r1, r3, #31
 800940e:	d405      	bmi.n	800941c <_vfiprintf_r+0x220>
 8009410:	89ab      	ldrh	r3, [r5, #12]
 8009412:	059a      	lsls	r2, r3, #22
 8009414:	d402      	bmi.n	800941c <_vfiprintf_r+0x220>
 8009416:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009418:	f000 fc35 	bl	8009c86 <__retarget_lock_release_recursive>
 800941c:	89ab      	ldrh	r3, [r5, #12]
 800941e:	065b      	lsls	r3, r3, #25
 8009420:	f53f af12 	bmi.w	8009248 <_vfiprintf_r+0x4c>
 8009424:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009426:	e711      	b.n	800924c <_vfiprintf_r+0x50>
 8009428:	ab03      	add	r3, sp, #12
 800942a:	9300      	str	r3, [sp, #0]
 800942c:	462a      	mov	r2, r5
 800942e:	4b09      	ldr	r3, [pc, #36]	; (8009454 <_vfiprintf_r+0x258>)
 8009430:	a904      	add	r1, sp, #16
 8009432:	4630      	mov	r0, r6
 8009434:	f000 f880 	bl	8009538 <_printf_i>
 8009438:	e7e4      	b.n	8009404 <_vfiprintf_r+0x208>
 800943a:	bf00      	nop
 800943c:	0800a108 	.word	0x0800a108
 8009440:	0800a128 	.word	0x0800a128
 8009444:	0800a0e8 	.word	0x0800a0e8
 8009448:	0800a0b2 	.word	0x0800a0b2
 800944c:	0800a0bc 	.word	0x0800a0bc
 8009450:	00000000 	.word	0x00000000
 8009454:	080091d7 	.word	0x080091d7
 8009458:	0800a0b8 	.word	0x0800a0b8

0800945c <_printf_common>:
 800945c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009460:	4616      	mov	r6, r2
 8009462:	4699      	mov	r9, r3
 8009464:	688a      	ldr	r2, [r1, #8]
 8009466:	690b      	ldr	r3, [r1, #16]
 8009468:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800946c:	4293      	cmp	r3, r2
 800946e:	bfb8      	it	lt
 8009470:	4613      	movlt	r3, r2
 8009472:	6033      	str	r3, [r6, #0]
 8009474:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009478:	4607      	mov	r7, r0
 800947a:	460c      	mov	r4, r1
 800947c:	b10a      	cbz	r2, 8009482 <_printf_common+0x26>
 800947e:	3301      	adds	r3, #1
 8009480:	6033      	str	r3, [r6, #0]
 8009482:	6823      	ldr	r3, [r4, #0]
 8009484:	0699      	lsls	r1, r3, #26
 8009486:	bf42      	ittt	mi
 8009488:	6833      	ldrmi	r3, [r6, #0]
 800948a:	3302      	addmi	r3, #2
 800948c:	6033      	strmi	r3, [r6, #0]
 800948e:	6825      	ldr	r5, [r4, #0]
 8009490:	f015 0506 	ands.w	r5, r5, #6
 8009494:	d106      	bne.n	80094a4 <_printf_common+0x48>
 8009496:	f104 0a19 	add.w	sl, r4, #25
 800949a:	68e3      	ldr	r3, [r4, #12]
 800949c:	6832      	ldr	r2, [r6, #0]
 800949e:	1a9b      	subs	r3, r3, r2
 80094a0:	42ab      	cmp	r3, r5
 80094a2:	dc26      	bgt.n	80094f2 <_printf_common+0x96>
 80094a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80094a8:	1e13      	subs	r3, r2, #0
 80094aa:	6822      	ldr	r2, [r4, #0]
 80094ac:	bf18      	it	ne
 80094ae:	2301      	movne	r3, #1
 80094b0:	0692      	lsls	r2, r2, #26
 80094b2:	d42b      	bmi.n	800950c <_printf_common+0xb0>
 80094b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80094b8:	4649      	mov	r1, r9
 80094ba:	4638      	mov	r0, r7
 80094bc:	47c0      	blx	r8
 80094be:	3001      	adds	r0, #1
 80094c0:	d01e      	beq.n	8009500 <_printf_common+0xa4>
 80094c2:	6823      	ldr	r3, [r4, #0]
 80094c4:	68e5      	ldr	r5, [r4, #12]
 80094c6:	6832      	ldr	r2, [r6, #0]
 80094c8:	f003 0306 	and.w	r3, r3, #6
 80094cc:	2b04      	cmp	r3, #4
 80094ce:	bf08      	it	eq
 80094d0:	1aad      	subeq	r5, r5, r2
 80094d2:	68a3      	ldr	r3, [r4, #8]
 80094d4:	6922      	ldr	r2, [r4, #16]
 80094d6:	bf0c      	ite	eq
 80094d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80094dc:	2500      	movne	r5, #0
 80094de:	4293      	cmp	r3, r2
 80094e0:	bfc4      	itt	gt
 80094e2:	1a9b      	subgt	r3, r3, r2
 80094e4:	18ed      	addgt	r5, r5, r3
 80094e6:	2600      	movs	r6, #0
 80094e8:	341a      	adds	r4, #26
 80094ea:	42b5      	cmp	r5, r6
 80094ec:	d11a      	bne.n	8009524 <_printf_common+0xc8>
 80094ee:	2000      	movs	r0, #0
 80094f0:	e008      	b.n	8009504 <_printf_common+0xa8>
 80094f2:	2301      	movs	r3, #1
 80094f4:	4652      	mov	r2, sl
 80094f6:	4649      	mov	r1, r9
 80094f8:	4638      	mov	r0, r7
 80094fa:	47c0      	blx	r8
 80094fc:	3001      	adds	r0, #1
 80094fe:	d103      	bne.n	8009508 <_printf_common+0xac>
 8009500:	f04f 30ff 	mov.w	r0, #4294967295
 8009504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009508:	3501      	adds	r5, #1
 800950a:	e7c6      	b.n	800949a <_printf_common+0x3e>
 800950c:	18e1      	adds	r1, r4, r3
 800950e:	1c5a      	adds	r2, r3, #1
 8009510:	2030      	movs	r0, #48	; 0x30
 8009512:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009516:	4422      	add	r2, r4
 8009518:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800951c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009520:	3302      	adds	r3, #2
 8009522:	e7c7      	b.n	80094b4 <_printf_common+0x58>
 8009524:	2301      	movs	r3, #1
 8009526:	4622      	mov	r2, r4
 8009528:	4649      	mov	r1, r9
 800952a:	4638      	mov	r0, r7
 800952c:	47c0      	blx	r8
 800952e:	3001      	adds	r0, #1
 8009530:	d0e6      	beq.n	8009500 <_printf_common+0xa4>
 8009532:	3601      	adds	r6, #1
 8009534:	e7d9      	b.n	80094ea <_printf_common+0x8e>
	...

08009538 <_printf_i>:
 8009538:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800953c:	460c      	mov	r4, r1
 800953e:	4691      	mov	r9, r2
 8009540:	7e27      	ldrb	r7, [r4, #24]
 8009542:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009544:	2f78      	cmp	r7, #120	; 0x78
 8009546:	4680      	mov	r8, r0
 8009548:	469a      	mov	sl, r3
 800954a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800954e:	d807      	bhi.n	8009560 <_printf_i+0x28>
 8009550:	2f62      	cmp	r7, #98	; 0x62
 8009552:	d80a      	bhi.n	800956a <_printf_i+0x32>
 8009554:	2f00      	cmp	r7, #0
 8009556:	f000 80d8 	beq.w	800970a <_printf_i+0x1d2>
 800955a:	2f58      	cmp	r7, #88	; 0x58
 800955c:	f000 80a3 	beq.w	80096a6 <_printf_i+0x16e>
 8009560:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009564:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009568:	e03a      	b.n	80095e0 <_printf_i+0xa8>
 800956a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800956e:	2b15      	cmp	r3, #21
 8009570:	d8f6      	bhi.n	8009560 <_printf_i+0x28>
 8009572:	a001      	add	r0, pc, #4	; (adr r0, 8009578 <_printf_i+0x40>)
 8009574:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009578:	080095d1 	.word	0x080095d1
 800957c:	080095e5 	.word	0x080095e5
 8009580:	08009561 	.word	0x08009561
 8009584:	08009561 	.word	0x08009561
 8009588:	08009561 	.word	0x08009561
 800958c:	08009561 	.word	0x08009561
 8009590:	080095e5 	.word	0x080095e5
 8009594:	08009561 	.word	0x08009561
 8009598:	08009561 	.word	0x08009561
 800959c:	08009561 	.word	0x08009561
 80095a0:	08009561 	.word	0x08009561
 80095a4:	080096f1 	.word	0x080096f1
 80095a8:	08009615 	.word	0x08009615
 80095ac:	080096d3 	.word	0x080096d3
 80095b0:	08009561 	.word	0x08009561
 80095b4:	08009561 	.word	0x08009561
 80095b8:	08009713 	.word	0x08009713
 80095bc:	08009561 	.word	0x08009561
 80095c0:	08009615 	.word	0x08009615
 80095c4:	08009561 	.word	0x08009561
 80095c8:	08009561 	.word	0x08009561
 80095cc:	080096db 	.word	0x080096db
 80095d0:	680b      	ldr	r3, [r1, #0]
 80095d2:	1d1a      	adds	r2, r3, #4
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	600a      	str	r2, [r1, #0]
 80095d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80095dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80095e0:	2301      	movs	r3, #1
 80095e2:	e0a3      	b.n	800972c <_printf_i+0x1f4>
 80095e4:	6825      	ldr	r5, [r4, #0]
 80095e6:	6808      	ldr	r0, [r1, #0]
 80095e8:	062e      	lsls	r6, r5, #24
 80095ea:	f100 0304 	add.w	r3, r0, #4
 80095ee:	d50a      	bpl.n	8009606 <_printf_i+0xce>
 80095f0:	6805      	ldr	r5, [r0, #0]
 80095f2:	600b      	str	r3, [r1, #0]
 80095f4:	2d00      	cmp	r5, #0
 80095f6:	da03      	bge.n	8009600 <_printf_i+0xc8>
 80095f8:	232d      	movs	r3, #45	; 0x2d
 80095fa:	426d      	negs	r5, r5
 80095fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009600:	485e      	ldr	r0, [pc, #376]	; (800977c <_printf_i+0x244>)
 8009602:	230a      	movs	r3, #10
 8009604:	e019      	b.n	800963a <_printf_i+0x102>
 8009606:	f015 0f40 	tst.w	r5, #64	; 0x40
 800960a:	6805      	ldr	r5, [r0, #0]
 800960c:	600b      	str	r3, [r1, #0]
 800960e:	bf18      	it	ne
 8009610:	b22d      	sxthne	r5, r5
 8009612:	e7ef      	b.n	80095f4 <_printf_i+0xbc>
 8009614:	680b      	ldr	r3, [r1, #0]
 8009616:	6825      	ldr	r5, [r4, #0]
 8009618:	1d18      	adds	r0, r3, #4
 800961a:	6008      	str	r0, [r1, #0]
 800961c:	0628      	lsls	r0, r5, #24
 800961e:	d501      	bpl.n	8009624 <_printf_i+0xec>
 8009620:	681d      	ldr	r5, [r3, #0]
 8009622:	e002      	b.n	800962a <_printf_i+0xf2>
 8009624:	0669      	lsls	r1, r5, #25
 8009626:	d5fb      	bpl.n	8009620 <_printf_i+0xe8>
 8009628:	881d      	ldrh	r5, [r3, #0]
 800962a:	4854      	ldr	r0, [pc, #336]	; (800977c <_printf_i+0x244>)
 800962c:	2f6f      	cmp	r7, #111	; 0x6f
 800962e:	bf0c      	ite	eq
 8009630:	2308      	moveq	r3, #8
 8009632:	230a      	movne	r3, #10
 8009634:	2100      	movs	r1, #0
 8009636:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800963a:	6866      	ldr	r6, [r4, #4]
 800963c:	60a6      	str	r6, [r4, #8]
 800963e:	2e00      	cmp	r6, #0
 8009640:	bfa2      	ittt	ge
 8009642:	6821      	ldrge	r1, [r4, #0]
 8009644:	f021 0104 	bicge.w	r1, r1, #4
 8009648:	6021      	strge	r1, [r4, #0]
 800964a:	b90d      	cbnz	r5, 8009650 <_printf_i+0x118>
 800964c:	2e00      	cmp	r6, #0
 800964e:	d04d      	beq.n	80096ec <_printf_i+0x1b4>
 8009650:	4616      	mov	r6, r2
 8009652:	fbb5 f1f3 	udiv	r1, r5, r3
 8009656:	fb03 5711 	mls	r7, r3, r1, r5
 800965a:	5dc7      	ldrb	r7, [r0, r7]
 800965c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009660:	462f      	mov	r7, r5
 8009662:	42bb      	cmp	r3, r7
 8009664:	460d      	mov	r5, r1
 8009666:	d9f4      	bls.n	8009652 <_printf_i+0x11a>
 8009668:	2b08      	cmp	r3, #8
 800966a:	d10b      	bne.n	8009684 <_printf_i+0x14c>
 800966c:	6823      	ldr	r3, [r4, #0]
 800966e:	07df      	lsls	r7, r3, #31
 8009670:	d508      	bpl.n	8009684 <_printf_i+0x14c>
 8009672:	6923      	ldr	r3, [r4, #16]
 8009674:	6861      	ldr	r1, [r4, #4]
 8009676:	4299      	cmp	r1, r3
 8009678:	bfde      	ittt	le
 800967a:	2330      	movle	r3, #48	; 0x30
 800967c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009680:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009684:	1b92      	subs	r2, r2, r6
 8009686:	6122      	str	r2, [r4, #16]
 8009688:	f8cd a000 	str.w	sl, [sp]
 800968c:	464b      	mov	r3, r9
 800968e:	aa03      	add	r2, sp, #12
 8009690:	4621      	mov	r1, r4
 8009692:	4640      	mov	r0, r8
 8009694:	f7ff fee2 	bl	800945c <_printf_common>
 8009698:	3001      	adds	r0, #1
 800969a:	d14c      	bne.n	8009736 <_printf_i+0x1fe>
 800969c:	f04f 30ff 	mov.w	r0, #4294967295
 80096a0:	b004      	add	sp, #16
 80096a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096a6:	4835      	ldr	r0, [pc, #212]	; (800977c <_printf_i+0x244>)
 80096a8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80096ac:	6823      	ldr	r3, [r4, #0]
 80096ae:	680e      	ldr	r6, [r1, #0]
 80096b0:	061f      	lsls	r7, r3, #24
 80096b2:	f856 5b04 	ldr.w	r5, [r6], #4
 80096b6:	600e      	str	r6, [r1, #0]
 80096b8:	d514      	bpl.n	80096e4 <_printf_i+0x1ac>
 80096ba:	07d9      	lsls	r1, r3, #31
 80096bc:	bf44      	itt	mi
 80096be:	f043 0320 	orrmi.w	r3, r3, #32
 80096c2:	6023      	strmi	r3, [r4, #0]
 80096c4:	b91d      	cbnz	r5, 80096ce <_printf_i+0x196>
 80096c6:	6823      	ldr	r3, [r4, #0]
 80096c8:	f023 0320 	bic.w	r3, r3, #32
 80096cc:	6023      	str	r3, [r4, #0]
 80096ce:	2310      	movs	r3, #16
 80096d0:	e7b0      	b.n	8009634 <_printf_i+0xfc>
 80096d2:	6823      	ldr	r3, [r4, #0]
 80096d4:	f043 0320 	orr.w	r3, r3, #32
 80096d8:	6023      	str	r3, [r4, #0]
 80096da:	2378      	movs	r3, #120	; 0x78
 80096dc:	4828      	ldr	r0, [pc, #160]	; (8009780 <_printf_i+0x248>)
 80096de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80096e2:	e7e3      	b.n	80096ac <_printf_i+0x174>
 80096e4:	065e      	lsls	r6, r3, #25
 80096e6:	bf48      	it	mi
 80096e8:	b2ad      	uxthmi	r5, r5
 80096ea:	e7e6      	b.n	80096ba <_printf_i+0x182>
 80096ec:	4616      	mov	r6, r2
 80096ee:	e7bb      	b.n	8009668 <_printf_i+0x130>
 80096f0:	680b      	ldr	r3, [r1, #0]
 80096f2:	6826      	ldr	r6, [r4, #0]
 80096f4:	6960      	ldr	r0, [r4, #20]
 80096f6:	1d1d      	adds	r5, r3, #4
 80096f8:	600d      	str	r5, [r1, #0]
 80096fa:	0635      	lsls	r5, r6, #24
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	d501      	bpl.n	8009704 <_printf_i+0x1cc>
 8009700:	6018      	str	r0, [r3, #0]
 8009702:	e002      	b.n	800970a <_printf_i+0x1d2>
 8009704:	0671      	lsls	r1, r6, #25
 8009706:	d5fb      	bpl.n	8009700 <_printf_i+0x1c8>
 8009708:	8018      	strh	r0, [r3, #0]
 800970a:	2300      	movs	r3, #0
 800970c:	6123      	str	r3, [r4, #16]
 800970e:	4616      	mov	r6, r2
 8009710:	e7ba      	b.n	8009688 <_printf_i+0x150>
 8009712:	680b      	ldr	r3, [r1, #0]
 8009714:	1d1a      	adds	r2, r3, #4
 8009716:	600a      	str	r2, [r1, #0]
 8009718:	681e      	ldr	r6, [r3, #0]
 800971a:	6862      	ldr	r2, [r4, #4]
 800971c:	2100      	movs	r1, #0
 800971e:	4630      	mov	r0, r6
 8009720:	f7f6 fd56 	bl	80001d0 <memchr>
 8009724:	b108      	cbz	r0, 800972a <_printf_i+0x1f2>
 8009726:	1b80      	subs	r0, r0, r6
 8009728:	6060      	str	r0, [r4, #4]
 800972a:	6863      	ldr	r3, [r4, #4]
 800972c:	6123      	str	r3, [r4, #16]
 800972e:	2300      	movs	r3, #0
 8009730:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009734:	e7a8      	b.n	8009688 <_printf_i+0x150>
 8009736:	6923      	ldr	r3, [r4, #16]
 8009738:	4632      	mov	r2, r6
 800973a:	4649      	mov	r1, r9
 800973c:	4640      	mov	r0, r8
 800973e:	47d0      	blx	sl
 8009740:	3001      	adds	r0, #1
 8009742:	d0ab      	beq.n	800969c <_printf_i+0x164>
 8009744:	6823      	ldr	r3, [r4, #0]
 8009746:	079b      	lsls	r3, r3, #30
 8009748:	d413      	bmi.n	8009772 <_printf_i+0x23a>
 800974a:	68e0      	ldr	r0, [r4, #12]
 800974c:	9b03      	ldr	r3, [sp, #12]
 800974e:	4298      	cmp	r0, r3
 8009750:	bfb8      	it	lt
 8009752:	4618      	movlt	r0, r3
 8009754:	e7a4      	b.n	80096a0 <_printf_i+0x168>
 8009756:	2301      	movs	r3, #1
 8009758:	4632      	mov	r2, r6
 800975a:	4649      	mov	r1, r9
 800975c:	4640      	mov	r0, r8
 800975e:	47d0      	blx	sl
 8009760:	3001      	adds	r0, #1
 8009762:	d09b      	beq.n	800969c <_printf_i+0x164>
 8009764:	3501      	adds	r5, #1
 8009766:	68e3      	ldr	r3, [r4, #12]
 8009768:	9903      	ldr	r1, [sp, #12]
 800976a:	1a5b      	subs	r3, r3, r1
 800976c:	42ab      	cmp	r3, r5
 800976e:	dcf2      	bgt.n	8009756 <_printf_i+0x21e>
 8009770:	e7eb      	b.n	800974a <_printf_i+0x212>
 8009772:	2500      	movs	r5, #0
 8009774:	f104 0619 	add.w	r6, r4, #25
 8009778:	e7f5      	b.n	8009766 <_printf_i+0x22e>
 800977a:	bf00      	nop
 800977c:	0800a0c3 	.word	0x0800a0c3
 8009780:	0800a0d4 	.word	0x0800a0d4

08009784 <__swbuf_r>:
 8009784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009786:	460e      	mov	r6, r1
 8009788:	4614      	mov	r4, r2
 800978a:	4605      	mov	r5, r0
 800978c:	b118      	cbz	r0, 8009796 <__swbuf_r+0x12>
 800978e:	6983      	ldr	r3, [r0, #24]
 8009790:	b90b      	cbnz	r3, 8009796 <__swbuf_r+0x12>
 8009792:	f000 f9d9 	bl	8009b48 <__sinit>
 8009796:	4b21      	ldr	r3, [pc, #132]	; (800981c <__swbuf_r+0x98>)
 8009798:	429c      	cmp	r4, r3
 800979a:	d12b      	bne.n	80097f4 <__swbuf_r+0x70>
 800979c:	686c      	ldr	r4, [r5, #4]
 800979e:	69a3      	ldr	r3, [r4, #24]
 80097a0:	60a3      	str	r3, [r4, #8]
 80097a2:	89a3      	ldrh	r3, [r4, #12]
 80097a4:	071a      	lsls	r2, r3, #28
 80097a6:	d52f      	bpl.n	8009808 <__swbuf_r+0x84>
 80097a8:	6923      	ldr	r3, [r4, #16]
 80097aa:	b36b      	cbz	r3, 8009808 <__swbuf_r+0x84>
 80097ac:	6923      	ldr	r3, [r4, #16]
 80097ae:	6820      	ldr	r0, [r4, #0]
 80097b0:	1ac0      	subs	r0, r0, r3
 80097b2:	6963      	ldr	r3, [r4, #20]
 80097b4:	b2f6      	uxtb	r6, r6
 80097b6:	4283      	cmp	r3, r0
 80097b8:	4637      	mov	r7, r6
 80097ba:	dc04      	bgt.n	80097c6 <__swbuf_r+0x42>
 80097bc:	4621      	mov	r1, r4
 80097be:	4628      	mov	r0, r5
 80097c0:	f000 f92e 	bl	8009a20 <_fflush_r>
 80097c4:	bb30      	cbnz	r0, 8009814 <__swbuf_r+0x90>
 80097c6:	68a3      	ldr	r3, [r4, #8]
 80097c8:	3b01      	subs	r3, #1
 80097ca:	60a3      	str	r3, [r4, #8]
 80097cc:	6823      	ldr	r3, [r4, #0]
 80097ce:	1c5a      	adds	r2, r3, #1
 80097d0:	6022      	str	r2, [r4, #0]
 80097d2:	701e      	strb	r6, [r3, #0]
 80097d4:	6963      	ldr	r3, [r4, #20]
 80097d6:	3001      	adds	r0, #1
 80097d8:	4283      	cmp	r3, r0
 80097da:	d004      	beq.n	80097e6 <__swbuf_r+0x62>
 80097dc:	89a3      	ldrh	r3, [r4, #12]
 80097de:	07db      	lsls	r3, r3, #31
 80097e0:	d506      	bpl.n	80097f0 <__swbuf_r+0x6c>
 80097e2:	2e0a      	cmp	r6, #10
 80097e4:	d104      	bne.n	80097f0 <__swbuf_r+0x6c>
 80097e6:	4621      	mov	r1, r4
 80097e8:	4628      	mov	r0, r5
 80097ea:	f000 f919 	bl	8009a20 <_fflush_r>
 80097ee:	b988      	cbnz	r0, 8009814 <__swbuf_r+0x90>
 80097f0:	4638      	mov	r0, r7
 80097f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097f4:	4b0a      	ldr	r3, [pc, #40]	; (8009820 <__swbuf_r+0x9c>)
 80097f6:	429c      	cmp	r4, r3
 80097f8:	d101      	bne.n	80097fe <__swbuf_r+0x7a>
 80097fa:	68ac      	ldr	r4, [r5, #8]
 80097fc:	e7cf      	b.n	800979e <__swbuf_r+0x1a>
 80097fe:	4b09      	ldr	r3, [pc, #36]	; (8009824 <__swbuf_r+0xa0>)
 8009800:	429c      	cmp	r4, r3
 8009802:	bf08      	it	eq
 8009804:	68ec      	ldreq	r4, [r5, #12]
 8009806:	e7ca      	b.n	800979e <__swbuf_r+0x1a>
 8009808:	4621      	mov	r1, r4
 800980a:	4628      	mov	r0, r5
 800980c:	f000 f80c 	bl	8009828 <__swsetup_r>
 8009810:	2800      	cmp	r0, #0
 8009812:	d0cb      	beq.n	80097ac <__swbuf_r+0x28>
 8009814:	f04f 37ff 	mov.w	r7, #4294967295
 8009818:	e7ea      	b.n	80097f0 <__swbuf_r+0x6c>
 800981a:	bf00      	nop
 800981c:	0800a108 	.word	0x0800a108
 8009820:	0800a128 	.word	0x0800a128
 8009824:	0800a0e8 	.word	0x0800a0e8

08009828 <__swsetup_r>:
 8009828:	4b32      	ldr	r3, [pc, #200]	; (80098f4 <__swsetup_r+0xcc>)
 800982a:	b570      	push	{r4, r5, r6, lr}
 800982c:	681d      	ldr	r5, [r3, #0]
 800982e:	4606      	mov	r6, r0
 8009830:	460c      	mov	r4, r1
 8009832:	b125      	cbz	r5, 800983e <__swsetup_r+0x16>
 8009834:	69ab      	ldr	r3, [r5, #24]
 8009836:	b913      	cbnz	r3, 800983e <__swsetup_r+0x16>
 8009838:	4628      	mov	r0, r5
 800983a:	f000 f985 	bl	8009b48 <__sinit>
 800983e:	4b2e      	ldr	r3, [pc, #184]	; (80098f8 <__swsetup_r+0xd0>)
 8009840:	429c      	cmp	r4, r3
 8009842:	d10f      	bne.n	8009864 <__swsetup_r+0x3c>
 8009844:	686c      	ldr	r4, [r5, #4]
 8009846:	89a3      	ldrh	r3, [r4, #12]
 8009848:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800984c:	0719      	lsls	r1, r3, #28
 800984e:	d42c      	bmi.n	80098aa <__swsetup_r+0x82>
 8009850:	06dd      	lsls	r5, r3, #27
 8009852:	d411      	bmi.n	8009878 <__swsetup_r+0x50>
 8009854:	2309      	movs	r3, #9
 8009856:	6033      	str	r3, [r6, #0]
 8009858:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800985c:	81a3      	strh	r3, [r4, #12]
 800985e:	f04f 30ff 	mov.w	r0, #4294967295
 8009862:	e03e      	b.n	80098e2 <__swsetup_r+0xba>
 8009864:	4b25      	ldr	r3, [pc, #148]	; (80098fc <__swsetup_r+0xd4>)
 8009866:	429c      	cmp	r4, r3
 8009868:	d101      	bne.n	800986e <__swsetup_r+0x46>
 800986a:	68ac      	ldr	r4, [r5, #8]
 800986c:	e7eb      	b.n	8009846 <__swsetup_r+0x1e>
 800986e:	4b24      	ldr	r3, [pc, #144]	; (8009900 <__swsetup_r+0xd8>)
 8009870:	429c      	cmp	r4, r3
 8009872:	bf08      	it	eq
 8009874:	68ec      	ldreq	r4, [r5, #12]
 8009876:	e7e6      	b.n	8009846 <__swsetup_r+0x1e>
 8009878:	0758      	lsls	r0, r3, #29
 800987a:	d512      	bpl.n	80098a2 <__swsetup_r+0x7a>
 800987c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800987e:	b141      	cbz	r1, 8009892 <__swsetup_r+0x6a>
 8009880:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009884:	4299      	cmp	r1, r3
 8009886:	d002      	beq.n	800988e <__swsetup_r+0x66>
 8009888:	4630      	mov	r0, r6
 800988a:	f7ff fafd 	bl	8008e88 <_free_r>
 800988e:	2300      	movs	r3, #0
 8009890:	6363      	str	r3, [r4, #52]	; 0x34
 8009892:	89a3      	ldrh	r3, [r4, #12]
 8009894:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009898:	81a3      	strh	r3, [r4, #12]
 800989a:	2300      	movs	r3, #0
 800989c:	6063      	str	r3, [r4, #4]
 800989e:	6923      	ldr	r3, [r4, #16]
 80098a0:	6023      	str	r3, [r4, #0]
 80098a2:	89a3      	ldrh	r3, [r4, #12]
 80098a4:	f043 0308 	orr.w	r3, r3, #8
 80098a8:	81a3      	strh	r3, [r4, #12]
 80098aa:	6923      	ldr	r3, [r4, #16]
 80098ac:	b94b      	cbnz	r3, 80098c2 <__swsetup_r+0x9a>
 80098ae:	89a3      	ldrh	r3, [r4, #12]
 80098b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80098b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80098b8:	d003      	beq.n	80098c2 <__swsetup_r+0x9a>
 80098ba:	4621      	mov	r1, r4
 80098bc:	4630      	mov	r0, r6
 80098be:	f000 fa07 	bl	8009cd0 <__smakebuf_r>
 80098c2:	89a0      	ldrh	r0, [r4, #12]
 80098c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80098c8:	f010 0301 	ands.w	r3, r0, #1
 80098cc:	d00a      	beq.n	80098e4 <__swsetup_r+0xbc>
 80098ce:	2300      	movs	r3, #0
 80098d0:	60a3      	str	r3, [r4, #8]
 80098d2:	6963      	ldr	r3, [r4, #20]
 80098d4:	425b      	negs	r3, r3
 80098d6:	61a3      	str	r3, [r4, #24]
 80098d8:	6923      	ldr	r3, [r4, #16]
 80098da:	b943      	cbnz	r3, 80098ee <__swsetup_r+0xc6>
 80098dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80098e0:	d1ba      	bne.n	8009858 <__swsetup_r+0x30>
 80098e2:	bd70      	pop	{r4, r5, r6, pc}
 80098e4:	0781      	lsls	r1, r0, #30
 80098e6:	bf58      	it	pl
 80098e8:	6963      	ldrpl	r3, [r4, #20]
 80098ea:	60a3      	str	r3, [r4, #8]
 80098ec:	e7f4      	b.n	80098d8 <__swsetup_r+0xb0>
 80098ee:	2000      	movs	r0, #0
 80098f0:	e7f7      	b.n	80098e2 <__swsetup_r+0xba>
 80098f2:	bf00      	nop
 80098f4:	2000001c 	.word	0x2000001c
 80098f8:	0800a108 	.word	0x0800a108
 80098fc:	0800a128 	.word	0x0800a128
 8009900:	0800a0e8 	.word	0x0800a0e8

08009904 <abort>:
 8009904:	b508      	push	{r3, lr}
 8009906:	2006      	movs	r0, #6
 8009908:	f000 fa4a 	bl	8009da0 <raise>
 800990c:	2001      	movs	r0, #1
 800990e:	f7ff f989 	bl	8008c24 <_exit>
	...

08009914 <__sflush_r>:
 8009914:	898a      	ldrh	r2, [r1, #12]
 8009916:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800991a:	4605      	mov	r5, r0
 800991c:	0710      	lsls	r0, r2, #28
 800991e:	460c      	mov	r4, r1
 8009920:	d458      	bmi.n	80099d4 <__sflush_r+0xc0>
 8009922:	684b      	ldr	r3, [r1, #4]
 8009924:	2b00      	cmp	r3, #0
 8009926:	dc05      	bgt.n	8009934 <__sflush_r+0x20>
 8009928:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800992a:	2b00      	cmp	r3, #0
 800992c:	dc02      	bgt.n	8009934 <__sflush_r+0x20>
 800992e:	2000      	movs	r0, #0
 8009930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009934:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009936:	2e00      	cmp	r6, #0
 8009938:	d0f9      	beq.n	800992e <__sflush_r+0x1a>
 800993a:	2300      	movs	r3, #0
 800993c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009940:	682f      	ldr	r7, [r5, #0]
 8009942:	602b      	str	r3, [r5, #0]
 8009944:	d032      	beq.n	80099ac <__sflush_r+0x98>
 8009946:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009948:	89a3      	ldrh	r3, [r4, #12]
 800994a:	075a      	lsls	r2, r3, #29
 800994c:	d505      	bpl.n	800995a <__sflush_r+0x46>
 800994e:	6863      	ldr	r3, [r4, #4]
 8009950:	1ac0      	subs	r0, r0, r3
 8009952:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009954:	b10b      	cbz	r3, 800995a <__sflush_r+0x46>
 8009956:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009958:	1ac0      	subs	r0, r0, r3
 800995a:	2300      	movs	r3, #0
 800995c:	4602      	mov	r2, r0
 800995e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009960:	6a21      	ldr	r1, [r4, #32]
 8009962:	4628      	mov	r0, r5
 8009964:	47b0      	blx	r6
 8009966:	1c43      	adds	r3, r0, #1
 8009968:	89a3      	ldrh	r3, [r4, #12]
 800996a:	d106      	bne.n	800997a <__sflush_r+0x66>
 800996c:	6829      	ldr	r1, [r5, #0]
 800996e:	291d      	cmp	r1, #29
 8009970:	d82c      	bhi.n	80099cc <__sflush_r+0xb8>
 8009972:	4a2a      	ldr	r2, [pc, #168]	; (8009a1c <__sflush_r+0x108>)
 8009974:	40ca      	lsrs	r2, r1
 8009976:	07d6      	lsls	r6, r2, #31
 8009978:	d528      	bpl.n	80099cc <__sflush_r+0xb8>
 800997a:	2200      	movs	r2, #0
 800997c:	6062      	str	r2, [r4, #4]
 800997e:	04d9      	lsls	r1, r3, #19
 8009980:	6922      	ldr	r2, [r4, #16]
 8009982:	6022      	str	r2, [r4, #0]
 8009984:	d504      	bpl.n	8009990 <__sflush_r+0x7c>
 8009986:	1c42      	adds	r2, r0, #1
 8009988:	d101      	bne.n	800998e <__sflush_r+0x7a>
 800998a:	682b      	ldr	r3, [r5, #0]
 800998c:	b903      	cbnz	r3, 8009990 <__sflush_r+0x7c>
 800998e:	6560      	str	r0, [r4, #84]	; 0x54
 8009990:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009992:	602f      	str	r7, [r5, #0]
 8009994:	2900      	cmp	r1, #0
 8009996:	d0ca      	beq.n	800992e <__sflush_r+0x1a>
 8009998:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800999c:	4299      	cmp	r1, r3
 800999e:	d002      	beq.n	80099a6 <__sflush_r+0x92>
 80099a0:	4628      	mov	r0, r5
 80099a2:	f7ff fa71 	bl	8008e88 <_free_r>
 80099a6:	2000      	movs	r0, #0
 80099a8:	6360      	str	r0, [r4, #52]	; 0x34
 80099aa:	e7c1      	b.n	8009930 <__sflush_r+0x1c>
 80099ac:	6a21      	ldr	r1, [r4, #32]
 80099ae:	2301      	movs	r3, #1
 80099b0:	4628      	mov	r0, r5
 80099b2:	47b0      	blx	r6
 80099b4:	1c41      	adds	r1, r0, #1
 80099b6:	d1c7      	bne.n	8009948 <__sflush_r+0x34>
 80099b8:	682b      	ldr	r3, [r5, #0]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d0c4      	beq.n	8009948 <__sflush_r+0x34>
 80099be:	2b1d      	cmp	r3, #29
 80099c0:	d001      	beq.n	80099c6 <__sflush_r+0xb2>
 80099c2:	2b16      	cmp	r3, #22
 80099c4:	d101      	bne.n	80099ca <__sflush_r+0xb6>
 80099c6:	602f      	str	r7, [r5, #0]
 80099c8:	e7b1      	b.n	800992e <__sflush_r+0x1a>
 80099ca:	89a3      	ldrh	r3, [r4, #12]
 80099cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099d0:	81a3      	strh	r3, [r4, #12]
 80099d2:	e7ad      	b.n	8009930 <__sflush_r+0x1c>
 80099d4:	690f      	ldr	r7, [r1, #16]
 80099d6:	2f00      	cmp	r7, #0
 80099d8:	d0a9      	beq.n	800992e <__sflush_r+0x1a>
 80099da:	0793      	lsls	r3, r2, #30
 80099dc:	680e      	ldr	r6, [r1, #0]
 80099de:	bf08      	it	eq
 80099e0:	694b      	ldreq	r3, [r1, #20]
 80099e2:	600f      	str	r7, [r1, #0]
 80099e4:	bf18      	it	ne
 80099e6:	2300      	movne	r3, #0
 80099e8:	eba6 0807 	sub.w	r8, r6, r7
 80099ec:	608b      	str	r3, [r1, #8]
 80099ee:	f1b8 0f00 	cmp.w	r8, #0
 80099f2:	dd9c      	ble.n	800992e <__sflush_r+0x1a>
 80099f4:	6a21      	ldr	r1, [r4, #32]
 80099f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80099f8:	4643      	mov	r3, r8
 80099fa:	463a      	mov	r2, r7
 80099fc:	4628      	mov	r0, r5
 80099fe:	47b0      	blx	r6
 8009a00:	2800      	cmp	r0, #0
 8009a02:	dc06      	bgt.n	8009a12 <__sflush_r+0xfe>
 8009a04:	89a3      	ldrh	r3, [r4, #12]
 8009a06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a0a:	81a3      	strh	r3, [r4, #12]
 8009a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a10:	e78e      	b.n	8009930 <__sflush_r+0x1c>
 8009a12:	4407      	add	r7, r0
 8009a14:	eba8 0800 	sub.w	r8, r8, r0
 8009a18:	e7e9      	b.n	80099ee <__sflush_r+0xda>
 8009a1a:	bf00      	nop
 8009a1c:	20400001 	.word	0x20400001

08009a20 <_fflush_r>:
 8009a20:	b538      	push	{r3, r4, r5, lr}
 8009a22:	690b      	ldr	r3, [r1, #16]
 8009a24:	4605      	mov	r5, r0
 8009a26:	460c      	mov	r4, r1
 8009a28:	b913      	cbnz	r3, 8009a30 <_fflush_r+0x10>
 8009a2a:	2500      	movs	r5, #0
 8009a2c:	4628      	mov	r0, r5
 8009a2e:	bd38      	pop	{r3, r4, r5, pc}
 8009a30:	b118      	cbz	r0, 8009a3a <_fflush_r+0x1a>
 8009a32:	6983      	ldr	r3, [r0, #24]
 8009a34:	b90b      	cbnz	r3, 8009a3a <_fflush_r+0x1a>
 8009a36:	f000 f887 	bl	8009b48 <__sinit>
 8009a3a:	4b14      	ldr	r3, [pc, #80]	; (8009a8c <_fflush_r+0x6c>)
 8009a3c:	429c      	cmp	r4, r3
 8009a3e:	d11b      	bne.n	8009a78 <_fflush_r+0x58>
 8009a40:	686c      	ldr	r4, [r5, #4]
 8009a42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d0ef      	beq.n	8009a2a <_fflush_r+0xa>
 8009a4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009a4c:	07d0      	lsls	r0, r2, #31
 8009a4e:	d404      	bmi.n	8009a5a <_fflush_r+0x3a>
 8009a50:	0599      	lsls	r1, r3, #22
 8009a52:	d402      	bmi.n	8009a5a <_fflush_r+0x3a>
 8009a54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a56:	f000 f915 	bl	8009c84 <__retarget_lock_acquire_recursive>
 8009a5a:	4628      	mov	r0, r5
 8009a5c:	4621      	mov	r1, r4
 8009a5e:	f7ff ff59 	bl	8009914 <__sflush_r>
 8009a62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a64:	07da      	lsls	r2, r3, #31
 8009a66:	4605      	mov	r5, r0
 8009a68:	d4e0      	bmi.n	8009a2c <_fflush_r+0xc>
 8009a6a:	89a3      	ldrh	r3, [r4, #12]
 8009a6c:	059b      	lsls	r3, r3, #22
 8009a6e:	d4dd      	bmi.n	8009a2c <_fflush_r+0xc>
 8009a70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a72:	f000 f908 	bl	8009c86 <__retarget_lock_release_recursive>
 8009a76:	e7d9      	b.n	8009a2c <_fflush_r+0xc>
 8009a78:	4b05      	ldr	r3, [pc, #20]	; (8009a90 <_fflush_r+0x70>)
 8009a7a:	429c      	cmp	r4, r3
 8009a7c:	d101      	bne.n	8009a82 <_fflush_r+0x62>
 8009a7e:	68ac      	ldr	r4, [r5, #8]
 8009a80:	e7df      	b.n	8009a42 <_fflush_r+0x22>
 8009a82:	4b04      	ldr	r3, [pc, #16]	; (8009a94 <_fflush_r+0x74>)
 8009a84:	429c      	cmp	r4, r3
 8009a86:	bf08      	it	eq
 8009a88:	68ec      	ldreq	r4, [r5, #12]
 8009a8a:	e7da      	b.n	8009a42 <_fflush_r+0x22>
 8009a8c:	0800a108 	.word	0x0800a108
 8009a90:	0800a128 	.word	0x0800a128
 8009a94:	0800a0e8 	.word	0x0800a0e8

08009a98 <std>:
 8009a98:	2300      	movs	r3, #0
 8009a9a:	b510      	push	{r4, lr}
 8009a9c:	4604      	mov	r4, r0
 8009a9e:	e9c0 3300 	strd	r3, r3, [r0]
 8009aa2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009aa6:	6083      	str	r3, [r0, #8]
 8009aa8:	8181      	strh	r1, [r0, #12]
 8009aaa:	6643      	str	r3, [r0, #100]	; 0x64
 8009aac:	81c2      	strh	r2, [r0, #14]
 8009aae:	6183      	str	r3, [r0, #24]
 8009ab0:	4619      	mov	r1, r3
 8009ab2:	2208      	movs	r2, #8
 8009ab4:	305c      	adds	r0, #92	; 0x5c
 8009ab6:	f7ff f9df 	bl	8008e78 <memset>
 8009aba:	4b05      	ldr	r3, [pc, #20]	; (8009ad0 <std+0x38>)
 8009abc:	6263      	str	r3, [r4, #36]	; 0x24
 8009abe:	4b05      	ldr	r3, [pc, #20]	; (8009ad4 <std+0x3c>)
 8009ac0:	62a3      	str	r3, [r4, #40]	; 0x28
 8009ac2:	4b05      	ldr	r3, [pc, #20]	; (8009ad8 <std+0x40>)
 8009ac4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009ac6:	4b05      	ldr	r3, [pc, #20]	; (8009adc <std+0x44>)
 8009ac8:	6224      	str	r4, [r4, #32]
 8009aca:	6323      	str	r3, [r4, #48]	; 0x30
 8009acc:	bd10      	pop	{r4, pc}
 8009ace:	bf00      	nop
 8009ad0:	08009dd9 	.word	0x08009dd9
 8009ad4:	08009dfb 	.word	0x08009dfb
 8009ad8:	08009e33 	.word	0x08009e33
 8009adc:	08009e57 	.word	0x08009e57

08009ae0 <_cleanup_r>:
 8009ae0:	4901      	ldr	r1, [pc, #4]	; (8009ae8 <_cleanup_r+0x8>)
 8009ae2:	f000 b8af 	b.w	8009c44 <_fwalk_reent>
 8009ae6:	bf00      	nop
 8009ae8:	08009a21 	.word	0x08009a21

08009aec <__sfmoreglue>:
 8009aec:	b570      	push	{r4, r5, r6, lr}
 8009aee:	1e4a      	subs	r2, r1, #1
 8009af0:	2568      	movs	r5, #104	; 0x68
 8009af2:	4355      	muls	r5, r2
 8009af4:	460e      	mov	r6, r1
 8009af6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009afa:	f7ff fa15 	bl	8008f28 <_malloc_r>
 8009afe:	4604      	mov	r4, r0
 8009b00:	b140      	cbz	r0, 8009b14 <__sfmoreglue+0x28>
 8009b02:	2100      	movs	r1, #0
 8009b04:	e9c0 1600 	strd	r1, r6, [r0]
 8009b08:	300c      	adds	r0, #12
 8009b0a:	60a0      	str	r0, [r4, #8]
 8009b0c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009b10:	f7ff f9b2 	bl	8008e78 <memset>
 8009b14:	4620      	mov	r0, r4
 8009b16:	bd70      	pop	{r4, r5, r6, pc}

08009b18 <__sfp_lock_acquire>:
 8009b18:	4801      	ldr	r0, [pc, #4]	; (8009b20 <__sfp_lock_acquire+0x8>)
 8009b1a:	f000 b8b3 	b.w	8009c84 <__retarget_lock_acquire_recursive>
 8009b1e:	bf00      	nop
 8009b20:	20003028 	.word	0x20003028

08009b24 <__sfp_lock_release>:
 8009b24:	4801      	ldr	r0, [pc, #4]	; (8009b2c <__sfp_lock_release+0x8>)
 8009b26:	f000 b8ae 	b.w	8009c86 <__retarget_lock_release_recursive>
 8009b2a:	bf00      	nop
 8009b2c:	20003028 	.word	0x20003028

08009b30 <__sinit_lock_acquire>:
 8009b30:	4801      	ldr	r0, [pc, #4]	; (8009b38 <__sinit_lock_acquire+0x8>)
 8009b32:	f000 b8a7 	b.w	8009c84 <__retarget_lock_acquire_recursive>
 8009b36:	bf00      	nop
 8009b38:	20003023 	.word	0x20003023

08009b3c <__sinit_lock_release>:
 8009b3c:	4801      	ldr	r0, [pc, #4]	; (8009b44 <__sinit_lock_release+0x8>)
 8009b3e:	f000 b8a2 	b.w	8009c86 <__retarget_lock_release_recursive>
 8009b42:	bf00      	nop
 8009b44:	20003023 	.word	0x20003023

08009b48 <__sinit>:
 8009b48:	b510      	push	{r4, lr}
 8009b4a:	4604      	mov	r4, r0
 8009b4c:	f7ff fff0 	bl	8009b30 <__sinit_lock_acquire>
 8009b50:	69a3      	ldr	r3, [r4, #24]
 8009b52:	b11b      	cbz	r3, 8009b5c <__sinit+0x14>
 8009b54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b58:	f7ff bff0 	b.w	8009b3c <__sinit_lock_release>
 8009b5c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009b60:	6523      	str	r3, [r4, #80]	; 0x50
 8009b62:	4b13      	ldr	r3, [pc, #76]	; (8009bb0 <__sinit+0x68>)
 8009b64:	4a13      	ldr	r2, [pc, #76]	; (8009bb4 <__sinit+0x6c>)
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	62a2      	str	r2, [r4, #40]	; 0x28
 8009b6a:	42a3      	cmp	r3, r4
 8009b6c:	bf04      	itt	eq
 8009b6e:	2301      	moveq	r3, #1
 8009b70:	61a3      	streq	r3, [r4, #24]
 8009b72:	4620      	mov	r0, r4
 8009b74:	f000 f820 	bl	8009bb8 <__sfp>
 8009b78:	6060      	str	r0, [r4, #4]
 8009b7a:	4620      	mov	r0, r4
 8009b7c:	f000 f81c 	bl	8009bb8 <__sfp>
 8009b80:	60a0      	str	r0, [r4, #8]
 8009b82:	4620      	mov	r0, r4
 8009b84:	f000 f818 	bl	8009bb8 <__sfp>
 8009b88:	2200      	movs	r2, #0
 8009b8a:	60e0      	str	r0, [r4, #12]
 8009b8c:	2104      	movs	r1, #4
 8009b8e:	6860      	ldr	r0, [r4, #4]
 8009b90:	f7ff ff82 	bl	8009a98 <std>
 8009b94:	68a0      	ldr	r0, [r4, #8]
 8009b96:	2201      	movs	r2, #1
 8009b98:	2109      	movs	r1, #9
 8009b9a:	f7ff ff7d 	bl	8009a98 <std>
 8009b9e:	68e0      	ldr	r0, [r4, #12]
 8009ba0:	2202      	movs	r2, #2
 8009ba2:	2112      	movs	r1, #18
 8009ba4:	f7ff ff78 	bl	8009a98 <std>
 8009ba8:	2301      	movs	r3, #1
 8009baa:	61a3      	str	r3, [r4, #24]
 8009bac:	e7d2      	b.n	8009b54 <__sinit+0xc>
 8009bae:	bf00      	nop
 8009bb0:	08009ffc 	.word	0x08009ffc
 8009bb4:	08009ae1 	.word	0x08009ae1

08009bb8 <__sfp>:
 8009bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bba:	4607      	mov	r7, r0
 8009bbc:	f7ff ffac 	bl	8009b18 <__sfp_lock_acquire>
 8009bc0:	4b1e      	ldr	r3, [pc, #120]	; (8009c3c <__sfp+0x84>)
 8009bc2:	681e      	ldr	r6, [r3, #0]
 8009bc4:	69b3      	ldr	r3, [r6, #24]
 8009bc6:	b913      	cbnz	r3, 8009bce <__sfp+0x16>
 8009bc8:	4630      	mov	r0, r6
 8009bca:	f7ff ffbd 	bl	8009b48 <__sinit>
 8009bce:	3648      	adds	r6, #72	; 0x48
 8009bd0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009bd4:	3b01      	subs	r3, #1
 8009bd6:	d503      	bpl.n	8009be0 <__sfp+0x28>
 8009bd8:	6833      	ldr	r3, [r6, #0]
 8009bda:	b30b      	cbz	r3, 8009c20 <__sfp+0x68>
 8009bdc:	6836      	ldr	r6, [r6, #0]
 8009bde:	e7f7      	b.n	8009bd0 <__sfp+0x18>
 8009be0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009be4:	b9d5      	cbnz	r5, 8009c1c <__sfp+0x64>
 8009be6:	4b16      	ldr	r3, [pc, #88]	; (8009c40 <__sfp+0x88>)
 8009be8:	60e3      	str	r3, [r4, #12]
 8009bea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009bee:	6665      	str	r5, [r4, #100]	; 0x64
 8009bf0:	f000 f847 	bl	8009c82 <__retarget_lock_init_recursive>
 8009bf4:	f7ff ff96 	bl	8009b24 <__sfp_lock_release>
 8009bf8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009bfc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009c00:	6025      	str	r5, [r4, #0]
 8009c02:	61a5      	str	r5, [r4, #24]
 8009c04:	2208      	movs	r2, #8
 8009c06:	4629      	mov	r1, r5
 8009c08:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009c0c:	f7ff f934 	bl	8008e78 <memset>
 8009c10:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009c14:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009c18:	4620      	mov	r0, r4
 8009c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c1c:	3468      	adds	r4, #104	; 0x68
 8009c1e:	e7d9      	b.n	8009bd4 <__sfp+0x1c>
 8009c20:	2104      	movs	r1, #4
 8009c22:	4638      	mov	r0, r7
 8009c24:	f7ff ff62 	bl	8009aec <__sfmoreglue>
 8009c28:	4604      	mov	r4, r0
 8009c2a:	6030      	str	r0, [r6, #0]
 8009c2c:	2800      	cmp	r0, #0
 8009c2e:	d1d5      	bne.n	8009bdc <__sfp+0x24>
 8009c30:	f7ff ff78 	bl	8009b24 <__sfp_lock_release>
 8009c34:	230c      	movs	r3, #12
 8009c36:	603b      	str	r3, [r7, #0]
 8009c38:	e7ee      	b.n	8009c18 <__sfp+0x60>
 8009c3a:	bf00      	nop
 8009c3c:	08009ffc 	.word	0x08009ffc
 8009c40:	ffff0001 	.word	0xffff0001

08009c44 <_fwalk_reent>:
 8009c44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c48:	4606      	mov	r6, r0
 8009c4a:	4688      	mov	r8, r1
 8009c4c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009c50:	2700      	movs	r7, #0
 8009c52:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009c56:	f1b9 0901 	subs.w	r9, r9, #1
 8009c5a:	d505      	bpl.n	8009c68 <_fwalk_reent+0x24>
 8009c5c:	6824      	ldr	r4, [r4, #0]
 8009c5e:	2c00      	cmp	r4, #0
 8009c60:	d1f7      	bne.n	8009c52 <_fwalk_reent+0xe>
 8009c62:	4638      	mov	r0, r7
 8009c64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c68:	89ab      	ldrh	r3, [r5, #12]
 8009c6a:	2b01      	cmp	r3, #1
 8009c6c:	d907      	bls.n	8009c7e <_fwalk_reent+0x3a>
 8009c6e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009c72:	3301      	adds	r3, #1
 8009c74:	d003      	beq.n	8009c7e <_fwalk_reent+0x3a>
 8009c76:	4629      	mov	r1, r5
 8009c78:	4630      	mov	r0, r6
 8009c7a:	47c0      	blx	r8
 8009c7c:	4307      	orrs	r7, r0
 8009c7e:	3568      	adds	r5, #104	; 0x68
 8009c80:	e7e9      	b.n	8009c56 <_fwalk_reent+0x12>

08009c82 <__retarget_lock_init_recursive>:
 8009c82:	4770      	bx	lr

08009c84 <__retarget_lock_acquire_recursive>:
 8009c84:	4770      	bx	lr

08009c86 <__retarget_lock_release_recursive>:
 8009c86:	4770      	bx	lr

08009c88 <__swhatbuf_r>:
 8009c88:	b570      	push	{r4, r5, r6, lr}
 8009c8a:	460e      	mov	r6, r1
 8009c8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c90:	2900      	cmp	r1, #0
 8009c92:	b096      	sub	sp, #88	; 0x58
 8009c94:	4614      	mov	r4, r2
 8009c96:	461d      	mov	r5, r3
 8009c98:	da07      	bge.n	8009caa <__swhatbuf_r+0x22>
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	602b      	str	r3, [r5, #0]
 8009c9e:	89b3      	ldrh	r3, [r6, #12]
 8009ca0:	061a      	lsls	r2, r3, #24
 8009ca2:	d410      	bmi.n	8009cc6 <__swhatbuf_r+0x3e>
 8009ca4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ca8:	e00e      	b.n	8009cc8 <__swhatbuf_r+0x40>
 8009caa:	466a      	mov	r2, sp
 8009cac:	f000 f8fa 	bl	8009ea4 <_fstat_r>
 8009cb0:	2800      	cmp	r0, #0
 8009cb2:	dbf2      	blt.n	8009c9a <__swhatbuf_r+0x12>
 8009cb4:	9a01      	ldr	r2, [sp, #4]
 8009cb6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009cba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009cbe:	425a      	negs	r2, r3
 8009cc0:	415a      	adcs	r2, r3
 8009cc2:	602a      	str	r2, [r5, #0]
 8009cc4:	e7ee      	b.n	8009ca4 <__swhatbuf_r+0x1c>
 8009cc6:	2340      	movs	r3, #64	; 0x40
 8009cc8:	2000      	movs	r0, #0
 8009cca:	6023      	str	r3, [r4, #0]
 8009ccc:	b016      	add	sp, #88	; 0x58
 8009cce:	bd70      	pop	{r4, r5, r6, pc}

08009cd0 <__smakebuf_r>:
 8009cd0:	898b      	ldrh	r3, [r1, #12]
 8009cd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009cd4:	079d      	lsls	r5, r3, #30
 8009cd6:	4606      	mov	r6, r0
 8009cd8:	460c      	mov	r4, r1
 8009cda:	d507      	bpl.n	8009cec <__smakebuf_r+0x1c>
 8009cdc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009ce0:	6023      	str	r3, [r4, #0]
 8009ce2:	6123      	str	r3, [r4, #16]
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	6163      	str	r3, [r4, #20]
 8009ce8:	b002      	add	sp, #8
 8009cea:	bd70      	pop	{r4, r5, r6, pc}
 8009cec:	ab01      	add	r3, sp, #4
 8009cee:	466a      	mov	r2, sp
 8009cf0:	f7ff ffca 	bl	8009c88 <__swhatbuf_r>
 8009cf4:	9900      	ldr	r1, [sp, #0]
 8009cf6:	4605      	mov	r5, r0
 8009cf8:	4630      	mov	r0, r6
 8009cfa:	f7ff f915 	bl	8008f28 <_malloc_r>
 8009cfe:	b948      	cbnz	r0, 8009d14 <__smakebuf_r+0x44>
 8009d00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d04:	059a      	lsls	r2, r3, #22
 8009d06:	d4ef      	bmi.n	8009ce8 <__smakebuf_r+0x18>
 8009d08:	f023 0303 	bic.w	r3, r3, #3
 8009d0c:	f043 0302 	orr.w	r3, r3, #2
 8009d10:	81a3      	strh	r3, [r4, #12]
 8009d12:	e7e3      	b.n	8009cdc <__smakebuf_r+0xc>
 8009d14:	4b0d      	ldr	r3, [pc, #52]	; (8009d4c <__smakebuf_r+0x7c>)
 8009d16:	62b3      	str	r3, [r6, #40]	; 0x28
 8009d18:	89a3      	ldrh	r3, [r4, #12]
 8009d1a:	6020      	str	r0, [r4, #0]
 8009d1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d20:	81a3      	strh	r3, [r4, #12]
 8009d22:	9b00      	ldr	r3, [sp, #0]
 8009d24:	6163      	str	r3, [r4, #20]
 8009d26:	9b01      	ldr	r3, [sp, #4]
 8009d28:	6120      	str	r0, [r4, #16]
 8009d2a:	b15b      	cbz	r3, 8009d44 <__smakebuf_r+0x74>
 8009d2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d30:	4630      	mov	r0, r6
 8009d32:	f000 f8c9 	bl	8009ec8 <_isatty_r>
 8009d36:	b128      	cbz	r0, 8009d44 <__smakebuf_r+0x74>
 8009d38:	89a3      	ldrh	r3, [r4, #12]
 8009d3a:	f023 0303 	bic.w	r3, r3, #3
 8009d3e:	f043 0301 	orr.w	r3, r3, #1
 8009d42:	81a3      	strh	r3, [r4, #12]
 8009d44:	89a0      	ldrh	r0, [r4, #12]
 8009d46:	4305      	orrs	r5, r0
 8009d48:	81a5      	strh	r5, [r4, #12]
 8009d4a:	e7cd      	b.n	8009ce8 <__smakebuf_r+0x18>
 8009d4c:	08009ae1 	.word	0x08009ae1

08009d50 <_raise_r>:
 8009d50:	291f      	cmp	r1, #31
 8009d52:	b538      	push	{r3, r4, r5, lr}
 8009d54:	4604      	mov	r4, r0
 8009d56:	460d      	mov	r5, r1
 8009d58:	d904      	bls.n	8009d64 <_raise_r+0x14>
 8009d5a:	2316      	movs	r3, #22
 8009d5c:	6003      	str	r3, [r0, #0]
 8009d5e:	f04f 30ff 	mov.w	r0, #4294967295
 8009d62:	bd38      	pop	{r3, r4, r5, pc}
 8009d64:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009d66:	b112      	cbz	r2, 8009d6e <_raise_r+0x1e>
 8009d68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009d6c:	b94b      	cbnz	r3, 8009d82 <_raise_r+0x32>
 8009d6e:	4620      	mov	r0, r4
 8009d70:	f000 f830 	bl	8009dd4 <_getpid_r>
 8009d74:	462a      	mov	r2, r5
 8009d76:	4601      	mov	r1, r0
 8009d78:	4620      	mov	r0, r4
 8009d7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d7e:	f000 b817 	b.w	8009db0 <_kill_r>
 8009d82:	2b01      	cmp	r3, #1
 8009d84:	d00a      	beq.n	8009d9c <_raise_r+0x4c>
 8009d86:	1c59      	adds	r1, r3, #1
 8009d88:	d103      	bne.n	8009d92 <_raise_r+0x42>
 8009d8a:	2316      	movs	r3, #22
 8009d8c:	6003      	str	r3, [r0, #0]
 8009d8e:	2001      	movs	r0, #1
 8009d90:	e7e7      	b.n	8009d62 <_raise_r+0x12>
 8009d92:	2400      	movs	r4, #0
 8009d94:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009d98:	4628      	mov	r0, r5
 8009d9a:	4798      	blx	r3
 8009d9c:	2000      	movs	r0, #0
 8009d9e:	e7e0      	b.n	8009d62 <_raise_r+0x12>

08009da0 <raise>:
 8009da0:	4b02      	ldr	r3, [pc, #8]	; (8009dac <raise+0xc>)
 8009da2:	4601      	mov	r1, r0
 8009da4:	6818      	ldr	r0, [r3, #0]
 8009da6:	f7ff bfd3 	b.w	8009d50 <_raise_r>
 8009daa:	bf00      	nop
 8009dac:	2000001c 	.word	0x2000001c

08009db0 <_kill_r>:
 8009db0:	b538      	push	{r3, r4, r5, lr}
 8009db2:	4d07      	ldr	r5, [pc, #28]	; (8009dd0 <_kill_r+0x20>)
 8009db4:	2300      	movs	r3, #0
 8009db6:	4604      	mov	r4, r0
 8009db8:	4608      	mov	r0, r1
 8009dba:	4611      	mov	r1, r2
 8009dbc:	602b      	str	r3, [r5, #0]
 8009dbe:	f7fe ff21 	bl	8008c04 <_kill>
 8009dc2:	1c43      	adds	r3, r0, #1
 8009dc4:	d102      	bne.n	8009dcc <_kill_r+0x1c>
 8009dc6:	682b      	ldr	r3, [r5, #0]
 8009dc8:	b103      	cbz	r3, 8009dcc <_kill_r+0x1c>
 8009dca:	6023      	str	r3, [r4, #0]
 8009dcc:	bd38      	pop	{r3, r4, r5, pc}
 8009dce:	bf00      	nop
 8009dd0:	2000301c 	.word	0x2000301c

08009dd4 <_getpid_r>:
 8009dd4:	f7fe bf0e 	b.w	8008bf4 <_getpid>

08009dd8 <__sread>:
 8009dd8:	b510      	push	{r4, lr}
 8009dda:	460c      	mov	r4, r1
 8009ddc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009de0:	f000 f894 	bl	8009f0c <_read_r>
 8009de4:	2800      	cmp	r0, #0
 8009de6:	bfab      	itete	ge
 8009de8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009dea:	89a3      	ldrhlt	r3, [r4, #12]
 8009dec:	181b      	addge	r3, r3, r0
 8009dee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009df2:	bfac      	ite	ge
 8009df4:	6563      	strge	r3, [r4, #84]	; 0x54
 8009df6:	81a3      	strhlt	r3, [r4, #12]
 8009df8:	bd10      	pop	{r4, pc}

08009dfa <__swrite>:
 8009dfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dfe:	461f      	mov	r7, r3
 8009e00:	898b      	ldrh	r3, [r1, #12]
 8009e02:	05db      	lsls	r3, r3, #23
 8009e04:	4605      	mov	r5, r0
 8009e06:	460c      	mov	r4, r1
 8009e08:	4616      	mov	r6, r2
 8009e0a:	d505      	bpl.n	8009e18 <__swrite+0x1e>
 8009e0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e10:	2302      	movs	r3, #2
 8009e12:	2200      	movs	r2, #0
 8009e14:	f000 f868 	bl	8009ee8 <_lseek_r>
 8009e18:	89a3      	ldrh	r3, [r4, #12]
 8009e1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e22:	81a3      	strh	r3, [r4, #12]
 8009e24:	4632      	mov	r2, r6
 8009e26:	463b      	mov	r3, r7
 8009e28:	4628      	mov	r0, r5
 8009e2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e2e:	f000 b817 	b.w	8009e60 <_write_r>

08009e32 <__sseek>:
 8009e32:	b510      	push	{r4, lr}
 8009e34:	460c      	mov	r4, r1
 8009e36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e3a:	f000 f855 	bl	8009ee8 <_lseek_r>
 8009e3e:	1c43      	adds	r3, r0, #1
 8009e40:	89a3      	ldrh	r3, [r4, #12]
 8009e42:	bf15      	itete	ne
 8009e44:	6560      	strne	r0, [r4, #84]	; 0x54
 8009e46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009e4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009e4e:	81a3      	strheq	r3, [r4, #12]
 8009e50:	bf18      	it	ne
 8009e52:	81a3      	strhne	r3, [r4, #12]
 8009e54:	bd10      	pop	{r4, pc}

08009e56 <__sclose>:
 8009e56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e5a:	f000 b813 	b.w	8009e84 <_close_r>
	...

08009e60 <_write_r>:
 8009e60:	b538      	push	{r3, r4, r5, lr}
 8009e62:	4d07      	ldr	r5, [pc, #28]	; (8009e80 <_write_r+0x20>)
 8009e64:	4604      	mov	r4, r0
 8009e66:	4608      	mov	r0, r1
 8009e68:	4611      	mov	r1, r2
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	602a      	str	r2, [r5, #0]
 8009e6e:	461a      	mov	r2, r3
 8009e70:	f7fe feff 	bl	8008c72 <_write>
 8009e74:	1c43      	adds	r3, r0, #1
 8009e76:	d102      	bne.n	8009e7e <_write_r+0x1e>
 8009e78:	682b      	ldr	r3, [r5, #0]
 8009e7a:	b103      	cbz	r3, 8009e7e <_write_r+0x1e>
 8009e7c:	6023      	str	r3, [r4, #0]
 8009e7e:	bd38      	pop	{r3, r4, r5, pc}
 8009e80:	2000301c 	.word	0x2000301c

08009e84 <_close_r>:
 8009e84:	b538      	push	{r3, r4, r5, lr}
 8009e86:	4d06      	ldr	r5, [pc, #24]	; (8009ea0 <_close_r+0x1c>)
 8009e88:	2300      	movs	r3, #0
 8009e8a:	4604      	mov	r4, r0
 8009e8c:	4608      	mov	r0, r1
 8009e8e:	602b      	str	r3, [r5, #0]
 8009e90:	f7fe ff0b 	bl	8008caa <_close>
 8009e94:	1c43      	adds	r3, r0, #1
 8009e96:	d102      	bne.n	8009e9e <_close_r+0x1a>
 8009e98:	682b      	ldr	r3, [r5, #0]
 8009e9a:	b103      	cbz	r3, 8009e9e <_close_r+0x1a>
 8009e9c:	6023      	str	r3, [r4, #0]
 8009e9e:	bd38      	pop	{r3, r4, r5, pc}
 8009ea0:	2000301c 	.word	0x2000301c

08009ea4 <_fstat_r>:
 8009ea4:	b538      	push	{r3, r4, r5, lr}
 8009ea6:	4d07      	ldr	r5, [pc, #28]	; (8009ec4 <_fstat_r+0x20>)
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	4604      	mov	r4, r0
 8009eac:	4608      	mov	r0, r1
 8009eae:	4611      	mov	r1, r2
 8009eb0:	602b      	str	r3, [r5, #0]
 8009eb2:	f7fe ff06 	bl	8008cc2 <_fstat>
 8009eb6:	1c43      	adds	r3, r0, #1
 8009eb8:	d102      	bne.n	8009ec0 <_fstat_r+0x1c>
 8009eba:	682b      	ldr	r3, [r5, #0]
 8009ebc:	b103      	cbz	r3, 8009ec0 <_fstat_r+0x1c>
 8009ebe:	6023      	str	r3, [r4, #0]
 8009ec0:	bd38      	pop	{r3, r4, r5, pc}
 8009ec2:	bf00      	nop
 8009ec4:	2000301c 	.word	0x2000301c

08009ec8 <_isatty_r>:
 8009ec8:	b538      	push	{r3, r4, r5, lr}
 8009eca:	4d06      	ldr	r5, [pc, #24]	; (8009ee4 <_isatty_r+0x1c>)
 8009ecc:	2300      	movs	r3, #0
 8009ece:	4604      	mov	r4, r0
 8009ed0:	4608      	mov	r0, r1
 8009ed2:	602b      	str	r3, [r5, #0]
 8009ed4:	f7fe ff05 	bl	8008ce2 <_isatty>
 8009ed8:	1c43      	adds	r3, r0, #1
 8009eda:	d102      	bne.n	8009ee2 <_isatty_r+0x1a>
 8009edc:	682b      	ldr	r3, [r5, #0]
 8009ede:	b103      	cbz	r3, 8009ee2 <_isatty_r+0x1a>
 8009ee0:	6023      	str	r3, [r4, #0]
 8009ee2:	bd38      	pop	{r3, r4, r5, pc}
 8009ee4:	2000301c 	.word	0x2000301c

08009ee8 <_lseek_r>:
 8009ee8:	b538      	push	{r3, r4, r5, lr}
 8009eea:	4d07      	ldr	r5, [pc, #28]	; (8009f08 <_lseek_r+0x20>)
 8009eec:	4604      	mov	r4, r0
 8009eee:	4608      	mov	r0, r1
 8009ef0:	4611      	mov	r1, r2
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	602a      	str	r2, [r5, #0]
 8009ef6:	461a      	mov	r2, r3
 8009ef8:	f7fe fefe 	bl	8008cf8 <_lseek>
 8009efc:	1c43      	adds	r3, r0, #1
 8009efe:	d102      	bne.n	8009f06 <_lseek_r+0x1e>
 8009f00:	682b      	ldr	r3, [r5, #0]
 8009f02:	b103      	cbz	r3, 8009f06 <_lseek_r+0x1e>
 8009f04:	6023      	str	r3, [r4, #0]
 8009f06:	bd38      	pop	{r3, r4, r5, pc}
 8009f08:	2000301c 	.word	0x2000301c

08009f0c <_read_r>:
 8009f0c:	b538      	push	{r3, r4, r5, lr}
 8009f0e:	4d07      	ldr	r5, [pc, #28]	; (8009f2c <_read_r+0x20>)
 8009f10:	4604      	mov	r4, r0
 8009f12:	4608      	mov	r0, r1
 8009f14:	4611      	mov	r1, r2
 8009f16:	2200      	movs	r2, #0
 8009f18:	602a      	str	r2, [r5, #0]
 8009f1a:	461a      	mov	r2, r3
 8009f1c:	f7fe fe8c 	bl	8008c38 <_read>
 8009f20:	1c43      	adds	r3, r0, #1
 8009f22:	d102      	bne.n	8009f2a <_read_r+0x1e>
 8009f24:	682b      	ldr	r3, [r5, #0]
 8009f26:	b103      	cbz	r3, 8009f2a <_read_r+0x1e>
 8009f28:	6023      	str	r3, [r4, #0]
 8009f2a:	bd38      	pop	{r3, r4, r5, pc}
 8009f2c:	2000301c 	.word	0x2000301c

08009f30 <_gettimeofday>:
 8009f30:	4b02      	ldr	r3, [pc, #8]	; (8009f3c <_gettimeofday+0xc>)
 8009f32:	2258      	movs	r2, #88	; 0x58
 8009f34:	601a      	str	r2, [r3, #0]
 8009f36:	f04f 30ff 	mov.w	r0, #4294967295
 8009f3a:	4770      	bx	lr
 8009f3c:	2000301c 	.word	0x2000301c

08009f40 <_init>:
 8009f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f42:	bf00      	nop
 8009f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f46:	bc08      	pop	{r3}
 8009f48:	469e      	mov	lr, r3
 8009f4a:	4770      	bx	lr

08009f4c <_fini>:
 8009f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f4e:	bf00      	nop
 8009f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f52:	bc08      	pop	{r3}
 8009f54:	469e      	mov	lr, r3
 8009f56:	4770      	bx	lr
