
small_led_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000abf4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000020c  0800ad84  0800ad84  0001ad84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af90  0800af90  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  0800af90  0800af90  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800af90  0800af90  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af90  0800af90  0001af90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800af94  0800af94  0001af94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800af98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002f90  20000080  0800b018  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003010  0800b018  00023010  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dc3b  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000047b5  00000000  00000000  0003dceb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ab8  00000000  00000000  000424a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001980  00000000  00000000  00043f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026918  00000000  00000000  000458d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fcaa  00000000  00000000  0006c1f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dffca  00000000  00000000  0008be9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016be64  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a34  00000000  00000000  0016beb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  001738e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  0017390c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ad6c 	.word	0x0800ad6c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	0800ad6c 	.word	0x0800ad6c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2f>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a14:	bf24      	itt	cs
 8000a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a1e:	d90d      	bls.n	8000a3c <__aeabi_d2f+0x30>
 8000a20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a34:	bf08      	it	eq
 8000a36:	f020 0001 	biceq.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a40:	d121      	bne.n	8000a86 <__aeabi_d2f+0x7a>
 8000a42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a46:	bfbc      	itt	lt
 8000a48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	4770      	bxlt	lr
 8000a4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a56:	f1c2 0218 	rsb	r2, r2, #24
 8000a5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a62:	fa20 f002 	lsr.w	r0, r0, r2
 8000a66:	bf18      	it	ne
 8000a68:	f040 0001 	orrne.w	r0, r0, #1
 8000a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a78:	ea40 000c 	orr.w	r0, r0, ip
 8000a7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a84:	e7cc      	b.n	8000a20 <__aeabi_d2f+0x14>
 8000a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a8a:	d107      	bne.n	8000a9c <__aeabi_d2f+0x90>
 8000a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a90:	bf1e      	ittt	ne
 8000a92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a9a:	4770      	bxne	lr
 8000a9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <animate_led_show_strip>:
extern uint32_t g_max_strip_length;
extern uint16_t g_all_strip_mask;


void animate_led_show_strip(const strip_mask_t strip_mask)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	80fb      	strh	r3, [r7, #6]
    ws2812b_show(strip_mask);
 8000ab6:	88fb      	ldrh	r3, [r7, #6]
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f001 fe3d 	bl	8002738 <ws2812b_show>
}
 8000abe:	bf00      	nop
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <animate_led_solid_custom_color>:
	}
}


void animate_led_solid_custom_color(const strip_mask_t strip_mask, color_hex_code_e color)
{
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b084      	sub	sp, #16
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	4603      	mov	r3, r0
 8000ace:	6039      	str	r1, [r7, #0]
 8000ad0:	80fb      	strh	r3, [r7, #6]
	uint8_t red, green, blue; 
	red = ((color & 0xFF0000) >> 16);
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	0c1b      	lsrs	r3, r3, #16
 8000ad6:	73fb      	strb	r3, [r7, #15]
	green = ((color & 0x00FF00) >> 8);
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	0a1b      	lsrs	r3, r3, #8
 8000adc:	73bb      	strb	r3, [r7, #14]
	blue = (color & 0x0000FF);
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	737b      	strb	r3, [r7, #13]
	animate_led_set_all_pixels(strip_mask, red, green, blue);
 8000ae2:	7b7b      	ldrb	r3, [r7, #13]
 8000ae4:	7bba      	ldrb	r2, [r7, #14]
 8000ae6:	7bf9      	ldrb	r1, [r7, #15]
 8000ae8:	88f8      	ldrh	r0, [r7, #6]
 8000aea:	f000 fd35 	bl	8001558 <animate_led_set_all_pixels>
	animate_led_show_strip(strip_mask);
 8000aee:	88fb      	ldrh	r3, [r7, #6]
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff ffdb 	bl	8000aac <animate_led_show_strip>
}
 8000af6:	bf00      	nop
 8000af8:	3710      	adds	r7, #16
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <animate_led_turn_all_pixels_off>:


void animate_led_turn_all_pixels_off(void)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	af00      	add	r7, sp, #0
	animate_led_set_all_pixels((strip_mask_t)STRIP_BIT_ALL_SET, 0, 0, 0);
 8000b02:	2300      	movs	r3, #0
 8000b04:	2200      	movs	r2, #0
 8000b06:	2100      	movs	r1, #0
 8000b08:	2001      	movs	r0, #1
 8000b0a:	f000 fd25 	bl	8001558 <animate_led_set_all_pixels>
}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}

08000b12 <animate_led_only_spell_word>:
	}
}


void animate_led_only_spell_word(strip_mask_t strip_mask, color_hex_code_e color, uint16_t time_ms)
{
 8000b12:	b590      	push	{r4, r7, lr}
 8000b14:	ed2d 8b02 	vpush	{d8}
 8000b18:	b089      	sub	sp, #36	; 0x24
 8000b1a:	af02      	add	r7, sp, #8
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	6039      	str	r1, [r7, #0]
 8000b20:	80fb      	strh	r3, [r7, #6]
 8000b22:	4613      	mov	r3, r2
 8000b24:	80bb      	strh	r3, [r7, #4]
	uint16_t strip_size = ws2812_led_get_max_strip_size(strip_mask);
 8000b26:	88fb      	ldrh	r3, [r7, #6]
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f001 fc4f 	bl	80023cc <ws2812_led_get_max_strip_size>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	827b      	strh	r3, [r7, #18]
	uint8_t red, green, blue; 
	red = ((color & 0xFF0000) >> 16);
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	0c1b      	lsrs	r3, r3, #16
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	747b      	strb	r3, [r7, #17]
	green = ((color & 0x00FF00) >> 8);
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	0a1b      	lsrs	r3, r3, #8
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	743b      	strb	r3, [r7, #16]
	blue = (color & 0x0000FF);
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < strip_size; i++)
 8000b48:	2300      	movs	r3, #0
 8000b4a:	617b      	str	r3, [r7, #20]
 8000b4c:	e032      	b.n	8000bb4 <animate_led_only_spell_word+0xa2>
	{
	    if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&red, &green, &blue)) return;
 8000b4e:	f000 fe1d 	bl	800178c <task_button_press_interrupt_occurred>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d00b      	beq.n	8000b70 <animate_led_only_spell_word+0x5e>
 8000b58:	f107 020f 	add.w	r2, r7, #15
 8000b5c:	f107 0110 	add.w	r1, r7, #16
 8000b60:	f107 0311 	add.w	r3, r7, #17
 8000b64:	4618      	mov	r0, r3
 8000b66:	f000 fe75 	bl	8001854 <task_button_press_check_interrupts>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d126      	bne.n	8000bbe <animate_led_only_spell_word+0xac>
		animate_led_set_pixel(strip_mask, i, red, green, blue);
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	b299      	uxth	r1, r3
 8000b74:	7c7a      	ldrb	r2, [r7, #17]
 8000b76:	7c3c      	ldrb	r4, [r7, #16]
 8000b78:	7bfb      	ldrb	r3, [r7, #15]
 8000b7a:	88f8      	ldrh	r0, [r7, #6]
 8000b7c:	9300      	str	r3, [sp, #0]
 8000b7e:	4623      	mov	r3, r4
 8000b80:	f000 fc90 	bl	80014a4 <animate_led_set_pixel>
		animate_led_show_strip(strip_mask);
 8000b84:	88fb      	ldrh	r3, [r7, #6]
 8000b86:	4618      	mov	r0, r3
 8000b88:	f7ff ff90 	bl	8000aac <animate_led_show_strip>
		task_led_ctrl_delay(time_ms / task_led_ctrl_speed());
 8000b8c:	88bb      	ldrh	r3, [r7, #4]
 8000b8e:	ee07 3a90 	vmov	s15, r3
 8000b92:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8000b96:	f001 fadb 	bl	8002150 <task_led_ctrl_speed>
 8000b9a:	eeb0 7a40 	vmov.f32	s14, s0
 8000b9e:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8000ba2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ba6:	ee17 0a90 	vmov	r0, s15
 8000baa:	f001 f9a7 	bl	8001efc <task_led_ctrl_delay>
	for (int i = 0; i < strip_size; i++)
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	617b      	str	r3, [r7, #20]
 8000bb4:	8a7b      	ldrh	r3, [r7, #18]
 8000bb6:	697a      	ldr	r2, [r7, #20]
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	dbc8      	blt.n	8000b4e <animate_led_only_spell_word+0x3c>
 8000bbc:	e000      	b.n	8000bc0 <animate_led_only_spell_word+0xae>
	    if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&red, &green, &blue)) return;
 8000bbe:	bf00      	nop
	}
}
 8000bc0:	371c      	adds	r7, #28
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	ecbd 8b02 	vpop	{d8}
 8000bc8:	bd90      	pop	{r4, r7, pc}
	...

08000bcc <animate_led_fade_in_fade_out>:
    }
}


void animate_led_fade_in_fade_out(strip_mask_t strip_mask, color_hex_code_e color)
{
 8000bcc:	b5b0      	push	{r4, r5, r7, lr}
 8000bce:	b08a      	sub	sp, #40	; 0x28
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	60b9      	str	r1, [r7, #8]
 8000bd6:	81fb      	strh	r3, [r7, #14]
    float r, g, b;
    uint8_t red, green, blue; 
	red = ((color & 0xFF0000) >> 16);
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	0c1b      	lsrs	r3, r3, #16
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	74fb      	strb	r3, [r7, #19]
	green = ((color & 0x00FF00) >> 8);
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	0a1b      	lsrs	r3, r3, #8
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	74bb      	strb	r3, [r7, #18]
	blue = (color & 0x0000FF);
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	747b      	strb	r3, [r7, #17]
    for (int i = 0; i < 256; i++)
 8000bee:	2300      	movs	r3, #0
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
 8000bf2:	e089      	b.n	8000d08 <animate_led_fade_in_fade_out+0x13c>
    {
        if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&red, &green, &blue)) return;
 8000bf4:	f000 fdca 	bl	800178c <task_button_press_interrupt_occurred>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d00c      	beq.n	8000c18 <animate_led_fade_in_fade_out+0x4c>
 8000bfe:	f107 0211 	add.w	r2, r7, #17
 8000c02:	f107 0112 	add.w	r1, r7, #18
 8000c06:	f107 0313 	add.w	r3, r7, #19
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f000 fe22 	bl	8001854 <task_button_press_check_interrupts>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	f040 810d 	bne.w	8000e32 <animate_led_fade_in_fade_out+0x266>
        r = (i / 256.0) * red;
 8000c18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000c1a:	f7ff fc7b 	bl	8000514 <__aeabi_i2d>
 8000c1e:	f04f 0200 	mov.w	r2, #0
 8000c22:	4b87      	ldr	r3, [pc, #540]	; (8000e40 <animate_led_fade_in_fade_out+0x274>)
 8000c24:	f7ff fe0a 	bl	800083c <__aeabi_ddiv>
 8000c28:	4602      	mov	r2, r0
 8000c2a:	460b      	mov	r3, r1
 8000c2c:	4614      	mov	r4, r2
 8000c2e:	461d      	mov	r5, r3
 8000c30:	7cfb      	ldrb	r3, [r7, #19]
 8000c32:	4618      	mov	r0, r3
 8000c34:	f7ff fc6e 	bl	8000514 <__aeabi_i2d>
 8000c38:	4602      	mov	r2, r0
 8000c3a:	460b      	mov	r3, r1
 8000c3c:	4620      	mov	r0, r4
 8000c3e:	4629      	mov	r1, r5
 8000c40:	f7ff fcd2 	bl	80005e8 <__aeabi_dmul>
 8000c44:	4602      	mov	r2, r0
 8000c46:	460b      	mov	r3, r1
 8000c48:	4610      	mov	r0, r2
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	f7ff fede 	bl	8000a0c <__aeabi_d2f>
 8000c50:	4603      	mov	r3, r0
 8000c52:	61fb      	str	r3, [r7, #28]
        g = (i / 256.0) * green;
 8000c54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000c56:	f7ff fc5d 	bl	8000514 <__aeabi_i2d>
 8000c5a:	f04f 0200 	mov.w	r2, #0
 8000c5e:	4b78      	ldr	r3, [pc, #480]	; (8000e40 <animate_led_fade_in_fade_out+0x274>)
 8000c60:	f7ff fdec 	bl	800083c <__aeabi_ddiv>
 8000c64:	4602      	mov	r2, r0
 8000c66:	460b      	mov	r3, r1
 8000c68:	4614      	mov	r4, r2
 8000c6a:	461d      	mov	r5, r3
 8000c6c:	7cbb      	ldrb	r3, [r7, #18]
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f7ff fc50 	bl	8000514 <__aeabi_i2d>
 8000c74:	4602      	mov	r2, r0
 8000c76:	460b      	mov	r3, r1
 8000c78:	4620      	mov	r0, r4
 8000c7a:	4629      	mov	r1, r5
 8000c7c:	f7ff fcb4 	bl	80005e8 <__aeabi_dmul>
 8000c80:	4602      	mov	r2, r0
 8000c82:	460b      	mov	r3, r1
 8000c84:	4610      	mov	r0, r2
 8000c86:	4619      	mov	r1, r3
 8000c88:	f7ff fec0 	bl	8000a0c <__aeabi_d2f>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	61bb      	str	r3, [r7, #24]
        b = (i / 256.0) * blue;
 8000c90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000c92:	f7ff fc3f 	bl	8000514 <__aeabi_i2d>
 8000c96:	f04f 0200 	mov.w	r2, #0
 8000c9a:	4b69      	ldr	r3, [pc, #420]	; (8000e40 <animate_led_fade_in_fade_out+0x274>)
 8000c9c:	f7ff fdce 	bl	800083c <__aeabi_ddiv>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	460b      	mov	r3, r1
 8000ca4:	4614      	mov	r4, r2
 8000ca6:	461d      	mov	r5, r3
 8000ca8:	7c7b      	ldrb	r3, [r7, #17]
 8000caa:	4618      	mov	r0, r3
 8000cac:	f7ff fc32 	bl	8000514 <__aeabi_i2d>
 8000cb0:	4602      	mov	r2, r0
 8000cb2:	460b      	mov	r3, r1
 8000cb4:	4620      	mov	r0, r4
 8000cb6:	4629      	mov	r1, r5
 8000cb8:	f7ff fc96 	bl	80005e8 <__aeabi_dmul>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	460b      	mov	r3, r1
 8000cc0:	4610      	mov	r0, r2
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	f7ff fea2 	bl	8000a0c <__aeabi_d2f>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	617b      	str	r3, [r7, #20]
        animate_led_set_all_pixels(strip_mask, r, g, b);
 8000ccc:	edd7 7a07 	vldr	s15, [r7, #28]
 8000cd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000cd4:	edc7 7a01 	vstr	s15, [r7, #4]
 8000cd8:	793b      	ldrb	r3, [r7, #4]
 8000cda:	b2d9      	uxtb	r1, r3
 8000cdc:	edd7 7a06 	vldr	s15, [r7, #24]
 8000ce0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ce4:	edc7 7a01 	vstr	s15, [r7, #4]
 8000ce8:	793b      	ldrb	r3, [r7, #4]
 8000cea:	b2da      	uxtb	r2, r3
 8000cec:	edd7 7a05 	vldr	s15, [r7, #20]
 8000cf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000cf4:	edc7 7a01 	vstr	s15, [r7, #4]
 8000cf8:	793b      	ldrb	r3, [r7, #4]
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	89f8      	ldrh	r0, [r7, #14]
 8000cfe:	f000 fc2b 	bl	8001558 <animate_led_set_all_pixels>
    for (int i = 0; i < 256; i++)
 8000d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d04:	3301      	adds	r3, #1
 8000d06:	627b      	str	r3, [r7, #36]	; 0x24
 8000d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d0a:	2bff      	cmp	r3, #255	; 0xff
 8000d0c:	f77f af72 	ble.w	8000bf4 <animate_led_fade_in_fade_out+0x28>
    }
    for (int i = 255; i >= 0; i = i-2)
 8000d10:	23ff      	movs	r3, #255	; 0xff
 8000d12:	623b      	str	r3, [r7, #32]
 8000d14:	e088      	b.n	8000e28 <animate_led_fade_in_fade_out+0x25c>
    {
        if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&red, &green, &blue)) return;
 8000d16:	f000 fd39 	bl	800178c <task_button_press_interrupt_occurred>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d00b      	beq.n	8000d38 <animate_led_fade_in_fade_out+0x16c>
 8000d20:	f107 0211 	add.w	r2, r7, #17
 8000d24:	f107 0112 	add.w	r1, r7, #18
 8000d28:	f107 0313 	add.w	r3, r7, #19
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f000 fd91 	bl	8001854 <task_button_press_check_interrupts>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d17e      	bne.n	8000e36 <animate_led_fade_in_fade_out+0x26a>
        r = (i / 256.0) * red;
 8000d38:	6a38      	ldr	r0, [r7, #32]
 8000d3a:	f7ff fbeb 	bl	8000514 <__aeabi_i2d>
 8000d3e:	f04f 0200 	mov.w	r2, #0
 8000d42:	4b3f      	ldr	r3, [pc, #252]	; (8000e40 <animate_led_fade_in_fade_out+0x274>)
 8000d44:	f7ff fd7a 	bl	800083c <__aeabi_ddiv>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4614      	mov	r4, r2
 8000d4e:	461d      	mov	r5, r3
 8000d50:	7cfb      	ldrb	r3, [r7, #19]
 8000d52:	4618      	mov	r0, r3
 8000d54:	f7ff fbde 	bl	8000514 <__aeabi_i2d>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4620      	mov	r0, r4
 8000d5e:	4629      	mov	r1, r5
 8000d60:	f7ff fc42 	bl	80005e8 <__aeabi_dmul>
 8000d64:	4602      	mov	r2, r0
 8000d66:	460b      	mov	r3, r1
 8000d68:	4610      	mov	r0, r2
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	f7ff fe4e 	bl	8000a0c <__aeabi_d2f>
 8000d70:	4603      	mov	r3, r0
 8000d72:	61fb      	str	r3, [r7, #28]
        g = (i / 256.0) * green;
 8000d74:	6a38      	ldr	r0, [r7, #32]
 8000d76:	f7ff fbcd 	bl	8000514 <__aeabi_i2d>
 8000d7a:	f04f 0200 	mov.w	r2, #0
 8000d7e:	4b30      	ldr	r3, [pc, #192]	; (8000e40 <animate_led_fade_in_fade_out+0x274>)
 8000d80:	f7ff fd5c 	bl	800083c <__aeabi_ddiv>
 8000d84:	4602      	mov	r2, r0
 8000d86:	460b      	mov	r3, r1
 8000d88:	4614      	mov	r4, r2
 8000d8a:	461d      	mov	r5, r3
 8000d8c:	7cbb      	ldrb	r3, [r7, #18]
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff fbc0 	bl	8000514 <__aeabi_i2d>
 8000d94:	4602      	mov	r2, r0
 8000d96:	460b      	mov	r3, r1
 8000d98:	4620      	mov	r0, r4
 8000d9a:	4629      	mov	r1, r5
 8000d9c:	f7ff fc24 	bl	80005e8 <__aeabi_dmul>
 8000da0:	4602      	mov	r2, r0
 8000da2:	460b      	mov	r3, r1
 8000da4:	4610      	mov	r0, r2
 8000da6:	4619      	mov	r1, r3
 8000da8:	f7ff fe30 	bl	8000a0c <__aeabi_d2f>
 8000dac:	4603      	mov	r3, r0
 8000dae:	61bb      	str	r3, [r7, #24]
        b = (i / 256.0) * blue;
 8000db0:	6a38      	ldr	r0, [r7, #32]
 8000db2:	f7ff fbaf 	bl	8000514 <__aeabi_i2d>
 8000db6:	f04f 0200 	mov.w	r2, #0
 8000dba:	4b21      	ldr	r3, [pc, #132]	; (8000e40 <animate_led_fade_in_fade_out+0x274>)
 8000dbc:	f7ff fd3e 	bl	800083c <__aeabi_ddiv>
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	460b      	mov	r3, r1
 8000dc4:	4614      	mov	r4, r2
 8000dc6:	461d      	mov	r5, r3
 8000dc8:	7c7b      	ldrb	r3, [r7, #17]
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f7ff fba2 	bl	8000514 <__aeabi_i2d>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	460b      	mov	r3, r1
 8000dd4:	4620      	mov	r0, r4
 8000dd6:	4629      	mov	r1, r5
 8000dd8:	f7ff fc06 	bl	80005e8 <__aeabi_dmul>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	460b      	mov	r3, r1
 8000de0:	4610      	mov	r0, r2
 8000de2:	4619      	mov	r1, r3
 8000de4:	f7ff fe12 	bl	8000a0c <__aeabi_d2f>
 8000de8:	4603      	mov	r3, r0
 8000dea:	617b      	str	r3, [r7, #20]
        animate_led_set_all_pixels(strip_mask, r, g, b);
 8000dec:	edd7 7a07 	vldr	s15, [r7, #28]
 8000df0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000df4:	edc7 7a01 	vstr	s15, [r7, #4]
 8000df8:	793b      	ldrb	r3, [r7, #4]
 8000dfa:	b2d9      	uxtb	r1, r3
 8000dfc:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e04:	edc7 7a01 	vstr	s15, [r7, #4]
 8000e08:	793b      	ldrb	r3, [r7, #4]
 8000e0a:	b2da      	uxtb	r2, r3
 8000e0c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e14:	edc7 7a01 	vstr	s15, [r7, #4]
 8000e18:	793b      	ldrb	r3, [r7, #4]
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	89f8      	ldrh	r0, [r7, #14]
 8000e1e:	f000 fb9b 	bl	8001558 <animate_led_set_all_pixels>
    for (int i = 255; i >= 0; i = i-2)
 8000e22:	6a3b      	ldr	r3, [r7, #32]
 8000e24:	3b02      	subs	r3, #2
 8000e26:	623b      	str	r3, [r7, #32]
 8000e28:	6a3b      	ldr	r3, [r7, #32]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	f6bf af73 	bge.w	8000d16 <animate_led_fade_in_fade_out+0x14a>
 8000e30:	e002      	b.n	8000e38 <animate_led_fade_in_fade_out+0x26c>
        if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&red, &green, &blue)) return;
 8000e32:	bf00      	nop
 8000e34:	e000      	b.n	8000e38 <animate_led_fade_in_fade_out+0x26c>
        if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&red, &green, &blue)) return;
 8000e36:	bf00      	nop
    }
}
 8000e38:	3728      	adds	r7, #40	; 0x28
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bdb0      	pop	{r4, r5, r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40700000 	.word	0x40700000

08000e44 <animate_led_twinkle>:
	task_led_ctrl_delay((float_t)speed_delay / task_led_ctrl_speed());
}


void animate_led_twinkle(strip_mask_t strip_mask, color_hex_code_e color, uint16_t count, uint16_t speed_delay, bool only_one)
{
 8000e44:	b590      	push	{r4, r7, lr}
 8000e46:	ed2d 8b02 	vpush	{d8}
 8000e4a:	b08b      	sub	sp, #44	; 0x2c
 8000e4c:	af02      	add	r7, sp, #8
 8000e4e:	60b9      	str	r1, [r7, #8]
 8000e50:	4611      	mov	r1, r2
 8000e52:	461a      	mov	r2, r3
 8000e54:	4603      	mov	r3, r0
 8000e56:	81fb      	strh	r3, [r7, #14]
 8000e58:	460b      	mov	r3, r1
 8000e5a:	81bb      	strh	r3, [r7, #12]
 8000e5c:	4613      	mov	r3, r2
 8000e5e:	80fb      	strh	r3, [r7, #6]
	uint16_t strip_size = ws2812_led_get_max_strip_size(strip_mask);
 8000e60:	89fb      	ldrh	r3, [r7, #14]
 8000e62:	4618      	mov	r0, r3
 8000e64:	f001 fab2 	bl	80023cc <ws2812_led_get_max_strip_size>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	837b      	strh	r3, [r7, #26]
	uint8_t red, green, blue; 
	red = ((color & 0xFF0000) >> 16);
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	0c1b      	lsrs	r3, r3, #16
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	767b      	strb	r3, [r7, #25]
	green = ((color & 0x00FF00) >> 8);
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	0a1b      	lsrs	r3, r3, #8
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	763b      	strb	r3, [r7, #24]
	blue = (color & 0x0000FF);
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	75fb      	strb	r3, [r7, #23]
    //animate_led_set_all_pixels(ALL_STRIPS, 0, 0, 0);
    for (int i = 0; i < count; i++)
 8000e82:	2300      	movs	r3, #0
 8000e84:	61fb      	str	r3, [r7, #28]
 8000e86:	e041      	b.n	8000f0c <animate_led_twinkle+0xc8>
    {
        if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&red, &green, &blue)) return;
 8000e88:	f000 fc80 	bl	800178c <task_button_press_interrupt_occurred>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d00b      	beq.n	8000eaa <animate_led_twinkle+0x66>
 8000e92:	f107 0217 	add.w	r2, r7, #23
 8000e96:	f107 0118 	add.w	r1, r7, #24
 8000e9a:	f107 0319 	add.w	r3, r7, #25
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f000 fcd8 	bl	8001854 <task_button_press_check_interrupts>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d135      	bne.n	8000f16 <animate_led_twinkle+0xd2>
        animate_led_set_pixel(strip_mask, random_num(0, strip_size), red, green, blue);
 8000eaa:	8b7b      	ldrh	r3, [r7, #26]
 8000eac:	4619      	mov	r1, r3
 8000eae:	2000      	movs	r0, #0
 8000eb0:	f008 fa69 	bl	8009386 <random_num>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	b299      	uxth	r1, r3
 8000eb8:	7e7a      	ldrb	r2, [r7, #25]
 8000eba:	7e3c      	ldrb	r4, [r7, #24]
 8000ebc:	7dfb      	ldrb	r3, [r7, #23]
 8000ebe:	89f8      	ldrh	r0, [r7, #14]
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	4623      	mov	r3, r4
 8000ec4:	f000 faee 	bl	80014a4 <animate_led_set_pixel>
        animate_led_show_strip(strip_mask);
 8000ec8:	89fb      	ldrh	r3, [r7, #14]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff fdee 	bl	8000aac <animate_led_show_strip>
        task_led_ctrl_delay(speed_delay / task_led_ctrl_speed());
 8000ed0:	88fb      	ldrh	r3, [r7, #6]
 8000ed2:	ee07 3a90 	vmov	s15, r3
 8000ed6:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8000eda:	f001 f939 	bl	8002150 <task_led_ctrl_speed>
 8000ede:	eeb0 7a40 	vmov.f32	s14, s0
 8000ee2:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8000ee6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000eea:	ee17 0a90 	vmov	r0, s15
 8000eee:	f001 f805 	bl	8001efc <task_led_ctrl_delay>
        if (only_one) animate_led_set_all_pixels(strip_mask, 0, 0, 0);
 8000ef2:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d005      	beq.n	8000f06 <animate_led_twinkle+0xc2>
 8000efa:	89f8      	ldrh	r0, [r7, #14]
 8000efc:	2300      	movs	r3, #0
 8000efe:	2200      	movs	r2, #0
 8000f00:	2100      	movs	r1, #0
 8000f02:	f000 fb29 	bl	8001558 <animate_led_set_all_pixels>
    for (int i = 0; i < count; i++)
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	61fb      	str	r3, [r7, #28]
 8000f0c:	89bb      	ldrh	r3, [r7, #12]
 8000f0e:	69fa      	ldr	r2, [r7, #28]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	dbb9      	blt.n	8000e88 <animate_led_twinkle+0x44>
 8000f14:	e000      	b.n	8000f18 <animate_led_twinkle+0xd4>
        if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&red, &green, &blue)) return;
 8000f16:	bf00      	nop
    }

    //task_led_ctrl_delay(speed_delay / task_led_ctrl_speed());
}
 8000f18:	3724      	adds	r7, #36	; 0x24
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	ecbd 8b02 	vpop	{d8}
 8000f20:	bd90      	pop	{r4, r7, pc}
	...

08000f24 <animate_led_sparkle_only_random_color>:
    }
}


void animate_led_sparkle_only_random_color(strip_mask_t strip_mask, bool fill, uint16_t speed_delay)
{
 8000f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f26:	ed2d 8b02 	vpush	{d8}
 8000f2a:	b08b      	sub	sp, #44	; 0x2c
 8000f2c:	af02      	add	r7, sp, #8
 8000f2e:	4603      	mov	r3, r0
 8000f30:	80fb      	strh	r3, [r7, #6]
 8000f32:	460b      	mov	r3, r1
 8000f34:	717b      	strb	r3, [r7, #5]
 8000f36:	4613      	mov	r3, r2
 8000f38:	807b      	strh	r3, [r7, #2]
	float percent_to_fill = 0.7;
 8000f3a:	4b42      	ldr	r3, [pc, #264]	; (8001044 <animate_led_sparkle_only_random_color+0x120>)
 8000f3c:	61bb      	str	r3, [r7, #24]
	uint16_t strip_size = ws2812_led_get_max_strip_size(strip_mask);
 8000f3e:	88fb      	ldrh	r3, [r7, #6]
 8000f40:	4618      	mov	r0, r3
 8000f42:	f001 fa43 	bl	80023cc <ws2812_led_get_max_strip_size>
 8000f46:	4603      	mov	r3, r0
 8000f48:	82fb      	strh	r3, [r7, #22]
	uint16_t num_active_leds = ws2812_get_num_active_animation_leds(strip_mask);
 8000f4a:	88fb      	ldrh	r3, [r7, #6]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f001 fa1d 	bl	800238c <ws2812_get_num_active_animation_leds>
 8000f52:	4603      	mov	r3, r0
 8000f54:	82bb      	strh	r3, [r7, #20]
    uint8_t dummy_red, dummy_green, dummy_blue; // not used but not worth creating a unique function IMO
	for (uint16_t iii = 0; iii < (percent_to_fill * (float)num_active_leds); iii++)
 8000f56:	2300      	movs	r3, #0
 8000f58:	83fb      	strh	r3, [r7, #30]
 8000f5a:	e059      	b.n	8001010 <animate_led_sparkle_only_random_color+0xec>
	{
	    if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 8000f5c:	f000 fc16 	bl	800178c <task_button_press_interrupt_occurred>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d00b      	beq.n	8000f7e <animate_led_sparkle_only_random_color+0x5a>
 8000f66:	f107 020d 	add.w	r2, r7, #13
 8000f6a:	f107 010e 	add.w	r1, r7, #14
 8000f6e:	f107 030f 	add.w	r3, r7, #15
 8000f72:	4618      	mov	r0, r3
 8000f74:	f000 fc6e 	bl	8001854 <task_button_press_check_interrupts>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d15c      	bne.n	8001038 <animate_led_sparkle_only_random_color+0x114>
		int pix = random_num(0, strip_size);
 8000f7e:	8afb      	ldrh	r3, [r7, #22]
 8000f80:	4619      	mov	r1, r3
 8000f82:	2000      	movs	r0, #0
 8000f84:	f008 f9ff 	bl	8009386 <random_num>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	613b      	str	r3, [r7, #16]
		animate_led_set_pixel(strip_mask, pix, random_num(0, 255), random_num(0, 255), random_num(0, 255));
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	b29c      	uxth	r4, r3
 8000f90:	21ff      	movs	r1, #255	; 0xff
 8000f92:	2000      	movs	r0, #0
 8000f94:	f008 f9f7 	bl	8009386 <random_num>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	b2dd      	uxtb	r5, r3
 8000f9c:	21ff      	movs	r1, #255	; 0xff
 8000f9e:	2000      	movs	r0, #0
 8000fa0:	f008 f9f1 	bl	8009386 <random_num>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	b2de      	uxtb	r6, r3
 8000fa8:	21ff      	movs	r1, #255	; 0xff
 8000faa:	2000      	movs	r0, #0
 8000fac:	f008 f9eb 	bl	8009386 <random_num>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	88f8      	ldrh	r0, [r7, #6]
 8000fb6:	9300      	str	r3, [sp, #0]
 8000fb8:	4633      	mov	r3, r6
 8000fba:	462a      	mov	r2, r5
 8000fbc:	4621      	mov	r1, r4
 8000fbe:	f000 fa71 	bl	80014a4 <animate_led_set_pixel>
		animate_led_show_strip(strip_mask);
 8000fc2:	88fb      	ldrh	r3, [r7, #6]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff fd71 	bl	8000aac <animate_led_show_strip>
        task_led_ctrl_delay((float_t)speed_delay / task_led_ctrl_speed());
 8000fca:	887b      	ldrh	r3, [r7, #2]
 8000fcc:	ee07 3a90 	vmov	s15, r3
 8000fd0:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8000fd4:	f001 f8bc 	bl	8002150 <task_led_ctrl_speed>
 8000fd8:	eeb0 7a40 	vmov.f32	s14, s0
 8000fdc:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8000fe0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fe4:	ee17 0a90 	vmov	r0, s15
 8000fe8:	f000 ff88 	bl	8001efc <task_led_ctrl_delay>
		if (!fill) animate_led_set_pixel(strip_mask, pix, 0, 0, 0);
 8000fec:	797b      	ldrb	r3, [r7, #5]
 8000fee:	f083 0301 	eor.w	r3, r3, #1
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d008      	beq.n	800100a <animate_led_sparkle_only_random_color+0xe6>
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	b299      	uxth	r1, r3
 8000ffc:	88f8      	ldrh	r0, [r7, #6]
 8000ffe:	2300      	movs	r3, #0
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2300      	movs	r3, #0
 8001004:	2200      	movs	r2, #0
 8001006:	f000 fa4d 	bl	80014a4 <animate_led_set_pixel>
	for (uint16_t iii = 0; iii < (percent_to_fill * (float)num_active_leds); iii++)
 800100a:	8bfb      	ldrh	r3, [r7, #30]
 800100c:	3301      	adds	r3, #1
 800100e:	83fb      	strh	r3, [r7, #30]
 8001010:	8bfb      	ldrh	r3, [r7, #30]
 8001012:	ee07 3a90 	vmov	s15, r3
 8001016:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800101a:	8abb      	ldrh	r3, [r7, #20]
 800101c:	ee07 3a90 	vmov	s15, r3
 8001020:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001024:	edd7 7a06 	vldr	s15, [r7, #24]
 8001028:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800102c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001034:	d492      	bmi.n	8000f5c <animate_led_sparkle_only_random_color+0x38>
 8001036:	e000      	b.n	800103a <animate_led_sparkle_only_random_color+0x116>
	    if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 8001038:	bf00      	nop
	}
}
 800103a:	3724      	adds	r7, #36	; 0x24
 800103c:	46bd      	mov	sp, r7
 800103e:	ecbd 8b02 	vpop	{d8}
 8001042:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001044:	3f333333 	.word	0x3f333333

08001048 <animate_led_rainbow_cycle>:
    }
}


void animate_led_rainbow_cycle(strip_mask_t strip_mask, uint16_t speed_delay)
{
 8001048:	b590      	push	{r4, r7, lr}
 800104a:	ed2d 8b02 	vpush	{d8}
 800104e:	b089      	sub	sp, #36	; 0x24
 8001050:	af02      	add	r7, sp, #8
 8001052:	4603      	mov	r3, r0
 8001054:	460a      	mov	r2, r1
 8001056:	80fb      	strh	r3, [r7, #6]
 8001058:	4613      	mov	r3, r2
 800105a:	80bb      	strh	r3, [r7, #4]
	uint8_t dummy_red, dummy_green, dummy_blue;
	uint16_t strip_size = ws2812_led_get_max_strip_size(strip_mask);
 800105c:	88fb      	ldrh	r3, [r7, #6]
 800105e:	4618      	mov	r0, r3
 8001060:	f001 f9b4 	bl	80023cc <ws2812_led_get_max_strip_size>
 8001064:	4603      	mov	r3, r0
 8001066:	827b      	strh	r3, [r7, #18]
    uint8_t *c;
    uint16_t i, j;
    //for (j = 0; j < 256 * 5; j++)
    for (j = 0; j < 256 * 5; j++)
 8001068:	2300      	movs	r3, #0
 800106a:	82bb      	strh	r3, [r7, #20]
 800106c:	e06c      	b.n	8001148 <animate_led_rainbow_cycle+0x100>
    {
        if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 800106e:	f000 fb8d 	bl	800178c <task_button_press_interrupt_occurred>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d00b      	beq.n	8001090 <animate_led_rainbow_cycle+0x48>
 8001078:	f107 0209 	add.w	r2, r7, #9
 800107c:	f107 010a 	add.w	r1, r7, #10
 8001080:	f107 030b 	add.w	r3, r7, #11
 8001084:	4618      	mov	r0, r3
 8001086:	f000 fbe5 	bl	8001854 <task_button_press_check_interrupts>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d160      	bne.n	8001152 <animate_led_rainbow_cycle+0x10a>
        for (i = 0; i < strip_size; i++)
 8001090:	2300      	movs	r3, #0
 8001092:	82fb      	strh	r3, [r7, #22]
 8001094:	e02f      	b.n	80010f6 <animate_led_rainbow_cycle+0xae>
        {
            if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 8001096:	f000 fb79 	bl	800178c <task_button_press_interrupt_occurred>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d00b      	beq.n	80010b8 <animate_led_rainbow_cycle+0x70>
 80010a0:	f107 0209 	add.w	r2, r7, #9
 80010a4:	f107 010a 	add.w	r1, r7, #10
 80010a8:	f107 030b 	add.w	r3, r7, #11
 80010ac:	4618      	mov	r0, r3
 80010ae:	f000 fbd1 	bl	8001854 <task_button_press_check_interrupts>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d14e      	bne.n	8001156 <animate_led_rainbow_cycle+0x10e>
            c = animate_led_wheel(((i * 256 / strip_size) + j) & 255);
 80010b8:	8afb      	ldrh	r3, [r7, #22]
 80010ba:	021a      	lsls	r2, r3, #8
 80010bc:	8a7b      	ldrh	r3, [r7, #18]
 80010be:	fb92 f3f3 	sdiv	r3, r2, r3
 80010c2:	b2da      	uxtb	r2, r3
 80010c4:	8abb      	ldrh	r3, [r7, #20]
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	4413      	add	r3, r2
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	4618      	mov	r0, r3
 80010ce:	f000 f849 	bl	8001164 <animate_led_wheel>
 80010d2:	60f8      	str	r0, [r7, #12]
            animate_led_set_pixel(strip_mask, i, *c, *(c + 1), *(c + 2));
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	781a      	ldrb	r2, [r3, #0]
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	3301      	adds	r3, #1
 80010dc:	781c      	ldrb	r4, [r3, #0]
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	3302      	adds	r3, #2
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	8af9      	ldrh	r1, [r7, #22]
 80010e6:	88f8      	ldrh	r0, [r7, #6]
 80010e8:	9300      	str	r3, [sp, #0]
 80010ea:	4623      	mov	r3, r4
 80010ec:	f000 f9da 	bl	80014a4 <animate_led_set_pixel>
        for (i = 0; i < strip_size; i++)
 80010f0:	8afb      	ldrh	r3, [r7, #22]
 80010f2:	3301      	adds	r3, #1
 80010f4:	82fb      	strh	r3, [r7, #22]
 80010f6:	8afa      	ldrh	r2, [r7, #22]
 80010f8:	8a7b      	ldrh	r3, [r7, #18]
 80010fa:	429a      	cmp	r2, r3
 80010fc:	d3cb      	bcc.n	8001096 <animate_led_rainbow_cycle+0x4e>
        }
        animate_led_show_strip(strip_mask);
 80010fe:	88fb      	ldrh	r3, [r7, #6]
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff fcd3 	bl	8000aac <animate_led_show_strip>
        if (LED_SPEED_10X == task_led_ctrl_speed()) task_led_ctrl_delay(0);
 8001106:	f001 f823 	bl	8002150 <task_led_ctrl_speed>
 800110a:	eef0 7a40 	vmov.f32	s15, s0
 800110e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001116:	d103      	bne.n	8001120 <animate_led_rainbow_cycle+0xd8>
 8001118:	2000      	movs	r0, #0
 800111a:	f000 feef 	bl	8001efc <task_led_ctrl_delay>
 800111e:	e010      	b.n	8001142 <animate_led_rainbow_cycle+0xfa>
        else task_led_ctrl_delay((float_t)speed_delay / task_led_ctrl_speed());
 8001120:	88bb      	ldrh	r3, [r7, #4]
 8001122:	ee07 3a90 	vmov	s15, r3
 8001126:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800112a:	f001 f811 	bl	8002150 <task_led_ctrl_speed>
 800112e:	eeb0 7a40 	vmov.f32	s14, s0
 8001132:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001136:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800113a:	ee17 0a90 	vmov	r0, s15
 800113e:	f000 fedd 	bl	8001efc <task_led_ctrl_delay>
    for (j = 0; j < 256 * 5; j++)
 8001142:	8abb      	ldrh	r3, [r7, #20]
 8001144:	3301      	adds	r3, #1
 8001146:	82bb      	strh	r3, [r7, #20]
 8001148:	8abb      	ldrh	r3, [r7, #20]
 800114a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800114e:	d38e      	bcc.n	800106e <animate_led_rainbow_cycle+0x26>
 8001150:	e002      	b.n	8001158 <animate_led_rainbow_cycle+0x110>
        if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 8001152:	bf00      	nop
 8001154:	e000      	b.n	8001158 <animate_led_rainbow_cycle+0x110>
            if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 8001156:	bf00      	nop
    }
}
 8001158:	371c      	adds	r7, #28
 800115a:	46bd      	mov	sp, r7
 800115c:	ecbd 8b02 	vpop	{d8}
 8001160:	bd90      	pop	{r4, r7, pc}
	...

08001164 <animate_led_wheel>:


uint8_t* animate_led_wheel(uint8_t wheel_pos)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	71fb      	strb	r3, [r7, #7]
    static uint8_t c[3];
    if (wheel_pos < 85)
 800116e:	79fb      	ldrb	r3, [r7, #7]
 8001170:	2b54      	cmp	r3, #84	; 0x54
 8001172:	d813      	bhi.n	800119c <animate_led_wheel+0x38>
    {
        c[0] = wheel_pos * 3;
 8001174:	79fb      	ldrb	r3, [r7, #7]
 8001176:	461a      	mov	r2, r3
 8001178:	0052      	lsls	r2, r2, #1
 800117a:	4413      	add	r3, r2
 800117c:	b2da      	uxtb	r2, r3
 800117e:	4b23      	ldr	r3, [pc, #140]	; (800120c <animate_led_wheel+0xa8>)
 8001180:	701a      	strb	r2, [r3, #0]
        c[1] = 255 - wheel_pos * 3; 
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	461a      	mov	r2, r3
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	b2db      	uxtb	r3, r3
 800118c:	3b01      	subs	r3, #1
 800118e:	b2da      	uxtb	r2, r3
 8001190:	4b1e      	ldr	r3, [pc, #120]	; (800120c <animate_led_wheel+0xa8>)
 8001192:	705a      	strb	r2, [r3, #1]
        c[2] = 0;
 8001194:	4b1d      	ldr	r3, [pc, #116]	; (800120c <animate_led_wheel+0xa8>)
 8001196:	2200      	movs	r2, #0
 8001198:	709a      	strb	r2, [r3, #2]
 800119a:	e02f      	b.n	80011fc <animate_led_wheel+0x98>
    }
    else if(wheel_pos < 170)
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	2ba9      	cmp	r3, #169	; 0xa9
 80011a0:	d816      	bhi.n	80011d0 <animate_led_wheel+0x6c>
    {
        wheel_pos -= 85;
 80011a2:	79fb      	ldrb	r3, [r7, #7]
 80011a4:	3b55      	subs	r3, #85	; 0x55
 80011a6:	71fb      	strb	r3, [r7, #7]
        c[0] = 255 - wheel_pos * 3;
 80011a8:	79fb      	ldrb	r3, [r7, #7]
 80011aa:	461a      	mov	r2, r3
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	3b01      	subs	r3, #1
 80011b4:	b2da      	uxtb	r2, r3
 80011b6:	4b15      	ldr	r3, [pc, #84]	; (800120c <animate_led_wheel+0xa8>)
 80011b8:	701a      	strb	r2, [r3, #0]
        c[1] = 0;
 80011ba:	4b14      	ldr	r3, [pc, #80]	; (800120c <animate_led_wheel+0xa8>)
 80011bc:	2200      	movs	r2, #0
 80011be:	705a      	strb	r2, [r3, #1]
        c[2] = wheel_pos * 3;
 80011c0:	79fb      	ldrb	r3, [r7, #7]
 80011c2:	461a      	mov	r2, r3
 80011c4:	0052      	lsls	r2, r2, #1
 80011c6:	4413      	add	r3, r2
 80011c8:	b2da      	uxtb	r2, r3
 80011ca:	4b10      	ldr	r3, [pc, #64]	; (800120c <animate_led_wheel+0xa8>)
 80011cc:	709a      	strb	r2, [r3, #2]
 80011ce:	e015      	b.n	80011fc <animate_led_wheel+0x98>
    }
    else
    {
        wheel_pos -= 170;
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	3356      	adds	r3, #86	; 0x56
 80011d4:	71fb      	strb	r3, [r7, #7]
        c[0] = 0;
 80011d6:	4b0d      	ldr	r3, [pc, #52]	; (800120c <animate_led_wheel+0xa8>)
 80011d8:	2200      	movs	r2, #0
 80011da:	701a      	strb	r2, [r3, #0]
        c[1] = wheel_pos * 3; 
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	461a      	mov	r2, r3
 80011e0:	0052      	lsls	r2, r2, #1
 80011e2:	4413      	add	r3, r2
 80011e4:	b2da      	uxtb	r2, r3
 80011e6:	4b09      	ldr	r3, [pc, #36]	; (800120c <animate_led_wheel+0xa8>)
 80011e8:	705a      	strb	r2, [r3, #1]
        c[2] = 255 - wheel_pos * 3;
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	461a      	mov	r2, r3
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	3b01      	subs	r3, #1
 80011f6:	b2da      	uxtb	r2, r3
 80011f8:	4b04      	ldr	r3, [pc, #16]	; (800120c <animate_led_wheel+0xa8>)
 80011fa:	709a      	strb	r2, [r3, #2]
    }
    return c;
 80011fc:	4b03      	ldr	r3, [pc, #12]	; (800120c <animate_led_wheel+0xa8>)
}
 80011fe:	4618      	mov	r0, r3
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	2000009c 	.word	0x2000009c

08001210 <animate_led_theater_chase>:
    }
}


void animate_led_theater_chase(strip_mask_t strip_mask, color_hex_code_e color, uint16_t speed_delay)
{
 8001210:	b590      	push	{r4, r7, lr}
 8001212:	ed2d 8b02 	vpush	{d8}
 8001216:	b08b      	sub	sp, #44	; 0x2c
 8001218:	af02      	add	r7, sp, #8
 800121a:	4603      	mov	r3, r0
 800121c:	6039      	str	r1, [r7, #0]
 800121e:	80fb      	strh	r3, [r7, #6]
 8001220:	4613      	mov	r3, r2
 8001222:	80bb      	strh	r3, [r7, #4]
	uint16_t strip_size = ws2812_led_get_max_strip_size(strip_mask);
 8001224:	88fb      	ldrh	r3, [r7, #6]
 8001226:	4618      	mov	r0, r3
 8001228:	f001 f8d0 	bl	80023cc <ws2812_led_get_max_strip_size>
 800122c:	4603      	mov	r3, r0
 800122e:	81fb      	strh	r3, [r7, #14]
	uint8_t red, green, blue; 
	red = ((color & 0xFF0000) >> 16);
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	0c1b      	lsrs	r3, r3, #16
 8001234:	b2db      	uxtb	r3, r3
 8001236:	737b      	strb	r3, [r7, #13]
	green = ((color & 0x00FF00) >> 8);
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	0a1b      	lsrs	r3, r3, #8
 800123c:	b2db      	uxtb	r3, r3
 800123e:	733b      	strb	r3, [r7, #12]
	blue = (color & 0x0000FF);
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	b2db      	uxtb	r3, r3
 8001244:	72fb      	strb	r3, [r7, #11]
    for (int j = 0; j < 10; j++)
 8001246:	2300      	movs	r3, #0
 8001248:	61fb      	str	r3, [r7, #28]
 800124a:	e071      	b.n	8001330 <animate_led_theater_chase+0x120>
    {
        for (int q = 0; q < 3; q++)
 800124c:	2300      	movs	r3, #0
 800124e:	61bb      	str	r3, [r7, #24]
 8001250:	e068      	b.n	8001324 <animate_led_theater_chase+0x114>
        {
            if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&red, &green, &blue)) return;
 8001252:	f000 fa9b 	bl	800178c <task_button_press_interrupt_occurred>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d00b      	beq.n	8001274 <animate_led_theater_chase+0x64>
 800125c:	f107 020b 	add.w	r2, r7, #11
 8001260:	f107 010c 	add.w	r1, r7, #12
 8001264:	f107 030d 	add.w	r3, r7, #13
 8001268:	4618      	mov	r0, r3
 800126a:	f000 faf3 	bl	8001854 <task_button_press_check_interrupts>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d161      	bne.n	8001338 <animate_led_theater_chase+0x128>
            for (int i = 0; i < strip_size; i += 3) animate_led_set_pixel(strip_mask, i + q, red, green, blue); // turn every third pixel on
 8001274:	2300      	movs	r3, #0
 8001276:	617b      	str	r3, [r7, #20]
 8001278:	e010      	b.n	800129c <animate_led_theater_chase+0x8c>
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	b29a      	uxth	r2, r3
 800127e:	69bb      	ldr	r3, [r7, #24]
 8001280:	b29b      	uxth	r3, r3
 8001282:	4413      	add	r3, r2
 8001284:	b299      	uxth	r1, r3
 8001286:	7b7a      	ldrb	r2, [r7, #13]
 8001288:	7b3c      	ldrb	r4, [r7, #12]
 800128a:	7afb      	ldrb	r3, [r7, #11]
 800128c:	88f8      	ldrh	r0, [r7, #6]
 800128e:	9300      	str	r3, [sp, #0]
 8001290:	4623      	mov	r3, r4
 8001292:	f000 f907 	bl	80014a4 <animate_led_set_pixel>
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	3303      	adds	r3, #3
 800129a:	617b      	str	r3, [r7, #20]
 800129c:	89fb      	ldrh	r3, [r7, #14]
 800129e:	697a      	ldr	r2, [r7, #20]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	dbea      	blt.n	800127a <animate_led_theater_chase+0x6a>
            animate_led_show_strip(strip_mask);
 80012a4:	88fb      	ldrh	r3, [r7, #6]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff fc00 	bl	8000aac <animate_led_show_strip>
            if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&red, &green, &blue)) return;
 80012ac:	f000 fa6e 	bl	800178c <task_button_press_interrupt_occurred>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d00b      	beq.n	80012ce <animate_led_theater_chase+0xbe>
 80012b6:	f107 020b 	add.w	r2, r7, #11
 80012ba:	f107 010c 	add.w	r1, r7, #12
 80012be:	f107 030d 	add.w	r3, r7, #13
 80012c2:	4618      	mov	r0, r3
 80012c4:	f000 fac6 	bl	8001854 <task_button_press_check_interrupts>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d136      	bne.n	800133c <animate_led_theater_chase+0x12c>
            task_led_ctrl_delay((float_t)speed_delay / task_led_ctrl_speed());
 80012ce:	88bb      	ldrh	r3, [r7, #4]
 80012d0:	ee07 3a90 	vmov	s15, r3
 80012d4:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80012d8:	f000 ff3a 	bl	8002150 <task_led_ctrl_speed>
 80012dc:	eeb0 7a40 	vmov.f32	s14, s0
 80012e0:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80012e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012e8:	ee17 0a90 	vmov	r0, s15
 80012ec:	f000 fe06 	bl	8001efc <task_led_ctrl_delay>
            for (int i = 0; i < strip_size; i += 3) animate_led_set_pixel(strip_mask, i + q, 0, 0, 0); // turn everty third pixel off
 80012f0:	2300      	movs	r3, #0
 80012f2:	613b      	str	r3, [r7, #16]
 80012f4:	e00f      	b.n	8001316 <animate_led_theater_chase+0x106>
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	b29a      	uxth	r2, r3
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	4413      	add	r3, r2
 8001300:	b299      	uxth	r1, r3
 8001302:	88f8      	ldrh	r0, [r7, #6]
 8001304:	2300      	movs	r3, #0
 8001306:	9300      	str	r3, [sp, #0]
 8001308:	2300      	movs	r3, #0
 800130a:	2200      	movs	r2, #0
 800130c:	f000 f8ca 	bl	80014a4 <animate_led_set_pixel>
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	3303      	adds	r3, #3
 8001314:	613b      	str	r3, [r7, #16]
 8001316:	89fb      	ldrh	r3, [r7, #14]
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	429a      	cmp	r2, r3
 800131c:	dbeb      	blt.n	80012f6 <animate_led_theater_chase+0xe6>
        for (int q = 0; q < 3; q++)
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	3301      	adds	r3, #1
 8001322:	61bb      	str	r3, [r7, #24]
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	2b02      	cmp	r3, #2
 8001328:	dd93      	ble.n	8001252 <animate_led_theater_chase+0x42>
    for (int j = 0; j < 10; j++)
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	3301      	adds	r3, #1
 800132e:	61fb      	str	r3, [r7, #28]
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	2b09      	cmp	r3, #9
 8001334:	dd8a      	ble.n	800124c <animate_led_theater_chase+0x3c>
 8001336:	e002      	b.n	800133e <animate_led_theater_chase+0x12e>
            if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&red, &green, &blue)) return;
 8001338:	bf00      	nop
 800133a:	e000      	b.n	800133e <animate_led_theater_chase+0x12e>
            if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&red, &green, &blue)) return;
 800133c:	bf00      	nop
        }
    }
}
 800133e:	3724      	adds	r7, #36	; 0x24
 8001340:	46bd      	mov	sp, r7
 8001342:	ecbd 8b02 	vpop	{d8}
 8001346:	bd90      	pop	{r4, r7, pc}

08001348 <animate_led_theater_chase_rainbow>:


void animate_led_theater_chase_rainbow(strip_mask_t strip_mask, uint16_t speed_delay)
{
 8001348:	b590      	push	{r4, r7, lr}
 800134a:	ed2d 8b02 	vpush	{d8}
 800134e:	b08d      	sub	sp, #52	; 0x34
 8001350:	af02      	add	r7, sp, #8
 8001352:	4603      	mov	r3, r0
 8001354:	460a      	mov	r2, r1
 8001356:	80fb      	strh	r3, [r7, #6]
 8001358:	4613      	mov	r3, r2
 800135a:	80bb      	strh	r3, [r7, #4]
	uint8_t dummy_red, dummy_green, dummy_blue;
	uint16_t strip_size = ws2812_led_get_max_strip_size(strip_mask);
 800135c:	88fb      	ldrh	r3, [r7, #6]
 800135e:	4618      	mov	r0, r3
 8001360:	f001 f834 	bl	80023cc <ws2812_led_get_max_strip_size>
 8001364:	4603      	mov	r3, r0
 8001366:	82fb      	strh	r3, [r7, #22]
    uint8_t *c;
    for (int j = 0; j < 256; j++) // cycel all 256 colors in the animate_led_wheel
 8001368:	2300      	movs	r3, #0
 800136a:	627b      	str	r3, [r7, #36]	; 0x24
 800136c:	e08a      	b.n	8001484 <animate_led_theater_chase_rainbow+0x13c>
    {
        for (int q = 0; q < 3; q++)
 800136e:	2300      	movs	r3, #0
 8001370:	623b      	str	r3, [r7, #32]
 8001372:	e080      	b.n	8001476 <animate_led_theater_chase_rainbow+0x12e>
        {
            if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 8001374:	f000 fa0a 	bl	800178c <task_button_press_interrupt_occurred>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d00b      	beq.n	8001396 <animate_led_theater_chase_rainbow+0x4e>
 800137e:	f107 020d 	add.w	r2, r7, #13
 8001382:	f107 010e 	add.w	r1, r7, #14
 8001386:	f107 030f 	add.w	r3, r7, #15
 800138a:	4618      	mov	r0, r3
 800138c:	f000 fa62 	bl	8001854 <task_button_press_check_interrupts>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d17b      	bne.n	800148e <animate_led_theater_chase_rainbow+0x146>
            for (int i = 0; i < strip_size; i = i + 3)
 8001396:	2300      	movs	r3, #0
 8001398:	61fb      	str	r3, [r7, #28]
 800139a:	e039      	b.n	8001410 <animate_led_theater_chase_rainbow+0xc8>
            {
                if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 800139c:	f000 f9f6 	bl	800178c <task_button_press_interrupt_occurred>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d00b      	beq.n	80013be <animate_led_theater_chase_rainbow+0x76>
 80013a6:	f107 020d 	add.w	r2, r7, #13
 80013aa:	f107 010e 	add.w	r1, r7, #14
 80013ae:	f107 030f 	add.w	r3, r7, #15
 80013b2:	4618      	mov	r0, r3
 80013b4:	f000 fa4e 	bl	8001854 <task_button_press_check_interrupts>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d169      	bne.n	8001492 <animate_led_theater_chase_rainbow+0x14a>
                c = animate_led_wheel((i + j) % 255);
 80013be:	69fa      	ldr	r2, [r7, #28]
 80013c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c2:	441a      	add	r2, r3
 80013c4:	4b36      	ldr	r3, [pc, #216]	; (80014a0 <animate_led_theater_chase_rainbow+0x158>)
 80013c6:	fb83 1302 	smull	r1, r3, r3, r2
 80013ca:	4413      	add	r3, r2
 80013cc:	11d9      	asrs	r1, r3, #7
 80013ce:	17d3      	asrs	r3, r2, #31
 80013d0:	1ac9      	subs	r1, r1, r3
 80013d2:	460b      	mov	r3, r1
 80013d4:	021b      	lsls	r3, r3, #8
 80013d6:	1a5b      	subs	r3, r3, r1
 80013d8:	1ad1      	subs	r1, r2, r3
 80013da:	b2cb      	uxtb	r3, r1
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff fec1 	bl	8001164 <animate_led_wheel>
 80013e2:	6138      	str	r0, [r7, #16]
                animate_led_set_pixel(strip_mask, i + q, *c, *(c + 1), *(c + 2)); // turn every third pixel on
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	b29a      	uxth	r2, r3
 80013e8:	6a3b      	ldr	r3, [r7, #32]
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	4413      	add	r3, r2
 80013ee:	b299      	uxth	r1, r3
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	781a      	ldrb	r2, [r3, #0]
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	3301      	adds	r3, #1
 80013f8:	781c      	ldrb	r4, [r3, #0]
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	3302      	adds	r3, #2
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	88f8      	ldrh	r0, [r7, #6]
 8001402:	9300      	str	r3, [sp, #0]
 8001404:	4623      	mov	r3, r4
 8001406:	f000 f84d 	bl	80014a4 <animate_led_set_pixel>
            for (int i = 0; i < strip_size; i = i + 3)
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	3303      	adds	r3, #3
 800140e:	61fb      	str	r3, [r7, #28]
 8001410:	8afb      	ldrh	r3, [r7, #22]
 8001412:	69fa      	ldr	r2, [r7, #28]
 8001414:	429a      	cmp	r2, r3
 8001416:	dbc1      	blt.n	800139c <animate_led_theater_chase_rainbow+0x54>
            }
            animate_led_show_strip(strip_mask);
 8001418:	88fb      	ldrh	r3, [r7, #6]
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff fb46 	bl	8000aac <animate_led_show_strip>
            task_led_ctrl_delay((float_t)speed_delay / task_led_ctrl_speed());
 8001420:	88bb      	ldrh	r3, [r7, #4]
 8001422:	ee07 3a90 	vmov	s15, r3
 8001426:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800142a:	f000 fe91 	bl	8002150 <task_led_ctrl_speed>
 800142e:	eeb0 7a40 	vmov.f32	s14, s0
 8001432:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001436:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800143a:	ee17 0a90 	vmov	r0, s15
 800143e:	f000 fd5d 	bl	8001efc <task_led_ctrl_delay>
            for (int i = 0; i < strip_size; i = i + 3) animate_led_set_pixel(strip_mask, i + q, 0, 0, 0); // turn every third pixel off
 8001442:	2300      	movs	r3, #0
 8001444:	61bb      	str	r3, [r7, #24]
 8001446:	e00f      	b.n	8001468 <animate_led_theater_chase_rainbow+0x120>
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	b29a      	uxth	r2, r3
 800144c:	6a3b      	ldr	r3, [r7, #32]
 800144e:	b29b      	uxth	r3, r3
 8001450:	4413      	add	r3, r2
 8001452:	b299      	uxth	r1, r3
 8001454:	88f8      	ldrh	r0, [r7, #6]
 8001456:	2300      	movs	r3, #0
 8001458:	9300      	str	r3, [sp, #0]
 800145a:	2300      	movs	r3, #0
 800145c:	2200      	movs	r2, #0
 800145e:	f000 f821 	bl	80014a4 <animate_led_set_pixel>
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	3303      	adds	r3, #3
 8001466:	61bb      	str	r3, [r7, #24]
 8001468:	8afb      	ldrh	r3, [r7, #22]
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	429a      	cmp	r2, r3
 800146e:	dbeb      	blt.n	8001448 <animate_led_theater_chase_rainbow+0x100>
        for (int q = 0; q < 3; q++)
 8001470:	6a3b      	ldr	r3, [r7, #32]
 8001472:	3301      	adds	r3, #1
 8001474:	623b      	str	r3, [r7, #32]
 8001476:	6a3b      	ldr	r3, [r7, #32]
 8001478:	2b02      	cmp	r3, #2
 800147a:	f77f af7b 	ble.w	8001374 <animate_led_theater_chase_rainbow+0x2c>
    for (int j = 0; j < 256; j++) // cycel all 256 colors in the animate_led_wheel
 800147e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001480:	3301      	adds	r3, #1
 8001482:	627b      	str	r3, [r7, #36]	; 0x24
 8001484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001486:	2bff      	cmp	r3, #255	; 0xff
 8001488:	f77f af71 	ble.w	800136e <animate_led_theater_chase_rainbow+0x26>
 800148c:	e002      	b.n	8001494 <animate_led_theater_chase_rainbow+0x14c>
            if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 800148e:	bf00      	nop
 8001490:	e000      	b.n	8001494 <animate_led_theater_chase_rainbow+0x14c>
                if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 8001492:	bf00      	nop
        }
    }
}
 8001494:	372c      	adds	r7, #44	; 0x2c
 8001496:	46bd      	mov	sp, r7
 8001498:	ecbd 8b02 	vpop	{d8}
 800149c:	bd90      	pop	{r4, r7, pc}
 800149e:	bf00      	nop
 80014a0:	80808081 	.word	0x80808081

080014a4 <animate_led_set_pixel>:
	}
}


void animate_led_set_pixel(strip_mask_t strip_mask, uint16_t pixel, uint8_t red, uint8_t green, uint8_t blue)
{
 80014a4:	b590      	push	{r4, r7, lr}
 80014a6:	b087      	sub	sp, #28
 80014a8:	af02      	add	r7, sp, #8
 80014aa:	4604      	mov	r4, r0
 80014ac:	4608      	mov	r0, r1
 80014ae:	4611      	mov	r1, r2
 80014b0:	461a      	mov	r2, r3
 80014b2:	4623      	mov	r3, r4
 80014b4:	80fb      	strh	r3, [r7, #6]
 80014b6:	4603      	mov	r3, r0
 80014b8:	80bb      	strh	r3, [r7, #4]
 80014ba:	460b      	mov	r3, r1
 80014bc:	70fb      	strb	r3, [r7, #3]
 80014be:	4613      	mov	r3, r2
 80014c0:	70bb      	strb	r3, [r7, #2]
	uint8_t adj_red = red / COLOR_LED_MAX_BRIGHTNESS_DIVISOR;
 80014c2:	78fb      	ldrb	r3, [r7, #3]
 80014c4:	737b      	strb	r3, [r7, #13]
	uint8_t adj_green = green / COLOR_LED_MAX_BRIGHTNESS_DIVISOR;
 80014c6:	78bb      	ldrb	r3, [r7, #2]
 80014c8:	733b      	strb	r3, [r7, #12]
	uint8_t adj_blue = blue / COLOR_LED_MAX_BRIGHTNESS_DIVISOR;
 80014ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 80014ce:	72fb      	strb	r3, [r7, #11]
	if (STRIP_BIT_ALL_SET == strip_mask)
 80014d0:	88fb      	ldrh	r3, [r7, #6]
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d11b      	bne.n	800150e <animate_led_set_pixel+0x6a>
	{
		for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 80014d6:	2301      	movs	r3, #1
 80014d8:	73fb      	strb	r3, [r7, #15]
 80014da:	e014      	b.n	8001506 <animate_led_set_pixel+0x62>
		{
			//offset = animate_led_get_strip_offset(strip_bit);
			if (ws2812_pixel_is_in_strip_range(strip_bit, pixel)) ws2812b_set_led(strip_bit, pixel, adj_red, adj_green, adj_blue);
 80014dc:	88ba      	ldrh	r2, [r7, #4]
 80014de:	7bfb      	ldrb	r3, [r7, #15]
 80014e0:	4611      	mov	r1, r2
 80014e2:	4618      	mov	r0, r3
 80014e4:	f000 ff94 	bl	8002410 <ws2812_pixel_is_in_strip_range>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d008      	beq.n	8001500 <animate_led_set_pixel+0x5c>
 80014ee:	7b3c      	ldrb	r4, [r7, #12]
 80014f0:	7b7a      	ldrb	r2, [r7, #13]
 80014f2:	88b9      	ldrh	r1, [r7, #4]
 80014f4:	7bf8      	ldrb	r0, [r7, #15]
 80014f6:	7afb      	ldrb	r3, [r7, #11]
 80014f8:	9300      	str	r3, [sp, #0]
 80014fa:	4623      	mov	r3, r4
 80014fc:	f000 ffa2 	bl	8002444 <ws2812b_set_led>
		for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8001500:	7bfb      	ldrb	r3, [r7, #15]
 8001502:	3301      	adds	r3, #1
 8001504:	73fb      	strb	r3, [r7, #15]
 8001506:	7bfb      	ldrb	r3, [r7, #15]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d9e7      	bls.n	80014dc <animate_led_set_pixel+0x38>
				if (ws2812_pixel_is_in_strip_range(strip_bit, pixel)) ws2812b_set_led(strip_bit, pixel, adj_red, adj_green, adj_blue);
			}
		}
	}
	//animate_led_show_strip();
}
 800150c:	e01f      	b.n	800154e <animate_led_set_pixel+0xaa>
		for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 800150e:	2301      	movs	r3, #1
 8001510:	73bb      	strb	r3, [r7, #14]
 8001512:	e019      	b.n	8001548 <animate_led_set_pixel+0xa4>
			if (strip_mask & strip_bit)
 8001514:	88fa      	ldrh	r2, [r7, #6]
 8001516:	7bbb      	ldrb	r3, [r7, #14]
 8001518:	4013      	ands	r3, r2
 800151a:	2b00      	cmp	r3, #0
 800151c:	d011      	beq.n	8001542 <animate_led_set_pixel+0x9e>
				if (ws2812_pixel_is_in_strip_range(strip_bit, pixel)) ws2812b_set_led(strip_bit, pixel, adj_red, adj_green, adj_blue);
 800151e:	88ba      	ldrh	r2, [r7, #4]
 8001520:	7bbb      	ldrb	r3, [r7, #14]
 8001522:	4611      	mov	r1, r2
 8001524:	4618      	mov	r0, r3
 8001526:	f000 ff73 	bl	8002410 <ws2812_pixel_is_in_strip_range>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d008      	beq.n	8001542 <animate_led_set_pixel+0x9e>
 8001530:	7b3c      	ldrb	r4, [r7, #12]
 8001532:	7b7a      	ldrb	r2, [r7, #13]
 8001534:	88b9      	ldrh	r1, [r7, #4]
 8001536:	7bb8      	ldrb	r0, [r7, #14]
 8001538:	7afb      	ldrb	r3, [r7, #11]
 800153a:	9300      	str	r3, [sp, #0]
 800153c:	4623      	mov	r3, r4
 800153e:	f000 ff81 	bl	8002444 <ws2812b_set_led>
		for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8001542:	7bbb      	ldrb	r3, [r7, #14]
 8001544:	3301      	adds	r3, #1
 8001546:	73bb      	strb	r3, [r7, #14]
 8001548:	7bbb      	ldrb	r3, [r7, #14]
 800154a:	2b01      	cmp	r3, #1
 800154c:	d9e2      	bls.n	8001514 <animate_led_set_pixel+0x70>
}
 800154e:	bf00      	nop
 8001550:	3714      	adds	r7, #20
 8001552:	46bd      	mov	sp, r7
 8001554:	bd90      	pop	{r4, r7, pc}
	...

08001558 <animate_led_set_all_pixels>:


void animate_led_set_all_pixels(strip_mask_t strip_mask, uint8_t red, uint8_t green, uint8_t blue)
{		
 8001558:	b590      	push	{r4, r7, lr}
 800155a:	b089      	sub	sp, #36	; 0x24
 800155c:	af02      	add	r7, sp, #8
 800155e:	4604      	mov	r4, r0
 8001560:	4608      	mov	r0, r1
 8001562:	4611      	mov	r1, r2
 8001564:	461a      	mov	r2, r3
 8001566:	4623      	mov	r3, r4
 8001568:	80fb      	strh	r3, [r7, #6]
 800156a:	4603      	mov	r3, r0
 800156c:	717b      	strb	r3, [r7, #5]
 800156e:	460b      	mov	r3, r1
 8001570:	713b      	strb	r3, [r7, #4]
 8001572:	4613      	mov	r3, r2
 8001574:	70fb      	strb	r3, [r7, #3]
	uint16_t strip_size = 0;
 8001576:	2300      	movs	r3, #0
 8001578:	81fb      	strh	r3, [r7, #14]
	uint8_t adj_red = red / COLOR_LED_MAX_BRIGHTNESS_DIVISOR;
 800157a:	797b      	ldrb	r3, [r7, #5]
 800157c:	737b      	strb	r3, [r7, #13]
	uint8_t adj_green = green / COLOR_LED_MAX_BRIGHTNESS_DIVISOR;
 800157e:	793b      	ldrb	r3, [r7, #4]
 8001580:	733b      	strb	r3, [r7, #12]
	uint8_t adj_blue = blue / COLOR_LED_MAX_BRIGHTNESS_DIVISOR;
 8001582:	78fb      	ldrb	r3, [r7, #3]
 8001584:	72fb      	strb	r3, [r7, #11]
	if (strip_mask == g_all_strip_mask)
 8001586:	4b2b      	ldr	r3, [pc, #172]	; (8001634 <animate_led_set_all_pixels+0xdc>)
 8001588:	881b      	ldrh	r3, [r3, #0]
 800158a:	88fa      	ldrh	r2, [r7, #6]
 800158c:	429a      	cmp	r2, r3
 800158e:	d122      	bne.n	80015d6 <animate_led_set_all_pixels+0x7e>
	{
		for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8001590:	2301      	movs	r3, #1
 8001592:	75fb      	strb	r3, [r7, #23]
 8001594:	e01b      	b.n	80015ce <animate_led_set_all_pixels+0x76>
		{
		    strip_size = ws2812_get_strip_size(strip_bit);
 8001596:	7dfb      	ldrb	r3, [r7, #23]
 8001598:	4618      	mov	r0, r3
 800159a:	f000 fed5 	bl	8002348 <ws2812_get_strip_size>
 800159e:	4603      	mov	r3, r0
 80015a0:	81fb      	strh	r3, [r7, #14]
			//offset = animate_led_get_strip_offset(strip_bit);
			for (uint16_t iii = 0; iii < strip_size; iii++) ws2812b_set_led(strip_bit, iii, adj_red, adj_green, adj_blue);
 80015a2:	2300      	movs	r3, #0
 80015a4:	82bb      	strh	r3, [r7, #20]
 80015a6:	e00b      	b.n	80015c0 <animate_led_set_all_pixels+0x68>
 80015a8:	7b3c      	ldrb	r4, [r7, #12]
 80015aa:	7b7a      	ldrb	r2, [r7, #13]
 80015ac:	8ab9      	ldrh	r1, [r7, #20]
 80015ae:	7df8      	ldrb	r0, [r7, #23]
 80015b0:	7afb      	ldrb	r3, [r7, #11]
 80015b2:	9300      	str	r3, [sp, #0]
 80015b4:	4623      	mov	r3, r4
 80015b6:	f000 ff45 	bl	8002444 <ws2812b_set_led>
 80015ba:	8abb      	ldrh	r3, [r7, #20]
 80015bc:	3301      	adds	r3, #1
 80015be:	82bb      	strh	r3, [r7, #20]
 80015c0:	8aba      	ldrh	r2, [r7, #20]
 80015c2:	89fb      	ldrh	r3, [r7, #14]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d3ef      	bcc.n	80015a8 <animate_led_set_all_pixels+0x50>
		for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 80015c8:	7dfb      	ldrb	r3, [r7, #23]
 80015ca:	3301      	adds	r3, #1
 80015cc:	75fb      	strb	r3, [r7, #23]
 80015ce:	7dfb      	ldrb	r3, [r7, #23]
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d9e0      	bls.n	8001596 <animate_led_set_all_pixels+0x3e>
 80015d4:	e026      	b.n	8001624 <animate_led_set_all_pixels+0xcc>
		}
	}
	else
	{
		for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 80015d6:	2301      	movs	r3, #1
 80015d8:	74fb      	strb	r3, [r7, #19]
 80015da:	e020      	b.n	800161e <animate_led_set_all_pixels+0xc6>
		{
			if (strip_mask & strip_bit)
 80015dc:	88fa      	ldrh	r2, [r7, #6]
 80015de:	7cfb      	ldrb	r3, [r7, #19]
 80015e0:	4013      	ands	r3, r2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d018      	beq.n	8001618 <animate_led_set_all_pixels+0xc0>
			{
				//offset = animate_led_get_strip_offset(strip_bit);
				strip_size = ws2812_get_strip_size(strip_bit);
 80015e6:	7cfb      	ldrb	r3, [r7, #19]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f000 fead 	bl	8002348 <ws2812_get_strip_size>
 80015ee:	4603      	mov	r3, r0
 80015f0:	81fb      	strh	r3, [r7, #14]
				for (uint16_t yyy = 0; yyy < strip_size; yyy++) ws2812b_set_led(strip_bit, yyy, adj_red, adj_green, adj_blue);
 80015f2:	2300      	movs	r3, #0
 80015f4:	823b      	strh	r3, [r7, #16]
 80015f6:	e00b      	b.n	8001610 <animate_led_set_all_pixels+0xb8>
 80015f8:	7b3c      	ldrb	r4, [r7, #12]
 80015fa:	7b7a      	ldrb	r2, [r7, #13]
 80015fc:	8a39      	ldrh	r1, [r7, #16]
 80015fe:	7cf8      	ldrb	r0, [r7, #19]
 8001600:	7afb      	ldrb	r3, [r7, #11]
 8001602:	9300      	str	r3, [sp, #0]
 8001604:	4623      	mov	r3, r4
 8001606:	f000 ff1d 	bl	8002444 <ws2812b_set_led>
 800160a:	8a3b      	ldrh	r3, [r7, #16]
 800160c:	3301      	adds	r3, #1
 800160e:	823b      	strh	r3, [r7, #16]
 8001610:	8a3a      	ldrh	r2, [r7, #16]
 8001612:	89fb      	ldrh	r3, [r7, #14]
 8001614:	429a      	cmp	r2, r3
 8001616:	d3ef      	bcc.n	80015f8 <animate_led_set_all_pixels+0xa0>
		for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8001618:	7cfb      	ldrb	r3, [r7, #19]
 800161a:	3301      	adds	r3, #1
 800161c:	74fb      	strb	r3, [r7, #19]
 800161e:	7cfb      	ldrb	r3, [r7, #19]
 8001620:	2b01      	cmp	r3, #1
 8001622:	d9db      	bls.n	80015dc <animate_led_set_all_pixels+0x84>
			}
		}
	}
    animate_led_show_strip(strip_mask);
 8001624:	88fb      	ldrh	r3, [r7, #6]
 8001626:	4618      	mov	r0, r3
 8001628:	f7ff fa40 	bl	8000aac <animate_led_show_strip>
}
 800162c:	bf00      	nop
 800162e:	371c      	adds	r7, #28
 8001630:	46bd      	mov	sp, r7
 8001632:	bd90      	pop	{r4, r7, pc}
 8001634:	20000314 	.word	0x20000314

08001638 <color_led_init>:

color_hex_code_e g_color_hex_codes[NUM_COLORS];


void color_led_init(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
    // initialize color arrays
    g_color_hex_codes[COLORS_RED] = COLOR_HEX_RED;
 800163c:	4b26      	ldr	r3, [pc, #152]	; (80016d8 <color_led_init+0xa0>)
 800163e:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8001642:	601a      	str	r2, [r3, #0]
    g_color_hex_codes[COLORS_LIME] = COLOR_HEX_LIME;
 8001644:	4b24      	ldr	r3, [pc, #144]	; (80016d8 <color_led_init+0xa0>)
 8001646:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 800164a:	605a      	str	r2, [r3, #4]
    g_color_hex_codes[COLORS_BLUE] = COLOR_HEX_BLUE;
 800164c:	4b22      	ldr	r3, [pc, #136]	; (80016d8 <color_led_init+0xa0>)
 800164e:	22ff      	movs	r2, #255	; 0xff
 8001650:	609a      	str	r2, [r3, #8]
    g_color_hex_codes[COLORS_YELLOW] = COLOR_HEX_YELLOW;
 8001652:	4b21      	ldr	r3, [pc, #132]	; (80016d8 <color_led_init+0xa0>)
 8001654:	4a21      	ldr	r2, [pc, #132]	; (80016dc <color_led_init+0xa4>)
 8001656:	60da      	str	r2, [r3, #12]
    g_color_hex_codes[COLORS_CYAN] = COLOR_HEX_CYAN;
 8001658:	4b1f      	ldr	r3, [pc, #124]	; (80016d8 <color_led_init+0xa0>)
 800165a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800165e:	611a      	str	r2, [r3, #16]
    g_color_hex_codes[COLORS_MAGENTA] = COLOR_HEX_MAGENTA;
 8001660:	4b1d      	ldr	r3, [pc, #116]	; (80016d8 <color_led_init+0xa0>)
 8001662:	f04f 12ff 	mov.w	r2, #16711935	; 0xff00ff
 8001666:	615a      	str	r2, [r3, #20]
    g_color_hex_codes[COLORS_GREEN] = COLOR_HEX_GREEN;
 8001668:	4b1b      	ldr	r3, [pc, #108]	; (80016d8 <color_led_init+0xa0>)
 800166a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800166e:	619a      	str	r2, [r3, #24]
    g_color_hex_codes[COLORS_PURPLE] = COLOR_HEX_PURPLE;
 8001670:	4b19      	ldr	r3, [pc, #100]	; (80016d8 <color_led_init+0xa0>)
 8001672:	f04f 1280 	mov.w	r2, #8388736	; 0x800080
 8001676:	61da      	str	r2, [r3, #28]
    g_color_hex_codes[COLORS_TEAL] = COLOR_HEX_TEAL;
 8001678:	4b17      	ldr	r3, [pc, #92]	; (80016d8 <color_led_init+0xa0>)
 800167a:	f248 0280 	movw	r2, #32896	; 0x8080
 800167e:	621a      	str	r2, [r3, #32]
    g_color_hex_codes[COLORS_NAVY] = COLOR_HEX_NAVY;
 8001680:	4b15      	ldr	r3, [pc, #84]	; (80016d8 <color_led_init+0xa0>)
 8001682:	2280      	movs	r2, #128	; 0x80
 8001684:	625a      	str	r2, [r3, #36]	; 0x24
    g_color_hex_codes[COLORS_ORANGE_RED] = COLOR_HEX_ORANGE_RED;
 8001686:	4b14      	ldr	r3, [pc, #80]	; (80016d8 <color_led_init+0xa0>)
 8001688:	4a15      	ldr	r2, [pc, #84]	; (80016e0 <color_led_init+0xa8>)
 800168a:	629a      	str	r2, [r3, #40]	; 0x28
    g_color_hex_codes[COLORS_ORANGE] = COLOR_HEX_ORANGE;
 800168c:	4b12      	ldr	r3, [pc, #72]	; (80016d8 <color_led_init+0xa0>)
 800168e:	4a15      	ldr	r2, [pc, #84]	; (80016e4 <color_led_init+0xac>)
 8001690:	62da      	str	r2, [r3, #44]	; 0x2c
    g_color_hex_codes[COLORS_KHAKI] = COLOR_HEX_KHAKI;
 8001692:	4b11      	ldr	r3, [pc, #68]	; (80016d8 <color_led_init+0xa0>)
 8001694:	4a14      	ldr	r2, [pc, #80]	; (80016e8 <color_led_init+0xb0>)
 8001696:	631a      	str	r2, [r3, #48]	; 0x30
    g_color_hex_codes[COLORS_LAWN_GREEN] = COLOR_HEX_LAWN_GREEN;
 8001698:	4b0f      	ldr	r3, [pc, #60]	; (80016d8 <color_led_init+0xa0>)
 800169a:	4a14      	ldr	r2, [pc, #80]	; (80016ec <color_led_init+0xb4>)
 800169c:	635a      	str	r2, [r3, #52]	; 0x34
    g_color_hex_codes[COLORS_SPRING_GREEN] = COLOR_HEX_SPRING_GREEN;
 800169e:	4b0e      	ldr	r3, [pc, #56]	; (80016d8 <color_led_init+0xa0>)
 80016a0:	f64f 727f 	movw	r2, #65407	; 0xff7f
 80016a4:	639a      	str	r2, [r3, #56]	; 0x38
    g_color_hex_codes[COLORS_MIDNIGHT_BLUE] = COLOR_HEX_MIDNIGHT_BLUE;
 80016a6:	4b0c      	ldr	r3, [pc, #48]	; (80016d8 <color_led_init+0xa0>)
 80016a8:	4a11      	ldr	r2, [pc, #68]	; (80016f0 <color_led_init+0xb8>)
 80016aa:	63da      	str	r2, [r3, #60]	; 0x3c
    g_color_hex_codes[COLORS_BLUE_VIOLET] = COLOR_HEX_BLUE_VIOLET;
 80016ac:	4b0a      	ldr	r3, [pc, #40]	; (80016d8 <color_led_init+0xa0>)
 80016ae:	4a11      	ldr	r2, [pc, #68]	; (80016f4 <color_led_init+0xbc>)
 80016b0:	641a      	str	r2, [r3, #64]	; 0x40
    g_color_hex_codes[COLORS_DARK_MAGENTA] = COLOR_HEX_DARK_MAGENTA;
 80016b2:	4b09      	ldr	r3, [pc, #36]	; (80016d8 <color_led_init+0xa0>)
 80016b4:	f04f 128b 	mov.w	r2, #9109643	; 0x8b008b
 80016b8:	645a      	str	r2, [r3, #68]	; 0x44
    g_color_hex_codes[COLORS_HOT_PINK] = COLOR_HEX_HOT_PINK;
 80016ba:	4b07      	ldr	r3, [pc, #28]	; (80016d8 <color_led_init+0xa0>)
 80016bc:	4a0e      	ldr	r2, [pc, #56]	; (80016f8 <color_led_init+0xc0>)
 80016be:	649a      	str	r2, [r3, #72]	; 0x48
    g_color_hex_codes[COLORS_MINT] = COLOR_HEX_MINT;
 80016c0:	4b05      	ldr	r3, [pc, #20]	; (80016d8 <color_led_init+0xa0>)
 80016c2:	4a0e      	ldr	r2, [pc, #56]	; (80016fc <color_led_init+0xc4>)
 80016c4:	64da      	str	r2, [r3, #76]	; 0x4c
    //g_color_hex_codes[COLORS_GRAY] = COLOR_HEX_GRAY;
    g_color_hex_codes[COLORS_BROWN] = COLOR_HEX_BROWN;
 80016c6:	4b04      	ldr	r3, [pc, #16]	; (80016d8 <color_led_init+0xa0>)
 80016c8:	4a0d      	ldr	r2, [pc, #52]	; (8001700 <color_led_init+0xc8>)
 80016ca:	651a      	str	r2, [r3, #80]	; 0x50
}
 80016cc:	bf00      	nop
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	200000a0 	.word	0x200000a0
 80016dc:	00ffff00 	.word	0x00ffff00
 80016e0:	00ff4500 	.word	0x00ff4500
 80016e4:	00ffa500 	.word	0x00ffa500
 80016e8:	00f0e68c 	.word	0x00f0e68c
 80016ec:	007cfc00 	.word	0x007cfc00
 80016f0:	00191970 	.word	0x00191970
 80016f4:	008a2be2 	.word	0x008a2be2
 80016f8:	00ff69b4 	.word	0x00ff69b4
 80016fc:	004ebd88 	.word	0x004ebd88
 8001700:	00a52a2a 	.word	0x00a52a2a

08001704 <current_monitor_ratio>:
float g_max_current_ratio = 1.0;
p_current_t gp_current_monitor_strip[NUM_STRIPS];


float current_monitor_ratio(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
    return g_max_current_ratio;
 8001708:	4b04      	ldr	r3, [pc, #16]	; (800171c <current_monitor_ratio+0x18>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	ee07 3a90 	vmov	s15, r3
}
 8001710:	eeb0 0a67 	vmov.f32	s0, s15
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	20000000 	.word	0x20000000

08001720 <current_monitor_init>:


void current_monitor_init(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
    while ((g_max_current_ratio * ((float)CURRENT_MONITOR_MAX_CURRENT_PER_LED_MA / 1000) * NUM_LEDS) > (float)CURRENT_MONITOR_MAX_CURRENT_DRAW_A)
 8001724:	e009      	b.n	800173a <current_monitor_init+0x1a>
    {
        g_max_current_ratio -= 0.05f;
 8001726:	4b15      	ldr	r3, [pc, #84]	; (800177c <current_monitor_init+0x5c>)
 8001728:	edd3 7a00 	vldr	s15, [r3]
 800172c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001780 <current_monitor_init+0x60>
 8001730:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001734:	4b11      	ldr	r3, [pc, #68]	; (800177c <current_monitor_init+0x5c>)
 8001736:	edc3 7a00 	vstr	s15, [r3]
    while ((g_max_current_ratio * ((float)CURRENT_MONITOR_MAX_CURRENT_PER_LED_MA / 1000) * NUM_LEDS) > (float)CURRENT_MONITOR_MAX_CURRENT_DRAW_A)
 800173a:	4b10      	ldr	r3, [pc, #64]	; (800177c <current_monitor_init+0x5c>)
 800173c:	edd3 7a00 	vldr	s15, [r3]
 8001740:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001784 <current_monitor_init+0x64>
 8001744:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001748:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001788 <current_monitor_init+0x68>
 800174c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001750:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8001754:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800175c:	dce3      	bgt.n	8001726 <current_monitor_init+0x6>
    }
    if (g_max_current_ratio <= 0) while(1); // broken..
 800175e:	4b07      	ldr	r3, [pc, #28]	; (800177c <current_monitor_init+0x5c>)
 8001760:	edd3 7a00 	vldr	s15, [r3]
 8001764:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800176c:	d900      	bls.n	8001770 <current_monitor_init+0x50>
    //g_max_current_ratio = 1.0f;
}
 800176e:	e000      	b.n	8001772 <current_monitor_init+0x52>
    if (g_max_current_ratio <= 0) while(1); // broken..
 8001770:	e7fe      	b.n	8001770 <current_monitor_init+0x50>
}
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	20000000 	.word	0x20000000
 8001780:	3d4ccccd 	.word	0x3d4ccccd
 8001784:	3d23d70a 	.word	0x3d23d70a
 8001788:	43160000 	.word	0x43160000

0800178c <task_button_press_interrupt_occurred>:
bool        g_animate_led_pause_flag = false;
bool        g_animate_led_interrupt = false;
bool        g_interrupt_flag[NUM_ISR] = {false};

bool task_button_press_interrupt_occurred(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
    return g_animate_led_interrupt;
 8001790:	4b03      	ldr	r3, [pc, #12]	; (80017a0 <task_button_press_interrupt_occurred+0x14>)
 8001792:	781b      	ldrb	r3, [r3, #0]
}
 8001794:	4618      	mov	r0, r3
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	20000147 	.word	0x20000147

080017a4 <task_led_ctrl_button_to_isr>:


isr_e task_led_ctrl_button_to_isr(board_init_push_buttons_e button)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	4603      	mov	r3, r0
 80017ac:	71fb      	strb	r3, [r7, #7]
    isr_e return_val;
    switch (button)
 80017ae:	79fb      	ldrb	r3, [r7, #7]
 80017b0:	2b03      	cmp	r3, #3
 80017b2:	d817      	bhi.n	80017e4 <task_led_ctrl_button_to_isr+0x40>
 80017b4:	a201      	add	r2, pc, #4	; (adr r2, 80017bc <task_led_ctrl_button_to_isr+0x18>)
 80017b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ba:	bf00      	nop
 80017bc:	080017cd 	.word	0x080017cd
 80017c0:	080017d3 	.word	0x080017d3
 80017c4:	080017d9 	.word	0x080017d9
 80017c8:	080017df 	.word	0x080017df
    {
        case PUSH_BUTTON_A:
            return_val = ISR_SPEED;
 80017cc:	2300      	movs	r3, #0
 80017ce:	73fb      	strb	r3, [r7, #15]
        break;
 80017d0:	e009      	b.n	80017e6 <task_led_ctrl_button_to_isr+0x42>
        case PUSH_BUTTON_B:
            return_val = ISR_STATE;
 80017d2:	2301      	movs	r3, #1
 80017d4:	73fb      	strb	r3, [r7, #15]
        break;
 80017d6:	e006      	b.n	80017e6 <task_led_ctrl_button_to_isr+0x42>
        case PUSH_BUTTON_C:
            return_val = ISR_COLOR;
 80017d8:	2302      	movs	r3, #2
 80017da:	73fb      	strb	r3, [r7, #15]
        break;
 80017dc:	e003      	b.n	80017e6 <task_led_ctrl_button_to_isr+0x42>
        case PUSH_BUTTON_D:
            return_val = ISR_PAUSE;
 80017de:	2303      	movs	r3, #3
 80017e0:	73fb      	strb	r3, [r7, #15]
        break;
 80017e2:	e000      	b.n	80017e6 <task_led_ctrl_button_to_isr+0x42>
        default: // do nothing!
        break;
 80017e4:	bf00      	nop
    }
    return return_val;
 80017e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3714      	adds	r7, #20
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <task_button_press_ctrl_set_interrupt_flag>:


void task_button_press_ctrl_set_interrupt_flag(isr_e src)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	71fb      	strb	r3, [r7, #7]
    g_animate_led_interrupt = true;
 80017fe:	4b06      	ldr	r3, [pc, #24]	; (8001818 <task_button_press_ctrl_set_interrupt_flag+0x24>)
 8001800:	2201      	movs	r2, #1
 8001802:	701a      	strb	r2, [r3, #0]
    g_interrupt_flag[src] = true;
 8001804:	79fb      	ldrb	r3, [r7, #7]
 8001806:	4a05      	ldr	r2, [pc, #20]	; (800181c <task_button_press_ctrl_set_interrupt_flag+0x28>)
 8001808:	2101      	movs	r1, #1
 800180a:	54d1      	strb	r1, [r2, r3]
}
 800180c:	bf00      	nop
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	20000147 	.word	0x20000147
 800181c:	20000148 	.word	0x20000148

08001820 <task_button_press_ctrl_interrupt_flag>:


bool task_button_press_ctrl_interrupt_flag(isr_e src)
{
 8001820:	b480      	push	{r7}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	71fb      	strb	r3, [r7, #7]
    bool return_val = g_interrupt_flag[src];
 800182a:	79fb      	ldrb	r3, [r7, #7]
 800182c:	4a08      	ldr	r2, [pc, #32]	; (8001850 <task_button_press_ctrl_interrupt_flag+0x30>)
 800182e:	5cd3      	ldrb	r3, [r2, r3]
 8001830:	73fb      	strb	r3, [r7, #15]
    if (return_val) g_interrupt_flag[src] = false; // auto clear
 8001832:	7bfb      	ldrb	r3, [r7, #15]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d003      	beq.n	8001840 <task_button_press_ctrl_interrupt_flag+0x20>
 8001838:	79fb      	ldrb	r3, [r7, #7]
 800183a:	4a05      	ldr	r2, [pc, #20]	; (8001850 <task_button_press_ctrl_interrupt_flag+0x30>)
 800183c:	2100      	movs	r1, #0
 800183e:	54d1      	strb	r1, [r2, r3]
    return return_val;
 8001840:	7bfb      	ldrb	r3, [r7, #15]
}
 8001842:	4618      	mov	r0, r3
 8001844:	3714      	adds	r7, #20
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	20000148 	.word	0x20000148

08001854 <task_button_press_check_interrupts>:


bool task_button_press_check_interrupts(uint8_t *red, uint8_t *green, uint8_t *blue)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
    bool return_val = false;
 8001860:	2300      	movs	r3, #0
 8001862:	75fb      	strb	r3, [r7, #23]
    if (task_button_press_ctrl_interrupt_flag(ISR_STATE))
 8001864:	2001      	movs	r0, #1
 8001866:	f7ff ffdb 	bl	8001820 <task_button_press_ctrl_interrupt_flag>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d008      	beq.n	8001882 <task_button_press_check_interrupts+0x2e>
    {
        task_button_press_interrupt_flag_clear();
 8001870:	f000 f83a 	bl	80018e8 <task_button_press_interrupt_flag_clear>
        return_val = true;
 8001874:	2301      	movs	r3, #1
 8001876:	75fb      	strb	r3, [r7, #23]
        animate_led_solid_custom_color((uint16_t)STRIP_BIT_ALL_SET, COLOR_HEX_BLACK);
 8001878:	2100      	movs	r1, #0
 800187a:	2001      	movs	r0, #1
 800187c:	f7ff f923 	bl	8000ac6 <animate_led_solid_custom_color>
 8001880:	e02a      	b.n	80018d8 <task_button_press_check_interrupts+0x84>
    }
    else if (task_button_press_ctrl_interrupt_flag(ISR_PAUSE))
 8001882:	2003      	movs	r0, #3
 8001884:	f7ff ffcc 	bl	8001820 <task_button_press_ctrl_interrupt_flag>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d00a      	beq.n	80018a4 <task_button_press_check_interrupts+0x50>
    {
        task_button_press_interrupt_flag_clear();
 800188e:	f000 f82b 	bl	80018e8 <task_button_press_interrupt_flag_clear>
        while (g_animate_led_pause_flag)
 8001892:	e002      	b.n	800189a <task_button_press_check_interrupts+0x46>
        {
            osDelay(10);
 8001894:	200a      	movs	r0, #10
 8001896:	f001 f891 	bl	80029bc <osDelay>
        while (g_animate_led_pause_flag)
 800189a:	4b12      	ldr	r3, [pc, #72]	; (80018e4 <task_button_press_check_interrupts+0x90>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d1f8      	bne.n	8001894 <task_button_press_check_interrupts+0x40>
 80018a2:	e019      	b.n	80018d8 <task_button_press_check_interrupts+0x84>
        }
    }
    else if (task_button_press_ctrl_interrupt_flag(ISR_COLOR))
 80018a4:	2002      	movs	r0, #2
 80018a6:	f7ff ffbb 	bl	8001820 <task_button_press_ctrl_interrupt_flag>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d013      	beq.n	80018d8 <task_button_press_check_interrupts+0x84>
    {
        task_button_press_interrupt_flag_clear();
 80018b0:	f000 f81a 	bl	80018e8 <task_button_press_interrupt_flag_clear>
        // interrupt modifies the current color... apply it to the animation!
        *red = task_led_ctrl_color_red_hex();
 80018b4:	f000 fbb0 	bl	8002018 <task_led_ctrl_color_red_hex>
 80018b8:	4603      	mov	r3, r0
 80018ba:	461a      	mov	r2, r3
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	701a      	strb	r2, [r3, #0]
        *green = task_led_ctrl_color_green_hex();
 80018c0:	f000 fbd2 	bl	8002068 <task_led_ctrl_color_green_hex>
 80018c4:	4603      	mov	r3, r0
 80018c6:	461a      	mov	r2, r3
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	701a      	strb	r2, [r3, #0]
        *blue = task_led_ctrl_color_blue_hex();
 80018cc:	f000 fbf4 	bl	80020b8 <task_led_ctrl_color_blue_hex>
 80018d0:	4603      	mov	r3, r0
 80018d2:	461a      	mov	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	701a      	strb	r2, [r3, #0]
    }
    return return_val;
 80018d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3718      	adds	r7, #24
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	20000146 	.word	0x20000146

080018e8 <task_button_press_interrupt_flag_clear>:


void task_button_press_interrupt_flag_clear(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
    g_animate_led_interrupt = false;
 80018ec:	4b03      	ldr	r3, [pc, #12]	; (80018fc <task_button_press_interrupt_flag_clear+0x14>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	701a      	strb	r2, [r3, #0]
}
 80018f2:	bf00      	nop
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	20000147 	.word	0x20000147

08001900 <task_button_press>:


void task_button_press(void *argument)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
    uint32_t button_pressed_bit = 0;
 8001908:	2300      	movs	r3, #0
 800190a:	60fb      	str	r3, [r7, #12]
    bool button_was_pressed = false;
 800190c:	2300      	movs	r3, #0
 800190e:	75fb      	strb	r3, [r7, #23]
    uint8_t a_press_count = 0;
 8001910:	2300      	movs	r3, #0
 8001912:	75bb      	strb	r3, [r7, #22]
    uint8_t b_press_count = 0;
 8001914:	2300      	movs	r3, #0
 8001916:	757b      	strb	r3, [r7, #21]
    uint8_t c_press_count = 0;
 8001918:	2300      	movs	r3, #0
 800191a:	753b      	strb	r3, [r7, #20]
    uint8_t d_press_count = 0;
 800191c:	2300      	movs	r3, #0
 800191e:	74fb      	strb	r3, [r7, #19]
    while (1)
    {
        button_was_pressed = false;
 8001920:	2300      	movs	r3, #0
 8001922:	75fb      	strb	r3, [r7, #23]
        xTaskNotifyWait(0, button_pressed_bit, &button_pressed_bit, portMAX_DELAY);
 8001924:	68f9      	ldr	r1, [r7, #12]
 8001926:	f107 020c 	add.w	r2, r7, #12
 800192a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800192e:	2000      	movs	r0, #0
 8001930:	f002 fcf0 	bl	8004314 <xTaskNotifyWait>

        switch ((board_init_push_buttons_e) button_pressed_bit)
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	b2db      	uxtb	r3, r3
 8001938:	2b03      	cmp	r3, #3
 800193a:	f200 80e0 	bhi.w	8001afe <task_button_press+0x1fe>
 800193e:	a201      	add	r2, pc, #4	; (adr r2, 8001944 <task_button_press+0x44>)
 8001940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001944:	08001955 	.word	0x08001955
 8001948:	080019bd 	.word	0x080019bd
 800194c:	08001a27 	.word	0x08001a27
 8001950:	08001a93 	.word	0x08001a93
        {
            case PUSH_BUTTON_A:
                if ((g_a_interrupt_current_timestamp - g_a_interrupt_previous_timestamp) > SWITCH_DEBOUNCE_TIME_MILLISECONDS)
 8001954:	4bb6      	ldr	r3, [pc, #728]	; (8001c30 <task_button_press+0x330>)
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	4bb6      	ldr	r3, [pc, #728]	; (8001c34 <task_button_press+0x334>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	2bc8      	cmp	r3, #200	; 0xc8
 8001960:	d929      	bls.n	80019b6 <task_button_press+0xb6>
                {
                    button_was_pressed = true;
 8001962:	2301      	movs	r3, #1
 8001964:	75fb      	strb	r3, [r7, #23]
                    button_press_history[PUSH_BUTTON_A][a_press_count++] = g_a_interrupt_current_timestamp;
 8001966:	7dbb      	ldrb	r3, [r7, #22]
 8001968:	1c5a      	adds	r2, r3, #1
 800196a:	75ba      	strb	r2, [r7, #22]
 800196c:	4619      	mov	r1, r3
 800196e:	4bb0      	ldr	r3, [pc, #704]	; (8001c30 <task_button_press+0x330>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4ab1      	ldr	r2, [pc, #708]	; (8001c38 <task_button_press+0x338>)
 8001974:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
                    if ((g_a_interrupt_current_timestamp - g_a_interrupt_previous_timestamp) < SWITCH_FAST_PRESS_TIME_MILLISECONDS) fast_press_count++;
 8001978:	4bad      	ldr	r3, [pc, #692]	; (8001c30 <task_button_press+0x330>)
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	4bad      	ldr	r3, [pc, #692]	; (8001c34 <task_button_press+0x334>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001986:	d206      	bcs.n	8001996 <task_button_press+0x96>
 8001988:	4bac      	ldr	r3, [pc, #688]	; (8001c3c <task_button_press+0x33c>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	3301      	adds	r3, #1
 800198e:	b2da      	uxtb	r2, r3
 8001990:	4baa      	ldr	r3, [pc, #680]	; (8001c3c <task_button_press+0x33c>)
 8001992:	701a      	strb	r2, [r3, #0]
 8001994:	e002      	b.n	800199c <task_button_press+0x9c>
                    else fast_press_count = 0;
 8001996:	4ba9      	ldr	r3, [pc, #676]	; (8001c3c <task_button_press+0x33c>)
 8001998:	2200      	movs	r2, #0
 800199a:	701a      	strb	r2, [r3, #0]
                    if (a_press_count >= SWITCH_HISTORY_DEPTH) a_press_count = 0;
 800199c:	7dbb      	ldrb	r3, [r7, #22]
 800199e:	2b04      	cmp	r3, #4
 80019a0:	d901      	bls.n	80019a6 <task_button_press+0xa6>
 80019a2:	2300      	movs	r3, #0
 80019a4:	75bb      	strb	r3, [r7, #22]
                    task_button_press_ctrl_set_interrupt_flag(task_led_ctrl_button_to_isr(PUSH_BUTTON_A));
 80019a6:	2000      	movs	r0, #0
 80019a8:	f7ff fefc 	bl	80017a4 <task_led_ctrl_button_to_isr>
 80019ac:	4603      	mov	r3, r0
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7ff ff20 	bl	80017f4 <task_button_press_ctrl_set_interrupt_flag>
                }
                else
                {
                    button_was_pressed = false;
                }
            break;
 80019b4:	e0a4      	b.n	8001b00 <task_button_press+0x200>
                    button_was_pressed = false;
 80019b6:	2300      	movs	r3, #0
 80019b8:	75fb      	strb	r3, [r7, #23]
            break;
 80019ba:	e0a1      	b.n	8001b00 <task_button_press+0x200>
            case PUSH_BUTTON_B:
                if ((g_b_interrupt_current_timestamp - g_b_interrupt_previous_timestamp) > SWITCH_DEBOUNCE_TIME_MILLISECONDS)
 80019bc:	4ba0      	ldr	r3, [pc, #640]	; (8001c40 <task_button_press+0x340>)
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	4ba0      	ldr	r3, [pc, #640]	; (8001c44 <task_button_press+0x344>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	2bc8      	cmp	r3, #200	; 0xc8
 80019c8:	d92a      	bls.n	8001a20 <task_button_press+0x120>
                {
                    button_was_pressed = true;
 80019ca:	2301      	movs	r3, #1
 80019cc:	75fb      	strb	r3, [r7, #23]
                    button_press_history[PUSH_BUTTON_B][b_press_count++] = g_b_interrupt_current_timestamp;
 80019ce:	7d7b      	ldrb	r3, [r7, #21]
 80019d0:	1c5a      	adds	r2, r3, #1
 80019d2:	757a      	strb	r2, [r7, #21]
 80019d4:	4618      	mov	r0, r3
 80019d6:	4b9a      	ldr	r3, [pc, #616]	; (8001c40 <task_button_press+0x340>)
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	4997      	ldr	r1, [pc, #604]	; (8001c38 <task_button_press+0x338>)
 80019dc:	1d43      	adds	r3, r0, #5
 80019de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    if ((g_b_interrupt_current_timestamp - g_b_interrupt_previous_timestamp) < SWITCH_FAST_PRESS_TIME_MILLISECONDS) fast_press_count++;
 80019e2:	4b97      	ldr	r3, [pc, #604]	; (8001c40 <task_button_press+0x340>)
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	4b97      	ldr	r3, [pc, #604]	; (8001c44 <task_button_press+0x344>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80019f0:	d206      	bcs.n	8001a00 <task_button_press+0x100>
 80019f2:	4b92      	ldr	r3, [pc, #584]	; (8001c3c <task_button_press+0x33c>)
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	3301      	adds	r3, #1
 80019f8:	b2da      	uxtb	r2, r3
 80019fa:	4b90      	ldr	r3, [pc, #576]	; (8001c3c <task_button_press+0x33c>)
 80019fc:	701a      	strb	r2, [r3, #0]
 80019fe:	e002      	b.n	8001a06 <task_button_press+0x106>
                    else fast_press_count = 0;
 8001a00:	4b8e      	ldr	r3, [pc, #568]	; (8001c3c <task_button_press+0x33c>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	701a      	strb	r2, [r3, #0]
                    if (b_press_count >= SWITCH_HISTORY_DEPTH) b_press_count = 0;
 8001a06:	7d7b      	ldrb	r3, [r7, #21]
 8001a08:	2b04      	cmp	r3, #4
 8001a0a:	d901      	bls.n	8001a10 <task_button_press+0x110>
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	757b      	strb	r3, [r7, #21]
                    task_button_press_ctrl_set_interrupt_flag(task_led_ctrl_button_to_isr(PUSH_BUTTON_B));
 8001a10:	2001      	movs	r0, #1
 8001a12:	f7ff fec7 	bl	80017a4 <task_led_ctrl_button_to_isr>
 8001a16:	4603      	mov	r3, r0
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff feeb 	bl	80017f4 <task_button_press_ctrl_set_interrupt_flag>
                }
                else
                {
                    button_was_pressed = false;
                }
            break;
 8001a1e:	e06f      	b.n	8001b00 <task_button_press+0x200>
                    button_was_pressed = false;
 8001a20:	2300      	movs	r3, #0
 8001a22:	75fb      	strb	r3, [r7, #23]
            break;
 8001a24:	e06c      	b.n	8001b00 <task_button_press+0x200>
            case PUSH_BUTTON_C:
                if ((g_c_interrupt_current_timestamp - g_c_interrupt_previous_timestamp) > SWITCH_DEBOUNCE_TIME_MILLISECONDS)
 8001a26:	4b88      	ldr	r3, [pc, #544]	; (8001c48 <task_button_press+0x348>)
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	4b88      	ldr	r3, [pc, #544]	; (8001c4c <task_button_press+0x34c>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	2bc8      	cmp	r3, #200	; 0xc8
 8001a32:	d92b      	bls.n	8001a8c <task_button_press+0x18c>
                {
                    button_was_pressed = true;
 8001a34:	2301      	movs	r3, #1
 8001a36:	75fb      	strb	r3, [r7, #23]
                    button_press_history[PUSH_BUTTON_C][c_press_count++] = g_c_interrupt_current_timestamp;
 8001a38:	7d3b      	ldrb	r3, [r7, #20]
 8001a3a:	1c5a      	adds	r2, r3, #1
 8001a3c:	753a      	strb	r2, [r7, #20]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	4b81      	ldr	r3, [pc, #516]	; (8001c48 <task_button_press+0x348>)
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	497c      	ldr	r1, [pc, #496]	; (8001c38 <task_button_press+0x338>)
 8001a46:	f100 030a 	add.w	r3, r0, #10
 8001a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    if ((g_c_interrupt_current_timestamp - g_c_interrupt_previous_timestamp) < SWITCH_FAST_PRESS_TIME_MILLISECONDS) fast_press_count++;
 8001a4e:	4b7e      	ldr	r3, [pc, #504]	; (8001c48 <task_button_press+0x348>)
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	4b7e      	ldr	r3, [pc, #504]	; (8001c4c <task_button_press+0x34c>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001a5c:	d206      	bcs.n	8001a6c <task_button_press+0x16c>
 8001a5e:	4b77      	ldr	r3, [pc, #476]	; (8001c3c <task_button_press+0x33c>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	3301      	adds	r3, #1
 8001a64:	b2da      	uxtb	r2, r3
 8001a66:	4b75      	ldr	r3, [pc, #468]	; (8001c3c <task_button_press+0x33c>)
 8001a68:	701a      	strb	r2, [r3, #0]
 8001a6a:	e002      	b.n	8001a72 <task_button_press+0x172>
                    else fast_press_count = 0;
 8001a6c:	4b73      	ldr	r3, [pc, #460]	; (8001c3c <task_button_press+0x33c>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	701a      	strb	r2, [r3, #0]
                    if (c_press_count >= SWITCH_HISTORY_DEPTH) c_press_count = 0;
 8001a72:	7d3b      	ldrb	r3, [r7, #20]
 8001a74:	2b04      	cmp	r3, #4
 8001a76:	d901      	bls.n	8001a7c <task_button_press+0x17c>
 8001a78:	2300      	movs	r3, #0
 8001a7a:	753b      	strb	r3, [r7, #20]
                    task_button_press_ctrl_set_interrupt_flag(task_led_ctrl_button_to_isr(PUSH_BUTTON_C));
 8001a7c:	2002      	movs	r0, #2
 8001a7e:	f7ff fe91 	bl	80017a4 <task_led_ctrl_button_to_isr>
 8001a82:	4603      	mov	r3, r0
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff feb5 	bl	80017f4 <task_button_press_ctrl_set_interrupt_flag>
                }
                else
                {
                    button_was_pressed = false;
                }
            break;
 8001a8a:	e039      	b.n	8001b00 <task_button_press+0x200>
                    button_was_pressed = false;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	75fb      	strb	r3, [r7, #23]
            break;
 8001a90:	e036      	b.n	8001b00 <task_button_press+0x200>
            case PUSH_BUTTON_D:
                if ((g_d_interrupt_current_timestamp - g_d_interrupt_previous_timestamp) > SWITCH_DEBOUNCE_TIME_MILLISECONDS)
 8001a92:	4b6f      	ldr	r3, [pc, #444]	; (8001c50 <task_button_press+0x350>)
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	4b6f      	ldr	r3, [pc, #444]	; (8001c54 <task_button_press+0x354>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	2bc8      	cmp	r3, #200	; 0xc8
 8001a9e:	d92b      	bls.n	8001af8 <task_button_press+0x1f8>
                {
                    button_was_pressed = true;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	75fb      	strb	r3, [r7, #23]
                    button_press_history[PUSH_BUTTON_D][d_press_count++] = g_d_interrupt_current_timestamp;
 8001aa4:	7cfb      	ldrb	r3, [r7, #19]
 8001aa6:	1c5a      	adds	r2, r3, #1
 8001aa8:	74fa      	strb	r2, [r7, #19]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	4b68      	ldr	r3, [pc, #416]	; (8001c50 <task_button_press+0x350>)
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	4961      	ldr	r1, [pc, #388]	; (8001c38 <task_button_press+0x338>)
 8001ab2:	f100 030f 	add.w	r3, r0, #15
 8001ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    if ((g_d_interrupt_current_timestamp - g_d_interrupt_previous_timestamp) < SWITCH_FAST_PRESS_TIME_MILLISECONDS) fast_press_count++;
 8001aba:	4b65      	ldr	r3, [pc, #404]	; (8001c50 <task_button_press+0x350>)
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	4b65      	ldr	r3, [pc, #404]	; (8001c54 <task_button_press+0x354>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001ac8:	d206      	bcs.n	8001ad8 <task_button_press+0x1d8>
 8001aca:	4b5c      	ldr	r3, [pc, #368]	; (8001c3c <task_button_press+0x33c>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	3301      	adds	r3, #1
 8001ad0:	b2da      	uxtb	r2, r3
 8001ad2:	4b5a      	ldr	r3, [pc, #360]	; (8001c3c <task_button_press+0x33c>)
 8001ad4:	701a      	strb	r2, [r3, #0]
 8001ad6:	e002      	b.n	8001ade <task_button_press+0x1de>
                    else fast_press_count = 0;
 8001ad8:	4b58      	ldr	r3, [pc, #352]	; (8001c3c <task_button_press+0x33c>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	701a      	strb	r2, [r3, #0]
                    if (d_press_count >= SWITCH_HISTORY_DEPTH) d_press_count = 0;
 8001ade:	7cfb      	ldrb	r3, [r7, #19]
 8001ae0:	2b04      	cmp	r3, #4
 8001ae2:	d901      	bls.n	8001ae8 <task_button_press+0x1e8>
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	74fb      	strb	r3, [r7, #19]
                    task_button_press_ctrl_set_interrupt_flag(task_led_ctrl_button_to_isr(PUSH_BUTTON_D));
 8001ae8:	2003      	movs	r0, #3
 8001aea:	f7ff fe5b 	bl	80017a4 <task_led_ctrl_button_to_isr>
 8001aee:	4603      	mov	r3, r0
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff fe7f 	bl	80017f4 <task_button_press_ctrl_set_interrupt_flag>
                }
                else
                {
                    button_was_pressed = false;
                }
            break;
 8001af6:	e003      	b.n	8001b00 <task_button_press+0x200>
                    button_was_pressed = false;
 8001af8:	2300      	movs	r3, #0
 8001afa:	75fb      	strb	r3, [r7, #23]
            break;
 8001afc:	e000      	b.n	8001b00 <task_button_press+0x200>
            default:
            break;
 8001afe:	bf00      	nop
        }
        // check if
        if (fast_press_count >= (SWITCH_HISTORY_DEPTH - 1))
 8001b00:	4b4e      	ldr	r3, [pc, #312]	; (8001c3c <task_button_press+0x33c>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	2b03      	cmp	r3, #3
 8001b06:	f240 80a9 	bls.w	8001c5c <task_button_press+0x35c>
        {
            task_button_press_major_change = true;
 8001b0a:	4b53      	ldr	r3, [pc, #332]	; (8001c58 <task_button_press+0x358>)
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	701a      	strb	r2, [r3, #0]
            switch ((board_init_push_buttons_e) button_pressed_bit)
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	2b03      	cmp	r3, #3
 8001b16:	f200 8086 	bhi.w	8001c26 <task_button_press+0x326>
 8001b1a:	a201      	add	r2, pc, #4	; (adr r2, 8001b20 <task_button_press+0x220>)
 8001b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b20:	08001b31 	.word	0x08001b31
 8001b24:	08001b7b 	.word	0x08001b7b
 8001b28:	08001bc9 	.word	0x08001bc9
 8001b2c:	08001c15 	.word	0x08001c15
            {
                case PUSH_BUTTON_A:
                    for (uint8_t iii = 0; iii < 3; iii++)
 8001b30:	2300      	movs	r3, #0
 8001b32:	74bb      	strb	r3, [r7, #18]
 8001b34:	e013      	b.n	8001b5e <task_button_press+0x25e>
                    {
                        animate_led_solid_custom_color((uint16_t)STRIP_BIT_ALL_SET, COLOR_HEX_GREEN);
 8001b36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b3a:	2001      	movs	r0, #1
 8001b3c:	f7fe ffc3 	bl	8000ac6 <animate_led_solid_custom_color>
                        osDelay(500);
 8001b40:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b44:	f000 ff3a 	bl	80029bc <osDelay>
                        animate_led_solid_custom_color((uint16_t)STRIP_BIT_ALL_SET, COLOR_HEX_BLACK);
 8001b48:	2100      	movs	r1, #0
 8001b4a:	2001      	movs	r0, #1
 8001b4c:	f7fe ffbb 	bl	8000ac6 <animate_led_solid_custom_color>
                        osDelay(500);
 8001b50:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b54:	f000 ff32 	bl	80029bc <osDelay>
                    for (uint8_t iii = 0; iii < 3; iii++)
 8001b58:	7cbb      	ldrb	r3, [r7, #18]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	74bb      	strb	r3, [r7, #18]
 8001b5e:	7cbb      	ldrb	r3, [r7, #18]
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d9e8      	bls.n	8001b36 <task_button_press+0x236>
                    }
                    task_led_ctrl_speed_reset();
 8001b64:	f000 fb40 	bl	80021e8 <task_led_ctrl_speed_reset>
                    HAL_NVIC_SetPriority(EXTI9_5_IRQn, 24, 0);
 8001b68:	2200      	movs	r2, #0
 8001b6a:	2118      	movs	r1, #24
 8001b6c:	2017      	movs	r0, #23
 8001b6e:	f003 fe44 	bl	80057fa <HAL_NVIC_SetPriority>
                    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001b72:	2017      	movs	r0, #23
 8001b74:	f003 fe5d 	bl	8005832 <HAL_NVIC_EnableIRQ>
                break;
 8001b78:	e056      	b.n	8001c28 <task_button_press+0x328>

                case PUSH_BUTTON_B:
                    // signal to the user that color state is changing
                    for (uint8_t iii = 0; iii < 3; iii++)
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	747b      	strb	r3, [r7, #17]
 8001b7e:	e013      	b.n	8001ba8 <task_button_press+0x2a8>
                    {
                        animate_led_solid_custom_color((uint16_t)STRIP_BIT_ALL_SET, COLOR_HEX_RED);
 8001b80:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 8001b84:	2001      	movs	r0, #1
 8001b86:	f7fe ff9e 	bl	8000ac6 <animate_led_solid_custom_color>
                        osDelay(500);
 8001b8a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b8e:	f000 ff15 	bl	80029bc <osDelay>
                        animate_led_solid_custom_color((uint16_t)STRIP_BIT_ALL_SET, COLOR_HEX_BLACK);
 8001b92:	2100      	movs	r1, #0
 8001b94:	2001      	movs	r0, #1
 8001b96:	f7fe ff96 	bl	8000ac6 <animate_led_solid_custom_color>
                        osDelay(500);
 8001b9a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b9e:	f000 ff0d 	bl	80029bc <osDelay>
                    for (uint8_t iii = 0; iii < 3; iii++)
 8001ba2:	7c7b      	ldrb	r3, [r7, #17]
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	747b      	strb	r3, [r7, #17]
 8001ba8:	7c7b      	ldrb	r3, [r7, #17]
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d9e8      	bls.n	8001b80 <task_button_press+0x280>
                    }
                    task_led_ctrl_animate_iteration_reset();
 8001bae:	f000 fb27 	bl	8002200 <task_led_ctrl_animate_iteration_reset>
                    task_led_ctrl_animate_state_demo(); // enter demo state
 8001bb2:	f000 fb4f 	bl	8002254 <task_led_ctrl_animate_state_demo>
                    HAL_NVIC_SetPriority(EXTI0_IRQn, 24, 0);
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	2118      	movs	r1, #24
 8001bba:	2006      	movs	r0, #6
 8001bbc:	f003 fe1d 	bl	80057fa <HAL_NVIC_SetPriority>
                    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001bc0:	2006      	movs	r0, #6
 8001bc2:	f003 fe36 	bl	8005832 <HAL_NVIC_EnableIRQ>
                break;
 8001bc6:	e02f      	b.n	8001c28 <task_button_press+0x328>

                case PUSH_BUTTON_C:
                    // signal to the user that color state is changing
                    task_led_ctrl_pause();
 8001bc8:	f000 f9ae 	bl	8001f28 <task_led_ctrl_pause>
                    for (uint8_t iii = 0; iii < 3; iii++)
 8001bcc:	2300      	movs	r3, #0
 8001bce:	743b      	strb	r3, [r7, #16]
 8001bd0:	e012      	b.n	8001bf8 <task_button_press+0x2f8>
                    {
                        animate_led_solid_custom_color((uint16_t)STRIP_BIT_ALL_SET, COLOR_HEX_BLUE);
 8001bd2:	21ff      	movs	r1, #255	; 0xff
 8001bd4:	2001      	movs	r0, #1
 8001bd6:	f7fe ff76 	bl	8000ac6 <animate_led_solid_custom_color>
                        osDelay(500);
 8001bda:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001bde:	f000 feed 	bl	80029bc <osDelay>
                        animate_led_solid_custom_color((uint16_t)STRIP_BIT_ALL_SET, COLOR_HEX_BLACK);
 8001be2:	2100      	movs	r1, #0
 8001be4:	2001      	movs	r0, #1
 8001be6:	f7fe ff6e 	bl	8000ac6 <animate_led_solid_custom_color>
                        osDelay(500);
 8001bea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001bee:	f000 fee5 	bl	80029bc <osDelay>
                    for (uint8_t iii = 0; iii < 3; iii++)
 8001bf2:	7c3b      	ldrb	r3, [r7, #16]
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	743b      	strb	r3, [r7, #16]
 8001bf8:	7c3b      	ldrb	r3, [r7, #16]
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d9e9      	bls.n	8001bd2 <task_button_press+0x2d2>
                    }
                    // don't change iteration count.  Simply go to color demo mode.
                    task_led_ctrl_color_state_demo();
 8001bfe:	f000 f9bd 	bl	8001f7c <task_led_ctrl_color_state_demo>
                    HAL_NVIC_SetPriority(EXTI2_IRQn, 24, 0);
 8001c02:	2200      	movs	r2, #0
 8001c04:	2118      	movs	r1, #24
 8001c06:	2008      	movs	r0, #8
 8001c08:	f003 fdf7 	bl	80057fa <HAL_NVIC_SetPriority>
                    HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001c0c:	2008      	movs	r0, #8
 8001c0e:	f003 fe10 	bl	8005832 <HAL_NVIC_EnableIRQ>
                break;
 8001c12:	e009      	b.n	8001c28 <task_button_press+0x328>

                case PUSH_BUTTON_D:
                    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 24, 0);
 8001c14:	2200      	movs	r2, #0
 8001c16:	2118      	movs	r1, #24
 8001c18:	2028      	movs	r0, #40	; 0x28
 8001c1a:	f003 fdee 	bl	80057fa <HAL_NVIC_SetPriority>
                    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c1e:	2028      	movs	r0, #40	; 0x28
 8001c20:	f003 fe07 	bl	8005832 <HAL_NVIC_EnableIRQ>
                    // future
                break;
 8001c24:	e000      	b.n	8001c28 <task_button_press+0x328>

                default:
                break;
 8001c26:	bf00      	nop
            }
            task_button_press_major_change = false;
 8001c28:	4b0b      	ldr	r3, [pc, #44]	; (8001c58 <task_button_press+0x358>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	701a      	strb	r2, [r3, #0]
 8001c2e:	e677      	b.n	8001920 <task_button_press+0x20>
 8001c30:	20002fd8 	.word	0x20002fd8
 8001c34:	20002fdc 	.word	0x20002fdc
 8001c38:	200000f4 	.word	0x200000f4
 8001c3c:	20000144 	.word	0x20000144
 8001c40:	20002fe0 	.word	0x20002fe0
 8001c44:	20002fe4 	.word	0x20002fe4
 8001c48:	20002fe8 	.word	0x20002fe8
 8001c4c:	20002fec 	.word	0x20002fec
 8001c50:	20002ff0 	.word	0x20002ff0
 8001c54:	20002ff4 	.word	0x20002ff4
 8001c58:	20000145 	.word	0x20000145
        }
        else if (button_was_pressed)
 8001c5c:	7dfb      	ldrb	r3, [r7, #23]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d056      	beq.n	8001d10 <task_button_press+0x410>
        {
            // set ISR flag
            task_button_press_ctrl_set_interrupt_flag(task_led_ctrl_button_to_isr((board_init_push_buttons_e) button_pressed_bit));
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7ff fd9c 	bl	80017a4 <task_led_ctrl_button_to_isr>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff fdc0 	bl	80017f4 <task_button_press_ctrl_set_interrupt_flag>
            switch ((board_init_push_buttons_e) button_pressed_bit)
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	2b03      	cmp	r3, #3
 8001c7a:	d84b      	bhi.n	8001d14 <task_button_press+0x414>
 8001c7c:	a201      	add	r2, pc, #4	; (adr r2, 8001c84 <task_button_press+0x384>)
 8001c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c82:	bf00      	nop
 8001c84:	08001c95 	.word	0x08001c95
 8001c88:	08001cab 	.word	0x08001cab
 8001c8c:	08001cd5 	.word	0x08001cd5
 8001c90:	08001cfb 	.word	0x08001cfb
            {
                case PUSH_BUTTON_A:
                    task_led_ctrl_speed_adjust();
 8001c94:	f000 fa90 	bl	80021b8 <task_led_ctrl_speed_adjust>
                    HAL_NVIC_SetPriority(EXTI9_5_IRQn, 24, 0);
 8001c98:	2200      	movs	r2, #0
 8001c9a:	2118      	movs	r1, #24
 8001c9c:	2017      	movs	r0, #23
 8001c9e:	f003 fdac 	bl	80057fa <HAL_NVIC_SetPriority>
                    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001ca2:	2017      	movs	r0, #23
 8001ca4:	f003 fdc5 	bl	8005832 <HAL_NVIC_EnableIRQ>
                break;
 8001ca8:	e035      	b.n	8001d16 <task_button_press+0x416>
                case PUSH_BUTTON_B:
                    // exit demo state if in it.
                    if (MASTER_LED_STATE_DEMO == task_led_ctrl_animate_state())
 8001caa:	f000 fafb 	bl	80022a4 <task_led_ctrl_animate_state>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d102      	bne.n	8001cba <task_button_press+0x3ba>
                    {
                        task_led_ctrl_animate_state_fixed(); // animation count is auto cleared here.
 8001cb4:	f000 fae0 	bl	8002278 <task_led_ctrl_animate_state_fixed>
 8001cb8:	e003      	b.n	8001cc2 <task_button_press+0x3c2>
                    }
                    else
                    {
                        task_led_ctrl_animate_iteration_reset();
 8001cba:	f000 faa1 	bl	8002200 <task_led_ctrl_animate_iteration_reset>
                        task_led_ctrl_animate_adjust_state();
 8001cbe:	f000 faab 	bl	8002218 <task_led_ctrl_animate_adjust_state>
                    }
                    HAL_NVIC_SetPriority(EXTI0_IRQn, 24, 0);
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	2118      	movs	r1, #24
 8001cc6:	2006      	movs	r0, #6
 8001cc8:	f003 fd97 	bl	80057fa <HAL_NVIC_SetPriority>
                    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001ccc:	2006      	movs	r0, #6
 8001cce:	f003 fdb0 	bl	8005832 <HAL_NVIC_EnableIRQ>
                break;
 8001cd2:	e020      	b.n	8001d16 <task_button_press+0x416>
                case PUSH_BUTTON_C:
                    // exit demo state if in it.
                    if (MASTER_COLOR_STATE_DEMO == task_led_ctrl_color_state())
 8001cd4:	f000 f946 	bl	8001f64 <task_led_ctrl_color_state>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d102      	bne.n	8001ce4 <task_button_press+0x3e4>
                    {
                        task_led_ctrl_color_state_fixed();
 8001cde:	f000 f959 	bl	8001f94 <task_led_ctrl_color_state_fixed>
 8001ce2:	e001      	b.n	8001ce8 <task_button_press+0x3e8>
                    }
                    else
                    {
                        task_led_ctrl_color_adjust();
 8001ce4:	f000 f968 	bl	8001fb8 <task_led_ctrl_color_adjust>
                    }
                    HAL_NVIC_SetPriority(EXTI2_IRQn, 24, 0);
 8001ce8:	2200      	movs	r2, #0
 8001cea:	2118      	movs	r1, #24
 8001cec:	2008      	movs	r0, #8
 8001cee:	f003 fd84 	bl	80057fa <HAL_NVIC_SetPriority>
                    HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001cf2:	2008      	movs	r0, #8
 8001cf4:	f003 fd9d 	bl	8005832 <HAL_NVIC_EnableIRQ>
                break;
 8001cf8:	e00d      	b.n	8001d16 <task_button_press+0x416>
                case PUSH_BUTTON_D:
                    task_led_ctrl_pause();
 8001cfa:	f000 f915 	bl	8001f28 <task_led_ctrl_pause>
                    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 24, 0);
 8001cfe:	2200      	movs	r2, #0
 8001d00:	2118      	movs	r1, #24
 8001d02:	2028      	movs	r0, #40	; 0x28
 8001d04:	f003 fd79 	bl	80057fa <HAL_NVIC_SetPriority>
                    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001d08:	2028      	movs	r0, #40	; 0x28
 8001d0a:	f003 fd92 	bl	8005832 <HAL_NVIC_EnableIRQ>
                break;
 8001d0e:	e002      	b.n	8001d16 <task_button_press+0x416>
                default:
                break;
            }
        }
 8001d10:	bf00      	nop
 8001d12:	e605      	b.n	8001920 <task_button_press+0x20>
                break;
 8001d14:	bf00      	nop
        button_was_pressed = false;
 8001d16:	e603      	b.n	8001920 <task_button_press+0x20>

08001d18 <task_led_ctrl_adjust_parameters>:
uint16_t                g_delay_in_animation_ms = 100; // where applicable of course
extern bool             task_button_press_major_change;


static void task_led_ctrl_adjust_parameters(const task_led_ctrl_loop_iterations_e max_iterations, const task_led_ctrl_delay_ms_e animation_delay_ms)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	4603      	mov	r3, r0
 8001d20:	460a      	mov	r2, r1
 8001d22:	71fb      	strb	r3, [r7, #7]
 8001d24:	4613      	mov	r3, r2
 8001d26:	80bb      	strh	r3, [r7, #4]
    g_animation_iterations++;
 8001d28:	4b18      	ldr	r3, [pc, #96]	; (8001d8c <task_led_ctrl_adjust_parameters+0x74>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	b2da      	uxtb	r2, r3
 8001d30:	4b16      	ldr	r3, [pc, #88]	; (8001d8c <task_led_ctrl_adjust_parameters+0x74>)
 8001d32:	701a      	strb	r2, [r3, #0]
    if (MASTER_LED_STATE_DEMO == g_master_led_state)
 8001d34:	4b16      	ldr	r3, [pc, #88]	; (8001d90 <task_led_ctrl_adjust_parameters+0x78>)
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d11b      	bne.n	8001d74 <task_led_ctrl_adjust_parameters+0x5c>
    {
        if (TASK_LED_CTRL_DELAY_MS_0 != animation_delay_ms) task_led_ctrl_delay(animation_delay_ms);
 8001d3c:	88bb      	ldrh	r3, [r7, #4]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d003      	beq.n	8001d4a <task_led_ctrl_adjust_parameters+0x32>
 8001d42:	88bb      	ldrh	r3, [r7, #4]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f000 f8d9 	bl	8001efc <task_led_ctrl_delay>
        if (max_iterations == g_animation_iterations)
 8001d4a:	4b10      	ldr	r3, [pc, #64]	; (8001d8c <task_led_ctrl_adjust_parameters+0x74>)
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	79fa      	ldrb	r2, [r7, #7]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d10f      	bne.n	8001d74 <task_led_ctrl_adjust_parameters+0x5c>
        {
            g_led_state = (led_state_e) (g_led_state + 1);
 8001d54:	4b0f      	ldr	r3, [pc, #60]	; (8001d94 <task_led_ctrl_adjust_parameters+0x7c>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	3301      	adds	r3, #1
 8001d5a:	b2da      	uxtb	r2, r3
 8001d5c:	4b0d      	ldr	r3, [pc, #52]	; (8001d94 <task_led_ctrl_adjust_parameters+0x7c>)
 8001d5e:	701a      	strb	r2, [r3, #0]
            if (NUM_LED_STATES == g_led_state) g_led_state = LED_STATE_FIRST;
 8001d60:	4b0c      	ldr	r3, [pc, #48]	; (8001d94 <task_led_ctrl_adjust_parameters+0x7c>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	2b09      	cmp	r3, #9
 8001d66:	d102      	bne.n	8001d6e <task_led_ctrl_adjust_parameters+0x56>
 8001d68:	4b0a      	ldr	r3, [pc, #40]	; (8001d94 <task_led_ctrl_adjust_parameters+0x7c>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	701a      	strb	r2, [r3, #0]
            g_animation_iterations = 0;
 8001d6e:	4b07      	ldr	r3, [pc, #28]	; (8001d8c <task_led_ctrl_adjust_parameters+0x74>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	701a      	strb	r2, [r3, #0]
        }
    }
    if (MASTER_COLOR_STATE_DEMO == task_led_ctrl_color_state()) task_led_ctrl_color_random();
 8001d74:	f000 f8f6 	bl	8001f64 <task_led_ctrl_color_state>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d101      	bne.n	8001d82 <task_led_ctrl_adjust_parameters+0x6a>
 8001d7e:	f000 f9c1 	bl	8002104 <task_led_ctrl_color_random>
}
 8001d82:	bf00      	nop
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	2000014e 	.word	0x2000014e
 8001d90:	2000014c 	.word	0x2000014c
 8001d94:	20000004 	.word	0x20000004

08001d98 <task_led_ctrl>:


void task_led_ctrl(void *argument)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af02      	add	r7, sp, #8
 8001d9e:	6078      	str	r0, [r7, #4]
    board_init_common_stop_timer();
 8001da0:	f007 fa80 	bl	80092a4 <board_init_common_stop_timer>
    animate_led_solid_custom_color((uint16_t)STRIP_BIT_ALL_SET, COLOR_HEX_BLACK);
 8001da4:	2100      	movs	r1, #0
 8001da6:	2001      	movs	r0, #1
 8001da8:	f7fe fe8d 	bl	8000ac6 <animate_led_solid_custom_color>
    osDelay(1000);
 8001dac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001db0:	f000 fe04 	bl	80029bc <osDelay>
    while (1)
    {
        while(task_button_press_major_change)
 8001db4:	e002      	b.n	8001dbc <task_led_ctrl+0x24>
        {
            osDelay(10);
 8001db6:	200a      	movs	r0, #10
 8001db8:	f000 fe00 	bl	80029bc <osDelay>
        while(task_button_press_major_change)
 8001dbc:	4b4c      	ldr	r3, [pc, #304]	; (8001ef0 <task_led_ctrl+0x158>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d1f8      	bne.n	8001db6 <task_led_ctrl+0x1e>
        }
        switch(g_led_state)
 8001dc4:	4b4b      	ldr	r3, [pc, #300]	; (8001ef4 <task_led_ctrl+0x15c>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	2b08      	cmp	r3, #8
 8001dca:	f200 808f 	bhi.w	8001eec <task_led_ctrl+0x154>
 8001dce:	a201      	add	r2, pc, #4	; (adr r2, 8001dd4 <task_led_ctrl+0x3c>)
 8001dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dd4:	08001ed3 	.word	0x08001ed3
 8001dd8:	08001df9 	.word	0x08001df9
 8001ddc:	08001e2f 	.word	0x08001e2f
 8001de0:	08001e47 	.word	0x08001e47
 8001de4:	08001e5b 	.word	0x08001e5b
 8001de8:	08001e6d 	.word	0x08001e6d
 8001dec:	08001e87 	.word	0x08001e87
 8001df0:	08001e99 	.word	0x08001e99
 8001df4:	08001eb1 	.word	0x08001eb1
//                animate_led_only_spell_word(STRIP_BIT_ALL_SET, COLOR_HEX_MINT, 20);
//                animate_led_only_spell_word(STRIP_BIT_ALL_SET, COLOR_HEX_BLACK, 20);
//            break;
            case LED_STATE_SOLID_COLOR:

                animate_led_solid_custom_color((uint16_t)STRIP_BIT_ALL_SET, task_led_ctrl_color_hex());
 8001df8:	f000 f8fc 	bl	8001ff4 <task_led_ctrl_color_hex>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	4619      	mov	r1, r3
 8001e00:	2001      	movs	r0, #1
 8001e02:	f7fe fe60 	bl	8000ac6 <animate_led_solid_custom_color>
                if (MASTER_LED_STATE_FIXED == g_master_led_state)
 8001e06:	4b3c      	ldr	r3, [pc, #240]	; (8001ef8 <task_led_ctrl+0x160>)
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d109      	bne.n	8001e22 <task_led_ctrl+0x8a>
                {
                    task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_5, TASK_LED_CTRL_DELAY_MS_1000);
 8001e0e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001e12:	2005      	movs	r0, #5
 8001e14:	f7ff ff80 	bl	8001d18 <task_led_ctrl_adjust_parameters>
                    task_led_ctrl_delay(1000);
 8001e18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e1c:	f000 f86e 	bl	8001efc <task_led_ctrl_delay>
                }
                else task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_5, TASK_LED_CTRL_DELAY_MS_5000);
            break;
 8001e20:	e065      	b.n	8001eee <task_led_ctrl+0x156>
                else task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_5, TASK_LED_CTRL_DELAY_MS_5000);
 8001e22:	f241 3188 	movw	r1, #5000	; 0x1388
 8001e26:	2005      	movs	r0, #5
 8001e28:	f7ff ff76 	bl	8001d18 <task_led_ctrl_adjust_parameters>
            break;
 8001e2c:	e05f      	b.n	8001eee <task_led_ctrl+0x156>
            case LED_STATE_SPARKLE_NO_FILL:
                animate_led_turn_all_pixels_off();
 8001e2e:	f7fe fe66 	bl	8000afe <animate_led_turn_all_pixels_off>
                animate_led_sparkle_only_random_color(STRIP_BIT_ALL_SET, false, 100);//random(0, 50));
 8001e32:	2264      	movs	r2, #100	; 0x64
 8001e34:	2100      	movs	r1, #0
 8001e36:	2001      	movs	r0, #1
 8001e38:	f7ff f874 	bl	8000f24 <animate_led_sparkle_only_random_color>
                task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_5, TASK_LED_CTRL_DELAY_MS_0);
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	2005      	movs	r0, #5
 8001e40:	f7ff ff6a 	bl	8001d18 <task_led_ctrl_adjust_parameters>
            break;
 8001e44:	e053      	b.n	8001eee <task_led_ctrl+0x156>
            case LED_STATE_SPARKLE_FILL:
                animate_led_sparkle_only_random_color(STRIP_BIT_ALL_SET, true, 100);
 8001e46:	2264      	movs	r2, #100	; 0x64
 8001e48:	2101      	movs	r1, #1
 8001e4a:	2001      	movs	r0, #1
 8001e4c:	f7ff f86a 	bl	8000f24 <animate_led_sparkle_only_random_color>
                task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_10, TASK_LED_CTRL_DELAY_MS_0);
 8001e50:	2100      	movs	r1, #0
 8001e52:	200a      	movs	r0, #10
 8001e54:	f7ff ff60 	bl	8001d18 <task_led_ctrl_adjust_parameters>
            break;
 8001e58:	e049      	b.n	8001eee <task_led_ctrl+0x156>
            case LED_STATE_RAINBOW_CYCLE:
                animate_led_rainbow_cycle(STRIP_BIT_ALL_SET, 10);
 8001e5a:	210a      	movs	r1, #10
 8001e5c:	2001      	movs	r0, #1
 8001e5e:	f7ff f8f3 	bl	8001048 <animate_led_rainbow_cycle>
                task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_5, TASK_LED_CTRL_DELAY_MS_0);
 8001e62:	2100      	movs	r1, #0
 8001e64:	2005      	movs	r0, #5
 8001e66:	f7ff ff57 	bl	8001d18 <task_led_ctrl_adjust_parameters>
            break;
 8001e6a:	e040      	b.n	8001eee <task_led_ctrl+0x156>
            case LED_STATE_THEATER_CHASE:
                animate_led_theater_chase(STRIP_BIT_ALL_SET, task_led_ctrl_color_hex(), 20);
 8001e6c:	f000 f8c2 	bl	8001ff4 <task_led_ctrl_color_hex>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2214      	movs	r2, #20
 8001e74:	4619      	mov	r1, r3
 8001e76:	2001      	movs	r0, #1
 8001e78:	f7ff f9ca 	bl	8001210 <animate_led_theater_chase>
                task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_10, TASK_LED_CTRL_DELAY_MS_0);
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	200a      	movs	r0, #10
 8001e80:	f7ff ff4a 	bl	8001d18 <task_led_ctrl_adjust_parameters>
            break;
 8001e84:	e033      	b.n	8001eee <task_led_ctrl+0x156>
            case LED_STATE_THEATER_CHASE_RAINBOW:
                animate_led_theater_chase_rainbow(STRIP_BIT_ALL_SET, 20);
 8001e86:	2114      	movs	r1, #20
 8001e88:	2001      	movs	r0, #1
 8001e8a:	f7ff fa5d 	bl	8001348 <animate_led_theater_chase_rainbow>
                task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_2, TASK_LED_CTRL_DELAY_MS_0);
 8001e8e:	2100      	movs	r1, #0
 8001e90:	2002      	movs	r0, #2
 8001e92:	f7ff ff41 	bl	8001d18 <task_led_ctrl_adjust_parameters>
            break;
 8001e96:	e02a      	b.n	8001eee <task_led_ctrl+0x156>
            case LED_STATE_FADE_IN_AND_OUT:
                animate_led_fade_in_fade_out((uint16_t)STRIP_BIT_ALL_SET, task_led_ctrl_color_hex());
 8001e98:	f000 f8ac 	bl	8001ff4 <task_led_ctrl_color_hex>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	2001      	movs	r0, #1
 8001ea2:	f7fe fe93 	bl	8000bcc <animate_led_fade_in_fade_out>
                task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_10, TASK_LED_CTRL_DELAY_MS_0);
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	200a      	movs	r0, #10
 8001eaa:	f7ff ff35 	bl	8001d18 <task_led_ctrl_adjust_parameters>
            break;
 8001eae:	e01e      	b.n	8001eee <task_led_ctrl+0x156>
            case LED_STATE_TWINKLE:
                animate_led_turn_all_pixels_off();
 8001eb0:	f7fe fe25 	bl	8000afe <animate_led_turn_all_pixels_off>
                animate_led_twinkle(STRIP_BIT_ALL_SET, task_led_ctrl_color_hex(), (uint32_t)((float)NUM_LEDS * (float)0.9), 20, false);
 8001eb4:	f000 f89e 	bl	8001ff4 <task_led_ctrl_color_hex>
 8001eb8:	4601      	mov	r1, r0
 8001eba:	2300      	movs	r3, #0
 8001ebc:	9300      	str	r3, [sp, #0]
 8001ebe:	2314      	movs	r3, #20
 8001ec0:	2287      	movs	r2, #135	; 0x87
 8001ec2:	2001      	movs	r0, #1
 8001ec4:	f7fe ffbe 	bl	8000e44 <animate_led_twinkle>
                task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_5, TASK_LED_CTRL_DELAY_MS_0);
 8001ec8:	2100      	movs	r1, #0
 8001eca:	2005      	movs	r0, #5
 8001ecc:	f7ff ff24 	bl	8001d18 <task_led_ctrl_adjust_parameters>
            break;
 8001ed0:	e00d      	b.n	8001eee <task_led_ctrl+0x156>
            case LED_STATE_SPELL:
                animate_led_only_spell_word(STRIP_BIT_ALL_SET, task_led_ctrl_color_hex(), 20);
 8001ed2:	f000 f88f 	bl	8001ff4 <task_led_ctrl_color_hex>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2214      	movs	r2, #20
 8001eda:	4619      	mov	r1, r3
 8001edc:	2001      	movs	r0, #1
 8001ede:	f7fe fe18 	bl	8000b12 <animate_led_only_spell_word>
                task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_10, TASK_LED_CTRL_DELAY_MS_0);
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	200a      	movs	r0, #10
 8001ee6:	f7ff ff17 	bl	8001d18 <task_led_ctrl_adjust_parameters>
            break;
 8001eea:	e000      	b.n	8001eee <task_led_ctrl+0x156>
            default:
            break;
 8001eec:	bf00      	nop
        while(task_button_press_major_change)
 8001eee:	e765      	b.n	8001dbc <task_led_ctrl+0x24>
 8001ef0:	20000145 	.word	0x20000145
 8001ef4:	20000004 	.word	0x20000004
 8001ef8:	2000014c 	.word	0x2000014c

08001efc <task_led_ctrl_delay>:
    }
}


void task_led_ctrl_delay(uint32_t time_ms)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
    uint32_t ms_count = 0;
 8001f04:	2300      	movs	r3, #0
 8001f06:	60fb      	str	r3, [r7, #12]
    while (ms_count++ < time_ms)
 8001f08:	e002      	b.n	8001f10 <task_led_ctrl_delay+0x14>
    {
        osDelay(portTICK_PERIOD_MS);
 8001f0a:	2001      	movs	r0, #1
 8001f0c:	f000 fd56 	bl	80029bc <osDelay>
    while (ms_count++ < time_ms)
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	1c5a      	adds	r2, r3, #1
 8001f14:	60fa      	str	r2, [r7, #12]
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d8f6      	bhi.n	8001f0a <task_led_ctrl_delay+0xe>
    }
}
 8001f1c:	bf00      	nop
 8001f1e:	bf00      	nop
 8001f20:	3710      	adds	r7, #16
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
	...

08001f28 <task_led_ctrl_pause>:


void task_led_ctrl_pause(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
    static uint8_t flip_or_flop = 1;
    if (flip_or_flop) g_animate_led_pause_flag = true;
 8001f2c:	4b0b      	ldr	r3, [pc, #44]	; (8001f5c <task_led_ctrl_pause+0x34>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d003      	beq.n	8001f3c <task_led_ctrl_pause+0x14>
 8001f34:	4b0a      	ldr	r3, [pc, #40]	; (8001f60 <task_led_ctrl_pause+0x38>)
 8001f36:	2201      	movs	r2, #1
 8001f38:	701a      	strb	r2, [r3, #0]
 8001f3a:	e002      	b.n	8001f42 <task_led_ctrl_pause+0x1a>
    else g_animate_led_pause_flag = false;
 8001f3c:	4b08      	ldr	r3, [pc, #32]	; (8001f60 <task_led_ctrl_pause+0x38>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	701a      	strb	r2, [r3, #0]
    flip_or_flop ^= 1;
 8001f42:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <task_led_ctrl_pause+0x34>)
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	f083 0301 	eor.w	r3, r3, #1
 8001f4a:	b2da      	uxtb	r2, r3
 8001f4c:	4b03      	ldr	r3, [pc, #12]	; (8001f5c <task_led_ctrl_pause+0x34>)
 8001f4e:	701a      	strb	r2, [r3, #0]
}
 8001f50:	bf00      	nop
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	20000007 	.word	0x20000007
 8001f60:	20000146 	.word	0x20000146

08001f64 <task_led_ctrl_color_state>:


master_color_state_e task_led_ctrl_color_state(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
    return g_master_color_state;
 8001f68:	4b03      	ldr	r3, [pc, #12]	; (8001f78 <task_led_ctrl_color_state+0x14>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	2000014d 	.word	0x2000014d

08001f7c <task_led_ctrl_color_state_demo>:


void task_led_ctrl_color_state_demo(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
    g_master_color_state = MASTER_COLOR_STATE_DEMO;
 8001f80:	4b03      	ldr	r3, [pc, #12]	; (8001f90 <task_led_ctrl_color_state_demo+0x14>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	701a      	strb	r2, [r3, #0]
}
 8001f86:	bf00      	nop
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr
 8001f90:	2000014d 	.word	0x2000014d

08001f94 <task_led_ctrl_color_state_fixed>:


void task_led_ctrl_color_state_fixed(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
    g_master_color_state = MASTER_COLOR_STATE_FIXED;
 8001f98:	4b05      	ldr	r3, [pc, #20]	; (8001fb0 <task_led_ctrl_color_state_fixed+0x1c>)
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	701a      	strb	r2, [r3, #0]
    g_led_color = COLORS_FIRST;
 8001f9e:	4b05      	ldr	r3, [pc, #20]	; (8001fb4 <task_led_ctrl_color_state_fixed+0x20>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	701a      	strb	r2, [r3, #0]
}
 8001fa4:	bf00      	nop
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	2000014d 	.word	0x2000014d
 8001fb4:	20000006 	.word	0x20000006

08001fb8 <task_led_ctrl_color_adjust>:
    g_led_color = COLORS_RED;
}


bool task_led_ctrl_color_adjust(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
    bool return_val = false;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	71fb      	strb	r3, [r7, #7]
    if (COLORS_LAST == g_led_color)
 8001fc2:	4b0b      	ldr	r3, [pc, #44]	; (8001ff0 <task_led_ctrl_color_adjust+0x38>)
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	2b14      	cmp	r3, #20
 8001fc8:	d105      	bne.n	8001fd6 <task_led_ctrl_color_adjust+0x1e>
    {
        g_led_color = COLORS_FIRST;
 8001fca:	4b09      	ldr	r3, [pc, #36]	; (8001ff0 <task_led_ctrl_color_adjust+0x38>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	701a      	strb	r2, [r3, #0]
        return_val = true;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	71fb      	strb	r3, [r7, #7]
 8001fd4:	e005      	b.n	8001fe2 <task_led_ctrl_color_adjust+0x2a>
    }
    else g_led_color = (all_colors_e) (g_led_color + 1);
 8001fd6:	4b06      	ldr	r3, [pc, #24]	; (8001ff0 <task_led_ctrl_color_adjust+0x38>)
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	3301      	adds	r3, #1
 8001fdc:	b2da      	uxtb	r2, r3
 8001fde:	4b04      	ldr	r3, [pc, #16]	; (8001ff0 <task_led_ctrl_color_adjust+0x38>)
 8001fe0:	701a      	strb	r2, [r3, #0]
    return return_val;
 8001fe2:	79fb      	ldrb	r3, [r7, #7]
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr
 8001ff0:	20000006 	.word	0x20000006

08001ff4 <task_led_ctrl_color_hex>:
    return g_led_color;
}


color_hex_code_e task_led_ctrl_color_hex(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
    return g_color_hex_codes[g_led_color];
 8001ff8:	4b05      	ldr	r3, [pc, #20]	; (8002010 <task_led_ctrl_color_hex+0x1c>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	4b05      	ldr	r3, [pc, #20]	; (8002014 <task_led_ctrl_color_hex+0x20>)
 8002000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 8002004:	4618      	mov	r0, r3
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	20000006 	.word	0x20000006
 8002014:	200000a0 	.word	0x200000a0

08002018 <task_led_ctrl_color_red_hex>:


uint8_t task_led_ctrl_color_red_hex(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	ed2d 8b02 	vpush	{d8}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
    return (((g_color_hex_codes[g_led_color] & 0xFF0000) >> 16) / current_monitor_ratio());
 8002022:	4b0f      	ldr	r3, [pc, #60]	; (8002060 <task_led_ctrl_color_red_hex+0x48>)
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	461a      	mov	r2, r3
 8002028:	4b0e      	ldr	r3, [pc, #56]	; (8002064 <task_led_ctrl_color_red_hex+0x4c>)
 800202a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800202e:	0c1b      	lsrs	r3, r3, #16
 8002030:	b2db      	uxtb	r3, r3
 8002032:	ee07 3a90 	vmov	s15, r3
 8002036:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800203a:	f7ff fb63 	bl	8001704 <current_monitor_ratio>
 800203e:	eeb0 7a40 	vmov.f32	s14, s0
 8002042:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8002046:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800204a:	edc7 7a01 	vstr	s15, [r7, #4]
 800204e:	793b      	ldrb	r3, [r7, #4]
 8002050:	b2db      	uxtb	r3, r3
}
 8002052:	4618      	mov	r0, r3
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	ecbd 8b02 	vpop	{d8}
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	20000006 	.word	0x20000006
 8002064:	200000a0 	.word	0x200000a0

08002068 <task_led_ctrl_color_green_hex>:


uint8_t task_led_ctrl_color_green_hex(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	ed2d 8b02 	vpush	{d8}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
    return (((g_color_hex_codes[g_led_color] & 0x00FF00) >> 8) / current_monitor_ratio());
 8002072:	4b0f      	ldr	r3, [pc, #60]	; (80020b0 <task_led_ctrl_color_green_hex+0x48>)
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	461a      	mov	r2, r3
 8002078:	4b0e      	ldr	r3, [pc, #56]	; (80020b4 <task_led_ctrl_color_green_hex+0x4c>)
 800207a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800207e:	0a1b      	lsrs	r3, r3, #8
 8002080:	b2db      	uxtb	r3, r3
 8002082:	ee07 3a90 	vmov	s15, r3
 8002086:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800208a:	f7ff fb3b 	bl	8001704 <current_monitor_ratio>
 800208e:	eeb0 7a40 	vmov.f32	s14, s0
 8002092:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8002096:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800209a:	edc7 7a01 	vstr	s15, [r7, #4]
 800209e:	793b      	ldrb	r3, [r7, #4]
 80020a0:	b2db      	uxtb	r3, r3
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	ecbd 8b02 	vpop	{d8}
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	20000006 	.word	0x20000006
 80020b4:	200000a0 	.word	0x200000a0

080020b8 <task_led_ctrl_color_blue_hex>:


uint8_t task_led_ctrl_color_blue_hex(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	ed2d 8b02 	vpush	{d8}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
    return ((g_color_hex_codes[g_led_color] & 0x0000FF) / current_monitor_ratio());
 80020c2:	4b0e      	ldr	r3, [pc, #56]	; (80020fc <task_led_ctrl_color_blue_hex+0x44>)
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	461a      	mov	r2, r3
 80020c8:	4b0d      	ldr	r3, [pc, #52]	; (8002100 <task_led_ctrl_color_blue_hex+0x48>)
 80020ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	ee07 3a90 	vmov	s15, r3
 80020d4:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80020d8:	f7ff fb14 	bl	8001704 <current_monitor_ratio>
 80020dc:	eeb0 7a40 	vmov.f32	s14, s0
 80020e0:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80020e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020e8:	edc7 7a01 	vstr	s15, [r7, #4]
 80020ec:	793b      	ldrb	r3, [r7, #4]
 80020ee:	b2db      	uxtb	r3, r3
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3708      	adds	r7, #8
 80020f4:	46bd      	mov	sp, r7
 80020f6:	ecbd 8b02 	vpop	{d8}
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	20000006 	.word	0x20000006
 8002100:	200000a0 	.word	0x200000a0

08002104 <task_led_ctrl_color_random>:
    return g_color_hex_codes[color];
}


void task_led_ctrl_color_random(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
    all_colors_e color = (all_colors_e)(random_num(0, NUM_COLORS));
 800210a:	2115      	movs	r1, #21
 800210c:	2000      	movs	r0, #0
 800210e:	f007 f93a 	bl	8009386 <random_num>
 8002112:	4603      	mov	r3, r0
 8002114:	71fb      	strb	r3, [r7, #7]
    if (g_led_color == color)
 8002116:	4b0d      	ldr	r3, [pc, #52]	; (800214c <task_led_ctrl_color_random+0x48>)
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	79fa      	ldrb	r2, [r7, #7]
 800211c:	429a      	cmp	r2, r3
 800211e:	d10e      	bne.n	800213e <task_led_ctrl_color_random+0x3a>
    {
        if ((COLORS_LAST) == color) g_led_color = (all_colors_e)(color - 1);
 8002120:	79fb      	ldrb	r3, [r7, #7]
 8002122:	2b14      	cmp	r3, #20
 8002124:	d105      	bne.n	8002132 <task_led_ctrl_color_random+0x2e>
 8002126:	79fb      	ldrb	r3, [r7, #7]
 8002128:	3b01      	subs	r3, #1
 800212a:	b2da      	uxtb	r2, r3
 800212c:	4b07      	ldr	r3, [pc, #28]	; (800214c <task_led_ctrl_color_random+0x48>)
 800212e:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        g_led_color = color;
    }
}
 8002130:	e008      	b.n	8002144 <task_led_ctrl_color_random+0x40>
        else g_led_color = (all_colors_e)(color + 1);
 8002132:	79fb      	ldrb	r3, [r7, #7]
 8002134:	3301      	adds	r3, #1
 8002136:	b2da      	uxtb	r2, r3
 8002138:	4b04      	ldr	r3, [pc, #16]	; (800214c <task_led_ctrl_color_random+0x48>)
 800213a:	701a      	strb	r2, [r3, #0]
}
 800213c:	e002      	b.n	8002144 <task_led_ctrl_color_random+0x40>
        g_led_color = color;
 800213e:	4a03      	ldr	r2, [pc, #12]	; (800214c <task_led_ctrl_color_random+0x48>)
 8002140:	79fb      	ldrb	r3, [r7, #7]
 8002142:	7013      	strb	r3, [r2, #0]
}
 8002144:	bf00      	nop
 8002146:	3708      	adds	r7, #8
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	20000006 	.word	0x20000006

08002150 <task_led_ctrl_speed>:
    g_led_state = LED_STATE_FIRST;
}


float task_led_ctrl_speed(void)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
    float speed_factor = 0.0;
 8002156:	f04f 0300 	mov.w	r3, #0
 800215a:	607b      	str	r3, [r7, #4]
    switch(g_led_speed)
 800215c:	4b14      	ldr	r3, [pc, #80]	; (80021b0 <task_led_ctrl_speed+0x60>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	2b03      	cmp	r3, #3
 8002162:	d81a      	bhi.n	800219a <task_led_ctrl_speed+0x4a>
 8002164:	a201      	add	r2, pc, #4	; (adr r2, 800216c <task_led_ctrl_speed+0x1c>)
 8002166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800216a:	bf00      	nop
 800216c:	0800217d 	.word	0x0800217d
 8002170:	08002183 	.word	0x08002183
 8002174:	0800218b 	.word	0x0800218b
 8002178:	08002193 	.word	0x08002193
    {
        case LED_SPEED_10X:
            speed_factor = 10;
 800217c:	4b0d      	ldr	r3, [pc, #52]	; (80021b4 <task_led_ctrl_speed+0x64>)
 800217e:	607b      	str	r3, [r7, #4]
        break;
 8002180:	e00c      	b.n	800219c <task_led_ctrl_speed+0x4c>
//        break;
//        case LED_SPEED_2X:
//            speed_factor = 2;
//        break;
        case LED_SPEED_1X:
            speed_factor = 1;
 8002182:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002186:	607b      	str	r3, [r7, #4]
        break;
 8002188:	e008      	b.n	800219c <task_led_ctrl_speed+0x4c>
        case LED_SPEED_0P5X:
            speed_factor = 0.5;
 800218a:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 800218e:	607b      	str	r3, [r7, #4]
        break;
 8002190:	e004      	b.n	800219c <task_led_ctrl_speed+0x4c>
        case LED_SPEED_0P25X:
            speed_factor = 0.25;
 8002192:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 8002196:	607b      	str	r3, [r7, #4]
        break;
 8002198:	e000      	b.n	800219c <task_led_ctrl_speed+0x4c>
        default:
        break;
 800219a:	bf00      	nop
        case LED_SPEED_0P1X:
            speed_factor = 0.1;
        break;
        */
    }
    return speed_factor;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	ee07 3a90 	vmov	s15, r3
}
 80021a2:	eeb0 0a67 	vmov.f32	s0, s15
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr
 80021b0:	20000005 	.word	0x20000005
 80021b4:	41200000 	.word	0x41200000

080021b8 <task_led_ctrl_speed_adjust>:


void task_led_ctrl_speed_adjust(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
    if (LED_SPEED_LAST == g_led_speed) g_led_speed = LED_SPEED_FIRST;
 80021bc:	4b09      	ldr	r3, [pc, #36]	; (80021e4 <task_led_ctrl_speed_adjust+0x2c>)
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	2b03      	cmp	r3, #3
 80021c2:	d103      	bne.n	80021cc <task_led_ctrl_speed_adjust+0x14>
 80021c4:	4b07      	ldr	r3, [pc, #28]	; (80021e4 <task_led_ctrl_speed_adjust+0x2c>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	701a      	strb	r2, [r3, #0]
    else g_led_speed = (led_speed_e) (g_led_speed + 1);
}
 80021ca:	e005      	b.n	80021d8 <task_led_ctrl_speed_adjust+0x20>
    else g_led_speed = (led_speed_e) (g_led_speed + 1);
 80021cc:	4b05      	ldr	r3, [pc, #20]	; (80021e4 <task_led_ctrl_speed_adjust+0x2c>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	3301      	adds	r3, #1
 80021d2:	b2da      	uxtb	r2, r3
 80021d4:	4b03      	ldr	r3, [pc, #12]	; (80021e4 <task_led_ctrl_speed_adjust+0x2c>)
 80021d6:	701a      	strb	r2, [r3, #0]
}
 80021d8:	bf00      	nop
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	20000005 	.word	0x20000005

080021e8 <task_led_ctrl_speed_reset>:


void task_led_ctrl_speed_reset(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
    g_led_speed = LED_SPEED_0P5X;
 80021ec:	4b03      	ldr	r3, [pc, #12]	; (80021fc <task_led_ctrl_speed_reset+0x14>)
 80021ee:	2202      	movs	r2, #2
 80021f0:	701a      	strb	r2, [r3, #0]
}
 80021f2:	bf00      	nop
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr
 80021fc:	20000005 	.word	0x20000005

08002200 <task_led_ctrl_animate_iteration_reset>:
    return ((float)g_delay_in_animation_ms / task_led_ctrl_speed());
}


void task_led_ctrl_animate_iteration_reset(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
    g_animation_iterations = 0;
 8002204:	4b03      	ldr	r3, [pc, #12]	; (8002214 <task_led_ctrl_animate_iteration_reset+0x14>)
 8002206:	2200      	movs	r2, #0
 8002208:	701a      	strb	r2, [r3, #0]
}
 800220a:	bf00      	nop
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr
 8002214:	2000014e 	.word	0x2000014e

08002218 <task_led_ctrl_animate_adjust_state>:


bool task_led_ctrl_animate_adjust_state(void)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
    bool return_val = false;
 800221e:	2300      	movs	r3, #0
 8002220:	71fb      	strb	r3, [r7, #7]
    if (LED_STATE_LAST == g_led_state)
 8002222:	4b0b      	ldr	r3, [pc, #44]	; (8002250 <task_led_ctrl_animate_adjust_state+0x38>)
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	2b08      	cmp	r3, #8
 8002228:	d105      	bne.n	8002236 <task_led_ctrl_animate_adjust_state+0x1e>
    {
        g_led_state = LED_STATE_FIRST;
 800222a:	4b09      	ldr	r3, [pc, #36]	; (8002250 <task_led_ctrl_animate_adjust_state+0x38>)
 800222c:	2200      	movs	r2, #0
 800222e:	701a      	strb	r2, [r3, #0]
        return_val = true;
 8002230:	2301      	movs	r3, #1
 8002232:	71fb      	strb	r3, [r7, #7]
 8002234:	e005      	b.n	8002242 <task_led_ctrl_animate_adjust_state+0x2a>
    }
    else g_led_state = (led_state_e) (g_led_state + 1);
 8002236:	4b06      	ldr	r3, [pc, #24]	; (8002250 <task_led_ctrl_animate_adjust_state+0x38>)
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	3301      	adds	r3, #1
 800223c:	b2da      	uxtb	r2, r3
 800223e:	4b04      	ldr	r3, [pc, #16]	; (8002250 <task_led_ctrl_animate_adjust_state+0x38>)
 8002240:	701a      	strb	r2, [r3, #0]
    return return_val;
 8002242:	79fb      	ldrb	r3, [r7, #7]
}
 8002244:	4618      	mov	r0, r3
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr
 8002250:	20000004 	.word	0x20000004

08002254 <task_led_ctrl_animate_state_demo>:


void task_led_ctrl_animate_state_demo(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
    g_master_led_state = MASTER_LED_STATE_DEMO;
 8002258:	4b05      	ldr	r3, [pc, #20]	; (8002270 <task_led_ctrl_animate_state_demo+0x1c>)
 800225a:	2200      	movs	r2, #0
 800225c:	701a      	strb	r2, [r3, #0]
    g_animation_iterations = 0;
 800225e:	4b05      	ldr	r3, [pc, #20]	; (8002274 <task_led_ctrl_animate_state_demo+0x20>)
 8002260:	2200      	movs	r2, #0
 8002262:	701a      	strb	r2, [r3, #0]
}
 8002264:	bf00      	nop
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	2000014c 	.word	0x2000014c
 8002274:	2000014e 	.word	0x2000014e

08002278 <task_led_ctrl_animate_state_fixed>:


void task_led_ctrl_animate_state_fixed(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
    g_master_led_state = MASTER_LED_STATE_FIXED;
 800227c:	4b06      	ldr	r3, [pc, #24]	; (8002298 <task_led_ctrl_animate_state_fixed+0x20>)
 800227e:	2201      	movs	r2, #1
 8002280:	701a      	strb	r2, [r3, #0]
    g_led_state = LED_STATE_FIRST; // set first state
 8002282:	4b06      	ldr	r3, [pc, #24]	; (800229c <task_led_ctrl_animate_state_fixed+0x24>)
 8002284:	2200      	movs	r2, #0
 8002286:	701a      	strb	r2, [r3, #0]
    g_animation_iterations = 0;
 8002288:	4b05      	ldr	r3, [pc, #20]	; (80022a0 <task_led_ctrl_animate_state_fixed+0x28>)
 800228a:	2200      	movs	r2, #0
 800228c:	701a      	strb	r2, [r3, #0]
}
 800228e:	bf00      	nop
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr
 8002298:	2000014c 	.word	0x2000014c
 800229c:	20000004 	.word	0x20000004
 80022a0:	2000014e 	.word	0x2000014e

080022a4 <task_led_ctrl_animate_state>:


master_led_state_e task_led_ctrl_animate_state(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
    return g_master_led_state;
 80022a8:	4b03      	ldr	r3, [pc, #12]	; (80022b8 <task_led_ctrl_animate_state+0x14>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	2000014c 	.word	0x2000014c

080022bc <reset_ws2812b>:

extern volatile int datasentflag;

uint16_t pwm_reset[50] = {0};
void reset_ws2812b(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_1, (uint32_t *)pwm_reset, 50);
 80022c0:	2332      	movs	r3, #50	; 0x32
 80022c2:	4a0f      	ldr	r2, [pc, #60]	; (8002300 <reset_ws2812b+0x44>)
 80022c4:	2100      	movs	r1, #0
 80022c6:	480f      	ldr	r0, [pc, #60]	; (8002304 <reset_ws2812b+0x48>)
 80022c8:	f005 fa78 	bl	80077bc <HAL_TIM_PWM_Start_DMA>
    HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_2, (uint32_t *)pwm_reset, 50);
 80022cc:	2332      	movs	r3, #50	; 0x32
 80022ce:	4a0c      	ldr	r2, [pc, #48]	; (8002300 <reset_ws2812b+0x44>)
 80022d0:	2104      	movs	r1, #4
 80022d2:	480c      	ldr	r0, [pc, #48]	; (8002304 <reset_ws2812b+0x48>)
 80022d4:	f005 fa72 	bl	80077bc <HAL_TIM_PWM_Start_DMA>
    HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_3, (uint32_t *)pwm_reset, 50);
 80022d8:	2332      	movs	r3, #50	; 0x32
 80022da:	4a09      	ldr	r2, [pc, #36]	; (8002300 <reset_ws2812b+0x44>)
 80022dc:	2108      	movs	r1, #8
 80022de:	4809      	ldr	r0, [pc, #36]	; (8002304 <reset_ws2812b+0x48>)
 80022e0:	f005 fa6c 	bl	80077bc <HAL_TIM_PWM_Start_DMA>
    HAL_TIM_PWM_Start_DMA(&g_tim15_handle, TIM_CHANNEL_1, (uint32_t *)pwm_reset, 50);
 80022e4:	2332      	movs	r3, #50	; 0x32
 80022e6:	4a06      	ldr	r2, [pc, #24]	; (8002300 <reset_ws2812b+0x44>)
 80022e8:	2100      	movs	r1, #0
 80022ea:	4807      	ldr	r0, [pc, #28]	; (8002308 <reset_ws2812b+0x4c>)
 80022ec:	f005 fa66 	bl	80077bc <HAL_TIM_PWM_Start_DMA>
    HAL_TIM_PWM_Start_DMA(&g_tim16_handle, TIM_CHANNEL_1, (uint32_t *)pwm_reset, 50);
 80022f0:	2332      	movs	r3, #50	; 0x32
 80022f2:	4a03      	ldr	r2, [pc, #12]	; (8002300 <reset_ws2812b+0x44>)
 80022f4:	2100      	movs	r1, #0
 80022f6:	4805      	ldr	r0, [pc, #20]	; (800230c <reset_ws2812b+0x50>)
 80022f8:	f005 fa60 	bl	80077bc <HAL_TIM_PWM_Start_DMA>
}
 80022fc:	bf00      	nop
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	20000320 	.word	0x20000320
 8002304:	20001e1c 	.word	0x20001e1c
 8002308:	20001e68 	.word	0x20001e68
 800230c:	20001eb4 	.word	0x20001eb4

08002310 <ws2812_convert_strip_num_to_strip_bit>:

static strip_bit_e ws2812_convert_strip_num_to_strip_bit(strip_num_e strip_num)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	4603      	mov	r3, r0
 8002318:	71fb      	strb	r3, [r7, #7]
	return (strip_bit_e)(strip_num + 1);
 800231a:	79fb      	ldrb	r3, [r7, #7]
 800231c:	3301      	adds	r3, #1
 800231e:	b2db      	uxtb	r3, r3
}
 8002320:	4618      	mov	r0, r3
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <ws2812_convert_strip_bit_to_strip_num>:


static strip_num_e ws2812_convert_strip_bit_to_strip_num(strip_bit_e strip_bit)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	4603      	mov	r3, r0
 8002334:	71fb      	strb	r3, [r7, #7]
	return (strip_num_e)(strip_bit - 1);
 8002336:	79fb      	ldrb	r3, [r7, #7]
 8002338:	3b01      	subs	r3, #1
 800233a:	b2db      	uxtb	r3, r3
}
 800233c:	4618      	mov	r0, r3
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <ws2812_get_strip_size>:


uint16_t ws2812_get_strip_size(const strip_bit_e strip_bit)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	4603      	mov	r3, r0
 8002350:	71fb      	strb	r3, [r7, #7]
	uint16_t strip_size = 0;
 8002352:	2300      	movs	r3, #0
 8002354:	81fb      	strh	r3, [r7, #14]
	if (STRIP_BIT_ALL_SET == strip_bit) strip_size = g_max_strip_length;
 8002356:	79fb      	ldrb	r3, [r7, #7]
 8002358:	2b01      	cmp	r3, #1
 800235a:	d103      	bne.n	8002364 <ws2812_get_strip_size+0x1c>
 800235c:	4b09      	ldr	r3, [pc, #36]	; (8002384 <ws2812_get_strip_size+0x3c>)
 800235e:	881b      	ldrh	r3, [r3, #0]
 8002360:	81fb      	strh	r3, [r7, #14]
 8002362:	e009      	b.n	8002378 <ws2812_get_strip_size+0x30>
	else strip_size = strip_length[ws2812_convert_strip_num_to_strip_bit(strip_bit)];
 8002364:	79fb      	ldrb	r3, [r7, #7]
 8002366:	4618      	mov	r0, r3
 8002368:	f7ff ffd2 	bl	8002310 <ws2812_convert_strip_num_to_strip_bit>
 800236c:	4603      	mov	r3, r0
 800236e:	461a      	mov	r2, r3
 8002370:	4b05      	ldr	r3, [pc, #20]	; (8002388 <ws2812_get_strip_size+0x40>)
 8002372:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002376:	81fb      	strh	r3, [r7, #14]
	return strip_size;
 8002378:	89fb      	ldrh	r3, [r7, #14]
}
 800237a:	4618      	mov	r0, r3
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	20000316 	.word	0x20000316
 8002388:	20000008 	.word	0x20000008

0800238c <ws2812_get_num_active_animation_leds>:
	return STRIP_BIT_NO_MORE_SET;  // if this is returned
}


uint16_t ws2812_get_num_active_animation_leds(const strip_mask_t strip_mask)
{
 800238c:	b480      	push	{r7}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	4603      	mov	r3, r0
 8002394:	80fb      	strh	r3, [r7, #6]
	uint16_t strip_size = 0;
 8002396:	2300      	movs	r3, #0
 8002398:	81fb      	strh	r3, [r7, #14]
	if (STRIP_BIT_ALL_SET == strip_mask) strip_size = g_num_leds;
 800239a:	88fb      	ldrh	r3, [r7, #6]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d103      	bne.n	80023a8 <ws2812_get_num_active_animation_leds+0x1c>
 80023a0:	4b09      	ldr	r3, [pc, #36]	; (80023c8 <ws2812_get_num_active_animation_leds+0x3c>)
 80023a2:	881b      	ldrh	r3, [r3, #0]
 80023a4:	81fb      	strh	r3, [r7, #14]
 80023a6:	e008      	b.n	80023ba <ws2812_get_num_active_animation_leds+0x2e>
	else
	{
#if defined(STRIP_1_LENGTH)
		if (STRIP_BIT_1 & strip_mask) strip_size += STRIP_1_LENGTH;
 80023a8:	88fb      	ldrh	r3, [r7, #6]
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d002      	beq.n	80023ba <ws2812_get_num_active_animation_leds+0x2e>
 80023b4:	89fb      	ldrh	r3, [r7, #14]
 80023b6:	3396      	adds	r3, #150	; 0x96
 80023b8:	81fb      	strh	r3, [r7, #14]
#endif
#if defined(STRIP_9_LENGTH)
		if (STRIP_BIT_9 & strip_mask) strip_size += STRIP_9_LENGTH;
#endif
	}
	return strip_size;
 80023ba:	89fb      	ldrh	r3, [r7, #14]
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3714      	adds	r7, #20
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr
 80023c8:	20000312 	.word	0x20000312

080023cc <ws2812_led_get_max_strip_size>:


uint16_t ws2812_led_get_max_strip_size(const strip_mask_t strip_mask)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	4603      	mov	r3, r0
 80023d4:	80fb      	strh	r3, [r7, #6]
	uint16_t strip_size = 0;
 80023d6:	2300      	movs	r3, #0
 80023d8:	81fb      	strh	r3, [r7, #14]
	if (STRIP_BIT_ALL_SET == strip_mask) strip_size = g_max_strip_length;
 80023da:	88fb      	ldrh	r3, [r7, #6]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d103      	bne.n	80023e8 <ws2812_led_get_max_strip_size+0x1c>
 80023e0:	4b0a      	ldr	r3, [pc, #40]	; (800240c <ws2812_led_get_max_strip_size+0x40>)
 80023e2:	881b      	ldrh	r3, [r3, #0]
 80023e4:	81fb      	strh	r3, [r7, #14]
 80023e6:	e00a      	b.n	80023fe <ws2812_led_get_max_strip_size+0x32>
	else
	{
#if defined(STRIP_1_LENGTH)
		if ((STRIP_BIT_1 & strip_mask) && (strip_size < STRIP_1_LENGTH)) strip_size = STRIP_1_LENGTH;
 80023e8:	88fb      	ldrh	r3, [r7, #6]
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d004      	beq.n	80023fe <ws2812_led_get_max_strip_size+0x32>
 80023f4:	89fb      	ldrh	r3, [r7, #14]
 80023f6:	2b95      	cmp	r3, #149	; 0x95
 80023f8:	d801      	bhi.n	80023fe <ws2812_led_get_max_strip_size+0x32>
 80023fa:	2396      	movs	r3, #150	; 0x96
 80023fc:	81fb      	strh	r3, [r7, #14]
#endif
#if defined(STRIP_9_LENGTH)
		if ((STRIP_BIT_9 & strip_mask) && (strip_size < STRIP_9_LENGTH)) strip_size = STRIP_9_LENGTH;
#endif
	}
	return strip_size;
 80023fe:	89fb      	ldrh	r3, [r7, #14]
}
 8002400:	4618      	mov	r0, r3
 8002402:	3714      	adds	r7, #20
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr
 800240c:	20000316 	.word	0x20000316

08002410 <ws2812_pixel_is_in_strip_range>:


bool ws2812_pixel_is_in_strip_range(strip_bit_e strip_bit, uint16_t pixel)
{
 8002410:	b480      	push	{r7}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	4603      	mov	r3, r0
 8002418:	460a      	mov	r2, r1
 800241a:	71fb      	strb	r3, [r7, #7]
 800241c:	4613      	mov	r3, r2
 800241e:	80bb      	strh	r3, [r7, #4]
	bool return_val = false;
 8002420:	2300      	movs	r3, #0
 8002422:	73fb      	strb	r3, [r7, #15]
#if defined(STRIP_1_LENGTH)
	if ((STRIP_BIT_1 == strip_bit) && (pixel < STRIP_1_LENGTH)) return_val = true;
 8002424:	79fb      	ldrb	r3, [r7, #7]
 8002426:	2b01      	cmp	r3, #1
 8002428:	d104      	bne.n	8002434 <ws2812_pixel_is_in_strip_range+0x24>
 800242a:	88bb      	ldrh	r3, [r7, #4]
 800242c:	2b95      	cmp	r3, #149	; 0x95
 800242e:	d801      	bhi.n	8002434 <ws2812_pixel_is_in_strip_range+0x24>
 8002430:	2301      	movs	r3, #1
 8002432:	73fb      	strb	r3, [r7, #15]
	else if ((STRIP_BIT_8 == strip_bit) && (pixel < STRIP_8_LENGTH)) return_val = true;
#endif
#if defined(STRIP_9_LENGTH)
	else if ((STRIP_BIT_9 == strip_bit) && (pixel < STRIP_9_LENGTH)) return_val = true;
#endif
	return return_val;
 8002434:	7bfb      	ldrb	r3, [r7, #15]
}
 8002436:	4618      	mov	r0, r3
 8002438:	3714      	adds	r7, #20
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
	...

08002444 <ws2812b_set_led>:


void ws2812b_set_led(const strip_bit_e strip_bit, uint16_t led_num, color_t red, color_t green, color_t blue)
{
 8002444:	b590      	push	{r4, r7, lr}
 8002446:	b087      	sub	sp, #28
 8002448:	af00      	add	r7, sp, #0
 800244a:	4604      	mov	r4, r0
 800244c:	4608      	mov	r0, r1
 800244e:	4611      	mov	r1, r2
 8002450:	461a      	mov	r2, r3
 8002452:	4623      	mov	r3, r4
 8002454:	73fb      	strb	r3, [r7, #15]
 8002456:	4603      	mov	r3, r0
 8002458:	81bb      	strh	r3, [r7, #12]
 800245a:	460b      	mov	r3, r1
 800245c:	73bb      	strb	r3, [r7, #14]
 800245e:	4613      	mov	r3, r2
 8002460:	72fb      	strb	r3, [r7, #11]
	strip_num_e strip_num = ws2812_convert_strip_bit_to_strip_num(strip_bit);
 8002462:	7bfb      	ldrb	r3, [r7, #15]
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff ff61 	bl	800232c <ws2812_convert_strip_bit_to_strip_num>
 800246a:	4603      	mov	r3, r0
 800246c:	75fb      	strb	r3, [r7, #23]
    (gp_ws28128b_strip[strip_num] + led_num)->red = red * g_max_current_ratio;
 800246e:	7bbb      	ldrb	r3, [r7, #14]
 8002470:	ee07 3a90 	vmov	s15, r3
 8002474:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002478:	4b26      	ldr	r3, [pc, #152]	; (8002514 <ws2812b_set_led+0xd0>)
 800247a:	edd3 7a00 	vldr	s15, [r3]
 800247e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002482:	7dfb      	ldrb	r3, [r7, #23]
 8002484:	4a24      	ldr	r2, [pc, #144]	; (8002518 <ws2812b_set_led+0xd4>)
 8002486:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800248a:	89ba      	ldrh	r2, [r7, #12]
 800248c:	4613      	mov	r3, r2
 800248e:	005b      	lsls	r3, r3, #1
 8002490:	4413      	add	r3, r2
 8002492:	440b      	add	r3, r1
 8002494:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002498:	edc7 7a01 	vstr	s15, [r7, #4]
 800249c:	793a      	ldrb	r2, [r7, #4]
 800249e:	b2d2      	uxtb	r2, r2
 80024a0:	701a      	strb	r2, [r3, #0]
    (gp_ws28128b_strip[strip_num] + led_num)->green = green * g_max_current_ratio;
 80024a2:	7afb      	ldrb	r3, [r7, #11]
 80024a4:	ee07 3a90 	vmov	s15, r3
 80024a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024ac:	4b19      	ldr	r3, [pc, #100]	; (8002514 <ws2812b_set_led+0xd0>)
 80024ae:	edd3 7a00 	vldr	s15, [r3]
 80024b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024b6:	7dfb      	ldrb	r3, [r7, #23]
 80024b8:	4a17      	ldr	r2, [pc, #92]	; (8002518 <ws2812b_set_led+0xd4>)
 80024ba:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80024be:	89ba      	ldrh	r2, [r7, #12]
 80024c0:	4613      	mov	r3, r2
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	4413      	add	r3, r2
 80024c6:	440b      	add	r3, r1
 80024c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024cc:	edc7 7a01 	vstr	s15, [r7, #4]
 80024d0:	793a      	ldrb	r2, [r7, #4]
 80024d2:	b2d2      	uxtb	r2, r2
 80024d4:	705a      	strb	r2, [r3, #1]
    (gp_ws28128b_strip[strip_num] + led_num)->blue = blue * g_max_current_ratio;
 80024d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80024da:	ee07 3a90 	vmov	s15, r3
 80024de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024e2:	4b0c      	ldr	r3, [pc, #48]	; (8002514 <ws2812b_set_led+0xd0>)
 80024e4:	edd3 7a00 	vldr	s15, [r3]
 80024e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024ec:	7dfb      	ldrb	r3, [r7, #23]
 80024ee:	4a0a      	ldr	r2, [pc, #40]	; (8002518 <ws2812b_set_led+0xd4>)
 80024f0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80024f4:	89ba      	ldrh	r2, [r7, #12]
 80024f6:	4613      	mov	r3, r2
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	4413      	add	r3, r2
 80024fc:	440b      	add	r3, r1
 80024fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002502:	edc7 7a01 	vstr	s15, [r7, #4]
 8002506:	793a      	ldrb	r2, [r7, #4]
 8002508:	b2d2      	uxtb	r2, r2
 800250a:	709a      	strb	r2, [r3, #2]
}
 800250c:	bf00      	nop
 800250e:	371c      	adds	r7, #28
 8002510:	46bd      	mov	sp, r7
 8002512:	bd90      	pop	{r4, r7, pc}
 8002514:	20000000 	.word	0x20000000
 8002518:	2000031c 	.word	0x2000031c

0800251c <ws2812b_fill_pwm_buffer>:


void ws2812b_fill_pwm_buffer(const strip_bit_e strip_bit)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b086      	sub	sp, #24
 8002520:	af00      	add	r7, sp, #0
 8002522:	4603      	mov	r3, r0
 8002524:	71fb      	strb	r3, [r7, #7]
	// fill the pwm data here  
	uint16_t strip_size = ws2812_get_strip_size(strip_bit);
 8002526:	79fb      	ldrb	r3, [r7, #7]
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff ff0d 	bl	8002348 <ws2812_get_strip_size>
 800252e:	4603      	mov	r3, r0
 8002530:	823b      	strh	r3, [r7, #16]
	uint32_t color = 0;
 8002532:	2300      	movs	r3, #0
 8002534:	60fb      	str	r3, [r7, #12]
	strip_num_e strip_num = ws2812_convert_strip_bit_to_strip_num(strip_bit);
 8002536:	79fb      	ldrb	r3, [r7, #7]
 8002538:	4618      	mov	r0, r3
 800253a:	f7ff fef7 	bl	800232c <ws2812_convert_strip_bit_to_strip_num>
 800253e:	4603      	mov	r3, r0
 8002540:	72fb      	strb	r3, [r7, #11]
//	if (g_pwm_data_ping) gp_pwm_data_fill = gp_pwm_data_ping;
//	else gp_pwm_data_fill = gp_pwm_data_pong;
	for (uint16_t iii = 0; iii < strip_size; iii++)
 8002542:	2300      	movs	r3, #0
 8002544:	82fb      	strh	r3, [r7, #22]
 8002546:	e04a      	b.n	80025de <ws2812b_fill_pwm_buffer+0xc2>
	{
		color = (((gp_ws28128b_strip[strip_num] + iii)->green) << 16) | (((gp_ws28128b_strip[strip_num] + iii)->red) << 8) | (((gp_ws28128b_strip[strip_num] + iii)->blue));
 8002548:	7afb      	ldrb	r3, [r7, #11]
 800254a:	4a48      	ldr	r2, [pc, #288]	; (800266c <ws2812b_fill_pwm_buffer+0x150>)
 800254c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002550:	8afa      	ldrh	r2, [r7, #22]
 8002552:	4613      	mov	r3, r2
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	4413      	add	r3, r2
 8002558:	440b      	add	r3, r1
 800255a:	785b      	ldrb	r3, [r3, #1]
 800255c:	0419      	lsls	r1, r3, #16
 800255e:	7afb      	ldrb	r3, [r7, #11]
 8002560:	4a42      	ldr	r2, [pc, #264]	; (800266c <ws2812b_fill_pwm_buffer+0x150>)
 8002562:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002566:	8afa      	ldrh	r2, [r7, #22]
 8002568:	4613      	mov	r3, r2
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	4413      	add	r3, r2
 800256e:	4403      	add	r3, r0
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	021b      	lsls	r3, r3, #8
 8002574:	4319      	orrs	r1, r3
 8002576:	7afb      	ldrb	r3, [r7, #11]
 8002578:	4a3c      	ldr	r2, [pc, #240]	; (800266c <ws2812b_fill_pwm_buffer+0x150>)
 800257a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800257e:	8afa      	ldrh	r2, [r7, #22]
 8002580:	4613      	mov	r3, r2
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	4413      	add	r3, r2
 8002586:	4403      	add	r3, r0
 8002588:	789b      	ldrb	r3, [r3, #2]
 800258a:	430b      	orrs	r3, r1
 800258c:	60fb      	str	r3, [r7, #12]
		for (uint8_t yyy = 0; yyy < BITS_PER_BYTE * sizeof(ws2812b_led_t); yyy++)
 800258e:	2300      	movs	r3, #0
 8002590:	757b      	strb	r3, [r7, #21]
 8002592:	e01e      	b.n	80025d2 <ws2812b_fill_pwm_buffer+0xb6>
		{
			gp_pwm_data_fill[(iii * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + yyy] = (color & (1 << (23 - yyy))) ? (uint16_t)(WS2812B_BIT_SET_CYCLES + 1) : (uint16_t)WS2812B_BIT_RESET_CYCLES;
 8002594:	7d7b      	ldrb	r3, [r7, #21]
 8002596:	f1c3 0317 	rsb	r3, r3, #23
 800259a:	2201      	movs	r2, #1
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	461a      	mov	r2, r3
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	4013      	ands	r3, r2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <ws2812b_fill_pwm_buffer+0x92>
 80025aa:	2028      	movs	r0, #40	; 0x28
 80025ac:	e000      	b.n	80025b0 <ws2812b_fill_pwm_buffer+0x94>
 80025ae:	2014      	movs	r0, #20
 80025b0:	4b2f      	ldr	r3, [pc, #188]	; (8002670 <ws2812b_fill_pwm_buffer+0x154>)
 80025b2:	6819      	ldr	r1, [r3, #0]
 80025b4:	8afa      	ldrh	r2, [r7, #22]
 80025b6:	4613      	mov	r3, r2
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	4413      	add	r3, r2
 80025bc:	00db      	lsls	r3, r3, #3
 80025be:	461a      	mov	r2, r3
 80025c0:	7d7b      	ldrb	r3, [r7, #21]
 80025c2:	4413      	add	r3, r2
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	440b      	add	r3, r1
 80025c8:	4602      	mov	r2, r0
 80025ca:	801a      	strh	r2, [r3, #0]
		for (uint8_t yyy = 0; yyy < BITS_PER_BYTE * sizeof(ws2812b_led_t); yyy++)
 80025cc:	7d7b      	ldrb	r3, [r7, #21]
 80025ce:	3301      	adds	r3, #1
 80025d0:	757b      	strb	r3, [r7, #21]
 80025d2:	7d7b      	ldrb	r3, [r7, #21]
 80025d4:	2b17      	cmp	r3, #23
 80025d6:	d9dd      	bls.n	8002594 <ws2812b_fill_pwm_buffer+0x78>
	for (uint16_t iii = 0; iii < strip_size; iii++)
 80025d8:	8afb      	ldrh	r3, [r7, #22]
 80025da:	3301      	adds	r3, #1
 80025dc:	82fb      	strh	r3, [r7, #22]
 80025de:	8afa      	ldrh	r2, [r7, #22]
 80025e0:	8a3b      	ldrh	r3, [r7, #16]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d3b0      	bcc.n	8002548 <ws2812b_fill_pwm_buffer+0x2c>
		}
	}
	for (uint16_t iii = 0; iii < WS2812B_RESET_TIME_CYCLES; iii++)
 80025e6:	2300      	movs	r3, #0
 80025e8:	827b      	strh	r3, [r7, #18]
 80025ea:	e010      	b.n	800260e <ws2812b_fill_pwm_buffer+0xf2>
	{
		gp_pwm_data_fill[(strip_size * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + iii] = 0;
 80025ec:	4b20      	ldr	r3, [pc, #128]	; (8002670 <ws2812b_fill_pwm_buffer+0x154>)
 80025ee:	6819      	ldr	r1, [r3, #0]
 80025f0:	8a3a      	ldrh	r2, [r7, #16]
 80025f2:	4613      	mov	r3, r2
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	4413      	add	r3, r2
 80025f8:	00db      	lsls	r3, r3, #3
 80025fa:	461a      	mov	r2, r3
 80025fc:	8a7b      	ldrh	r3, [r7, #18]
 80025fe:	4413      	add	r3, r2
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	440b      	add	r3, r1
 8002604:	2200      	movs	r2, #0
 8002606:	801a      	strh	r2, [r3, #0]
	for (uint16_t iii = 0; iii < WS2812B_RESET_TIME_CYCLES; iii++)
 8002608:	8a7b      	ldrh	r3, [r7, #18]
 800260a:	3301      	adds	r3, #1
 800260c:	827b      	strh	r3, [r7, #18]
 800260e:	8a7b      	ldrh	r3, [r7, #18]
 8002610:	ee07 3a90 	vmov	s15, r3
 8002614:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002618:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002674 <ws2812b_fill_pwm_buffer+0x158>
 800261c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002624:	d4e2      	bmi.n	80025ec <ws2812b_fill_pwm_buffer+0xd0>
	}

	HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_2, (uint32_t *)gp_pwm_data_fill, (strip_size * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + WS2812B_RESET_TIME_CYCLES);
 8002626:	4b12      	ldr	r3, [pc, #72]	; (8002670 <ws2812b_fill_pwm_buffer+0x154>)
 8002628:	6819      	ldr	r1, [r3, #0]
 800262a:	8a3a      	ldrh	r2, [r7, #16]
 800262c:	4613      	mov	r3, r2
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	4413      	add	r3, r2
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	ee07 3a90 	vmov	s15, r3
 8002638:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800263c:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8002674 <ws2812b_fill_pwm_buffer+0x158>
 8002640:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002644:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002648:	ee17 3a90 	vmov	r3, s15
 800264c:	b29b      	uxth	r3, r3
 800264e:	460a      	mov	r2, r1
 8002650:	2104      	movs	r1, #4
 8002652:	4809      	ldr	r0, [pc, #36]	; (8002678 <ws2812b_fill_pwm_buffer+0x15c>)
 8002654:	f005 f8b2 	bl	80077bc <HAL_TIM_PWM_Start_DMA>
	datasentflag = 0;
 8002658:	4b08      	ldr	r3, [pc, #32]	; (800267c <ws2812b_fill_pwm_buffer+0x160>)
 800265a:	2200      	movs	r2, #0
 800265c:	601a      	str	r2, [r3, #0]
	//while (!datasentflag);//{HAL_Delay(1);};
    datasentflag = 0;
 800265e:	4b07      	ldr	r3, [pc, #28]	; (800267c <ws2812b_fill_pwm_buffer+0x160>)
 8002660:	2200      	movs	r2, #0
 8002662:	601a      	str	r2, [r3, #0]

//	HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_3, (uint32_t *)gp_pwm_data_fill, (strip_size * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + WS2812B_RESET_TIME_CYCLES);
//	datasentflag = 0;
//	while (!datasentflag);//{HAL_Delay(1);};
//	datasentflag = 0;
}
 8002664:	bf00      	nop
 8002666:	3718      	adds	r7, #24
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	2000031c 	.word	0x2000031c
 8002670:	20000318 	.word	0x20000318
 8002674:	453b8000 	.word	0x453b8000
 8002678:	20001e1c 	.word	0x20001e1c
 800267c:	20001f00 	.word	0x20001f00

08002680 <ws2812b_init>:
	// call TIM PWM DMA to reset.
}


void ws2812b_init(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
#if defined(STRIP_1_LENGTH)
	gp_ws28128b_strip[STRIP_NUM_1] = g_strip_1;
 8002686:	4b25      	ldr	r3, [pc, #148]	; (800271c <ws2812b_init+0x9c>)
 8002688:	4a25      	ldr	r2, [pc, #148]	; (8002720 <ws2812b_init+0xa0>)
 800268a:	601a      	str	r2, [r3, #0]
#endif
#if defined(STRIP_4_LENGTH)
	gp_ws28128b_strip[STRIP_NUM_4] = g_strip_4;
#endif

	uint8_t num_strips = NUM_STRIPS;
 800268c:	2301      	movs	r3, #1
 800268e:	70fb      	strb	r3, [r7, #3]
	for (int iii = 0; iii < NUM_STRIPS; iii++) g_all_strip_mask |= 1 << iii;
 8002690:	2300      	movs	r3, #0
 8002692:	607b      	str	r3, [r7, #4]
 8002694:	e00f      	b.n	80026b6 <ws2812b_init+0x36>
 8002696:	2201      	movs	r2, #1
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	fa02 f303 	lsl.w	r3, r2, r3
 800269e:	b21a      	sxth	r2, r3
 80026a0:	4b20      	ldr	r3, [pc, #128]	; (8002724 <ws2812b_init+0xa4>)
 80026a2:	881b      	ldrh	r3, [r3, #0]
 80026a4:	b21b      	sxth	r3, r3
 80026a6:	4313      	orrs	r3, r2
 80026a8:	b21b      	sxth	r3, r3
 80026aa:	b29a      	uxth	r2, r3
 80026ac:	4b1d      	ldr	r3, [pc, #116]	; (8002724 <ws2812b_init+0xa4>)
 80026ae:	801a      	strh	r2, [r3, #0]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	3301      	adds	r3, #1
 80026b4:	607b      	str	r3, [r7, #4]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	ddec      	ble.n	8002696 <ws2812b_init+0x16>
	switch (num_strips)
 80026bc:	78fb      	ldrb	r3, [r7, #3]
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d10d      	bne.n	80026de <ws2812b_init+0x5e>
		case 2:
			g_num_leds += STRIP_2_LENGTH;
			if (STRIP_2_LENGTH > g_max_strip_length) g_max_strip_length = STRIP_2_LENGTH;
#endif
		case 1:
			g_num_leds += STRIP_1_LENGTH;
 80026c2:	4b19      	ldr	r3, [pc, #100]	; (8002728 <ws2812b_init+0xa8>)
 80026c4:	881b      	ldrh	r3, [r3, #0]
 80026c6:	3396      	adds	r3, #150	; 0x96
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	4b17      	ldr	r3, [pc, #92]	; (8002728 <ws2812b_init+0xa8>)
 80026cc:	801a      	strh	r2, [r3, #0]
			if (STRIP_1_LENGTH > g_max_strip_length) g_max_strip_length = STRIP_1_LENGTH;
 80026ce:	4b17      	ldr	r3, [pc, #92]	; (800272c <ws2812b_init+0xac>)
 80026d0:	881b      	ldrh	r3, [r3, #0]
 80026d2:	2b95      	cmp	r3, #149	; 0x95
 80026d4:	d802      	bhi.n	80026dc <ws2812b_init+0x5c>
 80026d6:	4b15      	ldr	r3, [pc, #84]	; (800272c <ws2812b_init+0xac>)
 80026d8:	2296      	movs	r2, #150	; 0x96
 80026da:	801a      	strh	r2, [r3, #0]
		break;
 80026dc:	bf00      	nop
	}
	gp_pwm_data_fill = malloc((sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_max_strip_length) + WS2812B_RESET_TIME_CYCLES);
 80026de:	4b13      	ldr	r3, [pc, #76]	; (800272c <ws2812b_init+0xac>)
 80026e0:	881b      	ldrh	r3, [r3, #0]
 80026e2:	461a      	mov	r2, r3
 80026e4:	4613      	mov	r3, r2
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	4413      	add	r3, r2
 80026ea:	00db      	lsls	r3, r3, #3
 80026ec:	ee07 3a90 	vmov	s15, r3
 80026f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026f4:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002730 <ws2812b_init+0xb0>
 80026f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80026fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002700:	ee17 0a90 	vmov	r0, s15
 8002704:	f007 fa82 	bl	8009c0c <malloc>
 8002708:	4603      	mov	r3, r0
 800270a:	461a      	mov	r2, r3
 800270c:	4b09      	ldr	r3, [pc, #36]	; (8002734 <ws2812b_init+0xb4>)
 800270e:	601a      	str	r2, [r3, #0]
	current_monitor_init();
 8002710:	f7ff f806 	bl	8001720 <current_monitor_init>
}
 8002714:	bf00      	nop
 8002716:	3708      	adds	r7, #8
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	2000031c 	.word	0x2000031c
 8002720:	20000150 	.word	0x20000150
 8002724:	20000314 	.word	0x20000314
 8002728:	20000312 	.word	0x20000312
 800272c:	20000316 	.word	0x20000316
 8002730:	453b8000 	.word	0x453b8000
 8002734:	20000318 	.word	0x20000318

08002738 <ws2812b_show>:

void ws2812b_show(const strip_mask_t strip_mask)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	4603      	mov	r3, r0
 8002740:	80fb      	strh	r3, [r7, #6]
	for (uint8_t iii = 0; iii < STRIP_BIT_NUM_STRIPS; iii++)
 8002742:	2300      	movs	r3, #0
 8002744:	73fb      	strb	r3, [r7, #15]
 8002746:	e010      	b.n	800276a <ws2812b_show+0x32>
	{
		if ((1 << iii) & strip_mask)
 8002748:	88fa      	ldrh	r2, [r7, #6]
 800274a:	7bfb      	ldrb	r3, [r7, #15]
 800274c:	fa42 f303 	asr.w	r3, r2, r3
 8002750:	f003 0301 	and.w	r3, r3, #1
 8002754:	2b00      	cmp	r3, #0
 8002756:	d005      	beq.n	8002764 <ws2812b_show+0x2c>
		{
			ws2812b_fill_pwm_buffer(iii + 1); // iii = strip num!
 8002758:	7bfb      	ldrb	r3, [r7, #15]
 800275a:	3301      	adds	r3, #1
 800275c:	b2db      	uxtb	r3, r3
 800275e:	4618      	mov	r0, r3
 8002760:	f7ff fedc 	bl	800251c <ws2812b_fill_pwm_buffer>
	for (uint8_t iii = 0; iii < STRIP_BIT_NUM_STRIPS; iii++)
 8002764:	7bfb      	ldrb	r3, [r7, #15]
 8002766:	3301      	adds	r3, #1
 8002768:	73fb      	strb	r3, [r7, #15]
 800276a:	7bfb      	ldrb	r3, [r7, #15]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d0eb      	beq.n	8002748 <ws2812b_show+0x10>
		}
	}
}
 8002770:	bf00      	nop
 8002772:	bf00      	nop
 8002774:	3710      	adds	r7, #16
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
	...

0800277c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	4603      	mov	r3, r0
 8002784:	6039      	str	r1, [r7, #0]
 8002786:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278c:	2b00      	cmp	r3, #0
 800278e:	db0a      	blt.n	80027a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	b2da      	uxtb	r2, r3
 8002794:	490c      	ldr	r1, [pc, #48]	; (80027c8 <__NVIC_SetPriority+0x4c>)
 8002796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279a:	0112      	lsls	r2, r2, #4
 800279c:	b2d2      	uxtb	r2, r2
 800279e:	440b      	add	r3, r1
 80027a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027a4:	e00a      	b.n	80027bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	b2da      	uxtb	r2, r3
 80027aa:	4908      	ldr	r1, [pc, #32]	; (80027cc <__NVIC_SetPriority+0x50>)
 80027ac:	79fb      	ldrb	r3, [r7, #7]
 80027ae:	f003 030f 	and.w	r3, r3, #15
 80027b2:	3b04      	subs	r3, #4
 80027b4:	0112      	lsls	r2, r2, #4
 80027b6:	b2d2      	uxtb	r2, r2
 80027b8:	440b      	add	r3, r1
 80027ba:	761a      	strb	r2, [r3, #24]
}
 80027bc:	bf00      	nop
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr
 80027c8:	e000e100 	.word	0xe000e100
 80027cc:	e000ed00 	.word	0xe000ed00

080027d0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80027d4:	4b05      	ldr	r3, [pc, #20]	; (80027ec <SysTick_Handler+0x1c>)
 80027d6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80027d8:	f001 fd10 	bl	80041fc <xTaskGetSchedulerState>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d001      	beq.n	80027e6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80027e2:	f002 fc31 	bl	8005048 <xPortSysTickHandler>
  }
}
 80027e6:	bf00      	nop
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	e000e010 	.word	0xe000e010

080027f0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80027f4:	2100      	movs	r1, #0
 80027f6:	f06f 0004 	mvn.w	r0, #4
 80027fa:	f7ff ffbf 	bl	800277c <__NVIC_SetPriority>
#endif
}
 80027fe:	bf00      	nop
 8002800:	bd80      	pop	{r7, pc}
	...

08002804 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800280a:	f3ef 8305 	mrs	r3, IPSR
 800280e:	603b      	str	r3, [r7, #0]
  return(result);
 8002810:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002812:	2b00      	cmp	r3, #0
 8002814:	d003      	beq.n	800281e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002816:	f06f 0305 	mvn.w	r3, #5
 800281a:	607b      	str	r3, [r7, #4]
 800281c:	e00c      	b.n	8002838 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800281e:	4b0a      	ldr	r3, [pc, #40]	; (8002848 <osKernelInitialize+0x44>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d105      	bne.n	8002832 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002826:	4b08      	ldr	r3, [pc, #32]	; (8002848 <osKernelInitialize+0x44>)
 8002828:	2201      	movs	r2, #1
 800282a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800282c:	2300      	movs	r3, #0
 800282e:	607b      	str	r3, [r7, #4]
 8002830:	e002      	b.n	8002838 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002832:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002836:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002838:	687b      	ldr	r3, [r7, #4]
}
 800283a:	4618      	mov	r0, r3
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	20000384 	.word	0x20000384

0800284c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002852:	f3ef 8305 	mrs	r3, IPSR
 8002856:	603b      	str	r3, [r7, #0]
  return(result);
 8002858:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800285a:	2b00      	cmp	r3, #0
 800285c:	d003      	beq.n	8002866 <osKernelStart+0x1a>
    stat = osErrorISR;
 800285e:	f06f 0305 	mvn.w	r3, #5
 8002862:	607b      	str	r3, [r7, #4]
 8002864:	e010      	b.n	8002888 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002866:	4b0b      	ldr	r3, [pc, #44]	; (8002894 <osKernelStart+0x48>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d109      	bne.n	8002882 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800286e:	f7ff ffbf 	bl	80027f0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002872:	4b08      	ldr	r3, [pc, #32]	; (8002894 <osKernelStart+0x48>)
 8002874:	2202      	movs	r2, #2
 8002876:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002878:	f001 f866 	bl	8003948 <vTaskStartScheduler>
      stat = osOK;
 800287c:	2300      	movs	r3, #0
 800287e:	607b      	str	r3, [r7, #4]
 8002880:	e002      	b.n	8002888 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002882:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002886:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002888:	687b      	ldr	r3, [r7, #4]
}
 800288a:	4618      	mov	r0, r3
 800288c:	3708      	adds	r7, #8
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	20000384 	.word	0x20000384

08002898 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002898:	b580      	push	{r7, lr}
 800289a:	b08e      	sub	sp, #56	; 0x38
 800289c:	af04      	add	r7, sp, #16
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80028a4:	2300      	movs	r3, #0
 80028a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80028a8:	f3ef 8305 	mrs	r3, IPSR
 80028ac:	617b      	str	r3, [r7, #20]
  return(result);
 80028ae:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d17e      	bne.n	80029b2 <osThreadNew+0x11a>
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d07b      	beq.n	80029b2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80028ba:	2380      	movs	r3, #128	; 0x80
 80028bc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80028be:	2318      	movs	r3, #24
 80028c0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80028c2:	2300      	movs	r3, #0
 80028c4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80028c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028ca:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d045      	beq.n	800295e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d002      	beq.n	80028e0 <osThreadNew+0x48>
        name = attr->name;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d002      	beq.n	80028ee <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d008      	beq.n	8002906 <osThreadNew+0x6e>
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	2b38      	cmp	r3, #56	; 0x38
 80028f8:	d805      	bhi.n	8002906 <osThreadNew+0x6e>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f003 0301 	and.w	r3, r3, #1
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <osThreadNew+0x72>
        return (NULL);
 8002906:	2300      	movs	r3, #0
 8002908:	e054      	b.n	80029b4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	695b      	ldr	r3, [r3, #20]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d003      	beq.n	800291a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	695b      	ldr	r3, [r3, #20]
 8002916:	089b      	lsrs	r3, r3, #2
 8002918:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d00e      	beq.n	8002940 <osThreadNew+0xa8>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	2b5b      	cmp	r3, #91	; 0x5b
 8002928:	d90a      	bls.n	8002940 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800292e:	2b00      	cmp	r3, #0
 8002930:	d006      	beq.n	8002940 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	695b      	ldr	r3, [r3, #20]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d002      	beq.n	8002940 <osThreadNew+0xa8>
        mem = 1;
 800293a:	2301      	movs	r3, #1
 800293c:	61bb      	str	r3, [r7, #24]
 800293e:	e010      	b.n	8002962 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d10c      	bne.n	8002962 <osThreadNew+0xca>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d108      	bne.n	8002962 <osThreadNew+0xca>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	691b      	ldr	r3, [r3, #16]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d104      	bne.n	8002962 <osThreadNew+0xca>
          mem = 0;
 8002958:	2300      	movs	r3, #0
 800295a:	61bb      	str	r3, [r7, #24]
 800295c:	e001      	b.n	8002962 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800295e:	2300      	movs	r3, #0
 8002960:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	2b01      	cmp	r3, #1
 8002966:	d110      	bne.n	800298a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002970:	9202      	str	r2, [sp, #8]
 8002972:	9301      	str	r3, [sp, #4]
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	9300      	str	r3, [sp, #0]
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	6a3a      	ldr	r2, [r7, #32]
 800297c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800297e:	68f8      	ldr	r0, [r7, #12]
 8002980:	f000 fe0c 	bl	800359c <xTaskCreateStatic>
 8002984:	4603      	mov	r3, r0
 8002986:	613b      	str	r3, [r7, #16]
 8002988:	e013      	b.n	80029b2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d110      	bne.n	80029b2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002990:	6a3b      	ldr	r3, [r7, #32]
 8002992:	b29a      	uxth	r2, r3
 8002994:	f107 0310 	add.w	r3, r7, #16
 8002998:	9301      	str	r3, [sp, #4]
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	9300      	str	r3, [sp, #0]
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029a2:	68f8      	ldr	r0, [r7, #12]
 80029a4:	f000 fe57 	bl	8003656 <xTaskCreate>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d001      	beq.n	80029b2 <osThreadNew+0x11a>
            hTask = NULL;
 80029ae:	2300      	movs	r3, #0
 80029b0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80029b2:	693b      	ldr	r3, [r7, #16]
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3728      	adds	r7, #40	; 0x28
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80029c4:	f3ef 8305 	mrs	r3, IPSR
 80029c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80029ca:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d003      	beq.n	80029d8 <osDelay+0x1c>
    stat = osErrorISR;
 80029d0:	f06f 0305 	mvn.w	r3, #5
 80029d4:	60fb      	str	r3, [r7, #12]
 80029d6:	e007      	b.n	80029e8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80029d8:	2300      	movs	r3, #0
 80029da:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d002      	beq.n	80029e8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f000 ff7c 	bl	80038e0 <vTaskDelay>
    }
  }

  return (stat);
 80029e8:	68fb      	ldr	r3, [r7, #12]
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3710      	adds	r7, #16
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
	...

080029f4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80029f4:	b480      	push	{r7}
 80029f6:	b085      	sub	sp, #20
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	4a07      	ldr	r2, [pc, #28]	; (8002a20 <vApplicationGetIdleTaskMemory+0x2c>)
 8002a04:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	4a06      	ldr	r2, [pc, #24]	; (8002a24 <vApplicationGetIdleTaskMemory+0x30>)
 8002a0a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2280      	movs	r2, #128	; 0x80
 8002a10:	601a      	str	r2, [r3, #0]
}
 8002a12:	bf00      	nop
 8002a14:	3714      	adds	r7, #20
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	20000388 	.word	0x20000388
 8002a24:	200003e4 	.word	0x200003e4

08002a28 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002a28:	b480      	push	{r7}
 8002a2a:	b085      	sub	sp, #20
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	4a07      	ldr	r2, [pc, #28]	; (8002a54 <vApplicationGetTimerTaskMemory+0x2c>)
 8002a38:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	4a06      	ldr	r2, [pc, #24]	; (8002a58 <vApplicationGetTimerTaskMemory+0x30>)
 8002a3e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a46:	601a      	str	r2, [r3, #0]
}
 8002a48:	bf00      	nop
 8002a4a:	3714      	adds	r7, #20
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr
 8002a54:	200005e4 	.word	0x200005e4
 8002a58:	20000640 	.word	0x20000640

08002a5c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f103 0208 	add.w	r2, r3, #8
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a74:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f103 0208 	add.w	r2, r3, #8
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f103 0208 	add.w	r2, r3, #8
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002a90:	bf00      	nop
 8002a92:	370c      	adds	r7, #12
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002aaa:	bf00      	nop
 8002aac:	370c      	adds	r7, #12
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr

08002ab6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	b085      	sub	sp, #20
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
 8002abe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	68fa      	ldr	r2, [r7, #12]
 8002aca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	689a      	ldr	r2, [r3, #8]
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	683a      	ldr	r2, [r7, #0]
 8002ada:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	683a      	ldr	r2, [r7, #0]
 8002ae0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	1c5a      	adds	r2, r3, #1
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	601a      	str	r2, [r3, #0]
}
 8002af2:	bf00      	nop
 8002af4:	3714      	adds	r7, #20
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr

08002afe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002afe:	b480      	push	{r7}
 8002b00:	b085      	sub	sp, #20
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
 8002b06:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b14:	d103      	bne.n	8002b1e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	60fb      	str	r3, [r7, #12]
 8002b1c:	e00c      	b.n	8002b38 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	3308      	adds	r3, #8
 8002b22:	60fb      	str	r3, [r7, #12]
 8002b24:	e002      	b.n	8002b2c <vListInsert+0x2e>
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	60fb      	str	r3, [r7, #12]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	68ba      	ldr	r2, [r7, #8]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d2f6      	bcs.n	8002b26 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	685a      	ldr	r2, [r3, #4]
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	683a      	ldr	r2, [r7, #0]
 8002b46:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	68fa      	ldr	r2, [r7, #12]
 8002b4c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	683a      	ldr	r2, [r7, #0]
 8002b52:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	1c5a      	adds	r2, r3, #1
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	601a      	str	r2, [r3, #0]
}
 8002b64:	bf00      	nop
 8002b66:	3714      	adds	r7, #20
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002b70:	b480      	push	{r7}
 8002b72:	b085      	sub	sp, #20
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	691b      	ldr	r3, [r3, #16]
 8002b7c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	6892      	ldr	r2, [r2, #8]
 8002b86:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	6852      	ldr	r2, [r2, #4]
 8002b90:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d103      	bne.n	8002ba4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689a      	ldr	r2, [r3, #8]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	1e5a      	subs	r2, r3, #1
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3714      	adds	r7, #20
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d10a      	bne.n	8002bee <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bdc:	f383 8811 	msr	BASEPRI, r3
 8002be0:	f3bf 8f6f 	isb	sy
 8002be4:	f3bf 8f4f 	dsb	sy
 8002be8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002bea:	bf00      	nop
 8002bec:	e7fe      	b.n	8002bec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002bee:	f002 f999 	bl	8004f24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bfa:	68f9      	ldr	r1, [r7, #12]
 8002bfc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002bfe:	fb01 f303 	mul.w	r3, r1, r3
 8002c02:	441a      	add	r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	68f9      	ldr	r1, [r7, #12]
 8002c22:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002c24:	fb01 f303 	mul.w	r3, r1, r3
 8002c28:	441a      	add	r2, r3
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	22ff      	movs	r2, #255	; 0xff
 8002c32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	22ff      	movs	r2, #255	; 0xff
 8002c3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d114      	bne.n	8002c6e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	691b      	ldr	r3, [r3, #16]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d01a      	beq.n	8002c82 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	3310      	adds	r3, #16
 8002c50:	4618      	mov	r0, r3
 8002c52:	f001 f915 	bl	8003e80 <xTaskRemoveFromEventList>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d012      	beq.n	8002c82 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002c5c:	4b0c      	ldr	r3, [pc, #48]	; (8002c90 <xQueueGenericReset+0xcc>)
 8002c5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c62:	601a      	str	r2, [r3, #0]
 8002c64:	f3bf 8f4f 	dsb	sy
 8002c68:	f3bf 8f6f 	isb	sy
 8002c6c:	e009      	b.n	8002c82 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	3310      	adds	r3, #16
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7ff fef2 	bl	8002a5c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	3324      	adds	r3, #36	; 0x24
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7ff feed 	bl	8002a5c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002c82:	f002 f97f 	bl	8004f84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002c86:	2301      	movs	r3, #1
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3710      	adds	r7, #16
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	e000ed04 	.word	0xe000ed04

08002c94 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b08e      	sub	sp, #56	; 0x38
 8002c98:	af02      	add	r7, sp, #8
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	607a      	str	r2, [r7, #4]
 8002ca0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d10a      	bne.n	8002cbe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cac:	f383 8811 	msr	BASEPRI, r3
 8002cb0:	f3bf 8f6f 	isb	sy
 8002cb4:	f3bf 8f4f 	dsb	sy
 8002cb8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002cba:	bf00      	nop
 8002cbc:	e7fe      	b.n	8002cbc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d10a      	bne.n	8002cda <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cc8:	f383 8811 	msr	BASEPRI, r3
 8002ccc:	f3bf 8f6f 	isb	sy
 8002cd0:	f3bf 8f4f 	dsb	sy
 8002cd4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002cd6:	bf00      	nop
 8002cd8:	e7fe      	b.n	8002cd8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d002      	beq.n	8002ce6 <xQueueGenericCreateStatic+0x52>
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <xQueueGenericCreateStatic+0x56>
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e000      	b.n	8002cec <xQueueGenericCreateStatic+0x58>
 8002cea:	2300      	movs	r3, #0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d10a      	bne.n	8002d06 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cf4:	f383 8811 	msr	BASEPRI, r3
 8002cf8:	f3bf 8f6f 	isb	sy
 8002cfc:	f3bf 8f4f 	dsb	sy
 8002d00:	623b      	str	r3, [r7, #32]
}
 8002d02:	bf00      	nop
 8002d04:	e7fe      	b.n	8002d04 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d102      	bne.n	8002d12 <xQueueGenericCreateStatic+0x7e>
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <xQueueGenericCreateStatic+0x82>
 8002d12:	2301      	movs	r3, #1
 8002d14:	e000      	b.n	8002d18 <xQueueGenericCreateStatic+0x84>
 8002d16:	2300      	movs	r3, #0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d10a      	bne.n	8002d32 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d20:	f383 8811 	msr	BASEPRI, r3
 8002d24:	f3bf 8f6f 	isb	sy
 8002d28:	f3bf 8f4f 	dsb	sy
 8002d2c:	61fb      	str	r3, [r7, #28]
}
 8002d2e:	bf00      	nop
 8002d30:	e7fe      	b.n	8002d30 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002d32:	2350      	movs	r3, #80	; 0x50
 8002d34:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	2b50      	cmp	r3, #80	; 0x50
 8002d3a:	d00a      	beq.n	8002d52 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d40:	f383 8811 	msr	BASEPRI, r3
 8002d44:	f3bf 8f6f 	isb	sy
 8002d48:	f3bf 8f4f 	dsb	sy
 8002d4c:	61bb      	str	r3, [r7, #24]
}
 8002d4e:	bf00      	nop
 8002d50:	e7fe      	b.n	8002d50 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002d52:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d00d      	beq.n	8002d7a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d60:	2201      	movs	r2, #1
 8002d62:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002d66:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d6c:	9300      	str	r3, [sp, #0]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	68b9      	ldr	r1, [r7, #8]
 8002d74:	68f8      	ldr	r0, [r7, #12]
 8002d76:	f000 f805 	bl	8002d84 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3730      	adds	r7, #48	; 0x30
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	607a      	str	r2, [r7, #4]
 8002d90:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d103      	bne.n	8002da0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	601a      	str	r2, [r3, #0]
 8002d9e:	e002      	b.n	8002da6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	68fa      	ldr	r2, [r7, #12]
 8002daa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	68ba      	ldr	r2, [r7, #8]
 8002db0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002db2:	2101      	movs	r1, #1
 8002db4:	69b8      	ldr	r0, [r7, #24]
 8002db6:	f7ff ff05 	bl	8002bc4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	78fa      	ldrb	r2, [r7, #3]
 8002dbe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002dc2:	bf00      	nop
 8002dc4:	3710      	adds	r7, #16
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
	...

08002dcc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b08e      	sub	sp, #56	; 0x38
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	607a      	str	r2, [r7, #4]
 8002dd8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d10a      	bne.n	8002dfe <xQueueGenericSend+0x32>
	__asm volatile
 8002de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dec:	f383 8811 	msr	BASEPRI, r3
 8002df0:	f3bf 8f6f 	isb	sy
 8002df4:	f3bf 8f4f 	dsb	sy
 8002df8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002dfa:	bf00      	nop
 8002dfc:	e7fe      	b.n	8002dfc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d103      	bne.n	8002e0c <xQueueGenericSend+0x40>
 8002e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d101      	bne.n	8002e10 <xQueueGenericSend+0x44>
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e000      	b.n	8002e12 <xQueueGenericSend+0x46>
 8002e10:	2300      	movs	r3, #0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d10a      	bne.n	8002e2c <xQueueGenericSend+0x60>
	__asm volatile
 8002e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e1a:	f383 8811 	msr	BASEPRI, r3
 8002e1e:	f3bf 8f6f 	isb	sy
 8002e22:	f3bf 8f4f 	dsb	sy
 8002e26:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002e28:	bf00      	nop
 8002e2a:	e7fe      	b.n	8002e2a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d103      	bne.n	8002e3a <xQueueGenericSend+0x6e>
 8002e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d101      	bne.n	8002e3e <xQueueGenericSend+0x72>
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e000      	b.n	8002e40 <xQueueGenericSend+0x74>
 8002e3e:	2300      	movs	r3, #0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d10a      	bne.n	8002e5a <xQueueGenericSend+0x8e>
	__asm volatile
 8002e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e48:	f383 8811 	msr	BASEPRI, r3
 8002e4c:	f3bf 8f6f 	isb	sy
 8002e50:	f3bf 8f4f 	dsb	sy
 8002e54:	623b      	str	r3, [r7, #32]
}
 8002e56:	bf00      	nop
 8002e58:	e7fe      	b.n	8002e58 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e5a:	f001 f9cf 	bl	80041fc <xTaskGetSchedulerState>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d102      	bne.n	8002e6a <xQueueGenericSend+0x9e>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d101      	bne.n	8002e6e <xQueueGenericSend+0xa2>
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e000      	b.n	8002e70 <xQueueGenericSend+0xa4>
 8002e6e:	2300      	movs	r3, #0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d10a      	bne.n	8002e8a <xQueueGenericSend+0xbe>
	__asm volatile
 8002e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e78:	f383 8811 	msr	BASEPRI, r3
 8002e7c:	f3bf 8f6f 	isb	sy
 8002e80:	f3bf 8f4f 	dsb	sy
 8002e84:	61fb      	str	r3, [r7, #28]
}
 8002e86:	bf00      	nop
 8002e88:	e7fe      	b.n	8002e88 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002e8a:	f002 f84b 	bl	8004f24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d302      	bcc.n	8002ea0 <xQueueGenericSend+0xd4>
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d129      	bne.n	8002ef4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002ea0:	683a      	ldr	r2, [r7, #0]
 8002ea2:	68b9      	ldr	r1, [r7, #8]
 8002ea4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ea6:	f000 fa0b 	bl	80032c0 <prvCopyDataToQueue>
 8002eaa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d010      	beq.n	8002ed6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb6:	3324      	adds	r3, #36	; 0x24
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f000 ffe1 	bl	8003e80 <xTaskRemoveFromEventList>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d013      	beq.n	8002eec <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002ec4:	4b3f      	ldr	r3, [pc, #252]	; (8002fc4 <xQueueGenericSend+0x1f8>)
 8002ec6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002eca:	601a      	str	r2, [r3, #0]
 8002ecc:	f3bf 8f4f 	dsb	sy
 8002ed0:	f3bf 8f6f 	isb	sy
 8002ed4:	e00a      	b.n	8002eec <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d007      	beq.n	8002eec <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002edc:	4b39      	ldr	r3, [pc, #228]	; (8002fc4 <xQueueGenericSend+0x1f8>)
 8002ede:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ee2:	601a      	str	r2, [r3, #0]
 8002ee4:	f3bf 8f4f 	dsb	sy
 8002ee8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002eec:	f002 f84a 	bl	8004f84 <vPortExitCritical>
				return pdPASS;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e063      	b.n	8002fbc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d103      	bne.n	8002f02 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002efa:	f002 f843 	bl	8004f84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002efe:	2300      	movs	r3, #0
 8002f00:	e05c      	b.n	8002fbc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d106      	bne.n	8002f16 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f08:	f107 0314 	add.w	r3, r7, #20
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f001 f81b 	bl	8003f48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f12:	2301      	movs	r3, #1
 8002f14:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002f16:	f002 f835 	bl	8004f84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002f1a:	f000 fd7b 	bl	8003a14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f1e:	f002 f801 	bl	8004f24 <vPortEnterCritical>
 8002f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f28:	b25b      	sxtb	r3, r3
 8002f2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f2e:	d103      	bne.n	8002f38 <xQueueGenericSend+0x16c>
 8002f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f32:	2200      	movs	r2, #0
 8002f34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f3e:	b25b      	sxtb	r3, r3
 8002f40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f44:	d103      	bne.n	8002f4e <xQueueGenericSend+0x182>
 8002f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f4e:	f002 f819 	bl	8004f84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f52:	1d3a      	adds	r2, r7, #4
 8002f54:	f107 0314 	add.w	r3, r7, #20
 8002f58:	4611      	mov	r1, r2
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f001 f80a 	bl	8003f74 <xTaskCheckForTimeOut>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d124      	bne.n	8002fb0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002f66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f68:	f000 faa2 	bl	80034b0 <prvIsQueueFull>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d018      	beq.n	8002fa4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f74:	3310      	adds	r3, #16
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	4611      	mov	r1, r2
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f000 ff30 	bl	8003de0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002f80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f82:	f000 fa2d 	bl	80033e0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002f86:	f000 fd53 	bl	8003a30 <xTaskResumeAll>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	f47f af7c 	bne.w	8002e8a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002f92:	4b0c      	ldr	r3, [pc, #48]	; (8002fc4 <xQueueGenericSend+0x1f8>)
 8002f94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f98:	601a      	str	r2, [r3, #0]
 8002f9a:	f3bf 8f4f 	dsb	sy
 8002f9e:	f3bf 8f6f 	isb	sy
 8002fa2:	e772      	b.n	8002e8a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002fa4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002fa6:	f000 fa1b 	bl	80033e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002faa:	f000 fd41 	bl	8003a30 <xTaskResumeAll>
 8002fae:	e76c      	b.n	8002e8a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002fb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002fb2:	f000 fa15 	bl	80033e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002fb6:	f000 fd3b 	bl	8003a30 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002fba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3738      	adds	r7, #56	; 0x38
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	e000ed04 	.word	0xe000ed04

08002fc8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b090      	sub	sp, #64	; 0x40
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	607a      	str	r2, [r7, #4]
 8002fd4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d10a      	bne.n	8002ff6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fe4:	f383 8811 	msr	BASEPRI, r3
 8002fe8:	f3bf 8f6f 	isb	sy
 8002fec:	f3bf 8f4f 	dsb	sy
 8002ff0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002ff2:	bf00      	nop
 8002ff4:	e7fe      	b.n	8002ff4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d103      	bne.n	8003004 <xQueueGenericSendFromISR+0x3c>
 8002ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003000:	2b00      	cmp	r3, #0
 8003002:	d101      	bne.n	8003008 <xQueueGenericSendFromISR+0x40>
 8003004:	2301      	movs	r3, #1
 8003006:	e000      	b.n	800300a <xQueueGenericSendFromISR+0x42>
 8003008:	2300      	movs	r3, #0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d10a      	bne.n	8003024 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800300e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003012:	f383 8811 	msr	BASEPRI, r3
 8003016:	f3bf 8f6f 	isb	sy
 800301a:	f3bf 8f4f 	dsb	sy
 800301e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003020:	bf00      	nop
 8003022:	e7fe      	b.n	8003022 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	2b02      	cmp	r3, #2
 8003028:	d103      	bne.n	8003032 <xQueueGenericSendFromISR+0x6a>
 800302a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800302c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800302e:	2b01      	cmp	r3, #1
 8003030:	d101      	bne.n	8003036 <xQueueGenericSendFromISR+0x6e>
 8003032:	2301      	movs	r3, #1
 8003034:	e000      	b.n	8003038 <xQueueGenericSendFromISR+0x70>
 8003036:	2300      	movs	r3, #0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d10a      	bne.n	8003052 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800303c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003040:	f383 8811 	msr	BASEPRI, r3
 8003044:	f3bf 8f6f 	isb	sy
 8003048:	f3bf 8f4f 	dsb	sy
 800304c:	623b      	str	r3, [r7, #32]
}
 800304e:	bf00      	nop
 8003050:	e7fe      	b.n	8003050 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003052:	f002 f849 	bl	80050e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003056:	f3ef 8211 	mrs	r2, BASEPRI
 800305a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800305e:	f383 8811 	msr	BASEPRI, r3
 8003062:	f3bf 8f6f 	isb	sy
 8003066:	f3bf 8f4f 	dsb	sy
 800306a:	61fa      	str	r2, [r7, #28]
 800306c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800306e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003070:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003074:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800307a:	429a      	cmp	r2, r3
 800307c:	d302      	bcc.n	8003084 <xQueueGenericSendFromISR+0xbc>
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	2b02      	cmp	r3, #2
 8003082:	d12f      	bne.n	80030e4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003086:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800308a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800308e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003092:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003094:	683a      	ldr	r2, [r7, #0]
 8003096:	68b9      	ldr	r1, [r7, #8]
 8003098:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800309a:	f000 f911 	bl	80032c0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800309e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80030a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030a6:	d112      	bne.n	80030ce <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80030a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d016      	beq.n	80030de <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80030b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030b2:	3324      	adds	r3, #36	; 0x24
 80030b4:	4618      	mov	r0, r3
 80030b6:	f000 fee3 	bl	8003e80 <xTaskRemoveFromEventList>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d00e      	beq.n	80030de <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00b      	beq.n	80030de <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2201      	movs	r2, #1
 80030ca:	601a      	str	r2, [r3, #0]
 80030cc:	e007      	b.n	80030de <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80030ce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80030d2:	3301      	adds	r3, #1
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	b25a      	sxtb	r2, r3
 80030d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80030de:	2301      	movs	r3, #1
 80030e0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80030e2:	e001      	b.n	80030e8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80030e4:	2300      	movs	r3, #0
 80030e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ea:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80030f2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80030f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3740      	adds	r7, #64	; 0x40
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
	...

08003100 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b08c      	sub	sp, #48	; 0x30
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800310c:	2300      	movs	r3, #0
 800310e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003116:	2b00      	cmp	r3, #0
 8003118:	d10a      	bne.n	8003130 <xQueueReceive+0x30>
	__asm volatile
 800311a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800311e:	f383 8811 	msr	BASEPRI, r3
 8003122:	f3bf 8f6f 	isb	sy
 8003126:	f3bf 8f4f 	dsb	sy
 800312a:	623b      	str	r3, [r7, #32]
}
 800312c:	bf00      	nop
 800312e:	e7fe      	b.n	800312e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d103      	bne.n	800313e <xQueueReceive+0x3e>
 8003136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313a:	2b00      	cmp	r3, #0
 800313c:	d101      	bne.n	8003142 <xQueueReceive+0x42>
 800313e:	2301      	movs	r3, #1
 8003140:	e000      	b.n	8003144 <xQueueReceive+0x44>
 8003142:	2300      	movs	r3, #0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d10a      	bne.n	800315e <xQueueReceive+0x5e>
	__asm volatile
 8003148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800314c:	f383 8811 	msr	BASEPRI, r3
 8003150:	f3bf 8f6f 	isb	sy
 8003154:	f3bf 8f4f 	dsb	sy
 8003158:	61fb      	str	r3, [r7, #28]
}
 800315a:	bf00      	nop
 800315c:	e7fe      	b.n	800315c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800315e:	f001 f84d 	bl	80041fc <xTaskGetSchedulerState>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d102      	bne.n	800316e <xQueueReceive+0x6e>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d101      	bne.n	8003172 <xQueueReceive+0x72>
 800316e:	2301      	movs	r3, #1
 8003170:	e000      	b.n	8003174 <xQueueReceive+0x74>
 8003172:	2300      	movs	r3, #0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d10a      	bne.n	800318e <xQueueReceive+0x8e>
	__asm volatile
 8003178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800317c:	f383 8811 	msr	BASEPRI, r3
 8003180:	f3bf 8f6f 	isb	sy
 8003184:	f3bf 8f4f 	dsb	sy
 8003188:	61bb      	str	r3, [r7, #24]
}
 800318a:	bf00      	nop
 800318c:	e7fe      	b.n	800318c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800318e:	f001 fec9 	bl	8004f24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003196:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319a:	2b00      	cmp	r3, #0
 800319c:	d01f      	beq.n	80031de <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800319e:	68b9      	ldr	r1, [r7, #8]
 80031a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031a2:	f000 f8f7 	bl	8003394 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80031a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a8:	1e5a      	subs	r2, r3, #1
 80031aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ac:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00f      	beq.n	80031d6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b8:	3310      	adds	r3, #16
 80031ba:	4618      	mov	r0, r3
 80031bc:	f000 fe60 	bl	8003e80 <xTaskRemoveFromEventList>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d007      	beq.n	80031d6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80031c6:	4b3d      	ldr	r3, [pc, #244]	; (80032bc <xQueueReceive+0x1bc>)
 80031c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031cc:	601a      	str	r2, [r3, #0]
 80031ce:	f3bf 8f4f 	dsb	sy
 80031d2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80031d6:	f001 fed5 	bl	8004f84 <vPortExitCritical>
				return pdPASS;
 80031da:	2301      	movs	r3, #1
 80031dc:	e069      	b.n	80032b2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d103      	bne.n	80031ec <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80031e4:	f001 fece 	bl	8004f84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80031e8:	2300      	movs	r3, #0
 80031ea:	e062      	b.n	80032b2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80031ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d106      	bne.n	8003200 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80031f2:	f107 0310 	add.w	r3, r7, #16
 80031f6:	4618      	mov	r0, r3
 80031f8:	f000 fea6 	bl	8003f48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80031fc:	2301      	movs	r3, #1
 80031fe:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003200:	f001 fec0 	bl	8004f84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003204:	f000 fc06 	bl	8003a14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003208:	f001 fe8c 	bl	8004f24 <vPortEnterCritical>
 800320c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800320e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003212:	b25b      	sxtb	r3, r3
 8003214:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003218:	d103      	bne.n	8003222 <xQueueReceive+0x122>
 800321a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800321c:	2200      	movs	r2, #0
 800321e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003224:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003228:	b25b      	sxtb	r3, r3
 800322a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800322e:	d103      	bne.n	8003238 <xQueueReceive+0x138>
 8003230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003232:	2200      	movs	r2, #0
 8003234:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003238:	f001 fea4 	bl	8004f84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800323c:	1d3a      	adds	r2, r7, #4
 800323e:	f107 0310 	add.w	r3, r7, #16
 8003242:	4611      	mov	r1, r2
 8003244:	4618      	mov	r0, r3
 8003246:	f000 fe95 	bl	8003f74 <xTaskCheckForTimeOut>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d123      	bne.n	8003298 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003250:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003252:	f000 f917 	bl	8003484 <prvIsQueueEmpty>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d017      	beq.n	800328c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800325c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800325e:	3324      	adds	r3, #36	; 0x24
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	4611      	mov	r1, r2
 8003264:	4618      	mov	r0, r3
 8003266:	f000 fdbb 	bl	8003de0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800326a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800326c:	f000 f8b8 	bl	80033e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003270:	f000 fbde 	bl	8003a30 <xTaskResumeAll>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d189      	bne.n	800318e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800327a:	4b10      	ldr	r3, [pc, #64]	; (80032bc <xQueueReceive+0x1bc>)
 800327c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003280:	601a      	str	r2, [r3, #0]
 8003282:	f3bf 8f4f 	dsb	sy
 8003286:	f3bf 8f6f 	isb	sy
 800328a:	e780      	b.n	800318e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800328c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800328e:	f000 f8a7 	bl	80033e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003292:	f000 fbcd 	bl	8003a30 <xTaskResumeAll>
 8003296:	e77a      	b.n	800318e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003298:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800329a:	f000 f8a1 	bl	80033e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800329e:	f000 fbc7 	bl	8003a30 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80032a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032a4:	f000 f8ee 	bl	8003484 <prvIsQueueEmpty>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	f43f af6f 	beq.w	800318e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80032b0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3730      	adds	r7, #48	; 0x30
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	e000ed04 	.word	0xe000ed04

080032c0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b086      	sub	sp, #24
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80032cc:	2300      	movs	r3, #0
 80032ce:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d10d      	bne.n	80032fa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d14d      	bne.n	8003382 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	4618      	mov	r0, r3
 80032ec:	f000 ffa4 	bl	8004238 <xTaskPriorityDisinherit>
 80032f0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2200      	movs	r2, #0
 80032f6:	609a      	str	r2, [r3, #8]
 80032f8:	e043      	b.n	8003382 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d119      	bne.n	8003334 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6858      	ldr	r0, [r3, #4]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003308:	461a      	mov	r2, r3
 800330a:	68b9      	ldr	r1, [r7, #8]
 800330c:	f006 fc86 	bl	8009c1c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	685a      	ldr	r2, [r3, #4]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003318:	441a      	add	r2, r3
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	685a      	ldr	r2, [r3, #4]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	429a      	cmp	r2, r3
 8003328:	d32b      	bcc.n	8003382 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	605a      	str	r2, [r3, #4]
 8003332:	e026      	b.n	8003382 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	68d8      	ldr	r0, [r3, #12]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333c:	461a      	mov	r2, r3
 800333e:	68b9      	ldr	r1, [r7, #8]
 8003340:	f006 fc6c 	bl	8009c1c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	68da      	ldr	r2, [r3, #12]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334c:	425b      	negs	r3, r3
 800334e:	441a      	add	r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	68da      	ldr	r2, [r3, #12]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	429a      	cmp	r2, r3
 800335e:	d207      	bcs.n	8003370 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	689a      	ldr	r2, [r3, #8]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003368:	425b      	negs	r3, r3
 800336a:	441a      	add	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2b02      	cmp	r3, #2
 8003374:	d105      	bne.n	8003382 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d002      	beq.n	8003382 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	3b01      	subs	r3, #1
 8003380:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	1c5a      	adds	r2, r3, #1
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800338a:	697b      	ldr	r3, [r7, #20]
}
 800338c:	4618      	mov	r0, r3
 800338e:	3718      	adds	r7, #24
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d018      	beq.n	80033d8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	68da      	ldr	r2, [r3, #12]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ae:	441a      	add	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	68da      	ldr	r2, [r3, #12]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d303      	bcc.n	80033c8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	68d9      	ldr	r1, [r3, #12]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d0:	461a      	mov	r2, r3
 80033d2:	6838      	ldr	r0, [r7, #0]
 80033d4:	f006 fc22 	bl	8009c1c <memcpy>
	}
}
 80033d8:	bf00      	nop
 80033da:	3708      	adds	r7, #8
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80033e8:	f001 fd9c 	bl	8004f24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80033f2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80033f4:	e011      	b.n	800341a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d012      	beq.n	8003424 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	3324      	adds	r3, #36	; 0x24
 8003402:	4618      	mov	r0, r3
 8003404:	f000 fd3c 	bl	8003e80 <xTaskRemoveFromEventList>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d001      	beq.n	8003412 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800340e:	f000 fe13 	bl	8004038 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003412:	7bfb      	ldrb	r3, [r7, #15]
 8003414:	3b01      	subs	r3, #1
 8003416:	b2db      	uxtb	r3, r3
 8003418:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800341a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800341e:	2b00      	cmp	r3, #0
 8003420:	dce9      	bgt.n	80033f6 <prvUnlockQueue+0x16>
 8003422:	e000      	b.n	8003426 <prvUnlockQueue+0x46>
					break;
 8003424:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	22ff      	movs	r2, #255	; 0xff
 800342a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800342e:	f001 fda9 	bl	8004f84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003432:	f001 fd77 	bl	8004f24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800343c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800343e:	e011      	b.n	8003464 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	691b      	ldr	r3, [r3, #16]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d012      	beq.n	800346e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	3310      	adds	r3, #16
 800344c:	4618      	mov	r0, r3
 800344e:	f000 fd17 	bl	8003e80 <xTaskRemoveFromEventList>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d001      	beq.n	800345c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003458:	f000 fdee 	bl	8004038 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800345c:	7bbb      	ldrb	r3, [r7, #14]
 800345e:	3b01      	subs	r3, #1
 8003460:	b2db      	uxtb	r3, r3
 8003462:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003464:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003468:	2b00      	cmp	r3, #0
 800346a:	dce9      	bgt.n	8003440 <prvUnlockQueue+0x60>
 800346c:	e000      	b.n	8003470 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800346e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	22ff      	movs	r2, #255	; 0xff
 8003474:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003478:	f001 fd84 	bl	8004f84 <vPortExitCritical>
}
 800347c:	bf00      	nop
 800347e:	3710      	adds	r7, #16
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800348c:	f001 fd4a 	bl	8004f24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003494:	2b00      	cmp	r3, #0
 8003496:	d102      	bne.n	800349e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003498:	2301      	movs	r3, #1
 800349a:	60fb      	str	r3, [r7, #12]
 800349c:	e001      	b.n	80034a2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800349e:	2300      	movs	r3, #0
 80034a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80034a2:	f001 fd6f 	bl	8004f84 <vPortExitCritical>

	return xReturn;
 80034a6:	68fb      	ldr	r3, [r7, #12]
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3710      	adds	r7, #16
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80034b8:	f001 fd34 	bl	8004f24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d102      	bne.n	80034ce <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80034c8:	2301      	movs	r3, #1
 80034ca:	60fb      	str	r3, [r7, #12]
 80034cc:	e001      	b.n	80034d2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80034ce:	2300      	movs	r3, #0
 80034d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80034d2:	f001 fd57 	bl	8004f84 <vPortExitCritical>

	return xReturn;
 80034d6:	68fb      	ldr	r3, [r7, #12]
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3710      	adds	r7, #16
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80034e0:	b480      	push	{r7}
 80034e2:	b085      	sub	sp, #20
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80034ea:	2300      	movs	r3, #0
 80034ec:	60fb      	str	r3, [r7, #12]
 80034ee:	e014      	b.n	800351a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80034f0:	4a0f      	ldr	r2, [pc, #60]	; (8003530 <vQueueAddToRegistry+0x50>)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d10b      	bne.n	8003514 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80034fc:	490c      	ldr	r1, [pc, #48]	; (8003530 <vQueueAddToRegistry+0x50>)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	683a      	ldr	r2, [r7, #0]
 8003502:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003506:	4a0a      	ldr	r2, [pc, #40]	; (8003530 <vQueueAddToRegistry+0x50>)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	00db      	lsls	r3, r3, #3
 800350c:	4413      	add	r3, r2
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003512:	e006      	b.n	8003522 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	3301      	adds	r3, #1
 8003518:	60fb      	str	r3, [r7, #12]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2b07      	cmp	r3, #7
 800351e:	d9e7      	bls.n	80034f0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003520:	bf00      	nop
 8003522:	bf00      	nop
 8003524:	3714      	adds	r7, #20
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	20000a40 	.word	0x20000a40

08003534 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003534:	b580      	push	{r7, lr}
 8003536:	b086      	sub	sp, #24
 8003538:	af00      	add	r7, sp, #0
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003544:	f001 fcee 	bl	8004f24 <vPortEnterCritical>
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800354e:	b25b      	sxtb	r3, r3
 8003550:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003554:	d103      	bne.n	800355e <vQueueWaitForMessageRestricted+0x2a>
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	2200      	movs	r2, #0
 800355a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003564:	b25b      	sxtb	r3, r3
 8003566:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800356a:	d103      	bne.n	8003574 <vQueueWaitForMessageRestricted+0x40>
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003574:	f001 fd06 	bl	8004f84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800357c:	2b00      	cmp	r3, #0
 800357e:	d106      	bne.n	800358e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	3324      	adds	r3, #36	; 0x24
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	68b9      	ldr	r1, [r7, #8]
 8003588:	4618      	mov	r0, r3
 800358a:	f000 fc4d 	bl	8003e28 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800358e:	6978      	ldr	r0, [r7, #20]
 8003590:	f7ff ff26 	bl	80033e0 <prvUnlockQueue>
	}
 8003594:	bf00      	nop
 8003596:	3718      	adds	r7, #24
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800359c:	b580      	push	{r7, lr}
 800359e:	b08e      	sub	sp, #56	; 0x38
 80035a0:	af04      	add	r7, sp, #16
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
 80035a8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80035aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d10a      	bne.n	80035c6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80035b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b4:	f383 8811 	msr	BASEPRI, r3
 80035b8:	f3bf 8f6f 	isb	sy
 80035bc:	f3bf 8f4f 	dsb	sy
 80035c0:	623b      	str	r3, [r7, #32]
}
 80035c2:	bf00      	nop
 80035c4:	e7fe      	b.n	80035c4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80035c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d10a      	bne.n	80035e2 <xTaskCreateStatic+0x46>
	__asm volatile
 80035cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035d0:	f383 8811 	msr	BASEPRI, r3
 80035d4:	f3bf 8f6f 	isb	sy
 80035d8:	f3bf 8f4f 	dsb	sy
 80035dc:	61fb      	str	r3, [r7, #28]
}
 80035de:	bf00      	nop
 80035e0:	e7fe      	b.n	80035e0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80035e2:	235c      	movs	r3, #92	; 0x5c
 80035e4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	2b5c      	cmp	r3, #92	; 0x5c
 80035ea:	d00a      	beq.n	8003602 <xTaskCreateStatic+0x66>
	__asm volatile
 80035ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f0:	f383 8811 	msr	BASEPRI, r3
 80035f4:	f3bf 8f6f 	isb	sy
 80035f8:	f3bf 8f4f 	dsb	sy
 80035fc:	61bb      	str	r3, [r7, #24]
}
 80035fe:	bf00      	nop
 8003600:	e7fe      	b.n	8003600 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003602:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003606:	2b00      	cmp	r3, #0
 8003608:	d01e      	beq.n	8003648 <xTaskCreateStatic+0xac>
 800360a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800360c:	2b00      	cmp	r3, #0
 800360e:	d01b      	beq.n	8003648 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003612:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003616:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003618:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800361a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361c:	2202      	movs	r2, #2
 800361e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003622:	2300      	movs	r3, #0
 8003624:	9303      	str	r3, [sp, #12]
 8003626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003628:	9302      	str	r3, [sp, #8]
 800362a:	f107 0314 	add.w	r3, r7, #20
 800362e:	9301      	str	r3, [sp, #4]
 8003630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003632:	9300      	str	r3, [sp, #0]
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	68b9      	ldr	r1, [r7, #8]
 800363a:	68f8      	ldr	r0, [r7, #12]
 800363c:	f000 f850 	bl	80036e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003640:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003642:	f000 f8dd 	bl	8003800 <prvAddNewTaskToReadyList>
 8003646:	e001      	b.n	800364c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003648:	2300      	movs	r3, #0
 800364a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800364c:	697b      	ldr	r3, [r7, #20]
	}
 800364e:	4618      	mov	r0, r3
 8003650:	3728      	adds	r7, #40	; 0x28
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}

08003656 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003656:	b580      	push	{r7, lr}
 8003658:	b08c      	sub	sp, #48	; 0x30
 800365a:	af04      	add	r7, sp, #16
 800365c:	60f8      	str	r0, [r7, #12]
 800365e:	60b9      	str	r1, [r7, #8]
 8003660:	603b      	str	r3, [r7, #0]
 8003662:	4613      	mov	r3, r2
 8003664:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003666:	88fb      	ldrh	r3, [r7, #6]
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	4618      	mov	r0, r3
 800366c:	f001 fd7c 	bl	8005168 <pvPortMalloc>
 8003670:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d00e      	beq.n	8003696 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003678:	205c      	movs	r0, #92	; 0x5c
 800367a:	f001 fd75 	bl	8005168 <pvPortMalloc>
 800367e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d003      	beq.n	800368e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	697a      	ldr	r2, [r7, #20]
 800368a:	631a      	str	r2, [r3, #48]	; 0x30
 800368c:	e005      	b.n	800369a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800368e:	6978      	ldr	r0, [r7, #20]
 8003690:	f001 fe36 	bl	8005300 <vPortFree>
 8003694:	e001      	b.n	800369a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003696:	2300      	movs	r3, #0
 8003698:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d017      	beq.n	80036d0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80036a8:	88fa      	ldrh	r2, [r7, #6]
 80036aa:	2300      	movs	r3, #0
 80036ac:	9303      	str	r3, [sp, #12]
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	9302      	str	r3, [sp, #8]
 80036b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b4:	9301      	str	r3, [sp, #4]
 80036b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b8:	9300      	str	r3, [sp, #0]
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	68b9      	ldr	r1, [r7, #8]
 80036be:	68f8      	ldr	r0, [r7, #12]
 80036c0:	f000 f80e 	bl	80036e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80036c4:	69f8      	ldr	r0, [r7, #28]
 80036c6:	f000 f89b 	bl	8003800 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80036ca:	2301      	movs	r3, #1
 80036cc:	61bb      	str	r3, [r7, #24]
 80036ce:	e002      	b.n	80036d6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80036d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80036d4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80036d6:	69bb      	ldr	r3, [r7, #24]
	}
 80036d8:	4618      	mov	r0, r3
 80036da:	3720      	adds	r7, #32
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b088      	sub	sp, #32
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	607a      	str	r2, [r7, #4]
 80036ec:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80036ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	461a      	mov	r2, r3
 80036f8:	21a5      	movs	r1, #165	; 0xa5
 80036fa:	f006 fa9d 	bl	8009c38 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80036fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003700:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003708:	3b01      	subs	r3, #1
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	4413      	add	r3, r2
 800370e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	f023 0307 	bic.w	r3, r3, #7
 8003716:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	f003 0307 	and.w	r3, r3, #7
 800371e:	2b00      	cmp	r3, #0
 8003720:	d00a      	beq.n	8003738 <prvInitialiseNewTask+0x58>
	__asm volatile
 8003722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003726:	f383 8811 	msr	BASEPRI, r3
 800372a:	f3bf 8f6f 	isb	sy
 800372e:	f3bf 8f4f 	dsb	sy
 8003732:	617b      	str	r3, [r7, #20]
}
 8003734:	bf00      	nop
 8003736:	e7fe      	b.n	8003736 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d01f      	beq.n	800377e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800373e:	2300      	movs	r3, #0
 8003740:	61fb      	str	r3, [r7, #28]
 8003742:	e012      	b.n	800376a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003744:	68ba      	ldr	r2, [r7, #8]
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	4413      	add	r3, r2
 800374a:	7819      	ldrb	r1, [r3, #0]
 800374c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	4413      	add	r3, r2
 8003752:	3334      	adds	r3, #52	; 0x34
 8003754:	460a      	mov	r2, r1
 8003756:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003758:	68ba      	ldr	r2, [r7, #8]
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	4413      	add	r3, r2
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d006      	beq.n	8003772 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	3301      	adds	r3, #1
 8003768:	61fb      	str	r3, [r7, #28]
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	2b0f      	cmp	r3, #15
 800376e:	d9e9      	bls.n	8003744 <prvInitialiseNewTask+0x64>
 8003770:	e000      	b.n	8003774 <prvInitialiseNewTask+0x94>
			{
				break;
 8003772:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003776:	2200      	movs	r2, #0
 8003778:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800377c:	e003      	b.n	8003786 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800377e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003780:	2200      	movs	r2, #0
 8003782:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003788:	2b37      	cmp	r3, #55	; 0x37
 800378a:	d901      	bls.n	8003790 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800378c:	2337      	movs	r3, #55	; 0x37
 800378e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003792:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003794:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003798:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800379a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800379c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800379e:	2200      	movs	r2, #0
 80037a0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80037a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a4:	3304      	adds	r3, #4
 80037a6:	4618      	mov	r0, r3
 80037a8:	f7ff f978 	bl	8002a9c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80037ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ae:	3318      	adds	r3, #24
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7ff f973 	bl	8002a9c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80037b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037ba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037be:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80037c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80037c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037ca:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80037cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ce:	2200      	movs	r2, #0
 80037d0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80037d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80037da:	683a      	ldr	r2, [r7, #0]
 80037dc:	68f9      	ldr	r1, [r7, #12]
 80037de:	69b8      	ldr	r0, [r7, #24]
 80037e0:	f001 fa70 	bl	8004cc4 <pxPortInitialiseStack>
 80037e4:	4602      	mov	r2, r0
 80037e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80037ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d002      	beq.n	80037f6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80037f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80037f6:	bf00      	nop
 80037f8:	3720      	adds	r7, #32
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
	...

08003800 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003808:	f001 fb8c 	bl	8004f24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800380c:	4b2d      	ldr	r3, [pc, #180]	; (80038c4 <prvAddNewTaskToReadyList+0xc4>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	3301      	adds	r3, #1
 8003812:	4a2c      	ldr	r2, [pc, #176]	; (80038c4 <prvAddNewTaskToReadyList+0xc4>)
 8003814:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003816:	4b2c      	ldr	r3, [pc, #176]	; (80038c8 <prvAddNewTaskToReadyList+0xc8>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d109      	bne.n	8003832 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800381e:	4a2a      	ldr	r2, [pc, #168]	; (80038c8 <prvAddNewTaskToReadyList+0xc8>)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003824:	4b27      	ldr	r3, [pc, #156]	; (80038c4 <prvAddNewTaskToReadyList+0xc4>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2b01      	cmp	r3, #1
 800382a:	d110      	bne.n	800384e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800382c:	f000 fc28 	bl	8004080 <prvInitialiseTaskLists>
 8003830:	e00d      	b.n	800384e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003832:	4b26      	ldr	r3, [pc, #152]	; (80038cc <prvAddNewTaskToReadyList+0xcc>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d109      	bne.n	800384e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800383a:	4b23      	ldr	r3, [pc, #140]	; (80038c8 <prvAddNewTaskToReadyList+0xc8>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003844:	429a      	cmp	r2, r3
 8003846:	d802      	bhi.n	800384e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003848:	4a1f      	ldr	r2, [pc, #124]	; (80038c8 <prvAddNewTaskToReadyList+0xc8>)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800384e:	4b20      	ldr	r3, [pc, #128]	; (80038d0 <prvAddNewTaskToReadyList+0xd0>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	3301      	adds	r3, #1
 8003854:	4a1e      	ldr	r2, [pc, #120]	; (80038d0 <prvAddNewTaskToReadyList+0xd0>)
 8003856:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003858:	4b1d      	ldr	r3, [pc, #116]	; (80038d0 <prvAddNewTaskToReadyList+0xd0>)
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003864:	4b1b      	ldr	r3, [pc, #108]	; (80038d4 <prvAddNewTaskToReadyList+0xd4>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	429a      	cmp	r2, r3
 800386a:	d903      	bls.n	8003874 <prvAddNewTaskToReadyList+0x74>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003870:	4a18      	ldr	r2, [pc, #96]	; (80038d4 <prvAddNewTaskToReadyList+0xd4>)
 8003872:	6013      	str	r3, [r2, #0]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003878:	4613      	mov	r3, r2
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	4413      	add	r3, r2
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	4a15      	ldr	r2, [pc, #84]	; (80038d8 <prvAddNewTaskToReadyList+0xd8>)
 8003882:	441a      	add	r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	3304      	adds	r3, #4
 8003888:	4619      	mov	r1, r3
 800388a:	4610      	mov	r0, r2
 800388c:	f7ff f913 	bl	8002ab6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003890:	f001 fb78 	bl	8004f84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003894:	4b0d      	ldr	r3, [pc, #52]	; (80038cc <prvAddNewTaskToReadyList+0xcc>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d00e      	beq.n	80038ba <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800389c:	4b0a      	ldr	r3, [pc, #40]	; (80038c8 <prvAddNewTaskToReadyList+0xc8>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d207      	bcs.n	80038ba <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80038aa:	4b0c      	ldr	r3, [pc, #48]	; (80038dc <prvAddNewTaskToReadyList+0xdc>)
 80038ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038b0:	601a      	str	r2, [r3, #0]
 80038b2:	f3bf 8f4f 	dsb	sy
 80038b6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80038ba:	bf00      	nop
 80038bc:	3708      	adds	r7, #8
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	20000f54 	.word	0x20000f54
 80038c8:	20000a80 	.word	0x20000a80
 80038cc:	20000f60 	.word	0x20000f60
 80038d0:	20000f70 	.word	0x20000f70
 80038d4:	20000f5c 	.word	0x20000f5c
 80038d8:	20000a84 	.word	0x20000a84
 80038dc:	e000ed04 	.word	0xe000ed04

080038e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80038e8:	2300      	movs	r3, #0
 80038ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d017      	beq.n	8003922 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80038f2:	4b13      	ldr	r3, [pc, #76]	; (8003940 <vTaskDelay+0x60>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d00a      	beq.n	8003910 <vTaskDelay+0x30>
	__asm volatile
 80038fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038fe:	f383 8811 	msr	BASEPRI, r3
 8003902:	f3bf 8f6f 	isb	sy
 8003906:	f3bf 8f4f 	dsb	sy
 800390a:	60bb      	str	r3, [r7, #8]
}
 800390c:	bf00      	nop
 800390e:	e7fe      	b.n	800390e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003910:	f000 f880 	bl	8003a14 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003914:	2100      	movs	r1, #0
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 fe32 	bl	8004580 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800391c:	f000 f888 	bl	8003a30 <xTaskResumeAll>
 8003920:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d107      	bne.n	8003938 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003928:	4b06      	ldr	r3, [pc, #24]	; (8003944 <vTaskDelay+0x64>)
 800392a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800392e:	601a      	str	r2, [r3, #0]
 8003930:	f3bf 8f4f 	dsb	sy
 8003934:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003938:	bf00      	nop
 800393a:	3710      	adds	r7, #16
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	20000f7c 	.word	0x20000f7c
 8003944:	e000ed04 	.word	0xe000ed04

08003948 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b08a      	sub	sp, #40	; 0x28
 800394c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800394e:	2300      	movs	r3, #0
 8003950:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003952:	2300      	movs	r3, #0
 8003954:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003956:	463a      	mov	r2, r7
 8003958:	1d39      	adds	r1, r7, #4
 800395a:	f107 0308 	add.w	r3, r7, #8
 800395e:	4618      	mov	r0, r3
 8003960:	f7ff f848 	bl	80029f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003964:	6839      	ldr	r1, [r7, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	68ba      	ldr	r2, [r7, #8]
 800396a:	9202      	str	r2, [sp, #8]
 800396c:	9301      	str	r3, [sp, #4]
 800396e:	2300      	movs	r3, #0
 8003970:	9300      	str	r3, [sp, #0]
 8003972:	2300      	movs	r3, #0
 8003974:	460a      	mov	r2, r1
 8003976:	4921      	ldr	r1, [pc, #132]	; (80039fc <vTaskStartScheduler+0xb4>)
 8003978:	4821      	ldr	r0, [pc, #132]	; (8003a00 <vTaskStartScheduler+0xb8>)
 800397a:	f7ff fe0f 	bl	800359c <xTaskCreateStatic>
 800397e:	4603      	mov	r3, r0
 8003980:	4a20      	ldr	r2, [pc, #128]	; (8003a04 <vTaskStartScheduler+0xbc>)
 8003982:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003984:	4b1f      	ldr	r3, [pc, #124]	; (8003a04 <vTaskStartScheduler+0xbc>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d002      	beq.n	8003992 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800398c:	2301      	movs	r3, #1
 800398e:	617b      	str	r3, [r7, #20]
 8003990:	e001      	b.n	8003996 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003992:	2300      	movs	r3, #0
 8003994:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	2b01      	cmp	r3, #1
 800399a:	d102      	bne.n	80039a2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800399c:	f000 fe44 	bl	8004628 <xTimerCreateTimerTask>
 80039a0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d116      	bne.n	80039d6 <vTaskStartScheduler+0x8e>
	__asm volatile
 80039a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ac:	f383 8811 	msr	BASEPRI, r3
 80039b0:	f3bf 8f6f 	isb	sy
 80039b4:	f3bf 8f4f 	dsb	sy
 80039b8:	613b      	str	r3, [r7, #16]
}
 80039ba:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80039bc:	4b12      	ldr	r3, [pc, #72]	; (8003a08 <vTaskStartScheduler+0xc0>)
 80039be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80039c2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80039c4:	4b11      	ldr	r3, [pc, #68]	; (8003a0c <vTaskStartScheduler+0xc4>)
 80039c6:	2201      	movs	r2, #1
 80039c8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80039ca:	4b11      	ldr	r3, [pc, #68]	; (8003a10 <vTaskStartScheduler+0xc8>)
 80039cc:	2200      	movs	r2, #0
 80039ce:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80039d0:	f001 fa06 	bl	8004de0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80039d4:	e00e      	b.n	80039f4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039dc:	d10a      	bne.n	80039f4 <vTaskStartScheduler+0xac>
	__asm volatile
 80039de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e2:	f383 8811 	msr	BASEPRI, r3
 80039e6:	f3bf 8f6f 	isb	sy
 80039ea:	f3bf 8f4f 	dsb	sy
 80039ee:	60fb      	str	r3, [r7, #12]
}
 80039f0:	bf00      	nop
 80039f2:	e7fe      	b.n	80039f2 <vTaskStartScheduler+0xaa>
}
 80039f4:	bf00      	nop
 80039f6:	3718      	adds	r7, #24
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	0800ad84 	.word	0x0800ad84
 8003a00:	08004051 	.word	0x08004051
 8003a04:	20000f78 	.word	0x20000f78
 8003a08:	20000f74 	.word	0x20000f74
 8003a0c:	20000f60 	.word	0x20000f60
 8003a10:	20000f58 	.word	0x20000f58

08003a14 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003a14:	b480      	push	{r7}
 8003a16:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003a18:	4b04      	ldr	r3, [pc, #16]	; (8003a2c <vTaskSuspendAll+0x18>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	4a03      	ldr	r2, [pc, #12]	; (8003a2c <vTaskSuspendAll+0x18>)
 8003a20:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003a22:	bf00      	nop
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr
 8003a2c:	20000f7c 	.word	0x20000f7c

08003a30 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003a36:	2300      	movs	r3, #0
 8003a38:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003a3e:	4b42      	ldr	r3, [pc, #264]	; (8003b48 <xTaskResumeAll+0x118>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d10a      	bne.n	8003a5c <xTaskResumeAll+0x2c>
	__asm volatile
 8003a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a4a:	f383 8811 	msr	BASEPRI, r3
 8003a4e:	f3bf 8f6f 	isb	sy
 8003a52:	f3bf 8f4f 	dsb	sy
 8003a56:	603b      	str	r3, [r7, #0]
}
 8003a58:	bf00      	nop
 8003a5a:	e7fe      	b.n	8003a5a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003a5c:	f001 fa62 	bl	8004f24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003a60:	4b39      	ldr	r3, [pc, #228]	; (8003b48 <xTaskResumeAll+0x118>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	3b01      	subs	r3, #1
 8003a66:	4a38      	ldr	r2, [pc, #224]	; (8003b48 <xTaskResumeAll+0x118>)
 8003a68:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a6a:	4b37      	ldr	r3, [pc, #220]	; (8003b48 <xTaskResumeAll+0x118>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d162      	bne.n	8003b38 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003a72:	4b36      	ldr	r3, [pc, #216]	; (8003b4c <xTaskResumeAll+0x11c>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d05e      	beq.n	8003b38 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a7a:	e02f      	b.n	8003adc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a7c:	4b34      	ldr	r3, [pc, #208]	; (8003b50 <xTaskResumeAll+0x120>)
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	3318      	adds	r3, #24
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f7ff f871 	bl	8002b70 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	3304      	adds	r3, #4
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7ff f86c 	bl	8002b70 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a9c:	4b2d      	ldr	r3, [pc, #180]	; (8003b54 <xTaskResumeAll+0x124>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d903      	bls.n	8003aac <xTaskResumeAll+0x7c>
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa8:	4a2a      	ldr	r2, [pc, #168]	; (8003b54 <xTaskResumeAll+0x124>)
 8003aaa:	6013      	str	r3, [r2, #0]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	4413      	add	r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	4a27      	ldr	r2, [pc, #156]	; (8003b58 <xTaskResumeAll+0x128>)
 8003aba:	441a      	add	r2, r3
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	3304      	adds	r3, #4
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	4610      	mov	r0, r2
 8003ac4:	f7fe fff7 	bl	8002ab6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003acc:	4b23      	ldr	r3, [pc, #140]	; (8003b5c <xTaskResumeAll+0x12c>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d302      	bcc.n	8003adc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003ad6:	4b22      	ldr	r3, [pc, #136]	; (8003b60 <xTaskResumeAll+0x130>)
 8003ad8:	2201      	movs	r2, #1
 8003ada:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003adc:	4b1c      	ldr	r3, [pc, #112]	; (8003b50 <xTaskResumeAll+0x120>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d1cb      	bne.n	8003a7c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d001      	beq.n	8003aee <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003aea:	f000 fb67 	bl	80041bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003aee:	4b1d      	ldr	r3, [pc, #116]	; (8003b64 <xTaskResumeAll+0x134>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d010      	beq.n	8003b1c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003afa:	f000 f859 	bl	8003bb0 <xTaskIncrementTick>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d002      	beq.n	8003b0a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003b04:	4b16      	ldr	r3, [pc, #88]	; (8003b60 <xTaskResumeAll+0x130>)
 8003b06:	2201      	movs	r2, #1
 8003b08:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d1f1      	bne.n	8003afa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003b16:	4b13      	ldr	r3, [pc, #76]	; (8003b64 <xTaskResumeAll+0x134>)
 8003b18:	2200      	movs	r2, #0
 8003b1a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003b1c:	4b10      	ldr	r3, [pc, #64]	; (8003b60 <xTaskResumeAll+0x130>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d009      	beq.n	8003b38 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003b24:	2301      	movs	r3, #1
 8003b26:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003b28:	4b0f      	ldr	r3, [pc, #60]	; (8003b68 <xTaskResumeAll+0x138>)
 8003b2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b2e:	601a      	str	r2, [r3, #0]
 8003b30:	f3bf 8f4f 	dsb	sy
 8003b34:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003b38:	f001 fa24 	bl	8004f84 <vPortExitCritical>

	return xAlreadyYielded;
 8003b3c:	68bb      	ldr	r3, [r7, #8]
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3710      	adds	r7, #16
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	20000f7c 	.word	0x20000f7c
 8003b4c:	20000f54 	.word	0x20000f54
 8003b50:	20000f14 	.word	0x20000f14
 8003b54:	20000f5c 	.word	0x20000f5c
 8003b58:	20000a84 	.word	0x20000a84
 8003b5c:	20000a80 	.word	0x20000a80
 8003b60:	20000f68 	.word	0x20000f68
 8003b64:	20000f64 	.word	0x20000f64
 8003b68:	e000ed04 	.word	0xe000ed04

08003b6c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003b72:	4b05      	ldr	r3, [pc, #20]	; (8003b88 <xTaskGetTickCount+0x1c>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003b78:	687b      	ldr	r3, [r7, #4]
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	370c      	adds	r7, #12
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop
 8003b88:	20000f58 	.word	0x20000f58

08003b8c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003b92:	f001 faa9 	bl	80050e8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003b96:	2300      	movs	r3, #0
 8003b98:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8003b9a:	4b04      	ldr	r3, [pc, #16]	; (8003bac <xTaskGetTickCountFromISR+0x20>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003ba0:	683b      	ldr	r3, [r7, #0]
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3708      	adds	r7, #8
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	20000f58 	.word	0x20000f58

08003bb0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b086      	sub	sp, #24
 8003bb4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bba:	4b4f      	ldr	r3, [pc, #316]	; (8003cf8 <xTaskIncrementTick+0x148>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	f040 808f 	bne.w	8003ce2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003bc4:	4b4d      	ldr	r3, [pc, #308]	; (8003cfc <xTaskIncrementTick+0x14c>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	3301      	adds	r3, #1
 8003bca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003bcc:	4a4b      	ldr	r2, [pc, #300]	; (8003cfc <xTaskIncrementTick+0x14c>)
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d120      	bne.n	8003c1a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003bd8:	4b49      	ldr	r3, [pc, #292]	; (8003d00 <xTaskIncrementTick+0x150>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d00a      	beq.n	8003bf8 <xTaskIncrementTick+0x48>
	__asm volatile
 8003be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be6:	f383 8811 	msr	BASEPRI, r3
 8003bea:	f3bf 8f6f 	isb	sy
 8003bee:	f3bf 8f4f 	dsb	sy
 8003bf2:	603b      	str	r3, [r7, #0]
}
 8003bf4:	bf00      	nop
 8003bf6:	e7fe      	b.n	8003bf6 <xTaskIncrementTick+0x46>
 8003bf8:	4b41      	ldr	r3, [pc, #260]	; (8003d00 <xTaskIncrementTick+0x150>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	60fb      	str	r3, [r7, #12]
 8003bfe:	4b41      	ldr	r3, [pc, #260]	; (8003d04 <xTaskIncrementTick+0x154>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a3f      	ldr	r2, [pc, #252]	; (8003d00 <xTaskIncrementTick+0x150>)
 8003c04:	6013      	str	r3, [r2, #0]
 8003c06:	4a3f      	ldr	r2, [pc, #252]	; (8003d04 <xTaskIncrementTick+0x154>)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6013      	str	r3, [r2, #0]
 8003c0c:	4b3e      	ldr	r3, [pc, #248]	; (8003d08 <xTaskIncrementTick+0x158>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	3301      	adds	r3, #1
 8003c12:	4a3d      	ldr	r2, [pc, #244]	; (8003d08 <xTaskIncrementTick+0x158>)
 8003c14:	6013      	str	r3, [r2, #0]
 8003c16:	f000 fad1 	bl	80041bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003c1a:	4b3c      	ldr	r3, [pc, #240]	; (8003d0c <xTaskIncrementTick+0x15c>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	693a      	ldr	r2, [r7, #16]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d349      	bcc.n	8003cb8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c24:	4b36      	ldr	r3, [pc, #216]	; (8003d00 <xTaskIncrementTick+0x150>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d104      	bne.n	8003c38 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c2e:	4b37      	ldr	r3, [pc, #220]	; (8003d0c <xTaskIncrementTick+0x15c>)
 8003c30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c34:	601a      	str	r2, [r3, #0]
					break;
 8003c36:	e03f      	b.n	8003cb8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c38:	4b31      	ldr	r3, [pc, #196]	; (8003d00 <xTaskIncrementTick+0x150>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003c48:	693a      	ldr	r2, [r7, #16]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d203      	bcs.n	8003c58 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003c50:	4a2e      	ldr	r2, [pc, #184]	; (8003d0c <xTaskIncrementTick+0x15c>)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003c56:	e02f      	b.n	8003cb8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	3304      	adds	r3, #4
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f7fe ff87 	bl	8002b70 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d004      	beq.n	8003c74 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	3318      	adds	r3, #24
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7fe ff7e 	bl	8002b70 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c78:	4b25      	ldr	r3, [pc, #148]	; (8003d10 <xTaskIncrementTick+0x160>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d903      	bls.n	8003c88 <xTaskIncrementTick+0xd8>
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c84:	4a22      	ldr	r2, [pc, #136]	; (8003d10 <xTaskIncrementTick+0x160>)
 8003c86:	6013      	str	r3, [r2, #0]
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	4413      	add	r3, r2
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	4a1f      	ldr	r2, [pc, #124]	; (8003d14 <xTaskIncrementTick+0x164>)
 8003c96:	441a      	add	r2, r3
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	3304      	adds	r3, #4
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	4610      	mov	r0, r2
 8003ca0:	f7fe ff09 	bl	8002ab6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ca8:	4b1b      	ldr	r3, [pc, #108]	; (8003d18 <xTaskIncrementTick+0x168>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d3b8      	bcc.n	8003c24 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cb6:	e7b5      	b.n	8003c24 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003cb8:	4b17      	ldr	r3, [pc, #92]	; (8003d18 <xTaskIncrementTick+0x168>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cbe:	4915      	ldr	r1, [pc, #84]	; (8003d14 <xTaskIncrementTick+0x164>)
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	4413      	add	r3, r2
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	440b      	add	r3, r1
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d901      	bls.n	8003cd4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003cd4:	4b11      	ldr	r3, [pc, #68]	; (8003d1c <xTaskIncrementTick+0x16c>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d007      	beq.n	8003cec <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	617b      	str	r3, [r7, #20]
 8003ce0:	e004      	b.n	8003cec <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003ce2:	4b0f      	ldr	r3, [pc, #60]	; (8003d20 <xTaskIncrementTick+0x170>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	4a0d      	ldr	r2, [pc, #52]	; (8003d20 <xTaskIncrementTick+0x170>)
 8003cea:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003cec:	697b      	ldr	r3, [r7, #20]
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3718      	adds	r7, #24
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	20000f7c 	.word	0x20000f7c
 8003cfc:	20000f58 	.word	0x20000f58
 8003d00:	20000f0c 	.word	0x20000f0c
 8003d04:	20000f10 	.word	0x20000f10
 8003d08:	20000f6c 	.word	0x20000f6c
 8003d0c:	20000f74 	.word	0x20000f74
 8003d10:	20000f5c 	.word	0x20000f5c
 8003d14:	20000a84 	.word	0x20000a84
 8003d18:	20000a80 	.word	0x20000a80
 8003d1c:	20000f68 	.word	0x20000f68
 8003d20:	20000f64 	.word	0x20000f64

08003d24 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003d24:	b480      	push	{r7}
 8003d26:	b085      	sub	sp, #20
 8003d28:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003d2a:	4b28      	ldr	r3, [pc, #160]	; (8003dcc <vTaskSwitchContext+0xa8>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d003      	beq.n	8003d3a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003d32:	4b27      	ldr	r3, [pc, #156]	; (8003dd0 <vTaskSwitchContext+0xac>)
 8003d34:	2201      	movs	r2, #1
 8003d36:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003d38:	e041      	b.n	8003dbe <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003d3a:	4b25      	ldr	r3, [pc, #148]	; (8003dd0 <vTaskSwitchContext+0xac>)
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d40:	4b24      	ldr	r3, [pc, #144]	; (8003dd4 <vTaskSwitchContext+0xb0>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	60fb      	str	r3, [r7, #12]
 8003d46:	e010      	b.n	8003d6a <vTaskSwitchContext+0x46>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d10a      	bne.n	8003d64 <vTaskSwitchContext+0x40>
	__asm volatile
 8003d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d52:	f383 8811 	msr	BASEPRI, r3
 8003d56:	f3bf 8f6f 	isb	sy
 8003d5a:	f3bf 8f4f 	dsb	sy
 8003d5e:	607b      	str	r3, [r7, #4]
}
 8003d60:	bf00      	nop
 8003d62:	e7fe      	b.n	8003d62 <vTaskSwitchContext+0x3e>
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	3b01      	subs	r3, #1
 8003d68:	60fb      	str	r3, [r7, #12]
 8003d6a:	491b      	ldr	r1, [pc, #108]	; (8003dd8 <vTaskSwitchContext+0xb4>)
 8003d6c:	68fa      	ldr	r2, [r7, #12]
 8003d6e:	4613      	mov	r3, r2
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	4413      	add	r3, r2
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	440b      	add	r3, r1
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d0e4      	beq.n	8003d48 <vTaskSwitchContext+0x24>
 8003d7e:	68fa      	ldr	r2, [r7, #12]
 8003d80:	4613      	mov	r3, r2
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	4413      	add	r3, r2
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	4a13      	ldr	r2, [pc, #76]	; (8003dd8 <vTaskSwitchContext+0xb4>)
 8003d8a:	4413      	add	r3, r2
 8003d8c:	60bb      	str	r3, [r7, #8]
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	685a      	ldr	r2, [r3, #4]
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	605a      	str	r2, [r3, #4]
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	685a      	ldr	r2, [r3, #4]
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	3308      	adds	r3, #8
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d104      	bne.n	8003dae <vTaskSwitchContext+0x8a>
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	685a      	ldr	r2, [r3, #4]
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	605a      	str	r2, [r3, #4]
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	4a09      	ldr	r2, [pc, #36]	; (8003ddc <vTaskSwitchContext+0xb8>)
 8003db6:	6013      	str	r3, [r2, #0]
 8003db8:	4a06      	ldr	r2, [pc, #24]	; (8003dd4 <vTaskSwitchContext+0xb0>)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6013      	str	r3, [r2, #0]
}
 8003dbe:	bf00      	nop
 8003dc0:	3714      	adds	r7, #20
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	20000f7c 	.word	0x20000f7c
 8003dd0:	20000f68 	.word	0x20000f68
 8003dd4:	20000f5c 	.word	0x20000f5c
 8003dd8:	20000a84 	.word	0x20000a84
 8003ddc:	20000a80 	.word	0x20000a80

08003de0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d10a      	bne.n	8003e06 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df4:	f383 8811 	msr	BASEPRI, r3
 8003df8:	f3bf 8f6f 	isb	sy
 8003dfc:	f3bf 8f4f 	dsb	sy
 8003e00:	60fb      	str	r3, [r7, #12]
}
 8003e02:	bf00      	nop
 8003e04:	e7fe      	b.n	8003e04 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e06:	4b07      	ldr	r3, [pc, #28]	; (8003e24 <vTaskPlaceOnEventList+0x44>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	3318      	adds	r3, #24
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f7fe fe75 	bl	8002afe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003e14:	2101      	movs	r1, #1
 8003e16:	6838      	ldr	r0, [r7, #0]
 8003e18:	f000 fbb2 	bl	8004580 <prvAddCurrentTaskToDelayedList>
}
 8003e1c:	bf00      	nop
 8003e1e:	3710      	adds	r7, #16
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	20000a80 	.word	0x20000a80

08003e28 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b086      	sub	sp, #24
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d10a      	bne.n	8003e50 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e3e:	f383 8811 	msr	BASEPRI, r3
 8003e42:	f3bf 8f6f 	isb	sy
 8003e46:	f3bf 8f4f 	dsb	sy
 8003e4a:	617b      	str	r3, [r7, #20]
}
 8003e4c:	bf00      	nop
 8003e4e:	e7fe      	b.n	8003e4e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e50:	4b0a      	ldr	r3, [pc, #40]	; (8003e7c <vTaskPlaceOnEventListRestricted+0x54>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	3318      	adds	r3, #24
 8003e56:	4619      	mov	r1, r3
 8003e58:	68f8      	ldr	r0, [r7, #12]
 8003e5a:	f7fe fe2c 	bl	8002ab6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d002      	beq.n	8003e6a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003e64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e68:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003e6a:	6879      	ldr	r1, [r7, #4]
 8003e6c:	68b8      	ldr	r0, [r7, #8]
 8003e6e:	f000 fb87 	bl	8004580 <prvAddCurrentTaskToDelayedList>
	}
 8003e72:	bf00      	nop
 8003e74:	3718      	adds	r7, #24
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	20000a80 	.word	0x20000a80

08003e80 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b086      	sub	sp, #24
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d10a      	bne.n	8003eac <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e9a:	f383 8811 	msr	BASEPRI, r3
 8003e9e:	f3bf 8f6f 	isb	sy
 8003ea2:	f3bf 8f4f 	dsb	sy
 8003ea6:	60fb      	str	r3, [r7, #12]
}
 8003ea8:	bf00      	nop
 8003eaa:	e7fe      	b.n	8003eaa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	3318      	adds	r3, #24
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f7fe fe5d 	bl	8002b70 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003eb6:	4b1e      	ldr	r3, [pc, #120]	; (8003f30 <xTaskRemoveFromEventList+0xb0>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d11d      	bne.n	8003efa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	3304      	adds	r3, #4
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f7fe fe54 	bl	8002b70 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ecc:	4b19      	ldr	r3, [pc, #100]	; (8003f34 <xTaskRemoveFromEventList+0xb4>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d903      	bls.n	8003edc <xTaskRemoveFromEventList+0x5c>
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed8:	4a16      	ldr	r2, [pc, #88]	; (8003f34 <xTaskRemoveFromEventList+0xb4>)
 8003eda:	6013      	str	r3, [r2, #0]
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	4413      	add	r3, r2
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	4a13      	ldr	r2, [pc, #76]	; (8003f38 <xTaskRemoveFromEventList+0xb8>)
 8003eea:	441a      	add	r2, r3
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	3304      	adds	r3, #4
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	4610      	mov	r0, r2
 8003ef4:	f7fe fddf 	bl	8002ab6 <vListInsertEnd>
 8003ef8:	e005      	b.n	8003f06 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	3318      	adds	r3, #24
 8003efe:	4619      	mov	r1, r3
 8003f00:	480e      	ldr	r0, [pc, #56]	; (8003f3c <xTaskRemoveFromEventList+0xbc>)
 8003f02:	f7fe fdd8 	bl	8002ab6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f0a:	4b0d      	ldr	r3, [pc, #52]	; (8003f40 <xTaskRemoveFromEventList+0xc0>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d905      	bls.n	8003f20 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003f14:	2301      	movs	r3, #1
 8003f16:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003f18:	4b0a      	ldr	r3, [pc, #40]	; (8003f44 <xTaskRemoveFromEventList+0xc4>)
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	601a      	str	r2, [r3, #0]
 8003f1e:	e001      	b.n	8003f24 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003f20:	2300      	movs	r3, #0
 8003f22:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003f24:	697b      	ldr	r3, [r7, #20]
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3718      	adds	r7, #24
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	20000f7c 	.word	0x20000f7c
 8003f34:	20000f5c 	.word	0x20000f5c
 8003f38:	20000a84 	.word	0x20000a84
 8003f3c:	20000f14 	.word	0x20000f14
 8003f40:	20000a80 	.word	0x20000a80
 8003f44:	20000f68 	.word	0x20000f68

08003f48 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003f50:	4b06      	ldr	r3, [pc, #24]	; (8003f6c <vTaskInternalSetTimeOutState+0x24>)
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003f58:	4b05      	ldr	r3, [pc, #20]	; (8003f70 <vTaskInternalSetTimeOutState+0x28>)
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	605a      	str	r2, [r3, #4]
}
 8003f60:	bf00      	nop
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr
 8003f6c:	20000f6c 	.word	0x20000f6c
 8003f70:	20000f58 	.word	0x20000f58

08003f74 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b088      	sub	sp, #32
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d10a      	bne.n	8003f9a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f88:	f383 8811 	msr	BASEPRI, r3
 8003f8c:	f3bf 8f6f 	isb	sy
 8003f90:	f3bf 8f4f 	dsb	sy
 8003f94:	613b      	str	r3, [r7, #16]
}
 8003f96:	bf00      	nop
 8003f98:	e7fe      	b.n	8003f98 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d10a      	bne.n	8003fb6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa4:	f383 8811 	msr	BASEPRI, r3
 8003fa8:	f3bf 8f6f 	isb	sy
 8003fac:	f3bf 8f4f 	dsb	sy
 8003fb0:	60fb      	str	r3, [r7, #12]
}
 8003fb2:	bf00      	nop
 8003fb4:	e7fe      	b.n	8003fb4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003fb6:	f000 ffb5 	bl	8004f24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003fba:	4b1d      	ldr	r3, [pc, #116]	; (8004030 <xTaskCheckForTimeOut+0xbc>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	69ba      	ldr	r2, [r7, #24]
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fd2:	d102      	bne.n	8003fda <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	61fb      	str	r3, [r7, #28]
 8003fd8:	e023      	b.n	8004022 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	4b15      	ldr	r3, [pc, #84]	; (8004034 <xTaskCheckForTimeOut+0xc0>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d007      	beq.n	8003ff6 <xTaskCheckForTimeOut+0x82>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	69ba      	ldr	r2, [r7, #24]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d302      	bcc.n	8003ff6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	61fb      	str	r3, [r7, #28]
 8003ff4:	e015      	b.n	8004022 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	697a      	ldr	r2, [r7, #20]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d20b      	bcs.n	8004018 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	1ad2      	subs	r2, r2, r3
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f7ff ff9b 	bl	8003f48 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004012:	2300      	movs	r3, #0
 8004014:	61fb      	str	r3, [r7, #28]
 8004016:	e004      	b.n	8004022 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	2200      	movs	r2, #0
 800401c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800401e:	2301      	movs	r3, #1
 8004020:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004022:	f000 ffaf 	bl	8004f84 <vPortExitCritical>

	return xReturn;
 8004026:	69fb      	ldr	r3, [r7, #28]
}
 8004028:	4618      	mov	r0, r3
 800402a:	3720      	adds	r7, #32
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}
 8004030:	20000f58 	.word	0x20000f58
 8004034:	20000f6c 	.word	0x20000f6c

08004038 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004038:	b480      	push	{r7}
 800403a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800403c:	4b03      	ldr	r3, [pc, #12]	; (800404c <vTaskMissedYield+0x14>)
 800403e:	2201      	movs	r2, #1
 8004040:	601a      	str	r2, [r3, #0]
}
 8004042:	bf00      	nop
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr
 800404c:	20000f68 	.word	0x20000f68

08004050 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b082      	sub	sp, #8
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004058:	f000 f852 	bl	8004100 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800405c:	4b06      	ldr	r3, [pc, #24]	; (8004078 <prvIdleTask+0x28>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2b01      	cmp	r3, #1
 8004062:	d9f9      	bls.n	8004058 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004064:	4b05      	ldr	r3, [pc, #20]	; (800407c <prvIdleTask+0x2c>)
 8004066:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800406a:	601a      	str	r2, [r3, #0]
 800406c:	f3bf 8f4f 	dsb	sy
 8004070:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004074:	e7f0      	b.n	8004058 <prvIdleTask+0x8>
 8004076:	bf00      	nop
 8004078:	20000a84 	.word	0x20000a84
 800407c:	e000ed04 	.word	0xe000ed04

08004080 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004086:	2300      	movs	r3, #0
 8004088:	607b      	str	r3, [r7, #4]
 800408a:	e00c      	b.n	80040a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	4613      	mov	r3, r2
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	4413      	add	r3, r2
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	4a12      	ldr	r2, [pc, #72]	; (80040e0 <prvInitialiseTaskLists+0x60>)
 8004098:	4413      	add	r3, r2
 800409a:	4618      	mov	r0, r3
 800409c:	f7fe fcde 	bl	8002a5c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	3301      	adds	r3, #1
 80040a4:	607b      	str	r3, [r7, #4]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2b37      	cmp	r3, #55	; 0x37
 80040aa:	d9ef      	bls.n	800408c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80040ac:	480d      	ldr	r0, [pc, #52]	; (80040e4 <prvInitialiseTaskLists+0x64>)
 80040ae:	f7fe fcd5 	bl	8002a5c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80040b2:	480d      	ldr	r0, [pc, #52]	; (80040e8 <prvInitialiseTaskLists+0x68>)
 80040b4:	f7fe fcd2 	bl	8002a5c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80040b8:	480c      	ldr	r0, [pc, #48]	; (80040ec <prvInitialiseTaskLists+0x6c>)
 80040ba:	f7fe fccf 	bl	8002a5c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80040be:	480c      	ldr	r0, [pc, #48]	; (80040f0 <prvInitialiseTaskLists+0x70>)
 80040c0:	f7fe fccc 	bl	8002a5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80040c4:	480b      	ldr	r0, [pc, #44]	; (80040f4 <prvInitialiseTaskLists+0x74>)
 80040c6:	f7fe fcc9 	bl	8002a5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80040ca:	4b0b      	ldr	r3, [pc, #44]	; (80040f8 <prvInitialiseTaskLists+0x78>)
 80040cc:	4a05      	ldr	r2, [pc, #20]	; (80040e4 <prvInitialiseTaskLists+0x64>)
 80040ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80040d0:	4b0a      	ldr	r3, [pc, #40]	; (80040fc <prvInitialiseTaskLists+0x7c>)
 80040d2:	4a05      	ldr	r2, [pc, #20]	; (80040e8 <prvInitialiseTaskLists+0x68>)
 80040d4:	601a      	str	r2, [r3, #0]
}
 80040d6:	bf00      	nop
 80040d8:	3708      	adds	r7, #8
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	20000a84 	.word	0x20000a84
 80040e4:	20000ee4 	.word	0x20000ee4
 80040e8:	20000ef8 	.word	0x20000ef8
 80040ec:	20000f14 	.word	0x20000f14
 80040f0:	20000f28 	.word	0x20000f28
 80040f4:	20000f40 	.word	0x20000f40
 80040f8:	20000f0c 	.word	0x20000f0c
 80040fc:	20000f10 	.word	0x20000f10

08004100 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b082      	sub	sp, #8
 8004104:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004106:	e019      	b.n	800413c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004108:	f000 ff0c 	bl	8004f24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800410c:	4b10      	ldr	r3, [pc, #64]	; (8004150 <prvCheckTasksWaitingTermination+0x50>)
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	3304      	adds	r3, #4
 8004118:	4618      	mov	r0, r3
 800411a:	f7fe fd29 	bl	8002b70 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800411e:	4b0d      	ldr	r3, [pc, #52]	; (8004154 <prvCheckTasksWaitingTermination+0x54>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	3b01      	subs	r3, #1
 8004124:	4a0b      	ldr	r2, [pc, #44]	; (8004154 <prvCheckTasksWaitingTermination+0x54>)
 8004126:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004128:	4b0b      	ldr	r3, [pc, #44]	; (8004158 <prvCheckTasksWaitingTermination+0x58>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	3b01      	subs	r3, #1
 800412e:	4a0a      	ldr	r2, [pc, #40]	; (8004158 <prvCheckTasksWaitingTermination+0x58>)
 8004130:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004132:	f000 ff27 	bl	8004f84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 f810 	bl	800415c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800413c:	4b06      	ldr	r3, [pc, #24]	; (8004158 <prvCheckTasksWaitingTermination+0x58>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d1e1      	bne.n	8004108 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004144:	bf00      	nop
 8004146:	bf00      	nop
 8004148:	3708      	adds	r7, #8
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	20000f28 	.word	0x20000f28
 8004154:	20000f54 	.word	0x20000f54
 8004158:	20000f3c 	.word	0x20000f3c

0800415c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800416a:	2b00      	cmp	r3, #0
 800416c:	d108      	bne.n	8004180 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004172:	4618      	mov	r0, r3
 8004174:	f001 f8c4 	bl	8005300 <vPortFree>
				vPortFree( pxTCB );
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f001 f8c1 	bl	8005300 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800417e:	e018      	b.n	80041b2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004186:	2b01      	cmp	r3, #1
 8004188:	d103      	bne.n	8004192 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f001 f8b8 	bl	8005300 <vPortFree>
	}
 8004190:	e00f      	b.n	80041b2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004198:	2b02      	cmp	r3, #2
 800419a:	d00a      	beq.n	80041b2 <prvDeleteTCB+0x56>
	__asm volatile
 800419c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a0:	f383 8811 	msr	BASEPRI, r3
 80041a4:	f3bf 8f6f 	isb	sy
 80041a8:	f3bf 8f4f 	dsb	sy
 80041ac:	60fb      	str	r3, [r7, #12]
}
 80041ae:	bf00      	nop
 80041b0:	e7fe      	b.n	80041b0 <prvDeleteTCB+0x54>
	}
 80041b2:	bf00      	nop
 80041b4:	3710      	adds	r7, #16
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
	...

080041bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80041c2:	4b0c      	ldr	r3, [pc, #48]	; (80041f4 <prvResetNextTaskUnblockTime+0x38>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d104      	bne.n	80041d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80041cc:	4b0a      	ldr	r3, [pc, #40]	; (80041f8 <prvResetNextTaskUnblockTime+0x3c>)
 80041ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80041d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80041d4:	e008      	b.n	80041e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041d6:	4b07      	ldr	r3, [pc, #28]	; (80041f4 <prvResetNextTaskUnblockTime+0x38>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	4a04      	ldr	r2, [pc, #16]	; (80041f8 <prvResetNextTaskUnblockTime+0x3c>)
 80041e6:	6013      	str	r3, [r2, #0]
}
 80041e8:	bf00      	nop
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr
 80041f4:	20000f0c 	.word	0x20000f0c
 80041f8:	20000f74 	.word	0x20000f74

080041fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004202:	4b0b      	ldr	r3, [pc, #44]	; (8004230 <xTaskGetSchedulerState+0x34>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d102      	bne.n	8004210 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800420a:	2301      	movs	r3, #1
 800420c:	607b      	str	r3, [r7, #4]
 800420e:	e008      	b.n	8004222 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004210:	4b08      	ldr	r3, [pc, #32]	; (8004234 <xTaskGetSchedulerState+0x38>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d102      	bne.n	800421e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004218:	2302      	movs	r3, #2
 800421a:	607b      	str	r3, [r7, #4]
 800421c:	e001      	b.n	8004222 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800421e:	2300      	movs	r3, #0
 8004220:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004222:	687b      	ldr	r3, [r7, #4]
	}
 8004224:	4618      	mov	r0, r3
 8004226:	370c      	adds	r7, #12
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr
 8004230:	20000f60 	.word	0x20000f60
 8004234:	20000f7c 	.word	0x20000f7c

08004238 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004238:	b580      	push	{r7, lr}
 800423a:	b086      	sub	sp, #24
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004244:	2300      	movs	r3, #0
 8004246:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d056      	beq.n	80042fc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800424e:	4b2e      	ldr	r3, [pc, #184]	; (8004308 <xTaskPriorityDisinherit+0xd0>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	693a      	ldr	r2, [r7, #16]
 8004254:	429a      	cmp	r2, r3
 8004256:	d00a      	beq.n	800426e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800425c:	f383 8811 	msr	BASEPRI, r3
 8004260:	f3bf 8f6f 	isb	sy
 8004264:	f3bf 8f4f 	dsb	sy
 8004268:	60fb      	str	r3, [r7, #12]
}
 800426a:	bf00      	nop
 800426c:	e7fe      	b.n	800426c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004272:	2b00      	cmp	r3, #0
 8004274:	d10a      	bne.n	800428c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800427a:	f383 8811 	msr	BASEPRI, r3
 800427e:	f3bf 8f6f 	isb	sy
 8004282:	f3bf 8f4f 	dsb	sy
 8004286:	60bb      	str	r3, [r7, #8]
}
 8004288:	bf00      	nop
 800428a:	e7fe      	b.n	800428a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004290:	1e5a      	subs	r2, r3, #1
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800429e:	429a      	cmp	r2, r3
 80042a0:	d02c      	beq.n	80042fc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d128      	bne.n	80042fc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	3304      	adds	r3, #4
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7fe fc5e 	bl	8002b70 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042cc:	4b0f      	ldr	r3, [pc, #60]	; (800430c <xTaskPriorityDisinherit+0xd4>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d903      	bls.n	80042dc <xTaskPriorityDisinherit+0xa4>
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d8:	4a0c      	ldr	r2, [pc, #48]	; (800430c <xTaskPriorityDisinherit+0xd4>)
 80042da:	6013      	str	r3, [r2, #0]
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042e0:	4613      	mov	r3, r2
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	4413      	add	r3, r2
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	4a09      	ldr	r2, [pc, #36]	; (8004310 <xTaskPriorityDisinherit+0xd8>)
 80042ea:	441a      	add	r2, r3
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	3304      	adds	r3, #4
 80042f0:	4619      	mov	r1, r3
 80042f2:	4610      	mov	r0, r2
 80042f4:	f7fe fbdf 	bl	8002ab6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80042f8:	2301      	movs	r3, #1
 80042fa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80042fc:	697b      	ldr	r3, [r7, #20]
	}
 80042fe:	4618      	mov	r0, r3
 8004300:	3718      	adds	r7, #24
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	20000a80 	.word	0x20000a80
 800430c:	20000f5c 	.word	0x20000f5c
 8004310:	20000a84 	.word	0x20000a84

08004314 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8004314:	b580      	push	{r7, lr}
 8004316:	b086      	sub	sp, #24
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	607a      	str	r2, [r7, #4]
 8004320:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8004322:	f000 fdff 	bl	8004f24 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8004326:	4b26      	ldr	r3, [pc, #152]	; (80043c0 <xTaskNotifyWait+0xac>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800432e:	b2db      	uxtb	r3, r3
 8004330:	2b02      	cmp	r3, #2
 8004332:	d01a      	beq.n	800436a <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8004334:	4b22      	ldr	r3, [pc, #136]	; (80043c0 <xTaskNotifyWait+0xac>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800433a:	68fa      	ldr	r2, [r7, #12]
 800433c:	43d2      	mvns	r2, r2
 800433e:	400a      	ands	r2, r1
 8004340:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8004342:	4b1f      	ldr	r3, [pc, #124]	; (80043c0 <xTaskNotifyWait+0xac>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d00b      	beq.n	800436a <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004352:	2101      	movs	r1, #1
 8004354:	6838      	ldr	r0, [r7, #0]
 8004356:	f000 f913 	bl	8004580 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800435a:	4b1a      	ldr	r3, [pc, #104]	; (80043c4 <xTaskNotifyWait+0xb0>)
 800435c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004360:	601a      	str	r2, [r3, #0]
 8004362:	f3bf 8f4f 	dsb	sy
 8004366:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800436a:	f000 fe0b 	bl	8004f84 <vPortExitCritical>

		taskENTER_CRITICAL();
 800436e:	f000 fdd9 	bl	8004f24 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d004      	beq.n	8004382 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8004378:	4b11      	ldr	r3, [pc, #68]	; (80043c0 <xTaskNotifyWait+0xac>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8004382:	4b0f      	ldr	r3, [pc, #60]	; (80043c0 <xTaskNotifyWait+0xac>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800438a:	b2db      	uxtb	r3, r3
 800438c:	2b02      	cmp	r3, #2
 800438e:	d002      	beq.n	8004396 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8004390:	2300      	movs	r3, #0
 8004392:	617b      	str	r3, [r7, #20]
 8004394:	e008      	b.n	80043a8 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8004396:	4b0a      	ldr	r3, [pc, #40]	; (80043c0 <xTaskNotifyWait+0xac>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800439c:	68ba      	ldr	r2, [r7, #8]
 800439e:	43d2      	mvns	r2, r2
 80043a0:	400a      	ands	r2, r1
 80043a2:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 80043a4:	2301      	movs	r3, #1
 80043a6:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80043a8:	4b05      	ldr	r3, [pc, #20]	; (80043c0 <xTaskNotifyWait+0xac>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 80043b2:	f000 fde7 	bl	8004f84 <vPortExitCritical>

		return xReturn;
 80043b6:	697b      	ldr	r3, [r7, #20]
	}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3718      	adds	r7, #24
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	20000a80 	.word	0x20000a80
 80043c4:	e000ed04 	.word	0xe000ed04

080043c8 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b08e      	sub	sp, #56	; 0x38
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	603b      	str	r3, [r7, #0]
 80043d4:	4613      	mov	r3, r2
 80043d6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80043d8:	2301      	movs	r3, #1
 80043da:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d10a      	bne.n	80043f8 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 80043e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e6:	f383 8811 	msr	BASEPRI, r3
 80043ea:	f3bf 8f6f 	isb	sy
 80043ee:	f3bf 8f4f 	dsb	sy
 80043f2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80043f4:	bf00      	nop
 80043f6:	e7fe      	b.n	80043f6 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80043f8:	f000 fe76 	bl	80050e8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8004400:	f3ef 8211 	mrs	r2, BASEPRI
 8004404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004408:	f383 8811 	msr	BASEPRI, r3
 800440c:	f3bf 8f6f 	isb	sy
 8004410:	f3bf 8f4f 	dsb	sy
 8004414:	623a      	str	r2, [r7, #32]
 8004416:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8004418:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800441a:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d003      	beq.n	800442a <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8004422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004424:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800442a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800442c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004430:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8004434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004436:	2202      	movs	r2, #2
 8004438:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800443c:	79fb      	ldrb	r3, [r7, #7]
 800443e:	2b04      	cmp	r3, #4
 8004440:	d828      	bhi.n	8004494 <xTaskGenericNotifyFromISR+0xcc>
 8004442:	a201      	add	r2, pc, #4	; (adr r2, 8004448 <xTaskGenericNotifyFromISR+0x80>)
 8004444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004448:	080044b5 	.word	0x080044b5
 800444c:	0800445d 	.word	0x0800445d
 8004450:	0800446b 	.word	0x0800446b
 8004454:	08004477 	.word	0x08004477
 8004458:	0800447f 	.word	0x0800447f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800445c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800445e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	431a      	orrs	r2, r3
 8004464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004466:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8004468:	e027      	b.n	80044ba <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800446a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800446e:	1c5a      	adds	r2, r3, #1
 8004470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004472:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8004474:	e021      	b.n	80044ba <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8004476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004478:	68ba      	ldr	r2, [r7, #8]
 800447a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800447c:	e01d      	b.n	80044ba <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800447e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004482:	2b02      	cmp	r3, #2
 8004484:	d003      	beq.n	800448e <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8004486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004488:	68ba      	ldr	r2, [r7, #8]
 800448a:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800448c:	e015      	b.n	80044ba <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 800448e:	2300      	movs	r3, #0
 8004490:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8004492:	e012      	b.n	80044ba <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8004494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004498:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800449c:	d00c      	beq.n	80044b8 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 800449e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a2:	f383 8811 	msr	BASEPRI, r3
 80044a6:	f3bf 8f6f 	isb	sy
 80044aa:	f3bf 8f4f 	dsb	sy
 80044ae:	61bb      	str	r3, [r7, #24]
}
 80044b0:	bf00      	nop
 80044b2:	e7fe      	b.n	80044b2 <xTaskGenericNotifyFromISR+0xea>
					break;
 80044b4:	bf00      	nop
 80044b6:	e000      	b.n	80044ba <xTaskGenericNotifyFromISR+0xf2>
					break;
 80044b8:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80044ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d146      	bne.n	8004550 <xTaskGenericNotifyFromISR+0x188>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80044c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00a      	beq.n	80044e0 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 80044ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ce:	f383 8811 	msr	BASEPRI, r3
 80044d2:	f3bf 8f6f 	isb	sy
 80044d6:	f3bf 8f4f 	dsb	sy
 80044da:	617b      	str	r3, [r7, #20]
}
 80044dc:	bf00      	nop
 80044de:	e7fe      	b.n	80044de <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044e0:	4b21      	ldr	r3, [pc, #132]	; (8004568 <xTaskGenericNotifyFromISR+0x1a0>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d11d      	bne.n	8004524 <xTaskGenericNotifyFromISR+0x15c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ea:	3304      	adds	r3, #4
 80044ec:	4618      	mov	r0, r3
 80044ee:	f7fe fb3f 	bl	8002b70 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80044f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044f6:	4b1d      	ldr	r3, [pc, #116]	; (800456c <xTaskGenericNotifyFromISR+0x1a4>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d903      	bls.n	8004506 <xTaskGenericNotifyFromISR+0x13e>
 80044fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004502:	4a1a      	ldr	r2, [pc, #104]	; (800456c <xTaskGenericNotifyFromISR+0x1a4>)
 8004504:	6013      	str	r3, [r2, #0]
 8004506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800450a:	4613      	mov	r3, r2
 800450c:	009b      	lsls	r3, r3, #2
 800450e:	4413      	add	r3, r2
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	4a17      	ldr	r2, [pc, #92]	; (8004570 <xTaskGenericNotifyFromISR+0x1a8>)
 8004514:	441a      	add	r2, r3
 8004516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004518:	3304      	adds	r3, #4
 800451a:	4619      	mov	r1, r3
 800451c:	4610      	mov	r0, r2
 800451e:	f7fe faca 	bl	8002ab6 <vListInsertEnd>
 8004522:	e005      	b.n	8004530 <xTaskGenericNotifyFromISR+0x168>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8004524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004526:	3318      	adds	r3, #24
 8004528:	4619      	mov	r1, r3
 800452a:	4812      	ldr	r0, [pc, #72]	; (8004574 <xTaskGenericNotifyFromISR+0x1ac>)
 800452c:	f7fe fac3 	bl	8002ab6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004534:	4b10      	ldr	r3, [pc, #64]	; (8004578 <xTaskGenericNotifyFromISR+0x1b0>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800453a:	429a      	cmp	r2, r3
 800453c:	d908      	bls.n	8004550 <xTaskGenericNotifyFromISR+0x188>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800453e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004540:	2b00      	cmp	r3, #0
 8004542:	d002      	beq.n	800454a <xTaskGenericNotifyFromISR+0x182>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8004544:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004546:	2201      	movs	r2, #1
 8004548:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800454a:	4b0c      	ldr	r3, [pc, #48]	; (800457c <xTaskGenericNotifyFromISR+0x1b4>)
 800454c:	2201      	movs	r2, #1
 800454e:	601a      	str	r2, [r3, #0]
 8004550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004552:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	f383 8811 	msr	BASEPRI, r3
}
 800455a:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800455c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800455e:	4618      	mov	r0, r3
 8004560:	3738      	adds	r7, #56	; 0x38
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	20000f7c 	.word	0x20000f7c
 800456c:	20000f5c 	.word	0x20000f5c
 8004570:	20000a84 	.word	0x20000a84
 8004574:	20000f14 	.word	0x20000f14
 8004578:	20000a80 	.word	0x20000a80
 800457c:	20000f68 	.word	0x20000f68

08004580 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800458a:	4b21      	ldr	r3, [pc, #132]	; (8004610 <prvAddCurrentTaskToDelayedList+0x90>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004590:	4b20      	ldr	r3, [pc, #128]	; (8004614 <prvAddCurrentTaskToDelayedList+0x94>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	3304      	adds	r3, #4
 8004596:	4618      	mov	r0, r3
 8004598:	f7fe faea 	bl	8002b70 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045a2:	d10a      	bne.n	80045ba <prvAddCurrentTaskToDelayedList+0x3a>
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d007      	beq.n	80045ba <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045aa:	4b1a      	ldr	r3, [pc, #104]	; (8004614 <prvAddCurrentTaskToDelayedList+0x94>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	3304      	adds	r3, #4
 80045b0:	4619      	mov	r1, r3
 80045b2:	4819      	ldr	r0, [pc, #100]	; (8004618 <prvAddCurrentTaskToDelayedList+0x98>)
 80045b4:	f7fe fa7f 	bl	8002ab6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80045b8:	e026      	b.n	8004608 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80045ba:	68fa      	ldr	r2, [r7, #12]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4413      	add	r3, r2
 80045c0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80045c2:	4b14      	ldr	r3, [pc, #80]	; (8004614 <prvAddCurrentTaskToDelayedList+0x94>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	68ba      	ldr	r2, [r7, #8]
 80045c8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80045ca:	68ba      	ldr	r2, [r7, #8]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d209      	bcs.n	80045e6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045d2:	4b12      	ldr	r3, [pc, #72]	; (800461c <prvAddCurrentTaskToDelayedList+0x9c>)
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	4b0f      	ldr	r3, [pc, #60]	; (8004614 <prvAddCurrentTaskToDelayedList+0x94>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	3304      	adds	r3, #4
 80045dc:	4619      	mov	r1, r3
 80045de:	4610      	mov	r0, r2
 80045e0:	f7fe fa8d 	bl	8002afe <vListInsert>
}
 80045e4:	e010      	b.n	8004608 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045e6:	4b0e      	ldr	r3, [pc, #56]	; (8004620 <prvAddCurrentTaskToDelayedList+0xa0>)
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	4b0a      	ldr	r3, [pc, #40]	; (8004614 <prvAddCurrentTaskToDelayedList+0x94>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	3304      	adds	r3, #4
 80045f0:	4619      	mov	r1, r3
 80045f2:	4610      	mov	r0, r2
 80045f4:	f7fe fa83 	bl	8002afe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80045f8:	4b0a      	ldr	r3, [pc, #40]	; (8004624 <prvAddCurrentTaskToDelayedList+0xa4>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	68ba      	ldr	r2, [r7, #8]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d202      	bcs.n	8004608 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004602:	4a08      	ldr	r2, [pc, #32]	; (8004624 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	6013      	str	r3, [r2, #0]
}
 8004608:	bf00      	nop
 800460a:	3710      	adds	r7, #16
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}
 8004610:	20000f58 	.word	0x20000f58
 8004614:	20000a80 	.word	0x20000a80
 8004618:	20000f40 	.word	0x20000f40
 800461c:	20000f10 	.word	0x20000f10
 8004620:	20000f0c 	.word	0x20000f0c
 8004624:	20000f74 	.word	0x20000f74

08004628 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b08a      	sub	sp, #40	; 0x28
 800462c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800462e:	2300      	movs	r3, #0
 8004630:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004632:	f000 fb07 	bl	8004c44 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004636:	4b1c      	ldr	r3, [pc, #112]	; (80046a8 <xTimerCreateTimerTask+0x80>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d021      	beq.n	8004682 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800463e:	2300      	movs	r3, #0
 8004640:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004642:	2300      	movs	r3, #0
 8004644:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004646:	1d3a      	adds	r2, r7, #4
 8004648:	f107 0108 	add.w	r1, r7, #8
 800464c:	f107 030c 	add.w	r3, r7, #12
 8004650:	4618      	mov	r0, r3
 8004652:	f7fe f9e9 	bl	8002a28 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004656:	6879      	ldr	r1, [r7, #4]
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	68fa      	ldr	r2, [r7, #12]
 800465c:	9202      	str	r2, [sp, #8]
 800465e:	9301      	str	r3, [sp, #4]
 8004660:	2302      	movs	r3, #2
 8004662:	9300      	str	r3, [sp, #0]
 8004664:	2300      	movs	r3, #0
 8004666:	460a      	mov	r2, r1
 8004668:	4910      	ldr	r1, [pc, #64]	; (80046ac <xTimerCreateTimerTask+0x84>)
 800466a:	4811      	ldr	r0, [pc, #68]	; (80046b0 <xTimerCreateTimerTask+0x88>)
 800466c:	f7fe ff96 	bl	800359c <xTaskCreateStatic>
 8004670:	4603      	mov	r3, r0
 8004672:	4a10      	ldr	r2, [pc, #64]	; (80046b4 <xTimerCreateTimerTask+0x8c>)
 8004674:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004676:	4b0f      	ldr	r3, [pc, #60]	; (80046b4 <xTimerCreateTimerTask+0x8c>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d001      	beq.n	8004682 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800467e:	2301      	movs	r3, #1
 8004680:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d10a      	bne.n	800469e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800468c:	f383 8811 	msr	BASEPRI, r3
 8004690:	f3bf 8f6f 	isb	sy
 8004694:	f3bf 8f4f 	dsb	sy
 8004698:	613b      	str	r3, [r7, #16]
}
 800469a:	bf00      	nop
 800469c:	e7fe      	b.n	800469c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800469e:	697b      	ldr	r3, [r7, #20]
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3718      	adds	r7, #24
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	20000fb0 	.word	0x20000fb0
 80046ac:	0800ad8c 	.word	0x0800ad8c
 80046b0:	080047ed 	.word	0x080047ed
 80046b4:	20000fb4 	.word	0x20000fb4

080046b8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b08a      	sub	sp, #40	; 0x28
 80046bc:	af00      	add	r7, sp, #0
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	607a      	str	r2, [r7, #4]
 80046c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80046c6:	2300      	movs	r3, #0
 80046c8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d10a      	bne.n	80046e6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80046d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d4:	f383 8811 	msr	BASEPRI, r3
 80046d8:	f3bf 8f6f 	isb	sy
 80046dc:	f3bf 8f4f 	dsb	sy
 80046e0:	623b      	str	r3, [r7, #32]
}
 80046e2:	bf00      	nop
 80046e4:	e7fe      	b.n	80046e4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80046e6:	4b1a      	ldr	r3, [pc, #104]	; (8004750 <xTimerGenericCommand+0x98>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d02a      	beq.n	8004744 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	2b05      	cmp	r3, #5
 80046fe:	dc18      	bgt.n	8004732 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004700:	f7ff fd7c 	bl	80041fc <xTaskGetSchedulerState>
 8004704:	4603      	mov	r3, r0
 8004706:	2b02      	cmp	r3, #2
 8004708:	d109      	bne.n	800471e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800470a:	4b11      	ldr	r3, [pc, #68]	; (8004750 <xTimerGenericCommand+0x98>)
 800470c:	6818      	ldr	r0, [r3, #0]
 800470e:	f107 0110 	add.w	r1, r7, #16
 8004712:	2300      	movs	r3, #0
 8004714:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004716:	f7fe fb59 	bl	8002dcc <xQueueGenericSend>
 800471a:	6278      	str	r0, [r7, #36]	; 0x24
 800471c:	e012      	b.n	8004744 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800471e:	4b0c      	ldr	r3, [pc, #48]	; (8004750 <xTimerGenericCommand+0x98>)
 8004720:	6818      	ldr	r0, [r3, #0]
 8004722:	f107 0110 	add.w	r1, r7, #16
 8004726:	2300      	movs	r3, #0
 8004728:	2200      	movs	r2, #0
 800472a:	f7fe fb4f 	bl	8002dcc <xQueueGenericSend>
 800472e:	6278      	str	r0, [r7, #36]	; 0x24
 8004730:	e008      	b.n	8004744 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004732:	4b07      	ldr	r3, [pc, #28]	; (8004750 <xTimerGenericCommand+0x98>)
 8004734:	6818      	ldr	r0, [r3, #0]
 8004736:	f107 0110 	add.w	r1, r7, #16
 800473a:	2300      	movs	r3, #0
 800473c:	683a      	ldr	r2, [r7, #0]
 800473e:	f7fe fc43 	bl	8002fc8 <xQueueGenericSendFromISR>
 8004742:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004746:	4618      	mov	r0, r3
 8004748:	3728      	adds	r7, #40	; 0x28
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	20000fb0 	.word	0x20000fb0

08004754 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b088      	sub	sp, #32
 8004758:	af02      	add	r7, sp, #8
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800475e:	4b22      	ldr	r3, [pc, #136]	; (80047e8 <prvProcessExpiredTimer+0x94>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	3304      	adds	r3, #4
 800476c:	4618      	mov	r0, r3
 800476e:	f7fe f9ff 	bl	8002b70 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004778:	f003 0304 	and.w	r3, r3, #4
 800477c:	2b00      	cmp	r3, #0
 800477e:	d022      	beq.n	80047c6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	699a      	ldr	r2, [r3, #24]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	18d1      	adds	r1, r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	683a      	ldr	r2, [r7, #0]
 800478c:	6978      	ldr	r0, [r7, #20]
 800478e:	f000 f8d1 	bl	8004934 <prvInsertTimerInActiveList>
 8004792:	4603      	mov	r3, r0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d01f      	beq.n	80047d8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004798:	2300      	movs	r3, #0
 800479a:	9300      	str	r3, [sp, #0]
 800479c:	2300      	movs	r3, #0
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	2100      	movs	r1, #0
 80047a2:	6978      	ldr	r0, [r7, #20]
 80047a4:	f7ff ff88 	bl	80046b8 <xTimerGenericCommand>
 80047a8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d113      	bne.n	80047d8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80047b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b4:	f383 8811 	msr	BASEPRI, r3
 80047b8:	f3bf 8f6f 	isb	sy
 80047bc:	f3bf 8f4f 	dsb	sy
 80047c0:	60fb      	str	r3, [r7, #12]
}
 80047c2:	bf00      	nop
 80047c4:	e7fe      	b.n	80047c4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047cc:	f023 0301 	bic.w	r3, r3, #1
 80047d0:	b2da      	uxtb	r2, r3
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	6a1b      	ldr	r3, [r3, #32]
 80047dc:	6978      	ldr	r0, [r7, #20]
 80047de:	4798      	blx	r3
}
 80047e0:	bf00      	nop
 80047e2:	3718      	adds	r7, #24
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	20000fa8 	.word	0x20000fa8

080047ec <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80047f4:	f107 0308 	add.w	r3, r7, #8
 80047f8:	4618      	mov	r0, r3
 80047fa:	f000 f857 	bl	80048ac <prvGetNextExpireTime>
 80047fe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	4619      	mov	r1, r3
 8004804:	68f8      	ldr	r0, [r7, #12]
 8004806:	f000 f803 	bl	8004810 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800480a:	f000 f8d5 	bl	80049b8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800480e:	e7f1      	b.n	80047f4 <prvTimerTask+0x8>

08004810 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800481a:	f7ff f8fb 	bl	8003a14 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800481e:	f107 0308 	add.w	r3, r7, #8
 8004822:	4618      	mov	r0, r3
 8004824:	f000 f866 	bl	80048f4 <prvSampleTimeNow>
 8004828:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d130      	bne.n	8004892 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d10a      	bne.n	800484c <prvProcessTimerOrBlockTask+0x3c>
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	429a      	cmp	r2, r3
 800483c:	d806      	bhi.n	800484c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800483e:	f7ff f8f7 	bl	8003a30 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004842:	68f9      	ldr	r1, [r7, #12]
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f7ff ff85 	bl	8004754 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800484a:	e024      	b.n	8004896 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d008      	beq.n	8004864 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004852:	4b13      	ldr	r3, [pc, #76]	; (80048a0 <prvProcessTimerOrBlockTask+0x90>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d101      	bne.n	8004860 <prvProcessTimerOrBlockTask+0x50>
 800485c:	2301      	movs	r3, #1
 800485e:	e000      	b.n	8004862 <prvProcessTimerOrBlockTask+0x52>
 8004860:	2300      	movs	r3, #0
 8004862:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004864:	4b0f      	ldr	r3, [pc, #60]	; (80048a4 <prvProcessTimerOrBlockTask+0x94>)
 8004866:	6818      	ldr	r0, [r3, #0]
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	683a      	ldr	r2, [r7, #0]
 8004870:	4619      	mov	r1, r3
 8004872:	f7fe fe5f 	bl	8003534 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004876:	f7ff f8db 	bl	8003a30 <xTaskResumeAll>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d10a      	bne.n	8004896 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004880:	4b09      	ldr	r3, [pc, #36]	; (80048a8 <prvProcessTimerOrBlockTask+0x98>)
 8004882:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004886:	601a      	str	r2, [r3, #0]
 8004888:	f3bf 8f4f 	dsb	sy
 800488c:	f3bf 8f6f 	isb	sy
}
 8004890:	e001      	b.n	8004896 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004892:	f7ff f8cd 	bl	8003a30 <xTaskResumeAll>
}
 8004896:	bf00      	nop
 8004898:	3710      	adds	r7, #16
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	20000fac 	.word	0x20000fac
 80048a4:	20000fb0 	.word	0x20000fb0
 80048a8:	e000ed04 	.word	0xe000ed04

080048ac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80048ac:	b480      	push	{r7}
 80048ae:	b085      	sub	sp, #20
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80048b4:	4b0e      	ldr	r3, [pc, #56]	; (80048f0 <prvGetNextExpireTime+0x44>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d101      	bne.n	80048c2 <prvGetNextExpireTime+0x16>
 80048be:	2201      	movs	r2, #1
 80048c0:	e000      	b.n	80048c4 <prvGetNextExpireTime+0x18>
 80048c2:	2200      	movs	r2, #0
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d105      	bne.n	80048dc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80048d0:	4b07      	ldr	r3, [pc, #28]	; (80048f0 <prvGetNextExpireTime+0x44>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	60fb      	str	r3, [r7, #12]
 80048da:	e001      	b.n	80048e0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80048dc:	2300      	movs	r3, #0
 80048de:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80048e0:	68fb      	ldr	r3, [r7, #12]
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3714      	adds	r7, #20
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop
 80048f0:	20000fa8 	.word	0x20000fa8

080048f4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80048fc:	f7ff f936 	bl	8003b6c <xTaskGetTickCount>
 8004900:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004902:	4b0b      	ldr	r3, [pc, #44]	; (8004930 <prvSampleTimeNow+0x3c>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	68fa      	ldr	r2, [r7, #12]
 8004908:	429a      	cmp	r2, r3
 800490a:	d205      	bcs.n	8004918 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800490c:	f000 f936 	bl	8004b7c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	601a      	str	r2, [r3, #0]
 8004916:	e002      	b.n	800491e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800491e:	4a04      	ldr	r2, [pc, #16]	; (8004930 <prvSampleTimeNow+0x3c>)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004924:	68fb      	ldr	r3, [r7, #12]
}
 8004926:	4618      	mov	r0, r3
 8004928:	3710      	adds	r7, #16
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	20000fb8 	.word	0x20000fb8

08004934 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b086      	sub	sp, #24
 8004938:	af00      	add	r7, sp, #0
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	60b9      	str	r1, [r7, #8]
 800493e:	607a      	str	r2, [r7, #4]
 8004940:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004942:	2300      	movs	r3, #0
 8004944:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	68ba      	ldr	r2, [r7, #8]
 800494a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	68fa      	ldr	r2, [r7, #12]
 8004950:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004952:	68ba      	ldr	r2, [r7, #8]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	429a      	cmp	r2, r3
 8004958:	d812      	bhi.n	8004980 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	1ad2      	subs	r2, r2, r3
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	699b      	ldr	r3, [r3, #24]
 8004964:	429a      	cmp	r2, r3
 8004966:	d302      	bcc.n	800496e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004968:	2301      	movs	r3, #1
 800496a:	617b      	str	r3, [r7, #20]
 800496c:	e01b      	b.n	80049a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800496e:	4b10      	ldr	r3, [pc, #64]	; (80049b0 <prvInsertTimerInActiveList+0x7c>)
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	3304      	adds	r3, #4
 8004976:	4619      	mov	r1, r3
 8004978:	4610      	mov	r0, r2
 800497a:	f7fe f8c0 	bl	8002afe <vListInsert>
 800497e:	e012      	b.n	80049a6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	429a      	cmp	r2, r3
 8004986:	d206      	bcs.n	8004996 <prvInsertTimerInActiveList+0x62>
 8004988:	68ba      	ldr	r2, [r7, #8]
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	429a      	cmp	r2, r3
 800498e:	d302      	bcc.n	8004996 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004990:	2301      	movs	r3, #1
 8004992:	617b      	str	r3, [r7, #20]
 8004994:	e007      	b.n	80049a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004996:	4b07      	ldr	r3, [pc, #28]	; (80049b4 <prvInsertTimerInActiveList+0x80>)
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	3304      	adds	r3, #4
 800499e:	4619      	mov	r1, r3
 80049a0:	4610      	mov	r0, r2
 80049a2:	f7fe f8ac 	bl	8002afe <vListInsert>
		}
	}

	return xProcessTimerNow;
 80049a6:	697b      	ldr	r3, [r7, #20]
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3718      	adds	r7, #24
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	20000fac 	.word	0x20000fac
 80049b4:	20000fa8 	.word	0x20000fa8

080049b8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b08e      	sub	sp, #56	; 0x38
 80049bc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80049be:	e0ca      	b.n	8004b56 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	da18      	bge.n	80049f8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80049c6:	1d3b      	adds	r3, r7, #4
 80049c8:	3304      	adds	r3, #4
 80049ca:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80049cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d10a      	bne.n	80049e8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80049d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d6:	f383 8811 	msr	BASEPRI, r3
 80049da:	f3bf 8f6f 	isb	sy
 80049de:	f3bf 8f4f 	dsb	sy
 80049e2:	61fb      	str	r3, [r7, #28]
}
 80049e4:	bf00      	nop
 80049e6:	e7fe      	b.n	80049e6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80049e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049ee:	6850      	ldr	r0, [r2, #4]
 80049f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049f2:	6892      	ldr	r2, [r2, #8]
 80049f4:	4611      	mov	r1, r2
 80049f6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	f2c0 80aa 	blt.w	8004b54 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a06:	695b      	ldr	r3, [r3, #20]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d004      	beq.n	8004a16 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a0e:	3304      	adds	r3, #4
 8004a10:	4618      	mov	r0, r3
 8004a12:	f7fe f8ad 	bl	8002b70 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004a16:	463b      	mov	r3, r7
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f7ff ff6b 	bl	80048f4 <prvSampleTimeNow>
 8004a1e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2b09      	cmp	r3, #9
 8004a24:	f200 8097 	bhi.w	8004b56 <prvProcessReceivedCommands+0x19e>
 8004a28:	a201      	add	r2, pc, #4	; (adr r2, 8004a30 <prvProcessReceivedCommands+0x78>)
 8004a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a2e:	bf00      	nop
 8004a30:	08004a59 	.word	0x08004a59
 8004a34:	08004a59 	.word	0x08004a59
 8004a38:	08004a59 	.word	0x08004a59
 8004a3c:	08004acd 	.word	0x08004acd
 8004a40:	08004ae1 	.word	0x08004ae1
 8004a44:	08004b2b 	.word	0x08004b2b
 8004a48:	08004a59 	.word	0x08004a59
 8004a4c:	08004a59 	.word	0x08004a59
 8004a50:	08004acd 	.word	0x08004acd
 8004a54:	08004ae1 	.word	0x08004ae1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a5e:	f043 0301 	orr.w	r3, r3, #1
 8004a62:	b2da      	uxtb	r2, r3
 8004a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004a6a:	68ba      	ldr	r2, [r7, #8]
 8004a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a6e:	699b      	ldr	r3, [r3, #24]
 8004a70:	18d1      	adds	r1, r2, r3
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a78:	f7ff ff5c 	bl	8004934 <prvInsertTimerInActiveList>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d069      	beq.n	8004b56 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a84:	6a1b      	ldr	r3, [r3, #32]
 8004a86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a88:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a90:	f003 0304 	and.w	r3, r3, #4
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d05e      	beq.n	8004b56 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004a98:	68ba      	ldr	r2, [r7, #8]
 8004a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a9c:	699b      	ldr	r3, [r3, #24]
 8004a9e:	441a      	add	r2, r3
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	9300      	str	r3, [sp, #0]
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	2100      	movs	r1, #0
 8004aa8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004aaa:	f7ff fe05 	bl	80046b8 <xTimerGenericCommand>
 8004aae:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004ab0:	6a3b      	ldr	r3, [r7, #32]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d14f      	bne.n	8004b56 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aba:	f383 8811 	msr	BASEPRI, r3
 8004abe:	f3bf 8f6f 	isb	sy
 8004ac2:	f3bf 8f4f 	dsb	sy
 8004ac6:	61bb      	str	r3, [r7, #24]
}
 8004ac8:	bf00      	nop
 8004aca:	e7fe      	b.n	8004aca <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ace:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ad2:	f023 0301 	bic.w	r3, r3, #1
 8004ad6:	b2da      	uxtb	r2, r3
 8004ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ada:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004ade:	e03a      	b.n	8004b56 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ae6:	f043 0301 	orr.w	r3, r3, #1
 8004aea:	b2da      	uxtb	r2, r3
 8004aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004af2:	68ba      	ldr	r2, [r7, #8]
 8004af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004afa:	699b      	ldr	r3, [r3, #24]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d10a      	bne.n	8004b16 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b04:	f383 8811 	msr	BASEPRI, r3
 8004b08:	f3bf 8f6f 	isb	sy
 8004b0c:	f3bf 8f4f 	dsb	sy
 8004b10:	617b      	str	r3, [r7, #20]
}
 8004b12:	bf00      	nop
 8004b14:	e7fe      	b.n	8004b14 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b18:	699a      	ldr	r2, [r3, #24]
 8004b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1c:	18d1      	adds	r1, r2, r3
 8004b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b24:	f7ff ff06 	bl	8004934 <prvInsertTimerInActiveList>
					break;
 8004b28:	e015      	b.n	8004b56 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b30:	f003 0302 	and.w	r3, r3, #2
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d103      	bne.n	8004b40 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004b38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b3a:	f000 fbe1 	bl	8005300 <vPortFree>
 8004b3e:	e00a      	b.n	8004b56 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b46:	f023 0301 	bic.w	r3, r3, #1
 8004b4a:	b2da      	uxtb	r2, r3
 8004b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004b52:	e000      	b.n	8004b56 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004b54:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004b56:	4b08      	ldr	r3, [pc, #32]	; (8004b78 <prvProcessReceivedCommands+0x1c0>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	1d39      	adds	r1, r7, #4
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f7fe face 	bl	8003100 <xQueueReceive>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	f47f af2a 	bne.w	80049c0 <prvProcessReceivedCommands+0x8>
	}
}
 8004b6c:	bf00      	nop
 8004b6e:	bf00      	nop
 8004b70:	3730      	adds	r7, #48	; 0x30
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	20000fb0 	.word	0x20000fb0

08004b7c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b088      	sub	sp, #32
 8004b80:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004b82:	e048      	b.n	8004c16 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004b84:	4b2d      	ldr	r3, [pc, #180]	; (8004c3c <prvSwitchTimerLists+0xc0>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b8e:	4b2b      	ldr	r3, [pc, #172]	; (8004c3c <prvSwitchTimerLists+0xc0>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	3304      	adds	r3, #4
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f7fd ffe7 	bl	8002b70 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6a1b      	ldr	r3, [r3, #32]
 8004ba6:	68f8      	ldr	r0, [r7, #12]
 8004ba8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004bb0:	f003 0304 	and.w	r3, r3, #4
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d02e      	beq.n	8004c16 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	699b      	ldr	r3, [r3, #24]
 8004bbc:	693a      	ldr	r2, [r7, #16]
 8004bbe:	4413      	add	r3, r2
 8004bc0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004bc2:	68ba      	ldr	r2, [r7, #8]
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d90e      	bls.n	8004be8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	68ba      	ldr	r2, [r7, #8]
 8004bce:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	68fa      	ldr	r2, [r7, #12]
 8004bd4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004bd6:	4b19      	ldr	r3, [pc, #100]	; (8004c3c <prvSwitchTimerLists+0xc0>)
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	3304      	adds	r3, #4
 8004bde:	4619      	mov	r1, r3
 8004be0:	4610      	mov	r0, r2
 8004be2:	f7fd ff8c 	bl	8002afe <vListInsert>
 8004be6:	e016      	b.n	8004c16 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004be8:	2300      	movs	r3, #0
 8004bea:	9300      	str	r3, [sp, #0]
 8004bec:	2300      	movs	r3, #0
 8004bee:	693a      	ldr	r2, [r7, #16]
 8004bf0:	2100      	movs	r1, #0
 8004bf2:	68f8      	ldr	r0, [r7, #12]
 8004bf4:	f7ff fd60 	bl	80046b8 <xTimerGenericCommand>
 8004bf8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d10a      	bne.n	8004c16 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c04:	f383 8811 	msr	BASEPRI, r3
 8004c08:	f3bf 8f6f 	isb	sy
 8004c0c:	f3bf 8f4f 	dsb	sy
 8004c10:	603b      	str	r3, [r7, #0]
}
 8004c12:	bf00      	nop
 8004c14:	e7fe      	b.n	8004c14 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004c16:	4b09      	ldr	r3, [pc, #36]	; (8004c3c <prvSwitchTimerLists+0xc0>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d1b1      	bne.n	8004b84 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004c20:	4b06      	ldr	r3, [pc, #24]	; (8004c3c <prvSwitchTimerLists+0xc0>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004c26:	4b06      	ldr	r3, [pc, #24]	; (8004c40 <prvSwitchTimerLists+0xc4>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a04      	ldr	r2, [pc, #16]	; (8004c3c <prvSwitchTimerLists+0xc0>)
 8004c2c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004c2e:	4a04      	ldr	r2, [pc, #16]	; (8004c40 <prvSwitchTimerLists+0xc4>)
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	6013      	str	r3, [r2, #0]
}
 8004c34:	bf00      	nop
 8004c36:	3718      	adds	r7, #24
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	20000fa8 	.word	0x20000fa8
 8004c40:	20000fac 	.word	0x20000fac

08004c44 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b082      	sub	sp, #8
 8004c48:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004c4a:	f000 f96b 	bl	8004f24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004c4e:	4b15      	ldr	r3, [pc, #84]	; (8004ca4 <prvCheckForValidListAndQueue+0x60>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d120      	bne.n	8004c98 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004c56:	4814      	ldr	r0, [pc, #80]	; (8004ca8 <prvCheckForValidListAndQueue+0x64>)
 8004c58:	f7fd ff00 	bl	8002a5c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004c5c:	4813      	ldr	r0, [pc, #76]	; (8004cac <prvCheckForValidListAndQueue+0x68>)
 8004c5e:	f7fd fefd 	bl	8002a5c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004c62:	4b13      	ldr	r3, [pc, #76]	; (8004cb0 <prvCheckForValidListAndQueue+0x6c>)
 8004c64:	4a10      	ldr	r2, [pc, #64]	; (8004ca8 <prvCheckForValidListAndQueue+0x64>)
 8004c66:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004c68:	4b12      	ldr	r3, [pc, #72]	; (8004cb4 <prvCheckForValidListAndQueue+0x70>)
 8004c6a:	4a10      	ldr	r2, [pc, #64]	; (8004cac <prvCheckForValidListAndQueue+0x68>)
 8004c6c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004c6e:	2300      	movs	r3, #0
 8004c70:	9300      	str	r3, [sp, #0]
 8004c72:	4b11      	ldr	r3, [pc, #68]	; (8004cb8 <prvCheckForValidListAndQueue+0x74>)
 8004c74:	4a11      	ldr	r2, [pc, #68]	; (8004cbc <prvCheckForValidListAndQueue+0x78>)
 8004c76:	2110      	movs	r1, #16
 8004c78:	200a      	movs	r0, #10
 8004c7a:	f7fe f80b 	bl	8002c94 <xQueueGenericCreateStatic>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	4a08      	ldr	r2, [pc, #32]	; (8004ca4 <prvCheckForValidListAndQueue+0x60>)
 8004c82:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004c84:	4b07      	ldr	r3, [pc, #28]	; (8004ca4 <prvCheckForValidListAndQueue+0x60>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d005      	beq.n	8004c98 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004c8c:	4b05      	ldr	r3, [pc, #20]	; (8004ca4 <prvCheckForValidListAndQueue+0x60>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	490b      	ldr	r1, [pc, #44]	; (8004cc0 <prvCheckForValidListAndQueue+0x7c>)
 8004c92:	4618      	mov	r0, r3
 8004c94:	f7fe fc24 	bl	80034e0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004c98:	f000 f974 	bl	8004f84 <vPortExitCritical>
}
 8004c9c:	bf00      	nop
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	20000fb0 	.word	0x20000fb0
 8004ca8:	20000f80 	.word	0x20000f80
 8004cac:	20000f94 	.word	0x20000f94
 8004cb0:	20000fa8 	.word	0x20000fa8
 8004cb4:	20000fac 	.word	0x20000fac
 8004cb8:	2000105c 	.word	0x2000105c
 8004cbc:	20000fbc 	.word	0x20000fbc
 8004cc0:	0800ad94 	.word	0x0800ad94

08004cc4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b085      	sub	sp, #20
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	60f8      	str	r0, [r7, #12]
 8004ccc:	60b9      	str	r1, [r7, #8]
 8004cce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	3b04      	subs	r3, #4
 8004cd4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004cdc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	3b04      	subs	r3, #4
 8004ce2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	f023 0201 	bic.w	r2, r3, #1
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	3b04      	subs	r3, #4
 8004cf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004cf4:	4a0c      	ldr	r2, [pc, #48]	; (8004d28 <pxPortInitialiseStack+0x64>)
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	3b14      	subs	r3, #20
 8004cfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	3b04      	subs	r3, #4
 8004d0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f06f 0202 	mvn.w	r2, #2
 8004d12:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	3b20      	subs	r3, #32
 8004d18:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3714      	adds	r7, #20
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr
 8004d28:	08004d2d 	.word	0x08004d2d

08004d2c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b085      	sub	sp, #20
 8004d30:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004d32:	2300      	movs	r3, #0
 8004d34:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004d36:	4b12      	ldr	r3, [pc, #72]	; (8004d80 <prvTaskExitError+0x54>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d3e:	d00a      	beq.n	8004d56 <prvTaskExitError+0x2a>
	__asm volatile
 8004d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d44:	f383 8811 	msr	BASEPRI, r3
 8004d48:	f3bf 8f6f 	isb	sy
 8004d4c:	f3bf 8f4f 	dsb	sy
 8004d50:	60fb      	str	r3, [r7, #12]
}
 8004d52:	bf00      	nop
 8004d54:	e7fe      	b.n	8004d54 <prvTaskExitError+0x28>
	__asm volatile
 8004d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d5a:	f383 8811 	msr	BASEPRI, r3
 8004d5e:	f3bf 8f6f 	isb	sy
 8004d62:	f3bf 8f4f 	dsb	sy
 8004d66:	60bb      	str	r3, [r7, #8]
}
 8004d68:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004d6a:	bf00      	nop
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d0fc      	beq.n	8004d6c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004d72:	bf00      	nop
 8004d74:	bf00      	nop
 8004d76:	3714      	adds	r7, #20
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr
 8004d80:	2000000c 	.word	0x2000000c
	...

08004d90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004d90:	4b07      	ldr	r3, [pc, #28]	; (8004db0 <pxCurrentTCBConst2>)
 8004d92:	6819      	ldr	r1, [r3, #0]
 8004d94:	6808      	ldr	r0, [r1, #0]
 8004d96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d9a:	f380 8809 	msr	PSP, r0
 8004d9e:	f3bf 8f6f 	isb	sy
 8004da2:	f04f 0000 	mov.w	r0, #0
 8004da6:	f380 8811 	msr	BASEPRI, r0
 8004daa:	4770      	bx	lr
 8004dac:	f3af 8000 	nop.w

08004db0 <pxCurrentTCBConst2>:
 8004db0:	20000a80 	.word	0x20000a80
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004db4:	bf00      	nop
 8004db6:	bf00      	nop

08004db8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004db8:	4808      	ldr	r0, [pc, #32]	; (8004ddc <prvPortStartFirstTask+0x24>)
 8004dba:	6800      	ldr	r0, [r0, #0]
 8004dbc:	6800      	ldr	r0, [r0, #0]
 8004dbe:	f380 8808 	msr	MSP, r0
 8004dc2:	f04f 0000 	mov.w	r0, #0
 8004dc6:	f380 8814 	msr	CONTROL, r0
 8004dca:	b662      	cpsie	i
 8004dcc:	b661      	cpsie	f
 8004dce:	f3bf 8f4f 	dsb	sy
 8004dd2:	f3bf 8f6f 	isb	sy
 8004dd6:	df00      	svc	0
 8004dd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004dda:	bf00      	nop
 8004ddc:	e000ed08 	.word	0xe000ed08

08004de0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b086      	sub	sp, #24
 8004de4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004de6:	4b46      	ldr	r3, [pc, #280]	; (8004f00 <xPortStartScheduler+0x120>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a46      	ldr	r2, [pc, #280]	; (8004f04 <xPortStartScheduler+0x124>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d10a      	bne.n	8004e06 <xPortStartScheduler+0x26>
	__asm volatile
 8004df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df4:	f383 8811 	msr	BASEPRI, r3
 8004df8:	f3bf 8f6f 	isb	sy
 8004dfc:	f3bf 8f4f 	dsb	sy
 8004e00:	613b      	str	r3, [r7, #16]
}
 8004e02:	bf00      	nop
 8004e04:	e7fe      	b.n	8004e04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004e06:	4b3e      	ldr	r3, [pc, #248]	; (8004f00 <xPortStartScheduler+0x120>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a3f      	ldr	r2, [pc, #252]	; (8004f08 <xPortStartScheduler+0x128>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d10a      	bne.n	8004e26 <xPortStartScheduler+0x46>
	__asm volatile
 8004e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e14:	f383 8811 	msr	BASEPRI, r3
 8004e18:	f3bf 8f6f 	isb	sy
 8004e1c:	f3bf 8f4f 	dsb	sy
 8004e20:	60fb      	str	r3, [r7, #12]
}
 8004e22:	bf00      	nop
 8004e24:	e7fe      	b.n	8004e24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004e26:	4b39      	ldr	r3, [pc, #228]	; (8004f0c <xPortStartScheduler+0x12c>)
 8004e28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	22ff      	movs	r2, #255	; 0xff
 8004e36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004e40:	78fb      	ldrb	r3, [r7, #3]
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004e48:	b2da      	uxtb	r2, r3
 8004e4a:	4b31      	ldr	r3, [pc, #196]	; (8004f10 <xPortStartScheduler+0x130>)
 8004e4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004e4e:	4b31      	ldr	r3, [pc, #196]	; (8004f14 <xPortStartScheduler+0x134>)
 8004e50:	2207      	movs	r2, #7
 8004e52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e54:	e009      	b.n	8004e6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004e56:	4b2f      	ldr	r3, [pc, #188]	; (8004f14 <xPortStartScheduler+0x134>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	3b01      	subs	r3, #1
 8004e5c:	4a2d      	ldr	r2, [pc, #180]	; (8004f14 <xPortStartScheduler+0x134>)
 8004e5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004e60:	78fb      	ldrb	r3, [r7, #3]
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	005b      	lsls	r3, r3, #1
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e6a:	78fb      	ldrb	r3, [r7, #3]
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e72:	2b80      	cmp	r3, #128	; 0x80
 8004e74:	d0ef      	beq.n	8004e56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004e76:	4b27      	ldr	r3, [pc, #156]	; (8004f14 <xPortStartScheduler+0x134>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f1c3 0307 	rsb	r3, r3, #7
 8004e7e:	2b04      	cmp	r3, #4
 8004e80:	d00a      	beq.n	8004e98 <xPortStartScheduler+0xb8>
	__asm volatile
 8004e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e86:	f383 8811 	msr	BASEPRI, r3
 8004e8a:	f3bf 8f6f 	isb	sy
 8004e8e:	f3bf 8f4f 	dsb	sy
 8004e92:	60bb      	str	r3, [r7, #8]
}
 8004e94:	bf00      	nop
 8004e96:	e7fe      	b.n	8004e96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004e98:	4b1e      	ldr	r3, [pc, #120]	; (8004f14 <xPortStartScheduler+0x134>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	021b      	lsls	r3, r3, #8
 8004e9e:	4a1d      	ldr	r2, [pc, #116]	; (8004f14 <xPortStartScheduler+0x134>)
 8004ea0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004ea2:	4b1c      	ldr	r3, [pc, #112]	; (8004f14 <xPortStartScheduler+0x134>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004eaa:	4a1a      	ldr	r2, [pc, #104]	; (8004f14 <xPortStartScheduler+0x134>)
 8004eac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	b2da      	uxtb	r2, r3
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004eb6:	4b18      	ldr	r3, [pc, #96]	; (8004f18 <xPortStartScheduler+0x138>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a17      	ldr	r2, [pc, #92]	; (8004f18 <xPortStartScheduler+0x138>)
 8004ebc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ec0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004ec2:	4b15      	ldr	r3, [pc, #84]	; (8004f18 <xPortStartScheduler+0x138>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a14      	ldr	r2, [pc, #80]	; (8004f18 <xPortStartScheduler+0x138>)
 8004ec8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004ecc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004ece:	f000 f8dd 	bl	800508c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004ed2:	4b12      	ldr	r3, [pc, #72]	; (8004f1c <xPortStartScheduler+0x13c>)
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004ed8:	f000 f8fc 	bl	80050d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004edc:	4b10      	ldr	r3, [pc, #64]	; (8004f20 <xPortStartScheduler+0x140>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a0f      	ldr	r2, [pc, #60]	; (8004f20 <xPortStartScheduler+0x140>)
 8004ee2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004ee6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004ee8:	f7ff ff66 	bl	8004db8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004eec:	f7fe ff1a 	bl	8003d24 <vTaskSwitchContext>
	prvTaskExitError();
 8004ef0:	f7ff ff1c 	bl	8004d2c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004ef4:	2300      	movs	r3, #0
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3718      	adds	r7, #24
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	e000ed00 	.word	0xe000ed00
 8004f04:	410fc271 	.word	0x410fc271
 8004f08:	410fc270 	.word	0x410fc270
 8004f0c:	e000e400 	.word	0xe000e400
 8004f10:	200010ac 	.word	0x200010ac
 8004f14:	200010b0 	.word	0x200010b0
 8004f18:	e000ed20 	.word	0xe000ed20
 8004f1c:	2000000c 	.word	0x2000000c
 8004f20:	e000ef34 	.word	0xe000ef34

08004f24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
	__asm volatile
 8004f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f2e:	f383 8811 	msr	BASEPRI, r3
 8004f32:	f3bf 8f6f 	isb	sy
 8004f36:	f3bf 8f4f 	dsb	sy
 8004f3a:	607b      	str	r3, [r7, #4]
}
 8004f3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004f3e:	4b0f      	ldr	r3, [pc, #60]	; (8004f7c <vPortEnterCritical+0x58>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	3301      	adds	r3, #1
 8004f44:	4a0d      	ldr	r2, [pc, #52]	; (8004f7c <vPortEnterCritical+0x58>)
 8004f46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004f48:	4b0c      	ldr	r3, [pc, #48]	; (8004f7c <vPortEnterCritical+0x58>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d10f      	bne.n	8004f70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004f50:	4b0b      	ldr	r3, [pc, #44]	; (8004f80 <vPortEnterCritical+0x5c>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d00a      	beq.n	8004f70 <vPortEnterCritical+0x4c>
	__asm volatile
 8004f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f5e:	f383 8811 	msr	BASEPRI, r3
 8004f62:	f3bf 8f6f 	isb	sy
 8004f66:	f3bf 8f4f 	dsb	sy
 8004f6a:	603b      	str	r3, [r7, #0]
}
 8004f6c:	bf00      	nop
 8004f6e:	e7fe      	b.n	8004f6e <vPortEnterCritical+0x4a>
	}
}
 8004f70:	bf00      	nop
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr
 8004f7c:	2000000c 	.word	0x2000000c
 8004f80:	e000ed04 	.word	0xe000ed04

08004f84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004f8a:	4b12      	ldr	r3, [pc, #72]	; (8004fd4 <vPortExitCritical+0x50>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d10a      	bne.n	8004fa8 <vPortExitCritical+0x24>
	__asm volatile
 8004f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f96:	f383 8811 	msr	BASEPRI, r3
 8004f9a:	f3bf 8f6f 	isb	sy
 8004f9e:	f3bf 8f4f 	dsb	sy
 8004fa2:	607b      	str	r3, [r7, #4]
}
 8004fa4:	bf00      	nop
 8004fa6:	e7fe      	b.n	8004fa6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004fa8:	4b0a      	ldr	r3, [pc, #40]	; (8004fd4 <vPortExitCritical+0x50>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	3b01      	subs	r3, #1
 8004fae:	4a09      	ldr	r2, [pc, #36]	; (8004fd4 <vPortExitCritical+0x50>)
 8004fb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004fb2:	4b08      	ldr	r3, [pc, #32]	; (8004fd4 <vPortExitCritical+0x50>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d105      	bne.n	8004fc6 <vPortExitCritical+0x42>
 8004fba:	2300      	movs	r3, #0
 8004fbc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	f383 8811 	msr	BASEPRI, r3
}
 8004fc4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004fc6:	bf00      	nop
 8004fc8:	370c      	adds	r7, #12
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop
 8004fd4:	2000000c 	.word	0x2000000c
	...

08004fe0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004fe0:	f3ef 8009 	mrs	r0, PSP
 8004fe4:	f3bf 8f6f 	isb	sy
 8004fe8:	4b15      	ldr	r3, [pc, #84]	; (8005040 <pxCurrentTCBConst>)
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	f01e 0f10 	tst.w	lr, #16
 8004ff0:	bf08      	it	eq
 8004ff2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004ff6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ffa:	6010      	str	r0, [r2, #0]
 8004ffc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005000:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005004:	f380 8811 	msr	BASEPRI, r0
 8005008:	f3bf 8f4f 	dsb	sy
 800500c:	f3bf 8f6f 	isb	sy
 8005010:	f7fe fe88 	bl	8003d24 <vTaskSwitchContext>
 8005014:	f04f 0000 	mov.w	r0, #0
 8005018:	f380 8811 	msr	BASEPRI, r0
 800501c:	bc09      	pop	{r0, r3}
 800501e:	6819      	ldr	r1, [r3, #0]
 8005020:	6808      	ldr	r0, [r1, #0]
 8005022:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005026:	f01e 0f10 	tst.w	lr, #16
 800502a:	bf08      	it	eq
 800502c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005030:	f380 8809 	msr	PSP, r0
 8005034:	f3bf 8f6f 	isb	sy
 8005038:	4770      	bx	lr
 800503a:	bf00      	nop
 800503c:	f3af 8000 	nop.w

08005040 <pxCurrentTCBConst>:
 8005040:	20000a80 	.word	0x20000a80
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005044:	bf00      	nop
 8005046:	bf00      	nop

08005048 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b082      	sub	sp, #8
 800504c:	af00      	add	r7, sp, #0
	__asm volatile
 800504e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005052:	f383 8811 	msr	BASEPRI, r3
 8005056:	f3bf 8f6f 	isb	sy
 800505a:	f3bf 8f4f 	dsb	sy
 800505e:	607b      	str	r3, [r7, #4]
}
 8005060:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005062:	f7fe fda5 	bl	8003bb0 <xTaskIncrementTick>
 8005066:	4603      	mov	r3, r0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d003      	beq.n	8005074 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800506c:	4b06      	ldr	r3, [pc, #24]	; (8005088 <xPortSysTickHandler+0x40>)
 800506e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005072:	601a      	str	r2, [r3, #0]
 8005074:	2300      	movs	r3, #0
 8005076:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	f383 8811 	msr	BASEPRI, r3
}
 800507e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005080:	bf00      	nop
 8005082:	3708      	adds	r7, #8
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}
 8005088:	e000ed04 	.word	0xe000ed04

0800508c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800508c:	b480      	push	{r7}
 800508e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005090:	4b0b      	ldr	r3, [pc, #44]	; (80050c0 <vPortSetupTimerInterrupt+0x34>)
 8005092:	2200      	movs	r2, #0
 8005094:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005096:	4b0b      	ldr	r3, [pc, #44]	; (80050c4 <vPortSetupTimerInterrupt+0x38>)
 8005098:	2200      	movs	r2, #0
 800509a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800509c:	4b0a      	ldr	r3, [pc, #40]	; (80050c8 <vPortSetupTimerInterrupt+0x3c>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a0a      	ldr	r2, [pc, #40]	; (80050cc <vPortSetupTimerInterrupt+0x40>)
 80050a2:	fba2 2303 	umull	r2, r3, r2, r3
 80050a6:	099b      	lsrs	r3, r3, #6
 80050a8:	4a09      	ldr	r2, [pc, #36]	; (80050d0 <vPortSetupTimerInterrupt+0x44>)
 80050aa:	3b01      	subs	r3, #1
 80050ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80050ae:	4b04      	ldr	r3, [pc, #16]	; (80050c0 <vPortSetupTimerInterrupt+0x34>)
 80050b0:	2207      	movs	r2, #7
 80050b2:	601a      	str	r2, [r3, #0]
}
 80050b4:	bf00      	nop
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr
 80050be:	bf00      	nop
 80050c0:	e000e010 	.word	0xe000e010
 80050c4:	e000e018 	.word	0xe000e018
 80050c8:	20000018 	.word	0x20000018
 80050cc:	10624dd3 	.word	0x10624dd3
 80050d0:	e000e014 	.word	0xe000e014

080050d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80050d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80050e4 <vPortEnableVFP+0x10>
 80050d8:	6801      	ldr	r1, [r0, #0]
 80050da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80050de:	6001      	str	r1, [r0, #0]
 80050e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80050e2:	bf00      	nop
 80050e4:	e000ed88 	.word	0xe000ed88

080050e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80050e8:	b480      	push	{r7}
 80050ea:	b085      	sub	sp, #20
 80050ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80050ee:	f3ef 8305 	mrs	r3, IPSR
 80050f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2b0f      	cmp	r3, #15
 80050f8:	d914      	bls.n	8005124 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80050fa:	4a17      	ldr	r2, [pc, #92]	; (8005158 <vPortValidateInterruptPriority+0x70>)
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	4413      	add	r3, r2
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005104:	4b15      	ldr	r3, [pc, #84]	; (800515c <vPortValidateInterruptPriority+0x74>)
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	7afa      	ldrb	r2, [r7, #11]
 800510a:	429a      	cmp	r2, r3
 800510c:	d20a      	bcs.n	8005124 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800510e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005112:	f383 8811 	msr	BASEPRI, r3
 8005116:	f3bf 8f6f 	isb	sy
 800511a:	f3bf 8f4f 	dsb	sy
 800511e:	607b      	str	r3, [r7, #4]
}
 8005120:	bf00      	nop
 8005122:	e7fe      	b.n	8005122 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005124:	4b0e      	ldr	r3, [pc, #56]	; (8005160 <vPortValidateInterruptPriority+0x78>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800512c:	4b0d      	ldr	r3, [pc, #52]	; (8005164 <vPortValidateInterruptPriority+0x7c>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	429a      	cmp	r2, r3
 8005132:	d90a      	bls.n	800514a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005138:	f383 8811 	msr	BASEPRI, r3
 800513c:	f3bf 8f6f 	isb	sy
 8005140:	f3bf 8f4f 	dsb	sy
 8005144:	603b      	str	r3, [r7, #0]
}
 8005146:	bf00      	nop
 8005148:	e7fe      	b.n	8005148 <vPortValidateInterruptPriority+0x60>
	}
 800514a:	bf00      	nop
 800514c:	3714      	adds	r7, #20
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr
 8005156:	bf00      	nop
 8005158:	e000e3f0 	.word	0xe000e3f0
 800515c:	200010ac 	.word	0x200010ac
 8005160:	e000ed0c 	.word	0xe000ed0c
 8005164:	200010b0 	.word	0x200010b0

08005168 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b08a      	sub	sp, #40	; 0x28
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005170:	2300      	movs	r3, #0
 8005172:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005174:	f7fe fc4e 	bl	8003a14 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005178:	4b5b      	ldr	r3, [pc, #364]	; (80052e8 <pvPortMalloc+0x180>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d101      	bne.n	8005184 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005180:	f000 f920 	bl	80053c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005184:	4b59      	ldr	r3, [pc, #356]	; (80052ec <pvPortMalloc+0x184>)
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	4013      	ands	r3, r2
 800518c:	2b00      	cmp	r3, #0
 800518e:	f040 8093 	bne.w	80052b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d01d      	beq.n	80051d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005198:	2208      	movs	r2, #8
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4413      	add	r3, r2
 800519e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f003 0307 	and.w	r3, r3, #7
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d014      	beq.n	80051d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f023 0307 	bic.w	r3, r3, #7
 80051b0:	3308      	adds	r3, #8
 80051b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f003 0307 	and.w	r3, r3, #7
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d00a      	beq.n	80051d4 <pvPortMalloc+0x6c>
	__asm volatile
 80051be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c2:	f383 8811 	msr	BASEPRI, r3
 80051c6:	f3bf 8f6f 	isb	sy
 80051ca:	f3bf 8f4f 	dsb	sy
 80051ce:	617b      	str	r3, [r7, #20]
}
 80051d0:	bf00      	nop
 80051d2:	e7fe      	b.n	80051d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d06e      	beq.n	80052b8 <pvPortMalloc+0x150>
 80051da:	4b45      	ldr	r3, [pc, #276]	; (80052f0 <pvPortMalloc+0x188>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d869      	bhi.n	80052b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80051e4:	4b43      	ldr	r3, [pc, #268]	; (80052f4 <pvPortMalloc+0x18c>)
 80051e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80051e8:	4b42      	ldr	r3, [pc, #264]	; (80052f4 <pvPortMalloc+0x18c>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80051ee:	e004      	b.n	80051fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80051f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80051f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80051fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	429a      	cmp	r2, r3
 8005202:	d903      	bls.n	800520c <pvPortMalloc+0xa4>
 8005204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d1f1      	bne.n	80051f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800520c:	4b36      	ldr	r3, [pc, #216]	; (80052e8 <pvPortMalloc+0x180>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005212:	429a      	cmp	r2, r3
 8005214:	d050      	beq.n	80052b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005216:	6a3b      	ldr	r3, [r7, #32]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2208      	movs	r2, #8
 800521c:	4413      	add	r3, r2
 800521e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	6a3b      	ldr	r3, [r7, #32]
 8005226:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522a:	685a      	ldr	r2, [r3, #4]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	1ad2      	subs	r2, r2, r3
 8005230:	2308      	movs	r3, #8
 8005232:	005b      	lsls	r3, r3, #1
 8005234:	429a      	cmp	r2, r3
 8005236:	d91f      	bls.n	8005278 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4413      	add	r3, r2
 800523e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	f003 0307 	and.w	r3, r3, #7
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00a      	beq.n	8005260 <pvPortMalloc+0xf8>
	__asm volatile
 800524a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800524e:	f383 8811 	msr	BASEPRI, r3
 8005252:	f3bf 8f6f 	isb	sy
 8005256:	f3bf 8f4f 	dsb	sy
 800525a:	613b      	str	r3, [r7, #16]
}
 800525c:	bf00      	nop
 800525e:	e7fe      	b.n	800525e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005262:	685a      	ldr	r2, [r3, #4]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	1ad2      	subs	r2, r2, r3
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800526c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005272:	69b8      	ldr	r0, [r7, #24]
 8005274:	f000 f908 	bl	8005488 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005278:	4b1d      	ldr	r3, [pc, #116]	; (80052f0 <pvPortMalloc+0x188>)
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	4a1b      	ldr	r2, [pc, #108]	; (80052f0 <pvPortMalloc+0x188>)
 8005284:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005286:	4b1a      	ldr	r3, [pc, #104]	; (80052f0 <pvPortMalloc+0x188>)
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	4b1b      	ldr	r3, [pc, #108]	; (80052f8 <pvPortMalloc+0x190>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	429a      	cmp	r2, r3
 8005290:	d203      	bcs.n	800529a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005292:	4b17      	ldr	r3, [pc, #92]	; (80052f0 <pvPortMalloc+0x188>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a18      	ldr	r2, [pc, #96]	; (80052f8 <pvPortMalloc+0x190>)
 8005298:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800529a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529c:	685a      	ldr	r2, [r3, #4]
 800529e:	4b13      	ldr	r3, [pc, #76]	; (80052ec <pvPortMalloc+0x184>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	431a      	orrs	r2, r3
 80052a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80052a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052aa:	2200      	movs	r2, #0
 80052ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80052ae:	4b13      	ldr	r3, [pc, #76]	; (80052fc <pvPortMalloc+0x194>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	3301      	adds	r3, #1
 80052b4:	4a11      	ldr	r2, [pc, #68]	; (80052fc <pvPortMalloc+0x194>)
 80052b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80052b8:	f7fe fbba 	bl	8003a30 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	f003 0307 	and.w	r3, r3, #7
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d00a      	beq.n	80052dc <pvPortMalloc+0x174>
	__asm volatile
 80052c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ca:	f383 8811 	msr	BASEPRI, r3
 80052ce:	f3bf 8f6f 	isb	sy
 80052d2:	f3bf 8f4f 	dsb	sy
 80052d6:	60fb      	str	r3, [r7, #12]
}
 80052d8:	bf00      	nop
 80052da:	e7fe      	b.n	80052da <pvPortMalloc+0x172>
	return pvReturn;
 80052dc:	69fb      	ldr	r3, [r7, #28]
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3728      	adds	r7, #40	; 0x28
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	bf00      	nop
 80052e8:	20001c74 	.word	0x20001c74
 80052ec:	20001c88 	.word	0x20001c88
 80052f0:	20001c78 	.word	0x20001c78
 80052f4:	20001c6c 	.word	0x20001c6c
 80052f8:	20001c7c 	.word	0x20001c7c
 80052fc:	20001c80 	.word	0x20001c80

08005300 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b086      	sub	sp, #24
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d04d      	beq.n	80053ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005312:	2308      	movs	r3, #8
 8005314:	425b      	negs	r3, r3
 8005316:	697a      	ldr	r2, [r7, #20]
 8005318:	4413      	add	r3, r2
 800531a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	685a      	ldr	r2, [r3, #4]
 8005324:	4b24      	ldr	r3, [pc, #144]	; (80053b8 <vPortFree+0xb8>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4013      	ands	r3, r2
 800532a:	2b00      	cmp	r3, #0
 800532c:	d10a      	bne.n	8005344 <vPortFree+0x44>
	__asm volatile
 800532e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005332:	f383 8811 	msr	BASEPRI, r3
 8005336:	f3bf 8f6f 	isb	sy
 800533a:	f3bf 8f4f 	dsb	sy
 800533e:	60fb      	str	r3, [r7, #12]
}
 8005340:	bf00      	nop
 8005342:	e7fe      	b.n	8005342 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d00a      	beq.n	8005362 <vPortFree+0x62>
	__asm volatile
 800534c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005350:	f383 8811 	msr	BASEPRI, r3
 8005354:	f3bf 8f6f 	isb	sy
 8005358:	f3bf 8f4f 	dsb	sy
 800535c:	60bb      	str	r3, [r7, #8]
}
 800535e:	bf00      	nop
 8005360:	e7fe      	b.n	8005360 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	685a      	ldr	r2, [r3, #4]
 8005366:	4b14      	ldr	r3, [pc, #80]	; (80053b8 <vPortFree+0xb8>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4013      	ands	r3, r2
 800536c:	2b00      	cmp	r3, #0
 800536e:	d01e      	beq.n	80053ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d11a      	bne.n	80053ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	685a      	ldr	r2, [r3, #4]
 800537c:	4b0e      	ldr	r3, [pc, #56]	; (80053b8 <vPortFree+0xb8>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	43db      	mvns	r3, r3
 8005382:	401a      	ands	r2, r3
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005388:	f7fe fb44 	bl	8003a14 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	685a      	ldr	r2, [r3, #4]
 8005390:	4b0a      	ldr	r3, [pc, #40]	; (80053bc <vPortFree+0xbc>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4413      	add	r3, r2
 8005396:	4a09      	ldr	r2, [pc, #36]	; (80053bc <vPortFree+0xbc>)
 8005398:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800539a:	6938      	ldr	r0, [r7, #16]
 800539c:	f000 f874 	bl	8005488 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80053a0:	4b07      	ldr	r3, [pc, #28]	; (80053c0 <vPortFree+0xc0>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	3301      	adds	r3, #1
 80053a6:	4a06      	ldr	r2, [pc, #24]	; (80053c0 <vPortFree+0xc0>)
 80053a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80053aa:	f7fe fb41 	bl	8003a30 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80053ae:	bf00      	nop
 80053b0:	3718      	adds	r7, #24
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	20001c88 	.word	0x20001c88
 80053bc:	20001c78 	.word	0x20001c78
 80053c0:	20001c84 	.word	0x20001c84

080053c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80053c4:	b480      	push	{r7}
 80053c6:	b085      	sub	sp, #20
 80053c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80053ca:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80053ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80053d0:	4b27      	ldr	r3, [pc, #156]	; (8005470 <prvHeapInit+0xac>)
 80053d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f003 0307 	and.w	r3, r3, #7
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d00c      	beq.n	80053f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	3307      	adds	r3, #7
 80053e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f023 0307 	bic.w	r3, r3, #7
 80053ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80053ec:	68ba      	ldr	r2, [r7, #8]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	1ad3      	subs	r3, r2, r3
 80053f2:	4a1f      	ldr	r2, [pc, #124]	; (8005470 <prvHeapInit+0xac>)
 80053f4:	4413      	add	r3, r2
 80053f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80053fc:	4a1d      	ldr	r2, [pc, #116]	; (8005474 <prvHeapInit+0xb0>)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005402:	4b1c      	ldr	r3, [pc, #112]	; (8005474 <prvHeapInit+0xb0>)
 8005404:	2200      	movs	r2, #0
 8005406:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	68ba      	ldr	r2, [r7, #8]
 800540c:	4413      	add	r3, r2
 800540e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005410:	2208      	movs	r2, #8
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	1a9b      	subs	r3, r3, r2
 8005416:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f023 0307 	bic.w	r3, r3, #7
 800541e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	4a15      	ldr	r2, [pc, #84]	; (8005478 <prvHeapInit+0xb4>)
 8005424:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005426:	4b14      	ldr	r3, [pc, #80]	; (8005478 <prvHeapInit+0xb4>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	2200      	movs	r2, #0
 800542c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800542e:	4b12      	ldr	r3, [pc, #72]	; (8005478 <prvHeapInit+0xb4>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	2200      	movs	r2, #0
 8005434:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	68fa      	ldr	r2, [r7, #12]
 800543e:	1ad2      	subs	r2, r2, r3
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005444:	4b0c      	ldr	r3, [pc, #48]	; (8005478 <prvHeapInit+0xb4>)
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	4a0a      	ldr	r2, [pc, #40]	; (800547c <prvHeapInit+0xb8>)
 8005452:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	4a09      	ldr	r2, [pc, #36]	; (8005480 <prvHeapInit+0xbc>)
 800545a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800545c:	4b09      	ldr	r3, [pc, #36]	; (8005484 <prvHeapInit+0xc0>)
 800545e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005462:	601a      	str	r2, [r3, #0]
}
 8005464:	bf00      	nop
 8005466:	3714      	adds	r7, #20
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr
 8005470:	200010b4 	.word	0x200010b4
 8005474:	20001c6c 	.word	0x20001c6c
 8005478:	20001c74 	.word	0x20001c74
 800547c:	20001c7c 	.word	0x20001c7c
 8005480:	20001c78 	.word	0x20001c78
 8005484:	20001c88 	.word	0x20001c88

08005488 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005488:	b480      	push	{r7}
 800548a:	b085      	sub	sp, #20
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005490:	4b28      	ldr	r3, [pc, #160]	; (8005534 <prvInsertBlockIntoFreeList+0xac>)
 8005492:	60fb      	str	r3, [r7, #12]
 8005494:	e002      	b.n	800549c <prvInsertBlockIntoFreeList+0x14>
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	60fb      	str	r3, [r7, #12]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d8f7      	bhi.n	8005496 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	68ba      	ldr	r2, [r7, #8]
 80054b0:	4413      	add	r3, r2
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d108      	bne.n	80054ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	685a      	ldr	r2, [r3, #4]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	441a      	add	r2, r3
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	68ba      	ldr	r2, [r7, #8]
 80054d4:	441a      	add	r2, r3
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	429a      	cmp	r2, r3
 80054dc:	d118      	bne.n	8005510 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	4b15      	ldr	r3, [pc, #84]	; (8005538 <prvInsertBlockIntoFreeList+0xb0>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d00d      	beq.n	8005506 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	685a      	ldr	r2, [r3, #4]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	441a      	add	r2, r3
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	601a      	str	r2, [r3, #0]
 8005504:	e008      	b.n	8005518 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005506:	4b0c      	ldr	r3, [pc, #48]	; (8005538 <prvInsertBlockIntoFreeList+0xb0>)
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	601a      	str	r2, [r3, #0]
 800550e:	e003      	b.n	8005518 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005518:	68fa      	ldr	r2, [r7, #12]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	429a      	cmp	r2, r3
 800551e:	d002      	beq.n	8005526 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005526:	bf00      	nop
 8005528:	3714      	adds	r7, #20
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr
 8005532:	bf00      	nop
 8005534:	20001c6c 	.word	0x20001c6c
 8005538:	20001c74 	.word	0x20001c74

0800553c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b082      	sub	sp, #8
 8005540:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005542:	2300      	movs	r3, #0
 8005544:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005546:	2003      	movs	r0, #3
 8005548:	f000 f94c 	bl	80057e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800554c:	2000      	movs	r0, #0
 800554e:	f000 f80d 	bl	800556c <HAL_InitTick>
 8005552:	4603      	mov	r3, r0
 8005554:	2b00      	cmp	r3, #0
 8005556:	d002      	beq.n	800555e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	71fb      	strb	r3, [r7, #7]
 800555c:	e001      	b.n	8005562 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800555e:	f003 ff4b 	bl	80093f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005562:	79fb      	ldrb	r3, [r7, #7]
}
 8005564:	4618      	mov	r0, r3
 8005566:	3708      	adds	r7, #8
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}

0800556c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005574:	2300      	movs	r3, #0
 8005576:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8005578:	4b17      	ldr	r3, [pc, #92]	; (80055d8 <HAL_InitTick+0x6c>)
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d023      	beq.n	80055c8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8005580:	4b16      	ldr	r3, [pc, #88]	; (80055dc <HAL_InitTick+0x70>)
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	4b14      	ldr	r3, [pc, #80]	; (80055d8 <HAL_InitTick+0x6c>)
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	4619      	mov	r1, r3
 800558a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800558e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005592:	fbb2 f3f3 	udiv	r3, r2, r3
 8005596:	4618      	mov	r0, r3
 8005598:	f000 f967 	bl	800586a <HAL_SYSTICK_Config>
 800559c:	4603      	mov	r3, r0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d10f      	bne.n	80055c2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2b0f      	cmp	r3, #15
 80055a6:	d809      	bhi.n	80055bc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80055a8:	2200      	movs	r2, #0
 80055aa:	6879      	ldr	r1, [r7, #4]
 80055ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80055b0:	f000 f923 	bl	80057fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80055b4:	4a0a      	ldr	r2, [pc, #40]	; (80055e0 <HAL_InitTick+0x74>)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6013      	str	r3, [r2, #0]
 80055ba:	e007      	b.n	80055cc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	73fb      	strb	r3, [r7, #15]
 80055c0:	e004      	b.n	80055cc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	73fb      	strb	r3, [r7, #15]
 80055c6:	e001      	b.n	80055cc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80055cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3710      	adds	r7, #16
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	bf00      	nop
 80055d8:	20000014 	.word	0x20000014
 80055dc:	20000018 	.word	0x20000018
 80055e0:	20000010 	.word	0x20000010

080055e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80055e4:	b480      	push	{r7}
 80055e6:	af00      	add	r7, sp, #0
  return uwTick;
 80055e8:	4b03      	ldr	r3, [pc, #12]	; (80055f8 <HAL_GetTick+0x14>)
 80055ea:	681b      	ldr	r3, [r3, #0]
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr
 80055f6:	bf00      	nop
 80055f8:	20001c8c 	.word	0x20001c8c

080055fc <__NVIC_SetPriorityGrouping>:
{
 80055fc:	b480      	push	{r7}
 80055fe:	b085      	sub	sp, #20
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f003 0307 	and.w	r3, r3, #7
 800560a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800560c:	4b0c      	ldr	r3, [pc, #48]	; (8005640 <__NVIC_SetPriorityGrouping+0x44>)
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005612:	68ba      	ldr	r2, [r7, #8]
 8005614:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005618:	4013      	ands	r3, r2
 800561a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005624:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005628:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800562c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800562e:	4a04      	ldr	r2, [pc, #16]	; (8005640 <__NVIC_SetPriorityGrouping+0x44>)
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	60d3      	str	r3, [r2, #12]
}
 8005634:	bf00      	nop
 8005636:	3714      	adds	r7, #20
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr
 8005640:	e000ed00 	.word	0xe000ed00

08005644 <__NVIC_GetPriorityGrouping>:
{
 8005644:	b480      	push	{r7}
 8005646:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005648:	4b04      	ldr	r3, [pc, #16]	; (800565c <__NVIC_GetPriorityGrouping+0x18>)
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	0a1b      	lsrs	r3, r3, #8
 800564e:	f003 0307 	and.w	r3, r3, #7
}
 8005652:	4618      	mov	r0, r3
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr
 800565c:	e000ed00 	.word	0xe000ed00

08005660 <__NVIC_EnableIRQ>:
{
 8005660:	b480      	push	{r7}
 8005662:	b083      	sub	sp, #12
 8005664:	af00      	add	r7, sp, #0
 8005666:	4603      	mov	r3, r0
 8005668:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800566a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800566e:	2b00      	cmp	r3, #0
 8005670:	db0b      	blt.n	800568a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005672:	79fb      	ldrb	r3, [r7, #7]
 8005674:	f003 021f 	and.w	r2, r3, #31
 8005678:	4907      	ldr	r1, [pc, #28]	; (8005698 <__NVIC_EnableIRQ+0x38>)
 800567a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800567e:	095b      	lsrs	r3, r3, #5
 8005680:	2001      	movs	r0, #1
 8005682:	fa00 f202 	lsl.w	r2, r0, r2
 8005686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800568a:	bf00      	nop
 800568c:	370c      	adds	r7, #12
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr
 8005696:	bf00      	nop
 8005698:	e000e100 	.word	0xe000e100

0800569c <__NVIC_DisableIRQ>:
{
 800569c:	b480      	push	{r7}
 800569e:	b083      	sub	sp, #12
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	4603      	mov	r3, r0
 80056a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	db12      	blt.n	80056d4 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80056ae:	79fb      	ldrb	r3, [r7, #7]
 80056b0:	f003 021f 	and.w	r2, r3, #31
 80056b4:	490a      	ldr	r1, [pc, #40]	; (80056e0 <__NVIC_DisableIRQ+0x44>)
 80056b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056ba:	095b      	lsrs	r3, r3, #5
 80056bc:	2001      	movs	r0, #1
 80056be:	fa00 f202 	lsl.w	r2, r0, r2
 80056c2:	3320      	adds	r3, #32
 80056c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80056c8:	f3bf 8f4f 	dsb	sy
}
 80056cc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80056ce:	f3bf 8f6f 	isb	sy
}
 80056d2:	bf00      	nop
}
 80056d4:	bf00      	nop
 80056d6:	370c      	adds	r7, #12
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr
 80056e0:	e000e100 	.word	0xe000e100

080056e4 <__NVIC_SetPriority>:
{
 80056e4:	b480      	push	{r7}
 80056e6:	b083      	sub	sp, #12
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	4603      	mov	r3, r0
 80056ec:	6039      	str	r1, [r7, #0]
 80056ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	db0a      	blt.n	800570e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	b2da      	uxtb	r2, r3
 80056fc:	490c      	ldr	r1, [pc, #48]	; (8005730 <__NVIC_SetPriority+0x4c>)
 80056fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005702:	0112      	lsls	r2, r2, #4
 8005704:	b2d2      	uxtb	r2, r2
 8005706:	440b      	add	r3, r1
 8005708:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800570c:	e00a      	b.n	8005724 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	b2da      	uxtb	r2, r3
 8005712:	4908      	ldr	r1, [pc, #32]	; (8005734 <__NVIC_SetPriority+0x50>)
 8005714:	79fb      	ldrb	r3, [r7, #7]
 8005716:	f003 030f 	and.w	r3, r3, #15
 800571a:	3b04      	subs	r3, #4
 800571c:	0112      	lsls	r2, r2, #4
 800571e:	b2d2      	uxtb	r2, r2
 8005720:	440b      	add	r3, r1
 8005722:	761a      	strb	r2, [r3, #24]
}
 8005724:	bf00      	nop
 8005726:	370c      	adds	r7, #12
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr
 8005730:	e000e100 	.word	0xe000e100
 8005734:	e000ed00 	.word	0xe000ed00

08005738 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005738:	b480      	push	{r7}
 800573a:	b089      	sub	sp, #36	; 0x24
 800573c:	af00      	add	r7, sp, #0
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f003 0307 	and.w	r3, r3, #7
 800574a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	f1c3 0307 	rsb	r3, r3, #7
 8005752:	2b04      	cmp	r3, #4
 8005754:	bf28      	it	cs
 8005756:	2304      	movcs	r3, #4
 8005758:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	3304      	adds	r3, #4
 800575e:	2b06      	cmp	r3, #6
 8005760:	d902      	bls.n	8005768 <NVIC_EncodePriority+0x30>
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	3b03      	subs	r3, #3
 8005766:	e000      	b.n	800576a <NVIC_EncodePriority+0x32>
 8005768:	2300      	movs	r3, #0
 800576a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800576c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005770:	69bb      	ldr	r3, [r7, #24]
 8005772:	fa02 f303 	lsl.w	r3, r2, r3
 8005776:	43da      	mvns	r2, r3
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	401a      	ands	r2, r3
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005780:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	fa01 f303 	lsl.w	r3, r1, r3
 800578a:	43d9      	mvns	r1, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005790:	4313      	orrs	r3, r2
         );
}
 8005792:	4618      	mov	r0, r3
 8005794:	3724      	adds	r7, #36	; 0x24
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr
	...

080057a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b082      	sub	sp, #8
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	3b01      	subs	r3, #1
 80057ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80057b0:	d301      	bcc.n	80057b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80057b2:	2301      	movs	r3, #1
 80057b4:	e00f      	b.n	80057d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80057b6:	4a0a      	ldr	r2, [pc, #40]	; (80057e0 <SysTick_Config+0x40>)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	3b01      	subs	r3, #1
 80057bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80057be:	210f      	movs	r1, #15
 80057c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057c4:	f7ff ff8e 	bl	80056e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80057c8:	4b05      	ldr	r3, [pc, #20]	; (80057e0 <SysTick_Config+0x40>)
 80057ca:	2200      	movs	r2, #0
 80057cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80057ce:	4b04      	ldr	r3, [pc, #16]	; (80057e0 <SysTick_Config+0x40>)
 80057d0:	2207      	movs	r2, #7
 80057d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80057d4:	2300      	movs	r3, #0
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3708      	adds	r7, #8
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
 80057de:	bf00      	nop
 80057e0:	e000e010 	.word	0xe000e010

080057e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b082      	sub	sp, #8
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f7ff ff05 	bl	80055fc <__NVIC_SetPriorityGrouping>
}
 80057f2:	bf00      	nop
 80057f4:	3708      	adds	r7, #8
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}

080057fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80057fa:	b580      	push	{r7, lr}
 80057fc:	b086      	sub	sp, #24
 80057fe:	af00      	add	r7, sp, #0
 8005800:	4603      	mov	r3, r0
 8005802:	60b9      	str	r1, [r7, #8]
 8005804:	607a      	str	r2, [r7, #4]
 8005806:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005808:	2300      	movs	r3, #0
 800580a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800580c:	f7ff ff1a 	bl	8005644 <__NVIC_GetPriorityGrouping>
 8005810:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	68b9      	ldr	r1, [r7, #8]
 8005816:	6978      	ldr	r0, [r7, #20]
 8005818:	f7ff ff8e 	bl	8005738 <NVIC_EncodePriority>
 800581c:	4602      	mov	r2, r0
 800581e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005822:	4611      	mov	r1, r2
 8005824:	4618      	mov	r0, r3
 8005826:	f7ff ff5d 	bl	80056e4 <__NVIC_SetPriority>
}
 800582a:	bf00      	nop
 800582c:	3718      	adds	r7, #24
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}

08005832 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005832:	b580      	push	{r7, lr}
 8005834:	b082      	sub	sp, #8
 8005836:	af00      	add	r7, sp, #0
 8005838:	4603      	mov	r3, r0
 800583a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800583c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005840:	4618      	mov	r0, r3
 8005842:	f7ff ff0d 	bl	8005660 <__NVIC_EnableIRQ>
}
 8005846:	bf00      	nop
 8005848:	3708      	adds	r7, #8
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}

0800584e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800584e:	b580      	push	{r7, lr}
 8005850:	b082      	sub	sp, #8
 8005852:	af00      	add	r7, sp, #0
 8005854:	4603      	mov	r3, r0
 8005856:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800585c:	4618      	mov	r0, r3
 800585e:	f7ff ff1d 	bl	800569c <__NVIC_DisableIRQ>
}
 8005862:	bf00      	nop
 8005864:	3708      	adds	r7, #8
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}

0800586a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800586a:	b580      	push	{r7, lr}
 800586c:	b082      	sub	sp, #8
 800586e:	af00      	add	r7, sp, #0
 8005870:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f7ff ff94 	bl	80057a0 <SysTick_Config>
 8005878:	4603      	mov	r3, r0
}
 800587a:	4618      	mov	r0, r3
 800587c:	3708      	adds	r7, #8
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
	...

08005884 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005884:	b480      	push	{r7}
 8005886:	b085      	sub	sp, #20
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d101      	bne.n	8005896 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e098      	b.n	80059c8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	461a      	mov	r2, r3
 800589c:	4b4d      	ldr	r3, [pc, #308]	; (80059d4 <HAL_DMA_Init+0x150>)
 800589e:	429a      	cmp	r2, r3
 80058a0:	d80f      	bhi.n	80058c2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	461a      	mov	r2, r3
 80058a8:	4b4b      	ldr	r3, [pc, #300]	; (80059d8 <HAL_DMA_Init+0x154>)
 80058aa:	4413      	add	r3, r2
 80058ac:	4a4b      	ldr	r2, [pc, #300]	; (80059dc <HAL_DMA_Init+0x158>)
 80058ae:	fba2 2303 	umull	r2, r3, r2, r3
 80058b2:	091b      	lsrs	r3, r3, #4
 80058b4:	009a      	lsls	r2, r3, #2
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a48      	ldr	r2, [pc, #288]	; (80059e0 <HAL_DMA_Init+0x15c>)
 80058be:	641a      	str	r2, [r3, #64]	; 0x40
 80058c0:	e00e      	b.n	80058e0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	461a      	mov	r2, r3
 80058c8:	4b46      	ldr	r3, [pc, #280]	; (80059e4 <HAL_DMA_Init+0x160>)
 80058ca:	4413      	add	r3, r2
 80058cc:	4a43      	ldr	r2, [pc, #268]	; (80059dc <HAL_DMA_Init+0x158>)
 80058ce:	fba2 2303 	umull	r2, r3, r2, r3
 80058d2:	091b      	lsrs	r3, r3, #4
 80058d4:	009a      	lsls	r2, r3, #2
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a42      	ldr	r2, [pc, #264]	; (80059e8 <HAL_DMA_Init+0x164>)
 80058de:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2202      	movs	r2, #2
 80058e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80058f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058fa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005904:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005910:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	699b      	ldr	r3, [r3, #24]
 8005916:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800591c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6a1b      	ldr	r3, [r3, #32]
 8005922:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005924:	68fa      	ldr	r2, [r7, #12]
 8005926:	4313      	orrs	r3, r2
 8005928:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	68fa      	ldr	r2, [r7, #12]
 8005930:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800593a:	d039      	beq.n	80059b0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005940:	4a27      	ldr	r2, [pc, #156]	; (80059e0 <HAL_DMA_Init+0x15c>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d11a      	bne.n	800597c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005946:	4b29      	ldr	r3, [pc, #164]	; (80059ec <HAL_DMA_Init+0x168>)
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800594e:	f003 031c 	and.w	r3, r3, #28
 8005952:	210f      	movs	r1, #15
 8005954:	fa01 f303 	lsl.w	r3, r1, r3
 8005958:	43db      	mvns	r3, r3
 800595a:	4924      	ldr	r1, [pc, #144]	; (80059ec <HAL_DMA_Init+0x168>)
 800595c:	4013      	ands	r3, r2
 800595e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005960:	4b22      	ldr	r3, [pc, #136]	; (80059ec <HAL_DMA_Init+0x168>)
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6859      	ldr	r1, [r3, #4]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800596c:	f003 031c 	and.w	r3, r3, #28
 8005970:	fa01 f303 	lsl.w	r3, r1, r3
 8005974:	491d      	ldr	r1, [pc, #116]	; (80059ec <HAL_DMA_Init+0x168>)
 8005976:	4313      	orrs	r3, r2
 8005978:	600b      	str	r3, [r1, #0]
 800597a:	e019      	b.n	80059b0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800597c:	4b1c      	ldr	r3, [pc, #112]	; (80059f0 <HAL_DMA_Init+0x16c>)
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005984:	f003 031c 	and.w	r3, r3, #28
 8005988:	210f      	movs	r1, #15
 800598a:	fa01 f303 	lsl.w	r3, r1, r3
 800598e:	43db      	mvns	r3, r3
 8005990:	4917      	ldr	r1, [pc, #92]	; (80059f0 <HAL_DMA_Init+0x16c>)
 8005992:	4013      	ands	r3, r2
 8005994:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005996:	4b16      	ldr	r3, [pc, #88]	; (80059f0 <HAL_DMA_Init+0x16c>)
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6859      	ldr	r1, [r3, #4]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059a2:	f003 031c 	and.w	r3, r3, #28
 80059a6:	fa01 f303 	lsl.w	r3, r1, r3
 80059aa:	4911      	ldr	r1, [pc, #68]	; (80059f0 <HAL_DMA_Init+0x16c>)
 80059ac:	4313      	orrs	r3, r2
 80059ae:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2201      	movs	r2, #1
 80059ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80059c6:	2300      	movs	r3, #0
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3714      	adds	r7, #20
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr
 80059d4:	40020407 	.word	0x40020407
 80059d8:	bffdfff8 	.word	0xbffdfff8
 80059dc:	cccccccd 	.word	0xcccccccd
 80059e0:	40020000 	.word	0x40020000
 80059e4:	bffdfbf8 	.word	0xbffdfbf8
 80059e8:	40020400 	.word	0x40020400
 80059ec:	400200a8 	.word	0x400200a8
 80059f0:	400204a8 	.word	0x400204a8

080059f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b086      	sub	sp, #24
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	60f8      	str	r0, [r7, #12]
 80059fc:	60b9      	str	r1, [r7, #8]
 80059fe:	607a      	str	r2, [r7, #4]
 8005a00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a02:	2300      	movs	r3, #0
 8005a04:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d101      	bne.n	8005a14 <HAL_DMA_Start_IT+0x20>
 8005a10:	2302      	movs	r3, #2
 8005a12:	e04b      	b.n	8005aac <HAL_DMA_Start_IT+0xb8>
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d13a      	bne.n	8005a9e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2202      	movs	r2, #2
 8005a2c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2200      	movs	r2, #0
 8005a34:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f022 0201 	bic.w	r2, r2, #1
 8005a44:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	68b9      	ldr	r1, [r7, #8]
 8005a4c:	68f8      	ldr	r0, [r7, #12]
 8005a4e:	f000 f921 	bl	8005c94 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d008      	beq.n	8005a6c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f042 020e 	orr.w	r2, r2, #14
 8005a68:	601a      	str	r2, [r3, #0]
 8005a6a:	e00f      	b.n	8005a8c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f022 0204 	bic.w	r2, r2, #4
 8005a7a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f042 020a 	orr.w	r2, r2, #10
 8005a8a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f042 0201 	orr.w	r2, r2, #1
 8005a9a:	601a      	str	r2, [r3, #0]
 8005a9c:	e005      	b.n	8005aaa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005aa6:	2302      	movs	r3, #2
 8005aa8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005aaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3718      	adds	r7, #24
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005abc:	2300      	movs	r3, #0
 8005abe:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	2b02      	cmp	r3, #2
 8005aca:	d005      	beq.n	8005ad8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2204      	movs	r2, #4
 8005ad0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	73fb      	strb	r3, [r7, #15]
 8005ad6:	e029      	b.n	8005b2c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f022 020e 	bic.w	r2, r2, #14
 8005ae6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f022 0201 	bic.w	r2, r2, #1
 8005af6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005afc:	f003 021c 	and.w	r2, r3, #28
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b04:	2101      	movs	r1, #1
 8005b06:	fa01 f202 	lsl.w	r2, r1, r2
 8005b0a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d003      	beq.n	8005b2c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	4798      	blx	r3
    }
  }
  return status;
 8005b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3710      	adds	r7, #16
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}

08005b36 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005b36:	b580      	push	{r7, lr}
 8005b38:	b084      	sub	sp, #16
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b52:	f003 031c 	and.w	r3, r3, #28
 8005b56:	2204      	movs	r2, #4
 8005b58:	409a      	lsls	r2, r3
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d026      	beq.n	8005bb0 <HAL_DMA_IRQHandler+0x7a>
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	f003 0304 	and.w	r3, r3, #4
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d021      	beq.n	8005bb0 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f003 0320 	and.w	r3, r3, #32
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d107      	bne.n	8005b8a <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f022 0204 	bic.w	r2, r2, #4
 8005b88:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b8e:	f003 021c 	and.w	r2, r3, #28
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b96:	2104      	movs	r1, #4
 8005b98:	fa01 f202 	lsl.w	r2, r1, r2
 8005b9c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d071      	beq.n	8005c8a <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8005bae:	e06c      	b.n	8005c8a <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bb4:	f003 031c 	and.w	r3, r3, #28
 8005bb8:	2202      	movs	r2, #2
 8005bba:	409a      	lsls	r2, r3
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	4013      	ands	r3, r2
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d02e      	beq.n	8005c22 <HAL_DMA_IRQHandler+0xec>
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	f003 0302 	and.w	r3, r3, #2
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d029      	beq.n	8005c22 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f003 0320 	and.w	r3, r3, #32
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d10b      	bne.n	8005bf4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f022 020a 	bic.w	r2, r2, #10
 8005bea:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bf8:	f003 021c 	and.w	r2, r3, #28
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c00:	2102      	movs	r1, #2
 8005c02:	fa01 f202 	lsl.w	r2, r1, r2
 8005c06:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d038      	beq.n	8005c8a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005c20:	e033      	b.n	8005c8a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c26:	f003 031c 	and.w	r3, r3, #28
 8005c2a:	2208      	movs	r2, #8
 8005c2c:	409a      	lsls	r2, r3
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	4013      	ands	r3, r2
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d02a      	beq.n	8005c8c <HAL_DMA_IRQHandler+0x156>
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	f003 0308 	and.w	r3, r3, #8
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d025      	beq.n	8005c8c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f022 020e 	bic.w	r2, r2, #14
 8005c4e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c54:	f003 021c 	and.w	r2, r3, #28
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c5c:	2101      	movs	r1, #1
 8005c5e:	fa01 f202 	lsl.w	r2, r1, r2
 8005c62:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d004      	beq.n	8005c8c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005c8a:	bf00      	nop
 8005c8c:	bf00      	nop
}
 8005c8e:	3710      	adds	r7, #16
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b085      	sub	sp, #20
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	60b9      	str	r1, [r7, #8]
 8005c9e:	607a      	str	r2, [r7, #4]
 8005ca0:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ca6:	f003 021c 	and.w	r2, r3, #28
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cae:	2101      	movs	r1, #1
 8005cb0:	fa01 f202 	lsl.w	r2, r1, r2
 8005cb4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	683a      	ldr	r2, [r7, #0]
 8005cbc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	2b10      	cmp	r3, #16
 8005cc4:	d108      	bne.n	8005cd8 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	68ba      	ldr	r2, [r7, #8]
 8005cd4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005cd6:	e007      	b.n	8005ce8 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	68ba      	ldr	r2, [r7, #8]
 8005cde:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	60da      	str	r2, [r3, #12]
}
 8005ce8:	bf00      	nop
 8005cea:	3714      	adds	r7, #20
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr

08005cf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b087      	sub	sp, #28
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005d02:	e154      	b.n	8005fae <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	2101      	movs	r1, #1
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8005d10:	4013      	ands	r3, r2
 8005d12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	f000 8146 	beq.w	8005fa8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	f003 0303 	and.w	r3, r3, #3
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d005      	beq.n	8005d34 <HAL_GPIO_Init+0x40>
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	f003 0303 	and.w	r3, r3, #3
 8005d30:	2b02      	cmp	r3, #2
 8005d32:	d130      	bne.n	8005d96 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	005b      	lsls	r3, r3, #1
 8005d3e:	2203      	movs	r2, #3
 8005d40:	fa02 f303 	lsl.w	r3, r2, r3
 8005d44:	43db      	mvns	r3, r3
 8005d46:	693a      	ldr	r2, [r7, #16]
 8005d48:	4013      	ands	r3, r2
 8005d4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	68da      	ldr	r2, [r3, #12]
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	005b      	lsls	r3, r3, #1
 8005d54:	fa02 f303 	lsl.w	r3, r2, r3
 8005d58:	693a      	ldr	r2, [r7, #16]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	693a      	ldr	r2, [r7, #16]
 8005d62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d72:	43db      	mvns	r3, r3
 8005d74:	693a      	ldr	r2, [r7, #16]
 8005d76:	4013      	ands	r3, r2
 8005d78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	091b      	lsrs	r3, r3, #4
 8005d80:	f003 0201 	and.w	r2, r3, #1
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	fa02 f303 	lsl.w	r3, r2, r3
 8005d8a:	693a      	ldr	r2, [r7, #16]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	693a      	ldr	r2, [r7, #16]
 8005d94:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	f003 0303 	and.w	r3, r3, #3
 8005d9e:	2b03      	cmp	r3, #3
 8005da0:	d017      	beq.n	8005dd2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	68db      	ldr	r3, [r3, #12]
 8005da6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	005b      	lsls	r3, r3, #1
 8005dac:	2203      	movs	r2, #3
 8005dae:	fa02 f303 	lsl.w	r3, r2, r3
 8005db2:	43db      	mvns	r3, r3
 8005db4:	693a      	ldr	r2, [r7, #16]
 8005db6:	4013      	ands	r3, r2
 8005db8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	689a      	ldr	r2, [r3, #8]
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	005b      	lsls	r3, r3, #1
 8005dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc6:	693a      	ldr	r2, [r7, #16]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	693a      	ldr	r2, [r7, #16]
 8005dd0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	f003 0303 	and.w	r3, r3, #3
 8005dda:	2b02      	cmp	r3, #2
 8005ddc:	d123      	bne.n	8005e26 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	08da      	lsrs	r2, r3, #3
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	3208      	adds	r2, #8
 8005de6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	f003 0307 	and.w	r3, r3, #7
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	220f      	movs	r2, #15
 8005df6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dfa:	43db      	mvns	r3, r3
 8005dfc:	693a      	ldr	r2, [r7, #16]
 8005dfe:	4013      	ands	r3, r2
 8005e00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	691a      	ldr	r2, [r3, #16]
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	f003 0307 	and.w	r3, r3, #7
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e12:	693a      	ldr	r2, [r7, #16]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	08da      	lsrs	r2, r3, #3
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	3208      	adds	r2, #8
 8005e20:	6939      	ldr	r1, [r7, #16]
 8005e22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	005b      	lsls	r3, r3, #1
 8005e30:	2203      	movs	r2, #3
 8005e32:	fa02 f303 	lsl.w	r3, r2, r3
 8005e36:	43db      	mvns	r3, r3
 8005e38:	693a      	ldr	r2, [r7, #16]
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	f003 0203 	and.w	r2, r3, #3
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	005b      	lsls	r3, r3, #1
 8005e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e4e:	693a      	ldr	r2, [r7, #16]
 8005e50:	4313      	orrs	r3, r2
 8005e52:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	693a      	ldr	r2, [r7, #16]
 8005e58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	f000 80a0 	beq.w	8005fa8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e68:	4b58      	ldr	r3, [pc, #352]	; (8005fcc <HAL_GPIO_Init+0x2d8>)
 8005e6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e6c:	4a57      	ldr	r2, [pc, #348]	; (8005fcc <HAL_GPIO_Init+0x2d8>)
 8005e6e:	f043 0301 	orr.w	r3, r3, #1
 8005e72:	6613      	str	r3, [r2, #96]	; 0x60
 8005e74:	4b55      	ldr	r3, [pc, #340]	; (8005fcc <HAL_GPIO_Init+0x2d8>)
 8005e76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e78:	f003 0301 	and.w	r3, r3, #1
 8005e7c:	60bb      	str	r3, [r7, #8]
 8005e7e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005e80:	4a53      	ldr	r2, [pc, #332]	; (8005fd0 <HAL_GPIO_Init+0x2dc>)
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	089b      	lsrs	r3, r3, #2
 8005e86:	3302      	adds	r3, #2
 8005e88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	f003 0303 	and.w	r3, r3, #3
 8005e94:	009b      	lsls	r3, r3, #2
 8005e96:	220f      	movs	r2, #15
 8005e98:	fa02 f303 	lsl.w	r3, r2, r3
 8005e9c:	43db      	mvns	r3, r3
 8005e9e:	693a      	ldr	r2, [r7, #16]
 8005ea0:	4013      	ands	r3, r2
 8005ea2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005eaa:	d019      	beq.n	8005ee0 <HAL_GPIO_Init+0x1ec>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	4a49      	ldr	r2, [pc, #292]	; (8005fd4 <HAL_GPIO_Init+0x2e0>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d013      	beq.n	8005edc <HAL_GPIO_Init+0x1e8>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	4a48      	ldr	r2, [pc, #288]	; (8005fd8 <HAL_GPIO_Init+0x2e4>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d00d      	beq.n	8005ed8 <HAL_GPIO_Init+0x1e4>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	4a47      	ldr	r2, [pc, #284]	; (8005fdc <HAL_GPIO_Init+0x2e8>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d007      	beq.n	8005ed4 <HAL_GPIO_Init+0x1e0>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	4a46      	ldr	r2, [pc, #280]	; (8005fe0 <HAL_GPIO_Init+0x2ec>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d101      	bne.n	8005ed0 <HAL_GPIO_Init+0x1dc>
 8005ecc:	2304      	movs	r3, #4
 8005ece:	e008      	b.n	8005ee2 <HAL_GPIO_Init+0x1ee>
 8005ed0:	2307      	movs	r3, #7
 8005ed2:	e006      	b.n	8005ee2 <HAL_GPIO_Init+0x1ee>
 8005ed4:	2303      	movs	r3, #3
 8005ed6:	e004      	b.n	8005ee2 <HAL_GPIO_Init+0x1ee>
 8005ed8:	2302      	movs	r3, #2
 8005eda:	e002      	b.n	8005ee2 <HAL_GPIO_Init+0x1ee>
 8005edc:	2301      	movs	r3, #1
 8005ede:	e000      	b.n	8005ee2 <HAL_GPIO_Init+0x1ee>
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	697a      	ldr	r2, [r7, #20]
 8005ee4:	f002 0203 	and.w	r2, r2, #3
 8005ee8:	0092      	lsls	r2, r2, #2
 8005eea:	4093      	lsls	r3, r2
 8005eec:	693a      	ldr	r2, [r7, #16]
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005ef2:	4937      	ldr	r1, [pc, #220]	; (8005fd0 <HAL_GPIO_Init+0x2dc>)
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	089b      	lsrs	r3, r3, #2
 8005ef8:	3302      	adds	r3, #2
 8005efa:	693a      	ldr	r2, [r7, #16]
 8005efc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005f00:	4b38      	ldr	r3, [pc, #224]	; (8005fe4 <HAL_GPIO_Init+0x2f0>)
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	43db      	mvns	r3, r3
 8005f0a:	693a      	ldr	r2, [r7, #16]
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d003      	beq.n	8005f24 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8005f1c:	693a      	ldr	r2, [r7, #16]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	4313      	orrs	r3, r2
 8005f22:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005f24:	4a2f      	ldr	r2, [pc, #188]	; (8005fe4 <HAL_GPIO_Init+0x2f0>)
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005f2a:	4b2e      	ldr	r3, [pc, #184]	; (8005fe4 <HAL_GPIO_Init+0x2f0>)
 8005f2c:	68db      	ldr	r3, [r3, #12]
 8005f2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	43db      	mvns	r3, r3
 8005f34:	693a      	ldr	r2, [r7, #16]
 8005f36:	4013      	ands	r3, r2
 8005f38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d003      	beq.n	8005f4e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8005f46:	693a      	ldr	r2, [r7, #16]
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005f4e:	4a25      	ldr	r2, [pc, #148]	; (8005fe4 <HAL_GPIO_Init+0x2f0>)
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005f54:	4b23      	ldr	r3, [pc, #140]	; (8005fe4 <HAL_GPIO_Init+0x2f0>)
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	43db      	mvns	r3, r3
 8005f5e:	693a      	ldr	r2, [r7, #16]
 8005f60:	4013      	ands	r3, r2
 8005f62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d003      	beq.n	8005f78 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8005f70:	693a      	ldr	r2, [r7, #16]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005f78:	4a1a      	ldr	r2, [pc, #104]	; (8005fe4 <HAL_GPIO_Init+0x2f0>)
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005f7e:	4b19      	ldr	r3, [pc, #100]	; (8005fe4 <HAL_GPIO_Init+0x2f0>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	43db      	mvns	r3, r3
 8005f88:	693a      	ldr	r2, [r7, #16]
 8005f8a:	4013      	ands	r3, r2
 8005f8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d003      	beq.n	8005fa2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005f9a:	693a      	ldr	r2, [r7, #16]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005fa2:	4a10      	ldr	r2, [pc, #64]	; (8005fe4 <HAL_GPIO_Init+0x2f0>)
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	3301      	adds	r3, #1
 8005fac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	fa22 f303 	lsr.w	r3, r2, r3
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	f47f aea3 	bne.w	8005d04 <HAL_GPIO_Init+0x10>
  }
}
 8005fbe:	bf00      	nop
 8005fc0:	bf00      	nop
 8005fc2:	371c      	adds	r7, #28
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr
 8005fcc:	40021000 	.word	0x40021000
 8005fd0:	40010000 	.word	0x40010000
 8005fd4:	48000400 	.word	0x48000400
 8005fd8:	48000800 	.word	0x48000800
 8005fdc:	48000c00 	.word	0x48000c00
 8005fe0:	48001000 	.word	0x48001000
 8005fe4:	40010400 	.word	0x40010400

08005fe8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	460b      	mov	r3, r1
 8005ff2:	807b      	strh	r3, [r7, #2]
 8005ff4:	4613      	mov	r3, r2
 8005ff6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005ff8:	787b      	ldrb	r3, [r7, #1]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d003      	beq.n	8006006 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005ffe:	887a      	ldrh	r2, [r7, #2]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006004:	e002      	b.n	800600c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006006:	887a      	ldrh	r2, [r7, #2]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800600c:	bf00      	nop
 800600e:	370c      	adds	r7, #12
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr

08006018 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b082      	sub	sp, #8
 800601c:	af00      	add	r7, sp, #0
 800601e:	4603      	mov	r3, r0
 8006020:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006022:	4b08      	ldr	r3, [pc, #32]	; (8006044 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006024:	695a      	ldr	r2, [r3, #20]
 8006026:	88fb      	ldrh	r3, [r7, #6]
 8006028:	4013      	ands	r3, r2
 800602a:	2b00      	cmp	r3, #0
 800602c:	d006      	beq.n	800603c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800602e:	4a05      	ldr	r2, [pc, #20]	; (8006044 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006030:	88fb      	ldrh	r3, [r7, #6]
 8006032:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006034:	88fb      	ldrh	r3, [r7, #6]
 8006036:	4618      	mov	r0, r3
 8006038:	f000 f806 	bl	8006048 <HAL_GPIO_EXTI_Callback>
  }
}
 800603c:	bf00      	nop
 800603e:	3708      	adds	r7, #8
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}
 8006044:	40010400 	.word	0x40010400

08006048 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006048:	b480      	push	{r7}
 800604a:	b083      	sub	sp, #12
 800604c:	af00      	add	r7, sp, #0
 800604e:	4603      	mov	r3, r0
 8006050:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006052:	bf00      	nop
 8006054:	370c      	adds	r7, #12
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr
	...

08006060 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006060:	b480      	push	{r7}
 8006062:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006064:	4b05      	ldr	r3, [pc, #20]	; (800607c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a04      	ldr	r2, [pc, #16]	; (800607c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800606a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800606e:	6013      	str	r3, [r2, #0]
}
 8006070:	bf00      	nop
 8006072:	46bd      	mov	sp, r7
 8006074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006078:	4770      	bx	lr
 800607a:	bf00      	nop
 800607c:	40007000 	.word	0x40007000

08006080 <HAL_PWR_ConfigPVD>:
  *         more details about the voltage thresholds corresponding to each
  *         detection level.
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 8006080:	b480      	push	{r7}
 8006082:	b083      	sub	sp, #12
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 8006088:	4b2b      	ldr	r3, [pc, #172]	; (8006138 <HAL_PWR_ConfigPVD+0xb8>)
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	f023 020e 	bic.w	r2, r3, #14
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4928      	ldr	r1, [pc, #160]	; (8006138 <HAL_PWR_ConfigPVD+0xb8>)
 8006096:	4313      	orrs	r3, r2
 8006098:	604b      	str	r3, [r1, #4]

  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 800609a:	4b28      	ldr	r3, [pc, #160]	; (800613c <HAL_PWR_ConfigPVD+0xbc>)
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	4a27      	ldr	r2, [pc, #156]	; (800613c <HAL_PWR_ConfigPVD+0xbc>)
 80060a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060a4:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 80060a6:	4b25      	ldr	r3, [pc, #148]	; (800613c <HAL_PWR_ConfigPVD+0xbc>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a24      	ldr	r2, [pc, #144]	; (800613c <HAL_PWR_ConfigPVD+0xbc>)
 80060ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060b0:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 80060b2:	4b22      	ldr	r3, [pc, #136]	; (800613c <HAL_PWR_ConfigPVD+0xbc>)
 80060b4:	68db      	ldr	r3, [r3, #12]
 80060b6:	4a21      	ldr	r2, [pc, #132]	; (800613c <HAL_PWR_ConfigPVD+0xbc>)
 80060b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060bc:	60d3      	str	r3, [r2, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 80060be:	4b1f      	ldr	r3, [pc, #124]	; (800613c <HAL_PWR_ConfigPVD+0xbc>)
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	4a1e      	ldr	r2, [pc, #120]	; (800613c <HAL_PWR_ConfigPVD+0xbc>)
 80060c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060c8:	6093      	str	r3, [r2, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d005      	beq.n	80060e2 <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 80060d6:	4b19      	ldr	r3, [pc, #100]	; (800613c <HAL_PWR_ConfigPVD+0xbc>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a18      	ldr	r2, [pc, #96]	; (800613c <HAL_PWR_ConfigPVD+0xbc>)
 80060dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060e0:	6013      	str	r3, [r2, #0]
  }

  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d005      	beq.n	80060fa <HAL_PWR_ConfigPVD+0x7a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 80060ee:	4b13      	ldr	r3, [pc, #76]	; (800613c <HAL_PWR_ConfigPVD+0xbc>)
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	4a12      	ldr	r2, [pc, #72]	; (800613c <HAL_PWR_ConfigPVD+0xbc>)
 80060f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060f8:	6053      	str	r3, [r2, #4]
  }

  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	f003 0301 	and.w	r3, r3, #1
 8006102:	2b00      	cmp	r3, #0
 8006104:	d005      	beq.n	8006112 <HAL_PWR_ConfigPVD+0x92>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8006106:	4b0d      	ldr	r3, [pc, #52]	; (800613c <HAL_PWR_ConfigPVD+0xbc>)
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	4a0c      	ldr	r2, [pc, #48]	; (800613c <HAL_PWR_ConfigPVD+0xbc>)
 800610c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006110:	6093      	str	r3, [r2, #8]
  }

  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	f003 0302 	and.w	r3, r3, #2
 800611a:	2b00      	cmp	r3, #0
 800611c:	d005      	beq.n	800612a <HAL_PWR_ConfigPVD+0xaa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 800611e:	4b07      	ldr	r3, [pc, #28]	; (800613c <HAL_PWR_ConfigPVD+0xbc>)
 8006120:	68db      	ldr	r3, [r3, #12]
 8006122:	4a06      	ldr	r2, [pc, #24]	; (800613c <HAL_PWR_ConfigPVD+0xbc>)
 8006124:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006128:	60d3      	str	r3, [r2, #12]
  }

  return HAL_OK;
 800612a:	2300      	movs	r3, #0
}
 800612c:	4618      	mov	r0, r3
 800612e:	370c      	adds	r7, #12
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr
 8006138:	40007000 	.word	0x40007000
 800613c:	40010400 	.word	0x40010400

08006140 <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Power Voltage Detector (PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 8006140:	b480      	push	{r7}
 8006142:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 8006144:	4b05      	ldr	r3, [pc, #20]	; (800615c <HAL_PWR_EnablePVD+0x1c>)
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	4a04      	ldr	r2, [pc, #16]	; (800615c <HAL_PWR_EnablePVD+0x1c>)
 800614a:	f043 0301 	orr.w	r3, r3, #1
 800614e:	6053      	str	r3, [r2, #4]
}
 8006150:	bf00      	nop
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr
 800615a:	bf00      	nop
 800615c:	40007000 	.word	0x40007000

08006160 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006160:	b480      	push	{r7}
 8006162:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006164:	4b04      	ldr	r3, [pc, #16]	; (8006178 <HAL_PWREx_GetVoltageRange+0x18>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800616c:	4618      	mov	r0, r3
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr
 8006176:	bf00      	nop
 8006178:	40007000 	.word	0x40007000

0800617c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800617c:	b480      	push	{r7}
 800617e:	b085      	sub	sp, #20
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800618a:	d130      	bne.n	80061ee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800618c:	4b23      	ldr	r3, [pc, #140]	; (800621c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006194:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006198:	d038      	beq.n	800620c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800619a:	4b20      	ldr	r3, [pc, #128]	; (800621c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80061a2:	4a1e      	ldr	r2, [pc, #120]	; (800621c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80061a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80061a8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80061aa:	4b1d      	ldr	r3, [pc, #116]	; (8006220 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	2232      	movs	r2, #50	; 0x32
 80061b0:	fb02 f303 	mul.w	r3, r2, r3
 80061b4:	4a1b      	ldr	r2, [pc, #108]	; (8006224 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80061b6:	fba2 2303 	umull	r2, r3, r2, r3
 80061ba:	0c9b      	lsrs	r3, r3, #18
 80061bc:	3301      	adds	r3, #1
 80061be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80061c0:	e002      	b.n	80061c8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	3b01      	subs	r3, #1
 80061c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80061c8:	4b14      	ldr	r3, [pc, #80]	; (800621c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80061ca:	695b      	ldr	r3, [r3, #20]
 80061cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061d4:	d102      	bne.n	80061dc <HAL_PWREx_ControlVoltageScaling+0x60>
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d1f2      	bne.n	80061c2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80061dc:	4b0f      	ldr	r3, [pc, #60]	; (800621c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80061de:	695b      	ldr	r3, [r3, #20]
 80061e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061e8:	d110      	bne.n	800620c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80061ea:	2303      	movs	r3, #3
 80061ec:	e00f      	b.n	800620e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80061ee:	4b0b      	ldr	r3, [pc, #44]	; (800621c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80061f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061fa:	d007      	beq.n	800620c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80061fc:	4b07      	ldr	r3, [pc, #28]	; (800621c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006204:	4a05      	ldr	r2, [pc, #20]	; (800621c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006206:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800620a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800620c:	2300      	movs	r3, #0
}
 800620e:	4618      	mov	r0, r3
 8006210:	3714      	adds	r7, #20
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr
 800621a:	bf00      	nop
 800621c:	40007000 	.word	0x40007000
 8006220:	20000018 	.word	0x20000018
 8006224:	431bde83 	.word	0x431bde83

08006228 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b088      	sub	sp, #32
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d102      	bne.n	800623c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	f000 bc02 	b.w	8006a40 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800623c:	4b96      	ldr	r3, [pc, #600]	; (8006498 <HAL_RCC_OscConfig+0x270>)
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	f003 030c 	and.w	r3, r3, #12
 8006244:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006246:	4b94      	ldr	r3, [pc, #592]	; (8006498 <HAL_RCC_OscConfig+0x270>)
 8006248:	68db      	ldr	r3, [r3, #12]
 800624a:	f003 0303 	and.w	r3, r3, #3
 800624e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f003 0310 	and.w	r3, r3, #16
 8006258:	2b00      	cmp	r3, #0
 800625a:	f000 80e4 	beq.w	8006426 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800625e:	69bb      	ldr	r3, [r7, #24]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d007      	beq.n	8006274 <HAL_RCC_OscConfig+0x4c>
 8006264:	69bb      	ldr	r3, [r7, #24]
 8006266:	2b0c      	cmp	r3, #12
 8006268:	f040 808b 	bne.w	8006382 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	2b01      	cmp	r3, #1
 8006270:	f040 8087 	bne.w	8006382 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006274:	4b88      	ldr	r3, [pc, #544]	; (8006498 <HAL_RCC_OscConfig+0x270>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f003 0302 	and.w	r3, r3, #2
 800627c:	2b00      	cmp	r3, #0
 800627e:	d005      	beq.n	800628c <HAL_RCC_OscConfig+0x64>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	699b      	ldr	r3, [r3, #24]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d101      	bne.n	800628c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	e3d9      	b.n	8006a40 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6a1a      	ldr	r2, [r3, #32]
 8006290:	4b81      	ldr	r3, [pc, #516]	; (8006498 <HAL_RCC_OscConfig+0x270>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f003 0308 	and.w	r3, r3, #8
 8006298:	2b00      	cmp	r3, #0
 800629a:	d004      	beq.n	80062a6 <HAL_RCC_OscConfig+0x7e>
 800629c:	4b7e      	ldr	r3, [pc, #504]	; (8006498 <HAL_RCC_OscConfig+0x270>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80062a4:	e005      	b.n	80062b2 <HAL_RCC_OscConfig+0x8a>
 80062a6:	4b7c      	ldr	r3, [pc, #496]	; (8006498 <HAL_RCC_OscConfig+0x270>)
 80062a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80062ac:	091b      	lsrs	r3, r3, #4
 80062ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d223      	bcs.n	80062fe <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6a1b      	ldr	r3, [r3, #32]
 80062ba:	4618      	mov	r0, r3
 80062bc:	f000 fd54 	bl	8006d68 <RCC_SetFlashLatencyFromMSIRange>
 80062c0:	4603      	mov	r3, r0
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d001      	beq.n	80062ca <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	e3ba      	b.n	8006a40 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80062ca:	4b73      	ldr	r3, [pc, #460]	; (8006498 <HAL_RCC_OscConfig+0x270>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a72      	ldr	r2, [pc, #456]	; (8006498 <HAL_RCC_OscConfig+0x270>)
 80062d0:	f043 0308 	orr.w	r3, r3, #8
 80062d4:	6013      	str	r3, [r2, #0]
 80062d6:	4b70      	ldr	r3, [pc, #448]	; (8006498 <HAL_RCC_OscConfig+0x270>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6a1b      	ldr	r3, [r3, #32]
 80062e2:	496d      	ldr	r1, [pc, #436]	; (8006498 <HAL_RCC_OscConfig+0x270>)
 80062e4:	4313      	orrs	r3, r2
 80062e6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80062e8:	4b6b      	ldr	r3, [pc, #428]	; (8006498 <HAL_RCC_OscConfig+0x270>)
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	69db      	ldr	r3, [r3, #28]
 80062f4:	021b      	lsls	r3, r3, #8
 80062f6:	4968      	ldr	r1, [pc, #416]	; (8006498 <HAL_RCC_OscConfig+0x270>)
 80062f8:	4313      	orrs	r3, r2
 80062fa:	604b      	str	r3, [r1, #4]
 80062fc:	e025      	b.n	800634a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80062fe:	4b66      	ldr	r3, [pc, #408]	; (8006498 <HAL_RCC_OscConfig+0x270>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a65      	ldr	r2, [pc, #404]	; (8006498 <HAL_RCC_OscConfig+0x270>)
 8006304:	f043 0308 	orr.w	r3, r3, #8
 8006308:	6013      	str	r3, [r2, #0]
 800630a:	4b63      	ldr	r3, [pc, #396]	; (8006498 <HAL_RCC_OscConfig+0x270>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6a1b      	ldr	r3, [r3, #32]
 8006316:	4960      	ldr	r1, [pc, #384]	; (8006498 <HAL_RCC_OscConfig+0x270>)
 8006318:	4313      	orrs	r3, r2
 800631a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800631c:	4b5e      	ldr	r3, [pc, #376]	; (8006498 <HAL_RCC_OscConfig+0x270>)
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	69db      	ldr	r3, [r3, #28]
 8006328:	021b      	lsls	r3, r3, #8
 800632a:	495b      	ldr	r1, [pc, #364]	; (8006498 <HAL_RCC_OscConfig+0x270>)
 800632c:	4313      	orrs	r3, r2
 800632e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006330:	69bb      	ldr	r3, [r7, #24]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d109      	bne.n	800634a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6a1b      	ldr	r3, [r3, #32]
 800633a:	4618      	mov	r0, r3
 800633c:	f000 fd14 	bl	8006d68 <RCC_SetFlashLatencyFromMSIRange>
 8006340:	4603      	mov	r3, r0
 8006342:	2b00      	cmp	r3, #0
 8006344:	d001      	beq.n	800634a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8006346:	2301      	movs	r3, #1
 8006348:	e37a      	b.n	8006a40 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800634a:	f000 fc81 	bl	8006c50 <HAL_RCC_GetSysClockFreq>
 800634e:	4602      	mov	r2, r0
 8006350:	4b51      	ldr	r3, [pc, #324]	; (8006498 <HAL_RCC_OscConfig+0x270>)
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	091b      	lsrs	r3, r3, #4
 8006356:	f003 030f 	and.w	r3, r3, #15
 800635a:	4950      	ldr	r1, [pc, #320]	; (800649c <HAL_RCC_OscConfig+0x274>)
 800635c:	5ccb      	ldrb	r3, [r1, r3]
 800635e:	f003 031f 	and.w	r3, r3, #31
 8006362:	fa22 f303 	lsr.w	r3, r2, r3
 8006366:	4a4e      	ldr	r2, [pc, #312]	; (80064a0 <HAL_RCC_OscConfig+0x278>)
 8006368:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800636a:	4b4e      	ldr	r3, [pc, #312]	; (80064a4 <HAL_RCC_OscConfig+0x27c>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4618      	mov	r0, r3
 8006370:	f7ff f8fc 	bl	800556c <HAL_InitTick>
 8006374:	4603      	mov	r3, r0
 8006376:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006378:	7bfb      	ldrb	r3, [r7, #15]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d052      	beq.n	8006424 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800637e:	7bfb      	ldrb	r3, [r7, #15]
 8006380:	e35e      	b.n	8006a40 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	699b      	ldr	r3, [r3, #24]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d032      	beq.n	80063f0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800638a:	4b43      	ldr	r3, [pc, #268]	; (8006498 <HAL_RCC_OscConfig+0x270>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a42      	ldr	r2, [pc, #264]	; (8006498 <HAL_RCC_OscConfig+0x270>)
 8006390:	f043 0301 	orr.w	r3, r3, #1
 8006394:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006396:	f7ff f925 	bl	80055e4 <HAL_GetTick>
 800639a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800639c:	e008      	b.n	80063b0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800639e:	f7ff f921 	bl	80055e4 <HAL_GetTick>
 80063a2:	4602      	mov	r2, r0
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	1ad3      	subs	r3, r2, r3
 80063a8:	2b02      	cmp	r3, #2
 80063aa:	d901      	bls.n	80063b0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80063ac:	2303      	movs	r3, #3
 80063ae:	e347      	b.n	8006a40 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80063b0:	4b39      	ldr	r3, [pc, #228]	; (8006498 <HAL_RCC_OscConfig+0x270>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f003 0302 	and.w	r3, r3, #2
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d0f0      	beq.n	800639e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80063bc:	4b36      	ldr	r3, [pc, #216]	; (8006498 <HAL_RCC_OscConfig+0x270>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a35      	ldr	r2, [pc, #212]	; (8006498 <HAL_RCC_OscConfig+0x270>)
 80063c2:	f043 0308 	orr.w	r3, r3, #8
 80063c6:	6013      	str	r3, [r2, #0]
 80063c8:	4b33      	ldr	r3, [pc, #204]	; (8006498 <HAL_RCC_OscConfig+0x270>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6a1b      	ldr	r3, [r3, #32]
 80063d4:	4930      	ldr	r1, [pc, #192]	; (8006498 <HAL_RCC_OscConfig+0x270>)
 80063d6:	4313      	orrs	r3, r2
 80063d8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80063da:	4b2f      	ldr	r3, [pc, #188]	; (8006498 <HAL_RCC_OscConfig+0x270>)
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	69db      	ldr	r3, [r3, #28]
 80063e6:	021b      	lsls	r3, r3, #8
 80063e8:	492b      	ldr	r1, [pc, #172]	; (8006498 <HAL_RCC_OscConfig+0x270>)
 80063ea:	4313      	orrs	r3, r2
 80063ec:	604b      	str	r3, [r1, #4]
 80063ee:	e01a      	b.n	8006426 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80063f0:	4b29      	ldr	r3, [pc, #164]	; (8006498 <HAL_RCC_OscConfig+0x270>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a28      	ldr	r2, [pc, #160]	; (8006498 <HAL_RCC_OscConfig+0x270>)
 80063f6:	f023 0301 	bic.w	r3, r3, #1
 80063fa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80063fc:	f7ff f8f2 	bl	80055e4 <HAL_GetTick>
 8006400:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006402:	e008      	b.n	8006416 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006404:	f7ff f8ee 	bl	80055e4 <HAL_GetTick>
 8006408:	4602      	mov	r2, r0
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	1ad3      	subs	r3, r2, r3
 800640e:	2b02      	cmp	r3, #2
 8006410:	d901      	bls.n	8006416 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8006412:	2303      	movs	r3, #3
 8006414:	e314      	b.n	8006a40 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006416:	4b20      	ldr	r3, [pc, #128]	; (8006498 <HAL_RCC_OscConfig+0x270>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f003 0302 	and.w	r3, r3, #2
 800641e:	2b00      	cmp	r3, #0
 8006420:	d1f0      	bne.n	8006404 <HAL_RCC_OscConfig+0x1dc>
 8006422:	e000      	b.n	8006426 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006424:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f003 0301 	and.w	r3, r3, #1
 800642e:	2b00      	cmp	r3, #0
 8006430:	d073      	beq.n	800651a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006432:	69bb      	ldr	r3, [r7, #24]
 8006434:	2b08      	cmp	r3, #8
 8006436:	d005      	beq.n	8006444 <HAL_RCC_OscConfig+0x21c>
 8006438:	69bb      	ldr	r3, [r7, #24]
 800643a:	2b0c      	cmp	r3, #12
 800643c:	d10e      	bne.n	800645c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	2b03      	cmp	r3, #3
 8006442:	d10b      	bne.n	800645c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006444:	4b14      	ldr	r3, [pc, #80]	; (8006498 <HAL_RCC_OscConfig+0x270>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800644c:	2b00      	cmp	r3, #0
 800644e:	d063      	beq.n	8006518 <HAL_RCC_OscConfig+0x2f0>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d15f      	bne.n	8006518 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	e2f1      	b.n	8006a40 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006464:	d106      	bne.n	8006474 <HAL_RCC_OscConfig+0x24c>
 8006466:	4b0c      	ldr	r3, [pc, #48]	; (8006498 <HAL_RCC_OscConfig+0x270>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a0b      	ldr	r2, [pc, #44]	; (8006498 <HAL_RCC_OscConfig+0x270>)
 800646c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006470:	6013      	str	r3, [r2, #0]
 8006472:	e025      	b.n	80064c0 <HAL_RCC_OscConfig+0x298>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800647c:	d114      	bne.n	80064a8 <HAL_RCC_OscConfig+0x280>
 800647e:	4b06      	ldr	r3, [pc, #24]	; (8006498 <HAL_RCC_OscConfig+0x270>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a05      	ldr	r2, [pc, #20]	; (8006498 <HAL_RCC_OscConfig+0x270>)
 8006484:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006488:	6013      	str	r3, [r2, #0]
 800648a:	4b03      	ldr	r3, [pc, #12]	; (8006498 <HAL_RCC_OscConfig+0x270>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a02      	ldr	r2, [pc, #8]	; (8006498 <HAL_RCC_OscConfig+0x270>)
 8006490:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006494:	6013      	str	r3, [r2, #0]
 8006496:	e013      	b.n	80064c0 <HAL_RCC_OscConfig+0x298>
 8006498:	40021000 	.word	0x40021000
 800649c:	0800ae08 	.word	0x0800ae08
 80064a0:	20000018 	.word	0x20000018
 80064a4:	20000010 	.word	0x20000010
 80064a8:	4ba0      	ldr	r3, [pc, #640]	; (800672c <HAL_RCC_OscConfig+0x504>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a9f      	ldr	r2, [pc, #636]	; (800672c <HAL_RCC_OscConfig+0x504>)
 80064ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064b2:	6013      	str	r3, [r2, #0]
 80064b4:	4b9d      	ldr	r3, [pc, #628]	; (800672c <HAL_RCC_OscConfig+0x504>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a9c      	ldr	r2, [pc, #624]	; (800672c <HAL_RCC_OscConfig+0x504>)
 80064ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d013      	beq.n	80064f0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064c8:	f7ff f88c 	bl	80055e4 <HAL_GetTick>
 80064cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80064ce:	e008      	b.n	80064e2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80064d0:	f7ff f888 	bl	80055e4 <HAL_GetTick>
 80064d4:	4602      	mov	r2, r0
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	1ad3      	subs	r3, r2, r3
 80064da:	2b64      	cmp	r3, #100	; 0x64
 80064dc:	d901      	bls.n	80064e2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80064de:	2303      	movs	r3, #3
 80064e0:	e2ae      	b.n	8006a40 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80064e2:	4b92      	ldr	r3, [pc, #584]	; (800672c <HAL_RCC_OscConfig+0x504>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d0f0      	beq.n	80064d0 <HAL_RCC_OscConfig+0x2a8>
 80064ee:	e014      	b.n	800651a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064f0:	f7ff f878 	bl	80055e4 <HAL_GetTick>
 80064f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80064f6:	e008      	b.n	800650a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80064f8:	f7ff f874 	bl	80055e4 <HAL_GetTick>
 80064fc:	4602      	mov	r2, r0
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	1ad3      	subs	r3, r2, r3
 8006502:	2b64      	cmp	r3, #100	; 0x64
 8006504:	d901      	bls.n	800650a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006506:	2303      	movs	r3, #3
 8006508:	e29a      	b.n	8006a40 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800650a:	4b88      	ldr	r3, [pc, #544]	; (800672c <HAL_RCC_OscConfig+0x504>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006512:	2b00      	cmp	r3, #0
 8006514:	d1f0      	bne.n	80064f8 <HAL_RCC_OscConfig+0x2d0>
 8006516:	e000      	b.n	800651a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006518:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f003 0302 	and.w	r3, r3, #2
 8006522:	2b00      	cmp	r3, #0
 8006524:	d060      	beq.n	80065e8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006526:	69bb      	ldr	r3, [r7, #24]
 8006528:	2b04      	cmp	r3, #4
 800652a:	d005      	beq.n	8006538 <HAL_RCC_OscConfig+0x310>
 800652c:	69bb      	ldr	r3, [r7, #24]
 800652e:	2b0c      	cmp	r3, #12
 8006530:	d119      	bne.n	8006566 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	2b02      	cmp	r3, #2
 8006536:	d116      	bne.n	8006566 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006538:	4b7c      	ldr	r3, [pc, #496]	; (800672c <HAL_RCC_OscConfig+0x504>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006540:	2b00      	cmp	r3, #0
 8006542:	d005      	beq.n	8006550 <HAL_RCC_OscConfig+0x328>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	68db      	ldr	r3, [r3, #12]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d101      	bne.n	8006550 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800654c:	2301      	movs	r3, #1
 800654e:	e277      	b.n	8006a40 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006550:	4b76      	ldr	r3, [pc, #472]	; (800672c <HAL_RCC_OscConfig+0x504>)
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	691b      	ldr	r3, [r3, #16]
 800655c:	061b      	lsls	r3, r3, #24
 800655e:	4973      	ldr	r1, [pc, #460]	; (800672c <HAL_RCC_OscConfig+0x504>)
 8006560:	4313      	orrs	r3, r2
 8006562:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006564:	e040      	b.n	80065e8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	68db      	ldr	r3, [r3, #12]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d023      	beq.n	80065b6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800656e:	4b6f      	ldr	r3, [pc, #444]	; (800672c <HAL_RCC_OscConfig+0x504>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a6e      	ldr	r2, [pc, #440]	; (800672c <HAL_RCC_OscConfig+0x504>)
 8006574:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006578:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800657a:	f7ff f833 	bl	80055e4 <HAL_GetTick>
 800657e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006580:	e008      	b.n	8006594 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006582:	f7ff f82f 	bl	80055e4 <HAL_GetTick>
 8006586:	4602      	mov	r2, r0
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	1ad3      	subs	r3, r2, r3
 800658c:	2b02      	cmp	r3, #2
 800658e:	d901      	bls.n	8006594 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006590:	2303      	movs	r3, #3
 8006592:	e255      	b.n	8006a40 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006594:	4b65      	ldr	r3, [pc, #404]	; (800672c <HAL_RCC_OscConfig+0x504>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800659c:	2b00      	cmp	r3, #0
 800659e:	d0f0      	beq.n	8006582 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065a0:	4b62      	ldr	r3, [pc, #392]	; (800672c <HAL_RCC_OscConfig+0x504>)
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	691b      	ldr	r3, [r3, #16]
 80065ac:	061b      	lsls	r3, r3, #24
 80065ae:	495f      	ldr	r1, [pc, #380]	; (800672c <HAL_RCC_OscConfig+0x504>)
 80065b0:	4313      	orrs	r3, r2
 80065b2:	604b      	str	r3, [r1, #4]
 80065b4:	e018      	b.n	80065e8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80065b6:	4b5d      	ldr	r3, [pc, #372]	; (800672c <HAL_RCC_OscConfig+0x504>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a5c      	ldr	r2, [pc, #368]	; (800672c <HAL_RCC_OscConfig+0x504>)
 80065bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065c2:	f7ff f80f 	bl	80055e4 <HAL_GetTick>
 80065c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80065c8:	e008      	b.n	80065dc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80065ca:	f7ff f80b 	bl	80055e4 <HAL_GetTick>
 80065ce:	4602      	mov	r2, r0
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	1ad3      	subs	r3, r2, r3
 80065d4:	2b02      	cmp	r3, #2
 80065d6:	d901      	bls.n	80065dc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80065d8:	2303      	movs	r3, #3
 80065da:	e231      	b.n	8006a40 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80065dc:	4b53      	ldr	r3, [pc, #332]	; (800672c <HAL_RCC_OscConfig+0x504>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d1f0      	bne.n	80065ca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f003 0308 	and.w	r3, r3, #8
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d03c      	beq.n	800666e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	695b      	ldr	r3, [r3, #20]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d01c      	beq.n	8006636 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80065fc:	4b4b      	ldr	r3, [pc, #300]	; (800672c <HAL_RCC_OscConfig+0x504>)
 80065fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006602:	4a4a      	ldr	r2, [pc, #296]	; (800672c <HAL_RCC_OscConfig+0x504>)
 8006604:	f043 0301 	orr.w	r3, r3, #1
 8006608:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800660c:	f7fe ffea 	bl	80055e4 <HAL_GetTick>
 8006610:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006612:	e008      	b.n	8006626 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006614:	f7fe ffe6 	bl	80055e4 <HAL_GetTick>
 8006618:	4602      	mov	r2, r0
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	1ad3      	subs	r3, r2, r3
 800661e:	2b02      	cmp	r3, #2
 8006620:	d901      	bls.n	8006626 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006622:	2303      	movs	r3, #3
 8006624:	e20c      	b.n	8006a40 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006626:	4b41      	ldr	r3, [pc, #260]	; (800672c <HAL_RCC_OscConfig+0x504>)
 8006628:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800662c:	f003 0302 	and.w	r3, r3, #2
 8006630:	2b00      	cmp	r3, #0
 8006632:	d0ef      	beq.n	8006614 <HAL_RCC_OscConfig+0x3ec>
 8006634:	e01b      	b.n	800666e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006636:	4b3d      	ldr	r3, [pc, #244]	; (800672c <HAL_RCC_OscConfig+0x504>)
 8006638:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800663c:	4a3b      	ldr	r2, [pc, #236]	; (800672c <HAL_RCC_OscConfig+0x504>)
 800663e:	f023 0301 	bic.w	r3, r3, #1
 8006642:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006646:	f7fe ffcd 	bl	80055e4 <HAL_GetTick>
 800664a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800664c:	e008      	b.n	8006660 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800664e:	f7fe ffc9 	bl	80055e4 <HAL_GetTick>
 8006652:	4602      	mov	r2, r0
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	1ad3      	subs	r3, r2, r3
 8006658:	2b02      	cmp	r3, #2
 800665a:	d901      	bls.n	8006660 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800665c:	2303      	movs	r3, #3
 800665e:	e1ef      	b.n	8006a40 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006660:	4b32      	ldr	r3, [pc, #200]	; (800672c <HAL_RCC_OscConfig+0x504>)
 8006662:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006666:	f003 0302 	and.w	r3, r3, #2
 800666a:	2b00      	cmp	r3, #0
 800666c:	d1ef      	bne.n	800664e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f003 0304 	and.w	r3, r3, #4
 8006676:	2b00      	cmp	r3, #0
 8006678:	f000 80a6 	beq.w	80067c8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800667c:	2300      	movs	r3, #0
 800667e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006680:	4b2a      	ldr	r3, [pc, #168]	; (800672c <HAL_RCC_OscConfig+0x504>)
 8006682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006688:	2b00      	cmp	r3, #0
 800668a:	d10d      	bne.n	80066a8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800668c:	4b27      	ldr	r3, [pc, #156]	; (800672c <HAL_RCC_OscConfig+0x504>)
 800668e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006690:	4a26      	ldr	r2, [pc, #152]	; (800672c <HAL_RCC_OscConfig+0x504>)
 8006692:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006696:	6593      	str	r3, [r2, #88]	; 0x58
 8006698:	4b24      	ldr	r3, [pc, #144]	; (800672c <HAL_RCC_OscConfig+0x504>)
 800669a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800669c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066a0:	60bb      	str	r3, [r7, #8]
 80066a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80066a4:	2301      	movs	r3, #1
 80066a6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80066a8:	4b21      	ldr	r3, [pc, #132]	; (8006730 <HAL_RCC_OscConfig+0x508>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d118      	bne.n	80066e6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80066b4:	4b1e      	ldr	r3, [pc, #120]	; (8006730 <HAL_RCC_OscConfig+0x508>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a1d      	ldr	r2, [pc, #116]	; (8006730 <HAL_RCC_OscConfig+0x508>)
 80066ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80066c0:	f7fe ff90 	bl	80055e4 <HAL_GetTick>
 80066c4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80066c6:	e008      	b.n	80066da <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066c8:	f7fe ff8c 	bl	80055e4 <HAL_GetTick>
 80066cc:	4602      	mov	r2, r0
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	1ad3      	subs	r3, r2, r3
 80066d2:	2b02      	cmp	r3, #2
 80066d4:	d901      	bls.n	80066da <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80066d6:	2303      	movs	r3, #3
 80066d8:	e1b2      	b.n	8006a40 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80066da:	4b15      	ldr	r3, [pc, #84]	; (8006730 <HAL_RCC_OscConfig+0x508>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d0f0      	beq.n	80066c8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d108      	bne.n	8006700 <HAL_RCC_OscConfig+0x4d8>
 80066ee:	4b0f      	ldr	r3, [pc, #60]	; (800672c <HAL_RCC_OscConfig+0x504>)
 80066f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066f4:	4a0d      	ldr	r2, [pc, #52]	; (800672c <HAL_RCC_OscConfig+0x504>)
 80066f6:	f043 0301 	orr.w	r3, r3, #1
 80066fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80066fe:	e029      	b.n	8006754 <HAL_RCC_OscConfig+0x52c>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	2b05      	cmp	r3, #5
 8006706:	d115      	bne.n	8006734 <HAL_RCC_OscConfig+0x50c>
 8006708:	4b08      	ldr	r3, [pc, #32]	; (800672c <HAL_RCC_OscConfig+0x504>)
 800670a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800670e:	4a07      	ldr	r2, [pc, #28]	; (800672c <HAL_RCC_OscConfig+0x504>)
 8006710:	f043 0304 	orr.w	r3, r3, #4
 8006714:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006718:	4b04      	ldr	r3, [pc, #16]	; (800672c <HAL_RCC_OscConfig+0x504>)
 800671a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800671e:	4a03      	ldr	r2, [pc, #12]	; (800672c <HAL_RCC_OscConfig+0x504>)
 8006720:	f043 0301 	orr.w	r3, r3, #1
 8006724:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006728:	e014      	b.n	8006754 <HAL_RCC_OscConfig+0x52c>
 800672a:	bf00      	nop
 800672c:	40021000 	.word	0x40021000
 8006730:	40007000 	.word	0x40007000
 8006734:	4b9a      	ldr	r3, [pc, #616]	; (80069a0 <HAL_RCC_OscConfig+0x778>)
 8006736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800673a:	4a99      	ldr	r2, [pc, #612]	; (80069a0 <HAL_RCC_OscConfig+0x778>)
 800673c:	f023 0301 	bic.w	r3, r3, #1
 8006740:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006744:	4b96      	ldr	r3, [pc, #600]	; (80069a0 <HAL_RCC_OscConfig+0x778>)
 8006746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800674a:	4a95      	ldr	r2, [pc, #596]	; (80069a0 <HAL_RCC_OscConfig+0x778>)
 800674c:	f023 0304 	bic.w	r3, r3, #4
 8006750:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d016      	beq.n	800678a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800675c:	f7fe ff42 	bl	80055e4 <HAL_GetTick>
 8006760:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006762:	e00a      	b.n	800677a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006764:	f7fe ff3e 	bl	80055e4 <HAL_GetTick>
 8006768:	4602      	mov	r2, r0
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	1ad3      	subs	r3, r2, r3
 800676e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006772:	4293      	cmp	r3, r2
 8006774:	d901      	bls.n	800677a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8006776:	2303      	movs	r3, #3
 8006778:	e162      	b.n	8006a40 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800677a:	4b89      	ldr	r3, [pc, #548]	; (80069a0 <HAL_RCC_OscConfig+0x778>)
 800677c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006780:	f003 0302 	and.w	r3, r3, #2
 8006784:	2b00      	cmp	r3, #0
 8006786:	d0ed      	beq.n	8006764 <HAL_RCC_OscConfig+0x53c>
 8006788:	e015      	b.n	80067b6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800678a:	f7fe ff2b 	bl	80055e4 <HAL_GetTick>
 800678e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006790:	e00a      	b.n	80067a8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006792:	f7fe ff27 	bl	80055e4 <HAL_GetTick>
 8006796:	4602      	mov	r2, r0
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	1ad3      	subs	r3, r2, r3
 800679c:	f241 3288 	movw	r2, #5000	; 0x1388
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d901      	bls.n	80067a8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80067a4:	2303      	movs	r3, #3
 80067a6:	e14b      	b.n	8006a40 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80067a8:	4b7d      	ldr	r3, [pc, #500]	; (80069a0 <HAL_RCC_OscConfig+0x778>)
 80067aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067ae:	f003 0302 	and.w	r3, r3, #2
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d1ed      	bne.n	8006792 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80067b6:	7ffb      	ldrb	r3, [r7, #31]
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d105      	bne.n	80067c8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80067bc:	4b78      	ldr	r3, [pc, #480]	; (80069a0 <HAL_RCC_OscConfig+0x778>)
 80067be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067c0:	4a77      	ldr	r2, [pc, #476]	; (80069a0 <HAL_RCC_OscConfig+0x778>)
 80067c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067c6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f003 0320 	and.w	r3, r3, #32
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d03c      	beq.n	800684e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d01c      	beq.n	8006816 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80067dc:	4b70      	ldr	r3, [pc, #448]	; (80069a0 <HAL_RCC_OscConfig+0x778>)
 80067de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80067e2:	4a6f      	ldr	r2, [pc, #444]	; (80069a0 <HAL_RCC_OscConfig+0x778>)
 80067e4:	f043 0301 	orr.w	r3, r3, #1
 80067e8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067ec:	f7fe fefa 	bl	80055e4 <HAL_GetTick>
 80067f0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80067f2:	e008      	b.n	8006806 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80067f4:	f7fe fef6 	bl	80055e4 <HAL_GetTick>
 80067f8:	4602      	mov	r2, r0
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	1ad3      	subs	r3, r2, r3
 80067fe:	2b02      	cmp	r3, #2
 8006800:	d901      	bls.n	8006806 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8006802:	2303      	movs	r3, #3
 8006804:	e11c      	b.n	8006a40 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006806:	4b66      	ldr	r3, [pc, #408]	; (80069a0 <HAL_RCC_OscConfig+0x778>)
 8006808:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800680c:	f003 0302 	and.w	r3, r3, #2
 8006810:	2b00      	cmp	r3, #0
 8006812:	d0ef      	beq.n	80067f4 <HAL_RCC_OscConfig+0x5cc>
 8006814:	e01b      	b.n	800684e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006816:	4b62      	ldr	r3, [pc, #392]	; (80069a0 <HAL_RCC_OscConfig+0x778>)
 8006818:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800681c:	4a60      	ldr	r2, [pc, #384]	; (80069a0 <HAL_RCC_OscConfig+0x778>)
 800681e:	f023 0301 	bic.w	r3, r3, #1
 8006822:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006826:	f7fe fedd 	bl	80055e4 <HAL_GetTick>
 800682a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800682c:	e008      	b.n	8006840 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800682e:	f7fe fed9 	bl	80055e4 <HAL_GetTick>
 8006832:	4602      	mov	r2, r0
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	1ad3      	subs	r3, r2, r3
 8006838:	2b02      	cmp	r3, #2
 800683a:	d901      	bls.n	8006840 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800683c:	2303      	movs	r3, #3
 800683e:	e0ff      	b.n	8006a40 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006840:	4b57      	ldr	r3, [pc, #348]	; (80069a0 <HAL_RCC_OscConfig+0x778>)
 8006842:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006846:	f003 0302 	and.w	r3, r3, #2
 800684a:	2b00      	cmp	r3, #0
 800684c:	d1ef      	bne.n	800682e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006852:	2b00      	cmp	r3, #0
 8006854:	f000 80f3 	beq.w	8006a3e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800685c:	2b02      	cmp	r3, #2
 800685e:	f040 80c9 	bne.w	80069f4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006862:	4b4f      	ldr	r3, [pc, #316]	; (80069a0 <HAL_RCC_OscConfig+0x778>)
 8006864:	68db      	ldr	r3, [r3, #12]
 8006866:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	f003 0203 	and.w	r2, r3, #3
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006872:	429a      	cmp	r2, r3
 8006874:	d12c      	bne.n	80068d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006880:	3b01      	subs	r3, #1
 8006882:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006884:	429a      	cmp	r2, r3
 8006886:	d123      	bne.n	80068d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006892:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006894:	429a      	cmp	r2, r3
 8006896:	d11b      	bne.n	80068d0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068a2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d113      	bne.n	80068d0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068b2:	085b      	lsrs	r3, r3, #1
 80068b4:	3b01      	subs	r3, #1
 80068b6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d109      	bne.n	80068d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c6:	085b      	lsrs	r3, r3, #1
 80068c8:	3b01      	subs	r3, #1
 80068ca:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d06b      	beq.n	80069a8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80068d0:	69bb      	ldr	r3, [r7, #24]
 80068d2:	2b0c      	cmp	r3, #12
 80068d4:	d062      	beq.n	800699c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80068d6:	4b32      	ldr	r3, [pc, #200]	; (80069a0 <HAL_RCC_OscConfig+0x778>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d001      	beq.n	80068e6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	e0ac      	b.n	8006a40 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80068e6:	4b2e      	ldr	r3, [pc, #184]	; (80069a0 <HAL_RCC_OscConfig+0x778>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a2d      	ldr	r2, [pc, #180]	; (80069a0 <HAL_RCC_OscConfig+0x778>)
 80068ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80068f0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80068f2:	f7fe fe77 	bl	80055e4 <HAL_GetTick>
 80068f6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80068f8:	e008      	b.n	800690c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068fa:	f7fe fe73 	bl	80055e4 <HAL_GetTick>
 80068fe:	4602      	mov	r2, r0
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	1ad3      	subs	r3, r2, r3
 8006904:	2b02      	cmp	r3, #2
 8006906:	d901      	bls.n	800690c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8006908:	2303      	movs	r3, #3
 800690a:	e099      	b.n	8006a40 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800690c:	4b24      	ldr	r3, [pc, #144]	; (80069a0 <HAL_RCC_OscConfig+0x778>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006914:	2b00      	cmp	r3, #0
 8006916:	d1f0      	bne.n	80068fa <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006918:	4b21      	ldr	r3, [pc, #132]	; (80069a0 <HAL_RCC_OscConfig+0x778>)
 800691a:	68da      	ldr	r2, [r3, #12]
 800691c:	4b21      	ldr	r3, [pc, #132]	; (80069a4 <HAL_RCC_OscConfig+0x77c>)
 800691e:	4013      	ands	r3, r2
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006924:	687a      	ldr	r2, [r7, #4]
 8006926:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006928:	3a01      	subs	r2, #1
 800692a:	0112      	lsls	r2, r2, #4
 800692c:	4311      	orrs	r1, r2
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006932:	0212      	lsls	r2, r2, #8
 8006934:	4311      	orrs	r1, r2
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800693a:	0852      	lsrs	r2, r2, #1
 800693c:	3a01      	subs	r2, #1
 800693e:	0552      	lsls	r2, r2, #21
 8006940:	4311      	orrs	r1, r2
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006946:	0852      	lsrs	r2, r2, #1
 8006948:	3a01      	subs	r2, #1
 800694a:	0652      	lsls	r2, r2, #25
 800694c:	4311      	orrs	r1, r2
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006952:	06d2      	lsls	r2, r2, #27
 8006954:	430a      	orrs	r2, r1
 8006956:	4912      	ldr	r1, [pc, #72]	; (80069a0 <HAL_RCC_OscConfig+0x778>)
 8006958:	4313      	orrs	r3, r2
 800695a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800695c:	4b10      	ldr	r3, [pc, #64]	; (80069a0 <HAL_RCC_OscConfig+0x778>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a0f      	ldr	r2, [pc, #60]	; (80069a0 <HAL_RCC_OscConfig+0x778>)
 8006962:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006966:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006968:	4b0d      	ldr	r3, [pc, #52]	; (80069a0 <HAL_RCC_OscConfig+0x778>)
 800696a:	68db      	ldr	r3, [r3, #12]
 800696c:	4a0c      	ldr	r2, [pc, #48]	; (80069a0 <HAL_RCC_OscConfig+0x778>)
 800696e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006972:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006974:	f7fe fe36 	bl	80055e4 <HAL_GetTick>
 8006978:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800697a:	e008      	b.n	800698e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800697c:	f7fe fe32 	bl	80055e4 <HAL_GetTick>
 8006980:	4602      	mov	r2, r0
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	1ad3      	subs	r3, r2, r3
 8006986:	2b02      	cmp	r3, #2
 8006988:	d901      	bls.n	800698e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800698a:	2303      	movs	r3, #3
 800698c:	e058      	b.n	8006a40 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800698e:	4b04      	ldr	r3, [pc, #16]	; (80069a0 <HAL_RCC_OscConfig+0x778>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006996:	2b00      	cmp	r3, #0
 8006998:	d0f0      	beq.n	800697c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800699a:	e050      	b.n	8006a3e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800699c:	2301      	movs	r3, #1
 800699e:	e04f      	b.n	8006a40 <HAL_RCC_OscConfig+0x818>
 80069a0:	40021000 	.word	0x40021000
 80069a4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80069a8:	4b27      	ldr	r3, [pc, #156]	; (8006a48 <HAL_RCC_OscConfig+0x820>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d144      	bne.n	8006a3e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80069b4:	4b24      	ldr	r3, [pc, #144]	; (8006a48 <HAL_RCC_OscConfig+0x820>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a23      	ldr	r2, [pc, #140]	; (8006a48 <HAL_RCC_OscConfig+0x820>)
 80069ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80069be:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80069c0:	4b21      	ldr	r3, [pc, #132]	; (8006a48 <HAL_RCC_OscConfig+0x820>)
 80069c2:	68db      	ldr	r3, [r3, #12]
 80069c4:	4a20      	ldr	r2, [pc, #128]	; (8006a48 <HAL_RCC_OscConfig+0x820>)
 80069c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80069ca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80069cc:	f7fe fe0a 	bl	80055e4 <HAL_GetTick>
 80069d0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80069d2:	e008      	b.n	80069e6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069d4:	f7fe fe06 	bl	80055e4 <HAL_GetTick>
 80069d8:	4602      	mov	r2, r0
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	1ad3      	subs	r3, r2, r3
 80069de:	2b02      	cmp	r3, #2
 80069e0:	d901      	bls.n	80069e6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80069e2:	2303      	movs	r3, #3
 80069e4:	e02c      	b.n	8006a40 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80069e6:	4b18      	ldr	r3, [pc, #96]	; (8006a48 <HAL_RCC_OscConfig+0x820>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d0f0      	beq.n	80069d4 <HAL_RCC_OscConfig+0x7ac>
 80069f2:	e024      	b.n	8006a3e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80069f4:	69bb      	ldr	r3, [r7, #24]
 80069f6:	2b0c      	cmp	r3, #12
 80069f8:	d01f      	beq.n	8006a3a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069fa:	4b13      	ldr	r3, [pc, #76]	; (8006a48 <HAL_RCC_OscConfig+0x820>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a12      	ldr	r2, [pc, #72]	; (8006a48 <HAL_RCC_OscConfig+0x820>)
 8006a00:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a06:	f7fe fded 	bl	80055e4 <HAL_GetTick>
 8006a0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a0c:	e008      	b.n	8006a20 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a0e:	f7fe fde9 	bl	80055e4 <HAL_GetTick>
 8006a12:	4602      	mov	r2, r0
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	1ad3      	subs	r3, r2, r3
 8006a18:	2b02      	cmp	r3, #2
 8006a1a:	d901      	bls.n	8006a20 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8006a1c:	2303      	movs	r3, #3
 8006a1e:	e00f      	b.n	8006a40 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a20:	4b09      	ldr	r3, [pc, #36]	; (8006a48 <HAL_RCC_OscConfig+0x820>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d1f0      	bne.n	8006a0e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8006a2c:	4b06      	ldr	r3, [pc, #24]	; (8006a48 <HAL_RCC_OscConfig+0x820>)
 8006a2e:	68da      	ldr	r2, [r3, #12]
 8006a30:	4905      	ldr	r1, [pc, #20]	; (8006a48 <HAL_RCC_OscConfig+0x820>)
 8006a32:	4b06      	ldr	r3, [pc, #24]	; (8006a4c <HAL_RCC_OscConfig+0x824>)
 8006a34:	4013      	ands	r3, r2
 8006a36:	60cb      	str	r3, [r1, #12]
 8006a38:	e001      	b.n	8006a3e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	e000      	b.n	8006a40 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8006a3e:	2300      	movs	r3, #0
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3720      	adds	r7, #32
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}
 8006a48:	40021000 	.word	0x40021000
 8006a4c:	feeefffc 	.word	0xfeeefffc

08006a50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b084      	sub	sp, #16
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d101      	bne.n	8006a64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a60:	2301      	movs	r3, #1
 8006a62:	e0e7      	b.n	8006c34 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006a64:	4b75      	ldr	r3, [pc, #468]	; (8006c3c <HAL_RCC_ClockConfig+0x1ec>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f003 0307 	and.w	r3, r3, #7
 8006a6c:	683a      	ldr	r2, [r7, #0]
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	d910      	bls.n	8006a94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a72:	4b72      	ldr	r3, [pc, #456]	; (8006c3c <HAL_RCC_ClockConfig+0x1ec>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f023 0207 	bic.w	r2, r3, #7
 8006a7a:	4970      	ldr	r1, [pc, #448]	; (8006c3c <HAL_RCC_ClockConfig+0x1ec>)
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a82:	4b6e      	ldr	r3, [pc, #440]	; (8006c3c <HAL_RCC_ClockConfig+0x1ec>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f003 0307 	and.w	r3, r3, #7
 8006a8a:	683a      	ldr	r2, [r7, #0]
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d001      	beq.n	8006a94 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006a90:	2301      	movs	r3, #1
 8006a92:	e0cf      	b.n	8006c34 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f003 0302 	and.w	r3, r3, #2
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d010      	beq.n	8006ac2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	689a      	ldr	r2, [r3, #8]
 8006aa4:	4b66      	ldr	r3, [pc, #408]	; (8006c40 <HAL_RCC_ClockConfig+0x1f0>)
 8006aa6:	689b      	ldr	r3, [r3, #8]
 8006aa8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d908      	bls.n	8006ac2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ab0:	4b63      	ldr	r3, [pc, #396]	; (8006c40 <HAL_RCC_ClockConfig+0x1f0>)
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	4960      	ldr	r1, [pc, #384]	; (8006c40 <HAL_RCC_ClockConfig+0x1f0>)
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f003 0301 	and.w	r3, r3, #1
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d04c      	beq.n	8006b68 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	2b03      	cmp	r3, #3
 8006ad4:	d107      	bne.n	8006ae6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ad6:	4b5a      	ldr	r3, [pc, #360]	; (8006c40 <HAL_RCC_ClockConfig+0x1f0>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d121      	bne.n	8006b26 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e0a6      	b.n	8006c34 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	2b02      	cmp	r3, #2
 8006aec:	d107      	bne.n	8006afe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006aee:	4b54      	ldr	r3, [pc, #336]	; (8006c40 <HAL_RCC_ClockConfig+0x1f0>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d115      	bne.n	8006b26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	e09a      	b.n	8006c34 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d107      	bne.n	8006b16 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006b06:	4b4e      	ldr	r3, [pc, #312]	; (8006c40 <HAL_RCC_ClockConfig+0x1f0>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f003 0302 	and.w	r3, r3, #2
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d109      	bne.n	8006b26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	e08e      	b.n	8006c34 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b16:	4b4a      	ldr	r3, [pc, #296]	; (8006c40 <HAL_RCC_ClockConfig+0x1f0>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d101      	bne.n	8006b26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006b22:	2301      	movs	r3, #1
 8006b24:	e086      	b.n	8006c34 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006b26:	4b46      	ldr	r3, [pc, #280]	; (8006c40 <HAL_RCC_ClockConfig+0x1f0>)
 8006b28:	689b      	ldr	r3, [r3, #8]
 8006b2a:	f023 0203 	bic.w	r2, r3, #3
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	4943      	ldr	r1, [pc, #268]	; (8006c40 <HAL_RCC_ClockConfig+0x1f0>)
 8006b34:	4313      	orrs	r3, r2
 8006b36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b38:	f7fe fd54 	bl	80055e4 <HAL_GetTick>
 8006b3c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b3e:	e00a      	b.n	8006b56 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b40:	f7fe fd50 	bl	80055e4 <HAL_GetTick>
 8006b44:	4602      	mov	r2, r0
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	1ad3      	subs	r3, r2, r3
 8006b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d901      	bls.n	8006b56 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006b52:	2303      	movs	r3, #3
 8006b54:	e06e      	b.n	8006c34 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b56:	4b3a      	ldr	r3, [pc, #232]	; (8006c40 <HAL_RCC_ClockConfig+0x1f0>)
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	f003 020c 	and.w	r2, r3, #12
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	009b      	lsls	r3, r3, #2
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d1eb      	bne.n	8006b40 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f003 0302 	and.w	r3, r3, #2
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d010      	beq.n	8006b96 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	689a      	ldr	r2, [r3, #8]
 8006b78:	4b31      	ldr	r3, [pc, #196]	; (8006c40 <HAL_RCC_ClockConfig+0x1f0>)
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b80:	429a      	cmp	r2, r3
 8006b82:	d208      	bcs.n	8006b96 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b84:	4b2e      	ldr	r3, [pc, #184]	; (8006c40 <HAL_RCC_ClockConfig+0x1f0>)
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	492b      	ldr	r1, [pc, #172]	; (8006c40 <HAL_RCC_ClockConfig+0x1f0>)
 8006b92:	4313      	orrs	r3, r2
 8006b94:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006b96:	4b29      	ldr	r3, [pc, #164]	; (8006c3c <HAL_RCC_ClockConfig+0x1ec>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f003 0307 	and.w	r3, r3, #7
 8006b9e:	683a      	ldr	r2, [r7, #0]
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d210      	bcs.n	8006bc6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ba4:	4b25      	ldr	r3, [pc, #148]	; (8006c3c <HAL_RCC_ClockConfig+0x1ec>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f023 0207 	bic.w	r2, r3, #7
 8006bac:	4923      	ldr	r1, [pc, #140]	; (8006c3c <HAL_RCC_ClockConfig+0x1ec>)
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bb4:	4b21      	ldr	r3, [pc, #132]	; (8006c3c <HAL_RCC_ClockConfig+0x1ec>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f003 0307 	and.w	r3, r3, #7
 8006bbc:	683a      	ldr	r2, [r7, #0]
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	d001      	beq.n	8006bc6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	e036      	b.n	8006c34 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f003 0304 	and.w	r3, r3, #4
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d008      	beq.n	8006be4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006bd2:	4b1b      	ldr	r3, [pc, #108]	; (8006c40 <HAL_RCC_ClockConfig+0x1f0>)
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	68db      	ldr	r3, [r3, #12]
 8006bde:	4918      	ldr	r1, [pc, #96]	; (8006c40 <HAL_RCC_ClockConfig+0x1f0>)
 8006be0:	4313      	orrs	r3, r2
 8006be2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f003 0308 	and.w	r3, r3, #8
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d009      	beq.n	8006c04 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006bf0:	4b13      	ldr	r3, [pc, #76]	; (8006c40 <HAL_RCC_ClockConfig+0x1f0>)
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	691b      	ldr	r3, [r3, #16]
 8006bfc:	00db      	lsls	r3, r3, #3
 8006bfe:	4910      	ldr	r1, [pc, #64]	; (8006c40 <HAL_RCC_ClockConfig+0x1f0>)
 8006c00:	4313      	orrs	r3, r2
 8006c02:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006c04:	f000 f824 	bl	8006c50 <HAL_RCC_GetSysClockFreq>
 8006c08:	4602      	mov	r2, r0
 8006c0a:	4b0d      	ldr	r3, [pc, #52]	; (8006c40 <HAL_RCC_ClockConfig+0x1f0>)
 8006c0c:	689b      	ldr	r3, [r3, #8]
 8006c0e:	091b      	lsrs	r3, r3, #4
 8006c10:	f003 030f 	and.w	r3, r3, #15
 8006c14:	490b      	ldr	r1, [pc, #44]	; (8006c44 <HAL_RCC_ClockConfig+0x1f4>)
 8006c16:	5ccb      	ldrb	r3, [r1, r3]
 8006c18:	f003 031f 	and.w	r3, r3, #31
 8006c1c:	fa22 f303 	lsr.w	r3, r2, r3
 8006c20:	4a09      	ldr	r2, [pc, #36]	; (8006c48 <HAL_RCC_ClockConfig+0x1f8>)
 8006c22:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006c24:	4b09      	ldr	r3, [pc, #36]	; (8006c4c <HAL_RCC_ClockConfig+0x1fc>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f7fe fc9f 	bl	800556c <HAL_InitTick>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	72fb      	strb	r3, [r7, #11]

  return status;
 8006c32:	7afb      	ldrb	r3, [r7, #11]
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3710      	adds	r7, #16
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}
 8006c3c:	40022000 	.word	0x40022000
 8006c40:	40021000 	.word	0x40021000
 8006c44:	0800ae08 	.word	0x0800ae08
 8006c48:	20000018 	.word	0x20000018
 8006c4c:	20000010 	.word	0x20000010

08006c50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b089      	sub	sp, #36	; 0x24
 8006c54:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006c56:	2300      	movs	r3, #0
 8006c58:	61fb      	str	r3, [r7, #28]
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c5e:	4b3e      	ldr	r3, [pc, #248]	; (8006d58 <HAL_RCC_GetSysClockFreq+0x108>)
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	f003 030c 	and.w	r3, r3, #12
 8006c66:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006c68:	4b3b      	ldr	r3, [pc, #236]	; (8006d58 <HAL_RCC_GetSysClockFreq+0x108>)
 8006c6a:	68db      	ldr	r3, [r3, #12]
 8006c6c:	f003 0303 	and.w	r3, r3, #3
 8006c70:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d005      	beq.n	8006c84 <HAL_RCC_GetSysClockFreq+0x34>
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	2b0c      	cmp	r3, #12
 8006c7c:	d121      	bne.n	8006cc2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d11e      	bne.n	8006cc2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006c84:	4b34      	ldr	r3, [pc, #208]	; (8006d58 <HAL_RCC_GetSysClockFreq+0x108>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f003 0308 	and.w	r3, r3, #8
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d107      	bne.n	8006ca0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006c90:	4b31      	ldr	r3, [pc, #196]	; (8006d58 <HAL_RCC_GetSysClockFreq+0x108>)
 8006c92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c96:	0a1b      	lsrs	r3, r3, #8
 8006c98:	f003 030f 	and.w	r3, r3, #15
 8006c9c:	61fb      	str	r3, [r7, #28]
 8006c9e:	e005      	b.n	8006cac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006ca0:	4b2d      	ldr	r3, [pc, #180]	; (8006d58 <HAL_RCC_GetSysClockFreq+0x108>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	091b      	lsrs	r3, r3, #4
 8006ca6:	f003 030f 	and.w	r3, r3, #15
 8006caa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006cac:	4a2b      	ldr	r2, [pc, #172]	; (8006d5c <HAL_RCC_GetSysClockFreq+0x10c>)
 8006cae:	69fb      	ldr	r3, [r7, #28]
 8006cb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cb4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d10d      	bne.n	8006cd8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006cbc:	69fb      	ldr	r3, [r7, #28]
 8006cbe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006cc0:	e00a      	b.n	8006cd8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	2b04      	cmp	r3, #4
 8006cc6:	d102      	bne.n	8006cce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006cc8:	4b25      	ldr	r3, [pc, #148]	; (8006d60 <HAL_RCC_GetSysClockFreq+0x110>)
 8006cca:	61bb      	str	r3, [r7, #24]
 8006ccc:	e004      	b.n	8006cd8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	2b08      	cmp	r3, #8
 8006cd2:	d101      	bne.n	8006cd8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006cd4:	4b23      	ldr	r3, [pc, #140]	; (8006d64 <HAL_RCC_GetSysClockFreq+0x114>)
 8006cd6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	2b0c      	cmp	r3, #12
 8006cdc:	d134      	bne.n	8006d48 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006cde:	4b1e      	ldr	r3, [pc, #120]	; (8006d58 <HAL_RCC_GetSysClockFreq+0x108>)
 8006ce0:	68db      	ldr	r3, [r3, #12]
 8006ce2:	f003 0303 	and.w	r3, r3, #3
 8006ce6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	2b02      	cmp	r3, #2
 8006cec:	d003      	beq.n	8006cf6 <HAL_RCC_GetSysClockFreq+0xa6>
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	2b03      	cmp	r3, #3
 8006cf2:	d003      	beq.n	8006cfc <HAL_RCC_GetSysClockFreq+0xac>
 8006cf4:	e005      	b.n	8006d02 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006cf6:	4b1a      	ldr	r3, [pc, #104]	; (8006d60 <HAL_RCC_GetSysClockFreq+0x110>)
 8006cf8:	617b      	str	r3, [r7, #20]
      break;
 8006cfa:	e005      	b.n	8006d08 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006cfc:	4b19      	ldr	r3, [pc, #100]	; (8006d64 <HAL_RCC_GetSysClockFreq+0x114>)
 8006cfe:	617b      	str	r3, [r7, #20]
      break;
 8006d00:	e002      	b.n	8006d08 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006d02:	69fb      	ldr	r3, [r7, #28]
 8006d04:	617b      	str	r3, [r7, #20]
      break;
 8006d06:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006d08:	4b13      	ldr	r3, [pc, #76]	; (8006d58 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d0a:	68db      	ldr	r3, [r3, #12]
 8006d0c:	091b      	lsrs	r3, r3, #4
 8006d0e:	f003 0307 	and.w	r3, r3, #7
 8006d12:	3301      	adds	r3, #1
 8006d14:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006d16:	4b10      	ldr	r3, [pc, #64]	; (8006d58 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	0a1b      	lsrs	r3, r3, #8
 8006d1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d20:	697a      	ldr	r2, [r7, #20]
 8006d22:	fb03 f202 	mul.w	r2, r3, r2
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d2c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006d2e:	4b0a      	ldr	r3, [pc, #40]	; (8006d58 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d30:	68db      	ldr	r3, [r3, #12]
 8006d32:	0e5b      	lsrs	r3, r3, #25
 8006d34:	f003 0303 	and.w	r3, r3, #3
 8006d38:	3301      	adds	r3, #1
 8006d3a:	005b      	lsls	r3, r3, #1
 8006d3c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006d3e:	697a      	ldr	r2, [r7, #20]
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d46:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006d48:	69bb      	ldr	r3, [r7, #24]
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3724      	adds	r7, #36	; 0x24
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr
 8006d56:	bf00      	nop
 8006d58:	40021000 	.word	0x40021000
 8006d5c:	0800ae18 	.word	0x0800ae18
 8006d60:	00f42400 	.word	0x00f42400
 8006d64:	02dc6c00 	.word	0x02dc6c00

08006d68 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b086      	sub	sp, #24
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006d70:	2300      	movs	r3, #0
 8006d72:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006d74:	4b2a      	ldr	r3, [pc, #168]	; (8006e20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d003      	beq.n	8006d88 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006d80:	f7ff f9ee 	bl	8006160 <HAL_PWREx_GetVoltageRange>
 8006d84:	6178      	str	r0, [r7, #20]
 8006d86:	e014      	b.n	8006db2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006d88:	4b25      	ldr	r3, [pc, #148]	; (8006e20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d8c:	4a24      	ldr	r2, [pc, #144]	; (8006e20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006d8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d92:	6593      	str	r3, [r2, #88]	; 0x58
 8006d94:	4b22      	ldr	r3, [pc, #136]	; (8006e20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d9c:	60fb      	str	r3, [r7, #12]
 8006d9e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006da0:	f7ff f9de 	bl	8006160 <HAL_PWREx_GetVoltageRange>
 8006da4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006da6:	4b1e      	ldr	r3, [pc, #120]	; (8006e20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006daa:	4a1d      	ldr	r2, [pc, #116]	; (8006e20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006dac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006db0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006db8:	d10b      	bne.n	8006dd2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2b80      	cmp	r3, #128	; 0x80
 8006dbe:	d919      	bls.n	8006df4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2ba0      	cmp	r3, #160	; 0xa0
 8006dc4:	d902      	bls.n	8006dcc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006dc6:	2302      	movs	r3, #2
 8006dc8:	613b      	str	r3, [r7, #16]
 8006dca:	e013      	b.n	8006df4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006dcc:	2301      	movs	r3, #1
 8006dce:	613b      	str	r3, [r7, #16]
 8006dd0:	e010      	b.n	8006df4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2b80      	cmp	r3, #128	; 0x80
 8006dd6:	d902      	bls.n	8006dde <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006dd8:	2303      	movs	r3, #3
 8006dda:	613b      	str	r3, [r7, #16]
 8006ddc:	e00a      	b.n	8006df4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2b80      	cmp	r3, #128	; 0x80
 8006de2:	d102      	bne.n	8006dea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006de4:	2302      	movs	r3, #2
 8006de6:	613b      	str	r3, [r7, #16]
 8006de8:	e004      	b.n	8006df4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2b70      	cmp	r3, #112	; 0x70
 8006dee:	d101      	bne.n	8006df4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006df0:	2301      	movs	r3, #1
 8006df2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006df4:	4b0b      	ldr	r3, [pc, #44]	; (8006e24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f023 0207 	bic.w	r2, r3, #7
 8006dfc:	4909      	ldr	r1, [pc, #36]	; (8006e24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	4313      	orrs	r3, r2
 8006e02:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006e04:	4b07      	ldr	r3, [pc, #28]	; (8006e24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f003 0307 	and.w	r3, r3, #7
 8006e0c:	693a      	ldr	r2, [r7, #16]
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	d001      	beq.n	8006e16 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
 8006e14:	e000      	b.n	8006e18 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006e16:	2300      	movs	r3, #0
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3718      	adds	r7, #24
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}
 8006e20:	40021000 	.word	0x40021000
 8006e24:	40022000 	.word	0x40022000

08006e28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b086      	sub	sp, #24
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006e30:	2300      	movs	r3, #0
 8006e32:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006e34:	2300      	movs	r3, #0
 8006e36:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d031      	beq.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e48:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006e4c:	d01a      	beq.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8006e4e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006e52:	d814      	bhi.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d009      	beq.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006e58:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006e5c:	d10f      	bne.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8006e5e:	4b5d      	ldr	r3, [pc, #372]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006e60:	68db      	ldr	r3, [r3, #12]
 8006e62:	4a5c      	ldr	r2, [pc, #368]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006e64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e68:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006e6a:	e00c      	b.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	3304      	adds	r3, #4
 8006e70:	2100      	movs	r1, #0
 8006e72:	4618      	mov	r0, r3
 8006e74:	f000 f9f0 	bl	8007258 <RCCEx_PLLSAI1_Config>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006e7c:	e003      	b.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	74fb      	strb	r3, [r7, #19]
      break;
 8006e82:	e000      	b.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8006e84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e86:	7cfb      	ldrb	r3, [r7, #19]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d10b      	bne.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006e8c:	4b51      	ldr	r3, [pc, #324]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e92:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e9a:	494e      	ldr	r1, [pc, #312]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006ea2:	e001      	b.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ea4:	7cfb      	ldrb	r3, [r7, #19]
 8006ea6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	f000 809e 	beq.w	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006eba:	4b46      	ldr	r3, [pc, #280]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d101      	bne.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	e000      	b.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8006eca:	2300      	movs	r3, #0
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d00d      	beq.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ed0:	4b40      	ldr	r3, [pc, #256]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ed4:	4a3f      	ldr	r2, [pc, #252]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006ed6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006eda:	6593      	str	r3, [r2, #88]	; 0x58
 8006edc:	4b3d      	ldr	r3, [pc, #244]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ee0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ee4:	60bb      	str	r3, [r7, #8]
 8006ee6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006eec:	4b3a      	ldr	r3, [pc, #232]	; (8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a39      	ldr	r2, [pc, #228]	; (8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006ef2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ef6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006ef8:	f7fe fb74 	bl	80055e4 <HAL_GetTick>
 8006efc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006efe:	e009      	b.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f00:	f7fe fb70 	bl	80055e4 <HAL_GetTick>
 8006f04:	4602      	mov	r2, r0
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	1ad3      	subs	r3, r2, r3
 8006f0a:	2b02      	cmp	r3, #2
 8006f0c:	d902      	bls.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8006f0e:	2303      	movs	r3, #3
 8006f10:	74fb      	strb	r3, [r7, #19]
        break;
 8006f12:	e005      	b.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006f14:	4b30      	ldr	r3, [pc, #192]	; (8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d0ef      	beq.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8006f20:	7cfb      	ldrb	r3, [r7, #19]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d15a      	bne.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006f26:	4b2b      	ldr	r3, [pc, #172]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f30:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d01e      	beq.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f3c:	697a      	ldr	r2, [r7, #20]
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d019      	beq.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006f42:	4b24      	ldr	r3, [pc, #144]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f4c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006f4e:	4b21      	ldr	r3, [pc, #132]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f54:	4a1f      	ldr	r2, [pc, #124]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006f5e:	4b1d      	ldr	r3, [pc, #116]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f64:	4a1b      	ldr	r2, [pc, #108]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006f6e:	4a19      	ldr	r2, [pc, #100]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	f003 0301 	and.w	r3, r3, #1
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d016      	beq.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f80:	f7fe fb30 	bl	80055e4 <HAL_GetTick>
 8006f84:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006f86:	e00b      	b.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f88:	f7fe fb2c 	bl	80055e4 <HAL_GetTick>
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	1ad3      	subs	r3, r2, r3
 8006f92:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d902      	bls.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8006f9a:	2303      	movs	r3, #3
 8006f9c:	74fb      	strb	r3, [r7, #19]
            break;
 8006f9e:	e006      	b.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006fa0:	4b0c      	ldr	r3, [pc, #48]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fa6:	f003 0302 	and.w	r3, r3, #2
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d0ec      	beq.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8006fae:	7cfb      	ldrb	r3, [r7, #19]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d10b      	bne.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006fb4:	4b07      	ldr	r3, [pc, #28]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fc2:	4904      	ldr	r1, [pc, #16]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006fca:	e009      	b.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006fcc:	7cfb      	ldrb	r3, [r7, #19]
 8006fce:	74bb      	strb	r3, [r7, #18]
 8006fd0:	e006      	b.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8006fd2:	bf00      	nop
 8006fd4:	40021000 	.word	0x40021000
 8006fd8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fdc:	7cfb      	ldrb	r3, [r7, #19]
 8006fde:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006fe0:	7c7b      	ldrb	r3, [r7, #17]
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d105      	bne.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006fe6:	4b9b      	ldr	r3, [pc, #620]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fea:	4a9a      	ldr	r2, [pc, #616]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006fec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ff0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f003 0301 	and.w	r3, r3, #1
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d00a      	beq.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006ffe:	4b95      	ldr	r3, [pc, #596]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007000:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007004:	f023 0203 	bic.w	r2, r3, #3
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6a1b      	ldr	r3, [r3, #32]
 800700c:	4991      	ldr	r1, [pc, #580]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800700e:	4313      	orrs	r3, r2
 8007010:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f003 0302 	and.w	r3, r3, #2
 800701c:	2b00      	cmp	r3, #0
 800701e:	d00a      	beq.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007020:	4b8c      	ldr	r3, [pc, #560]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007026:	f023 020c 	bic.w	r2, r3, #12
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800702e:	4989      	ldr	r1, [pc, #548]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007030:	4313      	orrs	r3, r2
 8007032:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f003 0304 	and.w	r3, r3, #4
 800703e:	2b00      	cmp	r3, #0
 8007040:	d00a      	beq.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007042:	4b84      	ldr	r3, [pc, #528]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007044:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007048:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007050:	4980      	ldr	r1, [pc, #512]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007052:	4313      	orrs	r3, r2
 8007054:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f003 0320 	and.w	r3, r3, #32
 8007060:	2b00      	cmp	r3, #0
 8007062:	d00a      	beq.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007064:	4b7b      	ldr	r3, [pc, #492]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800706a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007072:	4978      	ldr	r1, [pc, #480]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007074:	4313      	orrs	r3, r2
 8007076:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007082:	2b00      	cmp	r3, #0
 8007084:	d00a      	beq.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007086:	4b73      	ldr	r3, [pc, #460]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007088:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800708c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007094:	496f      	ldr	r1, [pc, #444]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007096:	4313      	orrs	r3, r2
 8007098:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d00a      	beq.n	80070be <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80070a8:	4b6a      	ldr	r3, [pc, #424]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80070aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b6:	4967      	ldr	r1, [pc, #412]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80070b8:	4313      	orrs	r3, r2
 80070ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d00a      	beq.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80070ca:	4b62      	ldr	r3, [pc, #392]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80070cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070d0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070d8:	495e      	ldr	r1, [pc, #376]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80070da:	4313      	orrs	r3, r2
 80070dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d00a      	beq.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80070ec:	4b59      	ldr	r3, [pc, #356]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80070ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070f2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070fa:	4956      	ldr	r1, [pc, #344]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80070fc:	4313      	orrs	r3, r2
 80070fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800710a:	2b00      	cmp	r3, #0
 800710c:	d00a      	beq.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800710e:	4b51      	ldr	r3, [pc, #324]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007114:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800711c:	494d      	ldr	r1, [pc, #308]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800711e:	4313      	orrs	r3, r2
 8007120:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800712c:	2b00      	cmp	r3, #0
 800712e:	d028      	beq.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007130:	4b48      	ldr	r3, [pc, #288]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007136:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800713e:	4945      	ldr	r1, [pc, #276]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007140:	4313      	orrs	r3, r2
 8007142:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800714a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800714e:	d106      	bne.n	800715e <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007150:	4b40      	ldr	r3, [pc, #256]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007152:	68db      	ldr	r3, [r3, #12]
 8007154:	4a3f      	ldr	r2, [pc, #252]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007156:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800715a:	60d3      	str	r3, [r2, #12]
 800715c:	e011      	b.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007162:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007166:	d10c      	bne.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	3304      	adds	r3, #4
 800716c:	2101      	movs	r1, #1
 800716e:	4618      	mov	r0, r3
 8007170:	f000 f872 	bl	8007258 <RCCEx_PLLSAI1_Config>
 8007174:	4603      	mov	r3, r0
 8007176:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007178:	7cfb      	ldrb	r3, [r7, #19]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d001      	beq.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 800717e:	7cfb      	ldrb	r3, [r7, #19]
 8007180:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800718a:	2b00      	cmp	r3, #0
 800718c:	d028      	beq.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800718e:	4b31      	ldr	r3, [pc, #196]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007194:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800719c:	492d      	ldr	r1, [pc, #180]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800719e:	4313      	orrs	r3, r2
 80071a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80071ac:	d106      	bne.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80071ae:	4b29      	ldr	r3, [pc, #164]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80071b0:	68db      	ldr	r3, [r3, #12]
 80071b2:	4a28      	ldr	r2, [pc, #160]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80071b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80071b8:	60d3      	str	r3, [r2, #12]
 80071ba:	e011      	b.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80071c4:	d10c      	bne.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	3304      	adds	r3, #4
 80071ca:	2101      	movs	r1, #1
 80071cc:	4618      	mov	r0, r3
 80071ce:	f000 f843 	bl	8007258 <RCCEx_PLLSAI1_Config>
 80071d2:	4603      	mov	r3, r0
 80071d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80071d6:	7cfb      	ldrb	r3, [r7, #19]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d001      	beq.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 80071dc:	7cfb      	ldrb	r3, [r7, #19]
 80071de:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d01c      	beq.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80071ec:	4b19      	ldr	r3, [pc, #100]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80071ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071f2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071fa:	4916      	ldr	r1, [pc, #88]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80071fc:	4313      	orrs	r3, r2
 80071fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007206:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800720a:	d10c      	bne.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	3304      	adds	r3, #4
 8007210:	2102      	movs	r1, #2
 8007212:	4618      	mov	r0, r3
 8007214:	f000 f820 	bl	8007258 <RCCEx_PLLSAI1_Config>
 8007218:	4603      	mov	r3, r0
 800721a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800721c:	7cfb      	ldrb	r3, [r7, #19]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d001      	beq.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8007222:	7cfb      	ldrb	r3, [r7, #19]
 8007224:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800722e:	2b00      	cmp	r3, #0
 8007230:	d00a      	beq.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007232:	4b08      	ldr	r3, [pc, #32]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007238:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007240:	4904      	ldr	r1, [pc, #16]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007242:	4313      	orrs	r3, r2
 8007244:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007248:	7cbb      	ldrb	r3, [r7, #18]
}
 800724a:	4618      	mov	r0, r3
 800724c:	3718      	adds	r7, #24
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
 8007252:	bf00      	nop
 8007254:	40021000 	.word	0x40021000

08007258 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b084      	sub	sp, #16
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007262:	2300      	movs	r3, #0
 8007264:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007266:	4b74      	ldr	r3, [pc, #464]	; (8007438 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007268:	68db      	ldr	r3, [r3, #12]
 800726a:	f003 0303 	and.w	r3, r3, #3
 800726e:	2b00      	cmp	r3, #0
 8007270:	d018      	beq.n	80072a4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007272:	4b71      	ldr	r3, [pc, #452]	; (8007438 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007274:	68db      	ldr	r3, [r3, #12]
 8007276:	f003 0203 	and.w	r2, r3, #3
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	429a      	cmp	r2, r3
 8007280:	d10d      	bne.n	800729e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
       ||
 8007286:	2b00      	cmp	r3, #0
 8007288:	d009      	beq.n	800729e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800728a:	4b6b      	ldr	r3, [pc, #428]	; (8007438 <RCCEx_PLLSAI1_Config+0x1e0>)
 800728c:	68db      	ldr	r3, [r3, #12]
 800728e:	091b      	lsrs	r3, r3, #4
 8007290:	f003 0307 	and.w	r3, r3, #7
 8007294:	1c5a      	adds	r2, r3, #1
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	685b      	ldr	r3, [r3, #4]
       ||
 800729a:	429a      	cmp	r2, r3
 800729c:	d047      	beq.n	800732e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800729e:	2301      	movs	r3, #1
 80072a0:	73fb      	strb	r3, [r7, #15]
 80072a2:	e044      	b.n	800732e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	2b03      	cmp	r3, #3
 80072aa:	d018      	beq.n	80072de <RCCEx_PLLSAI1_Config+0x86>
 80072ac:	2b03      	cmp	r3, #3
 80072ae:	d825      	bhi.n	80072fc <RCCEx_PLLSAI1_Config+0xa4>
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d002      	beq.n	80072ba <RCCEx_PLLSAI1_Config+0x62>
 80072b4:	2b02      	cmp	r3, #2
 80072b6:	d009      	beq.n	80072cc <RCCEx_PLLSAI1_Config+0x74>
 80072b8:	e020      	b.n	80072fc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80072ba:	4b5f      	ldr	r3, [pc, #380]	; (8007438 <RCCEx_PLLSAI1_Config+0x1e0>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f003 0302 	and.w	r3, r3, #2
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d11d      	bne.n	8007302 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80072c6:	2301      	movs	r3, #1
 80072c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80072ca:	e01a      	b.n	8007302 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80072cc:	4b5a      	ldr	r3, [pc, #360]	; (8007438 <RCCEx_PLLSAI1_Config+0x1e0>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d116      	bne.n	8007306 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80072d8:	2301      	movs	r3, #1
 80072da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80072dc:	e013      	b.n	8007306 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80072de:	4b56      	ldr	r3, [pc, #344]	; (8007438 <RCCEx_PLLSAI1_Config+0x1e0>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d10f      	bne.n	800730a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80072ea:	4b53      	ldr	r3, [pc, #332]	; (8007438 <RCCEx_PLLSAI1_Config+0x1e0>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d109      	bne.n	800730a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80072f6:	2301      	movs	r3, #1
 80072f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80072fa:	e006      	b.n	800730a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80072fc:	2301      	movs	r3, #1
 80072fe:	73fb      	strb	r3, [r7, #15]
      break;
 8007300:	e004      	b.n	800730c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007302:	bf00      	nop
 8007304:	e002      	b.n	800730c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007306:	bf00      	nop
 8007308:	e000      	b.n	800730c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800730a:	bf00      	nop
    }

    if(status == HAL_OK)
 800730c:	7bfb      	ldrb	r3, [r7, #15]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d10d      	bne.n	800732e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007312:	4b49      	ldr	r3, [pc, #292]	; (8007438 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007314:	68db      	ldr	r3, [r3, #12]
 8007316:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6819      	ldr	r1, [r3, #0]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	3b01      	subs	r3, #1
 8007324:	011b      	lsls	r3, r3, #4
 8007326:	430b      	orrs	r3, r1
 8007328:	4943      	ldr	r1, [pc, #268]	; (8007438 <RCCEx_PLLSAI1_Config+0x1e0>)
 800732a:	4313      	orrs	r3, r2
 800732c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800732e:	7bfb      	ldrb	r3, [r7, #15]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d17c      	bne.n	800742e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007334:	4b40      	ldr	r3, [pc, #256]	; (8007438 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a3f      	ldr	r2, [pc, #252]	; (8007438 <RCCEx_PLLSAI1_Config+0x1e0>)
 800733a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800733e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007340:	f7fe f950 	bl	80055e4 <HAL_GetTick>
 8007344:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007346:	e009      	b.n	800735c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007348:	f7fe f94c 	bl	80055e4 <HAL_GetTick>
 800734c:	4602      	mov	r2, r0
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	1ad3      	subs	r3, r2, r3
 8007352:	2b02      	cmp	r3, #2
 8007354:	d902      	bls.n	800735c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007356:	2303      	movs	r3, #3
 8007358:	73fb      	strb	r3, [r7, #15]
        break;
 800735a:	e005      	b.n	8007368 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800735c:	4b36      	ldr	r3, [pc, #216]	; (8007438 <RCCEx_PLLSAI1_Config+0x1e0>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007364:	2b00      	cmp	r3, #0
 8007366:	d1ef      	bne.n	8007348 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007368:	7bfb      	ldrb	r3, [r7, #15]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d15f      	bne.n	800742e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d110      	bne.n	8007396 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007374:	4b30      	ldr	r3, [pc, #192]	; (8007438 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007376:	691b      	ldr	r3, [r3, #16]
 8007378:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800737c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007380:	687a      	ldr	r2, [r7, #4]
 8007382:	6892      	ldr	r2, [r2, #8]
 8007384:	0211      	lsls	r1, r2, #8
 8007386:	687a      	ldr	r2, [r7, #4]
 8007388:	68d2      	ldr	r2, [r2, #12]
 800738a:	06d2      	lsls	r2, r2, #27
 800738c:	430a      	orrs	r2, r1
 800738e:	492a      	ldr	r1, [pc, #168]	; (8007438 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007390:	4313      	orrs	r3, r2
 8007392:	610b      	str	r3, [r1, #16]
 8007394:	e027      	b.n	80073e6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	2b01      	cmp	r3, #1
 800739a:	d112      	bne.n	80073c2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800739c:	4b26      	ldr	r3, [pc, #152]	; (8007438 <RCCEx_PLLSAI1_Config+0x1e0>)
 800739e:	691b      	ldr	r3, [r3, #16]
 80073a0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80073a4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	6892      	ldr	r2, [r2, #8]
 80073ac:	0211      	lsls	r1, r2, #8
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	6912      	ldr	r2, [r2, #16]
 80073b2:	0852      	lsrs	r2, r2, #1
 80073b4:	3a01      	subs	r2, #1
 80073b6:	0552      	lsls	r2, r2, #21
 80073b8:	430a      	orrs	r2, r1
 80073ba:	491f      	ldr	r1, [pc, #124]	; (8007438 <RCCEx_PLLSAI1_Config+0x1e0>)
 80073bc:	4313      	orrs	r3, r2
 80073be:	610b      	str	r3, [r1, #16]
 80073c0:	e011      	b.n	80073e6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80073c2:	4b1d      	ldr	r3, [pc, #116]	; (8007438 <RCCEx_PLLSAI1_Config+0x1e0>)
 80073c4:	691b      	ldr	r3, [r3, #16]
 80073c6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80073ca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80073ce:	687a      	ldr	r2, [r7, #4]
 80073d0:	6892      	ldr	r2, [r2, #8]
 80073d2:	0211      	lsls	r1, r2, #8
 80073d4:	687a      	ldr	r2, [r7, #4]
 80073d6:	6952      	ldr	r2, [r2, #20]
 80073d8:	0852      	lsrs	r2, r2, #1
 80073da:	3a01      	subs	r2, #1
 80073dc:	0652      	lsls	r2, r2, #25
 80073de:	430a      	orrs	r2, r1
 80073e0:	4915      	ldr	r1, [pc, #84]	; (8007438 <RCCEx_PLLSAI1_Config+0x1e0>)
 80073e2:	4313      	orrs	r3, r2
 80073e4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80073e6:	4b14      	ldr	r3, [pc, #80]	; (8007438 <RCCEx_PLLSAI1_Config+0x1e0>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a13      	ldr	r2, [pc, #76]	; (8007438 <RCCEx_PLLSAI1_Config+0x1e0>)
 80073ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80073f0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073f2:	f7fe f8f7 	bl	80055e4 <HAL_GetTick>
 80073f6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80073f8:	e009      	b.n	800740e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80073fa:	f7fe f8f3 	bl	80055e4 <HAL_GetTick>
 80073fe:	4602      	mov	r2, r0
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	1ad3      	subs	r3, r2, r3
 8007404:	2b02      	cmp	r3, #2
 8007406:	d902      	bls.n	800740e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8007408:	2303      	movs	r3, #3
 800740a:	73fb      	strb	r3, [r7, #15]
          break;
 800740c:	e005      	b.n	800741a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800740e:	4b0a      	ldr	r3, [pc, #40]	; (8007438 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007416:	2b00      	cmp	r3, #0
 8007418:	d0ef      	beq.n	80073fa <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800741a:	7bfb      	ldrb	r3, [r7, #15]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d106      	bne.n	800742e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007420:	4b05      	ldr	r3, [pc, #20]	; (8007438 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007422:	691a      	ldr	r2, [r3, #16]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	699b      	ldr	r3, [r3, #24]
 8007428:	4903      	ldr	r1, [pc, #12]	; (8007438 <RCCEx_PLLSAI1_Config+0x1e0>)
 800742a:	4313      	orrs	r3, r2
 800742c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800742e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007430:	4618      	mov	r0, r3
 8007432:	3710      	adds	r7, #16
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}
 8007438:	40021000 	.word	0x40021000

0800743c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b084      	sub	sp, #16
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007444:	2301      	movs	r3, #1
 8007446:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d06c      	beq.n	8007528 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007454:	b2db      	uxtb	r3, r3
 8007456:	2b00      	cmp	r3, #0
 8007458:	d106      	bne.n	8007468 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2200      	movs	r2, #0
 800745e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f001 fffa 	bl	800945c <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2202      	movs	r2, #2
 800746c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	22ca      	movs	r2, #202	; 0xca
 8007476:	625a      	str	r2, [r3, #36]	; 0x24
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	2253      	movs	r2, #83	; 0x53
 800747e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f000 f87c 	bl	800757e <RTC_EnterInitMode>
 8007486:	4603      	mov	r3, r0
 8007488:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800748a:	7bfb      	ldrb	r3, [r7, #15]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d14b      	bne.n	8007528 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	689b      	ldr	r3, [r3, #8]
 8007496:	687a      	ldr	r2, [r7, #4]
 8007498:	6812      	ldr	r2, [r2, #0]
 800749a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800749e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074a2:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	6899      	ldr	r1, [r3, #8]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	685a      	ldr	r2, [r3, #4]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	691b      	ldr	r3, [r3, #16]
 80074b2:	431a      	orrs	r2, r3
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	699b      	ldr	r3, [r3, #24]
 80074b8:	431a      	orrs	r2, r3
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	430a      	orrs	r2, r1
 80074c0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	687a      	ldr	r2, [r7, #4]
 80074c8:	68d2      	ldr	r2, [r2, #12]
 80074ca:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	6919      	ldr	r1, [r3, #16]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	689b      	ldr	r3, [r3, #8]
 80074d6:	041a      	lsls	r2, r3, #16
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	430a      	orrs	r2, r1
 80074de:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f000 f87f 	bl	80075e4 <RTC_ExitInitMode>
 80074e6:	4603      	mov	r3, r0
 80074e8:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80074ea:	7bfb      	ldrb	r3, [r7, #15]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d11b      	bne.n	8007528 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f022 0203 	bic.w	r2, r2, #3
 80074fe:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	69da      	ldr	r2, [r3, #28]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	695b      	ldr	r3, [r3, #20]
 800750e:	431a      	orrs	r2, r3
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	430a      	orrs	r2, r1
 8007516:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	22ff      	movs	r2, #255	; 0xff
 800751e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2201      	movs	r2, #1
 8007524:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8007528:	7bfb      	ldrb	r3, [r7, #15]
}
 800752a:	4618      	mov	r0, r3
 800752c:	3710      	adds	r7, #16
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}

08007532 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007532:	b580      	push	{r7, lr}
 8007534:	b084      	sub	sp, #16
 8007536:	af00      	add	r7, sp, #0
 8007538:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	68da      	ldr	r2, [r3, #12]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007548:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800754a:	f7fe f84b 	bl	80055e4 <HAL_GetTick>
 800754e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007550:	e009      	b.n	8007566 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007552:	f7fe f847 	bl	80055e4 <HAL_GetTick>
 8007556:	4602      	mov	r2, r0
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	1ad3      	subs	r3, r2, r3
 800755c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007560:	d901      	bls.n	8007566 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8007562:	2303      	movs	r3, #3
 8007564:	e007      	b.n	8007576 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	68db      	ldr	r3, [r3, #12]
 800756c:	f003 0320 	and.w	r3, r3, #32
 8007570:	2b00      	cmp	r3, #0
 8007572:	d0ee      	beq.n	8007552 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8007574:	2300      	movs	r3, #0
}
 8007576:	4618      	mov	r0, r3
 8007578:	3710      	adds	r7, #16
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}

0800757e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800757e:	b580      	push	{r7, lr}
 8007580:	b084      	sub	sp, #16
 8007582:	af00      	add	r7, sp, #0
 8007584:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007586:	2300      	movs	r3, #0
 8007588:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	68db      	ldr	r3, [r3, #12]
 8007590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007594:	2b00      	cmp	r3, #0
 8007596:	d120      	bne.n	80075da <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80075a0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80075a2:	f7fe f81f 	bl	80055e4 <HAL_GetTick>
 80075a6:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80075a8:	e00d      	b.n	80075c6 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80075aa:	f7fe f81b 	bl	80055e4 <HAL_GetTick>
 80075ae:	4602      	mov	r2, r0
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	1ad3      	subs	r3, r2, r3
 80075b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80075b8:	d905      	bls.n	80075c6 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80075ba:	2303      	movs	r3, #3
 80075bc:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2203      	movs	r2, #3
 80075c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	68db      	ldr	r3, [r3, #12]
 80075cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d102      	bne.n	80075da <RTC_EnterInitMode+0x5c>
 80075d4:	7bfb      	ldrb	r3, [r7, #15]
 80075d6:	2b03      	cmp	r3, #3
 80075d8:	d1e7      	bne.n	80075aa <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80075da:	7bfb      	ldrb	r3, [r7, #15]
}
 80075dc:	4618      	mov	r0, r3
 80075de:	3710      	adds	r7, #16
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}

080075e4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b084      	sub	sp, #16
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80075ec:	2300      	movs	r3, #0
 80075ee:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80075f0:	4b1a      	ldr	r3, [pc, #104]	; (800765c <RTC_ExitInitMode+0x78>)
 80075f2:	68db      	ldr	r3, [r3, #12]
 80075f4:	4a19      	ldr	r2, [pc, #100]	; (800765c <RTC_ExitInitMode+0x78>)
 80075f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075fa:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80075fc:	4b17      	ldr	r3, [pc, #92]	; (800765c <RTC_ExitInitMode+0x78>)
 80075fe:	689b      	ldr	r3, [r3, #8]
 8007600:	f003 0320 	and.w	r3, r3, #32
 8007604:	2b00      	cmp	r3, #0
 8007606:	d10c      	bne.n	8007622 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f7ff ff92 	bl	8007532 <HAL_RTC_WaitForSynchro>
 800760e:	4603      	mov	r3, r0
 8007610:	2b00      	cmp	r3, #0
 8007612:	d01e      	beq.n	8007652 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2203      	movs	r2, #3
 8007618:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800761c:	2303      	movs	r3, #3
 800761e:	73fb      	strb	r3, [r7, #15]
 8007620:	e017      	b.n	8007652 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007622:	4b0e      	ldr	r3, [pc, #56]	; (800765c <RTC_ExitInitMode+0x78>)
 8007624:	689b      	ldr	r3, [r3, #8]
 8007626:	4a0d      	ldr	r2, [pc, #52]	; (800765c <RTC_ExitInitMode+0x78>)
 8007628:	f023 0320 	bic.w	r3, r3, #32
 800762c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f7ff ff7f 	bl	8007532 <HAL_RTC_WaitForSynchro>
 8007634:	4603      	mov	r3, r0
 8007636:	2b00      	cmp	r3, #0
 8007638:	d005      	beq.n	8007646 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2203      	movs	r2, #3
 800763e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8007642:	2303      	movs	r3, #3
 8007644:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007646:	4b05      	ldr	r3, [pc, #20]	; (800765c <RTC_ExitInitMode+0x78>)
 8007648:	689b      	ldr	r3, [r3, #8]
 800764a:	4a04      	ldr	r2, [pc, #16]	; (800765c <RTC_ExitInitMode+0x78>)
 800764c:	f043 0320 	orr.w	r3, r3, #32
 8007650:	6093      	str	r3, [r2, #8]
  }

  return status;
 8007652:	7bfb      	ldrb	r3, [r7, #15]
}
 8007654:	4618      	mov	r0, r3
 8007656:	3710      	adds	r7, #16
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}
 800765c:	40002800 	.word	0x40002800

08007660 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b082      	sub	sp, #8
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d101      	bne.n	8007672 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800766e:	2301      	movs	r3, #1
 8007670:	e049      	b.n	8007706 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007678:	b2db      	uxtb	r3, r3
 800767a:	2b00      	cmp	r3, #0
 800767c:	d106      	bne.n	800768c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2200      	movs	r2, #0
 8007682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f001 ff04 	bl	8009494 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2202      	movs	r2, #2
 8007690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681a      	ldr	r2, [r3, #0]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	3304      	adds	r3, #4
 800769c:	4619      	mov	r1, r3
 800769e:	4610      	mov	r0, r2
 80076a0:	f000 fe2e 	bl	8008300 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2201      	movs	r2, #1
 80076a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2201      	movs	r2, #1
 80076b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2201      	movs	r2, #1
 80076b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2201      	movs	r2, #1
 80076c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2201      	movs	r2, #1
 80076c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2201      	movs	r2, #1
 80076d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2201      	movs	r2, #1
 80076d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2201      	movs	r2, #1
 80076e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2201      	movs	r2, #1
 80076e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2201      	movs	r2, #1
 80076f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2201      	movs	r2, #1
 80076f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2201      	movs	r2, #1
 8007700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007704:	2300      	movs	r3, #0
}
 8007706:	4618      	mov	r0, r3
 8007708:	3708      	adds	r7, #8
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}

0800770e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800770e:	b580      	push	{r7, lr}
 8007710:	b082      	sub	sp, #8
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d101      	bne.n	8007720 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800771c:	2301      	movs	r3, #1
 800771e:	e049      	b.n	80077b4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007726:	b2db      	uxtb	r3, r3
 8007728:	2b00      	cmp	r3, #0
 800772a:	d106      	bne.n	800773a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2200      	movs	r2, #0
 8007730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f001 ffa5 	bl	8009684 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2202      	movs	r2, #2
 800773e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681a      	ldr	r2, [r3, #0]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	3304      	adds	r3, #4
 800774a:	4619      	mov	r1, r3
 800774c:	4610      	mov	r0, r2
 800774e:	f000 fdd7 	bl	8008300 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2201      	movs	r2, #1
 8007756:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2201      	movs	r2, #1
 800775e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2201      	movs	r2, #1
 8007766:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2201      	movs	r2, #1
 800776e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2201      	movs	r2, #1
 8007776:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2201      	movs	r2, #1
 800777e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2201      	movs	r2, #1
 8007786:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2201      	movs	r2, #1
 800778e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2201      	movs	r2, #1
 8007796:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2201      	movs	r2, #1
 800779e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2201      	movs	r2, #1
 80077a6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2201      	movs	r2, #1
 80077ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80077b2:	2300      	movs	r3, #0
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3708      	adds	r7, #8
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}

080077bc <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b086      	sub	sp, #24
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	60f8      	str	r0, [r7, #12]
 80077c4:	60b9      	str	r1, [r7, #8]
 80077c6:	607a      	str	r2, [r7, #4]
 80077c8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80077ca:	2300      	movs	r3, #0
 80077cc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d109      	bne.n	80077e8 <HAL_TIM_PWM_Start_DMA+0x2c>
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80077da:	b2db      	uxtb	r3, r3
 80077dc:	2b02      	cmp	r3, #2
 80077de:	bf0c      	ite	eq
 80077e0:	2301      	moveq	r3, #1
 80077e2:	2300      	movne	r3, #0
 80077e4:	b2db      	uxtb	r3, r3
 80077e6:	e03c      	b.n	8007862 <HAL_TIM_PWM_Start_DMA+0xa6>
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	2b04      	cmp	r3, #4
 80077ec:	d109      	bne.n	8007802 <HAL_TIM_PWM_Start_DMA+0x46>
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	2b02      	cmp	r3, #2
 80077f8:	bf0c      	ite	eq
 80077fa:	2301      	moveq	r3, #1
 80077fc:	2300      	movne	r3, #0
 80077fe:	b2db      	uxtb	r3, r3
 8007800:	e02f      	b.n	8007862 <HAL_TIM_PWM_Start_DMA+0xa6>
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	2b08      	cmp	r3, #8
 8007806:	d109      	bne.n	800781c <HAL_TIM_PWM_Start_DMA+0x60>
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800780e:	b2db      	uxtb	r3, r3
 8007810:	2b02      	cmp	r3, #2
 8007812:	bf0c      	ite	eq
 8007814:	2301      	moveq	r3, #1
 8007816:	2300      	movne	r3, #0
 8007818:	b2db      	uxtb	r3, r3
 800781a:	e022      	b.n	8007862 <HAL_TIM_PWM_Start_DMA+0xa6>
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	2b0c      	cmp	r3, #12
 8007820:	d109      	bne.n	8007836 <HAL_TIM_PWM_Start_DMA+0x7a>
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007828:	b2db      	uxtb	r3, r3
 800782a:	2b02      	cmp	r3, #2
 800782c:	bf0c      	ite	eq
 800782e:	2301      	moveq	r3, #1
 8007830:	2300      	movne	r3, #0
 8007832:	b2db      	uxtb	r3, r3
 8007834:	e015      	b.n	8007862 <HAL_TIM_PWM_Start_DMA+0xa6>
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	2b10      	cmp	r3, #16
 800783a:	d109      	bne.n	8007850 <HAL_TIM_PWM_Start_DMA+0x94>
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007842:	b2db      	uxtb	r3, r3
 8007844:	2b02      	cmp	r3, #2
 8007846:	bf0c      	ite	eq
 8007848:	2301      	moveq	r3, #1
 800784a:	2300      	movne	r3, #0
 800784c:	b2db      	uxtb	r3, r3
 800784e:	e008      	b.n	8007862 <HAL_TIM_PWM_Start_DMA+0xa6>
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007856:	b2db      	uxtb	r3, r3
 8007858:	2b02      	cmp	r3, #2
 800785a:	bf0c      	ite	eq
 800785c:	2301      	moveq	r3, #1
 800785e:	2300      	movne	r3, #0
 8007860:	b2db      	uxtb	r3, r3
 8007862:	2b00      	cmp	r3, #0
 8007864:	d001      	beq.n	800786a <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8007866:	2302      	movs	r3, #2
 8007868:	e18d      	b.n	8007b86 <HAL_TIM_PWM_Start_DMA+0x3ca>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d109      	bne.n	8007884 <HAL_TIM_PWM_Start_DMA+0xc8>
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007876:	b2db      	uxtb	r3, r3
 8007878:	2b01      	cmp	r3, #1
 800787a:	bf0c      	ite	eq
 800787c:	2301      	moveq	r3, #1
 800787e:	2300      	movne	r3, #0
 8007880:	b2db      	uxtb	r3, r3
 8007882:	e03c      	b.n	80078fe <HAL_TIM_PWM_Start_DMA+0x142>
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	2b04      	cmp	r3, #4
 8007888:	d109      	bne.n	800789e <HAL_TIM_PWM_Start_DMA+0xe2>
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007890:	b2db      	uxtb	r3, r3
 8007892:	2b01      	cmp	r3, #1
 8007894:	bf0c      	ite	eq
 8007896:	2301      	moveq	r3, #1
 8007898:	2300      	movne	r3, #0
 800789a:	b2db      	uxtb	r3, r3
 800789c:	e02f      	b.n	80078fe <HAL_TIM_PWM_Start_DMA+0x142>
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	2b08      	cmp	r3, #8
 80078a2:	d109      	bne.n	80078b8 <HAL_TIM_PWM_Start_DMA+0xfc>
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80078aa:	b2db      	uxtb	r3, r3
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	bf0c      	ite	eq
 80078b0:	2301      	moveq	r3, #1
 80078b2:	2300      	movne	r3, #0
 80078b4:	b2db      	uxtb	r3, r3
 80078b6:	e022      	b.n	80078fe <HAL_TIM_PWM_Start_DMA+0x142>
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	2b0c      	cmp	r3, #12
 80078bc:	d109      	bne.n	80078d2 <HAL_TIM_PWM_Start_DMA+0x116>
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	2b01      	cmp	r3, #1
 80078c8:	bf0c      	ite	eq
 80078ca:	2301      	moveq	r3, #1
 80078cc:	2300      	movne	r3, #0
 80078ce:	b2db      	uxtb	r3, r3
 80078d0:	e015      	b.n	80078fe <HAL_TIM_PWM_Start_DMA+0x142>
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	2b10      	cmp	r3, #16
 80078d6:	d109      	bne.n	80078ec <HAL_TIM_PWM_Start_DMA+0x130>
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80078de:	b2db      	uxtb	r3, r3
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	bf0c      	ite	eq
 80078e4:	2301      	moveq	r3, #1
 80078e6:	2300      	movne	r3, #0
 80078e8:	b2db      	uxtb	r3, r3
 80078ea:	e008      	b.n	80078fe <HAL_TIM_PWM_Start_DMA+0x142>
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80078f2:	b2db      	uxtb	r3, r3
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	bf0c      	ite	eq
 80078f8:	2301      	moveq	r3, #1
 80078fa:	2300      	movne	r3, #0
 80078fc:	b2db      	uxtb	r3, r3
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d034      	beq.n	800796c <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d002      	beq.n	800790e <HAL_TIM_PWM_Start_DMA+0x152>
 8007908:	887b      	ldrh	r3, [r7, #2]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d101      	bne.n	8007912 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800790e:	2301      	movs	r3, #1
 8007910:	e139      	b.n	8007b86 <HAL_TIM_PWM_Start_DMA+0x3ca>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d104      	bne.n	8007922 <HAL_TIM_PWM_Start_DMA+0x166>
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2202      	movs	r2, #2
 800791c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007920:	e026      	b.n	8007970 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	2b04      	cmp	r3, #4
 8007926:	d104      	bne.n	8007932 <HAL_TIM_PWM_Start_DMA+0x176>
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	2202      	movs	r2, #2
 800792c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007930:	e01e      	b.n	8007970 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	2b08      	cmp	r3, #8
 8007936:	d104      	bne.n	8007942 <HAL_TIM_PWM_Start_DMA+0x186>
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	2202      	movs	r2, #2
 800793c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007940:	e016      	b.n	8007970 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	2b0c      	cmp	r3, #12
 8007946:	d104      	bne.n	8007952 <HAL_TIM_PWM_Start_DMA+0x196>
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	2202      	movs	r2, #2
 800794c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007950:	e00e      	b.n	8007970 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	2b10      	cmp	r3, #16
 8007956:	d104      	bne.n	8007962 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	2202      	movs	r2, #2
 800795c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007960:	e006      	b.n	8007970 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	2202      	movs	r2, #2
 8007966:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800796a:	e001      	b.n	8007970 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800796c:	2301      	movs	r3, #1
 800796e:	e10a      	b.n	8007b86 <HAL_TIM_PWM_Start_DMA+0x3ca>
  }

  switch (Channel)
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	2b0c      	cmp	r3, #12
 8007974:	f200 80ae 	bhi.w	8007ad4 <HAL_TIM_PWM_Start_DMA+0x318>
 8007978:	a201      	add	r2, pc, #4	; (adr r2, 8007980 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800797a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800797e:	bf00      	nop
 8007980:	080079b5 	.word	0x080079b5
 8007984:	08007ad5 	.word	0x08007ad5
 8007988:	08007ad5 	.word	0x08007ad5
 800798c:	08007ad5 	.word	0x08007ad5
 8007990:	080079fd 	.word	0x080079fd
 8007994:	08007ad5 	.word	0x08007ad5
 8007998:	08007ad5 	.word	0x08007ad5
 800799c:	08007ad5 	.word	0x08007ad5
 80079a0:	08007a45 	.word	0x08007a45
 80079a4:	08007ad5 	.word	0x08007ad5
 80079a8:	08007ad5 	.word	0x08007ad5
 80079ac:	08007ad5 	.word	0x08007ad5
 80079b0:	08007a8d 	.word	0x08007a8d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b8:	4a75      	ldr	r2, [pc, #468]	; (8007b90 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 80079ba:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c0:	4a74      	ldr	r2, [pc, #464]	; (8007b94 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 80079c2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c8:	4a73      	ldr	r2, [pc, #460]	; (8007b98 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 80079ca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80079d0:	6879      	ldr	r1, [r7, #4]
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	3334      	adds	r3, #52	; 0x34
 80079d8:	461a      	mov	r2, r3
 80079da:	887b      	ldrh	r3, [r7, #2]
 80079dc:	f7fe f80a 	bl	80059f4 <HAL_DMA_Start_IT>
 80079e0:	4603      	mov	r3, r0
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d001      	beq.n	80079ea <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80079e6:	2301      	movs	r3, #1
 80079e8:	e0cd      	b.n	8007b86 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	68da      	ldr	r2, [r3, #12]
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079f8:	60da      	str	r2, [r3, #12]
      break;
 80079fa:	e06e      	b.n	8007ada <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a00:	4a63      	ldr	r2, [pc, #396]	; (8007b90 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8007a02:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a08:	4a62      	ldr	r2, [pc, #392]	; (8007b94 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8007a0a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a10:	4a61      	ldr	r2, [pc, #388]	; (8007b98 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8007a12:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8007a18:	6879      	ldr	r1, [r7, #4]
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	3338      	adds	r3, #56	; 0x38
 8007a20:	461a      	mov	r2, r3
 8007a22:	887b      	ldrh	r3, [r7, #2]
 8007a24:	f7fd ffe6 	bl	80059f4 <HAL_DMA_Start_IT>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d001      	beq.n	8007a32 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	e0a9      	b.n	8007b86 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	68da      	ldr	r2, [r3, #12]
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007a40:	60da      	str	r2, [r3, #12]
      break;
 8007a42:	e04a      	b.n	8007ada <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a48:	4a51      	ldr	r2, [pc, #324]	; (8007b90 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8007a4a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a50:	4a50      	ldr	r2, [pc, #320]	; (8007b94 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8007a52:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a58:	4a4f      	ldr	r2, [pc, #316]	; (8007b98 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8007a5a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007a60:	6879      	ldr	r1, [r7, #4]
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	333c      	adds	r3, #60	; 0x3c
 8007a68:	461a      	mov	r2, r3
 8007a6a:	887b      	ldrh	r3, [r7, #2]
 8007a6c:	f7fd ffc2 	bl	80059f4 <HAL_DMA_Start_IT>
 8007a70:	4603      	mov	r3, r0
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d001      	beq.n	8007a7a <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007a76:	2301      	movs	r3, #1
 8007a78:	e085      	b.n	8007b86 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	68da      	ldr	r2, [r3, #12]
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a88:	60da      	str	r2, [r3, #12]
      break;
 8007a8a:	e026      	b.n	8007ada <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a90:	4a3f      	ldr	r2, [pc, #252]	; (8007b90 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8007a92:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a98:	4a3e      	ldr	r2, [pc, #248]	; (8007b94 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8007a9a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aa0:	4a3d      	ldr	r2, [pc, #244]	; (8007b98 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8007aa2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007aa8:	6879      	ldr	r1, [r7, #4]
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	3340      	adds	r3, #64	; 0x40
 8007ab0:	461a      	mov	r2, r3
 8007ab2:	887b      	ldrh	r3, [r7, #2]
 8007ab4:	f7fd ff9e 	bl	80059f4 <HAL_DMA_Start_IT>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d001      	beq.n	8007ac2 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007abe:	2301      	movs	r3, #1
 8007ac0:	e061      	b.n	8007b86 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	68da      	ldr	r2, [r3, #12]
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007ad0:	60da      	str	r2, [r3, #12]
      break;
 8007ad2:	e002      	b.n	8007ada <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	75fb      	strb	r3, [r7, #23]
      break;
 8007ad8:	bf00      	nop
  }

  if (status == HAL_OK)
 8007ada:	7dfb      	ldrb	r3, [r7, #23]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d151      	bne.n	8007b84 <HAL_TIM_PWM_Start_DMA+0x3c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	2201      	movs	r2, #1
 8007ae6:	68b9      	ldr	r1, [r7, #8]
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f000 ff85 	bl	80089f8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4a2a      	ldr	r2, [pc, #168]	; (8007b9c <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d009      	beq.n	8007b0c <HAL_TIM_PWM_Start_DMA+0x350>
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a28      	ldr	r2, [pc, #160]	; (8007ba0 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d004      	beq.n	8007b0c <HAL_TIM_PWM_Start_DMA+0x350>
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4a27      	ldr	r2, [pc, #156]	; (8007ba4 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d101      	bne.n	8007b10 <HAL_TIM_PWM_Start_DMA+0x354>
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	e000      	b.n	8007b12 <HAL_TIM_PWM_Start_DMA+0x356>
 8007b10:	2300      	movs	r3, #0
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d007      	beq.n	8007b26 <HAL_TIM_PWM_Start_DMA+0x36a>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007b24:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4a1c      	ldr	r2, [pc, #112]	; (8007b9c <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d009      	beq.n	8007b44 <HAL_TIM_PWM_Start_DMA+0x388>
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b38:	d004      	beq.n	8007b44 <HAL_TIM_PWM_Start_DMA+0x388>
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4a18      	ldr	r2, [pc, #96]	; (8007ba0 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d115      	bne.n	8007b70 <HAL_TIM_PWM_Start_DMA+0x3b4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	689a      	ldr	r2, [r3, #8]
 8007b4a:	4b17      	ldr	r3, [pc, #92]	; (8007ba8 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8007b4c:	4013      	ands	r3, r2
 8007b4e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	2b06      	cmp	r3, #6
 8007b54:	d015      	beq.n	8007b82 <HAL_TIM_PWM_Start_DMA+0x3c6>
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b5c:	d011      	beq.n	8007b82 <HAL_TIM_PWM_Start_DMA+0x3c6>
      {
        __HAL_TIM_ENABLE(htim);
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	681a      	ldr	r2, [r3, #0]
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f042 0201 	orr.w	r2, r2, #1
 8007b6c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b6e:	e008      	b.n	8007b82 <HAL_TIM_PWM_Start_DMA+0x3c6>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	681a      	ldr	r2, [r3, #0]
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f042 0201 	orr.w	r2, r2, #1
 8007b7e:	601a      	str	r2, [r3, #0]
 8007b80:	e000      	b.n	8007b84 <HAL_TIM_PWM_Start_DMA+0x3c8>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b82:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8007b84:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3718      	adds	r7, #24
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}
 8007b8e:	bf00      	nop
 8007b90:	080081f1 	.word	0x080081f1
 8007b94:	08008299 	.word	0x08008299
 8007b98:	0800815f 	.word	0x0800815f
 8007b9c:	40012c00 	.word	0x40012c00
 8007ba0:	40014000 	.word	0x40014000
 8007ba4:	40014400 	.word	0x40014400
 8007ba8:	00010007 	.word	0x00010007

08007bac <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b084      	sub	sp, #16
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	2b0c      	cmp	r3, #12
 8007bbe:	d855      	bhi.n	8007c6c <HAL_TIM_PWM_Stop_DMA+0xc0>
 8007bc0:	a201      	add	r2, pc, #4	; (adr r2, 8007bc8 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8007bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bc6:	bf00      	nop
 8007bc8:	08007bfd 	.word	0x08007bfd
 8007bcc:	08007c6d 	.word	0x08007c6d
 8007bd0:	08007c6d 	.word	0x08007c6d
 8007bd4:	08007c6d 	.word	0x08007c6d
 8007bd8:	08007c19 	.word	0x08007c19
 8007bdc:	08007c6d 	.word	0x08007c6d
 8007be0:	08007c6d 	.word	0x08007c6d
 8007be4:	08007c6d 	.word	0x08007c6d
 8007be8:	08007c35 	.word	0x08007c35
 8007bec:	08007c6d 	.word	0x08007c6d
 8007bf0:	08007c6d 	.word	0x08007c6d
 8007bf4:	08007c6d 	.word	0x08007c6d
 8007bf8:	08007c51 	.word	0x08007c51
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	68da      	ldr	r2, [r3, #12]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007c0a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c10:	4618      	mov	r0, r3
 8007c12:	f7fd ff4f 	bl	8005ab4 <HAL_DMA_Abort_IT>
      break;
 8007c16:	e02c      	b.n	8007c72 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	68da      	ldr	r2, [r3, #12]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c26:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	f7fd ff41 	bl	8005ab4 <HAL_DMA_Abort_IT>
      break;
 8007c32:	e01e      	b.n	8007c72 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	68da      	ldr	r2, [r3, #12]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007c42:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f7fd ff33 	bl	8005ab4 <HAL_DMA_Abort_IT>
      break;
 8007c4e:	e010      	b.n	8007c72 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	68da      	ldr	r2, [r3, #12]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007c5e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c64:	4618      	mov	r0, r3
 8007c66:	f7fd ff25 	bl	8005ab4 <HAL_DMA_Abort_IT>
      break;
 8007c6a:	e002      	b.n	8007c72 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	73fb      	strb	r3, [r7, #15]
      break;
 8007c70:	bf00      	nop
  }

  if (status == HAL_OK)
 8007c72:	7bfb      	ldrb	r3, [r7, #15]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d176      	bne.n	8007d66 <HAL_TIM_PWM_Stop_DMA+0x1ba>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	6839      	ldr	r1, [r7, #0]
 8007c80:	4618      	mov	r0, r3
 8007c82:	f000 feb9 	bl	80089f8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a39      	ldr	r2, [pc, #228]	; (8007d70 <HAL_TIM_PWM_Stop_DMA+0x1c4>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d009      	beq.n	8007ca4 <HAL_TIM_PWM_Stop_DMA+0xf8>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a37      	ldr	r2, [pc, #220]	; (8007d74 <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d004      	beq.n	8007ca4 <HAL_TIM_PWM_Stop_DMA+0xf8>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a36      	ldr	r2, [pc, #216]	; (8007d78 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d101      	bne.n	8007ca8 <HAL_TIM_PWM_Stop_DMA+0xfc>
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	e000      	b.n	8007caa <HAL_TIM_PWM_Stop_DMA+0xfe>
 8007ca8:	2300      	movs	r3, #0
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d017      	beq.n	8007cde <HAL_TIM_PWM_Stop_DMA+0x132>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	6a1a      	ldr	r2, [r3, #32]
 8007cb4:	f241 1311 	movw	r3, #4369	; 0x1111
 8007cb8:	4013      	ands	r3, r2
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d10f      	bne.n	8007cde <HAL_TIM_PWM_Stop_DMA+0x132>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	6a1a      	ldr	r2, [r3, #32]
 8007cc4:	f240 4344 	movw	r3, #1092	; 0x444
 8007cc8:	4013      	ands	r3, r2
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d107      	bne.n	8007cde <HAL_TIM_PWM_Stop_DMA+0x132>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007cdc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	6a1a      	ldr	r2, [r3, #32]
 8007ce4:	f241 1311 	movw	r3, #4369	; 0x1111
 8007ce8:	4013      	ands	r3, r2
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d10f      	bne.n	8007d0e <HAL_TIM_PWM_Stop_DMA+0x162>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	6a1a      	ldr	r2, [r3, #32]
 8007cf4:	f240 4344 	movw	r3, #1092	; 0x444
 8007cf8:	4013      	ands	r3, r2
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d107      	bne.n	8007d0e <HAL_TIM_PWM_Stop_DMA+0x162>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	681a      	ldr	r2, [r3, #0]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f022 0201 	bic.w	r2, r2, #1
 8007d0c:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d104      	bne.n	8007d1e <HAL_TIM_PWM_Stop_DMA+0x172>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2201      	movs	r2, #1
 8007d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d1c:	e023      	b.n	8007d66 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	2b04      	cmp	r3, #4
 8007d22:	d104      	bne.n	8007d2e <HAL_TIM_PWM_Stop_DMA+0x182>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2201      	movs	r2, #1
 8007d28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d2c:	e01b      	b.n	8007d66 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	2b08      	cmp	r3, #8
 8007d32:	d104      	bne.n	8007d3e <HAL_TIM_PWM_Stop_DMA+0x192>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2201      	movs	r2, #1
 8007d38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d3c:	e013      	b.n	8007d66 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	2b0c      	cmp	r3, #12
 8007d42:	d104      	bne.n	8007d4e <HAL_TIM_PWM_Stop_DMA+0x1a2>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2201      	movs	r2, #1
 8007d48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007d4c:	e00b      	b.n	8007d66 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	2b10      	cmp	r3, #16
 8007d52:	d104      	bne.n	8007d5e <HAL_TIM_PWM_Stop_DMA+0x1b2>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2201      	movs	r2, #1
 8007d58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d5c:	e003      	b.n	8007d66 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2201      	movs	r2, #1
 8007d62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8007d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3710      	adds	r7, #16
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}
 8007d70:	40012c00 	.word	0x40012c00
 8007d74:	40014000 	.word	0x40014000
 8007d78:	40014400 	.word	0x40014400

08007d7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b086      	sub	sp, #24
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	60f8      	str	r0, [r7, #12]
 8007d84:	60b9      	str	r1, [r7, #8]
 8007d86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d92:	2b01      	cmp	r3, #1
 8007d94:	d101      	bne.n	8007d9a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007d96:	2302      	movs	r3, #2
 8007d98:	e0ff      	b.n	8007f9a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2201      	movs	r2, #1
 8007d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2b14      	cmp	r3, #20
 8007da6:	f200 80f0 	bhi.w	8007f8a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007daa:	a201      	add	r2, pc, #4	; (adr r2, 8007db0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007db0:	08007e05 	.word	0x08007e05
 8007db4:	08007f8b 	.word	0x08007f8b
 8007db8:	08007f8b 	.word	0x08007f8b
 8007dbc:	08007f8b 	.word	0x08007f8b
 8007dc0:	08007e45 	.word	0x08007e45
 8007dc4:	08007f8b 	.word	0x08007f8b
 8007dc8:	08007f8b 	.word	0x08007f8b
 8007dcc:	08007f8b 	.word	0x08007f8b
 8007dd0:	08007e87 	.word	0x08007e87
 8007dd4:	08007f8b 	.word	0x08007f8b
 8007dd8:	08007f8b 	.word	0x08007f8b
 8007ddc:	08007f8b 	.word	0x08007f8b
 8007de0:	08007ec7 	.word	0x08007ec7
 8007de4:	08007f8b 	.word	0x08007f8b
 8007de8:	08007f8b 	.word	0x08007f8b
 8007dec:	08007f8b 	.word	0x08007f8b
 8007df0:	08007f09 	.word	0x08007f09
 8007df4:	08007f8b 	.word	0x08007f8b
 8007df8:	08007f8b 	.word	0x08007f8b
 8007dfc:	08007f8b 	.word	0x08007f8b
 8007e00:	08007f49 	.word	0x08007f49
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	68b9      	ldr	r1, [r7, #8]
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f000 fadc 	bl	80083c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	699a      	ldr	r2, [r3, #24]
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f042 0208 	orr.w	r2, r2, #8
 8007e1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	699a      	ldr	r2, [r3, #24]
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f022 0204 	bic.w	r2, r2, #4
 8007e2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	6999      	ldr	r1, [r3, #24]
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	691a      	ldr	r2, [r3, #16]
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	430a      	orrs	r2, r1
 8007e40:	619a      	str	r2, [r3, #24]
      break;
 8007e42:	e0a5      	b.n	8007f90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	68b9      	ldr	r1, [r7, #8]
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f000 fb38 	bl	80084c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	699a      	ldr	r2, [r3, #24]
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	699a      	ldr	r2, [r3, #24]
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	6999      	ldr	r1, [r3, #24]
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	691b      	ldr	r3, [r3, #16]
 8007e7a:	021a      	lsls	r2, r3, #8
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	430a      	orrs	r2, r1
 8007e82:	619a      	str	r2, [r3, #24]
      break;
 8007e84:	e084      	b.n	8007f90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	68b9      	ldr	r1, [r7, #8]
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f000 fb91 	bl	80085b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	69da      	ldr	r2, [r3, #28]
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f042 0208 	orr.w	r2, r2, #8
 8007ea0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	69da      	ldr	r2, [r3, #28]
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f022 0204 	bic.w	r2, r2, #4
 8007eb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	69d9      	ldr	r1, [r3, #28]
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	691a      	ldr	r2, [r3, #16]
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	430a      	orrs	r2, r1
 8007ec2:	61da      	str	r2, [r3, #28]
      break;
 8007ec4:	e064      	b.n	8007f90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	68b9      	ldr	r1, [r7, #8]
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f000 fbe9 	bl	80086a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	69da      	ldr	r2, [r3, #28]
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ee0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	69da      	ldr	r2, [r3, #28]
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ef0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	69d9      	ldr	r1, [r3, #28]
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	691b      	ldr	r3, [r3, #16]
 8007efc:	021a      	lsls	r2, r3, #8
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	430a      	orrs	r2, r1
 8007f04:	61da      	str	r2, [r3, #28]
      break;
 8007f06:	e043      	b.n	8007f90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	68b9      	ldr	r1, [r7, #8]
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f000 fc26 	bl	8008760 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f042 0208 	orr.w	r2, r2, #8
 8007f22:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f022 0204 	bic.w	r2, r2, #4
 8007f32:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	691a      	ldr	r2, [r3, #16]
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	430a      	orrs	r2, r1
 8007f44:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007f46:	e023      	b.n	8007f90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	68b9      	ldr	r1, [r7, #8]
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f000 fc5e 	bl	8008810 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f62:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f72:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	691b      	ldr	r3, [r3, #16]
 8007f7e:	021a      	lsls	r2, r3, #8
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	430a      	orrs	r2, r1
 8007f86:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007f88:	e002      	b.n	8007f90 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	75fb      	strb	r3, [r7, #23]
      break;
 8007f8e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	2200      	movs	r2, #0
 8007f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007f98:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3718      	adds	r7, #24
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}
 8007fa2:	bf00      	nop

08007fa4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b084      	sub	sp, #16
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
 8007fac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fb8:	2b01      	cmp	r3, #1
 8007fba:	d101      	bne.n	8007fc0 <HAL_TIM_ConfigClockSource+0x1c>
 8007fbc:	2302      	movs	r3, #2
 8007fbe:	e0b6      	b.n	800812e <HAL_TIM_ConfigClockSource+0x18a>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2202      	movs	r2, #2
 8007fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	689b      	ldr	r3, [r3, #8]
 8007fd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007fde:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007fe2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007fea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	68ba      	ldr	r2, [r7, #8]
 8007ff2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ffc:	d03e      	beq.n	800807c <HAL_TIM_ConfigClockSource+0xd8>
 8007ffe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008002:	f200 8087 	bhi.w	8008114 <HAL_TIM_ConfigClockSource+0x170>
 8008006:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800800a:	f000 8086 	beq.w	800811a <HAL_TIM_ConfigClockSource+0x176>
 800800e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008012:	d87f      	bhi.n	8008114 <HAL_TIM_ConfigClockSource+0x170>
 8008014:	2b70      	cmp	r3, #112	; 0x70
 8008016:	d01a      	beq.n	800804e <HAL_TIM_ConfigClockSource+0xaa>
 8008018:	2b70      	cmp	r3, #112	; 0x70
 800801a:	d87b      	bhi.n	8008114 <HAL_TIM_ConfigClockSource+0x170>
 800801c:	2b60      	cmp	r3, #96	; 0x60
 800801e:	d050      	beq.n	80080c2 <HAL_TIM_ConfigClockSource+0x11e>
 8008020:	2b60      	cmp	r3, #96	; 0x60
 8008022:	d877      	bhi.n	8008114 <HAL_TIM_ConfigClockSource+0x170>
 8008024:	2b50      	cmp	r3, #80	; 0x50
 8008026:	d03c      	beq.n	80080a2 <HAL_TIM_ConfigClockSource+0xfe>
 8008028:	2b50      	cmp	r3, #80	; 0x50
 800802a:	d873      	bhi.n	8008114 <HAL_TIM_ConfigClockSource+0x170>
 800802c:	2b40      	cmp	r3, #64	; 0x40
 800802e:	d058      	beq.n	80080e2 <HAL_TIM_ConfigClockSource+0x13e>
 8008030:	2b40      	cmp	r3, #64	; 0x40
 8008032:	d86f      	bhi.n	8008114 <HAL_TIM_ConfigClockSource+0x170>
 8008034:	2b30      	cmp	r3, #48	; 0x30
 8008036:	d064      	beq.n	8008102 <HAL_TIM_ConfigClockSource+0x15e>
 8008038:	2b30      	cmp	r3, #48	; 0x30
 800803a:	d86b      	bhi.n	8008114 <HAL_TIM_ConfigClockSource+0x170>
 800803c:	2b20      	cmp	r3, #32
 800803e:	d060      	beq.n	8008102 <HAL_TIM_ConfigClockSource+0x15e>
 8008040:	2b20      	cmp	r3, #32
 8008042:	d867      	bhi.n	8008114 <HAL_TIM_ConfigClockSource+0x170>
 8008044:	2b00      	cmp	r3, #0
 8008046:	d05c      	beq.n	8008102 <HAL_TIM_ConfigClockSource+0x15e>
 8008048:	2b10      	cmp	r3, #16
 800804a:	d05a      	beq.n	8008102 <HAL_TIM_ConfigClockSource+0x15e>
 800804c:	e062      	b.n	8008114 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6818      	ldr	r0, [r3, #0]
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	6899      	ldr	r1, [r3, #8]
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	685a      	ldr	r2, [r3, #4]
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	68db      	ldr	r3, [r3, #12]
 800805e:	f000 fcab 	bl	80089b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	689b      	ldr	r3, [r3, #8]
 8008068:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008070:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	68ba      	ldr	r2, [r7, #8]
 8008078:	609a      	str	r2, [r3, #8]
      break;
 800807a:	e04f      	b.n	800811c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6818      	ldr	r0, [r3, #0]
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	6899      	ldr	r1, [r3, #8]
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	685a      	ldr	r2, [r3, #4]
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	68db      	ldr	r3, [r3, #12]
 800808c:	f000 fc94 	bl	80089b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	689a      	ldr	r2, [r3, #8]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800809e:	609a      	str	r2, [r3, #8]
      break;
 80080a0:	e03c      	b.n	800811c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6818      	ldr	r0, [r3, #0]
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	6859      	ldr	r1, [r3, #4]
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	68db      	ldr	r3, [r3, #12]
 80080ae:	461a      	mov	r2, r3
 80080b0:	f000 fc08 	bl	80088c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	2150      	movs	r1, #80	; 0x50
 80080ba:	4618      	mov	r0, r3
 80080bc:	f000 fc61 	bl	8008982 <TIM_ITRx_SetConfig>
      break;
 80080c0:	e02c      	b.n	800811c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6818      	ldr	r0, [r3, #0]
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	6859      	ldr	r1, [r3, #4]
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	68db      	ldr	r3, [r3, #12]
 80080ce:	461a      	mov	r2, r3
 80080d0:	f000 fc27 	bl	8008922 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	2160      	movs	r1, #96	; 0x60
 80080da:	4618      	mov	r0, r3
 80080dc:	f000 fc51 	bl	8008982 <TIM_ITRx_SetConfig>
      break;
 80080e0:	e01c      	b.n	800811c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6818      	ldr	r0, [r3, #0]
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	6859      	ldr	r1, [r3, #4]
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	68db      	ldr	r3, [r3, #12]
 80080ee:	461a      	mov	r2, r3
 80080f0:	f000 fbe8 	bl	80088c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	2140      	movs	r1, #64	; 0x40
 80080fa:	4618      	mov	r0, r3
 80080fc:	f000 fc41 	bl	8008982 <TIM_ITRx_SetConfig>
      break;
 8008100:	e00c      	b.n	800811c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681a      	ldr	r2, [r3, #0]
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4619      	mov	r1, r3
 800810c:	4610      	mov	r0, r2
 800810e:	f000 fc38 	bl	8008982 <TIM_ITRx_SetConfig>
      break;
 8008112:	e003      	b.n	800811c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8008114:	2301      	movs	r3, #1
 8008116:	73fb      	strb	r3, [r7, #15]
      break;
 8008118:	e000      	b.n	800811c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800811a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2201      	movs	r2, #1
 8008120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2200      	movs	r2, #0
 8008128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800812c:	7bfb      	ldrb	r3, [r7, #15]
}
 800812e:	4618      	mov	r0, r3
 8008130:	3710      	adds	r7, #16
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}

08008136 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008136:	b480      	push	{r7}
 8008138:	b083      	sub	sp, #12
 800813a:	af00      	add	r7, sp, #0
 800813c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800813e:	bf00      	nop
 8008140:	370c      	adds	r7, #12
 8008142:	46bd      	mov	sp, r7
 8008144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008148:	4770      	bx	lr

0800814a <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800814a:	b480      	push	{r7}
 800814c:	b083      	sub	sp, #12
 800814e:	af00      	add	r7, sp, #0
 8008150:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008152:	bf00      	nop
 8008154:	370c      	adds	r7, #12
 8008156:	46bd      	mov	sp, r7
 8008158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815c:	4770      	bx	lr

0800815e <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800815e:	b580      	push	{r7, lr}
 8008160:	b084      	sub	sp, #16
 8008162:	af00      	add	r7, sp, #0
 8008164:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800816a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008170:	687a      	ldr	r2, [r7, #4]
 8008172:	429a      	cmp	r2, r3
 8008174:	d107      	bne.n	8008186 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2201      	movs	r2, #1
 800817a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	2201      	movs	r2, #1
 8008180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008184:	e02a      	b.n	80081dc <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800818a:	687a      	ldr	r2, [r7, #4]
 800818c:	429a      	cmp	r2, r3
 800818e:	d107      	bne.n	80081a0 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2202      	movs	r2, #2
 8008194:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2201      	movs	r2, #1
 800819a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800819e:	e01d      	b.n	80081dc <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081a4:	687a      	ldr	r2, [r7, #4]
 80081a6:	429a      	cmp	r2, r3
 80081a8:	d107      	bne.n	80081ba <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	2204      	movs	r2, #4
 80081ae:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	2201      	movs	r2, #1
 80081b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80081b8:	e010      	b.n	80081dc <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081be:	687a      	ldr	r2, [r7, #4]
 80081c0:	429a      	cmp	r2, r3
 80081c2:	d107      	bne.n	80081d4 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	2208      	movs	r2, #8
 80081c8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	2201      	movs	r2, #1
 80081ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80081d2:	e003      	b.n	80081dc <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2201      	movs	r2, #1
 80081d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80081dc:	68f8      	ldr	r0, [r7, #12]
 80081de:	f7ff ffb4 	bl	800814a <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	2200      	movs	r2, #0
 80081e6:	771a      	strb	r2, [r3, #28]
}
 80081e8:	bf00      	nop
 80081ea:	3710      	adds	r7, #16
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}

080081f0 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b084      	sub	sp, #16
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081fc:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008202:	687a      	ldr	r2, [r7, #4]
 8008204:	429a      	cmp	r2, r3
 8008206:	d10b      	bne.n	8008220 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	2201      	movs	r2, #1
 800820c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	69db      	ldr	r3, [r3, #28]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d136      	bne.n	8008284 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	2201      	movs	r2, #1
 800821a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800821e:	e031      	b.n	8008284 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008224:	687a      	ldr	r2, [r7, #4]
 8008226:	429a      	cmp	r2, r3
 8008228:	d10b      	bne.n	8008242 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2202      	movs	r2, #2
 800822e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	69db      	ldr	r3, [r3, #28]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d125      	bne.n	8008284 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	2201      	movs	r2, #1
 800823c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008240:	e020      	b.n	8008284 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008246:	687a      	ldr	r2, [r7, #4]
 8008248:	429a      	cmp	r2, r3
 800824a:	d10b      	bne.n	8008264 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2204      	movs	r2, #4
 8008250:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	69db      	ldr	r3, [r3, #28]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d114      	bne.n	8008284 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	2201      	movs	r2, #1
 800825e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008262:	e00f      	b.n	8008284 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008268:	687a      	ldr	r2, [r7, #4]
 800826a:	429a      	cmp	r2, r3
 800826c:	d10a      	bne.n	8008284 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2208      	movs	r2, #8
 8008272:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	69db      	ldr	r3, [r3, #28]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d103      	bne.n	8008284 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	2201      	movs	r2, #1
 8008280:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008284:	68f8      	ldr	r0, [r7, #12]
 8008286:	f001 fb33 	bl	80098f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	2200      	movs	r2, #0
 800828e:	771a      	strb	r2, [r3, #28]
}
 8008290:	bf00      	nop
 8008292:	3710      	adds	r7, #16
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}

08008298 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b084      	sub	sp, #16
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082a4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082aa:	687a      	ldr	r2, [r7, #4]
 80082ac:	429a      	cmp	r2, r3
 80082ae:	d103      	bne.n	80082b8 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	2201      	movs	r2, #1
 80082b4:	771a      	strb	r2, [r3, #28]
 80082b6:	e019      	b.n	80082ec <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082bc:	687a      	ldr	r2, [r7, #4]
 80082be:	429a      	cmp	r2, r3
 80082c0:	d103      	bne.n	80082ca <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	2202      	movs	r2, #2
 80082c6:	771a      	strb	r2, [r3, #28]
 80082c8:	e010      	b.n	80082ec <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ce:	687a      	ldr	r2, [r7, #4]
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d103      	bne.n	80082dc <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2204      	movs	r2, #4
 80082d8:	771a      	strb	r2, [r3, #28]
 80082da:	e007      	b.n	80082ec <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082e0:	687a      	ldr	r2, [r7, #4]
 80082e2:	429a      	cmp	r2, r3
 80082e4:	d102      	bne.n	80082ec <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2208      	movs	r2, #8
 80082ea:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80082ec:	68f8      	ldr	r0, [r7, #12]
 80082ee:	f7ff ff22 	bl	8008136 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2200      	movs	r2, #0
 80082f6:	771a      	strb	r2, [r3, #28]
}
 80082f8:	bf00      	nop
 80082fa:	3710      	adds	r7, #16
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}

08008300 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008300:	b480      	push	{r7}
 8008302:	b085      	sub	sp, #20
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
 8008308:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	4a2a      	ldr	r2, [pc, #168]	; (80083bc <TIM_Base_SetConfig+0xbc>)
 8008314:	4293      	cmp	r3, r2
 8008316:	d003      	beq.n	8008320 <TIM_Base_SetConfig+0x20>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800831e:	d108      	bne.n	8008332 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008326:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	685b      	ldr	r3, [r3, #4]
 800832c:	68fa      	ldr	r2, [r7, #12]
 800832e:	4313      	orrs	r3, r2
 8008330:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	4a21      	ldr	r2, [pc, #132]	; (80083bc <TIM_Base_SetConfig+0xbc>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d00b      	beq.n	8008352 <TIM_Base_SetConfig+0x52>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008340:	d007      	beq.n	8008352 <TIM_Base_SetConfig+0x52>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	4a1e      	ldr	r2, [pc, #120]	; (80083c0 <TIM_Base_SetConfig+0xc0>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d003      	beq.n	8008352 <TIM_Base_SetConfig+0x52>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	4a1d      	ldr	r2, [pc, #116]	; (80083c4 <TIM_Base_SetConfig+0xc4>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d108      	bne.n	8008364 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008358:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	68db      	ldr	r3, [r3, #12]
 800835e:	68fa      	ldr	r2, [r7, #12]
 8008360:	4313      	orrs	r3, r2
 8008362:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	695b      	ldr	r3, [r3, #20]
 800836e:	4313      	orrs	r3, r2
 8008370:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	68fa      	ldr	r2, [r7, #12]
 8008376:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	689a      	ldr	r2, [r3, #8]
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	681a      	ldr	r2, [r3, #0]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	4a0c      	ldr	r2, [pc, #48]	; (80083bc <TIM_Base_SetConfig+0xbc>)
 800838c:	4293      	cmp	r3, r2
 800838e:	d007      	beq.n	80083a0 <TIM_Base_SetConfig+0xa0>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	4a0b      	ldr	r2, [pc, #44]	; (80083c0 <TIM_Base_SetConfig+0xc0>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d003      	beq.n	80083a0 <TIM_Base_SetConfig+0xa0>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	4a0a      	ldr	r2, [pc, #40]	; (80083c4 <TIM_Base_SetConfig+0xc4>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d103      	bne.n	80083a8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	691a      	ldr	r2, [r3, #16]
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2201      	movs	r2, #1
 80083ac:	615a      	str	r2, [r3, #20]
}
 80083ae:	bf00      	nop
 80083b0:	3714      	adds	r7, #20
 80083b2:	46bd      	mov	sp, r7
 80083b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b8:	4770      	bx	lr
 80083ba:	bf00      	nop
 80083bc:	40012c00 	.word	0x40012c00
 80083c0:	40014000 	.word	0x40014000
 80083c4:	40014400 	.word	0x40014400

080083c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b087      	sub	sp, #28
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
 80083d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6a1b      	ldr	r3, [r3, #32]
 80083d6:	f023 0201 	bic.w	r2, r3, #1
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6a1b      	ldr	r3, [r3, #32]
 80083e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	685b      	ldr	r3, [r3, #4]
 80083e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	699b      	ldr	r3, [r3, #24]
 80083ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80083f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	f023 0303 	bic.w	r3, r3, #3
 8008402:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	68fa      	ldr	r2, [r7, #12]
 800840a:	4313      	orrs	r3, r2
 800840c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800840e:	697b      	ldr	r3, [r7, #20]
 8008410:	f023 0302 	bic.w	r3, r3, #2
 8008414:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	689b      	ldr	r3, [r3, #8]
 800841a:	697a      	ldr	r2, [r7, #20]
 800841c:	4313      	orrs	r3, r2
 800841e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	4a24      	ldr	r2, [pc, #144]	; (80084b4 <TIM_OC1_SetConfig+0xec>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d007      	beq.n	8008438 <TIM_OC1_SetConfig+0x70>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	4a23      	ldr	r2, [pc, #140]	; (80084b8 <TIM_OC1_SetConfig+0xf0>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d003      	beq.n	8008438 <TIM_OC1_SetConfig+0x70>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	4a22      	ldr	r2, [pc, #136]	; (80084bc <TIM_OC1_SetConfig+0xf4>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d10c      	bne.n	8008452 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	f023 0308 	bic.w	r3, r3, #8
 800843e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	68db      	ldr	r3, [r3, #12]
 8008444:	697a      	ldr	r2, [r7, #20]
 8008446:	4313      	orrs	r3, r2
 8008448:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800844a:	697b      	ldr	r3, [r7, #20]
 800844c:	f023 0304 	bic.w	r3, r3, #4
 8008450:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	4a17      	ldr	r2, [pc, #92]	; (80084b4 <TIM_OC1_SetConfig+0xec>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d007      	beq.n	800846a <TIM_OC1_SetConfig+0xa2>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	4a16      	ldr	r2, [pc, #88]	; (80084b8 <TIM_OC1_SetConfig+0xf0>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d003      	beq.n	800846a <TIM_OC1_SetConfig+0xa2>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	4a15      	ldr	r2, [pc, #84]	; (80084bc <TIM_OC1_SetConfig+0xf4>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d111      	bne.n	800848e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008470:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008478:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	695b      	ldr	r3, [r3, #20]
 800847e:	693a      	ldr	r2, [r7, #16]
 8008480:	4313      	orrs	r3, r2
 8008482:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	699b      	ldr	r3, [r3, #24]
 8008488:	693a      	ldr	r2, [r7, #16]
 800848a:	4313      	orrs	r3, r2
 800848c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	693a      	ldr	r2, [r7, #16]
 8008492:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	68fa      	ldr	r2, [r7, #12]
 8008498:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	685a      	ldr	r2, [r3, #4]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	697a      	ldr	r2, [r7, #20]
 80084a6:	621a      	str	r2, [r3, #32]
}
 80084a8:	bf00      	nop
 80084aa:	371c      	adds	r7, #28
 80084ac:	46bd      	mov	sp, r7
 80084ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b2:	4770      	bx	lr
 80084b4:	40012c00 	.word	0x40012c00
 80084b8:	40014000 	.word	0x40014000
 80084bc:	40014400 	.word	0x40014400

080084c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80084c0:	b480      	push	{r7}
 80084c2:	b087      	sub	sp, #28
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6a1b      	ldr	r3, [r3, #32]
 80084ce:	f023 0210 	bic.w	r2, r3, #16
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6a1b      	ldr	r3, [r3, #32]
 80084da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	685b      	ldr	r3, [r3, #4]
 80084e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	699b      	ldr	r3, [r3, #24]
 80084e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80084ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	021b      	lsls	r3, r3, #8
 8008502:	68fa      	ldr	r2, [r7, #12]
 8008504:	4313      	orrs	r3, r2
 8008506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	f023 0320 	bic.w	r3, r3, #32
 800850e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	689b      	ldr	r3, [r3, #8]
 8008514:	011b      	lsls	r3, r3, #4
 8008516:	697a      	ldr	r2, [r7, #20]
 8008518:	4313      	orrs	r3, r2
 800851a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	4a22      	ldr	r2, [pc, #136]	; (80085a8 <TIM_OC2_SetConfig+0xe8>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d10d      	bne.n	8008540 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800852a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	68db      	ldr	r3, [r3, #12]
 8008530:	011b      	lsls	r3, r3, #4
 8008532:	697a      	ldr	r2, [r7, #20]
 8008534:	4313      	orrs	r3, r2
 8008536:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800853e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	4a19      	ldr	r2, [pc, #100]	; (80085a8 <TIM_OC2_SetConfig+0xe8>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d007      	beq.n	8008558 <TIM_OC2_SetConfig+0x98>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	4a18      	ldr	r2, [pc, #96]	; (80085ac <TIM_OC2_SetConfig+0xec>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d003      	beq.n	8008558 <TIM_OC2_SetConfig+0x98>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	4a17      	ldr	r2, [pc, #92]	; (80085b0 <TIM_OC2_SetConfig+0xf0>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d113      	bne.n	8008580 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800855e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008560:	693b      	ldr	r3, [r7, #16]
 8008562:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008566:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	695b      	ldr	r3, [r3, #20]
 800856c:	009b      	lsls	r3, r3, #2
 800856e:	693a      	ldr	r2, [r7, #16]
 8008570:	4313      	orrs	r3, r2
 8008572:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	699b      	ldr	r3, [r3, #24]
 8008578:	009b      	lsls	r3, r3, #2
 800857a:	693a      	ldr	r2, [r7, #16]
 800857c:	4313      	orrs	r3, r2
 800857e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	693a      	ldr	r2, [r7, #16]
 8008584:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	68fa      	ldr	r2, [r7, #12]
 800858a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	685a      	ldr	r2, [r3, #4]
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	697a      	ldr	r2, [r7, #20]
 8008598:	621a      	str	r2, [r3, #32]
}
 800859a:	bf00      	nop
 800859c:	371c      	adds	r7, #28
 800859e:	46bd      	mov	sp, r7
 80085a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a4:	4770      	bx	lr
 80085a6:	bf00      	nop
 80085a8:	40012c00 	.word	0x40012c00
 80085ac:	40014000 	.word	0x40014000
 80085b0:	40014400 	.word	0x40014400

080085b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b087      	sub	sp, #28
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6a1b      	ldr	r3, [r3, #32]
 80085c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6a1b      	ldr	r3, [r3, #32]
 80085ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	69db      	ldr	r3, [r3, #28]
 80085da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80085e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f023 0303 	bic.w	r3, r3, #3
 80085ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	68fa      	ldr	r2, [r7, #12]
 80085f6:	4313      	orrs	r3, r2
 80085f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80085fa:	697b      	ldr	r3, [r7, #20]
 80085fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008600:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	689b      	ldr	r3, [r3, #8]
 8008606:	021b      	lsls	r3, r3, #8
 8008608:	697a      	ldr	r2, [r7, #20]
 800860a:	4313      	orrs	r3, r2
 800860c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	4a21      	ldr	r2, [pc, #132]	; (8008698 <TIM_OC3_SetConfig+0xe4>)
 8008612:	4293      	cmp	r3, r2
 8008614:	d10d      	bne.n	8008632 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800861c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	68db      	ldr	r3, [r3, #12]
 8008622:	021b      	lsls	r3, r3, #8
 8008624:	697a      	ldr	r2, [r7, #20]
 8008626:	4313      	orrs	r3, r2
 8008628:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008630:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	4a18      	ldr	r2, [pc, #96]	; (8008698 <TIM_OC3_SetConfig+0xe4>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d007      	beq.n	800864a <TIM_OC3_SetConfig+0x96>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	4a17      	ldr	r2, [pc, #92]	; (800869c <TIM_OC3_SetConfig+0xe8>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d003      	beq.n	800864a <TIM_OC3_SetConfig+0x96>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	4a16      	ldr	r2, [pc, #88]	; (80086a0 <TIM_OC3_SetConfig+0xec>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d113      	bne.n	8008672 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008650:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008652:	693b      	ldr	r3, [r7, #16]
 8008654:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008658:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	695b      	ldr	r3, [r3, #20]
 800865e:	011b      	lsls	r3, r3, #4
 8008660:	693a      	ldr	r2, [r7, #16]
 8008662:	4313      	orrs	r3, r2
 8008664:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	699b      	ldr	r3, [r3, #24]
 800866a:	011b      	lsls	r3, r3, #4
 800866c:	693a      	ldr	r2, [r7, #16]
 800866e:	4313      	orrs	r3, r2
 8008670:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	693a      	ldr	r2, [r7, #16]
 8008676:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	68fa      	ldr	r2, [r7, #12]
 800867c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	685a      	ldr	r2, [r3, #4]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	697a      	ldr	r2, [r7, #20]
 800868a:	621a      	str	r2, [r3, #32]
}
 800868c:	bf00      	nop
 800868e:	371c      	adds	r7, #28
 8008690:	46bd      	mov	sp, r7
 8008692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008696:	4770      	bx	lr
 8008698:	40012c00 	.word	0x40012c00
 800869c:	40014000 	.word	0x40014000
 80086a0:	40014400 	.word	0x40014400

080086a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80086a4:	b480      	push	{r7}
 80086a6:	b087      	sub	sp, #28
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
 80086ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6a1b      	ldr	r3, [r3, #32]
 80086b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6a1b      	ldr	r3, [r3, #32]
 80086be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	685b      	ldr	r3, [r3, #4]
 80086c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	69db      	ldr	r3, [r3, #28]
 80086ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80086d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80086de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	021b      	lsls	r3, r3, #8
 80086e6:	68fa      	ldr	r2, [r7, #12]
 80086e8:	4313      	orrs	r3, r2
 80086ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80086f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	689b      	ldr	r3, [r3, #8]
 80086f8:	031b      	lsls	r3, r3, #12
 80086fa:	693a      	ldr	r2, [r7, #16]
 80086fc:	4313      	orrs	r3, r2
 80086fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	4a14      	ldr	r2, [pc, #80]	; (8008754 <TIM_OC4_SetConfig+0xb0>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d007      	beq.n	8008718 <TIM_OC4_SetConfig+0x74>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	4a13      	ldr	r2, [pc, #76]	; (8008758 <TIM_OC4_SetConfig+0xb4>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d003      	beq.n	8008718 <TIM_OC4_SetConfig+0x74>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	4a12      	ldr	r2, [pc, #72]	; (800875c <TIM_OC4_SetConfig+0xb8>)
 8008714:	4293      	cmp	r3, r2
 8008716:	d109      	bne.n	800872c <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800871e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	695b      	ldr	r3, [r3, #20]
 8008724:	019b      	lsls	r3, r3, #6
 8008726:	697a      	ldr	r2, [r7, #20]
 8008728:	4313      	orrs	r3, r2
 800872a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	697a      	ldr	r2, [r7, #20]
 8008730:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	68fa      	ldr	r2, [r7, #12]
 8008736:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	685a      	ldr	r2, [r3, #4]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	693a      	ldr	r2, [r7, #16]
 8008744:	621a      	str	r2, [r3, #32]
}
 8008746:	bf00      	nop
 8008748:	371c      	adds	r7, #28
 800874a:	46bd      	mov	sp, r7
 800874c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008750:	4770      	bx	lr
 8008752:	bf00      	nop
 8008754:	40012c00 	.word	0x40012c00
 8008758:	40014000 	.word	0x40014000
 800875c:	40014400 	.word	0x40014400

08008760 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008760:	b480      	push	{r7}
 8008762:	b087      	sub	sp, #28
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
 8008768:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6a1b      	ldr	r3, [r3, #32]
 800876e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6a1b      	ldr	r3, [r3, #32]
 800877a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	685b      	ldr	r3, [r3, #4]
 8008780:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800878e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008792:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	68fa      	ldr	r2, [r7, #12]
 800879a:	4313      	orrs	r3, r2
 800879c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800879e:	693b      	ldr	r3, [r7, #16]
 80087a0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80087a4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	689b      	ldr	r3, [r3, #8]
 80087aa:	041b      	lsls	r3, r3, #16
 80087ac:	693a      	ldr	r2, [r7, #16]
 80087ae:	4313      	orrs	r3, r2
 80087b0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	4a13      	ldr	r2, [pc, #76]	; (8008804 <TIM_OC5_SetConfig+0xa4>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d007      	beq.n	80087ca <TIM_OC5_SetConfig+0x6a>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	4a12      	ldr	r2, [pc, #72]	; (8008808 <TIM_OC5_SetConfig+0xa8>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d003      	beq.n	80087ca <TIM_OC5_SetConfig+0x6a>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	4a11      	ldr	r2, [pc, #68]	; (800880c <TIM_OC5_SetConfig+0xac>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d109      	bne.n	80087de <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80087d0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	695b      	ldr	r3, [r3, #20]
 80087d6:	021b      	lsls	r3, r3, #8
 80087d8:	697a      	ldr	r2, [r7, #20]
 80087da:	4313      	orrs	r3, r2
 80087dc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	697a      	ldr	r2, [r7, #20]
 80087e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	68fa      	ldr	r2, [r7, #12]
 80087e8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	685a      	ldr	r2, [r3, #4]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	693a      	ldr	r2, [r7, #16]
 80087f6:	621a      	str	r2, [r3, #32]
}
 80087f8:	bf00      	nop
 80087fa:	371c      	adds	r7, #28
 80087fc:	46bd      	mov	sp, r7
 80087fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008802:	4770      	bx	lr
 8008804:	40012c00 	.word	0x40012c00
 8008808:	40014000 	.word	0x40014000
 800880c:	40014400 	.word	0x40014400

08008810 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008810:	b480      	push	{r7}
 8008812:	b087      	sub	sp, #28
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
 8008818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6a1b      	ldr	r3, [r3, #32]
 800881e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6a1b      	ldr	r3, [r3, #32]
 800882a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	685b      	ldr	r3, [r3, #4]
 8008830:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800883e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008842:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	021b      	lsls	r3, r3, #8
 800884a:	68fa      	ldr	r2, [r7, #12]
 800884c:	4313      	orrs	r3, r2
 800884e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008856:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	689b      	ldr	r3, [r3, #8]
 800885c:	051b      	lsls	r3, r3, #20
 800885e:	693a      	ldr	r2, [r7, #16]
 8008860:	4313      	orrs	r3, r2
 8008862:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	4a14      	ldr	r2, [pc, #80]	; (80088b8 <TIM_OC6_SetConfig+0xa8>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d007      	beq.n	800887c <TIM_OC6_SetConfig+0x6c>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	4a13      	ldr	r2, [pc, #76]	; (80088bc <TIM_OC6_SetConfig+0xac>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d003      	beq.n	800887c <TIM_OC6_SetConfig+0x6c>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	4a12      	ldr	r2, [pc, #72]	; (80088c0 <TIM_OC6_SetConfig+0xb0>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d109      	bne.n	8008890 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008882:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	695b      	ldr	r3, [r3, #20]
 8008888:	029b      	lsls	r3, r3, #10
 800888a:	697a      	ldr	r2, [r7, #20]
 800888c:	4313      	orrs	r3, r2
 800888e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	697a      	ldr	r2, [r7, #20]
 8008894:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	68fa      	ldr	r2, [r7, #12]
 800889a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	685a      	ldr	r2, [r3, #4]
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	693a      	ldr	r2, [r7, #16]
 80088a8:	621a      	str	r2, [r3, #32]
}
 80088aa:	bf00      	nop
 80088ac:	371c      	adds	r7, #28
 80088ae:	46bd      	mov	sp, r7
 80088b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b4:	4770      	bx	lr
 80088b6:	bf00      	nop
 80088b8:	40012c00 	.word	0x40012c00
 80088bc:	40014000 	.word	0x40014000
 80088c0:	40014400 	.word	0x40014400

080088c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80088c4:	b480      	push	{r7}
 80088c6:	b087      	sub	sp, #28
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	60f8      	str	r0, [r7, #12]
 80088cc:	60b9      	str	r1, [r7, #8]
 80088ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	6a1b      	ldr	r3, [r3, #32]
 80088d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	6a1b      	ldr	r3, [r3, #32]
 80088da:	f023 0201 	bic.w	r2, r3, #1
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	699b      	ldr	r3, [r3, #24]
 80088e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80088e8:	693b      	ldr	r3, [r7, #16]
 80088ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80088ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	011b      	lsls	r3, r3, #4
 80088f4:	693a      	ldr	r2, [r7, #16]
 80088f6:	4313      	orrs	r3, r2
 80088f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	f023 030a 	bic.w	r3, r3, #10
 8008900:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008902:	697a      	ldr	r2, [r7, #20]
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	4313      	orrs	r3, r2
 8008908:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	693a      	ldr	r2, [r7, #16]
 800890e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	697a      	ldr	r2, [r7, #20]
 8008914:	621a      	str	r2, [r3, #32]
}
 8008916:	bf00      	nop
 8008918:	371c      	adds	r7, #28
 800891a:	46bd      	mov	sp, r7
 800891c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008920:	4770      	bx	lr

08008922 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008922:	b480      	push	{r7}
 8008924:	b087      	sub	sp, #28
 8008926:	af00      	add	r7, sp, #0
 8008928:	60f8      	str	r0, [r7, #12]
 800892a:	60b9      	str	r1, [r7, #8]
 800892c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	6a1b      	ldr	r3, [r3, #32]
 8008932:	f023 0210 	bic.w	r2, r3, #16
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	699b      	ldr	r3, [r3, #24]
 800893e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	6a1b      	ldr	r3, [r3, #32]
 8008944:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800894c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	031b      	lsls	r3, r3, #12
 8008952:	697a      	ldr	r2, [r7, #20]
 8008954:	4313      	orrs	r3, r2
 8008956:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008958:	693b      	ldr	r3, [r7, #16]
 800895a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800895e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	011b      	lsls	r3, r3, #4
 8008964:	693a      	ldr	r2, [r7, #16]
 8008966:	4313      	orrs	r3, r2
 8008968:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	697a      	ldr	r2, [r7, #20]
 800896e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	693a      	ldr	r2, [r7, #16]
 8008974:	621a      	str	r2, [r3, #32]
}
 8008976:	bf00      	nop
 8008978:	371c      	adds	r7, #28
 800897a:	46bd      	mov	sp, r7
 800897c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008980:	4770      	bx	lr

08008982 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008982:	b480      	push	{r7}
 8008984:	b085      	sub	sp, #20
 8008986:	af00      	add	r7, sp, #0
 8008988:	6078      	str	r0, [r7, #4]
 800898a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	689b      	ldr	r3, [r3, #8]
 8008990:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008998:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800899a:	683a      	ldr	r2, [r7, #0]
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	4313      	orrs	r3, r2
 80089a0:	f043 0307 	orr.w	r3, r3, #7
 80089a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	68fa      	ldr	r2, [r7, #12]
 80089aa:	609a      	str	r2, [r3, #8]
}
 80089ac:	bf00      	nop
 80089ae:	3714      	adds	r7, #20
 80089b0:	46bd      	mov	sp, r7
 80089b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b6:	4770      	bx	lr

080089b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b087      	sub	sp, #28
 80089bc:	af00      	add	r7, sp, #0
 80089be:	60f8      	str	r0, [r7, #12]
 80089c0:	60b9      	str	r1, [r7, #8]
 80089c2:	607a      	str	r2, [r7, #4]
 80089c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	689b      	ldr	r3, [r3, #8]
 80089ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80089cc:	697b      	ldr	r3, [r7, #20]
 80089ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80089d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	021a      	lsls	r2, r3, #8
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	431a      	orrs	r2, r3
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	4313      	orrs	r3, r2
 80089e0:	697a      	ldr	r2, [r7, #20]
 80089e2:	4313      	orrs	r3, r2
 80089e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	697a      	ldr	r2, [r7, #20]
 80089ea:	609a      	str	r2, [r3, #8]
}
 80089ec:	bf00      	nop
 80089ee:	371c      	adds	r7, #28
 80089f0:	46bd      	mov	sp, r7
 80089f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f6:	4770      	bx	lr

080089f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80089f8:	b480      	push	{r7}
 80089fa:	b087      	sub	sp, #28
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	60f8      	str	r0, [r7, #12]
 8008a00:	60b9      	str	r1, [r7, #8]
 8008a02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	f003 031f 	and.w	r3, r3, #31
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8008a10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	6a1a      	ldr	r2, [r3, #32]
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	43db      	mvns	r3, r3
 8008a1a:	401a      	ands	r2, r3
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	6a1a      	ldr	r2, [r3, #32]
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	f003 031f 	and.w	r3, r3, #31
 8008a2a:	6879      	ldr	r1, [r7, #4]
 8008a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8008a30:	431a      	orrs	r2, r3
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	621a      	str	r2, [r3, #32]
}
 8008a36:	bf00      	nop
 8008a38:	371c      	adds	r7, #28
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a40:	4770      	bx	lr
	...

08008a44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008a44:	b480      	push	{r7}
 8008a46:	b085      	sub	sp, #20
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a54:	2b01      	cmp	r3, #1
 8008a56:	d101      	bne.n	8008a5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008a58:	2302      	movs	r3, #2
 8008a5a:	e04f      	b.n	8008afc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2201      	movs	r2, #1
 8008a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2202      	movs	r2, #2
 8008a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	689b      	ldr	r3, [r3, #8]
 8008a7a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4a21      	ldr	r2, [pc, #132]	; (8008b08 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d108      	bne.n	8008a98 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008a8c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	685b      	ldr	r3, [r3, #4]
 8008a92:	68fa      	ldr	r2, [r7, #12]
 8008a94:	4313      	orrs	r3, r2
 8008a96:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	68fa      	ldr	r2, [r7, #12]
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	68fa      	ldr	r2, [r7, #12]
 8008ab0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	4a14      	ldr	r2, [pc, #80]	; (8008b08 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d009      	beq.n	8008ad0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ac4:	d004      	beq.n	8008ad0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4a10      	ldr	r2, [pc, #64]	; (8008b0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d10c      	bne.n	8008aea <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ad6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	689b      	ldr	r3, [r3, #8]
 8008adc:	68ba      	ldr	r2, [r7, #8]
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	68ba      	ldr	r2, [r7, #8]
 8008ae8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2201      	movs	r2, #1
 8008aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2200      	movs	r2, #0
 8008af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008afa:	2300      	movs	r3, #0
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3714      	adds	r7, #20
 8008b00:	46bd      	mov	sp, r7
 8008b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b06:	4770      	bx	lr
 8008b08:	40012c00 	.word	0x40012c00
 8008b0c:	40014000 	.word	0x40014000

08008b10 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008b10:	b480      	push	{r7}
 8008b12:	b085      	sub	sp, #20
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
 8008b18:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b24:	2b01      	cmp	r3, #1
 8008b26:	d101      	bne.n	8008b2c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008b28:	2302      	movs	r3, #2
 8008b2a:	e060      	b.n	8008bee <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2201      	movs	r2, #1
 8008b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	68db      	ldr	r3, [r3, #12]
 8008b3e:	4313      	orrs	r3, r2
 8008b40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	689b      	ldr	r3, [r3, #8]
 8008b4c:	4313      	orrs	r3, r2
 8008b4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	685b      	ldr	r3, [r3, #4]
 8008b5a:	4313      	orrs	r3, r2
 8008b5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	691b      	ldr	r3, [r3, #16]
 8008b76:	4313      	orrs	r3, r2
 8008b78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	695b      	ldr	r3, [r3, #20]
 8008b84:	4313      	orrs	r3, r2
 8008b86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b92:	4313      	orrs	r3, r2
 8008b94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	699b      	ldr	r3, [r3, #24]
 8008ba0:	041b      	lsls	r3, r3, #16
 8008ba2:	4313      	orrs	r3, r2
 8008ba4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	4a14      	ldr	r2, [pc, #80]	; (8008bfc <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d115      	bne.n	8008bdc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bba:	051b      	lsls	r3, r3, #20
 8008bbc:	4313      	orrs	r3, r2
 8008bbe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	69db      	ldr	r3, [r3, #28]
 8008bca:	4313      	orrs	r3, r2
 8008bcc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	6a1b      	ldr	r3, [r3, #32]
 8008bd8:	4313      	orrs	r3, r2
 8008bda:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	68fa      	ldr	r2, [r7, #12]
 8008be2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2200      	movs	r2, #0
 8008be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008bec:	2300      	movs	r3, #0
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3714      	adds	r7, #20
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf8:	4770      	bx	lr
 8008bfa:	bf00      	nop
 8008bfc:	40012c00 	.word	0x40012c00

08008c00 <board_init_common_rtc_init>:
volatile int datasentflag = 0;
uint32_t g_button_on_count[NUM_PUSH_BUTTONS] = {0};
bool button_press_state[NUM_PUSH_BUTTONS] = {false};

static void board_init_common_rtc_init(void)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	af00      	add	r7, sp, #0
    g_rtc_handle.Instance = RTC;
 8008c04:	4b10      	ldr	r3, [pc, #64]	; (8008c48 <board_init_common_rtc_init+0x48>)
 8008c06:	4a11      	ldr	r2, [pc, #68]	; (8008c4c <board_init_common_rtc_init+0x4c>)
 8008c08:	601a      	str	r2, [r3, #0]
    g_rtc_handle.Init.HourFormat = RTC_HOURFORMAT_24;
 8008c0a:	4b0f      	ldr	r3, [pc, #60]	; (8008c48 <board_init_common_rtc_init+0x48>)
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	605a      	str	r2, [r3, #4]
    g_rtc_handle.Init.AsynchPrediv = 127;
 8008c10:	4b0d      	ldr	r3, [pc, #52]	; (8008c48 <board_init_common_rtc_init+0x48>)
 8008c12:	227f      	movs	r2, #127	; 0x7f
 8008c14:	609a      	str	r2, [r3, #8]
    g_rtc_handle.Init.SynchPrediv = 255;
 8008c16:	4b0c      	ldr	r3, [pc, #48]	; (8008c48 <board_init_common_rtc_init+0x48>)
 8008c18:	22ff      	movs	r2, #255	; 0xff
 8008c1a:	60da      	str	r2, [r3, #12]
    g_rtc_handle.Init.OutPut = RTC_OUTPUT_DISABLE;
 8008c1c:	4b0a      	ldr	r3, [pc, #40]	; (8008c48 <board_init_common_rtc_init+0x48>)
 8008c1e:	2200      	movs	r2, #0
 8008c20:	611a      	str	r2, [r3, #16]
    g_rtc_handle.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8008c22:	4b09      	ldr	r3, [pc, #36]	; (8008c48 <board_init_common_rtc_init+0x48>)
 8008c24:	2200      	movs	r2, #0
 8008c26:	615a      	str	r2, [r3, #20]
    g_rtc_handle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8008c28:	4b07      	ldr	r3, [pc, #28]	; (8008c48 <board_init_common_rtc_init+0x48>)
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	619a      	str	r2, [r3, #24]
    g_rtc_handle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8008c2e:	4b06      	ldr	r3, [pc, #24]	; (8008c48 <board_init_common_rtc_init+0x48>)
 8008c30:	2200      	movs	r2, #0
 8008c32:	61da      	str	r2, [r3, #28]
    if (HAL_RTC_Init(&g_rtc_handle) != HAL_OK) Error_Handler();
 8008c34:	4804      	ldr	r0, [pc, #16]	; (8008c48 <board_init_common_rtc_init+0x48>)
 8008c36:	f7fe fc01 	bl	800743c <HAL_RTC_Init>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d001      	beq.n	8008c44 <board_init_common_rtc_init+0x44>
 8008c40:	f000 fb48 	bl	80092d4 <Error_Handler>
}
 8008c44:	bf00      	nop
 8008c46:	bd80      	pop	{r7, pc}
 8008c48:	20001df8 	.word	0x20001df8
 8008c4c:	40002800 	.word	0x40002800

08008c50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
static void SystemClock_Config(void)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b0ae      	sub	sp, #184	; 0xb8
 8008c54:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008c56:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8008c5a:	2244      	movs	r2, #68	; 0x44
 8008c5c:	2100      	movs	r1, #0
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f000 ffea 	bl	8009c38 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008c64:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8008c68:	2200      	movs	r2, #0
 8008c6a:	601a      	str	r2, [r3, #0]
 8008c6c:	605a      	str	r2, [r3, #4]
 8008c6e:	609a      	str	r2, [r3, #8]
 8008c70:	60da      	str	r2, [r3, #12]
 8008c72:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008c74:	1d3b      	adds	r3, r7, #4
 8008c76:	225c      	movs	r2, #92	; 0x5c
 8008c78:	2100      	movs	r1, #0
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f000 ffdc 	bl	8009c38 <memset>

    /** Configure LSE Drive Capability
    */
    HAL_PWR_EnableBkUpAccess();
 8008c80:	f7fd f9ee 	bl	8006060 <HAL_PWR_EnableBkUpAccess>
    __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8008c84:	4b26      	ldr	r3, [pc, #152]	; (8008d20 <SystemClock_Config+0xd0>)
 8008c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c8a:	4a25      	ldr	r2, [pc, #148]	; (8008d20 <SystemClock_Config+0xd0>)
 8008c8c:	f023 0318 	bic.w	r3, r3, #24
 8008c90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /** Initializes the RCC Oscillators according to the specified parameters
    * in the RCC_OscInitTypeDef structure.
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8008c94:	2305      	movs	r3, #5
 8008c96:	677b      	str	r3, [r7, #116]	; 0x74
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008c98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008c9c:	67bb      	str	r3, [r7, #120]	; 0x78
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	67fb      	str	r3, [r7, #124]	; 0x7c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) Error_Handler();
 8008ca8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8008cac:	4618      	mov	r0, r3
 8008cae:	f7fd fabb 	bl	8006228 <HAL_RCC_OscConfig>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d001      	beq.n	8008cbc <SystemClock_Config+0x6c>
 8008cb8:	f000 fb0c 	bl	80092d4 <Error_Handler>
    /** Initializes the CPU, AHB and APB buses clocks
    */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008cbc:	230f      	movs	r3, #15
 8008cbe:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8008cc0:	2302      	movs	r3, #2
 8008cc2:	667b      	str	r3, [r7, #100]	; 0x64
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	66bb      	str	r3, [r7, #104]	; 0x68
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	66fb      	str	r3, [r7, #108]	; 0x6c
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008ccc:	2300      	movs	r3, #0
 8008cce:	673b      	str	r3, [r7, #112]	; 0x70

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) Error_Handler();
 8008cd0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8008cd4:	2102      	movs	r1, #2
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f7fd feba 	bl	8006a50 <HAL_RCC_ClockConfig>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d001      	beq.n	8008ce6 <SystemClock_Config+0x96>
 8008ce2:	f000 faf7 	bl	80092d4 <Error_Handler>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8008ce6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008cea:	607b      	str	r3, [r7, #4]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8008cec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008cf0:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) Error_Handler();
 8008cf2:	1d3b      	adds	r3, r7, #4
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f7fe f897 	bl	8006e28 <HAL_RCCEx_PeriphCLKConfig>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d001      	beq.n	8008d04 <SystemClock_Config+0xb4>
 8008d00:	f000 fae8 	bl	80092d4 <Error_Handler>
    /** Configure the main internal regulator output voltage
    */
    if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK) Error_Handler();
 8008d04:	f44f 7000 	mov.w	r0, #512	; 0x200
 8008d08:	f7fd fa38 	bl	800617c <HAL_PWREx_ControlVoltageScaling>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d001      	beq.n	8008d16 <SystemClock_Config+0xc6>
 8008d12:	f000 fadf 	bl	80092d4 <Error_Handler>
}
 8008d16:	bf00      	nop
 8008d18:	37b8      	adds	r7, #184	; 0xb8
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}
 8008d1e:	bf00      	nop
 8008d20:	40021000 	.word	0x40021000

08008d24 <board_init_common_timer_init>:


static void board_init_common_timer_init(timer_e timer)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b0a2      	sub	sp, #136	; 0x88
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	71fb      	strb	r3, [r7, #7]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d2e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8008d32:	2200      	movs	r2, #0
 8008d34:	601a      	str	r2, [r3, #0]
 8008d36:	605a      	str	r2, [r3, #4]
 8008d38:	609a      	str	r2, [r3, #8]
 8008d3a:	60da      	str	r2, [r3, #12]
 8008d3c:	611a      	str	r2, [r3, #16]
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008d3e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008d42:	2200      	movs	r2, #0
 8008d44:	601a      	str	r2, [r3, #0]
 8008d46:	605a      	str	r2, [r3, #4]
 8008d48:	609a      	str	r2, [r3, #8]
 8008d4a:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008d4c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008d50:	2200      	movs	r2, #0
 8008d52:	601a      	str	r2, [r3, #0]
 8008d54:	605a      	str	r2, [r3, #4]
 8008d56:	609a      	str	r2, [r3, #8]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8008d58:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	601a      	str	r2, [r3, #0]
 8008d60:	605a      	str	r2, [r3, #4]
 8008d62:	609a      	str	r2, [r3, #8]
 8008d64:	60da      	str	r2, [r3, #12]
 8008d66:	611a      	str	r2, [r3, #16]
 8008d68:	615a      	str	r2, [r3, #20]
 8008d6a:	619a      	str	r2, [r3, #24]
    TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8008d6c:	f107 0310 	add.w	r3, r7, #16
 8008d70:	222c      	movs	r2, #44	; 0x2c
 8008d72:	2100      	movs	r1, #0
 8008d74:	4618      	mov	r0, r3
 8008d76:	f000 ff5f 	bl	8009c38 <memset>
    switch (timer)
 8008d7a:	79fb      	ldrb	r3, [r7, #7]
 8008d7c:	2b02      	cmp	r3, #2
 8008d7e:	f000 8147 	beq.w	8009010 <board_init_common_timer_init+0x2ec>
 8008d82:	2b02      	cmp	r3, #2
 8008d84:	f300 8162 	bgt.w	800904c <board_init_common_timer_init+0x328>
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d003      	beq.n	8008d94 <board_init_common_timer_init+0x70>
 8008d8c:	2b01      	cmp	r3, #1
 8008d8e:	f000 80bb 	beq.w	8008f08 <board_init_common_timer_init+0x1e4>
            g_tim16_handle.Init.RepetitionCounter = 0;
            g_tim16_handle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
            if (HAL_TIM_Base_Init(&g_tim16_handle) != HAL_OK) Error_Handler();
        break;
        default:
        break;
 8008d92:	e15b      	b.n	800904c <board_init_common_timer_init+0x328>
            g_tim1_handle.Instance = TIM1;
 8008d94:	4bb1      	ldr	r3, [pc, #708]	; (800905c <board_init_common_timer_init+0x338>)
 8008d96:	4ab2      	ldr	r2, [pc, #712]	; (8009060 <board_init_common_timer_init+0x33c>)
 8008d98:	601a      	str	r2, [r3, #0]
            g_tim1_handle.Init.Prescaler = 0;
 8008d9a:	4bb0      	ldr	r3, [pc, #704]	; (800905c <board_init_common_timer_init+0x338>)
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	605a      	str	r2, [r3, #4]
            g_tim1_handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008da0:	4bae      	ldr	r3, [pc, #696]	; (800905c <board_init_common_timer_init+0x338>)
 8008da2:	2200      	movs	r2, #0
 8008da4:	609a      	str	r2, [r3, #8]
            g_tim1_handle.Init.Period = 60-1;
 8008da6:	4bad      	ldr	r3, [pc, #692]	; (800905c <board_init_common_timer_init+0x338>)
 8008da8:	223b      	movs	r2, #59	; 0x3b
 8008daa:	60da      	str	r2, [r3, #12]
            g_tim1_handle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008dac:	4bab      	ldr	r3, [pc, #684]	; (800905c <board_init_common_timer_init+0x338>)
 8008dae:	2200      	movs	r2, #0
 8008db0:	611a      	str	r2, [r3, #16]
            g_tim1_handle.Init.RepetitionCounter = 0;
 8008db2:	4baa      	ldr	r3, [pc, #680]	; (800905c <board_init_common_timer_init+0x338>)
 8008db4:	2200      	movs	r2, #0
 8008db6:	615a      	str	r2, [r3, #20]
            g_tim1_handle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008db8:	4ba8      	ldr	r3, [pc, #672]	; (800905c <board_init_common_timer_init+0x338>)
 8008dba:	2200      	movs	r2, #0
 8008dbc:	619a      	str	r2, [r3, #24]
            if (HAL_TIM_Base_Init(&g_tim1_handle) != HAL_OK) Error_Handler();
 8008dbe:	48a7      	ldr	r0, [pc, #668]	; (800905c <board_init_common_timer_init+0x338>)
 8008dc0:	f7fe fc4e 	bl	8007660 <HAL_TIM_Base_Init>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d001      	beq.n	8008dce <board_init_common_timer_init+0xaa>
 8008dca:	f000 fa83 	bl	80092d4 <Error_Handler>
            sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008dce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008dd2:	667b      	str	r3, [r7, #100]	; 0x64
            if (HAL_TIM_ConfigClockSource(&g_tim1_handle, &sClockSourceConfig) != HAL_OK) Error_Handler();
 8008dd4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008dd8:	4619      	mov	r1, r3
 8008dda:	48a0      	ldr	r0, [pc, #640]	; (800905c <board_init_common_timer_init+0x338>)
 8008ddc:	f7ff f8e2 	bl	8007fa4 <HAL_TIM_ConfigClockSource>
 8008de0:	4603      	mov	r3, r0
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d001      	beq.n	8008dea <board_init_common_timer_init+0xc6>
 8008de6:	f000 fa75 	bl	80092d4 <Error_Handler>
            if (HAL_TIM_PWM_Init(&g_tim1_handle) != HAL_OK) Error_Handler();
 8008dea:	489c      	ldr	r0, [pc, #624]	; (800905c <board_init_common_timer_init+0x338>)
 8008dec:	f7fe fc8f 	bl	800770e <HAL_TIM_PWM_Init>
 8008df0:	4603      	mov	r3, r0
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d001      	beq.n	8008dfa <board_init_common_timer_init+0xd6>
 8008df6:	f000 fa6d 	bl	80092d4 <Error_Handler>
            sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	65bb      	str	r3, [r7, #88]	; 0x58
            sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	65fb      	str	r3, [r7, #92]	; 0x5c
            sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008e02:	2300      	movs	r3, #0
 8008e04:	663b      	str	r3, [r7, #96]	; 0x60
            if (HAL_TIMEx_MasterConfigSynchronization(&g_tim1_handle, &sMasterConfig) != HAL_OK) Error_Handler();
 8008e06:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008e0a:	4619      	mov	r1, r3
 8008e0c:	4893      	ldr	r0, [pc, #588]	; (800905c <board_init_common_timer_init+0x338>)
 8008e0e:	f7ff fe19 	bl	8008a44 <HAL_TIMEx_MasterConfigSynchronization>
 8008e12:	4603      	mov	r3, r0
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d001      	beq.n	8008e1c <board_init_common_timer_init+0xf8>
 8008e18:	f000 fa5c 	bl	80092d4 <Error_Handler>
            sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008e1c:	2360      	movs	r3, #96	; 0x60
 8008e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
            sConfigOC.Pulse = 0;
 8008e20:	2300      	movs	r3, #0
 8008e22:	643b      	str	r3, [r7, #64]	; 0x40
            sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008e24:	2300      	movs	r3, #0
 8008e26:	647b      	str	r3, [r7, #68]	; 0x44
            sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8008e28:	2300      	movs	r3, #0
 8008e2a:	64bb      	str	r3, [r7, #72]	; 0x48
            sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	64fb      	str	r3, [r7, #76]	; 0x4c
            sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8008e30:	2300      	movs	r3, #0
 8008e32:	653b      	str	r3, [r7, #80]	; 0x50
            sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8008e34:	2300      	movs	r3, #0
 8008e36:	657b      	str	r3, [r7, #84]	; 0x54
            if (HAL_TIM_PWM_ConfigChannel(&g_tim1_handle, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) Error_Handler();
 8008e38:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	4619      	mov	r1, r3
 8008e40:	4886      	ldr	r0, [pc, #536]	; (800905c <board_init_common_timer_init+0x338>)
 8008e42:	f7fe ff9b 	bl	8007d7c <HAL_TIM_PWM_ConfigChannel>
 8008e46:	4603      	mov	r3, r0
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d001      	beq.n	8008e50 <board_init_common_timer_init+0x12c>
 8008e4c:	f000 fa42 	bl	80092d4 <Error_Handler>
            if (HAL_TIM_PWM_ConfigChannel(&g_tim1_handle, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) Error_Handler();
 8008e50:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008e54:	2204      	movs	r2, #4
 8008e56:	4619      	mov	r1, r3
 8008e58:	4880      	ldr	r0, [pc, #512]	; (800905c <board_init_common_timer_init+0x338>)
 8008e5a:	f7fe ff8f 	bl	8007d7c <HAL_TIM_PWM_ConfigChannel>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d001      	beq.n	8008e68 <board_init_common_timer_init+0x144>
 8008e64:	f000 fa36 	bl	80092d4 <Error_Handler>
            if (HAL_TIM_PWM_ConfigChannel(&g_tim1_handle, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) Error_Handler();
 8008e68:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008e6c:	2208      	movs	r2, #8
 8008e6e:	4619      	mov	r1, r3
 8008e70:	487a      	ldr	r0, [pc, #488]	; (800905c <board_init_common_timer_init+0x338>)
 8008e72:	f7fe ff83 	bl	8007d7c <HAL_TIM_PWM_ConfigChannel>
 8008e76:	4603      	mov	r3, r0
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d001      	beq.n	8008e80 <board_init_common_timer_init+0x15c>
 8008e7c:	f000 fa2a 	bl	80092d4 <Error_Handler>
            sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8008e80:	2300      	movs	r3, #0
 8008e82:	613b      	str	r3, [r7, #16]
            sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8008e84:	2300      	movs	r3, #0
 8008e86:	617b      	str	r3, [r7, #20]
            sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	61bb      	str	r3, [r7, #24]
            sBreakDeadTimeConfig.DeadTime = 0;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	61fb      	str	r3, [r7, #28]
            sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8008e90:	2300      	movs	r3, #0
 8008e92:	623b      	str	r3, [r7, #32]
            sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8008e94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008e98:	627b      	str	r3, [r7, #36]	; 0x24
            sBreakDeadTimeConfig.BreakFilter = 0;
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	62bb      	str	r3, [r7, #40]	; 0x28
            sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
            sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8008ea2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008ea6:	633b      	str	r3, [r7, #48]	; 0x30
            sBreakDeadTimeConfig.Break2Filter = 0;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	637b      	str	r3, [r7, #52]	; 0x34
            sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8008eac:	2300      	movs	r3, #0
 8008eae:	63bb      	str	r3, [r7, #56]	; 0x38
            if (HAL_TIMEx_ConfigBreakDeadTime(&g_tim1_handle, &sBreakDeadTimeConfig) != HAL_OK) Error_Handler();
 8008eb0:	f107 0310 	add.w	r3, r7, #16
 8008eb4:	4619      	mov	r1, r3
 8008eb6:	4869      	ldr	r0, [pc, #420]	; (800905c <board_init_common_timer_init+0x338>)
 8008eb8:	f7ff fe2a 	bl	8008b10 <HAL_TIMEx_ConfigBreakDeadTime>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d001      	beq.n	8008ec6 <board_init_common_timer_init+0x1a2>
 8008ec2:	f000 fa07 	bl	80092d4 <Error_Handler>
            HAL_TIM_PWM_Stop_DMA(&g_tim1_handle, TIM_CHANNEL_1);
 8008ec6:	2100      	movs	r1, #0
 8008ec8:	4864      	ldr	r0, [pc, #400]	; (800905c <board_init_common_timer_init+0x338>)
 8008eca:	f7fe fe6f 	bl	8007bac <HAL_TIM_PWM_Stop_DMA>
            HAL_TIM_PWM_Stop_DMA(&g_tim1_handle, TIM_CHANNEL_2);
 8008ece:	2104      	movs	r1, #4
 8008ed0:	4862      	ldr	r0, [pc, #392]	; (800905c <board_init_common_timer_init+0x338>)
 8008ed2:	f7fe fe6b 	bl	8007bac <HAL_TIM_PWM_Stop_DMA>
            HAL_TIM_PWM_Stop_DMA(&g_tim1_handle, TIM_CHANNEL_3);
 8008ed6:	2108      	movs	r1, #8
 8008ed8:	4860      	ldr	r0, [pc, #384]	; (800905c <board_init_common_timer_init+0x338>)
 8008eda:	f7fe fe67 	bl	8007bac <HAL_TIM_PWM_Stop_DMA>
            GPIO_InitStruct.Pin = PIN_TIM1_CH1|PIN_TIM1_CH2|PIN_TIM1_CH3;
 8008ede:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8008ee2:	677b      	str	r3, [r7, #116]	; 0x74
            GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ee4:	2302      	movs	r3, #2
 8008ee6:	67bb      	str	r3, [r7, #120]	; 0x78
            GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ee8:	2300      	movs	r3, #0
 8008eea:	67fb      	str	r3, [r7, #124]	; 0x7c
            GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008eec:	2300      	movs	r3, #0
 8008eee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
            HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008ef8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8008efc:	4619      	mov	r1, r3
 8008efe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008f02:	f7fc fef7 	bl	8005cf4 <HAL_GPIO_Init>
        break;
 8008f06:	e0a4      	b.n	8009052 <board_init_common_timer_init+0x32e>
            g_tim15_handle.Instance = TIM15;
 8008f08:	4b56      	ldr	r3, [pc, #344]	; (8009064 <board_init_common_timer_init+0x340>)
 8008f0a:	4a57      	ldr	r2, [pc, #348]	; (8009068 <board_init_common_timer_init+0x344>)
 8008f0c:	601a      	str	r2, [r3, #0]
            g_tim15_handle.Init.Prescaler = 0;
 8008f0e:	4b55      	ldr	r3, [pc, #340]	; (8009064 <board_init_common_timer_init+0x340>)
 8008f10:	2200      	movs	r2, #0
 8008f12:	605a      	str	r2, [r3, #4]
            g_tim15_handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008f14:	4b53      	ldr	r3, [pc, #332]	; (8009064 <board_init_common_timer_init+0x340>)
 8008f16:	2200      	movs	r2, #0
 8008f18:	609a      	str	r2, [r3, #8]
            g_tim15_handle.Init.Period = 60-1;
 8008f1a:	4b52      	ldr	r3, [pc, #328]	; (8009064 <board_init_common_timer_init+0x340>)
 8008f1c:	223b      	movs	r2, #59	; 0x3b
 8008f1e:	60da      	str	r2, [r3, #12]
            g_tim15_handle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008f20:	4b50      	ldr	r3, [pc, #320]	; (8009064 <board_init_common_timer_init+0x340>)
 8008f22:	2200      	movs	r2, #0
 8008f24:	611a      	str	r2, [r3, #16]
            g_tim15_handle.Init.RepetitionCounter = 0;
 8008f26:	4b4f      	ldr	r3, [pc, #316]	; (8009064 <board_init_common_timer_init+0x340>)
 8008f28:	2200      	movs	r2, #0
 8008f2a:	615a      	str	r2, [r3, #20]
            g_tim15_handle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008f2c:	4b4d      	ldr	r3, [pc, #308]	; (8009064 <board_init_common_timer_init+0x340>)
 8008f2e:	2200      	movs	r2, #0
 8008f30:	619a      	str	r2, [r3, #24]
            if (HAL_TIM_PWM_Init(&g_tim15_handle) != HAL_OK) Error_Handler();
 8008f32:	484c      	ldr	r0, [pc, #304]	; (8009064 <board_init_common_timer_init+0x340>)
 8008f34:	f7fe fbeb 	bl	800770e <HAL_TIM_PWM_Init>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d001      	beq.n	8008f42 <board_init_common_timer_init+0x21e>
 8008f3e:	f000 f9c9 	bl	80092d4 <Error_Handler>
            sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008f42:	2300      	movs	r3, #0
 8008f44:	65bb      	str	r3, [r7, #88]	; 0x58
            sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008f46:	2300      	movs	r3, #0
 8008f48:	663b      	str	r3, [r7, #96]	; 0x60
            if (HAL_TIMEx_MasterConfigSynchronization(&g_tim15_handle, &sMasterConfig) != HAL_OK) Error_Handler();
 8008f4a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008f4e:	4619      	mov	r1, r3
 8008f50:	4844      	ldr	r0, [pc, #272]	; (8009064 <board_init_common_timer_init+0x340>)
 8008f52:	f7ff fd77 	bl	8008a44 <HAL_TIMEx_MasterConfigSynchronization>
 8008f56:	4603      	mov	r3, r0
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d001      	beq.n	8008f60 <board_init_common_timer_init+0x23c>
 8008f5c:	f000 f9ba 	bl	80092d4 <Error_Handler>
            sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008f60:	2360      	movs	r3, #96	; 0x60
 8008f62:	63fb      	str	r3, [r7, #60]	; 0x3c
            sConfigOC.Pulse = 0;
 8008f64:	2300      	movs	r3, #0
 8008f66:	643b      	str	r3, [r7, #64]	; 0x40
            sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008f68:	2300      	movs	r3, #0
 8008f6a:	647b      	str	r3, [r7, #68]	; 0x44
            sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	64bb      	str	r3, [r7, #72]	; 0x48
            sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008f70:	2300      	movs	r3, #0
 8008f72:	64fb      	str	r3, [r7, #76]	; 0x4c
            sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8008f74:	2300      	movs	r3, #0
 8008f76:	653b      	str	r3, [r7, #80]	; 0x50
            sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8008f78:	2300      	movs	r3, #0
 8008f7a:	657b      	str	r3, [r7, #84]	; 0x54
            if (HAL_TIM_PWM_ConfigChannel(&g_tim15_handle, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) Error_Handler();
 8008f7c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008f80:	2200      	movs	r2, #0
 8008f82:	4619      	mov	r1, r3
 8008f84:	4837      	ldr	r0, [pc, #220]	; (8009064 <board_init_common_timer_init+0x340>)
 8008f86:	f7fe fef9 	bl	8007d7c <HAL_TIM_PWM_ConfigChannel>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d001      	beq.n	8008f94 <board_init_common_timer_init+0x270>
 8008f90:	f000 f9a0 	bl	80092d4 <Error_Handler>
            sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8008f94:	2300      	movs	r3, #0
 8008f96:	613b      	str	r3, [r7, #16]
            sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	617b      	str	r3, [r7, #20]
            sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	61bb      	str	r3, [r7, #24]
            sBreakDeadTimeConfig.DeadTime = 0;
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	61fb      	str	r3, [r7, #28]
            sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	623b      	str	r3, [r7, #32]
            sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8008fa8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008fac:	627b      	str	r3, [r7, #36]	; 0x24
            sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	63bb      	str	r3, [r7, #56]	; 0x38
            if (HAL_TIMEx_ConfigBreakDeadTime(&g_tim15_handle, &sBreakDeadTimeConfig) != HAL_OK) Error_Handler();
 8008fb2:	f107 0310 	add.w	r3, r7, #16
 8008fb6:	4619      	mov	r1, r3
 8008fb8:	482a      	ldr	r0, [pc, #168]	; (8009064 <board_init_common_timer_init+0x340>)
 8008fba:	f7ff fda9 	bl	8008b10 <HAL_TIMEx_ConfigBreakDeadTime>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d001      	beq.n	8008fc8 <board_init_common_timer_init+0x2a4>
 8008fc4:	f000 f986 	bl	80092d4 <Error_Handler>
            HAL_TIM_PWM_Stop_DMA(&g_tim15_handle, TIM_CHANNEL_1);
 8008fc8:	2100      	movs	r1, #0
 8008fca:	4826      	ldr	r0, [pc, #152]	; (8009064 <board_init_common_timer_init+0x340>)
 8008fcc:	f7fe fdee 	bl	8007bac <HAL_TIM_PWM_Stop_DMA>
            __HAL_RCC_GPIOB_CLK_ENABLE();
 8008fd0:	4b26      	ldr	r3, [pc, #152]	; (800906c <board_init_common_timer_init+0x348>)
 8008fd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fd4:	4a25      	ldr	r2, [pc, #148]	; (800906c <board_init_common_timer_init+0x348>)
 8008fd6:	f043 0302 	orr.w	r3, r3, #2
 8008fda:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008fdc:	4b23      	ldr	r3, [pc, #140]	; (800906c <board_init_common_timer_init+0x348>)
 8008fde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fe0:	f003 0302 	and.w	r3, r3, #2
 8008fe4:	60fb      	str	r3, [r7, #12]
 8008fe6:	68fb      	ldr	r3, [r7, #12]
            GPIO_InitStruct.Pin = PIN_TIM15_CH1;
 8008fe8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008fec:	677b      	str	r3, [r7, #116]	; 0x74
            GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008fee:	2302      	movs	r3, #2
 8008ff0:	67bb      	str	r3, [r7, #120]	; 0x78
            GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	67fb      	str	r3, [r7, #124]	; 0x7c
            GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8008ffc:	230e      	movs	r3, #14
 8008ffe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
            HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009002:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8009006:	4619      	mov	r1, r3
 8009008:	4819      	ldr	r0, [pc, #100]	; (8009070 <board_init_common_timer_init+0x34c>)
 800900a:	f7fc fe73 	bl	8005cf4 <HAL_GPIO_Init>
        break;
 800900e:	e020      	b.n	8009052 <board_init_common_timer_init+0x32e>
            g_tim16_handle.Instance = TIM16;
 8009010:	4b18      	ldr	r3, [pc, #96]	; (8009074 <board_init_common_timer_init+0x350>)
 8009012:	4a19      	ldr	r2, [pc, #100]	; (8009078 <board_init_common_timer_init+0x354>)
 8009014:	601a      	str	r2, [r3, #0]
            g_tim16_handle.Init.Prescaler = 0;
 8009016:	4b17      	ldr	r3, [pc, #92]	; (8009074 <board_init_common_timer_init+0x350>)
 8009018:	2200      	movs	r2, #0
 800901a:	605a      	str	r2, [r3, #4]
            g_tim16_handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 800901c:	4b15      	ldr	r3, [pc, #84]	; (8009074 <board_init_common_timer_init+0x350>)
 800901e:	2200      	movs	r2, #0
 8009020:	609a      	str	r2, [r3, #8]
            g_tim16_handle.Init.Period = 60-1;
 8009022:	4b14      	ldr	r3, [pc, #80]	; (8009074 <board_init_common_timer_init+0x350>)
 8009024:	223b      	movs	r2, #59	; 0x3b
 8009026:	60da      	str	r2, [r3, #12]
            g_tim16_handle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009028:	4b12      	ldr	r3, [pc, #72]	; (8009074 <board_init_common_timer_init+0x350>)
 800902a:	2200      	movs	r2, #0
 800902c:	611a      	str	r2, [r3, #16]
            g_tim16_handle.Init.RepetitionCounter = 0;
 800902e:	4b11      	ldr	r3, [pc, #68]	; (8009074 <board_init_common_timer_init+0x350>)
 8009030:	2200      	movs	r2, #0
 8009032:	615a      	str	r2, [r3, #20]
            g_tim16_handle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009034:	4b0f      	ldr	r3, [pc, #60]	; (8009074 <board_init_common_timer_init+0x350>)
 8009036:	2200      	movs	r2, #0
 8009038:	619a      	str	r2, [r3, #24]
            if (HAL_TIM_Base_Init(&g_tim16_handle) != HAL_OK) Error_Handler();
 800903a:	480e      	ldr	r0, [pc, #56]	; (8009074 <board_init_common_timer_init+0x350>)
 800903c:	f7fe fb10 	bl	8007660 <HAL_TIM_Base_Init>
 8009040:	4603      	mov	r3, r0
 8009042:	2b00      	cmp	r3, #0
 8009044:	d004      	beq.n	8009050 <board_init_common_timer_init+0x32c>
 8009046:	f000 f945 	bl	80092d4 <Error_Handler>
        break;
 800904a:	e001      	b.n	8009050 <board_init_common_timer_init+0x32c>
        break;
 800904c:	bf00      	nop
 800904e:	e000      	b.n	8009052 <board_init_common_timer_init+0x32e>
        break;
 8009050:	bf00      	nop
    }
}
 8009052:	bf00      	nop
 8009054:	3788      	adds	r7, #136	; 0x88
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}
 800905a:	bf00      	nop
 800905c:	20001e1c 	.word	0x20001e1c
 8009060:	40012c00 	.word	0x40012c00
 8009064:	20001e68 	.word	0x20001e68
 8009068:	40014000 	.word	0x40014000
 800906c:	40021000 	.word	0x40021000
 8009070:	48000400 	.word	0x48000400
 8009074:	20001eb4 	.word	0x20001eb4
 8009078:	40014400 	.word	0x40014400

0800907c <board_init_common_nvic_setup_interrupts>:


static void board_init_common_nvic_setup_interrupts(void)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	af00      	add	r7, sp, #0
    HAL_NVIC_SetPriority(EXTI0_IRQn, 24, 0);
 8009080:	2200      	movs	r2, #0
 8009082:	2118      	movs	r1, #24
 8009084:	2006      	movs	r0, #6
 8009086:	f7fc fbb8 	bl	80057fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800908a:	2006      	movs	r0, #6
 800908c:	f7fc fbd1 	bl	8005832 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI2_IRQn, 24, 0);
 8009090:	2200      	movs	r2, #0
 8009092:	2118      	movs	r1, #24
 8009094:	2008      	movs	r0, #8
 8009096:	f7fc fbb0 	bl	80057fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800909a:	2008      	movs	r0, #8
 800909c:	f7fc fbc9 	bl	8005832 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI9_5_IRQn , 24, 0);
 80090a0:	2200      	movs	r2, #0
 80090a2:	2118      	movs	r1, #24
 80090a4:	2017      	movs	r0, #23
 80090a6:	f7fc fba8 	bl	80057fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80090aa:	2017      	movs	r0, #23
 80090ac:	f7fc fbc1 	bl	8005832 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 24, 0);
 80090b0:	2200      	movs	r2, #0
 80090b2:	2118      	movs	r1, #24
 80090b4:	2028      	movs	r0, #40	; 0x28
 80090b6:	f7fc fba0 	bl	80057fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80090ba:	2028      	movs	r0, #40	; 0x28
 80090bc:	f7fc fbb9 	bl	8005832 <HAL_NVIC_EnableIRQ>

    __HAL_GPIO_EXTI_CLEAR_IT(EXTI0_IRQn);
 80090c0:	4b1a      	ldr	r3, [pc, #104]	; (800912c <board_init_common_nvic_setup_interrupts+0xb0>)
 80090c2:	2206      	movs	r2, #6
 80090c4:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI9_5_IRQn);
 80090c6:	4b19      	ldr	r3, [pc, #100]	; (800912c <board_init_common_nvic_setup_interrupts+0xb0>)
 80090c8:	2217      	movs	r2, #23
 80090ca:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI15_10_IRQn);
 80090cc:	4b17      	ldr	r3, [pc, #92]	; (800912c <board_init_common_nvic_setup_interrupts+0xb0>)
 80090ce:	2228      	movs	r2, #40	; 0x28
 80090d0:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI2_IRQn);
 80090d2:	4b16      	ldr	r3, [pc, #88]	; (800912c <board_init_common_nvic_setup_interrupts+0xb0>)
 80090d4:	2208      	movs	r2, #8
 80090d6:	615a      	str	r2, [r3, #20]

    HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80090d8:	2200      	movs	r2, #0
 80090da:	2100      	movs	r1, #0
 80090dc:	200c      	movs	r0, #12
 80090de:	f7fc fb8c 	bl	80057fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80090e2:	200c      	movs	r0, #12
 80090e4:	f7fc fba5 	bl	8005832 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80090e8:	2200      	movs	r2, #0
 80090ea:	2100      	movs	r1, #0
 80090ec:	200d      	movs	r0, #13
 80090ee:	f7fc fb84 	bl	80057fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80090f2:	200d      	movs	r0, #13
 80090f4:	f7fc fb9d 	bl	8005832 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80090f8:	2200      	movs	r2, #0
 80090fa:	2100      	movs	r1, #0
 80090fc:	200f      	movs	r0, #15
 80090fe:	f7fc fb7c 	bl	80057fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8009102:	200f      	movs	r0, #15
 8009104:	f7fc fb95 	bl	8005832 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8009108:	2200      	movs	r2, #0
 800910a:	2100      	movs	r1, #0
 800910c:	2010      	movs	r0, #16
 800910e:	f7fc fb74 	bl	80057fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8009112:	2010      	movs	r0, #16
 8009114:	f7fc fb8d 	bl	8005832 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8009118:	2200      	movs	r2, #0
 800911a:	2100      	movs	r1, #0
 800911c:	2011      	movs	r0, #17
 800911e:	f7fc fb6c 	bl	80057fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8009122:	2011      	movs	r0, #17
 8009124:	f7fc fb85 	bl	8005832 <HAL_NVIC_EnableIRQ>
}
 8009128:	bf00      	nop
 800912a:	bd80      	pop	{r7, pc}
 800912c:	40010400 	.word	0x40010400

08009130 <board_init_common_board_init>:


void board_init_common_board_init(void)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b08c      	sub	sp, #48	; 0x30
 8009134:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009136:	f107 0318 	add.w	r3, r7, #24
 800913a:	2200      	movs	r2, #0
 800913c:	601a      	str	r2, [r3, #0]
 800913e:	605a      	str	r2, [r3, #4]
 8009140:	609a      	str	r2, [r3, #8]
 8009142:	60da      	str	r2, [r3, #12]
 8009144:	611a      	str	r2, [r3, #16]

    srand(time(0));
 8009146:	2000      	movs	r0, #0
 8009148:	f000 feda 	bl	8009f00 <time>
 800914c:	4602      	mov	r2, r0
 800914e:	460b      	mov	r3, r1
 8009150:	4613      	mov	r3, r2
 8009152:	4618      	mov	r0, r3
 8009154:	f000 fe58 	bl	8009e08 <srand>
    HAL_Init();
 8009158:	f7fc f9f0 	bl	800553c <HAL_Init>
    SystemClock_Config();
 800915c:	f7ff fd78 	bl	8008c50 <SystemClock_Config>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009160:	4b45      	ldr	r3, [pc, #276]	; (8009278 <board_init_common_board_init+0x148>)
 8009162:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009164:	4a44      	ldr	r2, [pc, #272]	; (8009278 <board_init_common_board_init+0x148>)
 8009166:	f043 0301 	orr.w	r3, r3, #1
 800916a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800916c:	4b42      	ldr	r3, [pc, #264]	; (8009278 <board_init_common_board_init+0x148>)
 800916e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009170:	f003 0301 	and.w	r3, r3, #1
 8009174:	617b      	str	r3, [r7, #20]
 8009176:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009178:	4b3f      	ldr	r3, [pc, #252]	; (8009278 <board_init_common_board_init+0x148>)
 800917a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800917c:	4a3e      	ldr	r2, [pc, #248]	; (8009278 <board_init_common_board_init+0x148>)
 800917e:	f043 0302 	orr.w	r3, r3, #2
 8009182:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009184:	4b3c      	ldr	r3, [pc, #240]	; (8009278 <board_init_common_board_init+0x148>)
 8009186:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009188:	f003 0302 	and.w	r3, r3, #2
 800918c:	613b      	str	r3, [r7, #16]
 800918e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009190:	4b39      	ldr	r3, [pc, #228]	; (8009278 <board_init_common_board_init+0x148>)
 8009192:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009194:	4a38      	ldr	r2, [pc, #224]	; (8009278 <board_init_common_board_init+0x148>)
 8009196:	f043 0304 	orr.w	r3, r3, #4
 800919a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800919c:	4b36      	ldr	r3, [pc, #216]	; (8009278 <board_init_common_board_init+0x148>)
 800919e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091a0:	f003 0304 	and.w	r3, r3, #4
 80091a4:	60fb      	str	r3, [r7, #12]
 80091a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80091a8:	4b33      	ldr	r3, [pc, #204]	; (8009278 <board_init_common_board_init+0x148>)
 80091aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091ac:	4a32      	ldr	r2, [pc, #200]	; (8009278 <board_init_common_board_init+0x148>)
 80091ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80091b4:	4b30      	ldr	r3, [pc, #192]	; (8009278 <board_init_common_board_init+0x148>)
 80091b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091bc:	60bb      	str	r3, [r7, #8]
 80091be:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_DMA1_CLK_ENABLE();
 80091c0:	4b2d      	ldr	r3, [pc, #180]	; (8009278 <board_init_common_board_init+0x148>)
 80091c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091c4:	4a2c      	ldr	r2, [pc, #176]	; (8009278 <board_init_common_board_init+0x148>)
 80091c6:	f043 0301 	orr.w	r3, r3, #1
 80091ca:	6493      	str	r3, [r2, #72]	; 0x48
 80091cc:	4b2a      	ldr	r3, [pc, #168]	; (8009278 <board_init_common_board_init+0x148>)
 80091ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091d0:	f003 0301 	and.w	r3, r3, #1
 80091d4:	607b      	str	r3, [r7, #4]
 80091d6:	687b      	ldr	r3, [r7, #4]

    // setup the wakeups as only interrupts without the WKUP enabled yet... TODO
    GPIO_InitStruct.Pin = PIN_WKUP_1|PIN_WKUP_4;
 80091d8:	2305      	movs	r3, #5
 80091da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80091dc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80091e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80091e2:	2301      	movs	r3, #1
 80091e4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(PIN_PORT_A, &GPIO_InitStruct);
 80091e6:	f107 0318 	add.w	r3, r7, #24
 80091ea:	4619      	mov	r1, r3
 80091ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80091f0:	f7fc fd80 	bl	8005cf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PIN_WKUP_2|PIN_WKUP_3;
 80091f4:	f242 0320 	movw	r3, #8224	; 0x2020
 80091f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80091fa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80091fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009200:	2301      	movs	r3, #1
 8009202:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 8009204:	f107 0318 	add.w	r3, r7, #24
 8009208:	4619      	mov	r1, r3
 800920a:	481c      	ldr	r0, [pc, #112]	; (800927c <board_init_common_board_init+0x14c>)
 800920c:	f7fc fd72 	bl	8005cf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PIN_LVL_EN | PIN_LED_OUT_1 | PIN_LED_OUT_2;
 8009210:	238c      	movs	r3, #140	; 0x8c
 8009212:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009214:	2301      	movs	r3, #1
 8009216:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8009218:	2302      	movs	r3, #2
 800921a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 800921c:	f107 0318 	add.w	r3, r7, #24
 8009220:	4619      	mov	r1, r3
 8009222:	4816      	ldr	r0, [pc, #88]	; (800927c <board_init_common_board_init+0x14c>)
 8009224:	f7fc fd66 	bl	8005cf4 <HAL_GPIO_Init>

    board_init_specific();
 8009228:	f000 f85a 	bl	80092e0 <board_init_specific>

    for (uint8_t iii = 0; iii < NUM_TIMERS; iii++) board_init_common_timer_init(iii);
 800922c:	2300      	movs	r3, #0
 800922e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009232:	e009      	b.n	8009248 <board_init_common_board_init+0x118>
 8009234:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009238:	4618      	mov	r0, r3
 800923a:	f7ff fd73 	bl	8008d24 <board_init_common_timer_init>
 800923e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009242:	3301      	adds	r3, #1
 8009244:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009248:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800924c:	2b02      	cmp	r3, #2
 800924e:	d9f1      	bls.n	8009234 <board_init_common_board_init+0x104>

    board_init_common_nvic_setup_interrupts();
 8009250:	f7ff ff14 	bl	800907c <board_init_common_nvic_setup_interrupts>

    board_init_common_rtc_init();
 8009254:	f7ff fcd4 	bl	8008c00 <board_init_common_rtc_init>
    ws2812b_init();
 8009258:	f7f9 fa12 	bl	8002680 <ws2812b_init>
    reset_ws2812b();
 800925c:	f7f9 f82e 	bl	80022bc <reset_ws2812b>
    color_led_init();
 8009260:	f7f8 f9ea 	bl	8001638 <color_led_init>
    //animate_led_init(); // not yet defined..

    HAL_GPIO_WritePin(GPIOC, PIN_LED_OUT_1|PIN_LED_OUT_2, GPIO_PIN_RESET);
 8009264:	2200      	movs	r2, #0
 8009266:	210c      	movs	r1, #12
 8009268:	4804      	ldr	r0, [pc, #16]	; (800927c <board_init_common_board_init+0x14c>)
 800926a:	f7fc febd 	bl	8005fe8 <HAL_GPIO_WritePin>
}
 800926e:	bf00      	nop
 8009270:	3730      	adds	r7, #48	; 0x30
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}
 8009276:	bf00      	nop
 8009278:	40021000 	.word	0x40021000
 800927c:	48000800 	.word	0x48000800

08009280 <board_init_common_button_pressed>:


void board_init_common_button_pressed(board_init_push_buttons_e button)
{
 8009280:	b480      	push	{r7}
 8009282:	b083      	sub	sp, #12
 8009284:	af00      	add	r7, sp, #0
 8009286:	4603      	mov	r3, r0
 8009288:	71fb      	strb	r3, [r7, #7]
    button_press_state[(uint8_t)button] = true;
 800928a:	79fb      	ldrb	r3, [r7, #7]
 800928c:	4a04      	ldr	r2, [pc, #16]	; (80092a0 <board_init_common_button_pressed+0x20>)
 800928e:	2101      	movs	r1, #1
 8009290:	54d1      	strb	r1, [r2, r3]
}
 8009292:	bf00      	nop
 8009294:	370c      	adds	r7, #12
 8009296:	46bd      	mov	sp, r7
 8009298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929c:	4770      	bx	lr
 800929e:	bf00      	nop
 80092a0:	20001f04 	.word	0x20001f04

080092a4 <board_init_common_stop_timer>:


void board_init_common_stop_timer(void)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Stop_DMA(&g_tim1_handle, TIM_CHANNEL_1);
 80092a8:	2100      	movs	r1, #0
 80092aa:	4808      	ldr	r0, [pc, #32]	; (80092cc <board_init_common_stop_timer+0x28>)
 80092ac:	f7fe fc7e 	bl	8007bac <HAL_TIM_PWM_Stop_DMA>
    HAL_TIM_PWM_Stop_DMA(&g_tim1_handle, TIM_CHANNEL_2);
 80092b0:	2104      	movs	r1, #4
 80092b2:	4806      	ldr	r0, [pc, #24]	; (80092cc <board_init_common_stop_timer+0x28>)
 80092b4:	f7fe fc7a 	bl	8007bac <HAL_TIM_PWM_Stop_DMA>
    HAL_TIM_PWM_Stop_DMA(&g_tim1_handle, TIM_CHANNEL_3);
 80092b8:	2108      	movs	r1, #8
 80092ba:	4804      	ldr	r0, [pc, #16]	; (80092cc <board_init_common_stop_timer+0x28>)
 80092bc:	f7fe fc76 	bl	8007bac <HAL_TIM_PWM_Stop_DMA>
    HAL_TIM_PWM_Stop_DMA(&g_tim15_handle, TIM_CHANNEL_1);
 80092c0:	2100      	movs	r1, #0
 80092c2:	4803      	ldr	r0, [pc, #12]	; (80092d0 <board_init_common_stop_timer+0x2c>)
 80092c4:	f7fe fc72 	bl	8007bac <HAL_TIM_PWM_Stop_DMA>
}
 80092c8:	bf00      	nop
 80092ca:	bd80      	pop	{r7, pc}
 80092cc:	20001e1c 	.word	0x20001e1c
 80092d0:	20001e68 	.word	0x20001e68

080092d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80092d4:	b480      	push	{r7}
 80092d6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80092d8:	b672      	cpsid	i
}
 80092da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80092dc:	e7fe      	b.n	80092dc <Error_Handler+0x8>
	...

080092e0 <board_init_specific>:
#include "stm32l4xx_hal.h"
#include "board_specific.h"


void board_init_specific(void)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b086      	sub	sp, #24
 80092e4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80092e6:	1d3b      	adds	r3, r7, #4
 80092e8:	2200      	movs	r2, #0
 80092ea:	601a      	str	r2, [r3, #0]
 80092ec:	605a      	str	r2, [r3, #4]
 80092ee:	609a      	str	r2, [r3, #8]
 80092f0:	60da      	str	r2, [r3, #12]
 80092f2:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = PIN_GPIO0|PIN_GPIO1|PIN_GPIO3;
 80092f4:	23e0      	movs	r3, #224	; 0xe0
 80092f6:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80092f8:	2301      	movs	r3, #1
 80092fa:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092fc:	2300      	movs	r3, #0
 80092fe:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_B, &GPIO_InitStruct);
 8009300:	1d3b      	adds	r3, r7, #4
 8009302:	4619      	mov	r1, r3
 8009304:	4818      	ldr	r0, [pc, #96]	; (8009368 <board_init_specific+0x88>)
 8009306:	f7fc fcf5 	bl	8005cf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PIN_ANALOG_IN;
 800930a:	2302      	movs	r3, #2
 800930c:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800930e:	230b      	movs	r3, #11
 8009310:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009312:	2300      	movs	r3, #0
 8009314:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_A, &GPIO_InitStruct);
 8009316:	1d3b      	adds	r3, r7, #4
 8009318:	4619      	mov	r1, r3
 800931a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800931e:	f7fc fce9 	bl	8005cf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PIN_SPI3_NSS;
 8009322:	2310      	movs	r3, #16
 8009324:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009326:	2301      	movs	r3, #1
 8009328:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800932a:	2300      	movs	r3, #0
 800932c:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_A, &GPIO_InitStruct);
 800932e:	1d3b      	adds	r3, r7, #4
 8009330:	4619      	mov	r1, r3
 8009332:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009336:	f7fc fcdd 	bl	8005cf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PIN_LVL_DIR;
 800933a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800933e:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009340:	2301      	movs	r3, #1
 8009342:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009344:	2300      	movs	r3, #0
 8009346:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 8009348:	1d3b      	adds	r3, r7, #4
 800934a:	4619      	mov	r1, r3
 800934c:	4807      	ldr	r0, [pc, #28]	; (800936c <board_init_specific+0x8c>)
 800934e:	f7fc fcd1 	bl	8005cf4 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(PIN_PORT_C, PIN_LVL_DIR, GPIO_PIN_SET);
 8009352:	2201      	movs	r2, #1
 8009354:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009358:	4804      	ldr	r0, [pc, #16]	; (800936c <board_init_specific+0x8c>)
 800935a:	f7fc fe45 	bl	8005fe8 <HAL_GPIO_WritePin>
}
 800935e:	bf00      	nop
 8009360:	3718      	adds	r7, #24
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}
 8009366:	bf00      	nop
 8009368:	48000400 	.word	0x48000400
 800936c:	48000800 	.word	0x48000800

08009370 <main>:
#include "cmsis_os.h"
#include "task_create.h"


int main(void)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	af00      	add	r7, sp, #0
    board_init_common_board_init();
 8009374:	f7ff fedc 	bl	8009130 <board_init_common_board_init>
	task_create();
 8009378:	f000 f81c 	bl	80093b4 <task_create>
	osKernelStart();
 800937c:	f7f9 fa66 	bl	800284c <osKernelStart>
 8009380:	2300      	movs	r3, #0
}
 8009382:	4618      	mov	r0, r3
 8009384:	bd80      	pop	{r7, pc}

08009386 <random_num>:
#include <stdint.h>
#include <stdlib.h>
#include "numbers.h"

uint32_t random_num(uint32_t min, uint32_t max)
{
 8009386:	b580      	push	{r7, lr}
 8009388:	b082      	sub	sp, #8
 800938a:	af00      	add	r7, sp, #0
 800938c:	6078      	str	r0, [r7, #4]
 800938e:	6039      	str	r1, [r7, #0]
   return min + rand() % (max - min);
 8009390:	f000 fd68 	bl	8009e64 <rand>
 8009394:	4603      	mov	r3, r0
 8009396:	461a      	mov	r2, r3
 8009398:	6839      	ldr	r1, [r7, #0]
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	1acb      	subs	r3, r1, r3
 800939e:	fbb2 f1f3 	udiv	r1, r2, r3
 80093a2:	fb01 f303 	mul.w	r3, r1, r3
 80093a6:	1ad2      	subs	r2, r2, r3
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	4413      	add	r3, r2
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	3708      	adds	r7, #8
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}

080093b4 <task_create>:
//	.priority = (osPriority_t) osPriorityNormal,
//};


void task_create(void)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	af00      	add	r7, sp, #0
    osKernelInitialize();
 80093b8:	f7f9 fa24 	bl	8002804 <osKernelInitialize>
    g_led_ctrl_handle = osThreadNew(task_led_ctrl, NULL, &g_task_led_ctrl_attributes);
 80093bc:	4a08      	ldr	r2, [pc, #32]	; (80093e0 <task_create+0x2c>)
 80093be:	2100      	movs	r1, #0
 80093c0:	4808      	ldr	r0, [pc, #32]	; (80093e4 <task_create+0x30>)
 80093c2:	f7f9 fa69 	bl	8002898 <osThreadNew>
 80093c6:	4603      	mov	r3, r0
 80093c8:	4a07      	ldr	r2, [pc, #28]	; (80093e8 <task_create+0x34>)
 80093ca:	6013      	str	r3, [r2, #0]
	g_button_press_handle = osThreadNew(task_button_press, NULL, &g_task_button_press_attributes);
 80093cc:	4a07      	ldr	r2, [pc, #28]	; (80093ec <task_create+0x38>)
 80093ce:	2100      	movs	r1, #0
 80093d0:	4807      	ldr	r0, [pc, #28]	; (80093f0 <task_create+0x3c>)
 80093d2:	f7f9 fa61 	bl	8002898 <osThreadNew>
 80093d6:	4603      	mov	r3, r0
 80093d8:	4a06      	ldr	r2, [pc, #24]	; (80093f4 <task_create+0x40>)
 80093da:	6013      	str	r3, [r2, #0]
    //g_dma_transfer_handle = osThreadNew(task_dma_transfer, NULL, &g_task_dma_transfer_attributes);
}
 80093dc:	bf00      	nop
 80093de:	bd80      	pop	{r7, pc}
 80093e0:	0800ade4 	.word	0x0800ade4
 80093e4:	08001d99 	.word	0x08001d99
 80093e8:	20001f08 	.word	0x20001f08
 80093ec:	0800adc0 	.word	0x0800adc0
 80093f0:	08001901 	.word	0x08001901
 80093f4:	20001f0c 	.word	0x20001f0c

080093f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b084      	sub	sp, #16
 80093fc:	af00      	add	r7, sp, #0
  PWR_PVDTypeDef sConfigPVD = {0};
 80093fe:	f107 0308 	add.w	r3, r7, #8
 8009402:	2200      	movs	r2, #0
 8009404:	601a      	str	r2, [r3, #0]
 8009406:	605a      	str	r2, [r3, #4]

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009408:	4b13      	ldr	r3, [pc, #76]	; (8009458 <HAL_MspInit+0x60>)
 800940a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800940c:	4a12      	ldr	r2, [pc, #72]	; (8009458 <HAL_MspInit+0x60>)
 800940e:	f043 0301 	orr.w	r3, r3, #1
 8009412:	6613      	str	r3, [r2, #96]	; 0x60
 8009414:	4b10      	ldr	r3, [pc, #64]	; (8009458 <HAL_MspInit+0x60>)
 8009416:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009418:	f003 0301 	and.w	r3, r3, #1
 800941c:	607b      	str	r3, [r7, #4]
 800941e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009420:	4b0d      	ldr	r3, [pc, #52]	; (8009458 <HAL_MspInit+0x60>)
 8009422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009424:	4a0c      	ldr	r2, [pc, #48]	; (8009458 <HAL_MspInit+0x60>)
 8009426:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800942a:	6593      	str	r3, [r2, #88]	; 0x58
 800942c:	4b0a      	ldr	r3, [pc, #40]	; (8009458 <HAL_MspInit+0x60>)
 800942e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009430:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009434:	603b      	str	r3, [r7, #0]
 8009436:	683b      	ldr	r3, [r7, #0]

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 8009438:	2300      	movs	r3, #0
 800943a:	60bb      	str	r3, [r7, #8]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 800943c:	2300      	movs	r3, #0
 800943e:	60fb      	str	r3, [r7, #12]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8009440:	f107 0308 	add.w	r3, r7, #8
 8009444:	4618      	mov	r0, r3
 8009446:	f7fc fe1b 	bl	8006080 <HAL_PWR_ConfigPVD>
  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 800944a:	f7fc fe79 	bl	8006140 <HAL_PWR_EnablePVD>
}
 800944e:	bf00      	nop
 8009450:	3710      	adds	r7, #16
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}
 8009456:	bf00      	nop
 8009458:	40021000 	.word	0x40021000

0800945c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800945c:	b480      	push	{r7}
 800945e:	b083      	sub	sp, #12
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	4a08      	ldr	r2, [pc, #32]	; (800948c <HAL_RTC_MspInit+0x30>)
 800946a:	4293      	cmp	r3, r2
 800946c:	d107      	bne.n	800947e <HAL_RTC_MspInit+0x22>
  {
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800946e:	4b08      	ldr	r3, [pc, #32]	; (8009490 <HAL_RTC_MspInit+0x34>)
 8009470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009474:	4a06      	ldr	r2, [pc, #24]	; (8009490 <HAL_RTC_MspInit+0x34>)
 8009476:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800947a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

}
 800947e:	bf00      	nop
 8009480:	370c      	adds	r7, #12
 8009482:	46bd      	mov	sp, r7
 8009484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009488:	4770      	bx	lr
 800948a:	bf00      	nop
 800948c:	40002800 	.word	0x40002800
 8009490:	40021000 	.word	0x40021000

08009494 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b084      	sub	sp, #16
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	4a6d      	ldr	r2, [pc, #436]	; (8009658 <HAL_TIM_Base_MspInit+0x1c4>)
 80094a2:	4293      	cmp	r3, r2
 80094a4:	f040 8091 	bne.w	80095ca <HAL_TIM_Base_MspInit+0x136>
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80094a8:	4b6c      	ldr	r3, [pc, #432]	; (800965c <HAL_TIM_Base_MspInit+0x1c8>)
 80094aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80094ac:	4a6b      	ldr	r2, [pc, #428]	; (800965c <HAL_TIM_Base_MspInit+0x1c8>)
 80094ae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80094b2:	6613      	str	r3, [r2, #96]	; 0x60
 80094b4:	4b69      	ldr	r3, [pc, #420]	; (800965c <HAL_TIM_Base_MspInit+0x1c8>)
 80094b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80094b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80094bc:	60fb      	str	r3, [r7, #12]
 80094be:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 80094c0:	4b67      	ldr	r3, [pc, #412]	; (8009660 <HAL_TIM_Base_MspInit+0x1cc>)
 80094c2:	4a68      	ldr	r2, [pc, #416]	; (8009664 <HAL_TIM_Base_MspInit+0x1d0>)
 80094c4:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_7;
 80094c6:	4b66      	ldr	r3, [pc, #408]	; (8009660 <HAL_TIM_Base_MspInit+0x1cc>)
 80094c8:	2207      	movs	r2, #7
 80094ca:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80094cc:	4b64      	ldr	r3, [pc, #400]	; (8009660 <HAL_TIM_Base_MspInit+0x1cc>)
 80094ce:	2210      	movs	r2, #16
 80094d0:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80094d2:	4b63      	ldr	r3, [pc, #396]	; (8009660 <HAL_TIM_Base_MspInit+0x1cc>)
 80094d4:	2200      	movs	r2, #0
 80094d6:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80094d8:	4b61      	ldr	r3, [pc, #388]	; (8009660 <HAL_TIM_Base_MspInit+0x1cc>)
 80094da:	2280      	movs	r2, #128	; 0x80
 80094dc:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80094de:	4b60      	ldr	r3, [pc, #384]	; (8009660 <HAL_TIM_Base_MspInit+0x1cc>)
 80094e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80094e4:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80094e6:	4b5e      	ldr	r3, [pc, #376]	; (8009660 <HAL_TIM_Base_MspInit+0x1cc>)
 80094e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80094ec:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 80094ee:	4b5c      	ldr	r3, [pc, #368]	; (8009660 <HAL_TIM_Base_MspInit+0x1cc>)
 80094f0:	2200      	movs	r2, #0
 80094f2:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80094f4:	4b5a      	ldr	r3, [pc, #360]	; (8009660 <HAL_TIM_Base_MspInit+0x1cc>)
 80094f6:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80094fa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80094fc:	4858      	ldr	r0, [pc, #352]	; (8009660 <HAL_TIM_Base_MspInit+0x1cc>)
 80094fe:	f7fc f9c1 	bl	8005884 <HAL_DMA_Init>
 8009502:	4603      	mov	r3, r0
 8009504:	2b00      	cmp	r3, #0
 8009506:	d001      	beq.n	800950c <HAL_TIM_Base_MspInit+0x78>
    {
      Error_Handler();
 8009508:	f7ff fee4 	bl	80092d4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	4a54      	ldr	r2, [pc, #336]	; (8009660 <HAL_TIM_Base_MspInit+0x1cc>)
 8009510:	625a      	str	r2, [r3, #36]	; 0x24
 8009512:	4a53      	ldr	r2, [pc, #332]	; (8009660 <HAL_TIM_Base_MspInit+0x1cc>)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA1_Channel3;
 8009518:	4b53      	ldr	r3, [pc, #332]	; (8009668 <HAL_TIM_Base_MspInit+0x1d4>)
 800951a:	4a54      	ldr	r2, [pc, #336]	; (800966c <HAL_TIM_Base_MspInit+0x1d8>)
 800951c:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Request = DMA_REQUEST_7;
 800951e:	4b52      	ldr	r3, [pc, #328]	; (8009668 <HAL_TIM_Base_MspInit+0x1d4>)
 8009520:	2207      	movs	r2, #7
 8009522:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009524:	4b50      	ldr	r3, [pc, #320]	; (8009668 <HAL_TIM_Base_MspInit+0x1d4>)
 8009526:	2210      	movs	r2, #16
 8009528:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800952a:	4b4f      	ldr	r3, [pc, #316]	; (8009668 <HAL_TIM_Base_MspInit+0x1d4>)
 800952c:	2200      	movs	r2, #0
 800952e:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8009530:	4b4d      	ldr	r3, [pc, #308]	; (8009668 <HAL_TIM_Base_MspInit+0x1d4>)
 8009532:	2280      	movs	r2, #128	; 0x80
 8009534:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8009536:	4b4c      	ldr	r3, [pc, #304]	; (8009668 <HAL_TIM_Base_MspInit+0x1d4>)
 8009538:	f44f 7280 	mov.w	r2, #256	; 0x100
 800953c:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800953e:	4b4a      	ldr	r3, [pc, #296]	; (8009668 <HAL_TIM_Base_MspInit+0x1d4>)
 8009540:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009544:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Mode = DMA_NORMAL;
 8009546:	4b48      	ldr	r3, [pc, #288]	; (8009668 <HAL_TIM_Base_MspInit+0x1d4>)
 8009548:	2200      	movs	r2, #0
 800954a:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800954c:	4b46      	ldr	r3, [pc, #280]	; (8009668 <HAL_TIM_Base_MspInit+0x1d4>)
 800954e:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8009552:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 8009554:	4844      	ldr	r0, [pc, #272]	; (8009668 <HAL_TIM_Base_MspInit+0x1d4>)
 8009556:	f7fc f995 	bl	8005884 <HAL_DMA_Init>
 800955a:	4603      	mov	r3, r0
 800955c:	2b00      	cmp	r3, #0
 800955e:	d001      	beq.n	8009564 <HAL_TIM_Base_MspInit+0xd0>
    {
      Error_Handler();
 8009560:	f7ff feb8 	bl	80092d4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	4a40      	ldr	r2, [pc, #256]	; (8009668 <HAL_TIM_Base_MspInit+0x1d4>)
 8009568:	629a      	str	r2, [r3, #40]	; 0x28
 800956a:	4a3f      	ldr	r2, [pc, #252]	; (8009668 <HAL_TIM_Base_MspInit+0x1d4>)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM1_CH3 Init */
    hdma_tim1_ch3.Instance = DMA1_Channel7;
 8009570:	4b3f      	ldr	r3, [pc, #252]	; (8009670 <HAL_TIM_Base_MspInit+0x1dc>)
 8009572:	4a40      	ldr	r2, [pc, #256]	; (8009674 <HAL_TIM_Base_MspInit+0x1e0>)
 8009574:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch3.Init.Request = DMA_REQUEST_7;
 8009576:	4b3e      	ldr	r3, [pc, #248]	; (8009670 <HAL_TIM_Base_MspInit+0x1dc>)
 8009578:	2207      	movs	r2, #7
 800957a:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800957c:	4b3c      	ldr	r3, [pc, #240]	; (8009670 <HAL_TIM_Base_MspInit+0x1dc>)
 800957e:	2210      	movs	r2, #16
 8009580:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8009582:	4b3b      	ldr	r3, [pc, #236]	; (8009670 <HAL_TIM_Base_MspInit+0x1dc>)
 8009584:	2200      	movs	r2, #0
 8009586:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8009588:	4b39      	ldr	r3, [pc, #228]	; (8009670 <HAL_TIM_Base_MspInit+0x1dc>)
 800958a:	2280      	movs	r2, #128	; 0x80
 800958c:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800958e:	4b38      	ldr	r3, [pc, #224]	; (8009670 <HAL_TIM_Base_MspInit+0x1dc>)
 8009590:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009594:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8009596:	4b36      	ldr	r3, [pc, #216]	; (8009670 <HAL_TIM_Base_MspInit+0x1dc>)
 8009598:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800959c:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch3.Init.Mode = DMA_NORMAL;
 800959e:	4b34      	ldr	r3, [pc, #208]	; (8009670 <HAL_TIM_Base_MspInit+0x1dc>)
 80095a0:	2200      	movs	r2, #0
 80095a2:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80095a4:	4b32      	ldr	r3, [pc, #200]	; (8009670 <HAL_TIM_Base_MspInit+0x1dc>)
 80095a6:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80095aa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch3) != HAL_OK)
 80095ac:	4830      	ldr	r0, [pc, #192]	; (8009670 <HAL_TIM_Base_MspInit+0x1dc>)
 80095ae:	f7fc f969 	bl	8005884 <HAL_DMA_Init>
 80095b2:	4603      	mov	r3, r0
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d001      	beq.n	80095bc <HAL_TIM_Base_MspInit+0x128>
    {
      Error_Handler();
 80095b8:	f7ff fe8c 	bl	80092d4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	4a2c      	ldr	r2, [pc, #176]	; (8009670 <HAL_TIM_Base_MspInit+0x1dc>)
 80095c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80095c2:	4a2b      	ldr	r2, [pc, #172]	; (8009670 <HAL_TIM_Base_MspInit+0x1dc>)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6293      	str	r3, [r2, #40]	; 0x28
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim16_ch1_up);
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim16_ch1_up);
  }

}
 80095c8:	e041      	b.n	800964e <HAL_TIM_Base_MspInit+0x1ba>
  else if(htim_base->Instance==TIM16)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	4a2a      	ldr	r2, [pc, #168]	; (8009678 <HAL_TIM_Base_MspInit+0x1e4>)
 80095d0:	4293      	cmp	r3, r2
 80095d2:	d13c      	bne.n	800964e <HAL_TIM_Base_MspInit+0x1ba>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80095d4:	4b21      	ldr	r3, [pc, #132]	; (800965c <HAL_TIM_Base_MspInit+0x1c8>)
 80095d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095d8:	4a20      	ldr	r2, [pc, #128]	; (800965c <HAL_TIM_Base_MspInit+0x1c8>)
 80095da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80095de:	6613      	str	r3, [r2, #96]	; 0x60
 80095e0:	4b1e      	ldr	r3, [pc, #120]	; (800965c <HAL_TIM_Base_MspInit+0x1c8>)
 80095e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80095e8:	60bb      	str	r3, [r7, #8]
 80095ea:	68bb      	ldr	r3, [r7, #8]
    hdma_tim16_ch1_up.Instance = DMA1_Channel6;
 80095ec:	4b23      	ldr	r3, [pc, #140]	; (800967c <HAL_TIM_Base_MspInit+0x1e8>)
 80095ee:	4a24      	ldr	r2, [pc, #144]	; (8009680 <HAL_TIM_Base_MspInit+0x1ec>)
 80095f0:	601a      	str	r2, [r3, #0]
    hdma_tim16_ch1_up.Init.Request = DMA_REQUEST_4;
 80095f2:	4b22      	ldr	r3, [pc, #136]	; (800967c <HAL_TIM_Base_MspInit+0x1e8>)
 80095f4:	2204      	movs	r2, #4
 80095f6:	605a      	str	r2, [r3, #4]
    hdma_tim16_ch1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80095f8:	4b20      	ldr	r3, [pc, #128]	; (800967c <HAL_TIM_Base_MspInit+0x1e8>)
 80095fa:	2210      	movs	r2, #16
 80095fc:	609a      	str	r2, [r3, #8]
    hdma_tim16_ch1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80095fe:	4b1f      	ldr	r3, [pc, #124]	; (800967c <HAL_TIM_Base_MspInit+0x1e8>)
 8009600:	2200      	movs	r2, #0
 8009602:	60da      	str	r2, [r3, #12]
    hdma_tim16_ch1_up.Init.MemInc = DMA_MINC_ENABLE;
 8009604:	4b1d      	ldr	r3, [pc, #116]	; (800967c <HAL_TIM_Base_MspInit+0x1e8>)
 8009606:	2280      	movs	r2, #128	; 0x80
 8009608:	611a      	str	r2, [r3, #16]
    hdma_tim16_ch1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800960a:	4b1c      	ldr	r3, [pc, #112]	; (800967c <HAL_TIM_Base_MspInit+0x1e8>)
 800960c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009610:	615a      	str	r2, [r3, #20]
    hdma_tim16_ch1_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8009612:	4b1a      	ldr	r3, [pc, #104]	; (800967c <HAL_TIM_Base_MspInit+0x1e8>)
 8009614:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009618:	619a      	str	r2, [r3, #24]
    hdma_tim16_ch1_up.Init.Mode = DMA_NORMAL;
 800961a:	4b18      	ldr	r3, [pc, #96]	; (800967c <HAL_TIM_Base_MspInit+0x1e8>)
 800961c:	2200      	movs	r2, #0
 800961e:	61da      	str	r2, [r3, #28]
    hdma_tim16_ch1_up.Init.Priority = DMA_PRIORITY_LOW;
 8009620:	4b16      	ldr	r3, [pc, #88]	; (800967c <HAL_TIM_Base_MspInit+0x1e8>)
 8009622:	2200      	movs	r2, #0
 8009624:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim16_ch1_up) != HAL_OK)
 8009626:	4815      	ldr	r0, [pc, #84]	; (800967c <HAL_TIM_Base_MspInit+0x1e8>)
 8009628:	f7fc f92c 	bl	8005884 <HAL_DMA_Init>
 800962c:	4603      	mov	r3, r0
 800962e:	2b00      	cmp	r3, #0
 8009630:	d001      	beq.n	8009636 <HAL_TIM_Base_MspInit+0x1a2>
      Error_Handler();
 8009632:	f7ff fe4f 	bl	80092d4 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim16_ch1_up);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	4a10      	ldr	r2, [pc, #64]	; (800967c <HAL_TIM_Base_MspInit+0x1e8>)
 800963a:	625a      	str	r2, [r3, #36]	; 0x24
 800963c:	4a0f      	ldr	r2, [pc, #60]	; (800967c <HAL_TIM_Base_MspInit+0x1e8>)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim16_ch1_up);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	4a0d      	ldr	r2, [pc, #52]	; (800967c <HAL_TIM_Base_MspInit+0x1e8>)
 8009646:	621a      	str	r2, [r3, #32]
 8009648:	4a0c      	ldr	r2, [pc, #48]	; (800967c <HAL_TIM_Base_MspInit+0x1e8>)
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6293      	str	r3, [r2, #40]	; 0x28
}
 800964e:	bf00      	nop
 8009650:	3710      	adds	r7, #16
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}
 8009656:	bf00      	nop
 8009658:	40012c00 	.word	0x40012c00
 800965c:	40021000 	.word	0x40021000
 8009660:	20001c90 	.word	0x20001c90
 8009664:	4002001c 	.word	0x4002001c
 8009668:	20001cd8 	.word	0x20001cd8
 800966c:	40020030 	.word	0x40020030
 8009670:	20001d20 	.word	0x20001d20
 8009674:	40020080 	.word	0x40020080
 8009678:	40014400 	.word	0x40014400
 800967c:	20001db0 	.word	0x20001db0
 8009680:	4002006c 	.word	0x4002006c

08009684 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b084      	sub	sp, #16
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM15)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	4a28      	ldr	r2, [pc, #160]	; (8009734 <HAL_TIM_PWM_MspInit+0xb0>)
 8009692:	4293      	cmp	r3, r2
 8009694:	d149      	bne.n	800972a <HAL_TIM_PWM_MspInit+0xa6>
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8009696:	4b28      	ldr	r3, [pc, #160]	; (8009738 <HAL_TIM_PWM_MspInit+0xb4>)
 8009698:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800969a:	4a27      	ldr	r2, [pc, #156]	; (8009738 <HAL_TIM_PWM_MspInit+0xb4>)
 800969c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80096a0:	6613      	str	r3, [r2, #96]	; 0x60
 80096a2:	4b25      	ldr	r3, [pc, #148]	; (8009738 <HAL_TIM_PWM_MspInit+0xb4>)
 80096a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80096aa:	60fb      	str	r3, [r7, #12]
 80096ac:	68fb      	ldr	r3, [r7, #12]

    /* TIM15 DMA Init */
    /* TIM15_CH1_UP_TRIG_COM Init */
    hdma_tim15_ch1_up_trig_com.Instance = DMA1_Channel5;
 80096ae:	4b23      	ldr	r3, [pc, #140]	; (800973c <HAL_TIM_PWM_MspInit+0xb8>)
 80096b0:	4a23      	ldr	r2, [pc, #140]	; (8009740 <HAL_TIM_PWM_MspInit+0xbc>)
 80096b2:	601a      	str	r2, [r3, #0]
    hdma_tim15_ch1_up_trig_com.Init.Request = DMA_REQUEST_7;
 80096b4:	4b21      	ldr	r3, [pc, #132]	; (800973c <HAL_TIM_PWM_MspInit+0xb8>)
 80096b6:	2207      	movs	r2, #7
 80096b8:	605a      	str	r2, [r3, #4]
    hdma_tim15_ch1_up_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80096ba:	4b20      	ldr	r3, [pc, #128]	; (800973c <HAL_TIM_PWM_MspInit+0xb8>)
 80096bc:	2210      	movs	r2, #16
 80096be:	609a      	str	r2, [r3, #8]
    hdma_tim15_ch1_up_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 80096c0:	4b1e      	ldr	r3, [pc, #120]	; (800973c <HAL_TIM_PWM_MspInit+0xb8>)
 80096c2:	2200      	movs	r2, #0
 80096c4:	60da      	str	r2, [r3, #12]
    hdma_tim15_ch1_up_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 80096c6:	4b1d      	ldr	r3, [pc, #116]	; (800973c <HAL_TIM_PWM_MspInit+0xb8>)
 80096c8:	2280      	movs	r2, #128	; 0x80
 80096ca:	611a      	str	r2, [r3, #16]
    hdma_tim15_ch1_up_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80096cc:	4b1b      	ldr	r3, [pc, #108]	; (800973c <HAL_TIM_PWM_MspInit+0xb8>)
 80096ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80096d2:	615a      	str	r2, [r3, #20]
    hdma_tim15_ch1_up_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80096d4:	4b19      	ldr	r3, [pc, #100]	; (800973c <HAL_TIM_PWM_MspInit+0xb8>)
 80096d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80096da:	619a      	str	r2, [r3, #24]
    hdma_tim15_ch1_up_trig_com.Init.Mode = DMA_NORMAL;
 80096dc:	4b17      	ldr	r3, [pc, #92]	; (800973c <HAL_TIM_PWM_MspInit+0xb8>)
 80096de:	2200      	movs	r2, #0
 80096e0:	61da      	str	r2, [r3, #28]
    hdma_tim15_ch1_up_trig_com.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80096e2:	4b16      	ldr	r3, [pc, #88]	; (800973c <HAL_TIM_PWM_MspInit+0xb8>)
 80096e4:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80096e8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim15_ch1_up_trig_com) != HAL_OK)
 80096ea:	4814      	ldr	r0, [pc, #80]	; (800973c <HAL_TIM_PWM_MspInit+0xb8>)
 80096ec:	f7fc f8ca 	bl	8005884 <HAL_DMA_Init>
 80096f0:	4603      	mov	r3, r0
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d001      	beq.n	80096fa <HAL_TIM_PWM_MspInit+0x76>
    {
      Error_Handler();
 80096f6:	f7ff fded 	bl	80092d4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim15_ch1_up_trig_com);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	4a0f      	ldr	r2, [pc, #60]	; (800973c <HAL_TIM_PWM_MspInit+0xb8>)
 80096fe:	625a      	str	r2, [r3, #36]	; 0x24
 8009700:	4a0e      	ldr	r2, [pc, #56]	; (800973c <HAL_TIM_PWM_MspInit+0xb8>)
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_UPDATE],hdma_tim15_ch1_up_trig_com);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	4a0c      	ldr	r2, [pc, #48]	; (800973c <HAL_TIM_PWM_MspInit+0xb8>)
 800970a:	621a      	str	r2, [r3, #32]
 800970c:	4a0b      	ldr	r2, [pc, #44]	; (800973c <HAL_TIM_PWM_MspInit+0xb8>)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim15_ch1_up_trig_com);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	4a09      	ldr	r2, [pc, #36]	; (800973c <HAL_TIM_PWM_MspInit+0xb8>)
 8009716:	639a      	str	r2, [r3, #56]	; 0x38
 8009718:	4a08      	ldr	r2, [pc, #32]	; (800973c <HAL_TIM_PWM_MspInit+0xb8>)
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim15_ch1_up_trig_com);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	4a06      	ldr	r2, [pc, #24]	; (800973c <HAL_TIM_PWM_MspInit+0xb8>)
 8009722:	635a      	str	r2, [r3, #52]	; 0x34
 8009724:	4a05      	ldr	r2, [pc, #20]	; (800973c <HAL_TIM_PWM_MspInit+0xb8>)
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 800972a:	bf00      	nop
 800972c:	3710      	adds	r7, #16
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}
 8009732:	bf00      	nop
 8009734:	40014000 	.word	0x40014000
 8009738:	40021000 	.word	0x40021000
 800973c:	20001d68 	.word	0x20001d68
 8009740:	40020058 	.word	0x40020058

08009744 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009744:	b480      	push	{r7}
 8009746:	af00      	add	r7, sp, #0
    while (1);
 8009748:	e7fe      	b.n	8009748 <NMI_Handler+0x4>

0800974a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800974a:	b480      	push	{r7}
 800974c:	af00      	add	r7, sp, #0
    while (1);
 800974e:	e7fe      	b.n	800974e <HardFault_Handler+0x4>

08009750 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009750:	b480      	push	{r7}
 8009752:	af00      	add	r7, sp, #0
    while (1);
 8009754:	e7fe      	b.n	8009754 <MemManage_Handler+0x4>

08009756 <BusFault_Handler>:
}
/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009756:	b480      	push	{r7}
 8009758:	af00      	add	r7, sp, #0
    while (1);
 800975a:	e7fe      	b.n	800975a <BusFault_Handler+0x4>

0800975c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800975c:	b480      	push	{r7}
 800975e:	af00      	add	r7, sp, #0
    while (1);
 8009760:	e7fe      	b.n	8009760 <UsageFault_Handler+0x4>

08009762 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009762:	b480      	push	{r7}
 8009764:	af00      	add	r7, sp, #0
}
 8009766:	bf00      	nop
 8009768:	46bd      	mov	sp, r7
 800976a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976e:	4770      	bx	lr

08009770 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b084      	sub	sp, #16
 8009774:	af02      	add	r7, sp, #8
    BaseType_t xHigherPriorityTaskWoken;
    // B button is speed!
    HAL_GPIO_EXTI_IRQHandler(PIN_WKUP_1);
 8009776:	2001      	movs	r0, #1
 8009778:	f7fc fc4e 	bl	8006018 <HAL_GPIO_EXTI_IRQHandler>
    g_b_interrupt_previous_timestamp = g_b_interrupt_current_timestamp;
 800977c:	4b10      	ldr	r3, [pc, #64]	; (80097c0 <EXTI0_IRQHandler+0x50>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	4a10      	ldr	r2, [pc, #64]	; (80097c4 <EXTI0_IRQHandler+0x54>)
 8009782:	6013      	str	r3, [r2, #0]
    g_b_interrupt_current_timestamp = xTaskGetTickCountFromISR();
 8009784:	f7fa fa02 	bl	8003b8c <xTaskGetTickCountFromISR>
 8009788:	4603      	mov	r3, r0
 800978a:	4a0d      	ldr	r2, [pc, #52]	; (80097c0 <EXTI0_IRQHandler+0x50>)
 800978c:	6013      	str	r3, [r2, #0]
    board_init_common_button_pressed(PUSH_BUTTON_B);
 800978e:	2001      	movs	r0, #1
 8009790:	f7ff fd76 	bl	8009280 <board_init_common_button_pressed>
    g_b_interrupt_count++;
 8009794:	4b0c      	ldr	r3, [pc, #48]	; (80097c8 <EXTI0_IRQHandler+0x58>)
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	3301      	adds	r3, #1
 800979a:	4a0b      	ldr	r2, [pc, #44]	; (80097c8 <EXTI0_IRQHandler+0x58>)
 800979c:	6013      	str	r3, [r2, #0]
    HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 800979e:	2006      	movs	r0, #6
 80097a0:	f7fc f855 	bl	800584e <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, PUSH_BUTTON_B, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 80097a4:	4b09      	ldr	r3, [pc, #36]	; (80097cc <EXTI0_IRQHandler+0x5c>)
 80097a6:	6818      	ldr	r0, [r3, #0]
 80097a8:	1d3b      	adds	r3, r7, #4
 80097aa:	9300      	str	r3, [sp, #0]
 80097ac:	2300      	movs	r3, #0
 80097ae:	2203      	movs	r2, #3
 80097b0:	2101      	movs	r1, #1
 80097b2:	f7fa fe09 	bl	80043c8 <xTaskGenericNotifyFromISR>
}
 80097b6:	bf00      	nop
 80097b8:	3708      	adds	r7, #8
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}
 80097be:	bf00      	nop
 80097c0:	20002fe0 	.word	0x20002fe0
 80097c4:	20002fe4 	.word	0x20002fe4
 80097c8:	20002fcc 	.word	0x20002fcc
 80097cc:	20001f0c 	.word	0x20001f0c

080097d0 <EXTI2_IRQHandler>:
uint32_t g_dbg_b_interrupt_count = 0;
/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b084      	sub	sp, #16
 80097d4:	af02      	add	r7, sp, #8
    BaseType_t xHigherPriorityTaskWoken;
    // C button is state!
    HAL_GPIO_EXTI_IRQHandler(PIN_WKUP_4);
 80097d6:	2004      	movs	r0, #4
 80097d8:	f7fc fc1e 	bl	8006018 <HAL_GPIO_EXTI_IRQHandler>
    g_c_interrupt_previous_timestamp = g_c_interrupt_current_timestamp;
 80097dc:	4b10      	ldr	r3, [pc, #64]	; (8009820 <EXTI2_IRQHandler+0x50>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	4a10      	ldr	r2, [pc, #64]	; (8009824 <EXTI2_IRQHandler+0x54>)
 80097e2:	6013      	str	r3, [r2, #0]
    g_c_interrupt_current_timestamp = xTaskGetTickCountFromISR();
 80097e4:	f7fa f9d2 	bl	8003b8c <xTaskGetTickCountFromISR>
 80097e8:	4603      	mov	r3, r0
 80097ea:	4a0d      	ldr	r2, [pc, #52]	; (8009820 <EXTI2_IRQHandler+0x50>)
 80097ec:	6013      	str	r3, [r2, #0]
    board_init_common_button_pressed(PUSH_BUTTON_C);
 80097ee:	2002      	movs	r0, #2
 80097f0:	f7ff fd46 	bl	8009280 <board_init_common_button_pressed>
    g_c_interrupt_count++;
 80097f4:	4b0c      	ldr	r3, [pc, #48]	; (8009828 <EXTI2_IRQHandler+0x58>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	3301      	adds	r3, #1
 80097fa:	4a0b      	ldr	r2, [pc, #44]	; (8009828 <EXTI2_IRQHandler+0x58>)
 80097fc:	6013      	str	r3, [r2, #0]
    HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 80097fe:	2008      	movs	r0, #8
 8009800:	f7fc f825 	bl	800584e <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, PUSH_BUTTON_C, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 8009804:	4b09      	ldr	r3, [pc, #36]	; (800982c <EXTI2_IRQHandler+0x5c>)
 8009806:	6818      	ldr	r0, [r3, #0]
 8009808:	1d3b      	adds	r3, r7, #4
 800980a:	9300      	str	r3, [sp, #0]
 800980c:	2300      	movs	r3, #0
 800980e:	2203      	movs	r2, #3
 8009810:	2102      	movs	r1, #2
 8009812:	f7fa fdd9 	bl	80043c8 <xTaskGenericNotifyFromISR>
}
 8009816:	bf00      	nop
 8009818:	3708      	adds	r7, #8
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}
 800981e:	bf00      	nop
 8009820:	20002fe8 	.word	0x20002fe8
 8009824:	20002fec 	.word	0x20002fec
 8009828:	20002fd0 	.word	0x20002fd0
 800982c:	20001f0c 	.word	0x20001f0c

08009830 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b084      	sub	sp, #16
 8009834:	af02      	add	r7, sp, #8
    BaseType_t xHigherPriorityTaskWoken;
    // A button is color
    HAL_GPIO_EXTI_IRQHandler(PIN_WKUP_2);
 8009836:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800983a:	f7fc fbed 	bl	8006018 <HAL_GPIO_EXTI_IRQHandler>
    g_a_interrupt_previous_timestamp = g_a_interrupt_current_timestamp;
 800983e:	4b10      	ldr	r3, [pc, #64]	; (8009880 <EXTI15_10_IRQHandler+0x50>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	4a10      	ldr	r2, [pc, #64]	; (8009884 <EXTI15_10_IRQHandler+0x54>)
 8009844:	6013      	str	r3, [r2, #0]
    g_a_interrupt_current_timestamp = xTaskGetTickCountFromISR();
 8009846:	f7fa f9a1 	bl	8003b8c <xTaskGetTickCountFromISR>
 800984a:	4603      	mov	r3, r0
 800984c:	4a0c      	ldr	r2, [pc, #48]	; (8009880 <EXTI15_10_IRQHandler+0x50>)
 800984e:	6013      	str	r3, [r2, #0]
    board_init_common_button_pressed(PUSH_BUTTON_A);
 8009850:	2000      	movs	r0, #0
 8009852:	f7ff fd15 	bl	8009280 <board_init_common_button_pressed>
    g_a_interrupt_count++;
 8009856:	4b0c      	ldr	r3, [pc, #48]	; (8009888 <EXTI15_10_IRQHandler+0x58>)
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	3301      	adds	r3, #1
 800985c:	4a0a      	ldr	r2, [pc, #40]	; (8009888 <EXTI15_10_IRQHandler+0x58>)
 800985e:	6013      	str	r3, [r2, #0]
    HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8009860:	2017      	movs	r0, #23
 8009862:	f7fb fff4 	bl	800584e <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, PUSH_BUTTON_A, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 8009866:	4b09      	ldr	r3, [pc, #36]	; (800988c <EXTI15_10_IRQHandler+0x5c>)
 8009868:	6818      	ldr	r0, [r3, #0]
 800986a:	1d3b      	adds	r3, r7, #4
 800986c:	9300      	str	r3, [sp, #0]
 800986e:	2300      	movs	r3, #0
 8009870:	2203      	movs	r2, #3
 8009872:	2100      	movs	r1, #0
 8009874:	f7fa fda8 	bl	80043c8 <xTaskGenericNotifyFromISR>
}
 8009878:	bf00      	nop
 800987a:	3708      	adds	r7, #8
 800987c:	46bd      	mov	sp, r7
 800987e:	bd80      	pop	{r7, pc}
 8009880:	20002fd8 	.word	0x20002fd8
 8009884:	20002fdc 	.word	0x20002fdc
 8009888:	20002fc8 	.word	0x20002fc8
 800988c:	20001f0c 	.word	0x20001f0c

08009890 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b084      	sub	sp, #16
 8009894:	af02      	add	r7, sp, #8
    BaseType_t xHigherPriorityTaskWoken;
    // D button is pause
    HAL_GPIO_EXTI_IRQHandler(PIN_WKUP_3);
 8009896:	2020      	movs	r0, #32
 8009898:	f7fc fbbe 	bl	8006018 <HAL_GPIO_EXTI_IRQHandler>
    g_d_interrupt_previous_timestamp = g_d_interrupt_current_timestamp;
 800989c:	4b10      	ldr	r3, [pc, #64]	; (80098e0 <EXTI9_5_IRQHandler+0x50>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	4a10      	ldr	r2, [pc, #64]	; (80098e4 <EXTI9_5_IRQHandler+0x54>)
 80098a2:	6013      	str	r3, [r2, #0]
    g_d_interrupt_current_timestamp = xTaskGetTickCountFromISR();
 80098a4:	f7fa f972 	bl	8003b8c <xTaskGetTickCountFromISR>
 80098a8:	4603      	mov	r3, r0
 80098aa:	4a0d      	ldr	r2, [pc, #52]	; (80098e0 <EXTI9_5_IRQHandler+0x50>)
 80098ac:	6013      	str	r3, [r2, #0]
    board_init_common_button_pressed(PUSH_BUTTON_D);
 80098ae:	2003      	movs	r0, #3
 80098b0:	f7ff fce6 	bl	8009280 <board_init_common_button_pressed>
    g_d_interrupt_count++;
 80098b4:	4b0c      	ldr	r3, [pc, #48]	; (80098e8 <EXTI9_5_IRQHandler+0x58>)
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	3301      	adds	r3, #1
 80098ba:	4a0b      	ldr	r2, [pc, #44]	; (80098e8 <EXTI9_5_IRQHandler+0x58>)
 80098bc:	6013      	str	r3, [r2, #0]
    HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 80098be:	2028      	movs	r0, #40	; 0x28
 80098c0:	f7fb ffc5 	bl	800584e <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, PUSH_BUTTON_D, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 80098c4:	4b09      	ldr	r3, [pc, #36]	; (80098ec <EXTI9_5_IRQHandler+0x5c>)
 80098c6:	6818      	ldr	r0, [r3, #0]
 80098c8:	1d3b      	adds	r3, r7, #4
 80098ca:	9300      	str	r3, [sp, #0]
 80098cc:	2300      	movs	r3, #0
 80098ce:	2203      	movs	r2, #3
 80098d0:	2103      	movs	r1, #3
 80098d2:	f7fa fd79 	bl	80043c8 <xTaskGenericNotifyFromISR>
}
 80098d6:	bf00      	nop
 80098d8:	3708      	adds	r7, #8
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}
 80098de:	bf00      	nop
 80098e0:	20002ff0 	.word	0x20002ff0
 80098e4:	20002ff4 	.word	0x20002ff4
 80098e8:	20002fd4 	.word	0x20002fd4
 80098ec:	20001f0c 	.word	0x20001f0c

080098f0 <HAL_TIM_PWM_PulseFinishedCallback>:


void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b082      	sub	sp, #8
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
    static uint32_t count = 0;
    switch (htim->Channel)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	7f1b      	ldrb	r3, [r3, #28]
 80098fc:	2b04      	cmp	r3, #4
 80098fe:	d010      	beq.n	8009922 <HAL_TIM_PWM_PulseFinishedCallback+0x32>
 8009900:	2b04      	cmp	r3, #4
 8009902:	dc13      	bgt.n	800992c <HAL_TIM_PWM_PulseFinishedCallback+0x3c>
 8009904:	2b01      	cmp	r3, #1
 8009906:	d002      	beq.n	800990e <HAL_TIM_PWM_PulseFinishedCallback+0x1e>
 8009908:	2b02      	cmp	r3, #2
 800990a:	d005      	beq.n	8009918 <HAL_TIM_PWM_PulseFinishedCallback+0x28>
        break;
        case HAL_TIM_ACTIVE_CHANNEL_3:
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_3);
        break;
        default:
        break;
 800990c:	e00e      	b.n	800992c <HAL_TIM_PWM_PulseFinishedCallback+0x3c>
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
 800990e:	2100      	movs	r1, #0
 8009910:	6878      	ldr	r0, [r7, #4]
 8009912:	f7fe f94b 	bl	8007bac <HAL_TIM_PWM_Stop_DMA>
        break;
 8009916:	e00a      	b.n	800992e <HAL_TIM_PWM_PulseFinishedCallback+0x3e>
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_2);
 8009918:	2104      	movs	r1, #4
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	f7fe f946 	bl	8007bac <HAL_TIM_PWM_Stop_DMA>
        break;
 8009920:	e005      	b.n	800992e <HAL_TIM_PWM_PulseFinishedCallback+0x3e>
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_3);
 8009922:	2108      	movs	r1, #8
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f7fe f941 	bl	8007bac <HAL_TIM_PWM_Stop_DMA>
        break;
 800992a:	e000      	b.n	800992e <HAL_TIM_PWM_PulseFinishedCallback+0x3e>
        break;
 800992c:	bf00      	nop
    }
    //datasentflag = 1;
    //g_dma_done_flag = true;
    count++;
 800992e:	4b06      	ldr	r3, [pc, #24]	; (8009948 <HAL_TIM_PWM_PulseFinishedCallback+0x58>)
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	3301      	adds	r3, #1
 8009934:	4a04      	ldr	r2, [pc, #16]	; (8009948 <HAL_TIM_PWM_PulseFinishedCallback+0x58>)
 8009936:	6013      	str	r3, [r2, #0]
    datasentflag=1;
 8009938:	4b04      	ldr	r3, [pc, #16]	; (800994c <HAL_TIM_PWM_PulseFinishedCallback+0x5c>)
 800993a:	2201      	movs	r2, #1
 800993c:	601a      	str	r2, [r3, #0]
//  if (0 == (count % 2))
//  {
//        datasentflag=1;
//        g_dma_done_flag = true;
//  }
}
 800993e:	bf00      	nop
 8009940:	3708      	adds	r7, #8
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}
 8009946:	bf00      	nop
 8009948:	20002ff8 	.word	0x20002ff8
 800994c:	20001f00 	.word	0x20001f00

08009950 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8009954:	4802      	ldr	r0, [pc, #8]	; (8009960 <DMA1_Channel2_IRQHandler+0x10>)
 8009956:	f7fc f8ee 	bl	8005b36 <HAL_DMA_IRQHandler>
}
 800995a:	bf00      	nop
 800995c:	bd80      	pop	{r7, pc}
 800995e:	bf00      	nop
 8009960:	20001c90 	.word	0x20001c90

08009964 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 8009968:	4802      	ldr	r0, [pc, #8]	; (8009974 <DMA1_Channel3_IRQHandler+0x10>)
 800996a:	f7fc f8e4 	bl	8005b36 <HAL_DMA_IRQHandler>
}
 800996e:	bf00      	nop
 8009970:	bd80      	pop	{r7, pc}
 8009972:	bf00      	nop
 8009974:	20001cd8 	.word	0x20001cd8

08009978 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim15_ch1_up_trig_com);
 800997c:	4802      	ldr	r0, [pc, #8]	; (8009988 <DMA1_Channel5_IRQHandler+0x10>)
 800997e:	f7fc f8da 	bl	8005b36 <HAL_DMA_IRQHandler>
}
 8009982:	bf00      	nop
 8009984:	bd80      	pop	{r7, pc}
 8009986:	bf00      	nop
 8009988:	20001d68 	.word	0x20001d68

0800998c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim16_ch1_up);
 8009990:	4802      	ldr	r0, [pc, #8]	; (800999c <DMA1_Channel6_IRQHandler+0x10>)
 8009992:	f7fc f8d0 	bl	8005b36 <HAL_DMA_IRQHandler>
}
 8009996:	bf00      	nop
 8009998:	bd80      	pop	{r7, pc}
 800999a:	bf00      	nop
 800999c:	20001db0 	.word	0x20001db0

080099a0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim1_ch3);
 80099a4:	4802      	ldr	r0, [pc, #8]	; (80099b0 <DMA1_Channel7_IRQHandler+0x10>)
 80099a6:	f7fc f8c6 	bl	8005b36 <HAL_DMA_IRQHandler>
}
 80099aa:	bf00      	nop
 80099ac:	bd80      	pop	{r7, pc}
 80099ae:	bf00      	nop
 80099b0:	20001d20 	.word	0x20001d20

080099b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80099b4:	b480      	push	{r7}
 80099b6:	af00      	add	r7, sp, #0
	return 1;
 80099b8:	2301      	movs	r3, #1
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	46bd      	mov	sp, r7
 80099be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c2:	4770      	bx	lr

080099c4 <_kill>:

int _kill(int pid, int sig)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b082      	sub	sp, #8
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
 80099cc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80099ce:	f000 f8f3 	bl	8009bb8 <__errno>
 80099d2:	4603      	mov	r3, r0
 80099d4:	2216      	movs	r2, #22
 80099d6:	601a      	str	r2, [r3, #0]
	return -1;
 80099d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80099dc:	4618      	mov	r0, r3
 80099de:	3708      	adds	r7, #8
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}

080099e4 <_exit>:

void _exit (int status)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b082      	sub	sp, #8
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80099ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80099f0:	6878      	ldr	r0, [r7, #4]
 80099f2:	f7ff ffe7 	bl	80099c4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80099f6:	e7fe      	b.n	80099f6 <_exit+0x12>

080099f8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b086      	sub	sp, #24
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	60f8      	str	r0, [r7, #12]
 8009a00:	60b9      	str	r1, [r7, #8]
 8009a02:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009a04:	2300      	movs	r3, #0
 8009a06:	617b      	str	r3, [r7, #20]
 8009a08:	e00a      	b.n	8009a20 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8009a0a:	f3af 8000 	nop.w
 8009a0e:	4601      	mov	r1, r0
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	1c5a      	adds	r2, r3, #1
 8009a14:	60ba      	str	r2, [r7, #8]
 8009a16:	b2ca      	uxtb	r2, r1
 8009a18:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009a1a:	697b      	ldr	r3, [r7, #20]
 8009a1c:	3301      	adds	r3, #1
 8009a1e:	617b      	str	r3, [r7, #20]
 8009a20:	697a      	ldr	r2, [r7, #20]
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	429a      	cmp	r2, r3
 8009a26:	dbf0      	blt.n	8009a0a <_read+0x12>
	}

return len;
 8009a28:	687b      	ldr	r3, [r7, #4]
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3718      	adds	r7, #24
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}

08009a32 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8009a32:	b580      	push	{r7, lr}
 8009a34:	b086      	sub	sp, #24
 8009a36:	af00      	add	r7, sp, #0
 8009a38:	60f8      	str	r0, [r7, #12]
 8009a3a:	60b9      	str	r1, [r7, #8]
 8009a3c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009a3e:	2300      	movs	r3, #0
 8009a40:	617b      	str	r3, [r7, #20]
 8009a42:	e009      	b.n	8009a58 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	1c5a      	adds	r2, r3, #1
 8009a48:	60ba      	str	r2, [r7, #8]
 8009a4a:	781b      	ldrb	r3, [r3, #0]
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009a52:	697b      	ldr	r3, [r7, #20]
 8009a54:	3301      	adds	r3, #1
 8009a56:	617b      	str	r3, [r7, #20]
 8009a58:	697a      	ldr	r2, [r7, #20]
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	429a      	cmp	r2, r3
 8009a5e:	dbf1      	blt.n	8009a44 <_write+0x12>
	}
	return len;
 8009a60:	687b      	ldr	r3, [r7, #4]
}
 8009a62:	4618      	mov	r0, r3
 8009a64:	3718      	adds	r7, #24
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}

08009a6a <_close>:

int _close(int file)
{
 8009a6a:	b480      	push	{r7}
 8009a6c:	b083      	sub	sp, #12
 8009a6e:	af00      	add	r7, sp, #0
 8009a70:	6078      	str	r0, [r7, #4]
	return -1;
 8009a72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	370c      	adds	r7, #12
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a80:	4770      	bx	lr

08009a82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8009a82:	b480      	push	{r7}
 8009a84:	b083      	sub	sp, #12
 8009a86:	af00      	add	r7, sp, #0
 8009a88:	6078      	str	r0, [r7, #4]
 8009a8a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009a92:	605a      	str	r2, [r3, #4]
	return 0;
 8009a94:	2300      	movs	r3, #0
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	370c      	adds	r7, #12
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa0:	4770      	bx	lr

08009aa2 <_isatty>:

int _isatty(int file)
{
 8009aa2:	b480      	push	{r7}
 8009aa4:	b083      	sub	sp, #12
 8009aa6:	af00      	add	r7, sp, #0
 8009aa8:	6078      	str	r0, [r7, #4]
	return 1;
 8009aaa:	2301      	movs	r3, #1
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	370c      	adds	r7, #12
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab6:	4770      	bx	lr

08009ab8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8009ab8:	b480      	push	{r7}
 8009aba:	b085      	sub	sp, #20
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	60f8      	str	r0, [r7, #12]
 8009ac0:	60b9      	str	r1, [r7, #8]
 8009ac2:	607a      	str	r2, [r7, #4]
	return 0;
 8009ac4:	2300      	movs	r3, #0
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	3714      	adds	r7, #20
 8009aca:	46bd      	mov	sp, r7
 8009acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad0:	4770      	bx	lr
	...

08009ad4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b086      	sub	sp, #24
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009adc:	4a14      	ldr	r2, [pc, #80]	; (8009b30 <_sbrk+0x5c>)
 8009ade:	4b15      	ldr	r3, [pc, #84]	; (8009b34 <_sbrk+0x60>)
 8009ae0:	1ad3      	subs	r3, r2, r3
 8009ae2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009ae4:	697b      	ldr	r3, [r7, #20]
 8009ae6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009ae8:	4b13      	ldr	r3, [pc, #76]	; (8009b38 <_sbrk+0x64>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d102      	bne.n	8009af6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009af0:	4b11      	ldr	r3, [pc, #68]	; (8009b38 <_sbrk+0x64>)
 8009af2:	4a12      	ldr	r2, [pc, #72]	; (8009b3c <_sbrk+0x68>)
 8009af4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8009af6:	4b10      	ldr	r3, [pc, #64]	; (8009b38 <_sbrk+0x64>)
 8009af8:	681a      	ldr	r2, [r3, #0]
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	4413      	add	r3, r2
 8009afe:	693a      	ldr	r2, [r7, #16]
 8009b00:	429a      	cmp	r2, r3
 8009b02:	d207      	bcs.n	8009b14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009b04:	f000 f858 	bl	8009bb8 <__errno>
 8009b08:	4603      	mov	r3, r0
 8009b0a:	220c      	movs	r2, #12
 8009b0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8009b0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009b12:	e009      	b.n	8009b28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009b14:	4b08      	ldr	r3, [pc, #32]	; (8009b38 <_sbrk+0x64>)
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8009b1a:	4b07      	ldr	r3, [pc, #28]	; (8009b38 <_sbrk+0x64>)
 8009b1c:	681a      	ldr	r2, [r3, #0]
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	4413      	add	r3, r2
 8009b22:	4a05      	ldr	r2, [pc, #20]	; (8009b38 <_sbrk+0x64>)
 8009b24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8009b26:	68fb      	ldr	r3, [r7, #12]
}
 8009b28:	4618      	mov	r0, r3
 8009b2a:	3718      	adds	r7, #24
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd80      	pop	{r7, pc}
 8009b30:	20010000 	.word	0x20010000
 8009b34:	00000400 	.word	0x00000400
 8009b38:	20002ffc 	.word	0x20002ffc
 8009b3c:	20003010 	.word	0x20003010

08009b40 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8009b40:	b480      	push	{r7}
 8009b42:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8009b44:	4b06      	ldr	r3, [pc, #24]	; (8009b60 <SystemInit+0x20>)
 8009b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b4a:	4a05      	ldr	r2, [pc, #20]	; (8009b60 <SystemInit+0x20>)
 8009b4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009b50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8009b54:	bf00      	nop
 8009b56:	46bd      	mov	sp, r7
 8009b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5c:	4770      	bx	lr
 8009b5e:	bf00      	nop
 8009b60:	e000ed00 	.word	0xe000ed00

08009b64 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8009b64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009b9c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8009b68:	f7ff ffea 	bl	8009b40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009b6c:	480c      	ldr	r0, [pc, #48]	; (8009ba0 <LoopForever+0x6>)
  ldr r1, =_edata
 8009b6e:	490d      	ldr	r1, [pc, #52]	; (8009ba4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8009b70:	4a0d      	ldr	r2, [pc, #52]	; (8009ba8 <LoopForever+0xe>)
  movs r3, #0
 8009b72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009b74:	e002      	b.n	8009b7c <LoopCopyDataInit>

08009b76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009b76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009b78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009b7a:	3304      	adds	r3, #4

08009b7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009b7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009b7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009b80:	d3f9      	bcc.n	8009b76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009b82:	4a0a      	ldr	r2, [pc, #40]	; (8009bac <LoopForever+0x12>)
  ldr r4, =_ebss
 8009b84:	4c0a      	ldr	r4, [pc, #40]	; (8009bb0 <LoopForever+0x16>)
  movs r3, #0
 8009b86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009b88:	e001      	b.n	8009b8e <LoopFillZerobss>

08009b8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009b8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009b8c:	3204      	adds	r2, #4

08009b8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009b8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009b90:	d3fb      	bcc.n	8009b8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8009b92:	f000 f817 	bl	8009bc4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8009b96:	f7ff fbeb 	bl	8009370 <main>

08009b9a <LoopForever>:

LoopForever:
    b LoopForever
 8009b9a:	e7fe      	b.n	8009b9a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8009b9c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8009ba0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009ba4:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8009ba8:	0800af98 	.word	0x0800af98
  ldr r2, =_sbss
 8009bac:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8009bb0:	20003010 	.word	0x20003010

08009bb4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8009bb4:	e7fe      	b.n	8009bb4 <ADC1_IRQHandler>
	...

08009bb8 <__errno>:
 8009bb8:	4b01      	ldr	r3, [pc, #4]	; (8009bc0 <__errno+0x8>)
 8009bba:	6818      	ldr	r0, [r3, #0]
 8009bbc:	4770      	bx	lr
 8009bbe:	bf00      	nop
 8009bc0:	2000001c 	.word	0x2000001c

08009bc4 <__libc_init_array>:
 8009bc4:	b570      	push	{r4, r5, r6, lr}
 8009bc6:	4d0d      	ldr	r5, [pc, #52]	; (8009bfc <__libc_init_array+0x38>)
 8009bc8:	4c0d      	ldr	r4, [pc, #52]	; (8009c00 <__libc_init_array+0x3c>)
 8009bca:	1b64      	subs	r4, r4, r5
 8009bcc:	10a4      	asrs	r4, r4, #2
 8009bce:	2600      	movs	r6, #0
 8009bd0:	42a6      	cmp	r6, r4
 8009bd2:	d109      	bne.n	8009be8 <__libc_init_array+0x24>
 8009bd4:	4d0b      	ldr	r5, [pc, #44]	; (8009c04 <__libc_init_array+0x40>)
 8009bd6:	4c0c      	ldr	r4, [pc, #48]	; (8009c08 <__libc_init_array+0x44>)
 8009bd8:	f001 f8c8 	bl	800ad6c <_init>
 8009bdc:	1b64      	subs	r4, r4, r5
 8009bde:	10a4      	asrs	r4, r4, #2
 8009be0:	2600      	movs	r6, #0
 8009be2:	42a6      	cmp	r6, r4
 8009be4:	d105      	bne.n	8009bf2 <__libc_init_array+0x2e>
 8009be6:	bd70      	pop	{r4, r5, r6, pc}
 8009be8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bec:	4798      	blx	r3
 8009bee:	3601      	adds	r6, #1
 8009bf0:	e7ee      	b.n	8009bd0 <__libc_init_array+0xc>
 8009bf2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bf6:	4798      	blx	r3
 8009bf8:	3601      	adds	r6, #1
 8009bfa:	e7f2      	b.n	8009be2 <__libc_init_array+0x1e>
 8009bfc:	0800af90 	.word	0x0800af90
 8009c00:	0800af90 	.word	0x0800af90
 8009c04:	0800af90 	.word	0x0800af90
 8009c08:	0800af94 	.word	0x0800af94

08009c0c <malloc>:
 8009c0c:	4b02      	ldr	r3, [pc, #8]	; (8009c18 <malloc+0xc>)
 8009c0e:	4601      	mov	r1, r0
 8009c10:	6818      	ldr	r0, [r3, #0]
 8009c12:	f000 b885 	b.w	8009d20 <_malloc_r>
 8009c16:	bf00      	nop
 8009c18:	2000001c 	.word	0x2000001c

08009c1c <memcpy>:
 8009c1c:	440a      	add	r2, r1
 8009c1e:	4291      	cmp	r1, r2
 8009c20:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009c24:	d100      	bne.n	8009c28 <memcpy+0xc>
 8009c26:	4770      	bx	lr
 8009c28:	b510      	push	{r4, lr}
 8009c2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c32:	4291      	cmp	r1, r2
 8009c34:	d1f9      	bne.n	8009c2a <memcpy+0xe>
 8009c36:	bd10      	pop	{r4, pc}

08009c38 <memset>:
 8009c38:	4402      	add	r2, r0
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	4293      	cmp	r3, r2
 8009c3e:	d100      	bne.n	8009c42 <memset+0xa>
 8009c40:	4770      	bx	lr
 8009c42:	f803 1b01 	strb.w	r1, [r3], #1
 8009c46:	e7f9      	b.n	8009c3c <memset+0x4>

08009c48 <_free_r>:
 8009c48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009c4a:	2900      	cmp	r1, #0
 8009c4c:	d044      	beq.n	8009cd8 <_free_r+0x90>
 8009c4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c52:	9001      	str	r0, [sp, #4]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	f1a1 0404 	sub.w	r4, r1, #4
 8009c5a:	bfb8      	it	lt
 8009c5c:	18e4      	addlt	r4, r4, r3
 8009c5e:	f000 f9ab 	bl	8009fb8 <__malloc_lock>
 8009c62:	4a1e      	ldr	r2, [pc, #120]	; (8009cdc <_free_r+0x94>)
 8009c64:	9801      	ldr	r0, [sp, #4]
 8009c66:	6813      	ldr	r3, [r2, #0]
 8009c68:	b933      	cbnz	r3, 8009c78 <_free_r+0x30>
 8009c6a:	6063      	str	r3, [r4, #4]
 8009c6c:	6014      	str	r4, [r2, #0]
 8009c6e:	b003      	add	sp, #12
 8009c70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009c74:	f000 b9a6 	b.w	8009fc4 <__malloc_unlock>
 8009c78:	42a3      	cmp	r3, r4
 8009c7a:	d908      	bls.n	8009c8e <_free_r+0x46>
 8009c7c:	6825      	ldr	r5, [r4, #0]
 8009c7e:	1961      	adds	r1, r4, r5
 8009c80:	428b      	cmp	r3, r1
 8009c82:	bf01      	itttt	eq
 8009c84:	6819      	ldreq	r1, [r3, #0]
 8009c86:	685b      	ldreq	r3, [r3, #4]
 8009c88:	1949      	addeq	r1, r1, r5
 8009c8a:	6021      	streq	r1, [r4, #0]
 8009c8c:	e7ed      	b.n	8009c6a <_free_r+0x22>
 8009c8e:	461a      	mov	r2, r3
 8009c90:	685b      	ldr	r3, [r3, #4]
 8009c92:	b10b      	cbz	r3, 8009c98 <_free_r+0x50>
 8009c94:	42a3      	cmp	r3, r4
 8009c96:	d9fa      	bls.n	8009c8e <_free_r+0x46>
 8009c98:	6811      	ldr	r1, [r2, #0]
 8009c9a:	1855      	adds	r5, r2, r1
 8009c9c:	42a5      	cmp	r5, r4
 8009c9e:	d10b      	bne.n	8009cb8 <_free_r+0x70>
 8009ca0:	6824      	ldr	r4, [r4, #0]
 8009ca2:	4421      	add	r1, r4
 8009ca4:	1854      	adds	r4, r2, r1
 8009ca6:	42a3      	cmp	r3, r4
 8009ca8:	6011      	str	r1, [r2, #0]
 8009caa:	d1e0      	bne.n	8009c6e <_free_r+0x26>
 8009cac:	681c      	ldr	r4, [r3, #0]
 8009cae:	685b      	ldr	r3, [r3, #4]
 8009cb0:	6053      	str	r3, [r2, #4]
 8009cb2:	4421      	add	r1, r4
 8009cb4:	6011      	str	r1, [r2, #0]
 8009cb6:	e7da      	b.n	8009c6e <_free_r+0x26>
 8009cb8:	d902      	bls.n	8009cc0 <_free_r+0x78>
 8009cba:	230c      	movs	r3, #12
 8009cbc:	6003      	str	r3, [r0, #0]
 8009cbe:	e7d6      	b.n	8009c6e <_free_r+0x26>
 8009cc0:	6825      	ldr	r5, [r4, #0]
 8009cc2:	1961      	adds	r1, r4, r5
 8009cc4:	428b      	cmp	r3, r1
 8009cc6:	bf04      	itt	eq
 8009cc8:	6819      	ldreq	r1, [r3, #0]
 8009cca:	685b      	ldreq	r3, [r3, #4]
 8009ccc:	6063      	str	r3, [r4, #4]
 8009cce:	bf04      	itt	eq
 8009cd0:	1949      	addeq	r1, r1, r5
 8009cd2:	6021      	streq	r1, [r4, #0]
 8009cd4:	6054      	str	r4, [r2, #4]
 8009cd6:	e7ca      	b.n	8009c6e <_free_r+0x26>
 8009cd8:	b003      	add	sp, #12
 8009cda:	bd30      	pop	{r4, r5, pc}
 8009cdc:	20003000 	.word	0x20003000

08009ce0 <sbrk_aligned>:
 8009ce0:	b570      	push	{r4, r5, r6, lr}
 8009ce2:	4e0e      	ldr	r6, [pc, #56]	; (8009d1c <sbrk_aligned+0x3c>)
 8009ce4:	460c      	mov	r4, r1
 8009ce6:	6831      	ldr	r1, [r6, #0]
 8009ce8:	4605      	mov	r5, r0
 8009cea:	b911      	cbnz	r1, 8009cf2 <sbrk_aligned+0x12>
 8009cec:	f000 f8f8 	bl	8009ee0 <_sbrk_r>
 8009cf0:	6030      	str	r0, [r6, #0]
 8009cf2:	4621      	mov	r1, r4
 8009cf4:	4628      	mov	r0, r5
 8009cf6:	f000 f8f3 	bl	8009ee0 <_sbrk_r>
 8009cfa:	1c43      	adds	r3, r0, #1
 8009cfc:	d00a      	beq.n	8009d14 <sbrk_aligned+0x34>
 8009cfe:	1cc4      	adds	r4, r0, #3
 8009d00:	f024 0403 	bic.w	r4, r4, #3
 8009d04:	42a0      	cmp	r0, r4
 8009d06:	d007      	beq.n	8009d18 <sbrk_aligned+0x38>
 8009d08:	1a21      	subs	r1, r4, r0
 8009d0a:	4628      	mov	r0, r5
 8009d0c:	f000 f8e8 	bl	8009ee0 <_sbrk_r>
 8009d10:	3001      	adds	r0, #1
 8009d12:	d101      	bne.n	8009d18 <sbrk_aligned+0x38>
 8009d14:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009d18:	4620      	mov	r0, r4
 8009d1a:	bd70      	pop	{r4, r5, r6, pc}
 8009d1c:	20003004 	.word	0x20003004

08009d20 <_malloc_r>:
 8009d20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d24:	1ccd      	adds	r5, r1, #3
 8009d26:	f025 0503 	bic.w	r5, r5, #3
 8009d2a:	3508      	adds	r5, #8
 8009d2c:	2d0c      	cmp	r5, #12
 8009d2e:	bf38      	it	cc
 8009d30:	250c      	movcc	r5, #12
 8009d32:	2d00      	cmp	r5, #0
 8009d34:	4607      	mov	r7, r0
 8009d36:	db01      	blt.n	8009d3c <_malloc_r+0x1c>
 8009d38:	42a9      	cmp	r1, r5
 8009d3a:	d905      	bls.n	8009d48 <_malloc_r+0x28>
 8009d3c:	230c      	movs	r3, #12
 8009d3e:	603b      	str	r3, [r7, #0]
 8009d40:	2600      	movs	r6, #0
 8009d42:	4630      	mov	r0, r6
 8009d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d48:	4e2e      	ldr	r6, [pc, #184]	; (8009e04 <_malloc_r+0xe4>)
 8009d4a:	f000 f935 	bl	8009fb8 <__malloc_lock>
 8009d4e:	6833      	ldr	r3, [r6, #0]
 8009d50:	461c      	mov	r4, r3
 8009d52:	bb34      	cbnz	r4, 8009da2 <_malloc_r+0x82>
 8009d54:	4629      	mov	r1, r5
 8009d56:	4638      	mov	r0, r7
 8009d58:	f7ff ffc2 	bl	8009ce0 <sbrk_aligned>
 8009d5c:	1c43      	adds	r3, r0, #1
 8009d5e:	4604      	mov	r4, r0
 8009d60:	d14d      	bne.n	8009dfe <_malloc_r+0xde>
 8009d62:	6834      	ldr	r4, [r6, #0]
 8009d64:	4626      	mov	r6, r4
 8009d66:	2e00      	cmp	r6, #0
 8009d68:	d140      	bne.n	8009dec <_malloc_r+0xcc>
 8009d6a:	6823      	ldr	r3, [r4, #0]
 8009d6c:	4631      	mov	r1, r6
 8009d6e:	4638      	mov	r0, r7
 8009d70:	eb04 0803 	add.w	r8, r4, r3
 8009d74:	f000 f8b4 	bl	8009ee0 <_sbrk_r>
 8009d78:	4580      	cmp	r8, r0
 8009d7a:	d13a      	bne.n	8009df2 <_malloc_r+0xd2>
 8009d7c:	6821      	ldr	r1, [r4, #0]
 8009d7e:	3503      	adds	r5, #3
 8009d80:	1a6d      	subs	r5, r5, r1
 8009d82:	f025 0503 	bic.w	r5, r5, #3
 8009d86:	3508      	adds	r5, #8
 8009d88:	2d0c      	cmp	r5, #12
 8009d8a:	bf38      	it	cc
 8009d8c:	250c      	movcc	r5, #12
 8009d8e:	4629      	mov	r1, r5
 8009d90:	4638      	mov	r0, r7
 8009d92:	f7ff ffa5 	bl	8009ce0 <sbrk_aligned>
 8009d96:	3001      	adds	r0, #1
 8009d98:	d02b      	beq.n	8009df2 <_malloc_r+0xd2>
 8009d9a:	6823      	ldr	r3, [r4, #0]
 8009d9c:	442b      	add	r3, r5
 8009d9e:	6023      	str	r3, [r4, #0]
 8009da0:	e00e      	b.n	8009dc0 <_malloc_r+0xa0>
 8009da2:	6822      	ldr	r2, [r4, #0]
 8009da4:	1b52      	subs	r2, r2, r5
 8009da6:	d41e      	bmi.n	8009de6 <_malloc_r+0xc6>
 8009da8:	2a0b      	cmp	r2, #11
 8009daa:	d916      	bls.n	8009dda <_malloc_r+0xba>
 8009dac:	1961      	adds	r1, r4, r5
 8009dae:	42a3      	cmp	r3, r4
 8009db0:	6025      	str	r5, [r4, #0]
 8009db2:	bf18      	it	ne
 8009db4:	6059      	strne	r1, [r3, #4]
 8009db6:	6863      	ldr	r3, [r4, #4]
 8009db8:	bf08      	it	eq
 8009dba:	6031      	streq	r1, [r6, #0]
 8009dbc:	5162      	str	r2, [r4, r5]
 8009dbe:	604b      	str	r3, [r1, #4]
 8009dc0:	4638      	mov	r0, r7
 8009dc2:	f104 060b 	add.w	r6, r4, #11
 8009dc6:	f000 f8fd 	bl	8009fc4 <__malloc_unlock>
 8009dca:	f026 0607 	bic.w	r6, r6, #7
 8009dce:	1d23      	adds	r3, r4, #4
 8009dd0:	1af2      	subs	r2, r6, r3
 8009dd2:	d0b6      	beq.n	8009d42 <_malloc_r+0x22>
 8009dd4:	1b9b      	subs	r3, r3, r6
 8009dd6:	50a3      	str	r3, [r4, r2]
 8009dd8:	e7b3      	b.n	8009d42 <_malloc_r+0x22>
 8009dda:	6862      	ldr	r2, [r4, #4]
 8009ddc:	42a3      	cmp	r3, r4
 8009dde:	bf0c      	ite	eq
 8009de0:	6032      	streq	r2, [r6, #0]
 8009de2:	605a      	strne	r2, [r3, #4]
 8009de4:	e7ec      	b.n	8009dc0 <_malloc_r+0xa0>
 8009de6:	4623      	mov	r3, r4
 8009de8:	6864      	ldr	r4, [r4, #4]
 8009dea:	e7b2      	b.n	8009d52 <_malloc_r+0x32>
 8009dec:	4634      	mov	r4, r6
 8009dee:	6876      	ldr	r6, [r6, #4]
 8009df0:	e7b9      	b.n	8009d66 <_malloc_r+0x46>
 8009df2:	230c      	movs	r3, #12
 8009df4:	603b      	str	r3, [r7, #0]
 8009df6:	4638      	mov	r0, r7
 8009df8:	f000 f8e4 	bl	8009fc4 <__malloc_unlock>
 8009dfc:	e7a1      	b.n	8009d42 <_malloc_r+0x22>
 8009dfe:	6025      	str	r5, [r4, #0]
 8009e00:	e7de      	b.n	8009dc0 <_malloc_r+0xa0>
 8009e02:	bf00      	nop
 8009e04:	20003000 	.word	0x20003000

08009e08 <srand>:
 8009e08:	b538      	push	{r3, r4, r5, lr}
 8009e0a:	4b10      	ldr	r3, [pc, #64]	; (8009e4c <srand+0x44>)
 8009e0c:	681d      	ldr	r5, [r3, #0]
 8009e0e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8009e10:	4604      	mov	r4, r0
 8009e12:	b9b3      	cbnz	r3, 8009e42 <srand+0x3a>
 8009e14:	2018      	movs	r0, #24
 8009e16:	f7ff fef9 	bl	8009c0c <malloc>
 8009e1a:	4602      	mov	r2, r0
 8009e1c:	63a8      	str	r0, [r5, #56]	; 0x38
 8009e1e:	b920      	cbnz	r0, 8009e2a <srand+0x22>
 8009e20:	4b0b      	ldr	r3, [pc, #44]	; (8009e50 <srand+0x48>)
 8009e22:	480c      	ldr	r0, [pc, #48]	; (8009e54 <srand+0x4c>)
 8009e24:	2142      	movs	r1, #66	; 0x42
 8009e26:	f000 f885 	bl	8009f34 <__assert_func>
 8009e2a:	490b      	ldr	r1, [pc, #44]	; (8009e58 <srand+0x50>)
 8009e2c:	4b0b      	ldr	r3, [pc, #44]	; (8009e5c <srand+0x54>)
 8009e2e:	e9c0 1300 	strd	r1, r3, [r0]
 8009e32:	4b0b      	ldr	r3, [pc, #44]	; (8009e60 <srand+0x58>)
 8009e34:	6083      	str	r3, [r0, #8]
 8009e36:	230b      	movs	r3, #11
 8009e38:	8183      	strh	r3, [r0, #12]
 8009e3a:	2100      	movs	r1, #0
 8009e3c:	2001      	movs	r0, #1
 8009e3e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8009e42:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8009e44:	2200      	movs	r2, #0
 8009e46:	611c      	str	r4, [r3, #16]
 8009e48:	615a      	str	r2, [r3, #20]
 8009e4a:	bd38      	pop	{r3, r4, r5, pc}
 8009e4c:	2000001c 	.word	0x2000001c
 8009e50:	0800ae4c 	.word	0x0800ae4c
 8009e54:	0800ae63 	.word	0x0800ae63
 8009e58:	abcd330e 	.word	0xabcd330e
 8009e5c:	e66d1234 	.word	0xe66d1234
 8009e60:	0005deec 	.word	0x0005deec

08009e64 <rand>:
 8009e64:	4b16      	ldr	r3, [pc, #88]	; (8009ec0 <rand+0x5c>)
 8009e66:	b510      	push	{r4, lr}
 8009e68:	681c      	ldr	r4, [r3, #0]
 8009e6a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009e6c:	b9b3      	cbnz	r3, 8009e9c <rand+0x38>
 8009e6e:	2018      	movs	r0, #24
 8009e70:	f7ff fecc 	bl	8009c0c <malloc>
 8009e74:	63a0      	str	r0, [r4, #56]	; 0x38
 8009e76:	b928      	cbnz	r0, 8009e84 <rand+0x20>
 8009e78:	4602      	mov	r2, r0
 8009e7a:	4b12      	ldr	r3, [pc, #72]	; (8009ec4 <rand+0x60>)
 8009e7c:	4812      	ldr	r0, [pc, #72]	; (8009ec8 <rand+0x64>)
 8009e7e:	214e      	movs	r1, #78	; 0x4e
 8009e80:	f000 f858 	bl	8009f34 <__assert_func>
 8009e84:	4a11      	ldr	r2, [pc, #68]	; (8009ecc <rand+0x68>)
 8009e86:	4b12      	ldr	r3, [pc, #72]	; (8009ed0 <rand+0x6c>)
 8009e88:	e9c0 2300 	strd	r2, r3, [r0]
 8009e8c:	4b11      	ldr	r3, [pc, #68]	; (8009ed4 <rand+0x70>)
 8009e8e:	6083      	str	r3, [r0, #8]
 8009e90:	230b      	movs	r3, #11
 8009e92:	8183      	strh	r3, [r0, #12]
 8009e94:	2201      	movs	r2, #1
 8009e96:	2300      	movs	r3, #0
 8009e98:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8009e9c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8009e9e:	4a0e      	ldr	r2, [pc, #56]	; (8009ed8 <rand+0x74>)
 8009ea0:	6920      	ldr	r0, [r4, #16]
 8009ea2:	6963      	ldr	r3, [r4, #20]
 8009ea4:	490d      	ldr	r1, [pc, #52]	; (8009edc <rand+0x78>)
 8009ea6:	4342      	muls	r2, r0
 8009ea8:	fb01 2203 	mla	r2, r1, r3, r2
 8009eac:	fba0 0101 	umull	r0, r1, r0, r1
 8009eb0:	1c43      	adds	r3, r0, #1
 8009eb2:	eb42 0001 	adc.w	r0, r2, r1
 8009eb6:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8009eba:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8009ebe:	bd10      	pop	{r4, pc}
 8009ec0:	2000001c 	.word	0x2000001c
 8009ec4:	0800ae4c 	.word	0x0800ae4c
 8009ec8:	0800ae63 	.word	0x0800ae63
 8009ecc:	abcd330e 	.word	0xabcd330e
 8009ed0:	e66d1234 	.word	0xe66d1234
 8009ed4:	0005deec 	.word	0x0005deec
 8009ed8:	5851f42d 	.word	0x5851f42d
 8009edc:	4c957f2d 	.word	0x4c957f2d

08009ee0 <_sbrk_r>:
 8009ee0:	b538      	push	{r3, r4, r5, lr}
 8009ee2:	4d06      	ldr	r5, [pc, #24]	; (8009efc <_sbrk_r+0x1c>)
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	4604      	mov	r4, r0
 8009ee8:	4608      	mov	r0, r1
 8009eea:	602b      	str	r3, [r5, #0]
 8009eec:	f7ff fdf2 	bl	8009ad4 <_sbrk>
 8009ef0:	1c43      	adds	r3, r0, #1
 8009ef2:	d102      	bne.n	8009efa <_sbrk_r+0x1a>
 8009ef4:	682b      	ldr	r3, [r5, #0]
 8009ef6:	b103      	cbz	r3, 8009efa <_sbrk_r+0x1a>
 8009ef8:	6023      	str	r3, [r4, #0]
 8009efa:	bd38      	pop	{r3, r4, r5, pc}
 8009efc:	20003008 	.word	0x20003008

08009f00 <time>:
 8009f00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009f02:	4b0b      	ldr	r3, [pc, #44]	; (8009f30 <time+0x30>)
 8009f04:	2200      	movs	r2, #0
 8009f06:	4669      	mov	r1, sp
 8009f08:	4604      	mov	r4, r0
 8009f0a:	6818      	ldr	r0, [r3, #0]
 8009f0c:	f000 f842 	bl	8009f94 <_gettimeofday_r>
 8009f10:	2800      	cmp	r0, #0
 8009f12:	bfbe      	ittt	lt
 8009f14:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
 8009f18:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009f1c:	e9cd 2300 	strdlt	r2, r3, [sp]
 8009f20:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009f24:	b10c      	cbz	r4, 8009f2a <time+0x2a>
 8009f26:	e9c4 0100 	strd	r0, r1, [r4]
 8009f2a:	b004      	add	sp, #16
 8009f2c:	bd10      	pop	{r4, pc}
 8009f2e:	bf00      	nop
 8009f30:	2000001c 	.word	0x2000001c

08009f34 <__assert_func>:
 8009f34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009f36:	4614      	mov	r4, r2
 8009f38:	461a      	mov	r2, r3
 8009f3a:	4b09      	ldr	r3, [pc, #36]	; (8009f60 <__assert_func+0x2c>)
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	4605      	mov	r5, r0
 8009f40:	68d8      	ldr	r0, [r3, #12]
 8009f42:	b14c      	cbz	r4, 8009f58 <__assert_func+0x24>
 8009f44:	4b07      	ldr	r3, [pc, #28]	; (8009f64 <__assert_func+0x30>)
 8009f46:	9100      	str	r1, [sp, #0]
 8009f48:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009f4c:	4906      	ldr	r1, [pc, #24]	; (8009f68 <__assert_func+0x34>)
 8009f4e:	462b      	mov	r3, r5
 8009f50:	f000 f80e 	bl	8009f70 <fiprintf>
 8009f54:	f000 fbea 	bl	800a72c <abort>
 8009f58:	4b04      	ldr	r3, [pc, #16]	; (8009f6c <__assert_func+0x38>)
 8009f5a:	461c      	mov	r4, r3
 8009f5c:	e7f3      	b.n	8009f46 <__assert_func+0x12>
 8009f5e:	bf00      	nop
 8009f60:	2000001c 	.word	0x2000001c
 8009f64:	0800aebe 	.word	0x0800aebe
 8009f68:	0800aecb 	.word	0x0800aecb
 8009f6c:	0800aef9 	.word	0x0800aef9

08009f70 <fiprintf>:
 8009f70:	b40e      	push	{r1, r2, r3}
 8009f72:	b503      	push	{r0, r1, lr}
 8009f74:	4601      	mov	r1, r0
 8009f76:	ab03      	add	r3, sp, #12
 8009f78:	4805      	ldr	r0, [pc, #20]	; (8009f90 <fiprintf+0x20>)
 8009f7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f7e:	6800      	ldr	r0, [r0, #0]
 8009f80:	9301      	str	r3, [sp, #4]
 8009f82:	f000 f84f 	bl	800a024 <_vfiprintf_r>
 8009f86:	b002      	add	sp, #8
 8009f88:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f8c:	b003      	add	sp, #12
 8009f8e:	4770      	bx	lr
 8009f90:	2000001c 	.word	0x2000001c

08009f94 <_gettimeofday_r>:
 8009f94:	b538      	push	{r3, r4, r5, lr}
 8009f96:	4d07      	ldr	r5, [pc, #28]	; (8009fb4 <_gettimeofday_r+0x20>)
 8009f98:	2300      	movs	r3, #0
 8009f9a:	4604      	mov	r4, r0
 8009f9c:	4608      	mov	r0, r1
 8009f9e:	4611      	mov	r1, r2
 8009fa0:	602b      	str	r3, [r5, #0]
 8009fa2:	f000 fedb 	bl	800ad5c <_gettimeofday>
 8009fa6:	1c43      	adds	r3, r0, #1
 8009fa8:	d102      	bne.n	8009fb0 <_gettimeofday_r+0x1c>
 8009faa:	682b      	ldr	r3, [r5, #0]
 8009fac:	b103      	cbz	r3, 8009fb0 <_gettimeofday_r+0x1c>
 8009fae:	6023      	str	r3, [r4, #0]
 8009fb0:	bd38      	pop	{r3, r4, r5, pc}
 8009fb2:	bf00      	nop
 8009fb4:	20003008 	.word	0x20003008

08009fb8 <__malloc_lock>:
 8009fb8:	4801      	ldr	r0, [pc, #4]	; (8009fc0 <__malloc_lock+0x8>)
 8009fba:	f000 bd77 	b.w	800aaac <__retarget_lock_acquire_recursive>
 8009fbe:	bf00      	nop
 8009fc0:	2000300c 	.word	0x2000300c

08009fc4 <__malloc_unlock>:
 8009fc4:	4801      	ldr	r0, [pc, #4]	; (8009fcc <__malloc_unlock+0x8>)
 8009fc6:	f000 bd72 	b.w	800aaae <__retarget_lock_release_recursive>
 8009fca:	bf00      	nop
 8009fcc:	2000300c 	.word	0x2000300c

08009fd0 <__sfputc_r>:
 8009fd0:	6893      	ldr	r3, [r2, #8]
 8009fd2:	3b01      	subs	r3, #1
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	b410      	push	{r4}
 8009fd8:	6093      	str	r3, [r2, #8]
 8009fda:	da08      	bge.n	8009fee <__sfputc_r+0x1e>
 8009fdc:	6994      	ldr	r4, [r2, #24]
 8009fde:	42a3      	cmp	r3, r4
 8009fe0:	db01      	blt.n	8009fe6 <__sfputc_r+0x16>
 8009fe2:	290a      	cmp	r1, #10
 8009fe4:	d103      	bne.n	8009fee <__sfputc_r+0x1e>
 8009fe6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009fea:	f000 badf 	b.w	800a5ac <__swbuf_r>
 8009fee:	6813      	ldr	r3, [r2, #0]
 8009ff0:	1c58      	adds	r0, r3, #1
 8009ff2:	6010      	str	r0, [r2, #0]
 8009ff4:	7019      	strb	r1, [r3, #0]
 8009ff6:	4608      	mov	r0, r1
 8009ff8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ffc:	4770      	bx	lr

08009ffe <__sfputs_r>:
 8009ffe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a000:	4606      	mov	r6, r0
 800a002:	460f      	mov	r7, r1
 800a004:	4614      	mov	r4, r2
 800a006:	18d5      	adds	r5, r2, r3
 800a008:	42ac      	cmp	r4, r5
 800a00a:	d101      	bne.n	800a010 <__sfputs_r+0x12>
 800a00c:	2000      	movs	r0, #0
 800a00e:	e007      	b.n	800a020 <__sfputs_r+0x22>
 800a010:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a014:	463a      	mov	r2, r7
 800a016:	4630      	mov	r0, r6
 800a018:	f7ff ffda 	bl	8009fd0 <__sfputc_r>
 800a01c:	1c43      	adds	r3, r0, #1
 800a01e:	d1f3      	bne.n	800a008 <__sfputs_r+0xa>
 800a020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a024 <_vfiprintf_r>:
 800a024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a028:	460d      	mov	r5, r1
 800a02a:	b09d      	sub	sp, #116	; 0x74
 800a02c:	4614      	mov	r4, r2
 800a02e:	4698      	mov	r8, r3
 800a030:	4606      	mov	r6, r0
 800a032:	b118      	cbz	r0, 800a03c <_vfiprintf_r+0x18>
 800a034:	6983      	ldr	r3, [r0, #24]
 800a036:	b90b      	cbnz	r3, 800a03c <_vfiprintf_r+0x18>
 800a038:	f000 fc9a 	bl	800a970 <__sinit>
 800a03c:	4b89      	ldr	r3, [pc, #548]	; (800a264 <_vfiprintf_r+0x240>)
 800a03e:	429d      	cmp	r5, r3
 800a040:	d11b      	bne.n	800a07a <_vfiprintf_r+0x56>
 800a042:	6875      	ldr	r5, [r6, #4]
 800a044:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a046:	07d9      	lsls	r1, r3, #31
 800a048:	d405      	bmi.n	800a056 <_vfiprintf_r+0x32>
 800a04a:	89ab      	ldrh	r3, [r5, #12]
 800a04c:	059a      	lsls	r2, r3, #22
 800a04e:	d402      	bmi.n	800a056 <_vfiprintf_r+0x32>
 800a050:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a052:	f000 fd2b 	bl	800aaac <__retarget_lock_acquire_recursive>
 800a056:	89ab      	ldrh	r3, [r5, #12]
 800a058:	071b      	lsls	r3, r3, #28
 800a05a:	d501      	bpl.n	800a060 <_vfiprintf_r+0x3c>
 800a05c:	692b      	ldr	r3, [r5, #16]
 800a05e:	b9eb      	cbnz	r3, 800a09c <_vfiprintf_r+0x78>
 800a060:	4629      	mov	r1, r5
 800a062:	4630      	mov	r0, r6
 800a064:	f000 faf4 	bl	800a650 <__swsetup_r>
 800a068:	b1c0      	cbz	r0, 800a09c <_vfiprintf_r+0x78>
 800a06a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a06c:	07dc      	lsls	r4, r3, #31
 800a06e:	d50e      	bpl.n	800a08e <_vfiprintf_r+0x6a>
 800a070:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a074:	b01d      	add	sp, #116	; 0x74
 800a076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a07a:	4b7b      	ldr	r3, [pc, #492]	; (800a268 <_vfiprintf_r+0x244>)
 800a07c:	429d      	cmp	r5, r3
 800a07e:	d101      	bne.n	800a084 <_vfiprintf_r+0x60>
 800a080:	68b5      	ldr	r5, [r6, #8]
 800a082:	e7df      	b.n	800a044 <_vfiprintf_r+0x20>
 800a084:	4b79      	ldr	r3, [pc, #484]	; (800a26c <_vfiprintf_r+0x248>)
 800a086:	429d      	cmp	r5, r3
 800a088:	bf08      	it	eq
 800a08a:	68f5      	ldreq	r5, [r6, #12]
 800a08c:	e7da      	b.n	800a044 <_vfiprintf_r+0x20>
 800a08e:	89ab      	ldrh	r3, [r5, #12]
 800a090:	0598      	lsls	r0, r3, #22
 800a092:	d4ed      	bmi.n	800a070 <_vfiprintf_r+0x4c>
 800a094:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a096:	f000 fd0a 	bl	800aaae <__retarget_lock_release_recursive>
 800a09a:	e7e9      	b.n	800a070 <_vfiprintf_r+0x4c>
 800a09c:	2300      	movs	r3, #0
 800a09e:	9309      	str	r3, [sp, #36]	; 0x24
 800a0a0:	2320      	movs	r3, #32
 800a0a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a0a6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a0aa:	2330      	movs	r3, #48	; 0x30
 800a0ac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a270 <_vfiprintf_r+0x24c>
 800a0b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a0b4:	f04f 0901 	mov.w	r9, #1
 800a0b8:	4623      	mov	r3, r4
 800a0ba:	469a      	mov	sl, r3
 800a0bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a0c0:	b10a      	cbz	r2, 800a0c6 <_vfiprintf_r+0xa2>
 800a0c2:	2a25      	cmp	r2, #37	; 0x25
 800a0c4:	d1f9      	bne.n	800a0ba <_vfiprintf_r+0x96>
 800a0c6:	ebba 0b04 	subs.w	fp, sl, r4
 800a0ca:	d00b      	beq.n	800a0e4 <_vfiprintf_r+0xc0>
 800a0cc:	465b      	mov	r3, fp
 800a0ce:	4622      	mov	r2, r4
 800a0d0:	4629      	mov	r1, r5
 800a0d2:	4630      	mov	r0, r6
 800a0d4:	f7ff ff93 	bl	8009ffe <__sfputs_r>
 800a0d8:	3001      	adds	r0, #1
 800a0da:	f000 80aa 	beq.w	800a232 <_vfiprintf_r+0x20e>
 800a0de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0e0:	445a      	add	r2, fp
 800a0e2:	9209      	str	r2, [sp, #36]	; 0x24
 800a0e4:	f89a 3000 	ldrb.w	r3, [sl]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	f000 80a2 	beq.w	800a232 <_vfiprintf_r+0x20e>
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a0f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a0f8:	f10a 0a01 	add.w	sl, sl, #1
 800a0fc:	9304      	str	r3, [sp, #16]
 800a0fe:	9307      	str	r3, [sp, #28]
 800a100:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a104:	931a      	str	r3, [sp, #104]	; 0x68
 800a106:	4654      	mov	r4, sl
 800a108:	2205      	movs	r2, #5
 800a10a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a10e:	4858      	ldr	r0, [pc, #352]	; (800a270 <_vfiprintf_r+0x24c>)
 800a110:	f7f6 f85e 	bl	80001d0 <memchr>
 800a114:	9a04      	ldr	r2, [sp, #16]
 800a116:	b9d8      	cbnz	r0, 800a150 <_vfiprintf_r+0x12c>
 800a118:	06d1      	lsls	r1, r2, #27
 800a11a:	bf44      	itt	mi
 800a11c:	2320      	movmi	r3, #32
 800a11e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a122:	0713      	lsls	r3, r2, #28
 800a124:	bf44      	itt	mi
 800a126:	232b      	movmi	r3, #43	; 0x2b
 800a128:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a12c:	f89a 3000 	ldrb.w	r3, [sl]
 800a130:	2b2a      	cmp	r3, #42	; 0x2a
 800a132:	d015      	beq.n	800a160 <_vfiprintf_r+0x13c>
 800a134:	9a07      	ldr	r2, [sp, #28]
 800a136:	4654      	mov	r4, sl
 800a138:	2000      	movs	r0, #0
 800a13a:	f04f 0c0a 	mov.w	ip, #10
 800a13e:	4621      	mov	r1, r4
 800a140:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a144:	3b30      	subs	r3, #48	; 0x30
 800a146:	2b09      	cmp	r3, #9
 800a148:	d94e      	bls.n	800a1e8 <_vfiprintf_r+0x1c4>
 800a14a:	b1b0      	cbz	r0, 800a17a <_vfiprintf_r+0x156>
 800a14c:	9207      	str	r2, [sp, #28]
 800a14e:	e014      	b.n	800a17a <_vfiprintf_r+0x156>
 800a150:	eba0 0308 	sub.w	r3, r0, r8
 800a154:	fa09 f303 	lsl.w	r3, r9, r3
 800a158:	4313      	orrs	r3, r2
 800a15a:	9304      	str	r3, [sp, #16]
 800a15c:	46a2      	mov	sl, r4
 800a15e:	e7d2      	b.n	800a106 <_vfiprintf_r+0xe2>
 800a160:	9b03      	ldr	r3, [sp, #12]
 800a162:	1d19      	adds	r1, r3, #4
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	9103      	str	r1, [sp, #12]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	bfbb      	ittet	lt
 800a16c:	425b      	neglt	r3, r3
 800a16e:	f042 0202 	orrlt.w	r2, r2, #2
 800a172:	9307      	strge	r3, [sp, #28]
 800a174:	9307      	strlt	r3, [sp, #28]
 800a176:	bfb8      	it	lt
 800a178:	9204      	strlt	r2, [sp, #16]
 800a17a:	7823      	ldrb	r3, [r4, #0]
 800a17c:	2b2e      	cmp	r3, #46	; 0x2e
 800a17e:	d10c      	bne.n	800a19a <_vfiprintf_r+0x176>
 800a180:	7863      	ldrb	r3, [r4, #1]
 800a182:	2b2a      	cmp	r3, #42	; 0x2a
 800a184:	d135      	bne.n	800a1f2 <_vfiprintf_r+0x1ce>
 800a186:	9b03      	ldr	r3, [sp, #12]
 800a188:	1d1a      	adds	r2, r3, #4
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	9203      	str	r2, [sp, #12]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	bfb8      	it	lt
 800a192:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a196:	3402      	adds	r4, #2
 800a198:	9305      	str	r3, [sp, #20]
 800a19a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a280 <_vfiprintf_r+0x25c>
 800a19e:	7821      	ldrb	r1, [r4, #0]
 800a1a0:	2203      	movs	r2, #3
 800a1a2:	4650      	mov	r0, sl
 800a1a4:	f7f6 f814 	bl	80001d0 <memchr>
 800a1a8:	b140      	cbz	r0, 800a1bc <_vfiprintf_r+0x198>
 800a1aa:	2340      	movs	r3, #64	; 0x40
 800a1ac:	eba0 000a 	sub.w	r0, r0, sl
 800a1b0:	fa03 f000 	lsl.w	r0, r3, r0
 800a1b4:	9b04      	ldr	r3, [sp, #16]
 800a1b6:	4303      	orrs	r3, r0
 800a1b8:	3401      	adds	r4, #1
 800a1ba:	9304      	str	r3, [sp, #16]
 800a1bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1c0:	482c      	ldr	r0, [pc, #176]	; (800a274 <_vfiprintf_r+0x250>)
 800a1c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a1c6:	2206      	movs	r2, #6
 800a1c8:	f7f6 f802 	bl	80001d0 <memchr>
 800a1cc:	2800      	cmp	r0, #0
 800a1ce:	d03f      	beq.n	800a250 <_vfiprintf_r+0x22c>
 800a1d0:	4b29      	ldr	r3, [pc, #164]	; (800a278 <_vfiprintf_r+0x254>)
 800a1d2:	bb1b      	cbnz	r3, 800a21c <_vfiprintf_r+0x1f8>
 800a1d4:	9b03      	ldr	r3, [sp, #12]
 800a1d6:	3307      	adds	r3, #7
 800a1d8:	f023 0307 	bic.w	r3, r3, #7
 800a1dc:	3308      	adds	r3, #8
 800a1de:	9303      	str	r3, [sp, #12]
 800a1e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1e2:	443b      	add	r3, r7
 800a1e4:	9309      	str	r3, [sp, #36]	; 0x24
 800a1e6:	e767      	b.n	800a0b8 <_vfiprintf_r+0x94>
 800a1e8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a1ec:	460c      	mov	r4, r1
 800a1ee:	2001      	movs	r0, #1
 800a1f0:	e7a5      	b.n	800a13e <_vfiprintf_r+0x11a>
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	3401      	adds	r4, #1
 800a1f6:	9305      	str	r3, [sp, #20]
 800a1f8:	4619      	mov	r1, r3
 800a1fa:	f04f 0c0a 	mov.w	ip, #10
 800a1fe:	4620      	mov	r0, r4
 800a200:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a204:	3a30      	subs	r2, #48	; 0x30
 800a206:	2a09      	cmp	r2, #9
 800a208:	d903      	bls.n	800a212 <_vfiprintf_r+0x1ee>
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d0c5      	beq.n	800a19a <_vfiprintf_r+0x176>
 800a20e:	9105      	str	r1, [sp, #20]
 800a210:	e7c3      	b.n	800a19a <_vfiprintf_r+0x176>
 800a212:	fb0c 2101 	mla	r1, ip, r1, r2
 800a216:	4604      	mov	r4, r0
 800a218:	2301      	movs	r3, #1
 800a21a:	e7f0      	b.n	800a1fe <_vfiprintf_r+0x1da>
 800a21c:	ab03      	add	r3, sp, #12
 800a21e:	9300      	str	r3, [sp, #0]
 800a220:	462a      	mov	r2, r5
 800a222:	4b16      	ldr	r3, [pc, #88]	; (800a27c <_vfiprintf_r+0x258>)
 800a224:	a904      	add	r1, sp, #16
 800a226:	4630      	mov	r0, r6
 800a228:	f3af 8000 	nop.w
 800a22c:	4607      	mov	r7, r0
 800a22e:	1c78      	adds	r0, r7, #1
 800a230:	d1d6      	bne.n	800a1e0 <_vfiprintf_r+0x1bc>
 800a232:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a234:	07d9      	lsls	r1, r3, #31
 800a236:	d405      	bmi.n	800a244 <_vfiprintf_r+0x220>
 800a238:	89ab      	ldrh	r3, [r5, #12]
 800a23a:	059a      	lsls	r2, r3, #22
 800a23c:	d402      	bmi.n	800a244 <_vfiprintf_r+0x220>
 800a23e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a240:	f000 fc35 	bl	800aaae <__retarget_lock_release_recursive>
 800a244:	89ab      	ldrh	r3, [r5, #12]
 800a246:	065b      	lsls	r3, r3, #25
 800a248:	f53f af12 	bmi.w	800a070 <_vfiprintf_r+0x4c>
 800a24c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a24e:	e711      	b.n	800a074 <_vfiprintf_r+0x50>
 800a250:	ab03      	add	r3, sp, #12
 800a252:	9300      	str	r3, [sp, #0]
 800a254:	462a      	mov	r2, r5
 800a256:	4b09      	ldr	r3, [pc, #36]	; (800a27c <_vfiprintf_r+0x258>)
 800a258:	a904      	add	r1, sp, #16
 800a25a:	4630      	mov	r0, r6
 800a25c:	f000 f880 	bl	800a360 <_printf_i>
 800a260:	e7e4      	b.n	800a22c <_vfiprintf_r+0x208>
 800a262:	bf00      	nop
 800a264:	0800af50 	.word	0x0800af50
 800a268:	0800af70 	.word	0x0800af70
 800a26c:	0800af30 	.word	0x0800af30
 800a270:	0800aefa 	.word	0x0800aefa
 800a274:	0800af04 	.word	0x0800af04
 800a278:	00000000 	.word	0x00000000
 800a27c:	08009fff 	.word	0x08009fff
 800a280:	0800af00 	.word	0x0800af00

0800a284 <_printf_common>:
 800a284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a288:	4616      	mov	r6, r2
 800a28a:	4699      	mov	r9, r3
 800a28c:	688a      	ldr	r2, [r1, #8]
 800a28e:	690b      	ldr	r3, [r1, #16]
 800a290:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a294:	4293      	cmp	r3, r2
 800a296:	bfb8      	it	lt
 800a298:	4613      	movlt	r3, r2
 800a29a:	6033      	str	r3, [r6, #0]
 800a29c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a2a0:	4607      	mov	r7, r0
 800a2a2:	460c      	mov	r4, r1
 800a2a4:	b10a      	cbz	r2, 800a2aa <_printf_common+0x26>
 800a2a6:	3301      	adds	r3, #1
 800a2a8:	6033      	str	r3, [r6, #0]
 800a2aa:	6823      	ldr	r3, [r4, #0]
 800a2ac:	0699      	lsls	r1, r3, #26
 800a2ae:	bf42      	ittt	mi
 800a2b0:	6833      	ldrmi	r3, [r6, #0]
 800a2b2:	3302      	addmi	r3, #2
 800a2b4:	6033      	strmi	r3, [r6, #0]
 800a2b6:	6825      	ldr	r5, [r4, #0]
 800a2b8:	f015 0506 	ands.w	r5, r5, #6
 800a2bc:	d106      	bne.n	800a2cc <_printf_common+0x48>
 800a2be:	f104 0a19 	add.w	sl, r4, #25
 800a2c2:	68e3      	ldr	r3, [r4, #12]
 800a2c4:	6832      	ldr	r2, [r6, #0]
 800a2c6:	1a9b      	subs	r3, r3, r2
 800a2c8:	42ab      	cmp	r3, r5
 800a2ca:	dc26      	bgt.n	800a31a <_printf_common+0x96>
 800a2cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a2d0:	1e13      	subs	r3, r2, #0
 800a2d2:	6822      	ldr	r2, [r4, #0]
 800a2d4:	bf18      	it	ne
 800a2d6:	2301      	movne	r3, #1
 800a2d8:	0692      	lsls	r2, r2, #26
 800a2da:	d42b      	bmi.n	800a334 <_printf_common+0xb0>
 800a2dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a2e0:	4649      	mov	r1, r9
 800a2e2:	4638      	mov	r0, r7
 800a2e4:	47c0      	blx	r8
 800a2e6:	3001      	adds	r0, #1
 800a2e8:	d01e      	beq.n	800a328 <_printf_common+0xa4>
 800a2ea:	6823      	ldr	r3, [r4, #0]
 800a2ec:	68e5      	ldr	r5, [r4, #12]
 800a2ee:	6832      	ldr	r2, [r6, #0]
 800a2f0:	f003 0306 	and.w	r3, r3, #6
 800a2f4:	2b04      	cmp	r3, #4
 800a2f6:	bf08      	it	eq
 800a2f8:	1aad      	subeq	r5, r5, r2
 800a2fa:	68a3      	ldr	r3, [r4, #8]
 800a2fc:	6922      	ldr	r2, [r4, #16]
 800a2fe:	bf0c      	ite	eq
 800a300:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a304:	2500      	movne	r5, #0
 800a306:	4293      	cmp	r3, r2
 800a308:	bfc4      	itt	gt
 800a30a:	1a9b      	subgt	r3, r3, r2
 800a30c:	18ed      	addgt	r5, r5, r3
 800a30e:	2600      	movs	r6, #0
 800a310:	341a      	adds	r4, #26
 800a312:	42b5      	cmp	r5, r6
 800a314:	d11a      	bne.n	800a34c <_printf_common+0xc8>
 800a316:	2000      	movs	r0, #0
 800a318:	e008      	b.n	800a32c <_printf_common+0xa8>
 800a31a:	2301      	movs	r3, #1
 800a31c:	4652      	mov	r2, sl
 800a31e:	4649      	mov	r1, r9
 800a320:	4638      	mov	r0, r7
 800a322:	47c0      	blx	r8
 800a324:	3001      	adds	r0, #1
 800a326:	d103      	bne.n	800a330 <_printf_common+0xac>
 800a328:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a32c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a330:	3501      	adds	r5, #1
 800a332:	e7c6      	b.n	800a2c2 <_printf_common+0x3e>
 800a334:	18e1      	adds	r1, r4, r3
 800a336:	1c5a      	adds	r2, r3, #1
 800a338:	2030      	movs	r0, #48	; 0x30
 800a33a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a33e:	4422      	add	r2, r4
 800a340:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a344:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a348:	3302      	adds	r3, #2
 800a34a:	e7c7      	b.n	800a2dc <_printf_common+0x58>
 800a34c:	2301      	movs	r3, #1
 800a34e:	4622      	mov	r2, r4
 800a350:	4649      	mov	r1, r9
 800a352:	4638      	mov	r0, r7
 800a354:	47c0      	blx	r8
 800a356:	3001      	adds	r0, #1
 800a358:	d0e6      	beq.n	800a328 <_printf_common+0xa4>
 800a35a:	3601      	adds	r6, #1
 800a35c:	e7d9      	b.n	800a312 <_printf_common+0x8e>
	...

0800a360 <_printf_i>:
 800a360:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a364:	7e0f      	ldrb	r7, [r1, #24]
 800a366:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a368:	2f78      	cmp	r7, #120	; 0x78
 800a36a:	4691      	mov	r9, r2
 800a36c:	4680      	mov	r8, r0
 800a36e:	460c      	mov	r4, r1
 800a370:	469a      	mov	sl, r3
 800a372:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a376:	d807      	bhi.n	800a388 <_printf_i+0x28>
 800a378:	2f62      	cmp	r7, #98	; 0x62
 800a37a:	d80a      	bhi.n	800a392 <_printf_i+0x32>
 800a37c:	2f00      	cmp	r7, #0
 800a37e:	f000 80d8 	beq.w	800a532 <_printf_i+0x1d2>
 800a382:	2f58      	cmp	r7, #88	; 0x58
 800a384:	f000 80a3 	beq.w	800a4ce <_printf_i+0x16e>
 800a388:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a38c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a390:	e03a      	b.n	800a408 <_printf_i+0xa8>
 800a392:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a396:	2b15      	cmp	r3, #21
 800a398:	d8f6      	bhi.n	800a388 <_printf_i+0x28>
 800a39a:	a101      	add	r1, pc, #4	; (adr r1, 800a3a0 <_printf_i+0x40>)
 800a39c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a3a0:	0800a3f9 	.word	0x0800a3f9
 800a3a4:	0800a40d 	.word	0x0800a40d
 800a3a8:	0800a389 	.word	0x0800a389
 800a3ac:	0800a389 	.word	0x0800a389
 800a3b0:	0800a389 	.word	0x0800a389
 800a3b4:	0800a389 	.word	0x0800a389
 800a3b8:	0800a40d 	.word	0x0800a40d
 800a3bc:	0800a389 	.word	0x0800a389
 800a3c0:	0800a389 	.word	0x0800a389
 800a3c4:	0800a389 	.word	0x0800a389
 800a3c8:	0800a389 	.word	0x0800a389
 800a3cc:	0800a519 	.word	0x0800a519
 800a3d0:	0800a43d 	.word	0x0800a43d
 800a3d4:	0800a4fb 	.word	0x0800a4fb
 800a3d8:	0800a389 	.word	0x0800a389
 800a3dc:	0800a389 	.word	0x0800a389
 800a3e0:	0800a53b 	.word	0x0800a53b
 800a3e4:	0800a389 	.word	0x0800a389
 800a3e8:	0800a43d 	.word	0x0800a43d
 800a3ec:	0800a389 	.word	0x0800a389
 800a3f0:	0800a389 	.word	0x0800a389
 800a3f4:	0800a503 	.word	0x0800a503
 800a3f8:	682b      	ldr	r3, [r5, #0]
 800a3fa:	1d1a      	adds	r2, r3, #4
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	602a      	str	r2, [r5, #0]
 800a400:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a404:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a408:	2301      	movs	r3, #1
 800a40a:	e0a3      	b.n	800a554 <_printf_i+0x1f4>
 800a40c:	6820      	ldr	r0, [r4, #0]
 800a40e:	6829      	ldr	r1, [r5, #0]
 800a410:	0606      	lsls	r6, r0, #24
 800a412:	f101 0304 	add.w	r3, r1, #4
 800a416:	d50a      	bpl.n	800a42e <_printf_i+0xce>
 800a418:	680e      	ldr	r6, [r1, #0]
 800a41a:	602b      	str	r3, [r5, #0]
 800a41c:	2e00      	cmp	r6, #0
 800a41e:	da03      	bge.n	800a428 <_printf_i+0xc8>
 800a420:	232d      	movs	r3, #45	; 0x2d
 800a422:	4276      	negs	r6, r6
 800a424:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a428:	485e      	ldr	r0, [pc, #376]	; (800a5a4 <_printf_i+0x244>)
 800a42a:	230a      	movs	r3, #10
 800a42c:	e019      	b.n	800a462 <_printf_i+0x102>
 800a42e:	680e      	ldr	r6, [r1, #0]
 800a430:	602b      	str	r3, [r5, #0]
 800a432:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a436:	bf18      	it	ne
 800a438:	b236      	sxthne	r6, r6
 800a43a:	e7ef      	b.n	800a41c <_printf_i+0xbc>
 800a43c:	682b      	ldr	r3, [r5, #0]
 800a43e:	6820      	ldr	r0, [r4, #0]
 800a440:	1d19      	adds	r1, r3, #4
 800a442:	6029      	str	r1, [r5, #0]
 800a444:	0601      	lsls	r1, r0, #24
 800a446:	d501      	bpl.n	800a44c <_printf_i+0xec>
 800a448:	681e      	ldr	r6, [r3, #0]
 800a44a:	e002      	b.n	800a452 <_printf_i+0xf2>
 800a44c:	0646      	lsls	r6, r0, #25
 800a44e:	d5fb      	bpl.n	800a448 <_printf_i+0xe8>
 800a450:	881e      	ldrh	r6, [r3, #0]
 800a452:	4854      	ldr	r0, [pc, #336]	; (800a5a4 <_printf_i+0x244>)
 800a454:	2f6f      	cmp	r7, #111	; 0x6f
 800a456:	bf0c      	ite	eq
 800a458:	2308      	moveq	r3, #8
 800a45a:	230a      	movne	r3, #10
 800a45c:	2100      	movs	r1, #0
 800a45e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a462:	6865      	ldr	r5, [r4, #4]
 800a464:	60a5      	str	r5, [r4, #8]
 800a466:	2d00      	cmp	r5, #0
 800a468:	bfa2      	ittt	ge
 800a46a:	6821      	ldrge	r1, [r4, #0]
 800a46c:	f021 0104 	bicge.w	r1, r1, #4
 800a470:	6021      	strge	r1, [r4, #0]
 800a472:	b90e      	cbnz	r6, 800a478 <_printf_i+0x118>
 800a474:	2d00      	cmp	r5, #0
 800a476:	d04d      	beq.n	800a514 <_printf_i+0x1b4>
 800a478:	4615      	mov	r5, r2
 800a47a:	fbb6 f1f3 	udiv	r1, r6, r3
 800a47e:	fb03 6711 	mls	r7, r3, r1, r6
 800a482:	5dc7      	ldrb	r7, [r0, r7]
 800a484:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a488:	4637      	mov	r7, r6
 800a48a:	42bb      	cmp	r3, r7
 800a48c:	460e      	mov	r6, r1
 800a48e:	d9f4      	bls.n	800a47a <_printf_i+0x11a>
 800a490:	2b08      	cmp	r3, #8
 800a492:	d10b      	bne.n	800a4ac <_printf_i+0x14c>
 800a494:	6823      	ldr	r3, [r4, #0]
 800a496:	07de      	lsls	r6, r3, #31
 800a498:	d508      	bpl.n	800a4ac <_printf_i+0x14c>
 800a49a:	6923      	ldr	r3, [r4, #16]
 800a49c:	6861      	ldr	r1, [r4, #4]
 800a49e:	4299      	cmp	r1, r3
 800a4a0:	bfde      	ittt	le
 800a4a2:	2330      	movle	r3, #48	; 0x30
 800a4a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a4a8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a4ac:	1b52      	subs	r2, r2, r5
 800a4ae:	6122      	str	r2, [r4, #16]
 800a4b0:	f8cd a000 	str.w	sl, [sp]
 800a4b4:	464b      	mov	r3, r9
 800a4b6:	aa03      	add	r2, sp, #12
 800a4b8:	4621      	mov	r1, r4
 800a4ba:	4640      	mov	r0, r8
 800a4bc:	f7ff fee2 	bl	800a284 <_printf_common>
 800a4c0:	3001      	adds	r0, #1
 800a4c2:	d14c      	bne.n	800a55e <_printf_i+0x1fe>
 800a4c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a4c8:	b004      	add	sp, #16
 800a4ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4ce:	4835      	ldr	r0, [pc, #212]	; (800a5a4 <_printf_i+0x244>)
 800a4d0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a4d4:	6829      	ldr	r1, [r5, #0]
 800a4d6:	6823      	ldr	r3, [r4, #0]
 800a4d8:	f851 6b04 	ldr.w	r6, [r1], #4
 800a4dc:	6029      	str	r1, [r5, #0]
 800a4de:	061d      	lsls	r5, r3, #24
 800a4e0:	d514      	bpl.n	800a50c <_printf_i+0x1ac>
 800a4e2:	07df      	lsls	r7, r3, #31
 800a4e4:	bf44      	itt	mi
 800a4e6:	f043 0320 	orrmi.w	r3, r3, #32
 800a4ea:	6023      	strmi	r3, [r4, #0]
 800a4ec:	b91e      	cbnz	r6, 800a4f6 <_printf_i+0x196>
 800a4ee:	6823      	ldr	r3, [r4, #0]
 800a4f0:	f023 0320 	bic.w	r3, r3, #32
 800a4f4:	6023      	str	r3, [r4, #0]
 800a4f6:	2310      	movs	r3, #16
 800a4f8:	e7b0      	b.n	800a45c <_printf_i+0xfc>
 800a4fa:	6823      	ldr	r3, [r4, #0]
 800a4fc:	f043 0320 	orr.w	r3, r3, #32
 800a500:	6023      	str	r3, [r4, #0]
 800a502:	2378      	movs	r3, #120	; 0x78
 800a504:	4828      	ldr	r0, [pc, #160]	; (800a5a8 <_printf_i+0x248>)
 800a506:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a50a:	e7e3      	b.n	800a4d4 <_printf_i+0x174>
 800a50c:	0659      	lsls	r1, r3, #25
 800a50e:	bf48      	it	mi
 800a510:	b2b6      	uxthmi	r6, r6
 800a512:	e7e6      	b.n	800a4e2 <_printf_i+0x182>
 800a514:	4615      	mov	r5, r2
 800a516:	e7bb      	b.n	800a490 <_printf_i+0x130>
 800a518:	682b      	ldr	r3, [r5, #0]
 800a51a:	6826      	ldr	r6, [r4, #0]
 800a51c:	6961      	ldr	r1, [r4, #20]
 800a51e:	1d18      	adds	r0, r3, #4
 800a520:	6028      	str	r0, [r5, #0]
 800a522:	0635      	lsls	r5, r6, #24
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	d501      	bpl.n	800a52c <_printf_i+0x1cc>
 800a528:	6019      	str	r1, [r3, #0]
 800a52a:	e002      	b.n	800a532 <_printf_i+0x1d2>
 800a52c:	0670      	lsls	r0, r6, #25
 800a52e:	d5fb      	bpl.n	800a528 <_printf_i+0x1c8>
 800a530:	8019      	strh	r1, [r3, #0]
 800a532:	2300      	movs	r3, #0
 800a534:	6123      	str	r3, [r4, #16]
 800a536:	4615      	mov	r5, r2
 800a538:	e7ba      	b.n	800a4b0 <_printf_i+0x150>
 800a53a:	682b      	ldr	r3, [r5, #0]
 800a53c:	1d1a      	adds	r2, r3, #4
 800a53e:	602a      	str	r2, [r5, #0]
 800a540:	681d      	ldr	r5, [r3, #0]
 800a542:	6862      	ldr	r2, [r4, #4]
 800a544:	2100      	movs	r1, #0
 800a546:	4628      	mov	r0, r5
 800a548:	f7f5 fe42 	bl	80001d0 <memchr>
 800a54c:	b108      	cbz	r0, 800a552 <_printf_i+0x1f2>
 800a54e:	1b40      	subs	r0, r0, r5
 800a550:	6060      	str	r0, [r4, #4]
 800a552:	6863      	ldr	r3, [r4, #4]
 800a554:	6123      	str	r3, [r4, #16]
 800a556:	2300      	movs	r3, #0
 800a558:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a55c:	e7a8      	b.n	800a4b0 <_printf_i+0x150>
 800a55e:	6923      	ldr	r3, [r4, #16]
 800a560:	462a      	mov	r2, r5
 800a562:	4649      	mov	r1, r9
 800a564:	4640      	mov	r0, r8
 800a566:	47d0      	blx	sl
 800a568:	3001      	adds	r0, #1
 800a56a:	d0ab      	beq.n	800a4c4 <_printf_i+0x164>
 800a56c:	6823      	ldr	r3, [r4, #0]
 800a56e:	079b      	lsls	r3, r3, #30
 800a570:	d413      	bmi.n	800a59a <_printf_i+0x23a>
 800a572:	68e0      	ldr	r0, [r4, #12]
 800a574:	9b03      	ldr	r3, [sp, #12]
 800a576:	4298      	cmp	r0, r3
 800a578:	bfb8      	it	lt
 800a57a:	4618      	movlt	r0, r3
 800a57c:	e7a4      	b.n	800a4c8 <_printf_i+0x168>
 800a57e:	2301      	movs	r3, #1
 800a580:	4632      	mov	r2, r6
 800a582:	4649      	mov	r1, r9
 800a584:	4640      	mov	r0, r8
 800a586:	47d0      	blx	sl
 800a588:	3001      	adds	r0, #1
 800a58a:	d09b      	beq.n	800a4c4 <_printf_i+0x164>
 800a58c:	3501      	adds	r5, #1
 800a58e:	68e3      	ldr	r3, [r4, #12]
 800a590:	9903      	ldr	r1, [sp, #12]
 800a592:	1a5b      	subs	r3, r3, r1
 800a594:	42ab      	cmp	r3, r5
 800a596:	dcf2      	bgt.n	800a57e <_printf_i+0x21e>
 800a598:	e7eb      	b.n	800a572 <_printf_i+0x212>
 800a59a:	2500      	movs	r5, #0
 800a59c:	f104 0619 	add.w	r6, r4, #25
 800a5a0:	e7f5      	b.n	800a58e <_printf_i+0x22e>
 800a5a2:	bf00      	nop
 800a5a4:	0800af0b 	.word	0x0800af0b
 800a5a8:	0800af1c 	.word	0x0800af1c

0800a5ac <__swbuf_r>:
 800a5ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5ae:	460e      	mov	r6, r1
 800a5b0:	4614      	mov	r4, r2
 800a5b2:	4605      	mov	r5, r0
 800a5b4:	b118      	cbz	r0, 800a5be <__swbuf_r+0x12>
 800a5b6:	6983      	ldr	r3, [r0, #24]
 800a5b8:	b90b      	cbnz	r3, 800a5be <__swbuf_r+0x12>
 800a5ba:	f000 f9d9 	bl	800a970 <__sinit>
 800a5be:	4b21      	ldr	r3, [pc, #132]	; (800a644 <__swbuf_r+0x98>)
 800a5c0:	429c      	cmp	r4, r3
 800a5c2:	d12b      	bne.n	800a61c <__swbuf_r+0x70>
 800a5c4:	686c      	ldr	r4, [r5, #4]
 800a5c6:	69a3      	ldr	r3, [r4, #24]
 800a5c8:	60a3      	str	r3, [r4, #8]
 800a5ca:	89a3      	ldrh	r3, [r4, #12]
 800a5cc:	071a      	lsls	r2, r3, #28
 800a5ce:	d52f      	bpl.n	800a630 <__swbuf_r+0x84>
 800a5d0:	6923      	ldr	r3, [r4, #16]
 800a5d2:	b36b      	cbz	r3, 800a630 <__swbuf_r+0x84>
 800a5d4:	6923      	ldr	r3, [r4, #16]
 800a5d6:	6820      	ldr	r0, [r4, #0]
 800a5d8:	1ac0      	subs	r0, r0, r3
 800a5da:	6963      	ldr	r3, [r4, #20]
 800a5dc:	b2f6      	uxtb	r6, r6
 800a5de:	4283      	cmp	r3, r0
 800a5e0:	4637      	mov	r7, r6
 800a5e2:	dc04      	bgt.n	800a5ee <__swbuf_r+0x42>
 800a5e4:	4621      	mov	r1, r4
 800a5e6:	4628      	mov	r0, r5
 800a5e8:	f000 f92e 	bl	800a848 <_fflush_r>
 800a5ec:	bb30      	cbnz	r0, 800a63c <__swbuf_r+0x90>
 800a5ee:	68a3      	ldr	r3, [r4, #8]
 800a5f0:	3b01      	subs	r3, #1
 800a5f2:	60a3      	str	r3, [r4, #8]
 800a5f4:	6823      	ldr	r3, [r4, #0]
 800a5f6:	1c5a      	adds	r2, r3, #1
 800a5f8:	6022      	str	r2, [r4, #0]
 800a5fa:	701e      	strb	r6, [r3, #0]
 800a5fc:	6963      	ldr	r3, [r4, #20]
 800a5fe:	3001      	adds	r0, #1
 800a600:	4283      	cmp	r3, r0
 800a602:	d004      	beq.n	800a60e <__swbuf_r+0x62>
 800a604:	89a3      	ldrh	r3, [r4, #12]
 800a606:	07db      	lsls	r3, r3, #31
 800a608:	d506      	bpl.n	800a618 <__swbuf_r+0x6c>
 800a60a:	2e0a      	cmp	r6, #10
 800a60c:	d104      	bne.n	800a618 <__swbuf_r+0x6c>
 800a60e:	4621      	mov	r1, r4
 800a610:	4628      	mov	r0, r5
 800a612:	f000 f919 	bl	800a848 <_fflush_r>
 800a616:	b988      	cbnz	r0, 800a63c <__swbuf_r+0x90>
 800a618:	4638      	mov	r0, r7
 800a61a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a61c:	4b0a      	ldr	r3, [pc, #40]	; (800a648 <__swbuf_r+0x9c>)
 800a61e:	429c      	cmp	r4, r3
 800a620:	d101      	bne.n	800a626 <__swbuf_r+0x7a>
 800a622:	68ac      	ldr	r4, [r5, #8]
 800a624:	e7cf      	b.n	800a5c6 <__swbuf_r+0x1a>
 800a626:	4b09      	ldr	r3, [pc, #36]	; (800a64c <__swbuf_r+0xa0>)
 800a628:	429c      	cmp	r4, r3
 800a62a:	bf08      	it	eq
 800a62c:	68ec      	ldreq	r4, [r5, #12]
 800a62e:	e7ca      	b.n	800a5c6 <__swbuf_r+0x1a>
 800a630:	4621      	mov	r1, r4
 800a632:	4628      	mov	r0, r5
 800a634:	f000 f80c 	bl	800a650 <__swsetup_r>
 800a638:	2800      	cmp	r0, #0
 800a63a:	d0cb      	beq.n	800a5d4 <__swbuf_r+0x28>
 800a63c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a640:	e7ea      	b.n	800a618 <__swbuf_r+0x6c>
 800a642:	bf00      	nop
 800a644:	0800af50 	.word	0x0800af50
 800a648:	0800af70 	.word	0x0800af70
 800a64c:	0800af30 	.word	0x0800af30

0800a650 <__swsetup_r>:
 800a650:	4b32      	ldr	r3, [pc, #200]	; (800a71c <__swsetup_r+0xcc>)
 800a652:	b570      	push	{r4, r5, r6, lr}
 800a654:	681d      	ldr	r5, [r3, #0]
 800a656:	4606      	mov	r6, r0
 800a658:	460c      	mov	r4, r1
 800a65a:	b125      	cbz	r5, 800a666 <__swsetup_r+0x16>
 800a65c:	69ab      	ldr	r3, [r5, #24]
 800a65e:	b913      	cbnz	r3, 800a666 <__swsetup_r+0x16>
 800a660:	4628      	mov	r0, r5
 800a662:	f000 f985 	bl	800a970 <__sinit>
 800a666:	4b2e      	ldr	r3, [pc, #184]	; (800a720 <__swsetup_r+0xd0>)
 800a668:	429c      	cmp	r4, r3
 800a66a:	d10f      	bne.n	800a68c <__swsetup_r+0x3c>
 800a66c:	686c      	ldr	r4, [r5, #4]
 800a66e:	89a3      	ldrh	r3, [r4, #12]
 800a670:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a674:	0719      	lsls	r1, r3, #28
 800a676:	d42c      	bmi.n	800a6d2 <__swsetup_r+0x82>
 800a678:	06dd      	lsls	r5, r3, #27
 800a67a:	d411      	bmi.n	800a6a0 <__swsetup_r+0x50>
 800a67c:	2309      	movs	r3, #9
 800a67e:	6033      	str	r3, [r6, #0]
 800a680:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a684:	81a3      	strh	r3, [r4, #12]
 800a686:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a68a:	e03e      	b.n	800a70a <__swsetup_r+0xba>
 800a68c:	4b25      	ldr	r3, [pc, #148]	; (800a724 <__swsetup_r+0xd4>)
 800a68e:	429c      	cmp	r4, r3
 800a690:	d101      	bne.n	800a696 <__swsetup_r+0x46>
 800a692:	68ac      	ldr	r4, [r5, #8]
 800a694:	e7eb      	b.n	800a66e <__swsetup_r+0x1e>
 800a696:	4b24      	ldr	r3, [pc, #144]	; (800a728 <__swsetup_r+0xd8>)
 800a698:	429c      	cmp	r4, r3
 800a69a:	bf08      	it	eq
 800a69c:	68ec      	ldreq	r4, [r5, #12]
 800a69e:	e7e6      	b.n	800a66e <__swsetup_r+0x1e>
 800a6a0:	0758      	lsls	r0, r3, #29
 800a6a2:	d512      	bpl.n	800a6ca <__swsetup_r+0x7a>
 800a6a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a6a6:	b141      	cbz	r1, 800a6ba <__swsetup_r+0x6a>
 800a6a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a6ac:	4299      	cmp	r1, r3
 800a6ae:	d002      	beq.n	800a6b6 <__swsetup_r+0x66>
 800a6b0:	4630      	mov	r0, r6
 800a6b2:	f7ff fac9 	bl	8009c48 <_free_r>
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	6363      	str	r3, [r4, #52]	; 0x34
 800a6ba:	89a3      	ldrh	r3, [r4, #12]
 800a6bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a6c0:	81a3      	strh	r3, [r4, #12]
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	6063      	str	r3, [r4, #4]
 800a6c6:	6923      	ldr	r3, [r4, #16]
 800a6c8:	6023      	str	r3, [r4, #0]
 800a6ca:	89a3      	ldrh	r3, [r4, #12]
 800a6cc:	f043 0308 	orr.w	r3, r3, #8
 800a6d0:	81a3      	strh	r3, [r4, #12]
 800a6d2:	6923      	ldr	r3, [r4, #16]
 800a6d4:	b94b      	cbnz	r3, 800a6ea <__swsetup_r+0x9a>
 800a6d6:	89a3      	ldrh	r3, [r4, #12]
 800a6d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a6dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a6e0:	d003      	beq.n	800a6ea <__swsetup_r+0x9a>
 800a6e2:	4621      	mov	r1, r4
 800a6e4:	4630      	mov	r0, r6
 800a6e6:	f000 fa09 	bl	800aafc <__smakebuf_r>
 800a6ea:	89a0      	ldrh	r0, [r4, #12]
 800a6ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a6f0:	f010 0301 	ands.w	r3, r0, #1
 800a6f4:	d00a      	beq.n	800a70c <__swsetup_r+0xbc>
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	60a3      	str	r3, [r4, #8]
 800a6fa:	6963      	ldr	r3, [r4, #20]
 800a6fc:	425b      	negs	r3, r3
 800a6fe:	61a3      	str	r3, [r4, #24]
 800a700:	6923      	ldr	r3, [r4, #16]
 800a702:	b943      	cbnz	r3, 800a716 <__swsetup_r+0xc6>
 800a704:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a708:	d1ba      	bne.n	800a680 <__swsetup_r+0x30>
 800a70a:	bd70      	pop	{r4, r5, r6, pc}
 800a70c:	0781      	lsls	r1, r0, #30
 800a70e:	bf58      	it	pl
 800a710:	6963      	ldrpl	r3, [r4, #20]
 800a712:	60a3      	str	r3, [r4, #8]
 800a714:	e7f4      	b.n	800a700 <__swsetup_r+0xb0>
 800a716:	2000      	movs	r0, #0
 800a718:	e7f7      	b.n	800a70a <__swsetup_r+0xba>
 800a71a:	bf00      	nop
 800a71c:	2000001c 	.word	0x2000001c
 800a720:	0800af50 	.word	0x0800af50
 800a724:	0800af70 	.word	0x0800af70
 800a728:	0800af30 	.word	0x0800af30

0800a72c <abort>:
 800a72c:	b508      	push	{r3, lr}
 800a72e:	2006      	movs	r0, #6
 800a730:	f000 fa4c 	bl	800abcc <raise>
 800a734:	2001      	movs	r0, #1
 800a736:	f7ff f955 	bl	80099e4 <_exit>
	...

0800a73c <__sflush_r>:
 800a73c:	898a      	ldrh	r2, [r1, #12]
 800a73e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a742:	4605      	mov	r5, r0
 800a744:	0710      	lsls	r0, r2, #28
 800a746:	460c      	mov	r4, r1
 800a748:	d458      	bmi.n	800a7fc <__sflush_r+0xc0>
 800a74a:	684b      	ldr	r3, [r1, #4]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	dc05      	bgt.n	800a75c <__sflush_r+0x20>
 800a750:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a752:	2b00      	cmp	r3, #0
 800a754:	dc02      	bgt.n	800a75c <__sflush_r+0x20>
 800a756:	2000      	movs	r0, #0
 800a758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a75c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a75e:	2e00      	cmp	r6, #0
 800a760:	d0f9      	beq.n	800a756 <__sflush_r+0x1a>
 800a762:	2300      	movs	r3, #0
 800a764:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a768:	682f      	ldr	r7, [r5, #0]
 800a76a:	602b      	str	r3, [r5, #0]
 800a76c:	d032      	beq.n	800a7d4 <__sflush_r+0x98>
 800a76e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a770:	89a3      	ldrh	r3, [r4, #12]
 800a772:	075a      	lsls	r2, r3, #29
 800a774:	d505      	bpl.n	800a782 <__sflush_r+0x46>
 800a776:	6863      	ldr	r3, [r4, #4]
 800a778:	1ac0      	subs	r0, r0, r3
 800a77a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a77c:	b10b      	cbz	r3, 800a782 <__sflush_r+0x46>
 800a77e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a780:	1ac0      	subs	r0, r0, r3
 800a782:	2300      	movs	r3, #0
 800a784:	4602      	mov	r2, r0
 800a786:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a788:	6a21      	ldr	r1, [r4, #32]
 800a78a:	4628      	mov	r0, r5
 800a78c:	47b0      	blx	r6
 800a78e:	1c43      	adds	r3, r0, #1
 800a790:	89a3      	ldrh	r3, [r4, #12]
 800a792:	d106      	bne.n	800a7a2 <__sflush_r+0x66>
 800a794:	6829      	ldr	r1, [r5, #0]
 800a796:	291d      	cmp	r1, #29
 800a798:	d82c      	bhi.n	800a7f4 <__sflush_r+0xb8>
 800a79a:	4a2a      	ldr	r2, [pc, #168]	; (800a844 <__sflush_r+0x108>)
 800a79c:	40ca      	lsrs	r2, r1
 800a79e:	07d6      	lsls	r6, r2, #31
 800a7a0:	d528      	bpl.n	800a7f4 <__sflush_r+0xb8>
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	6062      	str	r2, [r4, #4]
 800a7a6:	04d9      	lsls	r1, r3, #19
 800a7a8:	6922      	ldr	r2, [r4, #16]
 800a7aa:	6022      	str	r2, [r4, #0]
 800a7ac:	d504      	bpl.n	800a7b8 <__sflush_r+0x7c>
 800a7ae:	1c42      	adds	r2, r0, #1
 800a7b0:	d101      	bne.n	800a7b6 <__sflush_r+0x7a>
 800a7b2:	682b      	ldr	r3, [r5, #0]
 800a7b4:	b903      	cbnz	r3, 800a7b8 <__sflush_r+0x7c>
 800a7b6:	6560      	str	r0, [r4, #84]	; 0x54
 800a7b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a7ba:	602f      	str	r7, [r5, #0]
 800a7bc:	2900      	cmp	r1, #0
 800a7be:	d0ca      	beq.n	800a756 <__sflush_r+0x1a>
 800a7c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a7c4:	4299      	cmp	r1, r3
 800a7c6:	d002      	beq.n	800a7ce <__sflush_r+0x92>
 800a7c8:	4628      	mov	r0, r5
 800a7ca:	f7ff fa3d 	bl	8009c48 <_free_r>
 800a7ce:	2000      	movs	r0, #0
 800a7d0:	6360      	str	r0, [r4, #52]	; 0x34
 800a7d2:	e7c1      	b.n	800a758 <__sflush_r+0x1c>
 800a7d4:	6a21      	ldr	r1, [r4, #32]
 800a7d6:	2301      	movs	r3, #1
 800a7d8:	4628      	mov	r0, r5
 800a7da:	47b0      	blx	r6
 800a7dc:	1c41      	adds	r1, r0, #1
 800a7de:	d1c7      	bne.n	800a770 <__sflush_r+0x34>
 800a7e0:	682b      	ldr	r3, [r5, #0]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d0c4      	beq.n	800a770 <__sflush_r+0x34>
 800a7e6:	2b1d      	cmp	r3, #29
 800a7e8:	d001      	beq.n	800a7ee <__sflush_r+0xb2>
 800a7ea:	2b16      	cmp	r3, #22
 800a7ec:	d101      	bne.n	800a7f2 <__sflush_r+0xb6>
 800a7ee:	602f      	str	r7, [r5, #0]
 800a7f0:	e7b1      	b.n	800a756 <__sflush_r+0x1a>
 800a7f2:	89a3      	ldrh	r3, [r4, #12]
 800a7f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7f8:	81a3      	strh	r3, [r4, #12]
 800a7fa:	e7ad      	b.n	800a758 <__sflush_r+0x1c>
 800a7fc:	690f      	ldr	r7, [r1, #16]
 800a7fe:	2f00      	cmp	r7, #0
 800a800:	d0a9      	beq.n	800a756 <__sflush_r+0x1a>
 800a802:	0793      	lsls	r3, r2, #30
 800a804:	680e      	ldr	r6, [r1, #0]
 800a806:	bf08      	it	eq
 800a808:	694b      	ldreq	r3, [r1, #20]
 800a80a:	600f      	str	r7, [r1, #0]
 800a80c:	bf18      	it	ne
 800a80e:	2300      	movne	r3, #0
 800a810:	eba6 0807 	sub.w	r8, r6, r7
 800a814:	608b      	str	r3, [r1, #8]
 800a816:	f1b8 0f00 	cmp.w	r8, #0
 800a81a:	dd9c      	ble.n	800a756 <__sflush_r+0x1a>
 800a81c:	6a21      	ldr	r1, [r4, #32]
 800a81e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a820:	4643      	mov	r3, r8
 800a822:	463a      	mov	r2, r7
 800a824:	4628      	mov	r0, r5
 800a826:	47b0      	blx	r6
 800a828:	2800      	cmp	r0, #0
 800a82a:	dc06      	bgt.n	800a83a <__sflush_r+0xfe>
 800a82c:	89a3      	ldrh	r3, [r4, #12]
 800a82e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a832:	81a3      	strh	r3, [r4, #12]
 800a834:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a838:	e78e      	b.n	800a758 <__sflush_r+0x1c>
 800a83a:	4407      	add	r7, r0
 800a83c:	eba8 0800 	sub.w	r8, r8, r0
 800a840:	e7e9      	b.n	800a816 <__sflush_r+0xda>
 800a842:	bf00      	nop
 800a844:	20400001 	.word	0x20400001

0800a848 <_fflush_r>:
 800a848:	b538      	push	{r3, r4, r5, lr}
 800a84a:	690b      	ldr	r3, [r1, #16]
 800a84c:	4605      	mov	r5, r0
 800a84e:	460c      	mov	r4, r1
 800a850:	b913      	cbnz	r3, 800a858 <_fflush_r+0x10>
 800a852:	2500      	movs	r5, #0
 800a854:	4628      	mov	r0, r5
 800a856:	bd38      	pop	{r3, r4, r5, pc}
 800a858:	b118      	cbz	r0, 800a862 <_fflush_r+0x1a>
 800a85a:	6983      	ldr	r3, [r0, #24]
 800a85c:	b90b      	cbnz	r3, 800a862 <_fflush_r+0x1a>
 800a85e:	f000 f887 	bl	800a970 <__sinit>
 800a862:	4b14      	ldr	r3, [pc, #80]	; (800a8b4 <_fflush_r+0x6c>)
 800a864:	429c      	cmp	r4, r3
 800a866:	d11b      	bne.n	800a8a0 <_fflush_r+0x58>
 800a868:	686c      	ldr	r4, [r5, #4]
 800a86a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d0ef      	beq.n	800a852 <_fflush_r+0xa>
 800a872:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a874:	07d0      	lsls	r0, r2, #31
 800a876:	d404      	bmi.n	800a882 <_fflush_r+0x3a>
 800a878:	0599      	lsls	r1, r3, #22
 800a87a:	d402      	bmi.n	800a882 <_fflush_r+0x3a>
 800a87c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a87e:	f000 f915 	bl	800aaac <__retarget_lock_acquire_recursive>
 800a882:	4628      	mov	r0, r5
 800a884:	4621      	mov	r1, r4
 800a886:	f7ff ff59 	bl	800a73c <__sflush_r>
 800a88a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a88c:	07da      	lsls	r2, r3, #31
 800a88e:	4605      	mov	r5, r0
 800a890:	d4e0      	bmi.n	800a854 <_fflush_r+0xc>
 800a892:	89a3      	ldrh	r3, [r4, #12]
 800a894:	059b      	lsls	r3, r3, #22
 800a896:	d4dd      	bmi.n	800a854 <_fflush_r+0xc>
 800a898:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a89a:	f000 f908 	bl	800aaae <__retarget_lock_release_recursive>
 800a89e:	e7d9      	b.n	800a854 <_fflush_r+0xc>
 800a8a0:	4b05      	ldr	r3, [pc, #20]	; (800a8b8 <_fflush_r+0x70>)
 800a8a2:	429c      	cmp	r4, r3
 800a8a4:	d101      	bne.n	800a8aa <_fflush_r+0x62>
 800a8a6:	68ac      	ldr	r4, [r5, #8]
 800a8a8:	e7df      	b.n	800a86a <_fflush_r+0x22>
 800a8aa:	4b04      	ldr	r3, [pc, #16]	; (800a8bc <_fflush_r+0x74>)
 800a8ac:	429c      	cmp	r4, r3
 800a8ae:	bf08      	it	eq
 800a8b0:	68ec      	ldreq	r4, [r5, #12]
 800a8b2:	e7da      	b.n	800a86a <_fflush_r+0x22>
 800a8b4:	0800af50 	.word	0x0800af50
 800a8b8:	0800af70 	.word	0x0800af70
 800a8bc:	0800af30 	.word	0x0800af30

0800a8c0 <std>:
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	b510      	push	{r4, lr}
 800a8c4:	4604      	mov	r4, r0
 800a8c6:	e9c0 3300 	strd	r3, r3, [r0]
 800a8ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a8ce:	6083      	str	r3, [r0, #8]
 800a8d0:	8181      	strh	r1, [r0, #12]
 800a8d2:	6643      	str	r3, [r0, #100]	; 0x64
 800a8d4:	81c2      	strh	r2, [r0, #14]
 800a8d6:	6183      	str	r3, [r0, #24]
 800a8d8:	4619      	mov	r1, r3
 800a8da:	2208      	movs	r2, #8
 800a8dc:	305c      	adds	r0, #92	; 0x5c
 800a8de:	f7ff f9ab 	bl	8009c38 <memset>
 800a8e2:	4b05      	ldr	r3, [pc, #20]	; (800a8f8 <std+0x38>)
 800a8e4:	6263      	str	r3, [r4, #36]	; 0x24
 800a8e6:	4b05      	ldr	r3, [pc, #20]	; (800a8fc <std+0x3c>)
 800a8e8:	62a3      	str	r3, [r4, #40]	; 0x28
 800a8ea:	4b05      	ldr	r3, [pc, #20]	; (800a900 <std+0x40>)
 800a8ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a8ee:	4b05      	ldr	r3, [pc, #20]	; (800a904 <std+0x44>)
 800a8f0:	6224      	str	r4, [r4, #32]
 800a8f2:	6323      	str	r3, [r4, #48]	; 0x30
 800a8f4:	bd10      	pop	{r4, pc}
 800a8f6:	bf00      	nop
 800a8f8:	0800ac05 	.word	0x0800ac05
 800a8fc:	0800ac27 	.word	0x0800ac27
 800a900:	0800ac5f 	.word	0x0800ac5f
 800a904:	0800ac83 	.word	0x0800ac83

0800a908 <_cleanup_r>:
 800a908:	4901      	ldr	r1, [pc, #4]	; (800a910 <_cleanup_r+0x8>)
 800a90a:	f000 b8af 	b.w	800aa6c <_fwalk_reent>
 800a90e:	bf00      	nop
 800a910:	0800a849 	.word	0x0800a849

0800a914 <__sfmoreglue>:
 800a914:	b570      	push	{r4, r5, r6, lr}
 800a916:	2268      	movs	r2, #104	; 0x68
 800a918:	1e4d      	subs	r5, r1, #1
 800a91a:	4355      	muls	r5, r2
 800a91c:	460e      	mov	r6, r1
 800a91e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a922:	f7ff f9fd 	bl	8009d20 <_malloc_r>
 800a926:	4604      	mov	r4, r0
 800a928:	b140      	cbz	r0, 800a93c <__sfmoreglue+0x28>
 800a92a:	2100      	movs	r1, #0
 800a92c:	e9c0 1600 	strd	r1, r6, [r0]
 800a930:	300c      	adds	r0, #12
 800a932:	60a0      	str	r0, [r4, #8]
 800a934:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a938:	f7ff f97e 	bl	8009c38 <memset>
 800a93c:	4620      	mov	r0, r4
 800a93e:	bd70      	pop	{r4, r5, r6, pc}

0800a940 <__sfp_lock_acquire>:
 800a940:	4801      	ldr	r0, [pc, #4]	; (800a948 <__sfp_lock_acquire+0x8>)
 800a942:	f000 b8b3 	b.w	800aaac <__retarget_lock_acquire_recursive>
 800a946:	bf00      	nop
 800a948:	2000300d 	.word	0x2000300d

0800a94c <__sfp_lock_release>:
 800a94c:	4801      	ldr	r0, [pc, #4]	; (800a954 <__sfp_lock_release+0x8>)
 800a94e:	f000 b8ae 	b.w	800aaae <__retarget_lock_release_recursive>
 800a952:	bf00      	nop
 800a954:	2000300d 	.word	0x2000300d

0800a958 <__sinit_lock_acquire>:
 800a958:	4801      	ldr	r0, [pc, #4]	; (800a960 <__sinit_lock_acquire+0x8>)
 800a95a:	f000 b8a7 	b.w	800aaac <__retarget_lock_acquire_recursive>
 800a95e:	bf00      	nop
 800a960:	2000300e 	.word	0x2000300e

0800a964 <__sinit_lock_release>:
 800a964:	4801      	ldr	r0, [pc, #4]	; (800a96c <__sinit_lock_release+0x8>)
 800a966:	f000 b8a2 	b.w	800aaae <__retarget_lock_release_recursive>
 800a96a:	bf00      	nop
 800a96c:	2000300e 	.word	0x2000300e

0800a970 <__sinit>:
 800a970:	b510      	push	{r4, lr}
 800a972:	4604      	mov	r4, r0
 800a974:	f7ff fff0 	bl	800a958 <__sinit_lock_acquire>
 800a978:	69a3      	ldr	r3, [r4, #24]
 800a97a:	b11b      	cbz	r3, 800a984 <__sinit+0x14>
 800a97c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a980:	f7ff bff0 	b.w	800a964 <__sinit_lock_release>
 800a984:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a988:	6523      	str	r3, [r4, #80]	; 0x50
 800a98a:	4b13      	ldr	r3, [pc, #76]	; (800a9d8 <__sinit+0x68>)
 800a98c:	4a13      	ldr	r2, [pc, #76]	; (800a9dc <__sinit+0x6c>)
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	62a2      	str	r2, [r4, #40]	; 0x28
 800a992:	42a3      	cmp	r3, r4
 800a994:	bf04      	itt	eq
 800a996:	2301      	moveq	r3, #1
 800a998:	61a3      	streq	r3, [r4, #24]
 800a99a:	4620      	mov	r0, r4
 800a99c:	f000 f820 	bl	800a9e0 <__sfp>
 800a9a0:	6060      	str	r0, [r4, #4]
 800a9a2:	4620      	mov	r0, r4
 800a9a4:	f000 f81c 	bl	800a9e0 <__sfp>
 800a9a8:	60a0      	str	r0, [r4, #8]
 800a9aa:	4620      	mov	r0, r4
 800a9ac:	f000 f818 	bl	800a9e0 <__sfp>
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	60e0      	str	r0, [r4, #12]
 800a9b4:	2104      	movs	r1, #4
 800a9b6:	6860      	ldr	r0, [r4, #4]
 800a9b8:	f7ff ff82 	bl	800a8c0 <std>
 800a9bc:	68a0      	ldr	r0, [r4, #8]
 800a9be:	2201      	movs	r2, #1
 800a9c0:	2109      	movs	r1, #9
 800a9c2:	f7ff ff7d 	bl	800a8c0 <std>
 800a9c6:	68e0      	ldr	r0, [r4, #12]
 800a9c8:	2202      	movs	r2, #2
 800a9ca:	2112      	movs	r1, #18
 800a9cc:	f7ff ff78 	bl	800a8c0 <std>
 800a9d0:	2301      	movs	r3, #1
 800a9d2:	61a3      	str	r3, [r4, #24]
 800a9d4:	e7d2      	b.n	800a97c <__sinit+0xc>
 800a9d6:	bf00      	nop
 800a9d8:	0800ae48 	.word	0x0800ae48
 800a9dc:	0800a909 	.word	0x0800a909

0800a9e0 <__sfp>:
 800a9e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9e2:	4607      	mov	r7, r0
 800a9e4:	f7ff ffac 	bl	800a940 <__sfp_lock_acquire>
 800a9e8:	4b1e      	ldr	r3, [pc, #120]	; (800aa64 <__sfp+0x84>)
 800a9ea:	681e      	ldr	r6, [r3, #0]
 800a9ec:	69b3      	ldr	r3, [r6, #24]
 800a9ee:	b913      	cbnz	r3, 800a9f6 <__sfp+0x16>
 800a9f0:	4630      	mov	r0, r6
 800a9f2:	f7ff ffbd 	bl	800a970 <__sinit>
 800a9f6:	3648      	adds	r6, #72	; 0x48
 800a9f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a9fc:	3b01      	subs	r3, #1
 800a9fe:	d503      	bpl.n	800aa08 <__sfp+0x28>
 800aa00:	6833      	ldr	r3, [r6, #0]
 800aa02:	b30b      	cbz	r3, 800aa48 <__sfp+0x68>
 800aa04:	6836      	ldr	r6, [r6, #0]
 800aa06:	e7f7      	b.n	800a9f8 <__sfp+0x18>
 800aa08:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800aa0c:	b9d5      	cbnz	r5, 800aa44 <__sfp+0x64>
 800aa0e:	4b16      	ldr	r3, [pc, #88]	; (800aa68 <__sfp+0x88>)
 800aa10:	60e3      	str	r3, [r4, #12]
 800aa12:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800aa16:	6665      	str	r5, [r4, #100]	; 0x64
 800aa18:	f000 f847 	bl	800aaaa <__retarget_lock_init_recursive>
 800aa1c:	f7ff ff96 	bl	800a94c <__sfp_lock_release>
 800aa20:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800aa24:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800aa28:	6025      	str	r5, [r4, #0]
 800aa2a:	61a5      	str	r5, [r4, #24]
 800aa2c:	2208      	movs	r2, #8
 800aa2e:	4629      	mov	r1, r5
 800aa30:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800aa34:	f7ff f900 	bl	8009c38 <memset>
 800aa38:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800aa3c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800aa40:	4620      	mov	r0, r4
 800aa42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa44:	3468      	adds	r4, #104	; 0x68
 800aa46:	e7d9      	b.n	800a9fc <__sfp+0x1c>
 800aa48:	2104      	movs	r1, #4
 800aa4a:	4638      	mov	r0, r7
 800aa4c:	f7ff ff62 	bl	800a914 <__sfmoreglue>
 800aa50:	4604      	mov	r4, r0
 800aa52:	6030      	str	r0, [r6, #0]
 800aa54:	2800      	cmp	r0, #0
 800aa56:	d1d5      	bne.n	800aa04 <__sfp+0x24>
 800aa58:	f7ff ff78 	bl	800a94c <__sfp_lock_release>
 800aa5c:	230c      	movs	r3, #12
 800aa5e:	603b      	str	r3, [r7, #0]
 800aa60:	e7ee      	b.n	800aa40 <__sfp+0x60>
 800aa62:	bf00      	nop
 800aa64:	0800ae48 	.word	0x0800ae48
 800aa68:	ffff0001 	.word	0xffff0001

0800aa6c <_fwalk_reent>:
 800aa6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa70:	4606      	mov	r6, r0
 800aa72:	4688      	mov	r8, r1
 800aa74:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800aa78:	2700      	movs	r7, #0
 800aa7a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aa7e:	f1b9 0901 	subs.w	r9, r9, #1
 800aa82:	d505      	bpl.n	800aa90 <_fwalk_reent+0x24>
 800aa84:	6824      	ldr	r4, [r4, #0]
 800aa86:	2c00      	cmp	r4, #0
 800aa88:	d1f7      	bne.n	800aa7a <_fwalk_reent+0xe>
 800aa8a:	4638      	mov	r0, r7
 800aa8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa90:	89ab      	ldrh	r3, [r5, #12]
 800aa92:	2b01      	cmp	r3, #1
 800aa94:	d907      	bls.n	800aaa6 <_fwalk_reent+0x3a>
 800aa96:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aa9a:	3301      	adds	r3, #1
 800aa9c:	d003      	beq.n	800aaa6 <_fwalk_reent+0x3a>
 800aa9e:	4629      	mov	r1, r5
 800aaa0:	4630      	mov	r0, r6
 800aaa2:	47c0      	blx	r8
 800aaa4:	4307      	orrs	r7, r0
 800aaa6:	3568      	adds	r5, #104	; 0x68
 800aaa8:	e7e9      	b.n	800aa7e <_fwalk_reent+0x12>

0800aaaa <__retarget_lock_init_recursive>:
 800aaaa:	4770      	bx	lr

0800aaac <__retarget_lock_acquire_recursive>:
 800aaac:	4770      	bx	lr

0800aaae <__retarget_lock_release_recursive>:
 800aaae:	4770      	bx	lr

0800aab0 <__swhatbuf_r>:
 800aab0:	b570      	push	{r4, r5, r6, lr}
 800aab2:	460e      	mov	r6, r1
 800aab4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aab8:	2900      	cmp	r1, #0
 800aaba:	b096      	sub	sp, #88	; 0x58
 800aabc:	4614      	mov	r4, r2
 800aabe:	461d      	mov	r5, r3
 800aac0:	da08      	bge.n	800aad4 <__swhatbuf_r+0x24>
 800aac2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800aac6:	2200      	movs	r2, #0
 800aac8:	602a      	str	r2, [r5, #0]
 800aaca:	061a      	lsls	r2, r3, #24
 800aacc:	d410      	bmi.n	800aaf0 <__swhatbuf_r+0x40>
 800aace:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aad2:	e00e      	b.n	800aaf2 <__swhatbuf_r+0x42>
 800aad4:	466a      	mov	r2, sp
 800aad6:	f000 f8fb 	bl	800acd0 <_fstat_r>
 800aada:	2800      	cmp	r0, #0
 800aadc:	dbf1      	blt.n	800aac2 <__swhatbuf_r+0x12>
 800aade:	9a01      	ldr	r2, [sp, #4]
 800aae0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800aae4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800aae8:	425a      	negs	r2, r3
 800aaea:	415a      	adcs	r2, r3
 800aaec:	602a      	str	r2, [r5, #0]
 800aaee:	e7ee      	b.n	800aace <__swhatbuf_r+0x1e>
 800aaf0:	2340      	movs	r3, #64	; 0x40
 800aaf2:	2000      	movs	r0, #0
 800aaf4:	6023      	str	r3, [r4, #0]
 800aaf6:	b016      	add	sp, #88	; 0x58
 800aaf8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800aafc <__smakebuf_r>:
 800aafc:	898b      	ldrh	r3, [r1, #12]
 800aafe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ab00:	079d      	lsls	r5, r3, #30
 800ab02:	4606      	mov	r6, r0
 800ab04:	460c      	mov	r4, r1
 800ab06:	d507      	bpl.n	800ab18 <__smakebuf_r+0x1c>
 800ab08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ab0c:	6023      	str	r3, [r4, #0]
 800ab0e:	6123      	str	r3, [r4, #16]
 800ab10:	2301      	movs	r3, #1
 800ab12:	6163      	str	r3, [r4, #20]
 800ab14:	b002      	add	sp, #8
 800ab16:	bd70      	pop	{r4, r5, r6, pc}
 800ab18:	ab01      	add	r3, sp, #4
 800ab1a:	466a      	mov	r2, sp
 800ab1c:	f7ff ffc8 	bl	800aab0 <__swhatbuf_r>
 800ab20:	9900      	ldr	r1, [sp, #0]
 800ab22:	4605      	mov	r5, r0
 800ab24:	4630      	mov	r0, r6
 800ab26:	f7ff f8fb 	bl	8009d20 <_malloc_r>
 800ab2a:	b948      	cbnz	r0, 800ab40 <__smakebuf_r+0x44>
 800ab2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab30:	059a      	lsls	r2, r3, #22
 800ab32:	d4ef      	bmi.n	800ab14 <__smakebuf_r+0x18>
 800ab34:	f023 0303 	bic.w	r3, r3, #3
 800ab38:	f043 0302 	orr.w	r3, r3, #2
 800ab3c:	81a3      	strh	r3, [r4, #12]
 800ab3e:	e7e3      	b.n	800ab08 <__smakebuf_r+0xc>
 800ab40:	4b0d      	ldr	r3, [pc, #52]	; (800ab78 <__smakebuf_r+0x7c>)
 800ab42:	62b3      	str	r3, [r6, #40]	; 0x28
 800ab44:	89a3      	ldrh	r3, [r4, #12]
 800ab46:	6020      	str	r0, [r4, #0]
 800ab48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab4c:	81a3      	strh	r3, [r4, #12]
 800ab4e:	9b00      	ldr	r3, [sp, #0]
 800ab50:	6163      	str	r3, [r4, #20]
 800ab52:	9b01      	ldr	r3, [sp, #4]
 800ab54:	6120      	str	r0, [r4, #16]
 800ab56:	b15b      	cbz	r3, 800ab70 <__smakebuf_r+0x74>
 800ab58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab5c:	4630      	mov	r0, r6
 800ab5e:	f000 f8c9 	bl	800acf4 <_isatty_r>
 800ab62:	b128      	cbz	r0, 800ab70 <__smakebuf_r+0x74>
 800ab64:	89a3      	ldrh	r3, [r4, #12]
 800ab66:	f023 0303 	bic.w	r3, r3, #3
 800ab6a:	f043 0301 	orr.w	r3, r3, #1
 800ab6e:	81a3      	strh	r3, [r4, #12]
 800ab70:	89a0      	ldrh	r0, [r4, #12]
 800ab72:	4305      	orrs	r5, r0
 800ab74:	81a5      	strh	r5, [r4, #12]
 800ab76:	e7cd      	b.n	800ab14 <__smakebuf_r+0x18>
 800ab78:	0800a909 	.word	0x0800a909

0800ab7c <_raise_r>:
 800ab7c:	291f      	cmp	r1, #31
 800ab7e:	b538      	push	{r3, r4, r5, lr}
 800ab80:	4604      	mov	r4, r0
 800ab82:	460d      	mov	r5, r1
 800ab84:	d904      	bls.n	800ab90 <_raise_r+0x14>
 800ab86:	2316      	movs	r3, #22
 800ab88:	6003      	str	r3, [r0, #0]
 800ab8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ab8e:	bd38      	pop	{r3, r4, r5, pc}
 800ab90:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ab92:	b112      	cbz	r2, 800ab9a <_raise_r+0x1e>
 800ab94:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ab98:	b94b      	cbnz	r3, 800abae <_raise_r+0x32>
 800ab9a:	4620      	mov	r0, r4
 800ab9c:	f000 f830 	bl	800ac00 <_getpid_r>
 800aba0:	462a      	mov	r2, r5
 800aba2:	4601      	mov	r1, r0
 800aba4:	4620      	mov	r0, r4
 800aba6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800abaa:	f000 b817 	b.w	800abdc <_kill_r>
 800abae:	2b01      	cmp	r3, #1
 800abb0:	d00a      	beq.n	800abc8 <_raise_r+0x4c>
 800abb2:	1c59      	adds	r1, r3, #1
 800abb4:	d103      	bne.n	800abbe <_raise_r+0x42>
 800abb6:	2316      	movs	r3, #22
 800abb8:	6003      	str	r3, [r0, #0]
 800abba:	2001      	movs	r0, #1
 800abbc:	e7e7      	b.n	800ab8e <_raise_r+0x12>
 800abbe:	2400      	movs	r4, #0
 800abc0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800abc4:	4628      	mov	r0, r5
 800abc6:	4798      	blx	r3
 800abc8:	2000      	movs	r0, #0
 800abca:	e7e0      	b.n	800ab8e <_raise_r+0x12>

0800abcc <raise>:
 800abcc:	4b02      	ldr	r3, [pc, #8]	; (800abd8 <raise+0xc>)
 800abce:	4601      	mov	r1, r0
 800abd0:	6818      	ldr	r0, [r3, #0]
 800abd2:	f7ff bfd3 	b.w	800ab7c <_raise_r>
 800abd6:	bf00      	nop
 800abd8:	2000001c 	.word	0x2000001c

0800abdc <_kill_r>:
 800abdc:	b538      	push	{r3, r4, r5, lr}
 800abde:	4d07      	ldr	r5, [pc, #28]	; (800abfc <_kill_r+0x20>)
 800abe0:	2300      	movs	r3, #0
 800abe2:	4604      	mov	r4, r0
 800abe4:	4608      	mov	r0, r1
 800abe6:	4611      	mov	r1, r2
 800abe8:	602b      	str	r3, [r5, #0]
 800abea:	f7fe feeb 	bl	80099c4 <_kill>
 800abee:	1c43      	adds	r3, r0, #1
 800abf0:	d102      	bne.n	800abf8 <_kill_r+0x1c>
 800abf2:	682b      	ldr	r3, [r5, #0]
 800abf4:	b103      	cbz	r3, 800abf8 <_kill_r+0x1c>
 800abf6:	6023      	str	r3, [r4, #0]
 800abf8:	bd38      	pop	{r3, r4, r5, pc}
 800abfa:	bf00      	nop
 800abfc:	20003008 	.word	0x20003008

0800ac00 <_getpid_r>:
 800ac00:	f7fe bed8 	b.w	80099b4 <_getpid>

0800ac04 <__sread>:
 800ac04:	b510      	push	{r4, lr}
 800ac06:	460c      	mov	r4, r1
 800ac08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac0c:	f000 f894 	bl	800ad38 <_read_r>
 800ac10:	2800      	cmp	r0, #0
 800ac12:	bfab      	itete	ge
 800ac14:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ac16:	89a3      	ldrhlt	r3, [r4, #12]
 800ac18:	181b      	addge	r3, r3, r0
 800ac1a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ac1e:	bfac      	ite	ge
 800ac20:	6563      	strge	r3, [r4, #84]	; 0x54
 800ac22:	81a3      	strhlt	r3, [r4, #12]
 800ac24:	bd10      	pop	{r4, pc}

0800ac26 <__swrite>:
 800ac26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac2a:	461f      	mov	r7, r3
 800ac2c:	898b      	ldrh	r3, [r1, #12]
 800ac2e:	05db      	lsls	r3, r3, #23
 800ac30:	4605      	mov	r5, r0
 800ac32:	460c      	mov	r4, r1
 800ac34:	4616      	mov	r6, r2
 800ac36:	d505      	bpl.n	800ac44 <__swrite+0x1e>
 800ac38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac3c:	2302      	movs	r3, #2
 800ac3e:	2200      	movs	r2, #0
 800ac40:	f000 f868 	bl	800ad14 <_lseek_r>
 800ac44:	89a3      	ldrh	r3, [r4, #12]
 800ac46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ac4e:	81a3      	strh	r3, [r4, #12]
 800ac50:	4632      	mov	r2, r6
 800ac52:	463b      	mov	r3, r7
 800ac54:	4628      	mov	r0, r5
 800ac56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac5a:	f000 b817 	b.w	800ac8c <_write_r>

0800ac5e <__sseek>:
 800ac5e:	b510      	push	{r4, lr}
 800ac60:	460c      	mov	r4, r1
 800ac62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac66:	f000 f855 	bl	800ad14 <_lseek_r>
 800ac6a:	1c43      	adds	r3, r0, #1
 800ac6c:	89a3      	ldrh	r3, [r4, #12]
 800ac6e:	bf15      	itete	ne
 800ac70:	6560      	strne	r0, [r4, #84]	; 0x54
 800ac72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ac76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ac7a:	81a3      	strheq	r3, [r4, #12]
 800ac7c:	bf18      	it	ne
 800ac7e:	81a3      	strhne	r3, [r4, #12]
 800ac80:	bd10      	pop	{r4, pc}

0800ac82 <__sclose>:
 800ac82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac86:	f000 b813 	b.w	800acb0 <_close_r>
	...

0800ac8c <_write_r>:
 800ac8c:	b538      	push	{r3, r4, r5, lr}
 800ac8e:	4d07      	ldr	r5, [pc, #28]	; (800acac <_write_r+0x20>)
 800ac90:	4604      	mov	r4, r0
 800ac92:	4608      	mov	r0, r1
 800ac94:	4611      	mov	r1, r2
 800ac96:	2200      	movs	r2, #0
 800ac98:	602a      	str	r2, [r5, #0]
 800ac9a:	461a      	mov	r2, r3
 800ac9c:	f7fe fec9 	bl	8009a32 <_write>
 800aca0:	1c43      	adds	r3, r0, #1
 800aca2:	d102      	bne.n	800acaa <_write_r+0x1e>
 800aca4:	682b      	ldr	r3, [r5, #0]
 800aca6:	b103      	cbz	r3, 800acaa <_write_r+0x1e>
 800aca8:	6023      	str	r3, [r4, #0]
 800acaa:	bd38      	pop	{r3, r4, r5, pc}
 800acac:	20003008 	.word	0x20003008

0800acb0 <_close_r>:
 800acb0:	b538      	push	{r3, r4, r5, lr}
 800acb2:	4d06      	ldr	r5, [pc, #24]	; (800accc <_close_r+0x1c>)
 800acb4:	2300      	movs	r3, #0
 800acb6:	4604      	mov	r4, r0
 800acb8:	4608      	mov	r0, r1
 800acba:	602b      	str	r3, [r5, #0]
 800acbc:	f7fe fed5 	bl	8009a6a <_close>
 800acc0:	1c43      	adds	r3, r0, #1
 800acc2:	d102      	bne.n	800acca <_close_r+0x1a>
 800acc4:	682b      	ldr	r3, [r5, #0]
 800acc6:	b103      	cbz	r3, 800acca <_close_r+0x1a>
 800acc8:	6023      	str	r3, [r4, #0]
 800acca:	bd38      	pop	{r3, r4, r5, pc}
 800accc:	20003008 	.word	0x20003008

0800acd0 <_fstat_r>:
 800acd0:	b538      	push	{r3, r4, r5, lr}
 800acd2:	4d07      	ldr	r5, [pc, #28]	; (800acf0 <_fstat_r+0x20>)
 800acd4:	2300      	movs	r3, #0
 800acd6:	4604      	mov	r4, r0
 800acd8:	4608      	mov	r0, r1
 800acda:	4611      	mov	r1, r2
 800acdc:	602b      	str	r3, [r5, #0]
 800acde:	f7fe fed0 	bl	8009a82 <_fstat>
 800ace2:	1c43      	adds	r3, r0, #1
 800ace4:	d102      	bne.n	800acec <_fstat_r+0x1c>
 800ace6:	682b      	ldr	r3, [r5, #0]
 800ace8:	b103      	cbz	r3, 800acec <_fstat_r+0x1c>
 800acea:	6023      	str	r3, [r4, #0]
 800acec:	bd38      	pop	{r3, r4, r5, pc}
 800acee:	bf00      	nop
 800acf0:	20003008 	.word	0x20003008

0800acf4 <_isatty_r>:
 800acf4:	b538      	push	{r3, r4, r5, lr}
 800acf6:	4d06      	ldr	r5, [pc, #24]	; (800ad10 <_isatty_r+0x1c>)
 800acf8:	2300      	movs	r3, #0
 800acfa:	4604      	mov	r4, r0
 800acfc:	4608      	mov	r0, r1
 800acfe:	602b      	str	r3, [r5, #0]
 800ad00:	f7fe fecf 	bl	8009aa2 <_isatty>
 800ad04:	1c43      	adds	r3, r0, #1
 800ad06:	d102      	bne.n	800ad0e <_isatty_r+0x1a>
 800ad08:	682b      	ldr	r3, [r5, #0]
 800ad0a:	b103      	cbz	r3, 800ad0e <_isatty_r+0x1a>
 800ad0c:	6023      	str	r3, [r4, #0]
 800ad0e:	bd38      	pop	{r3, r4, r5, pc}
 800ad10:	20003008 	.word	0x20003008

0800ad14 <_lseek_r>:
 800ad14:	b538      	push	{r3, r4, r5, lr}
 800ad16:	4d07      	ldr	r5, [pc, #28]	; (800ad34 <_lseek_r+0x20>)
 800ad18:	4604      	mov	r4, r0
 800ad1a:	4608      	mov	r0, r1
 800ad1c:	4611      	mov	r1, r2
 800ad1e:	2200      	movs	r2, #0
 800ad20:	602a      	str	r2, [r5, #0]
 800ad22:	461a      	mov	r2, r3
 800ad24:	f7fe fec8 	bl	8009ab8 <_lseek>
 800ad28:	1c43      	adds	r3, r0, #1
 800ad2a:	d102      	bne.n	800ad32 <_lseek_r+0x1e>
 800ad2c:	682b      	ldr	r3, [r5, #0]
 800ad2e:	b103      	cbz	r3, 800ad32 <_lseek_r+0x1e>
 800ad30:	6023      	str	r3, [r4, #0]
 800ad32:	bd38      	pop	{r3, r4, r5, pc}
 800ad34:	20003008 	.word	0x20003008

0800ad38 <_read_r>:
 800ad38:	b538      	push	{r3, r4, r5, lr}
 800ad3a:	4d07      	ldr	r5, [pc, #28]	; (800ad58 <_read_r+0x20>)
 800ad3c:	4604      	mov	r4, r0
 800ad3e:	4608      	mov	r0, r1
 800ad40:	4611      	mov	r1, r2
 800ad42:	2200      	movs	r2, #0
 800ad44:	602a      	str	r2, [r5, #0]
 800ad46:	461a      	mov	r2, r3
 800ad48:	f7fe fe56 	bl	80099f8 <_read>
 800ad4c:	1c43      	adds	r3, r0, #1
 800ad4e:	d102      	bne.n	800ad56 <_read_r+0x1e>
 800ad50:	682b      	ldr	r3, [r5, #0]
 800ad52:	b103      	cbz	r3, 800ad56 <_read_r+0x1e>
 800ad54:	6023      	str	r3, [r4, #0]
 800ad56:	bd38      	pop	{r3, r4, r5, pc}
 800ad58:	20003008 	.word	0x20003008

0800ad5c <_gettimeofday>:
 800ad5c:	4b02      	ldr	r3, [pc, #8]	; (800ad68 <_gettimeofday+0xc>)
 800ad5e:	2258      	movs	r2, #88	; 0x58
 800ad60:	601a      	str	r2, [r3, #0]
 800ad62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ad66:	4770      	bx	lr
 800ad68:	20003008 	.word	0x20003008

0800ad6c <_init>:
 800ad6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad6e:	bf00      	nop
 800ad70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad72:	bc08      	pop	{r3}
 800ad74:	469e      	mov	lr, r3
 800ad76:	4770      	bx	lr

0800ad78 <_fini>:
 800ad78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad7a:	bf00      	nop
 800ad7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad7e:	bc08      	pop	{r3}
 800ad80:	469e      	mov	lr, r3
 800ad82:	4770      	bx	lr
